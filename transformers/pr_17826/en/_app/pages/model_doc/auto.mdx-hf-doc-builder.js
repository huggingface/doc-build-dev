import{S as pQt,i as _Qt,s as uQt,e as a,k as l,w as F,t as o,M as bQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as vQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xrt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function FQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,ZA,Pf,Oe,Qe,xi,Rn,eL,Pn,Bn,oL,$i,In,rL,ki,Bf,ka;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),ZA=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Rn=o("NewModel"),eL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),oL=o(`, make sure its
`),$i=a("code"),In=o("config_class"),rL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),ka=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var RS=s(p);m=r(RS,"NewModelConfig"),RS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var PS=s(Ai);Rf=r(PS,"model_type"),PS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var BS=s(Li);yi=r(BS,'"new-model"'),BS.forEach(t),ZA=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Sa=s(xi);Rn=r(Sa,"NewModel"),Sa.forEach(t),eL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var IS=s(Pn);Bn=r(IS,"PreTrainedModel"),IS.forEach(t),oL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var If=s($i);In=r(If,"config_class"),If.forEach(t),rL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var NS=s(ki);Bf=r(NS,"NewModelConfig"),NS.forEach(t),ka=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,ZA),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Rn),e(Oe,eL),e(Oe,Pn),e(Pn,Bn),e(Oe,oL),e(Oe,$i),e($i,In),e(Oe,rL),e(Oe,ki),e(ki,Bf),e(Oe,ka)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,ZA,Pf,Oe,Qe,xi,Rn,eL,Pn,Bn,oL,$i,In,rL,ki,Bf,ka,We,Ae,RS,Si,PS,BS,Co,Sa,IS,If,NS,lHe,QVe,Ri,Nf,bae,tL,iHe,vae,dHe,WVe,Nn,cHe,Fae,fHe,mHe,Tae,gHe,hHe,HVe,aL,UVe,qS,pHe,JVe,qf,YVe,Pi,jf,Mae,nL,_He,Eae,uHe,KVe,wo,sL,bHe,lL,vHe,jS,FHe,THe,MHe,iL,EHe,Cae,CHe,wHe,AHe,Ar,dL,LHe,wae,yHe,xHe,Bi,$He,Aae,kHe,SHe,Lae,RHe,PHe,BHe,A,Df,yae,IHe,NHe,DS,qHe,jHe,DHe,Gf,xae,GHe,OHe,GS,VHe,XHe,zHe,Of,$ae,QHe,WHe,OS,HHe,UHe,JHe,Vf,kae,YHe,KHe,VS,ZHe,eUe,oUe,Xf,Sae,rUe,tUe,XS,aUe,nUe,sUe,zf,Rae,lUe,iUe,zS,dUe,cUe,fUe,Qf,Pae,mUe,gUe,QS,hUe,pUe,_Ue,Wf,Bae,uUe,bUe,WS,vUe,FUe,TUe,Hf,Iae,MUe,EUe,HS,CUe,wUe,AUe,Uf,Nae,LUe,yUe,US,xUe,$Ue,kUe,Jf,qae,SUe,RUe,JS,PUe,BUe,IUe,Yf,jae,NUe,qUe,YS,jUe,DUe,GUe,Kf,Dae,OUe,VUe,KS,XUe,zUe,QUe,Zf,Gae,WUe,HUe,ZS,UUe,JUe,YUe,em,Oae,KUe,ZUe,eR,eJe,oJe,rJe,om,Vae,tJe,aJe,oR,nJe,sJe,lJe,rm,Xae,iJe,dJe,rR,cJe,fJe,mJe,tm,zae,gJe,hJe,tR,pJe,_Je,uJe,am,Qae,bJe,vJe,aR,FJe,TJe,MJe,nm,Wae,EJe,CJe,nR,wJe,AJe,LJe,sm,Hae,yJe,xJe,sR,$Je,kJe,SJe,lm,Uae,RJe,PJe,lR,BJe,IJe,NJe,im,Jae,qJe,jJe,iR,DJe,GJe,OJe,dm,Yae,VJe,XJe,dR,zJe,QJe,WJe,cm,Kae,HJe,UJe,cR,JJe,YJe,KJe,fm,Zae,ZJe,eYe,fR,oYe,rYe,tYe,mm,ene,aYe,nYe,mR,sYe,lYe,iYe,gm,one,dYe,cYe,gR,fYe,mYe,gYe,hm,rne,hYe,pYe,hR,_Ye,uYe,bYe,pm,tne,vYe,FYe,pR,TYe,MYe,EYe,_m,ane,CYe,wYe,_R,AYe,LYe,yYe,um,nne,xYe,$Ye,uR,kYe,SYe,RYe,bm,sne,PYe,BYe,bR,IYe,NYe,qYe,vm,lne,jYe,DYe,vR,GYe,OYe,VYe,Fm,ine,XYe,zYe,FR,QYe,WYe,HYe,Tm,dne,UYe,JYe,TR,YYe,KYe,ZYe,Mm,cne,eKe,oKe,MR,rKe,tKe,aKe,Em,fne,nKe,sKe,ER,lKe,iKe,dKe,Cm,mne,cKe,fKe,CR,mKe,gKe,hKe,wm,gne,pKe,_Ke,wR,uKe,bKe,vKe,Am,hne,FKe,TKe,AR,MKe,EKe,CKe,Lm,pne,wKe,AKe,LR,LKe,yKe,xKe,ym,_ne,$Ke,kKe,yR,SKe,RKe,PKe,xm,une,BKe,IKe,xR,NKe,qKe,jKe,$m,bne,DKe,GKe,$R,OKe,VKe,XKe,km,vne,zKe,QKe,kR,WKe,HKe,UKe,Sm,Fne,JKe,YKe,SR,KKe,ZKe,eZe,Rm,Tne,oZe,rZe,RR,tZe,aZe,nZe,Pm,Mne,sZe,lZe,PR,iZe,dZe,cZe,Bm,Ene,fZe,mZe,BR,gZe,hZe,pZe,Im,Cne,_Ze,uZe,IR,bZe,vZe,FZe,Nm,wne,TZe,MZe,NR,EZe,CZe,wZe,qm,Ane,AZe,LZe,qR,yZe,xZe,$Ze,jm,Lne,kZe,SZe,jR,RZe,PZe,BZe,Dm,yne,IZe,NZe,DR,qZe,jZe,DZe,Gm,xne,GZe,OZe,GR,VZe,XZe,zZe,Om,$ne,QZe,WZe,OR,HZe,UZe,JZe,Vm,kne,YZe,KZe,VR,ZZe,eeo,oeo,Xm,Sne,reo,teo,XR,aeo,neo,seo,zm,Rne,leo,ieo,zR,deo,ceo,feo,Qm,Pne,meo,geo,QR,heo,peo,_eo,Wm,Bne,ueo,beo,WR,veo,Feo,Teo,Hm,Ine,Meo,Eeo,HR,Ceo,weo,Aeo,Um,Nne,Leo,yeo,UR,xeo,$eo,keo,Jm,qne,Seo,Reo,JR,Peo,Beo,Ieo,Ym,jne,Neo,qeo,YR,jeo,Deo,Geo,Km,Dne,Oeo,Veo,KR,Xeo,zeo,Qeo,Zm,Gne,Weo,Heo,ZR,Ueo,Jeo,Yeo,eg,One,Keo,Zeo,eP,eoo,ooo,roo,og,Vne,too,aoo,oP,noo,soo,loo,rg,Xne,ioo,doo,rP,coo,foo,moo,tg,zne,goo,hoo,tP,poo,_oo,uoo,ag,Qne,boo,voo,aP,Foo,Too,Moo,ng,Wne,Eoo,Coo,nP,woo,Aoo,Loo,sg,Hne,yoo,xoo,sP,$oo,koo,Soo,lg,Une,Roo,Poo,lP,Boo,Ioo,Noo,ig,Jne,qoo,joo,iP,Doo,Goo,Ooo,dg,Yne,Voo,Xoo,dP,zoo,Qoo,Woo,cg,Kne,Hoo,Uoo,cP,Joo,Yoo,Koo,fg,Zne,Zoo,ero,fP,oro,rro,tro,mg,ese,aro,nro,mP,sro,lro,iro,gg,ose,dro,cro,gP,fro,mro,gro,hg,rse,hro,pro,hP,_ro,uro,bro,pg,tse,vro,Fro,pP,Tro,Mro,Ero,_g,ase,Cro,wro,_P,Aro,Lro,yro,ug,nse,xro,$ro,uP,kro,Sro,Rro,bg,sse,Pro,Bro,bP,Iro,Nro,qro,vg,lse,jro,Dro,vP,Gro,Oro,Vro,Fg,ise,Xro,zro,FP,Qro,Wro,Hro,Tg,dse,Uro,Jro,TP,Yro,Kro,Zro,Mg,cse,eto,oto,MP,rto,tto,ato,Eg,fse,nto,sto,EP,lto,ito,dto,Cg,mse,cto,fto,CP,mto,gto,hto,wg,gse,pto,_to,wP,uto,bto,vto,Ag,hse,Fto,Tto,AP,Mto,Eto,Cto,Lg,pse,wto,Ato,LP,Lto,yto,xto,yg,_se,$to,kto,yP,Sto,Rto,Pto,xg,use,Bto,Ito,xP,Nto,qto,jto,$g,bse,Dto,Gto,$P,Oto,Vto,Xto,kg,vse,zto,Qto,kP,Wto,Hto,Uto,Sg,Fse,Jto,Yto,SP,Kto,Zto,eao,Rg,Tse,oao,rao,RP,tao,aao,nao,Pg,Mse,sao,lao,PP,iao,dao,cao,Bg,Ese,fao,mao,BP,gao,hao,pao,Ig,Cse,_ao,uao,IP,bao,vao,Fao,Ng,wse,Tao,Mao,NP,Eao,Cao,wao,qg,Ase,Aao,Lao,qP,yao,xao,$ao,jg,Lse,kao,Sao,jP,Rao,Pao,Bao,Dg,yse,Iao,Nao,DP,qao,jao,Dao,Gg,xse,Gao,Oao,GP,Vao,Xao,zao,Og,$se,Qao,Wao,OP,Hao,Uao,Jao,Vg,kse,Yao,Kao,VP,Zao,eno,ono,Xg,Sse,rno,tno,XP,ano,nno,sno,zg,Rse,lno,ino,zP,dno,cno,fno,Qg,Pse,mno,gno,QP,hno,pno,_no,Wg,Bse,uno,bno,WP,vno,Fno,Tno,Hg,Ise,Mno,Eno,HP,Cno,wno,Ano,Ug,Nse,Lno,yno,UP,xno,$no,kno,Jg,qse,Sno,Rno,JP,Pno,Bno,Ino,Yg,Nno,Kg,cL,qno,jse,jno,ZVe,Ii,Zg,Dse,fL,Dno,Gse,Gno,eXe,Ao,mL,Ono,gL,Vno,YP,Xno,zno,Qno,hL,Wno,Ose,Hno,Uno,Jno,Lr,pL,Yno,Vse,Kno,Zno,Ra,eso,Xse,oso,rso,zse,tso,aso,Qse,nso,sso,lso,k,qn,Wse,iso,dso,KP,cso,fso,ZP,mso,gso,hso,jn,Hse,pso,_so,eB,uso,bso,oB,vso,Fso,Tso,Dn,Use,Mso,Eso,rB,Cso,wso,tB,Aso,Lso,yso,eh,Jse,xso,$so,aB,kso,Sso,Rso,Gn,Yse,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,oh,Kse,Gso,Oso,lB,Vso,Xso,zso,rh,Zse,Qso,Wso,iB,Hso,Uso,Jso,th,ele,Yso,Kso,dB,Zso,elo,olo,On,ole,rlo,tlo,cB,alo,nlo,fB,slo,llo,ilo,Vn,rle,dlo,clo,mB,flo,mlo,gB,glo,hlo,plo,Xn,tle,_lo,ulo,hB,blo,vlo,pB,Flo,Tlo,Mlo,ah,ale,Elo,Clo,_B,wlo,Alo,Llo,nh,nle,ylo,xlo,uB,$lo,klo,Slo,sh,sle,Rlo,Plo,bB,Blo,Ilo,Nlo,zn,lle,qlo,jlo,vB,Dlo,Glo,FB,Olo,Vlo,Xlo,lh,ile,zlo,Qlo,TB,Wlo,Hlo,Ulo,Qn,dle,Jlo,Ylo,MB,Klo,Zlo,EB,eio,oio,rio,Wn,cle,tio,aio,CB,nio,sio,wB,lio,iio,dio,Hn,fle,cio,fio,AB,mio,gio,LB,hio,pio,_io,Un,mle,uio,bio,yB,vio,Fio,xB,Tio,Mio,Eio,ih,gle,Cio,wio,$B,Aio,Lio,yio,Jn,hle,xio,$io,kB,kio,Sio,SB,Rio,Pio,Bio,Yn,ple,Iio,Nio,RB,qio,jio,PB,Dio,Gio,Oio,Kn,_le,Vio,Xio,BB,zio,Qio,IB,Wio,Hio,Uio,Zn,ule,Jio,Yio,NB,Kio,Zio,qB,edo,odo,rdo,es,ble,tdo,ado,jB,ndo,sdo,DB,ldo,ido,ddo,os,vle,cdo,fdo,GB,mdo,gdo,OB,hdo,pdo,_do,dh,Fle,udo,bdo,VB,vdo,Fdo,Tdo,rs,Tle,Mdo,Edo,XB,Cdo,wdo,zB,Ado,Ldo,ydo,ch,Mle,xdo,$do,QB,kdo,Sdo,Rdo,ts,Ele,Pdo,Bdo,WB,Ido,Ndo,HB,qdo,jdo,Ddo,as,Cle,Gdo,Odo,UB,Vdo,Xdo,JB,zdo,Qdo,Wdo,ns,wle,Hdo,Udo,YB,Jdo,Ydo,KB,Kdo,Zdo,eco,fh,Ale,oco,rco,ZB,tco,aco,nco,ss,Lle,sco,lco,eI,ico,dco,oI,cco,fco,mco,ls,yle,gco,hco,rI,pco,_co,tI,uco,bco,vco,is,xle,Fco,Tco,aI,Mco,Eco,nI,Cco,wco,Aco,mh,$le,Lco,yco,sI,xco,$co,kco,ds,kle,Sco,Rco,lI,Pco,Bco,iI,Ico,Nco,qco,gh,Sle,jco,Dco,Rle,Gco,Oco,Vco,cs,Ple,Xco,zco,dI,Qco,Wco,cI,Hco,Uco,Jco,fs,Ble,Yco,Kco,fI,Zco,efo,mI,ofo,rfo,tfo,ms,Ile,afo,nfo,gI,sfo,lfo,hI,ifo,dfo,cfo,gs,Nle,ffo,mfo,pI,gfo,hfo,_I,pfo,_fo,ufo,hs,qle,bfo,vfo,uI,Ffo,Tfo,bI,Mfo,Efo,Cfo,ps,jle,wfo,Afo,vI,Lfo,yfo,FI,xfo,$fo,kfo,_s,Dle,Sfo,Rfo,TI,Pfo,Bfo,MI,Ifo,Nfo,qfo,hh,Gle,jfo,Dfo,EI,Gfo,Ofo,Vfo,us,Ole,Xfo,zfo,CI,Qfo,Wfo,wI,Hfo,Ufo,Jfo,ph,Vle,Yfo,Kfo,AI,Zfo,emo,omo,_h,Xle,rmo,tmo,LI,amo,nmo,smo,bs,zle,lmo,imo,yI,dmo,cmo,xI,fmo,mmo,gmo,vs,Qle,hmo,pmo,$I,_mo,umo,kI,bmo,vmo,Fmo,Fs,Wle,Tmo,Mmo,SI,Emo,Cmo,RI,wmo,Amo,Lmo,uh,Hle,ymo,xmo,PI,$mo,kmo,Smo,Ts,Ule,Rmo,Pmo,BI,Bmo,Imo,II,Nmo,qmo,jmo,Ms,Jle,Dmo,Gmo,NI,Omo,Vmo,qI,Xmo,zmo,Qmo,Es,Yle,Wmo,Hmo,jI,Umo,Jmo,DI,Ymo,Kmo,Zmo,Cs,Kle,ego,ogo,GI,rgo,tgo,OI,ago,ngo,sgo,ws,Zle,lgo,igo,VI,dgo,cgo,XI,fgo,mgo,ggo,As,eie,hgo,pgo,zI,_go,ugo,QI,bgo,vgo,Fgo,Ls,oie,Tgo,Mgo,WI,Ego,Cgo,HI,wgo,Ago,Lgo,bh,rie,ygo,xgo,UI,$go,kgo,Sgo,ys,tie,Rgo,Pgo,JI,Bgo,Igo,YI,Ngo,qgo,jgo,vh,aie,Dgo,Ggo,KI,Ogo,Vgo,Xgo,Fh,nie,zgo,Qgo,ZI,Wgo,Hgo,Ugo,Th,sie,Jgo,Ygo,eN,Kgo,Zgo,eho,Mh,lie,oho,rho,oN,tho,aho,nho,xs,iie,sho,lho,rN,iho,dho,tN,cho,fho,mho,Eh,die,gho,hho,aN,pho,_ho,uho,$s,cie,bho,vho,nN,Fho,Tho,sN,Mho,Eho,Cho,ks,fie,who,Aho,lN,Lho,yho,iN,xho,$ho,kho,Ss,mie,Sho,Rho,dN,Pho,Bho,cN,Iho,Nho,qho,Rs,gie,jho,Dho,fN,Gho,Oho,mN,Vho,Xho,zho,Ps,hie,Qho,Who,gN,Hho,Uho,hN,Jho,Yho,Kho,Bs,pie,Zho,epo,pN,opo,rpo,_N,tpo,apo,npo,Ch,_ie,spo,lpo,uN,ipo,dpo,cpo,wh,uie,fpo,mpo,bN,gpo,hpo,ppo,Is,bie,_po,upo,vN,bpo,vpo,FN,Fpo,Tpo,Mpo,Ns,vie,Epo,Cpo,TN,wpo,Apo,MN,Lpo,ypo,xpo,qs,Fie,$po,kpo,EN,Spo,Rpo,CN,Ppo,Bpo,Ipo,Ah,Tie,Npo,qpo,wN,jpo,Dpo,Gpo,Lh,Mie,Opo,Vpo,AN,Xpo,zpo,Qpo,yh,Eie,Wpo,Hpo,LN,Upo,Jpo,Ypo,js,Cie,Kpo,Zpo,yN,e_o,o_o,xN,r_o,t_o,a_o,Ds,wie,n_o,s_o,$N,l_o,i_o,kN,d_o,c_o,f_o,xh,Aie,m_o,g_o,SN,h_o,p_o,__o,$h,Lie,u_o,b_o,RN,v_o,F_o,T_o,kh,yie,M_o,E_o,PN,C_o,w_o,A_o,Gs,xie,L_o,y_o,BN,x_o,$_o,IN,k_o,S_o,R_o,Sh,$ie,P_o,B_o,NN,I_o,N_o,q_o,Rh,kie,j_o,D_o,qN,G_o,O_o,V_o,Os,Sie,X_o,z_o,jN,Q_o,W_o,DN,H_o,U_o,J_o,Vs,Rie,Y_o,K_o,GN,Z_o,euo,ON,ouo,ruo,tuo,Xs,Pie,auo,nuo,VN,suo,luo,XN,iuo,duo,cuo,zs,Bie,fuo,muo,zN,guo,huo,QN,puo,_uo,uuo,Ph,buo,Bh,_L,vuo,Iie,Fuo,oXe,Ni,Ih,Nie,uL,Tuo,qie,Muo,rXe,Lo,bL,Euo,vL,Cuo,WN,wuo,Auo,Luo,FL,yuo,jie,xuo,$uo,kuo,He,TL,Suo,Die,Ruo,Puo,Pa,Buo,Gie,Iuo,Nuo,Oie,quo,juo,Vie,Duo,Guo,Ouo,Y,Nh,Xie,Vuo,Xuo,HN,zuo,Quo,Wuo,qh,zie,Huo,Uuo,UN,Juo,Yuo,Kuo,jh,Qie,Zuo,e2o,JN,o2o,r2o,t2o,Dh,Wie,a2o,n2o,YN,s2o,l2o,i2o,Gh,Hie,d2o,c2o,KN,f2o,m2o,g2o,Oh,Uie,h2o,p2o,ZN,_2o,u2o,b2o,Vh,Jie,v2o,F2o,eq,T2o,M2o,E2o,Xh,Yie,C2o,w2o,oq,A2o,L2o,y2o,zh,Kie,x2o,$2o,rq,k2o,S2o,R2o,Qh,Zie,P2o,B2o,tq,I2o,N2o,q2o,Wh,ede,j2o,D2o,aq,G2o,O2o,V2o,Hh,ode,X2o,z2o,nq,Q2o,W2o,H2o,Uh,rde,U2o,J2o,sq,Y2o,K2o,Z2o,Jh,tde,e1o,o1o,lq,r1o,t1o,a1o,Yh,ade,n1o,s1o,iq,l1o,i1o,d1o,Kh,nde,c1o,f1o,dq,m1o,g1o,h1o,Zh,sde,p1o,_1o,cq,u1o,b1o,v1o,ep,lde,F1o,T1o,fq,M1o,E1o,C1o,op,ide,w1o,A1o,mq,L1o,y1o,x1o,rp,dde,$1o,k1o,gq,S1o,R1o,P1o,tp,cde,B1o,I1o,hq,N1o,q1o,j1o,ap,fde,D1o,G1o,pq,O1o,V1o,X1o,np,mde,z1o,Q1o,_q,W1o,H1o,U1o,sp,gde,J1o,Y1o,uq,K1o,Z1o,ebo,lp,hde,obo,rbo,bq,tbo,abo,nbo,ip,pde,sbo,lbo,vq,ibo,dbo,cbo,dp,_de,fbo,mbo,Fq,gbo,hbo,pbo,cp,ude,_bo,ubo,Tq,bbo,vbo,Fbo,fp,bde,Tbo,Mbo,Mq,Ebo,Cbo,wbo,mp,vde,Abo,Lbo,Eq,ybo,xbo,$bo,gp,Fde,kbo,Sbo,Cq,Rbo,Pbo,Bbo,hp,Tde,Ibo,Nbo,wq,qbo,jbo,Dbo,pp,Mde,Gbo,Obo,Aq,Vbo,Xbo,zbo,_p,Ede,Qbo,Wbo,Lq,Hbo,Ubo,Jbo,up,Ybo,bp,Kbo,vp,ML,Zbo,Cde,evo,tXe,qi,Fp,wde,EL,ovo,Ade,rvo,aXe,yo,CL,tvo,wL,avo,yq,nvo,svo,lvo,AL,ivo,Lde,dvo,cvo,fvo,Ue,LL,mvo,yde,gvo,hvo,ji,pvo,xde,_vo,uvo,$de,bvo,vvo,Fvo,he,Tp,kde,Tvo,Mvo,xq,Evo,Cvo,wvo,Mp,Sde,Avo,Lvo,Rde,yvo,xvo,$vo,Ep,Pde,kvo,Svo,$q,Rvo,Pvo,Bvo,Cp,Bde,Ivo,Nvo,kq,qvo,jvo,Dvo,wp,Ide,Gvo,Ovo,Sq,Vvo,Xvo,zvo,Ap,Nde,Qvo,Wvo,Rq,Hvo,Uvo,Jvo,Lp,qde,Yvo,Kvo,Pq,Zvo,eFo,oFo,yp,jde,rFo,tFo,Bq,aFo,nFo,sFo,xp,Dde,lFo,iFo,Iq,dFo,cFo,fFo,$p,Gde,mFo,gFo,Nq,hFo,pFo,_Fo,kp,Ode,uFo,bFo,qq,vFo,FFo,TFo,Sp,Vde,MFo,EFo,jq,CFo,wFo,AFo,Rp,Xde,LFo,yFo,Dq,xFo,$Fo,kFo,Pp,zde,SFo,RFo,Gq,PFo,BFo,IFo,Bp,Qde,NFo,qFo,Oq,jFo,DFo,GFo,Ip,Wde,OFo,VFo,Vq,XFo,zFo,QFo,Np,Hde,WFo,HFo,Xq,UFo,JFo,YFo,qp,Ude,KFo,ZFo,zq,e6o,o6o,r6o,jp,t6o,Dp,a6o,Gp,yL,n6o,Jde,s6o,nXe,Di,Op,Yde,xL,l6o,Kde,i6o,sXe,xo,$L,d6o,Gi,c6o,Qq,f6o,m6o,Wq,g6o,h6o,p6o,kL,_6o,Zde,u6o,b6o,v6o,lt,SL,F6o,ece,T6o,M6o,Oi,E6o,oce,C6o,w6o,Hq,A6o,L6o,y6o,Vp,x6o,Je,RL,$6o,rce,k6o,S6o,Ba,R6o,tce,P6o,B6o,ace,I6o,N6o,nce,q6o,j6o,D6o,y,Xp,sce,G6o,O6o,Uq,V6o,X6o,z6o,zp,lce,Q6o,W6o,Jq,H6o,U6o,J6o,Qp,ice,Y6o,K6o,Yq,Z6o,eTo,oTo,Wp,dce,rTo,tTo,Kq,aTo,nTo,sTo,Hp,cce,lTo,iTo,Zq,dTo,cTo,fTo,Up,fce,mTo,gTo,ej,hTo,pTo,_To,Jp,mce,uTo,bTo,oj,vTo,FTo,TTo,Yp,gce,MTo,ETo,rj,CTo,wTo,ATo,Kp,hce,LTo,yTo,tj,xTo,$To,kTo,Zp,pce,STo,RTo,aj,PTo,BTo,ITo,e_,_ce,NTo,qTo,nj,jTo,DTo,GTo,o_,uce,OTo,VTo,sj,XTo,zTo,QTo,r_,bce,WTo,HTo,lj,UTo,JTo,YTo,t_,vce,KTo,ZTo,ij,e7o,o7o,r7o,a_,Fce,t7o,a7o,dj,n7o,s7o,l7o,n_,Tce,i7o,d7o,cj,c7o,f7o,m7o,s_,Mce,g7o,h7o,fj,p7o,_7o,u7o,l_,Ece,b7o,v7o,mj,F7o,T7o,M7o,i_,Cce,E7o,C7o,gj,w7o,A7o,L7o,d_,wce,y7o,x7o,hj,$7o,k7o,S7o,c_,Ace,R7o,P7o,pj,B7o,I7o,N7o,f_,Lce,q7o,j7o,_j,D7o,G7o,O7o,m_,yce,V7o,X7o,uj,z7o,Q7o,W7o,g_,xce,H7o,U7o,bj,J7o,Y7o,K7o,h_,$ce,Z7o,e8o,vj,o8o,r8o,t8o,p_,kce,a8o,n8o,Fj,s8o,l8o,i8o,__,Sce,d8o,c8o,Tj,f8o,m8o,g8o,u_,Rce,h8o,p8o,Mj,_8o,u8o,b8o,b_,Pce,v8o,F8o,Ej,T8o,M8o,E8o,v_,Bce,C8o,w8o,Cj,A8o,L8o,y8o,F_,Ice,x8o,$8o,wj,k8o,S8o,R8o,T_,Nce,P8o,B8o,Aj,I8o,N8o,q8o,M_,qce,j8o,D8o,Lj,G8o,O8o,V8o,E_,jce,X8o,z8o,yj,Q8o,W8o,H8o,Qs,Dce,U8o,J8o,xj,Y8o,K8o,$j,Z8o,eMo,oMo,C_,Gce,rMo,tMo,kj,aMo,nMo,sMo,w_,Oce,lMo,iMo,Sj,dMo,cMo,fMo,A_,Vce,mMo,gMo,Rj,hMo,pMo,_Mo,L_,Xce,uMo,bMo,Pj,vMo,FMo,TMo,y_,zce,MMo,EMo,Bj,CMo,wMo,AMo,x_,Qce,LMo,yMo,Ij,xMo,$Mo,kMo,$_,Wce,SMo,RMo,Nj,PMo,BMo,IMo,k_,Hce,NMo,qMo,qj,jMo,DMo,GMo,S_,Uce,OMo,VMo,jj,XMo,zMo,QMo,R_,Jce,WMo,HMo,Yce,UMo,JMo,YMo,P_,Kce,KMo,ZMo,Dj,e4o,o4o,r4o,B_,Zce,t4o,a4o,Gj,n4o,s4o,l4o,I_,efe,i4o,d4o,Oj,c4o,f4o,m4o,N_,ofe,g4o,h4o,Vj,p4o,_4o,u4o,q_,rfe,b4o,v4o,Xj,F4o,T4o,M4o,j_,tfe,E4o,C4o,zj,w4o,A4o,L4o,D_,afe,y4o,x4o,Qj,$4o,k4o,S4o,G_,nfe,R4o,P4o,Wj,B4o,I4o,N4o,O_,sfe,q4o,j4o,Hj,D4o,G4o,O4o,V_,lfe,V4o,X4o,Uj,z4o,Q4o,W4o,X_,ife,H4o,U4o,Jj,J4o,Y4o,K4o,z_,dfe,Z4o,eEo,Yj,oEo,rEo,tEo,Q_,cfe,aEo,nEo,Kj,sEo,lEo,iEo,W_,ffe,dEo,cEo,Zj,fEo,mEo,gEo,H_,mfe,hEo,pEo,eD,_Eo,uEo,bEo,U_,gfe,vEo,FEo,oD,TEo,MEo,EEo,J_,hfe,CEo,wEo,rD,AEo,LEo,yEo,Y_,pfe,xEo,$Eo,tD,kEo,SEo,REo,K_,_fe,PEo,BEo,aD,IEo,NEo,qEo,Z_,ufe,jEo,DEo,nD,GEo,OEo,VEo,eu,bfe,XEo,zEo,sD,QEo,WEo,HEo,ou,vfe,UEo,JEo,lD,YEo,KEo,ZEo,ru,Ffe,eCo,oCo,iD,rCo,tCo,aCo,tu,Tfe,nCo,sCo,dD,lCo,iCo,dCo,au,Mfe,cCo,fCo,cD,mCo,gCo,hCo,nu,Efe,pCo,_Co,fD,uCo,bCo,vCo,su,Cfe,FCo,TCo,mD,MCo,ECo,CCo,lu,wfe,wCo,ACo,gD,LCo,yCo,xCo,iu,Afe,$Co,kCo,hD,SCo,RCo,PCo,du,Lfe,BCo,ICo,pD,NCo,qCo,jCo,cu,yfe,DCo,GCo,_D,OCo,VCo,XCo,fu,xfe,zCo,QCo,uD,WCo,HCo,UCo,mu,$fe,JCo,YCo,bD,KCo,ZCo,e3o,gu,kfe,o3o,r3o,vD,t3o,a3o,n3o,hu,Sfe,s3o,l3o,FD,i3o,d3o,c3o,pu,Rfe,f3o,m3o,TD,g3o,h3o,p3o,_u,Pfe,_3o,u3o,MD,b3o,v3o,F3o,uu,Bfe,T3o,M3o,ED,E3o,C3o,w3o,bu,Ife,A3o,L3o,CD,y3o,x3o,$3o,vu,Nfe,k3o,S3o,wD,R3o,P3o,B3o,Fu,qfe,I3o,N3o,AD,q3o,j3o,D3o,Tu,jfe,G3o,O3o,LD,V3o,X3o,z3o,Mu,Dfe,Q3o,W3o,yD,H3o,U3o,J3o,Eu,Gfe,Y3o,K3o,xD,Z3o,e5o,o5o,Cu,Ofe,r5o,t5o,$D,a5o,n5o,s5o,wu,Vfe,l5o,i5o,kD,d5o,c5o,f5o,Au,Xfe,m5o,g5o,SD,h5o,p5o,_5o,Lu,zfe,u5o,b5o,RD,v5o,F5o,T5o,yu,Qfe,M5o,E5o,PD,C5o,w5o,A5o,xu,Wfe,L5o,y5o,BD,x5o,$5o,k5o,$u,Hfe,S5o,R5o,ID,P5o,B5o,I5o,ku,Ufe,N5o,q5o,ND,j5o,D5o,G5o,Su,Jfe,O5o,V5o,qD,X5o,z5o,Q5o,Ru,Yfe,W5o,H5o,jD,U5o,J5o,Y5o,Pu,Kfe,K5o,Z5o,DD,e0o,o0o,r0o,Bu,Zfe,t0o,a0o,GD,n0o,s0o,l0o,Iu,eme,i0o,d0o,OD,c0o,f0o,m0o,Nu,ome,g0o,h0o,VD,p0o,_0o,u0o,qu,rme,b0o,v0o,XD,F0o,T0o,M0o,ju,tme,E0o,C0o,zD,w0o,A0o,L0o,Du,ame,y0o,x0o,QD,$0o,k0o,S0o,Gu,nme,R0o,P0o,WD,B0o,I0o,N0o,Ou,sme,q0o,j0o,HD,D0o,G0o,O0o,Vu,lme,V0o,X0o,UD,z0o,Q0o,W0o,Xu,ime,H0o,U0o,JD,J0o,Y0o,K0o,zu,dme,Z0o,ewo,YD,owo,rwo,two,Qu,cme,awo,nwo,KD,swo,lwo,iwo,Wu,dwo,fme,cwo,fwo,mme,mwo,gwo,Hu,lXe,Vi,Uu,gme,PL,hwo,hme,pwo,iXe,$o,BL,_wo,Xi,uwo,ZD,bwo,vwo,eG,Fwo,Two,Mwo,IL,Ewo,pme,Cwo,wwo,Awo,it,NL,Lwo,_me,ywo,xwo,zi,$wo,ume,kwo,Swo,oG,Rwo,Pwo,Bwo,Ju,Iwo,Ye,qL,Nwo,bme,qwo,jwo,Ia,Dwo,vme,Gwo,Owo,Fme,Vwo,Xwo,Tme,zwo,Qwo,Wwo,G,Yu,Mme,Hwo,Uwo,rG,Jwo,Ywo,Kwo,Ku,Eme,Zwo,eAo,tG,oAo,rAo,tAo,Zu,Cme,aAo,nAo,aG,sAo,lAo,iAo,e2,wme,dAo,cAo,nG,fAo,mAo,gAo,o2,Ame,hAo,pAo,sG,_Ao,uAo,bAo,r2,Lme,vAo,FAo,lG,TAo,MAo,EAo,t2,yme,CAo,wAo,iG,AAo,LAo,yAo,a2,xme,xAo,$Ao,dG,kAo,SAo,RAo,n2,$me,PAo,BAo,cG,IAo,NAo,qAo,s2,kme,jAo,DAo,fG,GAo,OAo,VAo,l2,Sme,XAo,zAo,mG,QAo,WAo,HAo,i2,Rme,UAo,JAo,gG,YAo,KAo,ZAo,d2,Pme,eLo,oLo,hG,rLo,tLo,aLo,c2,Bme,nLo,sLo,pG,lLo,iLo,dLo,f2,Ime,cLo,fLo,_G,mLo,gLo,hLo,m2,Nme,pLo,_Lo,uG,uLo,bLo,vLo,g2,qme,FLo,TLo,bG,MLo,ELo,CLo,h2,jme,wLo,ALo,vG,LLo,yLo,xLo,p2,Dme,$Lo,kLo,FG,SLo,RLo,PLo,_2,Gme,BLo,ILo,TG,NLo,qLo,jLo,u2,Ome,DLo,GLo,MG,OLo,VLo,XLo,b2,Vme,zLo,QLo,EG,WLo,HLo,ULo,v2,Xme,JLo,YLo,CG,KLo,ZLo,eyo,F2,zme,oyo,ryo,wG,tyo,ayo,nyo,T2,Qme,syo,lyo,AG,iyo,dyo,cyo,M2,Wme,fyo,myo,LG,gyo,hyo,pyo,E2,Hme,_yo,uyo,yG,byo,vyo,Fyo,C2,Ume,Tyo,Myo,xG,Eyo,Cyo,wyo,w2,Jme,Ayo,Lyo,$G,yyo,xyo,$yo,A2,Yme,kyo,Syo,kG,Ryo,Pyo,Byo,L2,Kme,Iyo,Nyo,SG,qyo,jyo,Dyo,y2,Zme,Gyo,Oyo,RG,Vyo,Xyo,zyo,x2,ege,Qyo,Wyo,PG,Hyo,Uyo,Jyo,$2,oge,Yyo,Kyo,BG,Zyo,e9o,o9o,k2,rge,r9o,t9o,IG,a9o,n9o,s9o,S2,tge,l9o,i9o,NG,d9o,c9o,f9o,R2,age,m9o,g9o,qG,h9o,p9o,_9o,P2,nge,u9o,b9o,jG,v9o,F9o,T9o,B2,sge,M9o,E9o,DG,C9o,w9o,A9o,I2,lge,L9o,y9o,GG,x9o,$9o,k9o,N2,ige,S9o,R9o,OG,P9o,B9o,I9o,q2,dge,N9o,q9o,VG,j9o,D9o,G9o,j2,cge,O9o,V9o,XG,X9o,z9o,Q9o,D2,fge,W9o,H9o,zG,U9o,J9o,Y9o,G2,mge,K9o,Z9o,QG,exo,oxo,rxo,O2,txo,gge,axo,nxo,hge,sxo,lxo,V2,dXe,Qi,X2,pge,jL,ixo,_ge,dxo,cXe,ko,DL,cxo,Wi,fxo,WG,mxo,gxo,HG,hxo,pxo,_xo,GL,uxo,uge,bxo,vxo,Fxo,dt,OL,Txo,bge,Mxo,Exo,Hi,Cxo,vge,wxo,Axo,UG,Lxo,yxo,xxo,z2,$xo,Ke,VL,kxo,Fge,Sxo,Rxo,Na,Pxo,Tge,Bxo,Ixo,Mge,Nxo,qxo,Ege,jxo,Dxo,Gxo,z,Q2,Cge,Oxo,Vxo,JG,Xxo,zxo,Qxo,W2,wge,Wxo,Hxo,YG,Uxo,Jxo,Yxo,H2,Age,Kxo,Zxo,KG,e$o,o$o,r$o,U2,Lge,t$o,a$o,ZG,n$o,s$o,l$o,J2,yge,i$o,d$o,eO,c$o,f$o,m$o,Y2,xge,g$o,h$o,oO,p$o,_$o,u$o,K2,$ge,b$o,v$o,rO,F$o,T$o,M$o,Z2,kge,E$o,C$o,tO,w$o,A$o,L$o,e1,Sge,y$o,x$o,aO,$$o,k$o,S$o,o1,Rge,R$o,P$o,nO,B$o,I$o,N$o,r1,Pge,q$o,j$o,sO,D$o,G$o,O$o,t1,Bge,V$o,X$o,lO,z$o,Q$o,W$o,a1,Ige,H$o,U$o,iO,J$o,Y$o,K$o,n1,Nge,Z$o,eko,dO,oko,rko,tko,s1,qge,ako,nko,cO,sko,lko,iko,l1,jge,dko,cko,fO,fko,mko,gko,i1,Dge,hko,pko,mO,_ko,uko,bko,d1,Gge,vko,Fko,gO,Tko,Mko,Eko,c1,Oge,Cko,wko,hO,Ako,Lko,yko,f1,Vge,xko,$ko,pO,kko,Sko,Rko,m1,Xge,Pko,Bko,_O,Iko,Nko,qko,g1,zge,jko,Dko,uO,Gko,Oko,Vko,h1,Qge,Xko,zko,bO,Qko,Wko,Hko,p1,Wge,Uko,Jko,vO,Yko,Kko,Zko,_1,Hge,eSo,oSo,FO,rSo,tSo,aSo,u1,Uge,nSo,sSo,TO,lSo,iSo,dSo,b1,Jge,cSo,fSo,MO,mSo,gSo,hSo,v1,Yge,pSo,_So,EO,uSo,bSo,vSo,F1,Kge,FSo,TSo,CO,MSo,ESo,CSo,T1,Zge,wSo,ASo,wO,LSo,ySo,xSo,M1,ehe,$So,kSo,AO,SSo,RSo,PSo,E1,ohe,BSo,ISo,LO,NSo,qSo,jSo,C1,rhe,DSo,GSo,yO,OSo,VSo,XSo,w1,the,zSo,QSo,xO,WSo,HSo,USo,A1,ahe,JSo,YSo,$O,KSo,ZSo,eRo,L1,nhe,oRo,rRo,kO,tRo,aRo,nRo,y1,she,sRo,lRo,SO,iRo,dRo,cRo,x1,lhe,fRo,mRo,RO,gRo,hRo,pRo,$1,ihe,_Ro,uRo,PO,bRo,vRo,FRo,k1,dhe,TRo,MRo,BO,ERo,CRo,wRo,S1,ARo,che,LRo,yRo,fhe,xRo,$Ro,R1,fXe,Ui,P1,mhe,XL,kRo,ghe,SRo,mXe,So,zL,RRo,Ji,PRo,IO,BRo,IRo,NO,NRo,qRo,jRo,QL,DRo,hhe,GRo,ORo,VRo,ct,WL,XRo,phe,zRo,QRo,Yi,WRo,_he,HRo,URo,qO,JRo,YRo,KRo,B1,ZRo,Ze,HL,ePo,uhe,oPo,rPo,qa,tPo,bhe,aPo,nPo,vhe,sPo,lPo,Fhe,iPo,dPo,cPo,W,I1,The,fPo,mPo,jO,gPo,hPo,pPo,N1,Mhe,_Po,uPo,DO,bPo,vPo,FPo,q1,Ehe,TPo,MPo,GO,EPo,CPo,wPo,j1,Che,APo,LPo,OO,yPo,xPo,$Po,D1,whe,kPo,SPo,VO,RPo,PPo,BPo,G1,Ahe,IPo,NPo,XO,qPo,jPo,DPo,O1,Lhe,GPo,OPo,zO,VPo,XPo,zPo,V1,yhe,QPo,WPo,QO,HPo,UPo,JPo,X1,xhe,YPo,KPo,WO,ZPo,eBo,oBo,z1,$he,rBo,tBo,HO,aBo,nBo,sBo,Q1,khe,lBo,iBo,UO,dBo,cBo,fBo,W1,She,mBo,gBo,JO,hBo,pBo,_Bo,H1,Rhe,uBo,bBo,YO,vBo,FBo,TBo,U1,Phe,MBo,EBo,KO,CBo,wBo,ABo,J1,Bhe,LBo,yBo,ZO,xBo,$Bo,kBo,Y1,Ihe,SBo,RBo,eV,PBo,BBo,IBo,K1,Nhe,NBo,qBo,oV,jBo,DBo,GBo,Z1,qhe,OBo,VBo,rV,XBo,zBo,QBo,eb,jhe,WBo,HBo,tV,UBo,JBo,YBo,ob,Dhe,KBo,ZBo,aV,eIo,oIo,rIo,rb,Ghe,tIo,aIo,nV,nIo,sIo,lIo,tb,Ohe,iIo,dIo,sV,cIo,fIo,mIo,ab,Vhe,gIo,hIo,lV,pIo,_Io,uIo,nb,Xhe,bIo,vIo,iV,FIo,TIo,MIo,sb,zhe,EIo,CIo,dV,wIo,AIo,LIo,lb,Qhe,yIo,xIo,cV,$Io,kIo,SIo,ib,Whe,RIo,PIo,fV,BIo,IIo,NIo,db,Hhe,qIo,jIo,mV,DIo,GIo,OIo,cb,Uhe,VIo,XIo,gV,zIo,QIo,WIo,fb,Jhe,HIo,UIo,hV,JIo,YIo,KIo,mb,Yhe,ZIo,eNo,pV,oNo,rNo,tNo,gb,Khe,aNo,nNo,_V,sNo,lNo,iNo,hb,Zhe,dNo,cNo,uV,fNo,mNo,gNo,pb,epe,hNo,pNo,ope,_No,uNo,bNo,_b,rpe,vNo,FNo,bV,TNo,MNo,ENo,ub,tpe,CNo,wNo,vV,ANo,LNo,yNo,bb,ape,xNo,$No,FV,kNo,SNo,RNo,vb,npe,PNo,BNo,TV,INo,NNo,qNo,Fb,jNo,spe,DNo,GNo,lpe,ONo,VNo,Tb,gXe,Ki,Mb,ipe,UL,XNo,dpe,zNo,hXe,Ro,JL,QNo,Zi,WNo,MV,HNo,UNo,EV,JNo,YNo,KNo,YL,ZNo,cpe,eqo,oqo,rqo,ft,KL,tqo,fpe,aqo,nqo,ed,sqo,mpe,lqo,iqo,CV,dqo,cqo,fqo,Eb,mqo,eo,ZL,gqo,gpe,hqo,pqo,ja,_qo,hpe,uqo,bqo,ppe,vqo,Fqo,_pe,Tqo,Mqo,Eqo,pe,Cb,upe,Cqo,wqo,wV,Aqo,Lqo,yqo,wb,bpe,xqo,$qo,AV,kqo,Sqo,Rqo,Ab,vpe,Pqo,Bqo,LV,Iqo,Nqo,qqo,Lb,Fpe,jqo,Dqo,yV,Gqo,Oqo,Vqo,yb,Tpe,Xqo,zqo,xV,Qqo,Wqo,Hqo,xb,Mpe,Uqo,Jqo,$V,Yqo,Kqo,Zqo,$b,Epe,ejo,ojo,kV,rjo,tjo,ajo,kb,Cpe,njo,sjo,SV,ljo,ijo,djo,Sb,wpe,cjo,fjo,RV,mjo,gjo,hjo,Rb,Ape,pjo,_jo,PV,ujo,bjo,vjo,Pb,Lpe,Fjo,Tjo,BV,Mjo,Ejo,Cjo,Bb,ype,wjo,Ajo,IV,Ljo,yjo,xjo,Ib,xpe,$jo,kjo,NV,Sjo,Rjo,Pjo,Nb,$pe,Bjo,Ijo,qV,Njo,qjo,jjo,qb,kpe,Djo,Gjo,jV,Ojo,Vjo,Xjo,jb,Spe,zjo,Qjo,DV,Wjo,Hjo,Ujo,Db,Rpe,Jjo,Yjo,GV,Kjo,Zjo,eDo,Gb,Ppe,oDo,rDo,OV,tDo,aDo,nDo,Ob,sDo,Bpe,lDo,iDo,Ipe,dDo,cDo,Vb,pXe,od,Xb,Npe,ey,fDo,qpe,mDo,_Xe,Po,oy,gDo,rd,hDo,VV,pDo,_Do,XV,uDo,bDo,vDo,ry,FDo,jpe,TDo,MDo,EDo,mt,ty,CDo,Dpe,wDo,ADo,td,LDo,Gpe,yDo,xDo,zV,$Do,kDo,SDo,zb,RDo,oo,ay,PDo,Ope,BDo,IDo,Da,NDo,Vpe,qDo,jDo,Xpe,DDo,GDo,zpe,ODo,VDo,XDo,N,Qb,Qpe,zDo,QDo,QV,WDo,HDo,UDo,Wb,Wpe,JDo,YDo,WV,KDo,ZDo,eGo,Hb,Hpe,oGo,rGo,HV,tGo,aGo,nGo,Ub,Upe,sGo,lGo,UV,iGo,dGo,cGo,Jb,Jpe,fGo,mGo,JV,gGo,hGo,pGo,Yb,Ype,_Go,uGo,YV,bGo,vGo,FGo,Kb,Kpe,TGo,MGo,KV,EGo,CGo,wGo,Zb,Zpe,AGo,LGo,ZV,yGo,xGo,$Go,ev,e_e,kGo,SGo,eX,RGo,PGo,BGo,ov,o_e,IGo,NGo,oX,qGo,jGo,DGo,rv,r_e,GGo,OGo,rX,VGo,XGo,zGo,tv,t_e,QGo,WGo,tX,HGo,UGo,JGo,av,a_e,YGo,KGo,aX,ZGo,eOo,oOo,nv,n_e,rOo,tOo,nX,aOo,nOo,sOo,sv,s_e,lOo,iOo,sX,dOo,cOo,fOo,lv,l_e,mOo,gOo,lX,hOo,pOo,_Oo,iv,i_e,uOo,bOo,iX,vOo,FOo,TOo,dv,d_e,MOo,EOo,dX,COo,wOo,AOo,cv,c_e,LOo,yOo,cX,xOo,$Oo,kOo,fv,f_e,SOo,ROo,fX,POo,BOo,IOo,mv,m_e,NOo,qOo,mX,jOo,DOo,GOo,gv,g_e,OOo,VOo,gX,XOo,zOo,QOo,hv,h_e,WOo,HOo,hX,UOo,JOo,YOo,pv,p_e,KOo,ZOo,pX,eVo,oVo,rVo,_v,__e,tVo,aVo,_X,nVo,sVo,lVo,uv,u_e,iVo,dVo,uX,cVo,fVo,mVo,bv,b_e,gVo,hVo,bX,pVo,_Vo,uVo,vv,v_e,bVo,vVo,vX,FVo,TVo,MVo,Fv,F_e,EVo,CVo,FX,wVo,AVo,LVo,Tv,T_e,yVo,xVo,TX,$Vo,kVo,SVo,Mv,M_e,RVo,PVo,MX,BVo,IVo,NVo,Ev,E_e,qVo,jVo,EX,DVo,GVo,OVo,Cv,C_e,VVo,XVo,CX,zVo,QVo,WVo,wv,w_e,HVo,UVo,wX,JVo,YVo,KVo,Av,A_e,ZVo,eXo,AX,oXo,rXo,tXo,Lv,L_e,aXo,nXo,LX,sXo,lXo,iXo,yv,y_e,dXo,cXo,yX,fXo,mXo,gXo,xv,x_e,hXo,pXo,xX,_Xo,uXo,bXo,$v,$_e,vXo,FXo,$X,TXo,MXo,EXo,kv,k_e,CXo,wXo,kX,AXo,LXo,yXo,Sv,S_e,xXo,$Xo,SX,kXo,SXo,RXo,Rv,R_e,PXo,BXo,RX,IXo,NXo,qXo,Pv,P_e,jXo,DXo,PX,GXo,OXo,VXo,Bv,B_e,XXo,zXo,BX,QXo,WXo,HXo,Iv,I_e,UXo,JXo,IX,YXo,KXo,ZXo,Nv,N_e,ezo,ozo,NX,rzo,tzo,azo,qv,q_e,nzo,szo,qX,lzo,izo,dzo,jv,j_e,czo,fzo,jX,mzo,gzo,hzo,Dv,D_e,pzo,_zo,DX,uzo,bzo,vzo,Gv,G_e,Fzo,Tzo,GX,Mzo,Ezo,Czo,Ov,wzo,O_e,Azo,Lzo,V_e,yzo,xzo,Vv,uXe,ad,Xv,X_e,ny,$zo,z_e,kzo,bXe,Bo,sy,Szo,nd,Rzo,OX,Pzo,Bzo,VX,Izo,Nzo,qzo,ly,jzo,Q_e,Dzo,Gzo,Ozo,gt,iy,Vzo,W_e,Xzo,zzo,sd,Qzo,H_e,Wzo,Hzo,XX,Uzo,Jzo,Yzo,zv,Kzo,ro,dy,Zzo,U_e,eQo,oQo,Ga,rQo,J_e,tQo,aQo,Y_e,nQo,sQo,K_e,lQo,iQo,dQo,Z,Qv,Z_e,cQo,fQo,zX,mQo,gQo,hQo,Wv,eue,pQo,_Qo,QX,uQo,bQo,vQo,Hv,oue,FQo,TQo,WX,MQo,EQo,CQo,Uv,rue,wQo,AQo,HX,LQo,yQo,xQo,Jv,tue,$Qo,kQo,UX,SQo,RQo,PQo,Yv,aue,BQo,IQo,JX,NQo,qQo,jQo,Kv,nue,DQo,GQo,YX,OQo,VQo,XQo,Zv,sue,zQo,QQo,KX,WQo,HQo,UQo,eF,lue,JQo,YQo,ZX,KQo,ZQo,eWo,oF,iue,oWo,rWo,ez,tWo,aWo,nWo,rF,due,sWo,lWo,oz,iWo,dWo,cWo,tF,cue,fWo,mWo,rz,gWo,hWo,pWo,aF,fue,_Wo,uWo,tz,bWo,vWo,FWo,nF,mue,TWo,MWo,az,EWo,CWo,wWo,sF,gue,AWo,LWo,nz,yWo,xWo,$Wo,lF,hue,kWo,SWo,sz,RWo,PWo,BWo,iF,pue,IWo,NWo,lz,qWo,jWo,DWo,dF,_ue,GWo,OWo,iz,VWo,XWo,zWo,cF,uue,QWo,WWo,dz,HWo,UWo,JWo,fF,bue,YWo,KWo,cz,ZWo,eHo,oHo,mF,vue,rHo,tHo,fz,aHo,nHo,sHo,gF,Fue,lHo,iHo,mz,dHo,cHo,fHo,hF,Tue,mHo,gHo,gz,hHo,pHo,_Ho,pF,Mue,uHo,bHo,hz,vHo,FHo,THo,_F,Eue,MHo,EHo,pz,CHo,wHo,AHo,uF,Cue,LHo,yHo,_z,xHo,$Ho,kHo,bF,wue,SHo,RHo,uz,PHo,BHo,IHo,vF,Aue,NHo,qHo,bz,jHo,DHo,GHo,FF,Lue,OHo,VHo,vz,XHo,zHo,QHo,TF,yue,WHo,HHo,Fz,UHo,JHo,YHo,MF,KHo,xue,ZHo,eUo,$ue,oUo,rUo,EF,vXe,ld,CF,kue,cy,tUo,Sue,aUo,FXe,Io,fy,nUo,id,sUo,Tz,lUo,iUo,Mz,dUo,cUo,fUo,my,mUo,Rue,gUo,hUo,pUo,ht,gy,_Uo,Pue,uUo,bUo,dd,vUo,Bue,FUo,TUo,Ez,MUo,EUo,CUo,wF,wUo,to,hy,AUo,Iue,LUo,yUo,Oa,xUo,Nue,$Uo,kUo,que,SUo,RUo,jue,PUo,BUo,IUo,No,AF,Due,NUo,qUo,Cz,jUo,DUo,GUo,LF,Gue,OUo,VUo,wz,XUo,zUo,QUo,yF,Oue,WUo,HUo,Az,UUo,JUo,YUo,xF,Vue,KUo,ZUo,Lz,eJo,oJo,rJo,$F,Xue,tJo,aJo,yz,nJo,sJo,lJo,kF,zue,iJo,dJo,xz,cJo,fJo,mJo,SF,gJo,Que,hJo,pJo,Wue,_Jo,uJo,RF,TXe,cd,PF,Hue,py,bJo,Uue,vJo,MXe,qo,_y,FJo,fd,TJo,$z,MJo,EJo,kz,CJo,wJo,AJo,uy,LJo,Jue,yJo,xJo,$Jo,pt,by,kJo,Yue,SJo,RJo,md,PJo,Kue,BJo,IJo,Sz,NJo,qJo,jJo,BF,DJo,ao,vy,GJo,Zue,OJo,VJo,Va,XJo,e2e,zJo,QJo,o2e,WJo,HJo,r2e,UJo,JJo,YJo,U,IF,t2e,KJo,ZJo,Rz,eYo,oYo,rYo,NF,a2e,tYo,aYo,Pz,nYo,sYo,lYo,qF,n2e,iYo,dYo,Bz,cYo,fYo,mYo,jF,s2e,gYo,hYo,Iz,pYo,_Yo,uYo,DF,l2e,bYo,vYo,Nz,FYo,TYo,MYo,GF,i2e,EYo,CYo,qz,wYo,AYo,LYo,OF,d2e,yYo,xYo,jz,$Yo,kYo,SYo,VF,c2e,RYo,PYo,Dz,BYo,IYo,NYo,XF,f2e,qYo,jYo,Gz,DYo,GYo,OYo,zF,m2e,VYo,XYo,Oz,zYo,QYo,WYo,QF,g2e,HYo,UYo,Vz,JYo,YYo,KYo,WF,h2e,ZYo,eKo,Xz,oKo,rKo,tKo,HF,p2e,aKo,nKo,zz,sKo,lKo,iKo,UF,_2e,dKo,cKo,Qz,fKo,mKo,gKo,JF,u2e,hKo,pKo,Wz,_Ko,uKo,bKo,YF,b2e,vKo,FKo,Hz,TKo,MKo,EKo,KF,v2e,CKo,wKo,Uz,AKo,LKo,yKo,ZF,F2e,xKo,$Ko,Jz,kKo,SKo,RKo,e6,T2e,PKo,BKo,Yz,IKo,NKo,qKo,o6,M2e,jKo,DKo,Kz,GKo,OKo,VKo,r6,E2e,XKo,zKo,Zz,QKo,WKo,HKo,t6,C2e,UKo,JKo,eQ,YKo,KKo,ZKo,a6,w2e,eZo,oZo,oQ,rZo,tZo,aZo,n6,A2e,nZo,sZo,rQ,lZo,iZo,dZo,s6,L2e,cZo,fZo,tQ,mZo,gZo,hZo,l6,y2e,pZo,_Zo,aQ,uZo,bZo,vZo,i6,x2e,FZo,TZo,nQ,MZo,EZo,CZo,d6,$2e,wZo,AZo,sQ,LZo,yZo,xZo,c6,k2e,$Zo,kZo,lQ,SZo,RZo,PZo,f6,S2e,BZo,IZo,iQ,NZo,qZo,jZo,m6,R2e,DZo,GZo,dQ,OZo,VZo,XZo,g6,P2e,zZo,QZo,cQ,WZo,HZo,UZo,h6,B2e,JZo,YZo,fQ,KZo,ZZo,eer,p6,I2e,oer,rer,mQ,ter,aer,ner,_6,N2e,ser,ler,gQ,ier,der,cer,u6,q2e,fer,mer,hQ,ger,her,per,b6,_er,j2e,uer,ber,D2e,ver,Fer,v6,EXe,gd,F6,G2e,Fy,Ter,O2e,Mer,CXe,jo,Ty,Eer,hd,Cer,pQ,wer,Aer,_Q,Ler,yer,xer,My,$er,V2e,ker,Ser,Rer,_t,Ey,Per,X2e,Ber,Ier,pd,Ner,z2e,qer,jer,uQ,Der,Ger,Oer,T6,Ver,no,Cy,Xer,Q2e,zer,Qer,Xa,Wer,W2e,Her,Uer,H2e,Jer,Yer,U2e,Ker,Zer,eor,V,M6,J2e,oor,ror,bQ,tor,aor,nor,E6,Y2e,sor,lor,vQ,ior,dor,cor,C6,K2e,mor,gor,FQ,hor,por,_or,w6,Z2e,uor,bor,TQ,vor,For,Tor,A6,e1e,Mor,Eor,MQ,Cor,wor,Aor,L6,o1e,Lor,yor,EQ,xor,$or,kor,y6,r1e,Sor,Ror,CQ,Por,Bor,Ior,x6,t1e,Nor,qor,wQ,jor,Dor,Gor,$6,a1e,Oor,Vor,AQ,Xor,zor,Qor,k6,n1e,Wor,Hor,LQ,Uor,Jor,Yor,S6,s1e,Kor,Zor,yQ,err,orr,rrr,R6,l1e,trr,arr,xQ,nrr,srr,lrr,P6,i1e,irr,drr,$Q,crr,frr,mrr,B6,d1e,grr,hrr,kQ,prr,_rr,urr,I6,c1e,brr,vrr,SQ,Frr,Trr,Mrr,N6,f1e,Err,Crr,RQ,wrr,Arr,Lrr,q6,m1e,yrr,xrr,PQ,$rr,krr,Srr,j6,g1e,Rrr,Prr,BQ,Brr,Irr,Nrr,D6,h1e,qrr,jrr,IQ,Drr,Grr,Orr,G6,p1e,Vrr,Xrr,NQ,zrr,Qrr,Wrr,O6,_1e,Hrr,Urr,qQ,Jrr,Yrr,Krr,V6,u1e,Zrr,etr,jQ,otr,rtr,ttr,X6,b1e,atr,ntr,DQ,str,ltr,itr,z6,v1e,dtr,ctr,GQ,ftr,mtr,gtr,Q6,F1e,htr,ptr,OQ,_tr,utr,btr,W6,T1e,vtr,Ftr,VQ,Ttr,Mtr,Etr,H6,M1e,Ctr,wtr,XQ,Atr,Ltr,ytr,U6,E1e,xtr,$tr,zQ,ktr,Str,Rtr,J6,C1e,Ptr,Btr,QQ,Itr,Ntr,qtr,Y6,w1e,jtr,Dtr,WQ,Gtr,Otr,Vtr,K6,A1e,Xtr,ztr,HQ,Qtr,Wtr,Htr,Z6,L1e,Utr,Jtr,UQ,Ytr,Ktr,Ztr,eT,y1e,ear,oar,JQ,rar,tar,aar,oT,x1e,nar,sar,YQ,lar,iar,dar,rT,$1e,car,far,KQ,mar,gar,har,tT,k1e,par,_ar,ZQ,uar,bar,Far,aT,S1e,Tar,Mar,eW,Ear,Car,war,nT,R1e,Aar,Lar,oW,yar,xar,$ar,sT,P1e,kar,Sar,rW,Rar,Par,Bar,lT,B1e,Iar,Nar,tW,qar,jar,Dar,iT,I1e,Gar,Oar,aW,Var,Xar,zar,dT,N1e,Qar,War,nW,Har,Uar,Jar,cT,Yar,q1e,Kar,Zar,j1e,enr,onr,fT,wXe,_d,mT,D1e,wy,rnr,G1e,tnr,AXe,Do,Ay,anr,ud,nnr,sW,snr,lnr,lW,inr,dnr,cnr,Ly,fnr,O1e,mnr,gnr,hnr,ut,yy,pnr,V1e,_nr,unr,bd,bnr,X1e,vnr,Fnr,iW,Tnr,Mnr,Enr,gT,Cnr,so,xy,wnr,z1e,Anr,Lnr,za,ynr,Q1e,xnr,$nr,W1e,knr,Snr,H1e,Rnr,Pnr,Bnr,U1e,hT,J1e,Inr,Nnr,dW,qnr,jnr,Dnr,pT,Gnr,Y1e,Onr,Vnr,K1e,Xnr,znr,_T,LXe,vd,uT,Z1e,$y,Qnr,ebe,Wnr,yXe,Go,ky,Hnr,Fd,Unr,cW,Jnr,Ynr,fW,Knr,Znr,esr,Sy,osr,obe,rsr,tsr,asr,bt,Ry,nsr,rbe,ssr,lsr,Td,isr,tbe,dsr,csr,mW,fsr,msr,gsr,bT,hsr,lo,Py,psr,abe,_sr,usr,Qa,bsr,nbe,vsr,Fsr,sbe,Tsr,Msr,lbe,Esr,Csr,wsr,ve,vT,ibe,Asr,Lsr,gW,ysr,xsr,$sr,FT,dbe,ksr,Ssr,hW,Rsr,Psr,Bsr,TT,cbe,Isr,Nsr,pW,qsr,jsr,Dsr,MT,fbe,Gsr,Osr,_W,Vsr,Xsr,zsr,Ws,mbe,Qsr,Wsr,uW,Hsr,Usr,bW,Jsr,Ysr,Ksr,ET,gbe,Zsr,elr,vW,olr,rlr,tlr,Hs,hbe,alr,nlr,FW,slr,llr,TW,ilr,dlr,clr,CT,pbe,flr,mlr,MW,glr,hlr,plr,vt,_be,_lr,ulr,EW,blr,vlr,CW,Flr,Tlr,wW,Mlr,Elr,Clr,wT,ube,wlr,Alr,AW,Llr,ylr,xlr,AT,bbe,$lr,klr,LW,Slr,Rlr,Plr,LT,vbe,Blr,Ilr,yW,Nlr,qlr,jlr,yT,Fbe,Dlr,Glr,xW,Olr,Vlr,Xlr,xT,Tbe,zlr,Qlr,$W,Wlr,Hlr,Ulr,$T,Mbe,Jlr,Ylr,kW,Klr,Zlr,eir,kT,Ebe,oir,rir,SW,tir,air,nir,ST,sir,Cbe,lir,iir,wbe,dir,cir,RT,xXe,Md,PT,Abe,By,fir,Lbe,mir,$Xe,Oo,Iy,gir,Ed,hir,RW,pir,_ir,PW,uir,bir,vir,Ny,Fir,ybe,Tir,Mir,Eir,Ft,qy,Cir,xbe,wir,Air,Cd,Lir,$be,yir,xir,BW,$ir,kir,Sir,BT,Rir,io,jy,Pir,kbe,Bir,Iir,Wa,Nir,Sbe,qir,jir,Rbe,Dir,Gir,Pbe,Oir,Vir,Xir,Bbe,IT,Ibe,zir,Qir,IW,Wir,Hir,Uir,NT,Jir,Nbe,Yir,Kir,qbe,Zir,edr,qT,kXe,wd,jT,jbe,Dy,odr,Dbe,rdr,SXe,Vo,Gy,tdr,Ad,adr,NW,ndr,sdr,qW,ldr,idr,ddr,Oy,cdr,Gbe,fdr,mdr,gdr,Tt,Vy,hdr,Obe,pdr,_dr,Ld,udr,Vbe,bdr,vdr,jW,Fdr,Tdr,Mdr,DT,Edr,co,Xy,Cdr,Xbe,wdr,Adr,Ha,Ldr,zbe,ydr,xdr,Qbe,$dr,kdr,Wbe,Sdr,Rdr,Pdr,Hbe,GT,Ube,Bdr,Idr,DW,Ndr,qdr,jdr,OT,Ddr,Jbe,Gdr,Odr,Ybe,Vdr,Xdr,VT,RXe,yd,XT,Kbe,zy,zdr,Zbe,Qdr,PXe,Xo,Qy,Wdr,xd,Hdr,GW,Udr,Jdr,OW,Ydr,Kdr,Zdr,Wy,ecr,eve,ocr,rcr,tcr,Mt,Hy,acr,ove,ncr,scr,$d,lcr,rve,icr,dcr,VW,ccr,fcr,mcr,zT,gcr,fo,Uy,hcr,tve,pcr,_cr,Ua,ucr,ave,bcr,vcr,nve,Fcr,Tcr,sve,Mcr,Ecr,Ccr,Pe,QT,lve,wcr,Acr,XW,Lcr,ycr,xcr,WT,ive,$cr,kcr,zW,Scr,Rcr,Pcr,HT,dve,Bcr,Icr,QW,Ncr,qcr,jcr,UT,cve,Dcr,Gcr,WW,Ocr,Vcr,Xcr,JT,fve,zcr,Qcr,HW,Wcr,Hcr,Ucr,YT,mve,Jcr,Ycr,UW,Kcr,Zcr,efr,KT,gve,ofr,rfr,JW,tfr,afr,nfr,ZT,hve,sfr,lfr,YW,ifr,dfr,cfr,e7,pve,ffr,mfr,KW,gfr,hfr,pfr,o7,_fr,_ve,ufr,bfr,uve,vfr,Ffr,r7,BXe,kd,t7,bve,Jy,Tfr,vve,Mfr,IXe,zo,Yy,Efr,Sd,Cfr,ZW,wfr,Afr,eH,Lfr,yfr,xfr,Ky,$fr,Fve,kfr,Sfr,Rfr,Et,Zy,Pfr,Tve,Bfr,Ifr,Rd,Nfr,Mve,qfr,jfr,oH,Dfr,Gfr,Ofr,a7,Vfr,mo,e9,Xfr,Eve,zfr,Qfr,Ja,Wfr,Cve,Hfr,Ufr,wve,Jfr,Yfr,Ave,Kfr,Zfr,emr,et,n7,Lve,omr,rmr,rH,tmr,amr,nmr,s7,yve,smr,lmr,tH,imr,dmr,cmr,l7,xve,fmr,mmr,aH,gmr,hmr,pmr,i7,$ve,_mr,umr,nH,bmr,vmr,Fmr,d7,kve,Tmr,Mmr,sH,Emr,Cmr,wmr,c7,Amr,Sve,Lmr,ymr,Rve,xmr,$mr,f7,NXe,Pd,m7,Pve,o9,kmr,Bve,Smr,qXe,Qo,r9,Rmr,Bd,Pmr,lH,Bmr,Imr,iH,Nmr,qmr,jmr,t9,Dmr,Ive,Gmr,Omr,Vmr,Ct,a9,Xmr,Nve,zmr,Qmr,Id,Wmr,qve,Hmr,Umr,dH,Jmr,Ymr,Kmr,g7,Zmr,go,n9,egr,jve,ogr,rgr,Ya,tgr,Dve,agr,ngr,Gve,sgr,lgr,Ove,igr,dgr,cgr,Le,h7,Vve,fgr,mgr,cH,ggr,hgr,pgr,p7,Xve,_gr,ugr,fH,bgr,vgr,Fgr,_7,zve,Tgr,Mgr,mH,Egr,Cgr,wgr,u7,Qve,Agr,Lgr,gH,ygr,xgr,$gr,b7,Wve,kgr,Sgr,hH,Rgr,Pgr,Bgr,v7,Hve,Igr,Ngr,pH,qgr,jgr,Dgr,F7,Uve,Ggr,Ogr,_H,Vgr,Xgr,zgr,T7,Jve,Qgr,Wgr,uH,Hgr,Ugr,Jgr,M7,Yve,Ygr,Kgr,bH,Zgr,ehr,ohr,E7,Kve,rhr,thr,vH,ahr,nhr,shr,C7,lhr,Zve,ihr,dhr,eFe,chr,fhr,w7,jXe,Nd,A7,oFe,s9,mhr,rFe,ghr,DXe,Wo,l9,hhr,qd,phr,FH,_hr,uhr,TH,bhr,vhr,Fhr,i9,Thr,tFe,Mhr,Ehr,Chr,wt,d9,whr,aFe,Ahr,Lhr,jd,yhr,nFe,xhr,$hr,MH,khr,Shr,Rhr,L7,Phr,ho,c9,Bhr,sFe,Ihr,Nhr,Ka,qhr,lFe,jhr,Dhr,iFe,Ghr,Ohr,dFe,Vhr,Xhr,zhr,f9,y7,cFe,Qhr,Whr,EH,Hhr,Uhr,Jhr,x7,fFe,Yhr,Khr,CH,Zhr,epr,opr,$7,rpr,mFe,tpr,apr,gFe,npr,spr,k7,GXe,Dd,S7,hFe,m9,lpr,pFe,ipr,OXe,Ho,g9,dpr,Gd,cpr,wH,fpr,mpr,AH,gpr,hpr,ppr,h9,_pr,_Fe,upr,bpr,vpr,At,p9,Fpr,uFe,Tpr,Mpr,Od,Epr,bFe,Cpr,wpr,LH,Apr,Lpr,ypr,R7,xpr,po,_9,$pr,vFe,kpr,Spr,Za,Rpr,FFe,Ppr,Bpr,TFe,Ipr,Npr,MFe,qpr,jpr,Dpr,ot,P7,EFe,Gpr,Opr,yH,Vpr,Xpr,zpr,B7,CFe,Qpr,Wpr,xH,Hpr,Upr,Jpr,I7,wFe,Ypr,Kpr,$H,Zpr,e_r,o_r,N7,AFe,r_r,t_r,kH,a_r,n_r,s_r,q7,LFe,l_r,i_r,SH,d_r,c_r,f_r,j7,m_r,yFe,g_r,h_r,xFe,p_r,__r,D7,VXe,Vd,G7,$Fe,u9,u_r,kFe,b_r,XXe,Uo,b9,v_r,Xd,F_r,RH,T_r,M_r,PH,E_r,C_r,w_r,v9,A_r,SFe,L_r,y_r,x_r,Lt,F9,$_r,RFe,k_r,S_r,zd,R_r,PFe,P_r,B_r,BH,I_r,N_r,q_r,O7,j_r,_o,T9,D_r,BFe,G_r,O_r,en,V_r,IFe,X_r,z_r,NFe,Q_r,W_r,qFe,H_r,U_r,J_r,Qd,V7,jFe,Y_r,K_r,IH,Z_r,eur,our,X7,DFe,rur,tur,NH,aur,nur,sur,z7,GFe,lur,iur,qH,dur,cur,fur,Q7,mur,OFe,gur,hur,VFe,pur,_ur,W7,zXe,Wd,H7,XFe,M9,uur,zFe,bur,QXe,Jo,E9,vur,Hd,Fur,jH,Tur,Mur,DH,Eur,Cur,wur,C9,Aur,QFe,Lur,yur,xur,yt,w9,$ur,WFe,kur,Sur,Ud,Rur,HFe,Pur,Bur,GH,Iur,Nur,qur,U7,jur,uo,A9,Dur,UFe,Gur,Our,on,Vur,JFe,Xur,zur,YFe,Qur,Wur,KFe,Hur,Uur,Jur,L9,J7,ZFe,Yur,Kur,OH,Zur,e2r,o2r,Y7,e6e,r2r,t2r,VH,a2r,n2r,s2r,K7,l2r,o6e,i2r,d2r,r6e,c2r,f2r,Z7,WXe,Jd,e8,t6e,y9,m2r,a6e,g2r,HXe,Yo,x9,h2r,Yd,p2r,XH,_2r,u2r,zH,b2r,v2r,F2r,$9,T2r,n6e,M2r,E2r,C2r,xt,k9,w2r,s6e,A2r,L2r,Kd,y2r,l6e,x2r,$2r,QH,k2r,S2r,R2r,o8,P2r,bo,S9,B2r,i6e,I2r,N2r,rn,q2r,d6e,j2r,D2r,c6e,G2r,O2r,f6e,V2r,X2r,z2r,m6e,r8,g6e,Q2r,W2r,WH,H2r,U2r,J2r,t8,Y2r,h6e,K2r,Z2r,p6e,e1r,o1r,a8,UXe,Zd,n8,_6e,R9,r1r,u6e,t1r,JXe,Ko,P9,a1r,ec,n1r,HH,s1r,l1r,UH,i1r,d1r,c1r,B9,f1r,b6e,m1r,g1r,h1r,$t,I9,p1r,v6e,_1r,u1r,oc,b1r,F6e,v1r,F1r,JH,T1r,M1r,E1r,s8,C1r,vo,N9,w1r,T6e,A1r,L1r,tn,y1r,M6e,x1r,$1r,E6e,k1r,S1r,C6e,R1r,P1r,B1r,rt,l8,w6e,I1r,N1r,YH,q1r,j1r,D1r,i8,A6e,G1r,O1r,KH,V1r,X1r,z1r,d8,L6e,Q1r,W1r,ZH,H1r,U1r,J1r,c8,y6e,Y1r,K1r,eU,Z1r,ebr,obr,f8,x6e,rbr,tbr,oU,abr,nbr,sbr,m8,lbr,$6e,ibr,dbr,k6e,cbr,fbr,g8,YXe,rc,h8,S6e,q9,mbr,R6e,gbr,KXe,Zo,j9,hbr,tc,pbr,rU,_br,ubr,tU,bbr,vbr,Fbr,D9,Tbr,P6e,Mbr,Ebr,Cbr,kt,G9,wbr,B6e,Abr,Lbr,ac,ybr,I6e,xbr,$br,aU,kbr,Sbr,Rbr,p8,Pbr,Fo,O9,Bbr,N6e,Ibr,Nbr,an,qbr,q6e,jbr,Dbr,j6e,Gbr,Obr,D6e,Vbr,Xbr,zbr,G6e,_8,O6e,Qbr,Wbr,nU,Hbr,Ubr,Jbr,u8,Ybr,V6e,Kbr,Zbr,X6e,evr,ovr,b8,ZXe,nc,v8,z6e,V9,rvr,Q6e,tvr,eze,er,X9,avr,sc,nvr,sU,svr,lvr,lU,ivr,dvr,cvr,z9,fvr,W6e,mvr,gvr,hvr,St,Q9,pvr,H6e,_vr,uvr,lc,bvr,U6e,vvr,Fvr,iU,Tvr,Mvr,Evr,F8,Cvr,yr,W9,wvr,J6e,Avr,Lvr,nn,yvr,Y6e,xvr,$vr,K6e,kvr,Svr,Z6e,Rvr,Pvr,Bvr,j,T8,eTe,Ivr,Nvr,dU,qvr,jvr,Dvr,M8,oTe,Gvr,Ovr,cU,Vvr,Xvr,zvr,E8,rTe,Qvr,Wvr,fU,Hvr,Uvr,Jvr,C8,tTe,Yvr,Kvr,mU,Zvr,eFr,oFr,w8,aTe,rFr,tFr,gU,aFr,nFr,sFr,A8,nTe,lFr,iFr,hU,dFr,cFr,fFr,L8,sTe,mFr,gFr,pU,hFr,pFr,_Fr,y8,lTe,uFr,bFr,_U,vFr,FFr,TFr,x8,iTe,MFr,EFr,uU,CFr,wFr,AFr,$8,dTe,LFr,yFr,bU,xFr,$Fr,kFr,k8,cTe,SFr,RFr,vU,PFr,BFr,IFr,S8,fTe,NFr,qFr,FU,jFr,DFr,GFr,R8,mTe,OFr,VFr,TU,XFr,zFr,QFr,P8,gTe,WFr,HFr,MU,UFr,JFr,YFr,B8,hTe,KFr,ZFr,EU,e6r,o6r,r6r,I8,pTe,t6r,a6r,CU,n6r,s6r,l6r,N8,_Te,i6r,d6r,wU,c6r,f6r,m6r,Us,uTe,g6r,h6r,AU,p6r,_6r,LU,u6r,b6r,v6r,q8,bTe,F6r,T6r,yU,M6r,E6r,C6r,j8,vTe,w6r,A6r,xU,L6r,y6r,x6r,D8,FTe,$6r,k6r,$U,S6r,R6r,P6r,G8,TTe,B6r,I6r,kU,N6r,q6r,j6r,O8,MTe,D6r,G6r,SU,O6r,V6r,X6r,V8,ETe,z6r,Q6r,RU,W6r,H6r,U6r,X8,CTe,J6r,Y6r,PU,K6r,Z6r,eTr,z8,wTe,oTr,rTr,BU,tTr,aTr,nTr,Q8,ATe,sTr,lTr,IU,iTr,dTr,cTr,W8,LTe,fTr,mTr,NU,gTr,hTr,pTr,H8,yTe,_Tr,uTr,qU,bTr,vTr,FTr,U8,xTe,TTr,MTr,jU,ETr,CTr,wTr,J8,$Te,ATr,LTr,DU,yTr,xTr,$Tr,Y8,kTe,kTr,STr,GU,RTr,PTr,BTr,K8,STe,ITr,NTr,OU,qTr,jTr,DTr,Z8,RTe,GTr,OTr,VU,VTr,XTr,zTr,eM,PTe,QTr,WTr,XU,HTr,UTr,JTr,oM,BTe,YTr,KTr,zU,ZTr,e7r,o7r,rM,ITe,r7r,t7r,QU,a7r,n7r,s7r,tM,NTe,l7r,i7r,WU,d7r,c7r,f7r,aM,qTe,m7r,g7r,HU,h7r,p7r,_7r,nM,jTe,u7r,b7r,UU,v7r,F7r,T7r,sM,DTe,M7r,E7r,JU,C7r,w7r,A7r,lM,GTe,L7r,y7r,YU,x7r,$7r,k7r,iM,OTe,S7r,R7r,KU,P7r,B7r,I7r,dM,VTe,N7r,q7r,ZU,j7r,D7r,G7r,cM,XTe,O7r,V7r,eJ,X7r,z7r,Q7r,fM,zTe,W7r,H7r,oJ,U7r,J7r,Y7r,mM,QTe,K7r,Z7r,rJ,e8r,o8r,r8r,gM,WTe,t8r,a8r,tJ,n8r,s8r,l8r,hM,oze,ic,pM,HTe,H9,i8r,UTe,d8r,rze,or,U9,c8r,dc,f8r,aJ,m8r,g8r,nJ,h8r,p8r,_8r,J9,u8r,JTe,b8r,v8r,F8r,Rt,Y9,T8r,YTe,M8r,E8r,cc,C8r,KTe,w8r,A8r,sJ,L8r,y8r,x8r,_M,$8r,xr,K9,k8r,ZTe,S8r,R8r,sn,P8r,e7e,B8r,I8r,o7e,N8r,q8r,r7e,j8r,D8r,G8r,se,uM,t7e,O8r,V8r,lJ,X8r,z8r,Q8r,bM,a7e,W8r,H8r,iJ,U8r,J8r,Y8r,vM,n7e,K8r,Z8r,dJ,eMr,oMr,rMr,FM,s7e,tMr,aMr,cJ,nMr,sMr,lMr,TM,l7e,iMr,dMr,fJ,cMr,fMr,mMr,MM,i7e,gMr,hMr,mJ,pMr,_Mr,uMr,EM,d7e,bMr,vMr,gJ,FMr,TMr,MMr,CM,c7e,EMr,CMr,hJ,wMr,AMr,LMr,wM,f7e,yMr,xMr,pJ,$Mr,kMr,SMr,AM,m7e,RMr,PMr,_J,BMr,IMr,NMr,LM,g7e,qMr,jMr,uJ,DMr,GMr,OMr,yM,h7e,VMr,XMr,bJ,zMr,QMr,WMr,xM,p7e,HMr,UMr,vJ,JMr,YMr,KMr,$M,_7e,ZMr,e4r,FJ,o4r,r4r,t4r,kM,u7e,a4r,n4r,TJ,s4r,l4r,i4r,SM,b7e,d4r,c4r,MJ,f4r,m4r,g4r,RM,v7e,h4r,p4r,EJ,_4r,u4r,b4r,PM,F7e,v4r,F4r,CJ,T4r,M4r,E4r,BM,T7e,C4r,w4r,wJ,A4r,L4r,y4r,IM,M7e,x4r,$4r,AJ,k4r,S4r,R4r,NM,E7e,P4r,B4r,LJ,I4r,N4r,q4r,qM,C7e,j4r,D4r,yJ,G4r,O4r,V4r,jM,w7e,X4r,z4r,xJ,Q4r,W4r,H4r,DM,tze,fc,GM,A7e,Z9,U4r,L7e,J4r,aze,rr,ex,Y4r,mc,K4r,$J,Z4r,eEr,kJ,oEr,rEr,tEr,ox,aEr,y7e,nEr,sEr,lEr,Pt,rx,iEr,x7e,dEr,cEr,gc,fEr,$7e,mEr,gEr,SJ,hEr,pEr,_Er,OM,uEr,$r,tx,bEr,k7e,vEr,FEr,ln,TEr,S7e,MEr,EEr,R7e,CEr,wEr,P7e,AEr,LEr,yEr,Me,VM,B7e,xEr,$Er,RJ,kEr,SEr,REr,XM,I7e,PEr,BEr,PJ,IEr,NEr,qEr,zM,N7e,jEr,DEr,BJ,GEr,OEr,VEr,QM,q7e,XEr,zEr,IJ,QEr,WEr,HEr,WM,j7e,UEr,JEr,NJ,YEr,KEr,ZEr,HM,D7e,eCr,oCr,qJ,rCr,tCr,aCr,UM,G7e,nCr,sCr,jJ,lCr,iCr,dCr,JM,O7e,cCr,fCr,DJ,mCr,gCr,hCr,YM,V7e,pCr,_Cr,GJ,uCr,bCr,vCr,KM,X7e,FCr,TCr,OJ,MCr,ECr,CCr,ZM,z7e,wCr,ACr,VJ,LCr,yCr,xCr,e4,Q7e,$Cr,kCr,XJ,SCr,RCr,PCr,o4,W7e,BCr,ICr,zJ,NCr,qCr,jCr,r4,nze,hc,t4,H7e,ax,DCr,U7e,GCr,sze,tr,nx,OCr,pc,VCr,QJ,XCr,zCr,WJ,QCr,WCr,HCr,sx,UCr,J7e,JCr,YCr,KCr,Bt,lx,ZCr,Y7e,e3r,o3r,_c,r3r,K7e,t3r,a3r,HJ,n3r,s3r,l3r,a4,i3r,kr,ix,d3r,Z7e,c3r,f3r,dn,m3r,e8e,g3r,h3r,o8e,p3r,_3r,r8e,u3r,b3r,v3r,tt,n4,t8e,F3r,T3r,UJ,M3r,E3r,C3r,s4,a8e,w3r,A3r,JJ,L3r,y3r,x3r,l4,n8e,$3r,k3r,YJ,S3r,R3r,P3r,i4,s8e,B3r,I3r,KJ,N3r,q3r,j3r,d4,l8e,D3r,G3r,ZJ,O3r,V3r,X3r,c4,lze,uc,f4,i8e,dx,z3r,d8e,Q3r,ize,ar,cx,W3r,bc,H3r,eY,U3r,J3r,oY,Y3r,K3r,Z3r,fx,e5r,c8e,o5r,r5r,t5r,It,mx,a5r,f8e,n5r,s5r,vc,l5r,m8e,i5r,d5r,rY,c5r,f5r,m5r,m4,g5r,Sr,gx,h5r,g8e,p5r,_5r,cn,u5r,h8e,b5r,v5r,p8e,F5r,T5r,_8e,M5r,E5r,C5r,ie,g4,u8e,w5r,A5r,tY,L5r,y5r,x5r,h4,b8e,$5r,k5r,aY,S5r,R5r,P5r,p4,v8e,B5r,I5r,nY,N5r,q5r,j5r,_4,F8e,D5r,G5r,sY,O5r,V5r,X5r,u4,T8e,z5r,Q5r,lY,W5r,H5r,U5r,b4,M8e,J5r,Y5r,iY,K5r,Z5r,e0r,v4,E8e,o0r,r0r,dY,t0r,a0r,n0r,F4,C8e,s0r,l0r,cY,i0r,d0r,c0r,T4,w8e,f0r,m0r,fY,g0r,h0r,p0r,M4,A8e,_0r,u0r,mY,b0r,v0r,F0r,E4,L8e,T0r,M0r,gY,E0r,C0r,w0r,C4,y8e,A0r,L0r,hY,y0r,x0r,$0r,w4,x8e,k0r,S0r,pY,R0r,P0r,B0r,A4,$8e,I0r,N0r,_Y,q0r,j0r,D0r,L4,k8e,G0r,O0r,uY,V0r,X0r,z0r,y4,S8e,Q0r,W0r,bY,H0r,U0r,J0r,x4,R8e,Y0r,K0r,vY,Z0r,ewr,owr,$4,P8e,rwr,twr,FY,awr,nwr,swr,k4,B8e,lwr,iwr,TY,dwr,cwr,fwr,S4,I8e,mwr,gwr,MY,hwr,pwr,_wr,R4,dze,Fc,P4,N8e,hx,uwr,q8e,bwr,cze,nr,px,vwr,Tc,Fwr,EY,Twr,Mwr,CY,Ewr,Cwr,wwr,_x,Awr,j8e,Lwr,ywr,xwr,Nt,ux,$wr,D8e,kwr,Swr,Mc,Rwr,G8e,Pwr,Bwr,wY,Iwr,Nwr,qwr,B4,jwr,Rr,bx,Dwr,O8e,Gwr,Owr,fn,Vwr,V8e,Xwr,zwr,X8e,Qwr,Wwr,z8e,Hwr,Uwr,Jwr,ye,I4,Q8e,Ywr,Kwr,AY,Zwr,eAr,oAr,N4,W8e,rAr,tAr,LY,aAr,nAr,sAr,q4,H8e,lAr,iAr,yY,dAr,cAr,fAr,j4,U8e,mAr,gAr,xY,hAr,pAr,_Ar,D4,J8e,uAr,bAr,$Y,vAr,FAr,TAr,G4,Y8e,MAr,EAr,kY,CAr,wAr,AAr,O4,K8e,LAr,yAr,SY,xAr,$Ar,kAr,V4,Z8e,SAr,RAr,RY,PAr,BAr,IAr,X4,eMe,NAr,qAr,PY,jAr,DAr,GAr,z4,oMe,OAr,VAr,BY,XAr,zAr,QAr,Q4,fze,Ec,W4,rMe,vx,WAr,tMe,HAr,mze,sr,Fx,UAr,Cc,JAr,IY,YAr,KAr,NY,ZAr,eLr,oLr,Tx,rLr,aMe,tLr,aLr,nLr,qt,Mx,sLr,nMe,lLr,iLr,wc,dLr,sMe,cLr,fLr,qY,mLr,gLr,hLr,H4,pLr,Pr,Ex,_Lr,lMe,uLr,bLr,mn,vLr,iMe,FLr,TLr,dMe,MLr,ELr,cMe,CLr,wLr,ALr,te,U4,fMe,LLr,yLr,jY,xLr,$Lr,kLr,J4,mMe,SLr,RLr,DY,PLr,BLr,ILr,Y4,gMe,NLr,qLr,GY,jLr,DLr,GLr,K4,hMe,OLr,VLr,OY,XLr,zLr,QLr,Z4,pMe,WLr,HLr,VY,ULr,JLr,YLr,eE,_Me,KLr,ZLr,XY,eyr,oyr,ryr,oE,uMe,tyr,ayr,zY,nyr,syr,lyr,rE,bMe,iyr,dyr,QY,cyr,fyr,myr,tE,vMe,gyr,hyr,WY,pyr,_yr,uyr,aE,FMe,byr,vyr,HY,Fyr,Tyr,Myr,nE,TMe,Eyr,Cyr,UY,wyr,Ayr,Lyr,sE,MMe,yyr,xyr,JY,$yr,kyr,Syr,lE,EMe,Ryr,Pyr,YY,Byr,Iyr,Nyr,iE,CMe,qyr,jyr,KY,Dyr,Gyr,Oyr,dE,wMe,Vyr,Xyr,ZY,zyr,Qyr,Wyr,cE,AMe,Hyr,Uyr,eK,Jyr,Yyr,Kyr,fE,LMe,Zyr,e9r,oK,o9r,r9r,t9r,mE,yMe,a9r,n9r,rK,s9r,l9r,i9r,gE,xMe,d9r,c9r,tK,f9r,m9r,g9r,hE,$Me,h9r,p9r,aK,_9r,u9r,b9r,pE,kMe,v9r,F9r,nK,T9r,M9r,E9r,_E,SMe,C9r,w9r,sK,A9r,L9r,y9r,uE,RMe,x9r,$9r,lK,k9r,S9r,R9r,bE,PMe,P9r,B9r,iK,I9r,N9r,q9r,vE,BMe,j9r,D9r,dK,G9r,O9r,V9r,FE,IMe,X9r,z9r,cK,Q9r,W9r,H9r,TE,gze,Ac,ME,NMe,Cx,U9r,qMe,J9r,hze,lr,wx,Y9r,Lc,K9r,fK,Z9r,exr,mK,oxr,rxr,txr,Ax,axr,jMe,nxr,sxr,lxr,jt,Lx,ixr,DMe,dxr,cxr,yc,fxr,GMe,mxr,gxr,gK,hxr,pxr,_xr,EE,uxr,Br,yx,bxr,OMe,vxr,Fxr,gn,Txr,VMe,Mxr,Exr,XMe,Cxr,wxr,zMe,Axr,Lxr,yxr,_e,CE,QMe,xxr,$xr,hK,kxr,Sxr,Rxr,wE,WMe,Pxr,Bxr,pK,Ixr,Nxr,qxr,AE,HMe,jxr,Dxr,_K,Gxr,Oxr,Vxr,LE,UMe,Xxr,zxr,uK,Qxr,Wxr,Hxr,yE,JMe,Uxr,Jxr,bK,Yxr,Kxr,Zxr,xE,YMe,e$r,o$r,vK,r$r,t$r,a$r,$E,KMe,n$r,s$r,FK,l$r,i$r,d$r,kE,ZMe,c$r,f$r,TK,m$r,g$r,h$r,SE,e4e,p$r,_$r,MK,u$r,b$r,v$r,RE,o4e,F$r,T$r,EK,M$r,E$r,C$r,PE,r4e,w$r,A$r,CK,L$r,y$r,x$r,BE,t4e,$$r,k$r,wK,S$r,R$r,P$r,IE,a4e,B$r,I$r,AK,N$r,q$r,j$r,NE,n4e,D$r,G$r,LK,O$r,V$r,X$r,qE,s4e,z$r,Q$r,yK,W$r,H$r,U$r,jE,l4e,J$r,Y$r,xK,K$r,Z$r,ekr,DE,i4e,okr,rkr,$K,tkr,akr,nkr,GE,pze,xc,OE,d4e,xx,skr,c4e,lkr,_ze,ir,$x,ikr,$c,dkr,kK,ckr,fkr,SK,mkr,gkr,hkr,kx,pkr,f4e,_kr,ukr,bkr,Dt,Sx,vkr,m4e,Fkr,Tkr,kc,Mkr,g4e,Ekr,Ckr,RK,wkr,Akr,Lkr,VE,ykr,Ir,Rx,xkr,h4e,$kr,kkr,hn,Skr,p4e,Rkr,Pkr,_4e,Bkr,Ikr,u4e,Nkr,qkr,jkr,Px,XE,b4e,Dkr,Gkr,PK,Okr,Vkr,Xkr,zE,v4e,zkr,Qkr,BK,Wkr,Hkr,Ukr,QE,uze,Sc,WE,F4e,Bx,Jkr,T4e,Ykr,bze,dr,Ix,Kkr,Rc,Zkr,IK,eSr,oSr,NK,rSr,tSr,aSr,Nx,nSr,M4e,sSr,lSr,iSr,Gt,qx,dSr,E4e,cSr,fSr,Pc,mSr,C4e,gSr,hSr,qK,pSr,_Sr,uSr,HE,bSr,Nr,jx,vSr,w4e,FSr,TSr,pn,MSr,A4e,ESr,CSr,L4e,wSr,ASr,y4e,LSr,ySr,xSr,x4e,UE,$4e,$Sr,kSr,jK,SSr,RSr,PSr,JE,vze,Bc,YE,k4e,Dx,BSr,S4e,ISr,Fze,cr,Gx,NSr,Ic,qSr,DK,jSr,DSr,GK,GSr,OSr,VSr,Ox,XSr,R4e,zSr,QSr,WSr,Ot,Vx,HSr,P4e,USr,JSr,Nc,YSr,B4e,KSr,ZSr,OK,eRr,oRr,rRr,KE,tRr,qr,Xx,aRr,I4e,nRr,sRr,_n,lRr,N4e,iRr,dRr,q4e,cRr,fRr,j4e,mRr,gRr,hRr,de,ZE,D4e,pRr,_Rr,VK,uRr,bRr,vRr,eC,G4e,FRr,TRr,XK,MRr,ERr,CRr,oC,O4e,wRr,ARr,zK,LRr,yRr,xRr,rC,V4e,$Rr,kRr,QK,SRr,RRr,PRr,tC,X4e,BRr,IRr,WK,NRr,qRr,jRr,aC,z4e,DRr,GRr,HK,ORr,VRr,XRr,nC,Q4e,zRr,QRr,UK,WRr,HRr,URr,sC,W4e,JRr,YRr,JK,KRr,ZRr,ePr,lC,H4e,oPr,rPr,YK,tPr,aPr,nPr,iC,U4e,sPr,lPr,KK,iPr,dPr,cPr,dC,J4e,fPr,mPr,ZK,gPr,hPr,pPr,cC,Y4e,_Pr,uPr,eZ,bPr,vPr,FPr,fC,K4e,TPr,MPr,oZ,EPr,CPr,wPr,mC,Z4e,APr,LPr,rZ,yPr,xPr,$Pr,gC,eEe,kPr,SPr,tZ,RPr,PPr,BPr,hC,oEe,IPr,NPr,aZ,qPr,jPr,DPr,pC,rEe,GPr,OPr,nZ,VPr,XPr,zPr,_C,tEe,QPr,WPr,sZ,HPr,UPr,JPr,uC,aEe,YPr,KPr,lZ,ZPr,eBr,oBr,bC,nEe,rBr,tBr,iZ,aBr,nBr,sBr,vC,Tze,qc,FC,sEe,zx,lBr,lEe,iBr,Mze,fr,Qx,dBr,jc,cBr,dZ,fBr,mBr,cZ,gBr,hBr,pBr,Wx,_Br,iEe,uBr,bBr,vBr,Vt,Hx,FBr,dEe,TBr,MBr,Dc,EBr,cEe,CBr,wBr,fZ,ABr,LBr,yBr,TC,xBr,jr,Ux,$Br,fEe,kBr,SBr,un,RBr,mEe,PBr,BBr,gEe,IBr,NBr,hEe,qBr,jBr,DBr,ce,MC,pEe,GBr,OBr,mZ,VBr,XBr,zBr,EC,_Ee,QBr,WBr,gZ,HBr,UBr,JBr,CC,uEe,YBr,KBr,hZ,ZBr,eIr,oIr,wC,bEe,rIr,tIr,pZ,aIr,nIr,sIr,AC,vEe,lIr,iIr,_Z,dIr,cIr,fIr,LC,FEe,mIr,gIr,uZ,hIr,pIr,_Ir,yC,TEe,uIr,bIr,bZ,vIr,FIr,TIr,xC,MEe,MIr,EIr,vZ,CIr,wIr,AIr,$C,EEe,LIr,yIr,FZ,xIr,$Ir,kIr,kC,CEe,SIr,RIr,TZ,PIr,BIr,IIr,SC,wEe,NIr,qIr,MZ,jIr,DIr,GIr,RC,AEe,OIr,VIr,EZ,XIr,zIr,QIr,PC,LEe,WIr,HIr,CZ,UIr,JIr,YIr,BC,yEe,KIr,ZIr,wZ,eNr,oNr,rNr,IC,xEe,tNr,aNr,AZ,nNr,sNr,lNr,NC,$Ee,iNr,dNr,LZ,cNr,fNr,mNr,qC,kEe,gNr,hNr,yZ,pNr,_Nr,uNr,jC,SEe,bNr,vNr,xZ,FNr,TNr,MNr,DC,REe,ENr,CNr,$Z,wNr,ANr,LNr,GC,PEe,yNr,xNr,kZ,$Nr,kNr,SNr,OC,Eze,Gc,VC,BEe,Jx,RNr,IEe,PNr,Cze,mr,Yx,BNr,Oc,INr,SZ,NNr,qNr,RZ,jNr,DNr,GNr,Kx,ONr,NEe,VNr,XNr,zNr,Xt,Zx,QNr,qEe,WNr,HNr,Vc,UNr,jEe,JNr,YNr,PZ,KNr,ZNr,eqr,XC,oqr,Dr,e$,rqr,DEe,tqr,aqr,bn,nqr,GEe,sqr,lqr,OEe,iqr,dqr,VEe,cqr,fqr,mqr,XEe,zC,zEe,gqr,hqr,BZ,pqr,_qr,uqr,QC,wze,Xc,WC,QEe,o$,bqr,WEe,vqr,Aze,gr,r$,Fqr,zc,Tqr,IZ,Mqr,Eqr,NZ,Cqr,wqr,Aqr,t$,Lqr,HEe,yqr,xqr,$qr,zt,a$,kqr,UEe,Sqr,Rqr,Qc,Pqr,JEe,Bqr,Iqr,qZ,Nqr,qqr,jqr,HC,Dqr,Gr,n$,Gqr,YEe,Oqr,Vqr,vn,Xqr,KEe,zqr,Qqr,ZEe,Wqr,Hqr,eCe,Uqr,Jqr,Yqr,oCe,UC,rCe,Kqr,Zqr,jZ,ejr,ojr,rjr,JC,Lze,Wc,YC,tCe,s$,tjr,aCe,ajr,yze,hr,l$,njr,Hc,sjr,DZ,ljr,ijr,GZ,djr,cjr,fjr,i$,mjr,nCe,gjr,hjr,pjr,Qt,d$,_jr,sCe,ujr,bjr,Uc,vjr,lCe,Fjr,Tjr,OZ,Mjr,Ejr,Cjr,KC,wjr,Or,c$,Ajr,iCe,Ljr,yjr,Fn,xjr,dCe,$jr,kjr,cCe,Sjr,Rjr,fCe,Pjr,Bjr,Ijr,oe,ZC,mCe,Njr,qjr,VZ,jjr,Djr,Gjr,e3,gCe,Ojr,Vjr,XZ,Xjr,zjr,Qjr,o3,hCe,Wjr,Hjr,zZ,Ujr,Jjr,Yjr,r3,pCe,Kjr,Zjr,QZ,eDr,oDr,rDr,t3,_Ce,tDr,aDr,WZ,nDr,sDr,lDr,a3,uCe,iDr,dDr,HZ,cDr,fDr,mDr,n3,bCe,gDr,hDr,UZ,pDr,_Dr,uDr,s3,vCe,bDr,vDr,JZ,FDr,TDr,MDr,l3,FCe,EDr,CDr,YZ,wDr,ADr,LDr,i3,TCe,yDr,xDr,KZ,$Dr,kDr,SDr,d3,MCe,RDr,PDr,ZZ,BDr,IDr,NDr,c3,ECe,qDr,jDr,eee,DDr,GDr,ODr,f3,CCe,VDr,XDr,oee,zDr,QDr,WDr,m3,wCe,HDr,UDr,ree,JDr,YDr,KDr,g3,ACe,ZDr,eGr,tee,oGr,rGr,tGr,h3,LCe,aGr,nGr,aee,sGr,lGr,iGr,p3,yCe,dGr,cGr,nee,fGr,mGr,gGr,_3,xCe,hGr,pGr,see,_Gr,uGr,bGr,u3,$Ce,vGr,FGr,lee,TGr,MGr,EGr,b3,kCe,CGr,wGr,iee,AGr,LGr,yGr,v3,SCe,xGr,$Gr,dee,kGr,SGr,RGr,F3,RCe,PGr,BGr,cee,IGr,NGr,qGr,T3,PCe,jGr,DGr,fee,GGr,OGr,VGr,M3,BCe,XGr,zGr,mee,QGr,WGr,HGr,E3,ICe,UGr,JGr,gee,YGr,KGr,ZGr,C3,NCe,eOr,oOr,hee,rOr,tOr,aOr,w3,qCe,nOr,sOr,pee,lOr,iOr,dOr,A3,xze,Jc,L3,jCe,f$,cOr,DCe,fOr,$ze,pr,m$,mOr,Yc,gOr,_ee,hOr,pOr,uee,_Or,uOr,bOr,g$,vOr,GCe,FOr,TOr,MOr,Wt,h$,EOr,OCe,COr,wOr,Kc,AOr,VCe,LOr,yOr,bee,xOr,$Or,kOr,y3,SOr,Vr,p$,ROr,XCe,POr,BOr,Tn,IOr,zCe,NOr,qOr,QCe,jOr,DOr,WCe,GOr,OOr,VOr,xe,x3,HCe,XOr,zOr,vee,QOr,WOr,HOr,$3,UCe,UOr,JOr,Fee,YOr,KOr,ZOr,k3,JCe,eVr,oVr,Tee,rVr,tVr,aVr,S3,YCe,nVr,sVr,Mee,lVr,iVr,dVr,R3,KCe,cVr,fVr,Eee,mVr,gVr,hVr,P3,ZCe,pVr,_Vr,Cee,uVr,bVr,vVr,B3,e3e,FVr,TVr,wee,MVr,EVr,CVr,I3,o3e,wVr,AVr,Aee,LVr,yVr,xVr,N3,r3e,$Vr,kVr,Lee,SVr,RVr,PVr,q3,t3e,BVr,IVr,yee,NVr,qVr,jVr,j3,kze,Zc,D3,a3e,_$,DVr,n3e,GVr,Sze,_r,u$,OVr,ef,VVr,xee,XVr,zVr,$ee,QVr,WVr,HVr,b$,UVr,s3e,JVr,YVr,KVr,Ht,v$,ZVr,l3e,eXr,oXr,of,rXr,i3e,tXr,aXr,kee,nXr,sXr,lXr,G3,iXr,Xr,F$,dXr,d3e,cXr,fXr,Mn,mXr,c3e,gXr,hXr,f3e,pXr,_Xr,m3e,uXr,bXr,vXr,Ee,O3,g3e,FXr,TXr,See,MXr,EXr,CXr,V3,h3e,wXr,AXr,Ree,LXr,yXr,xXr,X3,p3e,$Xr,kXr,Pee,SXr,RXr,PXr,z3,_3e,BXr,IXr,Bee,NXr,qXr,jXr,Q3,u3e,DXr,GXr,Iee,OXr,VXr,XXr,W3,b3e,zXr,QXr,Nee,WXr,HXr,UXr,H3,v3e,JXr,YXr,qee,KXr,ZXr,ezr,U3,F3e,ozr,rzr,jee,tzr,azr,nzr,J3,T3e,szr,lzr,Dee,izr,dzr,czr,Y3,M3e,fzr,mzr,Gee,gzr,hzr,pzr,K3,E3e,_zr,uzr,Oee,bzr,vzr,Fzr,Z3,C3e,Tzr,Mzr,Vee,Ezr,Czr,wzr,e5,w3e,Azr,Lzr,Xee,yzr,xzr,$zr,o5,Rze,rf,r5,A3e,T$,kzr,L3e,Szr,Pze,ur,M$,Rzr,tf,Pzr,zee,Bzr,Izr,Qee,Nzr,qzr,jzr,E$,Dzr,y3e,Gzr,Ozr,Vzr,Ut,C$,Xzr,x3e,zzr,Qzr,af,Wzr,$3e,Hzr,Uzr,Wee,Jzr,Yzr,Kzr,t5,Zzr,zr,w$,eQr,k3e,oQr,rQr,En,tQr,S3e,aQr,nQr,R3e,sQr,lQr,P3e,iQr,dQr,cQr,$e,a5,B3e,fQr,mQr,Hee,gQr,hQr,pQr,n5,I3e,_Qr,uQr,Uee,bQr,vQr,FQr,s5,N3e,TQr,MQr,Jee,EQr,CQr,wQr,l5,q3e,AQr,LQr,Yee,yQr,xQr,$Qr,i5,j3e,kQr,SQr,Kee,RQr,PQr,BQr,d5,D3e,IQr,NQr,Zee,qQr,jQr,DQr,c5,G3e,GQr,OQr,eoe,VQr,XQr,zQr,f5,O3e,QQr,WQr,ooe,HQr,UQr,JQr,m5,V3e,YQr,KQr,roe,ZQr,eWr,oWr,g5,X3e,rWr,tWr,toe,aWr,nWr,sWr,h5,Bze,nf,p5,z3e,A$,lWr,Q3e,iWr,Ize,br,L$,dWr,sf,cWr,aoe,fWr,mWr,noe,gWr,hWr,pWr,y$,_Wr,W3e,uWr,bWr,vWr,Jt,x$,FWr,H3e,TWr,MWr,lf,EWr,U3e,CWr,wWr,soe,AWr,LWr,yWr,_5,xWr,Qr,$$,$Wr,J3e,kWr,SWr,Cn,RWr,Y3e,PWr,BWr,K3e,IWr,NWr,Z3e,qWr,jWr,DWr,ke,u5,e5e,GWr,OWr,loe,VWr,XWr,zWr,b5,o5e,QWr,WWr,ioe,HWr,UWr,JWr,v5,r5e,YWr,KWr,doe,ZWr,eHr,oHr,F5,t5e,rHr,tHr,coe,aHr,nHr,sHr,T5,a5e,lHr,iHr,foe,dHr,cHr,fHr,M5,n5e,mHr,gHr,moe,hHr,pHr,_Hr,E5,s5e,uHr,bHr,goe,vHr,FHr,THr,C5,l5e,MHr,EHr,hoe,CHr,wHr,AHr,w5,i5e,LHr,yHr,poe,xHr,$Hr,kHr,A5,d5e,SHr,RHr,_oe,PHr,BHr,IHr,L5,Nze,df,y5,c5e,k$,NHr,f5e,qHr,qze,vr,S$,jHr,cf,DHr,uoe,GHr,OHr,boe,VHr,XHr,zHr,R$,QHr,m5e,WHr,HHr,UHr,Yt,P$,JHr,g5e,YHr,KHr,ff,ZHr,h5e,eUr,oUr,voe,rUr,tUr,aUr,x5,nUr,Wr,B$,sUr,p5e,lUr,iUr,wn,dUr,_5e,cUr,fUr,u5e,mUr,gUr,b5e,hUr,pUr,_Ur,Se,$5,v5e,uUr,bUr,Foe,vUr,FUr,TUr,k5,F5e,MUr,EUr,Toe,CUr,wUr,AUr,S5,T5e,LUr,yUr,Moe,xUr,$Ur,kUr,R5,M5e,SUr,RUr,Eoe,PUr,BUr,IUr,P5,E5e,NUr,qUr,Coe,jUr,DUr,GUr,B5,C5e,OUr,VUr,woe,XUr,zUr,QUr,I5,w5e,WUr,HUr,Aoe,UUr,JUr,YUr,N5,A5e,KUr,ZUr,Loe,eJr,oJr,rJr,q5,L5e,tJr,aJr,yoe,nJr,sJr,lJr,j5,y5e,iJr,dJr,xoe,cJr,fJr,mJr,D5,jze,mf,G5,x5e,I$,gJr,$5e,hJr,Dze,Fr,N$,pJr,gf,_Jr,$oe,uJr,bJr,koe,vJr,FJr,TJr,q$,MJr,k5e,EJr,CJr,wJr,Kt,j$,AJr,S5e,LJr,yJr,hf,xJr,R5e,$Jr,kJr,Soe,SJr,RJr,PJr,O5,BJr,Hr,D$,IJr,P5e,NJr,qJr,An,jJr,B5e,DJr,GJr,I5e,OJr,VJr,N5e,XJr,zJr,QJr,Re,V5,q5e,WJr,HJr,Roe,UJr,JJr,YJr,X5,j5e,KJr,ZJr,Poe,eYr,oYr,rYr,z5,D5e,tYr,aYr,Boe,nYr,sYr,lYr,Q5,G5e,iYr,dYr,Ioe,cYr,fYr,mYr,W5,O5e,gYr,hYr,Noe,pYr,_Yr,uYr,H5,V5e,bYr,vYr,qoe,FYr,TYr,MYr,U5,X5e,EYr,CYr,joe,wYr,AYr,LYr,J5,z5e,yYr,xYr,Doe,$Yr,kYr,SYr,Y5,Q5e,RYr,PYr,Goe,BYr,IYr,NYr,K5,W5e,qYr,jYr,Ooe,DYr,GYr,OYr,Z5,Gze,pf,e0,H5e,G$,VYr,U5e,XYr,Oze,Tr,O$,zYr,_f,QYr,Voe,WYr,HYr,Xoe,UYr,JYr,YYr,V$,KYr,J5e,ZYr,eKr,oKr,Zt,X$,rKr,Y5e,tKr,aKr,uf,nKr,K5e,sKr,lKr,zoe,iKr,dKr,cKr,o0,fKr,Ur,z$,mKr,Z5e,gKr,hKr,Ln,pKr,e0e,_Kr,uKr,o0e,bKr,vKr,r0e,FKr,TKr,MKr,Ve,r0,t0e,EKr,CKr,Qoe,wKr,AKr,LKr,t0,a0e,yKr,xKr,Woe,$Kr,kKr,SKr,a0,n0e,RKr,PKr,Hoe,BKr,IKr,NKr,n0,s0e,qKr,jKr,Uoe,DKr,GKr,OKr,s0,l0e,VKr,XKr,Joe,zKr,QKr,WKr,l0,i0e,HKr,UKr,Yoe,JKr,YKr,KKr,i0,d0e,ZKr,eZr,Koe,oZr,rZr,tZr,d0,c0e,aZr,nZr,Zoe,sZr,lZr,iZr,c0,Vze,bf,f0,f0e,Q$,dZr,m0e,cZr,Xze,Mr,W$,fZr,vf,mZr,ere,gZr,hZr,ore,pZr,_Zr,uZr,H$,bZr,g0e,vZr,FZr,TZr,ea,U$,MZr,h0e,EZr,CZr,Ff,wZr,p0e,AZr,LZr,rre,yZr,xZr,$Zr,m0,kZr,Jr,J$,SZr,_0e,RZr,PZr,yn,BZr,u0e,IZr,NZr,b0e,qZr,jZr,v0e,DZr,GZr,OZr,Xe,g0,F0e,VZr,XZr,tre,zZr,QZr,WZr,h0,T0e,HZr,UZr,are,JZr,YZr,KZr,p0,M0e,ZZr,eet,nre,oet,ret,tet,_0,E0e,aet,net,sre,set,iet,det,u0,C0e,cet,fet,lre,met,get,het,b0,w0e,pet,_et,ire,uet,bet,vet,v0,A0e,Fet,Tet,dre,Met,Eet,Cet,F0,L0e,wet,Aet,cre,Let,yet,xet,T0,zze,Tf,M0,y0e,Y$,$et,x0e,ket,Qze,Er,K$,Set,Mf,Ret,fre,Pet,Bet,mre,Iet,Net,qet,Z$,jet,$0e,Det,Get,Oet,oa,ek,Vet,k0e,Xet,zet,Ef,Qet,S0e,Wet,Het,gre,Uet,Jet,Yet,E0,Ket,Yr,ok,Zet,R0e,eot,oot,xn,rot,P0e,tot,aot,B0e,not,sot,I0e,lot,iot,dot,N0e,C0,q0e,cot,fot,hre,mot,got,hot,w0,Wze,Cf,A0,j0e,rk,pot,D0e,_ot,Hze,Cr,tk,uot,wf,bot,pre,vot,Fot,_re,Tot,Mot,Eot,ak,Cot,G0e,wot,Aot,Lot,ra,nk,yot,O0e,xot,$ot,Af,kot,V0e,Sot,Rot,ure,Pot,Bot,Iot,L0,Not,Kr,sk,qot,X0e,jot,Dot,$n,Got,z0e,Oot,Vot,Q0e,Xot,zot,W0e,Qot,Wot,Hot,lk,y0,H0e,Uot,Jot,bre,Yot,Kot,Zot,x0,U0e,ert,ort,vre,rrt,trt,art,$0,Uze,Lf,k0,J0e,ik,nrt,Y0e,srt,Jze,wr,dk,lrt,yf,irt,Fre,drt,crt,Tre,frt,mrt,grt,ck,hrt,K0e,prt,_rt,urt,ta,fk,brt,Z0e,vrt,Frt,xf,Trt,ewe,Mrt,Ert,Mre,Crt,wrt,Art,S0,Lrt,Zr,mk,yrt,owe,xrt,$rt,kn,krt,rwe,Srt,Rrt,twe,Prt,Brt,awe,Irt,Nrt,qrt,nwe,R0,swe,jrt,Drt,Ere,Grt,Ort,Vrt,P0,Yze;return d=new re({}),ka=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),tL=new re({}),aL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Xrt({props:{warning:!0,$$slots:{default:[FQt]},$$scope:{ctx:$}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L613"}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L636"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),cL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L759"}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L404"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L418"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L617"}}),uL=new re({}),bL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new Xrt({props:{$$slots:{default:[EQt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),ML=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L89"}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new Xrt({props:{$$slots:{default:[wQt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L256"}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L783"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L790"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L805"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L812"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L819"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L828"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L873"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L880"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L866"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L837"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L844"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L889"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L928"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L855"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L935"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L958"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),o9=new re({}),r9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L942"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L949"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),m9=new re({}),g9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L967"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),u9=new re({}),b9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L974"}}),F9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),M9=new re({}),E9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L921"}}),w9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),y9=new re({}),x9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L896"}}),k9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),R9=new re({}),P9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L903"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),q9=new re({}),j9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L912"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),V9=new re({}),X9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),H9=new re({}),U9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),I$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Q$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),ik=new re({}),dk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),ZA=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Rn=a("a"),eL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),oL=o("AutoModel"),$i=o(`, and
`),In=a("a"),rL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(ka.$$.fragment),We=l(),Ae=a("p"),RS=o("will create a model that is an instance of "),Si=a("a"),PS=o("BertModel"),BS=o("."),Co=l(),Sa=a("p"),IS=o("There is one class of "),If=a("code"),NS=o("AutoModel"),lHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),QVe=l(),Ri=a("h2"),Nf=a("a"),bae=a("span"),F(tL.$$.fragment),iHe=l(),vae=a("span"),dHe=o("Extending the Auto Classes"),WVe=l(),Nn=a("p"),cHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=a("code"),fHe=o("NewModel"),mHe=o(", make sure you have a "),Tae=a("code"),gHe=o("NewModelConfig"),hHe=o(` then you can add those to the auto
classes like this:`),HVe=l(),F(aL.$$.fragment),UVe=l(),qS=a("p"),pHe=o("You will then be able to use the auto classes like you would usually do!"),JVe=l(),F(qf.$$.fragment),YVe=l(),Pi=a("h2"),jf=a("a"),Mae=a("span"),F(nL.$$.fragment),_He=l(),Eae=a("span"),uHe=o("AutoConfig"),KVe=l(),wo=a("div"),F(sL.$$.fragment),bHe=l(),lL=a("p"),vHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jS=a("a"),FHe=o("from_pretrained()"),THe=o(" class method."),MHe=l(),iL=a("p"),EHe=o("This class cannot be instantiated directly using "),Cae=a("code"),CHe=o("__init__()"),wHe=o(" (throws an error)."),AHe=l(),Ar=a("div"),F(dL.$$.fragment),LHe=l(),wae=a("p"),yHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),xHe=l(),Bi=a("p"),$He=o("The configuration class to instantiate is selected based on the "),Aae=a("code"),kHe=o("model_type"),SHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=a("code"),RHe=o("pretrained_model_name_or_path"),PHe=o(":"),BHe=l(),A=a("ul"),Df=a("li"),yae=a("strong"),IHe=o("albert"),NHe=o(" \u2014 "),DS=a("a"),qHe=o("AlbertConfig"),jHe=o(" (ALBERT model)"),DHe=l(),Gf=a("li"),xae=a("strong"),GHe=o("bart"),OHe=o(" \u2014 "),GS=a("a"),VHe=o("BartConfig"),XHe=o(" (BART model)"),zHe=l(),Of=a("li"),$ae=a("strong"),QHe=o("beit"),WHe=o(" \u2014 "),OS=a("a"),HHe=o("BeitConfig"),UHe=o(" (BEiT model)"),JHe=l(),Vf=a("li"),kae=a("strong"),YHe=o("bert"),KHe=o(" \u2014 "),VS=a("a"),ZHe=o("BertConfig"),eUe=o(" (BERT model)"),oUe=l(),Xf=a("li"),Sae=a("strong"),rUe=o("bert-generation"),tUe=o(" \u2014 "),XS=a("a"),aUe=o("BertGenerationConfig"),nUe=o(" (Bert Generation model)"),sUe=l(),zf=a("li"),Rae=a("strong"),lUe=o("big_bird"),iUe=o(" \u2014 "),zS=a("a"),dUe=o("BigBirdConfig"),cUe=o(" (BigBird model)"),fUe=l(),Qf=a("li"),Pae=a("strong"),mUe=o("bigbird_pegasus"),gUe=o(" \u2014 "),QS=a("a"),hUe=o("BigBirdPegasusConfig"),pUe=o(" (BigBird-Pegasus model)"),_Ue=l(),Wf=a("li"),Bae=a("strong"),uUe=o("blenderbot"),bUe=o(" \u2014 "),WS=a("a"),vUe=o("BlenderbotConfig"),FUe=o(" (Blenderbot model)"),TUe=l(),Hf=a("li"),Iae=a("strong"),MUe=o("blenderbot-small"),EUe=o(" \u2014 "),HS=a("a"),CUe=o("BlenderbotSmallConfig"),wUe=o(" (BlenderbotSmall model)"),AUe=l(),Uf=a("li"),Nae=a("strong"),LUe=o("bloom"),yUe=o(" \u2014 "),US=a("a"),xUe=o("BloomConfig"),$Ue=o(" (BLOOM model)"),kUe=l(),Jf=a("li"),qae=a("strong"),SUe=o("camembert"),RUe=o(" \u2014 "),JS=a("a"),PUe=o("CamembertConfig"),BUe=o(" (CamemBERT model)"),IUe=l(),Yf=a("li"),jae=a("strong"),NUe=o("canine"),qUe=o(" \u2014 "),YS=a("a"),jUe=o("CanineConfig"),DUe=o(" (CANINE model)"),GUe=l(),Kf=a("li"),Dae=a("strong"),OUe=o("clip"),VUe=o(" \u2014 "),KS=a("a"),XUe=o("CLIPConfig"),zUe=o(" (CLIP model)"),QUe=l(),Zf=a("li"),Gae=a("strong"),WUe=o("codegen"),HUe=o(" \u2014 "),ZS=a("a"),UUe=o("CodeGenConfig"),JUe=o(" (CodeGen model)"),YUe=l(),em=a("li"),Oae=a("strong"),KUe=o("convbert"),ZUe=o(" \u2014 "),eR=a("a"),eJe=o("ConvBertConfig"),oJe=o(" (ConvBERT model)"),rJe=l(),om=a("li"),Vae=a("strong"),tJe=o("convnext"),aJe=o(" \u2014 "),oR=a("a"),nJe=o("ConvNextConfig"),sJe=o(" (ConvNeXT model)"),lJe=l(),rm=a("li"),Xae=a("strong"),iJe=o("ctrl"),dJe=o(" \u2014 "),rR=a("a"),cJe=o("CTRLConfig"),fJe=o(" (CTRL model)"),mJe=l(),tm=a("li"),zae=a("strong"),gJe=o("cvt"),hJe=o(" \u2014 "),tR=a("a"),pJe=o("CvtConfig"),_Je=o(" (CvT model)"),uJe=l(),am=a("li"),Qae=a("strong"),bJe=o("data2vec-audio"),vJe=o(" \u2014 "),aR=a("a"),FJe=o("Data2VecAudioConfig"),TJe=o(" (Data2VecAudio model)"),MJe=l(),nm=a("li"),Wae=a("strong"),EJe=o("data2vec-text"),CJe=o(" \u2014 "),nR=a("a"),wJe=o("Data2VecTextConfig"),AJe=o(" (Data2VecText model)"),LJe=l(),sm=a("li"),Hae=a("strong"),yJe=o("data2vec-vision"),xJe=o(" \u2014 "),sR=a("a"),$Je=o("Data2VecVisionConfig"),kJe=o(" (Data2VecVision model)"),SJe=l(),lm=a("li"),Uae=a("strong"),RJe=o("deberta"),PJe=o(" \u2014 "),lR=a("a"),BJe=o("DebertaConfig"),IJe=o(" (DeBERTa model)"),NJe=l(),im=a("li"),Jae=a("strong"),qJe=o("deberta-v2"),jJe=o(" \u2014 "),iR=a("a"),DJe=o("DebertaV2Config"),GJe=o(" (DeBERTa-v2 model)"),OJe=l(),dm=a("li"),Yae=a("strong"),VJe=o("decision_transformer"),XJe=o(" \u2014 "),dR=a("a"),zJe=o("DecisionTransformerConfig"),QJe=o(" (Decision Transformer model)"),WJe=l(),cm=a("li"),Kae=a("strong"),HJe=o("deit"),UJe=o(" \u2014 "),cR=a("a"),JJe=o("DeiTConfig"),YJe=o(" (DeiT model)"),KJe=l(),fm=a("li"),Zae=a("strong"),ZJe=o("detr"),eYe=o(" \u2014 "),fR=a("a"),oYe=o("DetrConfig"),rYe=o(" (DETR model)"),tYe=l(),mm=a("li"),ene=a("strong"),aYe=o("distilbert"),nYe=o(" \u2014 "),mR=a("a"),sYe=o("DistilBertConfig"),lYe=o(" (DistilBERT model)"),iYe=l(),gm=a("li"),one=a("strong"),dYe=o("dpr"),cYe=o(" \u2014 "),gR=a("a"),fYe=o("DPRConfig"),mYe=o(" (DPR model)"),gYe=l(),hm=a("li"),rne=a("strong"),hYe=o("dpt"),pYe=o(" \u2014 "),hR=a("a"),_Ye=o("DPTConfig"),uYe=o(" (DPT model)"),bYe=l(),pm=a("li"),tne=a("strong"),vYe=o("electra"),FYe=o(" \u2014 "),pR=a("a"),TYe=o("ElectraConfig"),MYe=o(" (ELECTRA model)"),EYe=l(),_m=a("li"),ane=a("strong"),CYe=o("encoder-decoder"),wYe=o(" \u2014 "),_R=a("a"),AYe=o("EncoderDecoderConfig"),LYe=o(" (Encoder decoder model)"),yYe=l(),um=a("li"),nne=a("strong"),xYe=o("flaubert"),$Ye=o(" \u2014 "),uR=a("a"),kYe=o("FlaubertConfig"),SYe=o(" (FlauBERT model)"),RYe=l(),bm=a("li"),sne=a("strong"),PYe=o("flava"),BYe=o(" \u2014 "),bR=a("a"),IYe=o("FlavaConfig"),NYe=o(" (FLAVA model)"),qYe=l(),vm=a("li"),lne=a("strong"),jYe=o("fnet"),DYe=o(" \u2014 "),vR=a("a"),GYe=o("FNetConfig"),OYe=o(" (FNet model)"),VYe=l(),Fm=a("li"),ine=a("strong"),XYe=o("fsmt"),zYe=o(" \u2014 "),FR=a("a"),QYe=o("FSMTConfig"),WYe=o(" (FairSeq Machine-Translation model)"),HYe=l(),Tm=a("li"),dne=a("strong"),UYe=o("funnel"),JYe=o(" \u2014 "),TR=a("a"),YYe=o("FunnelConfig"),KYe=o(" (Funnel Transformer model)"),ZYe=l(),Mm=a("li"),cne=a("strong"),eKe=o("glpn"),oKe=o(" \u2014 "),MR=a("a"),rKe=o("GLPNConfig"),tKe=o(" (GLPN model)"),aKe=l(),Em=a("li"),fne=a("strong"),nKe=o("gpt2"),sKe=o(" \u2014 "),ER=a("a"),lKe=o("GPT2Config"),iKe=o(" (OpenAI GPT-2 model)"),dKe=l(),Cm=a("li"),mne=a("strong"),cKe=o("gpt_neo"),fKe=o(" \u2014 "),CR=a("a"),mKe=o("GPTNeoConfig"),gKe=o(" (GPT Neo model)"),hKe=l(),wm=a("li"),gne=a("strong"),pKe=o("gpt_neox"),_Ke=o(" \u2014 "),wR=a("a"),uKe=o("GPTNeoXConfig"),bKe=o(" (GPT NeoX model)"),vKe=l(),Am=a("li"),hne=a("strong"),FKe=o("gptj"),TKe=o(" \u2014 "),AR=a("a"),MKe=o("GPTJConfig"),EKe=o(" (GPT-J model)"),CKe=l(),Lm=a("li"),pne=a("strong"),wKe=o("groupvit"),AKe=o(" \u2014 "),LR=a("a"),LKe=o("GroupViTConfig"),yKe=o(" (GroupViT model)"),xKe=l(),ym=a("li"),_ne=a("strong"),$Ke=o("hubert"),kKe=o(" \u2014 "),yR=a("a"),SKe=o("HubertConfig"),RKe=o(" (Hubert model)"),PKe=l(),xm=a("li"),une=a("strong"),BKe=o("ibert"),IKe=o(" \u2014 "),xR=a("a"),NKe=o("IBertConfig"),qKe=o(" (I-BERT model)"),jKe=l(),$m=a("li"),bne=a("strong"),DKe=o("imagegpt"),GKe=o(" \u2014 "),$R=a("a"),OKe=o("ImageGPTConfig"),VKe=o(" (ImageGPT model)"),XKe=l(),km=a("li"),vne=a("strong"),zKe=o("jukebox"),QKe=o(" \u2014 "),kR=a("a"),WKe=o("JukeboxConfig"),HKe=o(" (Jukebox model)"),UKe=l(),Sm=a("li"),Fne=a("strong"),JKe=o("layoutlm"),YKe=o(" \u2014 "),SR=a("a"),KKe=o("LayoutLMConfig"),ZKe=o(" (LayoutLM model)"),eZe=l(),Rm=a("li"),Tne=a("strong"),oZe=o("layoutlmv2"),rZe=o(" \u2014 "),RR=a("a"),tZe=o("LayoutLMv2Config"),aZe=o(" (LayoutLMv2 model)"),nZe=l(),Pm=a("li"),Mne=a("strong"),sZe=o("layoutlmv3"),lZe=o(" \u2014 "),PR=a("a"),iZe=o("LayoutLMv3Config"),dZe=o(" (LayoutLMv3 model)"),cZe=l(),Bm=a("li"),Ene=a("strong"),fZe=o("led"),mZe=o(" \u2014 "),BR=a("a"),gZe=o("LEDConfig"),hZe=o(" (LED model)"),pZe=l(),Im=a("li"),Cne=a("strong"),_Ze=o("levit"),uZe=o(" \u2014 "),IR=a("a"),bZe=o("LevitConfig"),vZe=o(" (LeViT model)"),FZe=l(),Nm=a("li"),wne=a("strong"),TZe=o("longformer"),MZe=o(" \u2014 "),NR=a("a"),EZe=o("LongformerConfig"),CZe=o(" (Longformer model)"),wZe=l(),qm=a("li"),Ane=a("strong"),AZe=o("longt5"),LZe=o(" \u2014 "),qR=a("a"),yZe=o("LongT5Config"),xZe=o(" (LongT5 model)"),$Ze=l(),jm=a("li"),Lne=a("strong"),kZe=o("luke"),SZe=o(" \u2014 "),jR=a("a"),RZe=o("LukeConfig"),PZe=o(" (LUKE model)"),BZe=l(),Dm=a("li"),yne=a("strong"),IZe=o("lxmert"),NZe=o(" \u2014 "),DR=a("a"),qZe=o("LxmertConfig"),jZe=o(" (LXMERT model)"),DZe=l(),Gm=a("li"),xne=a("strong"),GZe=o("m2m_100"),OZe=o(" \u2014 "),GR=a("a"),VZe=o("M2M100Config"),XZe=o(" (M2M100 model)"),zZe=l(),Om=a("li"),$ne=a("strong"),QZe=o("marian"),WZe=o(" \u2014 "),OR=a("a"),HZe=o("MarianConfig"),UZe=o(" (Marian model)"),JZe=l(),Vm=a("li"),kne=a("strong"),YZe=o("maskformer"),KZe=o(" \u2014 "),VR=a("a"),ZZe=o("MaskFormerConfig"),eeo=o(" (MaskFormer model)"),oeo=l(),Xm=a("li"),Sne=a("strong"),reo=o("mbart"),teo=o(" \u2014 "),XR=a("a"),aeo=o("MBartConfig"),neo=o(" (mBART model)"),seo=l(),zm=a("li"),Rne=a("strong"),leo=o("mctct"),ieo=o(" \u2014 "),zR=a("a"),deo=o("MCTCTConfig"),ceo=o(" (M-CTC-T model)"),feo=l(),Qm=a("li"),Pne=a("strong"),meo=o("megatron-bert"),geo=o(" \u2014 "),QR=a("a"),heo=o("MegatronBertConfig"),peo=o(" (Megatron-BERT model)"),_eo=l(),Wm=a("li"),Bne=a("strong"),ueo=o("mobilebert"),beo=o(" \u2014 "),WR=a("a"),veo=o("MobileBertConfig"),Feo=o(" (MobileBERT model)"),Teo=l(),Hm=a("li"),Ine=a("strong"),Meo=o("mobilevit"),Eeo=o(" \u2014 "),HR=a("a"),Ceo=o("MobileViTConfig"),weo=o(" (MobileViT model)"),Aeo=l(),Um=a("li"),Nne=a("strong"),Leo=o("mpnet"),yeo=o(" \u2014 "),UR=a("a"),xeo=o("MPNetConfig"),$eo=o(" (MPNet model)"),keo=l(),Jm=a("li"),qne=a("strong"),Seo=o("mt5"),Reo=o(" \u2014 "),JR=a("a"),Peo=o("MT5Config"),Beo=o(" (MT5 model)"),Ieo=l(),Ym=a("li"),jne=a("strong"),Neo=o("mvp"),qeo=o(" \u2014 "),YR=a("a"),jeo=o("MvpConfig"),Deo=o(" (MVP model)"),Geo=l(),Km=a("li"),Dne=a("strong"),Oeo=o("nezha"),Veo=o(" \u2014 "),KR=a("a"),Xeo=o("NezhaConfig"),zeo=o(" (Nezha model)"),Qeo=l(),Zm=a("li"),Gne=a("strong"),Weo=o("nystromformer"),Heo=o(" \u2014 "),ZR=a("a"),Ueo=o("NystromformerConfig"),Jeo=o(" (Nystr\xF6mformer model)"),Yeo=l(),eg=a("li"),One=a("strong"),Keo=o("openai-gpt"),Zeo=o(" \u2014 "),eP=a("a"),eoo=o("OpenAIGPTConfig"),ooo=o(" (OpenAI GPT model)"),roo=l(),og=a("li"),Vne=a("strong"),too=o("opt"),aoo=o(" \u2014 "),oP=a("a"),noo=o("OPTConfig"),soo=o(" (OPT model)"),loo=l(),rg=a("li"),Xne=a("strong"),ioo=o("pegasus"),doo=o(" \u2014 "),rP=a("a"),coo=o("PegasusConfig"),foo=o(" (Pegasus model)"),moo=l(),tg=a("li"),zne=a("strong"),goo=o("perceiver"),hoo=o(" \u2014 "),tP=a("a"),poo=o("PerceiverConfig"),_oo=o(" (Perceiver model)"),uoo=l(),ag=a("li"),Qne=a("strong"),boo=o("plbart"),voo=o(" \u2014 "),aP=a("a"),Foo=o("PLBartConfig"),Too=o(" (PLBart model)"),Moo=l(),ng=a("li"),Wne=a("strong"),Eoo=o("poolformer"),Coo=o(" \u2014 "),nP=a("a"),woo=o("PoolFormerConfig"),Aoo=o(" (PoolFormer model)"),Loo=l(),sg=a("li"),Hne=a("strong"),yoo=o("prophetnet"),xoo=o(" \u2014 "),sP=a("a"),$oo=o("ProphetNetConfig"),koo=o(" (ProphetNet model)"),Soo=l(),lg=a("li"),Une=a("strong"),Roo=o("qdqbert"),Poo=o(" \u2014 "),lP=a("a"),Boo=o("QDQBertConfig"),Ioo=o(" (QDQBert model)"),Noo=l(),ig=a("li"),Jne=a("strong"),qoo=o("rag"),joo=o(" \u2014 "),iP=a("a"),Doo=o("RagConfig"),Goo=o(" (RAG model)"),Ooo=l(),dg=a("li"),Yne=a("strong"),Voo=o("realm"),Xoo=o(" \u2014 "),dP=a("a"),zoo=o("RealmConfig"),Qoo=o(" (REALM model)"),Woo=l(),cg=a("li"),Kne=a("strong"),Hoo=o("reformer"),Uoo=o(" \u2014 "),cP=a("a"),Joo=o("ReformerConfig"),Yoo=o(" (Reformer model)"),Koo=l(),fg=a("li"),Zne=a("strong"),Zoo=o("regnet"),ero=o(" \u2014 "),fP=a("a"),oro=o("RegNetConfig"),rro=o(" (RegNet model)"),tro=l(),mg=a("li"),ese=a("strong"),aro=o("rembert"),nro=o(" \u2014 "),mP=a("a"),sro=o("RemBertConfig"),lro=o(" (RemBERT model)"),iro=l(),gg=a("li"),ose=a("strong"),dro=o("resnet"),cro=o(" \u2014 "),gP=a("a"),fro=o("ResNetConfig"),mro=o(" (ResNet model)"),gro=l(),hg=a("li"),rse=a("strong"),hro=o("retribert"),pro=o(" \u2014 "),hP=a("a"),_ro=o("RetriBertConfig"),uro=o(" (RetriBERT model)"),bro=l(),pg=a("li"),tse=a("strong"),vro=o("roberta"),Fro=o(" \u2014 "),pP=a("a"),Tro=o("RobertaConfig"),Mro=o(" (RoBERTa model)"),Ero=l(),_g=a("li"),ase=a("strong"),Cro=o("roformer"),wro=o(" \u2014 "),_P=a("a"),Aro=o("RoFormerConfig"),Lro=o(" (RoFormer model)"),yro=l(),ug=a("li"),nse=a("strong"),xro=o("segformer"),$ro=o(" \u2014 "),uP=a("a"),kro=o("SegformerConfig"),Sro=o(" (SegFormer model)"),Rro=l(),bg=a("li"),sse=a("strong"),Pro=o("sew"),Bro=o(" \u2014 "),bP=a("a"),Iro=o("SEWConfig"),Nro=o(" (SEW model)"),qro=l(),vg=a("li"),lse=a("strong"),jro=o("sew-d"),Dro=o(" \u2014 "),vP=a("a"),Gro=o("SEWDConfig"),Oro=o(" (SEW-D model)"),Vro=l(),Fg=a("li"),ise=a("strong"),Xro=o("speech-encoder-decoder"),zro=o(" \u2014 "),FP=a("a"),Qro=o("SpeechEncoderDecoderConfig"),Wro=o(" (Speech Encoder decoder model)"),Hro=l(),Tg=a("li"),dse=a("strong"),Uro=o("speech_to_text"),Jro=o(" \u2014 "),TP=a("a"),Yro=o("Speech2TextConfig"),Kro=o(" (Speech2Text model)"),Zro=l(),Mg=a("li"),cse=a("strong"),eto=o("speech_to_text_2"),oto=o(" \u2014 "),MP=a("a"),rto=o("Speech2Text2Config"),tto=o(" (Speech2Text2 model)"),ato=l(),Eg=a("li"),fse=a("strong"),nto=o("splinter"),sto=o(" \u2014 "),EP=a("a"),lto=o("SplinterConfig"),ito=o(" (Splinter model)"),dto=l(),Cg=a("li"),mse=a("strong"),cto=o("squeezebert"),fto=o(" \u2014 "),CP=a("a"),mto=o("SqueezeBertConfig"),gto=o(" (SqueezeBERT model)"),hto=l(),wg=a("li"),gse=a("strong"),pto=o("swin"),_to=o(" \u2014 "),wP=a("a"),uto=o("SwinConfig"),bto=o(" (Swin Transformer model)"),vto=l(),Ag=a("li"),hse=a("strong"),Fto=o("t5"),Tto=o(" \u2014 "),AP=a("a"),Mto=o("T5Config"),Eto=o(" (T5 model)"),Cto=l(),Lg=a("li"),pse=a("strong"),wto=o("tapas"),Ato=o(" \u2014 "),LP=a("a"),Lto=o("TapasConfig"),yto=o(" (TAPAS model)"),xto=l(),yg=a("li"),_se=a("strong"),$to=o("trajectory_transformer"),kto=o(" \u2014 "),yP=a("a"),Sto=o("TrajectoryTransformerConfig"),Rto=o(" (Trajectory Transformer model)"),Pto=l(),xg=a("li"),use=a("strong"),Bto=o("transfo-xl"),Ito=o(" \u2014 "),xP=a("a"),Nto=o("TransfoXLConfig"),qto=o(" (Transformer-XL model)"),jto=l(),$g=a("li"),bse=a("strong"),Dto=o("trocr"),Gto=o(" \u2014 "),$P=a("a"),Oto=o("TrOCRConfig"),Vto=o(" (TrOCR model)"),Xto=l(),kg=a("li"),vse=a("strong"),zto=o("unispeech"),Qto=o(" \u2014 "),kP=a("a"),Wto=o("UniSpeechConfig"),Hto=o(" (UniSpeech model)"),Uto=l(),Sg=a("li"),Fse=a("strong"),Jto=o("unispeech-sat"),Yto=o(" \u2014 "),SP=a("a"),Kto=o("UniSpeechSatConfig"),Zto=o(" (UniSpeechSat model)"),eao=l(),Rg=a("li"),Tse=a("strong"),oao=o("van"),rao=o(" \u2014 "),RP=a("a"),tao=o("VanConfig"),aao=o(" (VAN model)"),nao=l(),Pg=a("li"),Mse=a("strong"),sao=o("vilt"),lao=o(" \u2014 "),PP=a("a"),iao=o("ViltConfig"),dao=o(" (ViLT model)"),cao=l(),Bg=a("li"),Ese=a("strong"),fao=o("vision-encoder-decoder"),mao=o(" \u2014 "),BP=a("a"),gao=o("VisionEncoderDecoderConfig"),hao=o(" (Vision Encoder decoder model)"),pao=l(),Ig=a("li"),Cse=a("strong"),_ao=o("vision-text-dual-encoder"),uao=o(" \u2014 "),IP=a("a"),bao=o("VisionTextDualEncoderConfig"),vao=o(" (VisionTextDualEncoder model)"),Fao=l(),Ng=a("li"),wse=a("strong"),Tao=o("visual_bert"),Mao=o(" \u2014 "),NP=a("a"),Eao=o("VisualBertConfig"),Cao=o(" (VisualBERT model)"),wao=l(),qg=a("li"),Ase=a("strong"),Aao=o("vit"),Lao=o(" \u2014 "),qP=a("a"),yao=o("ViTConfig"),xao=o(" (ViT model)"),$ao=l(),jg=a("li"),Lse=a("strong"),kao=o("vit_mae"),Sao=o(" \u2014 "),jP=a("a"),Rao=o("ViTMAEConfig"),Pao=o(" (ViTMAE model)"),Bao=l(),Dg=a("li"),yse=a("strong"),Iao=o("wav2vec2"),Nao=o(" \u2014 "),DP=a("a"),qao=o("Wav2Vec2Config"),jao=o(" (Wav2Vec2 model)"),Dao=l(),Gg=a("li"),xse=a("strong"),Gao=o("wav2vec2-conformer"),Oao=o(" \u2014 "),GP=a("a"),Vao=o("Wav2Vec2ConformerConfig"),Xao=o(" (Wav2Vec2-Conformer model)"),zao=l(),Og=a("li"),$se=a("strong"),Qao=o("wavlm"),Wao=o(" \u2014 "),OP=a("a"),Hao=o("WavLMConfig"),Uao=o(" (WavLM model)"),Jao=l(),Vg=a("li"),kse=a("strong"),Yao=o("xglm"),Kao=o(" \u2014 "),VP=a("a"),Zao=o("XGLMConfig"),eno=o(" (XGLM model)"),ono=l(),Xg=a("li"),Sse=a("strong"),rno=o("xlm"),tno=o(" \u2014 "),XP=a("a"),ano=o("XLMConfig"),nno=o(" (XLM model)"),sno=l(),zg=a("li"),Rse=a("strong"),lno=o("xlm-prophetnet"),ino=o(" \u2014 "),zP=a("a"),dno=o("XLMProphetNetConfig"),cno=o(" (XLM-ProphetNet model)"),fno=l(),Qg=a("li"),Pse=a("strong"),mno=o("xlm-roberta"),gno=o(" \u2014 "),QP=a("a"),hno=o("XLMRobertaConfig"),pno=o(" (XLM-RoBERTa model)"),_no=l(),Wg=a("li"),Bse=a("strong"),uno=o("xlm-roberta-xl"),bno=o(" \u2014 "),WP=a("a"),vno=o("XLMRobertaXLConfig"),Fno=o(" (XLM-RoBERTa-XL model)"),Tno=l(),Hg=a("li"),Ise=a("strong"),Mno=o("xlnet"),Eno=o(" \u2014 "),HP=a("a"),Cno=o("XLNetConfig"),wno=o(" (XLNet model)"),Ano=l(),Ug=a("li"),Nse=a("strong"),Lno=o("yolos"),yno=o(" \u2014 "),UP=a("a"),xno=o("YolosConfig"),$no=o(" (YOLOS model)"),kno=l(),Jg=a("li"),qse=a("strong"),Sno=o("yoso"),Rno=o(" \u2014 "),JP=a("a"),Pno=o("YosoConfig"),Bno=o(" (YOSO model)"),Ino=l(),F(Yg.$$.fragment),Nno=l(),Kg=a("div"),F(cL.$$.fragment),qno=l(),jse=a("p"),jno=o("Register a new configuration for this class."),ZVe=l(),Ii=a("h2"),Zg=a("a"),Dse=a("span"),F(fL.$$.fragment),Dno=l(),Gse=a("span"),Gno=o("AutoTokenizer"),eXe=l(),Ao=a("div"),F(mL.$$.fragment),Ono=l(),gL=a("p"),Vno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),YP=a("a"),Xno=o("AutoTokenizer.from_pretrained()"),zno=o(" class method."),Qno=l(),hL=a("p"),Wno=o("This class cannot be instantiated directly using "),Ose=a("code"),Hno=o("__init__()"),Uno=o(" (throws an error)."),Jno=l(),Lr=a("div"),F(pL.$$.fragment),Yno=l(),Vse=a("p"),Kno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Zno=l(),Ra=a("p"),eso=o("The tokenizer class to instantiate is selected based on the "),Xse=a("code"),oso=o("model_type"),rso=o(` property of the config object (either
passed as an argument or loaded from `),zse=a("code"),tso=o("pretrained_model_name_or_path"),aso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(":"),lso=l(),k=a("ul"),qn=a("li"),Wse=a("strong"),iso=o("albert"),dso=o(" \u2014 "),KP=a("a"),cso=o("AlbertTokenizer"),fso=o(" or "),ZP=a("a"),mso=o("AlbertTokenizerFast"),gso=o(" (ALBERT model)"),hso=l(),jn=a("li"),Hse=a("strong"),pso=o("bart"),_so=o(" \u2014 "),eB=a("a"),uso=o("BartTokenizer"),bso=o(" or "),oB=a("a"),vso=o("BartTokenizerFast"),Fso=o(" (BART model)"),Tso=l(),Dn=a("li"),Use=a("strong"),Mso=o("barthez"),Eso=o(" \u2014 "),rB=a("a"),Cso=o("BarthezTokenizer"),wso=o(" or "),tB=a("a"),Aso=o("BarthezTokenizerFast"),Lso=o(" (BARThez model)"),yso=l(),eh=a("li"),Jse=a("strong"),xso=o("bartpho"),$so=o(" \u2014 "),aB=a("a"),kso=o("BartphoTokenizer"),Sso=o(" (BARTpho model)"),Rso=l(),Gn=a("li"),Yse=a("strong"),Pso=o("bert"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("BertTokenizer"),Nso=o(" or "),sB=a("a"),qso=o("BertTokenizerFast"),jso=o(" (BERT model)"),Dso=l(),oh=a("li"),Kse=a("strong"),Gso=o("bert-generation"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("BertGenerationTokenizer"),Xso=o(" (Bert Generation model)"),zso=l(),rh=a("li"),Zse=a("strong"),Qso=o("bert-japanese"),Wso=o(" \u2014 "),iB=a("a"),Hso=o("BertJapaneseTokenizer"),Uso=o(" (BertJapanese model)"),Jso=l(),th=a("li"),ele=a("strong"),Yso=o("bertweet"),Kso=o(" \u2014 "),dB=a("a"),Zso=o("BertweetTokenizer"),elo=o(" (BERTweet model)"),olo=l(),On=a("li"),ole=a("strong"),rlo=o("big_bird"),tlo=o(" \u2014 "),cB=a("a"),alo=o("BigBirdTokenizer"),nlo=o(" or "),fB=a("a"),slo=o("BigBirdTokenizerFast"),llo=o(" (BigBird model)"),ilo=l(),Vn=a("li"),rle=a("strong"),dlo=o("bigbird_pegasus"),clo=o(" \u2014 "),mB=a("a"),flo=o("PegasusTokenizer"),mlo=o(" or "),gB=a("a"),glo=o("PegasusTokenizerFast"),hlo=o(" (BigBird-Pegasus model)"),plo=l(),Xn=a("li"),tle=a("strong"),_lo=o("blenderbot"),ulo=o(" \u2014 "),hB=a("a"),blo=o("BlenderbotTokenizer"),vlo=o(" or "),pB=a("a"),Flo=o("BlenderbotTokenizerFast"),Tlo=o(" (Blenderbot model)"),Mlo=l(),ah=a("li"),ale=a("strong"),Elo=o("blenderbot-small"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("BlenderbotSmallTokenizer"),Alo=o(" (BlenderbotSmall model)"),Llo=l(),nh=a("li"),nle=a("strong"),ylo=o("bloom"),xlo=o(" \u2014 "),uB=a("a"),$lo=o("BloomTokenizerFast"),klo=o(" (BLOOM model)"),Slo=l(),sh=a("li"),sle=a("strong"),Rlo=o("byt5"),Plo=o(" \u2014 "),bB=a("a"),Blo=o("ByT5Tokenizer"),Ilo=o(" (ByT5 model)"),Nlo=l(),zn=a("li"),lle=a("strong"),qlo=o("camembert"),jlo=o(" \u2014 "),vB=a("a"),Dlo=o("CamembertTokenizer"),Glo=o(" or "),FB=a("a"),Olo=o("CamembertTokenizerFast"),Vlo=o(" (CamemBERT model)"),Xlo=l(),lh=a("li"),ile=a("strong"),zlo=o("canine"),Qlo=o(" \u2014 "),TB=a("a"),Wlo=o("CanineTokenizer"),Hlo=o(" (CANINE model)"),Ulo=l(),Qn=a("li"),dle=a("strong"),Jlo=o("clip"),Ylo=o(" \u2014 "),MB=a("a"),Klo=o("CLIPTokenizer"),Zlo=o(" or "),EB=a("a"),eio=o("CLIPTokenizerFast"),oio=o(" (CLIP model)"),rio=l(),Wn=a("li"),cle=a("strong"),tio=o("codegen"),aio=o(" \u2014 "),CB=a("a"),nio=o("CodeGenTokenizer"),sio=o(" or "),wB=a("a"),lio=o("CodeGenTokenizerFast"),iio=o(" (CodeGen model)"),dio=l(),Hn=a("li"),fle=a("strong"),cio=o("convbert"),fio=o(" \u2014 "),AB=a("a"),mio=o("ConvBertTokenizer"),gio=o(" or "),LB=a("a"),hio=o("ConvBertTokenizerFast"),pio=o(" (ConvBERT model)"),_io=l(),Un=a("li"),mle=a("strong"),uio=o("cpm"),bio=o(" \u2014 "),yB=a("a"),vio=o("CpmTokenizer"),Fio=o(" or "),xB=a("a"),Tio=o("CpmTokenizerFast"),Mio=o(" (CPM model)"),Eio=l(),ih=a("li"),gle=a("strong"),Cio=o("ctrl"),wio=o(" \u2014 "),$B=a("a"),Aio=o("CTRLTokenizer"),Lio=o(" (CTRL model)"),yio=l(),Jn=a("li"),hle=a("strong"),xio=o("data2vec-text"),$io=o(" \u2014 "),kB=a("a"),kio=o("RobertaTokenizer"),Sio=o(" or "),SB=a("a"),Rio=o("RobertaTokenizerFast"),Pio=o(" (Data2VecText model)"),Bio=l(),Yn=a("li"),ple=a("strong"),Iio=o("deberta"),Nio=o(" \u2014 "),RB=a("a"),qio=o("DebertaTokenizer"),jio=o(" or "),PB=a("a"),Dio=o("DebertaTokenizerFast"),Gio=o(" (DeBERTa model)"),Oio=l(),Kn=a("li"),_le=a("strong"),Vio=o("deberta-v2"),Xio=o(" \u2014 "),BB=a("a"),zio=o("DebertaV2Tokenizer"),Qio=o(" or "),IB=a("a"),Wio=o("DebertaV2TokenizerFast"),Hio=o(" (DeBERTa-v2 model)"),Uio=l(),Zn=a("li"),ule=a("strong"),Jio=o("distilbert"),Yio=o(" \u2014 "),NB=a("a"),Kio=o("DistilBertTokenizer"),Zio=o(" or "),qB=a("a"),edo=o("DistilBertTokenizerFast"),odo=o(" (DistilBERT model)"),rdo=l(),es=a("li"),ble=a("strong"),tdo=o("dpr"),ado=o(" \u2014 "),jB=a("a"),ndo=o("DPRQuestionEncoderTokenizer"),sdo=o(" or "),DB=a("a"),ldo=o("DPRQuestionEncoderTokenizerFast"),ido=o(" (DPR model)"),ddo=l(),os=a("li"),vle=a("strong"),cdo=o("electra"),fdo=o(" \u2014 "),GB=a("a"),mdo=o("ElectraTokenizer"),gdo=o(" or "),OB=a("a"),hdo=o("ElectraTokenizerFast"),pdo=o(" (ELECTRA model)"),_do=l(),dh=a("li"),Fle=a("strong"),udo=o("flaubert"),bdo=o(" \u2014 "),VB=a("a"),vdo=o("FlaubertTokenizer"),Fdo=o(" (FlauBERT model)"),Tdo=l(),rs=a("li"),Tle=a("strong"),Mdo=o("fnet"),Edo=o(" \u2014 "),XB=a("a"),Cdo=o("FNetTokenizer"),wdo=o(" or "),zB=a("a"),Ado=o("FNetTokenizerFast"),Ldo=o(" (FNet model)"),ydo=l(),ch=a("li"),Mle=a("strong"),xdo=o("fsmt"),$do=o(" \u2014 "),QB=a("a"),kdo=o("FSMTTokenizer"),Sdo=o(" (FairSeq Machine-Translation model)"),Rdo=l(),ts=a("li"),Ele=a("strong"),Pdo=o("funnel"),Bdo=o(" \u2014 "),WB=a("a"),Ido=o("FunnelTokenizer"),Ndo=o(" or "),HB=a("a"),qdo=o("FunnelTokenizerFast"),jdo=o(" (Funnel Transformer model)"),Ddo=l(),as=a("li"),Cle=a("strong"),Gdo=o("gpt2"),Odo=o(" \u2014 "),UB=a("a"),Vdo=o("GPT2Tokenizer"),Xdo=o(" or "),JB=a("a"),zdo=o("GPT2TokenizerFast"),Qdo=o(" (OpenAI GPT-2 model)"),Wdo=l(),ns=a("li"),wle=a("strong"),Hdo=o("gpt_neo"),Udo=o(" \u2014 "),YB=a("a"),Jdo=o("GPT2Tokenizer"),Ydo=o(" or "),KB=a("a"),Kdo=o("GPT2TokenizerFast"),Zdo=o(" (GPT Neo model)"),eco=l(),fh=a("li"),Ale=a("strong"),oco=o("gpt_neox"),rco=o(" \u2014 "),ZB=a("a"),tco=o("GPTNeoXTokenizerFast"),aco=o(" (GPT NeoX model)"),nco=l(),ss=a("li"),Lle=a("strong"),sco=o("gptj"),lco=o(" \u2014 "),eI=a("a"),ico=o("GPT2Tokenizer"),dco=o(" or "),oI=a("a"),cco=o("GPT2TokenizerFast"),fco=o(" (GPT-J model)"),mco=l(),ls=a("li"),yle=a("strong"),gco=o("groupvit"),hco=o(" \u2014 "),rI=a("a"),pco=o("CLIPTokenizer"),_co=o(" or "),tI=a("a"),uco=o("CLIPTokenizerFast"),bco=o(" (GroupViT model)"),vco=l(),is=a("li"),xle=a("strong"),Fco=o("herbert"),Tco=o(" \u2014 "),aI=a("a"),Mco=o("HerbertTokenizer"),Eco=o(" or "),nI=a("a"),Cco=o("HerbertTokenizerFast"),wco=o(" (HerBERT model)"),Aco=l(),mh=a("li"),$le=a("strong"),Lco=o("hubert"),yco=o(" \u2014 "),sI=a("a"),xco=o("Wav2Vec2CTCTokenizer"),$co=o(" (Hubert model)"),kco=l(),ds=a("li"),kle=a("strong"),Sco=o("ibert"),Rco=o(" \u2014 "),lI=a("a"),Pco=o("RobertaTokenizer"),Bco=o(" or "),iI=a("a"),Ico=o("RobertaTokenizerFast"),Nco=o(" (I-BERT model)"),qco=l(),gh=a("li"),Sle=a("strong"),jco=o("jukebox"),Dco=o(" \u2014 "),Rle=a("code"),Gco=o("JukeboxTokenizer"),Oco=o(" (Jukebox model)"),Vco=l(),cs=a("li"),Ple=a("strong"),Xco=o("layoutlm"),zco=o(" \u2014 "),dI=a("a"),Qco=o("LayoutLMTokenizer"),Wco=o(" or "),cI=a("a"),Hco=o("LayoutLMTokenizerFast"),Uco=o(" (LayoutLM model)"),Jco=l(),fs=a("li"),Ble=a("strong"),Yco=o("layoutlmv2"),Kco=o(" \u2014 "),fI=a("a"),Zco=o("LayoutLMv2Tokenizer"),efo=o(" or "),mI=a("a"),ofo=o("LayoutLMv2TokenizerFast"),rfo=o(" (LayoutLMv2 model)"),tfo=l(),ms=a("li"),Ile=a("strong"),afo=o("layoutlmv3"),nfo=o(" \u2014 "),gI=a("a"),sfo=o("LayoutLMv3Tokenizer"),lfo=o(" or "),hI=a("a"),ifo=o("LayoutLMv3TokenizerFast"),dfo=o(" (LayoutLMv3 model)"),cfo=l(),gs=a("li"),Nle=a("strong"),ffo=o("layoutxlm"),mfo=o(" \u2014 "),pI=a("a"),gfo=o("LayoutXLMTokenizer"),hfo=o(" or "),_I=a("a"),pfo=o("LayoutXLMTokenizerFast"),_fo=o(" (LayoutXLM model)"),ufo=l(),hs=a("li"),qle=a("strong"),bfo=o("led"),vfo=o(" \u2014 "),uI=a("a"),Ffo=o("LEDTokenizer"),Tfo=o(" or "),bI=a("a"),Mfo=o("LEDTokenizerFast"),Efo=o(" (LED model)"),Cfo=l(),ps=a("li"),jle=a("strong"),wfo=o("longformer"),Afo=o(" \u2014 "),vI=a("a"),Lfo=o("LongformerTokenizer"),yfo=o(" or "),FI=a("a"),xfo=o("LongformerTokenizerFast"),$fo=o(" (Longformer model)"),kfo=l(),_s=a("li"),Dle=a("strong"),Sfo=o("longt5"),Rfo=o(" \u2014 "),TI=a("a"),Pfo=o("T5Tokenizer"),Bfo=o(" or "),MI=a("a"),Ifo=o("T5TokenizerFast"),Nfo=o(" (LongT5 model)"),qfo=l(),hh=a("li"),Gle=a("strong"),jfo=o("luke"),Dfo=o(" \u2014 "),EI=a("a"),Gfo=o("LukeTokenizer"),Ofo=o(" (LUKE model)"),Vfo=l(),us=a("li"),Ole=a("strong"),Xfo=o("lxmert"),zfo=o(" \u2014 "),CI=a("a"),Qfo=o("LxmertTokenizer"),Wfo=o(" or "),wI=a("a"),Hfo=o("LxmertTokenizerFast"),Ufo=o(" (LXMERT model)"),Jfo=l(),ph=a("li"),Vle=a("strong"),Yfo=o("m2m_100"),Kfo=o(" \u2014 "),AI=a("a"),Zfo=o("M2M100Tokenizer"),emo=o(" (M2M100 model)"),omo=l(),_h=a("li"),Xle=a("strong"),rmo=o("marian"),tmo=o(" \u2014 "),LI=a("a"),amo=o("MarianTokenizer"),nmo=o(" (Marian model)"),smo=l(),bs=a("li"),zle=a("strong"),lmo=o("mbart"),imo=o(" \u2014 "),yI=a("a"),dmo=o("MBartTokenizer"),cmo=o(" or "),xI=a("a"),fmo=o("MBartTokenizerFast"),mmo=o(" (mBART model)"),gmo=l(),vs=a("li"),Qle=a("strong"),hmo=o("mbart50"),pmo=o(" \u2014 "),$I=a("a"),_mo=o("MBart50Tokenizer"),umo=o(" or "),kI=a("a"),bmo=o("MBart50TokenizerFast"),vmo=o(" (mBART-50 model)"),Fmo=l(),Fs=a("li"),Wle=a("strong"),Tmo=o("megatron-bert"),Mmo=o(" \u2014 "),SI=a("a"),Emo=o("BertTokenizer"),Cmo=o(" or "),RI=a("a"),wmo=o("BertTokenizerFast"),Amo=o(" (Megatron-BERT model)"),Lmo=l(),uh=a("li"),Hle=a("strong"),ymo=o("mluke"),xmo=o(" \u2014 "),PI=a("a"),$mo=o("MLukeTokenizer"),kmo=o(" (mLUKE model)"),Smo=l(),Ts=a("li"),Ule=a("strong"),Rmo=o("mobilebert"),Pmo=o(" \u2014 "),BI=a("a"),Bmo=o("MobileBertTokenizer"),Imo=o(" or "),II=a("a"),Nmo=o("MobileBertTokenizerFast"),qmo=o(" (MobileBERT model)"),jmo=l(),Ms=a("li"),Jle=a("strong"),Dmo=o("mpnet"),Gmo=o(" \u2014 "),NI=a("a"),Omo=o("MPNetTokenizer"),Vmo=o(" or "),qI=a("a"),Xmo=o("MPNetTokenizerFast"),zmo=o(" (MPNet model)"),Qmo=l(),Es=a("li"),Yle=a("strong"),Wmo=o("mt5"),Hmo=o(" \u2014 "),jI=a("a"),Umo=o("MT5Tokenizer"),Jmo=o(" or "),DI=a("a"),Ymo=o("MT5TokenizerFast"),Kmo=o(" (MT5 model)"),Zmo=l(),Cs=a("li"),Kle=a("strong"),ego=o("mvp"),ogo=o(" \u2014 "),GI=a("a"),rgo=o("MvpTokenizer"),tgo=o(" or "),OI=a("a"),ago=o("MvpTokenizerFast"),ngo=o(" (MVP model)"),sgo=l(),ws=a("li"),Zle=a("strong"),lgo=o("nezha"),igo=o(" \u2014 "),VI=a("a"),dgo=o("BertTokenizer"),cgo=o(" or "),XI=a("a"),fgo=o("BertTokenizerFast"),mgo=o(" (Nezha model)"),ggo=l(),As=a("li"),eie=a("strong"),hgo=o("nystromformer"),pgo=o(" \u2014 "),zI=a("a"),_go=o("AlbertTokenizer"),ugo=o(" or "),QI=a("a"),bgo=o("AlbertTokenizerFast"),vgo=o(" (Nystr\xF6mformer model)"),Fgo=l(),Ls=a("li"),oie=a("strong"),Tgo=o("openai-gpt"),Mgo=o(" \u2014 "),WI=a("a"),Ego=o("OpenAIGPTTokenizer"),Cgo=o(" or "),HI=a("a"),wgo=o("OpenAIGPTTokenizerFast"),Ago=o(" (OpenAI GPT model)"),Lgo=l(),bh=a("li"),rie=a("strong"),ygo=o("opt"),xgo=o(" \u2014 "),UI=a("a"),$go=o("GPT2Tokenizer"),kgo=o(" (OPT model)"),Sgo=l(),ys=a("li"),tie=a("strong"),Rgo=o("pegasus"),Pgo=o(" \u2014 "),JI=a("a"),Bgo=o("PegasusTokenizer"),Igo=o(" or "),YI=a("a"),Ngo=o("PegasusTokenizerFast"),qgo=o(" (Pegasus model)"),jgo=l(),vh=a("li"),aie=a("strong"),Dgo=o("perceiver"),Ggo=o(" \u2014 "),KI=a("a"),Ogo=o("PerceiverTokenizer"),Vgo=o(" (Perceiver model)"),Xgo=l(),Fh=a("li"),nie=a("strong"),zgo=o("phobert"),Qgo=o(" \u2014 "),ZI=a("a"),Wgo=o("PhobertTokenizer"),Hgo=o(" (PhoBERT model)"),Ugo=l(),Th=a("li"),sie=a("strong"),Jgo=o("plbart"),Ygo=o(" \u2014 "),eN=a("a"),Kgo=o("PLBartTokenizer"),Zgo=o(" (PLBart model)"),eho=l(),Mh=a("li"),lie=a("strong"),oho=o("prophetnet"),rho=o(" \u2014 "),oN=a("a"),tho=o("ProphetNetTokenizer"),aho=o(" (ProphetNet model)"),nho=l(),xs=a("li"),iie=a("strong"),sho=o("qdqbert"),lho=o(" \u2014 "),rN=a("a"),iho=o("BertTokenizer"),dho=o(" or "),tN=a("a"),cho=o("BertTokenizerFast"),fho=o(" (QDQBert model)"),mho=l(),Eh=a("li"),die=a("strong"),gho=o("rag"),hho=o(" \u2014 "),aN=a("a"),pho=o("RagTokenizer"),_ho=o(" (RAG model)"),uho=l(),$s=a("li"),cie=a("strong"),bho=o("realm"),vho=o(" \u2014 "),nN=a("a"),Fho=o("RealmTokenizer"),Tho=o(" or "),sN=a("a"),Mho=o("RealmTokenizerFast"),Eho=o(" (REALM model)"),Cho=l(),ks=a("li"),fie=a("strong"),who=o("reformer"),Aho=o(" \u2014 "),lN=a("a"),Lho=o("ReformerTokenizer"),yho=o(" or "),iN=a("a"),xho=o("ReformerTokenizerFast"),$ho=o(" (Reformer model)"),kho=l(),Ss=a("li"),mie=a("strong"),Sho=o("rembert"),Rho=o(" \u2014 "),dN=a("a"),Pho=o("RemBertTokenizer"),Bho=o(" or "),cN=a("a"),Iho=o("RemBertTokenizerFast"),Nho=o(" (RemBERT model)"),qho=l(),Rs=a("li"),gie=a("strong"),jho=o("retribert"),Dho=o(" \u2014 "),fN=a("a"),Gho=o("RetriBertTokenizer"),Oho=o(" or "),mN=a("a"),Vho=o("RetriBertTokenizerFast"),Xho=o(" (RetriBERT model)"),zho=l(),Ps=a("li"),hie=a("strong"),Qho=o("roberta"),Who=o(" \u2014 "),gN=a("a"),Hho=o("RobertaTokenizer"),Uho=o(" or "),hN=a("a"),Jho=o("RobertaTokenizerFast"),Yho=o(" (RoBERTa model)"),Kho=l(),Bs=a("li"),pie=a("strong"),Zho=o("roformer"),epo=o(" \u2014 "),pN=a("a"),opo=o("RoFormerTokenizer"),rpo=o(" or "),_N=a("a"),tpo=o("RoFormerTokenizerFast"),apo=o(" (RoFormer model)"),npo=l(),Ch=a("li"),_ie=a("strong"),spo=o("speech_to_text"),lpo=o(" \u2014 "),uN=a("a"),ipo=o("Speech2TextTokenizer"),dpo=o(" (Speech2Text model)"),cpo=l(),wh=a("li"),uie=a("strong"),fpo=o("speech_to_text_2"),mpo=o(" \u2014 "),bN=a("a"),gpo=o("Speech2Text2Tokenizer"),hpo=o(" (Speech2Text2 model)"),ppo=l(),Is=a("li"),bie=a("strong"),_po=o("splinter"),upo=o(" \u2014 "),vN=a("a"),bpo=o("SplinterTokenizer"),vpo=o(" or "),FN=a("a"),Fpo=o("SplinterTokenizerFast"),Tpo=o(" (Splinter model)"),Mpo=l(),Ns=a("li"),vie=a("strong"),Epo=o("squeezebert"),Cpo=o(" \u2014 "),TN=a("a"),wpo=o("SqueezeBertTokenizer"),Apo=o(" or "),MN=a("a"),Lpo=o("SqueezeBertTokenizerFast"),ypo=o(" (SqueezeBERT model)"),xpo=l(),qs=a("li"),Fie=a("strong"),$po=o("t5"),kpo=o(" \u2014 "),EN=a("a"),Spo=o("T5Tokenizer"),Rpo=o(" or "),CN=a("a"),Ppo=o("T5TokenizerFast"),Bpo=o(" (T5 model)"),Ipo=l(),Ah=a("li"),Tie=a("strong"),Npo=o("tapas"),qpo=o(" \u2014 "),wN=a("a"),jpo=o("TapasTokenizer"),Dpo=o(" (TAPAS model)"),Gpo=l(),Lh=a("li"),Mie=a("strong"),Opo=o("tapex"),Vpo=o(" \u2014 "),AN=a("a"),Xpo=o("TapexTokenizer"),zpo=o(" (TAPEX model)"),Qpo=l(),yh=a("li"),Eie=a("strong"),Wpo=o("transfo-xl"),Hpo=o(" \u2014 "),LN=a("a"),Upo=o("TransfoXLTokenizer"),Jpo=o(" (Transformer-XL model)"),Ypo=l(),js=a("li"),Cie=a("strong"),Kpo=o("vilt"),Zpo=o(" \u2014 "),yN=a("a"),e_o=o("BertTokenizer"),o_o=o(" or "),xN=a("a"),r_o=o("BertTokenizerFast"),t_o=o(" (ViLT model)"),a_o=l(),Ds=a("li"),wie=a("strong"),n_o=o("visual_bert"),s_o=o(" \u2014 "),$N=a("a"),l_o=o("BertTokenizer"),i_o=o(" or "),kN=a("a"),d_o=o("BertTokenizerFast"),c_o=o(" (VisualBERT model)"),f_o=l(),xh=a("li"),Aie=a("strong"),m_o=o("wav2vec2"),g_o=o(" \u2014 "),SN=a("a"),h_o=o("Wav2Vec2CTCTokenizer"),p_o=o(" (Wav2Vec2 model)"),__o=l(),$h=a("li"),Lie=a("strong"),u_o=o("wav2vec2-conformer"),b_o=o(" \u2014 "),RN=a("a"),v_o=o("Wav2Vec2CTCTokenizer"),F_o=o(" (Wav2Vec2-Conformer model)"),T_o=l(),kh=a("li"),yie=a("strong"),M_o=o("wav2vec2_phoneme"),E_o=o(" \u2014 "),PN=a("a"),C_o=o("Wav2Vec2PhonemeCTCTokenizer"),w_o=o(" (Wav2Vec2Phoneme model)"),A_o=l(),Gs=a("li"),xie=a("strong"),L_o=o("xglm"),y_o=o(" \u2014 "),BN=a("a"),x_o=o("XGLMTokenizer"),$_o=o(" or "),IN=a("a"),k_o=o("XGLMTokenizerFast"),S_o=o(" (XGLM model)"),R_o=l(),Sh=a("li"),$ie=a("strong"),P_o=o("xlm"),B_o=o(" \u2014 "),NN=a("a"),I_o=o("XLMTokenizer"),N_o=o(" (XLM model)"),q_o=l(),Rh=a("li"),kie=a("strong"),j_o=o("xlm-prophetnet"),D_o=o(" \u2014 "),qN=a("a"),G_o=o("XLMProphetNetTokenizer"),O_o=o(" (XLM-ProphetNet model)"),V_o=l(),Os=a("li"),Sie=a("strong"),X_o=o("xlm-roberta"),z_o=o(" \u2014 "),jN=a("a"),Q_o=o("XLMRobertaTokenizer"),W_o=o(" or "),DN=a("a"),H_o=o("XLMRobertaTokenizerFast"),U_o=o(" (XLM-RoBERTa model)"),J_o=l(),Vs=a("li"),Rie=a("strong"),Y_o=o("xlm-roberta-xl"),K_o=o(" \u2014 "),GN=a("a"),Z_o=o("RobertaTokenizer"),euo=o(" or "),ON=a("a"),ouo=o("RobertaTokenizerFast"),ruo=o(" (XLM-RoBERTa-XL model)"),tuo=l(),Xs=a("li"),Pie=a("strong"),auo=o("xlnet"),nuo=o(" \u2014 "),VN=a("a"),suo=o("XLNetTokenizer"),luo=o(" or "),XN=a("a"),iuo=o("XLNetTokenizerFast"),duo=o(" (XLNet model)"),cuo=l(),zs=a("li"),Bie=a("strong"),fuo=o("yoso"),muo=o(" \u2014 "),zN=a("a"),guo=o("AlbertTokenizer"),huo=o(" or "),QN=a("a"),puo=o("AlbertTokenizerFast"),_uo=o(" (YOSO model)"),uuo=l(),F(Ph.$$.fragment),buo=l(),Bh=a("div"),F(_L.$$.fragment),vuo=l(),Iie=a("p"),Fuo=o("Register a new tokenizer in this mapping."),oXe=l(),Ni=a("h2"),Ih=a("a"),Nie=a("span"),F(uL.$$.fragment),Tuo=l(),qie=a("span"),Muo=o("AutoFeatureExtractor"),rXe=l(),Lo=a("div"),F(bL.$$.fragment),Euo=l(),vL=a("p"),Cuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WN=a("a"),wuo=o("AutoFeatureExtractor.from_pretrained()"),Auo=o(" class method."),Luo=l(),FL=a("p"),yuo=o("This class cannot be instantiated directly using "),jie=a("code"),xuo=o("__init__()"),$uo=o(" (throws an error)."),kuo=l(),He=a("div"),F(TL.$$.fragment),Suo=l(),Die=a("p"),Ruo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Puo=l(),Pa=a("p"),Buo=o("The feature extractor class to instantiate is selected based on the "),Gie=a("code"),Iuo=o("model_type"),Nuo=o(` property of the config object
(either passed as an argument or loaded from `),Oie=a("code"),quo=o("pretrained_model_name_or_path"),juo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vie=a("code"),Duo=o("pretrained_model_name_or_path"),Guo=o(":"),Ouo=l(),Y=a("ul"),Nh=a("li"),Xie=a("strong"),Vuo=o("beit"),Xuo=o(" \u2014 "),HN=a("a"),zuo=o("BeitFeatureExtractor"),Quo=o(" (BEiT model)"),Wuo=l(),qh=a("li"),zie=a("strong"),Huo=o("clip"),Uuo=o(" \u2014 "),UN=a("a"),Juo=o("CLIPFeatureExtractor"),Yuo=o(" (CLIP model)"),Kuo=l(),jh=a("li"),Qie=a("strong"),Zuo=o("convnext"),e2o=o(" \u2014 "),JN=a("a"),o2o=o("ConvNextFeatureExtractor"),r2o=o(" (ConvNeXT model)"),t2o=l(),Dh=a("li"),Wie=a("strong"),a2o=o("cvt"),n2o=o(" \u2014 "),YN=a("a"),s2o=o("ConvNextFeatureExtractor"),l2o=o(" (CvT model)"),i2o=l(),Gh=a("li"),Hie=a("strong"),d2o=o("data2vec-audio"),c2o=o(" \u2014 "),KN=a("a"),f2o=o("Wav2Vec2FeatureExtractor"),m2o=o(" (Data2VecAudio model)"),g2o=l(),Oh=a("li"),Uie=a("strong"),h2o=o("data2vec-vision"),p2o=o(" \u2014 "),ZN=a("a"),_2o=o("BeitFeatureExtractor"),u2o=o(" (Data2VecVision model)"),b2o=l(),Vh=a("li"),Jie=a("strong"),v2o=o("deit"),F2o=o(" \u2014 "),eq=a("a"),T2o=o("DeiTFeatureExtractor"),M2o=o(" (DeiT model)"),E2o=l(),Xh=a("li"),Yie=a("strong"),C2o=o("detr"),w2o=o(" \u2014 "),oq=a("a"),A2o=o("DetrFeatureExtractor"),L2o=o(" (DETR model)"),y2o=l(),zh=a("li"),Kie=a("strong"),x2o=o("dpt"),$2o=o(" \u2014 "),rq=a("a"),k2o=o("DPTFeatureExtractor"),S2o=o(" (DPT model)"),R2o=l(),Qh=a("li"),Zie=a("strong"),P2o=o("flava"),B2o=o(" \u2014 "),tq=a("a"),I2o=o("FlavaFeatureExtractor"),N2o=o(" (FLAVA model)"),q2o=l(),Wh=a("li"),ede=a("strong"),j2o=o("glpn"),D2o=o(" \u2014 "),aq=a("a"),G2o=o("GLPNFeatureExtractor"),O2o=o(" (GLPN model)"),V2o=l(),Hh=a("li"),ode=a("strong"),X2o=o("groupvit"),z2o=o(" \u2014 "),nq=a("a"),Q2o=o("CLIPFeatureExtractor"),W2o=o(" (GroupViT model)"),H2o=l(),Uh=a("li"),rde=a("strong"),U2o=o("hubert"),J2o=o(" \u2014 "),sq=a("a"),Y2o=o("Wav2Vec2FeatureExtractor"),K2o=o(" (Hubert model)"),Z2o=l(),Jh=a("li"),tde=a("strong"),e1o=o("imagegpt"),o1o=o(" \u2014 "),lq=a("a"),r1o=o("ImageGPTFeatureExtractor"),t1o=o(" (ImageGPT model)"),a1o=l(),Yh=a("li"),ade=a("strong"),n1o=o("layoutlmv2"),s1o=o(" \u2014 "),iq=a("a"),l1o=o("LayoutLMv2FeatureExtractor"),i1o=o(" (LayoutLMv2 model)"),d1o=l(),Kh=a("li"),nde=a("strong"),c1o=o("layoutlmv3"),f1o=o(" \u2014 "),dq=a("a"),m1o=o("LayoutLMv3FeatureExtractor"),g1o=o(" (LayoutLMv3 model)"),h1o=l(),Zh=a("li"),sde=a("strong"),p1o=o("levit"),_1o=o(" \u2014 "),cq=a("a"),u1o=o("LevitFeatureExtractor"),b1o=o(" (LeViT model)"),v1o=l(),ep=a("li"),lde=a("strong"),F1o=o("maskformer"),T1o=o(" \u2014 "),fq=a("a"),M1o=o("MaskFormerFeatureExtractor"),E1o=o(" (MaskFormer model)"),C1o=l(),op=a("li"),ide=a("strong"),w1o=o("mctct"),A1o=o(" \u2014 "),mq=a("a"),L1o=o("MCTCTFeatureExtractor"),y1o=o(" (M-CTC-T model)"),x1o=l(),rp=a("li"),dde=a("strong"),$1o=o("mobilevit"),k1o=o(" \u2014 "),gq=a("a"),S1o=o("MobileViTFeatureExtractor"),R1o=o(" (MobileViT model)"),P1o=l(),tp=a("li"),cde=a("strong"),B1o=o("perceiver"),I1o=o(" \u2014 "),hq=a("a"),N1o=o("PerceiverFeatureExtractor"),q1o=o(" (Perceiver model)"),j1o=l(),ap=a("li"),fde=a("strong"),D1o=o("poolformer"),G1o=o(" \u2014 "),pq=a("a"),O1o=o("PoolFormerFeatureExtractor"),V1o=o(" (PoolFormer model)"),X1o=l(),np=a("li"),mde=a("strong"),z1o=o("regnet"),Q1o=o(" \u2014 "),_q=a("a"),W1o=o("ConvNextFeatureExtractor"),H1o=o(" (RegNet model)"),U1o=l(),sp=a("li"),gde=a("strong"),J1o=o("resnet"),Y1o=o(" \u2014 "),uq=a("a"),K1o=o("ConvNextFeatureExtractor"),Z1o=o(" (ResNet model)"),ebo=l(),lp=a("li"),hde=a("strong"),obo=o("segformer"),rbo=o(" \u2014 "),bq=a("a"),tbo=o("SegformerFeatureExtractor"),abo=o(" (SegFormer model)"),nbo=l(),ip=a("li"),pde=a("strong"),sbo=o("speech_to_text"),lbo=o(" \u2014 "),vq=a("a"),ibo=o("Speech2TextFeatureExtractor"),dbo=o(" (Speech2Text model)"),cbo=l(),dp=a("li"),_de=a("strong"),fbo=o("swin"),mbo=o(" \u2014 "),Fq=a("a"),gbo=o("ViTFeatureExtractor"),hbo=o(" (Swin Transformer model)"),pbo=l(),cp=a("li"),ude=a("strong"),_bo=o("van"),ubo=o(" \u2014 "),Tq=a("a"),bbo=o("ConvNextFeatureExtractor"),vbo=o(" (VAN model)"),Fbo=l(),fp=a("li"),bde=a("strong"),Tbo=o("vilt"),Mbo=o(" \u2014 "),Mq=a("a"),Ebo=o("ViltFeatureExtractor"),Cbo=o(" (ViLT model)"),wbo=l(),mp=a("li"),vde=a("strong"),Abo=o("vit"),Lbo=o(" \u2014 "),Eq=a("a"),ybo=o("ViTFeatureExtractor"),xbo=o(" (ViT model)"),$bo=l(),gp=a("li"),Fde=a("strong"),kbo=o("vit_mae"),Sbo=o(" \u2014 "),Cq=a("a"),Rbo=o("ViTFeatureExtractor"),Pbo=o(" (ViTMAE model)"),Bbo=l(),hp=a("li"),Tde=a("strong"),Ibo=o("wav2vec2"),Nbo=o(" \u2014 "),wq=a("a"),qbo=o("Wav2Vec2FeatureExtractor"),jbo=o(" (Wav2Vec2 model)"),Dbo=l(),pp=a("li"),Mde=a("strong"),Gbo=o("wav2vec2-conformer"),Obo=o(" \u2014 "),Aq=a("a"),Vbo=o("Wav2Vec2FeatureExtractor"),Xbo=o(" (Wav2Vec2-Conformer model)"),zbo=l(),_p=a("li"),Ede=a("strong"),Qbo=o("yolos"),Wbo=o(" \u2014 "),Lq=a("a"),Hbo=o("YolosFeatureExtractor"),Ubo=o(" (YOLOS model)"),Jbo=l(),F(up.$$.fragment),Ybo=l(),F(bp.$$.fragment),Kbo=l(),vp=a("div"),F(ML.$$.fragment),Zbo=l(),Cde=a("p"),evo=o("Register a new feature extractor for this class."),tXe=l(),qi=a("h2"),Fp=a("a"),wde=a("span"),F(EL.$$.fragment),ovo=l(),Ade=a("span"),rvo=o("AutoProcessor"),aXe=l(),yo=a("div"),F(CL.$$.fragment),tvo=l(),wL=a("p"),avo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yq=a("a"),nvo=o("AutoProcessor.from_pretrained()"),svo=o(" class method."),lvo=l(),AL=a("p"),ivo=o("This class cannot be instantiated directly using "),Lde=a("code"),dvo=o("__init__()"),cvo=o(" (throws an error)."),fvo=l(),Ue=a("div"),F(LL.$$.fragment),mvo=l(),yde=a("p"),gvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hvo=l(),ji=a("p"),pvo=o("The processor class to instantiate is selected based on the "),xde=a("code"),_vo=o("model_type"),uvo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),bvo=o("pretrained_model_name_or_path"),vvo=o(" if possible):"),Fvo=l(),he=a("ul"),Tp=a("li"),kde=a("strong"),Tvo=o("clip"),Mvo=o(" \u2014 "),xq=a("a"),Evo=o("CLIPProcessor"),Cvo=o(" (CLIP model)"),wvo=l(),Mp=a("li"),Sde=a("strong"),Avo=o("flava"),Lvo=o(" \u2014 "),Rde=a("code"),yvo=o("FLAVAProcessor"),xvo=o(" (FLAVA model)"),$vo=l(),Ep=a("li"),Pde=a("strong"),kvo=o("groupvit"),Svo=o(" \u2014 "),$q=a("a"),Rvo=o("CLIPProcessor"),Pvo=o(" (GroupViT model)"),Bvo=l(),Cp=a("li"),Bde=a("strong"),Ivo=o("layoutlmv2"),Nvo=o(" \u2014 "),kq=a("a"),qvo=o("LayoutLMv2Processor"),jvo=o(" (LayoutLMv2 model)"),Dvo=l(),wp=a("li"),Ide=a("strong"),Gvo=o("layoutlmv3"),Ovo=o(" \u2014 "),Sq=a("a"),Vvo=o("LayoutLMv3Processor"),Xvo=o(" (LayoutLMv3 model)"),zvo=l(),Ap=a("li"),Nde=a("strong"),Qvo=o("layoutxlm"),Wvo=o(" \u2014 "),Rq=a("a"),Hvo=o("LayoutXLMProcessor"),Uvo=o(" (LayoutXLM model)"),Jvo=l(),Lp=a("li"),qde=a("strong"),Yvo=o("sew"),Kvo=o(" \u2014 "),Pq=a("a"),Zvo=o("Wav2Vec2Processor"),eFo=o(" (SEW model)"),oFo=l(),yp=a("li"),jde=a("strong"),rFo=o("sew-d"),tFo=o(" \u2014 "),Bq=a("a"),aFo=o("Wav2Vec2Processor"),nFo=o(" (SEW-D model)"),sFo=l(),xp=a("li"),Dde=a("strong"),lFo=o("speech_to_text"),iFo=o(" \u2014 "),Iq=a("a"),dFo=o("Speech2TextProcessor"),cFo=o(" (Speech2Text model)"),fFo=l(),$p=a("li"),Gde=a("strong"),mFo=o("speech_to_text_2"),gFo=o(" \u2014 "),Nq=a("a"),hFo=o("Speech2Text2Processor"),pFo=o(" (Speech2Text2 model)"),_Fo=l(),kp=a("li"),Ode=a("strong"),uFo=o("trocr"),bFo=o(" \u2014 "),qq=a("a"),vFo=o("TrOCRProcessor"),FFo=o(" (TrOCR model)"),TFo=l(),Sp=a("li"),Vde=a("strong"),MFo=o("unispeech"),EFo=o(" \u2014 "),jq=a("a"),CFo=o("Wav2Vec2Processor"),wFo=o(" (UniSpeech model)"),AFo=l(),Rp=a("li"),Xde=a("strong"),LFo=o("unispeech-sat"),yFo=o(" \u2014 "),Dq=a("a"),xFo=o("Wav2Vec2Processor"),$Fo=o(" (UniSpeechSat model)"),kFo=l(),Pp=a("li"),zde=a("strong"),SFo=o("vilt"),RFo=o(" \u2014 "),Gq=a("a"),PFo=o("ViltProcessor"),BFo=o(" (ViLT model)"),IFo=l(),Bp=a("li"),Qde=a("strong"),NFo=o("vision-text-dual-encoder"),qFo=o(" \u2014 "),Oq=a("a"),jFo=o("VisionTextDualEncoderProcessor"),DFo=o(" (VisionTextDualEncoder model)"),GFo=l(),Ip=a("li"),Wde=a("strong"),OFo=o("wav2vec2"),VFo=o(" \u2014 "),Vq=a("a"),XFo=o("Wav2Vec2Processor"),zFo=o(" (Wav2Vec2 model)"),QFo=l(),Np=a("li"),Hde=a("strong"),WFo=o("wav2vec2-conformer"),HFo=o(" \u2014 "),Xq=a("a"),UFo=o("Wav2Vec2Processor"),JFo=o(" (Wav2Vec2-Conformer model)"),YFo=l(),qp=a("li"),Ude=a("strong"),KFo=o("wavlm"),ZFo=o(" \u2014 "),zq=a("a"),e6o=o("Wav2Vec2Processor"),o6o=o(" (WavLM model)"),r6o=l(),F(jp.$$.fragment),t6o=l(),F(Dp.$$.fragment),a6o=l(),Gp=a("div"),F(yL.$$.fragment),n6o=l(),Jde=a("p"),s6o=o("Register a new processor for this class."),nXe=l(),Di=a("h2"),Op=a("a"),Yde=a("span"),F(xL.$$.fragment),l6o=l(),Kde=a("span"),i6o=o("AutoModel"),sXe=l(),xo=a("div"),F($L.$$.fragment),d6o=l(),Gi=a("p"),c6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qq=a("a"),f6o=o("from_pretrained()"),m6o=o(" class method or the "),Wq=a("a"),g6o=o("from_config()"),h6o=o(` class
method.`),p6o=l(),kL=a("p"),_6o=o("This class cannot be instantiated directly using "),Zde=a("code"),u6o=o("__init__()"),b6o=o(" (throws an error)."),v6o=l(),lt=a("div"),F(SL.$$.fragment),F6o=l(),ece=a("p"),T6o=o("Instantiates one of the base model classes of the library from a configuration."),M6o=l(),Oi=a("p"),E6o=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),C6o=o("not"),w6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=a("a"),A6o=o("from_pretrained()"),L6o=o(" to load the model weights."),y6o=l(),F(Vp.$$.fragment),x6o=l(),Je=a("div"),F(RL.$$.fragment),$6o=l(),rce=a("p"),k6o=o("Instantiate one of the base model classes of the library from a pretrained model."),S6o=l(),Ba=a("p"),R6o=o("The model class to instantiate is selected based on the "),tce=a("code"),P6o=o("model_type"),B6o=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),I6o=o("pretrained_model_name_or_path"),N6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),q6o=o("pretrained_model_name_or_path"),j6o=o(":"),D6o=l(),y=a("ul"),Xp=a("li"),sce=a("strong"),G6o=o("albert"),O6o=o(" \u2014 "),Uq=a("a"),V6o=o("AlbertModel"),X6o=o(" (ALBERT model)"),z6o=l(),zp=a("li"),lce=a("strong"),Q6o=o("bart"),W6o=o(" \u2014 "),Jq=a("a"),H6o=o("BartModel"),U6o=o(" (BART model)"),J6o=l(),Qp=a("li"),ice=a("strong"),Y6o=o("beit"),K6o=o(" \u2014 "),Yq=a("a"),Z6o=o("BeitModel"),eTo=o(" (BEiT model)"),oTo=l(),Wp=a("li"),dce=a("strong"),rTo=o("bert"),tTo=o(" \u2014 "),Kq=a("a"),aTo=o("BertModel"),nTo=o(" (BERT model)"),sTo=l(),Hp=a("li"),cce=a("strong"),lTo=o("bert-generation"),iTo=o(" \u2014 "),Zq=a("a"),dTo=o("BertGenerationEncoder"),cTo=o(" (Bert Generation model)"),fTo=l(),Up=a("li"),fce=a("strong"),mTo=o("big_bird"),gTo=o(" \u2014 "),ej=a("a"),hTo=o("BigBirdModel"),pTo=o(" (BigBird model)"),_To=l(),Jp=a("li"),mce=a("strong"),uTo=o("bigbird_pegasus"),bTo=o(" \u2014 "),oj=a("a"),vTo=o("BigBirdPegasusModel"),FTo=o(" (BigBird-Pegasus model)"),TTo=l(),Yp=a("li"),gce=a("strong"),MTo=o("blenderbot"),ETo=o(" \u2014 "),rj=a("a"),CTo=o("BlenderbotModel"),wTo=o(" (Blenderbot model)"),ATo=l(),Kp=a("li"),hce=a("strong"),LTo=o("blenderbot-small"),yTo=o(" \u2014 "),tj=a("a"),xTo=o("BlenderbotSmallModel"),$To=o(" (BlenderbotSmall model)"),kTo=l(),Zp=a("li"),pce=a("strong"),STo=o("bloom"),RTo=o(" \u2014 "),aj=a("a"),PTo=o("BloomModel"),BTo=o(" (BLOOM model)"),ITo=l(),e_=a("li"),_ce=a("strong"),NTo=o("camembert"),qTo=o(" \u2014 "),nj=a("a"),jTo=o("CamembertModel"),DTo=o(" (CamemBERT model)"),GTo=l(),o_=a("li"),uce=a("strong"),OTo=o("canine"),VTo=o(" \u2014 "),sj=a("a"),XTo=o("CanineModel"),zTo=o(" (CANINE model)"),QTo=l(),r_=a("li"),bce=a("strong"),WTo=o("clip"),HTo=o(" \u2014 "),lj=a("a"),UTo=o("CLIPModel"),JTo=o(" (CLIP model)"),YTo=l(),t_=a("li"),vce=a("strong"),KTo=o("codegen"),ZTo=o(" \u2014 "),ij=a("a"),e7o=o("CodeGenModel"),o7o=o(" (CodeGen model)"),r7o=l(),a_=a("li"),Fce=a("strong"),t7o=o("convbert"),a7o=o(" \u2014 "),dj=a("a"),n7o=o("ConvBertModel"),s7o=o(" (ConvBERT model)"),l7o=l(),n_=a("li"),Tce=a("strong"),i7o=o("convnext"),d7o=o(" \u2014 "),cj=a("a"),c7o=o("ConvNextModel"),f7o=o(" (ConvNeXT model)"),m7o=l(),s_=a("li"),Mce=a("strong"),g7o=o("ctrl"),h7o=o(" \u2014 "),fj=a("a"),p7o=o("CTRLModel"),_7o=o(" (CTRL model)"),u7o=l(),l_=a("li"),Ece=a("strong"),b7o=o("cvt"),v7o=o(" \u2014 "),mj=a("a"),F7o=o("CvtModel"),T7o=o(" (CvT model)"),M7o=l(),i_=a("li"),Cce=a("strong"),E7o=o("data2vec-audio"),C7o=o(" \u2014 "),gj=a("a"),w7o=o("Data2VecAudioModel"),A7o=o(" (Data2VecAudio model)"),L7o=l(),d_=a("li"),wce=a("strong"),y7o=o("data2vec-text"),x7o=o(" \u2014 "),hj=a("a"),$7o=o("Data2VecTextModel"),k7o=o(" (Data2VecText model)"),S7o=l(),c_=a("li"),Ace=a("strong"),R7o=o("data2vec-vision"),P7o=o(" \u2014 "),pj=a("a"),B7o=o("Data2VecVisionModel"),I7o=o(" (Data2VecVision model)"),N7o=l(),f_=a("li"),Lce=a("strong"),q7o=o("deberta"),j7o=o(" \u2014 "),_j=a("a"),D7o=o("DebertaModel"),G7o=o(" (DeBERTa model)"),O7o=l(),m_=a("li"),yce=a("strong"),V7o=o("deberta-v2"),X7o=o(" \u2014 "),uj=a("a"),z7o=o("DebertaV2Model"),Q7o=o(" (DeBERTa-v2 model)"),W7o=l(),g_=a("li"),xce=a("strong"),H7o=o("decision_transformer"),U7o=o(" \u2014 "),bj=a("a"),J7o=o("DecisionTransformerModel"),Y7o=o(" (Decision Transformer model)"),K7o=l(),h_=a("li"),$ce=a("strong"),Z7o=o("deit"),e8o=o(" \u2014 "),vj=a("a"),o8o=o("DeiTModel"),r8o=o(" (DeiT model)"),t8o=l(),p_=a("li"),kce=a("strong"),a8o=o("detr"),n8o=o(" \u2014 "),Fj=a("a"),s8o=o("DetrModel"),l8o=o(" (DETR model)"),i8o=l(),__=a("li"),Sce=a("strong"),d8o=o("distilbert"),c8o=o(" \u2014 "),Tj=a("a"),f8o=o("DistilBertModel"),m8o=o(" (DistilBERT model)"),g8o=l(),u_=a("li"),Rce=a("strong"),h8o=o("dpr"),p8o=o(" \u2014 "),Mj=a("a"),_8o=o("DPRQuestionEncoder"),u8o=o(" (DPR model)"),b8o=l(),b_=a("li"),Pce=a("strong"),v8o=o("dpt"),F8o=o(" \u2014 "),Ej=a("a"),T8o=o("DPTModel"),M8o=o(" (DPT model)"),E8o=l(),v_=a("li"),Bce=a("strong"),C8o=o("electra"),w8o=o(" \u2014 "),Cj=a("a"),A8o=o("ElectraModel"),L8o=o(" (ELECTRA model)"),y8o=l(),F_=a("li"),Ice=a("strong"),x8o=o("flaubert"),$8o=o(" \u2014 "),wj=a("a"),k8o=o("FlaubertModel"),S8o=o(" (FlauBERT model)"),R8o=l(),T_=a("li"),Nce=a("strong"),P8o=o("flava"),B8o=o(" \u2014 "),Aj=a("a"),I8o=o("FlavaModel"),N8o=o(" (FLAVA model)"),q8o=l(),M_=a("li"),qce=a("strong"),j8o=o("fnet"),D8o=o(" \u2014 "),Lj=a("a"),G8o=o("FNetModel"),O8o=o(" (FNet model)"),V8o=l(),E_=a("li"),jce=a("strong"),X8o=o("fsmt"),z8o=o(" \u2014 "),yj=a("a"),Q8o=o("FSMTModel"),W8o=o(" (FairSeq Machine-Translation model)"),H8o=l(),Qs=a("li"),Dce=a("strong"),U8o=o("funnel"),J8o=o(" \u2014 "),xj=a("a"),Y8o=o("FunnelModel"),K8o=o(" or "),$j=a("a"),Z8o=o("FunnelBaseModel"),eMo=o(" (Funnel Transformer model)"),oMo=l(),C_=a("li"),Gce=a("strong"),rMo=o("glpn"),tMo=o(" \u2014 "),kj=a("a"),aMo=o("GLPNModel"),nMo=o(" (GLPN model)"),sMo=l(),w_=a("li"),Oce=a("strong"),lMo=o("gpt2"),iMo=o(" \u2014 "),Sj=a("a"),dMo=o("GPT2Model"),cMo=o(" (OpenAI GPT-2 model)"),fMo=l(),A_=a("li"),Vce=a("strong"),mMo=o("gpt_neo"),gMo=o(" \u2014 "),Rj=a("a"),hMo=o("GPTNeoModel"),pMo=o(" (GPT Neo model)"),_Mo=l(),L_=a("li"),Xce=a("strong"),uMo=o("gpt_neox"),bMo=o(" \u2014 "),Pj=a("a"),vMo=o("GPTNeoXModel"),FMo=o(" (GPT NeoX model)"),TMo=l(),y_=a("li"),zce=a("strong"),MMo=o("gptj"),EMo=o(" \u2014 "),Bj=a("a"),CMo=o("GPTJModel"),wMo=o(" (GPT-J model)"),AMo=l(),x_=a("li"),Qce=a("strong"),LMo=o("groupvit"),yMo=o(" \u2014 "),Ij=a("a"),xMo=o("GroupViTModel"),$Mo=o(" (GroupViT model)"),kMo=l(),$_=a("li"),Wce=a("strong"),SMo=o("hubert"),RMo=o(" \u2014 "),Nj=a("a"),PMo=o("HubertModel"),BMo=o(" (Hubert model)"),IMo=l(),k_=a("li"),Hce=a("strong"),NMo=o("ibert"),qMo=o(" \u2014 "),qj=a("a"),jMo=o("IBertModel"),DMo=o(" (I-BERT model)"),GMo=l(),S_=a("li"),Uce=a("strong"),OMo=o("imagegpt"),VMo=o(" \u2014 "),jj=a("a"),XMo=o("ImageGPTModel"),zMo=o(" (ImageGPT model)"),QMo=l(),R_=a("li"),Jce=a("strong"),WMo=o("jukebox"),HMo=o(" \u2014 "),Yce=a("code"),UMo=o("JukeboxModel"),JMo=o(" (Jukebox model)"),YMo=l(),P_=a("li"),Kce=a("strong"),KMo=o("layoutlm"),ZMo=o(" \u2014 "),Dj=a("a"),e4o=o("LayoutLMModel"),o4o=o(" (LayoutLM model)"),r4o=l(),B_=a("li"),Zce=a("strong"),t4o=o("layoutlmv2"),a4o=o(" \u2014 "),Gj=a("a"),n4o=o("LayoutLMv2Model"),s4o=o(" (LayoutLMv2 model)"),l4o=l(),I_=a("li"),efe=a("strong"),i4o=o("layoutlmv3"),d4o=o(" \u2014 "),Oj=a("a"),c4o=o("LayoutLMv3Model"),f4o=o(" (LayoutLMv3 model)"),m4o=l(),N_=a("li"),ofe=a("strong"),g4o=o("led"),h4o=o(" \u2014 "),Vj=a("a"),p4o=o("LEDModel"),_4o=o(" (LED model)"),u4o=l(),q_=a("li"),rfe=a("strong"),b4o=o("levit"),v4o=o(" \u2014 "),Xj=a("a"),F4o=o("LevitModel"),T4o=o(" (LeViT model)"),M4o=l(),j_=a("li"),tfe=a("strong"),E4o=o("longformer"),C4o=o(" \u2014 "),zj=a("a"),w4o=o("LongformerModel"),A4o=o(" (Longformer model)"),L4o=l(),D_=a("li"),afe=a("strong"),y4o=o("longt5"),x4o=o(" \u2014 "),Qj=a("a"),$4o=o("LongT5Model"),k4o=o(" (LongT5 model)"),S4o=l(),G_=a("li"),nfe=a("strong"),R4o=o("luke"),P4o=o(" \u2014 "),Wj=a("a"),B4o=o("LukeModel"),I4o=o(" (LUKE model)"),N4o=l(),O_=a("li"),sfe=a("strong"),q4o=o("lxmert"),j4o=o(" \u2014 "),Hj=a("a"),D4o=o("LxmertModel"),G4o=o(" (LXMERT model)"),O4o=l(),V_=a("li"),lfe=a("strong"),V4o=o("m2m_100"),X4o=o(" \u2014 "),Uj=a("a"),z4o=o("M2M100Model"),Q4o=o(" (M2M100 model)"),W4o=l(),X_=a("li"),ife=a("strong"),H4o=o("marian"),U4o=o(" \u2014 "),Jj=a("a"),J4o=o("MarianModel"),Y4o=o(" (Marian model)"),K4o=l(),z_=a("li"),dfe=a("strong"),Z4o=o("maskformer"),eEo=o(" \u2014 "),Yj=a("a"),oEo=o("MaskFormerModel"),rEo=o(" (MaskFormer model)"),tEo=l(),Q_=a("li"),cfe=a("strong"),aEo=o("mbart"),nEo=o(" \u2014 "),Kj=a("a"),sEo=o("MBartModel"),lEo=o(" (mBART model)"),iEo=l(),W_=a("li"),ffe=a("strong"),dEo=o("mctct"),cEo=o(" \u2014 "),Zj=a("a"),fEo=o("MCTCTModel"),mEo=o(" (M-CTC-T model)"),gEo=l(),H_=a("li"),mfe=a("strong"),hEo=o("megatron-bert"),pEo=o(" \u2014 "),eD=a("a"),_Eo=o("MegatronBertModel"),uEo=o(" (Megatron-BERT model)"),bEo=l(),U_=a("li"),gfe=a("strong"),vEo=o("mobilebert"),FEo=o(" \u2014 "),oD=a("a"),TEo=o("MobileBertModel"),MEo=o(" (MobileBERT model)"),EEo=l(),J_=a("li"),hfe=a("strong"),CEo=o("mobilevit"),wEo=o(" \u2014 "),rD=a("a"),AEo=o("MobileViTModel"),LEo=o(" (MobileViT model)"),yEo=l(),Y_=a("li"),pfe=a("strong"),xEo=o("mpnet"),$Eo=o(" \u2014 "),tD=a("a"),kEo=o("MPNetModel"),SEo=o(" (MPNet model)"),REo=l(),K_=a("li"),_fe=a("strong"),PEo=o("mt5"),BEo=o(" \u2014 "),aD=a("a"),IEo=o("MT5Model"),NEo=o(" (MT5 model)"),qEo=l(),Z_=a("li"),ufe=a("strong"),jEo=o("mvp"),DEo=o(" \u2014 "),nD=a("a"),GEo=o("MvpModel"),OEo=o(" (MVP model)"),VEo=l(),eu=a("li"),bfe=a("strong"),XEo=o("nezha"),zEo=o(" \u2014 "),sD=a("a"),QEo=o("NezhaModel"),WEo=o(" (Nezha model)"),HEo=l(),ou=a("li"),vfe=a("strong"),UEo=o("nystromformer"),JEo=o(" \u2014 "),lD=a("a"),YEo=o("NystromformerModel"),KEo=o(" (Nystr\xF6mformer model)"),ZEo=l(),ru=a("li"),Ffe=a("strong"),eCo=o("openai-gpt"),oCo=o(" \u2014 "),iD=a("a"),rCo=o("OpenAIGPTModel"),tCo=o(" (OpenAI GPT model)"),aCo=l(),tu=a("li"),Tfe=a("strong"),nCo=o("opt"),sCo=o(" \u2014 "),dD=a("a"),lCo=o("OPTModel"),iCo=o(" (OPT model)"),dCo=l(),au=a("li"),Mfe=a("strong"),cCo=o("pegasus"),fCo=o(" \u2014 "),cD=a("a"),mCo=o("PegasusModel"),gCo=o(" (Pegasus model)"),hCo=l(),nu=a("li"),Efe=a("strong"),pCo=o("perceiver"),_Co=o(" \u2014 "),fD=a("a"),uCo=o("PerceiverModel"),bCo=o(" (Perceiver model)"),vCo=l(),su=a("li"),Cfe=a("strong"),FCo=o("plbart"),TCo=o(" \u2014 "),mD=a("a"),MCo=o("PLBartModel"),ECo=o(" (PLBart model)"),CCo=l(),lu=a("li"),wfe=a("strong"),wCo=o("poolformer"),ACo=o(" \u2014 "),gD=a("a"),LCo=o("PoolFormerModel"),yCo=o(" (PoolFormer model)"),xCo=l(),iu=a("li"),Afe=a("strong"),$Co=o("prophetnet"),kCo=o(" \u2014 "),hD=a("a"),SCo=o("ProphetNetModel"),RCo=o(" (ProphetNet model)"),PCo=l(),du=a("li"),Lfe=a("strong"),BCo=o("qdqbert"),ICo=o(" \u2014 "),pD=a("a"),NCo=o("QDQBertModel"),qCo=o(" (QDQBert model)"),jCo=l(),cu=a("li"),yfe=a("strong"),DCo=o("reformer"),GCo=o(" \u2014 "),_D=a("a"),OCo=o("ReformerModel"),VCo=o(" (Reformer model)"),XCo=l(),fu=a("li"),xfe=a("strong"),zCo=o("regnet"),QCo=o(" \u2014 "),uD=a("a"),WCo=o("RegNetModel"),HCo=o(" (RegNet model)"),UCo=l(),mu=a("li"),$fe=a("strong"),JCo=o("rembert"),YCo=o(" \u2014 "),bD=a("a"),KCo=o("RemBertModel"),ZCo=o(" (RemBERT model)"),e3o=l(),gu=a("li"),kfe=a("strong"),o3o=o("resnet"),r3o=o(" \u2014 "),vD=a("a"),t3o=o("ResNetModel"),a3o=o(" (ResNet model)"),n3o=l(),hu=a("li"),Sfe=a("strong"),s3o=o("retribert"),l3o=o(" \u2014 "),FD=a("a"),i3o=o("RetriBertModel"),d3o=o(" (RetriBERT model)"),c3o=l(),pu=a("li"),Rfe=a("strong"),f3o=o("roberta"),m3o=o(" \u2014 "),TD=a("a"),g3o=o("RobertaModel"),h3o=o(" (RoBERTa model)"),p3o=l(),_u=a("li"),Pfe=a("strong"),_3o=o("roformer"),u3o=o(" \u2014 "),MD=a("a"),b3o=o("RoFormerModel"),v3o=o(" (RoFormer model)"),F3o=l(),uu=a("li"),Bfe=a("strong"),T3o=o("segformer"),M3o=o(" \u2014 "),ED=a("a"),E3o=o("SegformerModel"),C3o=o(" (SegFormer model)"),w3o=l(),bu=a("li"),Ife=a("strong"),A3o=o("sew"),L3o=o(" \u2014 "),CD=a("a"),y3o=o("SEWModel"),x3o=o(" (SEW model)"),$3o=l(),vu=a("li"),Nfe=a("strong"),k3o=o("sew-d"),S3o=o(" \u2014 "),wD=a("a"),R3o=o("SEWDModel"),P3o=o(" (SEW-D model)"),B3o=l(),Fu=a("li"),qfe=a("strong"),I3o=o("speech_to_text"),N3o=o(" \u2014 "),AD=a("a"),q3o=o("Speech2TextModel"),j3o=o(" (Speech2Text model)"),D3o=l(),Tu=a("li"),jfe=a("strong"),G3o=o("splinter"),O3o=o(" \u2014 "),LD=a("a"),V3o=o("SplinterModel"),X3o=o(" (Splinter model)"),z3o=l(),Mu=a("li"),Dfe=a("strong"),Q3o=o("squeezebert"),W3o=o(" \u2014 "),yD=a("a"),H3o=o("SqueezeBertModel"),U3o=o(" (SqueezeBERT model)"),J3o=l(),Eu=a("li"),Gfe=a("strong"),Y3o=o("swin"),K3o=o(" \u2014 "),xD=a("a"),Z3o=o("SwinModel"),e5o=o(" (Swin Transformer model)"),o5o=l(),Cu=a("li"),Ofe=a("strong"),r5o=o("t5"),t5o=o(" \u2014 "),$D=a("a"),a5o=o("T5Model"),n5o=o(" (T5 model)"),s5o=l(),wu=a("li"),Vfe=a("strong"),l5o=o("tapas"),i5o=o(" \u2014 "),kD=a("a"),d5o=o("TapasModel"),c5o=o(" (TAPAS model)"),f5o=l(),Au=a("li"),Xfe=a("strong"),m5o=o("trajectory_transformer"),g5o=o(" \u2014 "),SD=a("a"),h5o=o("TrajectoryTransformerModel"),p5o=o(" (Trajectory Transformer model)"),_5o=l(),Lu=a("li"),zfe=a("strong"),u5o=o("transfo-xl"),b5o=o(" \u2014 "),RD=a("a"),v5o=o("TransfoXLModel"),F5o=o(" (Transformer-XL model)"),T5o=l(),yu=a("li"),Qfe=a("strong"),M5o=o("unispeech"),E5o=o(" \u2014 "),PD=a("a"),C5o=o("UniSpeechModel"),w5o=o(" (UniSpeech model)"),A5o=l(),xu=a("li"),Wfe=a("strong"),L5o=o("unispeech-sat"),y5o=o(" \u2014 "),BD=a("a"),x5o=o("UniSpeechSatModel"),$5o=o(" (UniSpeechSat model)"),k5o=l(),$u=a("li"),Hfe=a("strong"),S5o=o("van"),R5o=o(" \u2014 "),ID=a("a"),P5o=o("VanModel"),B5o=o(" (VAN model)"),I5o=l(),ku=a("li"),Ufe=a("strong"),N5o=o("vilt"),q5o=o(" \u2014 "),ND=a("a"),j5o=o("ViltModel"),D5o=o(" (ViLT model)"),G5o=l(),Su=a("li"),Jfe=a("strong"),O5o=o("vision-text-dual-encoder"),V5o=o(" \u2014 "),qD=a("a"),X5o=o("VisionTextDualEncoderModel"),z5o=o(" (VisionTextDualEncoder model)"),Q5o=l(),Ru=a("li"),Yfe=a("strong"),W5o=o("visual_bert"),H5o=o(" \u2014 "),jD=a("a"),U5o=o("VisualBertModel"),J5o=o(" (VisualBERT model)"),Y5o=l(),Pu=a("li"),Kfe=a("strong"),K5o=o("vit"),Z5o=o(" \u2014 "),DD=a("a"),e0o=o("ViTModel"),o0o=o(" (ViT model)"),r0o=l(),Bu=a("li"),Zfe=a("strong"),t0o=o("vit_mae"),a0o=o(" \u2014 "),GD=a("a"),n0o=o("ViTMAEModel"),s0o=o(" (ViTMAE model)"),l0o=l(),Iu=a("li"),eme=a("strong"),i0o=o("wav2vec2"),d0o=o(" \u2014 "),OD=a("a"),c0o=o("Wav2Vec2Model"),f0o=o(" (Wav2Vec2 model)"),m0o=l(),Nu=a("li"),ome=a("strong"),g0o=o("wav2vec2-conformer"),h0o=o(" \u2014 "),VD=a("a"),p0o=o("Wav2Vec2ConformerModel"),_0o=o(" (Wav2Vec2-Conformer model)"),u0o=l(),qu=a("li"),rme=a("strong"),b0o=o("wavlm"),v0o=o(" \u2014 "),XD=a("a"),F0o=o("WavLMModel"),T0o=o(" (WavLM model)"),M0o=l(),ju=a("li"),tme=a("strong"),E0o=o("xglm"),C0o=o(" \u2014 "),zD=a("a"),w0o=o("XGLMModel"),A0o=o(" (XGLM model)"),L0o=l(),Du=a("li"),ame=a("strong"),y0o=o("xlm"),x0o=o(" \u2014 "),QD=a("a"),$0o=o("XLMModel"),k0o=o(" (XLM model)"),S0o=l(),Gu=a("li"),nme=a("strong"),R0o=o("xlm-prophetnet"),P0o=o(" \u2014 "),WD=a("a"),B0o=o("XLMProphetNetModel"),I0o=o(" (XLM-ProphetNet model)"),N0o=l(),Ou=a("li"),sme=a("strong"),q0o=o("xlm-roberta"),j0o=o(" \u2014 "),HD=a("a"),D0o=o("XLMRobertaModel"),G0o=o(" (XLM-RoBERTa model)"),O0o=l(),Vu=a("li"),lme=a("strong"),V0o=o("xlm-roberta-xl"),X0o=o(" \u2014 "),UD=a("a"),z0o=o("XLMRobertaXLModel"),Q0o=o(" (XLM-RoBERTa-XL model)"),W0o=l(),Xu=a("li"),ime=a("strong"),H0o=o("xlnet"),U0o=o(" \u2014 "),JD=a("a"),J0o=o("XLNetModel"),Y0o=o(" (XLNet model)"),K0o=l(),zu=a("li"),dme=a("strong"),Z0o=o("yolos"),ewo=o(" \u2014 "),YD=a("a"),owo=o("YolosModel"),rwo=o(" (YOLOS model)"),two=l(),Qu=a("li"),cme=a("strong"),awo=o("yoso"),nwo=o(" \u2014 "),KD=a("a"),swo=o("YosoModel"),lwo=o(" (YOSO model)"),iwo=l(),Wu=a("p"),dwo=o("The model is set in evaluation mode by default using "),fme=a("code"),cwo=o("model.eval()"),fwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),mwo=o("model.train()"),gwo=l(),F(Hu.$$.fragment),lXe=l(),Vi=a("h2"),Uu=a("a"),gme=a("span"),F(PL.$$.fragment),hwo=l(),hme=a("span"),pwo=o("AutoModelForPreTraining"),iXe=l(),$o=a("div"),F(BL.$$.fragment),_wo=l(),Xi=a("p"),uwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZD=a("a"),bwo=o("from_pretrained()"),vwo=o(" class method or the "),eG=a("a"),Fwo=o("from_config()"),Two=o(` class
method.`),Mwo=l(),IL=a("p"),Ewo=o("This class cannot be instantiated directly using "),pme=a("code"),Cwo=o("__init__()"),wwo=o(" (throws an error)."),Awo=l(),it=a("div"),F(NL.$$.fragment),Lwo=l(),_me=a("p"),ywo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xwo=l(),zi=a("p"),$wo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),kwo=o("not"),Swo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),Rwo=o("from_pretrained()"),Pwo=o(" to load the model weights."),Bwo=l(),F(Ju.$$.fragment),Iwo=l(),Ye=a("div"),F(qL.$$.fragment),Nwo=l(),bme=a("p"),qwo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jwo=l(),Ia=a("p"),Dwo=o("The model class to instantiate is selected based on the "),vme=a("code"),Gwo=o("model_type"),Owo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),Vwo=o("pretrained_model_name_or_path"),Xwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),zwo=o("pretrained_model_name_or_path"),Qwo=o(":"),Wwo=l(),G=a("ul"),Yu=a("li"),Mme=a("strong"),Hwo=o("albert"),Uwo=o(" \u2014 "),rG=a("a"),Jwo=o("AlbertForPreTraining"),Ywo=o(" (ALBERT model)"),Kwo=l(),Ku=a("li"),Eme=a("strong"),Zwo=o("bart"),eAo=o(" \u2014 "),tG=a("a"),oAo=o("BartForConditionalGeneration"),rAo=o(" (BART model)"),tAo=l(),Zu=a("li"),Cme=a("strong"),aAo=o("bert"),nAo=o(" \u2014 "),aG=a("a"),sAo=o("BertForPreTraining"),lAo=o(" (BERT model)"),iAo=l(),e2=a("li"),wme=a("strong"),dAo=o("big_bird"),cAo=o(" \u2014 "),nG=a("a"),fAo=o("BigBirdForPreTraining"),mAo=o(" (BigBird model)"),gAo=l(),o2=a("li"),Ame=a("strong"),hAo=o("bloom"),pAo=o(" \u2014 "),sG=a("a"),_Ao=o("BloomForCausalLM"),uAo=o(" (BLOOM model)"),bAo=l(),r2=a("li"),Lme=a("strong"),vAo=o("camembert"),FAo=o(" \u2014 "),lG=a("a"),TAo=o("CamembertForMaskedLM"),MAo=o(" (CamemBERT model)"),EAo=l(),t2=a("li"),yme=a("strong"),CAo=o("ctrl"),wAo=o(" \u2014 "),iG=a("a"),AAo=o("CTRLLMHeadModel"),LAo=o(" (CTRL model)"),yAo=l(),a2=a("li"),xme=a("strong"),xAo=o("data2vec-text"),$Ao=o(" \u2014 "),dG=a("a"),kAo=o("Data2VecTextForMaskedLM"),SAo=o(" (Data2VecText model)"),RAo=l(),n2=a("li"),$me=a("strong"),PAo=o("deberta"),BAo=o(" \u2014 "),cG=a("a"),IAo=o("DebertaForMaskedLM"),NAo=o(" (DeBERTa model)"),qAo=l(),s2=a("li"),kme=a("strong"),jAo=o("deberta-v2"),DAo=o(" \u2014 "),fG=a("a"),GAo=o("DebertaV2ForMaskedLM"),OAo=o(" (DeBERTa-v2 model)"),VAo=l(),l2=a("li"),Sme=a("strong"),XAo=o("distilbert"),zAo=o(" \u2014 "),mG=a("a"),QAo=o("DistilBertForMaskedLM"),WAo=o(" (DistilBERT model)"),HAo=l(),i2=a("li"),Rme=a("strong"),UAo=o("electra"),JAo=o(" \u2014 "),gG=a("a"),YAo=o("ElectraForPreTraining"),KAo=o(" (ELECTRA model)"),ZAo=l(),d2=a("li"),Pme=a("strong"),eLo=o("flaubert"),oLo=o(" \u2014 "),hG=a("a"),rLo=o("FlaubertWithLMHeadModel"),tLo=o(" (FlauBERT model)"),aLo=l(),c2=a("li"),Bme=a("strong"),nLo=o("flava"),sLo=o(" \u2014 "),pG=a("a"),lLo=o("FlavaForPreTraining"),iLo=o(" (FLAVA model)"),dLo=l(),f2=a("li"),Ime=a("strong"),cLo=o("fnet"),fLo=o(" \u2014 "),_G=a("a"),mLo=o("FNetForPreTraining"),gLo=o(" (FNet model)"),hLo=l(),m2=a("li"),Nme=a("strong"),pLo=o("fsmt"),_Lo=o(" \u2014 "),uG=a("a"),uLo=o("FSMTForConditionalGeneration"),bLo=o(" (FairSeq Machine-Translation model)"),vLo=l(),g2=a("li"),qme=a("strong"),FLo=o("funnel"),TLo=o(" \u2014 "),bG=a("a"),MLo=o("FunnelForPreTraining"),ELo=o(" (Funnel Transformer model)"),CLo=l(),h2=a("li"),jme=a("strong"),wLo=o("gpt2"),ALo=o(" \u2014 "),vG=a("a"),LLo=o("GPT2LMHeadModel"),yLo=o(" (OpenAI GPT-2 model)"),xLo=l(),p2=a("li"),Dme=a("strong"),$Lo=o("ibert"),kLo=o(" \u2014 "),FG=a("a"),SLo=o("IBertForMaskedLM"),RLo=o(" (I-BERT model)"),PLo=l(),_2=a("li"),Gme=a("strong"),BLo=o("layoutlm"),ILo=o(" \u2014 "),TG=a("a"),NLo=o("LayoutLMForMaskedLM"),qLo=o(" (LayoutLM model)"),jLo=l(),u2=a("li"),Ome=a("strong"),DLo=o("longformer"),GLo=o(" \u2014 "),MG=a("a"),OLo=o("LongformerForMaskedLM"),VLo=o(" (Longformer model)"),XLo=l(),b2=a("li"),Vme=a("strong"),zLo=o("lxmert"),QLo=o(" \u2014 "),EG=a("a"),WLo=o("LxmertForPreTraining"),HLo=o(" (LXMERT model)"),ULo=l(),v2=a("li"),Xme=a("strong"),JLo=o("megatron-bert"),YLo=o(" \u2014 "),CG=a("a"),KLo=o("MegatronBertForPreTraining"),ZLo=o(" (Megatron-BERT model)"),eyo=l(),F2=a("li"),zme=a("strong"),oyo=o("mobilebert"),ryo=o(" \u2014 "),wG=a("a"),tyo=o("MobileBertForPreTraining"),ayo=o(" (MobileBERT model)"),nyo=l(),T2=a("li"),Qme=a("strong"),syo=o("mpnet"),lyo=o(" \u2014 "),AG=a("a"),iyo=o("MPNetForMaskedLM"),dyo=o(" (MPNet model)"),cyo=l(),M2=a("li"),Wme=a("strong"),fyo=o("mvp"),myo=o(" \u2014 "),LG=a("a"),gyo=o("MvpForConditionalGeneration"),hyo=o(" (MVP model)"),pyo=l(),E2=a("li"),Hme=a("strong"),_yo=o("nezha"),uyo=o(" \u2014 "),yG=a("a"),byo=o("NezhaForPreTraining"),vyo=o(" (Nezha model)"),Fyo=l(),C2=a("li"),Ume=a("strong"),Tyo=o("openai-gpt"),Myo=o(" \u2014 "),xG=a("a"),Eyo=o("OpenAIGPTLMHeadModel"),Cyo=o(" (OpenAI GPT model)"),wyo=l(),w2=a("li"),Jme=a("strong"),Ayo=o("retribert"),Lyo=o(" \u2014 "),$G=a("a"),yyo=o("RetriBertModel"),xyo=o(" (RetriBERT model)"),$yo=l(),A2=a("li"),Yme=a("strong"),kyo=o("roberta"),Syo=o(" \u2014 "),kG=a("a"),Ryo=o("RobertaForMaskedLM"),Pyo=o(" (RoBERTa model)"),Byo=l(),L2=a("li"),Kme=a("strong"),Iyo=o("splinter"),Nyo=o(" \u2014 "),SG=a("a"),qyo=o("SplinterForPreTraining"),jyo=o(" (Splinter model)"),Dyo=l(),y2=a("li"),Zme=a("strong"),Gyo=o("squeezebert"),Oyo=o(" \u2014 "),RG=a("a"),Vyo=o("SqueezeBertForMaskedLM"),Xyo=o(" (SqueezeBERT model)"),zyo=l(),x2=a("li"),ege=a("strong"),Qyo=o("t5"),Wyo=o(" \u2014 "),PG=a("a"),Hyo=o("T5ForConditionalGeneration"),Uyo=o(" (T5 model)"),Jyo=l(),$2=a("li"),oge=a("strong"),Yyo=o("tapas"),Kyo=o(" \u2014 "),BG=a("a"),Zyo=o("TapasForMaskedLM"),e9o=o(" (TAPAS model)"),o9o=l(),k2=a("li"),rge=a("strong"),r9o=o("transfo-xl"),t9o=o(" \u2014 "),IG=a("a"),a9o=o("TransfoXLLMHeadModel"),n9o=o(" (Transformer-XL model)"),s9o=l(),S2=a("li"),tge=a("strong"),l9o=o("unispeech"),i9o=o(" \u2014 "),NG=a("a"),d9o=o("UniSpeechForPreTraining"),c9o=o(" (UniSpeech model)"),f9o=l(),R2=a("li"),age=a("strong"),m9o=o("unispeech-sat"),g9o=o(" \u2014 "),qG=a("a"),h9o=o("UniSpeechSatForPreTraining"),p9o=o(" (UniSpeechSat model)"),_9o=l(),P2=a("li"),nge=a("strong"),u9o=o("visual_bert"),b9o=o(" \u2014 "),jG=a("a"),v9o=o("VisualBertForPreTraining"),F9o=o(" (VisualBERT model)"),T9o=l(),B2=a("li"),sge=a("strong"),M9o=o("vit_mae"),E9o=o(" \u2014 "),DG=a("a"),C9o=o("ViTMAEForPreTraining"),w9o=o(" (ViTMAE model)"),A9o=l(),I2=a("li"),lge=a("strong"),L9o=o("wav2vec2"),y9o=o(" \u2014 "),GG=a("a"),x9o=o("Wav2Vec2ForPreTraining"),$9o=o(" (Wav2Vec2 model)"),k9o=l(),N2=a("li"),ige=a("strong"),S9o=o("wav2vec2-conformer"),R9o=o(" \u2014 "),OG=a("a"),P9o=o("Wav2Vec2ConformerForPreTraining"),B9o=o(" (Wav2Vec2-Conformer model)"),I9o=l(),q2=a("li"),dge=a("strong"),N9o=o("xlm"),q9o=o(" \u2014 "),VG=a("a"),j9o=o("XLMWithLMHeadModel"),D9o=o(" (XLM model)"),G9o=l(),j2=a("li"),cge=a("strong"),O9o=o("xlm-roberta"),V9o=o(" \u2014 "),XG=a("a"),X9o=o("XLMRobertaForMaskedLM"),z9o=o(" (XLM-RoBERTa model)"),Q9o=l(),D2=a("li"),fge=a("strong"),W9o=o("xlm-roberta-xl"),H9o=o(" \u2014 "),zG=a("a"),U9o=o("XLMRobertaXLForMaskedLM"),J9o=o(" (XLM-RoBERTa-XL model)"),Y9o=l(),G2=a("li"),mge=a("strong"),K9o=o("xlnet"),Z9o=o(" \u2014 "),QG=a("a"),exo=o("XLNetLMHeadModel"),oxo=o(" (XLNet model)"),rxo=l(),O2=a("p"),txo=o("The model is set in evaluation mode by default using "),gge=a("code"),axo=o("model.eval()"),nxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),sxo=o("model.train()"),lxo=l(),F(V2.$$.fragment),dXe=l(),Qi=a("h2"),X2=a("a"),pge=a("span"),F(jL.$$.fragment),ixo=l(),_ge=a("span"),dxo=o("AutoModelForCausalLM"),cXe=l(),ko=a("div"),F(DL.$$.fragment),cxo=l(),Wi=a("p"),fxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WG=a("a"),mxo=o("from_pretrained()"),gxo=o(" class method or the "),HG=a("a"),hxo=o("from_config()"),pxo=o(` class
method.`),_xo=l(),GL=a("p"),uxo=o("This class cannot be instantiated directly using "),uge=a("code"),bxo=o("__init__()"),vxo=o(" (throws an error)."),Fxo=l(),dt=a("div"),F(OL.$$.fragment),Txo=l(),bge=a("p"),Mxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Exo=l(),Hi=a("p"),Cxo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),wxo=o("not"),Axo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),Lxo=o("from_pretrained()"),yxo=o(" to load the model weights."),xxo=l(),F(z2.$$.fragment),$xo=l(),Ke=a("div"),F(VL.$$.fragment),kxo=l(),Fge=a("p"),Sxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rxo=l(),Na=a("p"),Pxo=o("The model class to instantiate is selected based on the "),Tge=a("code"),Bxo=o("model_type"),Ixo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),Nxo=o("pretrained_model_name_or_path"),qxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),jxo=o("pretrained_model_name_or_path"),Dxo=o(":"),Gxo=l(),z=a("ul"),Q2=a("li"),Cge=a("strong"),Oxo=o("bart"),Vxo=o(" \u2014 "),JG=a("a"),Xxo=o("BartForCausalLM"),zxo=o(" (BART model)"),Qxo=l(),W2=a("li"),wge=a("strong"),Wxo=o("bert"),Hxo=o(" \u2014 "),YG=a("a"),Uxo=o("BertLMHeadModel"),Jxo=o(" (BERT model)"),Yxo=l(),H2=a("li"),Age=a("strong"),Kxo=o("bert-generation"),Zxo=o(" \u2014 "),KG=a("a"),e$o=o("BertGenerationDecoder"),o$o=o(" (Bert Generation model)"),r$o=l(),U2=a("li"),Lge=a("strong"),t$o=o("big_bird"),a$o=o(" \u2014 "),ZG=a("a"),n$o=o("BigBirdForCausalLM"),s$o=o(" (BigBird model)"),l$o=l(),J2=a("li"),yge=a("strong"),i$o=o("bigbird_pegasus"),d$o=o(" \u2014 "),eO=a("a"),c$o=o("BigBirdPegasusForCausalLM"),f$o=o(" (BigBird-Pegasus model)"),m$o=l(),Y2=a("li"),xge=a("strong"),g$o=o("blenderbot"),h$o=o(" \u2014 "),oO=a("a"),p$o=o("BlenderbotForCausalLM"),_$o=o(" (Blenderbot model)"),u$o=l(),K2=a("li"),$ge=a("strong"),b$o=o("blenderbot-small"),v$o=o(" \u2014 "),rO=a("a"),F$o=o("BlenderbotSmallForCausalLM"),T$o=o(" (BlenderbotSmall model)"),M$o=l(),Z2=a("li"),kge=a("strong"),E$o=o("bloom"),C$o=o(" \u2014 "),tO=a("a"),w$o=o("BloomForCausalLM"),A$o=o(" (BLOOM model)"),L$o=l(),e1=a("li"),Sge=a("strong"),y$o=o("camembert"),x$o=o(" \u2014 "),aO=a("a"),$$o=o("CamembertForCausalLM"),k$o=o(" (CamemBERT model)"),S$o=l(),o1=a("li"),Rge=a("strong"),R$o=o("codegen"),P$o=o(" \u2014 "),nO=a("a"),B$o=o("CodeGenForCausalLM"),I$o=o(" (CodeGen model)"),N$o=l(),r1=a("li"),Pge=a("strong"),q$o=o("ctrl"),j$o=o(" \u2014 "),sO=a("a"),D$o=o("CTRLLMHeadModel"),G$o=o(" (CTRL model)"),O$o=l(),t1=a("li"),Bge=a("strong"),V$o=o("data2vec-text"),X$o=o(" \u2014 "),lO=a("a"),z$o=o("Data2VecTextForCausalLM"),Q$o=o(" (Data2VecText model)"),W$o=l(),a1=a("li"),Ige=a("strong"),H$o=o("electra"),U$o=o(" \u2014 "),iO=a("a"),J$o=o("ElectraForCausalLM"),Y$o=o(" (ELECTRA model)"),K$o=l(),n1=a("li"),Nge=a("strong"),Z$o=o("gpt2"),eko=o(" \u2014 "),dO=a("a"),oko=o("GPT2LMHeadModel"),rko=o(" (OpenAI GPT-2 model)"),tko=l(),s1=a("li"),qge=a("strong"),ako=o("gpt_neo"),nko=o(" \u2014 "),cO=a("a"),sko=o("GPTNeoForCausalLM"),lko=o(" (GPT Neo model)"),iko=l(),l1=a("li"),jge=a("strong"),dko=o("gpt_neox"),cko=o(" \u2014 "),fO=a("a"),fko=o("GPTNeoXForCausalLM"),mko=o(" (GPT NeoX model)"),gko=l(),i1=a("li"),Dge=a("strong"),hko=o("gptj"),pko=o(" \u2014 "),mO=a("a"),_ko=o("GPTJForCausalLM"),uko=o(" (GPT-J model)"),bko=l(),d1=a("li"),Gge=a("strong"),vko=o("marian"),Fko=o(" \u2014 "),gO=a("a"),Tko=o("MarianForCausalLM"),Mko=o(" (Marian model)"),Eko=l(),c1=a("li"),Oge=a("strong"),Cko=o("mbart"),wko=o(" \u2014 "),hO=a("a"),Ako=o("MBartForCausalLM"),Lko=o(" (mBART model)"),yko=l(),f1=a("li"),Vge=a("strong"),xko=o("megatron-bert"),$ko=o(" \u2014 "),pO=a("a"),kko=o("MegatronBertForCausalLM"),Sko=o(" (Megatron-BERT model)"),Rko=l(),m1=a("li"),Xge=a("strong"),Pko=o("mvp"),Bko=o(" \u2014 "),_O=a("a"),Iko=o("MvpForCausalLM"),Nko=o(" (MVP model)"),qko=l(),g1=a("li"),zge=a("strong"),jko=o("openai-gpt"),Dko=o(" \u2014 "),uO=a("a"),Gko=o("OpenAIGPTLMHeadModel"),Oko=o(" (OpenAI GPT model)"),Vko=l(),h1=a("li"),Qge=a("strong"),Xko=o("opt"),zko=o(" \u2014 "),bO=a("a"),Qko=o("OPTForCausalLM"),Wko=o(" (OPT model)"),Hko=l(),p1=a("li"),Wge=a("strong"),Uko=o("pegasus"),Jko=o(" \u2014 "),vO=a("a"),Yko=o("PegasusForCausalLM"),Kko=o(" (Pegasus model)"),Zko=l(),_1=a("li"),Hge=a("strong"),eSo=o("plbart"),oSo=o(" \u2014 "),FO=a("a"),rSo=o("PLBartForCausalLM"),tSo=o(" (PLBart model)"),aSo=l(),u1=a("li"),Uge=a("strong"),nSo=o("prophetnet"),sSo=o(" \u2014 "),TO=a("a"),lSo=o("ProphetNetForCausalLM"),iSo=o(" (ProphetNet model)"),dSo=l(),b1=a("li"),Jge=a("strong"),cSo=o("qdqbert"),fSo=o(" \u2014 "),MO=a("a"),mSo=o("QDQBertLMHeadModel"),gSo=o(" (QDQBert model)"),hSo=l(),v1=a("li"),Yge=a("strong"),pSo=o("reformer"),_So=o(" \u2014 "),EO=a("a"),uSo=o("ReformerModelWithLMHead"),bSo=o(" (Reformer model)"),vSo=l(),F1=a("li"),Kge=a("strong"),FSo=o("rembert"),TSo=o(" \u2014 "),CO=a("a"),MSo=o("RemBertForCausalLM"),ESo=o(" (RemBERT model)"),CSo=l(),T1=a("li"),Zge=a("strong"),wSo=o("roberta"),ASo=o(" \u2014 "),wO=a("a"),LSo=o("RobertaForCausalLM"),ySo=o(" (RoBERTa model)"),xSo=l(),M1=a("li"),ehe=a("strong"),$So=o("roformer"),kSo=o(" \u2014 "),AO=a("a"),SSo=o("RoFormerForCausalLM"),RSo=o(" (RoFormer model)"),PSo=l(),E1=a("li"),ohe=a("strong"),BSo=o("speech_to_text_2"),ISo=o(" \u2014 "),LO=a("a"),NSo=o("Speech2Text2ForCausalLM"),qSo=o(" (Speech2Text2 model)"),jSo=l(),C1=a("li"),rhe=a("strong"),DSo=o("transfo-xl"),GSo=o(" \u2014 "),yO=a("a"),OSo=o("TransfoXLLMHeadModel"),VSo=o(" (Transformer-XL model)"),XSo=l(),w1=a("li"),the=a("strong"),zSo=o("trocr"),QSo=o(" \u2014 "),xO=a("a"),WSo=o("TrOCRForCausalLM"),HSo=o(" (TrOCR model)"),USo=l(),A1=a("li"),ahe=a("strong"),JSo=o("xglm"),YSo=o(" \u2014 "),$O=a("a"),KSo=o("XGLMForCausalLM"),ZSo=o(" (XGLM model)"),eRo=l(),L1=a("li"),nhe=a("strong"),oRo=o("xlm"),rRo=o(" \u2014 "),kO=a("a"),tRo=o("XLMWithLMHeadModel"),aRo=o(" (XLM model)"),nRo=l(),y1=a("li"),she=a("strong"),sRo=o("xlm-prophetnet"),lRo=o(" \u2014 "),SO=a("a"),iRo=o("XLMProphetNetForCausalLM"),dRo=o(" (XLM-ProphetNet model)"),cRo=l(),x1=a("li"),lhe=a("strong"),fRo=o("xlm-roberta"),mRo=o(" \u2014 "),RO=a("a"),gRo=o("XLMRobertaForCausalLM"),hRo=o(" (XLM-RoBERTa model)"),pRo=l(),$1=a("li"),ihe=a("strong"),_Ro=o("xlm-roberta-xl"),uRo=o(" \u2014 "),PO=a("a"),bRo=o("XLMRobertaXLForCausalLM"),vRo=o(" (XLM-RoBERTa-XL model)"),FRo=l(),k1=a("li"),dhe=a("strong"),TRo=o("xlnet"),MRo=o(" \u2014 "),BO=a("a"),ERo=o("XLNetLMHeadModel"),CRo=o(" (XLNet model)"),wRo=l(),S1=a("p"),ARo=o("The model is set in evaluation mode by default using "),che=a("code"),LRo=o("model.eval()"),yRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),xRo=o("model.train()"),$Ro=l(),F(R1.$$.fragment),fXe=l(),Ui=a("h2"),P1=a("a"),mhe=a("span"),F(XL.$$.fragment),kRo=l(),ghe=a("span"),SRo=o("AutoModelForMaskedLM"),mXe=l(),So=a("div"),F(zL.$$.fragment),RRo=l(),Ji=a("p"),PRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IO=a("a"),BRo=o("from_pretrained()"),IRo=o(" class method or the "),NO=a("a"),NRo=o("from_config()"),qRo=o(` class
method.`),jRo=l(),QL=a("p"),DRo=o("This class cannot be instantiated directly using "),hhe=a("code"),GRo=o("__init__()"),ORo=o(" (throws an error)."),VRo=l(),ct=a("div"),F(WL.$$.fragment),XRo=l(),phe=a("p"),zRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QRo=l(),Yi=a("p"),WRo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),HRo=o("not"),URo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),JRo=o("from_pretrained()"),YRo=o(" to load the model weights."),KRo=l(),F(B1.$$.fragment),ZRo=l(),Ze=a("div"),F(HL.$$.fragment),ePo=l(),uhe=a("p"),oPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rPo=l(),qa=a("p"),tPo=o("The model class to instantiate is selected based on the "),bhe=a("code"),aPo=o("model_type"),nPo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),iPo=o("pretrained_model_name_or_path"),dPo=o(":"),cPo=l(),W=a("ul"),I1=a("li"),The=a("strong"),fPo=o("albert"),mPo=o(" \u2014 "),jO=a("a"),gPo=o("AlbertForMaskedLM"),hPo=o(" (ALBERT model)"),pPo=l(),N1=a("li"),Mhe=a("strong"),_Po=o("bart"),uPo=o(" \u2014 "),DO=a("a"),bPo=o("BartForConditionalGeneration"),vPo=o(" (BART model)"),FPo=l(),q1=a("li"),Ehe=a("strong"),TPo=o("bert"),MPo=o(" \u2014 "),GO=a("a"),EPo=o("BertForMaskedLM"),CPo=o(" (BERT model)"),wPo=l(),j1=a("li"),Che=a("strong"),APo=o("big_bird"),LPo=o(" \u2014 "),OO=a("a"),yPo=o("BigBirdForMaskedLM"),xPo=o(" (BigBird model)"),$Po=l(),D1=a("li"),whe=a("strong"),kPo=o("camembert"),SPo=o(" \u2014 "),VO=a("a"),RPo=o("CamembertForMaskedLM"),PPo=o(" (CamemBERT model)"),BPo=l(),G1=a("li"),Ahe=a("strong"),IPo=o("convbert"),NPo=o(" \u2014 "),XO=a("a"),qPo=o("ConvBertForMaskedLM"),jPo=o(" (ConvBERT model)"),DPo=l(),O1=a("li"),Lhe=a("strong"),GPo=o("data2vec-text"),OPo=o(" \u2014 "),zO=a("a"),VPo=o("Data2VecTextForMaskedLM"),XPo=o(" (Data2VecText model)"),zPo=l(),V1=a("li"),yhe=a("strong"),QPo=o("deberta"),WPo=o(" \u2014 "),QO=a("a"),HPo=o("DebertaForMaskedLM"),UPo=o(" (DeBERTa model)"),JPo=l(),X1=a("li"),xhe=a("strong"),YPo=o("deberta-v2"),KPo=o(" \u2014 "),WO=a("a"),ZPo=o("DebertaV2ForMaskedLM"),eBo=o(" (DeBERTa-v2 model)"),oBo=l(),z1=a("li"),$he=a("strong"),rBo=o("distilbert"),tBo=o(" \u2014 "),HO=a("a"),aBo=o("DistilBertForMaskedLM"),nBo=o(" (DistilBERT model)"),sBo=l(),Q1=a("li"),khe=a("strong"),lBo=o("electra"),iBo=o(" \u2014 "),UO=a("a"),dBo=o("ElectraForMaskedLM"),cBo=o(" (ELECTRA model)"),fBo=l(),W1=a("li"),She=a("strong"),mBo=o("flaubert"),gBo=o(" \u2014 "),JO=a("a"),hBo=o("FlaubertWithLMHeadModel"),pBo=o(" (FlauBERT model)"),_Bo=l(),H1=a("li"),Rhe=a("strong"),uBo=o("fnet"),bBo=o(" \u2014 "),YO=a("a"),vBo=o("FNetForMaskedLM"),FBo=o(" (FNet model)"),TBo=l(),U1=a("li"),Phe=a("strong"),MBo=o("funnel"),EBo=o(" \u2014 "),KO=a("a"),CBo=o("FunnelForMaskedLM"),wBo=o(" (Funnel Transformer model)"),ABo=l(),J1=a("li"),Bhe=a("strong"),LBo=o("ibert"),yBo=o(" \u2014 "),ZO=a("a"),xBo=o("IBertForMaskedLM"),$Bo=o(" (I-BERT model)"),kBo=l(),Y1=a("li"),Ihe=a("strong"),SBo=o("layoutlm"),RBo=o(" \u2014 "),eV=a("a"),PBo=o("LayoutLMForMaskedLM"),BBo=o(" (LayoutLM model)"),IBo=l(),K1=a("li"),Nhe=a("strong"),NBo=o("longformer"),qBo=o(" \u2014 "),oV=a("a"),jBo=o("LongformerForMaskedLM"),DBo=o(" (Longformer model)"),GBo=l(),Z1=a("li"),qhe=a("strong"),OBo=o("luke"),VBo=o(" \u2014 "),rV=a("a"),XBo=o("LukeForMaskedLM"),zBo=o(" (LUKE model)"),QBo=l(),eb=a("li"),jhe=a("strong"),WBo=o("mbart"),HBo=o(" \u2014 "),tV=a("a"),UBo=o("MBartForConditionalGeneration"),JBo=o(" (mBART model)"),YBo=l(),ob=a("li"),Dhe=a("strong"),KBo=o("megatron-bert"),ZBo=o(" \u2014 "),aV=a("a"),eIo=o("MegatronBertForMaskedLM"),oIo=o(" (Megatron-BERT model)"),rIo=l(),rb=a("li"),Ghe=a("strong"),tIo=o("mobilebert"),aIo=o(" \u2014 "),nV=a("a"),nIo=o("MobileBertForMaskedLM"),sIo=o(" (MobileBERT model)"),lIo=l(),tb=a("li"),Ohe=a("strong"),iIo=o("mpnet"),dIo=o(" \u2014 "),sV=a("a"),cIo=o("MPNetForMaskedLM"),fIo=o(" (MPNet model)"),mIo=l(),ab=a("li"),Vhe=a("strong"),gIo=o("mvp"),hIo=o(" \u2014 "),lV=a("a"),pIo=o("MvpForConditionalGeneration"),_Io=o(" (MVP model)"),uIo=l(),nb=a("li"),Xhe=a("strong"),bIo=o("nezha"),vIo=o(" \u2014 "),iV=a("a"),FIo=o("NezhaForMaskedLM"),TIo=o(" (Nezha model)"),MIo=l(),sb=a("li"),zhe=a("strong"),EIo=o("nystromformer"),CIo=o(" \u2014 "),dV=a("a"),wIo=o("NystromformerForMaskedLM"),AIo=o(" (Nystr\xF6mformer model)"),LIo=l(),lb=a("li"),Qhe=a("strong"),yIo=o("perceiver"),xIo=o(" \u2014 "),cV=a("a"),$Io=o("PerceiverForMaskedLM"),kIo=o(" (Perceiver model)"),SIo=l(),ib=a("li"),Whe=a("strong"),RIo=o("qdqbert"),PIo=o(" \u2014 "),fV=a("a"),BIo=o("QDQBertForMaskedLM"),IIo=o(" (QDQBert model)"),NIo=l(),db=a("li"),Hhe=a("strong"),qIo=o("reformer"),jIo=o(" \u2014 "),mV=a("a"),DIo=o("ReformerForMaskedLM"),GIo=o(" (Reformer model)"),OIo=l(),cb=a("li"),Uhe=a("strong"),VIo=o("rembert"),XIo=o(" \u2014 "),gV=a("a"),zIo=o("RemBertForMaskedLM"),QIo=o(" (RemBERT model)"),WIo=l(),fb=a("li"),Jhe=a("strong"),HIo=o("roberta"),UIo=o(" \u2014 "),hV=a("a"),JIo=o("RobertaForMaskedLM"),YIo=o(" (RoBERTa model)"),KIo=l(),mb=a("li"),Yhe=a("strong"),ZIo=o("roformer"),eNo=o(" \u2014 "),pV=a("a"),oNo=o("RoFormerForMaskedLM"),rNo=o(" (RoFormer model)"),tNo=l(),gb=a("li"),Khe=a("strong"),aNo=o("squeezebert"),nNo=o(" \u2014 "),_V=a("a"),sNo=o("SqueezeBertForMaskedLM"),lNo=o(" (SqueezeBERT model)"),iNo=l(),hb=a("li"),Zhe=a("strong"),dNo=o("tapas"),cNo=o(" \u2014 "),uV=a("a"),fNo=o("TapasForMaskedLM"),mNo=o(" (TAPAS model)"),gNo=l(),pb=a("li"),epe=a("strong"),hNo=o("wav2vec2"),pNo=o(" \u2014 "),ope=a("code"),_No=o("Wav2Vec2ForMaskedLM"),uNo=o(" (Wav2Vec2 model)"),bNo=l(),_b=a("li"),rpe=a("strong"),vNo=o("xlm"),FNo=o(" \u2014 "),bV=a("a"),TNo=o("XLMWithLMHeadModel"),MNo=o(" (XLM model)"),ENo=l(),ub=a("li"),tpe=a("strong"),CNo=o("xlm-roberta"),wNo=o(" \u2014 "),vV=a("a"),ANo=o("XLMRobertaForMaskedLM"),LNo=o(" (XLM-RoBERTa model)"),yNo=l(),bb=a("li"),ape=a("strong"),xNo=o("xlm-roberta-xl"),$No=o(" \u2014 "),FV=a("a"),kNo=o("XLMRobertaXLForMaskedLM"),SNo=o(" (XLM-RoBERTa-XL model)"),RNo=l(),vb=a("li"),npe=a("strong"),PNo=o("yoso"),BNo=o(" \u2014 "),TV=a("a"),INo=o("YosoForMaskedLM"),NNo=o(" (YOSO model)"),qNo=l(),Fb=a("p"),jNo=o("The model is set in evaluation mode by default using "),spe=a("code"),DNo=o("model.eval()"),GNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),ONo=o("model.train()"),VNo=l(),F(Tb.$$.fragment),gXe=l(),Ki=a("h2"),Mb=a("a"),ipe=a("span"),F(UL.$$.fragment),XNo=l(),dpe=a("span"),zNo=o("AutoModelForSeq2SeqLM"),hXe=l(),Ro=a("div"),F(JL.$$.fragment),QNo=l(),Zi=a("p"),WNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MV=a("a"),HNo=o("from_pretrained()"),UNo=o(" class method or the "),EV=a("a"),JNo=o("from_config()"),YNo=o(` class
method.`),KNo=l(),YL=a("p"),ZNo=o("This class cannot be instantiated directly using "),cpe=a("code"),eqo=o("__init__()"),oqo=o(" (throws an error)."),rqo=l(),ft=a("div"),F(KL.$$.fragment),tqo=l(),fpe=a("p"),aqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nqo=l(),ed=a("p"),sqo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),lqo=o("not"),iqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),dqo=o("from_pretrained()"),cqo=o(" to load the model weights."),fqo=l(),F(Eb.$$.fragment),mqo=l(),eo=a("div"),F(ZL.$$.fragment),gqo=l(),gpe=a("p"),hqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pqo=l(),ja=a("p"),_qo=o("The model class to instantiate is selected based on the "),hpe=a("code"),uqo=o("model_type"),bqo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),vqo=o("pretrained_model_name_or_path"),Fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),Tqo=o("pretrained_model_name_or_path"),Mqo=o(":"),Eqo=l(),pe=a("ul"),Cb=a("li"),upe=a("strong"),Cqo=o("bart"),wqo=o(" \u2014 "),wV=a("a"),Aqo=o("BartForConditionalGeneration"),Lqo=o(" (BART model)"),yqo=l(),wb=a("li"),bpe=a("strong"),xqo=o("bigbird_pegasus"),$qo=o(" \u2014 "),AV=a("a"),kqo=o("BigBirdPegasusForConditionalGeneration"),Sqo=o(" (BigBird-Pegasus model)"),Rqo=l(),Ab=a("li"),vpe=a("strong"),Pqo=o("blenderbot"),Bqo=o(" \u2014 "),LV=a("a"),Iqo=o("BlenderbotForConditionalGeneration"),Nqo=o(" (Blenderbot model)"),qqo=l(),Lb=a("li"),Fpe=a("strong"),jqo=o("blenderbot-small"),Dqo=o(" \u2014 "),yV=a("a"),Gqo=o("BlenderbotSmallForConditionalGeneration"),Oqo=o(" (BlenderbotSmall model)"),Vqo=l(),yb=a("li"),Tpe=a("strong"),Xqo=o("encoder-decoder"),zqo=o(" \u2014 "),xV=a("a"),Qqo=o("EncoderDecoderModel"),Wqo=o(" (Encoder decoder model)"),Hqo=l(),xb=a("li"),Mpe=a("strong"),Uqo=o("fsmt"),Jqo=o(" \u2014 "),$V=a("a"),Yqo=o("FSMTForConditionalGeneration"),Kqo=o(" (FairSeq Machine-Translation model)"),Zqo=l(),$b=a("li"),Epe=a("strong"),ejo=o("led"),ojo=o(" \u2014 "),kV=a("a"),rjo=o("LEDForConditionalGeneration"),tjo=o(" (LED model)"),ajo=l(),kb=a("li"),Cpe=a("strong"),njo=o("longt5"),sjo=o(" \u2014 "),SV=a("a"),ljo=o("LongT5ForConditionalGeneration"),ijo=o(" (LongT5 model)"),djo=l(),Sb=a("li"),wpe=a("strong"),cjo=o("m2m_100"),fjo=o(" \u2014 "),RV=a("a"),mjo=o("M2M100ForConditionalGeneration"),gjo=o(" (M2M100 model)"),hjo=l(),Rb=a("li"),Ape=a("strong"),pjo=o("marian"),_jo=o(" \u2014 "),PV=a("a"),ujo=o("MarianMTModel"),bjo=o(" (Marian model)"),vjo=l(),Pb=a("li"),Lpe=a("strong"),Fjo=o("mbart"),Tjo=o(" \u2014 "),BV=a("a"),Mjo=o("MBartForConditionalGeneration"),Ejo=o(" (mBART model)"),Cjo=l(),Bb=a("li"),ype=a("strong"),wjo=o("mt5"),Ajo=o(" \u2014 "),IV=a("a"),Ljo=o("MT5ForConditionalGeneration"),yjo=o(" (MT5 model)"),xjo=l(),Ib=a("li"),xpe=a("strong"),$jo=o("mvp"),kjo=o(" \u2014 "),NV=a("a"),Sjo=o("MvpForConditionalGeneration"),Rjo=o(" (MVP model)"),Pjo=l(),Nb=a("li"),$pe=a("strong"),Bjo=o("pegasus"),Ijo=o(" \u2014 "),qV=a("a"),Njo=o("PegasusForConditionalGeneration"),qjo=o(" (Pegasus model)"),jjo=l(),qb=a("li"),kpe=a("strong"),Djo=o("plbart"),Gjo=o(" \u2014 "),jV=a("a"),Ojo=o("PLBartForConditionalGeneration"),Vjo=o(" (PLBart model)"),Xjo=l(),jb=a("li"),Spe=a("strong"),zjo=o("prophetnet"),Qjo=o(" \u2014 "),DV=a("a"),Wjo=o("ProphetNetForConditionalGeneration"),Hjo=o(" (ProphetNet model)"),Ujo=l(),Db=a("li"),Rpe=a("strong"),Jjo=o("t5"),Yjo=o(" \u2014 "),GV=a("a"),Kjo=o("T5ForConditionalGeneration"),Zjo=o(" (T5 model)"),eDo=l(),Gb=a("li"),Ppe=a("strong"),oDo=o("xlm-prophetnet"),rDo=o(" \u2014 "),OV=a("a"),tDo=o("XLMProphetNetForConditionalGeneration"),aDo=o(" (XLM-ProphetNet model)"),nDo=l(),Ob=a("p"),sDo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),lDo=o("model.eval()"),iDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),dDo=o("model.train()"),cDo=l(),F(Vb.$$.fragment),pXe=l(),od=a("h2"),Xb=a("a"),Npe=a("span"),F(ey.$$.fragment),fDo=l(),qpe=a("span"),mDo=o("AutoModelForSequenceClassification"),_Xe=l(),Po=a("div"),F(oy.$$.fragment),gDo=l(),rd=a("p"),hDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VV=a("a"),pDo=o("from_pretrained()"),_Do=o(" class method or the "),XV=a("a"),uDo=o("from_config()"),bDo=o(` class
method.`),vDo=l(),ry=a("p"),FDo=o("This class cannot be instantiated directly using "),jpe=a("code"),TDo=o("__init__()"),MDo=o(" (throws an error)."),EDo=l(),mt=a("div"),F(ty.$$.fragment),CDo=l(),Dpe=a("p"),wDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ADo=l(),td=a("p"),LDo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),yDo=o("not"),xDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),$Do=o("from_pretrained()"),kDo=o(" to load the model weights."),SDo=l(),F(zb.$$.fragment),RDo=l(),oo=a("div"),F(ay.$$.fragment),PDo=l(),Ope=a("p"),BDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IDo=l(),Da=a("p"),NDo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),qDo=o("model_type"),jDo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),DDo=o("pretrained_model_name_or_path"),GDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),ODo=o("pretrained_model_name_or_path"),VDo=o(":"),XDo=l(),N=a("ul"),Qb=a("li"),Qpe=a("strong"),zDo=o("albert"),QDo=o(" \u2014 "),QV=a("a"),WDo=o("AlbertForSequenceClassification"),HDo=o(" (ALBERT model)"),UDo=l(),Wb=a("li"),Wpe=a("strong"),JDo=o("bart"),YDo=o(" \u2014 "),WV=a("a"),KDo=o("BartForSequenceClassification"),ZDo=o(" (BART model)"),eGo=l(),Hb=a("li"),Hpe=a("strong"),oGo=o("bert"),rGo=o(" \u2014 "),HV=a("a"),tGo=o("BertForSequenceClassification"),aGo=o(" (BERT model)"),nGo=l(),Ub=a("li"),Upe=a("strong"),sGo=o("big_bird"),lGo=o(" \u2014 "),UV=a("a"),iGo=o("BigBirdForSequenceClassification"),dGo=o(" (BigBird model)"),cGo=l(),Jb=a("li"),Jpe=a("strong"),fGo=o("bigbird_pegasus"),mGo=o(" \u2014 "),JV=a("a"),gGo=o("BigBirdPegasusForSequenceClassification"),hGo=o(" (BigBird-Pegasus model)"),pGo=l(),Yb=a("li"),Ype=a("strong"),_Go=o("bloom"),uGo=o(" \u2014 "),YV=a("a"),bGo=o("BloomForSequenceClassification"),vGo=o(" (BLOOM model)"),FGo=l(),Kb=a("li"),Kpe=a("strong"),TGo=o("camembert"),MGo=o(" \u2014 "),KV=a("a"),EGo=o("CamembertForSequenceClassification"),CGo=o(" (CamemBERT model)"),wGo=l(),Zb=a("li"),Zpe=a("strong"),AGo=o("canine"),LGo=o(" \u2014 "),ZV=a("a"),yGo=o("CanineForSequenceClassification"),xGo=o(" (CANINE model)"),$Go=l(),ev=a("li"),e_e=a("strong"),kGo=o("convbert"),SGo=o(" \u2014 "),eX=a("a"),RGo=o("ConvBertForSequenceClassification"),PGo=o(" (ConvBERT model)"),BGo=l(),ov=a("li"),o_e=a("strong"),IGo=o("ctrl"),NGo=o(" \u2014 "),oX=a("a"),qGo=o("CTRLForSequenceClassification"),jGo=o(" (CTRL model)"),DGo=l(),rv=a("li"),r_e=a("strong"),GGo=o("data2vec-text"),OGo=o(" \u2014 "),rX=a("a"),VGo=o("Data2VecTextForSequenceClassification"),XGo=o(" (Data2VecText model)"),zGo=l(),tv=a("li"),t_e=a("strong"),QGo=o("deberta"),WGo=o(" \u2014 "),tX=a("a"),HGo=o("DebertaForSequenceClassification"),UGo=o(" (DeBERTa model)"),JGo=l(),av=a("li"),a_e=a("strong"),YGo=o("deberta-v2"),KGo=o(" \u2014 "),aX=a("a"),ZGo=o("DebertaV2ForSequenceClassification"),eOo=o(" (DeBERTa-v2 model)"),oOo=l(),nv=a("li"),n_e=a("strong"),rOo=o("distilbert"),tOo=o(" \u2014 "),nX=a("a"),aOo=o("DistilBertForSequenceClassification"),nOo=o(" (DistilBERT model)"),sOo=l(),sv=a("li"),s_e=a("strong"),lOo=o("electra"),iOo=o(" \u2014 "),sX=a("a"),dOo=o("ElectraForSequenceClassification"),cOo=o(" (ELECTRA model)"),fOo=l(),lv=a("li"),l_e=a("strong"),mOo=o("flaubert"),gOo=o(" \u2014 "),lX=a("a"),hOo=o("FlaubertForSequenceClassification"),pOo=o(" (FlauBERT model)"),_Oo=l(),iv=a("li"),i_e=a("strong"),uOo=o("fnet"),bOo=o(" \u2014 "),iX=a("a"),vOo=o("FNetForSequenceClassification"),FOo=o(" (FNet model)"),TOo=l(),dv=a("li"),d_e=a("strong"),MOo=o("funnel"),EOo=o(" \u2014 "),dX=a("a"),COo=o("FunnelForSequenceClassification"),wOo=o(" (Funnel Transformer model)"),AOo=l(),cv=a("li"),c_e=a("strong"),LOo=o("gpt2"),yOo=o(" \u2014 "),cX=a("a"),xOo=o("GPT2ForSequenceClassification"),$Oo=o(" (OpenAI GPT-2 model)"),kOo=l(),fv=a("li"),f_e=a("strong"),SOo=o("gpt_neo"),ROo=o(" \u2014 "),fX=a("a"),POo=o("GPTNeoForSequenceClassification"),BOo=o(" (GPT Neo model)"),IOo=l(),mv=a("li"),m_e=a("strong"),NOo=o("gptj"),qOo=o(" \u2014 "),mX=a("a"),jOo=o("GPTJForSequenceClassification"),DOo=o(" (GPT-J model)"),GOo=l(),gv=a("li"),g_e=a("strong"),OOo=o("ibert"),VOo=o(" \u2014 "),gX=a("a"),XOo=o("IBertForSequenceClassification"),zOo=o(" (I-BERT model)"),QOo=l(),hv=a("li"),h_e=a("strong"),WOo=o("layoutlm"),HOo=o(" \u2014 "),hX=a("a"),UOo=o("LayoutLMForSequenceClassification"),JOo=o(" (LayoutLM model)"),YOo=l(),pv=a("li"),p_e=a("strong"),KOo=o("layoutlmv2"),ZOo=o(" \u2014 "),pX=a("a"),eVo=o("LayoutLMv2ForSequenceClassification"),oVo=o(" (LayoutLMv2 model)"),rVo=l(),_v=a("li"),__e=a("strong"),tVo=o("layoutlmv3"),aVo=o(" \u2014 "),_X=a("a"),nVo=o("LayoutLMv3ForSequenceClassification"),sVo=o(" (LayoutLMv3 model)"),lVo=l(),uv=a("li"),u_e=a("strong"),iVo=o("led"),dVo=o(" \u2014 "),uX=a("a"),cVo=o("LEDForSequenceClassification"),fVo=o(" (LED model)"),mVo=l(),bv=a("li"),b_e=a("strong"),gVo=o("longformer"),hVo=o(" \u2014 "),bX=a("a"),pVo=o("LongformerForSequenceClassification"),_Vo=o(" (Longformer model)"),uVo=l(),vv=a("li"),v_e=a("strong"),bVo=o("mbart"),vVo=o(" \u2014 "),vX=a("a"),FVo=o("MBartForSequenceClassification"),TVo=o(" (mBART model)"),MVo=l(),Fv=a("li"),F_e=a("strong"),EVo=o("megatron-bert"),CVo=o(" \u2014 "),FX=a("a"),wVo=o("MegatronBertForSequenceClassification"),AVo=o(" (Megatron-BERT model)"),LVo=l(),Tv=a("li"),T_e=a("strong"),yVo=o("mobilebert"),xVo=o(" \u2014 "),TX=a("a"),$Vo=o("MobileBertForSequenceClassification"),kVo=o(" (MobileBERT model)"),SVo=l(),Mv=a("li"),M_e=a("strong"),RVo=o("mpnet"),PVo=o(" \u2014 "),MX=a("a"),BVo=o("MPNetForSequenceClassification"),IVo=o(" (MPNet model)"),NVo=l(),Ev=a("li"),E_e=a("strong"),qVo=o("mvp"),jVo=o(" \u2014 "),EX=a("a"),DVo=o("MvpForSequenceClassification"),GVo=o(" (MVP model)"),OVo=l(),Cv=a("li"),C_e=a("strong"),VVo=o("nezha"),XVo=o(" \u2014 "),CX=a("a"),zVo=o("NezhaForSequenceClassification"),QVo=o(" (Nezha model)"),WVo=l(),wv=a("li"),w_e=a("strong"),HVo=o("nystromformer"),UVo=o(" \u2014 "),wX=a("a"),JVo=o("NystromformerForSequenceClassification"),YVo=o(" (Nystr\xF6mformer model)"),KVo=l(),Av=a("li"),A_e=a("strong"),ZVo=o("openai-gpt"),eXo=o(" \u2014 "),AX=a("a"),oXo=o("OpenAIGPTForSequenceClassification"),rXo=o(" (OpenAI GPT model)"),tXo=l(),Lv=a("li"),L_e=a("strong"),aXo=o("perceiver"),nXo=o(" \u2014 "),LX=a("a"),sXo=o("PerceiverForSequenceClassification"),lXo=o(" (Perceiver model)"),iXo=l(),yv=a("li"),y_e=a("strong"),dXo=o("plbart"),cXo=o(" \u2014 "),yX=a("a"),fXo=o("PLBartForSequenceClassification"),mXo=o(" (PLBart model)"),gXo=l(),xv=a("li"),x_e=a("strong"),hXo=o("qdqbert"),pXo=o(" \u2014 "),xX=a("a"),_Xo=o("QDQBertForSequenceClassification"),uXo=o(" (QDQBert model)"),bXo=l(),$v=a("li"),$_e=a("strong"),vXo=o("reformer"),FXo=o(" \u2014 "),$X=a("a"),TXo=o("ReformerForSequenceClassification"),MXo=o(" (Reformer model)"),EXo=l(),kv=a("li"),k_e=a("strong"),CXo=o("rembert"),wXo=o(" \u2014 "),kX=a("a"),AXo=o("RemBertForSequenceClassification"),LXo=o(" (RemBERT model)"),yXo=l(),Sv=a("li"),S_e=a("strong"),xXo=o("roberta"),$Xo=o(" \u2014 "),SX=a("a"),kXo=o("RobertaForSequenceClassification"),SXo=o(" (RoBERTa model)"),RXo=l(),Rv=a("li"),R_e=a("strong"),PXo=o("roformer"),BXo=o(" \u2014 "),RX=a("a"),IXo=o("RoFormerForSequenceClassification"),NXo=o(" (RoFormer model)"),qXo=l(),Pv=a("li"),P_e=a("strong"),jXo=o("squeezebert"),DXo=o(" \u2014 "),PX=a("a"),GXo=o("SqueezeBertForSequenceClassification"),OXo=o(" (SqueezeBERT model)"),VXo=l(),Bv=a("li"),B_e=a("strong"),XXo=o("tapas"),zXo=o(" \u2014 "),BX=a("a"),QXo=o("TapasForSequenceClassification"),WXo=o(" (TAPAS model)"),HXo=l(),Iv=a("li"),I_e=a("strong"),UXo=o("transfo-xl"),JXo=o(" \u2014 "),IX=a("a"),YXo=o("TransfoXLForSequenceClassification"),KXo=o(" (Transformer-XL model)"),ZXo=l(),Nv=a("li"),N_e=a("strong"),ezo=o("xlm"),ozo=o(" \u2014 "),NX=a("a"),rzo=o("XLMForSequenceClassification"),tzo=o(" (XLM model)"),azo=l(),qv=a("li"),q_e=a("strong"),nzo=o("xlm-roberta"),szo=o(" \u2014 "),qX=a("a"),lzo=o("XLMRobertaForSequenceClassification"),izo=o(" (XLM-RoBERTa model)"),dzo=l(),jv=a("li"),j_e=a("strong"),czo=o("xlm-roberta-xl"),fzo=o(" \u2014 "),jX=a("a"),mzo=o("XLMRobertaXLForSequenceClassification"),gzo=o(" (XLM-RoBERTa-XL model)"),hzo=l(),Dv=a("li"),D_e=a("strong"),pzo=o("xlnet"),_zo=o(" \u2014 "),DX=a("a"),uzo=o("XLNetForSequenceClassification"),bzo=o(" (XLNet model)"),vzo=l(),Gv=a("li"),G_e=a("strong"),Fzo=o("yoso"),Tzo=o(" \u2014 "),GX=a("a"),Mzo=o("YosoForSequenceClassification"),Ezo=o(" (YOSO model)"),Czo=l(),Ov=a("p"),wzo=o("The model is set in evaluation mode by default using "),O_e=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=a("code"),yzo=o("model.train()"),xzo=l(),F(Vv.$$.fragment),uXe=l(),ad=a("h2"),Xv=a("a"),X_e=a("span"),F(ny.$$.fragment),$zo=l(),z_e=a("span"),kzo=o("AutoModelForMultipleChoice"),bXe=l(),Bo=a("div"),F(sy.$$.fragment),Szo=l(),nd=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OX=a("a"),Pzo=o("from_pretrained()"),Bzo=o(" class method or the "),VX=a("a"),Izo=o("from_config()"),Nzo=o(` class
method.`),qzo=l(),ly=a("p"),jzo=o("This class cannot be instantiated directly using "),Q_e=a("code"),Dzo=o("__init__()"),Gzo=o(" (throws an error)."),Ozo=l(),gt=a("div"),F(iy.$$.fragment),Vzo=l(),W_e=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zzo=l(),sd=a("p"),Qzo=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),Wzo=o("not"),Hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),Uzo=o("from_pretrained()"),Jzo=o(" to load the model weights."),Yzo=l(),F(zv.$$.fragment),Kzo=l(),ro=a("div"),F(dy.$$.fragment),Zzo=l(),U_e=a("p"),eQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oQo=l(),Ga=a("p"),rQo=o("The model class to instantiate is selected based on the "),J_e=a("code"),tQo=o("model_type"),aQo=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(":"),dQo=l(),Z=a("ul"),Qv=a("li"),Z_e=a("strong"),cQo=o("albert"),fQo=o(" \u2014 "),zX=a("a"),mQo=o("AlbertForMultipleChoice"),gQo=o(" (ALBERT model)"),hQo=l(),Wv=a("li"),eue=a("strong"),pQo=o("bert"),_Qo=o(" \u2014 "),QX=a("a"),uQo=o("BertForMultipleChoice"),bQo=o(" (BERT model)"),vQo=l(),Hv=a("li"),oue=a("strong"),FQo=o("big_bird"),TQo=o(" \u2014 "),WX=a("a"),MQo=o("BigBirdForMultipleChoice"),EQo=o(" (BigBird model)"),CQo=l(),Uv=a("li"),rue=a("strong"),wQo=o("camembert"),AQo=o(" \u2014 "),HX=a("a"),LQo=o("CamembertForMultipleChoice"),yQo=o(" (CamemBERT model)"),xQo=l(),Jv=a("li"),tue=a("strong"),$Qo=o("canine"),kQo=o(" \u2014 "),UX=a("a"),SQo=o("CanineForMultipleChoice"),RQo=o(" (CANINE model)"),PQo=l(),Yv=a("li"),aue=a("strong"),BQo=o("convbert"),IQo=o(" \u2014 "),JX=a("a"),NQo=o("ConvBertForMultipleChoice"),qQo=o(" (ConvBERT model)"),jQo=l(),Kv=a("li"),nue=a("strong"),DQo=o("data2vec-text"),GQo=o(" \u2014 "),YX=a("a"),OQo=o("Data2VecTextForMultipleChoice"),VQo=o(" (Data2VecText model)"),XQo=l(),Zv=a("li"),sue=a("strong"),zQo=o("deberta-v2"),QQo=o(" \u2014 "),KX=a("a"),WQo=o("DebertaV2ForMultipleChoice"),HQo=o(" (DeBERTa-v2 model)"),UQo=l(),eF=a("li"),lue=a("strong"),JQo=o("distilbert"),YQo=o(" \u2014 "),ZX=a("a"),KQo=o("DistilBertForMultipleChoice"),ZQo=o(" (DistilBERT model)"),eWo=l(),oF=a("li"),iue=a("strong"),oWo=o("electra"),rWo=o(" \u2014 "),ez=a("a"),tWo=o("ElectraForMultipleChoice"),aWo=o(" (ELECTRA model)"),nWo=l(),rF=a("li"),due=a("strong"),sWo=o("flaubert"),lWo=o(" \u2014 "),oz=a("a"),iWo=o("FlaubertForMultipleChoice"),dWo=o(" (FlauBERT model)"),cWo=l(),tF=a("li"),cue=a("strong"),fWo=o("fnet"),mWo=o(" \u2014 "),rz=a("a"),gWo=o("FNetForMultipleChoice"),hWo=o(" (FNet model)"),pWo=l(),aF=a("li"),fue=a("strong"),_Wo=o("funnel"),uWo=o(" \u2014 "),tz=a("a"),bWo=o("FunnelForMultipleChoice"),vWo=o(" (Funnel Transformer model)"),FWo=l(),nF=a("li"),mue=a("strong"),TWo=o("ibert"),MWo=o(" \u2014 "),az=a("a"),EWo=o("IBertForMultipleChoice"),CWo=o(" (I-BERT model)"),wWo=l(),sF=a("li"),gue=a("strong"),AWo=o("longformer"),LWo=o(" \u2014 "),nz=a("a"),yWo=o("LongformerForMultipleChoice"),xWo=o(" (Longformer model)"),$Wo=l(),lF=a("li"),hue=a("strong"),kWo=o("megatron-bert"),SWo=o(" \u2014 "),sz=a("a"),RWo=o("MegatronBertForMultipleChoice"),PWo=o(" (Megatron-BERT model)"),BWo=l(),iF=a("li"),pue=a("strong"),IWo=o("mobilebert"),NWo=o(" \u2014 "),lz=a("a"),qWo=o("MobileBertForMultipleChoice"),jWo=o(" (MobileBERT model)"),DWo=l(),dF=a("li"),_ue=a("strong"),GWo=o("mpnet"),OWo=o(" \u2014 "),iz=a("a"),VWo=o("MPNetForMultipleChoice"),XWo=o(" (MPNet model)"),zWo=l(),cF=a("li"),uue=a("strong"),QWo=o("nezha"),WWo=o(" \u2014 "),dz=a("a"),HWo=o("NezhaForMultipleChoice"),UWo=o(" (Nezha model)"),JWo=l(),fF=a("li"),bue=a("strong"),YWo=o("nystromformer"),KWo=o(" \u2014 "),cz=a("a"),ZWo=o("NystromformerForMultipleChoice"),eHo=o(" (Nystr\xF6mformer model)"),oHo=l(),mF=a("li"),vue=a("strong"),rHo=o("qdqbert"),tHo=o(" \u2014 "),fz=a("a"),aHo=o("QDQBertForMultipleChoice"),nHo=o(" (QDQBert model)"),sHo=l(),gF=a("li"),Fue=a("strong"),lHo=o("rembert"),iHo=o(" \u2014 "),mz=a("a"),dHo=o("RemBertForMultipleChoice"),cHo=o(" (RemBERT model)"),fHo=l(),hF=a("li"),Tue=a("strong"),mHo=o("roberta"),gHo=o(" \u2014 "),gz=a("a"),hHo=o("RobertaForMultipleChoice"),pHo=o(" (RoBERTa model)"),_Ho=l(),pF=a("li"),Mue=a("strong"),uHo=o("roformer"),bHo=o(" \u2014 "),hz=a("a"),vHo=o("RoFormerForMultipleChoice"),FHo=o(" (RoFormer model)"),THo=l(),_F=a("li"),Eue=a("strong"),MHo=o("squeezebert"),EHo=o(" \u2014 "),pz=a("a"),CHo=o("SqueezeBertForMultipleChoice"),wHo=o(" (SqueezeBERT model)"),AHo=l(),uF=a("li"),Cue=a("strong"),LHo=o("xlm"),yHo=o(" \u2014 "),_z=a("a"),xHo=o("XLMForMultipleChoice"),$Ho=o(" (XLM model)"),kHo=l(),bF=a("li"),wue=a("strong"),SHo=o("xlm-roberta"),RHo=o(" \u2014 "),uz=a("a"),PHo=o("XLMRobertaForMultipleChoice"),BHo=o(" (XLM-RoBERTa model)"),IHo=l(),vF=a("li"),Aue=a("strong"),NHo=o("xlm-roberta-xl"),qHo=o(" \u2014 "),bz=a("a"),jHo=o("XLMRobertaXLForMultipleChoice"),DHo=o(" (XLM-RoBERTa-XL model)"),GHo=l(),FF=a("li"),Lue=a("strong"),OHo=o("xlnet"),VHo=o(" \u2014 "),vz=a("a"),XHo=o("XLNetForMultipleChoice"),zHo=o(" (XLNet model)"),QHo=l(),TF=a("li"),yue=a("strong"),WHo=o("yoso"),HHo=o(" \u2014 "),Fz=a("a"),UHo=o("YosoForMultipleChoice"),JHo=o(" (YOSO model)"),YHo=l(),MF=a("p"),KHo=o("The model is set in evaluation mode by default using "),xue=a("code"),ZHo=o("model.eval()"),eUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),oUo=o("model.train()"),rUo=l(),F(EF.$$.fragment),vXe=l(),ld=a("h2"),CF=a("a"),kue=a("span"),F(cy.$$.fragment),tUo=l(),Sue=a("span"),aUo=o("AutoModelForNextSentencePrediction"),FXe=l(),Io=a("div"),F(fy.$$.fragment),nUo=l(),id=a("p"),sUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tz=a("a"),lUo=o("from_pretrained()"),iUo=o(" class method or the "),Mz=a("a"),dUo=o("from_config()"),cUo=o(` class
method.`),fUo=l(),my=a("p"),mUo=o("This class cannot be instantiated directly using "),Rue=a("code"),gUo=o("__init__()"),hUo=o(" (throws an error)."),pUo=l(),ht=a("div"),F(gy.$$.fragment),_Uo=l(),Pue=a("p"),uUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bUo=l(),dd=a("p"),vUo=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),FUo=o("not"),TUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),MUo=o("from_pretrained()"),EUo=o(" to load the model weights."),CUo=l(),F(wF.$$.fragment),wUo=l(),to=a("div"),F(hy.$$.fragment),AUo=l(),Iue=a("p"),LUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yUo=l(),Oa=a("p"),xUo=o("The model class to instantiate is selected based on the "),Nue=a("code"),$Uo=o("model_type"),kUo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),SUo=o("pretrained_model_name_or_path"),RUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),PUo=o("pretrained_model_name_or_path"),BUo=o(":"),IUo=l(),No=a("ul"),AF=a("li"),Due=a("strong"),NUo=o("bert"),qUo=o(" \u2014 "),Cz=a("a"),jUo=o("BertForNextSentencePrediction"),DUo=o(" (BERT model)"),GUo=l(),LF=a("li"),Gue=a("strong"),OUo=o("fnet"),VUo=o(" \u2014 "),wz=a("a"),XUo=o("FNetForNextSentencePrediction"),zUo=o(" (FNet model)"),QUo=l(),yF=a("li"),Oue=a("strong"),WUo=o("megatron-bert"),HUo=o(" \u2014 "),Az=a("a"),UUo=o("MegatronBertForNextSentencePrediction"),JUo=o(" (Megatron-BERT model)"),YUo=l(),xF=a("li"),Vue=a("strong"),KUo=o("mobilebert"),ZUo=o(" \u2014 "),Lz=a("a"),eJo=o("MobileBertForNextSentencePrediction"),oJo=o(" (MobileBERT model)"),rJo=l(),$F=a("li"),Xue=a("strong"),tJo=o("nezha"),aJo=o(" \u2014 "),yz=a("a"),nJo=o("NezhaForNextSentencePrediction"),sJo=o(" (Nezha model)"),lJo=l(),kF=a("li"),zue=a("strong"),iJo=o("qdqbert"),dJo=o(" \u2014 "),xz=a("a"),cJo=o("QDQBertForNextSentencePrediction"),fJo=o(" (QDQBert model)"),mJo=l(),SF=a("p"),gJo=o("The model is set in evaluation mode by default using "),Que=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),_Jo=o("model.train()"),uJo=l(),F(RF.$$.fragment),TXe=l(),cd=a("h2"),PF=a("a"),Hue=a("span"),F(py.$$.fragment),bJo=l(),Uue=a("span"),vJo=o("AutoModelForTokenClassification"),MXe=l(),qo=a("div"),F(_y.$$.fragment),FJo=l(),fd=a("p"),TJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=a("a"),MJo=o("from_pretrained()"),EJo=o(" class method or the "),kz=a("a"),CJo=o("from_config()"),wJo=o(` class
method.`),AJo=l(),uy=a("p"),LJo=o("This class cannot be instantiated directly using "),Jue=a("code"),yJo=o("__init__()"),xJo=o(" (throws an error)."),$Jo=l(),pt=a("div"),F(by.$$.fragment),kJo=l(),Yue=a("p"),SJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RJo=l(),md=a("p"),PJo=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),BJo=o("not"),IJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),NJo=o("from_pretrained()"),qJo=o(" to load the model weights."),jJo=l(),F(BF.$$.fragment),DJo=l(),ao=a("div"),F(vy.$$.fragment),GJo=l(),Zue=a("p"),OJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VJo=l(),Va=a("p"),XJo=o("The model class to instantiate is selected based on the "),e2e=a("code"),zJo=o("model_type"),QJo=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),WJo=o("pretrained_model_name_or_path"),HJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),UJo=o("pretrained_model_name_or_path"),JJo=o(":"),YJo=l(),U=a("ul"),IF=a("li"),t2e=a("strong"),KJo=o("albert"),ZJo=o(" \u2014 "),Rz=a("a"),eYo=o("AlbertForTokenClassification"),oYo=o(" (ALBERT model)"),rYo=l(),NF=a("li"),a2e=a("strong"),tYo=o("bert"),aYo=o(" \u2014 "),Pz=a("a"),nYo=o("BertForTokenClassification"),sYo=o(" (BERT model)"),lYo=l(),qF=a("li"),n2e=a("strong"),iYo=o("big_bird"),dYo=o(" \u2014 "),Bz=a("a"),cYo=o("BigBirdForTokenClassification"),fYo=o(" (BigBird model)"),mYo=l(),jF=a("li"),s2e=a("strong"),gYo=o("bloom"),hYo=o(" \u2014 "),Iz=a("a"),pYo=o("BloomForTokenClassification"),_Yo=o(" (BLOOM model)"),uYo=l(),DF=a("li"),l2e=a("strong"),bYo=o("camembert"),vYo=o(" \u2014 "),Nz=a("a"),FYo=o("CamembertForTokenClassification"),TYo=o(" (CamemBERT model)"),MYo=l(),GF=a("li"),i2e=a("strong"),EYo=o("canine"),CYo=o(" \u2014 "),qz=a("a"),wYo=o("CanineForTokenClassification"),AYo=o(" (CANINE model)"),LYo=l(),OF=a("li"),d2e=a("strong"),yYo=o("convbert"),xYo=o(" \u2014 "),jz=a("a"),$Yo=o("ConvBertForTokenClassification"),kYo=o(" (ConvBERT model)"),SYo=l(),VF=a("li"),c2e=a("strong"),RYo=o("data2vec-text"),PYo=o(" \u2014 "),Dz=a("a"),BYo=o("Data2VecTextForTokenClassification"),IYo=o(" (Data2VecText model)"),NYo=l(),XF=a("li"),f2e=a("strong"),qYo=o("deberta"),jYo=o(" \u2014 "),Gz=a("a"),DYo=o("DebertaForTokenClassification"),GYo=o(" (DeBERTa model)"),OYo=l(),zF=a("li"),m2e=a("strong"),VYo=o("deberta-v2"),XYo=o(" \u2014 "),Oz=a("a"),zYo=o("DebertaV2ForTokenClassification"),QYo=o(" (DeBERTa-v2 model)"),WYo=l(),QF=a("li"),g2e=a("strong"),HYo=o("distilbert"),UYo=o(" \u2014 "),Vz=a("a"),JYo=o("DistilBertForTokenClassification"),YYo=o(" (DistilBERT model)"),KYo=l(),WF=a("li"),h2e=a("strong"),ZYo=o("electra"),eKo=o(" \u2014 "),Xz=a("a"),oKo=o("ElectraForTokenClassification"),rKo=o(" (ELECTRA model)"),tKo=l(),HF=a("li"),p2e=a("strong"),aKo=o("flaubert"),nKo=o(" \u2014 "),zz=a("a"),sKo=o("FlaubertForTokenClassification"),lKo=o(" (FlauBERT model)"),iKo=l(),UF=a("li"),_2e=a("strong"),dKo=o("fnet"),cKo=o(" \u2014 "),Qz=a("a"),fKo=o("FNetForTokenClassification"),mKo=o(" (FNet model)"),gKo=l(),JF=a("li"),u2e=a("strong"),hKo=o("funnel"),pKo=o(" \u2014 "),Wz=a("a"),_Ko=o("FunnelForTokenClassification"),uKo=o(" (Funnel Transformer model)"),bKo=l(),YF=a("li"),b2e=a("strong"),vKo=o("gpt2"),FKo=o(" \u2014 "),Hz=a("a"),TKo=o("GPT2ForTokenClassification"),MKo=o(" (OpenAI GPT-2 model)"),EKo=l(),KF=a("li"),v2e=a("strong"),CKo=o("ibert"),wKo=o(" \u2014 "),Uz=a("a"),AKo=o("IBertForTokenClassification"),LKo=o(" (I-BERT model)"),yKo=l(),ZF=a("li"),F2e=a("strong"),xKo=o("layoutlm"),$Ko=o(" \u2014 "),Jz=a("a"),kKo=o("LayoutLMForTokenClassification"),SKo=o(" (LayoutLM model)"),RKo=l(),e6=a("li"),T2e=a("strong"),PKo=o("layoutlmv2"),BKo=o(" \u2014 "),Yz=a("a"),IKo=o("LayoutLMv2ForTokenClassification"),NKo=o(" (LayoutLMv2 model)"),qKo=l(),o6=a("li"),M2e=a("strong"),jKo=o("layoutlmv3"),DKo=o(" \u2014 "),Kz=a("a"),GKo=o("LayoutLMv3ForTokenClassification"),OKo=o(" (LayoutLMv3 model)"),VKo=l(),r6=a("li"),E2e=a("strong"),XKo=o("longformer"),zKo=o(" \u2014 "),Zz=a("a"),QKo=o("LongformerForTokenClassification"),WKo=o(" (Longformer model)"),HKo=l(),t6=a("li"),C2e=a("strong"),UKo=o("megatron-bert"),JKo=o(" \u2014 "),eQ=a("a"),YKo=o("MegatronBertForTokenClassification"),KKo=o(" (Megatron-BERT model)"),ZKo=l(),a6=a("li"),w2e=a("strong"),eZo=o("mobilebert"),oZo=o(" \u2014 "),oQ=a("a"),rZo=o("MobileBertForTokenClassification"),tZo=o(" (MobileBERT model)"),aZo=l(),n6=a("li"),A2e=a("strong"),nZo=o("mpnet"),sZo=o(" \u2014 "),rQ=a("a"),lZo=o("MPNetForTokenClassification"),iZo=o(" (MPNet model)"),dZo=l(),s6=a("li"),L2e=a("strong"),cZo=o("nezha"),fZo=o(" \u2014 "),tQ=a("a"),mZo=o("NezhaForTokenClassification"),gZo=o(" (Nezha model)"),hZo=l(),l6=a("li"),y2e=a("strong"),pZo=o("nystromformer"),_Zo=o(" \u2014 "),aQ=a("a"),uZo=o("NystromformerForTokenClassification"),bZo=o(" (Nystr\xF6mformer model)"),vZo=l(),i6=a("li"),x2e=a("strong"),FZo=o("qdqbert"),TZo=o(" \u2014 "),nQ=a("a"),MZo=o("QDQBertForTokenClassification"),EZo=o(" (QDQBert model)"),CZo=l(),d6=a("li"),$2e=a("strong"),wZo=o("rembert"),AZo=o(" \u2014 "),sQ=a("a"),LZo=o("RemBertForTokenClassification"),yZo=o(" (RemBERT model)"),xZo=l(),c6=a("li"),k2e=a("strong"),$Zo=o("roberta"),kZo=o(" \u2014 "),lQ=a("a"),SZo=o("RobertaForTokenClassification"),RZo=o(" (RoBERTa model)"),PZo=l(),f6=a("li"),S2e=a("strong"),BZo=o("roformer"),IZo=o(" \u2014 "),iQ=a("a"),NZo=o("RoFormerForTokenClassification"),qZo=o(" (RoFormer model)"),jZo=l(),m6=a("li"),R2e=a("strong"),DZo=o("squeezebert"),GZo=o(" \u2014 "),dQ=a("a"),OZo=o("SqueezeBertForTokenClassification"),VZo=o(" (SqueezeBERT model)"),XZo=l(),g6=a("li"),P2e=a("strong"),zZo=o("xlm"),QZo=o(" \u2014 "),cQ=a("a"),WZo=o("XLMForTokenClassification"),HZo=o(" (XLM model)"),UZo=l(),h6=a("li"),B2e=a("strong"),JZo=o("xlm-roberta"),YZo=o(" \u2014 "),fQ=a("a"),KZo=o("XLMRobertaForTokenClassification"),ZZo=o(" (XLM-RoBERTa model)"),eer=l(),p6=a("li"),I2e=a("strong"),oer=o("xlm-roberta-xl"),rer=o(" \u2014 "),mQ=a("a"),ter=o("XLMRobertaXLForTokenClassification"),aer=o(" (XLM-RoBERTa-XL model)"),ner=l(),_6=a("li"),N2e=a("strong"),ser=o("xlnet"),ler=o(" \u2014 "),gQ=a("a"),ier=o("XLNetForTokenClassification"),der=o(" (XLNet model)"),cer=l(),u6=a("li"),q2e=a("strong"),fer=o("yoso"),mer=o(" \u2014 "),hQ=a("a"),ger=o("YosoForTokenClassification"),her=o(" (YOSO model)"),per=l(),b6=a("p"),_er=o("The model is set in evaluation mode by default using "),j2e=a("code"),uer=o("model.eval()"),ber=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D2e=a("code"),ver=o("model.train()"),Fer=l(),F(v6.$$.fragment),EXe=l(),gd=a("h2"),F6=a("a"),G2e=a("span"),F(Fy.$$.fragment),Ter=l(),O2e=a("span"),Mer=o("AutoModelForQuestionAnswering"),CXe=l(),jo=a("div"),F(Ty.$$.fragment),Eer=l(),hd=a("p"),Cer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=a("a"),wer=o("from_pretrained()"),Aer=o(" class method or the "),_Q=a("a"),Ler=o("from_config()"),yer=o(` class
method.`),xer=l(),My=a("p"),$er=o("This class cannot be instantiated directly using "),V2e=a("code"),ker=o("__init__()"),Ser=o(" (throws an error)."),Rer=l(),_t=a("div"),F(Ey.$$.fragment),Per=l(),X2e=a("p"),Ber=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ier=l(),pd=a("p"),Ner=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),qer=o("not"),jer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Der=o("from_pretrained()"),Ger=o(" to load the model weights."),Oer=l(),F(T6.$$.fragment),Ver=l(),no=a("div"),F(Cy.$$.fragment),Xer=l(),Q2e=a("p"),zer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qer=l(),Xa=a("p"),Wer=o("The model class to instantiate is selected based on the "),W2e=a("code"),Her=o("model_type"),Uer=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(":"),eor=l(),V=a("ul"),M6=a("li"),J2e=a("strong"),oor=o("albert"),ror=o(" \u2014 "),bQ=a("a"),tor=o("AlbertForQuestionAnswering"),aor=o(" (ALBERT model)"),nor=l(),E6=a("li"),Y2e=a("strong"),sor=o("bart"),lor=o(" \u2014 "),vQ=a("a"),ior=o("BartForQuestionAnswering"),dor=o(" (BART model)"),cor=l(),C6=a("li"),K2e=a("strong"),mor=o("bert"),gor=o(" \u2014 "),FQ=a("a"),hor=o("BertForQuestionAnswering"),por=o(" (BERT model)"),_or=l(),w6=a("li"),Z2e=a("strong"),uor=o("big_bird"),bor=o(" \u2014 "),TQ=a("a"),vor=o("BigBirdForQuestionAnswering"),For=o(" (BigBird model)"),Tor=l(),A6=a("li"),e1e=a("strong"),Mor=o("bigbird_pegasus"),Eor=o(" \u2014 "),MQ=a("a"),Cor=o("BigBirdPegasusForQuestionAnswering"),wor=o(" (BigBird-Pegasus model)"),Aor=l(),L6=a("li"),o1e=a("strong"),Lor=o("camembert"),yor=o(" \u2014 "),EQ=a("a"),xor=o("CamembertForQuestionAnswering"),$or=o(" (CamemBERT model)"),kor=l(),y6=a("li"),r1e=a("strong"),Sor=o("canine"),Ror=o(" \u2014 "),CQ=a("a"),Por=o("CanineForQuestionAnswering"),Bor=o(" (CANINE model)"),Ior=l(),x6=a("li"),t1e=a("strong"),Nor=o("convbert"),qor=o(" \u2014 "),wQ=a("a"),jor=o("ConvBertForQuestionAnswering"),Dor=o(" (ConvBERT model)"),Gor=l(),$6=a("li"),a1e=a("strong"),Oor=o("data2vec-text"),Vor=o(" \u2014 "),AQ=a("a"),Xor=o("Data2VecTextForQuestionAnswering"),zor=o(" (Data2VecText model)"),Qor=l(),k6=a("li"),n1e=a("strong"),Wor=o("deberta"),Hor=o(" \u2014 "),LQ=a("a"),Uor=o("DebertaForQuestionAnswering"),Jor=o(" (DeBERTa model)"),Yor=l(),S6=a("li"),s1e=a("strong"),Kor=o("deberta-v2"),Zor=o(" \u2014 "),yQ=a("a"),err=o("DebertaV2ForQuestionAnswering"),orr=o(" (DeBERTa-v2 model)"),rrr=l(),R6=a("li"),l1e=a("strong"),trr=o("distilbert"),arr=o(" \u2014 "),xQ=a("a"),nrr=o("DistilBertForQuestionAnswering"),srr=o(" (DistilBERT model)"),lrr=l(),P6=a("li"),i1e=a("strong"),irr=o("electra"),drr=o(" \u2014 "),$Q=a("a"),crr=o("ElectraForQuestionAnswering"),frr=o(" (ELECTRA model)"),mrr=l(),B6=a("li"),d1e=a("strong"),grr=o("flaubert"),hrr=o(" \u2014 "),kQ=a("a"),prr=o("FlaubertForQuestionAnsweringSimple"),_rr=o(" (FlauBERT model)"),urr=l(),I6=a("li"),c1e=a("strong"),brr=o("fnet"),vrr=o(" \u2014 "),SQ=a("a"),Frr=o("FNetForQuestionAnswering"),Trr=o(" (FNet model)"),Mrr=l(),N6=a("li"),f1e=a("strong"),Err=o("funnel"),Crr=o(" \u2014 "),RQ=a("a"),wrr=o("FunnelForQuestionAnswering"),Arr=o(" (Funnel Transformer model)"),Lrr=l(),q6=a("li"),m1e=a("strong"),yrr=o("gptj"),xrr=o(" \u2014 "),PQ=a("a"),$rr=o("GPTJForQuestionAnswering"),krr=o(" (GPT-J model)"),Srr=l(),j6=a("li"),g1e=a("strong"),Rrr=o("ibert"),Prr=o(" \u2014 "),BQ=a("a"),Brr=o("IBertForQuestionAnswering"),Irr=o(" (I-BERT model)"),Nrr=l(),D6=a("li"),h1e=a("strong"),qrr=o("layoutlmv2"),jrr=o(" \u2014 "),IQ=a("a"),Drr=o("LayoutLMv2ForQuestionAnswering"),Grr=o(" (LayoutLMv2 model)"),Orr=l(),G6=a("li"),p1e=a("strong"),Vrr=o("layoutlmv3"),Xrr=o(" \u2014 "),NQ=a("a"),zrr=o("LayoutLMv3ForQuestionAnswering"),Qrr=o(" (LayoutLMv3 model)"),Wrr=l(),O6=a("li"),_1e=a("strong"),Hrr=o("led"),Urr=o(" \u2014 "),qQ=a("a"),Jrr=o("LEDForQuestionAnswering"),Yrr=o(" (LED model)"),Krr=l(),V6=a("li"),u1e=a("strong"),Zrr=o("longformer"),etr=o(" \u2014 "),jQ=a("a"),otr=o("LongformerForQuestionAnswering"),rtr=o(" (Longformer model)"),ttr=l(),X6=a("li"),b1e=a("strong"),atr=o("lxmert"),ntr=o(" \u2014 "),DQ=a("a"),str=o("LxmertForQuestionAnswering"),ltr=o(" (LXMERT model)"),itr=l(),z6=a("li"),v1e=a("strong"),dtr=o("mbart"),ctr=o(" \u2014 "),GQ=a("a"),ftr=o("MBartForQuestionAnswering"),mtr=o(" (mBART model)"),gtr=l(),Q6=a("li"),F1e=a("strong"),htr=o("megatron-bert"),ptr=o(" \u2014 "),OQ=a("a"),_tr=o("MegatronBertForQuestionAnswering"),utr=o(" (Megatron-BERT model)"),btr=l(),W6=a("li"),T1e=a("strong"),vtr=o("mobilebert"),Ftr=o(" \u2014 "),VQ=a("a"),Ttr=o("MobileBertForQuestionAnswering"),Mtr=o(" (MobileBERT model)"),Etr=l(),H6=a("li"),M1e=a("strong"),Ctr=o("mpnet"),wtr=o(" \u2014 "),XQ=a("a"),Atr=o("MPNetForQuestionAnswering"),Ltr=o(" (MPNet model)"),ytr=l(),U6=a("li"),E1e=a("strong"),xtr=o("mvp"),$tr=o(" \u2014 "),zQ=a("a"),ktr=o("MvpForQuestionAnswering"),Str=o(" (MVP model)"),Rtr=l(),J6=a("li"),C1e=a("strong"),Ptr=o("nezha"),Btr=o(" \u2014 "),QQ=a("a"),Itr=o("NezhaForQuestionAnswering"),Ntr=o(" (Nezha model)"),qtr=l(),Y6=a("li"),w1e=a("strong"),jtr=o("nystromformer"),Dtr=o(" \u2014 "),WQ=a("a"),Gtr=o("NystromformerForQuestionAnswering"),Otr=o(" (Nystr\xF6mformer model)"),Vtr=l(),K6=a("li"),A1e=a("strong"),Xtr=o("qdqbert"),ztr=o(" \u2014 "),HQ=a("a"),Qtr=o("QDQBertForQuestionAnswering"),Wtr=o(" (QDQBert model)"),Htr=l(),Z6=a("li"),L1e=a("strong"),Utr=o("reformer"),Jtr=o(" \u2014 "),UQ=a("a"),Ytr=o("ReformerForQuestionAnswering"),Ktr=o(" (Reformer model)"),Ztr=l(),eT=a("li"),y1e=a("strong"),ear=o("rembert"),oar=o(" \u2014 "),JQ=a("a"),rar=o("RemBertForQuestionAnswering"),tar=o(" (RemBERT model)"),aar=l(),oT=a("li"),x1e=a("strong"),nar=o("roberta"),sar=o(" \u2014 "),YQ=a("a"),lar=o("RobertaForQuestionAnswering"),iar=o(" (RoBERTa model)"),dar=l(),rT=a("li"),$1e=a("strong"),car=o("roformer"),far=o(" \u2014 "),KQ=a("a"),mar=o("RoFormerForQuestionAnswering"),gar=o(" (RoFormer model)"),har=l(),tT=a("li"),k1e=a("strong"),par=o("splinter"),_ar=o(" \u2014 "),ZQ=a("a"),uar=o("SplinterForQuestionAnswering"),bar=o(" (Splinter model)"),Far=l(),aT=a("li"),S1e=a("strong"),Tar=o("squeezebert"),Mar=o(" \u2014 "),eW=a("a"),Ear=o("SqueezeBertForQuestionAnswering"),Car=o(" (SqueezeBERT model)"),war=l(),nT=a("li"),R1e=a("strong"),Aar=o("xlm"),Lar=o(" \u2014 "),oW=a("a"),yar=o("XLMForQuestionAnsweringSimple"),xar=o(" (XLM model)"),$ar=l(),sT=a("li"),P1e=a("strong"),kar=o("xlm-roberta"),Sar=o(" \u2014 "),rW=a("a"),Rar=o("XLMRobertaForQuestionAnswering"),Par=o(" (XLM-RoBERTa model)"),Bar=l(),lT=a("li"),B1e=a("strong"),Iar=o("xlm-roberta-xl"),Nar=o(" \u2014 "),tW=a("a"),qar=o("XLMRobertaXLForQuestionAnswering"),jar=o(" (XLM-RoBERTa-XL model)"),Dar=l(),iT=a("li"),I1e=a("strong"),Gar=o("xlnet"),Oar=o(" \u2014 "),aW=a("a"),Var=o("XLNetForQuestionAnsweringSimple"),Xar=o(" (XLNet model)"),zar=l(),dT=a("li"),N1e=a("strong"),Qar=o("yoso"),War=o(" \u2014 "),nW=a("a"),Har=o("YosoForQuestionAnswering"),Uar=o(" (YOSO model)"),Jar=l(),cT=a("p"),Yar=o("The model is set in evaluation mode by default using "),q1e=a("code"),Kar=o("model.eval()"),Zar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),enr=o("model.train()"),onr=l(),F(fT.$$.fragment),wXe=l(),_d=a("h2"),mT=a("a"),D1e=a("span"),F(wy.$$.fragment),rnr=l(),G1e=a("span"),tnr=o("AutoModelForTableQuestionAnswering"),AXe=l(),Do=a("div"),F(Ay.$$.fragment),anr=l(),ud=a("p"),nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sW=a("a"),snr=o("from_pretrained()"),lnr=o(" class method or the "),lW=a("a"),inr=o("from_config()"),dnr=o(` class
method.`),cnr=l(),Ly=a("p"),fnr=o("This class cannot be instantiated directly using "),O1e=a("code"),mnr=o("__init__()"),gnr=o(" (throws an error)."),hnr=l(),ut=a("div"),F(yy.$$.fragment),pnr=l(),V1e=a("p"),_nr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),unr=l(),bd=a("p"),bnr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),vnr=o("not"),Fnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Tnr=o("from_pretrained()"),Mnr=o(" to load the model weights."),Enr=l(),F(gT.$$.fragment),Cnr=l(),so=a("div"),F(xy.$$.fragment),wnr=l(),z1e=a("p"),Anr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lnr=l(),za=a("p"),ynr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),xnr=o("model_type"),$nr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(":"),Bnr=l(),U1e=a("ul"),hT=a("li"),J1e=a("strong"),Inr=o("tapas"),Nnr=o(" \u2014 "),dW=a("a"),qnr=o("TapasForQuestionAnswering"),jnr=o(" (TAPAS model)"),Dnr=l(),pT=a("p"),Gnr=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Onr=o("model.eval()"),Vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Xnr=o("model.train()"),znr=l(),F(_T.$$.fragment),LXe=l(),vd=a("h2"),uT=a("a"),Z1e=a("span"),F($y.$$.fragment),Qnr=l(),ebe=a("span"),Wnr=o("AutoModelForImageClassification"),yXe=l(),Go=a("div"),F(ky.$$.fragment),Hnr=l(),Fd=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cW=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" class method or the "),fW=a("a"),Knr=o("from_config()"),Znr=o(` class
method.`),esr=l(),Sy=a("p"),osr=o("This class cannot be instantiated directly using "),obe=a("code"),rsr=o("__init__()"),tsr=o(" (throws an error)."),asr=l(),bt=a("div"),F(Ry.$$.fragment),nsr=l(),rbe=a("p"),ssr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lsr=l(),Td=a("p"),isr=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),dsr=o("not"),csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),fsr=o("from_pretrained()"),msr=o(" to load the model weights."),gsr=l(),F(bT.$$.fragment),hsr=l(),lo=a("div"),F(Py.$$.fragment),psr=l(),abe=a("p"),_sr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),usr=l(),Qa=a("p"),bsr=o("The model class to instantiate is selected based on the "),nbe=a("code"),vsr=o("model_type"),Fsr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(":"),wsr=l(),ve=a("ul"),vT=a("li"),ibe=a("strong"),Asr=o("beit"),Lsr=o(" \u2014 "),gW=a("a"),ysr=o("BeitForImageClassification"),xsr=o(" (BEiT model)"),$sr=l(),FT=a("li"),dbe=a("strong"),ksr=o("convnext"),Ssr=o(" \u2014 "),hW=a("a"),Rsr=o("ConvNextForImageClassification"),Psr=o(" (ConvNeXT model)"),Bsr=l(),TT=a("li"),cbe=a("strong"),Isr=o("cvt"),Nsr=o(" \u2014 "),pW=a("a"),qsr=o("CvtForImageClassification"),jsr=o(" (CvT model)"),Dsr=l(),MT=a("li"),fbe=a("strong"),Gsr=o("data2vec-vision"),Osr=o(" \u2014 "),_W=a("a"),Vsr=o("Data2VecVisionForImageClassification"),Xsr=o(" (Data2VecVision model)"),zsr=l(),Ws=a("li"),mbe=a("strong"),Qsr=o("deit"),Wsr=o(" \u2014 "),uW=a("a"),Hsr=o("DeiTForImageClassification"),Usr=o(" or "),bW=a("a"),Jsr=o("DeiTForImageClassificationWithTeacher"),Ysr=o(" (DeiT model)"),Ksr=l(),ET=a("li"),gbe=a("strong"),Zsr=o("imagegpt"),elr=o(" \u2014 "),vW=a("a"),olr=o("ImageGPTForImageClassification"),rlr=o(" (ImageGPT model)"),tlr=l(),Hs=a("li"),hbe=a("strong"),alr=o("levit"),nlr=o(" \u2014 "),FW=a("a"),slr=o("LevitForImageClassification"),llr=o(" or "),TW=a("a"),ilr=o("LevitForImageClassificationWithTeacher"),dlr=o(" (LeViT model)"),clr=l(),CT=a("li"),pbe=a("strong"),flr=o("mobilevit"),mlr=o(" \u2014 "),MW=a("a"),glr=o("MobileViTForImageClassification"),hlr=o(" (MobileViT model)"),plr=l(),vt=a("li"),_be=a("strong"),_lr=o("perceiver"),ulr=o(" \u2014 "),EW=a("a"),blr=o("PerceiverForImageClassificationLearned"),vlr=o(" or "),CW=a("a"),Flr=o("PerceiverForImageClassificationFourier"),Tlr=o(" or "),wW=a("a"),Mlr=o("PerceiverForImageClassificationConvProcessing"),Elr=o(" (Perceiver model)"),Clr=l(),wT=a("li"),ube=a("strong"),wlr=o("poolformer"),Alr=o(" \u2014 "),AW=a("a"),Llr=o("PoolFormerForImageClassification"),ylr=o(" (PoolFormer model)"),xlr=l(),AT=a("li"),bbe=a("strong"),$lr=o("regnet"),klr=o(" \u2014 "),LW=a("a"),Slr=o("RegNetForImageClassification"),Rlr=o(" (RegNet model)"),Plr=l(),LT=a("li"),vbe=a("strong"),Blr=o("resnet"),Ilr=o(" \u2014 "),yW=a("a"),Nlr=o("ResNetForImageClassification"),qlr=o(" (ResNet model)"),jlr=l(),yT=a("li"),Fbe=a("strong"),Dlr=o("segformer"),Glr=o(" \u2014 "),xW=a("a"),Olr=o("SegformerForImageClassification"),Vlr=o(" (SegFormer model)"),Xlr=l(),xT=a("li"),Tbe=a("strong"),zlr=o("swin"),Qlr=o(" \u2014 "),$W=a("a"),Wlr=o("SwinForImageClassification"),Hlr=o(" (Swin Transformer model)"),Ulr=l(),$T=a("li"),Mbe=a("strong"),Jlr=o("van"),Ylr=o(" \u2014 "),kW=a("a"),Klr=o("VanForImageClassification"),Zlr=o(" (VAN model)"),eir=l(),kT=a("li"),Ebe=a("strong"),oir=o("vit"),rir=o(" \u2014 "),SW=a("a"),tir=o("ViTForImageClassification"),air=o(" (ViT model)"),nir=l(),ST=a("p"),sir=o("The model is set in evaluation mode by default using "),Cbe=a("code"),lir=o("model.eval()"),iir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=a("code"),dir=o("model.train()"),cir=l(),F(RT.$$.fragment),xXe=l(),Md=a("h2"),PT=a("a"),Abe=a("span"),F(By.$$.fragment),fir=l(),Lbe=a("span"),mir=o("AutoModelForVision2Seq"),$Xe=l(),Oo=a("div"),F(Iy.$$.fragment),gir=l(),Ed=a("p"),hir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=a("a"),pir=o("from_pretrained()"),_ir=o(" class method or the "),PW=a("a"),uir=o("from_config()"),bir=o(` class
method.`),vir=l(),Ny=a("p"),Fir=o("This class cannot be instantiated directly using "),ybe=a("code"),Tir=o("__init__()"),Mir=o(" (throws an error)."),Eir=l(),Ft=a("div"),F(qy.$$.fragment),Cir=l(),xbe=a("p"),wir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Air=l(),Cd=a("p"),Lir=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),yir=o("not"),xir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),$ir=o("from_pretrained()"),kir=o(" to load the model weights."),Sir=l(),F(BT.$$.fragment),Rir=l(),io=a("div"),F(jy.$$.fragment),Pir=l(),kbe=a("p"),Bir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iir=l(),Wa=a("p"),Nir=o("The model class to instantiate is selected based on the "),Sbe=a("code"),qir=o("model_type"),jir=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Dir=o("pretrained_model_name_or_path"),Gir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),Oir=o("pretrained_model_name_or_path"),Vir=o(":"),Xir=l(),Bbe=a("ul"),IT=a("li"),Ibe=a("strong"),zir=o("vision-encoder-decoder"),Qir=o(" \u2014 "),IW=a("a"),Wir=o("VisionEncoderDecoderModel"),Hir=o(" (Vision Encoder decoder model)"),Uir=l(),NT=a("p"),Jir=o("The model is set in evaluation mode by default using "),Nbe=a("code"),Yir=o("model.eval()"),Kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),Zir=o("model.train()"),edr=l(),F(qT.$$.fragment),kXe=l(),wd=a("h2"),jT=a("a"),jbe=a("span"),F(Dy.$$.fragment),odr=l(),Dbe=a("span"),rdr=o("AutoModelForVisualQuestionAnswering"),SXe=l(),Vo=a("div"),F(Gy.$$.fragment),tdr=l(),Ad=a("p"),adr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NW=a("a"),ndr=o("from_pretrained()"),sdr=o(" class method or the "),qW=a("a"),ldr=o("from_config()"),idr=o(` class
method.`),ddr=l(),Oy=a("p"),cdr=o("This class cannot be instantiated directly using "),Gbe=a("code"),fdr=o("__init__()"),mdr=o(" (throws an error)."),gdr=l(),Tt=a("div"),F(Vy.$$.fragment),hdr=l(),Obe=a("p"),pdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),_dr=l(),Ld=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),bdr=o("not"),vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Fdr=o("from_pretrained()"),Tdr=o(" to load the model weights."),Mdr=l(),F(DT.$$.fragment),Edr=l(),co=a("div"),F(Xy.$$.fragment),Cdr=l(),Xbe=a("p"),wdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Adr=l(),Ha=a("p"),Ldr=o("The model class to instantiate is selected based on the "),zbe=a("code"),ydr=o("model_type"),xdr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),$dr=o("pretrained_model_name_or_path"),kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),Sdr=o("pretrained_model_name_or_path"),Rdr=o(":"),Pdr=l(),Hbe=a("ul"),GT=a("li"),Ube=a("strong"),Bdr=o("vilt"),Idr=o(" \u2014 "),DW=a("a"),Ndr=o("ViltForQuestionAnswering"),qdr=o(" (ViLT model)"),jdr=l(),OT=a("p"),Ddr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),Gdr=o("model.eval()"),Odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),Vdr=o("model.train()"),Xdr=l(),F(VT.$$.fragment),RXe=l(),yd=a("h2"),XT=a("a"),Kbe=a("span"),F(zy.$$.fragment),zdr=l(),Zbe=a("span"),Qdr=o("AutoModelForAudioClassification"),PXe=l(),Xo=a("div"),F(Qy.$$.fragment),Wdr=l(),xd=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" class method or the "),OW=a("a"),Ydr=o("from_config()"),Kdr=o(` class
method.`),Zdr=l(),Wy=a("p"),ecr=o("This class cannot be instantiated directly using "),eve=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),Mt=a("div"),F(Hy.$$.fragment),acr=l(),ove=a("p"),ncr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),scr=l(),$d=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),mcr=l(),F(zT.$$.fragment),gcr=l(),fo=a("div"),F(Uy.$$.fragment),hcr=l(),tve=a("p"),pcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),_cr=l(),Ua=a("p"),ucr=o("The model class to instantiate is selected based on the "),ave=a("code"),bcr=o("model_type"),vcr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(":"),Ccr=l(),Pe=a("ul"),QT=a("li"),lve=a("strong"),wcr=o("data2vec-audio"),Acr=o(" \u2014 "),XW=a("a"),Lcr=o("Data2VecAudioForSequenceClassification"),ycr=o(" (Data2VecAudio model)"),xcr=l(),WT=a("li"),ive=a("strong"),$cr=o("hubert"),kcr=o(" \u2014 "),zW=a("a"),Scr=o("HubertForSequenceClassification"),Rcr=o(" (Hubert model)"),Pcr=l(),HT=a("li"),dve=a("strong"),Bcr=o("sew"),Icr=o(" \u2014 "),QW=a("a"),Ncr=o("SEWForSequenceClassification"),qcr=o(" (SEW model)"),jcr=l(),UT=a("li"),cve=a("strong"),Dcr=o("sew-d"),Gcr=o(" \u2014 "),WW=a("a"),Ocr=o("SEWDForSequenceClassification"),Vcr=o(" (SEW-D model)"),Xcr=l(),JT=a("li"),fve=a("strong"),zcr=o("unispeech"),Qcr=o(" \u2014 "),HW=a("a"),Wcr=o("UniSpeechForSequenceClassification"),Hcr=o(" (UniSpeech model)"),Ucr=l(),YT=a("li"),mve=a("strong"),Jcr=o("unispeech-sat"),Ycr=o(" \u2014 "),UW=a("a"),Kcr=o("UniSpeechSatForSequenceClassification"),Zcr=o(" (UniSpeechSat model)"),efr=l(),KT=a("li"),gve=a("strong"),ofr=o("wav2vec2"),rfr=o(" \u2014 "),JW=a("a"),tfr=o("Wav2Vec2ForSequenceClassification"),afr=o(" (Wav2Vec2 model)"),nfr=l(),ZT=a("li"),hve=a("strong"),sfr=o("wav2vec2-conformer"),lfr=o(" \u2014 "),YW=a("a"),ifr=o("Wav2Vec2ConformerForSequenceClassification"),dfr=o(" (Wav2Vec2-Conformer model)"),cfr=l(),e7=a("li"),pve=a("strong"),ffr=o("wavlm"),mfr=o(" \u2014 "),KW=a("a"),gfr=o("WavLMForSequenceClassification"),hfr=o(" (WavLM model)"),pfr=l(),o7=a("p"),_fr=o("The model is set in evaluation mode by default using "),_ve=a("code"),ufr=o("model.eval()"),bfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uve=a("code"),vfr=o("model.train()"),Ffr=l(),F(r7.$$.fragment),BXe=l(),kd=a("h2"),t7=a("a"),bve=a("span"),F(Jy.$$.fragment),Tfr=l(),vve=a("span"),Mfr=o("AutoModelForAudioFrameClassification"),IXe=l(),zo=a("div"),F(Yy.$$.fragment),Efr=l(),Sd=a("p"),Cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=a("a"),wfr=o("from_pretrained()"),Afr=o(" class method or the "),eH=a("a"),Lfr=o("from_config()"),yfr=o(` class
method.`),xfr=l(),Ky=a("p"),$fr=o("This class cannot be instantiated directly using "),Fve=a("code"),kfr=o("__init__()"),Sfr=o(" (throws an error)."),Rfr=l(),Et=a("div"),F(Zy.$$.fragment),Pfr=l(),Tve=a("p"),Bfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ifr=l(),Rd=a("p"),Nfr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),qfr=o("not"),jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),Dfr=o("from_pretrained()"),Gfr=o(" to load the model weights."),Ofr=l(),F(a7.$$.fragment),Vfr=l(),mo=a("div"),F(e9.$$.fragment),Xfr=l(),Eve=a("p"),zfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Qfr=l(),Ja=a("p"),Wfr=o("The model class to instantiate is selected based on the "),Cve=a("code"),Hfr=o("model_type"),Ufr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(":"),emr=l(),et=a("ul"),n7=a("li"),Lve=a("strong"),omr=o("data2vec-audio"),rmr=o(" \u2014 "),rH=a("a"),tmr=o("Data2VecAudioForAudioFrameClassification"),amr=o(" (Data2VecAudio model)"),nmr=l(),s7=a("li"),yve=a("strong"),smr=o("unispeech-sat"),lmr=o(" \u2014 "),tH=a("a"),imr=o("UniSpeechSatForAudioFrameClassification"),dmr=o(" (UniSpeechSat model)"),cmr=l(),l7=a("li"),xve=a("strong"),fmr=o("wav2vec2"),mmr=o(" \u2014 "),aH=a("a"),gmr=o("Wav2Vec2ForAudioFrameClassification"),hmr=o(" (Wav2Vec2 model)"),pmr=l(),i7=a("li"),$ve=a("strong"),_mr=o("wav2vec2-conformer"),umr=o(" \u2014 "),nH=a("a"),bmr=o("Wav2Vec2ConformerForAudioFrameClassification"),vmr=o(" (Wav2Vec2-Conformer model)"),Fmr=l(),d7=a("li"),kve=a("strong"),Tmr=o("wavlm"),Mmr=o(" \u2014 "),sH=a("a"),Emr=o("WavLMForAudioFrameClassification"),Cmr=o(" (WavLM model)"),wmr=l(),c7=a("p"),Amr=o("The model is set in evaluation mode by default using "),Sve=a("code"),Lmr=o("model.eval()"),ymr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=a("code"),xmr=o("model.train()"),$mr=l(),F(f7.$$.fragment),NXe=l(),Pd=a("h2"),m7=a("a"),Pve=a("span"),F(o9.$$.fragment),kmr=l(),Bve=a("span"),Smr=o("AutoModelForCTC"),qXe=l(),Qo=a("div"),F(r9.$$.fragment),Rmr=l(),Bd=a("p"),Pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lH=a("a"),Bmr=o("from_pretrained()"),Imr=o(" class method or the "),iH=a("a"),Nmr=o("from_config()"),qmr=o(` class
method.`),jmr=l(),t9=a("p"),Dmr=o("This class cannot be instantiated directly using "),Ive=a("code"),Gmr=o("__init__()"),Omr=o(" (throws an error)."),Vmr=l(),Ct=a("div"),F(a9.$$.fragment),Xmr=l(),Nve=a("p"),zmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Qmr=l(),Id=a("p"),Wmr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),Hmr=o("not"),Umr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),Jmr=o("from_pretrained()"),Ymr=o(" to load the model weights."),Kmr=l(),F(g7.$$.fragment),Zmr=l(),go=a("div"),F(n9.$$.fragment),egr=l(),jve=a("p"),ogr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rgr=l(),Ya=a("p"),tgr=o("The model class to instantiate is selected based on the "),Dve=a("code"),agr=o("model_type"),ngr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(":"),cgr=l(),Le=a("ul"),h7=a("li"),Vve=a("strong"),fgr=o("data2vec-audio"),mgr=o(" \u2014 "),cH=a("a"),ggr=o("Data2VecAudioForCTC"),hgr=o(" (Data2VecAudio model)"),pgr=l(),p7=a("li"),Xve=a("strong"),_gr=o("hubert"),ugr=o(" \u2014 "),fH=a("a"),bgr=o("HubertForCTC"),vgr=o(" (Hubert model)"),Fgr=l(),_7=a("li"),zve=a("strong"),Tgr=o("mctct"),Mgr=o(" \u2014 "),mH=a("a"),Egr=o("MCTCTForCTC"),Cgr=o(" (M-CTC-T model)"),wgr=l(),u7=a("li"),Qve=a("strong"),Agr=o("sew"),Lgr=o(" \u2014 "),gH=a("a"),ygr=o("SEWForCTC"),xgr=o(" (SEW model)"),$gr=l(),b7=a("li"),Wve=a("strong"),kgr=o("sew-d"),Sgr=o(" \u2014 "),hH=a("a"),Rgr=o("SEWDForCTC"),Pgr=o(" (SEW-D model)"),Bgr=l(),v7=a("li"),Hve=a("strong"),Igr=o("unispeech"),Ngr=o(" \u2014 "),pH=a("a"),qgr=o("UniSpeechForCTC"),jgr=o(" (UniSpeech model)"),Dgr=l(),F7=a("li"),Uve=a("strong"),Ggr=o("unispeech-sat"),Ogr=o(" \u2014 "),_H=a("a"),Vgr=o("UniSpeechSatForCTC"),Xgr=o(" (UniSpeechSat model)"),zgr=l(),T7=a("li"),Jve=a("strong"),Qgr=o("wav2vec2"),Wgr=o(" \u2014 "),uH=a("a"),Hgr=o("Wav2Vec2ForCTC"),Ugr=o(" (Wav2Vec2 model)"),Jgr=l(),M7=a("li"),Yve=a("strong"),Ygr=o("wav2vec2-conformer"),Kgr=o(" \u2014 "),bH=a("a"),Zgr=o("Wav2Vec2ConformerForCTC"),ehr=o(" (Wav2Vec2-Conformer model)"),ohr=l(),E7=a("li"),Kve=a("strong"),rhr=o("wavlm"),thr=o(" \u2014 "),vH=a("a"),ahr=o("WavLMForCTC"),nhr=o(" (WavLM model)"),shr=l(),C7=a("p"),lhr=o("The model is set in evaluation mode by default using "),Zve=a("code"),ihr=o("model.eval()"),dhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=a("code"),chr=o("model.train()"),fhr=l(),F(w7.$$.fragment),jXe=l(),Nd=a("h2"),A7=a("a"),oFe=a("span"),F(s9.$$.fragment),mhr=l(),rFe=a("span"),ghr=o("AutoModelForSpeechSeq2Seq"),DXe=l(),Wo=a("div"),F(l9.$$.fragment),hhr=l(),qd=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FH=a("a"),_hr=o("from_pretrained()"),uhr=o(" class method or the "),TH=a("a"),bhr=o("from_config()"),vhr=o(` class
method.`),Fhr=l(),i9=a("p"),Thr=o("This class cannot be instantiated directly using "),tFe=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),Chr=l(),wt=a("div"),F(d9.$$.fragment),whr=l(),aFe=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Lhr=l(),jd=a("p"),yhr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),xhr=o("not"),$hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),khr=o("from_pretrained()"),Shr=o(" to load the model weights."),Rhr=l(),F(L7.$$.fragment),Phr=l(),ho=a("div"),F(c9.$$.fragment),Bhr=l(),sFe=a("p"),Ihr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Nhr=l(),Ka=a("p"),qhr=o("The model class to instantiate is selected based on the "),lFe=a("code"),jhr=o("model_type"),Dhr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(":"),zhr=l(),f9=a("ul"),y7=a("li"),cFe=a("strong"),Qhr=o("speech-encoder-decoder"),Whr=o(" \u2014 "),EH=a("a"),Hhr=o("SpeechEncoderDecoderModel"),Uhr=o(" (Speech Encoder decoder model)"),Jhr=l(),x7=a("li"),fFe=a("strong"),Yhr=o("speech_to_text"),Khr=o(" \u2014 "),CH=a("a"),Zhr=o("Speech2TextForConditionalGeneration"),epr=o(" (Speech2Text model)"),opr=l(),$7=a("p"),rpr=o("The model is set in evaluation mode by default using "),mFe=a("code"),tpr=o("model.eval()"),apr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),npr=o("model.train()"),spr=l(),F(k7.$$.fragment),GXe=l(),Dd=a("h2"),S7=a("a"),hFe=a("span"),F(m9.$$.fragment),lpr=l(),pFe=a("span"),ipr=o("AutoModelForAudioXVector"),OXe=l(),Ho=a("div"),F(g9.$$.fragment),dpr=l(),Gd=a("p"),cpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wH=a("a"),fpr=o("from_pretrained()"),mpr=o(" class method or the "),AH=a("a"),gpr=o("from_config()"),hpr=o(` class
method.`),ppr=l(),h9=a("p"),_pr=o("This class cannot be instantiated directly using "),_Fe=a("code"),upr=o("__init__()"),bpr=o(" (throws an error)."),vpr=l(),At=a("div"),F(p9.$$.fragment),Fpr=l(),uFe=a("p"),Tpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Mpr=l(),Od=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),Cpr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),Apr=o("from_pretrained()"),Lpr=o(" to load the model weights."),ypr=l(),F(R7.$$.fragment),xpr=l(),po=a("div"),F(_9.$$.fragment),$pr=l(),vFe=a("p"),kpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Spr=l(),Za=a("p"),Rpr=o("The model class to instantiate is selected based on the "),FFe=a("code"),Ppr=o("model_type"),Bpr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),Ipr=o("pretrained_model_name_or_path"),Npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),qpr=o("pretrained_model_name_or_path"),jpr=o(":"),Dpr=l(),ot=a("ul"),P7=a("li"),EFe=a("strong"),Gpr=o("data2vec-audio"),Opr=o(" \u2014 "),yH=a("a"),Vpr=o("Data2VecAudioForXVector"),Xpr=o(" (Data2VecAudio model)"),zpr=l(),B7=a("li"),CFe=a("strong"),Qpr=o("unispeech-sat"),Wpr=o(" \u2014 "),xH=a("a"),Hpr=o("UniSpeechSatForXVector"),Upr=o(" (UniSpeechSat model)"),Jpr=l(),I7=a("li"),wFe=a("strong"),Ypr=o("wav2vec2"),Kpr=o(" \u2014 "),$H=a("a"),Zpr=o("Wav2Vec2ForXVector"),e_r=o(" (Wav2Vec2 model)"),o_r=l(),N7=a("li"),AFe=a("strong"),r_r=o("wav2vec2-conformer"),t_r=o(" \u2014 "),kH=a("a"),a_r=o("Wav2Vec2ConformerForXVector"),n_r=o(" (Wav2Vec2-Conformer model)"),s_r=l(),q7=a("li"),LFe=a("strong"),l_r=o("wavlm"),i_r=o(" \u2014 "),SH=a("a"),d_r=o("WavLMForXVector"),c_r=o(" (WavLM model)"),f_r=l(),j7=a("p"),m_r=o("The model is set in evaluation mode by default using "),yFe=a("code"),g_r=o("model.eval()"),h_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),p_r=o("model.train()"),__r=l(),F(D7.$$.fragment),VXe=l(),Vd=a("h2"),G7=a("a"),$Fe=a("span"),F(u9.$$.fragment),u_r=l(),kFe=a("span"),b_r=o("AutoModelForMaskedImageModeling"),XXe=l(),Uo=a("div"),F(b9.$$.fragment),v_r=l(),Xd=a("p"),F_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RH=a("a"),T_r=o("from_pretrained()"),M_r=o(" class method or the "),PH=a("a"),E_r=o("from_config()"),C_r=o(` class
method.`),w_r=l(),v9=a("p"),A_r=o("This class cannot be instantiated directly using "),SFe=a("code"),L_r=o("__init__()"),y_r=o(" (throws an error)."),x_r=l(),Lt=a("div"),F(F9.$$.fragment),$_r=l(),RFe=a("p"),k_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),S_r=l(),zd=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),P_r=o("not"),B_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),I_r=o("from_pretrained()"),N_r=o(" to load the model weights."),q_r=l(),F(O7.$$.fragment),j_r=l(),_o=a("div"),F(T9.$$.fragment),D_r=l(),BFe=a("p"),G_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),O_r=l(),en=a("p"),V_r=o("The model class to instantiate is selected based on the "),IFe=a("code"),X_r=o("model_type"),z_r=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),Q_r=o("pretrained_model_name_or_path"),W_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),H_r=o("pretrained_model_name_or_path"),U_r=o(":"),J_r=l(),Qd=a("ul"),V7=a("li"),jFe=a("strong"),Y_r=o("deit"),K_r=o(" \u2014 "),IH=a("a"),Z_r=o("DeiTForMaskedImageModeling"),eur=o(" (DeiT model)"),our=l(),X7=a("li"),DFe=a("strong"),rur=o("swin"),tur=o(" \u2014 "),NH=a("a"),aur=o("SwinForMaskedImageModeling"),nur=o(" (Swin Transformer model)"),sur=l(),z7=a("li"),GFe=a("strong"),lur=o("vit"),iur=o(" \u2014 "),qH=a("a"),dur=o("ViTForMaskedImageModeling"),cur=o(" (ViT model)"),fur=l(),Q7=a("p"),mur=o("The model is set in evaluation mode by default using "),OFe=a("code"),gur=o("model.eval()"),hur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),pur=o("model.train()"),_ur=l(),F(W7.$$.fragment),zXe=l(),Wd=a("h2"),H7=a("a"),XFe=a("span"),F(M9.$$.fragment),uur=l(),zFe=a("span"),bur=o("AutoModelForObjectDetection"),QXe=l(),Jo=a("div"),F(E9.$$.fragment),vur=l(),Hd=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jH=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),DH=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),C9=a("p"),Aur=o("This class cannot be instantiated directly using "),QFe=a("code"),Lur=o("__init__()"),yur=o(" (throws an error)."),xur=l(),yt=a("div"),F(w9.$$.fragment),$ur=l(),WFe=a("p"),kur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Sur=l(),Ud=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),Pur=o("not"),Bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),Iur=o("from_pretrained()"),Nur=o(" to load the model weights."),qur=l(),F(U7.$$.fragment),jur=l(),uo=a("div"),F(A9.$$.fragment),Dur=l(),UFe=a("p"),Gur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Our=l(),on=a("p"),Vur=o("The model class to instantiate is selected based on the "),JFe=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),L9=a("ul"),J7=a("li"),ZFe=a("strong"),Yur=o("detr"),Kur=o(" \u2014 "),OH=a("a"),Zur=o("DetrForObjectDetection"),e2r=o(" (DETR model)"),o2r=l(),Y7=a("li"),e6e=a("strong"),r2r=o("yolos"),t2r=o(" \u2014 "),VH=a("a"),a2r=o("YolosForObjectDetection"),n2r=o(" (YOLOS model)"),s2r=l(),K7=a("p"),l2r=o("The model is set in evaluation mode by default using "),o6e=a("code"),i2r=o("model.eval()"),d2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r6e=a("code"),c2r=o("model.train()"),f2r=l(),F(Z7.$$.fragment),WXe=l(),Jd=a("h2"),e8=a("a"),t6e=a("span"),F(y9.$$.fragment),m2r=l(),a6e=a("span"),g2r=o("AutoModelForImageSegmentation"),HXe=l(),Yo=a("div"),F(x9.$$.fragment),h2r=l(),Yd=a("p"),p2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XH=a("a"),_2r=o("from_pretrained()"),u2r=o(" class method or the "),zH=a("a"),b2r=o("from_config()"),v2r=o(` class
method.`),F2r=l(),$9=a("p"),T2r=o("This class cannot be instantiated directly using "),n6e=a("code"),M2r=o("__init__()"),E2r=o(" (throws an error)."),C2r=l(),xt=a("div"),F(k9.$$.fragment),w2r=l(),s6e=a("p"),A2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),L2r=l(),Kd=a("p"),y2r=o(`Note:
Loading a model from its configuration file does `),l6e=a("strong"),x2r=o("not"),$2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),k2r=o("from_pretrained()"),S2r=o(" to load the model weights."),R2r=l(),F(o8.$$.fragment),P2r=l(),bo=a("div"),F(S9.$$.fragment),B2r=l(),i6e=a("p"),I2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),N2r=l(),rn=a("p"),q2r=o("The model class to instantiate is selected based on the "),d6e=a("code"),j2r=o("model_type"),D2r=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),V2r=o("pretrained_model_name_or_path"),X2r=o(":"),z2r=l(),m6e=a("ul"),r8=a("li"),g6e=a("strong"),Q2r=o("detr"),W2r=o(" \u2014 "),WH=a("a"),H2r=o("DetrForSegmentation"),U2r=o(" (DETR model)"),J2r=l(),t8=a("p"),Y2r=o("The model is set in evaluation mode by default using "),h6e=a("code"),K2r=o("model.eval()"),Z2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p6e=a("code"),e1r=o("model.train()"),o1r=l(),F(a8.$$.fragment),UXe=l(),Zd=a("h2"),n8=a("a"),_6e=a("span"),F(R9.$$.fragment),r1r=l(),u6e=a("span"),t1r=o("AutoModelForSemanticSegmentation"),JXe=l(),Ko=a("div"),F(P9.$$.fragment),a1r=l(),ec=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HH=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),UH=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),B9=a("p"),f1r=o("This class cannot be instantiated directly using "),b6e=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),$t=a("div"),F(I9.$$.fragment),p1r=l(),v6e=a("p"),_1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),u1r=l(),oc=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(s8.$$.fragment),C1r=l(),vo=a("div"),F(N9.$$.fragment),w1r=l(),T6e=a("p"),A1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),L1r=l(),tn=a("p"),y1r=o("The model class to instantiate is selected based on the "),M6e=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),R1r=o("pretrained_model_name_or_path"),P1r=o(":"),B1r=l(),rt=a("ul"),l8=a("li"),w6e=a("strong"),I1r=o("beit"),N1r=o(" \u2014 "),YH=a("a"),q1r=o("BeitForSemanticSegmentation"),j1r=o(" (BEiT model)"),D1r=l(),i8=a("li"),A6e=a("strong"),G1r=o("data2vec-vision"),O1r=o(" \u2014 "),KH=a("a"),V1r=o("Data2VecVisionForSemanticSegmentation"),X1r=o(" (Data2VecVision model)"),z1r=l(),d8=a("li"),L6e=a("strong"),Q1r=o("dpt"),W1r=o(" \u2014 "),ZH=a("a"),H1r=o("DPTForSemanticSegmentation"),U1r=o(" (DPT model)"),J1r=l(),c8=a("li"),y6e=a("strong"),Y1r=o("mobilevit"),K1r=o(" \u2014 "),eU=a("a"),Z1r=o("MobileViTForSemanticSegmentation"),ebr=o(" (MobileViT model)"),obr=l(),f8=a("li"),x6e=a("strong"),rbr=o("segformer"),tbr=o(" \u2014 "),oU=a("a"),abr=o("SegformerForSemanticSegmentation"),nbr=o(" (SegFormer model)"),sbr=l(),m8=a("p"),lbr=o("The model is set in evaluation mode by default using "),$6e=a("code"),ibr=o("model.eval()"),dbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k6e=a("code"),cbr=o("model.train()"),fbr=l(),F(g8.$$.fragment),YXe=l(),rc=a("h2"),h8=a("a"),S6e=a("span"),F(q9.$$.fragment),mbr=l(),R6e=a("span"),gbr=o("AutoModelForInstanceSegmentation"),KXe=l(),Zo=a("div"),F(j9.$$.fragment),hbr=l(),tc=a("p"),pbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rU=a("a"),_br=o("from_pretrained()"),ubr=o(" class method or the "),tU=a("a"),bbr=o("from_config()"),vbr=o(` class
method.`),Fbr=l(),D9=a("p"),Tbr=o("This class cannot be instantiated directly using "),P6e=a("code"),Mbr=o("__init__()"),Ebr=o(" (throws an error)."),Cbr=l(),kt=a("div"),F(G9.$$.fragment),wbr=l(),B6e=a("p"),Abr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Lbr=l(),ac=a("p"),ybr=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),xbr=o("not"),$br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),kbr=o("from_pretrained()"),Sbr=o(" to load the model weights."),Rbr=l(),F(p8.$$.fragment),Pbr=l(),Fo=a("div"),F(O9.$$.fragment),Bbr=l(),N6e=a("p"),Ibr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Nbr=l(),an=a("p"),qbr=o("The model class to instantiate is selected based on the "),q6e=a("code"),jbr=o("model_type"),Dbr=o(` property of the config object (either
passed as an argument or loaded from `),j6e=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=a("code"),Vbr=o("pretrained_model_name_or_path"),Xbr=o(":"),zbr=l(),G6e=a("ul"),_8=a("li"),O6e=a("strong"),Qbr=o("maskformer"),Wbr=o(" \u2014 "),nU=a("a"),Hbr=o("MaskFormerForInstanceSegmentation"),Ubr=o(" (MaskFormer model)"),Jbr=l(),u8=a("p"),Ybr=o("The model is set in evaluation mode by default using "),V6e=a("code"),Kbr=o("model.eval()"),Zbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X6e=a("code"),evr=o("model.train()"),ovr=l(),F(b8.$$.fragment),ZXe=l(),nc=a("h2"),v8=a("a"),z6e=a("span"),F(V9.$$.fragment),rvr=l(),Q6e=a("span"),tvr=o("TFAutoModel"),eze=l(),er=a("div"),F(X9.$$.fragment),avr=l(),sc=a("p"),nvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sU=a("a"),svr=o("from_pretrained()"),lvr=o(" class method or the "),lU=a("a"),ivr=o("from_config()"),dvr=o(` class
method.`),cvr=l(),z9=a("p"),fvr=o("This class cannot be instantiated directly using "),W6e=a("code"),mvr=o("__init__()"),gvr=o(" (throws an error)."),hvr=l(),St=a("div"),F(Q9.$$.fragment),pvr=l(),H6e=a("p"),_vr=o("Instantiates one of the base model classes of the library from a configuration."),uvr=l(),lc=a("p"),bvr=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),vvr=o("not"),Fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),Tvr=o("from_pretrained()"),Mvr=o(" to load the model weights."),Evr=l(),F(F8.$$.fragment),Cvr=l(),yr=a("div"),F(W9.$$.fragment),wvr=l(),J6e=a("p"),Avr=o("Instantiate one of the base model classes of the library from a pretrained model."),Lvr=l(),nn=a("p"),yvr=o("The model class to instantiate is selected based on the "),Y6e=a("code"),xvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),kvr=o("pretrained_model_name_or_path"),Svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),Rvr=o("pretrained_model_name_or_path"),Pvr=o(":"),Bvr=l(),j=a("ul"),T8=a("li"),eTe=a("strong"),Ivr=o("albert"),Nvr=o(" \u2014 "),dU=a("a"),qvr=o("TFAlbertModel"),jvr=o(" (ALBERT model)"),Dvr=l(),M8=a("li"),oTe=a("strong"),Gvr=o("bart"),Ovr=o(" \u2014 "),cU=a("a"),Vvr=o("TFBartModel"),Xvr=o(" (BART model)"),zvr=l(),E8=a("li"),rTe=a("strong"),Qvr=o("bert"),Wvr=o(" \u2014 "),fU=a("a"),Hvr=o("TFBertModel"),Uvr=o(" (BERT model)"),Jvr=l(),C8=a("li"),tTe=a("strong"),Yvr=o("blenderbot"),Kvr=o(" \u2014 "),mU=a("a"),Zvr=o("TFBlenderbotModel"),eFr=o(" (Blenderbot model)"),oFr=l(),w8=a("li"),aTe=a("strong"),rFr=o("blenderbot-small"),tFr=o(" \u2014 "),gU=a("a"),aFr=o("TFBlenderbotSmallModel"),nFr=o(" (BlenderbotSmall model)"),sFr=l(),A8=a("li"),nTe=a("strong"),lFr=o("camembert"),iFr=o(" \u2014 "),hU=a("a"),dFr=o("TFCamembertModel"),cFr=o(" (CamemBERT model)"),fFr=l(),L8=a("li"),sTe=a("strong"),mFr=o("clip"),gFr=o(" \u2014 "),pU=a("a"),hFr=o("TFCLIPModel"),pFr=o(" (CLIP model)"),_Fr=l(),y8=a("li"),lTe=a("strong"),uFr=o("convbert"),bFr=o(" \u2014 "),_U=a("a"),vFr=o("TFConvBertModel"),FFr=o(" (ConvBERT model)"),TFr=l(),x8=a("li"),iTe=a("strong"),MFr=o("convnext"),EFr=o(" \u2014 "),uU=a("a"),CFr=o("TFConvNextModel"),wFr=o(" (ConvNeXT model)"),AFr=l(),$8=a("li"),dTe=a("strong"),LFr=o("ctrl"),yFr=o(" \u2014 "),bU=a("a"),xFr=o("TFCTRLModel"),$Fr=o(" (CTRL model)"),kFr=l(),k8=a("li"),cTe=a("strong"),SFr=o("data2vec-vision"),RFr=o(" \u2014 "),vU=a("a"),PFr=o("TFData2VecVisionModel"),BFr=o(" (Data2VecVision model)"),IFr=l(),S8=a("li"),fTe=a("strong"),NFr=o("deberta"),qFr=o(" \u2014 "),FU=a("a"),jFr=o("TFDebertaModel"),DFr=o(" (DeBERTa model)"),GFr=l(),R8=a("li"),mTe=a("strong"),OFr=o("deberta-v2"),VFr=o(" \u2014 "),TU=a("a"),XFr=o("TFDebertaV2Model"),zFr=o(" (DeBERTa-v2 model)"),QFr=l(),P8=a("li"),gTe=a("strong"),WFr=o("distilbert"),HFr=o(" \u2014 "),MU=a("a"),UFr=o("TFDistilBertModel"),JFr=o(" (DistilBERT model)"),YFr=l(),B8=a("li"),hTe=a("strong"),KFr=o("dpr"),ZFr=o(" \u2014 "),EU=a("a"),e6r=o("TFDPRQuestionEncoder"),o6r=o(" (DPR model)"),r6r=l(),I8=a("li"),pTe=a("strong"),t6r=o("electra"),a6r=o(" \u2014 "),CU=a("a"),n6r=o("TFElectraModel"),s6r=o(" (ELECTRA model)"),l6r=l(),N8=a("li"),_Te=a("strong"),i6r=o("flaubert"),d6r=o(" \u2014 "),wU=a("a"),c6r=o("TFFlaubertModel"),f6r=o(" (FlauBERT model)"),m6r=l(),Us=a("li"),uTe=a("strong"),g6r=o("funnel"),h6r=o(" \u2014 "),AU=a("a"),p6r=o("TFFunnelModel"),_6r=o(" or "),LU=a("a"),u6r=o("TFFunnelBaseModel"),b6r=o(" (Funnel Transformer model)"),v6r=l(),q8=a("li"),bTe=a("strong"),F6r=o("gpt2"),T6r=o(" \u2014 "),yU=a("a"),M6r=o("TFGPT2Model"),E6r=o(" (OpenAI GPT-2 model)"),C6r=l(),j8=a("li"),vTe=a("strong"),w6r=o("gptj"),A6r=o(" \u2014 "),xU=a("a"),L6r=o("TFGPTJModel"),y6r=o(" (GPT-J model)"),x6r=l(),D8=a("li"),FTe=a("strong"),$6r=o("hubert"),k6r=o(" \u2014 "),$U=a("a"),S6r=o("TFHubertModel"),R6r=o(" (Hubert model)"),P6r=l(),G8=a("li"),TTe=a("strong"),B6r=o("layoutlm"),I6r=o(" \u2014 "),kU=a("a"),N6r=o("TFLayoutLMModel"),q6r=o(" (LayoutLM model)"),j6r=l(),O8=a("li"),MTe=a("strong"),D6r=o("led"),G6r=o(" \u2014 "),SU=a("a"),O6r=o("TFLEDModel"),V6r=o(" (LED model)"),X6r=l(),V8=a("li"),ETe=a("strong"),z6r=o("longformer"),Q6r=o(" \u2014 "),RU=a("a"),W6r=o("TFLongformerModel"),H6r=o(" (Longformer model)"),U6r=l(),X8=a("li"),CTe=a("strong"),J6r=o("lxmert"),Y6r=o(" \u2014 "),PU=a("a"),K6r=o("TFLxmertModel"),Z6r=o(" (LXMERT model)"),eTr=l(),z8=a("li"),wTe=a("strong"),oTr=o("marian"),rTr=o(" \u2014 "),BU=a("a"),tTr=o("TFMarianModel"),aTr=o(" (Marian model)"),nTr=l(),Q8=a("li"),ATe=a("strong"),sTr=o("mbart"),lTr=o(" \u2014 "),IU=a("a"),iTr=o("TFMBartModel"),dTr=o(" (mBART model)"),cTr=l(),W8=a("li"),LTe=a("strong"),fTr=o("mobilebert"),mTr=o(" \u2014 "),NU=a("a"),gTr=o("TFMobileBertModel"),hTr=o(" (MobileBERT model)"),pTr=l(),H8=a("li"),yTe=a("strong"),_Tr=o("mpnet"),uTr=o(" \u2014 "),qU=a("a"),bTr=o("TFMPNetModel"),vTr=o(" (MPNet model)"),FTr=l(),U8=a("li"),xTe=a("strong"),TTr=o("mt5"),MTr=o(" \u2014 "),jU=a("a"),ETr=o("TFMT5Model"),CTr=o(" (MT5 model)"),wTr=l(),J8=a("li"),$Te=a("strong"),ATr=o("openai-gpt"),LTr=o(" \u2014 "),DU=a("a"),yTr=o("TFOpenAIGPTModel"),xTr=o(" (OpenAI GPT model)"),$Tr=l(),Y8=a("li"),kTe=a("strong"),kTr=o("opt"),STr=o(" \u2014 "),GU=a("a"),RTr=o("TFOPTModel"),PTr=o(" (OPT model)"),BTr=l(),K8=a("li"),STe=a("strong"),ITr=o("pegasus"),NTr=o(" \u2014 "),OU=a("a"),qTr=o("TFPegasusModel"),jTr=o(" (Pegasus model)"),DTr=l(),Z8=a("li"),RTe=a("strong"),GTr=o("regnet"),OTr=o(" \u2014 "),VU=a("a"),VTr=o("TFRegNetModel"),XTr=o(" (RegNet model)"),zTr=l(),eM=a("li"),PTe=a("strong"),QTr=o("rembert"),WTr=o(" \u2014 "),XU=a("a"),HTr=o("TFRemBertModel"),UTr=o(" (RemBERT model)"),JTr=l(),oM=a("li"),BTe=a("strong"),YTr=o("roberta"),KTr=o(" \u2014 "),zU=a("a"),ZTr=o("TFRobertaModel"),e7r=o(" (RoBERTa model)"),o7r=l(),rM=a("li"),ITe=a("strong"),r7r=o("roformer"),t7r=o(" \u2014 "),QU=a("a"),a7r=o("TFRoFormerModel"),n7r=o(" (RoFormer model)"),s7r=l(),tM=a("li"),NTe=a("strong"),l7r=o("speech_to_text"),i7r=o(" \u2014 "),WU=a("a"),d7r=o("TFSpeech2TextModel"),c7r=o(" (Speech2Text model)"),f7r=l(),aM=a("li"),qTe=a("strong"),m7r=o("swin"),g7r=o(" \u2014 "),HU=a("a"),h7r=o("TFSwinModel"),p7r=o(" (Swin Transformer model)"),_7r=l(),nM=a("li"),jTe=a("strong"),u7r=o("t5"),b7r=o(" \u2014 "),UU=a("a"),v7r=o("TFT5Model"),F7r=o(" (T5 model)"),T7r=l(),sM=a("li"),DTe=a("strong"),M7r=o("tapas"),E7r=o(" \u2014 "),JU=a("a"),C7r=o("TFTapasModel"),w7r=o(" (TAPAS model)"),A7r=l(),lM=a("li"),GTe=a("strong"),L7r=o("transfo-xl"),y7r=o(" \u2014 "),YU=a("a"),x7r=o("TFTransfoXLModel"),$7r=o(" (Transformer-XL model)"),k7r=l(),iM=a("li"),OTe=a("strong"),S7r=o("vit"),R7r=o(" \u2014 "),KU=a("a"),P7r=o("TFViTModel"),B7r=o(" (ViT model)"),I7r=l(),dM=a("li"),VTe=a("strong"),N7r=o("vit_mae"),q7r=o(" \u2014 "),ZU=a("a"),j7r=o("TFViTMAEModel"),D7r=o(" (ViTMAE model)"),G7r=l(),cM=a("li"),XTe=a("strong"),O7r=o("wav2vec2"),V7r=o(" \u2014 "),eJ=a("a"),X7r=o("TFWav2Vec2Model"),z7r=o(" (Wav2Vec2 model)"),Q7r=l(),fM=a("li"),zTe=a("strong"),W7r=o("xlm"),H7r=o(" \u2014 "),oJ=a("a"),U7r=o("TFXLMModel"),J7r=o(" (XLM model)"),Y7r=l(),mM=a("li"),QTe=a("strong"),K7r=o("xlm-roberta"),Z7r=o(" \u2014 "),rJ=a("a"),e8r=o("TFXLMRobertaModel"),o8r=o(" (XLM-RoBERTa model)"),r8r=l(),gM=a("li"),WTe=a("strong"),t8r=o("xlnet"),a8r=o(" \u2014 "),tJ=a("a"),n8r=o("TFXLNetModel"),s8r=o(" (XLNet model)"),l8r=l(),F(hM.$$.fragment),oze=l(),ic=a("h2"),pM=a("a"),HTe=a("span"),F(H9.$$.fragment),i8r=l(),UTe=a("span"),d8r=o("TFAutoModelForPreTraining"),rze=l(),or=a("div"),F(U9.$$.fragment),c8r=l(),dc=a("p"),f8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aJ=a("a"),m8r=o("from_pretrained()"),g8r=o(" class method or the "),nJ=a("a"),h8r=o("from_config()"),p8r=o(` class
method.`),_8r=l(),J9=a("p"),u8r=o("This class cannot be instantiated directly using "),JTe=a("code"),b8r=o("__init__()"),v8r=o(" (throws an error)."),F8r=l(),Rt=a("div"),F(Y9.$$.fragment),T8r=l(),YTe=a("p"),M8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E8r=l(),cc=a("p"),C8r=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),w8r=o("not"),A8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),L8r=o("from_pretrained()"),y8r=o(" to load the model weights."),x8r=l(),F(_M.$$.fragment),$8r=l(),xr=a("div"),F(K9.$$.fragment),k8r=l(),ZTe=a("p"),S8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R8r=l(),sn=a("p"),P8r=o("The model class to instantiate is selected based on the "),e7e=a("code"),B8r=o("model_type"),I8r=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),N8r=o("pretrained_model_name_or_path"),q8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),j8r=o("pretrained_model_name_or_path"),D8r=o(":"),G8r=l(),se=a("ul"),uM=a("li"),t7e=a("strong"),O8r=o("albert"),V8r=o(" \u2014 "),lJ=a("a"),X8r=o("TFAlbertForPreTraining"),z8r=o(" (ALBERT model)"),Q8r=l(),bM=a("li"),a7e=a("strong"),W8r=o("bart"),H8r=o(" \u2014 "),iJ=a("a"),U8r=o("TFBartForConditionalGeneration"),J8r=o(" (BART model)"),Y8r=l(),vM=a("li"),n7e=a("strong"),K8r=o("bert"),Z8r=o(" \u2014 "),dJ=a("a"),eMr=o("TFBertForPreTraining"),oMr=o(" (BERT model)"),rMr=l(),FM=a("li"),s7e=a("strong"),tMr=o("camembert"),aMr=o(" \u2014 "),cJ=a("a"),nMr=o("TFCamembertForMaskedLM"),sMr=o(" (CamemBERT model)"),lMr=l(),TM=a("li"),l7e=a("strong"),iMr=o("ctrl"),dMr=o(" \u2014 "),fJ=a("a"),cMr=o("TFCTRLLMHeadModel"),fMr=o(" (CTRL model)"),mMr=l(),MM=a("li"),i7e=a("strong"),gMr=o("distilbert"),hMr=o(" \u2014 "),mJ=a("a"),pMr=o("TFDistilBertForMaskedLM"),_Mr=o(" (DistilBERT model)"),uMr=l(),EM=a("li"),d7e=a("strong"),bMr=o("electra"),vMr=o(" \u2014 "),gJ=a("a"),FMr=o("TFElectraForPreTraining"),TMr=o(" (ELECTRA model)"),MMr=l(),CM=a("li"),c7e=a("strong"),EMr=o("flaubert"),CMr=o(" \u2014 "),hJ=a("a"),wMr=o("TFFlaubertWithLMHeadModel"),AMr=o(" (FlauBERT model)"),LMr=l(),wM=a("li"),f7e=a("strong"),yMr=o("funnel"),xMr=o(" \u2014 "),pJ=a("a"),$Mr=o("TFFunnelForPreTraining"),kMr=o(" (Funnel Transformer model)"),SMr=l(),AM=a("li"),m7e=a("strong"),RMr=o("gpt2"),PMr=o(" \u2014 "),_J=a("a"),BMr=o("TFGPT2LMHeadModel"),IMr=o(" (OpenAI GPT-2 model)"),NMr=l(),LM=a("li"),g7e=a("strong"),qMr=o("layoutlm"),jMr=o(" \u2014 "),uJ=a("a"),DMr=o("TFLayoutLMForMaskedLM"),GMr=o(" (LayoutLM model)"),OMr=l(),yM=a("li"),h7e=a("strong"),VMr=o("lxmert"),XMr=o(" \u2014 "),bJ=a("a"),zMr=o("TFLxmertForPreTraining"),QMr=o(" (LXMERT model)"),WMr=l(),xM=a("li"),p7e=a("strong"),HMr=o("mobilebert"),UMr=o(" \u2014 "),vJ=a("a"),JMr=o("TFMobileBertForPreTraining"),YMr=o(" (MobileBERT model)"),KMr=l(),$M=a("li"),_7e=a("strong"),ZMr=o("mpnet"),e4r=o(" \u2014 "),FJ=a("a"),o4r=o("TFMPNetForMaskedLM"),r4r=o(" (MPNet model)"),t4r=l(),kM=a("li"),u7e=a("strong"),a4r=o("openai-gpt"),n4r=o(" \u2014 "),TJ=a("a"),s4r=o("TFOpenAIGPTLMHeadModel"),l4r=o(" (OpenAI GPT model)"),i4r=l(),SM=a("li"),b7e=a("strong"),d4r=o("roberta"),c4r=o(" \u2014 "),MJ=a("a"),f4r=o("TFRobertaForMaskedLM"),m4r=o(" (RoBERTa model)"),g4r=l(),RM=a("li"),v7e=a("strong"),h4r=o("t5"),p4r=o(" \u2014 "),EJ=a("a"),_4r=o("TFT5ForConditionalGeneration"),u4r=o(" (T5 model)"),b4r=l(),PM=a("li"),F7e=a("strong"),v4r=o("tapas"),F4r=o(" \u2014 "),CJ=a("a"),T4r=o("TFTapasForMaskedLM"),M4r=o(" (TAPAS model)"),E4r=l(),BM=a("li"),T7e=a("strong"),C4r=o("transfo-xl"),w4r=o(" \u2014 "),wJ=a("a"),A4r=o("TFTransfoXLLMHeadModel"),L4r=o(" (Transformer-XL model)"),y4r=l(),IM=a("li"),M7e=a("strong"),x4r=o("vit_mae"),$4r=o(" \u2014 "),AJ=a("a"),k4r=o("TFViTMAEForPreTraining"),S4r=o(" (ViTMAE model)"),R4r=l(),NM=a("li"),E7e=a("strong"),P4r=o("xlm"),B4r=o(" \u2014 "),LJ=a("a"),I4r=o("TFXLMWithLMHeadModel"),N4r=o(" (XLM model)"),q4r=l(),qM=a("li"),C7e=a("strong"),j4r=o("xlm-roberta"),D4r=o(" \u2014 "),yJ=a("a"),G4r=o("TFXLMRobertaForMaskedLM"),O4r=o(" (XLM-RoBERTa model)"),V4r=l(),jM=a("li"),w7e=a("strong"),X4r=o("xlnet"),z4r=o(" \u2014 "),xJ=a("a"),Q4r=o("TFXLNetLMHeadModel"),W4r=o(" (XLNet model)"),H4r=l(),F(DM.$$.fragment),tze=l(),fc=a("h2"),GM=a("a"),A7e=a("span"),F(Z9.$$.fragment),U4r=l(),L7e=a("span"),J4r=o("TFAutoModelForCausalLM"),aze=l(),rr=a("div"),F(ex.$$.fragment),Y4r=l(),mc=a("p"),K4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$J=a("a"),Z4r=o("from_pretrained()"),eEr=o(" class method or the "),kJ=a("a"),oEr=o("from_config()"),rEr=o(` class
method.`),tEr=l(),ox=a("p"),aEr=o("This class cannot be instantiated directly using "),y7e=a("code"),nEr=o("__init__()"),sEr=o(" (throws an error)."),lEr=l(),Pt=a("div"),F(rx.$$.fragment),iEr=l(),x7e=a("p"),dEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cEr=l(),gc=a("p"),fEr=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),mEr=o("not"),gEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),hEr=o("from_pretrained()"),pEr=o(" to load the model weights."),_Er=l(),F(OM.$$.fragment),uEr=l(),$r=a("div"),F(tx.$$.fragment),bEr=l(),k7e=a("p"),vEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FEr=l(),ln=a("p"),TEr=o("The model class to instantiate is selected based on the "),S7e=a("code"),MEr=o("model_type"),EEr=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),CEr=o("pretrained_model_name_or_path"),wEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),AEr=o("pretrained_model_name_or_path"),LEr=o(":"),yEr=l(),Me=a("ul"),VM=a("li"),B7e=a("strong"),xEr=o("bert"),$Er=o(" \u2014 "),RJ=a("a"),kEr=o("TFBertLMHeadModel"),SEr=o(" (BERT model)"),REr=l(),XM=a("li"),I7e=a("strong"),PEr=o("camembert"),BEr=o(" \u2014 "),PJ=a("a"),IEr=o("TFCamembertForCausalLM"),NEr=o(" (CamemBERT model)"),qEr=l(),zM=a("li"),N7e=a("strong"),jEr=o("ctrl"),DEr=o(" \u2014 "),BJ=a("a"),GEr=o("TFCTRLLMHeadModel"),OEr=o(" (CTRL model)"),VEr=l(),QM=a("li"),q7e=a("strong"),XEr=o("gpt2"),zEr=o(" \u2014 "),IJ=a("a"),QEr=o("TFGPT2LMHeadModel"),WEr=o(" (OpenAI GPT-2 model)"),HEr=l(),WM=a("li"),j7e=a("strong"),UEr=o("gptj"),JEr=o(" \u2014 "),NJ=a("a"),YEr=o("TFGPTJForCausalLM"),KEr=o(" (GPT-J model)"),ZEr=l(),HM=a("li"),D7e=a("strong"),eCr=o("openai-gpt"),oCr=o(" \u2014 "),qJ=a("a"),rCr=o("TFOpenAIGPTLMHeadModel"),tCr=o(" (OpenAI GPT model)"),aCr=l(),UM=a("li"),G7e=a("strong"),nCr=o("opt"),sCr=o(" \u2014 "),jJ=a("a"),lCr=o("TFOPTForCausalLM"),iCr=o(" (OPT model)"),dCr=l(),JM=a("li"),O7e=a("strong"),cCr=o("rembert"),fCr=o(" \u2014 "),DJ=a("a"),mCr=o("TFRemBertForCausalLM"),gCr=o(" (RemBERT model)"),hCr=l(),YM=a("li"),V7e=a("strong"),pCr=o("roberta"),_Cr=o(" \u2014 "),GJ=a("a"),uCr=o("TFRobertaForCausalLM"),bCr=o(" (RoBERTa model)"),vCr=l(),KM=a("li"),X7e=a("strong"),FCr=o("roformer"),TCr=o(" \u2014 "),OJ=a("a"),MCr=o("TFRoFormerForCausalLM"),ECr=o(" (RoFormer model)"),CCr=l(),ZM=a("li"),z7e=a("strong"),wCr=o("transfo-xl"),ACr=o(" \u2014 "),VJ=a("a"),LCr=o("TFTransfoXLLMHeadModel"),yCr=o(" (Transformer-XL model)"),xCr=l(),e4=a("li"),Q7e=a("strong"),$Cr=o("xlm"),kCr=o(" \u2014 "),XJ=a("a"),SCr=o("TFXLMWithLMHeadModel"),RCr=o(" (XLM model)"),PCr=l(),o4=a("li"),W7e=a("strong"),BCr=o("xlnet"),ICr=o(" \u2014 "),zJ=a("a"),NCr=o("TFXLNetLMHeadModel"),qCr=o(" (XLNet model)"),jCr=l(),F(r4.$$.fragment),nze=l(),hc=a("h2"),t4=a("a"),H7e=a("span"),F(ax.$$.fragment),DCr=l(),U7e=a("span"),GCr=o("TFAutoModelForImageClassification"),sze=l(),tr=a("div"),F(nx.$$.fragment),OCr=l(),pc=a("p"),VCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QJ=a("a"),XCr=o("from_pretrained()"),zCr=o(" class method or the "),WJ=a("a"),QCr=o("from_config()"),WCr=o(` class
method.`),HCr=l(),sx=a("p"),UCr=o("This class cannot be instantiated directly using "),J7e=a("code"),JCr=o("__init__()"),YCr=o(" (throws an error)."),KCr=l(),Bt=a("div"),F(lx.$$.fragment),ZCr=l(),Y7e=a("p"),e3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o3r=l(),_c=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(a4.$$.fragment),i3r=l(),kr=a("div"),F(ix.$$.fragment),d3r=l(),Z7e=a("p"),c3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f3r=l(),dn=a("p"),m3r=o("The model class to instantiate is selected based on the "),e8e=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),o8e=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=a("code"),u3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),tt=a("ul"),n4=a("li"),t8e=a("strong"),F3r=o("convnext"),T3r=o(" \u2014 "),UJ=a("a"),M3r=o("TFConvNextForImageClassification"),E3r=o(" (ConvNeXT model)"),C3r=l(),s4=a("li"),a8e=a("strong"),w3r=o("data2vec-vision"),A3r=o(" \u2014 "),JJ=a("a"),L3r=o("TFData2VecVisionForImageClassification"),y3r=o(" (Data2VecVision model)"),x3r=l(),l4=a("li"),n8e=a("strong"),$3r=o("regnet"),k3r=o(" \u2014 "),YJ=a("a"),S3r=o("TFRegNetForImageClassification"),R3r=o(" (RegNet model)"),P3r=l(),i4=a("li"),s8e=a("strong"),B3r=o("swin"),I3r=o(" \u2014 "),KJ=a("a"),N3r=o("TFSwinForImageClassification"),q3r=o(" (Swin Transformer model)"),j3r=l(),d4=a("li"),l8e=a("strong"),D3r=o("vit"),G3r=o(" \u2014 "),ZJ=a("a"),O3r=o("TFViTForImageClassification"),V3r=o(" (ViT model)"),X3r=l(),F(c4.$$.fragment),lze=l(),uc=a("h2"),f4=a("a"),i8e=a("span"),F(dx.$$.fragment),z3r=l(),d8e=a("span"),Q3r=o("TFAutoModelForMaskedLM"),ize=l(),ar=a("div"),F(cx.$$.fragment),W3r=l(),bc=a("p"),H3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=a("a"),U3r=o("from_pretrained()"),J3r=o(" class method or the "),oY=a("a"),Y3r=o("from_config()"),K3r=o(` class
method.`),Z3r=l(),fx=a("p"),e5r=o("This class cannot be instantiated directly using "),c8e=a("code"),o5r=o("__init__()"),r5r=o(" (throws an error)."),t5r=l(),It=a("div"),F(mx.$$.fragment),a5r=l(),f8e=a("p"),n5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s5r=l(),vc=a("p"),l5r=o(`Note:
Loading a model from its configuration file does `),m8e=a("strong"),i5r=o("not"),d5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),c5r=o("from_pretrained()"),f5r=o(" to load the model weights."),m5r=l(),F(m4.$$.fragment),g5r=l(),Sr=a("div"),F(gx.$$.fragment),h5r=l(),g8e=a("p"),p5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_5r=l(),cn=a("p"),u5r=o("The model class to instantiate is selected based on the "),h8e=a("code"),b5r=o("model_type"),v5r=o(` property of the config object (either
passed as an argument or loaded from `),p8e=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(":"),C5r=l(),ie=a("ul"),g4=a("li"),u8e=a("strong"),w5r=o("albert"),A5r=o(" \u2014 "),tY=a("a"),L5r=o("TFAlbertForMaskedLM"),y5r=o(" (ALBERT model)"),x5r=l(),h4=a("li"),b8e=a("strong"),$5r=o("bert"),k5r=o(" \u2014 "),aY=a("a"),S5r=o("TFBertForMaskedLM"),R5r=o(" (BERT model)"),P5r=l(),p4=a("li"),v8e=a("strong"),B5r=o("camembert"),I5r=o(" \u2014 "),nY=a("a"),N5r=o("TFCamembertForMaskedLM"),q5r=o(" (CamemBERT model)"),j5r=l(),_4=a("li"),F8e=a("strong"),D5r=o("convbert"),G5r=o(" \u2014 "),sY=a("a"),O5r=o("TFConvBertForMaskedLM"),V5r=o(" (ConvBERT model)"),X5r=l(),u4=a("li"),T8e=a("strong"),z5r=o("deberta"),Q5r=o(" \u2014 "),lY=a("a"),W5r=o("TFDebertaForMaskedLM"),H5r=o(" (DeBERTa model)"),U5r=l(),b4=a("li"),M8e=a("strong"),J5r=o("deberta-v2"),Y5r=o(" \u2014 "),iY=a("a"),K5r=o("TFDebertaV2ForMaskedLM"),Z5r=o(" (DeBERTa-v2 model)"),e0r=l(),v4=a("li"),E8e=a("strong"),o0r=o("distilbert"),r0r=o(" \u2014 "),dY=a("a"),t0r=o("TFDistilBertForMaskedLM"),a0r=o(" (DistilBERT model)"),n0r=l(),F4=a("li"),C8e=a("strong"),s0r=o("electra"),l0r=o(" \u2014 "),cY=a("a"),i0r=o("TFElectraForMaskedLM"),d0r=o(" (ELECTRA model)"),c0r=l(),T4=a("li"),w8e=a("strong"),f0r=o("flaubert"),m0r=o(" \u2014 "),fY=a("a"),g0r=o("TFFlaubertWithLMHeadModel"),h0r=o(" (FlauBERT model)"),p0r=l(),M4=a("li"),A8e=a("strong"),_0r=o("funnel"),u0r=o(" \u2014 "),mY=a("a"),b0r=o("TFFunnelForMaskedLM"),v0r=o(" (Funnel Transformer model)"),F0r=l(),E4=a("li"),L8e=a("strong"),T0r=o("layoutlm"),M0r=o(" \u2014 "),gY=a("a"),E0r=o("TFLayoutLMForMaskedLM"),C0r=o(" (LayoutLM model)"),w0r=l(),C4=a("li"),y8e=a("strong"),A0r=o("longformer"),L0r=o(" \u2014 "),hY=a("a"),y0r=o("TFLongformerForMaskedLM"),x0r=o(" (Longformer model)"),$0r=l(),w4=a("li"),x8e=a("strong"),k0r=o("mobilebert"),S0r=o(" \u2014 "),pY=a("a"),R0r=o("TFMobileBertForMaskedLM"),P0r=o(" (MobileBERT model)"),B0r=l(),A4=a("li"),$8e=a("strong"),I0r=o("mpnet"),N0r=o(" \u2014 "),_Y=a("a"),q0r=o("TFMPNetForMaskedLM"),j0r=o(" (MPNet model)"),D0r=l(),L4=a("li"),k8e=a("strong"),G0r=o("rembert"),O0r=o(" \u2014 "),uY=a("a"),V0r=o("TFRemBertForMaskedLM"),X0r=o(" (RemBERT model)"),z0r=l(),y4=a("li"),S8e=a("strong"),Q0r=o("roberta"),W0r=o(" \u2014 "),bY=a("a"),H0r=o("TFRobertaForMaskedLM"),U0r=o(" (RoBERTa model)"),J0r=l(),x4=a("li"),R8e=a("strong"),Y0r=o("roformer"),K0r=o(" \u2014 "),vY=a("a"),Z0r=o("TFRoFormerForMaskedLM"),ewr=o(" (RoFormer model)"),owr=l(),$4=a("li"),P8e=a("strong"),rwr=o("tapas"),twr=o(" \u2014 "),FY=a("a"),awr=o("TFTapasForMaskedLM"),nwr=o(" (TAPAS model)"),swr=l(),k4=a("li"),B8e=a("strong"),lwr=o("xlm"),iwr=o(" \u2014 "),TY=a("a"),dwr=o("TFXLMWithLMHeadModel"),cwr=o(" (XLM model)"),fwr=l(),S4=a("li"),I8e=a("strong"),mwr=o("xlm-roberta"),gwr=o(" \u2014 "),MY=a("a"),hwr=o("TFXLMRobertaForMaskedLM"),pwr=o(" (XLM-RoBERTa model)"),_wr=l(),F(R4.$$.fragment),dze=l(),Fc=a("h2"),P4=a("a"),N8e=a("span"),F(hx.$$.fragment),uwr=l(),q8e=a("span"),bwr=o("TFAutoModelForSeq2SeqLM"),cze=l(),nr=a("div"),F(px.$$.fragment),vwr=l(),Tc=a("p"),Fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),Twr=o("from_pretrained()"),Mwr=o(" class method or the "),CY=a("a"),Ewr=o("from_config()"),Cwr=o(` class
method.`),wwr=l(),_x=a("p"),Awr=o("This class cannot be instantiated directly using "),j8e=a("code"),Lwr=o("__init__()"),ywr=o(" (throws an error)."),xwr=l(),Nt=a("div"),F(ux.$$.fragment),$wr=l(),D8e=a("p"),kwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Swr=l(),Mc=a("p"),Rwr=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),Pwr=o("not"),Bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),Iwr=o("from_pretrained()"),Nwr=o(" to load the model weights."),qwr=l(),F(B4.$$.fragment),jwr=l(),Rr=a("div"),F(bx.$$.fragment),Dwr=l(),O8e=a("p"),Gwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Owr=l(),fn=a("p"),Vwr=o("The model class to instantiate is selected based on the "),V8e=a("code"),Xwr=o("model_type"),zwr=o(` property of the config object (either
passed as an argument or loaded from `),X8e=a("code"),Qwr=o("pretrained_model_name_or_path"),Wwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(":"),Jwr=l(),ye=a("ul"),I4=a("li"),Q8e=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),AY=a("a"),Zwr=o("TFBartForConditionalGeneration"),eAr=o(" (BART model)"),oAr=l(),N4=a("li"),W8e=a("strong"),rAr=o("blenderbot"),tAr=o(" \u2014 "),LY=a("a"),aAr=o("TFBlenderbotForConditionalGeneration"),nAr=o(" (Blenderbot model)"),sAr=l(),q4=a("li"),H8e=a("strong"),lAr=o("blenderbot-small"),iAr=o(" \u2014 "),yY=a("a"),dAr=o("TFBlenderbotSmallForConditionalGeneration"),cAr=o(" (BlenderbotSmall model)"),fAr=l(),j4=a("li"),U8e=a("strong"),mAr=o("encoder-decoder"),gAr=o(" \u2014 "),xY=a("a"),hAr=o("TFEncoderDecoderModel"),pAr=o(" (Encoder decoder model)"),_Ar=l(),D4=a("li"),J8e=a("strong"),uAr=o("led"),bAr=o(" \u2014 "),$Y=a("a"),vAr=o("TFLEDForConditionalGeneration"),FAr=o(" (LED model)"),TAr=l(),G4=a("li"),Y8e=a("strong"),MAr=o("marian"),EAr=o(" \u2014 "),kY=a("a"),CAr=o("TFMarianMTModel"),wAr=o(" (Marian model)"),AAr=l(),O4=a("li"),K8e=a("strong"),LAr=o("mbart"),yAr=o(" \u2014 "),SY=a("a"),xAr=o("TFMBartForConditionalGeneration"),$Ar=o(" (mBART model)"),kAr=l(),V4=a("li"),Z8e=a("strong"),SAr=o("mt5"),RAr=o(" \u2014 "),RY=a("a"),PAr=o("TFMT5ForConditionalGeneration"),BAr=o(" (MT5 model)"),IAr=l(),X4=a("li"),eMe=a("strong"),NAr=o("pegasus"),qAr=o(" \u2014 "),PY=a("a"),jAr=o("TFPegasusForConditionalGeneration"),DAr=o(" (Pegasus model)"),GAr=l(),z4=a("li"),oMe=a("strong"),OAr=o("t5"),VAr=o(" \u2014 "),BY=a("a"),XAr=o("TFT5ForConditionalGeneration"),zAr=o(" (T5 model)"),QAr=l(),F(Q4.$$.fragment),fze=l(),Ec=a("h2"),W4=a("a"),rMe=a("span"),F(vx.$$.fragment),WAr=l(),tMe=a("span"),HAr=o("TFAutoModelForSequenceClassification"),mze=l(),sr=a("div"),F(Fx.$$.fragment),UAr=l(),Cc=a("p"),JAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IY=a("a"),YAr=o("from_pretrained()"),KAr=o(" class method or the "),NY=a("a"),ZAr=o("from_config()"),eLr=o(` class
method.`),oLr=l(),Tx=a("p"),rLr=o("This class cannot be instantiated directly using "),aMe=a("code"),tLr=o("__init__()"),aLr=o(" (throws an error)."),nLr=l(),qt=a("div"),F(Mx.$$.fragment),sLr=l(),nMe=a("p"),lLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iLr=l(),wc=a("p"),dLr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),cLr=o("not"),fLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),mLr=o("from_pretrained()"),gLr=o(" to load the model weights."),hLr=l(),F(H4.$$.fragment),pLr=l(),Pr=a("div"),F(Ex.$$.fragment),_Lr=l(),lMe=a("p"),uLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bLr=l(),mn=a("p"),vLr=o("The model class to instantiate is selected based on the "),iMe=a("code"),FLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),CLr=o("pretrained_model_name_or_path"),wLr=o(":"),ALr=l(),te=a("ul"),U4=a("li"),fMe=a("strong"),LLr=o("albert"),yLr=o(" \u2014 "),jY=a("a"),xLr=o("TFAlbertForSequenceClassification"),$Lr=o(" (ALBERT model)"),kLr=l(),J4=a("li"),mMe=a("strong"),SLr=o("bert"),RLr=o(" \u2014 "),DY=a("a"),PLr=o("TFBertForSequenceClassification"),BLr=o(" (BERT model)"),ILr=l(),Y4=a("li"),gMe=a("strong"),NLr=o("camembert"),qLr=o(" \u2014 "),GY=a("a"),jLr=o("TFCamembertForSequenceClassification"),DLr=o(" (CamemBERT model)"),GLr=l(),K4=a("li"),hMe=a("strong"),OLr=o("convbert"),VLr=o(" \u2014 "),OY=a("a"),XLr=o("TFConvBertForSequenceClassification"),zLr=o(" (ConvBERT model)"),QLr=l(),Z4=a("li"),pMe=a("strong"),WLr=o("ctrl"),HLr=o(" \u2014 "),VY=a("a"),ULr=o("TFCTRLForSequenceClassification"),JLr=o(" (CTRL model)"),YLr=l(),eE=a("li"),_Me=a("strong"),KLr=o("deberta"),ZLr=o(" \u2014 "),XY=a("a"),eyr=o("TFDebertaForSequenceClassification"),oyr=o(" (DeBERTa model)"),ryr=l(),oE=a("li"),uMe=a("strong"),tyr=o("deberta-v2"),ayr=o(" \u2014 "),zY=a("a"),nyr=o("TFDebertaV2ForSequenceClassification"),syr=o(" (DeBERTa-v2 model)"),lyr=l(),rE=a("li"),bMe=a("strong"),iyr=o("distilbert"),dyr=o(" \u2014 "),QY=a("a"),cyr=o("TFDistilBertForSequenceClassification"),fyr=o(" (DistilBERT model)"),myr=l(),tE=a("li"),vMe=a("strong"),gyr=o("electra"),hyr=o(" \u2014 "),WY=a("a"),pyr=o("TFElectraForSequenceClassification"),_yr=o(" (ELECTRA model)"),uyr=l(),aE=a("li"),FMe=a("strong"),byr=o("flaubert"),vyr=o(" \u2014 "),HY=a("a"),Fyr=o("TFFlaubertForSequenceClassification"),Tyr=o(" (FlauBERT model)"),Myr=l(),nE=a("li"),TMe=a("strong"),Eyr=o("funnel"),Cyr=o(" \u2014 "),UY=a("a"),wyr=o("TFFunnelForSequenceClassification"),Ayr=o(" (Funnel Transformer model)"),Lyr=l(),sE=a("li"),MMe=a("strong"),yyr=o("gpt2"),xyr=o(" \u2014 "),JY=a("a"),$yr=o("TFGPT2ForSequenceClassification"),kyr=o(" (OpenAI GPT-2 model)"),Syr=l(),lE=a("li"),EMe=a("strong"),Ryr=o("gptj"),Pyr=o(" \u2014 "),YY=a("a"),Byr=o("TFGPTJForSequenceClassification"),Iyr=o(" (GPT-J model)"),Nyr=l(),iE=a("li"),CMe=a("strong"),qyr=o("layoutlm"),jyr=o(" \u2014 "),KY=a("a"),Dyr=o("TFLayoutLMForSequenceClassification"),Gyr=o(" (LayoutLM model)"),Oyr=l(),dE=a("li"),wMe=a("strong"),Vyr=o("longformer"),Xyr=o(" \u2014 "),ZY=a("a"),zyr=o("TFLongformerForSequenceClassification"),Qyr=o(" (Longformer model)"),Wyr=l(),cE=a("li"),AMe=a("strong"),Hyr=o("mobilebert"),Uyr=o(" \u2014 "),eK=a("a"),Jyr=o("TFMobileBertForSequenceClassification"),Yyr=o(" (MobileBERT model)"),Kyr=l(),fE=a("li"),LMe=a("strong"),Zyr=o("mpnet"),e9r=o(" \u2014 "),oK=a("a"),o9r=o("TFMPNetForSequenceClassification"),r9r=o(" (MPNet model)"),t9r=l(),mE=a("li"),yMe=a("strong"),a9r=o("openai-gpt"),n9r=o(" \u2014 "),rK=a("a"),s9r=o("TFOpenAIGPTForSequenceClassification"),l9r=o(" (OpenAI GPT model)"),i9r=l(),gE=a("li"),xMe=a("strong"),d9r=o("rembert"),c9r=o(" \u2014 "),tK=a("a"),f9r=o("TFRemBertForSequenceClassification"),m9r=o(" (RemBERT model)"),g9r=l(),hE=a("li"),$Me=a("strong"),h9r=o("roberta"),p9r=o(" \u2014 "),aK=a("a"),_9r=o("TFRobertaForSequenceClassification"),u9r=o(" (RoBERTa model)"),b9r=l(),pE=a("li"),kMe=a("strong"),v9r=o("roformer"),F9r=o(" \u2014 "),nK=a("a"),T9r=o("TFRoFormerForSequenceClassification"),M9r=o(" (RoFormer model)"),E9r=l(),_E=a("li"),SMe=a("strong"),C9r=o("tapas"),w9r=o(" \u2014 "),sK=a("a"),A9r=o("TFTapasForSequenceClassification"),L9r=o(" (TAPAS model)"),y9r=l(),uE=a("li"),RMe=a("strong"),x9r=o("transfo-xl"),$9r=o(" \u2014 "),lK=a("a"),k9r=o("TFTransfoXLForSequenceClassification"),S9r=o(" (Transformer-XL model)"),R9r=l(),bE=a("li"),PMe=a("strong"),P9r=o("xlm"),B9r=o(" \u2014 "),iK=a("a"),I9r=o("TFXLMForSequenceClassification"),N9r=o(" (XLM model)"),q9r=l(),vE=a("li"),BMe=a("strong"),j9r=o("xlm-roberta"),D9r=o(" \u2014 "),dK=a("a"),G9r=o("TFXLMRobertaForSequenceClassification"),O9r=o(" (XLM-RoBERTa model)"),V9r=l(),FE=a("li"),IMe=a("strong"),X9r=o("xlnet"),z9r=o(" \u2014 "),cK=a("a"),Q9r=o("TFXLNetForSequenceClassification"),W9r=o(" (XLNet model)"),H9r=l(),F(TE.$$.fragment),gze=l(),Ac=a("h2"),ME=a("a"),NMe=a("span"),F(Cx.$$.fragment),U9r=l(),qMe=a("span"),J9r=o("TFAutoModelForMultipleChoice"),hze=l(),lr=a("div"),F(wx.$$.fragment),Y9r=l(),Lc=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fK=a("a"),Z9r=o("from_pretrained()"),exr=o(" class method or the "),mK=a("a"),oxr=o("from_config()"),rxr=o(` class
method.`),txr=l(),Ax=a("p"),axr=o("This class cannot be instantiated directly using "),jMe=a("code"),nxr=o("__init__()"),sxr=o(" (throws an error)."),lxr=l(),jt=a("div"),F(Lx.$$.fragment),ixr=l(),DMe=a("p"),dxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cxr=l(),yc=a("p"),fxr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),mxr=o("not"),gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),hxr=o("from_pretrained()"),pxr=o(" to load the model weights."),_xr=l(),F(EE.$$.fragment),uxr=l(),Br=a("div"),F(yx.$$.fragment),bxr=l(),OMe=a("p"),vxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fxr=l(),gn=a("p"),Txr=o("The model class to instantiate is selected based on the "),VMe=a("code"),Mxr=o("model_type"),Exr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),Axr=o("pretrained_model_name_or_path"),Lxr=o(":"),yxr=l(),_e=a("ul"),CE=a("li"),QMe=a("strong"),xxr=o("albert"),$xr=o(" \u2014 "),hK=a("a"),kxr=o("TFAlbertForMultipleChoice"),Sxr=o(" (ALBERT model)"),Rxr=l(),wE=a("li"),WMe=a("strong"),Pxr=o("bert"),Bxr=o(" \u2014 "),pK=a("a"),Ixr=o("TFBertForMultipleChoice"),Nxr=o(" (BERT model)"),qxr=l(),AE=a("li"),HMe=a("strong"),jxr=o("camembert"),Dxr=o(" \u2014 "),_K=a("a"),Gxr=o("TFCamembertForMultipleChoice"),Oxr=o(" (CamemBERT model)"),Vxr=l(),LE=a("li"),UMe=a("strong"),Xxr=o("convbert"),zxr=o(" \u2014 "),uK=a("a"),Qxr=o("TFConvBertForMultipleChoice"),Wxr=o(" (ConvBERT model)"),Hxr=l(),yE=a("li"),JMe=a("strong"),Uxr=o("distilbert"),Jxr=o(" \u2014 "),bK=a("a"),Yxr=o("TFDistilBertForMultipleChoice"),Kxr=o(" (DistilBERT model)"),Zxr=l(),xE=a("li"),YMe=a("strong"),e$r=o("electra"),o$r=o(" \u2014 "),vK=a("a"),r$r=o("TFElectraForMultipleChoice"),t$r=o(" (ELECTRA model)"),a$r=l(),$E=a("li"),KMe=a("strong"),n$r=o("flaubert"),s$r=o(" \u2014 "),FK=a("a"),l$r=o("TFFlaubertForMultipleChoice"),i$r=o(" (FlauBERT model)"),d$r=l(),kE=a("li"),ZMe=a("strong"),c$r=o("funnel"),f$r=o(" \u2014 "),TK=a("a"),m$r=o("TFFunnelForMultipleChoice"),g$r=o(" (Funnel Transformer model)"),h$r=l(),SE=a("li"),e4e=a("strong"),p$r=o("longformer"),_$r=o(" \u2014 "),MK=a("a"),u$r=o("TFLongformerForMultipleChoice"),b$r=o(" (Longformer model)"),v$r=l(),RE=a("li"),o4e=a("strong"),F$r=o("mobilebert"),T$r=o(" \u2014 "),EK=a("a"),M$r=o("TFMobileBertForMultipleChoice"),E$r=o(" (MobileBERT model)"),C$r=l(),PE=a("li"),r4e=a("strong"),w$r=o("mpnet"),A$r=o(" \u2014 "),CK=a("a"),L$r=o("TFMPNetForMultipleChoice"),y$r=o(" (MPNet model)"),x$r=l(),BE=a("li"),t4e=a("strong"),$$r=o("rembert"),k$r=o(" \u2014 "),wK=a("a"),S$r=o("TFRemBertForMultipleChoice"),R$r=o(" (RemBERT model)"),P$r=l(),IE=a("li"),a4e=a("strong"),B$r=o("roberta"),I$r=o(" \u2014 "),AK=a("a"),N$r=o("TFRobertaForMultipleChoice"),q$r=o(" (RoBERTa model)"),j$r=l(),NE=a("li"),n4e=a("strong"),D$r=o("roformer"),G$r=o(" \u2014 "),LK=a("a"),O$r=o("TFRoFormerForMultipleChoice"),V$r=o(" (RoFormer model)"),X$r=l(),qE=a("li"),s4e=a("strong"),z$r=o("xlm"),Q$r=o(" \u2014 "),yK=a("a"),W$r=o("TFXLMForMultipleChoice"),H$r=o(" (XLM model)"),U$r=l(),jE=a("li"),l4e=a("strong"),J$r=o("xlm-roberta"),Y$r=o(" \u2014 "),xK=a("a"),K$r=o("TFXLMRobertaForMultipleChoice"),Z$r=o(" (XLM-RoBERTa model)"),ekr=l(),DE=a("li"),i4e=a("strong"),okr=o("xlnet"),rkr=o(" \u2014 "),$K=a("a"),tkr=o("TFXLNetForMultipleChoice"),akr=o(" (XLNet model)"),nkr=l(),F(GE.$$.fragment),pze=l(),xc=a("h2"),OE=a("a"),d4e=a("span"),F(xx.$$.fragment),skr=l(),c4e=a("span"),lkr=o("TFAutoModelForNextSentencePrediction"),_ze=l(),ir=a("div"),F($x.$$.fragment),ikr=l(),$c=a("p"),dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=a("a"),ckr=o("from_pretrained()"),fkr=o(" class method or the "),SK=a("a"),mkr=o("from_config()"),gkr=o(` class
method.`),hkr=l(),kx=a("p"),pkr=o("This class cannot be instantiated directly using "),f4e=a("code"),_kr=o("__init__()"),ukr=o(" (throws an error)."),bkr=l(),Dt=a("div"),F(Sx.$$.fragment),vkr=l(),m4e=a("p"),Fkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tkr=l(),kc=a("p"),Mkr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),Ekr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),wkr=o("from_pretrained()"),Akr=o(" to load the model weights."),Lkr=l(),F(VE.$$.fragment),ykr=l(),Ir=a("div"),F(Rx.$$.fragment),xkr=l(),h4e=a("p"),$kr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kkr=l(),hn=a("p"),Skr=o("The model class to instantiate is selected based on the "),p4e=a("code"),Rkr=o("model_type"),Pkr=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),Bkr=o("pretrained_model_name_or_path"),Ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=a("code"),Nkr=o("pretrained_model_name_or_path"),qkr=o(":"),jkr=l(),Px=a("ul"),XE=a("li"),b4e=a("strong"),Dkr=o("bert"),Gkr=o(" \u2014 "),PK=a("a"),Okr=o("TFBertForNextSentencePrediction"),Vkr=o(" (BERT model)"),Xkr=l(),zE=a("li"),v4e=a("strong"),zkr=o("mobilebert"),Qkr=o(" \u2014 "),BK=a("a"),Wkr=o("TFMobileBertForNextSentencePrediction"),Hkr=o(" (MobileBERT model)"),Ukr=l(),F(QE.$$.fragment),uze=l(),Sc=a("h2"),WE=a("a"),F4e=a("span"),F(Bx.$$.fragment),Jkr=l(),T4e=a("span"),Ykr=o("TFAutoModelForTableQuestionAnswering"),bze=l(),dr=a("div"),F(Ix.$$.fragment),Kkr=l(),Rc=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IK=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),NK=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),Nx=a("p"),nSr=o("This class cannot be instantiated directly using "),M4e=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),Gt=a("div"),F(qx.$$.fragment),dSr=l(),E4e=a("p"),cSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fSr=l(),Pc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),uSr=l(),F(HE.$$.fragment),bSr=l(),Nr=a("div"),F(jx.$$.fragment),vSr=l(),w4e=a("p"),FSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TSr=l(),pn=a("p"),MSr=o("The model class to instantiate is selected based on the "),A4e=a("code"),ESr=o("model_type"),CSr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),LSr=o("pretrained_model_name_or_path"),ySr=o(":"),xSr=l(),x4e=a("ul"),UE=a("li"),$4e=a("strong"),$Sr=o("tapas"),kSr=o(" \u2014 "),jK=a("a"),SSr=o("TFTapasForQuestionAnswering"),RSr=o(" (TAPAS model)"),PSr=l(),F(JE.$$.fragment),vze=l(),Bc=a("h2"),YE=a("a"),k4e=a("span"),F(Dx.$$.fragment),BSr=l(),S4e=a("span"),ISr=o("TFAutoModelForTokenClassification"),Fze=l(),cr=a("div"),F(Gx.$$.fragment),NSr=l(),Ic=a("p"),qSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=a("a"),jSr=o("from_pretrained()"),DSr=o(" class method or the "),GK=a("a"),GSr=o("from_config()"),OSr=o(` class
method.`),VSr=l(),Ox=a("p"),XSr=o("This class cannot be instantiated directly using "),R4e=a("code"),zSr=o("__init__()"),QSr=o(" (throws an error)."),WSr=l(),Ot=a("div"),F(Vx.$$.fragment),HSr=l(),P4e=a("p"),USr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JSr=l(),Nc=a("p"),YSr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),KSr=o("not"),ZSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),eRr=o("from_pretrained()"),oRr=o(" to load the model weights."),rRr=l(),F(KE.$$.fragment),tRr=l(),qr=a("div"),F(Xx.$$.fragment),aRr=l(),I4e=a("p"),nRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sRr=l(),_n=a("p"),lRr=o("The model class to instantiate is selected based on the "),N4e=a("code"),iRr=o("model_type"),dRr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),mRr=o("pretrained_model_name_or_path"),gRr=o(":"),hRr=l(),de=a("ul"),ZE=a("li"),D4e=a("strong"),pRr=o("albert"),_Rr=o(" \u2014 "),VK=a("a"),uRr=o("TFAlbertForTokenClassification"),bRr=o(" (ALBERT model)"),vRr=l(),eC=a("li"),G4e=a("strong"),FRr=o("bert"),TRr=o(" \u2014 "),XK=a("a"),MRr=o("TFBertForTokenClassification"),ERr=o(" (BERT model)"),CRr=l(),oC=a("li"),O4e=a("strong"),wRr=o("camembert"),ARr=o(" \u2014 "),zK=a("a"),LRr=o("TFCamembertForTokenClassification"),yRr=o(" (CamemBERT model)"),xRr=l(),rC=a("li"),V4e=a("strong"),$Rr=o("convbert"),kRr=o(" \u2014 "),QK=a("a"),SRr=o("TFConvBertForTokenClassification"),RRr=o(" (ConvBERT model)"),PRr=l(),tC=a("li"),X4e=a("strong"),BRr=o("deberta"),IRr=o(" \u2014 "),WK=a("a"),NRr=o("TFDebertaForTokenClassification"),qRr=o(" (DeBERTa model)"),jRr=l(),aC=a("li"),z4e=a("strong"),DRr=o("deberta-v2"),GRr=o(" \u2014 "),HK=a("a"),ORr=o("TFDebertaV2ForTokenClassification"),VRr=o(" (DeBERTa-v2 model)"),XRr=l(),nC=a("li"),Q4e=a("strong"),zRr=o("distilbert"),QRr=o(" \u2014 "),UK=a("a"),WRr=o("TFDistilBertForTokenClassification"),HRr=o(" (DistilBERT model)"),URr=l(),sC=a("li"),W4e=a("strong"),JRr=o("electra"),YRr=o(" \u2014 "),JK=a("a"),KRr=o("TFElectraForTokenClassification"),ZRr=o(" (ELECTRA model)"),ePr=l(),lC=a("li"),H4e=a("strong"),oPr=o("flaubert"),rPr=o(" \u2014 "),YK=a("a"),tPr=o("TFFlaubertForTokenClassification"),aPr=o(" (FlauBERT model)"),nPr=l(),iC=a("li"),U4e=a("strong"),sPr=o("funnel"),lPr=o(" \u2014 "),KK=a("a"),iPr=o("TFFunnelForTokenClassification"),dPr=o(" (Funnel Transformer model)"),cPr=l(),dC=a("li"),J4e=a("strong"),fPr=o("layoutlm"),mPr=o(" \u2014 "),ZK=a("a"),gPr=o("TFLayoutLMForTokenClassification"),hPr=o(" (LayoutLM model)"),pPr=l(),cC=a("li"),Y4e=a("strong"),_Pr=o("longformer"),uPr=o(" \u2014 "),eZ=a("a"),bPr=o("TFLongformerForTokenClassification"),vPr=o(" (Longformer model)"),FPr=l(),fC=a("li"),K4e=a("strong"),TPr=o("mobilebert"),MPr=o(" \u2014 "),oZ=a("a"),EPr=o("TFMobileBertForTokenClassification"),CPr=o(" (MobileBERT model)"),wPr=l(),mC=a("li"),Z4e=a("strong"),APr=o("mpnet"),LPr=o(" \u2014 "),rZ=a("a"),yPr=o("TFMPNetForTokenClassification"),xPr=o(" (MPNet model)"),$Pr=l(),gC=a("li"),eEe=a("strong"),kPr=o("rembert"),SPr=o(" \u2014 "),tZ=a("a"),RPr=o("TFRemBertForTokenClassification"),PPr=o(" (RemBERT model)"),BPr=l(),hC=a("li"),oEe=a("strong"),IPr=o("roberta"),NPr=o(" \u2014 "),aZ=a("a"),qPr=o("TFRobertaForTokenClassification"),jPr=o(" (RoBERTa model)"),DPr=l(),pC=a("li"),rEe=a("strong"),GPr=o("roformer"),OPr=o(" \u2014 "),nZ=a("a"),VPr=o("TFRoFormerForTokenClassification"),XPr=o(" (RoFormer model)"),zPr=l(),_C=a("li"),tEe=a("strong"),QPr=o("xlm"),WPr=o(" \u2014 "),sZ=a("a"),HPr=o("TFXLMForTokenClassification"),UPr=o(" (XLM model)"),JPr=l(),uC=a("li"),aEe=a("strong"),YPr=o("xlm-roberta"),KPr=o(" \u2014 "),lZ=a("a"),ZPr=o("TFXLMRobertaForTokenClassification"),eBr=o(" (XLM-RoBERTa model)"),oBr=l(),bC=a("li"),nEe=a("strong"),rBr=o("xlnet"),tBr=o(" \u2014 "),iZ=a("a"),aBr=o("TFXLNetForTokenClassification"),nBr=o(" (XLNet model)"),sBr=l(),F(vC.$$.fragment),Tze=l(),qc=a("h2"),FC=a("a"),sEe=a("span"),F(zx.$$.fragment),lBr=l(),lEe=a("span"),iBr=o("TFAutoModelForQuestionAnswering"),Mze=l(),fr=a("div"),F(Qx.$$.fragment),dBr=l(),jc=a("p"),cBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=a("a"),fBr=o("from_pretrained()"),mBr=o(" class method or the "),cZ=a("a"),gBr=o("from_config()"),hBr=o(` class
method.`),pBr=l(),Wx=a("p"),_Br=o("This class cannot be instantiated directly using "),iEe=a("code"),uBr=o("__init__()"),bBr=o(" (throws an error)."),vBr=l(),Vt=a("div"),F(Hx.$$.fragment),FBr=l(),dEe=a("p"),TBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MBr=l(),Dc=a("p"),EBr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),CBr=o("not"),wBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),ABr=o("from_pretrained()"),LBr=o(" to load the model weights."),yBr=l(),F(TC.$$.fragment),xBr=l(),jr=a("div"),F(Ux.$$.fragment),$Br=l(),fEe=a("p"),kBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SBr=l(),un=a("p"),RBr=o("The model class to instantiate is selected based on the "),mEe=a("code"),PBr=o("model_type"),BBr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),IBr=o("pretrained_model_name_or_path"),NBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),qBr=o("pretrained_model_name_or_path"),jBr=o(":"),DBr=l(),ce=a("ul"),MC=a("li"),pEe=a("strong"),GBr=o("albert"),OBr=o(" \u2014 "),mZ=a("a"),VBr=o("TFAlbertForQuestionAnswering"),XBr=o(" (ALBERT model)"),zBr=l(),EC=a("li"),_Ee=a("strong"),QBr=o("bert"),WBr=o(" \u2014 "),gZ=a("a"),HBr=o("TFBertForQuestionAnswering"),UBr=o(" (BERT model)"),JBr=l(),CC=a("li"),uEe=a("strong"),YBr=o("camembert"),KBr=o(" \u2014 "),hZ=a("a"),ZBr=o("TFCamembertForQuestionAnswering"),eIr=o(" (CamemBERT model)"),oIr=l(),wC=a("li"),bEe=a("strong"),rIr=o("convbert"),tIr=o(" \u2014 "),pZ=a("a"),aIr=o("TFConvBertForQuestionAnswering"),nIr=o(" (ConvBERT model)"),sIr=l(),AC=a("li"),vEe=a("strong"),lIr=o("deberta"),iIr=o(" \u2014 "),_Z=a("a"),dIr=o("TFDebertaForQuestionAnswering"),cIr=o(" (DeBERTa model)"),fIr=l(),LC=a("li"),FEe=a("strong"),mIr=o("deberta-v2"),gIr=o(" \u2014 "),uZ=a("a"),hIr=o("TFDebertaV2ForQuestionAnswering"),pIr=o(" (DeBERTa-v2 model)"),_Ir=l(),yC=a("li"),TEe=a("strong"),uIr=o("distilbert"),bIr=o(" \u2014 "),bZ=a("a"),vIr=o("TFDistilBertForQuestionAnswering"),FIr=o(" (DistilBERT model)"),TIr=l(),xC=a("li"),MEe=a("strong"),MIr=o("electra"),EIr=o(" \u2014 "),vZ=a("a"),CIr=o("TFElectraForQuestionAnswering"),wIr=o(" (ELECTRA model)"),AIr=l(),$C=a("li"),EEe=a("strong"),LIr=o("flaubert"),yIr=o(" \u2014 "),FZ=a("a"),xIr=o("TFFlaubertForQuestionAnsweringSimple"),$Ir=o(" (FlauBERT model)"),kIr=l(),kC=a("li"),CEe=a("strong"),SIr=o("funnel"),RIr=o(" \u2014 "),TZ=a("a"),PIr=o("TFFunnelForQuestionAnswering"),BIr=o(" (Funnel Transformer model)"),IIr=l(),SC=a("li"),wEe=a("strong"),NIr=o("gptj"),qIr=o(" \u2014 "),MZ=a("a"),jIr=o("TFGPTJForQuestionAnswering"),DIr=o(" (GPT-J model)"),GIr=l(),RC=a("li"),AEe=a("strong"),OIr=o("longformer"),VIr=o(" \u2014 "),EZ=a("a"),XIr=o("TFLongformerForQuestionAnswering"),zIr=o(" (Longformer model)"),QIr=l(),PC=a("li"),LEe=a("strong"),WIr=o("mobilebert"),HIr=o(" \u2014 "),CZ=a("a"),UIr=o("TFMobileBertForQuestionAnswering"),JIr=o(" (MobileBERT model)"),YIr=l(),BC=a("li"),yEe=a("strong"),KIr=o("mpnet"),ZIr=o(" \u2014 "),wZ=a("a"),eNr=o("TFMPNetForQuestionAnswering"),oNr=o(" (MPNet model)"),rNr=l(),IC=a("li"),xEe=a("strong"),tNr=o("rembert"),aNr=o(" \u2014 "),AZ=a("a"),nNr=o("TFRemBertForQuestionAnswering"),sNr=o(" (RemBERT model)"),lNr=l(),NC=a("li"),$Ee=a("strong"),iNr=o("roberta"),dNr=o(" \u2014 "),LZ=a("a"),cNr=o("TFRobertaForQuestionAnswering"),fNr=o(" (RoBERTa model)"),mNr=l(),qC=a("li"),kEe=a("strong"),gNr=o("roformer"),hNr=o(" \u2014 "),yZ=a("a"),pNr=o("TFRoFormerForQuestionAnswering"),_Nr=o(" (RoFormer model)"),uNr=l(),jC=a("li"),SEe=a("strong"),bNr=o("xlm"),vNr=o(" \u2014 "),xZ=a("a"),FNr=o("TFXLMForQuestionAnsweringSimple"),TNr=o(" (XLM model)"),MNr=l(),DC=a("li"),REe=a("strong"),ENr=o("xlm-roberta"),CNr=o(" \u2014 "),$Z=a("a"),wNr=o("TFXLMRobertaForQuestionAnswering"),ANr=o(" (XLM-RoBERTa model)"),LNr=l(),GC=a("li"),PEe=a("strong"),yNr=o("xlnet"),xNr=o(" \u2014 "),kZ=a("a"),$Nr=o("TFXLNetForQuestionAnsweringSimple"),kNr=o(" (XLNet model)"),SNr=l(),F(OC.$$.fragment),Eze=l(),Gc=a("h2"),VC=a("a"),BEe=a("span"),F(Jx.$$.fragment),RNr=l(),IEe=a("span"),PNr=o("TFAutoModelForVision2Seq"),Cze=l(),mr=a("div"),F(Yx.$$.fragment),BNr=l(),Oc=a("p"),INr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=a("a"),NNr=o("from_pretrained()"),qNr=o(" class method or the "),RZ=a("a"),jNr=o("from_config()"),DNr=o(` class
method.`),GNr=l(),Kx=a("p"),ONr=o("This class cannot be instantiated directly using "),NEe=a("code"),VNr=o("__init__()"),XNr=o(" (throws an error)."),zNr=l(),Xt=a("div"),F(Zx.$$.fragment),QNr=l(),qEe=a("p"),WNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HNr=l(),Vc=a("p"),UNr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),JNr=o("not"),YNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),KNr=o("from_pretrained()"),ZNr=o(" to load the model weights."),eqr=l(),F(XC.$$.fragment),oqr=l(),Dr=a("div"),F(e$.$$.fragment),rqr=l(),DEe=a("p"),tqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aqr=l(),bn=a("p"),nqr=o("The model class to instantiate is selected based on the "),GEe=a("code"),sqr=o("model_type"),lqr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),iqr=o("pretrained_model_name_or_path"),dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),cqr=o("pretrained_model_name_or_path"),fqr=o(":"),mqr=l(),XEe=a("ul"),zC=a("li"),zEe=a("strong"),gqr=o("vision-encoder-decoder"),hqr=o(" \u2014 "),BZ=a("a"),pqr=o("TFVisionEncoderDecoderModel"),_qr=o(" (Vision Encoder decoder model)"),uqr=l(),F(QC.$$.fragment),wze=l(),Xc=a("h2"),WC=a("a"),QEe=a("span"),F(o$.$$.fragment),bqr=l(),WEe=a("span"),vqr=o("TFAutoModelForSpeechSeq2Seq"),Aze=l(),gr=a("div"),F(r$.$$.fragment),Fqr=l(),zc=a("p"),Tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IZ=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" class method or the "),NZ=a("a"),Cqr=o("from_config()"),wqr=o(` class
method.`),Aqr=l(),t$=a("p"),Lqr=o("This class cannot be instantiated directly using "),HEe=a("code"),yqr=o("__init__()"),xqr=o(" (throws an error)."),$qr=l(),zt=a("div"),F(a$.$$.fragment),kqr=l(),UEe=a("p"),Sqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rqr=l(),Qc=a("p"),Pqr=o(`Note:
Loading a model from its configuration file does `),JEe=a("strong"),Bqr=o("not"),Iqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),Nqr=o("from_pretrained()"),qqr=o(" to load the model weights."),jqr=l(),F(HC.$$.fragment),Dqr=l(),Gr=a("div"),F(n$.$$.fragment),Gqr=l(),YEe=a("p"),Oqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vqr=l(),vn=a("p"),Xqr=o("The model class to instantiate is selected based on the "),KEe=a("code"),zqr=o("model_type"),Qqr=o(` property of the config object (either
passed as an argument or loaded from `),ZEe=a("code"),Wqr=o("pretrained_model_name_or_path"),Hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=a("code"),Uqr=o("pretrained_model_name_or_path"),Jqr=o(":"),Yqr=l(),oCe=a("ul"),UC=a("li"),rCe=a("strong"),Kqr=o("speech_to_text"),Zqr=o(" \u2014 "),jZ=a("a"),ejr=o("TFSpeech2TextForConditionalGeneration"),ojr=o(" (Speech2Text model)"),rjr=l(),F(JC.$$.fragment),Lze=l(),Wc=a("h2"),YC=a("a"),tCe=a("span"),F(s$.$$.fragment),tjr=l(),aCe=a("span"),ajr=o("FlaxAutoModel"),yze=l(),hr=a("div"),F(l$.$$.fragment),njr=l(),Hc=a("p"),sjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=a("a"),ljr=o("from_pretrained()"),ijr=o(" class method or the "),GZ=a("a"),djr=o("from_config()"),cjr=o(` class
method.`),fjr=l(),i$=a("p"),mjr=o("This class cannot be instantiated directly using "),nCe=a("code"),gjr=o("__init__()"),hjr=o(" (throws an error)."),pjr=l(),Qt=a("div"),F(d$.$$.fragment),_jr=l(),sCe=a("p"),ujr=o("Instantiates one of the base model classes of the library from a configuration."),bjr=l(),Uc=a("p"),vjr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),Fjr=o("not"),Tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),Mjr=o("from_pretrained()"),Ejr=o(" to load the model weights."),Cjr=l(),F(KC.$$.fragment),wjr=l(),Or=a("div"),F(c$.$$.fragment),Ajr=l(),iCe=a("p"),Ljr=o("Instantiate one of the base model classes of the library from a pretrained model."),yjr=l(),Fn=a("p"),xjr=o("The model class to instantiate is selected based on the "),dCe=a("code"),$jr=o("model_type"),kjr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(":"),Ijr=l(),oe=a("ul"),ZC=a("li"),mCe=a("strong"),Njr=o("albert"),qjr=o(" \u2014 "),VZ=a("a"),jjr=o("FlaxAlbertModel"),Djr=o(" (ALBERT model)"),Gjr=l(),e3=a("li"),gCe=a("strong"),Ojr=o("bart"),Vjr=o(" \u2014 "),XZ=a("a"),Xjr=o("FlaxBartModel"),zjr=o(" (BART model)"),Qjr=l(),o3=a("li"),hCe=a("strong"),Wjr=o("beit"),Hjr=o(" \u2014 "),zZ=a("a"),Ujr=o("FlaxBeitModel"),Jjr=o(" (BEiT model)"),Yjr=l(),r3=a("li"),pCe=a("strong"),Kjr=o("bert"),Zjr=o(" \u2014 "),QZ=a("a"),eDr=o("FlaxBertModel"),oDr=o(" (BERT model)"),rDr=l(),t3=a("li"),_Ce=a("strong"),tDr=o("big_bird"),aDr=o(" \u2014 "),WZ=a("a"),nDr=o("FlaxBigBirdModel"),sDr=o(" (BigBird model)"),lDr=l(),a3=a("li"),uCe=a("strong"),iDr=o("blenderbot"),dDr=o(" \u2014 "),HZ=a("a"),cDr=o("FlaxBlenderbotModel"),fDr=o(" (Blenderbot model)"),mDr=l(),n3=a("li"),bCe=a("strong"),gDr=o("blenderbot-small"),hDr=o(" \u2014 "),UZ=a("a"),pDr=o("FlaxBlenderbotSmallModel"),_Dr=o(" (BlenderbotSmall model)"),uDr=l(),s3=a("li"),vCe=a("strong"),bDr=o("clip"),vDr=o(" \u2014 "),JZ=a("a"),FDr=o("FlaxCLIPModel"),TDr=o(" (CLIP model)"),MDr=l(),l3=a("li"),FCe=a("strong"),EDr=o("distilbert"),CDr=o(" \u2014 "),YZ=a("a"),wDr=o("FlaxDistilBertModel"),ADr=o(" (DistilBERT model)"),LDr=l(),i3=a("li"),TCe=a("strong"),yDr=o("electra"),xDr=o(" \u2014 "),KZ=a("a"),$Dr=o("FlaxElectraModel"),kDr=o(" (ELECTRA model)"),SDr=l(),d3=a("li"),MCe=a("strong"),RDr=o("gpt2"),PDr=o(" \u2014 "),ZZ=a("a"),BDr=o("FlaxGPT2Model"),IDr=o(" (OpenAI GPT-2 model)"),NDr=l(),c3=a("li"),ECe=a("strong"),qDr=o("gpt_neo"),jDr=o(" \u2014 "),eee=a("a"),DDr=o("FlaxGPTNeoModel"),GDr=o(" (GPT Neo model)"),ODr=l(),f3=a("li"),CCe=a("strong"),VDr=o("gptj"),XDr=o(" \u2014 "),oee=a("a"),zDr=o("FlaxGPTJModel"),QDr=o(" (GPT-J model)"),WDr=l(),m3=a("li"),wCe=a("strong"),HDr=o("longt5"),UDr=o(" \u2014 "),ree=a("a"),JDr=o("FlaxLongT5Model"),YDr=o(" (LongT5 model)"),KDr=l(),g3=a("li"),ACe=a("strong"),ZDr=o("marian"),eGr=o(" \u2014 "),tee=a("a"),oGr=o("FlaxMarianModel"),rGr=o(" (Marian model)"),tGr=l(),h3=a("li"),LCe=a("strong"),aGr=o("mbart"),nGr=o(" \u2014 "),aee=a("a"),sGr=o("FlaxMBartModel"),lGr=o(" (mBART model)"),iGr=l(),p3=a("li"),yCe=a("strong"),dGr=o("mt5"),cGr=o(" \u2014 "),nee=a("a"),fGr=o("FlaxMT5Model"),mGr=o(" (MT5 model)"),gGr=l(),_3=a("li"),xCe=a("strong"),hGr=o("opt"),pGr=o(" \u2014 "),see=a("a"),_Gr=o("FlaxOPTModel"),uGr=o(" (OPT model)"),bGr=l(),u3=a("li"),$Ce=a("strong"),vGr=o("pegasus"),FGr=o(" \u2014 "),lee=a("a"),TGr=o("FlaxPegasusModel"),MGr=o(" (Pegasus model)"),EGr=l(),b3=a("li"),kCe=a("strong"),CGr=o("roberta"),wGr=o(" \u2014 "),iee=a("a"),AGr=o("FlaxRobertaModel"),LGr=o(" (RoBERTa model)"),yGr=l(),v3=a("li"),SCe=a("strong"),xGr=o("roformer"),$Gr=o(" \u2014 "),dee=a("a"),kGr=o("FlaxRoFormerModel"),SGr=o(" (RoFormer model)"),RGr=l(),F3=a("li"),RCe=a("strong"),PGr=o("t5"),BGr=o(" \u2014 "),cee=a("a"),IGr=o("FlaxT5Model"),NGr=o(" (T5 model)"),qGr=l(),T3=a("li"),PCe=a("strong"),jGr=o("vision-text-dual-encoder"),DGr=o(" \u2014 "),fee=a("a"),GGr=o("FlaxVisionTextDualEncoderModel"),OGr=o(" (VisionTextDualEncoder model)"),VGr=l(),M3=a("li"),BCe=a("strong"),XGr=o("vit"),zGr=o(" \u2014 "),mee=a("a"),QGr=o("FlaxViTModel"),WGr=o(" (ViT model)"),HGr=l(),E3=a("li"),ICe=a("strong"),UGr=o("wav2vec2"),JGr=o(" \u2014 "),gee=a("a"),YGr=o("FlaxWav2Vec2Model"),KGr=o(" (Wav2Vec2 model)"),ZGr=l(),C3=a("li"),NCe=a("strong"),eOr=o("xglm"),oOr=o(" \u2014 "),hee=a("a"),rOr=o("FlaxXGLMModel"),tOr=o(" (XGLM model)"),aOr=l(),w3=a("li"),qCe=a("strong"),nOr=o("xlm-roberta"),sOr=o(" \u2014 "),pee=a("a"),lOr=o("FlaxXLMRobertaModel"),iOr=o(" (XLM-RoBERTa model)"),dOr=l(),F(A3.$$.fragment),xze=l(),Jc=a("h2"),L3=a("a"),jCe=a("span"),F(f$.$$.fragment),cOr=l(),DCe=a("span"),fOr=o("FlaxAutoModelForCausalLM"),$ze=l(),pr=a("div"),F(m$.$$.fragment),mOr=l(),Yc=a("p"),gOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ee=a("a"),hOr=o("from_pretrained()"),pOr=o(" class method or the "),uee=a("a"),_Or=o("from_config()"),uOr=o(` class
method.`),bOr=l(),g$=a("p"),vOr=o("This class cannot be instantiated directly using "),GCe=a("code"),FOr=o("__init__()"),TOr=o(" (throws an error)."),MOr=l(),Wt=a("div"),F(h$.$$.fragment),EOr=l(),OCe=a("p"),COr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wOr=l(),Kc=a("p"),AOr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),LOr=o("not"),yOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=a("a"),xOr=o("from_pretrained()"),$Or=o(" to load the model weights."),kOr=l(),F(y3.$$.fragment),SOr=l(),Vr=a("div"),F(p$.$$.fragment),ROr=l(),XCe=a("p"),POr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BOr=l(),Tn=a("p"),IOr=o("The model class to instantiate is selected based on the "),zCe=a("code"),NOr=o("model_type"),qOr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),jOr=o("pretrained_model_name_or_path"),DOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),GOr=o("pretrained_model_name_or_path"),OOr=o(":"),VOr=l(),xe=a("ul"),x3=a("li"),HCe=a("strong"),XOr=o("bart"),zOr=o(" \u2014 "),vee=a("a"),QOr=o("FlaxBartForCausalLM"),WOr=o(" (BART model)"),HOr=l(),$3=a("li"),UCe=a("strong"),UOr=o("bert"),JOr=o(" \u2014 "),Fee=a("a"),YOr=o("FlaxBertForCausalLM"),KOr=o(" (BERT model)"),ZOr=l(),k3=a("li"),JCe=a("strong"),eVr=o("big_bird"),oVr=o(" \u2014 "),Tee=a("a"),rVr=o("FlaxBigBirdForCausalLM"),tVr=o(" (BigBird model)"),aVr=l(),S3=a("li"),YCe=a("strong"),nVr=o("electra"),sVr=o(" \u2014 "),Mee=a("a"),lVr=o("FlaxElectraForCausalLM"),iVr=o(" (ELECTRA model)"),dVr=l(),R3=a("li"),KCe=a("strong"),cVr=o("gpt2"),fVr=o(" \u2014 "),Eee=a("a"),mVr=o("FlaxGPT2LMHeadModel"),gVr=o(" (OpenAI GPT-2 model)"),hVr=l(),P3=a("li"),ZCe=a("strong"),pVr=o("gpt_neo"),_Vr=o(" \u2014 "),Cee=a("a"),uVr=o("FlaxGPTNeoForCausalLM"),bVr=o(" (GPT Neo model)"),vVr=l(),B3=a("li"),e3e=a("strong"),FVr=o("gptj"),TVr=o(" \u2014 "),wee=a("a"),MVr=o("FlaxGPTJForCausalLM"),EVr=o(" (GPT-J model)"),CVr=l(),I3=a("li"),o3e=a("strong"),wVr=o("opt"),AVr=o(" \u2014 "),Aee=a("a"),LVr=o("FlaxOPTForCausalLM"),yVr=o(" (OPT model)"),xVr=l(),N3=a("li"),r3e=a("strong"),$Vr=o("roberta"),kVr=o(" \u2014 "),Lee=a("a"),SVr=o("FlaxRobertaForCausalLM"),RVr=o(" (RoBERTa model)"),PVr=l(),q3=a("li"),t3e=a("strong"),BVr=o("xglm"),IVr=o(" \u2014 "),yee=a("a"),NVr=o("FlaxXGLMForCausalLM"),qVr=o(" (XGLM model)"),jVr=l(),F(j3.$$.fragment),kze=l(),Zc=a("h2"),D3=a("a"),a3e=a("span"),F(_$.$$.fragment),DVr=l(),n3e=a("span"),GVr=o("FlaxAutoModelForPreTraining"),Sze=l(),_r=a("div"),F(u$.$$.fragment),OVr=l(),ef=a("p"),VVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=a("a"),XVr=o("from_pretrained()"),zVr=o(" class method or the "),$ee=a("a"),QVr=o("from_config()"),WVr=o(` class
method.`),HVr=l(),b$=a("p"),UVr=o("This class cannot be instantiated directly using "),s3e=a("code"),JVr=o("__init__()"),YVr=o(" (throws an error)."),KVr=l(),Ht=a("div"),F(v$.$$.fragment),ZVr=l(),l3e=a("p"),eXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oXr=l(),of=a("p"),rXr=o(`Note:
Loading a model from its configuration file does `),i3e=a("strong"),tXr=o("not"),aXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=a("a"),nXr=o("from_pretrained()"),sXr=o(" to load the model weights."),lXr=l(),F(G3.$$.fragment),iXr=l(),Xr=a("div"),F(F$.$$.fragment),dXr=l(),d3e=a("p"),cXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fXr=l(),Mn=a("p"),mXr=o("The model class to instantiate is selected based on the "),c3e=a("code"),gXr=o("model_type"),hXr=o(` property of the config object (either
passed as an argument or loaded from `),f3e=a("code"),pXr=o("pretrained_model_name_or_path"),_Xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=a("code"),uXr=o("pretrained_model_name_or_path"),bXr=o(":"),vXr=l(),Ee=a("ul"),O3=a("li"),g3e=a("strong"),FXr=o("albert"),TXr=o(" \u2014 "),See=a("a"),MXr=o("FlaxAlbertForPreTraining"),EXr=o(" (ALBERT model)"),CXr=l(),V3=a("li"),h3e=a("strong"),wXr=o("bart"),AXr=o(" \u2014 "),Ree=a("a"),LXr=o("FlaxBartForConditionalGeneration"),yXr=o(" (BART model)"),xXr=l(),X3=a("li"),p3e=a("strong"),$Xr=o("bert"),kXr=o(" \u2014 "),Pee=a("a"),SXr=o("FlaxBertForPreTraining"),RXr=o(" (BERT model)"),PXr=l(),z3=a("li"),_3e=a("strong"),BXr=o("big_bird"),IXr=o(" \u2014 "),Bee=a("a"),NXr=o("FlaxBigBirdForPreTraining"),qXr=o(" (BigBird model)"),jXr=l(),Q3=a("li"),u3e=a("strong"),DXr=o("electra"),GXr=o(" \u2014 "),Iee=a("a"),OXr=o("FlaxElectraForPreTraining"),VXr=o(" (ELECTRA model)"),XXr=l(),W3=a("li"),b3e=a("strong"),zXr=o("longt5"),QXr=o(" \u2014 "),Nee=a("a"),WXr=o("FlaxLongT5ForConditionalGeneration"),HXr=o(" (LongT5 model)"),UXr=l(),H3=a("li"),v3e=a("strong"),JXr=o("mbart"),YXr=o(" \u2014 "),qee=a("a"),KXr=o("FlaxMBartForConditionalGeneration"),ZXr=o(" (mBART model)"),ezr=l(),U3=a("li"),F3e=a("strong"),ozr=o("mt5"),rzr=o(" \u2014 "),jee=a("a"),tzr=o("FlaxMT5ForConditionalGeneration"),azr=o(" (MT5 model)"),nzr=l(),J3=a("li"),T3e=a("strong"),szr=o("roberta"),lzr=o(" \u2014 "),Dee=a("a"),izr=o("FlaxRobertaForMaskedLM"),dzr=o(" (RoBERTa model)"),czr=l(),Y3=a("li"),M3e=a("strong"),fzr=o("roformer"),mzr=o(" \u2014 "),Gee=a("a"),gzr=o("FlaxRoFormerForMaskedLM"),hzr=o(" (RoFormer model)"),pzr=l(),K3=a("li"),E3e=a("strong"),_zr=o("t5"),uzr=o(" \u2014 "),Oee=a("a"),bzr=o("FlaxT5ForConditionalGeneration"),vzr=o(" (T5 model)"),Fzr=l(),Z3=a("li"),C3e=a("strong"),Tzr=o("wav2vec2"),Mzr=o(" \u2014 "),Vee=a("a"),Ezr=o("FlaxWav2Vec2ForPreTraining"),Czr=o(" (Wav2Vec2 model)"),wzr=l(),e5=a("li"),w3e=a("strong"),Azr=o("xlm-roberta"),Lzr=o(" \u2014 "),Xee=a("a"),yzr=o("FlaxXLMRobertaForMaskedLM"),xzr=o(" (XLM-RoBERTa model)"),$zr=l(),F(o5.$$.fragment),Rze=l(),rf=a("h2"),r5=a("a"),A3e=a("span"),F(T$.$$.fragment),kzr=l(),L3e=a("span"),Szr=o("FlaxAutoModelForMaskedLM"),Pze=l(),ur=a("div"),F(M$.$$.fragment),Rzr=l(),tf=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=a("a"),Bzr=o("from_pretrained()"),Izr=o(" class method or the "),Qee=a("a"),Nzr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),E$=a("p"),Dzr=o("This class cannot be instantiated directly using "),y3e=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Ut=a("div"),F(C$.$$.fragment),Xzr=l(),x3e=a("p"),zzr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qzr=l(),af=a("p"),Wzr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),Hzr=o("not"),Uzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(t5.$$.fragment),Zzr=l(),zr=a("div"),F(w$.$$.fragment),eQr=l(),k3e=a("p"),oQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rQr=l(),En=a("p"),tQr=o("The model class to instantiate is selected based on the "),S3e=a("code"),aQr=o("model_type"),nQr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),sQr=o("pretrained_model_name_or_path"),lQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),iQr=o("pretrained_model_name_or_path"),dQr=o(":"),cQr=l(),$e=a("ul"),a5=a("li"),B3e=a("strong"),fQr=o("albert"),mQr=o(" \u2014 "),Hee=a("a"),gQr=o("FlaxAlbertForMaskedLM"),hQr=o(" (ALBERT model)"),pQr=l(),n5=a("li"),I3e=a("strong"),_Qr=o("bart"),uQr=o(" \u2014 "),Uee=a("a"),bQr=o("FlaxBartForConditionalGeneration"),vQr=o(" (BART model)"),FQr=l(),s5=a("li"),N3e=a("strong"),TQr=o("bert"),MQr=o(" \u2014 "),Jee=a("a"),EQr=o("FlaxBertForMaskedLM"),CQr=o(" (BERT model)"),wQr=l(),l5=a("li"),q3e=a("strong"),AQr=o("big_bird"),LQr=o(" \u2014 "),Yee=a("a"),yQr=o("FlaxBigBirdForMaskedLM"),xQr=o(" (BigBird model)"),$Qr=l(),i5=a("li"),j3e=a("strong"),kQr=o("distilbert"),SQr=o(" \u2014 "),Kee=a("a"),RQr=o("FlaxDistilBertForMaskedLM"),PQr=o(" (DistilBERT model)"),BQr=l(),d5=a("li"),D3e=a("strong"),IQr=o("electra"),NQr=o(" \u2014 "),Zee=a("a"),qQr=o("FlaxElectraForMaskedLM"),jQr=o(" (ELECTRA model)"),DQr=l(),c5=a("li"),G3e=a("strong"),GQr=o("mbart"),OQr=o(" \u2014 "),eoe=a("a"),VQr=o("FlaxMBartForConditionalGeneration"),XQr=o(" (mBART model)"),zQr=l(),f5=a("li"),O3e=a("strong"),QQr=o("roberta"),WQr=o(" \u2014 "),ooe=a("a"),HQr=o("FlaxRobertaForMaskedLM"),UQr=o(" (RoBERTa model)"),JQr=l(),m5=a("li"),V3e=a("strong"),YQr=o("roformer"),KQr=o(" \u2014 "),roe=a("a"),ZQr=o("FlaxRoFormerForMaskedLM"),eWr=o(" (RoFormer model)"),oWr=l(),g5=a("li"),X3e=a("strong"),rWr=o("xlm-roberta"),tWr=o(" \u2014 "),toe=a("a"),aWr=o("FlaxXLMRobertaForMaskedLM"),nWr=o(" (XLM-RoBERTa model)"),sWr=l(),F(h5.$$.fragment),Bze=l(),nf=a("h2"),p5=a("a"),z3e=a("span"),F(A$.$$.fragment),lWr=l(),Q3e=a("span"),iWr=o("FlaxAutoModelForSeq2SeqLM"),Ize=l(),br=a("div"),F(L$.$$.fragment),dWr=l(),sf=a("p"),cWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=a("a"),fWr=o("from_pretrained()"),mWr=o(" class method or the "),noe=a("a"),gWr=o("from_config()"),hWr=o(` class
method.`),pWr=l(),y$=a("p"),_Wr=o("This class cannot be instantiated directly using "),W3e=a("code"),uWr=o("__init__()"),bWr=o(" (throws an error)."),vWr=l(),Jt=a("div"),F(x$.$$.fragment),FWr=l(),H3e=a("p"),TWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MWr=l(),lf=a("p"),EWr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),CWr=o("not"),wWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),AWr=o("from_pretrained()"),LWr=o(" to load the model weights."),yWr=l(),F(_5.$$.fragment),xWr=l(),Qr=a("div"),F($$.$$.fragment),$Wr=l(),J3e=a("p"),kWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SWr=l(),Cn=a("p"),RWr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),PWr=o("model_type"),BWr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),IWr=o("pretrained_model_name_or_path"),NWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),qWr=o("pretrained_model_name_or_path"),jWr=o(":"),DWr=l(),ke=a("ul"),u5=a("li"),e5e=a("strong"),GWr=o("bart"),OWr=o(" \u2014 "),loe=a("a"),VWr=o("FlaxBartForConditionalGeneration"),XWr=o(" (BART model)"),zWr=l(),b5=a("li"),o5e=a("strong"),QWr=o("blenderbot"),WWr=o(" \u2014 "),ioe=a("a"),HWr=o("FlaxBlenderbotForConditionalGeneration"),UWr=o(" (Blenderbot model)"),JWr=l(),v5=a("li"),r5e=a("strong"),YWr=o("blenderbot-small"),KWr=o(" \u2014 "),doe=a("a"),ZWr=o("FlaxBlenderbotSmallForConditionalGeneration"),eHr=o(" (BlenderbotSmall model)"),oHr=l(),F5=a("li"),t5e=a("strong"),rHr=o("encoder-decoder"),tHr=o(" \u2014 "),coe=a("a"),aHr=o("FlaxEncoderDecoderModel"),nHr=o(" (Encoder decoder model)"),sHr=l(),T5=a("li"),a5e=a("strong"),lHr=o("longt5"),iHr=o(" \u2014 "),foe=a("a"),dHr=o("FlaxLongT5ForConditionalGeneration"),cHr=o(" (LongT5 model)"),fHr=l(),M5=a("li"),n5e=a("strong"),mHr=o("marian"),gHr=o(" \u2014 "),moe=a("a"),hHr=o("FlaxMarianMTModel"),pHr=o(" (Marian model)"),_Hr=l(),E5=a("li"),s5e=a("strong"),uHr=o("mbart"),bHr=o(" \u2014 "),goe=a("a"),vHr=o("FlaxMBartForConditionalGeneration"),FHr=o(" (mBART model)"),THr=l(),C5=a("li"),l5e=a("strong"),MHr=o("mt5"),EHr=o(" \u2014 "),hoe=a("a"),CHr=o("FlaxMT5ForConditionalGeneration"),wHr=o(" (MT5 model)"),AHr=l(),w5=a("li"),i5e=a("strong"),LHr=o("pegasus"),yHr=o(" \u2014 "),poe=a("a"),xHr=o("FlaxPegasusForConditionalGeneration"),$Hr=o(" (Pegasus model)"),kHr=l(),A5=a("li"),d5e=a("strong"),SHr=o("t5"),RHr=o(" \u2014 "),_oe=a("a"),PHr=o("FlaxT5ForConditionalGeneration"),BHr=o(" (T5 model)"),IHr=l(),F(L5.$$.fragment),Nze=l(),df=a("h2"),y5=a("a"),c5e=a("span"),F(k$.$$.fragment),NHr=l(),f5e=a("span"),qHr=o("FlaxAutoModelForSequenceClassification"),qze=l(),vr=a("div"),F(S$.$$.fragment),jHr=l(),cf=a("p"),DHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=a("a"),GHr=o("from_pretrained()"),OHr=o(" class method or the "),boe=a("a"),VHr=o("from_config()"),XHr=o(` class
method.`),zHr=l(),R$=a("p"),QHr=o("This class cannot be instantiated directly using "),m5e=a("code"),WHr=o("__init__()"),HHr=o(" (throws an error)."),UHr=l(),Yt=a("div"),F(P$.$$.fragment),JHr=l(),g5e=a("p"),YHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KHr=l(),ff=a("p"),ZHr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),eUr=o("not"),oUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),rUr=o("from_pretrained()"),tUr=o(" to load the model weights."),aUr=l(),F(x5.$$.fragment),nUr=l(),Wr=a("div"),F(B$.$$.fragment),sUr=l(),p5e=a("p"),lUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iUr=l(),wn=a("p"),dUr=o("The model class to instantiate is selected based on the "),_5e=a("code"),cUr=o("model_type"),fUr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),mUr=o("pretrained_model_name_or_path"),gUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),hUr=o("pretrained_model_name_or_path"),pUr=o(":"),_Ur=l(),Se=a("ul"),$5=a("li"),v5e=a("strong"),uUr=o("albert"),bUr=o(" \u2014 "),Foe=a("a"),vUr=o("FlaxAlbertForSequenceClassification"),FUr=o(" (ALBERT model)"),TUr=l(),k5=a("li"),F5e=a("strong"),MUr=o("bart"),EUr=o(" \u2014 "),Toe=a("a"),CUr=o("FlaxBartForSequenceClassification"),wUr=o(" (BART model)"),AUr=l(),S5=a("li"),T5e=a("strong"),LUr=o("bert"),yUr=o(" \u2014 "),Moe=a("a"),xUr=o("FlaxBertForSequenceClassification"),$Ur=o(" (BERT model)"),kUr=l(),R5=a("li"),M5e=a("strong"),SUr=o("big_bird"),RUr=o(" \u2014 "),Eoe=a("a"),PUr=o("FlaxBigBirdForSequenceClassification"),BUr=o(" (BigBird model)"),IUr=l(),P5=a("li"),E5e=a("strong"),NUr=o("distilbert"),qUr=o(" \u2014 "),Coe=a("a"),jUr=o("FlaxDistilBertForSequenceClassification"),DUr=o(" (DistilBERT model)"),GUr=l(),B5=a("li"),C5e=a("strong"),OUr=o("electra"),VUr=o(" \u2014 "),woe=a("a"),XUr=o("FlaxElectraForSequenceClassification"),zUr=o(" (ELECTRA model)"),QUr=l(),I5=a("li"),w5e=a("strong"),WUr=o("mbart"),HUr=o(" \u2014 "),Aoe=a("a"),UUr=o("FlaxMBartForSequenceClassification"),JUr=o(" (mBART model)"),YUr=l(),N5=a("li"),A5e=a("strong"),KUr=o("roberta"),ZUr=o(" \u2014 "),Loe=a("a"),eJr=o("FlaxRobertaForSequenceClassification"),oJr=o(" (RoBERTa model)"),rJr=l(),q5=a("li"),L5e=a("strong"),tJr=o("roformer"),aJr=o(" \u2014 "),yoe=a("a"),nJr=o("FlaxRoFormerForSequenceClassification"),sJr=o(" (RoFormer model)"),lJr=l(),j5=a("li"),y5e=a("strong"),iJr=o("xlm-roberta"),dJr=o(" \u2014 "),xoe=a("a"),cJr=o("FlaxXLMRobertaForSequenceClassification"),fJr=o(" (XLM-RoBERTa model)"),mJr=l(),F(D5.$$.fragment),jze=l(),mf=a("h2"),G5=a("a"),x5e=a("span"),F(I$.$$.fragment),gJr=l(),$5e=a("span"),hJr=o("FlaxAutoModelForQuestionAnswering"),Dze=l(),Fr=a("div"),F(N$.$$.fragment),pJr=l(),gf=a("p"),_Jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),uJr=o("from_pretrained()"),bJr=o(" class method or the "),koe=a("a"),vJr=o("from_config()"),FJr=o(` class
method.`),TJr=l(),q$=a("p"),MJr=o("This class cannot be instantiated directly using "),k5e=a("code"),EJr=o("__init__()"),CJr=o(" (throws an error)."),wJr=l(),Kt=a("div"),F(j$.$$.fragment),AJr=l(),S5e=a("p"),LJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yJr=l(),hf=a("p"),xJr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),$Jr=o("not"),kJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),SJr=o("from_pretrained()"),RJr=o(" to load the model weights."),PJr=l(),F(O5.$$.fragment),BJr=l(),Hr=a("div"),F(D$.$$.fragment),IJr=l(),P5e=a("p"),NJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qJr=l(),An=a("p"),jJr=o("The model class to instantiate is selected based on the "),B5e=a("code"),DJr=o("model_type"),GJr=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),OJr=o("pretrained_model_name_or_path"),VJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),XJr=o("pretrained_model_name_or_path"),zJr=o(":"),QJr=l(),Re=a("ul"),V5=a("li"),q5e=a("strong"),WJr=o("albert"),HJr=o(" \u2014 "),Roe=a("a"),UJr=o("FlaxAlbertForQuestionAnswering"),JJr=o(" (ALBERT model)"),YJr=l(),X5=a("li"),j5e=a("strong"),KJr=o("bart"),ZJr=o(" \u2014 "),Poe=a("a"),eYr=o("FlaxBartForQuestionAnswering"),oYr=o(" (BART model)"),rYr=l(),z5=a("li"),D5e=a("strong"),tYr=o("bert"),aYr=o(" \u2014 "),Boe=a("a"),nYr=o("FlaxBertForQuestionAnswering"),sYr=o(" (BERT model)"),lYr=l(),Q5=a("li"),G5e=a("strong"),iYr=o("big_bird"),dYr=o(" \u2014 "),Ioe=a("a"),cYr=o("FlaxBigBirdForQuestionAnswering"),fYr=o(" (BigBird model)"),mYr=l(),W5=a("li"),O5e=a("strong"),gYr=o("distilbert"),hYr=o(" \u2014 "),Noe=a("a"),pYr=o("FlaxDistilBertForQuestionAnswering"),_Yr=o(" (DistilBERT model)"),uYr=l(),H5=a("li"),V5e=a("strong"),bYr=o("electra"),vYr=o(" \u2014 "),qoe=a("a"),FYr=o("FlaxElectraForQuestionAnswering"),TYr=o(" (ELECTRA model)"),MYr=l(),U5=a("li"),X5e=a("strong"),EYr=o("mbart"),CYr=o(" \u2014 "),joe=a("a"),wYr=o("FlaxMBartForQuestionAnswering"),AYr=o(" (mBART model)"),LYr=l(),J5=a("li"),z5e=a("strong"),yYr=o("roberta"),xYr=o(" \u2014 "),Doe=a("a"),$Yr=o("FlaxRobertaForQuestionAnswering"),kYr=o(" (RoBERTa model)"),SYr=l(),Y5=a("li"),Q5e=a("strong"),RYr=o("roformer"),PYr=o(" \u2014 "),Goe=a("a"),BYr=o("FlaxRoFormerForQuestionAnswering"),IYr=o(" (RoFormer model)"),NYr=l(),K5=a("li"),W5e=a("strong"),qYr=o("xlm-roberta"),jYr=o(" \u2014 "),Ooe=a("a"),DYr=o("FlaxXLMRobertaForQuestionAnswering"),GYr=o(" (XLM-RoBERTa model)"),OYr=l(),F(Z5.$$.fragment),Gze=l(),pf=a("h2"),e0=a("a"),H5e=a("span"),F(G$.$$.fragment),VYr=l(),U5e=a("span"),XYr=o("FlaxAutoModelForTokenClassification"),Oze=l(),Tr=a("div"),F(O$.$$.fragment),zYr=l(),_f=a("p"),QYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=a("a"),WYr=o("from_pretrained()"),HYr=o(" class method or the "),Xoe=a("a"),UYr=o("from_config()"),JYr=o(` class
method.`),YYr=l(),V$=a("p"),KYr=o("This class cannot be instantiated directly using "),J5e=a("code"),ZYr=o("__init__()"),eKr=o(" (throws an error)."),oKr=l(),Zt=a("div"),F(X$.$$.fragment),rKr=l(),Y5e=a("p"),tKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aKr=l(),uf=a("p"),nKr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),sKr=o("not"),lKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),iKr=o("from_pretrained()"),dKr=o(" to load the model weights."),cKr=l(),F(o0.$$.fragment),fKr=l(),Ur=a("div"),F(z$.$$.fragment),mKr=l(),Z5e=a("p"),gKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hKr=l(),Ln=a("p"),pKr=o("The model class to instantiate is selected based on the "),e0e=a("code"),_Kr=o("model_type"),uKr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),bKr=o("pretrained_model_name_or_path"),vKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),FKr=o("pretrained_model_name_or_path"),TKr=o(":"),MKr=l(),Ve=a("ul"),r0=a("li"),t0e=a("strong"),EKr=o("albert"),CKr=o(" \u2014 "),Qoe=a("a"),wKr=o("FlaxAlbertForTokenClassification"),AKr=o(" (ALBERT model)"),LKr=l(),t0=a("li"),a0e=a("strong"),yKr=o("bert"),xKr=o(" \u2014 "),Woe=a("a"),$Kr=o("FlaxBertForTokenClassification"),kKr=o(" (BERT model)"),SKr=l(),a0=a("li"),n0e=a("strong"),RKr=o("big_bird"),PKr=o(" \u2014 "),Hoe=a("a"),BKr=o("FlaxBigBirdForTokenClassification"),IKr=o(" (BigBird model)"),NKr=l(),n0=a("li"),s0e=a("strong"),qKr=o("distilbert"),jKr=o(" \u2014 "),Uoe=a("a"),DKr=o("FlaxDistilBertForTokenClassification"),GKr=o(" (DistilBERT model)"),OKr=l(),s0=a("li"),l0e=a("strong"),VKr=o("electra"),XKr=o(" \u2014 "),Joe=a("a"),zKr=o("FlaxElectraForTokenClassification"),QKr=o(" (ELECTRA model)"),WKr=l(),l0=a("li"),i0e=a("strong"),HKr=o("roberta"),UKr=o(" \u2014 "),Yoe=a("a"),JKr=o("FlaxRobertaForTokenClassification"),YKr=o(" (RoBERTa model)"),KKr=l(),i0=a("li"),d0e=a("strong"),ZKr=o("roformer"),eZr=o(" \u2014 "),Koe=a("a"),oZr=o("FlaxRoFormerForTokenClassification"),rZr=o(" (RoFormer model)"),tZr=l(),d0=a("li"),c0e=a("strong"),aZr=o("xlm-roberta"),nZr=o(" \u2014 "),Zoe=a("a"),sZr=o("FlaxXLMRobertaForTokenClassification"),lZr=o(" (XLM-RoBERTa model)"),iZr=l(),F(c0.$$.fragment),Vze=l(),bf=a("h2"),f0=a("a"),f0e=a("span"),F(Q$.$$.fragment),dZr=l(),m0e=a("span"),cZr=o("FlaxAutoModelForMultipleChoice"),Xze=l(),Mr=a("div"),F(W$.$$.fragment),fZr=l(),vf=a("p"),mZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=a("a"),gZr=o("from_pretrained()"),hZr=o(" class method or the "),ore=a("a"),pZr=o("from_config()"),_Zr=o(` class
method.`),uZr=l(),H$=a("p"),bZr=o("This class cannot be instantiated directly using "),g0e=a("code"),vZr=o("__init__()"),FZr=o(" (throws an error)."),TZr=l(),ea=a("div"),F(U$.$$.fragment),MZr=l(),h0e=a("p"),EZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CZr=l(),Ff=a("p"),wZr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),AZr=o("not"),LZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),yZr=o("from_pretrained()"),xZr=o(" to load the model weights."),$Zr=l(),F(m0.$$.fragment),kZr=l(),Jr=a("div"),F(J$.$$.fragment),SZr=l(),_0e=a("p"),RZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PZr=l(),yn=a("p"),BZr=o("The model class to instantiate is selected based on the "),u0e=a("code"),IZr=o("model_type"),NZr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),qZr=o("pretrained_model_name_or_path"),jZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),DZr=o("pretrained_model_name_or_path"),GZr=o(":"),OZr=l(),Xe=a("ul"),g0=a("li"),F0e=a("strong"),VZr=o("albert"),XZr=o(" \u2014 "),tre=a("a"),zZr=o("FlaxAlbertForMultipleChoice"),QZr=o(" (ALBERT model)"),WZr=l(),h0=a("li"),T0e=a("strong"),HZr=o("bert"),UZr=o(" \u2014 "),are=a("a"),JZr=o("FlaxBertForMultipleChoice"),YZr=o(" (BERT model)"),KZr=l(),p0=a("li"),M0e=a("strong"),ZZr=o("big_bird"),eet=o(" \u2014 "),nre=a("a"),oet=o("FlaxBigBirdForMultipleChoice"),ret=o(" (BigBird model)"),tet=l(),_0=a("li"),E0e=a("strong"),aet=o("distilbert"),net=o(" \u2014 "),sre=a("a"),set=o("FlaxDistilBertForMultipleChoice"),iet=o(" (DistilBERT model)"),det=l(),u0=a("li"),C0e=a("strong"),cet=o("electra"),fet=o(" \u2014 "),lre=a("a"),met=o("FlaxElectraForMultipleChoice"),get=o(" (ELECTRA model)"),het=l(),b0=a("li"),w0e=a("strong"),pet=o("roberta"),_et=o(" \u2014 "),ire=a("a"),uet=o("FlaxRobertaForMultipleChoice"),bet=o(" (RoBERTa model)"),vet=l(),v0=a("li"),A0e=a("strong"),Fet=o("roformer"),Tet=o(" \u2014 "),dre=a("a"),Met=o("FlaxRoFormerForMultipleChoice"),Eet=o(" (RoFormer model)"),Cet=l(),F0=a("li"),L0e=a("strong"),wet=o("xlm-roberta"),Aet=o(" \u2014 "),cre=a("a"),Let=o("FlaxXLMRobertaForMultipleChoice"),yet=o(" (XLM-RoBERTa model)"),xet=l(),F(T0.$$.fragment),zze=l(),Tf=a("h2"),M0=a("a"),y0e=a("span"),F(Y$.$$.fragment),$et=l(),x0e=a("span"),ket=o("FlaxAutoModelForNextSentencePrediction"),Qze=l(),Er=a("div"),F(K$.$$.fragment),Set=l(),Mf=a("p"),Ret=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fre=a("a"),Pet=o("from_pretrained()"),Bet=o(" class method or the "),mre=a("a"),Iet=o("from_config()"),Net=o(` class
method.`),qet=l(),Z$=a("p"),jet=o("This class cannot be instantiated directly using "),$0e=a("code"),Det=o("__init__()"),Get=o(" (throws an error)."),Oet=l(),oa=a("div"),F(ek.$$.fragment),Vet=l(),k0e=a("p"),Xet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zet=l(),Ef=a("p"),Qet=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),Wet=o("not"),Het=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),Uet=o("from_pretrained()"),Jet=o(" to load the model weights."),Yet=l(),F(E0.$$.fragment),Ket=l(),Yr=a("div"),F(ok.$$.fragment),Zet=l(),R0e=a("p"),eot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oot=l(),xn=a("p"),rot=o("The model class to instantiate is selected based on the "),P0e=a("code"),tot=o("model_type"),aot=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),not=o("pretrained_model_name_or_path"),sot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),lot=o("pretrained_model_name_or_path"),iot=o(":"),dot=l(),N0e=a("ul"),C0=a("li"),q0e=a("strong"),cot=o("bert"),fot=o(" \u2014 "),hre=a("a"),mot=o("FlaxBertForNextSentencePrediction"),got=o(" (BERT model)"),hot=l(),F(w0.$$.fragment),Wze=l(),Cf=a("h2"),A0=a("a"),j0e=a("span"),F(rk.$$.fragment),pot=l(),D0e=a("span"),_ot=o("FlaxAutoModelForImageClassification"),Hze=l(),Cr=a("div"),F(tk.$$.fragment),uot=l(),wf=a("p"),bot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pre=a("a"),vot=o("from_pretrained()"),Fot=o(" class method or the "),_re=a("a"),Tot=o("from_config()"),Mot=o(` class
method.`),Eot=l(),ak=a("p"),Cot=o("This class cannot be instantiated directly using "),G0e=a("code"),wot=o("__init__()"),Aot=o(" (throws an error)."),Lot=l(),ra=a("div"),F(nk.$$.fragment),yot=l(),O0e=a("p"),xot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$ot=l(),Af=a("p"),kot=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),Sot=o("not"),Rot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),Pot=o("from_pretrained()"),Bot=o(" to load the model weights."),Iot=l(),F(L0.$$.fragment),Not=l(),Kr=a("div"),F(sk.$$.fragment),qot=l(),X0e=a("p"),jot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dot=l(),$n=a("p"),Got=o("The model class to instantiate is selected based on the "),z0e=a("code"),Oot=o("model_type"),Vot=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),Xot=o("pretrained_model_name_or_path"),zot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),Qot=o("pretrained_model_name_or_path"),Wot=o(":"),Hot=l(),lk=a("ul"),y0=a("li"),H0e=a("strong"),Uot=o("beit"),Jot=o(" \u2014 "),bre=a("a"),Yot=o("FlaxBeitForImageClassification"),Kot=o(" (BEiT model)"),Zot=l(),x0=a("li"),U0e=a("strong"),ert=o("vit"),ort=o(" \u2014 "),vre=a("a"),rrt=o("FlaxViTForImageClassification"),trt=o(" (ViT model)"),art=l(),F($0.$$.fragment),Uze=l(),Lf=a("h2"),k0=a("a"),J0e=a("span"),F(ik.$$.fragment),nrt=l(),Y0e=a("span"),srt=o("FlaxAutoModelForVision2Seq"),Jze=l(),wr=a("div"),F(dk.$$.fragment),lrt=l(),yf=a("p"),irt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=a("a"),drt=o("from_pretrained()"),crt=o(" class method or the "),Tre=a("a"),frt=o("from_config()"),mrt=o(` class
method.`),grt=l(),ck=a("p"),hrt=o("This class cannot be instantiated directly using "),K0e=a("code"),prt=o("__init__()"),_rt=o(" (throws an error)."),urt=l(),ta=a("div"),F(fk.$$.fragment),brt=l(),Z0e=a("p"),vrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Frt=l(),xf=a("p"),Trt=o(`Note:
Loading a model from its configuration file does `),ewe=a("strong"),Mrt=o("not"),Ert=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),Crt=o("from_pretrained()"),wrt=o(" to load the model weights."),Art=l(),F(S0.$$.fragment),Lrt=l(),Zr=a("div"),F(mk.$$.fragment),yrt=l(),owe=a("p"),xrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$rt=l(),kn=a("p"),krt=o("The model class to instantiate is selected based on the "),rwe=a("code"),Srt=o("model_type"),Rrt=o(` property of the config object (either
passed as an argument or loaded from `),twe=a("code"),Prt=o("pretrained_model_name_or_path"),Brt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=a("code"),Irt=o("pretrained_model_name_or_path"),Nrt=o(":"),qrt=l(),nwe=a("ul"),R0=a("li"),swe=a("strong"),jrt=o("vision-encoder-decoder"),Drt=o(" \u2014 "),Ere=a("a"),Grt=o("FlaxVisionEncoderDecoderModel"),Ort=o(" (Vision Encoder decoder model)"),Vrt=l(),F(P0.$$.fragment),this.h()},l(f){const u=bQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var gk=s(p);m=n(gk,"A",{id:!0,class:!0,href:!0});var lwe=s(m);_=n(lwe,"SPAN",{});var iwe=s(_);T(d.$$.fragment,iwe),iwe.forEach(t),lwe.forEach(t),h=i(gk),Eo=n(gk,"SPAN",{});var dwe=s(Eo);Ai=r(dwe,"Auto Classes"),dwe.forEach(t),gk.forEach(t),Rf=i(f),st=n(f,"P",{});var hk=s(st);Li=r(hk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(hk,"CODE",{});var cwe=s(yi);ZA=r(cwe,"from_pretrained()"),cwe.forEach(t),Pf=r(hk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),hk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);xi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var fwe=s(Rn);eL=r(fwe,"AutoConfig"),fwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var mwe=s(Bn);oL=r(mwe,"AutoModel"),mwe.forEach(t),$i=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var gwe=s(In);rL=r(gwe,"AutoTokenizer"),gwe.forEach(t),ki=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Bf=i(f),T(ka.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var pk=s(Ae);RS=r(pk,"will create a model that is an instance of "),Si=n(pk,"A",{href:!0});var hwe=s(Si);PS=r(hwe,"BertModel"),hwe.forEach(t),BS=r(pk,"."),pk.forEach(t),Co=i(f),Sa=n(f,"P",{});var _k=s(Sa);IS=r(_k,"There is one class of "),If=n(_k,"CODE",{});var pwe=s(If);NS=r(pwe,"AutoModel"),pwe.forEach(t),lHe=r(_k," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_k.forEach(t),QVe=i(f),Ri=n(f,"H2",{class:!0});var uk=s(Ri);Nf=n(uk,"A",{id:!0,class:!0,href:!0});var _we=s(Nf);bae=n(_we,"SPAN",{});var uwe=s(bae);T(tL.$$.fragment,uwe),uwe.forEach(t),_we.forEach(t),iHe=i(uk),vae=n(uk,"SPAN",{});var bwe=s(vae);dHe=r(bwe,"Extending the Auto Classes"),bwe.forEach(t),uk.forEach(t),WVe=i(f),Nn=n(f,"P",{});var $f=s(Nn);cHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=n($f,"CODE",{});var vwe=s(Fae);fHe=r(vwe,"NewModel"),vwe.forEach(t),mHe=r($f,", make sure you have a "),Tae=n($f,"CODE",{});var Fwe=s(Tae);gHe=r(Fwe,"NewModelConfig"),Fwe.forEach(t),hHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),HVe=i(f),T(aL.$$.fragment,f),UVe=i(f),qS=n(f,"P",{});var Twe=s(qS);pHe=r(Twe,"You will then be able to use the auto classes like you would usually do!"),Twe.forEach(t),JVe=i(f),T(qf.$$.fragment,f),YVe=i(f),Pi=n(f,"H2",{class:!0});var bk=s(Pi);jf=n(bk,"A",{id:!0,class:!0,href:!0});var Mwe=s(jf);Mae=n(Mwe,"SPAN",{});var Ewe=s(Mae);T(nL.$$.fragment,Ewe),Ewe.forEach(t),Mwe.forEach(t),_He=i(bk),Eae=n(bk,"SPAN",{});var Cwe=s(Eae);uHe=r(Cwe,"AutoConfig"),Cwe.forEach(t),bk.forEach(t),KVe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(sL.$$.fragment,at),bHe=i(at),lL=n(at,"P",{});var vk=s(lL);vHe=r(vk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jS=n(vk,"A",{href:!0});var wwe=s(jS);FHe=r(wwe,"from_pretrained()"),wwe.forEach(t),THe=r(vk," class method."),vk.forEach(t),MHe=i(at),iL=n(at,"P",{});var Fk=s(iL);EHe=r(Fk,"This class cannot be instantiated directly using "),Cae=n(Fk,"CODE",{});var Awe=s(Cae);CHe=r(Awe,"__init__()"),Awe.forEach(t),wHe=r(Fk," (throws an error)."),Fk.forEach(t),AHe=i(at),Ar=n(at,"DIV",{class:!0});var nt=s(Ar);T(dL.$$.fragment,nt),LHe=i(nt),wae=n(nt,"P",{});var Lwe=s(wae);yHe=r(Lwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Lwe.forEach(t),xHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);$He=r(kf,"The configuration class to instantiate is selected based on the "),Aae=n(kf,"CODE",{});var ywe=s(Aae);kHe=r(ywe,"model_type"),ywe.forEach(t),SHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=n(kf,"CODE",{});var xwe=s(Lae);RHe=r(xwe,"pretrained_model_name_or_path"),xwe.forEach(t),PHe=r(kf,":"),kf.forEach(t),BHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var B0=s(Df);yae=n(B0,"STRONG",{});var $we=s(yae);IHe=r($we,"albert"),$we.forEach(t),NHe=r(B0," \u2014 "),DS=n(B0,"A",{href:!0});var kwe=s(DS);qHe=r(kwe,"AlbertConfig"),kwe.forEach(t),jHe=r(B0," (ALBERT model)"),B0.forEach(t),DHe=i(L),Gf=n(L,"LI",{});var I0=s(Gf);xae=n(I0,"STRONG",{});var Swe=s(xae);GHe=r(Swe,"bart"),Swe.forEach(t),OHe=r(I0," \u2014 "),GS=n(I0,"A",{href:!0});var Rwe=s(GS);VHe=r(Rwe,"BartConfig"),Rwe.forEach(t),XHe=r(I0," (BART model)"),I0.forEach(t),zHe=i(L),Of=n(L,"LI",{});var N0=s(Of);$ae=n(N0,"STRONG",{});var Pwe=s($ae);QHe=r(Pwe,"beit"),Pwe.forEach(t),WHe=r(N0," \u2014 "),OS=n(N0,"A",{href:!0});var Bwe=s(OS);HHe=r(Bwe,"BeitConfig"),Bwe.forEach(t),UHe=r(N0," (BEiT model)"),N0.forEach(t),JHe=i(L),Vf=n(L,"LI",{});var q0=s(Vf);kae=n(q0,"STRONG",{});var Iwe=s(kae);YHe=r(Iwe,"bert"),Iwe.forEach(t),KHe=r(q0," \u2014 "),VS=n(q0,"A",{href:!0});var Nwe=s(VS);ZHe=r(Nwe,"BertConfig"),Nwe.forEach(t),eUe=r(q0," (BERT model)"),q0.forEach(t),oUe=i(L),Xf=n(L,"LI",{});var j0=s(Xf);Sae=n(j0,"STRONG",{});var qwe=s(Sae);rUe=r(qwe,"bert-generation"),qwe.forEach(t),tUe=r(j0," \u2014 "),XS=n(j0,"A",{href:!0});var jwe=s(XS);aUe=r(jwe,"BertGenerationConfig"),jwe.forEach(t),nUe=r(j0," (Bert Generation model)"),j0.forEach(t),sUe=i(L),zf=n(L,"LI",{});var D0=s(zf);Rae=n(D0,"STRONG",{});var Dwe=s(Rae);lUe=r(Dwe,"big_bird"),Dwe.forEach(t),iUe=r(D0," \u2014 "),zS=n(D0,"A",{href:!0});var Gwe=s(zS);dUe=r(Gwe,"BigBirdConfig"),Gwe.forEach(t),cUe=r(D0," (BigBird model)"),D0.forEach(t),fUe=i(L),Qf=n(L,"LI",{});var G0=s(Qf);Pae=n(G0,"STRONG",{});var Owe=s(Pae);mUe=r(Owe,"bigbird_pegasus"),Owe.forEach(t),gUe=r(G0," \u2014 "),QS=n(G0,"A",{href:!0});var Vwe=s(QS);hUe=r(Vwe,"BigBirdPegasusConfig"),Vwe.forEach(t),pUe=r(G0," (BigBird-Pegasus model)"),G0.forEach(t),_Ue=i(L),Wf=n(L,"LI",{});var O0=s(Wf);Bae=n(O0,"STRONG",{});var Xwe=s(Bae);uUe=r(Xwe,"blenderbot"),Xwe.forEach(t),bUe=r(O0," \u2014 "),WS=n(O0,"A",{href:!0});var zwe=s(WS);vUe=r(zwe,"BlenderbotConfig"),zwe.forEach(t),FUe=r(O0," (Blenderbot model)"),O0.forEach(t),TUe=i(L),Hf=n(L,"LI",{});var V0=s(Hf);Iae=n(V0,"STRONG",{});var Qwe=s(Iae);MUe=r(Qwe,"blenderbot-small"),Qwe.forEach(t),EUe=r(V0," \u2014 "),HS=n(V0,"A",{href:!0});var Wwe=s(HS);CUe=r(Wwe,"BlenderbotSmallConfig"),Wwe.forEach(t),wUe=r(V0," (BlenderbotSmall model)"),V0.forEach(t),AUe=i(L),Uf=n(L,"LI",{});var X0=s(Uf);Nae=n(X0,"STRONG",{});var Hwe=s(Nae);LUe=r(Hwe,"bloom"),Hwe.forEach(t),yUe=r(X0," \u2014 "),US=n(X0,"A",{href:!0});var Uwe=s(US);xUe=r(Uwe,"BloomConfig"),Uwe.forEach(t),$Ue=r(X0," (BLOOM model)"),X0.forEach(t),kUe=i(L),Jf=n(L,"LI",{});var z0=s(Jf);qae=n(z0,"STRONG",{});var Jwe=s(qae);SUe=r(Jwe,"camembert"),Jwe.forEach(t),RUe=r(z0," \u2014 "),JS=n(z0,"A",{href:!0});var Ywe=s(JS);PUe=r(Ywe,"CamembertConfig"),Ywe.forEach(t),BUe=r(z0," (CamemBERT model)"),z0.forEach(t),IUe=i(L),Yf=n(L,"LI",{});var Q0=s(Yf);jae=n(Q0,"STRONG",{});var Kwe=s(jae);NUe=r(Kwe,"canine"),Kwe.forEach(t),qUe=r(Q0," \u2014 "),YS=n(Q0,"A",{href:!0});var Zwe=s(YS);jUe=r(Zwe,"CanineConfig"),Zwe.forEach(t),DUe=r(Q0," (CANINE model)"),Q0.forEach(t),GUe=i(L),Kf=n(L,"LI",{});var W0=s(Kf);Dae=n(W0,"STRONG",{});var eAe=s(Dae);OUe=r(eAe,"clip"),eAe.forEach(t),VUe=r(W0," \u2014 "),KS=n(W0,"A",{href:!0});var oAe=s(KS);XUe=r(oAe,"CLIPConfig"),oAe.forEach(t),zUe=r(W0," (CLIP model)"),W0.forEach(t),QUe=i(L),Zf=n(L,"LI",{});var H0=s(Zf);Gae=n(H0,"STRONG",{});var rAe=s(Gae);WUe=r(rAe,"codegen"),rAe.forEach(t),HUe=r(H0," \u2014 "),ZS=n(H0,"A",{href:!0});var tAe=s(ZS);UUe=r(tAe,"CodeGenConfig"),tAe.forEach(t),JUe=r(H0," (CodeGen model)"),H0.forEach(t),YUe=i(L),em=n(L,"LI",{});var U0=s(em);Oae=n(U0,"STRONG",{});var aAe=s(Oae);KUe=r(aAe,"convbert"),aAe.forEach(t),ZUe=r(U0," \u2014 "),eR=n(U0,"A",{href:!0});var nAe=s(eR);eJe=r(nAe,"ConvBertConfig"),nAe.forEach(t),oJe=r(U0," (ConvBERT model)"),U0.forEach(t),rJe=i(L),om=n(L,"LI",{});var J0=s(om);Vae=n(J0,"STRONG",{});var sAe=s(Vae);tJe=r(sAe,"convnext"),sAe.forEach(t),aJe=r(J0," \u2014 "),oR=n(J0,"A",{href:!0});var lAe=s(oR);nJe=r(lAe,"ConvNextConfig"),lAe.forEach(t),sJe=r(J0," (ConvNeXT model)"),J0.forEach(t),lJe=i(L),rm=n(L,"LI",{});var Y0=s(rm);Xae=n(Y0,"STRONG",{});var iAe=s(Xae);iJe=r(iAe,"ctrl"),iAe.forEach(t),dJe=r(Y0," \u2014 "),rR=n(Y0,"A",{href:!0});var dAe=s(rR);cJe=r(dAe,"CTRLConfig"),dAe.forEach(t),fJe=r(Y0," (CTRL model)"),Y0.forEach(t),mJe=i(L),tm=n(L,"LI",{});var K0=s(tm);zae=n(K0,"STRONG",{});var cAe=s(zae);gJe=r(cAe,"cvt"),cAe.forEach(t),hJe=r(K0," \u2014 "),tR=n(K0,"A",{href:!0});var fAe=s(tR);pJe=r(fAe,"CvtConfig"),fAe.forEach(t),_Je=r(K0," (CvT model)"),K0.forEach(t),uJe=i(L),am=n(L,"LI",{});var Z0=s(am);Qae=n(Z0,"STRONG",{});var mAe=s(Qae);bJe=r(mAe,"data2vec-audio"),mAe.forEach(t),vJe=r(Z0," \u2014 "),aR=n(Z0,"A",{href:!0});var gAe=s(aR);FJe=r(gAe,"Data2VecAudioConfig"),gAe.forEach(t),TJe=r(Z0," (Data2VecAudio model)"),Z0.forEach(t),MJe=i(L),nm=n(L,"LI",{});var ew=s(nm);Wae=n(ew,"STRONG",{});var hAe=s(Wae);EJe=r(hAe,"data2vec-text"),hAe.forEach(t),CJe=r(ew," \u2014 "),nR=n(ew,"A",{href:!0});var pAe=s(nR);wJe=r(pAe,"Data2VecTextConfig"),pAe.forEach(t),AJe=r(ew," (Data2VecText model)"),ew.forEach(t),LJe=i(L),sm=n(L,"LI",{});var ow=s(sm);Hae=n(ow,"STRONG",{});var _Ae=s(Hae);yJe=r(_Ae,"data2vec-vision"),_Ae.forEach(t),xJe=r(ow," \u2014 "),sR=n(ow,"A",{href:!0});var uAe=s(sR);$Je=r(uAe,"Data2VecVisionConfig"),uAe.forEach(t),kJe=r(ow," (Data2VecVision model)"),ow.forEach(t),SJe=i(L),lm=n(L,"LI",{});var rw=s(lm);Uae=n(rw,"STRONG",{});var bAe=s(Uae);RJe=r(bAe,"deberta"),bAe.forEach(t),PJe=r(rw," \u2014 "),lR=n(rw,"A",{href:!0});var vAe=s(lR);BJe=r(vAe,"DebertaConfig"),vAe.forEach(t),IJe=r(rw," (DeBERTa model)"),rw.forEach(t),NJe=i(L),im=n(L,"LI",{});var tw=s(im);Jae=n(tw,"STRONG",{});var FAe=s(Jae);qJe=r(FAe,"deberta-v2"),FAe.forEach(t),jJe=r(tw," \u2014 "),iR=n(tw,"A",{href:!0});var TAe=s(iR);DJe=r(TAe,"DebertaV2Config"),TAe.forEach(t),GJe=r(tw," (DeBERTa-v2 model)"),tw.forEach(t),OJe=i(L),dm=n(L,"LI",{});var aw=s(dm);Yae=n(aw,"STRONG",{});var zrt=s(Yae);VJe=r(zrt,"decision_transformer"),zrt.forEach(t),XJe=r(aw," \u2014 "),dR=n(aw,"A",{href:!0});var Qrt=s(dR);zJe=r(Qrt,"DecisionTransformerConfig"),Qrt.forEach(t),QJe=r(aw," (Decision Transformer model)"),aw.forEach(t),WJe=i(L),cm=n(L,"LI",{});var MAe=s(cm);Kae=n(MAe,"STRONG",{});var Wrt=s(Kae);HJe=r(Wrt,"deit"),Wrt.forEach(t),UJe=r(MAe," \u2014 "),cR=n(MAe,"A",{href:!0});var Hrt=s(cR);JJe=r(Hrt,"DeiTConfig"),Hrt.forEach(t),YJe=r(MAe," (DeiT model)"),MAe.forEach(t),KJe=i(L),fm=n(L,"LI",{});var EAe=s(fm);Zae=n(EAe,"STRONG",{});var Urt=s(Zae);ZJe=r(Urt,"detr"),Urt.forEach(t),eYe=r(EAe," \u2014 "),fR=n(EAe,"A",{href:!0});var Jrt=s(fR);oYe=r(Jrt,"DetrConfig"),Jrt.forEach(t),rYe=r(EAe," (DETR model)"),EAe.forEach(t),tYe=i(L),mm=n(L,"LI",{});var CAe=s(mm);ene=n(CAe,"STRONG",{});var Yrt=s(ene);aYe=r(Yrt,"distilbert"),Yrt.forEach(t),nYe=r(CAe," \u2014 "),mR=n(CAe,"A",{href:!0});var Krt=s(mR);sYe=r(Krt,"DistilBertConfig"),Krt.forEach(t),lYe=r(CAe," (DistilBERT model)"),CAe.forEach(t),iYe=i(L),gm=n(L,"LI",{});var wAe=s(gm);one=n(wAe,"STRONG",{});var Zrt=s(one);dYe=r(Zrt,"dpr"),Zrt.forEach(t),cYe=r(wAe," \u2014 "),gR=n(wAe,"A",{href:!0});var ett=s(gR);fYe=r(ett,"DPRConfig"),ett.forEach(t),mYe=r(wAe," (DPR model)"),wAe.forEach(t),gYe=i(L),hm=n(L,"LI",{});var AAe=s(hm);rne=n(AAe,"STRONG",{});var ott=s(rne);hYe=r(ott,"dpt"),ott.forEach(t),pYe=r(AAe," \u2014 "),hR=n(AAe,"A",{href:!0});var rtt=s(hR);_Ye=r(rtt,"DPTConfig"),rtt.forEach(t),uYe=r(AAe," (DPT model)"),AAe.forEach(t),bYe=i(L),pm=n(L,"LI",{});var LAe=s(pm);tne=n(LAe,"STRONG",{});var ttt=s(tne);vYe=r(ttt,"electra"),ttt.forEach(t),FYe=r(LAe," \u2014 "),pR=n(LAe,"A",{href:!0});var att=s(pR);TYe=r(att,"ElectraConfig"),att.forEach(t),MYe=r(LAe," (ELECTRA model)"),LAe.forEach(t),EYe=i(L),_m=n(L,"LI",{});var yAe=s(_m);ane=n(yAe,"STRONG",{});var ntt=s(ane);CYe=r(ntt,"encoder-decoder"),ntt.forEach(t),wYe=r(yAe," \u2014 "),_R=n(yAe,"A",{href:!0});var stt=s(_R);AYe=r(stt,"EncoderDecoderConfig"),stt.forEach(t),LYe=r(yAe," (Encoder decoder model)"),yAe.forEach(t),yYe=i(L),um=n(L,"LI",{});var xAe=s(um);nne=n(xAe,"STRONG",{});var ltt=s(nne);xYe=r(ltt,"flaubert"),ltt.forEach(t),$Ye=r(xAe," \u2014 "),uR=n(xAe,"A",{href:!0});var itt=s(uR);kYe=r(itt,"FlaubertConfig"),itt.forEach(t),SYe=r(xAe," (FlauBERT model)"),xAe.forEach(t),RYe=i(L),bm=n(L,"LI",{});var $Ae=s(bm);sne=n($Ae,"STRONG",{});var dtt=s(sne);PYe=r(dtt,"flava"),dtt.forEach(t),BYe=r($Ae," \u2014 "),bR=n($Ae,"A",{href:!0});var ctt=s(bR);IYe=r(ctt,"FlavaConfig"),ctt.forEach(t),NYe=r($Ae," (FLAVA model)"),$Ae.forEach(t),qYe=i(L),vm=n(L,"LI",{});var kAe=s(vm);lne=n(kAe,"STRONG",{});var ftt=s(lne);jYe=r(ftt,"fnet"),ftt.forEach(t),DYe=r(kAe," \u2014 "),vR=n(kAe,"A",{href:!0});var mtt=s(vR);GYe=r(mtt,"FNetConfig"),mtt.forEach(t),OYe=r(kAe," (FNet model)"),kAe.forEach(t),VYe=i(L),Fm=n(L,"LI",{});var SAe=s(Fm);ine=n(SAe,"STRONG",{});var gtt=s(ine);XYe=r(gtt,"fsmt"),gtt.forEach(t),zYe=r(SAe," \u2014 "),FR=n(SAe,"A",{href:!0});var htt=s(FR);QYe=r(htt,"FSMTConfig"),htt.forEach(t),WYe=r(SAe," (FairSeq Machine-Translation model)"),SAe.forEach(t),HYe=i(L),Tm=n(L,"LI",{});var RAe=s(Tm);dne=n(RAe,"STRONG",{});var ptt=s(dne);UYe=r(ptt,"funnel"),ptt.forEach(t),JYe=r(RAe," \u2014 "),TR=n(RAe,"A",{href:!0});var _tt=s(TR);YYe=r(_tt,"FunnelConfig"),_tt.forEach(t),KYe=r(RAe," (Funnel Transformer model)"),RAe.forEach(t),ZYe=i(L),Mm=n(L,"LI",{});var PAe=s(Mm);cne=n(PAe,"STRONG",{});var utt=s(cne);eKe=r(utt,"glpn"),utt.forEach(t),oKe=r(PAe," \u2014 "),MR=n(PAe,"A",{href:!0});var btt=s(MR);rKe=r(btt,"GLPNConfig"),btt.forEach(t),tKe=r(PAe," (GLPN model)"),PAe.forEach(t),aKe=i(L),Em=n(L,"LI",{});var BAe=s(Em);fne=n(BAe,"STRONG",{});var vtt=s(fne);nKe=r(vtt,"gpt2"),vtt.forEach(t),sKe=r(BAe," \u2014 "),ER=n(BAe,"A",{href:!0});var Ftt=s(ER);lKe=r(Ftt,"GPT2Config"),Ftt.forEach(t),iKe=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),dKe=i(L),Cm=n(L,"LI",{});var IAe=s(Cm);mne=n(IAe,"STRONG",{});var Ttt=s(mne);cKe=r(Ttt,"gpt_neo"),Ttt.forEach(t),fKe=r(IAe," \u2014 "),CR=n(IAe,"A",{href:!0});var Mtt=s(CR);mKe=r(Mtt,"GPTNeoConfig"),Mtt.forEach(t),gKe=r(IAe," (GPT Neo model)"),IAe.forEach(t),hKe=i(L),wm=n(L,"LI",{});var NAe=s(wm);gne=n(NAe,"STRONG",{});var Ett=s(gne);pKe=r(Ett,"gpt_neox"),Ett.forEach(t),_Ke=r(NAe," \u2014 "),wR=n(NAe,"A",{href:!0});var Ctt=s(wR);uKe=r(Ctt,"GPTNeoXConfig"),Ctt.forEach(t),bKe=r(NAe," (GPT NeoX model)"),NAe.forEach(t),vKe=i(L),Am=n(L,"LI",{});var qAe=s(Am);hne=n(qAe,"STRONG",{});var wtt=s(hne);FKe=r(wtt,"gptj"),wtt.forEach(t),TKe=r(qAe," \u2014 "),AR=n(qAe,"A",{href:!0});var Att=s(AR);MKe=r(Att,"GPTJConfig"),Att.forEach(t),EKe=r(qAe," (GPT-J model)"),qAe.forEach(t),CKe=i(L),Lm=n(L,"LI",{});var jAe=s(Lm);pne=n(jAe,"STRONG",{});var Ltt=s(pne);wKe=r(Ltt,"groupvit"),Ltt.forEach(t),AKe=r(jAe," \u2014 "),LR=n(jAe,"A",{href:!0});var ytt=s(LR);LKe=r(ytt,"GroupViTConfig"),ytt.forEach(t),yKe=r(jAe," (GroupViT model)"),jAe.forEach(t),xKe=i(L),ym=n(L,"LI",{});var DAe=s(ym);_ne=n(DAe,"STRONG",{});var xtt=s(_ne);$Ke=r(xtt,"hubert"),xtt.forEach(t),kKe=r(DAe," \u2014 "),yR=n(DAe,"A",{href:!0});var $tt=s(yR);SKe=r($tt,"HubertConfig"),$tt.forEach(t),RKe=r(DAe," (Hubert model)"),DAe.forEach(t),PKe=i(L),xm=n(L,"LI",{});var GAe=s(xm);une=n(GAe,"STRONG",{});var ktt=s(une);BKe=r(ktt,"ibert"),ktt.forEach(t),IKe=r(GAe," \u2014 "),xR=n(GAe,"A",{href:!0});var Stt=s(xR);NKe=r(Stt,"IBertConfig"),Stt.forEach(t),qKe=r(GAe," (I-BERT model)"),GAe.forEach(t),jKe=i(L),$m=n(L,"LI",{});var OAe=s($m);bne=n(OAe,"STRONG",{});var Rtt=s(bne);DKe=r(Rtt,"imagegpt"),Rtt.forEach(t),GKe=r(OAe," \u2014 "),$R=n(OAe,"A",{href:!0});var Ptt=s($R);OKe=r(Ptt,"ImageGPTConfig"),Ptt.forEach(t),VKe=r(OAe," (ImageGPT model)"),OAe.forEach(t),XKe=i(L),km=n(L,"LI",{});var VAe=s(km);vne=n(VAe,"STRONG",{});var Btt=s(vne);zKe=r(Btt,"jukebox"),Btt.forEach(t),QKe=r(VAe," \u2014 "),kR=n(VAe,"A",{href:!0});var Itt=s(kR);WKe=r(Itt,"JukeboxConfig"),Itt.forEach(t),HKe=r(VAe," (Jukebox model)"),VAe.forEach(t),UKe=i(L),Sm=n(L,"LI",{});var XAe=s(Sm);Fne=n(XAe,"STRONG",{});var Ntt=s(Fne);JKe=r(Ntt,"layoutlm"),Ntt.forEach(t),YKe=r(XAe," \u2014 "),SR=n(XAe,"A",{href:!0});var qtt=s(SR);KKe=r(qtt,"LayoutLMConfig"),qtt.forEach(t),ZKe=r(XAe," (LayoutLM model)"),XAe.forEach(t),eZe=i(L),Rm=n(L,"LI",{});var zAe=s(Rm);Tne=n(zAe,"STRONG",{});var jtt=s(Tne);oZe=r(jtt,"layoutlmv2"),jtt.forEach(t),rZe=r(zAe," \u2014 "),RR=n(zAe,"A",{href:!0});var Dtt=s(RR);tZe=r(Dtt,"LayoutLMv2Config"),Dtt.forEach(t),aZe=r(zAe," (LayoutLMv2 model)"),zAe.forEach(t),nZe=i(L),Pm=n(L,"LI",{});var QAe=s(Pm);Mne=n(QAe,"STRONG",{});var Gtt=s(Mne);sZe=r(Gtt,"layoutlmv3"),Gtt.forEach(t),lZe=r(QAe," \u2014 "),PR=n(QAe,"A",{href:!0});var Ott=s(PR);iZe=r(Ott,"LayoutLMv3Config"),Ott.forEach(t),dZe=r(QAe," (LayoutLMv3 model)"),QAe.forEach(t),cZe=i(L),Bm=n(L,"LI",{});var WAe=s(Bm);Ene=n(WAe,"STRONG",{});var Vtt=s(Ene);fZe=r(Vtt,"led"),Vtt.forEach(t),mZe=r(WAe," \u2014 "),BR=n(WAe,"A",{href:!0});var Xtt=s(BR);gZe=r(Xtt,"LEDConfig"),Xtt.forEach(t),hZe=r(WAe," (LED model)"),WAe.forEach(t),pZe=i(L),Im=n(L,"LI",{});var HAe=s(Im);Cne=n(HAe,"STRONG",{});var ztt=s(Cne);_Ze=r(ztt,"levit"),ztt.forEach(t),uZe=r(HAe," \u2014 "),IR=n(HAe,"A",{href:!0});var Qtt=s(IR);bZe=r(Qtt,"LevitConfig"),Qtt.forEach(t),vZe=r(HAe," (LeViT model)"),HAe.forEach(t),FZe=i(L),Nm=n(L,"LI",{});var UAe=s(Nm);wne=n(UAe,"STRONG",{});var Wtt=s(wne);TZe=r(Wtt,"longformer"),Wtt.forEach(t),MZe=r(UAe," \u2014 "),NR=n(UAe,"A",{href:!0});var Htt=s(NR);EZe=r(Htt,"LongformerConfig"),Htt.forEach(t),CZe=r(UAe," (Longformer model)"),UAe.forEach(t),wZe=i(L),qm=n(L,"LI",{});var JAe=s(qm);Ane=n(JAe,"STRONG",{});var Utt=s(Ane);AZe=r(Utt,"longt5"),Utt.forEach(t),LZe=r(JAe," \u2014 "),qR=n(JAe,"A",{href:!0});var Jtt=s(qR);yZe=r(Jtt,"LongT5Config"),Jtt.forEach(t),xZe=r(JAe," (LongT5 model)"),JAe.forEach(t),$Ze=i(L),jm=n(L,"LI",{});var YAe=s(jm);Lne=n(YAe,"STRONG",{});var Ytt=s(Lne);kZe=r(Ytt,"luke"),Ytt.forEach(t),SZe=r(YAe," \u2014 "),jR=n(YAe,"A",{href:!0});var Ktt=s(jR);RZe=r(Ktt,"LukeConfig"),Ktt.forEach(t),PZe=r(YAe," (LUKE model)"),YAe.forEach(t),BZe=i(L),Dm=n(L,"LI",{});var KAe=s(Dm);yne=n(KAe,"STRONG",{});var Ztt=s(yne);IZe=r(Ztt,"lxmert"),Ztt.forEach(t),NZe=r(KAe," \u2014 "),DR=n(KAe,"A",{href:!0});var eat=s(DR);qZe=r(eat,"LxmertConfig"),eat.forEach(t),jZe=r(KAe," (LXMERT model)"),KAe.forEach(t),DZe=i(L),Gm=n(L,"LI",{});var ZAe=s(Gm);xne=n(ZAe,"STRONG",{});var oat=s(xne);GZe=r(oat,"m2m_100"),oat.forEach(t),OZe=r(ZAe," \u2014 "),GR=n(ZAe,"A",{href:!0});var rat=s(GR);VZe=r(rat,"M2M100Config"),rat.forEach(t),XZe=r(ZAe," (M2M100 model)"),ZAe.forEach(t),zZe=i(L),Om=n(L,"LI",{});var eLe=s(Om);$ne=n(eLe,"STRONG",{});var tat=s($ne);QZe=r(tat,"marian"),tat.forEach(t),WZe=r(eLe," \u2014 "),OR=n(eLe,"A",{href:!0});var aat=s(OR);HZe=r(aat,"MarianConfig"),aat.forEach(t),UZe=r(eLe," (Marian model)"),eLe.forEach(t),JZe=i(L),Vm=n(L,"LI",{});var oLe=s(Vm);kne=n(oLe,"STRONG",{});var nat=s(kne);YZe=r(nat,"maskformer"),nat.forEach(t),KZe=r(oLe," \u2014 "),VR=n(oLe,"A",{href:!0});var sat=s(VR);ZZe=r(sat,"MaskFormerConfig"),sat.forEach(t),eeo=r(oLe," (MaskFormer model)"),oLe.forEach(t),oeo=i(L),Xm=n(L,"LI",{});var rLe=s(Xm);Sne=n(rLe,"STRONG",{});var lat=s(Sne);reo=r(lat,"mbart"),lat.forEach(t),teo=r(rLe," \u2014 "),XR=n(rLe,"A",{href:!0});var iat=s(XR);aeo=r(iat,"MBartConfig"),iat.forEach(t),neo=r(rLe," (mBART model)"),rLe.forEach(t),seo=i(L),zm=n(L,"LI",{});var tLe=s(zm);Rne=n(tLe,"STRONG",{});var dat=s(Rne);leo=r(dat,"mctct"),dat.forEach(t),ieo=r(tLe," \u2014 "),zR=n(tLe,"A",{href:!0});var cat=s(zR);deo=r(cat,"MCTCTConfig"),cat.forEach(t),ceo=r(tLe," (M-CTC-T model)"),tLe.forEach(t),feo=i(L),Qm=n(L,"LI",{});var aLe=s(Qm);Pne=n(aLe,"STRONG",{});var fat=s(Pne);meo=r(fat,"megatron-bert"),fat.forEach(t),geo=r(aLe," \u2014 "),QR=n(aLe,"A",{href:!0});var mat=s(QR);heo=r(mat,"MegatronBertConfig"),mat.forEach(t),peo=r(aLe," (Megatron-BERT model)"),aLe.forEach(t),_eo=i(L),Wm=n(L,"LI",{});var nLe=s(Wm);Bne=n(nLe,"STRONG",{});var gat=s(Bne);ueo=r(gat,"mobilebert"),gat.forEach(t),beo=r(nLe," \u2014 "),WR=n(nLe,"A",{href:!0});var hat=s(WR);veo=r(hat,"MobileBertConfig"),hat.forEach(t),Feo=r(nLe," (MobileBERT model)"),nLe.forEach(t),Teo=i(L),Hm=n(L,"LI",{});var sLe=s(Hm);Ine=n(sLe,"STRONG",{});var pat=s(Ine);Meo=r(pat,"mobilevit"),pat.forEach(t),Eeo=r(sLe," \u2014 "),HR=n(sLe,"A",{href:!0});var _at=s(HR);Ceo=r(_at,"MobileViTConfig"),_at.forEach(t),weo=r(sLe," (MobileViT model)"),sLe.forEach(t),Aeo=i(L),Um=n(L,"LI",{});var lLe=s(Um);Nne=n(lLe,"STRONG",{});var uat=s(Nne);Leo=r(uat,"mpnet"),uat.forEach(t),yeo=r(lLe," \u2014 "),UR=n(lLe,"A",{href:!0});var bat=s(UR);xeo=r(bat,"MPNetConfig"),bat.forEach(t),$eo=r(lLe," (MPNet model)"),lLe.forEach(t),keo=i(L),Jm=n(L,"LI",{});var iLe=s(Jm);qne=n(iLe,"STRONG",{});var vat=s(qne);Seo=r(vat,"mt5"),vat.forEach(t),Reo=r(iLe," \u2014 "),JR=n(iLe,"A",{href:!0});var Fat=s(JR);Peo=r(Fat,"MT5Config"),Fat.forEach(t),Beo=r(iLe," (MT5 model)"),iLe.forEach(t),Ieo=i(L),Ym=n(L,"LI",{});var dLe=s(Ym);jne=n(dLe,"STRONG",{});var Tat=s(jne);Neo=r(Tat,"mvp"),Tat.forEach(t),qeo=r(dLe," \u2014 "),YR=n(dLe,"A",{href:!0});var Mat=s(YR);jeo=r(Mat,"MvpConfig"),Mat.forEach(t),Deo=r(dLe," (MVP model)"),dLe.forEach(t),Geo=i(L),Km=n(L,"LI",{});var cLe=s(Km);Dne=n(cLe,"STRONG",{});var Eat=s(Dne);Oeo=r(Eat,"nezha"),Eat.forEach(t),Veo=r(cLe," \u2014 "),KR=n(cLe,"A",{href:!0});var Cat=s(KR);Xeo=r(Cat,"NezhaConfig"),Cat.forEach(t),zeo=r(cLe," (Nezha model)"),cLe.forEach(t),Qeo=i(L),Zm=n(L,"LI",{});var fLe=s(Zm);Gne=n(fLe,"STRONG",{});var wat=s(Gne);Weo=r(wat,"nystromformer"),wat.forEach(t),Heo=r(fLe," \u2014 "),ZR=n(fLe,"A",{href:!0});var Aat=s(ZR);Ueo=r(Aat,"NystromformerConfig"),Aat.forEach(t),Jeo=r(fLe," (Nystr\xF6mformer model)"),fLe.forEach(t),Yeo=i(L),eg=n(L,"LI",{});var mLe=s(eg);One=n(mLe,"STRONG",{});var Lat=s(One);Keo=r(Lat,"openai-gpt"),Lat.forEach(t),Zeo=r(mLe," \u2014 "),eP=n(mLe,"A",{href:!0});var yat=s(eP);eoo=r(yat,"OpenAIGPTConfig"),yat.forEach(t),ooo=r(mLe," (OpenAI GPT model)"),mLe.forEach(t),roo=i(L),og=n(L,"LI",{});var gLe=s(og);Vne=n(gLe,"STRONG",{});var xat=s(Vne);too=r(xat,"opt"),xat.forEach(t),aoo=r(gLe," \u2014 "),oP=n(gLe,"A",{href:!0});var $at=s(oP);noo=r($at,"OPTConfig"),$at.forEach(t),soo=r(gLe," (OPT model)"),gLe.forEach(t),loo=i(L),rg=n(L,"LI",{});var hLe=s(rg);Xne=n(hLe,"STRONG",{});var kat=s(Xne);ioo=r(kat,"pegasus"),kat.forEach(t),doo=r(hLe," \u2014 "),rP=n(hLe,"A",{href:!0});var Sat=s(rP);coo=r(Sat,"PegasusConfig"),Sat.forEach(t),foo=r(hLe," (Pegasus model)"),hLe.forEach(t),moo=i(L),tg=n(L,"LI",{});var pLe=s(tg);zne=n(pLe,"STRONG",{});var Rat=s(zne);goo=r(Rat,"perceiver"),Rat.forEach(t),hoo=r(pLe," \u2014 "),tP=n(pLe,"A",{href:!0});var Pat=s(tP);poo=r(Pat,"PerceiverConfig"),Pat.forEach(t),_oo=r(pLe," (Perceiver model)"),pLe.forEach(t),uoo=i(L),ag=n(L,"LI",{});var _Le=s(ag);Qne=n(_Le,"STRONG",{});var Bat=s(Qne);boo=r(Bat,"plbart"),Bat.forEach(t),voo=r(_Le," \u2014 "),aP=n(_Le,"A",{href:!0});var Iat=s(aP);Foo=r(Iat,"PLBartConfig"),Iat.forEach(t),Too=r(_Le," (PLBart model)"),_Le.forEach(t),Moo=i(L),ng=n(L,"LI",{});var uLe=s(ng);Wne=n(uLe,"STRONG",{});var Nat=s(Wne);Eoo=r(Nat,"poolformer"),Nat.forEach(t),Coo=r(uLe," \u2014 "),nP=n(uLe,"A",{href:!0});var qat=s(nP);woo=r(qat,"PoolFormerConfig"),qat.forEach(t),Aoo=r(uLe," (PoolFormer model)"),uLe.forEach(t),Loo=i(L),sg=n(L,"LI",{});var bLe=s(sg);Hne=n(bLe,"STRONG",{});var jat=s(Hne);yoo=r(jat,"prophetnet"),jat.forEach(t),xoo=r(bLe," \u2014 "),sP=n(bLe,"A",{href:!0});var Dat=s(sP);$oo=r(Dat,"ProphetNetConfig"),Dat.forEach(t),koo=r(bLe," (ProphetNet model)"),bLe.forEach(t),Soo=i(L),lg=n(L,"LI",{});var vLe=s(lg);Une=n(vLe,"STRONG",{});var Gat=s(Une);Roo=r(Gat,"qdqbert"),Gat.forEach(t),Poo=r(vLe," \u2014 "),lP=n(vLe,"A",{href:!0});var Oat=s(lP);Boo=r(Oat,"QDQBertConfig"),Oat.forEach(t),Ioo=r(vLe," (QDQBert model)"),vLe.forEach(t),Noo=i(L),ig=n(L,"LI",{});var FLe=s(ig);Jne=n(FLe,"STRONG",{});var Vat=s(Jne);qoo=r(Vat,"rag"),Vat.forEach(t),joo=r(FLe," \u2014 "),iP=n(FLe,"A",{href:!0});var Xat=s(iP);Doo=r(Xat,"RagConfig"),Xat.forEach(t),Goo=r(FLe," (RAG model)"),FLe.forEach(t),Ooo=i(L),dg=n(L,"LI",{});var TLe=s(dg);Yne=n(TLe,"STRONG",{});var zat=s(Yne);Voo=r(zat,"realm"),zat.forEach(t),Xoo=r(TLe," \u2014 "),dP=n(TLe,"A",{href:!0});var Qat=s(dP);zoo=r(Qat,"RealmConfig"),Qat.forEach(t),Qoo=r(TLe," (REALM model)"),TLe.forEach(t),Woo=i(L),cg=n(L,"LI",{});var MLe=s(cg);Kne=n(MLe,"STRONG",{});var Wat=s(Kne);Hoo=r(Wat,"reformer"),Wat.forEach(t),Uoo=r(MLe," \u2014 "),cP=n(MLe,"A",{href:!0});var Hat=s(cP);Joo=r(Hat,"ReformerConfig"),Hat.forEach(t),Yoo=r(MLe," (Reformer model)"),MLe.forEach(t),Koo=i(L),fg=n(L,"LI",{});var ELe=s(fg);Zne=n(ELe,"STRONG",{});var Uat=s(Zne);Zoo=r(Uat,"regnet"),Uat.forEach(t),ero=r(ELe," \u2014 "),fP=n(ELe,"A",{href:!0});var Jat=s(fP);oro=r(Jat,"RegNetConfig"),Jat.forEach(t),rro=r(ELe," (RegNet model)"),ELe.forEach(t),tro=i(L),mg=n(L,"LI",{});var CLe=s(mg);ese=n(CLe,"STRONG",{});var Yat=s(ese);aro=r(Yat,"rembert"),Yat.forEach(t),nro=r(CLe," \u2014 "),mP=n(CLe,"A",{href:!0});var Kat=s(mP);sro=r(Kat,"RemBertConfig"),Kat.forEach(t),lro=r(CLe," (RemBERT model)"),CLe.forEach(t),iro=i(L),gg=n(L,"LI",{});var wLe=s(gg);ose=n(wLe,"STRONG",{});var Zat=s(ose);dro=r(Zat,"resnet"),Zat.forEach(t),cro=r(wLe," \u2014 "),gP=n(wLe,"A",{href:!0});var ent=s(gP);fro=r(ent,"ResNetConfig"),ent.forEach(t),mro=r(wLe," (ResNet model)"),wLe.forEach(t),gro=i(L),hg=n(L,"LI",{});var ALe=s(hg);rse=n(ALe,"STRONG",{});var ont=s(rse);hro=r(ont,"retribert"),ont.forEach(t),pro=r(ALe," \u2014 "),hP=n(ALe,"A",{href:!0});var rnt=s(hP);_ro=r(rnt,"RetriBertConfig"),rnt.forEach(t),uro=r(ALe," (RetriBERT model)"),ALe.forEach(t),bro=i(L),pg=n(L,"LI",{});var LLe=s(pg);tse=n(LLe,"STRONG",{});var tnt=s(tse);vro=r(tnt,"roberta"),tnt.forEach(t),Fro=r(LLe," \u2014 "),pP=n(LLe,"A",{href:!0});var ant=s(pP);Tro=r(ant,"RobertaConfig"),ant.forEach(t),Mro=r(LLe," (RoBERTa model)"),LLe.forEach(t),Ero=i(L),_g=n(L,"LI",{});var yLe=s(_g);ase=n(yLe,"STRONG",{});var nnt=s(ase);Cro=r(nnt,"roformer"),nnt.forEach(t),wro=r(yLe," \u2014 "),_P=n(yLe,"A",{href:!0});var snt=s(_P);Aro=r(snt,"RoFormerConfig"),snt.forEach(t),Lro=r(yLe," (RoFormer model)"),yLe.forEach(t),yro=i(L),ug=n(L,"LI",{});var xLe=s(ug);nse=n(xLe,"STRONG",{});var lnt=s(nse);xro=r(lnt,"segformer"),lnt.forEach(t),$ro=r(xLe," \u2014 "),uP=n(xLe,"A",{href:!0});var int=s(uP);kro=r(int,"SegformerConfig"),int.forEach(t),Sro=r(xLe," (SegFormer model)"),xLe.forEach(t),Rro=i(L),bg=n(L,"LI",{});var $Le=s(bg);sse=n($Le,"STRONG",{});var dnt=s(sse);Pro=r(dnt,"sew"),dnt.forEach(t),Bro=r($Le," \u2014 "),bP=n($Le,"A",{href:!0});var cnt=s(bP);Iro=r(cnt,"SEWConfig"),cnt.forEach(t),Nro=r($Le," (SEW model)"),$Le.forEach(t),qro=i(L),vg=n(L,"LI",{});var kLe=s(vg);lse=n(kLe,"STRONG",{});var fnt=s(lse);jro=r(fnt,"sew-d"),fnt.forEach(t),Dro=r(kLe," \u2014 "),vP=n(kLe,"A",{href:!0});var mnt=s(vP);Gro=r(mnt,"SEWDConfig"),mnt.forEach(t),Oro=r(kLe," (SEW-D model)"),kLe.forEach(t),Vro=i(L),Fg=n(L,"LI",{});var SLe=s(Fg);ise=n(SLe,"STRONG",{});var gnt=s(ise);Xro=r(gnt,"speech-encoder-decoder"),gnt.forEach(t),zro=r(SLe," \u2014 "),FP=n(SLe,"A",{href:!0});var hnt=s(FP);Qro=r(hnt,"SpeechEncoderDecoderConfig"),hnt.forEach(t),Wro=r(SLe," (Speech Encoder decoder model)"),SLe.forEach(t),Hro=i(L),Tg=n(L,"LI",{});var RLe=s(Tg);dse=n(RLe,"STRONG",{});var pnt=s(dse);Uro=r(pnt,"speech_to_text"),pnt.forEach(t),Jro=r(RLe," \u2014 "),TP=n(RLe,"A",{href:!0});var _nt=s(TP);Yro=r(_nt,"Speech2TextConfig"),_nt.forEach(t),Kro=r(RLe," (Speech2Text model)"),RLe.forEach(t),Zro=i(L),Mg=n(L,"LI",{});var PLe=s(Mg);cse=n(PLe,"STRONG",{});var unt=s(cse);eto=r(unt,"speech_to_text_2"),unt.forEach(t),oto=r(PLe," \u2014 "),MP=n(PLe,"A",{href:!0});var bnt=s(MP);rto=r(bnt,"Speech2Text2Config"),bnt.forEach(t),tto=r(PLe," (Speech2Text2 model)"),PLe.forEach(t),ato=i(L),Eg=n(L,"LI",{});var BLe=s(Eg);fse=n(BLe,"STRONG",{});var vnt=s(fse);nto=r(vnt,"splinter"),vnt.forEach(t),sto=r(BLe," \u2014 "),EP=n(BLe,"A",{href:!0});var Fnt=s(EP);lto=r(Fnt,"SplinterConfig"),Fnt.forEach(t),ito=r(BLe," (Splinter model)"),BLe.forEach(t),dto=i(L),Cg=n(L,"LI",{});var ILe=s(Cg);mse=n(ILe,"STRONG",{});var Tnt=s(mse);cto=r(Tnt,"squeezebert"),Tnt.forEach(t),fto=r(ILe," \u2014 "),CP=n(ILe,"A",{href:!0});var Mnt=s(CP);mto=r(Mnt,"SqueezeBertConfig"),Mnt.forEach(t),gto=r(ILe," (SqueezeBERT model)"),ILe.forEach(t),hto=i(L),wg=n(L,"LI",{});var NLe=s(wg);gse=n(NLe,"STRONG",{});var Ent=s(gse);pto=r(Ent,"swin"),Ent.forEach(t),_to=r(NLe," \u2014 "),wP=n(NLe,"A",{href:!0});var Cnt=s(wP);uto=r(Cnt,"SwinConfig"),Cnt.forEach(t),bto=r(NLe," (Swin Transformer model)"),NLe.forEach(t),vto=i(L),Ag=n(L,"LI",{});var qLe=s(Ag);hse=n(qLe,"STRONG",{});var wnt=s(hse);Fto=r(wnt,"t5"),wnt.forEach(t),Tto=r(qLe," \u2014 "),AP=n(qLe,"A",{href:!0});var Ant=s(AP);Mto=r(Ant,"T5Config"),Ant.forEach(t),Eto=r(qLe," (T5 model)"),qLe.forEach(t),Cto=i(L),Lg=n(L,"LI",{});var jLe=s(Lg);pse=n(jLe,"STRONG",{});var Lnt=s(pse);wto=r(Lnt,"tapas"),Lnt.forEach(t),Ato=r(jLe," \u2014 "),LP=n(jLe,"A",{href:!0});var ynt=s(LP);Lto=r(ynt,"TapasConfig"),ynt.forEach(t),yto=r(jLe," (TAPAS model)"),jLe.forEach(t),xto=i(L),yg=n(L,"LI",{});var DLe=s(yg);_se=n(DLe,"STRONG",{});var xnt=s(_se);$to=r(xnt,"trajectory_transformer"),xnt.forEach(t),kto=r(DLe," \u2014 "),yP=n(DLe,"A",{href:!0});var $nt=s(yP);Sto=r($nt,"TrajectoryTransformerConfig"),$nt.forEach(t),Rto=r(DLe," (Trajectory Transformer model)"),DLe.forEach(t),Pto=i(L),xg=n(L,"LI",{});var GLe=s(xg);use=n(GLe,"STRONG",{});var knt=s(use);Bto=r(knt,"transfo-xl"),knt.forEach(t),Ito=r(GLe," \u2014 "),xP=n(GLe,"A",{href:!0});var Snt=s(xP);Nto=r(Snt,"TransfoXLConfig"),Snt.forEach(t),qto=r(GLe," (Transformer-XL model)"),GLe.forEach(t),jto=i(L),$g=n(L,"LI",{});var OLe=s($g);bse=n(OLe,"STRONG",{});var Rnt=s(bse);Dto=r(Rnt,"trocr"),Rnt.forEach(t),Gto=r(OLe," \u2014 "),$P=n(OLe,"A",{href:!0});var Pnt=s($P);Oto=r(Pnt,"TrOCRConfig"),Pnt.forEach(t),Vto=r(OLe," (TrOCR model)"),OLe.forEach(t),Xto=i(L),kg=n(L,"LI",{});var VLe=s(kg);vse=n(VLe,"STRONG",{});var Bnt=s(vse);zto=r(Bnt,"unispeech"),Bnt.forEach(t),Qto=r(VLe," \u2014 "),kP=n(VLe,"A",{href:!0});var Int=s(kP);Wto=r(Int,"UniSpeechConfig"),Int.forEach(t),Hto=r(VLe," (UniSpeech model)"),VLe.forEach(t),Uto=i(L),Sg=n(L,"LI",{});var XLe=s(Sg);Fse=n(XLe,"STRONG",{});var Nnt=s(Fse);Jto=r(Nnt,"unispeech-sat"),Nnt.forEach(t),Yto=r(XLe," \u2014 "),SP=n(XLe,"A",{href:!0});var qnt=s(SP);Kto=r(qnt,"UniSpeechSatConfig"),qnt.forEach(t),Zto=r(XLe," (UniSpeechSat model)"),XLe.forEach(t),eao=i(L),Rg=n(L,"LI",{});var zLe=s(Rg);Tse=n(zLe,"STRONG",{});var jnt=s(Tse);oao=r(jnt,"van"),jnt.forEach(t),rao=r(zLe," \u2014 "),RP=n(zLe,"A",{href:!0});var Dnt=s(RP);tao=r(Dnt,"VanConfig"),Dnt.forEach(t),aao=r(zLe," (VAN model)"),zLe.forEach(t),nao=i(L),Pg=n(L,"LI",{});var QLe=s(Pg);Mse=n(QLe,"STRONG",{});var Gnt=s(Mse);sao=r(Gnt,"vilt"),Gnt.forEach(t),lao=r(QLe," \u2014 "),PP=n(QLe,"A",{href:!0});var Ont=s(PP);iao=r(Ont,"ViltConfig"),Ont.forEach(t),dao=r(QLe," (ViLT model)"),QLe.forEach(t),cao=i(L),Bg=n(L,"LI",{});var WLe=s(Bg);Ese=n(WLe,"STRONG",{});var Vnt=s(Ese);fao=r(Vnt,"vision-encoder-decoder"),Vnt.forEach(t),mao=r(WLe," \u2014 "),BP=n(WLe,"A",{href:!0});var Xnt=s(BP);gao=r(Xnt,"VisionEncoderDecoderConfig"),Xnt.forEach(t),hao=r(WLe," (Vision Encoder decoder model)"),WLe.forEach(t),pao=i(L),Ig=n(L,"LI",{});var HLe=s(Ig);Cse=n(HLe,"STRONG",{});var znt=s(Cse);_ao=r(znt,"vision-text-dual-encoder"),znt.forEach(t),uao=r(HLe," \u2014 "),IP=n(HLe,"A",{href:!0});var Qnt=s(IP);bao=r(Qnt,"VisionTextDualEncoderConfig"),Qnt.forEach(t),vao=r(HLe," (VisionTextDualEncoder model)"),HLe.forEach(t),Fao=i(L),Ng=n(L,"LI",{});var ULe=s(Ng);wse=n(ULe,"STRONG",{});var Wnt=s(wse);Tao=r(Wnt,"visual_bert"),Wnt.forEach(t),Mao=r(ULe," \u2014 "),NP=n(ULe,"A",{href:!0});var Hnt=s(NP);Eao=r(Hnt,"VisualBertConfig"),Hnt.forEach(t),Cao=r(ULe," (VisualBERT model)"),ULe.forEach(t),wao=i(L),qg=n(L,"LI",{});var JLe=s(qg);Ase=n(JLe,"STRONG",{});var Unt=s(Ase);Aao=r(Unt,"vit"),Unt.forEach(t),Lao=r(JLe," \u2014 "),qP=n(JLe,"A",{href:!0});var Jnt=s(qP);yao=r(Jnt,"ViTConfig"),Jnt.forEach(t),xao=r(JLe," (ViT model)"),JLe.forEach(t),$ao=i(L),jg=n(L,"LI",{});var YLe=s(jg);Lse=n(YLe,"STRONG",{});var Ynt=s(Lse);kao=r(Ynt,"vit_mae"),Ynt.forEach(t),Sao=r(YLe," \u2014 "),jP=n(YLe,"A",{href:!0});var Knt=s(jP);Rao=r(Knt,"ViTMAEConfig"),Knt.forEach(t),Pao=r(YLe," (ViTMAE model)"),YLe.forEach(t),Bao=i(L),Dg=n(L,"LI",{});var KLe=s(Dg);yse=n(KLe,"STRONG",{});var Znt=s(yse);Iao=r(Znt,"wav2vec2"),Znt.forEach(t),Nao=r(KLe," \u2014 "),DP=n(KLe,"A",{href:!0});var est=s(DP);qao=r(est,"Wav2Vec2Config"),est.forEach(t),jao=r(KLe," (Wav2Vec2 model)"),KLe.forEach(t),Dao=i(L),Gg=n(L,"LI",{});var ZLe=s(Gg);xse=n(ZLe,"STRONG",{});var ost=s(xse);Gao=r(ost,"wav2vec2-conformer"),ost.forEach(t),Oao=r(ZLe," \u2014 "),GP=n(ZLe,"A",{href:!0});var rst=s(GP);Vao=r(rst,"Wav2Vec2ConformerConfig"),rst.forEach(t),Xao=r(ZLe," (Wav2Vec2-Conformer model)"),ZLe.forEach(t),zao=i(L),Og=n(L,"LI",{});var eye=s(Og);$se=n(eye,"STRONG",{});var tst=s($se);Qao=r(tst,"wavlm"),tst.forEach(t),Wao=r(eye," \u2014 "),OP=n(eye,"A",{href:!0});var ast=s(OP);Hao=r(ast,"WavLMConfig"),ast.forEach(t),Uao=r(eye," (WavLM model)"),eye.forEach(t),Jao=i(L),Vg=n(L,"LI",{});var oye=s(Vg);kse=n(oye,"STRONG",{});var nst=s(kse);Yao=r(nst,"xglm"),nst.forEach(t),Kao=r(oye," \u2014 "),VP=n(oye,"A",{href:!0});var sst=s(VP);Zao=r(sst,"XGLMConfig"),sst.forEach(t),eno=r(oye," (XGLM model)"),oye.forEach(t),ono=i(L),Xg=n(L,"LI",{});var rye=s(Xg);Sse=n(rye,"STRONG",{});var lst=s(Sse);rno=r(lst,"xlm"),lst.forEach(t),tno=r(rye," \u2014 "),XP=n(rye,"A",{href:!0});var ist=s(XP);ano=r(ist,"XLMConfig"),ist.forEach(t),nno=r(rye," (XLM model)"),rye.forEach(t),sno=i(L),zg=n(L,"LI",{});var tye=s(zg);Rse=n(tye,"STRONG",{});var dst=s(Rse);lno=r(dst,"xlm-prophetnet"),dst.forEach(t),ino=r(tye," \u2014 "),zP=n(tye,"A",{href:!0});var cst=s(zP);dno=r(cst,"XLMProphetNetConfig"),cst.forEach(t),cno=r(tye," (XLM-ProphetNet model)"),tye.forEach(t),fno=i(L),Qg=n(L,"LI",{});var aye=s(Qg);Pse=n(aye,"STRONG",{});var fst=s(Pse);mno=r(fst,"xlm-roberta"),fst.forEach(t),gno=r(aye," \u2014 "),QP=n(aye,"A",{href:!0});var mst=s(QP);hno=r(mst,"XLMRobertaConfig"),mst.forEach(t),pno=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),_no=i(L),Wg=n(L,"LI",{});var nye=s(Wg);Bse=n(nye,"STRONG",{});var gst=s(Bse);uno=r(gst,"xlm-roberta-xl"),gst.forEach(t),bno=r(nye," \u2014 "),WP=n(nye,"A",{href:!0});var hst=s(WP);vno=r(hst,"XLMRobertaXLConfig"),hst.forEach(t),Fno=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),Tno=i(L),Hg=n(L,"LI",{});var sye=s(Hg);Ise=n(sye,"STRONG",{});var pst=s(Ise);Mno=r(pst,"xlnet"),pst.forEach(t),Eno=r(sye," \u2014 "),HP=n(sye,"A",{href:!0});var _st=s(HP);Cno=r(_st,"XLNetConfig"),_st.forEach(t),wno=r(sye," (XLNet model)"),sye.forEach(t),Ano=i(L),Ug=n(L,"LI",{});var lye=s(Ug);Nse=n(lye,"STRONG",{});var ust=s(Nse);Lno=r(ust,"yolos"),ust.forEach(t),yno=r(lye," \u2014 "),UP=n(lye,"A",{href:!0});var bst=s(UP);xno=r(bst,"YolosConfig"),bst.forEach(t),$no=r(lye," (YOLOS model)"),lye.forEach(t),kno=i(L),Jg=n(L,"LI",{});var iye=s(Jg);qse=n(iye,"STRONG",{});var vst=s(qse);Sno=r(vst,"yoso"),vst.forEach(t),Rno=r(iye," \u2014 "),JP=n(iye,"A",{href:!0});var Fst=s(JP);Pno=r(Fst,"YosoConfig"),Fst.forEach(t),Bno=r(iye," (YOSO model)"),iye.forEach(t),L.forEach(t),Ino=i(nt),T(Yg.$$.fragment,nt),nt.forEach(t),Nno=i(at),Kg=n(at,"DIV",{class:!0});var Kze=s(Kg);T(cL.$$.fragment,Kze),qno=i(Kze),jse=n(Kze,"P",{});var Tst=s(jse);jno=r(Tst,"Register a new configuration for this class."),Tst.forEach(t),Kze.forEach(t),at.forEach(t),ZVe=i(f),Ii=n(f,"H2",{class:!0});var Zze=s(Ii);Zg=n(Zze,"A",{id:!0,class:!0,href:!0});var Mst=s(Zg);Dse=n(Mst,"SPAN",{});var Est=s(Dse);T(fL.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),Dno=i(Zze),Gse=n(Zze,"SPAN",{});var Cst=s(Gse);Gno=r(Cst,"AutoTokenizer"),Cst.forEach(t),Zze.forEach(t),eXe=i(f),Ao=n(f,"DIV",{class:!0});var Js=s(Ao);T(mL.$$.fragment,Js),Ono=i(Js),gL=n(Js,"P",{});var eQe=s(gL);Vno=r(eQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),YP=n(eQe,"A",{href:!0});var wst=s(YP);Xno=r(wst,"AutoTokenizer.from_pretrained()"),wst.forEach(t),zno=r(eQe," class method."),eQe.forEach(t),Qno=i(Js),hL=n(Js,"P",{});var oQe=s(hL);Wno=r(oQe,"This class cannot be instantiated directly using "),Ose=n(oQe,"CODE",{});var Ast=s(Ose);Hno=r(Ast,"__init__()"),Ast.forEach(t),Uno=r(oQe," (throws an error)."),oQe.forEach(t),Jno=i(Js),Lr=n(Js,"DIV",{class:!0});var Ys=s(Lr);T(pL.$$.fragment,Ys),Yno=i(Ys),Vse=n(Ys,"P",{});var Lst=s(Vse);Kno=r(Lst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Lst.forEach(t),Zno=i(Ys),Ra=n(Ys,"P",{});var nw=s(Ra);eso=r(nw,"The tokenizer class to instantiate is selected based on the "),Xse=n(nw,"CODE",{});var yst=s(Xse);oso=r(yst,"model_type"),yst.forEach(t),rso=r(nw,` property of the config object (either
passed as an argument or loaded from `),zse=n(nw,"CODE",{});var xst=s(zse);tso=r(xst,"pretrained_model_name_or_path"),xst.forEach(t),aso=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=n(nw,"CODE",{});var $st=s(Qse);nso=r($st,"pretrained_model_name_or_path"),$st.forEach(t),sso=r(nw,":"),nw.forEach(t),lso=i(Ys),k=n(Ys,"UL",{});var S=s(k);qn=n(S,"LI",{});var Tk=s(qn);Wse=n(Tk,"STRONG",{});var kst=s(Wse);iso=r(kst,"albert"),kst.forEach(t),dso=r(Tk," \u2014 "),KP=n(Tk,"A",{href:!0});var Sst=s(KP);cso=r(Sst,"AlbertTokenizer"),Sst.forEach(t),fso=r(Tk," or "),ZP=n(Tk,"A",{href:!0});var Rst=s(ZP);mso=r(Rst,"AlbertTokenizerFast"),Rst.forEach(t),gso=r(Tk," (ALBERT model)"),Tk.forEach(t),hso=i(S),jn=n(S,"LI",{});var Mk=s(jn);Hse=n(Mk,"STRONG",{});var Pst=s(Hse);pso=r(Pst,"bart"),Pst.forEach(t),_so=r(Mk," \u2014 "),eB=n(Mk,"A",{href:!0});var Bst=s(eB);uso=r(Bst,"BartTokenizer"),Bst.forEach(t),bso=r(Mk," or "),oB=n(Mk,"A",{href:!0});var Ist=s(oB);vso=r(Ist,"BartTokenizerFast"),Ist.forEach(t),Fso=r(Mk," (BART model)"),Mk.forEach(t),Tso=i(S),Dn=n(S,"LI",{});var Ek=s(Dn);Use=n(Ek,"STRONG",{});var Nst=s(Use);Mso=r(Nst,"barthez"),Nst.forEach(t),Eso=r(Ek," \u2014 "),rB=n(Ek,"A",{href:!0});var qst=s(rB);Cso=r(qst,"BarthezTokenizer"),qst.forEach(t),wso=r(Ek," or "),tB=n(Ek,"A",{href:!0});var jst=s(tB);Aso=r(jst,"BarthezTokenizerFast"),jst.forEach(t),Lso=r(Ek," (BARThez model)"),Ek.forEach(t),yso=i(S),eh=n(S,"LI",{});var dye=s(eh);Jse=n(dye,"STRONG",{});var Dst=s(Jse);xso=r(Dst,"bartpho"),Dst.forEach(t),$so=r(dye," \u2014 "),aB=n(dye,"A",{href:!0});var Gst=s(aB);kso=r(Gst,"BartphoTokenizer"),Gst.forEach(t),Sso=r(dye," (BARTpho model)"),dye.forEach(t),Rso=i(S),Gn=n(S,"LI",{});var Ck=s(Gn);Yse=n(Ck,"STRONG",{});var Ost=s(Yse);Pso=r(Ost,"bert"),Ost.forEach(t),Bso=r(Ck," \u2014 "),nB=n(Ck,"A",{href:!0});var Vst=s(nB);Iso=r(Vst,"BertTokenizer"),Vst.forEach(t),Nso=r(Ck," or "),sB=n(Ck,"A",{href:!0});var Xst=s(sB);qso=r(Xst,"BertTokenizerFast"),Xst.forEach(t),jso=r(Ck," (BERT model)"),Ck.forEach(t),Dso=i(S),oh=n(S,"LI",{});var cye=s(oh);Kse=n(cye,"STRONG",{});var zst=s(Kse);Gso=r(zst,"bert-generation"),zst.forEach(t),Oso=r(cye," \u2014 "),lB=n(cye,"A",{href:!0});var Qst=s(lB);Vso=r(Qst,"BertGenerationTokenizer"),Qst.forEach(t),Xso=r(cye," (Bert Generation model)"),cye.forEach(t),zso=i(S),rh=n(S,"LI",{});var fye=s(rh);Zse=n(fye,"STRONG",{});var Wst=s(Zse);Qso=r(Wst,"bert-japanese"),Wst.forEach(t),Wso=r(fye," \u2014 "),iB=n(fye,"A",{href:!0});var Hst=s(iB);Hso=r(Hst,"BertJapaneseTokenizer"),Hst.forEach(t),Uso=r(fye," (BertJapanese model)"),fye.forEach(t),Jso=i(S),th=n(S,"LI",{});var mye=s(th);ele=n(mye,"STRONG",{});var Ust=s(ele);Yso=r(Ust,"bertweet"),Ust.forEach(t),Kso=r(mye," \u2014 "),dB=n(mye,"A",{href:!0});var Jst=s(dB);Zso=r(Jst,"BertweetTokenizer"),Jst.forEach(t),elo=r(mye," (BERTweet model)"),mye.forEach(t),olo=i(S),On=n(S,"LI",{});var wk=s(On);ole=n(wk,"STRONG",{});var Yst=s(ole);rlo=r(Yst,"big_bird"),Yst.forEach(t),tlo=r(wk," \u2014 "),cB=n(wk,"A",{href:!0});var Kst=s(cB);alo=r(Kst,"BigBirdTokenizer"),Kst.forEach(t),nlo=r(wk," or "),fB=n(wk,"A",{href:!0});var Zst=s(fB);slo=r(Zst,"BigBirdTokenizerFast"),Zst.forEach(t),llo=r(wk," (BigBird model)"),wk.forEach(t),ilo=i(S),Vn=n(S,"LI",{});var Ak=s(Vn);rle=n(Ak,"STRONG",{});var elt=s(rle);dlo=r(elt,"bigbird_pegasus"),elt.forEach(t),clo=r(Ak," \u2014 "),mB=n(Ak,"A",{href:!0});var olt=s(mB);flo=r(olt,"PegasusTokenizer"),olt.forEach(t),mlo=r(Ak," or "),gB=n(Ak,"A",{href:!0});var rlt=s(gB);glo=r(rlt,"PegasusTokenizerFast"),rlt.forEach(t),hlo=r(Ak," (BigBird-Pegasus model)"),Ak.forEach(t),plo=i(S),Xn=n(S,"LI",{});var Lk=s(Xn);tle=n(Lk,"STRONG",{});var tlt=s(tle);_lo=r(tlt,"blenderbot"),tlt.forEach(t),ulo=r(Lk," \u2014 "),hB=n(Lk,"A",{href:!0});var alt=s(hB);blo=r(alt,"BlenderbotTokenizer"),alt.forEach(t),vlo=r(Lk," or "),pB=n(Lk,"A",{href:!0});var nlt=s(pB);Flo=r(nlt,"BlenderbotTokenizerFast"),nlt.forEach(t),Tlo=r(Lk," (Blenderbot model)"),Lk.forEach(t),Mlo=i(S),ah=n(S,"LI",{});var gye=s(ah);ale=n(gye,"STRONG",{});var slt=s(ale);Elo=r(slt,"blenderbot-small"),slt.forEach(t),Clo=r(gye," \u2014 "),_B=n(gye,"A",{href:!0});var llt=s(_B);wlo=r(llt,"BlenderbotSmallTokenizer"),llt.forEach(t),Alo=r(gye," (BlenderbotSmall model)"),gye.forEach(t),Llo=i(S),nh=n(S,"LI",{});var hye=s(nh);nle=n(hye,"STRONG",{});var ilt=s(nle);ylo=r(ilt,"bloom"),ilt.forEach(t),xlo=r(hye," \u2014 "),uB=n(hye,"A",{href:!0});var dlt=s(uB);$lo=r(dlt,"BloomTokenizerFast"),dlt.forEach(t),klo=r(hye," (BLOOM model)"),hye.forEach(t),Slo=i(S),sh=n(S,"LI",{});var pye=s(sh);sle=n(pye,"STRONG",{});var clt=s(sle);Rlo=r(clt,"byt5"),clt.forEach(t),Plo=r(pye," \u2014 "),bB=n(pye,"A",{href:!0});var flt=s(bB);Blo=r(flt,"ByT5Tokenizer"),flt.forEach(t),Ilo=r(pye," (ByT5 model)"),pye.forEach(t),Nlo=i(S),zn=n(S,"LI",{});var yk=s(zn);lle=n(yk,"STRONG",{});var mlt=s(lle);qlo=r(mlt,"camembert"),mlt.forEach(t),jlo=r(yk," \u2014 "),vB=n(yk,"A",{href:!0});var glt=s(vB);Dlo=r(glt,"CamembertTokenizer"),glt.forEach(t),Glo=r(yk," or "),FB=n(yk,"A",{href:!0});var hlt=s(FB);Olo=r(hlt,"CamembertTokenizerFast"),hlt.forEach(t),Vlo=r(yk," (CamemBERT model)"),yk.forEach(t),Xlo=i(S),lh=n(S,"LI",{});var _ye=s(lh);ile=n(_ye,"STRONG",{});var plt=s(ile);zlo=r(plt,"canine"),plt.forEach(t),Qlo=r(_ye," \u2014 "),TB=n(_ye,"A",{href:!0});var _lt=s(TB);Wlo=r(_lt,"CanineTokenizer"),_lt.forEach(t),Hlo=r(_ye," (CANINE model)"),_ye.forEach(t),Ulo=i(S),Qn=n(S,"LI",{});var xk=s(Qn);dle=n(xk,"STRONG",{});var ult=s(dle);Jlo=r(ult,"clip"),ult.forEach(t),Ylo=r(xk," \u2014 "),MB=n(xk,"A",{href:!0});var blt=s(MB);Klo=r(blt,"CLIPTokenizer"),blt.forEach(t),Zlo=r(xk," or "),EB=n(xk,"A",{href:!0});var vlt=s(EB);eio=r(vlt,"CLIPTokenizerFast"),vlt.forEach(t),oio=r(xk," (CLIP model)"),xk.forEach(t),rio=i(S),Wn=n(S,"LI",{});var $k=s(Wn);cle=n($k,"STRONG",{});var Flt=s(cle);tio=r(Flt,"codegen"),Flt.forEach(t),aio=r($k," \u2014 "),CB=n($k,"A",{href:!0});var Tlt=s(CB);nio=r(Tlt,"CodeGenTokenizer"),Tlt.forEach(t),sio=r($k," or "),wB=n($k,"A",{href:!0});var Mlt=s(wB);lio=r(Mlt,"CodeGenTokenizerFast"),Mlt.forEach(t),iio=r($k," (CodeGen model)"),$k.forEach(t),dio=i(S),Hn=n(S,"LI",{});var kk=s(Hn);fle=n(kk,"STRONG",{});var Elt=s(fle);cio=r(Elt,"convbert"),Elt.forEach(t),fio=r(kk," \u2014 "),AB=n(kk,"A",{href:!0});var Clt=s(AB);mio=r(Clt,"ConvBertTokenizer"),Clt.forEach(t),gio=r(kk," or "),LB=n(kk,"A",{href:!0});var wlt=s(LB);hio=r(wlt,"ConvBertTokenizerFast"),wlt.forEach(t),pio=r(kk," (ConvBERT model)"),kk.forEach(t),_io=i(S),Un=n(S,"LI",{});var Sk=s(Un);mle=n(Sk,"STRONG",{});var Alt=s(mle);uio=r(Alt,"cpm"),Alt.forEach(t),bio=r(Sk," \u2014 "),yB=n(Sk,"A",{href:!0});var Llt=s(yB);vio=r(Llt,"CpmTokenizer"),Llt.forEach(t),Fio=r(Sk," or "),xB=n(Sk,"A",{href:!0});var ylt=s(xB);Tio=r(ylt,"CpmTokenizerFast"),ylt.forEach(t),Mio=r(Sk," (CPM model)"),Sk.forEach(t),Eio=i(S),ih=n(S,"LI",{});var uye=s(ih);gle=n(uye,"STRONG",{});var xlt=s(gle);Cio=r(xlt,"ctrl"),xlt.forEach(t),wio=r(uye," \u2014 "),$B=n(uye,"A",{href:!0});var $lt=s($B);Aio=r($lt,"CTRLTokenizer"),$lt.forEach(t),Lio=r(uye," (CTRL model)"),uye.forEach(t),yio=i(S),Jn=n(S,"LI",{});var Rk=s(Jn);hle=n(Rk,"STRONG",{});var klt=s(hle);xio=r(klt,"data2vec-text"),klt.forEach(t),$io=r(Rk," \u2014 "),kB=n(Rk,"A",{href:!0});var Slt=s(kB);kio=r(Slt,"RobertaTokenizer"),Slt.forEach(t),Sio=r(Rk," or "),SB=n(Rk,"A",{href:!0});var Rlt=s(SB);Rio=r(Rlt,"RobertaTokenizerFast"),Rlt.forEach(t),Pio=r(Rk," (Data2VecText model)"),Rk.forEach(t),Bio=i(S),Yn=n(S,"LI",{});var Pk=s(Yn);ple=n(Pk,"STRONG",{});var Plt=s(ple);Iio=r(Plt,"deberta"),Plt.forEach(t),Nio=r(Pk," \u2014 "),RB=n(Pk,"A",{href:!0});var Blt=s(RB);qio=r(Blt,"DebertaTokenizer"),Blt.forEach(t),jio=r(Pk," or "),PB=n(Pk,"A",{href:!0});var Ilt=s(PB);Dio=r(Ilt,"DebertaTokenizerFast"),Ilt.forEach(t),Gio=r(Pk," (DeBERTa model)"),Pk.forEach(t),Oio=i(S),Kn=n(S,"LI",{});var Bk=s(Kn);_le=n(Bk,"STRONG",{});var Nlt=s(_le);Vio=r(Nlt,"deberta-v2"),Nlt.forEach(t),Xio=r(Bk," \u2014 "),BB=n(Bk,"A",{href:!0});var qlt=s(BB);zio=r(qlt,"DebertaV2Tokenizer"),qlt.forEach(t),Qio=r(Bk," or "),IB=n(Bk,"A",{href:!0});var jlt=s(IB);Wio=r(jlt,"DebertaV2TokenizerFast"),jlt.forEach(t),Hio=r(Bk," (DeBERTa-v2 model)"),Bk.forEach(t),Uio=i(S),Zn=n(S,"LI",{});var Ik=s(Zn);ule=n(Ik,"STRONG",{});var Dlt=s(ule);Jio=r(Dlt,"distilbert"),Dlt.forEach(t),Yio=r(Ik," \u2014 "),NB=n(Ik,"A",{href:!0});var Glt=s(NB);Kio=r(Glt,"DistilBertTokenizer"),Glt.forEach(t),Zio=r(Ik," or "),qB=n(Ik,"A",{href:!0});var Olt=s(qB);edo=r(Olt,"DistilBertTokenizerFast"),Olt.forEach(t),odo=r(Ik," (DistilBERT model)"),Ik.forEach(t),rdo=i(S),es=n(S,"LI",{});var Nk=s(es);ble=n(Nk,"STRONG",{});var Vlt=s(ble);tdo=r(Vlt,"dpr"),Vlt.forEach(t),ado=r(Nk," \u2014 "),jB=n(Nk,"A",{href:!0});var Xlt=s(jB);ndo=r(Xlt,"DPRQuestionEncoderTokenizer"),Xlt.forEach(t),sdo=r(Nk," or "),DB=n(Nk,"A",{href:!0});var zlt=s(DB);ldo=r(zlt,"DPRQuestionEncoderTokenizerFast"),zlt.forEach(t),ido=r(Nk," (DPR model)"),Nk.forEach(t),ddo=i(S),os=n(S,"LI",{});var qk=s(os);vle=n(qk,"STRONG",{});var Qlt=s(vle);cdo=r(Qlt,"electra"),Qlt.forEach(t),fdo=r(qk," \u2014 "),GB=n(qk,"A",{href:!0});var Wlt=s(GB);mdo=r(Wlt,"ElectraTokenizer"),Wlt.forEach(t),gdo=r(qk," or "),OB=n(qk,"A",{href:!0});var Hlt=s(OB);hdo=r(Hlt,"ElectraTokenizerFast"),Hlt.forEach(t),pdo=r(qk," (ELECTRA model)"),qk.forEach(t),_do=i(S),dh=n(S,"LI",{});var bye=s(dh);Fle=n(bye,"STRONG",{});var Ult=s(Fle);udo=r(Ult,"flaubert"),Ult.forEach(t),bdo=r(bye," \u2014 "),VB=n(bye,"A",{href:!0});var Jlt=s(VB);vdo=r(Jlt,"FlaubertTokenizer"),Jlt.forEach(t),Fdo=r(bye," (FlauBERT model)"),bye.forEach(t),Tdo=i(S),rs=n(S,"LI",{});var jk=s(rs);Tle=n(jk,"STRONG",{});var Ylt=s(Tle);Mdo=r(Ylt,"fnet"),Ylt.forEach(t),Edo=r(jk," \u2014 "),XB=n(jk,"A",{href:!0});var Klt=s(XB);Cdo=r(Klt,"FNetTokenizer"),Klt.forEach(t),wdo=r(jk," or "),zB=n(jk,"A",{href:!0});var Zlt=s(zB);Ado=r(Zlt,"FNetTokenizerFast"),Zlt.forEach(t),Ldo=r(jk," (FNet model)"),jk.forEach(t),ydo=i(S),ch=n(S,"LI",{});var vye=s(ch);Mle=n(vye,"STRONG",{});var eit=s(Mle);xdo=r(eit,"fsmt"),eit.forEach(t),$do=r(vye," \u2014 "),QB=n(vye,"A",{href:!0});var oit=s(QB);kdo=r(oit,"FSMTTokenizer"),oit.forEach(t),Sdo=r(vye," (FairSeq Machine-Translation model)"),vye.forEach(t),Rdo=i(S),ts=n(S,"LI",{});var Dk=s(ts);Ele=n(Dk,"STRONG",{});var rit=s(Ele);Pdo=r(rit,"funnel"),rit.forEach(t),Bdo=r(Dk," \u2014 "),WB=n(Dk,"A",{href:!0});var tit=s(WB);Ido=r(tit,"FunnelTokenizer"),tit.forEach(t),Ndo=r(Dk," or "),HB=n(Dk,"A",{href:!0});var ait=s(HB);qdo=r(ait,"FunnelTokenizerFast"),ait.forEach(t),jdo=r(Dk," (Funnel Transformer model)"),Dk.forEach(t),Ddo=i(S),as=n(S,"LI",{});var Gk=s(as);Cle=n(Gk,"STRONG",{});var nit=s(Cle);Gdo=r(nit,"gpt2"),nit.forEach(t),Odo=r(Gk," \u2014 "),UB=n(Gk,"A",{href:!0});var sit=s(UB);Vdo=r(sit,"GPT2Tokenizer"),sit.forEach(t),Xdo=r(Gk," or "),JB=n(Gk,"A",{href:!0});var lit=s(JB);zdo=r(lit,"GPT2TokenizerFast"),lit.forEach(t),Qdo=r(Gk," (OpenAI GPT-2 model)"),Gk.forEach(t),Wdo=i(S),ns=n(S,"LI",{});var Ok=s(ns);wle=n(Ok,"STRONG",{});var iit=s(wle);Hdo=r(iit,"gpt_neo"),iit.forEach(t),Udo=r(Ok," \u2014 "),YB=n(Ok,"A",{href:!0});var dit=s(YB);Jdo=r(dit,"GPT2Tokenizer"),dit.forEach(t),Ydo=r(Ok," or "),KB=n(Ok,"A",{href:!0});var cit=s(KB);Kdo=r(cit,"GPT2TokenizerFast"),cit.forEach(t),Zdo=r(Ok," (GPT Neo model)"),Ok.forEach(t),eco=i(S),fh=n(S,"LI",{});var Fye=s(fh);Ale=n(Fye,"STRONG",{});var fit=s(Ale);oco=r(fit,"gpt_neox"),fit.forEach(t),rco=r(Fye," \u2014 "),ZB=n(Fye,"A",{href:!0});var mit=s(ZB);tco=r(mit,"GPTNeoXTokenizerFast"),mit.forEach(t),aco=r(Fye," (GPT NeoX model)"),Fye.forEach(t),nco=i(S),ss=n(S,"LI",{});var Vk=s(ss);Lle=n(Vk,"STRONG",{});var git=s(Lle);sco=r(git,"gptj"),git.forEach(t),lco=r(Vk," \u2014 "),eI=n(Vk,"A",{href:!0});var hit=s(eI);ico=r(hit,"GPT2Tokenizer"),hit.forEach(t),dco=r(Vk," or "),oI=n(Vk,"A",{href:!0});var pit=s(oI);cco=r(pit,"GPT2TokenizerFast"),pit.forEach(t),fco=r(Vk," (GPT-J model)"),Vk.forEach(t),mco=i(S),ls=n(S,"LI",{});var Xk=s(ls);yle=n(Xk,"STRONG",{});var _it=s(yle);gco=r(_it,"groupvit"),_it.forEach(t),hco=r(Xk," \u2014 "),rI=n(Xk,"A",{href:!0});var uit=s(rI);pco=r(uit,"CLIPTokenizer"),uit.forEach(t),_co=r(Xk," or "),tI=n(Xk,"A",{href:!0});var bit=s(tI);uco=r(bit,"CLIPTokenizerFast"),bit.forEach(t),bco=r(Xk," (GroupViT model)"),Xk.forEach(t),vco=i(S),is=n(S,"LI",{});var zk=s(is);xle=n(zk,"STRONG",{});var vit=s(xle);Fco=r(vit,"herbert"),vit.forEach(t),Tco=r(zk," \u2014 "),aI=n(zk,"A",{href:!0});var Fit=s(aI);Mco=r(Fit,"HerbertTokenizer"),Fit.forEach(t),Eco=r(zk," or "),nI=n(zk,"A",{href:!0});var Tit=s(nI);Cco=r(Tit,"HerbertTokenizerFast"),Tit.forEach(t),wco=r(zk," (HerBERT model)"),zk.forEach(t),Aco=i(S),mh=n(S,"LI",{});var Tye=s(mh);$le=n(Tye,"STRONG",{});var Mit=s($le);Lco=r(Mit,"hubert"),Mit.forEach(t),yco=r(Tye," \u2014 "),sI=n(Tye,"A",{href:!0});var Eit=s(sI);xco=r(Eit,"Wav2Vec2CTCTokenizer"),Eit.forEach(t),$co=r(Tye," (Hubert model)"),Tye.forEach(t),kco=i(S),ds=n(S,"LI",{});var Qk=s(ds);kle=n(Qk,"STRONG",{});var Cit=s(kle);Sco=r(Cit,"ibert"),Cit.forEach(t),Rco=r(Qk," \u2014 "),lI=n(Qk,"A",{href:!0});var wit=s(lI);Pco=r(wit,"RobertaTokenizer"),wit.forEach(t),Bco=r(Qk," or "),iI=n(Qk,"A",{href:!0});var Ait=s(iI);Ico=r(Ait,"RobertaTokenizerFast"),Ait.forEach(t),Nco=r(Qk," (I-BERT model)"),Qk.forEach(t),qco=i(S),gh=n(S,"LI",{});var Mye=s(gh);Sle=n(Mye,"STRONG",{});var Lit=s(Sle);jco=r(Lit,"jukebox"),Lit.forEach(t),Dco=r(Mye," \u2014 "),Rle=n(Mye,"CODE",{});var yit=s(Rle);Gco=r(yit,"JukeboxTokenizer"),yit.forEach(t),Oco=r(Mye," (Jukebox model)"),Mye.forEach(t),Vco=i(S),cs=n(S,"LI",{});var Wk=s(cs);Ple=n(Wk,"STRONG",{});var xit=s(Ple);Xco=r(xit,"layoutlm"),xit.forEach(t),zco=r(Wk," \u2014 "),dI=n(Wk,"A",{href:!0});var $it=s(dI);Qco=r($it,"LayoutLMTokenizer"),$it.forEach(t),Wco=r(Wk," or "),cI=n(Wk,"A",{href:!0});var kit=s(cI);Hco=r(kit,"LayoutLMTokenizerFast"),kit.forEach(t),Uco=r(Wk," (LayoutLM model)"),Wk.forEach(t),Jco=i(S),fs=n(S,"LI",{});var Hk=s(fs);Ble=n(Hk,"STRONG",{});var Sit=s(Ble);Yco=r(Sit,"layoutlmv2"),Sit.forEach(t),Kco=r(Hk," \u2014 "),fI=n(Hk,"A",{href:!0});var Rit=s(fI);Zco=r(Rit,"LayoutLMv2Tokenizer"),Rit.forEach(t),efo=r(Hk," or "),mI=n(Hk,"A",{href:!0});var Pit=s(mI);ofo=r(Pit,"LayoutLMv2TokenizerFast"),Pit.forEach(t),rfo=r(Hk," (LayoutLMv2 model)"),Hk.forEach(t),tfo=i(S),ms=n(S,"LI",{});var Uk=s(ms);Ile=n(Uk,"STRONG",{});var Bit=s(Ile);afo=r(Bit,"layoutlmv3"),Bit.forEach(t),nfo=r(Uk," \u2014 "),gI=n(Uk,"A",{href:!0});var Iit=s(gI);sfo=r(Iit,"LayoutLMv3Tokenizer"),Iit.forEach(t),lfo=r(Uk," or "),hI=n(Uk,"A",{href:!0});var Nit=s(hI);ifo=r(Nit,"LayoutLMv3TokenizerFast"),Nit.forEach(t),dfo=r(Uk," (LayoutLMv3 model)"),Uk.forEach(t),cfo=i(S),gs=n(S,"LI",{});var Jk=s(gs);Nle=n(Jk,"STRONG",{});var qit=s(Nle);ffo=r(qit,"layoutxlm"),qit.forEach(t),mfo=r(Jk," \u2014 "),pI=n(Jk,"A",{href:!0});var jit=s(pI);gfo=r(jit,"LayoutXLMTokenizer"),jit.forEach(t),hfo=r(Jk," or "),_I=n(Jk,"A",{href:!0});var Dit=s(_I);pfo=r(Dit,"LayoutXLMTokenizerFast"),Dit.forEach(t),_fo=r(Jk," (LayoutXLM model)"),Jk.forEach(t),ufo=i(S),hs=n(S,"LI",{});var Yk=s(hs);qle=n(Yk,"STRONG",{});var Git=s(qle);bfo=r(Git,"led"),Git.forEach(t),vfo=r(Yk," \u2014 "),uI=n(Yk,"A",{href:!0});var Oit=s(uI);Ffo=r(Oit,"LEDTokenizer"),Oit.forEach(t),Tfo=r(Yk," or "),bI=n(Yk,"A",{href:!0});var Vit=s(bI);Mfo=r(Vit,"LEDTokenizerFast"),Vit.forEach(t),Efo=r(Yk," (LED model)"),Yk.forEach(t),Cfo=i(S),ps=n(S,"LI",{});var Kk=s(ps);jle=n(Kk,"STRONG",{});var Xit=s(jle);wfo=r(Xit,"longformer"),Xit.forEach(t),Afo=r(Kk," \u2014 "),vI=n(Kk,"A",{href:!0});var zit=s(vI);Lfo=r(zit,"LongformerTokenizer"),zit.forEach(t),yfo=r(Kk," or "),FI=n(Kk,"A",{href:!0});var Qit=s(FI);xfo=r(Qit,"LongformerTokenizerFast"),Qit.forEach(t),$fo=r(Kk," (Longformer model)"),Kk.forEach(t),kfo=i(S),_s=n(S,"LI",{});var Zk=s(_s);Dle=n(Zk,"STRONG",{});var Wit=s(Dle);Sfo=r(Wit,"longt5"),Wit.forEach(t),Rfo=r(Zk," \u2014 "),TI=n(Zk,"A",{href:!0});var Hit=s(TI);Pfo=r(Hit,"T5Tokenizer"),Hit.forEach(t),Bfo=r(Zk," or "),MI=n(Zk,"A",{href:!0});var Uit=s(MI);Ifo=r(Uit,"T5TokenizerFast"),Uit.forEach(t),Nfo=r(Zk," (LongT5 model)"),Zk.forEach(t),qfo=i(S),hh=n(S,"LI",{});var Eye=s(hh);Gle=n(Eye,"STRONG",{});var Jit=s(Gle);jfo=r(Jit,"luke"),Jit.forEach(t),Dfo=r(Eye," \u2014 "),EI=n(Eye,"A",{href:!0});var Yit=s(EI);Gfo=r(Yit,"LukeTokenizer"),Yit.forEach(t),Ofo=r(Eye," (LUKE model)"),Eye.forEach(t),Vfo=i(S),us=n(S,"LI",{});var eS=s(us);Ole=n(eS,"STRONG",{});var Kit=s(Ole);Xfo=r(Kit,"lxmert"),Kit.forEach(t),zfo=r(eS," \u2014 "),CI=n(eS,"A",{href:!0});var Zit=s(CI);Qfo=r(Zit,"LxmertTokenizer"),Zit.forEach(t),Wfo=r(eS," or "),wI=n(eS,"A",{href:!0});var edt=s(wI);Hfo=r(edt,"LxmertTokenizerFast"),edt.forEach(t),Ufo=r(eS," (LXMERT model)"),eS.forEach(t),Jfo=i(S),ph=n(S,"LI",{});var Cye=s(ph);Vle=n(Cye,"STRONG",{});var odt=s(Vle);Yfo=r(odt,"m2m_100"),odt.forEach(t),Kfo=r(Cye," \u2014 "),AI=n(Cye,"A",{href:!0});var rdt=s(AI);Zfo=r(rdt,"M2M100Tokenizer"),rdt.forEach(t),emo=r(Cye," (M2M100 model)"),Cye.forEach(t),omo=i(S),_h=n(S,"LI",{});var wye=s(_h);Xle=n(wye,"STRONG",{});var tdt=s(Xle);rmo=r(tdt,"marian"),tdt.forEach(t),tmo=r(wye," \u2014 "),LI=n(wye,"A",{href:!0});var adt=s(LI);amo=r(adt,"MarianTokenizer"),adt.forEach(t),nmo=r(wye," (Marian model)"),wye.forEach(t),smo=i(S),bs=n(S,"LI",{});var oS=s(bs);zle=n(oS,"STRONG",{});var ndt=s(zle);lmo=r(ndt,"mbart"),ndt.forEach(t),imo=r(oS," \u2014 "),yI=n(oS,"A",{href:!0});var sdt=s(yI);dmo=r(sdt,"MBartTokenizer"),sdt.forEach(t),cmo=r(oS," or "),xI=n(oS,"A",{href:!0});var ldt=s(xI);fmo=r(ldt,"MBartTokenizerFast"),ldt.forEach(t),mmo=r(oS," (mBART model)"),oS.forEach(t),gmo=i(S),vs=n(S,"LI",{});var rS=s(vs);Qle=n(rS,"STRONG",{});var idt=s(Qle);hmo=r(idt,"mbart50"),idt.forEach(t),pmo=r(rS," \u2014 "),$I=n(rS,"A",{href:!0});var ddt=s($I);_mo=r(ddt,"MBart50Tokenizer"),ddt.forEach(t),umo=r(rS," or "),kI=n(rS,"A",{href:!0});var cdt=s(kI);bmo=r(cdt,"MBart50TokenizerFast"),cdt.forEach(t),vmo=r(rS," (mBART-50 model)"),rS.forEach(t),Fmo=i(S),Fs=n(S,"LI",{});var tS=s(Fs);Wle=n(tS,"STRONG",{});var fdt=s(Wle);Tmo=r(fdt,"megatron-bert"),fdt.forEach(t),Mmo=r(tS," \u2014 "),SI=n(tS,"A",{href:!0});var mdt=s(SI);Emo=r(mdt,"BertTokenizer"),mdt.forEach(t),Cmo=r(tS," or "),RI=n(tS,"A",{href:!0});var gdt=s(RI);wmo=r(gdt,"BertTokenizerFast"),gdt.forEach(t),Amo=r(tS," (Megatron-BERT model)"),tS.forEach(t),Lmo=i(S),uh=n(S,"LI",{});var Aye=s(uh);Hle=n(Aye,"STRONG",{});var hdt=s(Hle);ymo=r(hdt,"mluke"),hdt.forEach(t),xmo=r(Aye," \u2014 "),PI=n(Aye,"A",{href:!0});var pdt=s(PI);$mo=r(pdt,"MLukeTokenizer"),pdt.forEach(t),kmo=r(Aye," (mLUKE model)"),Aye.forEach(t),Smo=i(S),Ts=n(S,"LI",{});var aS=s(Ts);Ule=n(aS,"STRONG",{});var _dt=s(Ule);Rmo=r(_dt,"mobilebert"),_dt.forEach(t),Pmo=r(aS," \u2014 "),BI=n(aS,"A",{href:!0});var udt=s(BI);Bmo=r(udt,"MobileBertTokenizer"),udt.forEach(t),Imo=r(aS," or "),II=n(aS,"A",{href:!0});var bdt=s(II);Nmo=r(bdt,"MobileBertTokenizerFast"),bdt.forEach(t),qmo=r(aS," (MobileBERT model)"),aS.forEach(t),jmo=i(S),Ms=n(S,"LI",{});var nS=s(Ms);Jle=n(nS,"STRONG",{});var vdt=s(Jle);Dmo=r(vdt,"mpnet"),vdt.forEach(t),Gmo=r(nS," \u2014 "),NI=n(nS,"A",{href:!0});var Fdt=s(NI);Omo=r(Fdt,"MPNetTokenizer"),Fdt.forEach(t),Vmo=r(nS," or "),qI=n(nS,"A",{href:!0});var Tdt=s(qI);Xmo=r(Tdt,"MPNetTokenizerFast"),Tdt.forEach(t),zmo=r(nS," (MPNet model)"),nS.forEach(t),Qmo=i(S),Es=n(S,"LI",{});var sS=s(Es);Yle=n(sS,"STRONG",{});var Mdt=s(Yle);Wmo=r(Mdt,"mt5"),Mdt.forEach(t),Hmo=r(sS," \u2014 "),jI=n(sS,"A",{href:!0});var Edt=s(jI);Umo=r(Edt,"MT5Tokenizer"),Edt.forEach(t),Jmo=r(sS," or "),DI=n(sS,"A",{href:!0});var Cdt=s(DI);Ymo=r(Cdt,"MT5TokenizerFast"),Cdt.forEach(t),Kmo=r(sS," (MT5 model)"),sS.forEach(t),Zmo=i(S),Cs=n(S,"LI",{});var lS=s(Cs);Kle=n(lS,"STRONG",{});var wdt=s(Kle);ego=r(wdt,"mvp"),wdt.forEach(t),ogo=r(lS," \u2014 "),GI=n(lS,"A",{href:!0});var Adt=s(GI);rgo=r(Adt,"MvpTokenizer"),Adt.forEach(t),tgo=r(lS," or "),OI=n(lS,"A",{href:!0});var Ldt=s(OI);ago=r(Ldt,"MvpTokenizerFast"),Ldt.forEach(t),ngo=r(lS," (MVP model)"),lS.forEach(t),sgo=i(S),ws=n(S,"LI",{});var iS=s(ws);Zle=n(iS,"STRONG",{});var ydt=s(Zle);lgo=r(ydt,"nezha"),ydt.forEach(t),igo=r(iS," \u2014 "),VI=n(iS,"A",{href:!0});var xdt=s(VI);dgo=r(xdt,"BertTokenizer"),xdt.forEach(t),cgo=r(iS," or "),XI=n(iS,"A",{href:!0});var $dt=s(XI);fgo=r($dt,"BertTokenizerFast"),$dt.forEach(t),mgo=r(iS," (Nezha model)"),iS.forEach(t),ggo=i(S),As=n(S,"LI",{});var dS=s(As);eie=n(dS,"STRONG",{});var kdt=s(eie);hgo=r(kdt,"nystromformer"),kdt.forEach(t),pgo=r(dS," \u2014 "),zI=n(dS,"A",{href:!0});var Sdt=s(zI);_go=r(Sdt,"AlbertTokenizer"),Sdt.forEach(t),ugo=r(dS," or "),QI=n(dS,"A",{href:!0});var Rdt=s(QI);bgo=r(Rdt,"AlbertTokenizerFast"),Rdt.forEach(t),vgo=r(dS," (Nystr\xF6mformer model)"),dS.forEach(t),Fgo=i(S),Ls=n(S,"LI",{});var cS=s(Ls);oie=n(cS,"STRONG",{});var Pdt=s(oie);Tgo=r(Pdt,"openai-gpt"),Pdt.forEach(t),Mgo=r(cS," \u2014 "),WI=n(cS,"A",{href:!0});var Bdt=s(WI);Ego=r(Bdt,"OpenAIGPTTokenizer"),Bdt.forEach(t),Cgo=r(cS," or "),HI=n(cS,"A",{href:!0});var Idt=s(HI);wgo=r(Idt,"OpenAIGPTTokenizerFast"),Idt.forEach(t),Ago=r(cS," (OpenAI GPT model)"),cS.forEach(t),Lgo=i(S),bh=n(S,"LI",{});var Lye=s(bh);rie=n(Lye,"STRONG",{});var Ndt=s(rie);ygo=r(Ndt,"opt"),Ndt.forEach(t),xgo=r(Lye," \u2014 "),UI=n(Lye,"A",{href:!0});var qdt=s(UI);$go=r(qdt,"GPT2Tokenizer"),qdt.forEach(t),kgo=r(Lye," (OPT model)"),Lye.forEach(t),Sgo=i(S),ys=n(S,"LI",{});var fS=s(ys);tie=n(fS,"STRONG",{});var jdt=s(tie);Rgo=r(jdt,"pegasus"),jdt.forEach(t),Pgo=r(fS," \u2014 "),JI=n(fS,"A",{href:!0});var Ddt=s(JI);Bgo=r(Ddt,"PegasusTokenizer"),Ddt.forEach(t),Igo=r(fS," or "),YI=n(fS,"A",{href:!0});var Gdt=s(YI);Ngo=r(Gdt,"PegasusTokenizerFast"),Gdt.forEach(t),qgo=r(fS," (Pegasus model)"),fS.forEach(t),jgo=i(S),vh=n(S,"LI",{});var yye=s(vh);aie=n(yye,"STRONG",{});var Odt=s(aie);Dgo=r(Odt,"perceiver"),Odt.forEach(t),Ggo=r(yye," \u2014 "),KI=n(yye,"A",{href:!0});var Vdt=s(KI);Ogo=r(Vdt,"PerceiverTokenizer"),Vdt.forEach(t),Vgo=r(yye," (Perceiver model)"),yye.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var xye=s(Fh);nie=n(xye,"STRONG",{});var Xdt=s(nie);zgo=r(Xdt,"phobert"),Xdt.forEach(t),Qgo=r(xye," \u2014 "),ZI=n(xye,"A",{href:!0});var zdt=s(ZI);Wgo=r(zdt,"PhobertTokenizer"),zdt.forEach(t),Hgo=r(xye," (PhoBERT model)"),xye.forEach(t),Ugo=i(S),Th=n(S,"LI",{});var $ye=s(Th);sie=n($ye,"STRONG",{});var Qdt=s(sie);Jgo=r(Qdt,"plbart"),Qdt.forEach(t),Ygo=r($ye," \u2014 "),eN=n($ye,"A",{href:!0});var Wdt=s(eN);Kgo=r(Wdt,"PLBartTokenizer"),Wdt.forEach(t),Zgo=r($ye," (PLBart model)"),$ye.forEach(t),eho=i(S),Mh=n(S,"LI",{});var kye=s(Mh);lie=n(kye,"STRONG",{});var Hdt=s(lie);oho=r(Hdt,"prophetnet"),Hdt.forEach(t),rho=r(kye," \u2014 "),oN=n(kye,"A",{href:!0});var Udt=s(oN);tho=r(Udt,"ProphetNetTokenizer"),Udt.forEach(t),aho=r(kye," (ProphetNet model)"),kye.forEach(t),nho=i(S),xs=n(S,"LI",{});var mS=s(xs);iie=n(mS,"STRONG",{});var Jdt=s(iie);sho=r(Jdt,"qdqbert"),Jdt.forEach(t),lho=r(mS," \u2014 "),rN=n(mS,"A",{href:!0});var Ydt=s(rN);iho=r(Ydt,"BertTokenizer"),Ydt.forEach(t),dho=r(mS," or "),tN=n(mS,"A",{href:!0});var Kdt=s(tN);cho=r(Kdt,"BertTokenizerFast"),Kdt.forEach(t),fho=r(mS," (QDQBert model)"),mS.forEach(t),mho=i(S),Eh=n(S,"LI",{});var Sye=s(Eh);die=n(Sye,"STRONG",{});var Zdt=s(die);gho=r(Zdt,"rag"),Zdt.forEach(t),hho=r(Sye," \u2014 "),aN=n(Sye,"A",{href:!0});var ect=s(aN);pho=r(ect,"RagTokenizer"),ect.forEach(t),_ho=r(Sye," (RAG model)"),Sye.forEach(t),uho=i(S),$s=n(S,"LI",{});var gS=s($s);cie=n(gS,"STRONG",{});var oct=s(cie);bho=r(oct,"realm"),oct.forEach(t),vho=r(gS," \u2014 "),nN=n(gS,"A",{href:!0});var rct=s(nN);Fho=r(rct,"RealmTokenizer"),rct.forEach(t),Tho=r(gS," or "),sN=n(gS,"A",{href:!0});var tct=s(sN);Mho=r(tct,"RealmTokenizerFast"),tct.forEach(t),Eho=r(gS," (REALM model)"),gS.forEach(t),Cho=i(S),ks=n(S,"LI",{});var hS=s(ks);fie=n(hS,"STRONG",{});var act=s(fie);who=r(act,"reformer"),act.forEach(t),Aho=r(hS," \u2014 "),lN=n(hS,"A",{href:!0});var nct=s(lN);Lho=r(nct,"ReformerTokenizer"),nct.forEach(t),yho=r(hS," or "),iN=n(hS,"A",{href:!0});var sct=s(iN);xho=r(sct,"ReformerTokenizerFast"),sct.forEach(t),$ho=r(hS," (Reformer model)"),hS.forEach(t),kho=i(S),Ss=n(S,"LI",{});var pS=s(Ss);mie=n(pS,"STRONG",{});var lct=s(mie);Sho=r(lct,"rembert"),lct.forEach(t),Rho=r(pS," \u2014 "),dN=n(pS,"A",{href:!0});var ict=s(dN);Pho=r(ict,"RemBertTokenizer"),ict.forEach(t),Bho=r(pS," or "),cN=n(pS,"A",{href:!0});var dct=s(cN);Iho=r(dct,"RemBertTokenizerFast"),dct.forEach(t),Nho=r(pS," (RemBERT model)"),pS.forEach(t),qho=i(S),Rs=n(S,"LI",{});var _S=s(Rs);gie=n(_S,"STRONG",{});var cct=s(gie);jho=r(cct,"retribert"),cct.forEach(t),Dho=r(_S," \u2014 "),fN=n(_S,"A",{href:!0});var fct=s(fN);Gho=r(fct,"RetriBertTokenizer"),fct.forEach(t),Oho=r(_S," or "),mN=n(_S,"A",{href:!0});var mct=s(mN);Vho=r(mct,"RetriBertTokenizerFast"),mct.forEach(t),Xho=r(_S," (RetriBERT model)"),_S.forEach(t),zho=i(S),Ps=n(S,"LI",{});var uS=s(Ps);hie=n(uS,"STRONG",{});var gct=s(hie);Qho=r(gct,"roberta"),gct.forEach(t),Who=r(uS," \u2014 "),gN=n(uS,"A",{href:!0});var hct=s(gN);Hho=r(hct,"RobertaTokenizer"),hct.forEach(t),Uho=r(uS," or "),hN=n(uS,"A",{href:!0});var pct=s(hN);Jho=r(pct,"RobertaTokenizerFast"),pct.forEach(t),Yho=r(uS," (RoBERTa model)"),uS.forEach(t),Kho=i(S),Bs=n(S,"LI",{});var bS=s(Bs);pie=n(bS,"STRONG",{});var _ct=s(pie);Zho=r(_ct,"roformer"),_ct.forEach(t),epo=r(bS," \u2014 "),pN=n(bS,"A",{href:!0});var uct=s(pN);opo=r(uct,"RoFormerTokenizer"),uct.forEach(t),rpo=r(bS," or "),_N=n(bS,"A",{href:!0});var bct=s(_N);tpo=r(bct,"RoFormerTokenizerFast"),bct.forEach(t),apo=r(bS," (RoFormer model)"),bS.forEach(t),npo=i(S),Ch=n(S,"LI",{});var Rye=s(Ch);_ie=n(Rye,"STRONG",{});var vct=s(_ie);spo=r(vct,"speech_to_text"),vct.forEach(t),lpo=r(Rye," \u2014 "),uN=n(Rye,"A",{href:!0});var Fct=s(uN);ipo=r(Fct,"Speech2TextTokenizer"),Fct.forEach(t),dpo=r(Rye," (Speech2Text model)"),Rye.forEach(t),cpo=i(S),wh=n(S,"LI",{});var Pye=s(wh);uie=n(Pye,"STRONG",{});var Tct=s(uie);fpo=r(Tct,"speech_to_text_2"),Tct.forEach(t),mpo=r(Pye," \u2014 "),bN=n(Pye,"A",{href:!0});var Mct=s(bN);gpo=r(Mct,"Speech2Text2Tokenizer"),Mct.forEach(t),hpo=r(Pye," (Speech2Text2 model)"),Pye.forEach(t),ppo=i(S),Is=n(S,"LI",{});var vS=s(Is);bie=n(vS,"STRONG",{});var Ect=s(bie);_po=r(Ect,"splinter"),Ect.forEach(t),upo=r(vS," \u2014 "),vN=n(vS,"A",{href:!0});var Cct=s(vN);bpo=r(Cct,"SplinterTokenizer"),Cct.forEach(t),vpo=r(vS," or "),FN=n(vS,"A",{href:!0});var wct=s(FN);Fpo=r(wct,"SplinterTokenizerFast"),wct.forEach(t),Tpo=r(vS," (Splinter model)"),vS.forEach(t),Mpo=i(S),Ns=n(S,"LI",{});var FS=s(Ns);vie=n(FS,"STRONG",{});var Act=s(vie);Epo=r(Act,"squeezebert"),Act.forEach(t),Cpo=r(FS," \u2014 "),TN=n(FS,"A",{href:!0});var Lct=s(TN);wpo=r(Lct,"SqueezeBertTokenizer"),Lct.forEach(t),Apo=r(FS," or "),MN=n(FS,"A",{href:!0});var yct=s(MN);Lpo=r(yct,"SqueezeBertTokenizerFast"),yct.forEach(t),ypo=r(FS," (SqueezeBERT model)"),FS.forEach(t),xpo=i(S),qs=n(S,"LI",{});var TS=s(qs);Fie=n(TS,"STRONG",{});var xct=s(Fie);$po=r(xct,"t5"),xct.forEach(t),kpo=r(TS," \u2014 "),EN=n(TS,"A",{href:!0});var $ct=s(EN);Spo=r($ct,"T5Tokenizer"),$ct.forEach(t),Rpo=r(TS," or "),CN=n(TS,"A",{href:!0});var kct=s(CN);Ppo=r(kct,"T5TokenizerFast"),kct.forEach(t),Bpo=r(TS," (T5 model)"),TS.forEach(t),Ipo=i(S),Ah=n(S,"LI",{});var Bye=s(Ah);Tie=n(Bye,"STRONG",{});var Sct=s(Tie);Npo=r(Sct,"tapas"),Sct.forEach(t),qpo=r(Bye," \u2014 "),wN=n(Bye,"A",{href:!0});var Rct=s(wN);jpo=r(Rct,"TapasTokenizer"),Rct.forEach(t),Dpo=r(Bye," (TAPAS model)"),Bye.forEach(t),Gpo=i(S),Lh=n(S,"LI",{});var Iye=s(Lh);Mie=n(Iye,"STRONG",{});var Pct=s(Mie);Opo=r(Pct,"tapex"),Pct.forEach(t),Vpo=r(Iye," \u2014 "),AN=n(Iye,"A",{href:!0});var Bct=s(AN);Xpo=r(Bct,"TapexTokenizer"),Bct.forEach(t),zpo=r(Iye," (TAPEX model)"),Iye.forEach(t),Qpo=i(S),yh=n(S,"LI",{});var Nye=s(yh);Eie=n(Nye,"STRONG",{});var Ict=s(Eie);Wpo=r(Ict,"transfo-xl"),Ict.forEach(t),Hpo=r(Nye," \u2014 "),LN=n(Nye,"A",{href:!0});var Nct=s(LN);Upo=r(Nct,"TransfoXLTokenizer"),Nct.forEach(t),Jpo=r(Nye," (Transformer-XL model)"),Nye.forEach(t),Ypo=i(S),js=n(S,"LI",{});var MS=s(js);Cie=n(MS,"STRONG",{});var qct=s(Cie);Kpo=r(qct,"vilt"),qct.forEach(t),Zpo=r(MS," \u2014 "),yN=n(MS,"A",{href:!0});var jct=s(yN);e_o=r(jct,"BertTokenizer"),jct.forEach(t),o_o=r(MS," or "),xN=n(MS,"A",{href:!0});var Dct=s(xN);r_o=r(Dct,"BertTokenizerFast"),Dct.forEach(t),t_o=r(MS," (ViLT model)"),MS.forEach(t),a_o=i(S),Ds=n(S,"LI",{});var ES=s(Ds);wie=n(ES,"STRONG",{});var Gct=s(wie);n_o=r(Gct,"visual_bert"),Gct.forEach(t),s_o=r(ES," \u2014 "),$N=n(ES,"A",{href:!0});var Oct=s($N);l_o=r(Oct,"BertTokenizer"),Oct.forEach(t),i_o=r(ES," or "),kN=n(ES,"A",{href:!0});var Vct=s(kN);d_o=r(Vct,"BertTokenizerFast"),Vct.forEach(t),c_o=r(ES," (VisualBERT model)"),ES.forEach(t),f_o=i(S),xh=n(S,"LI",{});var qye=s(xh);Aie=n(qye,"STRONG",{});var Xct=s(Aie);m_o=r(Xct,"wav2vec2"),Xct.forEach(t),g_o=r(qye," \u2014 "),SN=n(qye,"A",{href:!0});var zct=s(SN);h_o=r(zct,"Wav2Vec2CTCTokenizer"),zct.forEach(t),p_o=r(qye," (Wav2Vec2 model)"),qye.forEach(t),__o=i(S),$h=n(S,"LI",{});var jye=s($h);Lie=n(jye,"STRONG",{});var Qct=s(Lie);u_o=r(Qct,"wav2vec2-conformer"),Qct.forEach(t),b_o=r(jye," \u2014 "),RN=n(jye,"A",{href:!0});var Wct=s(RN);v_o=r(Wct,"Wav2Vec2CTCTokenizer"),Wct.forEach(t),F_o=r(jye," (Wav2Vec2-Conformer model)"),jye.forEach(t),T_o=i(S),kh=n(S,"LI",{});var Dye=s(kh);yie=n(Dye,"STRONG",{});var Hct=s(yie);M_o=r(Hct,"wav2vec2_phoneme"),Hct.forEach(t),E_o=r(Dye," \u2014 "),PN=n(Dye,"A",{href:!0});var Uct=s(PN);C_o=r(Uct,"Wav2Vec2PhonemeCTCTokenizer"),Uct.forEach(t),w_o=r(Dye," (Wav2Vec2Phoneme model)"),Dye.forEach(t),A_o=i(S),Gs=n(S,"LI",{});var CS=s(Gs);xie=n(CS,"STRONG",{});var Jct=s(xie);L_o=r(Jct,"xglm"),Jct.forEach(t),y_o=r(CS," \u2014 "),BN=n(CS,"A",{href:!0});var Yct=s(BN);x_o=r(Yct,"XGLMTokenizer"),Yct.forEach(t),$_o=r(CS," or "),IN=n(CS,"A",{href:!0});var Kct=s(IN);k_o=r(Kct,"XGLMTokenizerFast"),Kct.forEach(t),S_o=r(CS," (XGLM model)"),CS.forEach(t),R_o=i(S),Sh=n(S,"LI",{});var Gye=s(Sh);$ie=n(Gye,"STRONG",{});var Zct=s($ie);P_o=r(Zct,"xlm"),Zct.forEach(t),B_o=r(Gye," \u2014 "),NN=n(Gye,"A",{href:!0});var eft=s(NN);I_o=r(eft,"XLMTokenizer"),eft.forEach(t),N_o=r(Gye," (XLM model)"),Gye.forEach(t),q_o=i(S),Rh=n(S,"LI",{});var Oye=s(Rh);kie=n(Oye,"STRONG",{});var oft=s(kie);j_o=r(oft,"xlm-prophetnet"),oft.forEach(t),D_o=r(Oye," \u2014 "),qN=n(Oye,"A",{href:!0});var rft=s(qN);G_o=r(rft,"XLMProphetNetTokenizer"),rft.forEach(t),O_o=r(Oye," (XLM-ProphetNet model)"),Oye.forEach(t),V_o=i(S),Os=n(S,"LI",{});var wS=s(Os);Sie=n(wS,"STRONG",{});var tft=s(Sie);X_o=r(tft,"xlm-roberta"),tft.forEach(t),z_o=r(wS," \u2014 "),jN=n(wS,"A",{href:!0});var aft=s(jN);Q_o=r(aft,"XLMRobertaTokenizer"),aft.forEach(t),W_o=r(wS," or "),DN=n(wS,"A",{href:!0});var nft=s(DN);H_o=r(nft,"XLMRobertaTokenizerFast"),nft.forEach(t),U_o=r(wS," (XLM-RoBERTa model)"),wS.forEach(t),J_o=i(S),Vs=n(S,"LI",{});var AS=s(Vs);Rie=n(AS,"STRONG",{});var sft=s(Rie);Y_o=r(sft,"xlm-roberta-xl"),sft.forEach(t),K_o=r(AS," \u2014 "),GN=n(AS,"A",{href:!0});var lft=s(GN);Z_o=r(lft,"RobertaTokenizer"),lft.forEach(t),euo=r(AS," or "),ON=n(AS,"A",{href:!0});var ift=s(ON);ouo=r(ift,"RobertaTokenizerFast"),ift.forEach(t),ruo=r(AS," (XLM-RoBERTa-XL model)"),AS.forEach(t),tuo=i(S),Xs=n(S,"LI",{});var LS=s(Xs);Pie=n(LS,"STRONG",{});var dft=s(Pie);auo=r(dft,"xlnet"),dft.forEach(t),nuo=r(LS," \u2014 "),VN=n(LS,"A",{href:!0});var cft=s(VN);suo=r(cft,"XLNetTokenizer"),cft.forEach(t),luo=r(LS," or "),XN=n(LS,"A",{href:!0});var fft=s(XN);iuo=r(fft,"XLNetTokenizerFast"),fft.forEach(t),duo=r(LS," (XLNet model)"),LS.forEach(t),cuo=i(S),zs=n(S,"LI",{});var yS=s(zs);Bie=n(yS,"STRONG",{});var mft=s(Bie);fuo=r(mft,"yoso"),mft.forEach(t),muo=r(yS," \u2014 "),zN=n(yS,"A",{href:!0});var gft=s(zN);guo=r(gft,"AlbertTokenizer"),gft.forEach(t),huo=r(yS," or "),QN=n(yS,"A",{href:!0});var hft=s(QN);puo=r(hft,"AlbertTokenizerFast"),hft.forEach(t),_uo=r(yS," (YOSO model)"),yS.forEach(t),S.forEach(t),uuo=i(Ys),T(Ph.$$.fragment,Ys),Ys.forEach(t),buo=i(Js),Bh=n(Js,"DIV",{class:!0});var rQe=s(Bh);T(_L.$$.fragment,rQe),vuo=i(rQe),Iie=n(rQe,"P",{});var pft=s(Iie);Fuo=r(pft,"Register a new tokenizer in this mapping."),pft.forEach(t),rQe.forEach(t),Js.forEach(t),oXe=i(f),Ni=n(f,"H2",{class:!0});var tQe=s(Ni);Ih=n(tQe,"A",{id:!0,class:!0,href:!0});var _ft=s(Ih);Nie=n(_ft,"SPAN",{});var uft=s(Nie);T(uL.$$.fragment,uft),uft.forEach(t),_ft.forEach(t),Tuo=i(tQe),qie=n(tQe,"SPAN",{});var bft=s(qie);Muo=r(bft,"AutoFeatureExtractor"),bft.forEach(t),tQe.forEach(t),rXe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(bL.$$.fragment,Ks),Euo=i(Ks),vL=n(Ks,"P",{});var aQe=s(vL);Cuo=r(aQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WN=n(aQe,"A",{href:!0});var vft=s(WN);wuo=r(vft,"AutoFeatureExtractor.from_pretrained()"),vft.forEach(t),Auo=r(aQe," class method."),aQe.forEach(t),Luo=i(Ks),FL=n(Ks,"P",{});var nQe=s(FL);yuo=r(nQe,"This class cannot be instantiated directly using "),jie=n(nQe,"CODE",{});var Fft=s(jie);xuo=r(Fft,"__init__()"),Fft.forEach(t),$uo=r(nQe," (throws an error)."),nQe.forEach(t),kuo=i(Ks),He=n(Ks,"DIV",{class:!0});var aa=s(He);T(TL.$$.fragment,aa),Suo=i(aa),Die=n(aa,"P",{});var Tft=s(Die);Ruo=r(Tft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tft.forEach(t),Puo=i(aa),Pa=n(aa,"P",{});var sw=s(Pa);Buo=r(sw,"The feature extractor class to instantiate is selected based on the "),Gie=n(sw,"CODE",{});var Mft=s(Gie);Iuo=r(Mft,"model_type"),Mft.forEach(t),Nuo=r(sw,` property of the config object
(either passed as an argument or loaded from `),Oie=n(sw,"CODE",{});var Eft=s(Oie);quo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),juo=r(sw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vie=n(sw,"CODE",{});var Cft=s(Vie);Duo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),Guo=r(sw,":"),sw.forEach(t),Ouo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Nh=n(K,"LI",{});var Vye=s(Nh);Xie=n(Vye,"STRONG",{});var wft=s(Xie);Vuo=r(wft,"beit"),wft.forEach(t),Xuo=r(Vye," \u2014 "),HN=n(Vye,"A",{href:!0});var Aft=s(HN);zuo=r(Aft,"BeitFeatureExtractor"),Aft.forEach(t),Quo=r(Vye," (BEiT model)"),Vye.forEach(t),Wuo=i(K),qh=n(K,"LI",{});var Xye=s(qh);zie=n(Xye,"STRONG",{});var Lft=s(zie);Huo=r(Lft,"clip"),Lft.forEach(t),Uuo=r(Xye," \u2014 "),UN=n(Xye,"A",{href:!0});var yft=s(UN);Juo=r(yft,"CLIPFeatureExtractor"),yft.forEach(t),Yuo=r(Xye," (CLIP model)"),Xye.forEach(t),Kuo=i(K),jh=n(K,"LI",{});var zye=s(jh);Qie=n(zye,"STRONG",{});var xft=s(Qie);Zuo=r(xft,"convnext"),xft.forEach(t),e2o=r(zye," \u2014 "),JN=n(zye,"A",{href:!0});var $ft=s(JN);o2o=r($ft,"ConvNextFeatureExtractor"),$ft.forEach(t),r2o=r(zye," (ConvNeXT model)"),zye.forEach(t),t2o=i(K),Dh=n(K,"LI",{});var Qye=s(Dh);Wie=n(Qye,"STRONG",{});var kft=s(Wie);a2o=r(kft,"cvt"),kft.forEach(t),n2o=r(Qye," \u2014 "),YN=n(Qye,"A",{href:!0});var Sft=s(YN);s2o=r(Sft,"ConvNextFeatureExtractor"),Sft.forEach(t),l2o=r(Qye," (CvT model)"),Qye.forEach(t),i2o=i(K),Gh=n(K,"LI",{});var Wye=s(Gh);Hie=n(Wye,"STRONG",{});var Rft=s(Hie);d2o=r(Rft,"data2vec-audio"),Rft.forEach(t),c2o=r(Wye," \u2014 "),KN=n(Wye,"A",{href:!0});var Pft=s(KN);f2o=r(Pft,"Wav2Vec2FeatureExtractor"),Pft.forEach(t),m2o=r(Wye," (Data2VecAudio model)"),Wye.forEach(t),g2o=i(K),Oh=n(K,"LI",{});var Hye=s(Oh);Uie=n(Hye,"STRONG",{});var Bft=s(Uie);h2o=r(Bft,"data2vec-vision"),Bft.forEach(t),p2o=r(Hye," \u2014 "),ZN=n(Hye,"A",{href:!0});var Ift=s(ZN);_2o=r(Ift,"BeitFeatureExtractor"),Ift.forEach(t),u2o=r(Hye," (Data2VecVision model)"),Hye.forEach(t),b2o=i(K),Vh=n(K,"LI",{});var Uye=s(Vh);Jie=n(Uye,"STRONG",{});var Nft=s(Jie);v2o=r(Nft,"deit"),Nft.forEach(t),F2o=r(Uye," \u2014 "),eq=n(Uye,"A",{href:!0});var qft=s(eq);T2o=r(qft,"DeiTFeatureExtractor"),qft.forEach(t),M2o=r(Uye," (DeiT model)"),Uye.forEach(t),E2o=i(K),Xh=n(K,"LI",{});var Jye=s(Xh);Yie=n(Jye,"STRONG",{});var jft=s(Yie);C2o=r(jft,"detr"),jft.forEach(t),w2o=r(Jye," \u2014 "),oq=n(Jye,"A",{href:!0});var Dft=s(oq);A2o=r(Dft,"DetrFeatureExtractor"),Dft.forEach(t),L2o=r(Jye," (DETR model)"),Jye.forEach(t),y2o=i(K),zh=n(K,"LI",{});var Yye=s(zh);Kie=n(Yye,"STRONG",{});var Gft=s(Kie);x2o=r(Gft,"dpt"),Gft.forEach(t),$2o=r(Yye," \u2014 "),rq=n(Yye,"A",{href:!0});var Oft=s(rq);k2o=r(Oft,"DPTFeatureExtractor"),Oft.forEach(t),S2o=r(Yye," (DPT model)"),Yye.forEach(t),R2o=i(K),Qh=n(K,"LI",{});var Kye=s(Qh);Zie=n(Kye,"STRONG",{});var Vft=s(Zie);P2o=r(Vft,"flava"),Vft.forEach(t),B2o=r(Kye," \u2014 "),tq=n(Kye,"A",{href:!0});var Xft=s(tq);I2o=r(Xft,"FlavaFeatureExtractor"),Xft.forEach(t),N2o=r(Kye," (FLAVA model)"),Kye.forEach(t),q2o=i(K),Wh=n(K,"LI",{});var Zye=s(Wh);ede=n(Zye,"STRONG",{});var zft=s(ede);j2o=r(zft,"glpn"),zft.forEach(t),D2o=r(Zye," \u2014 "),aq=n(Zye,"A",{href:!0});var Qft=s(aq);G2o=r(Qft,"GLPNFeatureExtractor"),Qft.forEach(t),O2o=r(Zye," (GLPN model)"),Zye.forEach(t),V2o=i(K),Hh=n(K,"LI",{});var e9e=s(Hh);ode=n(e9e,"STRONG",{});var Wft=s(ode);X2o=r(Wft,"groupvit"),Wft.forEach(t),z2o=r(e9e," \u2014 "),nq=n(e9e,"A",{href:!0});var Hft=s(nq);Q2o=r(Hft,"CLIPFeatureExtractor"),Hft.forEach(t),W2o=r(e9e," (GroupViT model)"),e9e.forEach(t),H2o=i(K),Uh=n(K,"LI",{});var o9e=s(Uh);rde=n(o9e,"STRONG",{});var Uft=s(rde);U2o=r(Uft,"hubert"),Uft.forEach(t),J2o=r(o9e," \u2014 "),sq=n(o9e,"A",{href:!0});var Jft=s(sq);Y2o=r(Jft,"Wav2Vec2FeatureExtractor"),Jft.forEach(t),K2o=r(o9e," (Hubert model)"),o9e.forEach(t),Z2o=i(K),Jh=n(K,"LI",{});var r9e=s(Jh);tde=n(r9e,"STRONG",{});var Yft=s(tde);e1o=r(Yft,"imagegpt"),Yft.forEach(t),o1o=r(r9e," \u2014 "),lq=n(r9e,"A",{href:!0});var Kft=s(lq);r1o=r(Kft,"ImageGPTFeatureExtractor"),Kft.forEach(t),t1o=r(r9e," (ImageGPT model)"),r9e.forEach(t),a1o=i(K),Yh=n(K,"LI",{});var t9e=s(Yh);ade=n(t9e,"STRONG",{});var Zft=s(ade);n1o=r(Zft,"layoutlmv2"),Zft.forEach(t),s1o=r(t9e," \u2014 "),iq=n(t9e,"A",{href:!0});var emt=s(iq);l1o=r(emt,"LayoutLMv2FeatureExtractor"),emt.forEach(t),i1o=r(t9e," (LayoutLMv2 model)"),t9e.forEach(t),d1o=i(K),Kh=n(K,"LI",{});var a9e=s(Kh);nde=n(a9e,"STRONG",{});var omt=s(nde);c1o=r(omt,"layoutlmv3"),omt.forEach(t),f1o=r(a9e," \u2014 "),dq=n(a9e,"A",{href:!0});var rmt=s(dq);m1o=r(rmt,"LayoutLMv3FeatureExtractor"),rmt.forEach(t),g1o=r(a9e," (LayoutLMv3 model)"),a9e.forEach(t),h1o=i(K),Zh=n(K,"LI",{});var n9e=s(Zh);sde=n(n9e,"STRONG",{});var tmt=s(sde);p1o=r(tmt,"levit"),tmt.forEach(t),_1o=r(n9e," \u2014 "),cq=n(n9e,"A",{href:!0});var amt=s(cq);u1o=r(amt,"LevitFeatureExtractor"),amt.forEach(t),b1o=r(n9e," (LeViT model)"),n9e.forEach(t),v1o=i(K),ep=n(K,"LI",{});var s9e=s(ep);lde=n(s9e,"STRONG",{});var nmt=s(lde);F1o=r(nmt,"maskformer"),nmt.forEach(t),T1o=r(s9e," \u2014 "),fq=n(s9e,"A",{href:!0});var smt=s(fq);M1o=r(smt,"MaskFormerFeatureExtractor"),smt.forEach(t),E1o=r(s9e," (MaskFormer model)"),s9e.forEach(t),C1o=i(K),op=n(K,"LI",{});var l9e=s(op);ide=n(l9e,"STRONG",{});var lmt=s(ide);w1o=r(lmt,"mctct"),lmt.forEach(t),A1o=r(l9e," \u2014 "),mq=n(l9e,"A",{href:!0});var imt=s(mq);L1o=r(imt,"MCTCTFeatureExtractor"),imt.forEach(t),y1o=r(l9e," (M-CTC-T model)"),l9e.forEach(t),x1o=i(K),rp=n(K,"LI",{});var i9e=s(rp);dde=n(i9e,"STRONG",{});var dmt=s(dde);$1o=r(dmt,"mobilevit"),dmt.forEach(t),k1o=r(i9e," \u2014 "),gq=n(i9e,"A",{href:!0});var cmt=s(gq);S1o=r(cmt,"MobileViTFeatureExtractor"),cmt.forEach(t),R1o=r(i9e," (MobileViT model)"),i9e.forEach(t),P1o=i(K),tp=n(K,"LI",{});var d9e=s(tp);cde=n(d9e,"STRONG",{});var fmt=s(cde);B1o=r(fmt,"perceiver"),fmt.forEach(t),I1o=r(d9e," \u2014 "),hq=n(d9e,"A",{href:!0});var mmt=s(hq);N1o=r(mmt,"PerceiverFeatureExtractor"),mmt.forEach(t),q1o=r(d9e," (Perceiver model)"),d9e.forEach(t),j1o=i(K),ap=n(K,"LI",{});var c9e=s(ap);fde=n(c9e,"STRONG",{});var gmt=s(fde);D1o=r(gmt,"poolformer"),gmt.forEach(t),G1o=r(c9e," \u2014 "),pq=n(c9e,"A",{href:!0});var hmt=s(pq);O1o=r(hmt,"PoolFormerFeatureExtractor"),hmt.forEach(t),V1o=r(c9e," (PoolFormer model)"),c9e.forEach(t),X1o=i(K),np=n(K,"LI",{});var f9e=s(np);mde=n(f9e,"STRONG",{});var pmt=s(mde);z1o=r(pmt,"regnet"),pmt.forEach(t),Q1o=r(f9e," \u2014 "),_q=n(f9e,"A",{href:!0});var _mt=s(_q);W1o=r(_mt,"ConvNextFeatureExtractor"),_mt.forEach(t),H1o=r(f9e," (RegNet model)"),f9e.forEach(t),U1o=i(K),sp=n(K,"LI",{});var m9e=s(sp);gde=n(m9e,"STRONG",{});var umt=s(gde);J1o=r(umt,"resnet"),umt.forEach(t),Y1o=r(m9e," \u2014 "),uq=n(m9e,"A",{href:!0});var bmt=s(uq);K1o=r(bmt,"ConvNextFeatureExtractor"),bmt.forEach(t),Z1o=r(m9e," (ResNet model)"),m9e.forEach(t),ebo=i(K),lp=n(K,"LI",{});var g9e=s(lp);hde=n(g9e,"STRONG",{});var vmt=s(hde);obo=r(vmt,"segformer"),vmt.forEach(t),rbo=r(g9e," \u2014 "),bq=n(g9e,"A",{href:!0});var Fmt=s(bq);tbo=r(Fmt,"SegformerFeatureExtractor"),Fmt.forEach(t),abo=r(g9e," (SegFormer model)"),g9e.forEach(t),nbo=i(K),ip=n(K,"LI",{});var h9e=s(ip);pde=n(h9e,"STRONG",{});var Tmt=s(pde);sbo=r(Tmt,"speech_to_text"),Tmt.forEach(t),lbo=r(h9e," \u2014 "),vq=n(h9e,"A",{href:!0});var Mmt=s(vq);ibo=r(Mmt,"Speech2TextFeatureExtractor"),Mmt.forEach(t),dbo=r(h9e," (Speech2Text model)"),h9e.forEach(t),cbo=i(K),dp=n(K,"LI",{});var p9e=s(dp);_de=n(p9e,"STRONG",{});var Emt=s(_de);fbo=r(Emt,"swin"),Emt.forEach(t),mbo=r(p9e," \u2014 "),Fq=n(p9e,"A",{href:!0});var Cmt=s(Fq);gbo=r(Cmt,"ViTFeatureExtractor"),Cmt.forEach(t),hbo=r(p9e," (Swin Transformer model)"),p9e.forEach(t),pbo=i(K),cp=n(K,"LI",{});var _9e=s(cp);ude=n(_9e,"STRONG",{});var wmt=s(ude);_bo=r(wmt,"van"),wmt.forEach(t),ubo=r(_9e," \u2014 "),Tq=n(_9e,"A",{href:!0});var Amt=s(Tq);bbo=r(Amt,"ConvNextFeatureExtractor"),Amt.forEach(t),vbo=r(_9e," (VAN model)"),_9e.forEach(t),Fbo=i(K),fp=n(K,"LI",{});var u9e=s(fp);bde=n(u9e,"STRONG",{});var Lmt=s(bde);Tbo=r(Lmt,"vilt"),Lmt.forEach(t),Mbo=r(u9e," \u2014 "),Mq=n(u9e,"A",{href:!0});var ymt=s(Mq);Ebo=r(ymt,"ViltFeatureExtractor"),ymt.forEach(t),Cbo=r(u9e," (ViLT model)"),u9e.forEach(t),wbo=i(K),mp=n(K,"LI",{});var b9e=s(mp);vde=n(b9e,"STRONG",{});var xmt=s(vde);Abo=r(xmt,"vit"),xmt.forEach(t),Lbo=r(b9e," \u2014 "),Eq=n(b9e,"A",{href:!0});var $mt=s(Eq);ybo=r($mt,"ViTFeatureExtractor"),$mt.forEach(t),xbo=r(b9e," (ViT model)"),b9e.forEach(t),$bo=i(K),gp=n(K,"LI",{});var v9e=s(gp);Fde=n(v9e,"STRONG",{});var kmt=s(Fde);kbo=r(kmt,"vit_mae"),kmt.forEach(t),Sbo=r(v9e," \u2014 "),Cq=n(v9e,"A",{href:!0});var Smt=s(Cq);Rbo=r(Smt,"ViTFeatureExtractor"),Smt.forEach(t),Pbo=r(v9e," (ViTMAE model)"),v9e.forEach(t),Bbo=i(K),hp=n(K,"LI",{});var F9e=s(hp);Tde=n(F9e,"STRONG",{});var Rmt=s(Tde);Ibo=r(Rmt,"wav2vec2"),Rmt.forEach(t),Nbo=r(F9e," \u2014 "),wq=n(F9e,"A",{href:!0});var Pmt=s(wq);qbo=r(Pmt,"Wav2Vec2FeatureExtractor"),Pmt.forEach(t),jbo=r(F9e," (Wav2Vec2 model)"),F9e.forEach(t),Dbo=i(K),pp=n(K,"LI",{});var T9e=s(pp);Mde=n(T9e,"STRONG",{});var Bmt=s(Mde);Gbo=r(Bmt,"wav2vec2-conformer"),Bmt.forEach(t),Obo=r(T9e," \u2014 "),Aq=n(T9e,"A",{href:!0});var Imt=s(Aq);Vbo=r(Imt,"Wav2Vec2FeatureExtractor"),Imt.forEach(t),Xbo=r(T9e," (Wav2Vec2-Conformer model)"),T9e.forEach(t),zbo=i(K),_p=n(K,"LI",{});var M9e=s(_p);Ede=n(M9e,"STRONG",{});var Nmt=s(Ede);Qbo=r(Nmt,"yolos"),Nmt.forEach(t),Wbo=r(M9e," \u2014 "),Lq=n(M9e,"A",{href:!0});var qmt=s(Lq);Hbo=r(qmt,"YolosFeatureExtractor"),qmt.forEach(t),Ubo=r(M9e," (YOLOS model)"),M9e.forEach(t),K.forEach(t),Jbo=i(aa),T(up.$$.fragment,aa),Ybo=i(aa),T(bp.$$.fragment,aa),aa.forEach(t),Kbo=i(Ks),vp=n(Ks,"DIV",{class:!0});var sQe=s(vp);T(ML.$$.fragment,sQe),Zbo=i(sQe),Cde=n(sQe,"P",{});var jmt=s(Cde);evo=r(jmt,"Register a new feature extractor for this class."),jmt.forEach(t),sQe.forEach(t),Ks.forEach(t),tXe=i(f),qi=n(f,"H2",{class:!0});var lQe=s(qi);Fp=n(lQe,"A",{id:!0,class:!0,href:!0});var Dmt=s(Fp);wde=n(Dmt,"SPAN",{});var Gmt=s(wde);T(EL.$$.fragment,Gmt),Gmt.forEach(t),Dmt.forEach(t),ovo=i(lQe),Ade=n(lQe,"SPAN",{});var Omt=s(Ade);rvo=r(Omt,"AutoProcessor"),Omt.forEach(t),lQe.forEach(t),aXe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(CL.$$.fragment,Zs),tvo=i(Zs),wL=n(Zs,"P",{});var iQe=s(wL);avo=r(iQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yq=n(iQe,"A",{href:!0});var Vmt=s(yq);nvo=r(Vmt,"AutoProcessor.from_pretrained()"),Vmt.forEach(t),svo=r(iQe," class method."),iQe.forEach(t),lvo=i(Zs),AL=n(Zs,"P",{});var dQe=s(AL);ivo=r(dQe,"This class cannot be instantiated directly using "),Lde=n(dQe,"CODE",{});var Xmt=s(Lde);dvo=r(Xmt,"__init__()"),Xmt.forEach(t),cvo=r(dQe," (throws an error)."),dQe.forEach(t),fvo=i(Zs),Ue=n(Zs,"DIV",{class:!0});var na=s(Ue);T(LL.$$.fragment,na),mvo=i(na),yde=n(na,"P",{});var zmt=s(yde);gvo=r(zmt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zmt.forEach(t),hvo=i(na),ji=n(na,"P",{});var Cre=s(ji);pvo=r(Cre,"The processor class to instantiate is selected based on the "),xde=n(Cre,"CODE",{});var Qmt=s(xde);_vo=r(Qmt,"model_type"),Qmt.forEach(t),uvo=r(Cre,` property of the config object (either
passed as an argument or loaded from `),$de=n(Cre,"CODE",{});var Wmt=s($de);bvo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),vvo=r(Cre," if possible):"),Cre.forEach(t),Fvo=i(na),he=n(na,"UL",{});var ue=s(he);Tp=n(ue,"LI",{});var E9e=s(Tp);kde=n(E9e,"STRONG",{});var Hmt=s(kde);Tvo=r(Hmt,"clip"),Hmt.forEach(t),Mvo=r(E9e," \u2014 "),xq=n(E9e,"A",{href:!0});var Umt=s(xq);Evo=r(Umt,"CLIPProcessor"),Umt.forEach(t),Cvo=r(E9e," (CLIP model)"),E9e.forEach(t),wvo=i(ue),Mp=n(ue,"LI",{});var C9e=s(Mp);Sde=n(C9e,"STRONG",{});var Jmt=s(Sde);Avo=r(Jmt,"flava"),Jmt.forEach(t),Lvo=r(C9e," \u2014 "),Rde=n(C9e,"CODE",{});var Ymt=s(Rde);yvo=r(Ymt,"FLAVAProcessor"),Ymt.forEach(t),xvo=r(C9e," (FLAVA model)"),C9e.forEach(t),$vo=i(ue),Ep=n(ue,"LI",{});var w9e=s(Ep);Pde=n(w9e,"STRONG",{});var Kmt=s(Pde);kvo=r(Kmt,"groupvit"),Kmt.forEach(t),Svo=r(w9e," \u2014 "),$q=n(w9e,"A",{href:!0});var Zmt=s($q);Rvo=r(Zmt,"CLIPProcessor"),Zmt.forEach(t),Pvo=r(w9e," (GroupViT model)"),w9e.forEach(t),Bvo=i(ue),Cp=n(ue,"LI",{});var A9e=s(Cp);Bde=n(A9e,"STRONG",{});var egt=s(Bde);Ivo=r(egt,"layoutlmv2"),egt.forEach(t),Nvo=r(A9e," \u2014 "),kq=n(A9e,"A",{href:!0});var ogt=s(kq);qvo=r(ogt,"LayoutLMv2Processor"),ogt.forEach(t),jvo=r(A9e," (LayoutLMv2 model)"),A9e.forEach(t),Dvo=i(ue),wp=n(ue,"LI",{});var L9e=s(wp);Ide=n(L9e,"STRONG",{});var rgt=s(Ide);Gvo=r(rgt,"layoutlmv3"),rgt.forEach(t),Ovo=r(L9e," \u2014 "),Sq=n(L9e,"A",{href:!0});var tgt=s(Sq);Vvo=r(tgt,"LayoutLMv3Processor"),tgt.forEach(t),Xvo=r(L9e," (LayoutLMv3 model)"),L9e.forEach(t),zvo=i(ue),Ap=n(ue,"LI",{});var y9e=s(Ap);Nde=n(y9e,"STRONG",{});var agt=s(Nde);Qvo=r(agt,"layoutxlm"),agt.forEach(t),Wvo=r(y9e," \u2014 "),Rq=n(y9e,"A",{href:!0});var ngt=s(Rq);Hvo=r(ngt,"LayoutXLMProcessor"),ngt.forEach(t),Uvo=r(y9e," (LayoutXLM model)"),y9e.forEach(t),Jvo=i(ue),Lp=n(ue,"LI",{});var x9e=s(Lp);qde=n(x9e,"STRONG",{});var sgt=s(qde);Yvo=r(sgt,"sew"),sgt.forEach(t),Kvo=r(x9e," \u2014 "),Pq=n(x9e,"A",{href:!0});var lgt=s(Pq);Zvo=r(lgt,"Wav2Vec2Processor"),lgt.forEach(t),eFo=r(x9e," (SEW model)"),x9e.forEach(t),oFo=i(ue),yp=n(ue,"LI",{});var $9e=s(yp);jde=n($9e,"STRONG",{});var igt=s(jde);rFo=r(igt,"sew-d"),igt.forEach(t),tFo=r($9e," \u2014 "),Bq=n($9e,"A",{href:!0});var dgt=s(Bq);aFo=r(dgt,"Wav2Vec2Processor"),dgt.forEach(t),nFo=r($9e," (SEW-D model)"),$9e.forEach(t),sFo=i(ue),xp=n(ue,"LI",{});var k9e=s(xp);Dde=n(k9e,"STRONG",{});var cgt=s(Dde);lFo=r(cgt,"speech_to_text"),cgt.forEach(t),iFo=r(k9e," \u2014 "),Iq=n(k9e,"A",{href:!0});var fgt=s(Iq);dFo=r(fgt,"Speech2TextProcessor"),fgt.forEach(t),cFo=r(k9e," (Speech2Text model)"),k9e.forEach(t),fFo=i(ue),$p=n(ue,"LI",{});var S9e=s($p);Gde=n(S9e,"STRONG",{});var mgt=s(Gde);mFo=r(mgt,"speech_to_text_2"),mgt.forEach(t),gFo=r(S9e," \u2014 "),Nq=n(S9e,"A",{href:!0});var ggt=s(Nq);hFo=r(ggt,"Speech2Text2Processor"),ggt.forEach(t),pFo=r(S9e," (Speech2Text2 model)"),S9e.forEach(t),_Fo=i(ue),kp=n(ue,"LI",{});var R9e=s(kp);Ode=n(R9e,"STRONG",{});var hgt=s(Ode);uFo=r(hgt,"trocr"),hgt.forEach(t),bFo=r(R9e," \u2014 "),qq=n(R9e,"A",{href:!0});var pgt=s(qq);vFo=r(pgt,"TrOCRProcessor"),pgt.forEach(t),FFo=r(R9e," (TrOCR model)"),R9e.forEach(t),TFo=i(ue),Sp=n(ue,"LI",{});var P9e=s(Sp);Vde=n(P9e,"STRONG",{});var _gt=s(Vde);MFo=r(_gt,"unispeech"),_gt.forEach(t),EFo=r(P9e," \u2014 "),jq=n(P9e,"A",{href:!0});var ugt=s(jq);CFo=r(ugt,"Wav2Vec2Processor"),ugt.forEach(t),wFo=r(P9e," (UniSpeech model)"),P9e.forEach(t),AFo=i(ue),Rp=n(ue,"LI",{});var B9e=s(Rp);Xde=n(B9e,"STRONG",{});var bgt=s(Xde);LFo=r(bgt,"unispeech-sat"),bgt.forEach(t),yFo=r(B9e," \u2014 "),Dq=n(B9e,"A",{href:!0});var vgt=s(Dq);xFo=r(vgt,"Wav2Vec2Processor"),vgt.forEach(t),$Fo=r(B9e," (UniSpeechSat model)"),B9e.forEach(t),kFo=i(ue),Pp=n(ue,"LI",{});var I9e=s(Pp);zde=n(I9e,"STRONG",{});var Fgt=s(zde);SFo=r(Fgt,"vilt"),Fgt.forEach(t),RFo=r(I9e," \u2014 "),Gq=n(I9e,"A",{href:!0});var Tgt=s(Gq);PFo=r(Tgt,"ViltProcessor"),Tgt.forEach(t),BFo=r(I9e," (ViLT model)"),I9e.forEach(t),IFo=i(ue),Bp=n(ue,"LI",{});var N9e=s(Bp);Qde=n(N9e,"STRONG",{});var Mgt=s(Qde);NFo=r(Mgt,"vision-text-dual-encoder"),Mgt.forEach(t),qFo=r(N9e," \u2014 "),Oq=n(N9e,"A",{href:!0});var Egt=s(Oq);jFo=r(Egt,"VisionTextDualEncoderProcessor"),Egt.forEach(t),DFo=r(N9e," (VisionTextDualEncoder model)"),N9e.forEach(t),GFo=i(ue),Ip=n(ue,"LI",{});var q9e=s(Ip);Wde=n(q9e,"STRONG",{});var Cgt=s(Wde);OFo=r(Cgt,"wav2vec2"),Cgt.forEach(t),VFo=r(q9e," \u2014 "),Vq=n(q9e,"A",{href:!0});var wgt=s(Vq);XFo=r(wgt,"Wav2Vec2Processor"),wgt.forEach(t),zFo=r(q9e," (Wav2Vec2 model)"),q9e.forEach(t),QFo=i(ue),Np=n(ue,"LI",{});var j9e=s(Np);Hde=n(j9e,"STRONG",{});var Agt=s(Hde);WFo=r(Agt,"wav2vec2-conformer"),Agt.forEach(t),HFo=r(j9e," \u2014 "),Xq=n(j9e,"A",{href:!0});var Lgt=s(Xq);UFo=r(Lgt,"Wav2Vec2Processor"),Lgt.forEach(t),JFo=r(j9e," (Wav2Vec2-Conformer model)"),j9e.forEach(t),YFo=i(ue),qp=n(ue,"LI",{});var D9e=s(qp);Ude=n(D9e,"STRONG",{});var ygt=s(Ude);KFo=r(ygt,"wavlm"),ygt.forEach(t),ZFo=r(D9e," \u2014 "),zq=n(D9e,"A",{href:!0});var xgt=s(zq);e6o=r(xgt,"Wav2Vec2Processor"),xgt.forEach(t),o6o=r(D9e," (WavLM model)"),D9e.forEach(t),ue.forEach(t),r6o=i(na),T(jp.$$.fragment,na),t6o=i(na),T(Dp.$$.fragment,na),na.forEach(t),a6o=i(Zs),Gp=n(Zs,"DIV",{class:!0});var cQe=s(Gp);T(yL.$$.fragment,cQe),n6o=i(cQe),Jde=n(cQe,"P",{});var $gt=s(Jde);s6o=r($gt,"Register a new processor for this class."),$gt.forEach(t),cQe.forEach(t),Zs.forEach(t),nXe=i(f),Di=n(f,"H2",{class:!0});var fQe=s(Di);Op=n(fQe,"A",{id:!0,class:!0,href:!0});var kgt=s(Op);Yde=n(kgt,"SPAN",{});var Sgt=s(Yde);T(xL.$$.fragment,Sgt),Sgt.forEach(t),kgt.forEach(t),l6o=i(fQe),Kde=n(fQe,"SPAN",{});var Rgt=s(Kde);i6o=r(Rgt,"AutoModel"),Rgt.forEach(t),fQe.forEach(t),sXe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T($L.$$.fragment,el),d6o=i(el),Gi=n(el,"P",{});var wre=s(Gi);c6o=r(wre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qq=n(wre,"A",{href:!0});var Pgt=s(Qq);f6o=r(Pgt,"from_pretrained()"),Pgt.forEach(t),m6o=r(wre," class method or the "),Wq=n(wre,"A",{href:!0});var Bgt=s(Wq);g6o=r(Bgt,"from_config()"),Bgt.forEach(t),h6o=r(wre,` class
method.`),wre.forEach(t),p6o=i(el),kL=n(el,"P",{});var mQe=s(kL);_6o=r(mQe,"This class cannot be instantiated directly using "),Zde=n(mQe,"CODE",{});var Igt=s(Zde);u6o=r(Igt,"__init__()"),Igt.forEach(t),b6o=r(mQe," (throws an error)."),mQe.forEach(t),v6o=i(el),lt=n(el,"DIV",{class:!0});var lw=s(lt);T(SL.$$.fragment,lw),F6o=i(lw),ece=n(lw,"P",{});var Ngt=s(ece);T6o=r(Ngt,"Instantiates one of the base model classes of the library from a configuration."),Ngt.forEach(t),M6o=i(lw),Oi=n(lw,"P",{});var Are=s(Oi);E6o=r(Are,`Note:
Loading a model from its configuration file does `),oce=n(Are,"STRONG",{});var qgt=s(oce);C6o=r(qgt,"not"),qgt.forEach(t),w6o=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=n(Are,"A",{href:!0});var jgt=s(Hq);A6o=r(jgt,"from_pretrained()"),jgt.forEach(t),L6o=r(Are," to load the model weights."),Are.forEach(t),y6o=i(lw),T(Vp.$$.fragment,lw),lw.forEach(t),x6o=i(el),Je=n(el,"DIV",{class:!0});var sa=s(Je);T(RL.$$.fragment,sa),$6o=i(sa),rce=n(sa,"P",{});var Dgt=s(rce);k6o=r(Dgt,"Instantiate one of the base model classes of the library from a pretrained model."),Dgt.forEach(t),S6o=i(sa),Ba=n(sa,"P",{});var iw=s(Ba);R6o=r(iw,"The model class to instantiate is selected based on the "),tce=n(iw,"CODE",{});var Ggt=s(tce);P6o=r(Ggt,"model_type"),Ggt.forEach(t),B6o=r(iw,` property of the config object (either
passed as an argument or loaded from `),ace=n(iw,"CODE",{});var Ogt=s(ace);I6o=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),N6o=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(iw,"CODE",{});var Vgt=s(nce);q6o=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),j6o=r(iw,":"),iw.forEach(t),D6o=i(sa),y=n(sa,"UL",{});var x=s(y);Xp=n(x,"LI",{});var G9e=s(Xp);sce=n(G9e,"STRONG",{});var Xgt=s(sce);G6o=r(Xgt,"albert"),Xgt.forEach(t),O6o=r(G9e," \u2014 "),Uq=n(G9e,"A",{href:!0});var zgt=s(Uq);V6o=r(zgt,"AlbertModel"),zgt.forEach(t),X6o=r(G9e," (ALBERT model)"),G9e.forEach(t),z6o=i(x),zp=n(x,"LI",{});var O9e=s(zp);lce=n(O9e,"STRONG",{});var Qgt=s(lce);Q6o=r(Qgt,"bart"),Qgt.forEach(t),W6o=r(O9e," \u2014 "),Jq=n(O9e,"A",{href:!0});var Wgt=s(Jq);H6o=r(Wgt,"BartModel"),Wgt.forEach(t),U6o=r(O9e," (BART model)"),O9e.forEach(t),J6o=i(x),Qp=n(x,"LI",{});var V9e=s(Qp);ice=n(V9e,"STRONG",{});var Hgt=s(ice);Y6o=r(Hgt,"beit"),Hgt.forEach(t),K6o=r(V9e," \u2014 "),Yq=n(V9e,"A",{href:!0});var Ugt=s(Yq);Z6o=r(Ugt,"BeitModel"),Ugt.forEach(t),eTo=r(V9e," (BEiT model)"),V9e.forEach(t),oTo=i(x),Wp=n(x,"LI",{});var X9e=s(Wp);dce=n(X9e,"STRONG",{});var Jgt=s(dce);rTo=r(Jgt,"bert"),Jgt.forEach(t),tTo=r(X9e," \u2014 "),Kq=n(X9e,"A",{href:!0});var Ygt=s(Kq);aTo=r(Ygt,"BertModel"),Ygt.forEach(t),nTo=r(X9e," (BERT model)"),X9e.forEach(t),sTo=i(x),Hp=n(x,"LI",{});var z9e=s(Hp);cce=n(z9e,"STRONG",{});var Kgt=s(cce);lTo=r(Kgt,"bert-generation"),Kgt.forEach(t),iTo=r(z9e," \u2014 "),Zq=n(z9e,"A",{href:!0});var Zgt=s(Zq);dTo=r(Zgt,"BertGenerationEncoder"),Zgt.forEach(t),cTo=r(z9e," (Bert Generation model)"),z9e.forEach(t),fTo=i(x),Up=n(x,"LI",{});var Q9e=s(Up);fce=n(Q9e,"STRONG",{});var eht=s(fce);mTo=r(eht,"big_bird"),eht.forEach(t),gTo=r(Q9e," \u2014 "),ej=n(Q9e,"A",{href:!0});var oht=s(ej);hTo=r(oht,"BigBirdModel"),oht.forEach(t),pTo=r(Q9e," (BigBird model)"),Q9e.forEach(t),_To=i(x),Jp=n(x,"LI",{});var W9e=s(Jp);mce=n(W9e,"STRONG",{});var rht=s(mce);uTo=r(rht,"bigbird_pegasus"),rht.forEach(t),bTo=r(W9e," \u2014 "),oj=n(W9e,"A",{href:!0});var tht=s(oj);vTo=r(tht,"BigBirdPegasusModel"),tht.forEach(t),FTo=r(W9e," (BigBird-Pegasus model)"),W9e.forEach(t),TTo=i(x),Yp=n(x,"LI",{});var H9e=s(Yp);gce=n(H9e,"STRONG",{});var aht=s(gce);MTo=r(aht,"blenderbot"),aht.forEach(t),ETo=r(H9e," \u2014 "),rj=n(H9e,"A",{href:!0});var nht=s(rj);CTo=r(nht,"BlenderbotModel"),nht.forEach(t),wTo=r(H9e," (Blenderbot model)"),H9e.forEach(t),ATo=i(x),Kp=n(x,"LI",{});var U9e=s(Kp);hce=n(U9e,"STRONG",{});var sht=s(hce);LTo=r(sht,"blenderbot-small"),sht.forEach(t),yTo=r(U9e," \u2014 "),tj=n(U9e,"A",{href:!0});var lht=s(tj);xTo=r(lht,"BlenderbotSmallModel"),lht.forEach(t),$To=r(U9e," (BlenderbotSmall model)"),U9e.forEach(t),kTo=i(x),Zp=n(x,"LI",{});var J9e=s(Zp);pce=n(J9e,"STRONG",{});var iht=s(pce);STo=r(iht,"bloom"),iht.forEach(t),RTo=r(J9e," \u2014 "),aj=n(J9e,"A",{href:!0});var dht=s(aj);PTo=r(dht,"BloomModel"),dht.forEach(t),BTo=r(J9e," (BLOOM model)"),J9e.forEach(t),ITo=i(x),e_=n(x,"LI",{});var Y9e=s(e_);_ce=n(Y9e,"STRONG",{});var cht=s(_ce);NTo=r(cht,"camembert"),cht.forEach(t),qTo=r(Y9e," \u2014 "),nj=n(Y9e,"A",{href:!0});var fht=s(nj);jTo=r(fht,"CamembertModel"),fht.forEach(t),DTo=r(Y9e," (CamemBERT model)"),Y9e.forEach(t),GTo=i(x),o_=n(x,"LI",{});var K9e=s(o_);uce=n(K9e,"STRONG",{});var mht=s(uce);OTo=r(mht,"canine"),mht.forEach(t),VTo=r(K9e," \u2014 "),sj=n(K9e,"A",{href:!0});var ght=s(sj);XTo=r(ght,"CanineModel"),ght.forEach(t),zTo=r(K9e," (CANINE model)"),K9e.forEach(t),QTo=i(x),r_=n(x,"LI",{});var Z9e=s(r_);bce=n(Z9e,"STRONG",{});var hht=s(bce);WTo=r(hht,"clip"),hht.forEach(t),HTo=r(Z9e," \u2014 "),lj=n(Z9e,"A",{href:!0});var pht=s(lj);UTo=r(pht,"CLIPModel"),pht.forEach(t),JTo=r(Z9e," (CLIP model)"),Z9e.forEach(t),YTo=i(x),t_=n(x,"LI",{});var exe=s(t_);vce=n(exe,"STRONG",{});var _ht=s(vce);KTo=r(_ht,"codegen"),_ht.forEach(t),ZTo=r(exe," \u2014 "),ij=n(exe,"A",{href:!0});var uht=s(ij);e7o=r(uht,"CodeGenModel"),uht.forEach(t),o7o=r(exe," (CodeGen model)"),exe.forEach(t),r7o=i(x),a_=n(x,"LI",{});var oxe=s(a_);Fce=n(oxe,"STRONG",{});var bht=s(Fce);t7o=r(bht,"convbert"),bht.forEach(t),a7o=r(oxe," \u2014 "),dj=n(oxe,"A",{href:!0});var vht=s(dj);n7o=r(vht,"ConvBertModel"),vht.forEach(t),s7o=r(oxe," (ConvBERT model)"),oxe.forEach(t),l7o=i(x),n_=n(x,"LI",{});var rxe=s(n_);Tce=n(rxe,"STRONG",{});var Fht=s(Tce);i7o=r(Fht,"convnext"),Fht.forEach(t),d7o=r(rxe," \u2014 "),cj=n(rxe,"A",{href:!0});var Tht=s(cj);c7o=r(Tht,"ConvNextModel"),Tht.forEach(t),f7o=r(rxe," (ConvNeXT model)"),rxe.forEach(t),m7o=i(x),s_=n(x,"LI",{});var txe=s(s_);Mce=n(txe,"STRONG",{});var Mht=s(Mce);g7o=r(Mht,"ctrl"),Mht.forEach(t),h7o=r(txe," \u2014 "),fj=n(txe,"A",{href:!0});var Eht=s(fj);p7o=r(Eht,"CTRLModel"),Eht.forEach(t),_7o=r(txe," (CTRL model)"),txe.forEach(t),u7o=i(x),l_=n(x,"LI",{});var axe=s(l_);Ece=n(axe,"STRONG",{});var Cht=s(Ece);b7o=r(Cht,"cvt"),Cht.forEach(t),v7o=r(axe," \u2014 "),mj=n(axe,"A",{href:!0});var wht=s(mj);F7o=r(wht,"CvtModel"),wht.forEach(t),T7o=r(axe," (CvT model)"),axe.forEach(t),M7o=i(x),i_=n(x,"LI",{});var nxe=s(i_);Cce=n(nxe,"STRONG",{});var Aht=s(Cce);E7o=r(Aht,"data2vec-audio"),Aht.forEach(t),C7o=r(nxe," \u2014 "),gj=n(nxe,"A",{href:!0});var Lht=s(gj);w7o=r(Lht,"Data2VecAudioModel"),Lht.forEach(t),A7o=r(nxe," (Data2VecAudio model)"),nxe.forEach(t),L7o=i(x),d_=n(x,"LI",{});var sxe=s(d_);wce=n(sxe,"STRONG",{});var yht=s(wce);y7o=r(yht,"data2vec-text"),yht.forEach(t),x7o=r(sxe," \u2014 "),hj=n(sxe,"A",{href:!0});var xht=s(hj);$7o=r(xht,"Data2VecTextModel"),xht.forEach(t),k7o=r(sxe," (Data2VecText model)"),sxe.forEach(t),S7o=i(x),c_=n(x,"LI",{});var lxe=s(c_);Ace=n(lxe,"STRONG",{});var $ht=s(Ace);R7o=r($ht,"data2vec-vision"),$ht.forEach(t),P7o=r(lxe," \u2014 "),pj=n(lxe,"A",{href:!0});var kht=s(pj);B7o=r(kht,"Data2VecVisionModel"),kht.forEach(t),I7o=r(lxe," (Data2VecVision model)"),lxe.forEach(t),N7o=i(x),f_=n(x,"LI",{});var ixe=s(f_);Lce=n(ixe,"STRONG",{});var Sht=s(Lce);q7o=r(Sht,"deberta"),Sht.forEach(t),j7o=r(ixe," \u2014 "),_j=n(ixe,"A",{href:!0});var Rht=s(_j);D7o=r(Rht,"DebertaModel"),Rht.forEach(t),G7o=r(ixe," (DeBERTa model)"),ixe.forEach(t),O7o=i(x),m_=n(x,"LI",{});var dxe=s(m_);yce=n(dxe,"STRONG",{});var Pht=s(yce);V7o=r(Pht,"deberta-v2"),Pht.forEach(t),X7o=r(dxe," \u2014 "),uj=n(dxe,"A",{href:!0});var Bht=s(uj);z7o=r(Bht,"DebertaV2Model"),Bht.forEach(t),Q7o=r(dxe," (DeBERTa-v2 model)"),dxe.forEach(t),W7o=i(x),g_=n(x,"LI",{});var cxe=s(g_);xce=n(cxe,"STRONG",{});var Iht=s(xce);H7o=r(Iht,"decision_transformer"),Iht.forEach(t),U7o=r(cxe," \u2014 "),bj=n(cxe,"A",{href:!0});var Nht=s(bj);J7o=r(Nht,"DecisionTransformerModel"),Nht.forEach(t),Y7o=r(cxe," (Decision Transformer model)"),cxe.forEach(t),K7o=i(x),h_=n(x,"LI",{});var fxe=s(h_);$ce=n(fxe,"STRONG",{});var qht=s($ce);Z7o=r(qht,"deit"),qht.forEach(t),e8o=r(fxe," \u2014 "),vj=n(fxe,"A",{href:!0});var jht=s(vj);o8o=r(jht,"DeiTModel"),jht.forEach(t),r8o=r(fxe," (DeiT model)"),fxe.forEach(t),t8o=i(x),p_=n(x,"LI",{});var mxe=s(p_);kce=n(mxe,"STRONG",{});var Dht=s(kce);a8o=r(Dht,"detr"),Dht.forEach(t),n8o=r(mxe," \u2014 "),Fj=n(mxe,"A",{href:!0});var Ght=s(Fj);s8o=r(Ght,"DetrModel"),Ght.forEach(t),l8o=r(mxe," (DETR model)"),mxe.forEach(t),i8o=i(x),__=n(x,"LI",{});var gxe=s(__);Sce=n(gxe,"STRONG",{});var Oht=s(Sce);d8o=r(Oht,"distilbert"),Oht.forEach(t),c8o=r(gxe," \u2014 "),Tj=n(gxe,"A",{href:!0});var Vht=s(Tj);f8o=r(Vht,"DistilBertModel"),Vht.forEach(t),m8o=r(gxe," (DistilBERT model)"),gxe.forEach(t),g8o=i(x),u_=n(x,"LI",{});var hxe=s(u_);Rce=n(hxe,"STRONG",{});var Xht=s(Rce);h8o=r(Xht,"dpr"),Xht.forEach(t),p8o=r(hxe," \u2014 "),Mj=n(hxe,"A",{href:!0});var zht=s(Mj);_8o=r(zht,"DPRQuestionEncoder"),zht.forEach(t),u8o=r(hxe," (DPR model)"),hxe.forEach(t),b8o=i(x),b_=n(x,"LI",{});var pxe=s(b_);Pce=n(pxe,"STRONG",{});var Qht=s(Pce);v8o=r(Qht,"dpt"),Qht.forEach(t),F8o=r(pxe," \u2014 "),Ej=n(pxe,"A",{href:!0});var Wht=s(Ej);T8o=r(Wht,"DPTModel"),Wht.forEach(t),M8o=r(pxe," (DPT model)"),pxe.forEach(t),E8o=i(x),v_=n(x,"LI",{});var _xe=s(v_);Bce=n(_xe,"STRONG",{});var Hht=s(Bce);C8o=r(Hht,"electra"),Hht.forEach(t),w8o=r(_xe," \u2014 "),Cj=n(_xe,"A",{href:!0});var Uht=s(Cj);A8o=r(Uht,"ElectraModel"),Uht.forEach(t),L8o=r(_xe," (ELECTRA model)"),_xe.forEach(t),y8o=i(x),F_=n(x,"LI",{});var uxe=s(F_);Ice=n(uxe,"STRONG",{});var Jht=s(Ice);x8o=r(Jht,"flaubert"),Jht.forEach(t),$8o=r(uxe," \u2014 "),wj=n(uxe,"A",{href:!0});var Yht=s(wj);k8o=r(Yht,"FlaubertModel"),Yht.forEach(t),S8o=r(uxe," (FlauBERT model)"),uxe.forEach(t),R8o=i(x),T_=n(x,"LI",{});var bxe=s(T_);Nce=n(bxe,"STRONG",{});var Kht=s(Nce);P8o=r(Kht,"flava"),Kht.forEach(t),B8o=r(bxe," \u2014 "),Aj=n(bxe,"A",{href:!0});var Zht=s(Aj);I8o=r(Zht,"FlavaModel"),Zht.forEach(t),N8o=r(bxe," (FLAVA model)"),bxe.forEach(t),q8o=i(x),M_=n(x,"LI",{});var vxe=s(M_);qce=n(vxe,"STRONG",{});var ept=s(qce);j8o=r(ept,"fnet"),ept.forEach(t),D8o=r(vxe," \u2014 "),Lj=n(vxe,"A",{href:!0});var opt=s(Lj);G8o=r(opt,"FNetModel"),opt.forEach(t),O8o=r(vxe," (FNet model)"),vxe.forEach(t),V8o=i(x),E_=n(x,"LI",{});var Fxe=s(E_);jce=n(Fxe,"STRONG",{});var rpt=s(jce);X8o=r(rpt,"fsmt"),rpt.forEach(t),z8o=r(Fxe," \u2014 "),yj=n(Fxe,"A",{href:!0});var tpt=s(yj);Q8o=r(tpt,"FSMTModel"),tpt.forEach(t),W8o=r(Fxe," (FairSeq Machine-Translation model)"),Fxe.forEach(t),H8o=i(x),Qs=n(x,"LI",{});var xS=s(Qs);Dce=n(xS,"STRONG",{});var apt=s(Dce);U8o=r(apt,"funnel"),apt.forEach(t),J8o=r(xS," \u2014 "),xj=n(xS,"A",{href:!0});var npt=s(xj);Y8o=r(npt,"FunnelModel"),npt.forEach(t),K8o=r(xS," or "),$j=n(xS,"A",{href:!0});var spt=s($j);Z8o=r(spt,"FunnelBaseModel"),spt.forEach(t),eMo=r(xS," (Funnel Transformer model)"),xS.forEach(t),oMo=i(x),C_=n(x,"LI",{});var Txe=s(C_);Gce=n(Txe,"STRONG",{});var lpt=s(Gce);rMo=r(lpt,"glpn"),lpt.forEach(t),tMo=r(Txe," \u2014 "),kj=n(Txe,"A",{href:!0});var ipt=s(kj);aMo=r(ipt,"GLPNModel"),ipt.forEach(t),nMo=r(Txe," (GLPN model)"),Txe.forEach(t),sMo=i(x),w_=n(x,"LI",{});var Mxe=s(w_);Oce=n(Mxe,"STRONG",{});var dpt=s(Oce);lMo=r(dpt,"gpt2"),dpt.forEach(t),iMo=r(Mxe," \u2014 "),Sj=n(Mxe,"A",{href:!0});var cpt=s(Sj);dMo=r(cpt,"GPT2Model"),cpt.forEach(t),cMo=r(Mxe," (OpenAI GPT-2 model)"),Mxe.forEach(t),fMo=i(x),A_=n(x,"LI",{});var Exe=s(A_);Vce=n(Exe,"STRONG",{});var fpt=s(Vce);mMo=r(fpt,"gpt_neo"),fpt.forEach(t),gMo=r(Exe," \u2014 "),Rj=n(Exe,"A",{href:!0});var mpt=s(Rj);hMo=r(mpt,"GPTNeoModel"),mpt.forEach(t),pMo=r(Exe," (GPT Neo model)"),Exe.forEach(t),_Mo=i(x),L_=n(x,"LI",{});var Cxe=s(L_);Xce=n(Cxe,"STRONG",{});var gpt=s(Xce);uMo=r(gpt,"gpt_neox"),gpt.forEach(t),bMo=r(Cxe," \u2014 "),Pj=n(Cxe,"A",{href:!0});var hpt=s(Pj);vMo=r(hpt,"GPTNeoXModel"),hpt.forEach(t),FMo=r(Cxe," (GPT NeoX model)"),Cxe.forEach(t),TMo=i(x),y_=n(x,"LI",{});var wxe=s(y_);zce=n(wxe,"STRONG",{});var ppt=s(zce);MMo=r(ppt,"gptj"),ppt.forEach(t),EMo=r(wxe," \u2014 "),Bj=n(wxe,"A",{href:!0});var _pt=s(Bj);CMo=r(_pt,"GPTJModel"),_pt.forEach(t),wMo=r(wxe," (GPT-J model)"),wxe.forEach(t),AMo=i(x),x_=n(x,"LI",{});var Axe=s(x_);Qce=n(Axe,"STRONG",{});var upt=s(Qce);LMo=r(upt,"groupvit"),upt.forEach(t),yMo=r(Axe," \u2014 "),Ij=n(Axe,"A",{href:!0});var bpt=s(Ij);xMo=r(bpt,"GroupViTModel"),bpt.forEach(t),$Mo=r(Axe," (GroupViT model)"),Axe.forEach(t),kMo=i(x),$_=n(x,"LI",{});var Lxe=s($_);Wce=n(Lxe,"STRONG",{});var vpt=s(Wce);SMo=r(vpt,"hubert"),vpt.forEach(t),RMo=r(Lxe," \u2014 "),Nj=n(Lxe,"A",{href:!0});var Fpt=s(Nj);PMo=r(Fpt,"HubertModel"),Fpt.forEach(t),BMo=r(Lxe," (Hubert model)"),Lxe.forEach(t),IMo=i(x),k_=n(x,"LI",{});var yxe=s(k_);Hce=n(yxe,"STRONG",{});var Tpt=s(Hce);NMo=r(Tpt,"ibert"),Tpt.forEach(t),qMo=r(yxe," \u2014 "),qj=n(yxe,"A",{href:!0});var Mpt=s(qj);jMo=r(Mpt,"IBertModel"),Mpt.forEach(t),DMo=r(yxe," (I-BERT model)"),yxe.forEach(t),GMo=i(x),S_=n(x,"LI",{});var xxe=s(S_);Uce=n(xxe,"STRONG",{});var Ept=s(Uce);OMo=r(Ept,"imagegpt"),Ept.forEach(t),VMo=r(xxe," \u2014 "),jj=n(xxe,"A",{href:!0});var Cpt=s(jj);XMo=r(Cpt,"ImageGPTModel"),Cpt.forEach(t),zMo=r(xxe," (ImageGPT model)"),xxe.forEach(t),QMo=i(x),R_=n(x,"LI",{});var $xe=s(R_);Jce=n($xe,"STRONG",{});var wpt=s(Jce);WMo=r(wpt,"jukebox"),wpt.forEach(t),HMo=r($xe," \u2014 "),Yce=n($xe,"CODE",{});var Apt=s(Yce);UMo=r(Apt,"JukeboxModel"),Apt.forEach(t),JMo=r($xe," (Jukebox model)"),$xe.forEach(t),YMo=i(x),P_=n(x,"LI",{});var kxe=s(P_);Kce=n(kxe,"STRONG",{});var Lpt=s(Kce);KMo=r(Lpt,"layoutlm"),Lpt.forEach(t),ZMo=r(kxe," \u2014 "),Dj=n(kxe,"A",{href:!0});var ypt=s(Dj);e4o=r(ypt,"LayoutLMModel"),ypt.forEach(t),o4o=r(kxe," (LayoutLM model)"),kxe.forEach(t),r4o=i(x),B_=n(x,"LI",{});var Sxe=s(B_);Zce=n(Sxe,"STRONG",{});var xpt=s(Zce);t4o=r(xpt,"layoutlmv2"),xpt.forEach(t),a4o=r(Sxe," \u2014 "),Gj=n(Sxe,"A",{href:!0});var $pt=s(Gj);n4o=r($pt,"LayoutLMv2Model"),$pt.forEach(t),s4o=r(Sxe," (LayoutLMv2 model)"),Sxe.forEach(t),l4o=i(x),I_=n(x,"LI",{});var Rxe=s(I_);efe=n(Rxe,"STRONG",{});var kpt=s(efe);i4o=r(kpt,"layoutlmv3"),kpt.forEach(t),d4o=r(Rxe," \u2014 "),Oj=n(Rxe,"A",{href:!0});var Spt=s(Oj);c4o=r(Spt,"LayoutLMv3Model"),Spt.forEach(t),f4o=r(Rxe," (LayoutLMv3 model)"),Rxe.forEach(t),m4o=i(x),N_=n(x,"LI",{});var Pxe=s(N_);ofe=n(Pxe,"STRONG",{});var Rpt=s(ofe);g4o=r(Rpt,"led"),Rpt.forEach(t),h4o=r(Pxe," \u2014 "),Vj=n(Pxe,"A",{href:!0});var Ppt=s(Vj);p4o=r(Ppt,"LEDModel"),Ppt.forEach(t),_4o=r(Pxe," (LED model)"),Pxe.forEach(t),u4o=i(x),q_=n(x,"LI",{});var Bxe=s(q_);rfe=n(Bxe,"STRONG",{});var Bpt=s(rfe);b4o=r(Bpt,"levit"),Bpt.forEach(t),v4o=r(Bxe," \u2014 "),Xj=n(Bxe,"A",{href:!0});var Ipt=s(Xj);F4o=r(Ipt,"LevitModel"),Ipt.forEach(t),T4o=r(Bxe," (LeViT model)"),Bxe.forEach(t),M4o=i(x),j_=n(x,"LI",{});var Ixe=s(j_);tfe=n(Ixe,"STRONG",{});var Npt=s(tfe);E4o=r(Npt,"longformer"),Npt.forEach(t),C4o=r(Ixe," \u2014 "),zj=n(Ixe,"A",{href:!0});var qpt=s(zj);w4o=r(qpt,"LongformerModel"),qpt.forEach(t),A4o=r(Ixe," (Longformer model)"),Ixe.forEach(t),L4o=i(x),D_=n(x,"LI",{});var Nxe=s(D_);afe=n(Nxe,"STRONG",{});var jpt=s(afe);y4o=r(jpt,"longt5"),jpt.forEach(t),x4o=r(Nxe," \u2014 "),Qj=n(Nxe,"A",{href:!0});var Dpt=s(Qj);$4o=r(Dpt,"LongT5Model"),Dpt.forEach(t),k4o=r(Nxe," (LongT5 model)"),Nxe.forEach(t),S4o=i(x),G_=n(x,"LI",{});var qxe=s(G_);nfe=n(qxe,"STRONG",{});var Gpt=s(nfe);R4o=r(Gpt,"luke"),Gpt.forEach(t),P4o=r(qxe," \u2014 "),Wj=n(qxe,"A",{href:!0});var Opt=s(Wj);B4o=r(Opt,"LukeModel"),Opt.forEach(t),I4o=r(qxe," (LUKE model)"),qxe.forEach(t),N4o=i(x),O_=n(x,"LI",{});var jxe=s(O_);sfe=n(jxe,"STRONG",{});var Vpt=s(sfe);q4o=r(Vpt,"lxmert"),Vpt.forEach(t),j4o=r(jxe," \u2014 "),Hj=n(jxe,"A",{href:!0});var Xpt=s(Hj);D4o=r(Xpt,"LxmertModel"),Xpt.forEach(t),G4o=r(jxe," (LXMERT model)"),jxe.forEach(t),O4o=i(x),V_=n(x,"LI",{});var Dxe=s(V_);lfe=n(Dxe,"STRONG",{});var zpt=s(lfe);V4o=r(zpt,"m2m_100"),zpt.forEach(t),X4o=r(Dxe," \u2014 "),Uj=n(Dxe,"A",{href:!0});var Qpt=s(Uj);z4o=r(Qpt,"M2M100Model"),Qpt.forEach(t),Q4o=r(Dxe," (M2M100 model)"),Dxe.forEach(t),W4o=i(x),X_=n(x,"LI",{});var Gxe=s(X_);ife=n(Gxe,"STRONG",{});var Wpt=s(ife);H4o=r(Wpt,"marian"),Wpt.forEach(t),U4o=r(Gxe," \u2014 "),Jj=n(Gxe,"A",{href:!0});var Hpt=s(Jj);J4o=r(Hpt,"MarianModel"),Hpt.forEach(t),Y4o=r(Gxe," (Marian model)"),Gxe.forEach(t),K4o=i(x),z_=n(x,"LI",{});var Oxe=s(z_);dfe=n(Oxe,"STRONG",{});var Upt=s(dfe);Z4o=r(Upt,"maskformer"),Upt.forEach(t),eEo=r(Oxe," \u2014 "),Yj=n(Oxe,"A",{href:!0});var Jpt=s(Yj);oEo=r(Jpt,"MaskFormerModel"),Jpt.forEach(t),rEo=r(Oxe," (MaskFormer model)"),Oxe.forEach(t),tEo=i(x),Q_=n(x,"LI",{});var Vxe=s(Q_);cfe=n(Vxe,"STRONG",{});var Ypt=s(cfe);aEo=r(Ypt,"mbart"),Ypt.forEach(t),nEo=r(Vxe," \u2014 "),Kj=n(Vxe,"A",{href:!0});var Kpt=s(Kj);sEo=r(Kpt,"MBartModel"),Kpt.forEach(t),lEo=r(Vxe," (mBART model)"),Vxe.forEach(t),iEo=i(x),W_=n(x,"LI",{});var Xxe=s(W_);ffe=n(Xxe,"STRONG",{});var Zpt=s(ffe);dEo=r(Zpt,"mctct"),Zpt.forEach(t),cEo=r(Xxe," \u2014 "),Zj=n(Xxe,"A",{href:!0});var e_t=s(Zj);fEo=r(e_t,"MCTCTModel"),e_t.forEach(t),mEo=r(Xxe," (M-CTC-T model)"),Xxe.forEach(t),gEo=i(x),H_=n(x,"LI",{});var zxe=s(H_);mfe=n(zxe,"STRONG",{});var o_t=s(mfe);hEo=r(o_t,"megatron-bert"),o_t.forEach(t),pEo=r(zxe," \u2014 "),eD=n(zxe,"A",{href:!0});var r_t=s(eD);_Eo=r(r_t,"MegatronBertModel"),r_t.forEach(t),uEo=r(zxe," (Megatron-BERT model)"),zxe.forEach(t),bEo=i(x),U_=n(x,"LI",{});var Qxe=s(U_);gfe=n(Qxe,"STRONG",{});var t_t=s(gfe);vEo=r(t_t,"mobilebert"),t_t.forEach(t),FEo=r(Qxe," \u2014 "),oD=n(Qxe,"A",{href:!0});var a_t=s(oD);TEo=r(a_t,"MobileBertModel"),a_t.forEach(t),MEo=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),EEo=i(x),J_=n(x,"LI",{});var Wxe=s(J_);hfe=n(Wxe,"STRONG",{});var n_t=s(hfe);CEo=r(n_t,"mobilevit"),n_t.forEach(t),wEo=r(Wxe," \u2014 "),rD=n(Wxe,"A",{href:!0});var s_t=s(rD);AEo=r(s_t,"MobileViTModel"),s_t.forEach(t),LEo=r(Wxe," (MobileViT model)"),Wxe.forEach(t),yEo=i(x),Y_=n(x,"LI",{});var Hxe=s(Y_);pfe=n(Hxe,"STRONG",{});var l_t=s(pfe);xEo=r(l_t,"mpnet"),l_t.forEach(t),$Eo=r(Hxe," \u2014 "),tD=n(Hxe,"A",{href:!0});var i_t=s(tD);kEo=r(i_t,"MPNetModel"),i_t.forEach(t),SEo=r(Hxe," (MPNet model)"),Hxe.forEach(t),REo=i(x),K_=n(x,"LI",{});var Uxe=s(K_);_fe=n(Uxe,"STRONG",{});var d_t=s(_fe);PEo=r(d_t,"mt5"),d_t.forEach(t),BEo=r(Uxe," \u2014 "),aD=n(Uxe,"A",{href:!0});var c_t=s(aD);IEo=r(c_t,"MT5Model"),c_t.forEach(t),NEo=r(Uxe," (MT5 model)"),Uxe.forEach(t),qEo=i(x),Z_=n(x,"LI",{});var Jxe=s(Z_);ufe=n(Jxe,"STRONG",{});var f_t=s(ufe);jEo=r(f_t,"mvp"),f_t.forEach(t),DEo=r(Jxe," \u2014 "),nD=n(Jxe,"A",{href:!0});var m_t=s(nD);GEo=r(m_t,"MvpModel"),m_t.forEach(t),OEo=r(Jxe," (MVP model)"),Jxe.forEach(t),VEo=i(x),eu=n(x,"LI",{});var Yxe=s(eu);bfe=n(Yxe,"STRONG",{});var g_t=s(bfe);XEo=r(g_t,"nezha"),g_t.forEach(t),zEo=r(Yxe," \u2014 "),sD=n(Yxe,"A",{href:!0});var h_t=s(sD);QEo=r(h_t,"NezhaModel"),h_t.forEach(t),WEo=r(Yxe," (Nezha model)"),Yxe.forEach(t),HEo=i(x),ou=n(x,"LI",{});var Kxe=s(ou);vfe=n(Kxe,"STRONG",{});var p_t=s(vfe);UEo=r(p_t,"nystromformer"),p_t.forEach(t),JEo=r(Kxe," \u2014 "),lD=n(Kxe,"A",{href:!0});var __t=s(lD);YEo=r(__t,"NystromformerModel"),__t.forEach(t),KEo=r(Kxe," (Nystr\xF6mformer model)"),Kxe.forEach(t),ZEo=i(x),ru=n(x,"LI",{});var Zxe=s(ru);Ffe=n(Zxe,"STRONG",{});var u_t=s(Ffe);eCo=r(u_t,"openai-gpt"),u_t.forEach(t),oCo=r(Zxe," \u2014 "),iD=n(Zxe,"A",{href:!0});var b_t=s(iD);rCo=r(b_t,"OpenAIGPTModel"),b_t.forEach(t),tCo=r(Zxe," (OpenAI GPT model)"),Zxe.forEach(t),aCo=i(x),tu=n(x,"LI",{});var e$e=s(tu);Tfe=n(e$e,"STRONG",{});var v_t=s(Tfe);nCo=r(v_t,"opt"),v_t.forEach(t),sCo=r(e$e," \u2014 "),dD=n(e$e,"A",{href:!0});var F_t=s(dD);lCo=r(F_t,"OPTModel"),F_t.forEach(t),iCo=r(e$e," (OPT model)"),e$e.forEach(t),dCo=i(x),au=n(x,"LI",{});var o$e=s(au);Mfe=n(o$e,"STRONG",{});var T_t=s(Mfe);cCo=r(T_t,"pegasus"),T_t.forEach(t),fCo=r(o$e," \u2014 "),cD=n(o$e,"A",{href:!0});var M_t=s(cD);mCo=r(M_t,"PegasusModel"),M_t.forEach(t),gCo=r(o$e," (Pegasus model)"),o$e.forEach(t),hCo=i(x),nu=n(x,"LI",{});var r$e=s(nu);Efe=n(r$e,"STRONG",{});var E_t=s(Efe);pCo=r(E_t,"perceiver"),E_t.forEach(t),_Co=r(r$e," \u2014 "),fD=n(r$e,"A",{href:!0});var C_t=s(fD);uCo=r(C_t,"PerceiverModel"),C_t.forEach(t),bCo=r(r$e," (Perceiver model)"),r$e.forEach(t),vCo=i(x),su=n(x,"LI",{});var t$e=s(su);Cfe=n(t$e,"STRONG",{});var w_t=s(Cfe);FCo=r(w_t,"plbart"),w_t.forEach(t),TCo=r(t$e," \u2014 "),mD=n(t$e,"A",{href:!0});var A_t=s(mD);MCo=r(A_t,"PLBartModel"),A_t.forEach(t),ECo=r(t$e," (PLBart model)"),t$e.forEach(t),CCo=i(x),lu=n(x,"LI",{});var a$e=s(lu);wfe=n(a$e,"STRONG",{});var L_t=s(wfe);wCo=r(L_t,"poolformer"),L_t.forEach(t),ACo=r(a$e," \u2014 "),gD=n(a$e,"A",{href:!0});var y_t=s(gD);LCo=r(y_t,"PoolFormerModel"),y_t.forEach(t),yCo=r(a$e," (PoolFormer model)"),a$e.forEach(t),xCo=i(x),iu=n(x,"LI",{});var n$e=s(iu);Afe=n(n$e,"STRONG",{});var x_t=s(Afe);$Co=r(x_t,"prophetnet"),x_t.forEach(t),kCo=r(n$e," \u2014 "),hD=n(n$e,"A",{href:!0});var $_t=s(hD);SCo=r($_t,"ProphetNetModel"),$_t.forEach(t),RCo=r(n$e," (ProphetNet model)"),n$e.forEach(t),PCo=i(x),du=n(x,"LI",{});var s$e=s(du);Lfe=n(s$e,"STRONG",{});var k_t=s(Lfe);BCo=r(k_t,"qdqbert"),k_t.forEach(t),ICo=r(s$e," \u2014 "),pD=n(s$e,"A",{href:!0});var S_t=s(pD);NCo=r(S_t,"QDQBertModel"),S_t.forEach(t),qCo=r(s$e," (QDQBert model)"),s$e.forEach(t),jCo=i(x),cu=n(x,"LI",{});var l$e=s(cu);yfe=n(l$e,"STRONG",{});var R_t=s(yfe);DCo=r(R_t,"reformer"),R_t.forEach(t),GCo=r(l$e," \u2014 "),_D=n(l$e,"A",{href:!0});var P_t=s(_D);OCo=r(P_t,"ReformerModel"),P_t.forEach(t),VCo=r(l$e," (Reformer model)"),l$e.forEach(t),XCo=i(x),fu=n(x,"LI",{});var i$e=s(fu);xfe=n(i$e,"STRONG",{});var B_t=s(xfe);zCo=r(B_t,"regnet"),B_t.forEach(t),QCo=r(i$e," \u2014 "),uD=n(i$e,"A",{href:!0});var I_t=s(uD);WCo=r(I_t,"RegNetModel"),I_t.forEach(t),HCo=r(i$e," (RegNet model)"),i$e.forEach(t),UCo=i(x),mu=n(x,"LI",{});var d$e=s(mu);$fe=n(d$e,"STRONG",{});var N_t=s($fe);JCo=r(N_t,"rembert"),N_t.forEach(t),YCo=r(d$e," \u2014 "),bD=n(d$e,"A",{href:!0});var q_t=s(bD);KCo=r(q_t,"RemBertModel"),q_t.forEach(t),ZCo=r(d$e," (RemBERT model)"),d$e.forEach(t),e3o=i(x),gu=n(x,"LI",{});var c$e=s(gu);kfe=n(c$e,"STRONG",{});var j_t=s(kfe);o3o=r(j_t,"resnet"),j_t.forEach(t),r3o=r(c$e," \u2014 "),vD=n(c$e,"A",{href:!0});var D_t=s(vD);t3o=r(D_t,"ResNetModel"),D_t.forEach(t),a3o=r(c$e," (ResNet model)"),c$e.forEach(t),n3o=i(x),hu=n(x,"LI",{});var f$e=s(hu);Sfe=n(f$e,"STRONG",{});var G_t=s(Sfe);s3o=r(G_t,"retribert"),G_t.forEach(t),l3o=r(f$e," \u2014 "),FD=n(f$e,"A",{href:!0});var O_t=s(FD);i3o=r(O_t,"RetriBertModel"),O_t.forEach(t),d3o=r(f$e," (RetriBERT model)"),f$e.forEach(t),c3o=i(x),pu=n(x,"LI",{});var m$e=s(pu);Rfe=n(m$e,"STRONG",{});var V_t=s(Rfe);f3o=r(V_t,"roberta"),V_t.forEach(t),m3o=r(m$e," \u2014 "),TD=n(m$e,"A",{href:!0});var X_t=s(TD);g3o=r(X_t,"RobertaModel"),X_t.forEach(t),h3o=r(m$e," (RoBERTa model)"),m$e.forEach(t),p3o=i(x),_u=n(x,"LI",{});var g$e=s(_u);Pfe=n(g$e,"STRONG",{});var z_t=s(Pfe);_3o=r(z_t,"roformer"),z_t.forEach(t),u3o=r(g$e," \u2014 "),MD=n(g$e,"A",{href:!0});var Q_t=s(MD);b3o=r(Q_t,"RoFormerModel"),Q_t.forEach(t),v3o=r(g$e," (RoFormer model)"),g$e.forEach(t),F3o=i(x),uu=n(x,"LI",{});var h$e=s(uu);Bfe=n(h$e,"STRONG",{});var W_t=s(Bfe);T3o=r(W_t,"segformer"),W_t.forEach(t),M3o=r(h$e," \u2014 "),ED=n(h$e,"A",{href:!0});var H_t=s(ED);E3o=r(H_t,"SegformerModel"),H_t.forEach(t),C3o=r(h$e," (SegFormer model)"),h$e.forEach(t),w3o=i(x),bu=n(x,"LI",{});var p$e=s(bu);Ife=n(p$e,"STRONG",{});var U_t=s(Ife);A3o=r(U_t,"sew"),U_t.forEach(t),L3o=r(p$e," \u2014 "),CD=n(p$e,"A",{href:!0});var J_t=s(CD);y3o=r(J_t,"SEWModel"),J_t.forEach(t),x3o=r(p$e," (SEW model)"),p$e.forEach(t),$3o=i(x),vu=n(x,"LI",{});var _$e=s(vu);Nfe=n(_$e,"STRONG",{});var Y_t=s(Nfe);k3o=r(Y_t,"sew-d"),Y_t.forEach(t),S3o=r(_$e," \u2014 "),wD=n(_$e,"A",{href:!0});var K_t=s(wD);R3o=r(K_t,"SEWDModel"),K_t.forEach(t),P3o=r(_$e," (SEW-D model)"),_$e.forEach(t),B3o=i(x),Fu=n(x,"LI",{});var u$e=s(Fu);qfe=n(u$e,"STRONG",{});var Z_t=s(qfe);I3o=r(Z_t,"speech_to_text"),Z_t.forEach(t),N3o=r(u$e," \u2014 "),AD=n(u$e,"A",{href:!0});var eut=s(AD);q3o=r(eut,"Speech2TextModel"),eut.forEach(t),j3o=r(u$e," (Speech2Text model)"),u$e.forEach(t),D3o=i(x),Tu=n(x,"LI",{});var b$e=s(Tu);jfe=n(b$e,"STRONG",{});var out=s(jfe);G3o=r(out,"splinter"),out.forEach(t),O3o=r(b$e," \u2014 "),LD=n(b$e,"A",{href:!0});var rut=s(LD);V3o=r(rut,"SplinterModel"),rut.forEach(t),X3o=r(b$e," (Splinter model)"),b$e.forEach(t),z3o=i(x),Mu=n(x,"LI",{});var v$e=s(Mu);Dfe=n(v$e,"STRONG",{});var tut=s(Dfe);Q3o=r(tut,"squeezebert"),tut.forEach(t),W3o=r(v$e," \u2014 "),yD=n(v$e,"A",{href:!0});var aut=s(yD);H3o=r(aut,"SqueezeBertModel"),aut.forEach(t),U3o=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),J3o=i(x),Eu=n(x,"LI",{});var F$e=s(Eu);Gfe=n(F$e,"STRONG",{});var nut=s(Gfe);Y3o=r(nut,"swin"),nut.forEach(t),K3o=r(F$e," \u2014 "),xD=n(F$e,"A",{href:!0});var sut=s(xD);Z3o=r(sut,"SwinModel"),sut.forEach(t),e5o=r(F$e," (Swin Transformer model)"),F$e.forEach(t),o5o=i(x),Cu=n(x,"LI",{});var T$e=s(Cu);Ofe=n(T$e,"STRONG",{});var lut=s(Ofe);r5o=r(lut,"t5"),lut.forEach(t),t5o=r(T$e," \u2014 "),$D=n(T$e,"A",{href:!0});var iut=s($D);a5o=r(iut,"T5Model"),iut.forEach(t),n5o=r(T$e," (T5 model)"),T$e.forEach(t),s5o=i(x),wu=n(x,"LI",{});var M$e=s(wu);Vfe=n(M$e,"STRONG",{});var dut=s(Vfe);l5o=r(dut,"tapas"),dut.forEach(t),i5o=r(M$e," \u2014 "),kD=n(M$e,"A",{href:!0});var cut=s(kD);d5o=r(cut,"TapasModel"),cut.forEach(t),c5o=r(M$e," (TAPAS model)"),M$e.forEach(t),f5o=i(x),Au=n(x,"LI",{});var E$e=s(Au);Xfe=n(E$e,"STRONG",{});var fut=s(Xfe);m5o=r(fut,"trajectory_transformer"),fut.forEach(t),g5o=r(E$e," \u2014 "),SD=n(E$e,"A",{href:!0});var mut=s(SD);h5o=r(mut,"TrajectoryTransformerModel"),mut.forEach(t),p5o=r(E$e," (Trajectory Transformer model)"),E$e.forEach(t),_5o=i(x),Lu=n(x,"LI",{});var C$e=s(Lu);zfe=n(C$e,"STRONG",{});var gut=s(zfe);u5o=r(gut,"transfo-xl"),gut.forEach(t),b5o=r(C$e," \u2014 "),RD=n(C$e,"A",{href:!0});var hut=s(RD);v5o=r(hut,"TransfoXLModel"),hut.forEach(t),F5o=r(C$e," (Transformer-XL model)"),C$e.forEach(t),T5o=i(x),yu=n(x,"LI",{});var w$e=s(yu);Qfe=n(w$e,"STRONG",{});var put=s(Qfe);M5o=r(put,"unispeech"),put.forEach(t),E5o=r(w$e," \u2014 "),PD=n(w$e,"A",{href:!0});var _ut=s(PD);C5o=r(_ut,"UniSpeechModel"),_ut.forEach(t),w5o=r(w$e," (UniSpeech model)"),w$e.forEach(t),A5o=i(x),xu=n(x,"LI",{});var A$e=s(xu);Wfe=n(A$e,"STRONG",{});var uut=s(Wfe);L5o=r(uut,"unispeech-sat"),uut.forEach(t),y5o=r(A$e," \u2014 "),BD=n(A$e,"A",{href:!0});var but=s(BD);x5o=r(but,"UniSpeechSatModel"),but.forEach(t),$5o=r(A$e," (UniSpeechSat model)"),A$e.forEach(t),k5o=i(x),$u=n(x,"LI",{});var L$e=s($u);Hfe=n(L$e,"STRONG",{});var vut=s(Hfe);S5o=r(vut,"van"),vut.forEach(t),R5o=r(L$e," \u2014 "),ID=n(L$e,"A",{href:!0});var Fut=s(ID);P5o=r(Fut,"VanModel"),Fut.forEach(t),B5o=r(L$e," (VAN model)"),L$e.forEach(t),I5o=i(x),ku=n(x,"LI",{});var y$e=s(ku);Ufe=n(y$e,"STRONG",{});var Tut=s(Ufe);N5o=r(Tut,"vilt"),Tut.forEach(t),q5o=r(y$e," \u2014 "),ND=n(y$e,"A",{href:!0});var Mut=s(ND);j5o=r(Mut,"ViltModel"),Mut.forEach(t),D5o=r(y$e," (ViLT model)"),y$e.forEach(t),G5o=i(x),Su=n(x,"LI",{});var x$e=s(Su);Jfe=n(x$e,"STRONG",{});var Eut=s(Jfe);O5o=r(Eut,"vision-text-dual-encoder"),Eut.forEach(t),V5o=r(x$e," \u2014 "),qD=n(x$e,"A",{href:!0});var Cut=s(qD);X5o=r(Cut,"VisionTextDualEncoderModel"),Cut.forEach(t),z5o=r(x$e," (VisionTextDualEncoder model)"),x$e.forEach(t),Q5o=i(x),Ru=n(x,"LI",{});var $$e=s(Ru);Yfe=n($$e,"STRONG",{});var wut=s(Yfe);W5o=r(wut,"visual_bert"),wut.forEach(t),H5o=r($$e," \u2014 "),jD=n($$e,"A",{href:!0});var Aut=s(jD);U5o=r(Aut,"VisualBertModel"),Aut.forEach(t),J5o=r($$e," (VisualBERT model)"),$$e.forEach(t),Y5o=i(x),Pu=n(x,"LI",{});var k$e=s(Pu);Kfe=n(k$e,"STRONG",{});var Lut=s(Kfe);K5o=r(Lut,"vit"),Lut.forEach(t),Z5o=r(k$e," \u2014 "),DD=n(k$e,"A",{href:!0});var yut=s(DD);e0o=r(yut,"ViTModel"),yut.forEach(t),o0o=r(k$e," (ViT model)"),k$e.forEach(t),r0o=i(x),Bu=n(x,"LI",{});var S$e=s(Bu);Zfe=n(S$e,"STRONG",{});var xut=s(Zfe);t0o=r(xut,"vit_mae"),xut.forEach(t),a0o=r(S$e," \u2014 "),GD=n(S$e,"A",{href:!0});var $ut=s(GD);n0o=r($ut,"ViTMAEModel"),$ut.forEach(t),s0o=r(S$e," (ViTMAE model)"),S$e.forEach(t),l0o=i(x),Iu=n(x,"LI",{});var R$e=s(Iu);eme=n(R$e,"STRONG",{});var kut=s(eme);i0o=r(kut,"wav2vec2"),kut.forEach(t),d0o=r(R$e," \u2014 "),OD=n(R$e,"A",{href:!0});var Sut=s(OD);c0o=r(Sut,"Wav2Vec2Model"),Sut.forEach(t),f0o=r(R$e," (Wav2Vec2 model)"),R$e.forEach(t),m0o=i(x),Nu=n(x,"LI",{});var P$e=s(Nu);ome=n(P$e,"STRONG",{});var Rut=s(ome);g0o=r(Rut,"wav2vec2-conformer"),Rut.forEach(t),h0o=r(P$e," \u2014 "),VD=n(P$e,"A",{href:!0});var Put=s(VD);p0o=r(Put,"Wav2Vec2ConformerModel"),Put.forEach(t),_0o=r(P$e," (Wav2Vec2-Conformer model)"),P$e.forEach(t),u0o=i(x),qu=n(x,"LI",{});var B$e=s(qu);rme=n(B$e,"STRONG",{});var But=s(rme);b0o=r(But,"wavlm"),But.forEach(t),v0o=r(B$e," \u2014 "),XD=n(B$e,"A",{href:!0});var Iut=s(XD);F0o=r(Iut,"WavLMModel"),Iut.forEach(t),T0o=r(B$e," (WavLM model)"),B$e.forEach(t),M0o=i(x),ju=n(x,"LI",{});var I$e=s(ju);tme=n(I$e,"STRONG",{});var Nut=s(tme);E0o=r(Nut,"xglm"),Nut.forEach(t),C0o=r(I$e," \u2014 "),zD=n(I$e,"A",{href:!0});var qut=s(zD);w0o=r(qut,"XGLMModel"),qut.forEach(t),A0o=r(I$e," (XGLM model)"),I$e.forEach(t),L0o=i(x),Du=n(x,"LI",{});var N$e=s(Du);ame=n(N$e,"STRONG",{});var jut=s(ame);y0o=r(jut,"xlm"),jut.forEach(t),x0o=r(N$e," \u2014 "),QD=n(N$e,"A",{href:!0});var Dut=s(QD);$0o=r(Dut,"XLMModel"),Dut.forEach(t),k0o=r(N$e," (XLM model)"),N$e.forEach(t),S0o=i(x),Gu=n(x,"LI",{});var q$e=s(Gu);nme=n(q$e,"STRONG",{});var Gut=s(nme);R0o=r(Gut,"xlm-prophetnet"),Gut.forEach(t),P0o=r(q$e," \u2014 "),WD=n(q$e,"A",{href:!0});var Out=s(WD);B0o=r(Out,"XLMProphetNetModel"),Out.forEach(t),I0o=r(q$e," (XLM-ProphetNet model)"),q$e.forEach(t),N0o=i(x),Ou=n(x,"LI",{});var j$e=s(Ou);sme=n(j$e,"STRONG",{});var Vut=s(sme);q0o=r(Vut,"xlm-roberta"),Vut.forEach(t),j0o=r(j$e," \u2014 "),HD=n(j$e,"A",{href:!0});var Xut=s(HD);D0o=r(Xut,"XLMRobertaModel"),Xut.forEach(t),G0o=r(j$e," (XLM-RoBERTa model)"),j$e.forEach(t),O0o=i(x),Vu=n(x,"LI",{});var D$e=s(Vu);lme=n(D$e,"STRONG",{});var zut=s(lme);V0o=r(zut,"xlm-roberta-xl"),zut.forEach(t),X0o=r(D$e," \u2014 "),UD=n(D$e,"A",{href:!0});var Qut=s(UD);z0o=r(Qut,"XLMRobertaXLModel"),Qut.forEach(t),Q0o=r(D$e," (XLM-RoBERTa-XL model)"),D$e.forEach(t),W0o=i(x),Xu=n(x,"LI",{});var G$e=s(Xu);ime=n(G$e,"STRONG",{});var Wut=s(ime);H0o=r(Wut,"xlnet"),Wut.forEach(t),U0o=r(G$e," \u2014 "),JD=n(G$e,"A",{href:!0});var Hut=s(JD);J0o=r(Hut,"XLNetModel"),Hut.forEach(t),Y0o=r(G$e," (XLNet model)"),G$e.forEach(t),K0o=i(x),zu=n(x,"LI",{});var O$e=s(zu);dme=n(O$e,"STRONG",{});var Uut=s(dme);Z0o=r(Uut,"yolos"),Uut.forEach(t),ewo=r(O$e," \u2014 "),YD=n(O$e,"A",{href:!0});var Jut=s(YD);owo=r(Jut,"YolosModel"),Jut.forEach(t),rwo=r(O$e," (YOLOS model)"),O$e.forEach(t),two=i(x),Qu=n(x,"LI",{});var V$e=s(Qu);cme=n(V$e,"STRONG",{});var Yut=s(cme);awo=r(Yut,"yoso"),Yut.forEach(t),nwo=r(V$e," \u2014 "),KD=n(V$e,"A",{href:!0});var Kut=s(KD);swo=r(Kut,"YosoModel"),Kut.forEach(t),lwo=r(V$e," (YOSO model)"),V$e.forEach(t),x.forEach(t),iwo=i(sa),Wu=n(sa,"P",{});var X$e=s(Wu);dwo=r(X$e,"The model is set in evaluation mode by default using "),fme=n(X$e,"CODE",{});var Zut=s(fme);cwo=r(Zut,"model.eval()"),Zut.forEach(t),fwo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(X$e,"CODE",{});var e2t=s(mme);mwo=r(e2t,"model.train()"),e2t.forEach(t),X$e.forEach(t),gwo=i(sa),T(Hu.$$.fragment,sa),sa.forEach(t),el.forEach(t),lXe=i(f),Vi=n(f,"H2",{class:!0});var gQe=s(Vi);Uu=n(gQe,"A",{id:!0,class:!0,href:!0});var o2t=s(Uu);gme=n(o2t,"SPAN",{});var r2t=s(gme);T(PL.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),hwo=i(gQe),hme=n(gQe,"SPAN",{});var t2t=s(hme);pwo=r(t2t,"AutoModelForPreTraining"),t2t.forEach(t),gQe.forEach(t),iXe=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(BL.$$.fragment,ol),_wo=i(ol),Xi=n(ol,"P",{});var Lre=s(Xi);uwo=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZD=n(Lre,"A",{href:!0});var a2t=s(ZD);bwo=r(a2t,"from_pretrained()"),a2t.forEach(t),vwo=r(Lre," class method or the "),eG=n(Lre,"A",{href:!0});var n2t=s(eG);Fwo=r(n2t,"from_config()"),n2t.forEach(t),Two=r(Lre,` class
method.`),Lre.forEach(t),Mwo=i(ol),IL=n(ol,"P",{});var hQe=s(IL);Ewo=r(hQe,"This class cannot be instantiated directly using "),pme=n(hQe,"CODE",{});var s2t=s(pme);Cwo=r(s2t,"__init__()"),s2t.forEach(t),wwo=r(hQe," (throws an error)."),hQe.forEach(t),Awo=i(ol),it=n(ol,"DIV",{class:!0});var dw=s(it);T(NL.$$.fragment,dw),Lwo=i(dw),_me=n(dw,"P",{});var l2t=s(_me);ywo=r(l2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l2t.forEach(t),xwo=i(dw),zi=n(dw,"P",{});var yre=s(zi);$wo=r(yre,`Note:
Loading a model from its configuration file does `),ume=n(yre,"STRONG",{});var i2t=s(ume);kwo=r(i2t,"not"),i2t.forEach(t),Swo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(yre,"A",{href:!0});var d2t=s(oG);Rwo=r(d2t,"from_pretrained()"),d2t.forEach(t),Pwo=r(yre," to load the model weights."),yre.forEach(t),Bwo=i(dw),T(Ju.$$.fragment,dw),dw.forEach(t),Iwo=i(ol),Ye=n(ol,"DIV",{class:!0});var la=s(Ye);T(qL.$$.fragment,la),Nwo=i(la),bme=n(la,"P",{});var c2t=s(bme);qwo=r(c2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c2t.forEach(t),jwo=i(la),Ia=n(la,"P",{});var cw=s(Ia);Dwo=r(cw,"The model class to instantiate is selected based on the "),vme=n(cw,"CODE",{});var f2t=s(vme);Gwo=r(f2t,"model_type"),f2t.forEach(t),Owo=r(cw,` property of the config object (either
passed as an argument or loaded from `),Fme=n(cw,"CODE",{});var m2t=s(Fme);Vwo=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Xwo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(cw,"CODE",{});var g2t=s(Tme);zwo=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),Qwo=r(cw,":"),cw.forEach(t),Wwo=i(la),G=n(la,"UL",{});var O=s(G);Yu=n(O,"LI",{});var z$e=s(Yu);Mme=n(z$e,"STRONG",{});var h2t=s(Mme);Hwo=r(h2t,"albert"),h2t.forEach(t),Uwo=r(z$e," \u2014 "),rG=n(z$e,"A",{href:!0});var p2t=s(rG);Jwo=r(p2t,"AlbertForPreTraining"),p2t.forEach(t),Ywo=r(z$e," (ALBERT model)"),z$e.forEach(t),Kwo=i(O),Ku=n(O,"LI",{});var Q$e=s(Ku);Eme=n(Q$e,"STRONG",{});var _2t=s(Eme);Zwo=r(_2t,"bart"),_2t.forEach(t),eAo=r(Q$e," \u2014 "),tG=n(Q$e,"A",{href:!0});var u2t=s(tG);oAo=r(u2t,"BartForConditionalGeneration"),u2t.forEach(t),rAo=r(Q$e," (BART model)"),Q$e.forEach(t),tAo=i(O),Zu=n(O,"LI",{});var W$e=s(Zu);Cme=n(W$e,"STRONG",{});var b2t=s(Cme);aAo=r(b2t,"bert"),b2t.forEach(t),nAo=r(W$e," \u2014 "),aG=n(W$e,"A",{href:!0});var v2t=s(aG);sAo=r(v2t,"BertForPreTraining"),v2t.forEach(t),lAo=r(W$e," (BERT model)"),W$e.forEach(t),iAo=i(O),e2=n(O,"LI",{});var H$e=s(e2);wme=n(H$e,"STRONG",{});var F2t=s(wme);dAo=r(F2t,"big_bird"),F2t.forEach(t),cAo=r(H$e," \u2014 "),nG=n(H$e,"A",{href:!0});var T2t=s(nG);fAo=r(T2t,"BigBirdForPreTraining"),T2t.forEach(t),mAo=r(H$e," (BigBird model)"),H$e.forEach(t),gAo=i(O),o2=n(O,"LI",{});var U$e=s(o2);Ame=n(U$e,"STRONG",{});var M2t=s(Ame);hAo=r(M2t,"bloom"),M2t.forEach(t),pAo=r(U$e," \u2014 "),sG=n(U$e,"A",{href:!0});var E2t=s(sG);_Ao=r(E2t,"BloomForCausalLM"),E2t.forEach(t),uAo=r(U$e," (BLOOM model)"),U$e.forEach(t),bAo=i(O),r2=n(O,"LI",{});var J$e=s(r2);Lme=n(J$e,"STRONG",{});var C2t=s(Lme);vAo=r(C2t,"camembert"),C2t.forEach(t),FAo=r(J$e," \u2014 "),lG=n(J$e,"A",{href:!0});var w2t=s(lG);TAo=r(w2t,"CamembertForMaskedLM"),w2t.forEach(t),MAo=r(J$e," (CamemBERT model)"),J$e.forEach(t),EAo=i(O),t2=n(O,"LI",{});var Y$e=s(t2);yme=n(Y$e,"STRONG",{});var A2t=s(yme);CAo=r(A2t,"ctrl"),A2t.forEach(t),wAo=r(Y$e," \u2014 "),iG=n(Y$e,"A",{href:!0});var L2t=s(iG);AAo=r(L2t,"CTRLLMHeadModel"),L2t.forEach(t),LAo=r(Y$e," (CTRL model)"),Y$e.forEach(t),yAo=i(O),a2=n(O,"LI",{});var K$e=s(a2);xme=n(K$e,"STRONG",{});var y2t=s(xme);xAo=r(y2t,"data2vec-text"),y2t.forEach(t),$Ao=r(K$e," \u2014 "),dG=n(K$e,"A",{href:!0});var x2t=s(dG);kAo=r(x2t,"Data2VecTextForMaskedLM"),x2t.forEach(t),SAo=r(K$e," (Data2VecText model)"),K$e.forEach(t),RAo=i(O),n2=n(O,"LI",{});var Z$e=s(n2);$me=n(Z$e,"STRONG",{});var $2t=s($me);PAo=r($2t,"deberta"),$2t.forEach(t),BAo=r(Z$e," \u2014 "),cG=n(Z$e,"A",{href:!0});var k2t=s(cG);IAo=r(k2t,"DebertaForMaskedLM"),k2t.forEach(t),NAo=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),qAo=i(O),s2=n(O,"LI",{});var eke=s(s2);kme=n(eke,"STRONG",{});var S2t=s(kme);jAo=r(S2t,"deberta-v2"),S2t.forEach(t),DAo=r(eke," \u2014 "),fG=n(eke,"A",{href:!0});var R2t=s(fG);GAo=r(R2t,"DebertaV2ForMaskedLM"),R2t.forEach(t),OAo=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),VAo=i(O),l2=n(O,"LI",{});var oke=s(l2);Sme=n(oke,"STRONG",{});var P2t=s(Sme);XAo=r(P2t,"distilbert"),P2t.forEach(t),zAo=r(oke," \u2014 "),mG=n(oke,"A",{href:!0});var B2t=s(mG);QAo=r(B2t,"DistilBertForMaskedLM"),B2t.forEach(t),WAo=r(oke," (DistilBERT model)"),oke.forEach(t),HAo=i(O),i2=n(O,"LI",{});var rke=s(i2);Rme=n(rke,"STRONG",{});var I2t=s(Rme);UAo=r(I2t,"electra"),I2t.forEach(t),JAo=r(rke," \u2014 "),gG=n(rke,"A",{href:!0});var N2t=s(gG);YAo=r(N2t,"ElectraForPreTraining"),N2t.forEach(t),KAo=r(rke," (ELECTRA model)"),rke.forEach(t),ZAo=i(O),d2=n(O,"LI",{});var tke=s(d2);Pme=n(tke,"STRONG",{});var q2t=s(Pme);eLo=r(q2t,"flaubert"),q2t.forEach(t),oLo=r(tke," \u2014 "),hG=n(tke,"A",{href:!0});var j2t=s(hG);rLo=r(j2t,"FlaubertWithLMHeadModel"),j2t.forEach(t),tLo=r(tke," (FlauBERT model)"),tke.forEach(t),aLo=i(O),c2=n(O,"LI",{});var ake=s(c2);Bme=n(ake,"STRONG",{});var D2t=s(Bme);nLo=r(D2t,"flava"),D2t.forEach(t),sLo=r(ake," \u2014 "),pG=n(ake,"A",{href:!0});var G2t=s(pG);lLo=r(G2t,"FlavaForPreTraining"),G2t.forEach(t),iLo=r(ake," (FLAVA model)"),ake.forEach(t),dLo=i(O),f2=n(O,"LI",{});var nke=s(f2);Ime=n(nke,"STRONG",{});var O2t=s(Ime);cLo=r(O2t,"fnet"),O2t.forEach(t),fLo=r(nke," \u2014 "),_G=n(nke,"A",{href:!0});var V2t=s(_G);mLo=r(V2t,"FNetForPreTraining"),V2t.forEach(t),gLo=r(nke," (FNet model)"),nke.forEach(t),hLo=i(O),m2=n(O,"LI",{});var ske=s(m2);Nme=n(ske,"STRONG",{});var X2t=s(Nme);pLo=r(X2t,"fsmt"),X2t.forEach(t),_Lo=r(ske," \u2014 "),uG=n(ske,"A",{href:!0});var z2t=s(uG);uLo=r(z2t,"FSMTForConditionalGeneration"),z2t.forEach(t),bLo=r(ske," (FairSeq Machine-Translation model)"),ske.forEach(t),vLo=i(O),g2=n(O,"LI",{});var lke=s(g2);qme=n(lke,"STRONG",{});var Q2t=s(qme);FLo=r(Q2t,"funnel"),Q2t.forEach(t),TLo=r(lke," \u2014 "),bG=n(lke,"A",{href:!0});var W2t=s(bG);MLo=r(W2t,"FunnelForPreTraining"),W2t.forEach(t),ELo=r(lke," (Funnel Transformer model)"),lke.forEach(t),CLo=i(O),h2=n(O,"LI",{});var ike=s(h2);jme=n(ike,"STRONG",{});var H2t=s(jme);wLo=r(H2t,"gpt2"),H2t.forEach(t),ALo=r(ike," \u2014 "),vG=n(ike,"A",{href:!0});var U2t=s(vG);LLo=r(U2t,"GPT2LMHeadModel"),U2t.forEach(t),yLo=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),xLo=i(O),p2=n(O,"LI",{});var dke=s(p2);Dme=n(dke,"STRONG",{});var J2t=s(Dme);$Lo=r(J2t,"ibert"),J2t.forEach(t),kLo=r(dke," \u2014 "),FG=n(dke,"A",{href:!0});var Y2t=s(FG);SLo=r(Y2t,"IBertForMaskedLM"),Y2t.forEach(t),RLo=r(dke," (I-BERT model)"),dke.forEach(t),PLo=i(O),_2=n(O,"LI",{});var cke=s(_2);Gme=n(cke,"STRONG",{});var K2t=s(Gme);BLo=r(K2t,"layoutlm"),K2t.forEach(t),ILo=r(cke," \u2014 "),TG=n(cke,"A",{href:!0});var Z2t=s(TG);NLo=r(Z2t,"LayoutLMForMaskedLM"),Z2t.forEach(t),qLo=r(cke," (LayoutLM model)"),cke.forEach(t),jLo=i(O),u2=n(O,"LI",{});var fke=s(u2);Ome=n(fke,"STRONG",{});var e1t=s(Ome);DLo=r(e1t,"longformer"),e1t.forEach(t),GLo=r(fke," \u2014 "),MG=n(fke,"A",{href:!0});var o1t=s(MG);OLo=r(o1t,"LongformerForMaskedLM"),o1t.forEach(t),VLo=r(fke," (Longformer model)"),fke.forEach(t),XLo=i(O),b2=n(O,"LI",{});var mke=s(b2);Vme=n(mke,"STRONG",{});var r1t=s(Vme);zLo=r(r1t,"lxmert"),r1t.forEach(t),QLo=r(mke," \u2014 "),EG=n(mke,"A",{href:!0});var t1t=s(EG);WLo=r(t1t,"LxmertForPreTraining"),t1t.forEach(t),HLo=r(mke," (LXMERT model)"),mke.forEach(t),ULo=i(O),v2=n(O,"LI",{});var gke=s(v2);Xme=n(gke,"STRONG",{});var a1t=s(Xme);JLo=r(a1t,"megatron-bert"),a1t.forEach(t),YLo=r(gke," \u2014 "),CG=n(gke,"A",{href:!0});var n1t=s(CG);KLo=r(n1t,"MegatronBertForPreTraining"),n1t.forEach(t),ZLo=r(gke," (Megatron-BERT model)"),gke.forEach(t),eyo=i(O),F2=n(O,"LI",{});var hke=s(F2);zme=n(hke,"STRONG",{});var s1t=s(zme);oyo=r(s1t,"mobilebert"),s1t.forEach(t),ryo=r(hke," \u2014 "),wG=n(hke,"A",{href:!0});var l1t=s(wG);tyo=r(l1t,"MobileBertForPreTraining"),l1t.forEach(t),ayo=r(hke," (MobileBERT model)"),hke.forEach(t),nyo=i(O),T2=n(O,"LI",{});var pke=s(T2);Qme=n(pke,"STRONG",{});var i1t=s(Qme);syo=r(i1t,"mpnet"),i1t.forEach(t),lyo=r(pke," \u2014 "),AG=n(pke,"A",{href:!0});var d1t=s(AG);iyo=r(d1t,"MPNetForMaskedLM"),d1t.forEach(t),dyo=r(pke," (MPNet model)"),pke.forEach(t),cyo=i(O),M2=n(O,"LI",{});var _ke=s(M2);Wme=n(_ke,"STRONG",{});var c1t=s(Wme);fyo=r(c1t,"mvp"),c1t.forEach(t),myo=r(_ke," \u2014 "),LG=n(_ke,"A",{href:!0});var f1t=s(LG);gyo=r(f1t,"MvpForConditionalGeneration"),f1t.forEach(t),hyo=r(_ke," (MVP model)"),_ke.forEach(t),pyo=i(O),E2=n(O,"LI",{});var uke=s(E2);Hme=n(uke,"STRONG",{});var m1t=s(Hme);_yo=r(m1t,"nezha"),m1t.forEach(t),uyo=r(uke," \u2014 "),yG=n(uke,"A",{href:!0});var g1t=s(yG);byo=r(g1t,"NezhaForPreTraining"),g1t.forEach(t),vyo=r(uke," (Nezha model)"),uke.forEach(t),Fyo=i(O),C2=n(O,"LI",{});var bke=s(C2);Ume=n(bke,"STRONG",{});var h1t=s(Ume);Tyo=r(h1t,"openai-gpt"),h1t.forEach(t),Myo=r(bke," \u2014 "),xG=n(bke,"A",{href:!0});var p1t=s(xG);Eyo=r(p1t,"OpenAIGPTLMHeadModel"),p1t.forEach(t),Cyo=r(bke," (OpenAI GPT model)"),bke.forEach(t),wyo=i(O),w2=n(O,"LI",{});var vke=s(w2);Jme=n(vke,"STRONG",{});var _1t=s(Jme);Ayo=r(_1t,"retribert"),_1t.forEach(t),Lyo=r(vke," \u2014 "),$G=n(vke,"A",{href:!0});var u1t=s($G);yyo=r(u1t,"RetriBertModel"),u1t.forEach(t),xyo=r(vke," (RetriBERT model)"),vke.forEach(t),$yo=i(O),A2=n(O,"LI",{});var Fke=s(A2);Yme=n(Fke,"STRONG",{});var b1t=s(Yme);kyo=r(b1t,"roberta"),b1t.forEach(t),Syo=r(Fke," \u2014 "),kG=n(Fke,"A",{href:!0});var v1t=s(kG);Ryo=r(v1t,"RobertaForMaskedLM"),v1t.forEach(t),Pyo=r(Fke," (RoBERTa model)"),Fke.forEach(t),Byo=i(O),L2=n(O,"LI",{});var Tke=s(L2);Kme=n(Tke,"STRONG",{});var F1t=s(Kme);Iyo=r(F1t,"splinter"),F1t.forEach(t),Nyo=r(Tke," \u2014 "),SG=n(Tke,"A",{href:!0});var T1t=s(SG);qyo=r(T1t,"SplinterForPreTraining"),T1t.forEach(t),jyo=r(Tke," (Splinter model)"),Tke.forEach(t),Dyo=i(O),y2=n(O,"LI",{});var Mke=s(y2);Zme=n(Mke,"STRONG",{});var M1t=s(Zme);Gyo=r(M1t,"squeezebert"),M1t.forEach(t),Oyo=r(Mke," \u2014 "),RG=n(Mke,"A",{href:!0});var E1t=s(RG);Vyo=r(E1t,"SqueezeBertForMaskedLM"),E1t.forEach(t),Xyo=r(Mke," (SqueezeBERT model)"),Mke.forEach(t),zyo=i(O),x2=n(O,"LI",{});var Eke=s(x2);ege=n(Eke,"STRONG",{});var C1t=s(ege);Qyo=r(C1t,"t5"),C1t.forEach(t),Wyo=r(Eke," \u2014 "),PG=n(Eke,"A",{href:!0});var w1t=s(PG);Hyo=r(w1t,"T5ForConditionalGeneration"),w1t.forEach(t),Uyo=r(Eke," (T5 model)"),Eke.forEach(t),Jyo=i(O),$2=n(O,"LI",{});var Cke=s($2);oge=n(Cke,"STRONG",{});var A1t=s(oge);Yyo=r(A1t,"tapas"),A1t.forEach(t),Kyo=r(Cke," \u2014 "),BG=n(Cke,"A",{href:!0});var L1t=s(BG);Zyo=r(L1t,"TapasForMaskedLM"),L1t.forEach(t),e9o=r(Cke," (TAPAS model)"),Cke.forEach(t),o9o=i(O),k2=n(O,"LI",{});var wke=s(k2);rge=n(wke,"STRONG",{});var y1t=s(rge);r9o=r(y1t,"transfo-xl"),y1t.forEach(t),t9o=r(wke," \u2014 "),IG=n(wke,"A",{href:!0});var x1t=s(IG);a9o=r(x1t,"TransfoXLLMHeadModel"),x1t.forEach(t),n9o=r(wke," (Transformer-XL model)"),wke.forEach(t),s9o=i(O),S2=n(O,"LI",{});var Ake=s(S2);tge=n(Ake,"STRONG",{});var $1t=s(tge);l9o=r($1t,"unispeech"),$1t.forEach(t),i9o=r(Ake," \u2014 "),NG=n(Ake,"A",{href:!0});var k1t=s(NG);d9o=r(k1t,"UniSpeechForPreTraining"),k1t.forEach(t),c9o=r(Ake," (UniSpeech model)"),Ake.forEach(t),f9o=i(O),R2=n(O,"LI",{});var Lke=s(R2);age=n(Lke,"STRONG",{});var S1t=s(age);m9o=r(S1t,"unispeech-sat"),S1t.forEach(t),g9o=r(Lke," \u2014 "),qG=n(Lke,"A",{href:!0});var R1t=s(qG);h9o=r(R1t,"UniSpeechSatForPreTraining"),R1t.forEach(t),p9o=r(Lke," (UniSpeechSat model)"),Lke.forEach(t),_9o=i(O),P2=n(O,"LI",{});var yke=s(P2);nge=n(yke,"STRONG",{});var P1t=s(nge);u9o=r(P1t,"visual_bert"),P1t.forEach(t),b9o=r(yke," \u2014 "),jG=n(yke,"A",{href:!0});var B1t=s(jG);v9o=r(B1t,"VisualBertForPreTraining"),B1t.forEach(t),F9o=r(yke," (VisualBERT model)"),yke.forEach(t),T9o=i(O),B2=n(O,"LI",{});var xke=s(B2);sge=n(xke,"STRONG",{});var I1t=s(sge);M9o=r(I1t,"vit_mae"),I1t.forEach(t),E9o=r(xke," \u2014 "),DG=n(xke,"A",{href:!0});var N1t=s(DG);C9o=r(N1t,"ViTMAEForPreTraining"),N1t.forEach(t),w9o=r(xke," (ViTMAE model)"),xke.forEach(t),A9o=i(O),I2=n(O,"LI",{});var $ke=s(I2);lge=n($ke,"STRONG",{});var q1t=s(lge);L9o=r(q1t,"wav2vec2"),q1t.forEach(t),y9o=r($ke," \u2014 "),GG=n($ke,"A",{href:!0});var j1t=s(GG);x9o=r(j1t,"Wav2Vec2ForPreTraining"),j1t.forEach(t),$9o=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),k9o=i(O),N2=n(O,"LI",{});var kke=s(N2);ige=n(kke,"STRONG",{});var D1t=s(ige);S9o=r(D1t,"wav2vec2-conformer"),D1t.forEach(t),R9o=r(kke," \u2014 "),OG=n(kke,"A",{href:!0});var G1t=s(OG);P9o=r(G1t,"Wav2Vec2ConformerForPreTraining"),G1t.forEach(t),B9o=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),I9o=i(O),q2=n(O,"LI",{});var Ske=s(q2);dge=n(Ske,"STRONG",{});var O1t=s(dge);N9o=r(O1t,"xlm"),O1t.forEach(t),q9o=r(Ske," \u2014 "),VG=n(Ske,"A",{href:!0});var V1t=s(VG);j9o=r(V1t,"XLMWithLMHeadModel"),V1t.forEach(t),D9o=r(Ske," (XLM model)"),Ske.forEach(t),G9o=i(O),j2=n(O,"LI",{});var Rke=s(j2);cge=n(Rke,"STRONG",{});var X1t=s(cge);O9o=r(X1t,"xlm-roberta"),X1t.forEach(t),V9o=r(Rke," \u2014 "),XG=n(Rke,"A",{href:!0});var z1t=s(XG);X9o=r(z1t,"XLMRobertaForMaskedLM"),z1t.forEach(t),z9o=r(Rke," (XLM-RoBERTa model)"),Rke.forEach(t),Q9o=i(O),D2=n(O,"LI",{});var Pke=s(D2);fge=n(Pke,"STRONG",{});var Q1t=s(fge);W9o=r(Q1t,"xlm-roberta-xl"),Q1t.forEach(t),H9o=r(Pke," \u2014 "),zG=n(Pke,"A",{href:!0});var W1t=s(zG);U9o=r(W1t,"XLMRobertaXLForMaskedLM"),W1t.forEach(t),J9o=r(Pke," (XLM-RoBERTa-XL model)"),Pke.forEach(t),Y9o=i(O),G2=n(O,"LI",{});var Bke=s(G2);mge=n(Bke,"STRONG",{});var H1t=s(mge);K9o=r(H1t,"xlnet"),H1t.forEach(t),Z9o=r(Bke," \u2014 "),QG=n(Bke,"A",{href:!0});var U1t=s(QG);exo=r(U1t,"XLNetLMHeadModel"),U1t.forEach(t),oxo=r(Bke," (XLNet model)"),Bke.forEach(t),O.forEach(t),rxo=i(la),O2=n(la,"P",{});var Ike=s(O2);txo=r(Ike,"The model is set in evaluation mode by default using "),gge=n(Ike,"CODE",{});var J1t=s(gge);axo=r(J1t,"model.eval()"),J1t.forEach(t),nxo=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(Ike,"CODE",{});var Y1t=s(hge);sxo=r(Y1t,"model.train()"),Y1t.forEach(t),Ike.forEach(t),lxo=i(la),T(V2.$$.fragment,la),la.forEach(t),ol.forEach(t),dXe=i(f),Qi=n(f,"H2",{class:!0});var pQe=s(Qi);X2=n(pQe,"A",{id:!0,class:!0,href:!0});var K1t=s(X2);pge=n(K1t,"SPAN",{});var Z1t=s(pge);T(jL.$$.fragment,Z1t),Z1t.forEach(t),K1t.forEach(t),ixo=i(pQe),_ge=n(pQe,"SPAN",{});var ebt=s(_ge);dxo=r(ebt,"AutoModelForCausalLM"),ebt.forEach(t),pQe.forEach(t),cXe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(DL.$$.fragment,rl),cxo=i(rl),Wi=n(rl,"P",{});var xre=s(Wi);fxo=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WG=n(xre,"A",{href:!0});var obt=s(WG);mxo=r(obt,"from_pretrained()"),obt.forEach(t),gxo=r(xre," class method or the "),HG=n(xre,"A",{href:!0});var rbt=s(HG);hxo=r(rbt,"from_config()"),rbt.forEach(t),pxo=r(xre,` class
method.`),xre.forEach(t),_xo=i(rl),GL=n(rl,"P",{});var _Qe=s(GL);uxo=r(_Qe,"This class cannot be instantiated directly using "),uge=n(_Qe,"CODE",{});var tbt=s(uge);bxo=r(tbt,"__init__()"),tbt.forEach(t),vxo=r(_Qe," (throws an error)."),_Qe.forEach(t),Fxo=i(rl),dt=n(rl,"DIV",{class:!0});var fw=s(dt);T(OL.$$.fragment,fw),Txo=i(fw),bge=n(fw,"P",{});var abt=s(bge);Mxo=r(abt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),abt.forEach(t),Exo=i(fw),Hi=n(fw,"P",{});var $re=s(Hi);Cxo=r($re,`Note:
Loading a model from its configuration file does `),vge=n($re,"STRONG",{});var nbt=s(vge);wxo=r(nbt,"not"),nbt.forEach(t),Axo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n($re,"A",{href:!0});var sbt=s(UG);Lxo=r(sbt,"from_pretrained()"),sbt.forEach(t),yxo=r($re," to load the model weights."),$re.forEach(t),xxo=i(fw),T(z2.$$.fragment,fw),fw.forEach(t),$xo=i(rl),Ke=n(rl,"DIV",{class:!0});var ia=s(Ke);T(VL.$$.fragment,ia),kxo=i(ia),Fge=n(ia,"P",{});var lbt=s(Fge);Sxo=r(lbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lbt.forEach(t),Rxo=i(ia),Na=n(ia,"P",{});var mw=s(Na);Pxo=r(mw,"The model class to instantiate is selected based on the "),Tge=n(mw,"CODE",{});var ibt=s(Tge);Bxo=r(ibt,"model_type"),ibt.forEach(t),Ixo=r(mw,` property of the config object (either
passed as an argument or loaded from `),Mge=n(mw,"CODE",{});var dbt=s(Mge);Nxo=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),qxo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(mw,"CODE",{});var cbt=s(Ege);jxo=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),Dxo=r(mw,":"),mw.forEach(t),Gxo=i(ia),z=n(ia,"UL",{});var Q=s(z);Q2=n(Q,"LI",{});var Nke=s(Q2);Cge=n(Nke,"STRONG",{});var fbt=s(Cge);Oxo=r(fbt,"bart"),fbt.forEach(t),Vxo=r(Nke," \u2014 "),JG=n(Nke,"A",{href:!0});var mbt=s(JG);Xxo=r(mbt,"BartForCausalLM"),mbt.forEach(t),zxo=r(Nke," (BART model)"),Nke.forEach(t),Qxo=i(Q),W2=n(Q,"LI",{});var qke=s(W2);wge=n(qke,"STRONG",{});var gbt=s(wge);Wxo=r(gbt,"bert"),gbt.forEach(t),Hxo=r(qke," \u2014 "),YG=n(qke,"A",{href:!0});var hbt=s(YG);Uxo=r(hbt,"BertLMHeadModel"),hbt.forEach(t),Jxo=r(qke," (BERT model)"),qke.forEach(t),Yxo=i(Q),H2=n(Q,"LI",{});var jke=s(H2);Age=n(jke,"STRONG",{});var pbt=s(Age);Kxo=r(pbt,"bert-generation"),pbt.forEach(t),Zxo=r(jke," \u2014 "),KG=n(jke,"A",{href:!0});var _bt=s(KG);e$o=r(_bt,"BertGenerationDecoder"),_bt.forEach(t),o$o=r(jke," (Bert Generation model)"),jke.forEach(t),r$o=i(Q),U2=n(Q,"LI",{});var Dke=s(U2);Lge=n(Dke,"STRONG",{});var ubt=s(Lge);t$o=r(ubt,"big_bird"),ubt.forEach(t),a$o=r(Dke," \u2014 "),ZG=n(Dke,"A",{href:!0});var bbt=s(ZG);n$o=r(bbt,"BigBirdForCausalLM"),bbt.forEach(t),s$o=r(Dke," (BigBird model)"),Dke.forEach(t),l$o=i(Q),J2=n(Q,"LI",{});var Gke=s(J2);yge=n(Gke,"STRONG",{});var vbt=s(yge);i$o=r(vbt,"bigbird_pegasus"),vbt.forEach(t),d$o=r(Gke," \u2014 "),eO=n(Gke,"A",{href:!0});var Fbt=s(eO);c$o=r(Fbt,"BigBirdPegasusForCausalLM"),Fbt.forEach(t),f$o=r(Gke," (BigBird-Pegasus model)"),Gke.forEach(t),m$o=i(Q),Y2=n(Q,"LI",{});var Oke=s(Y2);xge=n(Oke,"STRONG",{});var Tbt=s(xge);g$o=r(Tbt,"blenderbot"),Tbt.forEach(t),h$o=r(Oke," \u2014 "),oO=n(Oke,"A",{href:!0});var Mbt=s(oO);p$o=r(Mbt,"BlenderbotForCausalLM"),Mbt.forEach(t),_$o=r(Oke," (Blenderbot model)"),Oke.forEach(t),u$o=i(Q),K2=n(Q,"LI",{});var Vke=s(K2);$ge=n(Vke,"STRONG",{});var Ebt=s($ge);b$o=r(Ebt,"blenderbot-small"),Ebt.forEach(t),v$o=r(Vke," \u2014 "),rO=n(Vke,"A",{href:!0});var Cbt=s(rO);F$o=r(Cbt,"BlenderbotSmallForCausalLM"),Cbt.forEach(t),T$o=r(Vke," (BlenderbotSmall model)"),Vke.forEach(t),M$o=i(Q),Z2=n(Q,"LI",{});var Xke=s(Z2);kge=n(Xke,"STRONG",{});var wbt=s(kge);E$o=r(wbt,"bloom"),wbt.forEach(t),C$o=r(Xke," \u2014 "),tO=n(Xke,"A",{href:!0});var Abt=s(tO);w$o=r(Abt,"BloomForCausalLM"),Abt.forEach(t),A$o=r(Xke," (BLOOM model)"),Xke.forEach(t),L$o=i(Q),e1=n(Q,"LI",{});var zke=s(e1);Sge=n(zke,"STRONG",{});var Lbt=s(Sge);y$o=r(Lbt,"camembert"),Lbt.forEach(t),x$o=r(zke," \u2014 "),aO=n(zke,"A",{href:!0});var ybt=s(aO);$$o=r(ybt,"CamembertForCausalLM"),ybt.forEach(t),k$o=r(zke," (CamemBERT model)"),zke.forEach(t),S$o=i(Q),o1=n(Q,"LI",{});var Qke=s(o1);Rge=n(Qke,"STRONG",{});var xbt=s(Rge);R$o=r(xbt,"codegen"),xbt.forEach(t),P$o=r(Qke," \u2014 "),nO=n(Qke,"A",{href:!0});var $bt=s(nO);B$o=r($bt,"CodeGenForCausalLM"),$bt.forEach(t),I$o=r(Qke," (CodeGen model)"),Qke.forEach(t),N$o=i(Q),r1=n(Q,"LI",{});var Wke=s(r1);Pge=n(Wke,"STRONG",{});var kbt=s(Pge);q$o=r(kbt,"ctrl"),kbt.forEach(t),j$o=r(Wke," \u2014 "),sO=n(Wke,"A",{href:!0});var Sbt=s(sO);D$o=r(Sbt,"CTRLLMHeadModel"),Sbt.forEach(t),G$o=r(Wke," (CTRL model)"),Wke.forEach(t),O$o=i(Q),t1=n(Q,"LI",{});var Hke=s(t1);Bge=n(Hke,"STRONG",{});var Rbt=s(Bge);V$o=r(Rbt,"data2vec-text"),Rbt.forEach(t),X$o=r(Hke," \u2014 "),lO=n(Hke,"A",{href:!0});var Pbt=s(lO);z$o=r(Pbt,"Data2VecTextForCausalLM"),Pbt.forEach(t),Q$o=r(Hke," (Data2VecText model)"),Hke.forEach(t),W$o=i(Q),a1=n(Q,"LI",{});var Uke=s(a1);Ige=n(Uke,"STRONG",{});var Bbt=s(Ige);H$o=r(Bbt,"electra"),Bbt.forEach(t),U$o=r(Uke," \u2014 "),iO=n(Uke,"A",{href:!0});var Ibt=s(iO);J$o=r(Ibt,"ElectraForCausalLM"),Ibt.forEach(t),Y$o=r(Uke," (ELECTRA model)"),Uke.forEach(t),K$o=i(Q),n1=n(Q,"LI",{});var Jke=s(n1);Nge=n(Jke,"STRONG",{});var Nbt=s(Nge);Z$o=r(Nbt,"gpt2"),Nbt.forEach(t),eko=r(Jke," \u2014 "),dO=n(Jke,"A",{href:!0});var qbt=s(dO);oko=r(qbt,"GPT2LMHeadModel"),qbt.forEach(t),rko=r(Jke," (OpenAI GPT-2 model)"),Jke.forEach(t),tko=i(Q),s1=n(Q,"LI",{});var Yke=s(s1);qge=n(Yke,"STRONG",{});var jbt=s(qge);ako=r(jbt,"gpt_neo"),jbt.forEach(t),nko=r(Yke," \u2014 "),cO=n(Yke,"A",{href:!0});var Dbt=s(cO);sko=r(Dbt,"GPTNeoForCausalLM"),Dbt.forEach(t),lko=r(Yke," (GPT Neo model)"),Yke.forEach(t),iko=i(Q),l1=n(Q,"LI",{});var Kke=s(l1);jge=n(Kke,"STRONG",{});var Gbt=s(jge);dko=r(Gbt,"gpt_neox"),Gbt.forEach(t),cko=r(Kke," \u2014 "),fO=n(Kke,"A",{href:!0});var Obt=s(fO);fko=r(Obt,"GPTNeoXForCausalLM"),Obt.forEach(t),mko=r(Kke," (GPT NeoX model)"),Kke.forEach(t),gko=i(Q),i1=n(Q,"LI",{});var Zke=s(i1);Dge=n(Zke,"STRONG",{});var Vbt=s(Dge);hko=r(Vbt,"gptj"),Vbt.forEach(t),pko=r(Zke," \u2014 "),mO=n(Zke,"A",{href:!0});var Xbt=s(mO);_ko=r(Xbt,"GPTJForCausalLM"),Xbt.forEach(t),uko=r(Zke," (GPT-J model)"),Zke.forEach(t),bko=i(Q),d1=n(Q,"LI",{});var eSe=s(d1);Gge=n(eSe,"STRONG",{});var zbt=s(Gge);vko=r(zbt,"marian"),zbt.forEach(t),Fko=r(eSe," \u2014 "),gO=n(eSe,"A",{href:!0});var Qbt=s(gO);Tko=r(Qbt,"MarianForCausalLM"),Qbt.forEach(t),Mko=r(eSe," (Marian model)"),eSe.forEach(t),Eko=i(Q),c1=n(Q,"LI",{});var oSe=s(c1);Oge=n(oSe,"STRONG",{});var Wbt=s(Oge);Cko=r(Wbt,"mbart"),Wbt.forEach(t),wko=r(oSe," \u2014 "),hO=n(oSe,"A",{href:!0});var Hbt=s(hO);Ako=r(Hbt,"MBartForCausalLM"),Hbt.forEach(t),Lko=r(oSe," (mBART model)"),oSe.forEach(t),yko=i(Q),f1=n(Q,"LI",{});var rSe=s(f1);Vge=n(rSe,"STRONG",{});var Ubt=s(Vge);xko=r(Ubt,"megatron-bert"),Ubt.forEach(t),$ko=r(rSe," \u2014 "),pO=n(rSe,"A",{href:!0});var Jbt=s(pO);kko=r(Jbt,"MegatronBertForCausalLM"),Jbt.forEach(t),Sko=r(rSe," (Megatron-BERT model)"),rSe.forEach(t),Rko=i(Q),m1=n(Q,"LI",{});var tSe=s(m1);Xge=n(tSe,"STRONG",{});var Ybt=s(Xge);Pko=r(Ybt,"mvp"),Ybt.forEach(t),Bko=r(tSe," \u2014 "),_O=n(tSe,"A",{href:!0});var Kbt=s(_O);Iko=r(Kbt,"MvpForCausalLM"),Kbt.forEach(t),Nko=r(tSe," (MVP model)"),tSe.forEach(t),qko=i(Q),g1=n(Q,"LI",{});var aSe=s(g1);zge=n(aSe,"STRONG",{});var Zbt=s(zge);jko=r(Zbt,"openai-gpt"),Zbt.forEach(t),Dko=r(aSe," \u2014 "),uO=n(aSe,"A",{href:!0});var evt=s(uO);Gko=r(evt,"OpenAIGPTLMHeadModel"),evt.forEach(t),Oko=r(aSe," (OpenAI GPT model)"),aSe.forEach(t),Vko=i(Q),h1=n(Q,"LI",{});var nSe=s(h1);Qge=n(nSe,"STRONG",{});var ovt=s(Qge);Xko=r(ovt,"opt"),ovt.forEach(t),zko=r(nSe," \u2014 "),bO=n(nSe,"A",{href:!0});var rvt=s(bO);Qko=r(rvt,"OPTForCausalLM"),rvt.forEach(t),Wko=r(nSe," (OPT model)"),nSe.forEach(t),Hko=i(Q),p1=n(Q,"LI",{});var sSe=s(p1);Wge=n(sSe,"STRONG",{});var tvt=s(Wge);Uko=r(tvt,"pegasus"),tvt.forEach(t),Jko=r(sSe," \u2014 "),vO=n(sSe,"A",{href:!0});var avt=s(vO);Yko=r(avt,"PegasusForCausalLM"),avt.forEach(t),Kko=r(sSe," (Pegasus model)"),sSe.forEach(t),Zko=i(Q),_1=n(Q,"LI",{});var lSe=s(_1);Hge=n(lSe,"STRONG",{});var nvt=s(Hge);eSo=r(nvt,"plbart"),nvt.forEach(t),oSo=r(lSe," \u2014 "),FO=n(lSe,"A",{href:!0});var svt=s(FO);rSo=r(svt,"PLBartForCausalLM"),svt.forEach(t),tSo=r(lSe," (PLBart model)"),lSe.forEach(t),aSo=i(Q),u1=n(Q,"LI",{});var iSe=s(u1);Uge=n(iSe,"STRONG",{});var lvt=s(Uge);nSo=r(lvt,"prophetnet"),lvt.forEach(t),sSo=r(iSe," \u2014 "),TO=n(iSe,"A",{href:!0});var ivt=s(TO);lSo=r(ivt,"ProphetNetForCausalLM"),ivt.forEach(t),iSo=r(iSe," (ProphetNet model)"),iSe.forEach(t),dSo=i(Q),b1=n(Q,"LI",{});var dSe=s(b1);Jge=n(dSe,"STRONG",{});var dvt=s(Jge);cSo=r(dvt,"qdqbert"),dvt.forEach(t),fSo=r(dSe," \u2014 "),MO=n(dSe,"A",{href:!0});var cvt=s(MO);mSo=r(cvt,"QDQBertLMHeadModel"),cvt.forEach(t),gSo=r(dSe," (QDQBert model)"),dSe.forEach(t),hSo=i(Q),v1=n(Q,"LI",{});var cSe=s(v1);Yge=n(cSe,"STRONG",{});var fvt=s(Yge);pSo=r(fvt,"reformer"),fvt.forEach(t),_So=r(cSe," \u2014 "),EO=n(cSe,"A",{href:!0});var mvt=s(EO);uSo=r(mvt,"ReformerModelWithLMHead"),mvt.forEach(t),bSo=r(cSe," (Reformer model)"),cSe.forEach(t),vSo=i(Q),F1=n(Q,"LI",{});var fSe=s(F1);Kge=n(fSe,"STRONG",{});var gvt=s(Kge);FSo=r(gvt,"rembert"),gvt.forEach(t),TSo=r(fSe," \u2014 "),CO=n(fSe,"A",{href:!0});var hvt=s(CO);MSo=r(hvt,"RemBertForCausalLM"),hvt.forEach(t),ESo=r(fSe," (RemBERT model)"),fSe.forEach(t),CSo=i(Q),T1=n(Q,"LI",{});var mSe=s(T1);Zge=n(mSe,"STRONG",{});var pvt=s(Zge);wSo=r(pvt,"roberta"),pvt.forEach(t),ASo=r(mSe," \u2014 "),wO=n(mSe,"A",{href:!0});var _vt=s(wO);LSo=r(_vt,"RobertaForCausalLM"),_vt.forEach(t),ySo=r(mSe," (RoBERTa model)"),mSe.forEach(t),xSo=i(Q),M1=n(Q,"LI",{});var gSe=s(M1);ehe=n(gSe,"STRONG",{});var uvt=s(ehe);$So=r(uvt,"roformer"),uvt.forEach(t),kSo=r(gSe," \u2014 "),AO=n(gSe,"A",{href:!0});var bvt=s(AO);SSo=r(bvt,"RoFormerForCausalLM"),bvt.forEach(t),RSo=r(gSe," (RoFormer model)"),gSe.forEach(t),PSo=i(Q),E1=n(Q,"LI",{});var hSe=s(E1);ohe=n(hSe,"STRONG",{});var vvt=s(ohe);BSo=r(vvt,"speech_to_text_2"),vvt.forEach(t),ISo=r(hSe," \u2014 "),LO=n(hSe,"A",{href:!0});var Fvt=s(LO);NSo=r(Fvt,"Speech2Text2ForCausalLM"),Fvt.forEach(t),qSo=r(hSe," (Speech2Text2 model)"),hSe.forEach(t),jSo=i(Q),C1=n(Q,"LI",{});var pSe=s(C1);rhe=n(pSe,"STRONG",{});var Tvt=s(rhe);DSo=r(Tvt,"transfo-xl"),Tvt.forEach(t),GSo=r(pSe," \u2014 "),yO=n(pSe,"A",{href:!0});var Mvt=s(yO);OSo=r(Mvt,"TransfoXLLMHeadModel"),Mvt.forEach(t),VSo=r(pSe," (Transformer-XL model)"),pSe.forEach(t),XSo=i(Q),w1=n(Q,"LI",{});var _Se=s(w1);the=n(_Se,"STRONG",{});var Evt=s(the);zSo=r(Evt,"trocr"),Evt.forEach(t),QSo=r(_Se," \u2014 "),xO=n(_Se,"A",{href:!0});var Cvt=s(xO);WSo=r(Cvt,"TrOCRForCausalLM"),Cvt.forEach(t),HSo=r(_Se," (TrOCR model)"),_Se.forEach(t),USo=i(Q),A1=n(Q,"LI",{});var uSe=s(A1);ahe=n(uSe,"STRONG",{});var wvt=s(ahe);JSo=r(wvt,"xglm"),wvt.forEach(t),YSo=r(uSe," \u2014 "),$O=n(uSe,"A",{href:!0});var Avt=s($O);KSo=r(Avt,"XGLMForCausalLM"),Avt.forEach(t),ZSo=r(uSe," (XGLM model)"),uSe.forEach(t),eRo=i(Q),L1=n(Q,"LI",{});var bSe=s(L1);nhe=n(bSe,"STRONG",{});var Lvt=s(nhe);oRo=r(Lvt,"xlm"),Lvt.forEach(t),rRo=r(bSe," \u2014 "),kO=n(bSe,"A",{href:!0});var yvt=s(kO);tRo=r(yvt,"XLMWithLMHeadModel"),yvt.forEach(t),aRo=r(bSe," (XLM model)"),bSe.forEach(t),nRo=i(Q),y1=n(Q,"LI",{});var vSe=s(y1);she=n(vSe,"STRONG",{});var xvt=s(she);sRo=r(xvt,"xlm-prophetnet"),xvt.forEach(t),lRo=r(vSe," \u2014 "),SO=n(vSe,"A",{href:!0});var $vt=s(SO);iRo=r($vt,"XLMProphetNetForCausalLM"),$vt.forEach(t),dRo=r(vSe," (XLM-ProphetNet model)"),vSe.forEach(t),cRo=i(Q),x1=n(Q,"LI",{});var FSe=s(x1);lhe=n(FSe,"STRONG",{});var kvt=s(lhe);fRo=r(kvt,"xlm-roberta"),kvt.forEach(t),mRo=r(FSe," \u2014 "),RO=n(FSe,"A",{href:!0});var Svt=s(RO);gRo=r(Svt,"XLMRobertaForCausalLM"),Svt.forEach(t),hRo=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),pRo=i(Q),$1=n(Q,"LI",{});var TSe=s($1);ihe=n(TSe,"STRONG",{});var Rvt=s(ihe);_Ro=r(Rvt,"xlm-roberta-xl"),Rvt.forEach(t),uRo=r(TSe," \u2014 "),PO=n(TSe,"A",{href:!0});var Pvt=s(PO);bRo=r(Pvt,"XLMRobertaXLForCausalLM"),Pvt.forEach(t),vRo=r(TSe," (XLM-RoBERTa-XL model)"),TSe.forEach(t),FRo=i(Q),k1=n(Q,"LI",{});var MSe=s(k1);dhe=n(MSe,"STRONG",{});var Bvt=s(dhe);TRo=r(Bvt,"xlnet"),Bvt.forEach(t),MRo=r(MSe," \u2014 "),BO=n(MSe,"A",{href:!0});var Ivt=s(BO);ERo=r(Ivt,"XLNetLMHeadModel"),Ivt.forEach(t),CRo=r(MSe," (XLNet model)"),MSe.forEach(t),Q.forEach(t),wRo=i(ia),S1=n(ia,"P",{});var ESe=s(S1);ARo=r(ESe,"The model is set in evaluation mode by default using "),che=n(ESe,"CODE",{});var Nvt=s(che);LRo=r(Nvt,"model.eval()"),Nvt.forEach(t),yRo=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(ESe,"CODE",{});var qvt=s(fhe);xRo=r(qvt,"model.train()"),qvt.forEach(t),ESe.forEach(t),$Ro=i(ia),T(R1.$$.fragment,ia),ia.forEach(t),rl.forEach(t),fXe=i(f),Ui=n(f,"H2",{class:!0});var uQe=s(Ui);P1=n(uQe,"A",{id:!0,class:!0,href:!0});var jvt=s(P1);mhe=n(jvt,"SPAN",{});var Dvt=s(mhe);T(XL.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),kRo=i(uQe),ghe=n(uQe,"SPAN",{});var Gvt=s(ghe);SRo=r(Gvt,"AutoModelForMaskedLM"),Gvt.forEach(t),uQe.forEach(t),mXe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(zL.$$.fragment,tl),RRo=i(tl),Ji=n(tl,"P",{});var kre=s(Ji);PRo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IO=n(kre,"A",{href:!0});var Ovt=s(IO);BRo=r(Ovt,"from_pretrained()"),Ovt.forEach(t),IRo=r(kre," class method or the "),NO=n(kre,"A",{href:!0});var Vvt=s(NO);NRo=r(Vvt,"from_config()"),Vvt.forEach(t),qRo=r(kre,` class
method.`),kre.forEach(t),jRo=i(tl),QL=n(tl,"P",{});var bQe=s(QL);DRo=r(bQe,"This class cannot be instantiated directly using "),hhe=n(bQe,"CODE",{});var Xvt=s(hhe);GRo=r(Xvt,"__init__()"),Xvt.forEach(t),ORo=r(bQe," (throws an error)."),bQe.forEach(t),VRo=i(tl),ct=n(tl,"DIV",{class:!0});var gw=s(ct);T(WL.$$.fragment,gw),XRo=i(gw),phe=n(gw,"P",{});var zvt=s(phe);zRo=r(zvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zvt.forEach(t),QRo=i(gw),Yi=n(gw,"P",{});var Sre=s(Yi);WRo=r(Sre,`Note:
Loading a model from its configuration file does `),_he=n(Sre,"STRONG",{});var Qvt=s(_he);HRo=r(Qvt,"not"),Qvt.forEach(t),URo=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(Sre,"A",{href:!0});var Wvt=s(qO);JRo=r(Wvt,"from_pretrained()"),Wvt.forEach(t),YRo=r(Sre," to load the model weights."),Sre.forEach(t),KRo=i(gw),T(B1.$$.fragment,gw),gw.forEach(t),ZRo=i(tl),Ze=n(tl,"DIV",{class:!0});var da=s(Ze);T(HL.$$.fragment,da),ePo=i(da),uhe=n(da,"P",{});var Hvt=s(uhe);oPo=r(Hvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hvt.forEach(t),rPo=i(da),qa=n(da,"P",{});var hw=s(qa);tPo=r(hw,"The model class to instantiate is selected based on the "),bhe=n(hw,"CODE",{});var Uvt=s(bhe);aPo=r(Uvt,"model_type"),Uvt.forEach(t),nPo=r(hw,` property of the config object (either
passed as an argument or loaded from `),vhe=n(hw,"CODE",{});var Jvt=s(vhe);sPo=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),lPo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(hw,"CODE",{});var Yvt=s(Fhe);iPo=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),dPo=r(hw,":"),hw.forEach(t),cPo=i(da),W=n(da,"UL",{});var H=s(W);I1=n(H,"LI",{});var CSe=s(I1);The=n(CSe,"STRONG",{});var Kvt=s(The);fPo=r(Kvt,"albert"),Kvt.forEach(t),mPo=r(CSe," \u2014 "),jO=n(CSe,"A",{href:!0});var Zvt=s(jO);gPo=r(Zvt,"AlbertForMaskedLM"),Zvt.forEach(t),hPo=r(CSe," (ALBERT model)"),CSe.forEach(t),pPo=i(H),N1=n(H,"LI",{});var wSe=s(N1);Mhe=n(wSe,"STRONG",{});var eFt=s(Mhe);_Po=r(eFt,"bart"),eFt.forEach(t),uPo=r(wSe," \u2014 "),DO=n(wSe,"A",{href:!0});var oFt=s(DO);bPo=r(oFt,"BartForConditionalGeneration"),oFt.forEach(t),vPo=r(wSe," (BART model)"),wSe.forEach(t),FPo=i(H),q1=n(H,"LI",{});var ASe=s(q1);Ehe=n(ASe,"STRONG",{});var rFt=s(Ehe);TPo=r(rFt,"bert"),rFt.forEach(t),MPo=r(ASe," \u2014 "),GO=n(ASe,"A",{href:!0});var tFt=s(GO);EPo=r(tFt,"BertForMaskedLM"),tFt.forEach(t),CPo=r(ASe," (BERT model)"),ASe.forEach(t),wPo=i(H),j1=n(H,"LI",{});var LSe=s(j1);Che=n(LSe,"STRONG",{});var aFt=s(Che);APo=r(aFt,"big_bird"),aFt.forEach(t),LPo=r(LSe," \u2014 "),OO=n(LSe,"A",{href:!0});var nFt=s(OO);yPo=r(nFt,"BigBirdForMaskedLM"),nFt.forEach(t),xPo=r(LSe," (BigBird model)"),LSe.forEach(t),$Po=i(H),D1=n(H,"LI",{});var ySe=s(D1);whe=n(ySe,"STRONG",{});var sFt=s(whe);kPo=r(sFt,"camembert"),sFt.forEach(t),SPo=r(ySe," \u2014 "),VO=n(ySe,"A",{href:!0});var lFt=s(VO);RPo=r(lFt,"CamembertForMaskedLM"),lFt.forEach(t),PPo=r(ySe," (CamemBERT model)"),ySe.forEach(t),BPo=i(H),G1=n(H,"LI",{});var xSe=s(G1);Ahe=n(xSe,"STRONG",{});var iFt=s(Ahe);IPo=r(iFt,"convbert"),iFt.forEach(t),NPo=r(xSe," \u2014 "),XO=n(xSe,"A",{href:!0});var dFt=s(XO);qPo=r(dFt,"ConvBertForMaskedLM"),dFt.forEach(t),jPo=r(xSe," (ConvBERT model)"),xSe.forEach(t),DPo=i(H),O1=n(H,"LI",{});var $Se=s(O1);Lhe=n($Se,"STRONG",{});var cFt=s(Lhe);GPo=r(cFt,"data2vec-text"),cFt.forEach(t),OPo=r($Se," \u2014 "),zO=n($Se,"A",{href:!0});var fFt=s(zO);VPo=r(fFt,"Data2VecTextForMaskedLM"),fFt.forEach(t),XPo=r($Se," (Data2VecText model)"),$Se.forEach(t),zPo=i(H),V1=n(H,"LI",{});var kSe=s(V1);yhe=n(kSe,"STRONG",{});var mFt=s(yhe);QPo=r(mFt,"deberta"),mFt.forEach(t),WPo=r(kSe," \u2014 "),QO=n(kSe,"A",{href:!0});var gFt=s(QO);HPo=r(gFt,"DebertaForMaskedLM"),gFt.forEach(t),UPo=r(kSe," (DeBERTa model)"),kSe.forEach(t),JPo=i(H),X1=n(H,"LI",{});var SSe=s(X1);xhe=n(SSe,"STRONG",{});var hFt=s(xhe);YPo=r(hFt,"deberta-v2"),hFt.forEach(t),KPo=r(SSe," \u2014 "),WO=n(SSe,"A",{href:!0});var pFt=s(WO);ZPo=r(pFt,"DebertaV2ForMaskedLM"),pFt.forEach(t),eBo=r(SSe," (DeBERTa-v2 model)"),SSe.forEach(t),oBo=i(H),z1=n(H,"LI",{});var RSe=s(z1);$he=n(RSe,"STRONG",{});var _Ft=s($he);rBo=r(_Ft,"distilbert"),_Ft.forEach(t),tBo=r(RSe," \u2014 "),HO=n(RSe,"A",{href:!0});var uFt=s(HO);aBo=r(uFt,"DistilBertForMaskedLM"),uFt.forEach(t),nBo=r(RSe," (DistilBERT model)"),RSe.forEach(t),sBo=i(H),Q1=n(H,"LI",{});var PSe=s(Q1);khe=n(PSe,"STRONG",{});var bFt=s(khe);lBo=r(bFt,"electra"),bFt.forEach(t),iBo=r(PSe," \u2014 "),UO=n(PSe,"A",{href:!0});var vFt=s(UO);dBo=r(vFt,"ElectraForMaskedLM"),vFt.forEach(t),cBo=r(PSe," (ELECTRA model)"),PSe.forEach(t),fBo=i(H),W1=n(H,"LI",{});var BSe=s(W1);She=n(BSe,"STRONG",{});var FFt=s(She);mBo=r(FFt,"flaubert"),FFt.forEach(t),gBo=r(BSe," \u2014 "),JO=n(BSe,"A",{href:!0});var TFt=s(JO);hBo=r(TFt,"FlaubertWithLMHeadModel"),TFt.forEach(t),pBo=r(BSe," (FlauBERT model)"),BSe.forEach(t),_Bo=i(H),H1=n(H,"LI",{});var ISe=s(H1);Rhe=n(ISe,"STRONG",{});var MFt=s(Rhe);uBo=r(MFt,"fnet"),MFt.forEach(t),bBo=r(ISe," \u2014 "),YO=n(ISe,"A",{href:!0});var EFt=s(YO);vBo=r(EFt,"FNetForMaskedLM"),EFt.forEach(t),FBo=r(ISe," (FNet model)"),ISe.forEach(t),TBo=i(H),U1=n(H,"LI",{});var NSe=s(U1);Phe=n(NSe,"STRONG",{});var CFt=s(Phe);MBo=r(CFt,"funnel"),CFt.forEach(t),EBo=r(NSe," \u2014 "),KO=n(NSe,"A",{href:!0});var wFt=s(KO);CBo=r(wFt,"FunnelForMaskedLM"),wFt.forEach(t),wBo=r(NSe," (Funnel Transformer model)"),NSe.forEach(t),ABo=i(H),J1=n(H,"LI",{});var qSe=s(J1);Bhe=n(qSe,"STRONG",{});var AFt=s(Bhe);LBo=r(AFt,"ibert"),AFt.forEach(t),yBo=r(qSe," \u2014 "),ZO=n(qSe,"A",{href:!0});var LFt=s(ZO);xBo=r(LFt,"IBertForMaskedLM"),LFt.forEach(t),$Bo=r(qSe," (I-BERT model)"),qSe.forEach(t),kBo=i(H),Y1=n(H,"LI",{});var jSe=s(Y1);Ihe=n(jSe,"STRONG",{});var yFt=s(Ihe);SBo=r(yFt,"layoutlm"),yFt.forEach(t),RBo=r(jSe," \u2014 "),eV=n(jSe,"A",{href:!0});var xFt=s(eV);PBo=r(xFt,"LayoutLMForMaskedLM"),xFt.forEach(t),BBo=r(jSe," (LayoutLM model)"),jSe.forEach(t),IBo=i(H),K1=n(H,"LI",{});var DSe=s(K1);Nhe=n(DSe,"STRONG",{});var $Ft=s(Nhe);NBo=r($Ft,"longformer"),$Ft.forEach(t),qBo=r(DSe," \u2014 "),oV=n(DSe,"A",{href:!0});var kFt=s(oV);jBo=r(kFt,"LongformerForMaskedLM"),kFt.forEach(t),DBo=r(DSe," (Longformer model)"),DSe.forEach(t),GBo=i(H),Z1=n(H,"LI",{});var GSe=s(Z1);qhe=n(GSe,"STRONG",{});var SFt=s(qhe);OBo=r(SFt,"luke"),SFt.forEach(t),VBo=r(GSe," \u2014 "),rV=n(GSe,"A",{href:!0});var RFt=s(rV);XBo=r(RFt,"LukeForMaskedLM"),RFt.forEach(t),zBo=r(GSe," (LUKE model)"),GSe.forEach(t),QBo=i(H),eb=n(H,"LI",{});var OSe=s(eb);jhe=n(OSe,"STRONG",{});var PFt=s(jhe);WBo=r(PFt,"mbart"),PFt.forEach(t),HBo=r(OSe," \u2014 "),tV=n(OSe,"A",{href:!0});var BFt=s(tV);UBo=r(BFt,"MBartForConditionalGeneration"),BFt.forEach(t),JBo=r(OSe," (mBART model)"),OSe.forEach(t),YBo=i(H),ob=n(H,"LI",{});var VSe=s(ob);Dhe=n(VSe,"STRONG",{});var IFt=s(Dhe);KBo=r(IFt,"megatron-bert"),IFt.forEach(t),ZBo=r(VSe," \u2014 "),aV=n(VSe,"A",{href:!0});var NFt=s(aV);eIo=r(NFt,"MegatronBertForMaskedLM"),NFt.forEach(t),oIo=r(VSe," (Megatron-BERT model)"),VSe.forEach(t),rIo=i(H),rb=n(H,"LI",{});var XSe=s(rb);Ghe=n(XSe,"STRONG",{});var qFt=s(Ghe);tIo=r(qFt,"mobilebert"),qFt.forEach(t),aIo=r(XSe," \u2014 "),nV=n(XSe,"A",{href:!0});var jFt=s(nV);nIo=r(jFt,"MobileBertForMaskedLM"),jFt.forEach(t),sIo=r(XSe," (MobileBERT model)"),XSe.forEach(t),lIo=i(H),tb=n(H,"LI",{});var zSe=s(tb);Ohe=n(zSe,"STRONG",{});var DFt=s(Ohe);iIo=r(DFt,"mpnet"),DFt.forEach(t),dIo=r(zSe," \u2014 "),sV=n(zSe,"A",{href:!0});var GFt=s(sV);cIo=r(GFt,"MPNetForMaskedLM"),GFt.forEach(t),fIo=r(zSe," (MPNet model)"),zSe.forEach(t),mIo=i(H),ab=n(H,"LI",{});var QSe=s(ab);Vhe=n(QSe,"STRONG",{});var OFt=s(Vhe);gIo=r(OFt,"mvp"),OFt.forEach(t),hIo=r(QSe," \u2014 "),lV=n(QSe,"A",{href:!0});var VFt=s(lV);pIo=r(VFt,"MvpForConditionalGeneration"),VFt.forEach(t),_Io=r(QSe," (MVP model)"),QSe.forEach(t),uIo=i(H),nb=n(H,"LI",{});var WSe=s(nb);Xhe=n(WSe,"STRONG",{});var XFt=s(Xhe);bIo=r(XFt,"nezha"),XFt.forEach(t),vIo=r(WSe," \u2014 "),iV=n(WSe,"A",{href:!0});var zFt=s(iV);FIo=r(zFt,"NezhaForMaskedLM"),zFt.forEach(t),TIo=r(WSe," (Nezha model)"),WSe.forEach(t),MIo=i(H),sb=n(H,"LI",{});var HSe=s(sb);zhe=n(HSe,"STRONG",{});var QFt=s(zhe);EIo=r(QFt,"nystromformer"),QFt.forEach(t),CIo=r(HSe," \u2014 "),dV=n(HSe,"A",{href:!0});var WFt=s(dV);wIo=r(WFt,"NystromformerForMaskedLM"),WFt.forEach(t),AIo=r(HSe," (Nystr\xF6mformer model)"),HSe.forEach(t),LIo=i(H),lb=n(H,"LI",{});var USe=s(lb);Qhe=n(USe,"STRONG",{});var HFt=s(Qhe);yIo=r(HFt,"perceiver"),HFt.forEach(t),xIo=r(USe," \u2014 "),cV=n(USe,"A",{href:!0});var UFt=s(cV);$Io=r(UFt,"PerceiverForMaskedLM"),UFt.forEach(t),kIo=r(USe," (Perceiver model)"),USe.forEach(t),SIo=i(H),ib=n(H,"LI",{});var JSe=s(ib);Whe=n(JSe,"STRONG",{});var JFt=s(Whe);RIo=r(JFt,"qdqbert"),JFt.forEach(t),PIo=r(JSe," \u2014 "),fV=n(JSe,"A",{href:!0});var YFt=s(fV);BIo=r(YFt,"QDQBertForMaskedLM"),YFt.forEach(t),IIo=r(JSe," (QDQBert model)"),JSe.forEach(t),NIo=i(H),db=n(H,"LI",{});var YSe=s(db);Hhe=n(YSe,"STRONG",{});var KFt=s(Hhe);qIo=r(KFt,"reformer"),KFt.forEach(t),jIo=r(YSe," \u2014 "),mV=n(YSe,"A",{href:!0});var ZFt=s(mV);DIo=r(ZFt,"ReformerForMaskedLM"),ZFt.forEach(t),GIo=r(YSe," (Reformer model)"),YSe.forEach(t),OIo=i(H),cb=n(H,"LI",{});var KSe=s(cb);Uhe=n(KSe,"STRONG",{});var e6t=s(Uhe);VIo=r(e6t,"rembert"),e6t.forEach(t),XIo=r(KSe," \u2014 "),gV=n(KSe,"A",{href:!0});var o6t=s(gV);zIo=r(o6t,"RemBertForMaskedLM"),o6t.forEach(t),QIo=r(KSe," (RemBERT model)"),KSe.forEach(t),WIo=i(H),fb=n(H,"LI",{});var ZSe=s(fb);Jhe=n(ZSe,"STRONG",{});var r6t=s(Jhe);HIo=r(r6t,"roberta"),r6t.forEach(t),UIo=r(ZSe," \u2014 "),hV=n(ZSe,"A",{href:!0});var t6t=s(hV);JIo=r(t6t,"RobertaForMaskedLM"),t6t.forEach(t),YIo=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),KIo=i(H),mb=n(H,"LI",{});var eRe=s(mb);Yhe=n(eRe,"STRONG",{});var a6t=s(Yhe);ZIo=r(a6t,"roformer"),a6t.forEach(t),eNo=r(eRe," \u2014 "),pV=n(eRe,"A",{href:!0});var n6t=s(pV);oNo=r(n6t,"RoFormerForMaskedLM"),n6t.forEach(t),rNo=r(eRe," (RoFormer model)"),eRe.forEach(t),tNo=i(H),gb=n(H,"LI",{});var oRe=s(gb);Khe=n(oRe,"STRONG",{});var s6t=s(Khe);aNo=r(s6t,"squeezebert"),s6t.forEach(t),nNo=r(oRe," \u2014 "),_V=n(oRe,"A",{href:!0});var l6t=s(_V);sNo=r(l6t,"SqueezeBertForMaskedLM"),l6t.forEach(t),lNo=r(oRe," (SqueezeBERT model)"),oRe.forEach(t),iNo=i(H),hb=n(H,"LI",{});var rRe=s(hb);Zhe=n(rRe,"STRONG",{});var i6t=s(Zhe);dNo=r(i6t,"tapas"),i6t.forEach(t),cNo=r(rRe," \u2014 "),uV=n(rRe,"A",{href:!0});var d6t=s(uV);fNo=r(d6t,"TapasForMaskedLM"),d6t.forEach(t),mNo=r(rRe," (TAPAS model)"),rRe.forEach(t),gNo=i(H),pb=n(H,"LI",{});var tRe=s(pb);epe=n(tRe,"STRONG",{});var c6t=s(epe);hNo=r(c6t,"wav2vec2"),c6t.forEach(t),pNo=r(tRe," \u2014 "),ope=n(tRe,"CODE",{});var f6t=s(ope);_No=r(f6t,"Wav2Vec2ForMaskedLM"),f6t.forEach(t),uNo=r(tRe," (Wav2Vec2 model)"),tRe.forEach(t),bNo=i(H),_b=n(H,"LI",{});var aRe=s(_b);rpe=n(aRe,"STRONG",{});var m6t=s(rpe);vNo=r(m6t,"xlm"),m6t.forEach(t),FNo=r(aRe," \u2014 "),bV=n(aRe,"A",{href:!0});var g6t=s(bV);TNo=r(g6t,"XLMWithLMHeadModel"),g6t.forEach(t),MNo=r(aRe," (XLM model)"),aRe.forEach(t),ENo=i(H),ub=n(H,"LI",{});var nRe=s(ub);tpe=n(nRe,"STRONG",{});var h6t=s(tpe);CNo=r(h6t,"xlm-roberta"),h6t.forEach(t),wNo=r(nRe," \u2014 "),vV=n(nRe,"A",{href:!0});var p6t=s(vV);ANo=r(p6t,"XLMRobertaForMaskedLM"),p6t.forEach(t),LNo=r(nRe," (XLM-RoBERTa model)"),nRe.forEach(t),yNo=i(H),bb=n(H,"LI",{});var sRe=s(bb);ape=n(sRe,"STRONG",{});var _6t=s(ape);xNo=r(_6t,"xlm-roberta-xl"),_6t.forEach(t),$No=r(sRe," \u2014 "),FV=n(sRe,"A",{href:!0});var u6t=s(FV);kNo=r(u6t,"XLMRobertaXLForMaskedLM"),u6t.forEach(t),SNo=r(sRe," (XLM-RoBERTa-XL model)"),sRe.forEach(t),RNo=i(H),vb=n(H,"LI",{});var lRe=s(vb);npe=n(lRe,"STRONG",{});var b6t=s(npe);PNo=r(b6t,"yoso"),b6t.forEach(t),BNo=r(lRe," \u2014 "),TV=n(lRe,"A",{href:!0});var v6t=s(TV);INo=r(v6t,"YosoForMaskedLM"),v6t.forEach(t),NNo=r(lRe," (YOSO model)"),lRe.forEach(t),H.forEach(t),qNo=i(da),Fb=n(da,"P",{});var iRe=s(Fb);jNo=r(iRe,"The model is set in evaluation mode by default using "),spe=n(iRe,"CODE",{});var F6t=s(spe);DNo=r(F6t,"model.eval()"),F6t.forEach(t),GNo=r(iRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(iRe,"CODE",{});var T6t=s(lpe);ONo=r(T6t,"model.train()"),T6t.forEach(t),iRe.forEach(t),VNo=i(da),T(Tb.$$.fragment,da),da.forEach(t),tl.forEach(t),gXe=i(f),Ki=n(f,"H2",{class:!0});var vQe=s(Ki);Mb=n(vQe,"A",{id:!0,class:!0,href:!0});var M6t=s(Mb);ipe=n(M6t,"SPAN",{});var E6t=s(ipe);T(UL.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),XNo=i(vQe),dpe=n(vQe,"SPAN",{});var C6t=s(dpe);zNo=r(C6t,"AutoModelForSeq2SeqLM"),C6t.forEach(t),vQe.forEach(t),hXe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(JL.$$.fragment,al),QNo=i(al),Zi=n(al,"P",{});var Rre=s(Zi);WNo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MV=n(Rre,"A",{href:!0});var w6t=s(MV);HNo=r(w6t,"from_pretrained()"),w6t.forEach(t),UNo=r(Rre," class method or the "),EV=n(Rre,"A",{href:!0});var A6t=s(EV);JNo=r(A6t,"from_config()"),A6t.forEach(t),YNo=r(Rre,` class
method.`),Rre.forEach(t),KNo=i(al),YL=n(al,"P",{});var FQe=s(YL);ZNo=r(FQe,"This class cannot be instantiated directly using "),cpe=n(FQe,"CODE",{});var L6t=s(cpe);eqo=r(L6t,"__init__()"),L6t.forEach(t),oqo=r(FQe," (throws an error)."),FQe.forEach(t),rqo=i(al),ft=n(al,"DIV",{class:!0});var pw=s(ft);T(KL.$$.fragment,pw),tqo=i(pw),fpe=n(pw,"P",{});var y6t=s(fpe);aqo=r(y6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y6t.forEach(t),nqo=i(pw),ed=n(pw,"P",{});var Pre=s(ed);sqo=r(Pre,`Note:
Loading a model from its configuration file does `),mpe=n(Pre,"STRONG",{});var x6t=s(mpe);lqo=r(x6t,"not"),x6t.forEach(t),iqo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(Pre,"A",{href:!0});var $6t=s(CV);dqo=r($6t,"from_pretrained()"),$6t.forEach(t),cqo=r(Pre," to load the model weights."),Pre.forEach(t),fqo=i(pw),T(Eb.$$.fragment,pw),pw.forEach(t),mqo=i(al),eo=n(al,"DIV",{class:!0});var ca=s(eo);T(ZL.$$.fragment,ca),gqo=i(ca),gpe=n(ca,"P",{});var k6t=s(gpe);hqo=r(k6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k6t.forEach(t),pqo=i(ca),ja=n(ca,"P",{});var _w=s(ja);_qo=r(_w,"The model class to instantiate is selected based on the "),hpe=n(_w,"CODE",{});var S6t=s(hpe);uqo=r(S6t,"model_type"),S6t.forEach(t),bqo=r(_w,` property of the config object (either
passed as an argument or loaded from `),ppe=n(_w,"CODE",{});var R6t=s(ppe);vqo=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),Fqo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(_w,"CODE",{});var P6t=s(_pe);Tqo=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),Mqo=r(_w,":"),_w.forEach(t),Eqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);Cb=n(be,"LI",{});var dRe=s(Cb);upe=n(dRe,"STRONG",{});var B6t=s(upe);Cqo=r(B6t,"bart"),B6t.forEach(t),wqo=r(dRe," \u2014 "),wV=n(dRe,"A",{href:!0});var I6t=s(wV);Aqo=r(I6t,"BartForConditionalGeneration"),I6t.forEach(t),Lqo=r(dRe," (BART model)"),dRe.forEach(t),yqo=i(be),wb=n(be,"LI",{});var cRe=s(wb);bpe=n(cRe,"STRONG",{});var N6t=s(bpe);xqo=r(N6t,"bigbird_pegasus"),N6t.forEach(t),$qo=r(cRe," \u2014 "),AV=n(cRe,"A",{href:!0});var q6t=s(AV);kqo=r(q6t,"BigBirdPegasusForConditionalGeneration"),q6t.forEach(t),Sqo=r(cRe," (BigBird-Pegasus model)"),cRe.forEach(t),Rqo=i(be),Ab=n(be,"LI",{});var fRe=s(Ab);vpe=n(fRe,"STRONG",{});var j6t=s(vpe);Pqo=r(j6t,"blenderbot"),j6t.forEach(t),Bqo=r(fRe," \u2014 "),LV=n(fRe,"A",{href:!0});var D6t=s(LV);Iqo=r(D6t,"BlenderbotForConditionalGeneration"),D6t.forEach(t),Nqo=r(fRe," (Blenderbot model)"),fRe.forEach(t),qqo=i(be),Lb=n(be,"LI",{});var mRe=s(Lb);Fpe=n(mRe,"STRONG",{});var G6t=s(Fpe);jqo=r(G6t,"blenderbot-small"),G6t.forEach(t),Dqo=r(mRe," \u2014 "),yV=n(mRe,"A",{href:!0});var O6t=s(yV);Gqo=r(O6t,"BlenderbotSmallForConditionalGeneration"),O6t.forEach(t),Oqo=r(mRe," (BlenderbotSmall model)"),mRe.forEach(t),Vqo=i(be),yb=n(be,"LI",{});var gRe=s(yb);Tpe=n(gRe,"STRONG",{});var V6t=s(Tpe);Xqo=r(V6t,"encoder-decoder"),V6t.forEach(t),zqo=r(gRe," \u2014 "),xV=n(gRe,"A",{href:!0});var X6t=s(xV);Qqo=r(X6t,"EncoderDecoderModel"),X6t.forEach(t),Wqo=r(gRe," (Encoder decoder model)"),gRe.forEach(t),Hqo=i(be),xb=n(be,"LI",{});var hRe=s(xb);Mpe=n(hRe,"STRONG",{});var z6t=s(Mpe);Uqo=r(z6t,"fsmt"),z6t.forEach(t),Jqo=r(hRe," \u2014 "),$V=n(hRe,"A",{href:!0});var Q6t=s($V);Yqo=r(Q6t,"FSMTForConditionalGeneration"),Q6t.forEach(t),Kqo=r(hRe," (FairSeq Machine-Translation model)"),hRe.forEach(t),Zqo=i(be),$b=n(be,"LI",{});var pRe=s($b);Epe=n(pRe,"STRONG",{});var W6t=s(Epe);ejo=r(W6t,"led"),W6t.forEach(t),ojo=r(pRe," \u2014 "),kV=n(pRe,"A",{href:!0});var H6t=s(kV);rjo=r(H6t,"LEDForConditionalGeneration"),H6t.forEach(t),tjo=r(pRe," (LED model)"),pRe.forEach(t),ajo=i(be),kb=n(be,"LI",{});var _Re=s(kb);Cpe=n(_Re,"STRONG",{});var U6t=s(Cpe);njo=r(U6t,"longt5"),U6t.forEach(t),sjo=r(_Re," \u2014 "),SV=n(_Re,"A",{href:!0});var J6t=s(SV);ljo=r(J6t,"LongT5ForConditionalGeneration"),J6t.forEach(t),ijo=r(_Re," (LongT5 model)"),_Re.forEach(t),djo=i(be),Sb=n(be,"LI",{});var uRe=s(Sb);wpe=n(uRe,"STRONG",{});var Y6t=s(wpe);cjo=r(Y6t,"m2m_100"),Y6t.forEach(t),fjo=r(uRe," \u2014 "),RV=n(uRe,"A",{href:!0});var K6t=s(RV);mjo=r(K6t,"M2M100ForConditionalGeneration"),K6t.forEach(t),gjo=r(uRe," (M2M100 model)"),uRe.forEach(t),hjo=i(be),Rb=n(be,"LI",{});var bRe=s(Rb);Ape=n(bRe,"STRONG",{});var Z6t=s(Ape);pjo=r(Z6t,"marian"),Z6t.forEach(t),_jo=r(bRe," \u2014 "),PV=n(bRe,"A",{href:!0});var eTt=s(PV);ujo=r(eTt,"MarianMTModel"),eTt.forEach(t),bjo=r(bRe," (Marian model)"),bRe.forEach(t),vjo=i(be),Pb=n(be,"LI",{});var vRe=s(Pb);Lpe=n(vRe,"STRONG",{});var oTt=s(Lpe);Fjo=r(oTt,"mbart"),oTt.forEach(t),Tjo=r(vRe," \u2014 "),BV=n(vRe,"A",{href:!0});var rTt=s(BV);Mjo=r(rTt,"MBartForConditionalGeneration"),rTt.forEach(t),Ejo=r(vRe," (mBART model)"),vRe.forEach(t),Cjo=i(be),Bb=n(be,"LI",{});var FRe=s(Bb);ype=n(FRe,"STRONG",{});var tTt=s(ype);wjo=r(tTt,"mt5"),tTt.forEach(t),Ajo=r(FRe," \u2014 "),IV=n(FRe,"A",{href:!0});var aTt=s(IV);Ljo=r(aTt,"MT5ForConditionalGeneration"),aTt.forEach(t),yjo=r(FRe," (MT5 model)"),FRe.forEach(t),xjo=i(be),Ib=n(be,"LI",{});var TRe=s(Ib);xpe=n(TRe,"STRONG",{});var nTt=s(xpe);$jo=r(nTt,"mvp"),nTt.forEach(t),kjo=r(TRe," \u2014 "),NV=n(TRe,"A",{href:!0});var sTt=s(NV);Sjo=r(sTt,"MvpForConditionalGeneration"),sTt.forEach(t),Rjo=r(TRe," (MVP model)"),TRe.forEach(t),Pjo=i(be),Nb=n(be,"LI",{});var MRe=s(Nb);$pe=n(MRe,"STRONG",{});var lTt=s($pe);Bjo=r(lTt,"pegasus"),lTt.forEach(t),Ijo=r(MRe," \u2014 "),qV=n(MRe,"A",{href:!0});var iTt=s(qV);Njo=r(iTt,"PegasusForConditionalGeneration"),iTt.forEach(t),qjo=r(MRe," (Pegasus model)"),MRe.forEach(t),jjo=i(be),qb=n(be,"LI",{});var ERe=s(qb);kpe=n(ERe,"STRONG",{});var dTt=s(kpe);Djo=r(dTt,"plbart"),dTt.forEach(t),Gjo=r(ERe," \u2014 "),jV=n(ERe,"A",{href:!0});var cTt=s(jV);Ojo=r(cTt,"PLBartForConditionalGeneration"),cTt.forEach(t),Vjo=r(ERe," (PLBart model)"),ERe.forEach(t),Xjo=i(be),jb=n(be,"LI",{});var CRe=s(jb);Spe=n(CRe,"STRONG",{});var fTt=s(Spe);zjo=r(fTt,"prophetnet"),fTt.forEach(t),Qjo=r(CRe," \u2014 "),DV=n(CRe,"A",{href:!0});var mTt=s(DV);Wjo=r(mTt,"ProphetNetForConditionalGeneration"),mTt.forEach(t),Hjo=r(CRe," (ProphetNet model)"),CRe.forEach(t),Ujo=i(be),Db=n(be,"LI",{});var wRe=s(Db);Rpe=n(wRe,"STRONG",{});var gTt=s(Rpe);Jjo=r(gTt,"t5"),gTt.forEach(t),Yjo=r(wRe," \u2014 "),GV=n(wRe,"A",{href:!0});var hTt=s(GV);Kjo=r(hTt,"T5ForConditionalGeneration"),hTt.forEach(t),Zjo=r(wRe," (T5 model)"),wRe.forEach(t),eDo=i(be),Gb=n(be,"LI",{});var ARe=s(Gb);Ppe=n(ARe,"STRONG",{});var pTt=s(Ppe);oDo=r(pTt,"xlm-prophetnet"),pTt.forEach(t),rDo=r(ARe," \u2014 "),OV=n(ARe,"A",{href:!0});var _Tt=s(OV);tDo=r(_Tt,"XLMProphetNetForConditionalGeneration"),_Tt.forEach(t),aDo=r(ARe," (XLM-ProphetNet model)"),ARe.forEach(t),be.forEach(t),nDo=i(ca),Ob=n(ca,"P",{});var LRe=s(Ob);sDo=r(LRe,"The model is set in evaluation mode by default using "),Bpe=n(LRe,"CODE",{});var uTt=s(Bpe);lDo=r(uTt,"model.eval()"),uTt.forEach(t),iDo=r(LRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(LRe,"CODE",{});var bTt=s(Ipe);dDo=r(bTt,"model.train()"),bTt.forEach(t),LRe.forEach(t),cDo=i(ca),T(Vb.$$.fragment,ca),ca.forEach(t),al.forEach(t),pXe=i(f),od=n(f,"H2",{class:!0});var TQe=s(od);Xb=n(TQe,"A",{id:!0,class:!0,href:!0});var vTt=s(Xb);Npe=n(vTt,"SPAN",{});var FTt=s(Npe);T(ey.$$.fragment,FTt),FTt.forEach(t),vTt.forEach(t),fDo=i(TQe),qpe=n(TQe,"SPAN",{});var TTt=s(qpe);mDo=r(TTt,"AutoModelForSequenceClassification"),TTt.forEach(t),TQe.forEach(t),_Xe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(oy.$$.fragment,nl),gDo=i(nl),rd=n(nl,"P",{});var Bre=s(rd);hDo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VV=n(Bre,"A",{href:!0});var MTt=s(VV);pDo=r(MTt,"from_pretrained()"),MTt.forEach(t),_Do=r(Bre," class method or the "),XV=n(Bre,"A",{href:!0});var ETt=s(XV);uDo=r(ETt,"from_config()"),ETt.forEach(t),bDo=r(Bre,` class
method.`),Bre.forEach(t),vDo=i(nl),ry=n(nl,"P",{});var MQe=s(ry);FDo=r(MQe,"This class cannot be instantiated directly using "),jpe=n(MQe,"CODE",{});var CTt=s(jpe);TDo=r(CTt,"__init__()"),CTt.forEach(t),MDo=r(MQe," (throws an error)."),MQe.forEach(t),EDo=i(nl),mt=n(nl,"DIV",{class:!0});var uw=s(mt);T(ty.$$.fragment,uw),CDo=i(uw),Dpe=n(uw,"P",{});var wTt=s(Dpe);wDo=r(wTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wTt.forEach(t),ADo=i(uw),td=n(uw,"P",{});var Ire=s(td);LDo=r(Ire,`Note:
Loading a model from its configuration file does `),Gpe=n(Ire,"STRONG",{});var ATt=s(Gpe);yDo=r(ATt,"not"),ATt.forEach(t),xDo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(Ire,"A",{href:!0});var LTt=s(zV);$Do=r(LTt,"from_pretrained()"),LTt.forEach(t),kDo=r(Ire," to load the model weights."),Ire.forEach(t),SDo=i(uw),T(zb.$$.fragment,uw),uw.forEach(t),RDo=i(nl),oo=n(nl,"DIV",{class:!0});var fa=s(oo);T(ay.$$.fragment,fa),PDo=i(fa),Ope=n(fa,"P",{});var yTt=s(Ope);BDo=r(yTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yTt.forEach(t),IDo=i(fa),Da=n(fa,"P",{});var bw=s(Da);NDo=r(bw,"The model class to instantiate is selected based on the "),Vpe=n(bw,"CODE",{});var xTt=s(Vpe);qDo=r(xTt,"model_type"),xTt.forEach(t),jDo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(bw,"CODE",{});var $Tt=s(Xpe);DDo=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),GDo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(bw,"CODE",{});var kTt=s(zpe);ODo=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),VDo=r(bw,":"),bw.forEach(t),XDo=i(fa),N=n(fa,"UL",{});var q=s(N);Qb=n(q,"LI",{});var yRe=s(Qb);Qpe=n(yRe,"STRONG",{});var STt=s(Qpe);zDo=r(STt,"albert"),STt.forEach(t),QDo=r(yRe," \u2014 "),QV=n(yRe,"A",{href:!0});var RTt=s(QV);WDo=r(RTt,"AlbertForSequenceClassification"),RTt.forEach(t),HDo=r(yRe," (ALBERT model)"),yRe.forEach(t),UDo=i(q),Wb=n(q,"LI",{});var xRe=s(Wb);Wpe=n(xRe,"STRONG",{});var PTt=s(Wpe);JDo=r(PTt,"bart"),PTt.forEach(t),YDo=r(xRe," \u2014 "),WV=n(xRe,"A",{href:!0});var BTt=s(WV);KDo=r(BTt,"BartForSequenceClassification"),BTt.forEach(t),ZDo=r(xRe," (BART model)"),xRe.forEach(t),eGo=i(q),Hb=n(q,"LI",{});var $Re=s(Hb);Hpe=n($Re,"STRONG",{});var ITt=s(Hpe);oGo=r(ITt,"bert"),ITt.forEach(t),rGo=r($Re," \u2014 "),HV=n($Re,"A",{href:!0});var NTt=s(HV);tGo=r(NTt,"BertForSequenceClassification"),NTt.forEach(t),aGo=r($Re," (BERT model)"),$Re.forEach(t),nGo=i(q),Ub=n(q,"LI",{});var kRe=s(Ub);Upe=n(kRe,"STRONG",{});var qTt=s(Upe);sGo=r(qTt,"big_bird"),qTt.forEach(t),lGo=r(kRe," \u2014 "),UV=n(kRe,"A",{href:!0});var jTt=s(UV);iGo=r(jTt,"BigBirdForSequenceClassification"),jTt.forEach(t),dGo=r(kRe," (BigBird model)"),kRe.forEach(t),cGo=i(q),Jb=n(q,"LI",{});var SRe=s(Jb);Jpe=n(SRe,"STRONG",{});var DTt=s(Jpe);fGo=r(DTt,"bigbird_pegasus"),DTt.forEach(t),mGo=r(SRe," \u2014 "),JV=n(SRe,"A",{href:!0});var GTt=s(JV);gGo=r(GTt,"BigBirdPegasusForSequenceClassification"),GTt.forEach(t),hGo=r(SRe," (BigBird-Pegasus model)"),SRe.forEach(t),pGo=i(q),Yb=n(q,"LI",{});var RRe=s(Yb);Ype=n(RRe,"STRONG",{});var OTt=s(Ype);_Go=r(OTt,"bloom"),OTt.forEach(t),uGo=r(RRe," \u2014 "),YV=n(RRe,"A",{href:!0});var VTt=s(YV);bGo=r(VTt,"BloomForSequenceClassification"),VTt.forEach(t),vGo=r(RRe," (BLOOM model)"),RRe.forEach(t),FGo=i(q),Kb=n(q,"LI",{});var PRe=s(Kb);Kpe=n(PRe,"STRONG",{});var XTt=s(Kpe);TGo=r(XTt,"camembert"),XTt.forEach(t),MGo=r(PRe," \u2014 "),KV=n(PRe,"A",{href:!0});var zTt=s(KV);EGo=r(zTt,"CamembertForSequenceClassification"),zTt.forEach(t),CGo=r(PRe," (CamemBERT model)"),PRe.forEach(t),wGo=i(q),Zb=n(q,"LI",{});var BRe=s(Zb);Zpe=n(BRe,"STRONG",{});var QTt=s(Zpe);AGo=r(QTt,"canine"),QTt.forEach(t),LGo=r(BRe," \u2014 "),ZV=n(BRe,"A",{href:!0});var WTt=s(ZV);yGo=r(WTt,"CanineForSequenceClassification"),WTt.forEach(t),xGo=r(BRe," (CANINE model)"),BRe.forEach(t),$Go=i(q),ev=n(q,"LI",{});var IRe=s(ev);e_e=n(IRe,"STRONG",{});var HTt=s(e_e);kGo=r(HTt,"convbert"),HTt.forEach(t),SGo=r(IRe," \u2014 "),eX=n(IRe,"A",{href:!0});var UTt=s(eX);RGo=r(UTt,"ConvBertForSequenceClassification"),UTt.forEach(t),PGo=r(IRe," (ConvBERT model)"),IRe.forEach(t),BGo=i(q),ov=n(q,"LI",{});var NRe=s(ov);o_e=n(NRe,"STRONG",{});var JTt=s(o_e);IGo=r(JTt,"ctrl"),JTt.forEach(t),NGo=r(NRe," \u2014 "),oX=n(NRe,"A",{href:!0});var YTt=s(oX);qGo=r(YTt,"CTRLForSequenceClassification"),YTt.forEach(t),jGo=r(NRe," (CTRL model)"),NRe.forEach(t),DGo=i(q),rv=n(q,"LI",{});var qRe=s(rv);r_e=n(qRe,"STRONG",{});var KTt=s(r_e);GGo=r(KTt,"data2vec-text"),KTt.forEach(t),OGo=r(qRe," \u2014 "),rX=n(qRe,"A",{href:!0});var ZTt=s(rX);VGo=r(ZTt,"Data2VecTextForSequenceClassification"),ZTt.forEach(t),XGo=r(qRe," (Data2VecText model)"),qRe.forEach(t),zGo=i(q),tv=n(q,"LI",{});var jRe=s(tv);t_e=n(jRe,"STRONG",{});var e7t=s(t_e);QGo=r(e7t,"deberta"),e7t.forEach(t),WGo=r(jRe," \u2014 "),tX=n(jRe,"A",{href:!0});var o7t=s(tX);HGo=r(o7t,"DebertaForSequenceClassification"),o7t.forEach(t),UGo=r(jRe," (DeBERTa model)"),jRe.forEach(t),JGo=i(q),av=n(q,"LI",{});var DRe=s(av);a_e=n(DRe,"STRONG",{});var r7t=s(a_e);YGo=r(r7t,"deberta-v2"),r7t.forEach(t),KGo=r(DRe," \u2014 "),aX=n(DRe,"A",{href:!0});var t7t=s(aX);ZGo=r(t7t,"DebertaV2ForSequenceClassification"),t7t.forEach(t),eOo=r(DRe," (DeBERTa-v2 model)"),DRe.forEach(t),oOo=i(q),nv=n(q,"LI",{});var GRe=s(nv);n_e=n(GRe,"STRONG",{});var a7t=s(n_e);rOo=r(a7t,"distilbert"),a7t.forEach(t),tOo=r(GRe," \u2014 "),nX=n(GRe,"A",{href:!0});var n7t=s(nX);aOo=r(n7t,"DistilBertForSequenceClassification"),n7t.forEach(t),nOo=r(GRe," (DistilBERT model)"),GRe.forEach(t),sOo=i(q),sv=n(q,"LI",{});var ORe=s(sv);s_e=n(ORe,"STRONG",{});var s7t=s(s_e);lOo=r(s7t,"electra"),s7t.forEach(t),iOo=r(ORe," \u2014 "),sX=n(ORe,"A",{href:!0});var l7t=s(sX);dOo=r(l7t,"ElectraForSequenceClassification"),l7t.forEach(t),cOo=r(ORe," (ELECTRA model)"),ORe.forEach(t),fOo=i(q),lv=n(q,"LI",{});var VRe=s(lv);l_e=n(VRe,"STRONG",{});var i7t=s(l_e);mOo=r(i7t,"flaubert"),i7t.forEach(t),gOo=r(VRe," \u2014 "),lX=n(VRe,"A",{href:!0});var d7t=s(lX);hOo=r(d7t,"FlaubertForSequenceClassification"),d7t.forEach(t),pOo=r(VRe," (FlauBERT model)"),VRe.forEach(t),_Oo=i(q),iv=n(q,"LI",{});var XRe=s(iv);i_e=n(XRe,"STRONG",{});var c7t=s(i_e);uOo=r(c7t,"fnet"),c7t.forEach(t),bOo=r(XRe," \u2014 "),iX=n(XRe,"A",{href:!0});var f7t=s(iX);vOo=r(f7t,"FNetForSequenceClassification"),f7t.forEach(t),FOo=r(XRe," (FNet model)"),XRe.forEach(t),TOo=i(q),dv=n(q,"LI",{});var zRe=s(dv);d_e=n(zRe,"STRONG",{});var m7t=s(d_e);MOo=r(m7t,"funnel"),m7t.forEach(t),EOo=r(zRe," \u2014 "),dX=n(zRe,"A",{href:!0});var g7t=s(dX);COo=r(g7t,"FunnelForSequenceClassification"),g7t.forEach(t),wOo=r(zRe," (Funnel Transformer model)"),zRe.forEach(t),AOo=i(q),cv=n(q,"LI",{});var QRe=s(cv);c_e=n(QRe,"STRONG",{});var h7t=s(c_e);LOo=r(h7t,"gpt2"),h7t.forEach(t),yOo=r(QRe," \u2014 "),cX=n(QRe,"A",{href:!0});var p7t=s(cX);xOo=r(p7t,"GPT2ForSequenceClassification"),p7t.forEach(t),$Oo=r(QRe," (OpenAI GPT-2 model)"),QRe.forEach(t),kOo=i(q),fv=n(q,"LI",{});var WRe=s(fv);f_e=n(WRe,"STRONG",{});var _7t=s(f_e);SOo=r(_7t,"gpt_neo"),_7t.forEach(t),ROo=r(WRe," \u2014 "),fX=n(WRe,"A",{href:!0});var u7t=s(fX);POo=r(u7t,"GPTNeoForSequenceClassification"),u7t.forEach(t),BOo=r(WRe," (GPT Neo model)"),WRe.forEach(t),IOo=i(q),mv=n(q,"LI",{});var HRe=s(mv);m_e=n(HRe,"STRONG",{});var b7t=s(m_e);NOo=r(b7t,"gptj"),b7t.forEach(t),qOo=r(HRe," \u2014 "),mX=n(HRe,"A",{href:!0});var v7t=s(mX);jOo=r(v7t,"GPTJForSequenceClassification"),v7t.forEach(t),DOo=r(HRe," (GPT-J model)"),HRe.forEach(t),GOo=i(q),gv=n(q,"LI",{});var URe=s(gv);g_e=n(URe,"STRONG",{});var F7t=s(g_e);OOo=r(F7t,"ibert"),F7t.forEach(t),VOo=r(URe," \u2014 "),gX=n(URe,"A",{href:!0});var T7t=s(gX);XOo=r(T7t,"IBertForSequenceClassification"),T7t.forEach(t),zOo=r(URe," (I-BERT model)"),URe.forEach(t),QOo=i(q),hv=n(q,"LI",{});var JRe=s(hv);h_e=n(JRe,"STRONG",{});var M7t=s(h_e);WOo=r(M7t,"layoutlm"),M7t.forEach(t),HOo=r(JRe," \u2014 "),hX=n(JRe,"A",{href:!0});var E7t=s(hX);UOo=r(E7t,"LayoutLMForSequenceClassification"),E7t.forEach(t),JOo=r(JRe," (LayoutLM model)"),JRe.forEach(t),YOo=i(q),pv=n(q,"LI",{});var YRe=s(pv);p_e=n(YRe,"STRONG",{});var C7t=s(p_e);KOo=r(C7t,"layoutlmv2"),C7t.forEach(t),ZOo=r(YRe," \u2014 "),pX=n(YRe,"A",{href:!0});var w7t=s(pX);eVo=r(w7t,"LayoutLMv2ForSequenceClassification"),w7t.forEach(t),oVo=r(YRe," (LayoutLMv2 model)"),YRe.forEach(t),rVo=i(q),_v=n(q,"LI",{});var KRe=s(_v);__e=n(KRe,"STRONG",{});var A7t=s(__e);tVo=r(A7t,"layoutlmv3"),A7t.forEach(t),aVo=r(KRe," \u2014 "),_X=n(KRe,"A",{href:!0});var L7t=s(_X);nVo=r(L7t,"LayoutLMv3ForSequenceClassification"),L7t.forEach(t),sVo=r(KRe," (LayoutLMv3 model)"),KRe.forEach(t),lVo=i(q),uv=n(q,"LI",{});var ZRe=s(uv);u_e=n(ZRe,"STRONG",{});var y7t=s(u_e);iVo=r(y7t,"led"),y7t.forEach(t),dVo=r(ZRe," \u2014 "),uX=n(ZRe,"A",{href:!0});var x7t=s(uX);cVo=r(x7t,"LEDForSequenceClassification"),x7t.forEach(t),fVo=r(ZRe," (LED model)"),ZRe.forEach(t),mVo=i(q),bv=n(q,"LI",{});var ePe=s(bv);b_e=n(ePe,"STRONG",{});var $7t=s(b_e);gVo=r($7t,"longformer"),$7t.forEach(t),hVo=r(ePe," \u2014 "),bX=n(ePe,"A",{href:!0});var k7t=s(bX);pVo=r(k7t,"LongformerForSequenceClassification"),k7t.forEach(t),_Vo=r(ePe," (Longformer model)"),ePe.forEach(t),uVo=i(q),vv=n(q,"LI",{});var oPe=s(vv);v_e=n(oPe,"STRONG",{});var S7t=s(v_e);bVo=r(S7t,"mbart"),S7t.forEach(t),vVo=r(oPe," \u2014 "),vX=n(oPe,"A",{href:!0});var R7t=s(vX);FVo=r(R7t,"MBartForSequenceClassification"),R7t.forEach(t),TVo=r(oPe," (mBART model)"),oPe.forEach(t),MVo=i(q),Fv=n(q,"LI",{});var rPe=s(Fv);F_e=n(rPe,"STRONG",{});var P7t=s(F_e);EVo=r(P7t,"megatron-bert"),P7t.forEach(t),CVo=r(rPe," \u2014 "),FX=n(rPe,"A",{href:!0});var B7t=s(FX);wVo=r(B7t,"MegatronBertForSequenceClassification"),B7t.forEach(t),AVo=r(rPe," (Megatron-BERT model)"),rPe.forEach(t),LVo=i(q),Tv=n(q,"LI",{});var tPe=s(Tv);T_e=n(tPe,"STRONG",{});var I7t=s(T_e);yVo=r(I7t,"mobilebert"),I7t.forEach(t),xVo=r(tPe," \u2014 "),TX=n(tPe,"A",{href:!0});var N7t=s(TX);$Vo=r(N7t,"MobileBertForSequenceClassification"),N7t.forEach(t),kVo=r(tPe," (MobileBERT model)"),tPe.forEach(t),SVo=i(q),Mv=n(q,"LI",{});var aPe=s(Mv);M_e=n(aPe,"STRONG",{});var q7t=s(M_e);RVo=r(q7t,"mpnet"),q7t.forEach(t),PVo=r(aPe," \u2014 "),MX=n(aPe,"A",{href:!0});var j7t=s(MX);BVo=r(j7t,"MPNetForSequenceClassification"),j7t.forEach(t),IVo=r(aPe," (MPNet model)"),aPe.forEach(t),NVo=i(q),Ev=n(q,"LI",{});var nPe=s(Ev);E_e=n(nPe,"STRONG",{});var D7t=s(E_e);qVo=r(D7t,"mvp"),D7t.forEach(t),jVo=r(nPe," \u2014 "),EX=n(nPe,"A",{href:!0});var G7t=s(EX);DVo=r(G7t,"MvpForSequenceClassification"),G7t.forEach(t),GVo=r(nPe," (MVP model)"),nPe.forEach(t),OVo=i(q),Cv=n(q,"LI",{});var sPe=s(Cv);C_e=n(sPe,"STRONG",{});var O7t=s(C_e);VVo=r(O7t,"nezha"),O7t.forEach(t),XVo=r(sPe," \u2014 "),CX=n(sPe,"A",{href:!0});var V7t=s(CX);zVo=r(V7t,"NezhaForSequenceClassification"),V7t.forEach(t),QVo=r(sPe," (Nezha model)"),sPe.forEach(t),WVo=i(q),wv=n(q,"LI",{});var lPe=s(wv);w_e=n(lPe,"STRONG",{});var X7t=s(w_e);HVo=r(X7t,"nystromformer"),X7t.forEach(t),UVo=r(lPe," \u2014 "),wX=n(lPe,"A",{href:!0});var z7t=s(wX);JVo=r(z7t,"NystromformerForSequenceClassification"),z7t.forEach(t),YVo=r(lPe," (Nystr\xF6mformer model)"),lPe.forEach(t),KVo=i(q),Av=n(q,"LI",{});var iPe=s(Av);A_e=n(iPe,"STRONG",{});var Q7t=s(A_e);ZVo=r(Q7t,"openai-gpt"),Q7t.forEach(t),eXo=r(iPe," \u2014 "),AX=n(iPe,"A",{href:!0});var W7t=s(AX);oXo=r(W7t,"OpenAIGPTForSequenceClassification"),W7t.forEach(t),rXo=r(iPe," (OpenAI GPT model)"),iPe.forEach(t),tXo=i(q),Lv=n(q,"LI",{});var dPe=s(Lv);L_e=n(dPe,"STRONG",{});var H7t=s(L_e);aXo=r(H7t,"perceiver"),H7t.forEach(t),nXo=r(dPe," \u2014 "),LX=n(dPe,"A",{href:!0});var U7t=s(LX);sXo=r(U7t,"PerceiverForSequenceClassification"),U7t.forEach(t),lXo=r(dPe," (Perceiver model)"),dPe.forEach(t),iXo=i(q),yv=n(q,"LI",{});var cPe=s(yv);y_e=n(cPe,"STRONG",{});var J7t=s(y_e);dXo=r(J7t,"plbart"),J7t.forEach(t),cXo=r(cPe," \u2014 "),yX=n(cPe,"A",{href:!0});var Y7t=s(yX);fXo=r(Y7t,"PLBartForSequenceClassification"),Y7t.forEach(t),mXo=r(cPe," (PLBart model)"),cPe.forEach(t),gXo=i(q),xv=n(q,"LI",{});var fPe=s(xv);x_e=n(fPe,"STRONG",{});var K7t=s(x_e);hXo=r(K7t,"qdqbert"),K7t.forEach(t),pXo=r(fPe," \u2014 "),xX=n(fPe,"A",{href:!0});var Z7t=s(xX);_Xo=r(Z7t,"QDQBertForSequenceClassification"),Z7t.forEach(t),uXo=r(fPe," (QDQBert model)"),fPe.forEach(t),bXo=i(q),$v=n(q,"LI",{});var mPe=s($v);$_e=n(mPe,"STRONG",{});var e8t=s($_e);vXo=r(e8t,"reformer"),e8t.forEach(t),FXo=r(mPe," \u2014 "),$X=n(mPe,"A",{href:!0});var o8t=s($X);TXo=r(o8t,"ReformerForSequenceClassification"),o8t.forEach(t),MXo=r(mPe," (Reformer model)"),mPe.forEach(t),EXo=i(q),kv=n(q,"LI",{});var gPe=s(kv);k_e=n(gPe,"STRONG",{});var r8t=s(k_e);CXo=r(r8t,"rembert"),r8t.forEach(t),wXo=r(gPe," \u2014 "),kX=n(gPe,"A",{href:!0});var t8t=s(kX);AXo=r(t8t,"RemBertForSequenceClassification"),t8t.forEach(t),LXo=r(gPe," (RemBERT model)"),gPe.forEach(t),yXo=i(q),Sv=n(q,"LI",{});var hPe=s(Sv);S_e=n(hPe,"STRONG",{});var a8t=s(S_e);xXo=r(a8t,"roberta"),a8t.forEach(t),$Xo=r(hPe," \u2014 "),SX=n(hPe,"A",{href:!0});var n8t=s(SX);kXo=r(n8t,"RobertaForSequenceClassification"),n8t.forEach(t),SXo=r(hPe," (RoBERTa model)"),hPe.forEach(t),RXo=i(q),Rv=n(q,"LI",{});var pPe=s(Rv);R_e=n(pPe,"STRONG",{});var s8t=s(R_e);PXo=r(s8t,"roformer"),s8t.forEach(t),BXo=r(pPe," \u2014 "),RX=n(pPe,"A",{href:!0});var l8t=s(RX);IXo=r(l8t,"RoFormerForSequenceClassification"),l8t.forEach(t),NXo=r(pPe," (RoFormer model)"),pPe.forEach(t),qXo=i(q),Pv=n(q,"LI",{});var _Pe=s(Pv);P_e=n(_Pe,"STRONG",{});var i8t=s(P_e);jXo=r(i8t,"squeezebert"),i8t.forEach(t),DXo=r(_Pe," \u2014 "),PX=n(_Pe,"A",{href:!0});var d8t=s(PX);GXo=r(d8t,"SqueezeBertForSequenceClassification"),d8t.forEach(t),OXo=r(_Pe," (SqueezeBERT model)"),_Pe.forEach(t),VXo=i(q),Bv=n(q,"LI",{});var uPe=s(Bv);B_e=n(uPe,"STRONG",{});var c8t=s(B_e);XXo=r(c8t,"tapas"),c8t.forEach(t),zXo=r(uPe," \u2014 "),BX=n(uPe,"A",{href:!0});var f8t=s(BX);QXo=r(f8t,"TapasForSequenceClassification"),f8t.forEach(t),WXo=r(uPe," (TAPAS model)"),uPe.forEach(t),HXo=i(q),Iv=n(q,"LI",{});var bPe=s(Iv);I_e=n(bPe,"STRONG",{});var m8t=s(I_e);UXo=r(m8t,"transfo-xl"),m8t.forEach(t),JXo=r(bPe," \u2014 "),IX=n(bPe,"A",{href:!0});var g8t=s(IX);YXo=r(g8t,"TransfoXLForSequenceClassification"),g8t.forEach(t),KXo=r(bPe," (Transformer-XL model)"),bPe.forEach(t),ZXo=i(q),Nv=n(q,"LI",{});var vPe=s(Nv);N_e=n(vPe,"STRONG",{});var h8t=s(N_e);ezo=r(h8t,"xlm"),h8t.forEach(t),ozo=r(vPe," \u2014 "),NX=n(vPe,"A",{href:!0});var p8t=s(NX);rzo=r(p8t,"XLMForSequenceClassification"),p8t.forEach(t),tzo=r(vPe," (XLM model)"),vPe.forEach(t),azo=i(q),qv=n(q,"LI",{});var FPe=s(qv);q_e=n(FPe,"STRONG",{});var _8t=s(q_e);nzo=r(_8t,"xlm-roberta"),_8t.forEach(t),szo=r(FPe," \u2014 "),qX=n(FPe,"A",{href:!0});var u8t=s(qX);lzo=r(u8t,"XLMRobertaForSequenceClassification"),u8t.forEach(t),izo=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),dzo=i(q),jv=n(q,"LI",{});var TPe=s(jv);j_e=n(TPe,"STRONG",{});var b8t=s(j_e);czo=r(b8t,"xlm-roberta-xl"),b8t.forEach(t),fzo=r(TPe," \u2014 "),jX=n(TPe,"A",{href:!0});var v8t=s(jX);mzo=r(v8t,"XLMRobertaXLForSequenceClassification"),v8t.forEach(t),gzo=r(TPe," (XLM-RoBERTa-XL model)"),TPe.forEach(t),hzo=i(q),Dv=n(q,"LI",{});var MPe=s(Dv);D_e=n(MPe,"STRONG",{});var F8t=s(D_e);pzo=r(F8t,"xlnet"),F8t.forEach(t),_zo=r(MPe," \u2014 "),DX=n(MPe,"A",{href:!0});var T8t=s(DX);uzo=r(T8t,"XLNetForSequenceClassification"),T8t.forEach(t),bzo=r(MPe," (XLNet model)"),MPe.forEach(t),vzo=i(q),Gv=n(q,"LI",{});var EPe=s(Gv);G_e=n(EPe,"STRONG",{});var M8t=s(G_e);Fzo=r(M8t,"yoso"),M8t.forEach(t),Tzo=r(EPe," \u2014 "),GX=n(EPe,"A",{href:!0});var E8t=s(GX);Mzo=r(E8t,"YosoForSequenceClassification"),E8t.forEach(t),Ezo=r(EPe," (YOSO model)"),EPe.forEach(t),q.forEach(t),Czo=i(fa),Ov=n(fa,"P",{});var CPe=s(Ov);wzo=r(CPe,"The model is set in evaluation mode by default using "),O_e=n(CPe,"CODE",{});var C8t=s(O_e);Azo=r(C8t,"model.eval()"),C8t.forEach(t),Lzo=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=n(CPe,"CODE",{});var w8t=s(V_e);yzo=r(w8t,"model.train()"),w8t.forEach(t),CPe.forEach(t),xzo=i(fa),T(Vv.$$.fragment,fa),fa.forEach(t),nl.forEach(t),uXe=i(f),ad=n(f,"H2",{class:!0});var EQe=s(ad);Xv=n(EQe,"A",{id:!0,class:!0,href:!0});var A8t=s(Xv);X_e=n(A8t,"SPAN",{});var L8t=s(X_e);T(ny.$$.fragment,L8t),L8t.forEach(t),A8t.forEach(t),$zo=i(EQe),z_e=n(EQe,"SPAN",{});var y8t=s(z_e);kzo=r(y8t,"AutoModelForMultipleChoice"),y8t.forEach(t),EQe.forEach(t),bXe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(sy.$$.fragment,sl),Szo=i(sl),nd=n(sl,"P",{});var Nre=s(nd);Rzo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OX=n(Nre,"A",{href:!0});var x8t=s(OX);Pzo=r(x8t,"from_pretrained()"),x8t.forEach(t),Bzo=r(Nre," class method or the "),VX=n(Nre,"A",{href:!0});var $8t=s(VX);Izo=r($8t,"from_config()"),$8t.forEach(t),Nzo=r(Nre,` class
method.`),Nre.forEach(t),qzo=i(sl),ly=n(sl,"P",{});var CQe=s(ly);jzo=r(CQe,"This class cannot be instantiated directly using "),Q_e=n(CQe,"CODE",{});var k8t=s(Q_e);Dzo=r(k8t,"__init__()"),k8t.forEach(t),Gzo=r(CQe," (throws an error)."),CQe.forEach(t),Ozo=i(sl),gt=n(sl,"DIV",{class:!0});var vw=s(gt);T(iy.$$.fragment,vw),Vzo=i(vw),W_e=n(vw,"P",{});var S8t=s(W_e);Xzo=r(S8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S8t.forEach(t),zzo=i(vw),sd=n(vw,"P",{});var qre=s(sd);Qzo=r(qre,`Note:
Loading a model from its configuration file does `),H_e=n(qre,"STRONG",{});var R8t=s(H_e);Wzo=r(R8t,"not"),R8t.forEach(t),Hzo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(qre,"A",{href:!0});var P8t=s(XX);Uzo=r(P8t,"from_pretrained()"),P8t.forEach(t),Jzo=r(qre," to load the model weights."),qre.forEach(t),Yzo=i(vw),T(zv.$$.fragment,vw),vw.forEach(t),Kzo=i(sl),ro=n(sl,"DIV",{class:!0});var ma=s(ro);T(dy.$$.fragment,ma),Zzo=i(ma),U_e=n(ma,"P",{});var B8t=s(U_e);eQo=r(B8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B8t.forEach(t),oQo=i(ma),Ga=n(ma,"P",{});var Fw=s(Ga);rQo=r(Fw,"The model class to instantiate is selected based on the "),J_e=n(Fw,"CODE",{});var I8t=s(J_e);tQo=r(I8t,"model_type"),I8t.forEach(t),aQo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(Fw,"CODE",{});var N8t=s(Y_e);nQo=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),sQo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(Fw,"CODE",{});var q8t=s(K_e);lQo=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),iQo=r(Fw,":"),Fw.forEach(t),dQo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Qv=n(ee,"LI",{});var wPe=s(Qv);Z_e=n(wPe,"STRONG",{});var j8t=s(Z_e);cQo=r(j8t,"albert"),j8t.forEach(t),fQo=r(wPe," \u2014 "),zX=n(wPe,"A",{href:!0});var D8t=s(zX);mQo=r(D8t,"AlbertForMultipleChoice"),D8t.forEach(t),gQo=r(wPe," (ALBERT model)"),wPe.forEach(t),hQo=i(ee),Wv=n(ee,"LI",{});var APe=s(Wv);eue=n(APe,"STRONG",{});var G8t=s(eue);pQo=r(G8t,"bert"),G8t.forEach(t),_Qo=r(APe," \u2014 "),QX=n(APe,"A",{href:!0});var O8t=s(QX);uQo=r(O8t,"BertForMultipleChoice"),O8t.forEach(t),bQo=r(APe," (BERT model)"),APe.forEach(t),vQo=i(ee),Hv=n(ee,"LI",{});var LPe=s(Hv);oue=n(LPe,"STRONG",{});var V8t=s(oue);FQo=r(V8t,"big_bird"),V8t.forEach(t),TQo=r(LPe," \u2014 "),WX=n(LPe,"A",{href:!0});var X8t=s(WX);MQo=r(X8t,"BigBirdForMultipleChoice"),X8t.forEach(t),EQo=r(LPe," (BigBird model)"),LPe.forEach(t),CQo=i(ee),Uv=n(ee,"LI",{});var yPe=s(Uv);rue=n(yPe,"STRONG",{});var z8t=s(rue);wQo=r(z8t,"camembert"),z8t.forEach(t),AQo=r(yPe," \u2014 "),HX=n(yPe,"A",{href:!0});var Q8t=s(HX);LQo=r(Q8t,"CamembertForMultipleChoice"),Q8t.forEach(t),yQo=r(yPe," (CamemBERT model)"),yPe.forEach(t),xQo=i(ee),Jv=n(ee,"LI",{});var xPe=s(Jv);tue=n(xPe,"STRONG",{});var W8t=s(tue);$Qo=r(W8t,"canine"),W8t.forEach(t),kQo=r(xPe," \u2014 "),UX=n(xPe,"A",{href:!0});var H8t=s(UX);SQo=r(H8t,"CanineForMultipleChoice"),H8t.forEach(t),RQo=r(xPe," (CANINE model)"),xPe.forEach(t),PQo=i(ee),Yv=n(ee,"LI",{});var $Pe=s(Yv);aue=n($Pe,"STRONG",{});var U8t=s(aue);BQo=r(U8t,"convbert"),U8t.forEach(t),IQo=r($Pe," \u2014 "),JX=n($Pe,"A",{href:!0});var J8t=s(JX);NQo=r(J8t,"ConvBertForMultipleChoice"),J8t.forEach(t),qQo=r($Pe," (ConvBERT model)"),$Pe.forEach(t),jQo=i(ee),Kv=n(ee,"LI",{});var kPe=s(Kv);nue=n(kPe,"STRONG",{});var Y8t=s(nue);DQo=r(Y8t,"data2vec-text"),Y8t.forEach(t),GQo=r(kPe," \u2014 "),YX=n(kPe,"A",{href:!0});var K8t=s(YX);OQo=r(K8t,"Data2VecTextForMultipleChoice"),K8t.forEach(t),VQo=r(kPe," (Data2VecText model)"),kPe.forEach(t),XQo=i(ee),Zv=n(ee,"LI",{});var SPe=s(Zv);sue=n(SPe,"STRONG",{});var Z8t=s(sue);zQo=r(Z8t,"deberta-v2"),Z8t.forEach(t),QQo=r(SPe," \u2014 "),KX=n(SPe,"A",{href:!0});var eMt=s(KX);WQo=r(eMt,"DebertaV2ForMultipleChoice"),eMt.forEach(t),HQo=r(SPe," (DeBERTa-v2 model)"),SPe.forEach(t),UQo=i(ee),eF=n(ee,"LI",{});var RPe=s(eF);lue=n(RPe,"STRONG",{});var oMt=s(lue);JQo=r(oMt,"distilbert"),oMt.forEach(t),YQo=r(RPe," \u2014 "),ZX=n(RPe,"A",{href:!0});var rMt=s(ZX);KQo=r(rMt,"DistilBertForMultipleChoice"),rMt.forEach(t),ZQo=r(RPe," (DistilBERT model)"),RPe.forEach(t),eWo=i(ee),oF=n(ee,"LI",{});var PPe=s(oF);iue=n(PPe,"STRONG",{});var tMt=s(iue);oWo=r(tMt,"electra"),tMt.forEach(t),rWo=r(PPe," \u2014 "),ez=n(PPe,"A",{href:!0});var aMt=s(ez);tWo=r(aMt,"ElectraForMultipleChoice"),aMt.forEach(t),aWo=r(PPe," (ELECTRA model)"),PPe.forEach(t),nWo=i(ee),rF=n(ee,"LI",{});var BPe=s(rF);due=n(BPe,"STRONG",{});var nMt=s(due);sWo=r(nMt,"flaubert"),nMt.forEach(t),lWo=r(BPe," \u2014 "),oz=n(BPe,"A",{href:!0});var sMt=s(oz);iWo=r(sMt,"FlaubertForMultipleChoice"),sMt.forEach(t),dWo=r(BPe," (FlauBERT model)"),BPe.forEach(t),cWo=i(ee),tF=n(ee,"LI",{});var IPe=s(tF);cue=n(IPe,"STRONG",{});var lMt=s(cue);fWo=r(lMt,"fnet"),lMt.forEach(t),mWo=r(IPe," \u2014 "),rz=n(IPe,"A",{href:!0});var iMt=s(rz);gWo=r(iMt,"FNetForMultipleChoice"),iMt.forEach(t),hWo=r(IPe," (FNet model)"),IPe.forEach(t),pWo=i(ee),aF=n(ee,"LI",{});var NPe=s(aF);fue=n(NPe,"STRONG",{});var dMt=s(fue);_Wo=r(dMt,"funnel"),dMt.forEach(t),uWo=r(NPe," \u2014 "),tz=n(NPe,"A",{href:!0});var cMt=s(tz);bWo=r(cMt,"FunnelForMultipleChoice"),cMt.forEach(t),vWo=r(NPe," (Funnel Transformer model)"),NPe.forEach(t),FWo=i(ee),nF=n(ee,"LI",{});var qPe=s(nF);mue=n(qPe,"STRONG",{});var fMt=s(mue);TWo=r(fMt,"ibert"),fMt.forEach(t),MWo=r(qPe," \u2014 "),az=n(qPe,"A",{href:!0});var mMt=s(az);EWo=r(mMt,"IBertForMultipleChoice"),mMt.forEach(t),CWo=r(qPe," (I-BERT model)"),qPe.forEach(t),wWo=i(ee),sF=n(ee,"LI",{});var jPe=s(sF);gue=n(jPe,"STRONG",{});var gMt=s(gue);AWo=r(gMt,"longformer"),gMt.forEach(t),LWo=r(jPe," \u2014 "),nz=n(jPe,"A",{href:!0});var hMt=s(nz);yWo=r(hMt,"LongformerForMultipleChoice"),hMt.forEach(t),xWo=r(jPe," (Longformer model)"),jPe.forEach(t),$Wo=i(ee),lF=n(ee,"LI",{});var DPe=s(lF);hue=n(DPe,"STRONG",{});var pMt=s(hue);kWo=r(pMt,"megatron-bert"),pMt.forEach(t),SWo=r(DPe," \u2014 "),sz=n(DPe,"A",{href:!0});var _Mt=s(sz);RWo=r(_Mt,"MegatronBertForMultipleChoice"),_Mt.forEach(t),PWo=r(DPe," (Megatron-BERT model)"),DPe.forEach(t),BWo=i(ee),iF=n(ee,"LI",{});var GPe=s(iF);pue=n(GPe,"STRONG",{});var uMt=s(pue);IWo=r(uMt,"mobilebert"),uMt.forEach(t),NWo=r(GPe," \u2014 "),lz=n(GPe,"A",{href:!0});var bMt=s(lz);qWo=r(bMt,"MobileBertForMultipleChoice"),bMt.forEach(t),jWo=r(GPe," (MobileBERT model)"),GPe.forEach(t),DWo=i(ee),dF=n(ee,"LI",{});var OPe=s(dF);_ue=n(OPe,"STRONG",{});var vMt=s(_ue);GWo=r(vMt,"mpnet"),vMt.forEach(t),OWo=r(OPe," \u2014 "),iz=n(OPe,"A",{href:!0});var FMt=s(iz);VWo=r(FMt,"MPNetForMultipleChoice"),FMt.forEach(t),XWo=r(OPe," (MPNet model)"),OPe.forEach(t),zWo=i(ee),cF=n(ee,"LI",{});var VPe=s(cF);uue=n(VPe,"STRONG",{});var TMt=s(uue);QWo=r(TMt,"nezha"),TMt.forEach(t),WWo=r(VPe," \u2014 "),dz=n(VPe,"A",{href:!0});var MMt=s(dz);HWo=r(MMt,"NezhaForMultipleChoice"),MMt.forEach(t),UWo=r(VPe," (Nezha model)"),VPe.forEach(t),JWo=i(ee),fF=n(ee,"LI",{});var XPe=s(fF);bue=n(XPe,"STRONG",{});var EMt=s(bue);YWo=r(EMt,"nystromformer"),EMt.forEach(t),KWo=r(XPe," \u2014 "),cz=n(XPe,"A",{href:!0});var CMt=s(cz);ZWo=r(CMt,"NystromformerForMultipleChoice"),CMt.forEach(t),eHo=r(XPe," (Nystr\xF6mformer model)"),XPe.forEach(t),oHo=i(ee),mF=n(ee,"LI",{});var zPe=s(mF);vue=n(zPe,"STRONG",{});var wMt=s(vue);rHo=r(wMt,"qdqbert"),wMt.forEach(t),tHo=r(zPe," \u2014 "),fz=n(zPe,"A",{href:!0});var AMt=s(fz);aHo=r(AMt,"QDQBertForMultipleChoice"),AMt.forEach(t),nHo=r(zPe," (QDQBert model)"),zPe.forEach(t),sHo=i(ee),gF=n(ee,"LI",{});var QPe=s(gF);Fue=n(QPe,"STRONG",{});var LMt=s(Fue);lHo=r(LMt,"rembert"),LMt.forEach(t),iHo=r(QPe," \u2014 "),mz=n(QPe,"A",{href:!0});var yMt=s(mz);dHo=r(yMt,"RemBertForMultipleChoice"),yMt.forEach(t),cHo=r(QPe," (RemBERT model)"),QPe.forEach(t),fHo=i(ee),hF=n(ee,"LI",{});var WPe=s(hF);Tue=n(WPe,"STRONG",{});var xMt=s(Tue);mHo=r(xMt,"roberta"),xMt.forEach(t),gHo=r(WPe," \u2014 "),gz=n(WPe,"A",{href:!0});var $Mt=s(gz);hHo=r($Mt,"RobertaForMultipleChoice"),$Mt.forEach(t),pHo=r(WPe," (RoBERTa model)"),WPe.forEach(t),_Ho=i(ee),pF=n(ee,"LI",{});var HPe=s(pF);Mue=n(HPe,"STRONG",{});var kMt=s(Mue);uHo=r(kMt,"roformer"),kMt.forEach(t),bHo=r(HPe," \u2014 "),hz=n(HPe,"A",{href:!0});var SMt=s(hz);vHo=r(SMt,"RoFormerForMultipleChoice"),SMt.forEach(t),FHo=r(HPe," (RoFormer model)"),HPe.forEach(t),THo=i(ee),_F=n(ee,"LI",{});var UPe=s(_F);Eue=n(UPe,"STRONG",{});var RMt=s(Eue);MHo=r(RMt,"squeezebert"),RMt.forEach(t),EHo=r(UPe," \u2014 "),pz=n(UPe,"A",{href:!0});var PMt=s(pz);CHo=r(PMt,"SqueezeBertForMultipleChoice"),PMt.forEach(t),wHo=r(UPe," (SqueezeBERT model)"),UPe.forEach(t),AHo=i(ee),uF=n(ee,"LI",{});var JPe=s(uF);Cue=n(JPe,"STRONG",{});var BMt=s(Cue);LHo=r(BMt,"xlm"),BMt.forEach(t),yHo=r(JPe," \u2014 "),_z=n(JPe,"A",{href:!0});var IMt=s(_z);xHo=r(IMt,"XLMForMultipleChoice"),IMt.forEach(t),$Ho=r(JPe," (XLM model)"),JPe.forEach(t),kHo=i(ee),bF=n(ee,"LI",{});var YPe=s(bF);wue=n(YPe,"STRONG",{});var NMt=s(wue);SHo=r(NMt,"xlm-roberta"),NMt.forEach(t),RHo=r(YPe," \u2014 "),uz=n(YPe,"A",{href:!0});var qMt=s(uz);PHo=r(qMt,"XLMRobertaForMultipleChoice"),qMt.forEach(t),BHo=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),IHo=i(ee),vF=n(ee,"LI",{});var KPe=s(vF);Aue=n(KPe,"STRONG",{});var jMt=s(Aue);NHo=r(jMt,"xlm-roberta-xl"),jMt.forEach(t),qHo=r(KPe," \u2014 "),bz=n(KPe,"A",{href:!0});var DMt=s(bz);jHo=r(DMt,"XLMRobertaXLForMultipleChoice"),DMt.forEach(t),DHo=r(KPe," (XLM-RoBERTa-XL model)"),KPe.forEach(t),GHo=i(ee),FF=n(ee,"LI",{});var ZPe=s(FF);Lue=n(ZPe,"STRONG",{});var GMt=s(Lue);OHo=r(GMt,"xlnet"),GMt.forEach(t),VHo=r(ZPe," \u2014 "),vz=n(ZPe,"A",{href:!0});var OMt=s(vz);XHo=r(OMt,"XLNetForMultipleChoice"),OMt.forEach(t),zHo=r(ZPe," (XLNet model)"),ZPe.forEach(t),QHo=i(ee),TF=n(ee,"LI",{});var eBe=s(TF);yue=n(eBe,"STRONG",{});var VMt=s(yue);WHo=r(VMt,"yoso"),VMt.forEach(t),HHo=r(eBe," \u2014 "),Fz=n(eBe,"A",{href:!0});var XMt=s(Fz);UHo=r(XMt,"YosoForMultipleChoice"),XMt.forEach(t),JHo=r(eBe," (YOSO model)"),eBe.forEach(t),ee.forEach(t),YHo=i(ma),MF=n(ma,"P",{});var oBe=s(MF);KHo=r(oBe,"The model is set in evaluation mode by default using "),xue=n(oBe,"CODE",{});var zMt=s(xue);ZHo=r(zMt,"model.eval()"),zMt.forEach(t),eUo=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(oBe,"CODE",{});var QMt=s($ue);oUo=r(QMt,"model.train()"),QMt.forEach(t),oBe.forEach(t),rUo=i(ma),T(EF.$$.fragment,ma),ma.forEach(t),sl.forEach(t),vXe=i(f),ld=n(f,"H2",{class:!0});var wQe=s(ld);CF=n(wQe,"A",{id:!0,class:!0,href:!0});var WMt=s(CF);kue=n(WMt,"SPAN",{});var HMt=s(kue);T(cy.$$.fragment,HMt),HMt.forEach(t),WMt.forEach(t),tUo=i(wQe),Sue=n(wQe,"SPAN",{});var UMt=s(Sue);aUo=r(UMt,"AutoModelForNextSentencePrediction"),UMt.forEach(t),wQe.forEach(t),FXe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(fy.$$.fragment,ll),nUo=i(ll),id=n(ll,"P",{});var jre=s(id);sUo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tz=n(jre,"A",{href:!0});var JMt=s(Tz);lUo=r(JMt,"from_pretrained()"),JMt.forEach(t),iUo=r(jre," class method or the "),Mz=n(jre,"A",{href:!0});var YMt=s(Mz);dUo=r(YMt,"from_config()"),YMt.forEach(t),cUo=r(jre,` class
method.`),jre.forEach(t),fUo=i(ll),my=n(ll,"P",{});var AQe=s(my);mUo=r(AQe,"This class cannot be instantiated directly using "),Rue=n(AQe,"CODE",{});var KMt=s(Rue);gUo=r(KMt,"__init__()"),KMt.forEach(t),hUo=r(AQe," (throws an error)."),AQe.forEach(t),pUo=i(ll),ht=n(ll,"DIV",{class:!0});var Tw=s(ht);T(gy.$$.fragment,Tw),_Uo=i(Tw),Pue=n(Tw,"P",{});var ZMt=s(Pue);uUo=r(ZMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZMt.forEach(t),bUo=i(Tw),dd=n(Tw,"P",{});var Dre=s(dd);vUo=r(Dre,`Note:
Loading a model from its configuration file does `),Bue=n(Dre,"STRONG",{});var e4t=s(Bue);FUo=r(e4t,"not"),e4t.forEach(t),TUo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(Dre,"A",{href:!0});var o4t=s(Ez);MUo=r(o4t,"from_pretrained()"),o4t.forEach(t),EUo=r(Dre," to load the model weights."),Dre.forEach(t),CUo=i(Tw),T(wF.$$.fragment,Tw),Tw.forEach(t),wUo=i(ll),to=n(ll,"DIV",{class:!0});var ga=s(to);T(hy.$$.fragment,ga),AUo=i(ga),Iue=n(ga,"P",{});var r4t=s(Iue);LUo=r(r4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r4t.forEach(t),yUo=i(ga),Oa=n(ga,"P",{});var Mw=s(Oa);xUo=r(Mw,"The model class to instantiate is selected based on the "),Nue=n(Mw,"CODE",{});var t4t=s(Nue);$Uo=r(t4t,"model_type"),t4t.forEach(t),kUo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),que=n(Mw,"CODE",{});var a4t=s(que);SUo=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),RUo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(Mw,"CODE",{});var n4t=s(jue);PUo=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),BUo=r(Mw,":"),Mw.forEach(t),IUo=i(ga),No=n(ga,"UL",{});var ha=s(No);AF=n(ha,"LI",{});var rBe=s(AF);Due=n(rBe,"STRONG",{});var s4t=s(Due);NUo=r(s4t,"bert"),s4t.forEach(t),qUo=r(rBe," \u2014 "),Cz=n(rBe,"A",{href:!0});var l4t=s(Cz);jUo=r(l4t,"BertForNextSentencePrediction"),l4t.forEach(t),DUo=r(rBe," (BERT model)"),rBe.forEach(t),GUo=i(ha),LF=n(ha,"LI",{});var tBe=s(LF);Gue=n(tBe,"STRONG",{});var i4t=s(Gue);OUo=r(i4t,"fnet"),i4t.forEach(t),VUo=r(tBe," \u2014 "),wz=n(tBe,"A",{href:!0});var d4t=s(wz);XUo=r(d4t,"FNetForNextSentencePrediction"),d4t.forEach(t),zUo=r(tBe," (FNet model)"),tBe.forEach(t),QUo=i(ha),yF=n(ha,"LI",{});var aBe=s(yF);Oue=n(aBe,"STRONG",{});var c4t=s(Oue);WUo=r(c4t,"megatron-bert"),c4t.forEach(t),HUo=r(aBe," \u2014 "),Az=n(aBe,"A",{href:!0});var f4t=s(Az);UUo=r(f4t,"MegatronBertForNextSentencePrediction"),f4t.forEach(t),JUo=r(aBe," (Megatron-BERT model)"),aBe.forEach(t),YUo=i(ha),xF=n(ha,"LI",{});var nBe=s(xF);Vue=n(nBe,"STRONG",{});var m4t=s(Vue);KUo=r(m4t,"mobilebert"),m4t.forEach(t),ZUo=r(nBe," \u2014 "),Lz=n(nBe,"A",{href:!0});var g4t=s(Lz);eJo=r(g4t,"MobileBertForNextSentencePrediction"),g4t.forEach(t),oJo=r(nBe," (MobileBERT model)"),nBe.forEach(t),rJo=i(ha),$F=n(ha,"LI",{});var sBe=s($F);Xue=n(sBe,"STRONG",{});var h4t=s(Xue);tJo=r(h4t,"nezha"),h4t.forEach(t),aJo=r(sBe," \u2014 "),yz=n(sBe,"A",{href:!0});var p4t=s(yz);nJo=r(p4t,"NezhaForNextSentencePrediction"),p4t.forEach(t),sJo=r(sBe," (Nezha model)"),sBe.forEach(t),lJo=i(ha),kF=n(ha,"LI",{});var lBe=s(kF);zue=n(lBe,"STRONG",{});var _4t=s(zue);iJo=r(_4t,"qdqbert"),_4t.forEach(t),dJo=r(lBe," \u2014 "),xz=n(lBe,"A",{href:!0});var u4t=s(xz);cJo=r(u4t,"QDQBertForNextSentencePrediction"),u4t.forEach(t),fJo=r(lBe," (QDQBert model)"),lBe.forEach(t),ha.forEach(t),mJo=i(ga),SF=n(ga,"P",{});var iBe=s(SF);gJo=r(iBe,"The model is set in evaluation mode by default using "),Que=n(iBe,"CODE",{});var b4t=s(Que);hJo=r(b4t,"model.eval()"),b4t.forEach(t),pJo=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(iBe,"CODE",{});var v4t=s(Wue);_Jo=r(v4t,"model.train()"),v4t.forEach(t),iBe.forEach(t),uJo=i(ga),T(RF.$$.fragment,ga),ga.forEach(t),ll.forEach(t),TXe=i(f),cd=n(f,"H2",{class:!0});var LQe=s(cd);PF=n(LQe,"A",{id:!0,class:!0,href:!0});var F4t=s(PF);Hue=n(F4t,"SPAN",{});var T4t=s(Hue);T(py.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),bJo=i(LQe),Uue=n(LQe,"SPAN",{});var M4t=s(Uue);vJo=r(M4t,"AutoModelForTokenClassification"),M4t.forEach(t),LQe.forEach(t),MXe=i(f),qo=n(f,"DIV",{class:!0});var il=s(qo);T(_y.$$.fragment,il),FJo=i(il),fd=n(il,"P",{});var Gre=s(fd);TJo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=n(Gre,"A",{href:!0});var E4t=s($z);MJo=r(E4t,"from_pretrained()"),E4t.forEach(t),EJo=r(Gre," class method or the "),kz=n(Gre,"A",{href:!0});var C4t=s(kz);CJo=r(C4t,"from_config()"),C4t.forEach(t),wJo=r(Gre,` class
method.`),Gre.forEach(t),AJo=i(il),uy=n(il,"P",{});var yQe=s(uy);LJo=r(yQe,"This class cannot be instantiated directly using "),Jue=n(yQe,"CODE",{});var w4t=s(Jue);yJo=r(w4t,"__init__()"),w4t.forEach(t),xJo=r(yQe," (throws an error)."),yQe.forEach(t),$Jo=i(il),pt=n(il,"DIV",{class:!0});var Ew=s(pt);T(by.$$.fragment,Ew),kJo=i(Ew),Yue=n(Ew,"P",{});var A4t=s(Yue);SJo=r(A4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A4t.forEach(t),RJo=i(Ew),md=n(Ew,"P",{});var Ore=s(md);PJo=r(Ore,`Note:
Loading a model from its configuration file does `),Kue=n(Ore,"STRONG",{});var L4t=s(Kue);BJo=r(L4t,"not"),L4t.forEach(t),IJo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(Ore,"A",{href:!0});var y4t=s(Sz);NJo=r(y4t,"from_pretrained()"),y4t.forEach(t),qJo=r(Ore," to load the model weights."),Ore.forEach(t),jJo=i(Ew),T(BF.$$.fragment,Ew),Ew.forEach(t),DJo=i(il),ao=n(il,"DIV",{class:!0});var pa=s(ao);T(vy.$$.fragment,pa),GJo=i(pa),Zue=n(pa,"P",{});var x4t=s(Zue);OJo=r(x4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x4t.forEach(t),VJo=i(pa),Va=n(pa,"P",{});var Cw=s(Va);XJo=r(Cw,"The model class to instantiate is selected based on the "),e2e=n(Cw,"CODE",{});var $4t=s(e2e);zJo=r($4t,"model_type"),$4t.forEach(t),QJo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),o2e=n(Cw,"CODE",{});var k4t=s(o2e);WJo=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),HJo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(Cw,"CODE",{});var S4t=s(r2e);UJo=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),JJo=r(Cw,":"),Cw.forEach(t),YJo=i(pa),U=n(pa,"UL",{});var J=s(U);IF=n(J,"LI",{});var dBe=s(IF);t2e=n(dBe,"STRONG",{});var R4t=s(t2e);KJo=r(R4t,"albert"),R4t.forEach(t),ZJo=r(dBe," \u2014 "),Rz=n(dBe,"A",{href:!0});var P4t=s(Rz);eYo=r(P4t,"AlbertForTokenClassification"),P4t.forEach(t),oYo=r(dBe," (ALBERT model)"),dBe.forEach(t),rYo=i(J),NF=n(J,"LI",{});var cBe=s(NF);a2e=n(cBe,"STRONG",{});var B4t=s(a2e);tYo=r(B4t,"bert"),B4t.forEach(t),aYo=r(cBe," \u2014 "),Pz=n(cBe,"A",{href:!0});var I4t=s(Pz);nYo=r(I4t,"BertForTokenClassification"),I4t.forEach(t),sYo=r(cBe," (BERT model)"),cBe.forEach(t),lYo=i(J),qF=n(J,"LI",{});var fBe=s(qF);n2e=n(fBe,"STRONG",{});var N4t=s(n2e);iYo=r(N4t,"big_bird"),N4t.forEach(t),dYo=r(fBe," \u2014 "),Bz=n(fBe,"A",{href:!0});var q4t=s(Bz);cYo=r(q4t,"BigBirdForTokenClassification"),q4t.forEach(t),fYo=r(fBe," (BigBird model)"),fBe.forEach(t),mYo=i(J),jF=n(J,"LI",{});var mBe=s(jF);s2e=n(mBe,"STRONG",{});var j4t=s(s2e);gYo=r(j4t,"bloom"),j4t.forEach(t),hYo=r(mBe," \u2014 "),Iz=n(mBe,"A",{href:!0});var D4t=s(Iz);pYo=r(D4t,"BloomForTokenClassification"),D4t.forEach(t),_Yo=r(mBe," (BLOOM model)"),mBe.forEach(t),uYo=i(J),DF=n(J,"LI",{});var gBe=s(DF);l2e=n(gBe,"STRONG",{});var G4t=s(l2e);bYo=r(G4t,"camembert"),G4t.forEach(t),vYo=r(gBe," \u2014 "),Nz=n(gBe,"A",{href:!0});var O4t=s(Nz);FYo=r(O4t,"CamembertForTokenClassification"),O4t.forEach(t),TYo=r(gBe," (CamemBERT model)"),gBe.forEach(t),MYo=i(J),GF=n(J,"LI",{});var hBe=s(GF);i2e=n(hBe,"STRONG",{});var V4t=s(i2e);EYo=r(V4t,"canine"),V4t.forEach(t),CYo=r(hBe," \u2014 "),qz=n(hBe,"A",{href:!0});var X4t=s(qz);wYo=r(X4t,"CanineForTokenClassification"),X4t.forEach(t),AYo=r(hBe," (CANINE model)"),hBe.forEach(t),LYo=i(J),OF=n(J,"LI",{});var pBe=s(OF);d2e=n(pBe,"STRONG",{});var z4t=s(d2e);yYo=r(z4t,"convbert"),z4t.forEach(t),xYo=r(pBe," \u2014 "),jz=n(pBe,"A",{href:!0});var Q4t=s(jz);$Yo=r(Q4t,"ConvBertForTokenClassification"),Q4t.forEach(t),kYo=r(pBe," (ConvBERT model)"),pBe.forEach(t),SYo=i(J),VF=n(J,"LI",{});var _Be=s(VF);c2e=n(_Be,"STRONG",{});var W4t=s(c2e);RYo=r(W4t,"data2vec-text"),W4t.forEach(t),PYo=r(_Be," \u2014 "),Dz=n(_Be,"A",{href:!0});var H4t=s(Dz);BYo=r(H4t,"Data2VecTextForTokenClassification"),H4t.forEach(t),IYo=r(_Be," (Data2VecText model)"),_Be.forEach(t),NYo=i(J),XF=n(J,"LI",{});var uBe=s(XF);f2e=n(uBe,"STRONG",{});var U4t=s(f2e);qYo=r(U4t,"deberta"),U4t.forEach(t),jYo=r(uBe," \u2014 "),Gz=n(uBe,"A",{href:!0});var J4t=s(Gz);DYo=r(J4t,"DebertaForTokenClassification"),J4t.forEach(t),GYo=r(uBe," (DeBERTa model)"),uBe.forEach(t),OYo=i(J),zF=n(J,"LI",{});var bBe=s(zF);m2e=n(bBe,"STRONG",{});var Y4t=s(m2e);VYo=r(Y4t,"deberta-v2"),Y4t.forEach(t),XYo=r(bBe," \u2014 "),Oz=n(bBe,"A",{href:!0});var K4t=s(Oz);zYo=r(K4t,"DebertaV2ForTokenClassification"),K4t.forEach(t),QYo=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),WYo=i(J),QF=n(J,"LI",{});var vBe=s(QF);g2e=n(vBe,"STRONG",{});var Z4t=s(g2e);HYo=r(Z4t,"distilbert"),Z4t.forEach(t),UYo=r(vBe," \u2014 "),Vz=n(vBe,"A",{href:!0});var eEt=s(Vz);JYo=r(eEt,"DistilBertForTokenClassification"),eEt.forEach(t),YYo=r(vBe," (DistilBERT model)"),vBe.forEach(t),KYo=i(J),WF=n(J,"LI",{});var FBe=s(WF);h2e=n(FBe,"STRONG",{});var oEt=s(h2e);ZYo=r(oEt,"electra"),oEt.forEach(t),eKo=r(FBe," \u2014 "),Xz=n(FBe,"A",{href:!0});var rEt=s(Xz);oKo=r(rEt,"ElectraForTokenClassification"),rEt.forEach(t),rKo=r(FBe," (ELECTRA model)"),FBe.forEach(t),tKo=i(J),HF=n(J,"LI",{});var TBe=s(HF);p2e=n(TBe,"STRONG",{});var tEt=s(p2e);aKo=r(tEt,"flaubert"),tEt.forEach(t),nKo=r(TBe," \u2014 "),zz=n(TBe,"A",{href:!0});var aEt=s(zz);sKo=r(aEt,"FlaubertForTokenClassification"),aEt.forEach(t),lKo=r(TBe," (FlauBERT model)"),TBe.forEach(t),iKo=i(J),UF=n(J,"LI",{});var MBe=s(UF);_2e=n(MBe,"STRONG",{});var nEt=s(_2e);dKo=r(nEt,"fnet"),nEt.forEach(t),cKo=r(MBe," \u2014 "),Qz=n(MBe,"A",{href:!0});var sEt=s(Qz);fKo=r(sEt,"FNetForTokenClassification"),sEt.forEach(t),mKo=r(MBe," (FNet model)"),MBe.forEach(t),gKo=i(J),JF=n(J,"LI",{});var EBe=s(JF);u2e=n(EBe,"STRONG",{});var lEt=s(u2e);hKo=r(lEt,"funnel"),lEt.forEach(t),pKo=r(EBe," \u2014 "),Wz=n(EBe,"A",{href:!0});var iEt=s(Wz);_Ko=r(iEt,"FunnelForTokenClassification"),iEt.forEach(t),uKo=r(EBe," (Funnel Transformer model)"),EBe.forEach(t),bKo=i(J),YF=n(J,"LI",{});var CBe=s(YF);b2e=n(CBe,"STRONG",{});var dEt=s(b2e);vKo=r(dEt,"gpt2"),dEt.forEach(t),FKo=r(CBe," \u2014 "),Hz=n(CBe,"A",{href:!0});var cEt=s(Hz);TKo=r(cEt,"GPT2ForTokenClassification"),cEt.forEach(t),MKo=r(CBe," (OpenAI GPT-2 model)"),CBe.forEach(t),EKo=i(J),KF=n(J,"LI",{});var wBe=s(KF);v2e=n(wBe,"STRONG",{});var fEt=s(v2e);CKo=r(fEt,"ibert"),fEt.forEach(t),wKo=r(wBe," \u2014 "),Uz=n(wBe,"A",{href:!0});var mEt=s(Uz);AKo=r(mEt,"IBertForTokenClassification"),mEt.forEach(t),LKo=r(wBe," (I-BERT model)"),wBe.forEach(t),yKo=i(J),ZF=n(J,"LI",{});var ABe=s(ZF);F2e=n(ABe,"STRONG",{});var gEt=s(F2e);xKo=r(gEt,"layoutlm"),gEt.forEach(t),$Ko=r(ABe," \u2014 "),Jz=n(ABe,"A",{href:!0});var hEt=s(Jz);kKo=r(hEt,"LayoutLMForTokenClassification"),hEt.forEach(t),SKo=r(ABe," (LayoutLM model)"),ABe.forEach(t),RKo=i(J),e6=n(J,"LI",{});var LBe=s(e6);T2e=n(LBe,"STRONG",{});var pEt=s(T2e);PKo=r(pEt,"layoutlmv2"),pEt.forEach(t),BKo=r(LBe," \u2014 "),Yz=n(LBe,"A",{href:!0});var _Et=s(Yz);IKo=r(_Et,"LayoutLMv2ForTokenClassification"),_Et.forEach(t),NKo=r(LBe," (LayoutLMv2 model)"),LBe.forEach(t),qKo=i(J),o6=n(J,"LI",{});var yBe=s(o6);M2e=n(yBe,"STRONG",{});var uEt=s(M2e);jKo=r(uEt,"layoutlmv3"),uEt.forEach(t),DKo=r(yBe," \u2014 "),Kz=n(yBe,"A",{href:!0});var bEt=s(Kz);GKo=r(bEt,"LayoutLMv3ForTokenClassification"),bEt.forEach(t),OKo=r(yBe," (LayoutLMv3 model)"),yBe.forEach(t),VKo=i(J),r6=n(J,"LI",{});var xBe=s(r6);E2e=n(xBe,"STRONG",{});var vEt=s(E2e);XKo=r(vEt,"longformer"),vEt.forEach(t),zKo=r(xBe," \u2014 "),Zz=n(xBe,"A",{href:!0});var FEt=s(Zz);QKo=r(FEt,"LongformerForTokenClassification"),FEt.forEach(t),WKo=r(xBe," (Longformer model)"),xBe.forEach(t),HKo=i(J),t6=n(J,"LI",{});var $Be=s(t6);C2e=n($Be,"STRONG",{});var TEt=s(C2e);UKo=r(TEt,"megatron-bert"),TEt.forEach(t),JKo=r($Be," \u2014 "),eQ=n($Be,"A",{href:!0});var MEt=s(eQ);YKo=r(MEt,"MegatronBertForTokenClassification"),MEt.forEach(t),KKo=r($Be," (Megatron-BERT model)"),$Be.forEach(t),ZKo=i(J),a6=n(J,"LI",{});var kBe=s(a6);w2e=n(kBe,"STRONG",{});var EEt=s(w2e);eZo=r(EEt,"mobilebert"),EEt.forEach(t),oZo=r(kBe," \u2014 "),oQ=n(kBe,"A",{href:!0});var CEt=s(oQ);rZo=r(CEt,"MobileBertForTokenClassification"),CEt.forEach(t),tZo=r(kBe," (MobileBERT model)"),kBe.forEach(t),aZo=i(J),n6=n(J,"LI",{});var SBe=s(n6);A2e=n(SBe,"STRONG",{});var wEt=s(A2e);nZo=r(wEt,"mpnet"),wEt.forEach(t),sZo=r(SBe," \u2014 "),rQ=n(SBe,"A",{href:!0});var AEt=s(rQ);lZo=r(AEt,"MPNetForTokenClassification"),AEt.forEach(t),iZo=r(SBe," (MPNet model)"),SBe.forEach(t),dZo=i(J),s6=n(J,"LI",{});var RBe=s(s6);L2e=n(RBe,"STRONG",{});var LEt=s(L2e);cZo=r(LEt,"nezha"),LEt.forEach(t),fZo=r(RBe," \u2014 "),tQ=n(RBe,"A",{href:!0});var yEt=s(tQ);mZo=r(yEt,"NezhaForTokenClassification"),yEt.forEach(t),gZo=r(RBe," (Nezha model)"),RBe.forEach(t),hZo=i(J),l6=n(J,"LI",{});var PBe=s(l6);y2e=n(PBe,"STRONG",{});var xEt=s(y2e);pZo=r(xEt,"nystromformer"),xEt.forEach(t),_Zo=r(PBe," \u2014 "),aQ=n(PBe,"A",{href:!0});var $Et=s(aQ);uZo=r($Et,"NystromformerForTokenClassification"),$Et.forEach(t),bZo=r(PBe," (Nystr\xF6mformer model)"),PBe.forEach(t),vZo=i(J),i6=n(J,"LI",{});var BBe=s(i6);x2e=n(BBe,"STRONG",{});var kEt=s(x2e);FZo=r(kEt,"qdqbert"),kEt.forEach(t),TZo=r(BBe," \u2014 "),nQ=n(BBe,"A",{href:!0});var SEt=s(nQ);MZo=r(SEt,"QDQBertForTokenClassification"),SEt.forEach(t),EZo=r(BBe," (QDQBert model)"),BBe.forEach(t),CZo=i(J),d6=n(J,"LI",{});var IBe=s(d6);$2e=n(IBe,"STRONG",{});var REt=s($2e);wZo=r(REt,"rembert"),REt.forEach(t),AZo=r(IBe," \u2014 "),sQ=n(IBe,"A",{href:!0});var PEt=s(sQ);LZo=r(PEt,"RemBertForTokenClassification"),PEt.forEach(t),yZo=r(IBe," (RemBERT model)"),IBe.forEach(t),xZo=i(J),c6=n(J,"LI",{});var NBe=s(c6);k2e=n(NBe,"STRONG",{});var BEt=s(k2e);$Zo=r(BEt,"roberta"),BEt.forEach(t),kZo=r(NBe," \u2014 "),lQ=n(NBe,"A",{href:!0});var IEt=s(lQ);SZo=r(IEt,"RobertaForTokenClassification"),IEt.forEach(t),RZo=r(NBe," (RoBERTa model)"),NBe.forEach(t),PZo=i(J),f6=n(J,"LI",{});var qBe=s(f6);S2e=n(qBe,"STRONG",{});var NEt=s(S2e);BZo=r(NEt,"roformer"),NEt.forEach(t),IZo=r(qBe," \u2014 "),iQ=n(qBe,"A",{href:!0});var qEt=s(iQ);NZo=r(qEt,"RoFormerForTokenClassification"),qEt.forEach(t),qZo=r(qBe," (RoFormer model)"),qBe.forEach(t),jZo=i(J),m6=n(J,"LI",{});var jBe=s(m6);R2e=n(jBe,"STRONG",{});var jEt=s(R2e);DZo=r(jEt,"squeezebert"),jEt.forEach(t),GZo=r(jBe," \u2014 "),dQ=n(jBe,"A",{href:!0});var DEt=s(dQ);OZo=r(DEt,"SqueezeBertForTokenClassification"),DEt.forEach(t),VZo=r(jBe," (SqueezeBERT model)"),jBe.forEach(t),XZo=i(J),g6=n(J,"LI",{});var DBe=s(g6);P2e=n(DBe,"STRONG",{});var GEt=s(P2e);zZo=r(GEt,"xlm"),GEt.forEach(t),QZo=r(DBe," \u2014 "),cQ=n(DBe,"A",{href:!0});var OEt=s(cQ);WZo=r(OEt,"XLMForTokenClassification"),OEt.forEach(t),HZo=r(DBe," (XLM model)"),DBe.forEach(t),UZo=i(J),h6=n(J,"LI",{});var GBe=s(h6);B2e=n(GBe,"STRONG",{});var VEt=s(B2e);JZo=r(VEt,"xlm-roberta"),VEt.forEach(t),YZo=r(GBe," \u2014 "),fQ=n(GBe,"A",{href:!0});var XEt=s(fQ);KZo=r(XEt,"XLMRobertaForTokenClassification"),XEt.forEach(t),ZZo=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),eer=i(J),p6=n(J,"LI",{});var OBe=s(p6);I2e=n(OBe,"STRONG",{});var zEt=s(I2e);oer=r(zEt,"xlm-roberta-xl"),zEt.forEach(t),rer=r(OBe," \u2014 "),mQ=n(OBe,"A",{href:!0});var QEt=s(mQ);ter=r(QEt,"XLMRobertaXLForTokenClassification"),QEt.forEach(t),aer=r(OBe," (XLM-RoBERTa-XL model)"),OBe.forEach(t),ner=i(J),_6=n(J,"LI",{});var VBe=s(_6);N2e=n(VBe,"STRONG",{});var WEt=s(N2e);ser=r(WEt,"xlnet"),WEt.forEach(t),ler=r(VBe," \u2014 "),gQ=n(VBe,"A",{href:!0});var HEt=s(gQ);ier=r(HEt,"XLNetForTokenClassification"),HEt.forEach(t),der=r(VBe," (XLNet model)"),VBe.forEach(t),cer=i(J),u6=n(J,"LI",{});var XBe=s(u6);q2e=n(XBe,"STRONG",{});var UEt=s(q2e);fer=r(UEt,"yoso"),UEt.forEach(t),mer=r(XBe," \u2014 "),hQ=n(XBe,"A",{href:!0});var JEt=s(hQ);ger=r(JEt,"YosoForTokenClassification"),JEt.forEach(t),her=r(XBe," (YOSO model)"),XBe.forEach(t),J.forEach(t),per=i(pa),b6=n(pa,"P",{});var zBe=s(b6);_er=r(zBe,"The model is set in evaluation mode by default using "),j2e=n(zBe,"CODE",{});var YEt=s(j2e);uer=r(YEt,"model.eval()"),YEt.forEach(t),ber=r(zBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D2e=n(zBe,"CODE",{});var KEt=s(D2e);ver=r(KEt,"model.train()"),KEt.forEach(t),zBe.forEach(t),Fer=i(pa),T(v6.$$.fragment,pa),pa.forEach(t),il.forEach(t),EXe=i(f),gd=n(f,"H2",{class:!0});var xQe=s(gd);F6=n(xQe,"A",{id:!0,class:!0,href:!0});var ZEt=s(F6);G2e=n(ZEt,"SPAN",{});var eCt=s(G2e);T(Fy.$$.fragment,eCt),eCt.forEach(t),ZEt.forEach(t),Ter=i(xQe),O2e=n(xQe,"SPAN",{});var oCt=s(O2e);Mer=r(oCt,"AutoModelForQuestionAnswering"),oCt.forEach(t),xQe.forEach(t),CXe=i(f),jo=n(f,"DIV",{class:!0});var dl=s(jo);T(Ty.$$.fragment,dl),Eer=i(dl),hd=n(dl,"P",{});var Vre=s(hd);Cer=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=n(Vre,"A",{href:!0});var rCt=s(pQ);wer=r(rCt,"from_pretrained()"),rCt.forEach(t),Aer=r(Vre," class method or the "),_Q=n(Vre,"A",{href:!0});var tCt=s(_Q);Ler=r(tCt,"from_config()"),tCt.forEach(t),yer=r(Vre,` class
method.`),Vre.forEach(t),xer=i(dl),My=n(dl,"P",{});var $Qe=s(My);$er=r($Qe,"This class cannot be instantiated directly using "),V2e=n($Qe,"CODE",{});var aCt=s(V2e);ker=r(aCt,"__init__()"),aCt.forEach(t),Ser=r($Qe," (throws an error)."),$Qe.forEach(t),Rer=i(dl),_t=n(dl,"DIV",{class:!0});var ww=s(_t);T(Ey.$$.fragment,ww),Per=i(ww),X2e=n(ww,"P",{});var nCt=s(X2e);Ber=r(nCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nCt.forEach(t),Ier=i(ww),pd=n(ww,"P",{});var Xre=s(pd);Ner=r(Xre,`Note:
Loading a model from its configuration file does `),z2e=n(Xre,"STRONG",{});var sCt=s(z2e);qer=r(sCt,"not"),sCt.forEach(t),jer=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(Xre,"A",{href:!0});var lCt=s(uQ);Der=r(lCt,"from_pretrained()"),lCt.forEach(t),Ger=r(Xre," to load the model weights."),Xre.forEach(t),Oer=i(ww),T(T6.$$.fragment,ww),ww.forEach(t),Ver=i(dl),no=n(dl,"DIV",{class:!0});var _a=s(no);T(Cy.$$.fragment,_a),Xer=i(_a),Q2e=n(_a,"P",{});var iCt=s(Q2e);zer=r(iCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iCt.forEach(t),Qer=i(_a),Xa=n(_a,"P",{});var Aw=s(Xa);Wer=r(Aw,"The model class to instantiate is selected based on the "),W2e=n(Aw,"CODE",{});var dCt=s(W2e);Her=r(dCt,"model_type"),dCt.forEach(t),Uer=r(Aw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(Aw,"CODE",{});var cCt=s(H2e);Jer=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),Yer=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(Aw,"CODE",{});var fCt=s(U2e);Ker=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),Zer=r(Aw,":"),Aw.forEach(t),eor=i(_a),V=n(_a,"UL",{});var X=s(V);M6=n(X,"LI",{});var QBe=s(M6);J2e=n(QBe,"STRONG",{});var mCt=s(J2e);oor=r(mCt,"albert"),mCt.forEach(t),ror=r(QBe," \u2014 "),bQ=n(QBe,"A",{href:!0});var gCt=s(bQ);tor=r(gCt,"AlbertForQuestionAnswering"),gCt.forEach(t),aor=r(QBe," (ALBERT model)"),QBe.forEach(t),nor=i(X),E6=n(X,"LI",{});var WBe=s(E6);Y2e=n(WBe,"STRONG",{});var hCt=s(Y2e);sor=r(hCt,"bart"),hCt.forEach(t),lor=r(WBe," \u2014 "),vQ=n(WBe,"A",{href:!0});var pCt=s(vQ);ior=r(pCt,"BartForQuestionAnswering"),pCt.forEach(t),dor=r(WBe," (BART model)"),WBe.forEach(t),cor=i(X),C6=n(X,"LI",{});var HBe=s(C6);K2e=n(HBe,"STRONG",{});var _Ct=s(K2e);mor=r(_Ct,"bert"),_Ct.forEach(t),gor=r(HBe," \u2014 "),FQ=n(HBe,"A",{href:!0});var uCt=s(FQ);hor=r(uCt,"BertForQuestionAnswering"),uCt.forEach(t),por=r(HBe," (BERT model)"),HBe.forEach(t),_or=i(X),w6=n(X,"LI",{});var UBe=s(w6);Z2e=n(UBe,"STRONG",{});var bCt=s(Z2e);uor=r(bCt,"big_bird"),bCt.forEach(t),bor=r(UBe," \u2014 "),TQ=n(UBe,"A",{href:!0});var vCt=s(TQ);vor=r(vCt,"BigBirdForQuestionAnswering"),vCt.forEach(t),For=r(UBe," (BigBird model)"),UBe.forEach(t),Tor=i(X),A6=n(X,"LI",{});var JBe=s(A6);e1e=n(JBe,"STRONG",{});var FCt=s(e1e);Mor=r(FCt,"bigbird_pegasus"),FCt.forEach(t),Eor=r(JBe," \u2014 "),MQ=n(JBe,"A",{href:!0});var TCt=s(MQ);Cor=r(TCt,"BigBirdPegasusForQuestionAnswering"),TCt.forEach(t),wor=r(JBe," (BigBird-Pegasus model)"),JBe.forEach(t),Aor=i(X),L6=n(X,"LI",{});var YBe=s(L6);o1e=n(YBe,"STRONG",{});var MCt=s(o1e);Lor=r(MCt,"camembert"),MCt.forEach(t),yor=r(YBe," \u2014 "),EQ=n(YBe,"A",{href:!0});var ECt=s(EQ);xor=r(ECt,"CamembertForQuestionAnswering"),ECt.forEach(t),$or=r(YBe," (CamemBERT model)"),YBe.forEach(t),kor=i(X),y6=n(X,"LI",{});var KBe=s(y6);r1e=n(KBe,"STRONG",{});var CCt=s(r1e);Sor=r(CCt,"canine"),CCt.forEach(t),Ror=r(KBe," \u2014 "),CQ=n(KBe,"A",{href:!0});var wCt=s(CQ);Por=r(wCt,"CanineForQuestionAnswering"),wCt.forEach(t),Bor=r(KBe," (CANINE model)"),KBe.forEach(t),Ior=i(X),x6=n(X,"LI",{});var ZBe=s(x6);t1e=n(ZBe,"STRONG",{});var ACt=s(t1e);Nor=r(ACt,"convbert"),ACt.forEach(t),qor=r(ZBe," \u2014 "),wQ=n(ZBe,"A",{href:!0});var LCt=s(wQ);jor=r(LCt,"ConvBertForQuestionAnswering"),LCt.forEach(t),Dor=r(ZBe," (ConvBERT model)"),ZBe.forEach(t),Gor=i(X),$6=n(X,"LI",{});var eIe=s($6);a1e=n(eIe,"STRONG",{});var yCt=s(a1e);Oor=r(yCt,"data2vec-text"),yCt.forEach(t),Vor=r(eIe," \u2014 "),AQ=n(eIe,"A",{href:!0});var xCt=s(AQ);Xor=r(xCt,"Data2VecTextForQuestionAnswering"),xCt.forEach(t),zor=r(eIe," (Data2VecText model)"),eIe.forEach(t),Qor=i(X),k6=n(X,"LI",{});var oIe=s(k6);n1e=n(oIe,"STRONG",{});var $Ct=s(n1e);Wor=r($Ct,"deberta"),$Ct.forEach(t),Hor=r(oIe," \u2014 "),LQ=n(oIe,"A",{href:!0});var kCt=s(LQ);Uor=r(kCt,"DebertaForQuestionAnswering"),kCt.forEach(t),Jor=r(oIe," (DeBERTa model)"),oIe.forEach(t),Yor=i(X),S6=n(X,"LI",{});var rIe=s(S6);s1e=n(rIe,"STRONG",{});var SCt=s(s1e);Kor=r(SCt,"deberta-v2"),SCt.forEach(t),Zor=r(rIe," \u2014 "),yQ=n(rIe,"A",{href:!0});var RCt=s(yQ);err=r(RCt,"DebertaV2ForQuestionAnswering"),RCt.forEach(t),orr=r(rIe," (DeBERTa-v2 model)"),rIe.forEach(t),rrr=i(X),R6=n(X,"LI",{});var tIe=s(R6);l1e=n(tIe,"STRONG",{});var PCt=s(l1e);trr=r(PCt,"distilbert"),PCt.forEach(t),arr=r(tIe," \u2014 "),xQ=n(tIe,"A",{href:!0});var BCt=s(xQ);nrr=r(BCt,"DistilBertForQuestionAnswering"),BCt.forEach(t),srr=r(tIe," (DistilBERT model)"),tIe.forEach(t),lrr=i(X),P6=n(X,"LI",{});var aIe=s(P6);i1e=n(aIe,"STRONG",{});var ICt=s(i1e);irr=r(ICt,"electra"),ICt.forEach(t),drr=r(aIe," \u2014 "),$Q=n(aIe,"A",{href:!0});var NCt=s($Q);crr=r(NCt,"ElectraForQuestionAnswering"),NCt.forEach(t),frr=r(aIe," (ELECTRA model)"),aIe.forEach(t),mrr=i(X),B6=n(X,"LI",{});var nIe=s(B6);d1e=n(nIe,"STRONG",{});var qCt=s(d1e);grr=r(qCt,"flaubert"),qCt.forEach(t),hrr=r(nIe," \u2014 "),kQ=n(nIe,"A",{href:!0});var jCt=s(kQ);prr=r(jCt,"FlaubertForQuestionAnsweringSimple"),jCt.forEach(t),_rr=r(nIe," (FlauBERT model)"),nIe.forEach(t),urr=i(X),I6=n(X,"LI",{});var sIe=s(I6);c1e=n(sIe,"STRONG",{});var DCt=s(c1e);brr=r(DCt,"fnet"),DCt.forEach(t),vrr=r(sIe," \u2014 "),SQ=n(sIe,"A",{href:!0});var GCt=s(SQ);Frr=r(GCt,"FNetForQuestionAnswering"),GCt.forEach(t),Trr=r(sIe," (FNet model)"),sIe.forEach(t),Mrr=i(X),N6=n(X,"LI",{});var lIe=s(N6);f1e=n(lIe,"STRONG",{});var OCt=s(f1e);Err=r(OCt,"funnel"),OCt.forEach(t),Crr=r(lIe," \u2014 "),RQ=n(lIe,"A",{href:!0});var VCt=s(RQ);wrr=r(VCt,"FunnelForQuestionAnswering"),VCt.forEach(t),Arr=r(lIe," (Funnel Transformer model)"),lIe.forEach(t),Lrr=i(X),q6=n(X,"LI",{});var iIe=s(q6);m1e=n(iIe,"STRONG",{});var XCt=s(m1e);yrr=r(XCt,"gptj"),XCt.forEach(t),xrr=r(iIe," \u2014 "),PQ=n(iIe,"A",{href:!0});var zCt=s(PQ);$rr=r(zCt,"GPTJForQuestionAnswering"),zCt.forEach(t),krr=r(iIe," (GPT-J model)"),iIe.forEach(t),Srr=i(X),j6=n(X,"LI",{});var dIe=s(j6);g1e=n(dIe,"STRONG",{});var QCt=s(g1e);Rrr=r(QCt,"ibert"),QCt.forEach(t),Prr=r(dIe," \u2014 "),BQ=n(dIe,"A",{href:!0});var WCt=s(BQ);Brr=r(WCt,"IBertForQuestionAnswering"),WCt.forEach(t),Irr=r(dIe," (I-BERT model)"),dIe.forEach(t),Nrr=i(X),D6=n(X,"LI",{});var cIe=s(D6);h1e=n(cIe,"STRONG",{});var HCt=s(h1e);qrr=r(HCt,"layoutlmv2"),HCt.forEach(t),jrr=r(cIe," \u2014 "),IQ=n(cIe,"A",{href:!0});var UCt=s(IQ);Drr=r(UCt,"LayoutLMv2ForQuestionAnswering"),UCt.forEach(t),Grr=r(cIe," (LayoutLMv2 model)"),cIe.forEach(t),Orr=i(X),G6=n(X,"LI",{});var fIe=s(G6);p1e=n(fIe,"STRONG",{});var JCt=s(p1e);Vrr=r(JCt,"layoutlmv3"),JCt.forEach(t),Xrr=r(fIe," \u2014 "),NQ=n(fIe,"A",{href:!0});var YCt=s(NQ);zrr=r(YCt,"LayoutLMv3ForQuestionAnswering"),YCt.forEach(t),Qrr=r(fIe," (LayoutLMv3 model)"),fIe.forEach(t),Wrr=i(X),O6=n(X,"LI",{});var mIe=s(O6);_1e=n(mIe,"STRONG",{});var KCt=s(_1e);Hrr=r(KCt,"led"),KCt.forEach(t),Urr=r(mIe," \u2014 "),qQ=n(mIe,"A",{href:!0});var ZCt=s(qQ);Jrr=r(ZCt,"LEDForQuestionAnswering"),ZCt.forEach(t),Yrr=r(mIe," (LED model)"),mIe.forEach(t),Krr=i(X),V6=n(X,"LI",{});var gIe=s(V6);u1e=n(gIe,"STRONG",{});var e3t=s(u1e);Zrr=r(e3t,"longformer"),e3t.forEach(t),etr=r(gIe," \u2014 "),jQ=n(gIe,"A",{href:!0});var o3t=s(jQ);otr=r(o3t,"LongformerForQuestionAnswering"),o3t.forEach(t),rtr=r(gIe," (Longformer model)"),gIe.forEach(t),ttr=i(X),X6=n(X,"LI",{});var hIe=s(X6);b1e=n(hIe,"STRONG",{});var r3t=s(b1e);atr=r(r3t,"lxmert"),r3t.forEach(t),ntr=r(hIe," \u2014 "),DQ=n(hIe,"A",{href:!0});var t3t=s(DQ);str=r(t3t,"LxmertForQuestionAnswering"),t3t.forEach(t),ltr=r(hIe," (LXMERT model)"),hIe.forEach(t),itr=i(X),z6=n(X,"LI",{});var pIe=s(z6);v1e=n(pIe,"STRONG",{});var a3t=s(v1e);dtr=r(a3t,"mbart"),a3t.forEach(t),ctr=r(pIe," \u2014 "),GQ=n(pIe,"A",{href:!0});var n3t=s(GQ);ftr=r(n3t,"MBartForQuestionAnswering"),n3t.forEach(t),mtr=r(pIe," (mBART model)"),pIe.forEach(t),gtr=i(X),Q6=n(X,"LI",{});var _Ie=s(Q6);F1e=n(_Ie,"STRONG",{});var s3t=s(F1e);htr=r(s3t,"megatron-bert"),s3t.forEach(t),ptr=r(_Ie," \u2014 "),OQ=n(_Ie,"A",{href:!0});var l3t=s(OQ);_tr=r(l3t,"MegatronBertForQuestionAnswering"),l3t.forEach(t),utr=r(_Ie," (Megatron-BERT model)"),_Ie.forEach(t),btr=i(X),W6=n(X,"LI",{});var uIe=s(W6);T1e=n(uIe,"STRONG",{});var i3t=s(T1e);vtr=r(i3t,"mobilebert"),i3t.forEach(t),Ftr=r(uIe," \u2014 "),VQ=n(uIe,"A",{href:!0});var d3t=s(VQ);Ttr=r(d3t,"MobileBertForQuestionAnswering"),d3t.forEach(t),Mtr=r(uIe," (MobileBERT model)"),uIe.forEach(t),Etr=i(X),H6=n(X,"LI",{});var bIe=s(H6);M1e=n(bIe,"STRONG",{});var c3t=s(M1e);Ctr=r(c3t,"mpnet"),c3t.forEach(t),wtr=r(bIe," \u2014 "),XQ=n(bIe,"A",{href:!0});var f3t=s(XQ);Atr=r(f3t,"MPNetForQuestionAnswering"),f3t.forEach(t),Ltr=r(bIe," (MPNet model)"),bIe.forEach(t),ytr=i(X),U6=n(X,"LI",{});var vIe=s(U6);E1e=n(vIe,"STRONG",{});var m3t=s(E1e);xtr=r(m3t,"mvp"),m3t.forEach(t),$tr=r(vIe," \u2014 "),zQ=n(vIe,"A",{href:!0});var g3t=s(zQ);ktr=r(g3t,"MvpForQuestionAnswering"),g3t.forEach(t),Str=r(vIe," (MVP model)"),vIe.forEach(t),Rtr=i(X),J6=n(X,"LI",{});var FIe=s(J6);C1e=n(FIe,"STRONG",{});var h3t=s(C1e);Ptr=r(h3t,"nezha"),h3t.forEach(t),Btr=r(FIe," \u2014 "),QQ=n(FIe,"A",{href:!0});var p3t=s(QQ);Itr=r(p3t,"NezhaForQuestionAnswering"),p3t.forEach(t),Ntr=r(FIe," (Nezha model)"),FIe.forEach(t),qtr=i(X),Y6=n(X,"LI",{});var TIe=s(Y6);w1e=n(TIe,"STRONG",{});var _3t=s(w1e);jtr=r(_3t,"nystromformer"),_3t.forEach(t),Dtr=r(TIe," \u2014 "),WQ=n(TIe,"A",{href:!0});var u3t=s(WQ);Gtr=r(u3t,"NystromformerForQuestionAnswering"),u3t.forEach(t),Otr=r(TIe," (Nystr\xF6mformer model)"),TIe.forEach(t),Vtr=i(X),K6=n(X,"LI",{});var MIe=s(K6);A1e=n(MIe,"STRONG",{});var b3t=s(A1e);Xtr=r(b3t,"qdqbert"),b3t.forEach(t),ztr=r(MIe," \u2014 "),HQ=n(MIe,"A",{href:!0});var v3t=s(HQ);Qtr=r(v3t,"QDQBertForQuestionAnswering"),v3t.forEach(t),Wtr=r(MIe," (QDQBert model)"),MIe.forEach(t),Htr=i(X),Z6=n(X,"LI",{});var EIe=s(Z6);L1e=n(EIe,"STRONG",{});var F3t=s(L1e);Utr=r(F3t,"reformer"),F3t.forEach(t),Jtr=r(EIe," \u2014 "),UQ=n(EIe,"A",{href:!0});var T3t=s(UQ);Ytr=r(T3t,"ReformerForQuestionAnswering"),T3t.forEach(t),Ktr=r(EIe," (Reformer model)"),EIe.forEach(t),Ztr=i(X),eT=n(X,"LI",{});var CIe=s(eT);y1e=n(CIe,"STRONG",{});var M3t=s(y1e);ear=r(M3t,"rembert"),M3t.forEach(t),oar=r(CIe," \u2014 "),JQ=n(CIe,"A",{href:!0});var E3t=s(JQ);rar=r(E3t,"RemBertForQuestionAnswering"),E3t.forEach(t),tar=r(CIe," (RemBERT model)"),CIe.forEach(t),aar=i(X),oT=n(X,"LI",{});var wIe=s(oT);x1e=n(wIe,"STRONG",{});var C3t=s(x1e);nar=r(C3t,"roberta"),C3t.forEach(t),sar=r(wIe," \u2014 "),YQ=n(wIe,"A",{href:!0});var w3t=s(YQ);lar=r(w3t,"RobertaForQuestionAnswering"),w3t.forEach(t),iar=r(wIe," (RoBERTa model)"),wIe.forEach(t),dar=i(X),rT=n(X,"LI",{});var AIe=s(rT);$1e=n(AIe,"STRONG",{});var A3t=s($1e);car=r(A3t,"roformer"),A3t.forEach(t),far=r(AIe," \u2014 "),KQ=n(AIe,"A",{href:!0});var L3t=s(KQ);mar=r(L3t,"RoFormerForQuestionAnswering"),L3t.forEach(t),gar=r(AIe," (RoFormer model)"),AIe.forEach(t),har=i(X),tT=n(X,"LI",{});var LIe=s(tT);k1e=n(LIe,"STRONG",{});var y3t=s(k1e);par=r(y3t,"splinter"),y3t.forEach(t),_ar=r(LIe," \u2014 "),ZQ=n(LIe,"A",{href:!0});var x3t=s(ZQ);uar=r(x3t,"SplinterForQuestionAnswering"),x3t.forEach(t),bar=r(LIe," (Splinter model)"),LIe.forEach(t),Far=i(X),aT=n(X,"LI",{});var yIe=s(aT);S1e=n(yIe,"STRONG",{});var $3t=s(S1e);Tar=r($3t,"squeezebert"),$3t.forEach(t),Mar=r(yIe," \u2014 "),eW=n(yIe,"A",{href:!0});var k3t=s(eW);Ear=r(k3t,"SqueezeBertForQuestionAnswering"),k3t.forEach(t),Car=r(yIe," (SqueezeBERT model)"),yIe.forEach(t),war=i(X),nT=n(X,"LI",{});var xIe=s(nT);R1e=n(xIe,"STRONG",{});var S3t=s(R1e);Aar=r(S3t,"xlm"),S3t.forEach(t),Lar=r(xIe," \u2014 "),oW=n(xIe,"A",{href:!0});var R3t=s(oW);yar=r(R3t,"XLMForQuestionAnsweringSimple"),R3t.forEach(t),xar=r(xIe," (XLM model)"),xIe.forEach(t),$ar=i(X),sT=n(X,"LI",{});var $Ie=s(sT);P1e=n($Ie,"STRONG",{});var P3t=s(P1e);kar=r(P3t,"xlm-roberta"),P3t.forEach(t),Sar=r($Ie," \u2014 "),rW=n($Ie,"A",{href:!0});var B3t=s(rW);Rar=r(B3t,"XLMRobertaForQuestionAnswering"),B3t.forEach(t),Par=r($Ie," (XLM-RoBERTa model)"),$Ie.forEach(t),Bar=i(X),lT=n(X,"LI",{});var kIe=s(lT);B1e=n(kIe,"STRONG",{});var I3t=s(B1e);Iar=r(I3t,"xlm-roberta-xl"),I3t.forEach(t),Nar=r(kIe," \u2014 "),tW=n(kIe,"A",{href:!0});var N3t=s(tW);qar=r(N3t,"XLMRobertaXLForQuestionAnswering"),N3t.forEach(t),jar=r(kIe," (XLM-RoBERTa-XL model)"),kIe.forEach(t),Dar=i(X),iT=n(X,"LI",{});var SIe=s(iT);I1e=n(SIe,"STRONG",{});var q3t=s(I1e);Gar=r(q3t,"xlnet"),q3t.forEach(t),Oar=r(SIe," \u2014 "),aW=n(SIe,"A",{href:!0});var j3t=s(aW);Var=r(j3t,"XLNetForQuestionAnsweringSimple"),j3t.forEach(t),Xar=r(SIe," (XLNet model)"),SIe.forEach(t),zar=i(X),dT=n(X,"LI",{});var RIe=s(dT);N1e=n(RIe,"STRONG",{});var D3t=s(N1e);Qar=r(D3t,"yoso"),D3t.forEach(t),War=r(RIe," \u2014 "),nW=n(RIe,"A",{href:!0});var G3t=s(nW);Har=r(G3t,"YosoForQuestionAnswering"),G3t.forEach(t),Uar=r(RIe," (YOSO model)"),RIe.forEach(t),X.forEach(t),Jar=i(_a),cT=n(_a,"P",{});var PIe=s(cT);Yar=r(PIe,"The model is set in evaluation mode by default using "),q1e=n(PIe,"CODE",{});var O3t=s(q1e);Kar=r(O3t,"model.eval()"),O3t.forEach(t),Zar=r(PIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(PIe,"CODE",{});var V3t=s(j1e);enr=r(V3t,"model.train()"),V3t.forEach(t),PIe.forEach(t),onr=i(_a),T(fT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),wXe=i(f),_d=n(f,"H2",{class:!0});var kQe=s(_d);mT=n(kQe,"A",{id:!0,class:!0,href:!0});var X3t=s(mT);D1e=n(X3t,"SPAN",{});var z3t=s(D1e);T(wy.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),rnr=i(kQe),G1e=n(kQe,"SPAN",{});var Q3t=s(G1e);tnr=r(Q3t,"AutoModelForTableQuestionAnswering"),Q3t.forEach(t),kQe.forEach(t),AXe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(Ay.$$.fragment,cl),anr=i(cl),ud=n(cl,"P",{});var zre=s(ud);nnr=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sW=n(zre,"A",{href:!0});var W3t=s(sW);snr=r(W3t,"from_pretrained()"),W3t.forEach(t),lnr=r(zre," class method or the "),lW=n(zre,"A",{href:!0});var H3t=s(lW);inr=r(H3t,"from_config()"),H3t.forEach(t),dnr=r(zre,` class
method.`),zre.forEach(t),cnr=i(cl),Ly=n(cl,"P",{});var SQe=s(Ly);fnr=r(SQe,"This class cannot be instantiated directly using "),O1e=n(SQe,"CODE",{});var U3t=s(O1e);mnr=r(U3t,"__init__()"),U3t.forEach(t),gnr=r(SQe," (throws an error)."),SQe.forEach(t),hnr=i(cl),ut=n(cl,"DIV",{class:!0});var Lw=s(ut);T(yy.$$.fragment,Lw),pnr=i(Lw),V1e=n(Lw,"P",{});var J3t=s(V1e);_nr=r(J3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J3t.forEach(t),unr=i(Lw),bd=n(Lw,"P",{});var Qre=s(bd);bnr=r(Qre,`Note:
Loading a model from its configuration file does `),X1e=n(Qre,"STRONG",{});var Y3t=s(X1e);vnr=r(Y3t,"not"),Y3t.forEach(t),Fnr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Qre,"A",{href:!0});var K3t=s(iW);Tnr=r(K3t,"from_pretrained()"),K3t.forEach(t),Mnr=r(Qre," to load the model weights."),Qre.forEach(t),Enr=i(Lw),T(gT.$$.fragment,Lw),Lw.forEach(t),Cnr=i(cl),so=n(cl,"DIV",{class:!0});var ua=s(so);T(xy.$$.fragment,ua),wnr=i(ua),z1e=n(ua,"P",{});var Z3t=s(z1e);Anr=r(Z3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z3t.forEach(t),Lnr=i(ua),za=n(ua,"P",{});var yw=s(za);ynr=r(yw,"The model class to instantiate is selected based on the "),Q1e=n(yw,"CODE",{});var e5t=s(Q1e);xnr=r(e5t,"model_type"),e5t.forEach(t),$nr=r(yw,` property of the config object (either
passed as an argument or loaded from `),W1e=n(yw,"CODE",{});var o5t=s(W1e);knr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),Snr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(yw,"CODE",{});var r5t=s(H1e);Rnr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),Pnr=r(yw,":"),yw.forEach(t),Bnr=i(ua),U1e=n(ua,"UL",{});var t5t=s(U1e);hT=n(t5t,"LI",{});var BIe=s(hT);J1e=n(BIe,"STRONG",{});var a5t=s(J1e);Inr=r(a5t,"tapas"),a5t.forEach(t),Nnr=r(BIe," \u2014 "),dW=n(BIe,"A",{href:!0});var n5t=s(dW);qnr=r(n5t,"TapasForQuestionAnswering"),n5t.forEach(t),jnr=r(BIe," (TAPAS model)"),BIe.forEach(t),t5t.forEach(t),Dnr=i(ua),pT=n(ua,"P",{});var IIe=s(pT);Gnr=r(IIe,"The model is set in evaluation mode by default using "),Y1e=n(IIe,"CODE",{});var s5t=s(Y1e);Onr=r(s5t,"model.eval()"),s5t.forEach(t),Vnr=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(IIe,"CODE",{});var l5t=s(K1e);Xnr=r(l5t,"model.train()"),l5t.forEach(t),IIe.forEach(t),znr=i(ua),T(_T.$$.fragment,ua),ua.forEach(t),cl.forEach(t),LXe=i(f),vd=n(f,"H2",{class:!0});var RQe=s(vd);uT=n(RQe,"A",{id:!0,class:!0,href:!0});var i5t=s(uT);Z1e=n(i5t,"SPAN",{});var d5t=s(Z1e);T($y.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),Qnr=i(RQe),ebe=n(RQe,"SPAN",{});var c5t=s(ebe);Wnr=r(c5t,"AutoModelForImageClassification"),c5t.forEach(t),RQe.forEach(t),yXe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(ky.$$.fragment,fl),Hnr=i(fl),Fd=n(fl,"P",{});var Wre=s(Fd);Unr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cW=n(Wre,"A",{href:!0});var f5t=s(cW);Jnr=r(f5t,"from_pretrained()"),f5t.forEach(t),Ynr=r(Wre," class method or the "),fW=n(Wre,"A",{href:!0});var m5t=s(fW);Knr=r(m5t,"from_config()"),m5t.forEach(t),Znr=r(Wre,` class
method.`),Wre.forEach(t),esr=i(fl),Sy=n(fl,"P",{});var PQe=s(Sy);osr=r(PQe,"This class cannot be instantiated directly using "),obe=n(PQe,"CODE",{});var g5t=s(obe);rsr=r(g5t,"__init__()"),g5t.forEach(t),tsr=r(PQe," (throws an error)."),PQe.forEach(t),asr=i(fl),bt=n(fl,"DIV",{class:!0});var xw=s(bt);T(Ry.$$.fragment,xw),nsr=i(xw),rbe=n(xw,"P",{});var h5t=s(rbe);ssr=r(h5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h5t.forEach(t),lsr=i(xw),Td=n(xw,"P",{});var Hre=s(Td);isr=r(Hre,`Note:
Loading a model from its configuration file does `),tbe=n(Hre,"STRONG",{});var p5t=s(tbe);dsr=r(p5t,"not"),p5t.forEach(t),csr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Hre,"A",{href:!0});var _5t=s(mW);fsr=r(_5t,"from_pretrained()"),_5t.forEach(t),msr=r(Hre," to load the model weights."),Hre.forEach(t),gsr=i(xw),T(bT.$$.fragment,xw),xw.forEach(t),hsr=i(fl),lo=n(fl,"DIV",{class:!0});var ba=s(lo);T(Py.$$.fragment,ba),psr=i(ba),abe=n(ba,"P",{});var u5t=s(abe);_sr=r(u5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u5t.forEach(t),usr=i(ba),Qa=n(ba,"P",{});var $w=s(Qa);bsr=r($w,"The model class to instantiate is selected based on the "),nbe=n($w,"CODE",{});var b5t=s(nbe);vsr=r(b5t,"model_type"),b5t.forEach(t),Fsr=r($w,` property of the config object (either
passed as an argument or loaded from `),sbe=n($w,"CODE",{});var v5t=s(sbe);Tsr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),Msr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n($w,"CODE",{});var F5t=s(lbe);Esr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),Csr=r($w,":"),$w.forEach(t),wsr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);vT=n(Te,"LI",{});var NIe=s(vT);ibe=n(NIe,"STRONG",{});var T5t=s(ibe);Asr=r(T5t,"beit"),T5t.forEach(t),Lsr=r(NIe," \u2014 "),gW=n(NIe,"A",{href:!0});var M5t=s(gW);ysr=r(M5t,"BeitForImageClassification"),M5t.forEach(t),xsr=r(NIe," (BEiT model)"),NIe.forEach(t),$sr=i(Te),FT=n(Te,"LI",{});var qIe=s(FT);dbe=n(qIe,"STRONG",{});var E5t=s(dbe);ksr=r(E5t,"convnext"),E5t.forEach(t),Ssr=r(qIe," \u2014 "),hW=n(qIe,"A",{href:!0});var C5t=s(hW);Rsr=r(C5t,"ConvNextForImageClassification"),C5t.forEach(t),Psr=r(qIe," (ConvNeXT model)"),qIe.forEach(t),Bsr=i(Te),TT=n(Te,"LI",{});var jIe=s(TT);cbe=n(jIe,"STRONG",{});var w5t=s(cbe);Isr=r(w5t,"cvt"),w5t.forEach(t),Nsr=r(jIe," \u2014 "),pW=n(jIe,"A",{href:!0});var A5t=s(pW);qsr=r(A5t,"CvtForImageClassification"),A5t.forEach(t),jsr=r(jIe," (CvT model)"),jIe.forEach(t),Dsr=i(Te),MT=n(Te,"LI",{});var DIe=s(MT);fbe=n(DIe,"STRONG",{});var L5t=s(fbe);Gsr=r(L5t,"data2vec-vision"),L5t.forEach(t),Osr=r(DIe," \u2014 "),_W=n(DIe,"A",{href:!0});var y5t=s(_W);Vsr=r(y5t,"Data2VecVisionForImageClassification"),y5t.forEach(t),Xsr=r(DIe," (Data2VecVision model)"),DIe.forEach(t),zsr=i(Te),Ws=n(Te,"LI",{});var $S=s(Ws);mbe=n($S,"STRONG",{});var x5t=s(mbe);Qsr=r(x5t,"deit"),x5t.forEach(t),Wsr=r($S," \u2014 "),uW=n($S,"A",{href:!0});var $5t=s(uW);Hsr=r($5t,"DeiTForImageClassification"),$5t.forEach(t),Usr=r($S," or "),bW=n($S,"A",{href:!0});var k5t=s(bW);Jsr=r(k5t,"DeiTForImageClassificationWithTeacher"),k5t.forEach(t),Ysr=r($S," (DeiT model)"),$S.forEach(t),Ksr=i(Te),ET=n(Te,"LI",{});var GIe=s(ET);gbe=n(GIe,"STRONG",{});var S5t=s(gbe);Zsr=r(S5t,"imagegpt"),S5t.forEach(t),elr=r(GIe," \u2014 "),vW=n(GIe,"A",{href:!0});var R5t=s(vW);olr=r(R5t,"ImageGPTForImageClassification"),R5t.forEach(t),rlr=r(GIe," (ImageGPT model)"),GIe.forEach(t),tlr=i(Te),Hs=n(Te,"LI",{});var kS=s(Hs);hbe=n(kS,"STRONG",{});var P5t=s(hbe);alr=r(P5t,"levit"),P5t.forEach(t),nlr=r(kS," \u2014 "),FW=n(kS,"A",{href:!0});var B5t=s(FW);slr=r(B5t,"LevitForImageClassification"),B5t.forEach(t),llr=r(kS," or "),TW=n(kS,"A",{href:!0});var I5t=s(TW);ilr=r(I5t,"LevitForImageClassificationWithTeacher"),I5t.forEach(t),dlr=r(kS," (LeViT model)"),kS.forEach(t),clr=i(Te),CT=n(Te,"LI",{});var OIe=s(CT);pbe=n(OIe,"STRONG",{});var N5t=s(pbe);flr=r(N5t,"mobilevit"),N5t.forEach(t),mlr=r(OIe," \u2014 "),MW=n(OIe,"A",{href:!0});var q5t=s(MW);glr=r(q5t,"MobileViTForImageClassification"),q5t.forEach(t),hlr=r(OIe," (MobileViT model)"),OIe.forEach(t),plr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);_be=n(Sf,"STRONG",{});var j5t=s(_be);_lr=r(j5t,"perceiver"),j5t.forEach(t),ulr=r(Sf," \u2014 "),EW=n(Sf,"A",{href:!0});var D5t=s(EW);blr=r(D5t,"PerceiverForImageClassificationLearned"),D5t.forEach(t),vlr=r(Sf," or "),CW=n(Sf,"A",{href:!0});var G5t=s(CW);Flr=r(G5t,"PerceiverForImageClassificationFourier"),G5t.forEach(t),Tlr=r(Sf," or "),wW=n(Sf,"A",{href:!0});var O5t=s(wW);Mlr=r(O5t,"PerceiverForImageClassificationConvProcessing"),O5t.forEach(t),Elr=r(Sf," (Perceiver model)"),Sf.forEach(t),Clr=i(Te),wT=n(Te,"LI",{});var VIe=s(wT);ube=n(VIe,"STRONG",{});var V5t=s(ube);wlr=r(V5t,"poolformer"),V5t.forEach(t),Alr=r(VIe," \u2014 "),AW=n(VIe,"A",{href:!0});var X5t=s(AW);Llr=r(X5t,"PoolFormerForImageClassification"),X5t.forEach(t),ylr=r(VIe," (PoolFormer model)"),VIe.forEach(t),xlr=i(Te),AT=n(Te,"LI",{});var XIe=s(AT);bbe=n(XIe,"STRONG",{});var z5t=s(bbe);$lr=r(z5t,"regnet"),z5t.forEach(t),klr=r(XIe," \u2014 "),LW=n(XIe,"A",{href:!0});var Q5t=s(LW);Slr=r(Q5t,"RegNetForImageClassification"),Q5t.forEach(t),Rlr=r(XIe," (RegNet model)"),XIe.forEach(t),Plr=i(Te),LT=n(Te,"LI",{});var zIe=s(LT);vbe=n(zIe,"STRONG",{});var W5t=s(vbe);Blr=r(W5t,"resnet"),W5t.forEach(t),Ilr=r(zIe," \u2014 "),yW=n(zIe,"A",{href:!0});var H5t=s(yW);Nlr=r(H5t,"ResNetForImageClassification"),H5t.forEach(t),qlr=r(zIe," (ResNet model)"),zIe.forEach(t),jlr=i(Te),yT=n(Te,"LI",{});var QIe=s(yT);Fbe=n(QIe,"STRONG",{});var U5t=s(Fbe);Dlr=r(U5t,"segformer"),U5t.forEach(t),Glr=r(QIe," \u2014 "),xW=n(QIe,"A",{href:!0});var J5t=s(xW);Olr=r(J5t,"SegformerForImageClassification"),J5t.forEach(t),Vlr=r(QIe," (SegFormer model)"),QIe.forEach(t),Xlr=i(Te),xT=n(Te,"LI",{});var WIe=s(xT);Tbe=n(WIe,"STRONG",{});var Y5t=s(Tbe);zlr=r(Y5t,"swin"),Y5t.forEach(t),Qlr=r(WIe," \u2014 "),$W=n(WIe,"A",{href:!0});var K5t=s($W);Wlr=r(K5t,"SwinForImageClassification"),K5t.forEach(t),Hlr=r(WIe," (Swin Transformer model)"),WIe.forEach(t),Ulr=i(Te),$T=n(Te,"LI",{});var HIe=s($T);Mbe=n(HIe,"STRONG",{});var Z5t=s(Mbe);Jlr=r(Z5t,"van"),Z5t.forEach(t),Ylr=r(HIe," \u2014 "),kW=n(HIe,"A",{href:!0});var e0t=s(kW);Klr=r(e0t,"VanForImageClassification"),e0t.forEach(t),Zlr=r(HIe," (VAN model)"),HIe.forEach(t),eir=i(Te),kT=n(Te,"LI",{});var UIe=s(kT);Ebe=n(UIe,"STRONG",{});var o0t=s(Ebe);oir=r(o0t,"vit"),o0t.forEach(t),rir=r(UIe," \u2014 "),SW=n(UIe,"A",{href:!0});var r0t=s(SW);tir=r(r0t,"ViTForImageClassification"),r0t.forEach(t),air=r(UIe," (ViT model)"),UIe.forEach(t),Te.forEach(t),nir=i(ba),ST=n(ba,"P",{});var JIe=s(ST);sir=r(JIe,"The model is set in evaluation mode by default using "),Cbe=n(JIe,"CODE",{});var t0t=s(Cbe);lir=r(t0t,"model.eval()"),t0t.forEach(t),iir=r(JIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=n(JIe,"CODE",{});var a0t=s(wbe);dir=r(a0t,"model.train()"),a0t.forEach(t),JIe.forEach(t),cir=i(ba),T(RT.$$.fragment,ba),ba.forEach(t),fl.forEach(t),xXe=i(f),Md=n(f,"H2",{class:!0});var BQe=s(Md);PT=n(BQe,"A",{id:!0,class:!0,href:!0});var n0t=s(PT);Abe=n(n0t,"SPAN",{});var s0t=s(Abe);T(By.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),fir=i(BQe),Lbe=n(BQe,"SPAN",{});var l0t=s(Lbe);mir=r(l0t,"AutoModelForVision2Seq"),l0t.forEach(t),BQe.forEach(t),$Xe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(Iy.$$.fragment,ml),gir=i(ml),Ed=n(ml,"P",{});var Ure=s(Ed);hir=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=n(Ure,"A",{href:!0});var i0t=s(RW);pir=r(i0t,"from_pretrained()"),i0t.forEach(t),_ir=r(Ure," class method or the "),PW=n(Ure,"A",{href:!0});var d0t=s(PW);uir=r(d0t,"from_config()"),d0t.forEach(t),bir=r(Ure,` class
method.`),Ure.forEach(t),vir=i(ml),Ny=n(ml,"P",{});var IQe=s(Ny);Fir=r(IQe,"This class cannot be instantiated directly using "),ybe=n(IQe,"CODE",{});var c0t=s(ybe);Tir=r(c0t,"__init__()"),c0t.forEach(t),Mir=r(IQe," (throws an error)."),IQe.forEach(t),Eir=i(ml),Ft=n(ml,"DIV",{class:!0});var kw=s(Ft);T(qy.$$.fragment,kw),Cir=i(kw),xbe=n(kw,"P",{});var f0t=s(xbe);wir=r(f0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f0t.forEach(t),Air=i(kw),Cd=n(kw,"P",{});var Jre=s(Cd);Lir=r(Jre,`Note:
Loading a model from its configuration file does `),$be=n(Jre,"STRONG",{});var m0t=s($be);yir=r(m0t,"not"),m0t.forEach(t),xir=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Jre,"A",{href:!0});var g0t=s(BW);$ir=r(g0t,"from_pretrained()"),g0t.forEach(t),kir=r(Jre," to load the model weights."),Jre.forEach(t),Sir=i(kw),T(BT.$$.fragment,kw),kw.forEach(t),Rir=i(ml),io=n(ml,"DIV",{class:!0});var va=s(io);T(jy.$$.fragment,va),Pir=i(va),kbe=n(va,"P",{});var h0t=s(kbe);Bir=r(h0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h0t.forEach(t),Iir=i(va),Wa=n(va,"P",{});var Sw=s(Wa);Nir=r(Sw,"The model class to instantiate is selected based on the "),Sbe=n(Sw,"CODE",{});var p0t=s(Sbe);qir=r(p0t,"model_type"),p0t.forEach(t),jir=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(Sw,"CODE",{});var _0t=s(Rbe);Dir=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),Gir=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(Sw,"CODE",{});var u0t=s(Pbe);Oir=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),Vir=r(Sw,":"),Sw.forEach(t),Xir=i(va),Bbe=n(va,"UL",{});var b0t=s(Bbe);IT=n(b0t,"LI",{});var YIe=s(IT);Ibe=n(YIe,"STRONG",{});var v0t=s(Ibe);zir=r(v0t,"vision-encoder-decoder"),v0t.forEach(t),Qir=r(YIe," \u2014 "),IW=n(YIe,"A",{href:!0});var F0t=s(IW);Wir=r(F0t,"VisionEncoderDecoderModel"),F0t.forEach(t),Hir=r(YIe," (Vision Encoder decoder model)"),YIe.forEach(t),b0t.forEach(t),Uir=i(va),NT=n(va,"P",{});var KIe=s(NT);Jir=r(KIe,"The model is set in evaluation mode by default using "),Nbe=n(KIe,"CODE",{});var T0t=s(Nbe);Yir=r(T0t,"model.eval()"),T0t.forEach(t),Kir=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(KIe,"CODE",{});var M0t=s(qbe);Zir=r(M0t,"model.train()"),M0t.forEach(t),KIe.forEach(t),edr=i(va),T(qT.$$.fragment,va),va.forEach(t),ml.forEach(t),kXe=i(f),wd=n(f,"H2",{class:!0});var NQe=s(wd);jT=n(NQe,"A",{id:!0,class:!0,href:!0});var E0t=s(jT);jbe=n(E0t,"SPAN",{});var C0t=s(jbe);T(Dy.$$.fragment,C0t),C0t.forEach(t),E0t.forEach(t),odr=i(NQe),Dbe=n(NQe,"SPAN",{});var w0t=s(Dbe);rdr=r(w0t,"AutoModelForVisualQuestionAnswering"),w0t.forEach(t),NQe.forEach(t),SXe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(Gy.$$.fragment,gl),tdr=i(gl),Ad=n(gl,"P",{});var Yre=s(Ad);adr=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NW=n(Yre,"A",{href:!0});var A0t=s(NW);ndr=r(A0t,"from_pretrained()"),A0t.forEach(t),sdr=r(Yre," class method or the "),qW=n(Yre,"A",{href:!0});var L0t=s(qW);ldr=r(L0t,"from_config()"),L0t.forEach(t),idr=r(Yre,` class
method.`),Yre.forEach(t),ddr=i(gl),Oy=n(gl,"P",{});var qQe=s(Oy);cdr=r(qQe,"This class cannot be instantiated directly using "),Gbe=n(qQe,"CODE",{});var y0t=s(Gbe);fdr=r(y0t,"__init__()"),y0t.forEach(t),mdr=r(qQe," (throws an error)."),qQe.forEach(t),gdr=i(gl),Tt=n(gl,"DIV",{class:!0});var Rw=s(Tt);T(Vy.$$.fragment,Rw),hdr=i(Rw),Obe=n(Rw,"P",{});var x0t=s(Obe);pdr=r(x0t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),x0t.forEach(t),_dr=i(Rw),Ld=n(Rw,"P",{});var Kre=s(Ld);udr=r(Kre,`Note:
Loading a model from its configuration file does `),Vbe=n(Kre,"STRONG",{});var $0t=s(Vbe);bdr=r($0t,"not"),$0t.forEach(t),vdr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Kre,"A",{href:!0});var k0t=s(jW);Fdr=r(k0t,"from_pretrained()"),k0t.forEach(t),Tdr=r(Kre," to load the model weights."),Kre.forEach(t),Mdr=i(Rw),T(DT.$$.fragment,Rw),Rw.forEach(t),Edr=i(gl),co=n(gl,"DIV",{class:!0});var Fa=s(co);T(Xy.$$.fragment,Fa),Cdr=i(Fa),Xbe=n(Fa,"P",{});var S0t=s(Xbe);wdr=r(S0t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),S0t.forEach(t),Adr=i(Fa),Ha=n(Fa,"P",{});var Pw=s(Ha);Ldr=r(Pw,"The model class to instantiate is selected based on the "),zbe=n(Pw,"CODE",{});var R0t=s(zbe);ydr=r(R0t,"model_type"),R0t.forEach(t),xdr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(Pw,"CODE",{});var P0t=s(Qbe);$dr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),kdr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(Pw,"CODE",{});var B0t=s(Wbe);Sdr=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),Rdr=r(Pw,":"),Pw.forEach(t),Pdr=i(Fa),Hbe=n(Fa,"UL",{});var I0t=s(Hbe);GT=n(I0t,"LI",{});var ZIe=s(GT);Ube=n(ZIe,"STRONG",{});var N0t=s(Ube);Bdr=r(N0t,"vilt"),N0t.forEach(t),Idr=r(ZIe," \u2014 "),DW=n(ZIe,"A",{href:!0});var q0t=s(DW);Ndr=r(q0t,"ViltForQuestionAnswering"),q0t.forEach(t),qdr=r(ZIe," (ViLT model)"),ZIe.forEach(t),I0t.forEach(t),jdr=i(Fa),OT=n(Fa,"P",{});var eNe=s(OT);Ddr=r(eNe,"The model is set in evaluation mode by default using "),Jbe=n(eNe,"CODE",{});var j0t=s(Jbe);Gdr=r(j0t,"model.eval()"),j0t.forEach(t),Odr=r(eNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(eNe,"CODE",{});var D0t=s(Ybe);Vdr=r(D0t,"model.train()"),D0t.forEach(t),eNe.forEach(t),Xdr=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),RXe=i(f),yd=n(f,"H2",{class:!0});var jQe=s(yd);XT=n(jQe,"A",{id:!0,class:!0,href:!0});var G0t=s(XT);Kbe=n(G0t,"SPAN",{});var O0t=s(Kbe);T(zy.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),zdr=i(jQe),Zbe=n(jQe,"SPAN",{});var V0t=s(Zbe);Qdr=r(V0t,"AutoModelForAudioClassification"),V0t.forEach(t),jQe.forEach(t),PXe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(Qy.$$.fragment,hl),Wdr=i(hl),xd=n(hl,"P",{});var Zre=s(xd);Hdr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=n(Zre,"A",{href:!0});var X0t=s(GW);Udr=r(X0t,"from_pretrained()"),X0t.forEach(t),Jdr=r(Zre," class method or the "),OW=n(Zre,"A",{href:!0});var z0t=s(OW);Ydr=r(z0t,"from_config()"),z0t.forEach(t),Kdr=r(Zre,` class
method.`),Zre.forEach(t),Zdr=i(hl),Wy=n(hl,"P",{});var DQe=s(Wy);ecr=r(DQe,"This class cannot be instantiated directly using "),eve=n(DQe,"CODE",{});var Q0t=s(eve);ocr=r(Q0t,"__init__()"),Q0t.forEach(t),rcr=r(DQe," (throws an error)."),DQe.forEach(t),tcr=i(hl),Mt=n(hl,"DIV",{class:!0});var Bw=s(Mt);T(Hy.$$.fragment,Bw),acr=i(Bw),ove=n(Bw,"P",{});var W0t=s(ove);ncr=r(W0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),W0t.forEach(t),scr=i(Bw),$d=n(Bw,"P",{});var ete=s($d);lcr=r(ete,`Note:
Loading a model from its configuration file does `),rve=n(ete,"STRONG",{});var H0t=s(rve);icr=r(H0t,"not"),H0t.forEach(t),dcr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(ete,"A",{href:!0});var U0t=s(VW);ccr=r(U0t,"from_pretrained()"),U0t.forEach(t),fcr=r(ete," to load the model weights."),ete.forEach(t),mcr=i(Bw),T(zT.$$.fragment,Bw),Bw.forEach(t),gcr=i(hl),fo=n(hl,"DIV",{class:!0});var Ta=s(fo);T(Uy.$$.fragment,Ta),hcr=i(Ta),tve=n(Ta,"P",{});var J0t=s(tve);pcr=r(J0t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),J0t.forEach(t),_cr=i(Ta),Ua=n(Ta,"P",{});var Iw=s(Ua);ucr=r(Iw,"The model class to instantiate is selected based on the "),ave=n(Iw,"CODE",{});var Y0t=s(ave);bcr=r(Y0t,"model_type"),Y0t.forEach(t),vcr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),nve=n(Iw,"CODE",{});var K0t=s(nve);Fcr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Tcr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(Iw,"CODE",{});var Z0t=s(sve);Mcr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Ecr=r(Iw,":"),Iw.forEach(t),Ccr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);QT=n(ze,"LI",{});var oNe=s(QT);lve=n(oNe,"STRONG",{});var ewt=s(lve);wcr=r(ewt,"data2vec-audio"),ewt.forEach(t),Acr=r(oNe," \u2014 "),XW=n(oNe,"A",{href:!0});var owt=s(XW);Lcr=r(owt,"Data2VecAudioForSequenceClassification"),owt.forEach(t),ycr=r(oNe," (Data2VecAudio model)"),oNe.forEach(t),xcr=i(ze),WT=n(ze,"LI",{});var rNe=s(WT);ive=n(rNe,"STRONG",{});var rwt=s(ive);$cr=r(rwt,"hubert"),rwt.forEach(t),kcr=r(rNe," \u2014 "),zW=n(rNe,"A",{href:!0});var twt=s(zW);Scr=r(twt,"HubertForSequenceClassification"),twt.forEach(t),Rcr=r(rNe," (Hubert model)"),rNe.forEach(t),Pcr=i(ze),HT=n(ze,"LI",{});var tNe=s(HT);dve=n(tNe,"STRONG",{});var awt=s(dve);Bcr=r(awt,"sew"),awt.forEach(t),Icr=r(tNe," \u2014 "),QW=n(tNe,"A",{href:!0});var nwt=s(QW);Ncr=r(nwt,"SEWForSequenceClassification"),nwt.forEach(t),qcr=r(tNe," (SEW model)"),tNe.forEach(t),jcr=i(ze),UT=n(ze,"LI",{});var aNe=s(UT);cve=n(aNe,"STRONG",{});var swt=s(cve);Dcr=r(swt,"sew-d"),swt.forEach(t),Gcr=r(aNe," \u2014 "),WW=n(aNe,"A",{href:!0});var lwt=s(WW);Ocr=r(lwt,"SEWDForSequenceClassification"),lwt.forEach(t),Vcr=r(aNe," (SEW-D model)"),aNe.forEach(t),Xcr=i(ze),JT=n(ze,"LI",{});var nNe=s(JT);fve=n(nNe,"STRONG",{});var iwt=s(fve);zcr=r(iwt,"unispeech"),iwt.forEach(t),Qcr=r(nNe," \u2014 "),HW=n(nNe,"A",{href:!0});var dwt=s(HW);Wcr=r(dwt,"UniSpeechForSequenceClassification"),dwt.forEach(t),Hcr=r(nNe," (UniSpeech model)"),nNe.forEach(t),Ucr=i(ze),YT=n(ze,"LI",{});var sNe=s(YT);mve=n(sNe,"STRONG",{});var cwt=s(mve);Jcr=r(cwt,"unispeech-sat"),cwt.forEach(t),Ycr=r(sNe," \u2014 "),UW=n(sNe,"A",{href:!0});var fwt=s(UW);Kcr=r(fwt,"UniSpeechSatForSequenceClassification"),fwt.forEach(t),Zcr=r(sNe," (UniSpeechSat model)"),sNe.forEach(t),efr=i(ze),KT=n(ze,"LI",{});var lNe=s(KT);gve=n(lNe,"STRONG",{});var mwt=s(gve);ofr=r(mwt,"wav2vec2"),mwt.forEach(t),rfr=r(lNe," \u2014 "),JW=n(lNe,"A",{href:!0});var gwt=s(JW);tfr=r(gwt,"Wav2Vec2ForSequenceClassification"),gwt.forEach(t),afr=r(lNe," (Wav2Vec2 model)"),lNe.forEach(t),nfr=i(ze),ZT=n(ze,"LI",{});var iNe=s(ZT);hve=n(iNe,"STRONG",{});var hwt=s(hve);sfr=r(hwt,"wav2vec2-conformer"),hwt.forEach(t),lfr=r(iNe," \u2014 "),YW=n(iNe,"A",{href:!0});var pwt=s(YW);ifr=r(pwt,"Wav2Vec2ConformerForSequenceClassification"),pwt.forEach(t),dfr=r(iNe," (Wav2Vec2-Conformer model)"),iNe.forEach(t),cfr=i(ze),e7=n(ze,"LI",{});var dNe=s(e7);pve=n(dNe,"STRONG",{});var _wt=s(pve);ffr=r(_wt,"wavlm"),_wt.forEach(t),mfr=r(dNe," \u2014 "),KW=n(dNe,"A",{href:!0});var uwt=s(KW);gfr=r(uwt,"WavLMForSequenceClassification"),uwt.forEach(t),hfr=r(dNe," (WavLM model)"),dNe.forEach(t),ze.forEach(t),pfr=i(Ta),o7=n(Ta,"P",{});var cNe=s(o7);_fr=r(cNe,"The model is set in evaluation mode by default using "),_ve=n(cNe,"CODE",{});var bwt=s(_ve);ufr=r(bwt,"model.eval()"),bwt.forEach(t),bfr=r(cNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uve=n(cNe,"CODE",{});var vwt=s(uve);vfr=r(vwt,"model.train()"),vwt.forEach(t),cNe.forEach(t),Ffr=i(Ta),T(r7.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),BXe=i(f),kd=n(f,"H2",{class:!0});var GQe=s(kd);t7=n(GQe,"A",{id:!0,class:!0,href:!0});var Fwt=s(t7);bve=n(Fwt,"SPAN",{});var Twt=s(bve);T(Jy.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),Tfr=i(GQe),vve=n(GQe,"SPAN",{});var Mwt=s(vve);Mfr=r(Mwt,"AutoModelForAudioFrameClassification"),Mwt.forEach(t),GQe.forEach(t),IXe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(Yy.$$.fragment,pl),Efr=i(pl),Sd=n(pl,"P",{});var ote=s(Sd);Cfr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=n(ote,"A",{href:!0});var Ewt=s(ZW);wfr=r(Ewt,"from_pretrained()"),Ewt.forEach(t),Afr=r(ote," class method or the "),eH=n(ote,"A",{href:!0});var Cwt=s(eH);Lfr=r(Cwt,"from_config()"),Cwt.forEach(t),yfr=r(ote,` class
method.`),ote.forEach(t),xfr=i(pl),Ky=n(pl,"P",{});var OQe=s(Ky);$fr=r(OQe,"This class cannot be instantiated directly using "),Fve=n(OQe,"CODE",{});var wwt=s(Fve);kfr=r(wwt,"__init__()"),wwt.forEach(t),Sfr=r(OQe," (throws an error)."),OQe.forEach(t),Rfr=i(pl),Et=n(pl,"DIV",{class:!0});var Nw=s(Et);T(Zy.$$.fragment,Nw),Pfr=i(Nw),Tve=n(Nw,"P",{});var Awt=s(Tve);Bfr=r(Awt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Awt.forEach(t),Ifr=i(Nw),Rd=n(Nw,"P",{});var rte=s(Rd);Nfr=r(rte,`Note:
Loading a model from its configuration file does `),Mve=n(rte,"STRONG",{});var Lwt=s(Mve);qfr=r(Lwt,"not"),Lwt.forEach(t),jfr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(rte,"A",{href:!0});var ywt=s(oH);Dfr=r(ywt,"from_pretrained()"),ywt.forEach(t),Gfr=r(rte," to load the model weights."),rte.forEach(t),Ofr=i(Nw),T(a7.$$.fragment,Nw),Nw.forEach(t),Vfr=i(pl),mo=n(pl,"DIV",{class:!0});var Ma=s(mo);T(e9.$$.fragment,Ma),Xfr=i(Ma),Eve=n(Ma,"P",{});var xwt=s(Eve);zfr=r(xwt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xwt.forEach(t),Qfr=i(Ma),Ja=n(Ma,"P",{});var qw=s(Ja);Wfr=r(qw,"The model class to instantiate is selected based on the "),Cve=n(qw,"CODE",{});var $wt=s(Cve);Hfr=r($wt,"model_type"),$wt.forEach(t),Ufr=r(qw,` property of the config object (either
passed as an argument or loaded from `),wve=n(qw,"CODE",{});var kwt=s(wve);Jfr=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),Yfr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(qw,"CODE",{});var Swt=s(Ave);Kfr=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),Zfr=r(qw,":"),qw.forEach(t),emr=i(Ma),et=n(Ma,"UL",{});var _l=s(et);n7=n(_l,"LI",{});var fNe=s(n7);Lve=n(fNe,"STRONG",{});var Rwt=s(Lve);omr=r(Rwt,"data2vec-audio"),Rwt.forEach(t),rmr=r(fNe," \u2014 "),rH=n(fNe,"A",{href:!0});var Pwt=s(rH);tmr=r(Pwt,"Data2VecAudioForAudioFrameClassification"),Pwt.forEach(t),amr=r(fNe," (Data2VecAudio model)"),fNe.forEach(t),nmr=i(_l),s7=n(_l,"LI",{});var mNe=s(s7);yve=n(mNe,"STRONG",{});var Bwt=s(yve);smr=r(Bwt,"unispeech-sat"),Bwt.forEach(t),lmr=r(mNe," \u2014 "),tH=n(mNe,"A",{href:!0});var Iwt=s(tH);imr=r(Iwt,"UniSpeechSatForAudioFrameClassification"),Iwt.forEach(t),dmr=r(mNe," (UniSpeechSat model)"),mNe.forEach(t),cmr=i(_l),l7=n(_l,"LI",{});var gNe=s(l7);xve=n(gNe,"STRONG",{});var Nwt=s(xve);fmr=r(Nwt,"wav2vec2"),Nwt.forEach(t),mmr=r(gNe," \u2014 "),aH=n(gNe,"A",{href:!0});var qwt=s(aH);gmr=r(qwt,"Wav2Vec2ForAudioFrameClassification"),qwt.forEach(t),hmr=r(gNe," (Wav2Vec2 model)"),gNe.forEach(t),pmr=i(_l),i7=n(_l,"LI",{});var hNe=s(i7);$ve=n(hNe,"STRONG",{});var jwt=s($ve);_mr=r(jwt,"wav2vec2-conformer"),jwt.forEach(t),umr=r(hNe," \u2014 "),nH=n(hNe,"A",{href:!0});var Dwt=s(nH);bmr=r(Dwt,"Wav2Vec2ConformerForAudioFrameClassification"),Dwt.forEach(t),vmr=r(hNe," (Wav2Vec2-Conformer model)"),hNe.forEach(t),Fmr=i(_l),d7=n(_l,"LI",{});var pNe=s(d7);kve=n(pNe,"STRONG",{});var Gwt=s(kve);Tmr=r(Gwt,"wavlm"),Gwt.forEach(t),Mmr=r(pNe," \u2014 "),sH=n(pNe,"A",{href:!0});var Owt=s(sH);Emr=r(Owt,"WavLMForAudioFrameClassification"),Owt.forEach(t),Cmr=r(pNe," (WavLM model)"),pNe.forEach(t),_l.forEach(t),wmr=i(Ma),c7=n(Ma,"P",{});var _Ne=s(c7);Amr=r(_Ne,"The model is set in evaluation mode by default using "),Sve=n(_Ne,"CODE",{});var Vwt=s(Sve);Lmr=r(Vwt,"model.eval()"),Vwt.forEach(t),ymr=r(_Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=n(_Ne,"CODE",{});var Xwt=s(Rve);xmr=r(Xwt,"model.train()"),Xwt.forEach(t),_Ne.forEach(t),$mr=i(Ma),T(f7.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),NXe=i(f),Pd=n(f,"H2",{class:!0});var VQe=s(Pd);m7=n(VQe,"A",{id:!0,class:!0,href:!0});var zwt=s(m7);Pve=n(zwt,"SPAN",{});var Qwt=s(Pve);T(o9.$$.fragment,Qwt),Qwt.forEach(t),zwt.forEach(t),kmr=i(VQe),Bve=n(VQe,"SPAN",{});var Wwt=s(Bve);Smr=r(Wwt,"AutoModelForCTC"),Wwt.forEach(t),VQe.forEach(t),qXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(r9.$$.fragment,ul),Rmr=i(ul),Bd=n(ul,"P",{});var tte=s(Bd);Pmr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lH=n(tte,"A",{href:!0});var Hwt=s(lH);Bmr=r(Hwt,"from_pretrained()"),Hwt.forEach(t),Imr=r(tte," class method or the "),iH=n(tte,"A",{href:!0});var Uwt=s(iH);Nmr=r(Uwt,"from_config()"),Uwt.forEach(t),qmr=r(tte,` class
method.`),tte.forEach(t),jmr=i(ul),t9=n(ul,"P",{});var XQe=s(t9);Dmr=r(XQe,"This class cannot be instantiated directly using "),Ive=n(XQe,"CODE",{});var Jwt=s(Ive);Gmr=r(Jwt,"__init__()"),Jwt.forEach(t),Omr=r(XQe," (throws an error)."),XQe.forEach(t),Vmr=i(ul),Ct=n(ul,"DIV",{class:!0});var jw=s(Ct);T(a9.$$.fragment,jw),Xmr=i(jw),Nve=n(jw,"P",{});var Ywt=s(Nve);zmr=r(Ywt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ywt.forEach(t),Qmr=i(jw),Id=n(jw,"P",{});var ate=s(Id);Wmr=r(ate,`Note:
Loading a model from its configuration file does `),qve=n(ate,"STRONG",{});var Kwt=s(qve);Hmr=r(Kwt,"not"),Kwt.forEach(t),Umr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(ate,"A",{href:!0});var Zwt=s(dH);Jmr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),Ymr=r(ate," to load the model weights."),ate.forEach(t),Kmr=i(jw),T(g7.$$.fragment,jw),jw.forEach(t),Zmr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(n9.$$.fragment,Ea),egr=i(Ea),jve=n(Ea,"P",{});var eAt=s(jve);ogr=r(eAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),eAt.forEach(t),rgr=i(Ea),Ya=n(Ea,"P",{});var Dw=s(Ya);tgr=r(Dw,"The model class to instantiate is selected based on the "),Dve=n(Dw,"CODE",{});var oAt=s(Dve);agr=r(oAt,"model_type"),oAt.forEach(t),ngr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Gve=n(Dw,"CODE",{});var rAt=s(Gve);sgr=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),lgr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(Dw,"CODE",{});var tAt=s(Ove);igr=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),dgr=r(Dw,":"),Dw.forEach(t),cgr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);h7=n(Be,"LI",{});var uNe=s(h7);Vve=n(uNe,"STRONG",{});var aAt=s(Vve);fgr=r(aAt,"data2vec-audio"),aAt.forEach(t),mgr=r(uNe," \u2014 "),cH=n(uNe,"A",{href:!0});var nAt=s(cH);ggr=r(nAt,"Data2VecAudioForCTC"),nAt.forEach(t),hgr=r(uNe," (Data2VecAudio model)"),uNe.forEach(t),pgr=i(Be),p7=n(Be,"LI",{});var bNe=s(p7);Xve=n(bNe,"STRONG",{});var sAt=s(Xve);_gr=r(sAt,"hubert"),sAt.forEach(t),ugr=r(bNe," \u2014 "),fH=n(bNe,"A",{href:!0});var lAt=s(fH);bgr=r(lAt,"HubertForCTC"),lAt.forEach(t),vgr=r(bNe," (Hubert model)"),bNe.forEach(t),Fgr=i(Be),_7=n(Be,"LI",{});var vNe=s(_7);zve=n(vNe,"STRONG",{});var iAt=s(zve);Tgr=r(iAt,"mctct"),iAt.forEach(t),Mgr=r(vNe," \u2014 "),mH=n(vNe,"A",{href:!0});var dAt=s(mH);Egr=r(dAt,"MCTCTForCTC"),dAt.forEach(t),Cgr=r(vNe," (M-CTC-T model)"),vNe.forEach(t),wgr=i(Be),u7=n(Be,"LI",{});var FNe=s(u7);Qve=n(FNe,"STRONG",{});var cAt=s(Qve);Agr=r(cAt,"sew"),cAt.forEach(t),Lgr=r(FNe," \u2014 "),gH=n(FNe,"A",{href:!0});var fAt=s(gH);ygr=r(fAt,"SEWForCTC"),fAt.forEach(t),xgr=r(FNe," (SEW model)"),FNe.forEach(t),$gr=i(Be),b7=n(Be,"LI",{});var TNe=s(b7);Wve=n(TNe,"STRONG",{});var mAt=s(Wve);kgr=r(mAt,"sew-d"),mAt.forEach(t),Sgr=r(TNe," \u2014 "),hH=n(TNe,"A",{href:!0});var gAt=s(hH);Rgr=r(gAt,"SEWDForCTC"),gAt.forEach(t),Pgr=r(TNe," (SEW-D model)"),TNe.forEach(t),Bgr=i(Be),v7=n(Be,"LI",{});var MNe=s(v7);Hve=n(MNe,"STRONG",{});var hAt=s(Hve);Igr=r(hAt,"unispeech"),hAt.forEach(t),Ngr=r(MNe," \u2014 "),pH=n(MNe,"A",{href:!0});var pAt=s(pH);qgr=r(pAt,"UniSpeechForCTC"),pAt.forEach(t),jgr=r(MNe," (UniSpeech model)"),MNe.forEach(t),Dgr=i(Be),F7=n(Be,"LI",{});var ENe=s(F7);Uve=n(ENe,"STRONG",{});var _At=s(Uve);Ggr=r(_At,"unispeech-sat"),_At.forEach(t),Ogr=r(ENe," \u2014 "),_H=n(ENe,"A",{href:!0});var uAt=s(_H);Vgr=r(uAt,"UniSpeechSatForCTC"),uAt.forEach(t),Xgr=r(ENe," (UniSpeechSat model)"),ENe.forEach(t),zgr=i(Be),T7=n(Be,"LI",{});var CNe=s(T7);Jve=n(CNe,"STRONG",{});var bAt=s(Jve);Qgr=r(bAt,"wav2vec2"),bAt.forEach(t),Wgr=r(CNe," \u2014 "),uH=n(CNe,"A",{href:!0});var vAt=s(uH);Hgr=r(vAt,"Wav2Vec2ForCTC"),vAt.forEach(t),Ugr=r(CNe," (Wav2Vec2 model)"),CNe.forEach(t),Jgr=i(Be),M7=n(Be,"LI",{});var wNe=s(M7);Yve=n(wNe,"STRONG",{});var FAt=s(Yve);Ygr=r(FAt,"wav2vec2-conformer"),FAt.forEach(t),Kgr=r(wNe," \u2014 "),bH=n(wNe,"A",{href:!0});var TAt=s(bH);Zgr=r(TAt,"Wav2Vec2ConformerForCTC"),TAt.forEach(t),ehr=r(wNe," (Wav2Vec2-Conformer model)"),wNe.forEach(t),ohr=i(Be),E7=n(Be,"LI",{});var ANe=s(E7);Kve=n(ANe,"STRONG",{});var MAt=s(Kve);rhr=r(MAt,"wavlm"),MAt.forEach(t),thr=r(ANe," \u2014 "),vH=n(ANe,"A",{href:!0});var EAt=s(vH);ahr=r(EAt,"WavLMForCTC"),EAt.forEach(t),nhr=r(ANe," (WavLM model)"),ANe.forEach(t),Be.forEach(t),shr=i(Ea),C7=n(Ea,"P",{});var LNe=s(C7);lhr=r(LNe,"The model is set in evaluation mode by default using "),Zve=n(LNe,"CODE",{});var CAt=s(Zve);ihr=r(CAt,"model.eval()"),CAt.forEach(t),dhr=r(LNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=n(LNe,"CODE",{});var wAt=s(eFe);chr=r(wAt,"model.train()"),wAt.forEach(t),LNe.forEach(t),fhr=i(Ea),T(w7.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),jXe=i(f),Nd=n(f,"H2",{class:!0});var zQe=s(Nd);A7=n(zQe,"A",{id:!0,class:!0,href:!0});var AAt=s(A7);oFe=n(AAt,"SPAN",{});var LAt=s(oFe);T(s9.$$.fragment,LAt),LAt.forEach(t),AAt.forEach(t),mhr=i(zQe),rFe=n(zQe,"SPAN",{});var yAt=s(rFe);ghr=r(yAt,"AutoModelForSpeechSeq2Seq"),yAt.forEach(t),zQe.forEach(t),DXe=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(l9.$$.fragment,bl),hhr=i(bl),qd=n(bl,"P",{});var nte=s(qd);phr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FH=n(nte,"A",{href:!0});var xAt=s(FH);_hr=r(xAt,"from_pretrained()"),xAt.forEach(t),uhr=r(nte," class method or the "),TH=n(nte,"A",{href:!0});var $At=s(TH);bhr=r($At,"from_config()"),$At.forEach(t),vhr=r(nte,` class
method.`),nte.forEach(t),Fhr=i(bl),i9=n(bl,"P",{});var QQe=s(i9);Thr=r(QQe,"This class cannot be instantiated directly using "),tFe=n(QQe,"CODE",{});var kAt=s(tFe);Mhr=r(kAt,"__init__()"),kAt.forEach(t),Ehr=r(QQe," (throws an error)."),QQe.forEach(t),Chr=i(bl),wt=n(bl,"DIV",{class:!0});var Gw=s(wt);T(d9.$$.fragment,Gw),whr=i(Gw),aFe=n(Gw,"P",{});var SAt=s(aFe);Ahr=r(SAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SAt.forEach(t),Lhr=i(Gw),jd=n(Gw,"P",{});var ste=s(jd);yhr=r(ste,`Note:
Loading a model from its configuration file does `),nFe=n(ste,"STRONG",{});var RAt=s(nFe);xhr=r(RAt,"not"),RAt.forEach(t),$hr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(ste,"A",{href:!0});var PAt=s(MH);khr=r(PAt,"from_pretrained()"),PAt.forEach(t),Shr=r(ste," to load the model weights."),ste.forEach(t),Rhr=i(Gw),T(L7.$$.fragment,Gw),Gw.forEach(t),Phr=i(bl),ho=n(bl,"DIV",{class:!0});var Ca=s(ho);T(c9.$$.fragment,Ca),Bhr=i(Ca),sFe=n(Ca,"P",{});var BAt=s(sFe);Ihr=r(BAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BAt.forEach(t),Nhr=i(Ca),Ka=n(Ca,"P",{});var Ow=s(Ka);qhr=r(Ow,"The model class to instantiate is selected based on the "),lFe=n(Ow,"CODE",{});var IAt=s(lFe);jhr=r(IAt,"model_type"),IAt.forEach(t),Dhr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),iFe=n(Ow,"CODE",{});var NAt=s(iFe);Ghr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),Ohr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(Ow,"CODE",{});var qAt=s(dFe);Vhr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),Xhr=r(Ow,":"),Ow.forEach(t),zhr=i(Ca),f9=n(Ca,"UL",{});var WQe=s(f9);y7=n(WQe,"LI",{});var yNe=s(y7);cFe=n(yNe,"STRONG",{});var jAt=s(cFe);Qhr=r(jAt,"speech-encoder-decoder"),jAt.forEach(t),Whr=r(yNe," \u2014 "),EH=n(yNe,"A",{href:!0});var DAt=s(EH);Hhr=r(DAt,"SpeechEncoderDecoderModel"),DAt.forEach(t),Uhr=r(yNe," (Speech Encoder decoder model)"),yNe.forEach(t),Jhr=i(WQe),x7=n(WQe,"LI",{});var xNe=s(x7);fFe=n(xNe,"STRONG",{});var GAt=s(fFe);Yhr=r(GAt,"speech_to_text"),GAt.forEach(t),Khr=r(xNe," \u2014 "),CH=n(xNe,"A",{href:!0});var OAt=s(CH);Zhr=r(OAt,"Speech2TextForConditionalGeneration"),OAt.forEach(t),epr=r(xNe," (Speech2Text model)"),xNe.forEach(t),WQe.forEach(t),opr=i(Ca),$7=n(Ca,"P",{});var $Ne=s($7);rpr=r($Ne,"The model is set in evaluation mode by default using "),mFe=n($Ne,"CODE",{});var VAt=s(mFe);tpr=r(VAt,"model.eval()"),VAt.forEach(t),apr=r($Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n($Ne,"CODE",{});var XAt=s(gFe);npr=r(XAt,"model.train()"),XAt.forEach(t),$Ne.forEach(t),spr=i(Ca),T(k7.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),GXe=i(f),Dd=n(f,"H2",{class:!0});var HQe=s(Dd);S7=n(HQe,"A",{id:!0,class:!0,href:!0});var zAt=s(S7);hFe=n(zAt,"SPAN",{});var QAt=s(hFe);T(m9.$$.fragment,QAt),QAt.forEach(t),zAt.forEach(t),lpr=i(HQe),pFe=n(HQe,"SPAN",{});var WAt=s(pFe);ipr=r(WAt,"AutoModelForAudioXVector"),WAt.forEach(t),HQe.forEach(t),OXe=i(f),Ho=n(f,"DIV",{class:!0});var vl=s(Ho);T(g9.$$.fragment,vl),dpr=i(vl),Gd=n(vl,"P",{});var lte=s(Gd);cpr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wH=n(lte,"A",{href:!0});var HAt=s(wH);fpr=r(HAt,"from_pretrained()"),HAt.forEach(t),mpr=r(lte," class method or the "),AH=n(lte,"A",{href:!0});var UAt=s(AH);gpr=r(UAt,"from_config()"),UAt.forEach(t),hpr=r(lte,` class
method.`),lte.forEach(t),ppr=i(vl),h9=n(vl,"P",{});var UQe=s(h9);_pr=r(UQe,"This class cannot be instantiated directly using "),_Fe=n(UQe,"CODE",{});var JAt=s(_Fe);upr=r(JAt,"__init__()"),JAt.forEach(t),bpr=r(UQe," (throws an error)."),UQe.forEach(t),vpr=i(vl),At=n(vl,"DIV",{class:!0});var Vw=s(At);T(p9.$$.fragment,Vw),Fpr=i(Vw),uFe=n(Vw,"P",{});var YAt=s(uFe);Tpr=r(YAt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YAt.forEach(t),Mpr=i(Vw),Od=n(Vw,"P",{});var ite=s(Od);Epr=r(ite,`Note:
Loading a model from its configuration file does `),bFe=n(ite,"STRONG",{});var KAt=s(bFe);Cpr=r(KAt,"not"),KAt.forEach(t),wpr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(ite,"A",{href:!0});var ZAt=s(LH);Apr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),Lpr=r(ite," to load the model weights."),ite.forEach(t),ypr=i(Vw),T(R7.$$.fragment,Vw),Vw.forEach(t),xpr=i(vl),po=n(vl,"DIV",{class:!0});var wa=s(po);T(_9.$$.fragment,wa),$pr=i(wa),vFe=n(wa,"P",{});var eLt=s(vFe);kpr=r(eLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eLt.forEach(t),Spr=i(wa),Za=n(wa,"P",{});var Xw=s(Za);Rpr=r(Xw,"The model class to instantiate is selected based on the "),FFe=n(Xw,"CODE",{});var oLt=s(FFe);Ppr=r(oLt,"model_type"),oLt.forEach(t),Bpr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),TFe=n(Xw,"CODE",{});var rLt=s(TFe);Ipr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),Npr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(Xw,"CODE",{});var tLt=s(MFe);qpr=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),jpr=r(Xw,":"),Xw.forEach(t),Dpr=i(wa),ot=n(wa,"UL",{});var Fl=s(ot);P7=n(Fl,"LI",{});var kNe=s(P7);EFe=n(kNe,"STRONG",{});var aLt=s(EFe);Gpr=r(aLt,"data2vec-audio"),aLt.forEach(t),Opr=r(kNe," \u2014 "),yH=n(kNe,"A",{href:!0});var nLt=s(yH);Vpr=r(nLt,"Data2VecAudioForXVector"),nLt.forEach(t),Xpr=r(kNe," (Data2VecAudio model)"),kNe.forEach(t),zpr=i(Fl),B7=n(Fl,"LI",{});var SNe=s(B7);CFe=n(SNe,"STRONG",{});var sLt=s(CFe);Qpr=r(sLt,"unispeech-sat"),sLt.forEach(t),Wpr=r(SNe," \u2014 "),xH=n(SNe,"A",{href:!0});var lLt=s(xH);Hpr=r(lLt,"UniSpeechSatForXVector"),lLt.forEach(t),Upr=r(SNe," (UniSpeechSat model)"),SNe.forEach(t),Jpr=i(Fl),I7=n(Fl,"LI",{});var RNe=s(I7);wFe=n(RNe,"STRONG",{});var iLt=s(wFe);Ypr=r(iLt,"wav2vec2"),iLt.forEach(t),Kpr=r(RNe," \u2014 "),$H=n(RNe,"A",{href:!0});var dLt=s($H);Zpr=r(dLt,"Wav2Vec2ForXVector"),dLt.forEach(t),e_r=r(RNe," (Wav2Vec2 model)"),RNe.forEach(t),o_r=i(Fl),N7=n(Fl,"LI",{});var PNe=s(N7);AFe=n(PNe,"STRONG",{});var cLt=s(AFe);r_r=r(cLt,"wav2vec2-conformer"),cLt.forEach(t),t_r=r(PNe," \u2014 "),kH=n(PNe,"A",{href:!0});var fLt=s(kH);a_r=r(fLt,"Wav2Vec2ConformerForXVector"),fLt.forEach(t),n_r=r(PNe," (Wav2Vec2-Conformer model)"),PNe.forEach(t),s_r=i(Fl),q7=n(Fl,"LI",{});var BNe=s(q7);LFe=n(BNe,"STRONG",{});var mLt=s(LFe);l_r=r(mLt,"wavlm"),mLt.forEach(t),i_r=r(BNe," \u2014 "),SH=n(BNe,"A",{href:!0});var gLt=s(SH);d_r=r(gLt,"WavLMForXVector"),gLt.forEach(t),c_r=r(BNe," (WavLM model)"),BNe.forEach(t),Fl.forEach(t),f_r=i(wa),j7=n(wa,"P",{});var INe=s(j7);m_r=r(INe,"The model is set in evaluation mode by default using "),yFe=n(INe,"CODE",{});var hLt=s(yFe);g_r=r(hLt,"model.eval()"),hLt.forEach(t),h_r=r(INe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(INe,"CODE",{});var pLt=s(xFe);p_r=r(pLt,"model.train()"),pLt.forEach(t),INe.forEach(t),__r=i(wa),T(D7.$$.fragment,wa),wa.forEach(t),vl.forEach(t),VXe=i(f),Vd=n(f,"H2",{class:!0});var JQe=s(Vd);G7=n(JQe,"A",{id:!0,class:!0,href:!0});var _Lt=s(G7);$Fe=n(_Lt,"SPAN",{});var uLt=s($Fe);T(u9.$$.fragment,uLt),uLt.forEach(t),_Lt.forEach(t),u_r=i(JQe),kFe=n(JQe,"SPAN",{});var bLt=s(kFe);b_r=r(bLt,"AutoModelForMaskedImageModeling"),bLt.forEach(t),JQe.forEach(t),XXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(b9.$$.fragment,Tl),v_r=i(Tl),Xd=n(Tl,"P",{});var dte=s(Xd);F_r=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RH=n(dte,"A",{href:!0});var vLt=s(RH);T_r=r(vLt,"from_pretrained()"),vLt.forEach(t),M_r=r(dte," class method or the "),PH=n(dte,"A",{href:!0});var FLt=s(PH);E_r=r(FLt,"from_config()"),FLt.forEach(t),C_r=r(dte,` class
method.`),dte.forEach(t),w_r=i(Tl),v9=n(Tl,"P",{});var YQe=s(v9);A_r=r(YQe,"This class cannot be instantiated directly using "),SFe=n(YQe,"CODE",{});var TLt=s(SFe);L_r=r(TLt,"__init__()"),TLt.forEach(t),y_r=r(YQe," (throws an error)."),YQe.forEach(t),x_r=i(Tl),Lt=n(Tl,"DIV",{class:!0});var zw=s(Lt);T(F9.$$.fragment,zw),$_r=i(zw),RFe=n(zw,"P",{});var MLt=s(RFe);k_r=r(MLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),MLt.forEach(t),S_r=i(zw),zd=n(zw,"P",{});var cte=s(zd);R_r=r(cte,`Note:
Loading a model from its configuration file does `),PFe=n(cte,"STRONG",{});var ELt=s(PFe);P_r=r(ELt,"not"),ELt.forEach(t),B_r=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(cte,"A",{href:!0});var CLt=s(BH);I_r=r(CLt,"from_pretrained()"),CLt.forEach(t),N_r=r(cte," to load the model weights."),cte.forEach(t),q_r=i(zw),T(O7.$$.fragment,zw),zw.forEach(t),j_r=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(T9.$$.fragment,Aa),D_r=i(Aa),BFe=n(Aa,"P",{});var wLt=s(BFe);G_r=r(wLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wLt.forEach(t),O_r=i(Aa),en=n(Aa,"P",{});var Qw=s(en);V_r=r(Qw,"The model class to instantiate is selected based on the "),IFe=n(Qw,"CODE",{});var ALt=s(IFe);X_r=r(ALt,"model_type"),ALt.forEach(t),z_r=r(Qw,` property of the config object (either
passed as an argument or loaded from `),NFe=n(Qw,"CODE",{});var LLt=s(NFe);Q_r=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),W_r=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(Qw,"CODE",{});var yLt=s(qFe);H_r=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),U_r=r(Qw,":"),Qw.forEach(t),J_r=i(Aa),Qd=n(Aa,"UL",{});var fte=s(Qd);V7=n(fte,"LI",{});var NNe=s(V7);jFe=n(NNe,"STRONG",{});var xLt=s(jFe);Y_r=r(xLt,"deit"),xLt.forEach(t),K_r=r(NNe," \u2014 "),IH=n(NNe,"A",{href:!0});var $Lt=s(IH);Z_r=r($Lt,"DeiTForMaskedImageModeling"),$Lt.forEach(t),eur=r(NNe," (DeiT model)"),NNe.forEach(t),our=i(fte),X7=n(fte,"LI",{});var qNe=s(X7);DFe=n(qNe,"STRONG",{});var kLt=s(DFe);rur=r(kLt,"swin"),kLt.forEach(t),tur=r(qNe," \u2014 "),NH=n(qNe,"A",{href:!0});var SLt=s(NH);aur=r(SLt,"SwinForMaskedImageModeling"),SLt.forEach(t),nur=r(qNe," (Swin Transformer model)"),qNe.forEach(t),sur=i(fte),z7=n(fte,"LI",{});var jNe=s(z7);GFe=n(jNe,"STRONG",{});var RLt=s(GFe);lur=r(RLt,"vit"),RLt.forEach(t),iur=r(jNe," \u2014 "),qH=n(jNe,"A",{href:!0});var PLt=s(qH);dur=r(PLt,"ViTForMaskedImageModeling"),PLt.forEach(t),cur=r(jNe," (ViT model)"),jNe.forEach(t),fte.forEach(t),fur=i(Aa),Q7=n(Aa,"P",{});var DNe=s(Q7);mur=r(DNe,"The model is set in evaluation mode by default using "),OFe=n(DNe,"CODE",{});var BLt=s(OFe);gur=r(BLt,"model.eval()"),BLt.forEach(t),hur=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(DNe,"CODE",{});var ILt=s(VFe);pur=r(ILt,"model.train()"),ILt.forEach(t),DNe.forEach(t),_ur=i(Aa),T(W7.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),zXe=i(f),Wd=n(f,"H2",{class:!0});var KQe=s(Wd);H7=n(KQe,"A",{id:!0,class:!0,href:!0});var NLt=s(H7);XFe=n(NLt,"SPAN",{});var qLt=s(XFe);T(M9.$$.fragment,qLt),qLt.forEach(t),NLt.forEach(t),uur=i(KQe),zFe=n(KQe,"SPAN",{});var jLt=s(zFe);bur=r(jLt,"AutoModelForObjectDetection"),jLt.forEach(t),KQe.forEach(t),QXe=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(E9.$$.fragment,Ml),vur=i(Ml),Hd=n(Ml,"P",{});var mte=s(Hd);Fur=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jH=n(mte,"A",{href:!0});var DLt=s(jH);Tur=r(DLt,"from_pretrained()"),DLt.forEach(t),Mur=r(mte," class method or the "),DH=n(mte,"A",{href:!0});var GLt=s(DH);Eur=r(GLt,"from_config()"),GLt.forEach(t),Cur=r(mte,` class
method.`),mte.forEach(t),wur=i(Ml),C9=n(Ml,"P",{});var ZQe=s(C9);Aur=r(ZQe,"This class cannot be instantiated directly using "),QFe=n(ZQe,"CODE",{});var OLt=s(QFe);Lur=r(OLt,"__init__()"),OLt.forEach(t),yur=r(ZQe," (throws an error)."),ZQe.forEach(t),xur=i(Ml),yt=n(Ml,"DIV",{class:!0});var Ww=s(yt);T(w9.$$.fragment,Ww),$ur=i(Ww),WFe=n(Ww,"P",{});var VLt=s(WFe);kur=r(VLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),VLt.forEach(t),Sur=i(Ww),Ud=n(Ww,"P",{});var gte=s(Ud);Rur=r(gte,`Note:
Loading a model from its configuration file does `),HFe=n(gte,"STRONG",{});var XLt=s(HFe);Pur=r(XLt,"not"),XLt.forEach(t),Bur=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(gte,"A",{href:!0});var zLt=s(GH);Iur=r(zLt,"from_pretrained()"),zLt.forEach(t),Nur=r(gte," to load the model weights."),gte.forEach(t),qur=i(Ww),T(U7.$$.fragment,Ww),Ww.forEach(t),jur=i(Ml),uo=n(Ml,"DIV",{class:!0});var La=s(uo);T(A9.$$.fragment,La),Dur=i(La),UFe=n(La,"P",{});var QLt=s(UFe);Gur=r(QLt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),QLt.forEach(t),Our=i(La),on=n(La,"P",{});var Hw=s(on);Vur=r(Hw,"The model class to instantiate is selected based on the "),JFe=n(Hw,"CODE",{});var WLt=s(JFe);Xur=r(WLt,"model_type"),WLt.forEach(t),zur=r(Hw,` property of the config object (either
passed as an argument or loaded from `),YFe=n(Hw,"CODE",{});var HLt=s(YFe);Qur=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),Wur=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(Hw,"CODE",{});var ULt=s(KFe);Hur=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),Uur=r(Hw,":"),Hw.forEach(t),Jur=i(La),L9=n(La,"UL",{});var eWe=s(L9);J7=n(eWe,"LI",{});var GNe=s(J7);ZFe=n(GNe,"STRONG",{});var JLt=s(ZFe);Yur=r(JLt,"detr"),JLt.forEach(t),Kur=r(GNe," \u2014 "),OH=n(GNe,"A",{href:!0});var YLt=s(OH);Zur=r(YLt,"DetrForObjectDetection"),YLt.forEach(t),e2r=r(GNe," (DETR model)"),GNe.forEach(t),o2r=i(eWe),Y7=n(eWe,"LI",{});var ONe=s(Y7);e6e=n(ONe,"STRONG",{});var KLt=s(e6e);r2r=r(KLt,"yolos"),KLt.forEach(t),t2r=r(ONe," \u2014 "),VH=n(ONe,"A",{href:!0});var ZLt=s(VH);a2r=r(ZLt,"YolosForObjectDetection"),ZLt.forEach(t),n2r=r(ONe," (YOLOS model)"),ONe.forEach(t),eWe.forEach(t),s2r=i(La),K7=n(La,"P",{});var VNe=s(K7);l2r=r(VNe,"The model is set in evaluation mode by default using "),o6e=n(VNe,"CODE",{});var eyt=s(o6e);i2r=r(eyt,"model.eval()"),eyt.forEach(t),d2r=r(VNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r6e=n(VNe,"CODE",{});var oyt=s(r6e);c2r=r(oyt,"model.train()"),oyt.forEach(t),VNe.forEach(t),f2r=i(La),T(Z7.$$.fragment,La),La.forEach(t),Ml.forEach(t),WXe=i(f),Jd=n(f,"H2",{class:!0});var oWe=s(Jd);e8=n(oWe,"A",{id:!0,class:!0,href:!0});var ryt=s(e8);t6e=n(ryt,"SPAN",{});var tyt=s(t6e);T(y9.$$.fragment,tyt),tyt.forEach(t),ryt.forEach(t),m2r=i(oWe),a6e=n(oWe,"SPAN",{});var ayt=s(a6e);g2r=r(ayt,"AutoModelForImageSegmentation"),ayt.forEach(t),oWe.forEach(t),HXe=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T(x9.$$.fragment,El),h2r=i(El),Yd=n(El,"P",{});var hte=s(Yd);p2r=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XH=n(hte,"A",{href:!0});var nyt=s(XH);_2r=r(nyt,"from_pretrained()"),nyt.forEach(t),u2r=r(hte," class method or the "),zH=n(hte,"A",{href:!0});var syt=s(zH);b2r=r(syt,"from_config()"),syt.forEach(t),v2r=r(hte,` class
method.`),hte.forEach(t),F2r=i(El),$9=n(El,"P",{});var rWe=s($9);T2r=r(rWe,"This class cannot be instantiated directly using "),n6e=n(rWe,"CODE",{});var lyt=s(n6e);M2r=r(lyt,"__init__()"),lyt.forEach(t),E2r=r(rWe," (throws an error)."),rWe.forEach(t),C2r=i(El),xt=n(El,"DIV",{class:!0});var Uw=s(xt);T(k9.$$.fragment,Uw),w2r=i(Uw),s6e=n(Uw,"P",{});var iyt=s(s6e);A2r=r(iyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),iyt.forEach(t),L2r=i(Uw),Kd=n(Uw,"P",{});var pte=s(Kd);y2r=r(pte,`Note:
Loading a model from its configuration file does `),l6e=n(pte,"STRONG",{});var dyt=s(l6e);x2r=r(dyt,"not"),dyt.forEach(t),$2r=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(pte,"A",{href:!0});var cyt=s(QH);k2r=r(cyt,"from_pretrained()"),cyt.forEach(t),S2r=r(pte," to load the model weights."),pte.forEach(t),R2r=i(Uw),T(o8.$$.fragment,Uw),Uw.forEach(t),P2r=i(El),bo=n(El,"DIV",{class:!0});var ya=s(bo);T(S9.$$.fragment,ya),B2r=i(ya),i6e=n(ya,"P",{});var fyt=s(i6e);I2r=r(fyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fyt.forEach(t),N2r=i(ya),rn=n(ya,"P",{});var Jw=s(rn);q2r=r(Jw,"The model class to instantiate is selected based on the "),d6e=n(Jw,"CODE",{});var myt=s(d6e);j2r=r(myt,"model_type"),myt.forEach(t),D2r=r(Jw,` property of the config object (either
passed as an argument or loaded from `),c6e=n(Jw,"CODE",{});var gyt=s(c6e);G2r=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),O2r=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(Jw,"CODE",{});var hyt=s(f6e);V2r=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),X2r=r(Jw,":"),Jw.forEach(t),z2r=i(ya),m6e=n(ya,"UL",{});var pyt=s(m6e);r8=n(pyt,"LI",{});var XNe=s(r8);g6e=n(XNe,"STRONG",{});var _yt=s(g6e);Q2r=r(_yt,"detr"),_yt.forEach(t),W2r=r(XNe," \u2014 "),WH=n(XNe,"A",{href:!0});var uyt=s(WH);H2r=r(uyt,"DetrForSegmentation"),uyt.forEach(t),U2r=r(XNe," (DETR model)"),XNe.forEach(t),pyt.forEach(t),J2r=i(ya),t8=n(ya,"P",{});var zNe=s(t8);Y2r=r(zNe,"The model is set in evaluation mode by default using "),h6e=n(zNe,"CODE",{});var byt=s(h6e);K2r=r(byt,"model.eval()"),byt.forEach(t),Z2r=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p6e=n(zNe,"CODE",{});var vyt=s(p6e);e1r=r(vyt,"model.train()"),vyt.forEach(t),zNe.forEach(t),o1r=i(ya),T(a8.$$.fragment,ya),ya.forEach(t),El.forEach(t),UXe=i(f),Zd=n(f,"H2",{class:!0});var tWe=s(Zd);n8=n(tWe,"A",{id:!0,class:!0,href:!0});var Fyt=s(n8);_6e=n(Fyt,"SPAN",{});var Tyt=s(_6e);T(R9.$$.fragment,Tyt),Tyt.forEach(t),Fyt.forEach(t),r1r=i(tWe),u6e=n(tWe,"SPAN",{});var Myt=s(u6e);t1r=r(Myt,"AutoModelForSemanticSegmentation"),Myt.forEach(t),tWe.forEach(t),JXe=i(f),Ko=n(f,"DIV",{class:!0});var Cl=s(Ko);T(P9.$$.fragment,Cl),a1r=i(Cl),ec=n(Cl,"P",{});var _te=s(ec);n1r=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HH=n(_te,"A",{href:!0});var Eyt=s(HH);s1r=r(Eyt,"from_pretrained()"),Eyt.forEach(t),l1r=r(_te," class method or the "),UH=n(_te,"A",{href:!0});var Cyt=s(UH);i1r=r(Cyt,"from_config()"),Cyt.forEach(t),d1r=r(_te,` class
method.`),_te.forEach(t),c1r=i(Cl),B9=n(Cl,"P",{});var aWe=s(B9);f1r=r(aWe,"This class cannot be instantiated directly using "),b6e=n(aWe,"CODE",{});var wyt=s(b6e);m1r=r(wyt,"__init__()"),wyt.forEach(t),g1r=r(aWe," (throws an error)."),aWe.forEach(t),h1r=i(Cl),$t=n(Cl,"DIV",{class:!0});var Yw=s($t);T(I9.$$.fragment,Yw),p1r=i(Yw),v6e=n(Yw,"P",{});var Ayt=s(v6e);_1r=r(Ayt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ayt.forEach(t),u1r=i(Yw),oc=n(Yw,"P",{});var ute=s(oc);b1r=r(ute,`Note:
Loading a model from its configuration file does `),F6e=n(ute,"STRONG",{});var Lyt=s(F6e);v1r=r(Lyt,"not"),Lyt.forEach(t),F1r=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(ute,"A",{href:!0});var yyt=s(JH);T1r=r(yyt,"from_pretrained()"),yyt.forEach(t),M1r=r(ute," to load the model weights."),ute.forEach(t),E1r=i(Yw),T(s8.$$.fragment,Yw),Yw.forEach(t),C1r=i(Cl),vo=n(Cl,"DIV",{class:!0});var xa=s(vo);T(N9.$$.fragment,xa),w1r=i(xa),T6e=n(xa,"P",{});var xyt=s(T6e);A1r=r(xyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),xyt.forEach(t),L1r=i(xa),tn=n(xa,"P",{});var Kw=s(tn);y1r=r(Kw,"The model class to instantiate is selected based on the "),M6e=n(Kw,"CODE",{});var $yt=s(M6e);x1r=r($yt,"model_type"),$yt.forEach(t),$1r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),E6e=n(Kw,"CODE",{});var kyt=s(E6e);k1r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),S1r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(Kw,"CODE",{});var Syt=s(C6e);R1r=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),P1r=r(Kw,":"),Kw.forEach(t),B1r=i(xa),rt=n(xa,"UL",{});var wl=s(rt);l8=n(wl,"LI",{});var QNe=s(l8);w6e=n(QNe,"STRONG",{});var Ryt=s(w6e);I1r=r(Ryt,"beit"),Ryt.forEach(t),N1r=r(QNe," \u2014 "),YH=n(QNe,"A",{href:!0});var Pyt=s(YH);q1r=r(Pyt,"BeitForSemanticSegmentation"),Pyt.forEach(t),j1r=r(QNe," (BEiT model)"),QNe.forEach(t),D1r=i(wl),i8=n(wl,"LI",{});var WNe=s(i8);A6e=n(WNe,"STRONG",{});var Byt=s(A6e);G1r=r(Byt,"data2vec-vision"),Byt.forEach(t),O1r=r(WNe," \u2014 "),KH=n(WNe,"A",{href:!0});var Iyt=s(KH);V1r=r(Iyt,"Data2VecVisionForSemanticSegmentation"),Iyt.forEach(t),X1r=r(WNe," (Data2VecVision model)"),WNe.forEach(t),z1r=i(wl),d8=n(wl,"LI",{});var HNe=s(d8);L6e=n(HNe,"STRONG",{});var Nyt=s(L6e);Q1r=r(Nyt,"dpt"),Nyt.forEach(t),W1r=r(HNe," \u2014 "),ZH=n(HNe,"A",{href:!0});var qyt=s(ZH);H1r=r(qyt,"DPTForSemanticSegmentation"),qyt.forEach(t),U1r=r(HNe," (DPT model)"),HNe.forEach(t),J1r=i(wl),c8=n(wl,"LI",{});var UNe=s(c8);y6e=n(UNe,"STRONG",{});var jyt=s(y6e);Y1r=r(jyt,"mobilevit"),jyt.forEach(t),K1r=r(UNe," \u2014 "),eU=n(UNe,"A",{href:!0});var Dyt=s(eU);Z1r=r(Dyt,"MobileViTForSemanticSegmentation"),Dyt.forEach(t),ebr=r(UNe," (MobileViT model)"),UNe.forEach(t),obr=i(wl),f8=n(wl,"LI",{});var JNe=s(f8);x6e=n(JNe,"STRONG",{});var Gyt=s(x6e);rbr=r(Gyt,"segformer"),Gyt.forEach(t),tbr=r(JNe," \u2014 "),oU=n(JNe,"A",{href:!0});var Oyt=s(oU);abr=r(Oyt,"SegformerForSemanticSegmentation"),Oyt.forEach(t),nbr=r(JNe," (SegFormer model)"),JNe.forEach(t),wl.forEach(t),sbr=i(xa),m8=n(xa,"P",{});var YNe=s(m8);lbr=r(YNe,"The model is set in evaluation mode by default using "),$6e=n(YNe,"CODE",{});var Vyt=s($6e);ibr=r(Vyt,"model.eval()"),Vyt.forEach(t),dbr=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k6e=n(YNe,"CODE",{});var Xyt=s(k6e);cbr=r(Xyt,"model.train()"),Xyt.forEach(t),YNe.forEach(t),fbr=i(xa),T(g8.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),YXe=i(f),rc=n(f,"H2",{class:!0});var nWe=s(rc);h8=n(nWe,"A",{id:!0,class:!0,href:!0});var zyt=s(h8);S6e=n(zyt,"SPAN",{});var Qyt=s(S6e);T(q9.$$.fragment,Qyt),Qyt.forEach(t),zyt.forEach(t),mbr=i(nWe),R6e=n(nWe,"SPAN",{});var Wyt=s(R6e);gbr=r(Wyt,"AutoModelForInstanceSegmentation"),Wyt.forEach(t),nWe.forEach(t),KXe=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(j9.$$.fragment,Al),hbr=i(Al),tc=n(Al,"P",{});var bte=s(tc);pbr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rU=n(bte,"A",{href:!0});var Hyt=s(rU);_br=r(Hyt,"from_pretrained()"),Hyt.forEach(t),ubr=r(bte," class method or the "),tU=n(bte,"A",{href:!0});var Uyt=s(tU);bbr=r(Uyt,"from_config()"),Uyt.forEach(t),vbr=r(bte,` class
method.`),bte.forEach(t),Fbr=i(Al),D9=n(Al,"P",{});var sWe=s(D9);Tbr=r(sWe,"This class cannot be instantiated directly using "),P6e=n(sWe,"CODE",{});var Jyt=s(P6e);Mbr=r(Jyt,"__init__()"),Jyt.forEach(t),Ebr=r(sWe," (throws an error)."),sWe.forEach(t),Cbr=i(Al),kt=n(Al,"DIV",{class:!0});var Zw=s(kt);T(G9.$$.fragment,Zw),wbr=i(Zw),B6e=n(Zw,"P",{});var Yyt=s(B6e);Abr=r(Yyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Yyt.forEach(t),Lbr=i(Zw),ac=n(Zw,"P",{});var vte=s(ac);ybr=r(vte,`Note:
Loading a model from its configuration file does `),I6e=n(vte,"STRONG",{});var Kyt=s(I6e);xbr=r(Kyt,"not"),Kyt.forEach(t),$br=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(vte,"A",{href:!0});var Zyt=s(aU);kbr=r(Zyt,"from_pretrained()"),Zyt.forEach(t),Sbr=r(vte," to load the model weights."),vte.forEach(t),Rbr=i(Zw),T(p8.$$.fragment,Zw),Zw.forEach(t),Pbr=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(O9.$$.fragment,$a),Bbr=i($a),N6e=n($a,"P",{});var e9t=s(N6e);Ibr=r(e9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),e9t.forEach(t),Nbr=i($a),an=n($a,"P",{});var eA=s(an);qbr=r(eA,"The model class to instantiate is selected based on the "),q6e=n(eA,"CODE",{});var o9t=s(q6e);jbr=r(o9t,"model_type"),o9t.forEach(t),Dbr=r(eA,` property of the config object (either
passed as an argument or loaded from `),j6e=n(eA,"CODE",{});var r9t=s(j6e);Gbr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),Obr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=n(eA,"CODE",{});var t9t=s(D6e);Vbr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),Xbr=r(eA,":"),eA.forEach(t),zbr=i($a),G6e=n($a,"UL",{});var a9t=s(G6e);_8=n(a9t,"LI",{});var KNe=s(_8);O6e=n(KNe,"STRONG",{});var n9t=s(O6e);Qbr=r(n9t,"maskformer"),n9t.forEach(t),Wbr=r(KNe," \u2014 "),nU=n(KNe,"A",{href:!0});var s9t=s(nU);Hbr=r(s9t,"MaskFormerForInstanceSegmentation"),s9t.forEach(t),Ubr=r(KNe," (MaskFormer model)"),KNe.forEach(t),a9t.forEach(t),Jbr=i($a),u8=n($a,"P",{});var ZNe=s(u8);Ybr=r(ZNe,"The model is set in evaluation mode by default using "),V6e=n(ZNe,"CODE",{});var l9t=s(V6e);Kbr=r(l9t,"model.eval()"),l9t.forEach(t),Zbr=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X6e=n(ZNe,"CODE",{});var i9t=s(X6e);evr=r(i9t,"model.train()"),i9t.forEach(t),ZNe.forEach(t),ovr=i($a),T(b8.$$.fragment,$a),$a.forEach(t),Al.forEach(t),ZXe=i(f),nc=n(f,"H2",{class:!0});var lWe=s(nc);v8=n(lWe,"A",{id:!0,class:!0,href:!0});var d9t=s(v8);z6e=n(d9t,"SPAN",{});var c9t=s(z6e);T(V9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),rvr=i(lWe),Q6e=n(lWe,"SPAN",{});var f9t=s(Q6e);tvr=r(f9t,"TFAutoModel"),f9t.forEach(t),lWe.forEach(t),eze=i(f),er=n(f,"DIV",{class:!0});var Ll=s(er);T(X9.$$.fragment,Ll),avr=i(Ll),sc=n(Ll,"P",{});var Fte=s(sc);nvr=r(Fte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sU=n(Fte,"A",{href:!0});var m9t=s(sU);svr=r(m9t,"from_pretrained()"),m9t.forEach(t),lvr=r(Fte," class method or the "),lU=n(Fte,"A",{href:!0});var g9t=s(lU);ivr=r(g9t,"from_config()"),g9t.forEach(t),dvr=r(Fte,` class
method.`),Fte.forEach(t),cvr=i(Ll),z9=n(Ll,"P",{});var iWe=s(z9);fvr=r(iWe,"This class cannot be instantiated directly using "),W6e=n(iWe,"CODE",{});var h9t=s(W6e);mvr=r(h9t,"__init__()"),h9t.forEach(t),gvr=r(iWe," (throws an error)."),iWe.forEach(t),hvr=i(Ll),St=n(Ll,"DIV",{class:!0});var oA=s(St);T(Q9.$$.fragment,oA),pvr=i(oA),H6e=n(oA,"P",{});var p9t=s(H6e);_vr=r(p9t,"Instantiates one of the base model classes of the library from a configuration."),p9t.forEach(t),uvr=i(oA),lc=n(oA,"P",{});var Tte=s(lc);bvr=r(Tte,`Note:
Loading a model from its configuration file does `),U6e=n(Tte,"STRONG",{});var _9t=s(U6e);vvr=r(_9t,"not"),_9t.forEach(t),Fvr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Tte,"A",{href:!0});var u9t=s(iU);Tvr=r(u9t,"from_pretrained()"),u9t.forEach(t),Mvr=r(Tte," to load the model weights."),Tte.forEach(t),Evr=i(oA),T(F8.$$.fragment,oA),oA.forEach(t),Cvr=i(Ll),yr=n(Ll,"DIV",{class:!0});var yl=s(yr);T(W9.$$.fragment,yl),wvr=i(yl),J6e=n(yl,"P",{});var b9t=s(J6e);Avr=r(b9t,"Instantiate one of the base model classes of the library from a pretrained model."),b9t.forEach(t),Lvr=i(yl),nn=n(yl,"P",{});var rA=s(nn);yvr=r(rA,"The model class to instantiate is selected based on the "),Y6e=n(rA,"CODE",{});var v9t=s(Y6e);xvr=r(v9t,"model_type"),v9t.forEach(t),$vr=r(rA,` property of the config object (either
passed as an argument or loaded from `),K6e=n(rA,"CODE",{});var F9t=s(K6e);kvr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),Svr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(rA,"CODE",{});var T9t=s(Z6e);Rvr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),Pvr=r(rA,":"),rA.forEach(t),Bvr=i(yl),j=n(yl,"UL",{});var D=s(j);T8=n(D,"LI",{});var eqe=s(T8);eTe=n(eqe,"STRONG",{});var M9t=s(eTe);Ivr=r(M9t,"albert"),M9t.forEach(t),Nvr=r(eqe," \u2014 "),dU=n(eqe,"A",{href:!0});var E9t=s(dU);qvr=r(E9t,"TFAlbertModel"),E9t.forEach(t),jvr=r(eqe," (ALBERT model)"),eqe.forEach(t),Dvr=i(D),M8=n(D,"LI",{});var oqe=s(M8);oTe=n(oqe,"STRONG",{});var C9t=s(oTe);Gvr=r(C9t,"bart"),C9t.forEach(t),Ovr=r(oqe," \u2014 "),cU=n(oqe,"A",{href:!0});var w9t=s(cU);Vvr=r(w9t,"TFBartModel"),w9t.forEach(t),Xvr=r(oqe," (BART model)"),oqe.forEach(t),zvr=i(D),E8=n(D,"LI",{});var rqe=s(E8);rTe=n(rqe,"STRONG",{});var A9t=s(rTe);Qvr=r(A9t,"bert"),A9t.forEach(t),Wvr=r(rqe," \u2014 "),fU=n(rqe,"A",{href:!0});var L9t=s(fU);Hvr=r(L9t,"TFBertModel"),L9t.forEach(t),Uvr=r(rqe," (BERT model)"),rqe.forEach(t),Jvr=i(D),C8=n(D,"LI",{});var tqe=s(C8);tTe=n(tqe,"STRONG",{});var y9t=s(tTe);Yvr=r(y9t,"blenderbot"),y9t.forEach(t),Kvr=r(tqe," \u2014 "),mU=n(tqe,"A",{href:!0});var x9t=s(mU);Zvr=r(x9t,"TFBlenderbotModel"),x9t.forEach(t),eFr=r(tqe," (Blenderbot model)"),tqe.forEach(t),oFr=i(D),w8=n(D,"LI",{});var aqe=s(w8);aTe=n(aqe,"STRONG",{});var $9t=s(aTe);rFr=r($9t,"blenderbot-small"),$9t.forEach(t),tFr=r(aqe," \u2014 "),gU=n(aqe,"A",{href:!0});var k9t=s(gU);aFr=r(k9t,"TFBlenderbotSmallModel"),k9t.forEach(t),nFr=r(aqe," (BlenderbotSmall model)"),aqe.forEach(t),sFr=i(D),A8=n(D,"LI",{});var nqe=s(A8);nTe=n(nqe,"STRONG",{});var S9t=s(nTe);lFr=r(S9t,"camembert"),S9t.forEach(t),iFr=r(nqe," \u2014 "),hU=n(nqe,"A",{href:!0});var R9t=s(hU);dFr=r(R9t,"TFCamembertModel"),R9t.forEach(t),cFr=r(nqe," (CamemBERT model)"),nqe.forEach(t),fFr=i(D),L8=n(D,"LI",{});var sqe=s(L8);sTe=n(sqe,"STRONG",{});var P9t=s(sTe);mFr=r(P9t,"clip"),P9t.forEach(t),gFr=r(sqe," \u2014 "),pU=n(sqe,"A",{href:!0});var B9t=s(pU);hFr=r(B9t,"TFCLIPModel"),B9t.forEach(t),pFr=r(sqe," (CLIP model)"),sqe.forEach(t),_Fr=i(D),y8=n(D,"LI",{});var lqe=s(y8);lTe=n(lqe,"STRONG",{});var I9t=s(lTe);uFr=r(I9t,"convbert"),I9t.forEach(t),bFr=r(lqe," \u2014 "),_U=n(lqe,"A",{href:!0});var N9t=s(_U);vFr=r(N9t,"TFConvBertModel"),N9t.forEach(t),FFr=r(lqe," (ConvBERT model)"),lqe.forEach(t),TFr=i(D),x8=n(D,"LI",{});var iqe=s(x8);iTe=n(iqe,"STRONG",{});var q9t=s(iTe);MFr=r(q9t,"convnext"),q9t.forEach(t),EFr=r(iqe," \u2014 "),uU=n(iqe,"A",{href:!0});var j9t=s(uU);CFr=r(j9t,"TFConvNextModel"),j9t.forEach(t),wFr=r(iqe," (ConvNeXT model)"),iqe.forEach(t),AFr=i(D),$8=n(D,"LI",{});var dqe=s($8);dTe=n(dqe,"STRONG",{});var D9t=s(dTe);LFr=r(D9t,"ctrl"),D9t.forEach(t),yFr=r(dqe," \u2014 "),bU=n(dqe,"A",{href:!0});var G9t=s(bU);xFr=r(G9t,"TFCTRLModel"),G9t.forEach(t),$Fr=r(dqe," (CTRL model)"),dqe.forEach(t),kFr=i(D),k8=n(D,"LI",{});var cqe=s(k8);cTe=n(cqe,"STRONG",{});var O9t=s(cTe);SFr=r(O9t,"data2vec-vision"),O9t.forEach(t),RFr=r(cqe," \u2014 "),vU=n(cqe,"A",{href:!0});var V9t=s(vU);PFr=r(V9t,"TFData2VecVisionModel"),V9t.forEach(t),BFr=r(cqe," (Data2VecVision model)"),cqe.forEach(t),IFr=i(D),S8=n(D,"LI",{});var fqe=s(S8);fTe=n(fqe,"STRONG",{});var X9t=s(fTe);NFr=r(X9t,"deberta"),X9t.forEach(t),qFr=r(fqe," \u2014 "),FU=n(fqe,"A",{href:!0});var z9t=s(FU);jFr=r(z9t,"TFDebertaModel"),z9t.forEach(t),DFr=r(fqe," (DeBERTa model)"),fqe.forEach(t),GFr=i(D),R8=n(D,"LI",{});var mqe=s(R8);mTe=n(mqe,"STRONG",{});var Q9t=s(mTe);OFr=r(Q9t,"deberta-v2"),Q9t.forEach(t),VFr=r(mqe," \u2014 "),TU=n(mqe,"A",{href:!0});var W9t=s(TU);XFr=r(W9t,"TFDebertaV2Model"),W9t.forEach(t),zFr=r(mqe," (DeBERTa-v2 model)"),mqe.forEach(t),QFr=i(D),P8=n(D,"LI",{});var gqe=s(P8);gTe=n(gqe,"STRONG",{});var H9t=s(gTe);WFr=r(H9t,"distilbert"),H9t.forEach(t),HFr=r(gqe," \u2014 "),MU=n(gqe,"A",{href:!0});var U9t=s(MU);UFr=r(U9t,"TFDistilBertModel"),U9t.forEach(t),JFr=r(gqe," (DistilBERT model)"),gqe.forEach(t),YFr=i(D),B8=n(D,"LI",{});var hqe=s(B8);hTe=n(hqe,"STRONG",{});var J9t=s(hTe);KFr=r(J9t,"dpr"),J9t.forEach(t),ZFr=r(hqe," \u2014 "),EU=n(hqe,"A",{href:!0});var Y9t=s(EU);e6r=r(Y9t,"TFDPRQuestionEncoder"),Y9t.forEach(t),o6r=r(hqe," (DPR model)"),hqe.forEach(t),r6r=i(D),I8=n(D,"LI",{});var pqe=s(I8);pTe=n(pqe,"STRONG",{});var K9t=s(pTe);t6r=r(K9t,"electra"),K9t.forEach(t),a6r=r(pqe," \u2014 "),CU=n(pqe,"A",{href:!0});var Z9t=s(CU);n6r=r(Z9t,"TFElectraModel"),Z9t.forEach(t),s6r=r(pqe," (ELECTRA model)"),pqe.forEach(t),l6r=i(D),N8=n(D,"LI",{});var _qe=s(N8);_Te=n(_qe,"STRONG",{});var ext=s(_Te);i6r=r(ext,"flaubert"),ext.forEach(t),d6r=r(_qe," \u2014 "),wU=n(_qe,"A",{href:!0});var oxt=s(wU);c6r=r(oxt,"TFFlaubertModel"),oxt.forEach(t),f6r=r(_qe," (FlauBERT model)"),_qe.forEach(t),m6r=i(D),Us=n(D,"LI",{});var SS=s(Us);uTe=n(SS,"STRONG",{});var rxt=s(uTe);g6r=r(rxt,"funnel"),rxt.forEach(t),h6r=r(SS," \u2014 "),AU=n(SS,"A",{href:!0});var txt=s(AU);p6r=r(txt,"TFFunnelModel"),txt.forEach(t),_6r=r(SS," or "),LU=n(SS,"A",{href:!0});var axt=s(LU);u6r=r(axt,"TFFunnelBaseModel"),axt.forEach(t),b6r=r(SS," (Funnel Transformer model)"),SS.forEach(t),v6r=i(D),q8=n(D,"LI",{});var uqe=s(q8);bTe=n(uqe,"STRONG",{});var nxt=s(bTe);F6r=r(nxt,"gpt2"),nxt.forEach(t),T6r=r(uqe," \u2014 "),yU=n(uqe,"A",{href:!0});var sxt=s(yU);M6r=r(sxt,"TFGPT2Model"),sxt.forEach(t),E6r=r(uqe," (OpenAI GPT-2 model)"),uqe.forEach(t),C6r=i(D),j8=n(D,"LI",{});var bqe=s(j8);vTe=n(bqe,"STRONG",{});var lxt=s(vTe);w6r=r(lxt,"gptj"),lxt.forEach(t),A6r=r(bqe," \u2014 "),xU=n(bqe,"A",{href:!0});var ixt=s(xU);L6r=r(ixt,"TFGPTJModel"),ixt.forEach(t),y6r=r(bqe," (GPT-J model)"),bqe.forEach(t),x6r=i(D),D8=n(D,"LI",{});var vqe=s(D8);FTe=n(vqe,"STRONG",{});var dxt=s(FTe);$6r=r(dxt,"hubert"),dxt.forEach(t),k6r=r(vqe," \u2014 "),$U=n(vqe,"A",{href:!0});var cxt=s($U);S6r=r(cxt,"TFHubertModel"),cxt.forEach(t),R6r=r(vqe," (Hubert model)"),vqe.forEach(t),P6r=i(D),G8=n(D,"LI",{});var Fqe=s(G8);TTe=n(Fqe,"STRONG",{});var fxt=s(TTe);B6r=r(fxt,"layoutlm"),fxt.forEach(t),I6r=r(Fqe," \u2014 "),kU=n(Fqe,"A",{href:!0});var mxt=s(kU);N6r=r(mxt,"TFLayoutLMModel"),mxt.forEach(t),q6r=r(Fqe," (LayoutLM model)"),Fqe.forEach(t),j6r=i(D),O8=n(D,"LI",{});var Tqe=s(O8);MTe=n(Tqe,"STRONG",{});var gxt=s(MTe);D6r=r(gxt,"led"),gxt.forEach(t),G6r=r(Tqe," \u2014 "),SU=n(Tqe,"A",{href:!0});var hxt=s(SU);O6r=r(hxt,"TFLEDModel"),hxt.forEach(t),V6r=r(Tqe," (LED model)"),Tqe.forEach(t),X6r=i(D),V8=n(D,"LI",{});var Mqe=s(V8);ETe=n(Mqe,"STRONG",{});var pxt=s(ETe);z6r=r(pxt,"longformer"),pxt.forEach(t),Q6r=r(Mqe," \u2014 "),RU=n(Mqe,"A",{href:!0});var _xt=s(RU);W6r=r(_xt,"TFLongformerModel"),_xt.forEach(t),H6r=r(Mqe," (Longformer model)"),Mqe.forEach(t),U6r=i(D),X8=n(D,"LI",{});var Eqe=s(X8);CTe=n(Eqe,"STRONG",{});var uxt=s(CTe);J6r=r(uxt,"lxmert"),uxt.forEach(t),Y6r=r(Eqe," \u2014 "),PU=n(Eqe,"A",{href:!0});var bxt=s(PU);K6r=r(bxt,"TFLxmertModel"),bxt.forEach(t),Z6r=r(Eqe," (LXMERT model)"),Eqe.forEach(t),eTr=i(D),z8=n(D,"LI",{});var Cqe=s(z8);wTe=n(Cqe,"STRONG",{});var vxt=s(wTe);oTr=r(vxt,"marian"),vxt.forEach(t),rTr=r(Cqe," \u2014 "),BU=n(Cqe,"A",{href:!0});var Fxt=s(BU);tTr=r(Fxt,"TFMarianModel"),Fxt.forEach(t),aTr=r(Cqe," (Marian model)"),Cqe.forEach(t),nTr=i(D),Q8=n(D,"LI",{});var wqe=s(Q8);ATe=n(wqe,"STRONG",{});var Txt=s(ATe);sTr=r(Txt,"mbart"),Txt.forEach(t),lTr=r(wqe," \u2014 "),IU=n(wqe,"A",{href:!0});var Mxt=s(IU);iTr=r(Mxt,"TFMBartModel"),Mxt.forEach(t),dTr=r(wqe," (mBART model)"),wqe.forEach(t),cTr=i(D),W8=n(D,"LI",{});var Aqe=s(W8);LTe=n(Aqe,"STRONG",{});var Ext=s(LTe);fTr=r(Ext,"mobilebert"),Ext.forEach(t),mTr=r(Aqe," \u2014 "),NU=n(Aqe,"A",{href:!0});var Cxt=s(NU);gTr=r(Cxt,"TFMobileBertModel"),Cxt.forEach(t),hTr=r(Aqe," (MobileBERT model)"),Aqe.forEach(t),pTr=i(D),H8=n(D,"LI",{});var Lqe=s(H8);yTe=n(Lqe,"STRONG",{});var wxt=s(yTe);_Tr=r(wxt,"mpnet"),wxt.forEach(t),uTr=r(Lqe," \u2014 "),qU=n(Lqe,"A",{href:!0});var Axt=s(qU);bTr=r(Axt,"TFMPNetModel"),Axt.forEach(t),vTr=r(Lqe," (MPNet model)"),Lqe.forEach(t),FTr=i(D),U8=n(D,"LI",{});var yqe=s(U8);xTe=n(yqe,"STRONG",{});var Lxt=s(xTe);TTr=r(Lxt,"mt5"),Lxt.forEach(t),MTr=r(yqe," \u2014 "),jU=n(yqe,"A",{href:!0});var yxt=s(jU);ETr=r(yxt,"TFMT5Model"),yxt.forEach(t),CTr=r(yqe," (MT5 model)"),yqe.forEach(t),wTr=i(D),J8=n(D,"LI",{});var xqe=s(J8);$Te=n(xqe,"STRONG",{});var xxt=s($Te);ATr=r(xxt,"openai-gpt"),xxt.forEach(t),LTr=r(xqe," \u2014 "),DU=n(xqe,"A",{href:!0});var $xt=s(DU);yTr=r($xt,"TFOpenAIGPTModel"),$xt.forEach(t),xTr=r(xqe," (OpenAI GPT model)"),xqe.forEach(t),$Tr=i(D),Y8=n(D,"LI",{});var $qe=s(Y8);kTe=n($qe,"STRONG",{});var kxt=s(kTe);kTr=r(kxt,"opt"),kxt.forEach(t),STr=r($qe," \u2014 "),GU=n($qe,"A",{href:!0});var Sxt=s(GU);RTr=r(Sxt,"TFOPTModel"),Sxt.forEach(t),PTr=r($qe," (OPT model)"),$qe.forEach(t),BTr=i(D),K8=n(D,"LI",{});var kqe=s(K8);STe=n(kqe,"STRONG",{});var Rxt=s(STe);ITr=r(Rxt,"pegasus"),Rxt.forEach(t),NTr=r(kqe," \u2014 "),OU=n(kqe,"A",{href:!0});var Pxt=s(OU);qTr=r(Pxt,"TFPegasusModel"),Pxt.forEach(t),jTr=r(kqe," (Pegasus model)"),kqe.forEach(t),DTr=i(D),Z8=n(D,"LI",{});var Sqe=s(Z8);RTe=n(Sqe,"STRONG",{});var Bxt=s(RTe);GTr=r(Bxt,"regnet"),Bxt.forEach(t),OTr=r(Sqe," \u2014 "),VU=n(Sqe,"A",{href:!0});var Ixt=s(VU);VTr=r(Ixt,"TFRegNetModel"),Ixt.forEach(t),XTr=r(Sqe," (RegNet model)"),Sqe.forEach(t),zTr=i(D),eM=n(D,"LI",{});var Rqe=s(eM);PTe=n(Rqe,"STRONG",{});var Nxt=s(PTe);QTr=r(Nxt,"rembert"),Nxt.forEach(t),WTr=r(Rqe," \u2014 "),XU=n(Rqe,"A",{href:!0});var qxt=s(XU);HTr=r(qxt,"TFRemBertModel"),qxt.forEach(t),UTr=r(Rqe," (RemBERT model)"),Rqe.forEach(t),JTr=i(D),oM=n(D,"LI",{});var Pqe=s(oM);BTe=n(Pqe,"STRONG",{});var jxt=s(BTe);YTr=r(jxt,"roberta"),jxt.forEach(t),KTr=r(Pqe," \u2014 "),zU=n(Pqe,"A",{href:!0});var Dxt=s(zU);ZTr=r(Dxt,"TFRobertaModel"),Dxt.forEach(t),e7r=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),o7r=i(D),rM=n(D,"LI",{});var Bqe=s(rM);ITe=n(Bqe,"STRONG",{});var Gxt=s(ITe);r7r=r(Gxt,"roformer"),Gxt.forEach(t),t7r=r(Bqe," \u2014 "),QU=n(Bqe,"A",{href:!0});var Oxt=s(QU);a7r=r(Oxt,"TFRoFormerModel"),Oxt.forEach(t),n7r=r(Bqe," (RoFormer model)"),Bqe.forEach(t),s7r=i(D),tM=n(D,"LI",{});var Iqe=s(tM);NTe=n(Iqe,"STRONG",{});var Vxt=s(NTe);l7r=r(Vxt,"speech_to_text"),Vxt.forEach(t),i7r=r(Iqe," \u2014 "),WU=n(Iqe,"A",{href:!0});var Xxt=s(WU);d7r=r(Xxt,"TFSpeech2TextModel"),Xxt.forEach(t),c7r=r(Iqe," (Speech2Text model)"),Iqe.forEach(t),f7r=i(D),aM=n(D,"LI",{});var Nqe=s(aM);qTe=n(Nqe,"STRONG",{});var zxt=s(qTe);m7r=r(zxt,"swin"),zxt.forEach(t),g7r=r(Nqe," \u2014 "),HU=n(Nqe,"A",{href:!0});var Qxt=s(HU);h7r=r(Qxt,"TFSwinModel"),Qxt.forEach(t),p7r=r(Nqe," (Swin Transformer model)"),Nqe.forEach(t),_7r=i(D),nM=n(D,"LI",{});var qqe=s(nM);jTe=n(qqe,"STRONG",{});var Wxt=s(jTe);u7r=r(Wxt,"t5"),Wxt.forEach(t),b7r=r(qqe," \u2014 "),UU=n(qqe,"A",{href:!0});var Hxt=s(UU);v7r=r(Hxt,"TFT5Model"),Hxt.forEach(t),F7r=r(qqe," (T5 model)"),qqe.forEach(t),T7r=i(D),sM=n(D,"LI",{});var jqe=s(sM);DTe=n(jqe,"STRONG",{});var Uxt=s(DTe);M7r=r(Uxt,"tapas"),Uxt.forEach(t),E7r=r(jqe," \u2014 "),JU=n(jqe,"A",{href:!0});var Jxt=s(JU);C7r=r(Jxt,"TFTapasModel"),Jxt.forEach(t),w7r=r(jqe," (TAPAS model)"),jqe.forEach(t),A7r=i(D),lM=n(D,"LI",{});var Dqe=s(lM);GTe=n(Dqe,"STRONG",{});var Yxt=s(GTe);L7r=r(Yxt,"transfo-xl"),Yxt.forEach(t),y7r=r(Dqe," \u2014 "),YU=n(Dqe,"A",{href:!0});var Kxt=s(YU);x7r=r(Kxt,"TFTransfoXLModel"),Kxt.forEach(t),$7r=r(Dqe," (Transformer-XL model)"),Dqe.forEach(t),k7r=i(D),iM=n(D,"LI",{});var Gqe=s(iM);OTe=n(Gqe,"STRONG",{});var Zxt=s(OTe);S7r=r(Zxt,"vit"),Zxt.forEach(t),R7r=r(Gqe," \u2014 "),KU=n(Gqe,"A",{href:!0});var e$t=s(KU);P7r=r(e$t,"TFViTModel"),e$t.forEach(t),B7r=r(Gqe," (ViT model)"),Gqe.forEach(t),I7r=i(D),dM=n(D,"LI",{});var Oqe=s(dM);VTe=n(Oqe,"STRONG",{});var o$t=s(VTe);N7r=r(o$t,"vit_mae"),o$t.forEach(t),q7r=r(Oqe," \u2014 "),ZU=n(Oqe,"A",{href:!0});var r$t=s(ZU);j7r=r(r$t,"TFViTMAEModel"),r$t.forEach(t),D7r=r(Oqe," (ViTMAE model)"),Oqe.forEach(t),G7r=i(D),cM=n(D,"LI",{});var Vqe=s(cM);XTe=n(Vqe,"STRONG",{});var t$t=s(XTe);O7r=r(t$t,"wav2vec2"),t$t.forEach(t),V7r=r(Vqe," \u2014 "),eJ=n(Vqe,"A",{href:!0});var a$t=s(eJ);X7r=r(a$t,"TFWav2Vec2Model"),a$t.forEach(t),z7r=r(Vqe," (Wav2Vec2 model)"),Vqe.forEach(t),Q7r=i(D),fM=n(D,"LI",{});var Xqe=s(fM);zTe=n(Xqe,"STRONG",{});var n$t=s(zTe);W7r=r(n$t,"xlm"),n$t.forEach(t),H7r=r(Xqe," \u2014 "),oJ=n(Xqe,"A",{href:!0});var s$t=s(oJ);U7r=r(s$t,"TFXLMModel"),s$t.forEach(t),J7r=r(Xqe," (XLM model)"),Xqe.forEach(t),Y7r=i(D),mM=n(D,"LI",{});var zqe=s(mM);QTe=n(zqe,"STRONG",{});var l$t=s(QTe);K7r=r(l$t,"xlm-roberta"),l$t.forEach(t),Z7r=r(zqe," \u2014 "),rJ=n(zqe,"A",{href:!0});var i$t=s(rJ);e8r=r(i$t,"TFXLMRobertaModel"),i$t.forEach(t),o8r=r(zqe," (XLM-RoBERTa model)"),zqe.forEach(t),r8r=i(D),gM=n(D,"LI",{});var Qqe=s(gM);WTe=n(Qqe,"STRONG",{});var d$t=s(WTe);t8r=r(d$t,"xlnet"),d$t.forEach(t),a8r=r(Qqe," \u2014 "),tJ=n(Qqe,"A",{href:!0});var c$t=s(tJ);n8r=r(c$t,"TFXLNetModel"),c$t.forEach(t),s8r=r(Qqe," (XLNet model)"),Qqe.forEach(t),D.forEach(t),l8r=i(yl),T(hM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),oze=i(f),ic=n(f,"H2",{class:!0});var dWe=s(ic);pM=n(dWe,"A",{id:!0,class:!0,href:!0});var f$t=s(pM);HTe=n(f$t,"SPAN",{});var m$t=s(HTe);T(H9.$$.fragment,m$t),m$t.forEach(t),f$t.forEach(t),i8r=i(dWe),UTe=n(dWe,"SPAN",{});var g$t=s(UTe);d8r=r(g$t,"TFAutoModelForPreTraining"),g$t.forEach(t),dWe.forEach(t),rze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(U9.$$.fragment,xl),c8r=i(xl),dc=n(xl,"P",{});var Mte=s(dc);f8r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aJ=n(Mte,"A",{href:!0});var h$t=s(aJ);m8r=r(h$t,"from_pretrained()"),h$t.forEach(t),g8r=r(Mte," class method or the "),nJ=n(Mte,"A",{href:!0});var p$t=s(nJ);h8r=r(p$t,"from_config()"),p$t.forEach(t),p8r=r(Mte,` class
method.`),Mte.forEach(t),_8r=i(xl),J9=n(xl,"P",{});var cWe=s(J9);u8r=r(cWe,"This class cannot be instantiated directly using "),JTe=n(cWe,"CODE",{});var _$t=s(JTe);b8r=r(_$t,"__init__()"),_$t.forEach(t),v8r=r(cWe," (throws an error)."),cWe.forEach(t),F8r=i(xl),Rt=n(xl,"DIV",{class:!0});var tA=s(Rt);T(Y9.$$.fragment,tA),T8r=i(tA),YTe=n(tA,"P",{});var u$t=s(YTe);M8r=r(u$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u$t.forEach(t),E8r=i(tA),cc=n(tA,"P",{});var Ete=s(cc);C8r=r(Ete,`Note:
Loading a model from its configuration file does `),KTe=n(Ete,"STRONG",{});var b$t=s(KTe);w8r=r(b$t,"not"),b$t.forEach(t),A8r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(Ete,"A",{href:!0});var v$t=s(sJ);L8r=r(v$t,"from_pretrained()"),v$t.forEach(t),y8r=r(Ete," to load the model weights."),Ete.forEach(t),x8r=i(tA),T(_M.$$.fragment,tA),tA.forEach(t),$8r=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(K9.$$.fragment,$l),k8r=i($l),ZTe=n($l,"P",{});var F$t=s(ZTe);S8r=r(F$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F$t.forEach(t),R8r=i($l),sn=n($l,"P",{});var aA=s(sn);P8r=r(aA,"The model class to instantiate is selected based on the "),e7e=n(aA,"CODE",{});var T$t=s(e7e);B8r=r(T$t,"model_type"),T$t.forEach(t),I8r=r(aA,` property of the config object (either
passed as an argument or loaded from `),o7e=n(aA,"CODE",{});var M$t=s(o7e);N8r=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),q8r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(aA,"CODE",{});var E$t=s(r7e);j8r=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),D8r=r(aA,":"),aA.forEach(t),G8r=i($l),se=n($l,"UL",{});var le=s(se);uM=n(le,"LI",{});var Wqe=s(uM);t7e=n(Wqe,"STRONG",{});var C$t=s(t7e);O8r=r(C$t,"albert"),C$t.forEach(t),V8r=r(Wqe," \u2014 "),lJ=n(Wqe,"A",{href:!0});var w$t=s(lJ);X8r=r(w$t,"TFAlbertForPreTraining"),w$t.forEach(t),z8r=r(Wqe," (ALBERT model)"),Wqe.forEach(t),Q8r=i(le),bM=n(le,"LI",{});var Hqe=s(bM);a7e=n(Hqe,"STRONG",{});var A$t=s(a7e);W8r=r(A$t,"bart"),A$t.forEach(t),H8r=r(Hqe," \u2014 "),iJ=n(Hqe,"A",{href:!0});var L$t=s(iJ);U8r=r(L$t,"TFBartForConditionalGeneration"),L$t.forEach(t),J8r=r(Hqe," (BART model)"),Hqe.forEach(t),Y8r=i(le),vM=n(le,"LI",{});var Uqe=s(vM);n7e=n(Uqe,"STRONG",{});var y$t=s(n7e);K8r=r(y$t,"bert"),y$t.forEach(t),Z8r=r(Uqe," \u2014 "),dJ=n(Uqe,"A",{href:!0});var x$t=s(dJ);eMr=r(x$t,"TFBertForPreTraining"),x$t.forEach(t),oMr=r(Uqe," (BERT model)"),Uqe.forEach(t),rMr=i(le),FM=n(le,"LI",{});var Jqe=s(FM);s7e=n(Jqe,"STRONG",{});var $$t=s(s7e);tMr=r($$t,"camembert"),$$t.forEach(t),aMr=r(Jqe," \u2014 "),cJ=n(Jqe,"A",{href:!0});var k$t=s(cJ);nMr=r(k$t,"TFCamembertForMaskedLM"),k$t.forEach(t),sMr=r(Jqe," (CamemBERT model)"),Jqe.forEach(t),lMr=i(le),TM=n(le,"LI",{});var Yqe=s(TM);l7e=n(Yqe,"STRONG",{});var S$t=s(l7e);iMr=r(S$t,"ctrl"),S$t.forEach(t),dMr=r(Yqe," \u2014 "),fJ=n(Yqe,"A",{href:!0});var R$t=s(fJ);cMr=r(R$t,"TFCTRLLMHeadModel"),R$t.forEach(t),fMr=r(Yqe," (CTRL model)"),Yqe.forEach(t),mMr=i(le),MM=n(le,"LI",{});var Kqe=s(MM);i7e=n(Kqe,"STRONG",{});var P$t=s(i7e);gMr=r(P$t,"distilbert"),P$t.forEach(t),hMr=r(Kqe," \u2014 "),mJ=n(Kqe,"A",{href:!0});var B$t=s(mJ);pMr=r(B$t,"TFDistilBertForMaskedLM"),B$t.forEach(t),_Mr=r(Kqe," (DistilBERT model)"),Kqe.forEach(t),uMr=i(le),EM=n(le,"LI",{});var Zqe=s(EM);d7e=n(Zqe,"STRONG",{});var I$t=s(d7e);bMr=r(I$t,"electra"),I$t.forEach(t),vMr=r(Zqe," \u2014 "),gJ=n(Zqe,"A",{href:!0});var N$t=s(gJ);FMr=r(N$t,"TFElectraForPreTraining"),N$t.forEach(t),TMr=r(Zqe," (ELECTRA model)"),Zqe.forEach(t),MMr=i(le),CM=n(le,"LI",{});var eje=s(CM);c7e=n(eje,"STRONG",{});var q$t=s(c7e);EMr=r(q$t,"flaubert"),q$t.forEach(t),CMr=r(eje," \u2014 "),hJ=n(eje,"A",{href:!0});var j$t=s(hJ);wMr=r(j$t,"TFFlaubertWithLMHeadModel"),j$t.forEach(t),AMr=r(eje," (FlauBERT model)"),eje.forEach(t),LMr=i(le),wM=n(le,"LI",{});var oje=s(wM);f7e=n(oje,"STRONG",{});var D$t=s(f7e);yMr=r(D$t,"funnel"),D$t.forEach(t),xMr=r(oje," \u2014 "),pJ=n(oje,"A",{href:!0});var G$t=s(pJ);$Mr=r(G$t,"TFFunnelForPreTraining"),G$t.forEach(t),kMr=r(oje," (Funnel Transformer model)"),oje.forEach(t),SMr=i(le),AM=n(le,"LI",{});var rje=s(AM);m7e=n(rje,"STRONG",{});var O$t=s(m7e);RMr=r(O$t,"gpt2"),O$t.forEach(t),PMr=r(rje," \u2014 "),_J=n(rje,"A",{href:!0});var V$t=s(_J);BMr=r(V$t,"TFGPT2LMHeadModel"),V$t.forEach(t),IMr=r(rje," (OpenAI GPT-2 model)"),rje.forEach(t),NMr=i(le),LM=n(le,"LI",{});var tje=s(LM);g7e=n(tje,"STRONG",{});var X$t=s(g7e);qMr=r(X$t,"layoutlm"),X$t.forEach(t),jMr=r(tje," \u2014 "),uJ=n(tje,"A",{href:!0});var z$t=s(uJ);DMr=r(z$t,"TFLayoutLMForMaskedLM"),z$t.forEach(t),GMr=r(tje," (LayoutLM model)"),tje.forEach(t),OMr=i(le),yM=n(le,"LI",{});var aje=s(yM);h7e=n(aje,"STRONG",{});var Q$t=s(h7e);VMr=r(Q$t,"lxmert"),Q$t.forEach(t),XMr=r(aje," \u2014 "),bJ=n(aje,"A",{href:!0});var W$t=s(bJ);zMr=r(W$t,"TFLxmertForPreTraining"),W$t.forEach(t),QMr=r(aje," (LXMERT model)"),aje.forEach(t),WMr=i(le),xM=n(le,"LI",{});var nje=s(xM);p7e=n(nje,"STRONG",{});var H$t=s(p7e);HMr=r(H$t,"mobilebert"),H$t.forEach(t),UMr=r(nje," \u2014 "),vJ=n(nje,"A",{href:!0});var U$t=s(vJ);JMr=r(U$t,"TFMobileBertForPreTraining"),U$t.forEach(t),YMr=r(nje," (MobileBERT model)"),nje.forEach(t),KMr=i(le),$M=n(le,"LI",{});var sje=s($M);_7e=n(sje,"STRONG",{});var J$t=s(_7e);ZMr=r(J$t,"mpnet"),J$t.forEach(t),e4r=r(sje," \u2014 "),FJ=n(sje,"A",{href:!0});var Y$t=s(FJ);o4r=r(Y$t,"TFMPNetForMaskedLM"),Y$t.forEach(t),r4r=r(sje," (MPNet model)"),sje.forEach(t),t4r=i(le),kM=n(le,"LI",{});var lje=s(kM);u7e=n(lje,"STRONG",{});var K$t=s(u7e);a4r=r(K$t,"openai-gpt"),K$t.forEach(t),n4r=r(lje," \u2014 "),TJ=n(lje,"A",{href:!0});var Z$t=s(TJ);s4r=r(Z$t,"TFOpenAIGPTLMHeadModel"),Z$t.forEach(t),l4r=r(lje," (OpenAI GPT model)"),lje.forEach(t),i4r=i(le),SM=n(le,"LI",{});var ije=s(SM);b7e=n(ije,"STRONG",{});var ekt=s(b7e);d4r=r(ekt,"roberta"),ekt.forEach(t),c4r=r(ije," \u2014 "),MJ=n(ije,"A",{href:!0});var okt=s(MJ);f4r=r(okt,"TFRobertaForMaskedLM"),okt.forEach(t),m4r=r(ije," (RoBERTa model)"),ije.forEach(t),g4r=i(le),RM=n(le,"LI",{});var dje=s(RM);v7e=n(dje,"STRONG",{});var rkt=s(v7e);h4r=r(rkt,"t5"),rkt.forEach(t),p4r=r(dje," \u2014 "),EJ=n(dje,"A",{href:!0});var tkt=s(EJ);_4r=r(tkt,"TFT5ForConditionalGeneration"),tkt.forEach(t),u4r=r(dje," (T5 model)"),dje.forEach(t),b4r=i(le),PM=n(le,"LI",{});var cje=s(PM);F7e=n(cje,"STRONG",{});var akt=s(F7e);v4r=r(akt,"tapas"),akt.forEach(t),F4r=r(cje," \u2014 "),CJ=n(cje,"A",{href:!0});var nkt=s(CJ);T4r=r(nkt,"TFTapasForMaskedLM"),nkt.forEach(t),M4r=r(cje," (TAPAS model)"),cje.forEach(t),E4r=i(le),BM=n(le,"LI",{});var fje=s(BM);T7e=n(fje,"STRONG",{});var skt=s(T7e);C4r=r(skt,"transfo-xl"),skt.forEach(t),w4r=r(fje," \u2014 "),wJ=n(fje,"A",{href:!0});var lkt=s(wJ);A4r=r(lkt,"TFTransfoXLLMHeadModel"),lkt.forEach(t),L4r=r(fje," (Transformer-XL model)"),fje.forEach(t),y4r=i(le),IM=n(le,"LI",{});var mje=s(IM);M7e=n(mje,"STRONG",{});var ikt=s(M7e);x4r=r(ikt,"vit_mae"),ikt.forEach(t),$4r=r(mje," \u2014 "),AJ=n(mje,"A",{href:!0});var dkt=s(AJ);k4r=r(dkt,"TFViTMAEForPreTraining"),dkt.forEach(t),S4r=r(mje," (ViTMAE model)"),mje.forEach(t),R4r=i(le),NM=n(le,"LI",{});var gje=s(NM);E7e=n(gje,"STRONG",{});var ckt=s(E7e);P4r=r(ckt,"xlm"),ckt.forEach(t),B4r=r(gje," \u2014 "),LJ=n(gje,"A",{href:!0});var fkt=s(LJ);I4r=r(fkt,"TFXLMWithLMHeadModel"),fkt.forEach(t),N4r=r(gje," (XLM model)"),gje.forEach(t),q4r=i(le),qM=n(le,"LI",{});var hje=s(qM);C7e=n(hje,"STRONG",{});var mkt=s(C7e);j4r=r(mkt,"xlm-roberta"),mkt.forEach(t),D4r=r(hje," \u2014 "),yJ=n(hje,"A",{href:!0});var gkt=s(yJ);G4r=r(gkt,"TFXLMRobertaForMaskedLM"),gkt.forEach(t),O4r=r(hje," (XLM-RoBERTa model)"),hje.forEach(t),V4r=i(le),jM=n(le,"LI",{});var pje=s(jM);w7e=n(pje,"STRONG",{});var hkt=s(w7e);X4r=r(hkt,"xlnet"),hkt.forEach(t),z4r=r(pje," \u2014 "),xJ=n(pje,"A",{href:!0});var pkt=s(xJ);Q4r=r(pkt,"TFXLNetLMHeadModel"),pkt.forEach(t),W4r=r(pje," (XLNet model)"),pje.forEach(t),le.forEach(t),H4r=i($l),T(DM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),tze=i(f),fc=n(f,"H2",{class:!0});var fWe=s(fc);GM=n(fWe,"A",{id:!0,class:!0,href:!0});var _kt=s(GM);A7e=n(_kt,"SPAN",{});var ukt=s(A7e);T(Z9.$$.fragment,ukt),ukt.forEach(t),_kt.forEach(t),U4r=i(fWe),L7e=n(fWe,"SPAN",{});var bkt=s(L7e);J4r=r(bkt,"TFAutoModelForCausalLM"),bkt.forEach(t),fWe.forEach(t),aze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(ex.$$.fragment,kl),Y4r=i(kl),mc=n(kl,"P",{});var Cte=s(mc);K4r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$J=n(Cte,"A",{href:!0});var vkt=s($J);Z4r=r(vkt,"from_pretrained()"),vkt.forEach(t),eEr=r(Cte," class method or the "),kJ=n(Cte,"A",{href:!0});var Fkt=s(kJ);oEr=r(Fkt,"from_config()"),Fkt.forEach(t),rEr=r(Cte,` class
method.`),Cte.forEach(t),tEr=i(kl),ox=n(kl,"P",{});var mWe=s(ox);aEr=r(mWe,"This class cannot be instantiated directly using "),y7e=n(mWe,"CODE",{});var Tkt=s(y7e);nEr=r(Tkt,"__init__()"),Tkt.forEach(t),sEr=r(mWe," (throws an error)."),mWe.forEach(t),lEr=i(kl),Pt=n(kl,"DIV",{class:!0});var nA=s(Pt);T(rx.$$.fragment,nA),iEr=i(nA),x7e=n(nA,"P",{});var Mkt=s(x7e);dEr=r(Mkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mkt.forEach(t),cEr=i(nA),gc=n(nA,"P",{});var wte=s(gc);fEr=r(wte,`Note:
Loading a model from its configuration file does `),$7e=n(wte,"STRONG",{});var Ekt=s($7e);mEr=r(Ekt,"not"),Ekt.forEach(t),gEr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(wte,"A",{href:!0});var Ckt=s(SJ);hEr=r(Ckt,"from_pretrained()"),Ckt.forEach(t),pEr=r(wte," to load the model weights."),wte.forEach(t),_Er=i(nA),T(OM.$$.fragment,nA),nA.forEach(t),uEr=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(tx.$$.fragment,Sl),bEr=i(Sl),k7e=n(Sl,"P",{});var wkt=s(k7e);vEr=r(wkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wkt.forEach(t),FEr=i(Sl),ln=n(Sl,"P",{});var sA=s(ln);TEr=r(sA,"The model class to instantiate is selected based on the "),S7e=n(sA,"CODE",{});var Akt=s(S7e);MEr=r(Akt,"model_type"),Akt.forEach(t),EEr=r(sA,` property of the config object (either
passed as an argument or loaded from `),R7e=n(sA,"CODE",{});var Lkt=s(R7e);CEr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),wEr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(sA,"CODE",{});var ykt=s(P7e);AEr=r(ykt,"pretrained_model_name_or_path"),ykt.forEach(t),LEr=r(sA,":"),sA.forEach(t),yEr=i(Sl),Me=n(Sl,"UL",{});var Ce=s(Me);VM=n(Ce,"LI",{});var _je=s(VM);B7e=n(_je,"STRONG",{});var xkt=s(B7e);xEr=r(xkt,"bert"),xkt.forEach(t),$Er=r(_je," \u2014 "),RJ=n(_je,"A",{href:!0});var $kt=s(RJ);kEr=r($kt,"TFBertLMHeadModel"),$kt.forEach(t),SEr=r(_je," (BERT model)"),_je.forEach(t),REr=i(Ce),XM=n(Ce,"LI",{});var uje=s(XM);I7e=n(uje,"STRONG",{});var kkt=s(I7e);PEr=r(kkt,"camembert"),kkt.forEach(t),BEr=r(uje," \u2014 "),PJ=n(uje,"A",{href:!0});var Skt=s(PJ);IEr=r(Skt,"TFCamembertForCausalLM"),Skt.forEach(t),NEr=r(uje," (CamemBERT model)"),uje.forEach(t),qEr=i(Ce),zM=n(Ce,"LI",{});var bje=s(zM);N7e=n(bje,"STRONG",{});var Rkt=s(N7e);jEr=r(Rkt,"ctrl"),Rkt.forEach(t),DEr=r(bje," \u2014 "),BJ=n(bje,"A",{href:!0});var Pkt=s(BJ);GEr=r(Pkt,"TFCTRLLMHeadModel"),Pkt.forEach(t),OEr=r(bje," (CTRL model)"),bje.forEach(t),VEr=i(Ce),QM=n(Ce,"LI",{});var vje=s(QM);q7e=n(vje,"STRONG",{});var Bkt=s(q7e);XEr=r(Bkt,"gpt2"),Bkt.forEach(t),zEr=r(vje," \u2014 "),IJ=n(vje,"A",{href:!0});var Ikt=s(IJ);QEr=r(Ikt,"TFGPT2LMHeadModel"),Ikt.forEach(t),WEr=r(vje," (OpenAI GPT-2 model)"),vje.forEach(t),HEr=i(Ce),WM=n(Ce,"LI",{});var Fje=s(WM);j7e=n(Fje,"STRONG",{});var Nkt=s(j7e);UEr=r(Nkt,"gptj"),Nkt.forEach(t),JEr=r(Fje," \u2014 "),NJ=n(Fje,"A",{href:!0});var qkt=s(NJ);YEr=r(qkt,"TFGPTJForCausalLM"),qkt.forEach(t),KEr=r(Fje," (GPT-J model)"),Fje.forEach(t),ZEr=i(Ce),HM=n(Ce,"LI",{});var Tje=s(HM);D7e=n(Tje,"STRONG",{});var jkt=s(D7e);eCr=r(jkt,"openai-gpt"),jkt.forEach(t),oCr=r(Tje," \u2014 "),qJ=n(Tje,"A",{href:!0});var Dkt=s(qJ);rCr=r(Dkt,"TFOpenAIGPTLMHeadModel"),Dkt.forEach(t),tCr=r(Tje," (OpenAI GPT model)"),Tje.forEach(t),aCr=i(Ce),UM=n(Ce,"LI",{});var Mje=s(UM);G7e=n(Mje,"STRONG",{});var Gkt=s(G7e);nCr=r(Gkt,"opt"),Gkt.forEach(t),sCr=r(Mje," \u2014 "),jJ=n(Mje,"A",{href:!0});var Okt=s(jJ);lCr=r(Okt,"TFOPTForCausalLM"),Okt.forEach(t),iCr=r(Mje," (OPT model)"),Mje.forEach(t),dCr=i(Ce),JM=n(Ce,"LI",{});var Eje=s(JM);O7e=n(Eje,"STRONG",{});var Vkt=s(O7e);cCr=r(Vkt,"rembert"),Vkt.forEach(t),fCr=r(Eje," \u2014 "),DJ=n(Eje,"A",{href:!0});var Xkt=s(DJ);mCr=r(Xkt,"TFRemBertForCausalLM"),Xkt.forEach(t),gCr=r(Eje," (RemBERT model)"),Eje.forEach(t),hCr=i(Ce),YM=n(Ce,"LI",{});var Cje=s(YM);V7e=n(Cje,"STRONG",{});var zkt=s(V7e);pCr=r(zkt,"roberta"),zkt.forEach(t),_Cr=r(Cje," \u2014 "),GJ=n(Cje,"A",{href:!0});var Qkt=s(GJ);uCr=r(Qkt,"TFRobertaForCausalLM"),Qkt.forEach(t),bCr=r(Cje," (RoBERTa model)"),Cje.forEach(t),vCr=i(Ce),KM=n(Ce,"LI",{});var wje=s(KM);X7e=n(wje,"STRONG",{});var Wkt=s(X7e);FCr=r(Wkt,"roformer"),Wkt.forEach(t),TCr=r(wje," \u2014 "),OJ=n(wje,"A",{href:!0});var Hkt=s(OJ);MCr=r(Hkt,"TFRoFormerForCausalLM"),Hkt.forEach(t),ECr=r(wje," (RoFormer model)"),wje.forEach(t),CCr=i(Ce),ZM=n(Ce,"LI",{});var Aje=s(ZM);z7e=n(Aje,"STRONG",{});var Ukt=s(z7e);wCr=r(Ukt,"transfo-xl"),Ukt.forEach(t),ACr=r(Aje," \u2014 "),VJ=n(Aje,"A",{href:!0});var Jkt=s(VJ);LCr=r(Jkt,"TFTransfoXLLMHeadModel"),Jkt.forEach(t),yCr=r(Aje," (Transformer-XL model)"),Aje.forEach(t),xCr=i(Ce),e4=n(Ce,"LI",{});var Lje=s(e4);Q7e=n(Lje,"STRONG",{});var Ykt=s(Q7e);$Cr=r(Ykt,"xlm"),Ykt.forEach(t),kCr=r(Lje," \u2014 "),XJ=n(Lje,"A",{href:!0});var Kkt=s(XJ);SCr=r(Kkt,"TFXLMWithLMHeadModel"),Kkt.forEach(t),RCr=r(Lje," (XLM model)"),Lje.forEach(t),PCr=i(Ce),o4=n(Ce,"LI",{});var yje=s(o4);W7e=n(yje,"STRONG",{});var Zkt=s(W7e);BCr=r(Zkt,"xlnet"),Zkt.forEach(t),ICr=r(yje," \u2014 "),zJ=n(yje,"A",{href:!0});var eSt=s(zJ);NCr=r(eSt,"TFXLNetLMHeadModel"),eSt.forEach(t),qCr=r(yje," (XLNet model)"),yje.forEach(t),Ce.forEach(t),jCr=i(Sl),T(r4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),nze=i(f),hc=n(f,"H2",{class:!0});var gWe=s(hc);t4=n(gWe,"A",{id:!0,class:!0,href:!0});var oSt=s(t4);H7e=n(oSt,"SPAN",{});var rSt=s(H7e);T(ax.$$.fragment,rSt),rSt.forEach(t),oSt.forEach(t),DCr=i(gWe),U7e=n(gWe,"SPAN",{});var tSt=s(U7e);GCr=r(tSt,"TFAutoModelForImageClassification"),tSt.forEach(t),gWe.forEach(t),sze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(nx.$$.fragment,Rl),OCr=i(Rl),pc=n(Rl,"P",{});var Ate=s(pc);VCr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QJ=n(Ate,"A",{href:!0});var aSt=s(QJ);XCr=r(aSt,"from_pretrained()"),aSt.forEach(t),zCr=r(Ate," class method or the "),WJ=n(Ate,"A",{href:!0});var nSt=s(WJ);QCr=r(nSt,"from_config()"),nSt.forEach(t),WCr=r(Ate,` class
method.`),Ate.forEach(t),HCr=i(Rl),sx=n(Rl,"P",{});var hWe=s(sx);UCr=r(hWe,"This class cannot be instantiated directly using "),J7e=n(hWe,"CODE",{});var sSt=s(J7e);JCr=r(sSt,"__init__()"),sSt.forEach(t),YCr=r(hWe," (throws an error)."),hWe.forEach(t),KCr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var lA=s(Bt);T(lx.$$.fragment,lA),ZCr=i(lA),Y7e=n(lA,"P",{});var lSt=s(Y7e);e3r=r(lSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lSt.forEach(t),o3r=i(lA),_c=n(lA,"P",{});var Lte=s(_c);r3r=r(Lte,`Note:
Loading a model from its configuration file does `),K7e=n(Lte,"STRONG",{});var iSt=s(K7e);t3r=r(iSt,"not"),iSt.forEach(t),a3r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(Lte,"A",{href:!0});var dSt=s(HJ);n3r=r(dSt,"from_pretrained()"),dSt.forEach(t),s3r=r(Lte," to load the model weights."),Lte.forEach(t),l3r=i(lA),T(a4.$$.fragment,lA),lA.forEach(t),i3r=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(ix.$$.fragment,Pl),d3r=i(Pl),Z7e=n(Pl,"P",{});var cSt=s(Z7e);c3r=r(cSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cSt.forEach(t),f3r=i(Pl),dn=n(Pl,"P",{});var iA=s(dn);m3r=r(iA,"The model class to instantiate is selected based on the "),e8e=n(iA,"CODE",{});var fSt=s(e8e);g3r=r(fSt,"model_type"),fSt.forEach(t),h3r=r(iA,` property of the config object (either
passed as an argument or loaded from `),o8e=n(iA,"CODE",{});var mSt=s(o8e);p3r=r(mSt,"pretrained_model_name_or_path"),mSt.forEach(t),_3r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=n(iA,"CODE",{});var gSt=s(r8e);u3r=r(gSt,"pretrained_model_name_or_path"),gSt.forEach(t),b3r=r(iA,":"),iA.forEach(t),v3r=i(Pl),tt=n(Pl,"UL",{});var Bl=s(tt);n4=n(Bl,"LI",{});var xje=s(n4);t8e=n(xje,"STRONG",{});var hSt=s(t8e);F3r=r(hSt,"convnext"),hSt.forEach(t),T3r=r(xje," \u2014 "),UJ=n(xje,"A",{href:!0});var pSt=s(UJ);M3r=r(pSt,"TFConvNextForImageClassification"),pSt.forEach(t),E3r=r(xje," (ConvNeXT model)"),xje.forEach(t),C3r=i(Bl),s4=n(Bl,"LI",{});var $je=s(s4);a8e=n($je,"STRONG",{});var _St=s(a8e);w3r=r(_St,"data2vec-vision"),_St.forEach(t),A3r=r($je," \u2014 "),JJ=n($je,"A",{href:!0});var uSt=s(JJ);L3r=r(uSt,"TFData2VecVisionForImageClassification"),uSt.forEach(t),y3r=r($je," (Data2VecVision model)"),$je.forEach(t),x3r=i(Bl),l4=n(Bl,"LI",{});var kje=s(l4);n8e=n(kje,"STRONG",{});var bSt=s(n8e);$3r=r(bSt,"regnet"),bSt.forEach(t),k3r=r(kje," \u2014 "),YJ=n(kje,"A",{href:!0});var vSt=s(YJ);S3r=r(vSt,"TFRegNetForImageClassification"),vSt.forEach(t),R3r=r(kje," (RegNet model)"),kje.forEach(t),P3r=i(Bl),i4=n(Bl,"LI",{});var Sje=s(i4);s8e=n(Sje,"STRONG",{});var FSt=s(s8e);B3r=r(FSt,"swin"),FSt.forEach(t),I3r=r(Sje," \u2014 "),KJ=n(Sje,"A",{href:!0});var TSt=s(KJ);N3r=r(TSt,"TFSwinForImageClassification"),TSt.forEach(t),q3r=r(Sje," (Swin Transformer model)"),Sje.forEach(t),j3r=i(Bl),d4=n(Bl,"LI",{});var Rje=s(d4);l8e=n(Rje,"STRONG",{});var MSt=s(l8e);D3r=r(MSt,"vit"),MSt.forEach(t),G3r=r(Rje," \u2014 "),ZJ=n(Rje,"A",{href:!0});var ESt=s(ZJ);O3r=r(ESt,"TFViTForImageClassification"),ESt.forEach(t),V3r=r(Rje," (ViT model)"),Rje.forEach(t),Bl.forEach(t),X3r=i(Pl),T(c4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),lze=i(f),uc=n(f,"H2",{class:!0});var pWe=s(uc);f4=n(pWe,"A",{id:!0,class:!0,href:!0});var CSt=s(f4);i8e=n(CSt,"SPAN",{});var wSt=s(i8e);T(dx.$$.fragment,wSt),wSt.forEach(t),CSt.forEach(t),z3r=i(pWe),d8e=n(pWe,"SPAN",{});var ASt=s(d8e);Q3r=r(ASt,"TFAutoModelForMaskedLM"),ASt.forEach(t),pWe.forEach(t),ize=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(cx.$$.fragment,Il),W3r=i(Il),bc=n(Il,"P",{});var yte=s(bc);H3r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=n(yte,"A",{href:!0});var LSt=s(eY);U3r=r(LSt,"from_pretrained()"),LSt.forEach(t),J3r=r(yte," class method or the "),oY=n(yte,"A",{href:!0});var ySt=s(oY);Y3r=r(ySt,"from_config()"),ySt.forEach(t),K3r=r(yte,` class
method.`),yte.forEach(t),Z3r=i(Il),fx=n(Il,"P",{});var _We=s(fx);e5r=r(_We,"This class cannot be instantiated directly using "),c8e=n(_We,"CODE",{});var xSt=s(c8e);o5r=r(xSt,"__init__()"),xSt.forEach(t),r5r=r(_We," (throws an error)."),_We.forEach(t),t5r=i(Il),It=n(Il,"DIV",{class:!0});var dA=s(It);T(mx.$$.fragment,dA),a5r=i(dA),f8e=n(dA,"P",{});var $St=s(f8e);n5r=r($St,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$St.forEach(t),s5r=i(dA),vc=n(dA,"P",{});var xte=s(vc);l5r=r(xte,`Note:
Loading a model from its configuration file does `),m8e=n(xte,"STRONG",{});var kSt=s(m8e);i5r=r(kSt,"not"),kSt.forEach(t),d5r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(xte,"A",{href:!0});var SSt=s(rY);c5r=r(SSt,"from_pretrained()"),SSt.forEach(t),f5r=r(xte," to load the model weights."),xte.forEach(t),m5r=i(dA),T(m4.$$.fragment,dA),dA.forEach(t),g5r=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(gx.$$.fragment,Nl),h5r=i(Nl),g8e=n(Nl,"P",{});var RSt=s(g8e);p5r=r(RSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RSt.forEach(t),_5r=i(Nl),cn=n(Nl,"P",{});var cA=s(cn);u5r=r(cA,"The model class to instantiate is selected based on the "),h8e=n(cA,"CODE",{});var PSt=s(h8e);b5r=r(PSt,"model_type"),PSt.forEach(t),v5r=r(cA,` property of the config object (either
passed as an argument or loaded from `),p8e=n(cA,"CODE",{});var BSt=s(p8e);F5r=r(BSt,"pretrained_model_name_or_path"),BSt.forEach(t),T5r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(cA,"CODE",{});var ISt=s(_8e);M5r=r(ISt,"pretrained_model_name_or_path"),ISt.forEach(t),E5r=r(cA,":"),cA.forEach(t),C5r=i(Nl),ie=n(Nl,"UL",{});var fe=s(ie);g4=n(fe,"LI",{});var Pje=s(g4);u8e=n(Pje,"STRONG",{});var NSt=s(u8e);w5r=r(NSt,"albert"),NSt.forEach(t),A5r=r(Pje," \u2014 "),tY=n(Pje,"A",{href:!0});var qSt=s(tY);L5r=r(qSt,"TFAlbertForMaskedLM"),qSt.forEach(t),y5r=r(Pje," (ALBERT model)"),Pje.forEach(t),x5r=i(fe),h4=n(fe,"LI",{});var Bje=s(h4);b8e=n(Bje,"STRONG",{});var jSt=s(b8e);$5r=r(jSt,"bert"),jSt.forEach(t),k5r=r(Bje," \u2014 "),aY=n(Bje,"A",{href:!0});var DSt=s(aY);S5r=r(DSt,"TFBertForMaskedLM"),DSt.forEach(t),R5r=r(Bje," (BERT model)"),Bje.forEach(t),P5r=i(fe),p4=n(fe,"LI",{});var Ije=s(p4);v8e=n(Ije,"STRONG",{});var GSt=s(v8e);B5r=r(GSt,"camembert"),GSt.forEach(t),I5r=r(Ije," \u2014 "),nY=n(Ije,"A",{href:!0});var OSt=s(nY);N5r=r(OSt,"TFCamembertForMaskedLM"),OSt.forEach(t),q5r=r(Ije," (CamemBERT model)"),Ije.forEach(t),j5r=i(fe),_4=n(fe,"LI",{});var Nje=s(_4);F8e=n(Nje,"STRONG",{});var VSt=s(F8e);D5r=r(VSt,"convbert"),VSt.forEach(t),G5r=r(Nje," \u2014 "),sY=n(Nje,"A",{href:!0});var XSt=s(sY);O5r=r(XSt,"TFConvBertForMaskedLM"),XSt.forEach(t),V5r=r(Nje," (ConvBERT model)"),Nje.forEach(t),X5r=i(fe),u4=n(fe,"LI",{});var qje=s(u4);T8e=n(qje,"STRONG",{});var zSt=s(T8e);z5r=r(zSt,"deberta"),zSt.forEach(t),Q5r=r(qje," \u2014 "),lY=n(qje,"A",{href:!0});var QSt=s(lY);W5r=r(QSt,"TFDebertaForMaskedLM"),QSt.forEach(t),H5r=r(qje," (DeBERTa model)"),qje.forEach(t),U5r=i(fe),b4=n(fe,"LI",{});var jje=s(b4);M8e=n(jje,"STRONG",{});var WSt=s(M8e);J5r=r(WSt,"deberta-v2"),WSt.forEach(t),Y5r=r(jje," \u2014 "),iY=n(jje,"A",{href:!0});var HSt=s(iY);K5r=r(HSt,"TFDebertaV2ForMaskedLM"),HSt.forEach(t),Z5r=r(jje," (DeBERTa-v2 model)"),jje.forEach(t),e0r=i(fe),v4=n(fe,"LI",{});var Dje=s(v4);E8e=n(Dje,"STRONG",{});var USt=s(E8e);o0r=r(USt,"distilbert"),USt.forEach(t),r0r=r(Dje," \u2014 "),dY=n(Dje,"A",{href:!0});var JSt=s(dY);t0r=r(JSt,"TFDistilBertForMaskedLM"),JSt.forEach(t),a0r=r(Dje," (DistilBERT model)"),Dje.forEach(t),n0r=i(fe),F4=n(fe,"LI",{});var Gje=s(F4);C8e=n(Gje,"STRONG",{});var YSt=s(C8e);s0r=r(YSt,"electra"),YSt.forEach(t),l0r=r(Gje," \u2014 "),cY=n(Gje,"A",{href:!0});var KSt=s(cY);i0r=r(KSt,"TFElectraForMaskedLM"),KSt.forEach(t),d0r=r(Gje," (ELECTRA model)"),Gje.forEach(t),c0r=i(fe),T4=n(fe,"LI",{});var Oje=s(T4);w8e=n(Oje,"STRONG",{});var ZSt=s(w8e);f0r=r(ZSt,"flaubert"),ZSt.forEach(t),m0r=r(Oje," \u2014 "),fY=n(Oje,"A",{href:!0});var eRt=s(fY);g0r=r(eRt,"TFFlaubertWithLMHeadModel"),eRt.forEach(t),h0r=r(Oje," (FlauBERT model)"),Oje.forEach(t),p0r=i(fe),M4=n(fe,"LI",{});var Vje=s(M4);A8e=n(Vje,"STRONG",{});var oRt=s(A8e);_0r=r(oRt,"funnel"),oRt.forEach(t),u0r=r(Vje," \u2014 "),mY=n(Vje,"A",{href:!0});var rRt=s(mY);b0r=r(rRt,"TFFunnelForMaskedLM"),rRt.forEach(t),v0r=r(Vje," (Funnel Transformer model)"),Vje.forEach(t),F0r=i(fe),E4=n(fe,"LI",{});var Xje=s(E4);L8e=n(Xje,"STRONG",{});var tRt=s(L8e);T0r=r(tRt,"layoutlm"),tRt.forEach(t),M0r=r(Xje," \u2014 "),gY=n(Xje,"A",{href:!0});var aRt=s(gY);E0r=r(aRt,"TFLayoutLMForMaskedLM"),aRt.forEach(t),C0r=r(Xje," (LayoutLM model)"),Xje.forEach(t),w0r=i(fe),C4=n(fe,"LI",{});var zje=s(C4);y8e=n(zje,"STRONG",{});var nRt=s(y8e);A0r=r(nRt,"longformer"),nRt.forEach(t),L0r=r(zje," \u2014 "),hY=n(zje,"A",{href:!0});var sRt=s(hY);y0r=r(sRt,"TFLongformerForMaskedLM"),sRt.forEach(t),x0r=r(zje," (Longformer model)"),zje.forEach(t),$0r=i(fe),w4=n(fe,"LI",{});var Qje=s(w4);x8e=n(Qje,"STRONG",{});var lRt=s(x8e);k0r=r(lRt,"mobilebert"),lRt.forEach(t),S0r=r(Qje," \u2014 "),pY=n(Qje,"A",{href:!0});var iRt=s(pY);R0r=r(iRt,"TFMobileBertForMaskedLM"),iRt.forEach(t),P0r=r(Qje," (MobileBERT model)"),Qje.forEach(t),B0r=i(fe),A4=n(fe,"LI",{});var Wje=s(A4);$8e=n(Wje,"STRONG",{});var dRt=s($8e);I0r=r(dRt,"mpnet"),dRt.forEach(t),N0r=r(Wje," \u2014 "),_Y=n(Wje,"A",{href:!0});var cRt=s(_Y);q0r=r(cRt,"TFMPNetForMaskedLM"),cRt.forEach(t),j0r=r(Wje," (MPNet model)"),Wje.forEach(t),D0r=i(fe),L4=n(fe,"LI",{});var Hje=s(L4);k8e=n(Hje,"STRONG",{});var fRt=s(k8e);G0r=r(fRt,"rembert"),fRt.forEach(t),O0r=r(Hje," \u2014 "),uY=n(Hje,"A",{href:!0});var mRt=s(uY);V0r=r(mRt,"TFRemBertForMaskedLM"),mRt.forEach(t),X0r=r(Hje," (RemBERT model)"),Hje.forEach(t),z0r=i(fe),y4=n(fe,"LI",{});var Uje=s(y4);S8e=n(Uje,"STRONG",{});var gRt=s(S8e);Q0r=r(gRt,"roberta"),gRt.forEach(t),W0r=r(Uje," \u2014 "),bY=n(Uje,"A",{href:!0});var hRt=s(bY);H0r=r(hRt,"TFRobertaForMaskedLM"),hRt.forEach(t),U0r=r(Uje," (RoBERTa model)"),Uje.forEach(t),J0r=i(fe),x4=n(fe,"LI",{});var Jje=s(x4);R8e=n(Jje,"STRONG",{});var pRt=s(R8e);Y0r=r(pRt,"roformer"),pRt.forEach(t),K0r=r(Jje," \u2014 "),vY=n(Jje,"A",{href:!0});var _Rt=s(vY);Z0r=r(_Rt,"TFRoFormerForMaskedLM"),_Rt.forEach(t),ewr=r(Jje," (RoFormer model)"),Jje.forEach(t),owr=i(fe),$4=n(fe,"LI",{});var Yje=s($4);P8e=n(Yje,"STRONG",{});var uRt=s(P8e);rwr=r(uRt,"tapas"),uRt.forEach(t),twr=r(Yje," \u2014 "),FY=n(Yje,"A",{href:!0});var bRt=s(FY);awr=r(bRt,"TFTapasForMaskedLM"),bRt.forEach(t),nwr=r(Yje," (TAPAS model)"),Yje.forEach(t),swr=i(fe),k4=n(fe,"LI",{});var Kje=s(k4);B8e=n(Kje,"STRONG",{});var vRt=s(B8e);lwr=r(vRt,"xlm"),vRt.forEach(t),iwr=r(Kje," \u2014 "),TY=n(Kje,"A",{href:!0});var FRt=s(TY);dwr=r(FRt,"TFXLMWithLMHeadModel"),FRt.forEach(t),cwr=r(Kje," (XLM model)"),Kje.forEach(t),fwr=i(fe),S4=n(fe,"LI",{});var Zje=s(S4);I8e=n(Zje,"STRONG",{});var TRt=s(I8e);mwr=r(TRt,"xlm-roberta"),TRt.forEach(t),gwr=r(Zje," \u2014 "),MY=n(Zje,"A",{href:!0});var MRt=s(MY);hwr=r(MRt,"TFXLMRobertaForMaskedLM"),MRt.forEach(t),pwr=r(Zje," (XLM-RoBERTa model)"),Zje.forEach(t),fe.forEach(t),_wr=i(Nl),T(R4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),dze=i(f),Fc=n(f,"H2",{class:!0});var uWe=s(Fc);P4=n(uWe,"A",{id:!0,class:!0,href:!0});var ERt=s(P4);N8e=n(ERt,"SPAN",{});var CRt=s(N8e);T(hx.$$.fragment,CRt),CRt.forEach(t),ERt.forEach(t),uwr=i(uWe),q8e=n(uWe,"SPAN",{});var wRt=s(q8e);bwr=r(wRt,"TFAutoModelForSeq2SeqLM"),wRt.forEach(t),uWe.forEach(t),cze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(px.$$.fragment,ql),vwr=i(ql),Tc=n(ql,"P",{});var $te=s(Tc);Fwr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n($te,"A",{href:!0});var ARt=s(EY);Twr=r(ARt,"from_pretrained()"),ARt.forEach(t),Mwr=r($te," class method or the "),CY=n($te,"A",{href:!0});var LRt=s(CY);Ewr=r(LRt,"from_config()"),LRt.forEach(t),Cwr=r($te,` class
method.`),$te.forEach(t),wwr=i(ql),_x=n(ql,"P",{});var bWe=s(_x);Awr=r(bWe,"This class cannot be instantiated directly using "),j8e=n(bWe,"CODE",{});var yRt=s(j8e);Lwr=r(yRt,"__init__()"),yRt.forEach(t),ywr=r(bWe," (throws an error)."),bWe.forEach(t),xwr=i(ql),Nt=n(ql,"DIV",{class:!0});var fA=s(Nt);T(ux.$$.fragment,fA),$wr=i(fA),D8e=n(fA,"P",{});var xRt=s(D8e);kwr=r(xRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xRt.forEach(t),Swr=i(fA),Mc=n(fA,"P",{});var kte=s(Mc);Rwr=r(kte,`Note:
Loading a model from its configuration file does `),G8e=n(kte,"STRONG",{});var $Rt=s(G8e);Pwr=r($Rt,"not"),$Rt.forEach(t),Bwr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(kte,"A",{href:!0});var kRt=s(wY);Iwr=r(kRt,"from_pretrained()"),kRt.forEach(t),Nwr=r(kte," to load the model weights."),kte.forEach(t),qwr=i(fA),T(B4.$$.fragment,fA),fA.forEach(t),jwr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(bx.$$.fragment,jl),Dwr=i(jl),O8e=n(jl,"P",{});var SRt=s(O8e);Gwr=r(SRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SRt.forEach(t),Owr=i(jl),fn=n(jl,"P",{});var mA=s(fn);Vwr=r(mA,"The model class to instantiate is selected based on the "),V8e=n(mA,"CODE",{});var RRt=s(V8e);Xwr=r(RRt,"model_type"),RRt.forEach(t),zwr=r(mA,` property of the config object (either
passed as an argument or loaded from `),X8e=n(mA,"CODE",{});var PRt=s(X8e);Qwr=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),Wwr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=n(mA,"CODE",{});var BRt=s(z8e);Hwr=r(BRt,"pretrained_model_name_or_path"),BRt.forEach(t),Uwr=r(mA,":"),mA.forEach(t),Jwr=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);I4=n(Ie,"LI",{});var eDe=s(I4);Q8e=n(eDe,"STRONG",{});var IRt=s(Q8e);Ywr=r(IRt,"bart"),IRt.forEach(t),Kwr=r(eDe," \u2014 "),AY=n(eDe,"A",{href:!0});var NRt=s(AY);Zwr=r(NRt,"TFBartForConditionalGeneration"),NRt.forEach(t),eAr=r(eDe," (BART model)"),eDe.forEach(t),oAr=i(Ie),N4=n(Ie,"LI",{});var oDe=s(N4);W8e=n(oDe,"STRONG",{});var qRt=s(W8e);rAr=r(qRt,"blenderbot"),qRt.forEach(t),tAr=r(oDe," \u2014 "),LY=n(oDe,"A",{href:!0});var jRt=s(LY);aAr=r(jRt,"TFBlenderbotForConditionalGeneration"),jRt.forEach(t),nAr=r(oDe," (Blenderbot model)"),oDe.forEach(t),sAr=i(Ie),q4=n(Ie,"LI",{});var rDe=s(q4);H8e=n(rDe,"STRONG",{});var DRt=s(H8e);lAr=r(DRt,"blenderbot-small"),DRt.forEach(t),iAr=r(rDe," \u2014 "),yY=n(rDe,"A",{href:!0});var GRt=s(yY);dAr=r(GRt,"TFBlenderbotSmallForConditionalGeneration"),GRt.forEach(t),cAr=r(rDe," (BlenderbotSmall model)"),rDe.forEach(t),fAr=i(Ie),j4=n(Ie,"LI",{});var tDe=s(j4);U8e=n(tDe,"STRONG",{});var ORt=s(U8e);mAr=r(ORt,"encoder-decoder"),ORt.forEach(t),gAr=r(tDe," \u2014 "),xY=n(tDe,"A",{href:!0});var VRt=s(xY);hAr=r(VRt,"TFEncoderDecoderModel"),VRt.forEach(t),pAr=r(tDe," (Encoder decoder model)"),tDe.forEach(t),_Ar=i(Ie),D4=n(Ie,"LI",{});var aDe=s(D4);J8e=n(aDe,"STRONG",{});var XRt=s(J8e);uAr=r(XRt,"led"),XRt.forEach(t),bAr=r(aDe," \u2014 "),$Y=n(aDe,"A",{href:!0});var zRt=s($Y);vAr=r(zRt,"TFLEDForConditionalGeneration"),zRt.forEach(t),FAr=r(aDe," (LED model)"),aDe.forEach(t),TAr=i(Ie),G4=n(Ie,"LI",{});var nDe=s(G4);Y8e=n(nDe,"STRONG",{});var QRt=s(Y8e);MAr=r(QRt,"marian"),QRt.forEach(t),EAr=r(nDe," \u2014 "),kY=n(nDe,"A",{href:!0});var WRt=s(kY);CAr=r(WRt,"TFMarianMTModel"),WRt.forEach(t),wAr=r(nDe," (Marian model)"),nDe.forEach(t),AAr=i(Ie),O4=n(Ie,"LI",{});var sDe=s(O4);K8e=n(sDe,"STRONG",{});var HRt=s(K8e);LAr=r(HRt,"mbart"),HRt.forEach(t),yAr=r(sDe," \u2014 "),SY=n(sDe,"A",{href:!0});var URt=s(SY);xAr=r(URt,"TFMBartForConditionalGeneration"),URt.forEach(t),$Ar=r(sDe," (mBART model)"),sDe.forEach(t),kAr=i(Ie),V4=n(Ie,"LI",{});var lDe=s(V4);Z8e=n(lDe,"STRONG",{});var JRt=s(Z8e);SAr=r(JRt,"mt5"),JRt.forEach(t),RAr=r(lDe," \u2014 "),RY=n(lDe,"A",{href:!0});var YRt=s(RY);PAr=r(YRt,"TFMT5ForConditionalGeneration"),YRt.forEach(t),BAr=r(lDe," (MT5 model)"),lDe.forEach(t),IAr=i(Ie),X4=n(Ie,"LI",{});var iDe=s(X4);eMe=n(iDe,"STRONG",{});var KRt=s(eMe);NAr=r(KRt,"pegasus"),KRt.forEach(t),qAr=r(iDe," \u2014 "),PY=n(iDe,"A",{href:!0});var ZRt=s(PY);jAr=r(ZRt,"TFPegasusForConditionalGeneration"),ZRt.forEach(t),DAr=r(iDe," (Pegasus model)"),iDe.forEach(t),GAr=i(Ie),z4=n(Ie,"LI",{});var dDe=s(z4);oMe=n(dDe,"STRONG",{});var ePt=s(oMe);OAr=r(ePt,"t5"),ePt.forEach(t),VAr=r(dDe," \u2014 "),BY=n(dDe,"A",{href:!0});var oPt=s(BY);XAr=r(oPt,"TFT5ForConditionalGeneration"),oPt.forEach(t),zAr=r(dDe," (T5 model)"),dDe.forEach(t),Ie.forEach(t),QAr=i(jl),T(Q4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),fze=i(f),Ec=n(f,"H2",{class:!0});var vWe=s(Ec);W4=n(vWe,"A",{id:!0,class:!0,href:!0});var rPt=s(W4);rMe=n(rPt,"SPAN",{});var tPt=s(rMe);T(vx.$$.fragment,tPt),tPt.forEach(t),rPt.forEach(t),WAr=i(vWe),tMe=n(vWe,"SPAN",{});var aPt=s(tMe);HAr=r(aPt,"TFAutoModelForSequenceClassification"),aPt.forEach(t),vWe.forEach(t),mze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Fx.$$.fragment,Dl),UAr=i(Dl),Cc=n(Dl,"P",{});var Ste=s(Cc);JAr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IY=n(Ste,"A",{href:!0});var nPt=s(IY);YAr=r(nPt,"from_pretrained()"),nPt.forEach(t),KAr=r(Ste," class method or the "),NY=n(Ste,"A",{href:!0});var sPt=s(NY);ZAr=r(sPt,"from_config()"),sPt.forEach(t),eLr=r(Ste,` class
method.`),Ste.forEach(t),oLr=i(Dl),Tx=n(Dl,"P",{});var FWe=s(Tx);rLr=r(FWe,"This class cannot be instantiated directly using "),aMe=n(FWe,"CODE",{});var lPt=s(aMe);tLr=r(lPt,"__init__()"),lPt.forEach(t),aLr=r(FWe," (throws an error)."),FWe.forEach(t),nLr=i(Dl),qt=n(Dl,"DIV",{class:!0});var gA=s(qt);T(Mx.$$.fragment,gA),sLr=i(gA),nMe=n(gA,"P",{});var iPt=s(nMe);lLr=r(iPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iPt.forEach(t),iLr=i(gA),wc=n(gA,"P",{});var Rte=s(wc);dLr=r(Rte,`Note:
Loading a model from its configuration file does `),sMe=n(Rte,"STRONG",{});var dPt=s(sMe);cLr=r(dPt,"not"),dPt.forEach(t),fLr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Rte,"A",{href:!0});var cPt=s(qY);mLr=r(cPt,"from_pretrained()"),cPt.forEach(t),gLr=r(Rte," to load the model weights."),Rte.forEach(t),hLr=i(gA),T(H4.$$.fragment,gA),gA.forEach(t),pLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Ex.$$.fragment,Gl),_Lr=i(Gl),lMe=n(Gl,"P",{});var fPt=s(lMe);uLr=r(fPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fPt.forEach(t),bLr=i(Gl),mn=n(Gl,"P",{});var hA=s(mn);vLr=r(hA,"The model class to instantiate is selected based on the "),iMe=n(hA,"CODE",{});var mPt=s(iMe);FLr=r(mPt,"model_type"),mPt.forEach(t),TLr=r(hA,` property of the config object (either
passed as an argument or loaded from `),dMe=n(hA,"CODE",{});var gPt=s(dMe);MLr=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),ELr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(hA,"CODE",{});var hPt=s(cMe);CLr=r(hPt,"pretrained_model_name_or_path"),hPt.forEach(t),wLr=r(hA,":"),hA.forEach(t),ALr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);U4=n(ne,"LI",{});var cDe=s(U4);fMe=n(cDe,"STRONG",{});var pPt=s(fMe);LLr=r(pPt,"albert"),pPt.forEach(t),yLr=r(cDe," \u2014 "),jY=n(cDe,"A",{href:!0});var _Pt=s(jY);xLr=r(_Pt,"TFAlbertForSequenceClassification"),_Pt.forEach(t),$Lr=r(cDe," (ALBERT model)"),cDe.forEach(t),kLr=i(ne),J4=n(ne,"LI",{});var fDe=s(J4);mMe=n(fDe,"STRONG",{});var uPt=s(mMe);SLr=r(uPt,"bert"),uPt.forEach(t),RLr=r(fDe," \u2014 "),DY=n(fDe,"A",{href:!0});var bPt=s(DY);PLr=r(bPt,"TFBertForSequenceClassification"),bPt.forEach(t),BLr=r(fDe," (BERT model)"),fDe.forEach(t),ILr=i(ne),Y4=n(ne,"LI",{});var mDe=s(Y4);gMe=n(mDe,"STRONG",{});var vPt=s(gMe);NLr=r(vPt,"camembert"),vPt.forEach(t),qLr=r(mDe," \u2014 "),GY=n(mDe,"A",{href:!0});var FPt=s(GY);jLr=r(FPt,"TFCamembertForSequenceClassification"),FPt.forEach(t),DLr=r(mDe," (CamemBERT model)"),mDe.forEach(t),GLr=i(ne),K4=n(ne,"LI",{});var gDe=s(K4);hMe=n(gDe,"STRONG",{});var TPt=s(hMe);OLr=r(TPt,"convbert"),TPt.forEach(t),VLr=r(gDe," \u2014 "),OY=n(gDe,"A",{href:!0});var MPt=s(OY);XLr=r(MPt,"TFConvBertForSequenceClassification"),MPt.forEach(t),zLr=r(gDe," (ConvBERT model)"),gDe.forEach(t),QLr=i(ne),Z4=n(ne,"LI",{});var hDe=s(Z4);pMe=n(hDe,"STRONG",{});var EPt=s(pMe);WLr=r(EPt,"ctrl"),EPt.forEach(t),HLr=r(hDe," \u2014 "),VY=n(hDe,"A",{href:!0});var CPt=s(VY);ULr=r(CPt,"TFCTRLForSequenceClassification"),CPt.forEach(t),JLr=r(hDe," (CTRL model)"),hDe.forEach(t),YLr=i(ne),eE=n(ne,"LI",{});var pDe=s(eE);_Me=n(pDe,"STRONG",{});var wPt=s(_Me);KLr=r(wPt,"deberta"),wPt.forEach(t),ZLr=r(pDe," \u2014 "),XY=n(pDe,"A",{href:!0});var APt=s(XY);eyr=r(APt,"TFDebertaForSequenceClassification"),APt.forEach(t),oyr=r(pDe," (DeBERTa model)"),pDe.forEach(t),ryr=i(ne),oE=n(ne,"LI",{});var _De=s(oE);uMe=n(_De,"STRONG",{});var LPt=s(uMe);tyr=r(LPt,"deberta-v2"),LPt.forEach(t),ayr=r(_De," \u2014 "),zY=n(_De,"A",{href:!0});var yPt=s(zY);nyr=r(yPt,"TFDebertaV2ForSequenceClassification"),yPt.forEach(t),syr=r(_De," (DeBERTa-v2 model)"),_De.forEach(t),lyr=i(ne),rE=n(ne,"LI",{});var uDe=s(rE);bMe=n(uDe,"STRONG",{});var xPt=s(bMe);iyr=r(xPt,"distilbert"),xPt.forEach(t),dyr=r(uDe," \u2014 "),QY=n(uDe,"A",{href:!0});var $Pt=s(QY);cyr=r($Pt,"TFDistilBertForSequenceClassification"),$Pt.forEach(t),fyr=r(uDe," (DistilBERT model)"),uDe.forEach(t),myr=i(ne),tE=n(ne,"LI",{});var bDe=s(tE);vMe=n(bDe,"STRONG",{});var kPt=s(vMe);gyr=r(kPt,"electra"),kPt.forEach(t),hyr=r(bDe," \u2014 "),WY=n(bDe,"A",{href:!0});var SPt=s(WY);pyr=r(SPt,"TFElectraForSequenceClassification"),SPt.forEach(t),_yr=r(bDe," (ELECTRA model)"),bDe.forEach(t),uyr=i(ne),aE=n(ne,"LI",{});var vDe=s(aE);FMe=n(vDe,"STRONG",{});var RPt=s(FMe);byr=r(RPt,"flaubert"),RPt.forEach(t),vyr=r(vDe," \u2014 "),HY=n(vDe,"A",{href:!0});var PPt=s(HY);Fyr=r(PPt,"TFFlaubertForSequenceClassification"),PPt.forEach(t),Tyr=r(vDe," (FlauBERT model)"),vDe.forEach(t),Myr=i(ne),nE=n(ne,"LI",{});var FDe=s(nE);TMe=n(FDe,"STRONG",{});var BPt=s(TMe);Eyr=r(BPt,"funnel"),BPt.forEach(t),Cyr=r(FDe," \u2014 "),UY=n(FDe,"A",{href:!0});var IPt=s(UY);wyr=r(IPt,"TFFunnelForSequenceClassification"),IPt.forEach(t),Ayr=r(FDe," (Funnel Transformer model)"),FDe.forEach(t),Lyr=i(ne),sE=n(ne,"LI",{});var TDe=s(sE);MMe=n(TDe,"STRONG",{});var NPt=s(MMe);yyr=r(NPt,"gpt2"),NPt.forEach(t),xyr=r(TDe," \u2014 "),JY=n(TDe,"A",{href:!0});var qPt=s(JY);$yr=r(qPt,"TFGPT2ForSequenceClassification"),qPt.forEach(t),kyr=r(TDe," (OpenAI GPT-2 model)"),TDe.forEach(t),Syr=i(ne),lE=n(ne,"LI",{});var MDe=s(lE);EMe=n(MDe,"STRONG",{});var jPt=s(EMe);Ryr=r(jPt,"gptj"),jPt.forEach(t),Pyr=r(MDe," \u2014 "),YY=n(MDe,"A",{href:!0});var DPt=s(YY);Byr=r(DPt,"TFGPTJForSequenceClassification"),DPt.forEach(t),Iyr=r(MDe," (GPT-J model)"),MDe.forEach(t),Nyr=i(ne),iE=n(ne,"LI",{});var EDe=s(iE);CMe=n(EDe,"STRONG",{});var GPt=s(CMe);qyr=r(GPt,"layoutlm"),GPt.forEach(t),jyr=r(EDe," \u2014 "),KY=n(EDe,"A",{href:!0});var OPt=s(KY);Dyr=r(OPt,"TFLayoutLMForSequenceClassification"),OPt.forEach(t),Gyr=r(EDe," (LayoutLM model)"),EDe.forEach(t),Oyr=i(ne),dE=n(ne,"LI",{});var CDe=s(dE);wMe=n(CDe,"STRONG",{});var VPt=s(wMe);Vyr=r(VPt,"longformer"),VPt.forEach(t),Xyr=r(CDe," \u2014 "),ZY=n(CDe,"A",{href:!0});var XPt=s(ZY);zyr=r(XPt,"TFLongformerForSequenceClassification"),XPt.forEach(t),Qyr=r(CDe," (Longformer model)"),CDe.forEach(t),Wyr=i(ne),cE=n(ne,"LI",{});var wDe=s(cE);AMe=n(wDe,"STRONG",{});var zPt=s(AMe);Hyr=r(zPt,"mobilebert"),zPt.forEach(t),Uyr=r(wDe," \u2014 "),eK=n(wDe,"A",{href:!0});var QPt=s(eK);Jyr=r(QPt,"TFMobileBertForSequenceClassification"),QPt.forEach(t),Yyr=r(wDe," (MobileBERT model)"),wDe.forEach(t),Kyr=i(ne),fE=n(ne,"LI",{});var ADe=s(fE);LMe=n(ADe,"STRONG",{});var WPt=s(LMe);Zyr=r(WPt,"mpnet"),WPt.forEach(t),e9r=r(ADe," \u2014 "),oK=n(ADe,"A",{href:!0});var HPt=s(oK);o9r=r(HPt,"TFMPNetForSequenceClassification"),HPt.forEach(t),r9r=r(ADe," (MPNet model)"),ADe.forEach(t),t9r=i(ne),mE=n(ne,"LI",{});var LDe=s(mE);yMe=n(LDe,"STRONG",{});var UPt=s(yMe);a9r=r(UPt,"openai-gpt"),UPt.forEach(t),n9r=r(LDe," \u2014 "),rK=n(LDe,"A",{href:!0});var JPt=s(rK);s9r=r(JPt,"TFOpenAIGPTForSequenceClassification"),JPt.forEach(t),l9r=r(LDe," (OpenAI GPT model)"),LDe.forEach(t),i9r=i(ne),gE=n(ne,"LI",{});var yDe=s(gE);xMe=n(yDe,"STRONG",{});var YPt=s(xMe);d9r=r(YPt,"rembert"),YPt.forEach(t),c9r=r(yDe," \u2014 "),tK=n(yDe,"A",{href:!0});var KPt=s(tK);f9r=r(KPt,"TFRemBertForSequenceClassification"),KPt.forEach(t),m9r=r(yDe," (RemBERT model)"),yDe.forEach(t),g9r=i(ne),hE=n(ne,"LI",{});var xDe=s(hE);$Me=n(xDe,"STRONG",{});var ZPt=s($Me);h9r=r(ZPt,"roberta"),ZPt.forEach(t),p9r=r(xDe," \u2014 "),aK=n(xDe,"A",{href:!0});var eBt=s(aK);_9r=r(eBt,"TFRobertaForSequenceClassification"),eBt.forEach(t),u9r=r(xDe," (RoBERTa model)"),xDe.forEach(t),b9r=i(ne),pE=n(ne,"LI",{});var $De=s(pE);kMe=n($De,"STRONG",{});var oBt=s(kMe);v9r=r(oBt,"roformer"),oBt.forEach(t),F9r=r($De," \u2014 "),nK=n($De,"A",{href:!0});var rBt=s(nK);T9r=r(rBt,"TFRoFormerForSequenceClassification"),rBt.forEach(t),M9r=r($De," (RoFormer model)"),$De.forEach(t),E9r=i(ne),_E=n(ne,"LI",{});var kDe=s(_E);SMe=n(kDe,"STRONG",{});var tBt=s(SMe);C9r=r(tBt,"tapas"),tBt.forEach(t),w9r=r(kDe," \u2014 "),sK=n(kDe,"A",{href:!0});var aBt=s(sK);A9r=r(aBt,"TFTapasForSequenceClassification"),aBt.forEach(t),L9r=r(kDe," (TAPAS model)"),kDe.forEach(t),y9r=i(ne),uE=n(ne,"LI",{});var SDe=s(uE);RMe=n(SDe,"STRONG",{});var nBt=s(RMe);x9r=r(nBt,"transfo-xl"),nBt.forEach(t),$9r=r(SDe," \u2014 "),lK=n(SDe,"A",{href:!0});var sBt=s(lK);k9r=r(sBt,"TFTransfoXLForSequenceClassification"),sBt.forEach(t),S9r=r(SDe," (Transformer-XL model)"),SDe.forEach(t),R9r=i(ne),bE=n(ne,"LI",{});var RDe=s(bE);PMe=n(RDe,"STRONG",{});var lBt=s(PMe);P9r=r(lBt,"xlm"),lBt.forEach(t),B9r=r(RDe," \u2014 "),iK=n(RDe,"A",{href:!0});var iBt=s(iK);I9r=r(iBt,"TFXLMForSequenceClassification"),iBt.forEach(t),N9r=r(RDe," (XLM model)"),RDe.forEach(t),q9r=i(ne),vE=n(ne,"LI",{});var PDe=s(vE);BMe=n(PDe,"STRONG",{});var dBt=s(BMe);j9r=r(dBt,"xlm-roberta"),dBt.forEach(t),D9r=r(PDe," \u2014 "),dK=n(PDe,"A",{href:!0});var cBt=s(dK);G9r=r(cBt,"TFXLMRobertaForSequenceClassification"),cBt.forEach(t),O9r=r(PDe," (XLM-RoBERTa model)"),PDe.forEach(t),V9r=i(ne),FE=n(ne,"LI",{});var BDe=s(FE);IMe=n(BDe,"STRONG",{});var fBt=s(IMe);X9r=r(fBt,"xlnet"),fBt.forEach(t),z9r=r(BDe," \u2014 "),cK=n(BDe,"A",{href:!0});var mBt=s(cK);Q9r=r(mBt,"TFXLNetForSequenceClassification"),mBt.forEach(t),W9r=r(BDe," (XLNet model)"),BDe.forEach(t),ne.forEach(t),H9r=i(Gl),T(TE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),gze=i(f),Ac=n(f,"H2",{class:!0});var TWe=s(Ac);ME=n(TWe,"A",{id:!0,class:!0,href:!0});var gBt=s(ME);NMe=n(gBt,"SPAN",{});var hBt=s(NMe);T(Cx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),U9r=i(TWe),qMe=n(TWe,"SPAN",{});var pBt=s(qMe);J9r=r(pBt,"TFAutoModelForMultipleChoice"),pBt.forEach(t),TWe.forEach(t),hze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(wx.$$.fragment,Ol),Y9r=i(Ol),Lc=n(Ol,"P",{});var Pte=s(Lc);K9r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fK=n(Pte,"A",{href:!0});var _Bt=s(fK);Z9r=r(_Bt,"from_pretrained()"),_Bt.forEach(t),exr=r(Pte," class method or the "),mK=n(Pte,"A",{href:!0});var uBt=s(mK);oxr=r(uBt,"from_config()"),uBt.forEach(t),rxr=r(Pte,` class
method.`),Pte.forEach(t),txr=i(Ol),Ax=n(Ol,"P",{});var MWe=s(Ax);axr=r(MWe,"This class cannot be instantiated directly using "),jMe=n(MWe,"CODE",{});var bBt=s(jMe);nxr=r(bBt,"__init__()"),bBt.forEach(t),sxr=r(MWe," (throws an error)."),MWe.forEach(t),lxr=i(Ol),jt=n(Ol,"DIV",{class:!0});var pA=s(jt);T(Lx.$$.fragment,pA),ixr=i(pA),DMe=n(pA,"P",{});var vBt=s(DMe);dxr=r(vBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vBt.forEach(t),cxr=i(pA),yc=n(pA,"P",{});var Bte=s(yc);fxr=r(Bte,`Note:
Loading a model from its configuration file does `),GMe=n(Bte,"STRONG",{});var FBt=s(GMe);mxr=r(FBt,"not"),FBt.forEach(t),gxr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Bte,"A",{href:!0});var TBt=s(gK);hxr=r(TBt,"from_pretrained()"),TBt.forEach(t),pxr=r(Bte," to load the model weights."),Bte.forEach(t),_xr=i(pA),T(EE.$$.fragment,pA),pA.forEach(t),uxr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(yx.$$.fragment,Vl),bxr=i(Vl),OMe=n(Vl,"P",{});var MBt=s(OMe);vxr=r(MBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MBt.forEach(t),Fxr=i(Vl),gn=n(Vl,"P",{});var _A=s(gn);Txr=r(_A,"The model class to instantiate is selected based on the "),VMe=n(_A,"CODE",{});var EBt=s(VMe);Mxr=r(EBt,"model_type"),EBt.forEach(t),Exr=r(_A,` property of the config object (either
passed as an argument or loaded from `),XMe=n(_A,"CODE",{});var CBt=s(XMe);Cxr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),wxr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(_A,"CODE",{});var wBt=s(zMe);Axr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),Lxr=r(_A,":"),_A.forEach(t),yxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);CE=n(Fe,"LI",{});var IDe=s(CE);QMe=n(IDe,"STRONG",{});var ABt=s(QMe);xxr=r(ABt,"albert"),ABt.forEach(t),$xr=r(IDe," \u2014 "),hK=n(IDe,"A",{href:!0});var LBt=s(hK);kxr=r(LBt,"TFAlbertForMultipleChoice"),LBt.forEach(t),Sxr=r(IDe," (ALBERT model)"),IDe.forEach(t),Rxr=i(Fe),wE=n(Fe,"LI",{});var NDe=s(wE);WMe=n(NDe,"STRONG",{});var yBt=s(WMe);Pxr=r(yBt,"bert"),yBt.forEach(t),Bxr=r(NDe," \u2014 "),pK=n(NDe,"A",{href:!0});var xBt=s(pK);Ixr=r(xBt,"TFBertForMultipleChoice"),xBt.forEach(t),Nxr=r(NDe," (BERT model)"),NDe.forEach(t),qxr=i(Fe),AE=n(Fe,"LI",{});var qDe=s(AE);HMe=n(qDe,"STRONG",{});var $Bt=s(HMe);jxr=r($Bt,"camembert"),$Bt.forEach(t),Dxr=r(qDe," \u2014 "),_K=n(qDe,"A",{href:!0});var kBt=s(_K);Gxr=r(kBt,"TFCamembertForMultipleChoice"),kBt.forEach(t),Oxr=r(qDe," (CamemBERT model)"),qDe.forEach(t),Vxr=i(Fe),LE=n(Fe,"LI",{});var jDe=s(LE);UMe=n(jDe,"STRONG",{});var SBt=s(UMe);Xxr=r(SBt,"convbert"),SBt.forEach(t),zxr=r(jDe," \u2014 "),uK=n(jDe,"A",{href:!0});var RBt=s(uK);Qxr=r(RBt,"TFConvBertForMultipleChoice"),RBt.forEach(t),Wxr=r(jDe," (ConvBERT model)"),jDe.forEach(t),Hxr=i(Fe),yE=n(Fe,"LI",{});var DDe=s(yE);JMe=n(DDe,"STRONG",{});var PBt=s(JMe);Uxr=r(PBt,"distilbert"),PBt.forEach(t),Jxr=r(DDe," \u2014 "),bK=n(DDe,"A",{href:!0});var BBt=s(bK);Yxr=r(BBt,"TFDistilBertForMultipleChoice"),BBt.forEach(t),Kxr=r(DDe," (DistilBERT model)"),DDe.forEach(t),Zxr=i(Fe),xE=n(Fe,"LI",{});var GDe=s(xE);YMe=n(GDe,"STRONG",{});var IBt=s(YMe);e$r=r(IBt,"electra"),IBt.forEach(t),o$r=r(GDe," \u2014 "),vK=n(GDe,"A",{href:!0});var NBt=s(vK);r$r=r(NBt,"TFElectraForMultipleChoice"),NBt.forEach(t),t$r=r(GDe," (ELECTRA model)"),GDe.forEach(t),a$r=i(Fe),$E=n(Fe,"LI",{});var ODe=s($E);KMe=n(ODe,"STRONG",{});var qBt=s(KMe);n$r=r(qBt,"flaubert"),qBt.forEach(t),s$r=r(ODe," \u2014 "),FK=n(ODe,"A",{href:!0});var jBt=s(FK);l$r=r(jBt,"TFFlaubertForMultipleChoice"),jBt.forEach(t),i$r=r(ODe," (FlauBERT model)"),ODe.forEach(t),d$r=i(Fe),kE=n(Fe,"LI",{});var VDe=s(kE);ZMe=n(VDe,"STRONG",{});var DBt=s(ZMe);c$r=r(DBt,"funnel"),DBt.forEach(t),f$r=r(VDe," \u2014 "),TK=n(VDe,"A",{href:!0});var GBt=s(TK);m$r=r(GBt,"TFFunnelForMultipleChoice"),GBt.forEach(t),g$r=r(VDe," (Funnel Transformer model)"),VDe.forEach(t),h$r=i(Fe),SE=n(Fe,"LI",{});var XDe=s(SE);e4e=n(XDe,"STRONG",{});var OBt=s(e4e);p$r=r(OBt,"longformer"),OBt.forEach(t),_$r=r(XDe," \u2014 "),MK=n(XDe,"A",{href:!0});var VBt=s(MK);u$r=r(VBt,"TFLongformerForMultipleChoice"),VBt.forEach(t),b$r=r(XDe," (Longformer model)"),XDe.forEach(t),v$r=i(Fe),RE=n(Fe,"LI",{});var zDe=s(RE);o4e=n(zDe,"STRONG",{});var XBt=s(o4e);F$r=r(XBt,"mobilebert"),XBt.forEach(t),T$r=r(zDe," \u2014 "),EK=n(zDe,"A",{href:!0});var zBt=s(EK);M$r=r(zBt,"TFMobileBertForMultipleChoice"),zBt.forEach(t),E$r=r(zDe," (MobileBERT model)"),zDe.forEach(t),C$r=i(Fe),PE=n(Fe,"LI",{});var QDe=s(PE);r4e=n(QDe,"STRONG",{});var QBt=s(r4e);w$r=r(QBt,"mpnet"),QBt.forEach(t),A$r=r(QDe," \u2014 "),CK=n(QDe,"A",{href:!0});var WBt=s(CK);L$r=r(WBt,"TFMPNetForMultipleChoice"),WBt.forEach(t),y$r=r(QDe," (MPNet model)"),QDe.forEach(t),x$r=i(Fe),BE=n(Fe,"LI",{});var WDe=s(BE);t4e=n(WDe,"STRONG",{});var HBt=s(t4e);$$r=r(HBt,"rembert"),HBt.forEach(t),k$r=r(WDe," \u2014 "),wK=n(WDe,"A",{href:!0});var UBt=s(wK);S$r=r(UBt,"TFRemBertForMultipleChoice"),UBt.forEach(t),R$r=r(WDe," (RemBERT model)"),WDe.forEach(t),P$r=i(Fe),IE=n(Fe,"LI",{});var HDe=s(IE);a4e=n(HDe,"STRONG",{});var JBt=s(a4e);B$r=r(JBt,"roberta"),JBt.forEach(t),I$r=r(HDe," \u2014 "),AK=n(HDe,"A",{href:!0});var YBt=s(AK);N$r=r(YBt,"TFRobertaForMultipleChoice"),YBt.forEach(t),q$r=r(HDe," (RoBERTa model)"),HDe.forEach(t),j$r=i(Fe),NE=n(Fe,"LI",{});var UDe=s(NE);n4e=n(UDe,"STRONG",{});var KBt=s(n4e);D$r=r(KBt,"roformer"),KBt.forEach(t),G$r=r(UDe," \u2014 "),LK=n(UDe,"A",{href:!0});var ZBt=s(LK);O$r=r(ZBt,"TFRoFormerForMultipleChoice"),ZBt.forEach(t),V$r=r(UDe," (RoFormer model)"),UDe.forEach(t),X$r=i(Fe),qE=n(Fe,"LI",{});var JDe=s(qE);s4e=n(JDe,"STRONG",{});var eIt=s(s4e);z$r=r(eIt,"xlm"),eIt.forEach(t),Q$r=r(JDe," \u2014 "),yK=n(JDe,"A",{href:!0});var oIt=s(yK);W$r=r(oIt,"TFXLMForMultipleChoice"),oIt.forEach(t),H$r=r(JDe," (XLM model)"),JDe.forEach(t),U$r=i(Fe),jE=n(Fe,"LI",{});var YDe=s(jE);l4e=n(YDe,"STRONG",{});var rIt=s(l4e);J$r=r(rIt,"xlm-roberta"),rIt.forEach(t),Y$r=r(YDe," \u2014 "),xK=n(YDe,"A",{href:!0});var tIt=s(xK);K$r=r(tIt,"TFXLMRobertaForMultipleChoice"),tIt.forEach(t),Z$r=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),ekr=i(Fe),DE=n(Fe,"LI",{});var KDe=s(DE);i4e=n(KDe,"STRONG",{});var aIt=s(i4e);okr=r(aIt,"xlnet"),aIt.forEach(t),rkr=r(KDe," \u2014 "),$K=n(KDe,"A",{href:!0});var nIt=s($K);tkr=r(nIt,"TFXLNetForMultipleChoice"),nIt.forEach(t),akr=r(KDe," (XLNet model)"),KDe.forEach(t),Fe.forEach(t),nkr=i(Vl),T(GE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),pze=i(f),xc=n(f,"H2",{class:!0});var EWe=s(xc);OE=n(EWe,"A",{id:!0,class:!0,href:!0});var sIt=s(OE);d4e=n(sIt,"SPAN",{});var lIt=s(d4e);T(xx.$$.fragment,lIt),lIt.forEach(t),sIt.forEach(t),skr=i(EWe),c4e=n(EWe,"SPAN",{});var iIt=s(c4e);lkr=r(iIt,"TFAutoModelForNextSentencePrediction"),iIt.forEach(t),EWe.forEach(t),_ze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T($x.$$.fragment,Xl),ikr=i(Xl),$c=n(Xl,"P",{});var Ite=s($c);dkr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=n(Ite,"A",{href:!0});var dIt=s(kK);ckr=r(dIt,"from_pretrained()"),dIt.forEach(t),fkr=r(Ite," class method or the "),SK=n(Ite,"A",{href:!0});var cIt=s(SK);mkr=r(cIt,"from_config()"),cIt.forEach(t),gkr=r(Ite,` class
method.`),Ite.forEach(t),hkr=i(Xl),kx=n(Xl,"P",{});var CWe=s(kx);pkr=r(CWe,"This class cannot be instantiated directly using "),f4e=n(CWe,"CODE",{});var fIt=s(f4e);_kr=r(fIt,"__init__()"),fIt.forEach(t),ukr=r(CWe," (throws an error)."),CWe.forEach(t),bkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var uA=s(Dt);T(Sx.$$.fragment,uA),vkr=i(uA),m4e=n(uA,"P",{});var mIt=s(m4e);Fkr=r(mIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mIt.forEach(t),Tkr=i(uA),kc=n(uA,"P",{});var Nte=s(kc);Mkr=r(Nte,`Note:
Loading a model from its configuration file does `),g4e=n(Nte,"STRONG",{});var gIt=s(g4e);Ekr=r(gIt,"not"),gIt.forEach(t),Ckr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Nte,"A",{href:!0});var hIt=s(RK);wkr=r(hIt,"from_pretrained()"),hIt.forEach(t),Akr=r(Nte," to load the model weights."),Nte.forEach(t),Lkr=i(uA),T(VE.$$.fragment,uA),uA.forEach(t),ykr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Rx.$$.fragment,zl),xkr=i(zl),h4e=n(zl,"P",{});var pIt=s(h4e);$kr=r(pIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pIt.forEach(t),kkr=i(zl),hn=n(zl,"P",{});var bA=s(hn);Skr=r(bA,"The model class to instantiate is selected based on the "),p4e=n(bA,"CODE",{});var _It=s(p4e);Rkr=r(_It,"model_type"),_It.forEach(t),Pkr=r(bA,` property of the config object (either
passed as an argument or loaded from `),_4e=n(bA,"CODE",{});var uIt=s(_4e);Bkr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),Ikr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=n(bA,"CODE",{});var bIt=s(u4e);Nkr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),qkr=r(bA,":"),bA.forEach(t),jkr=i(zl),Px=n(zl,"UL",{});var wWe=s(Px);XE=n(wWe,"LI",{});var ZDe=s(XE);b4e=n(ZDe,"STRONG",{});var vIt=s(b4e);Dkr=r(vIt,"bert"),vIt.forEach(t),Gkr=r(ZDe," \u2014 "),PK=n(ZDe,"A",{href:!0});var FIt=s(PK);Okr=r(FIt,"TFBertForNextSentencePrediction"),FIt.forEach(t),Vkr=r(ZDe," (BERT model)"),ZDe.forEach(t),Xkr=i(wWe),zE=n(wWe,"LI",{});var eGe=s(zE);v4e=n(eGe,"STRONG",{});var TIt=s(v4e);zkr=r(TIt,"mobilebert"),TIt.forEach(t),Qkr=r(eGe," \u2014 "),BK=n(eGe,"A",{href:!0});var MIt=s(BK);Wkr=r(MIt,"TFMobileBertForNextSentencePrediction"),MIt.forEach(t),Hkr=r(eGe," (MobileBERT model)"),eGe.forEach(t),wWe.forEach(t),Ukr=i(zl),T(QE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),uze=i(f),Sc=n(f,"H2",{class:!0});var AWe=s(Sc);WE=n(AWe,"A",{id:!0,class:!0,href:!0});var EIt=s(WE);F4e=n(EIt,"SPAN",{});var CIt=s(F4e);T(Bx.$$.fragment,CIt),CIt.forEach(t),EIt.forEach(t),Jkr=i(AWe),T4e=n(AWe,"SPAN",{});var wIt=s(T4e);Ykr=r(wIt,"TFAutoModelForTableQuestionAnswering"),wIt.forEach(t),AWe.forEach(t),bze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Ix.$$.fragment,Ql),Kkr=i(Ql),Rc=n(Ql,"P",{});var qte=s(Rc);Zkr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IK=n(qte,"A",{href:!0});var AIt=s(IK);eSr=r(AIt,"from_pretrained()"),AIt.forEach(t),oSr=r(qte," class method or the "),NK=n(qte,"A",{href:!0});var LIt=s(NK);rSr=r(LIt,"from_config()"),LIt.forEach(t),tSr=r(qte,` class
method.`),qte.forEach(t),aSr=i(Ql),Nx=n(Ql,"P",{});var LWe=s(Nx);nSr=r(LWe,"This class cannot be instantiated directly using "),M4e=n(LWe,"CODE",{});var yIt=s(M4e);sSr=r(yIt,"__init__()"),yIt.forEach(t),lSr=r(LWe," (throws an error)."),LWe.forEach(t),iSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var vA=s(Gt);T(qx.$$.fragment,vA),dSr=i(vA),E4e=n(vA,"P",{});var xIt=s(E4e);cSr=r(xIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xIt.forEach(t),fSr=i(vA),Pc=n(vA,"P",{});var jte=s(Pc);mSr=r(jte,`Note:
Loading a model from its configuration file does `),C4e=n(jte,"STRONG",{});var $It=s(C4e);gSr=r($It,"not"),$It.forEach(t),hSr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(jte,"A",{href:!0});var kIt=s(qK);pSr=r(kIt,"from_pretrained()"),kIt.forEach(t),_Sr=r(jte," to load the model weights."),jte.forEach(t),uSr=i(vA),T(HE.$$.fragment,vA),vA.forEach(t),bSr=i(Ql),Nr=n(Ql,"DIV",{class:!0});var Wl=s(Nr);T(jx.$$.fragment,Wl),vSr=i(Wl),w4e=n(Wl,"P",{});var SIt=s(w4e);FSr=r(SIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SIt.forEach(t),TSr=i(Wl),pn=n(Wl,"P",{});var FA=s(pn);MSr=r(FA,"The model class to instantiate is selected based on the "),A4e=n(FA,"CODE",{});var RIt=s(A4e);ESr=r(RIt,"model_type"),RIt.forEach(t),CSr=r(FA,` property of the config object (either
passed as an argument or loaded from `),L4e=n(FA,"CODE",{});var PIt=s(L4e);wSr=r(PIt,"pretrained_model_name_or_path"),PIt.forEach(t),ASr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(FA,"CODE",{});var BIt=s(y4e);LSr=r(BIt,"pretrained_model_name_or_path"),BIt.forEach(t),ySr=r(FA,":"),FA.forEach(t),xSr=i(Wl),x4e=n(Wl,"UL",{});var IIt=s(x4e);UE=n(IIt,"LI",{});var oGe=s(UE);$4e=n(oGe,"STRONG",{});var NIt=s($4e);$Sr=r(NIt,"tapas"),NIt.forEach(t),kSr=r(oGe," \u2014 "),jK=n(oGe,"A",{href:!0});var qIt=s(jK);SSr=r(qIt,"TFTapasForQuestionAnswering"),qIt.forEach(t),RSr=r(oGe," (TAPAS model)"),oGe.forEach(t),IIt.forEach(t),PSr=i(Wl),T(JE.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),vze=i(f),Bc=n(f,"H2",{class:!0});var yWe=s(Bc);YE=n(yWe,"A",{id:!0,class:!0,href:!0});var jIt=s(YE);k4e=n(jIt,"SPAN",{});var DIt=s(k4e);T(Dx.$$.fragment,DIt),DIt.forEach(t),jIt.forEach(t),BSr=i(yWe),S4e=n(yWe,"SPAN",{});var GIt=s(S4e);ISr=r(GIt,"TFAutoModelForTokenClassification"),GIt.forEach(t),yWe.forEach(t),Fze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Gx.$$.fragment,Hl),NSr=i(Hl),Ic=n(Hl,"P",{});var Dte=s(Ic);qSr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=n(Dte,"A",{href:!0});var OIt=s(DK);jSr=r(OIt,"from_pretrained()"),OIt.forEach(t),DSr=r(Dte," class method or the "),GK=n(Dte,"A",{href:!0});var VIt=s(GK);GSr=r(VIt,"from_config()"),VIt.forEach(t),OSr=r(Dte,` class
method.`),Dte.forEach(t),VSr=i(Hl),Ox=n(Hl,"P",{});var xWe=s(Ox);XSr=r(xWe,"This class cannot be instantiated directly using "),R4e=n(xWe,"CODE",{});var XIt=s(R4e);zSr=r(XIt,"__init__()"),XIt.forEach(t),QSr=r(xWe," (throws an error)."),xWe.forEach(t),WSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var TA=s(Ot);T(Vx.$$.fragment,TA),HSr=i(TA),P4e=n(TA,"P",{});var zIt=s(P4e);USr=r(zIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zIt.forEach(t),JSr=i(TA),Nc=n(TA,"P",{});var Gte=s(Nc);YSr=r(Gte,`Note:
Loading a model from its configuration file does `),B4e=n(Gte,"STRONG",{});var QIt=s(B4e);KSr=r(QIt,"not"),QIt.forEach(t),ZSr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Gte,"A",{href:!0});var WIt=s(OK);eRr=r(WIt,"from_pretrained()"),WIt.forEach(t),oRr=r(Gte," to load the model weights."),Gte.forEach(t),rRr=i(TA),T(KE.$$.fragment,TA),TA.forEach(t),tRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Xx.$$.fragment,Ul),aRr=i(Ul),I4e=n(Ul,"P",{});var HIt=s(I4e);nRr=r(HIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HIt.forEach(t),sRr=i(Ul),_n=n(Ul,"P",{});var MA=s(_n);lRr=r(MA,"The model class to instantiate is selected based on the "),N4e=n(MA,"CODE",{});var UIt=s(N4e);iRr=r(UIt,"model_type"),UIt.forEach(t),dRr=r(MA,` property of the config object (either
passed as an argument or loaded from `),q4e=n(MA,"CODE",{});var JIt=s(q4e);cRr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),fRr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(MA,"CODE",{});var YIt=s(j4e);mRr=r(YIt,"pretrained_model_name_or_path"),YIt.forEach(t),gRr=r(MA,":"),MA.forEach(t),hRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);ZE=n(me,"LI",{});var rGe=s(ZE);D4e=n(rGe,"STRONG",{});var KIt=s(D4e);pRr=r(KIt,"albert"),KIt.forEach(t),_Rr=r(rGe," \u2014 "),VK=n(rGe,"A",{href:!0});var ZIt=s(VK);uRr=r(ZIt,"TFAlbertForTokenClassification"),ZIt.forEach(t),bRr=r(rGe," (ALBERT model)"),rGe.forEach(t),vRr=i(me),eC=n(me,"LI",{});var tGe=s(eC);G4e=n(tGe,"STRONG",{});var eNt=s(G4e);FRr=r(eNt,"bert"),eNt.forEach(t),TRr=r(tGe," \u2014 "),XK=n(tGe,"A",{href:!0});var oNt=s(XK);MRr=r(oNt,"TFBertForTokenClassification"),oNt.forEach(t),ERr=r(tGe," (BERT model)"),tGe.forEach(t),CRr=i(me),oC=n(me,"LI",{});var aGe=s(oC);O4e=n(aGe,"STRONG",{});var rNt=s(O4e);wRr=r(rNt,"camembert"),rNt.forEach(t),ARr=r(aGe," \u2014 "),zK=n(aGe,"A",{href:!0});var tNt=s(zK);LRr=r(tNt,"TFCamembertForTokenClassification"),tNt.forEach(t),yRr=r(aGe," (CamemBERT model)"),aGe.forEach(t),xRr=i(me),rC=n(me,"LI",{});var nGe=s(rC);V4e=n(nGe,"STRONG",{});var aNt=s(V4e);$Rr=r(aNt,"convbert"),aNt.forEach(t),kRr=r(nGe," \u2014 "),QK=n(nGe,"A",{href:!0});var nNt=s(QK);SRr=r(nNt,"TFConvBertForTokenClassification"),nNt.forEach(t),RRr=r(nGe," (ConvBERT model)"),nGe.forEach(t),PRr=i(me),tC=n(me,"LI",{});var sGe=s(tC);X4e=n(sGe,"STRONG",{});var sNt=s(X4e);BRr=r(sNt,"deberta"),sNt.forEach(t),IRr=r(sGe," \u2014 "),WK=n(sGe,"A",{href:!0});var lNt=s(WK);NRr=r(lNt,"TFDebertaForTokenClassification"),lNt.forEach(t),qRr=r(sGe," (DeBERTa model)"),sGe.forEach(t),jRr=i(me),aC=n(me,"LI",{});var lGe=s(aC);z4e=n(lGe,"STRONG",{});var iNt=s(z4e);DRr=r(iNt,"deberta-v2"),iNt.forEach(t),GRr=r(lGe," \u2014 "),HK=n(lGe,"A",{href:!0});var dNt=s(HK);ORr=r(dNt,"TFDebertaV2ForTokenClassification"),dNt.forEach(t),VRr=r(lGe," (DeBERTa-v2 model)"),lGe.forEach(t),XRr=i(me),nC=n(me,"LI",{});var iGe=s(nC);Q4e=n(iGe,"STRONG",{});var cNt=s(Q4e);zRr=r(cNt,"distilbert"),cNt.forEach(t),QRr=r(iGe," \u2014 "),UK=n(iGe,"A",{href:!0});var fNt=s(UK);WRr=r(fNt,"TFDistilBertForTokenClassification"),fNt.forEach(t),HRr=r(iGe," (DistilBERT model)"),iGe.forEach(t),URr=i(me),sC=n(me,"LI",{});var dGe=s(sC);W4e=n(dGe,"STRONG",{});var mNt=s(W4e);JRr=r(mNt,"electra"),mNt.forEach(t),YRr=r(dGe," \u2014 "),JK=n(dGe,"A",{href:!0});var gNt=s(JK);KRr=r(gNt,"TFElectraForTokenClassification"),gNt.forEach(t),ZRr=r(dGe," (ELECTRA model)"),dGe.forEach(t),ePr=i(me),lC=n(me,"LI",{});var cGe=s(lC);H4e=n(cGe,"STRONG",{});var hNt=s(H4e);oPr=r(hNt,"flaubert"),hNt.forEach(t),rPr=r(cGe," \u2014 "),YK=n(cGe,"A",{href:!0});var pNt=s(YK);tPr=r(pNt,"TFFlaubertForTokenClassification"),pNt.forEach(t),aPr=r(cGe," (FlauBERT model)"),cGe.forEach(t),nPr=i(me),iC=n(me,"LI",{});var fGe=s(iC);U4e=n(fGe,"STRONG",{});var _Nt=s(U4e);sPr=r(_Nt,"funnel"),_Nt.forEach(t),lPr=r(fGe," \u2014 "),KK=n(fGe,"A",{href:!0});var uNt=s(KK);iPr=r(uNt,"TFFunnelForTokenClassification"),uNt.forEach(t),dPr=r(fGe," (Funnel Transformer model)"),fGe.forEach(t),cPr=i(me),dC=n(me,"LI",{});var mGe=s(dC);J4e=n(mGe,"STRONG",{});var bNt=s(J4e);fPr=r(bNt,"layoutlm"),bNt.forEach(t),mPr=r(mGe," \u2014 "),ZK=n(mGe,"A",{href:!0});var vNt=s(ZK);gPr=r(vNt,"TFLayoutLMForTokenClassification"),vNt.forEach(t),hPr=r(mGe," (LayoutLM model)"),mGe.forEach(t),pPr=i(me),cC=n(me,"LI",{});var gGe=s(cC);Y4e=n(gGe,"STRONG",{});var FNt=s(Y4e);_Pr=r(FNt,"longformer"),FNt.forEach(t),uPr=r(gGe," \u2014 "),eZ=n(gGe,"A",{href:!0});var TNt=s(eZ);bPr=r(TNt,"TFLongformerForTokenClassification"),TNt.forEach(t),vPr=r(gGe," (Longformer model)"),gGe.forEach(t),FPr=i(me),fC=n(me,"LI",{});var hGe=s(fC);K4e=n(hGe,"STRONG",{});var MNt=s(K4e);TPr=r(MNt,"mobilebert"),MNt.forEach(t),MPr=r(hGe," \u2014 "),oZ=n(hGe,"A",{href:!0});var ENt=s(oZ);EPr=r(ENt,"TFMobileBertForTokenClassification"),ENt.forEach(t),CPr=r(hGe," (MobileBERT model)"),hGe.forEach(t),wPr=i(me),mC=n(me,"LI",{});var pGe=s(mC);Z4e=n(pGe,"STRONG",{});var CNt=s(Z4e);APr=r(CNt,"mpnet"),CNt.forEach(t),LPr=r(pGe," \u2014 "),rZ=n(pGe,"A",{href:!0});var wNt=s(rZ);yPr=r(wNt,"TFMPNetForTokenClassification"),wNt.forEach(t),xPr=r(pGe," (MPNet model)"),pGe.forEach(t),$Pr=i(me),gC=n(me,"LI",{});var _Ge=s(gC);eEe=n(_Ge,"STRONG",{});var ANt=s(eEe);kPr=r(ANt,"rembert"),ANt.forEach(t),SPr=r(_Ge," \u2014 "),tZ=n(_Ge,"A",{href:!0});var LNt=s(tZ);RPr=r(LNt,"TFRemBertForTokenClassification"),LNt.forEach(t),PPr=r(_Ge," (RemBERT model)"),_Ge.forEach(t),BPr=i(me),hC=n(me,"LI",{});var uGe=s(hC);oEe=n(uGe,"STRONG",{});var yNt=s(oEe);IPr=r(yNt,"roberta"),yNt.forEach(t),NPr=r(uGe," \u2014 "),aZ=n(uGe,"A",{href:!0});var xNt=s(aZ);qPr=r(xNt,"TFRobertaForTokenClassification"),xNt.forEach(t),jPr=r(uGe," (RoBERTa model)"),uGe.forEach(t),DPr=i(me),pC=n(me,"LI",{});var bGe=s(pC);rEe=n(bGe,"STRONG",{});var $Nt=s(rEe);GPr=r($Nt,"roformer"),$Nt.forEach(t),OPr=r(bGe," \u2014 "),nZ=n(bGe,"A",{href:!0});var kNt=s(nZ);VPr=r(kNt,"TFRoFormerForTokenClassification"),kNt.forEach(t),XPr=r(bGe," (RoFormer model)"),bGe.forEach(t),zPr=i(me),_C=n(me,"LI",{});var vGe=s(_C);tEe=n(vGe,"STRONG",{});var SNt=s(tEe);QPr=r(SNt,"xlm"),SNt.forEach(t),WPr=r(vGe," \u2014 "),sZ=n(vGe,"A",{href:!0});var RNt=s(sZ);HPr=r(RNt,"TFXLMForTokenClassification"),RNt.forEach(t),UPr=r(vGe," (XLM model)"),vGe.forEach(t),JPr=i(me),uC=n(me,"LI",{});var FGe=s(uC);aEe=n(FGe,"STRONG",{});var PNt=s(aEe);YPr=r(PNt,"xlm-roberta"),PNt.forEach(t),KPr=r(FGe," \u2014 "),lZ=n(FGe,"A",{href:!0});var BNt=s(lZ);ZPr=r(BNt,"TFXLMRobertaForTokenClassification"),BNt.forEach(t),eBr=r(FGe," (XLM-RoBERTa model)"),FGe.forEach(t),oBr=i(me),bC=n(me,"LI",{});var TGe=s(bC);nEe=n(TGe,"STRONG",{});var INt=s(nEe);rBr=r(INt,"xlnet"),INt.forEach(t),tBr=r(TGe," \u2014 "),iZ=n(TGe,"A",{href:!0});var NNt=s(iZ);aBr=r(NNt,"TFXLNetForTokenClassification"),NNt.forEach(t),nBr=r(TGe," (XLNet model)"),TGe.forEach(t),me.forEach(t),sBr=i(Ul),T(vC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Tze=i(f),qc=n(f,"H2",{class:!0});var $We=s(qc);FC=n($We,"A",{id:!0,class:!0,href:!0});var qNt=s(FC);sEe=n(qNt,"SPAN",{});var jNt=s(sEe);T(zx.$$.fragment,jNt),jNt.forEach(t),qNt.forEach(t),lBr=i($We),lEe=n($We,"SPAN",{});var DNt=s(lEe);iBr=r(DNt,"TFAutoModelForQuestionAnswering"),DNt.forEach(t),$We.forEach(t),Mze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Qx.$$.fragment,Jl),dBr=i(Jl),jc=n(Jl,"P",{});var Ote=s(jc);cBr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=n(Ote,"A",{href:!0});var GNt=s(dZ);fBr=r(GNt,"from_pretrained()"),GNt.forEach(t),mBr=r(Ote," class method or the "),cZ=n(Ote,"A",{href:!0});var ONt=s(cZ);gBr=r(ONt,"from_config()"),ONt.forEach(t),hBr=r(Ote,` class
method.`),Ote.forEach(t),pBr=i(Jl),Wx=n(Jl,"P",{});var kWe=s(Wx);_Br=r(kWe,"This class cannot be instantiated directly using "),iEe=n(kWe,"CODE",{});var VNt=s(iEe);uBr=r(VNt,"__init__()"),VNt.forEach(t),bBr=r(kWe," (throws an error)."),kWe.forEach(t),vBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var EA=s(Vt);T(Hx.$$.fragment,EA),FBr=i(EA),dEe=n(EA,"P",{});var XNt=s(dEe);TBr=r(XNt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XNt.forEach(t),MBr=i(EA),Dc=n(EA,"P",{});var Vte=s(Dc);EBr=r(Vte,`Note:
Loading a model from its configuration file does `),cEe=n(Vte,"STRONG",{});var zNt=s(cEe);CBr=r(zNt,"not"),zNt.forEach(t),wBr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Vte,"A",{href:!0});var QNt=s(fZ);ABr=r(QNt,"from_pretrained()"),QNt.forEach(t),LBr=r(Vte," to load the model weights."),Vte.forEach(t),yBr=i(EA),T(TC.$$.fragment,EA),EA.forEach(t),xBr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Ux.$$.fragment,Yl),$Br=i(Yl),fEe=n(Yl,"P",{});var WNt=s(fEe);kBr=r(WNt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WNt.forEach(t),SBr=i(Yl),un=n(Yl,"P",{});var CA=s(un);RBr=r(CA,"The model class to instantiate is selected based on the "),mEe=n(CA,"CODE",{});var HNt=s(mEe);PBr=r(HNt,"model_type"),HNt.forEach(t),BBr=r(CA,` property of the config object (either
passed as an argument or loaded from `),gEe=n(CA,"CODE",{});var UNt=s(gEe);IBr=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),NBr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(CA,"CODE",{});var JNt=s(hEe);qBr=r(JNt,"pretrained_model_name_or_path"),JNt.forEach(t),jBr=r(CA,":"),CA.forEach(t),DBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);MC=n(ge,"LI",{});var MGe=s(MC);pEe=n(MGe,"STRONG",{});var YNt=s(pEe);GBr=r(YNt,"albert"),YNt.forEach(t),OBr=r(MGe," \u2014 "),mZ=n(MGe,"A",{href:!0});var KNt=s(mZ);VBr=r(KNt,"TFAlbertForQuestionAnswering"),KNt.forEach(t),XBr=r(MGe," (ALBERT model)"),MGe.forEach(t),zBr=i(ge),EC=n(ge,"LI",{});var EGe=s(EC);_Ee=n(EGe,"STRONG",{});var ZNt=s(_Ee);QBr=r(ZNt,"bert"),ZNt.forEach(t),WBr=r(EGe," \u2014 "),gZ=n(EGe,"A",{href:!0});var eqt=s(gZ);HBr=r(eqt,"TFBertForQuestionAnswering"),eqt.forEach(t),UBr=r(EGe," (BERT model)"),EGe.forEach(t),JBr=i(ge),CC=n(ge,"LI",{});var CGe=s(CC);uEe=n(CGe,"STRONG",{});var oqt=s(uEe);YBr=r(oqt,"camembert"),oqt.forEach(t),KBr=r(CGe," \u2014 "),hZ=n(CGe,"A",{href:!0});var rqt=s(hZ);ZBr=r(rqt,"TFCamembertForQuestionAnswering"),rqt.forEach(t),eIr=r(CGe," (CamemBERT model)"),CGe.forEach(t),oIr=i(ge),wC=n(ge,"LI",{});var wGe=s(wC);bEe=n(wGe,"STRONG",{});var tqt=s(bEe);rIr=r(tqt,"convbert"),tqt.forEach(t),tIr=r(wGe," \u2014 "),pZ=n(wGe,"A",{href:!0});var aqt=s(pZ);aIr=r(aqt,"TFConvBertForQuestionAnswering"),aqt.forEach(t),nIr=r(wGe," (ConvBERT model)"),wGe.forEach(t),sIr=i(ge),AC=n(ge,"LI",{});var AGe=s(AC);vEe=n(AGe,"STRONG",{});var nqt=s(vEe);lIr=r(nqt,"deberta"),nqt.forEach(t),iIr=r(AGe," \u2014 "),_Z=n(AGe,"A",{href:!0});var sqt=s(_Z);dIr=r(sqt,"TFDebertaForQuestionAnswering"),sqt.forEach(t),cIr=r(AGe," (DeBERTa model)"),AGe.forEach(t),fIr=i(ge),LC=n(ge,"LI",{});var LGe=s(LC);FEe=n(LGe,"STRONG",{});var lqt=s(FEe);mIr=r(lqt,"deberta-v2"),lqt.forEach(t),gIr=r(LGe," \u2014 "),uZ=n(LGe,"A",{href:!0});var iqt=s(uZ);hIr=r(iqt,"TFDebertaV2ForQuestionAnswering"),iqt.forEach(t),pIr=r(LGe," (DeBERTa-v2 model)"),LGe.forEach(t),_Ir=i(ge),yC=n(ge,"LI",{});var yGe=s(yC);TEe=n(yGe,"STRONG",{});var dqt=s(TEe);uIr=r(dqt,"distilbert"),dqt.forEach(t),bIr=r(yGe," \u2014 "),bZ=n(yGe,"A",{href:!0});var cqt=s(bZ);vIr=r(cqt,"TFDistilBertForQuestionAnswering"),cqt.forEach(t),FIr=r(yGe," (DistilBERT model)"),yGe.forEach(t),TIr=i(ge),xC=n(ge,"LI",{});var xGe=s(xC);MEe=n(xGe,"STRONG",{});var fqt=s(MEe);MIr=r(fqt,"electra"),fqt.forEach(t),EIr=r(xGe," \u2014 "),vZ=n(xGe,"A",{href:!0});var mqt=s(vZ);CIr=r(mqt,"TFElectraForQuestionAnswering"),mqt.forEach(t),wIr=r(xGe," (ELECTRA model)"),xGe.forEach(t),AIr=i(ge),$C=n(ge,"LI",{});var $Ge=s($C);EEe=n($Ge,"STRONG",{});var gqt=s(EEe);LIr=r(gqt,"flaubert"),gqt.forEach(t),yIr=r($Ge," \u2014 "),FZ=n($Ge,"A",{href:!0});var hqt=s(FZ);xIr=r(hqt,"TFFlaubertForQuestionAnsweringSimple"),hqt.forEach(t),$Ir=r($Ge," (FlauBERT model)"),$Ge.forEach(t),kIr=i(ge),kC=n(ge,"LI",{});var kGe=s(kC);CEe=n(kGe,"STRONG",{});var pqt=s(CEe);SIr=r(pqt,"funnel"),pqt.forEach(t),RIr=r(kGe," \u2014 "),TZ=n(kGe,"A",{href:!0});var _qt=s(TZ);PIr=r(_qt,"TFFunnelForQuestionAnswering"),_qt.forEach(t),BIr=r(kGe," (Funnel Transformer model)"),kGe.forEach(t),IIr=i(ge),SC=n(ge,"LI",{});var SGe=s(SC);wEe=n(SGe,"STRONG",{});var uqt=s(wEe);NIr=r(uqt,"gptj"),uqt.forEach(t),qIr=r(SGe," \u2014 "),MZ=n(SGe,"A",{href:!0});var bqt=s(MZ);jIr=r(bqt,"TFGPTJForQuestionAnswering"),bqt.forEach(t),DIr=r(SGe," (GPT-J model)"),SGe.forEach(t),GIr=i(ge),RC=n(ge,"LI",{});var RGe=s(RC);AEe=n(RGe,"STRONG",{});var vqt=s(AEe);OIr=r(vqt,"longformer"),vqt.forEach(t),VIr=r(RGe," \u2014 "),EZ=n(RGe,"A",{href:!0});var Fqt=s(EZ);XIr=r(Fqt,"TFLongformerForQuestionAnswering"),Fqt.forEach(t),zIr=r(RGe," (Longformer model)"),RGe.forEach(t),QIr=i(ge),PC=n(ge,"LI",{});var PGe=s(PC);LEe=n(PGe,"STRONG",{});var Tqt=s(LEe);WIr=r(Tqt,"mobilebert"),Tqt.forEach(t),HIr=r(PGe," \u2014 "),CZ=n(PGe,"A",{href:!0});var Mqt=s(CZ);UIr=r(Mqt,"TFMobileBertForQuestionAnswering"),Mqt.forEach(t),JIr=r(PGe," (MobileBERT model)"),PGe.forEach(t),YIr=i(ge),BC=n(ge,"LI",{});var BGe=s(BC);yEe=n(BGe,"STRONG",{});var Eqt=s(yEe);KIr=r(Eqt,"mpnet"),Eqt.forEach(t),ZIr=r(BGe," \u2014 "),wZ=n(BGe,"A",{href:!0});var Cqt=s(wZ);eNr=r(Cqt,"TFMPNetForQuestionAnswering"),Cqt.forEach(t),oNr=r(BGe," (MPNet model)"),BGe.forEach(t),rNr=i(ge),IC=n(ge,"LI",{});var IGe=s(IC);xEe=n(IGe,"STRONG",{});var wqt=s(xEe);tNr=r(wqt,"rembert"),wqt.forEach(t),aNr=r(IGe," \u2014 "),AZ=n(IGe,"A",{href:!0});var Aqt=s(AZ);nNr=r(Aqt,"TFRemBertForQuestionAnswering"),Aqt.forEach(t),sNr=r(IGe," (RemBERT model)"),IGe.forEach(t),lNr=i(ge),NC=n(ge,"LI",{});var NGe=s(NC);$Ee=n(NGe,"STRONG",{});var Lqt=s($Ee);iNr=r(Lqt,"roberta"),Lqt.forEach(t),dNr=r(NGe," \u2014 "),LZ=n(NGe,"A",{href:!0});var yqt=s(LZ);cNr=r(yqt,"TFRobertaForQuestionAnswering"),yqt.forEach(t),fNr=r(NGe," (RoBERTa model)"),NGe.forEach(t),mNr=i(ge),qC=n(ge,"LI",{});var qGe=s(qC);kEe=n(qGe,"STRONG",{});var xqt=s(kEe);gNr=r(xqt,"roformer"),xqt.forEach(t),hNr=r(qGe," \u2014 "),yZ=n(qGe,"A",{href:!0});var $qt=s(yZ);pNr=r($qt,"TFRoFormerForQuestionAnswering"),$qt.forEach(t),_Nr=r(qGe," (RoFormer model)"),qGe.forEach(t),uNr=i(ge),jC=n(ge,"LI",{});var jGe=s(jC);SEe=n(jGe,"STRONG",{});var kqt=s(SEe);bNr=r(kqt,"xlm"),kqt.forEach(t),vNr=r(jGe," \u2014 "),xZ=n(jGe,"A",{href:!0});var Sqt=s(xZ);FNr=r(Sqt,"TFXLMForQuestionAnsweringSimple"),Sqt.forEach(t),TNr=r(jGe," (XLM model)"),jGe.forEach(t),MNr=i(ge),DC=n(ge,"LI",{});var DGe=s(DC);REe=n(DGe,"STRONG",{});var Rqt=s(REe);ENr=r(Rqt,"xlm-roberta"),Rqt.forEach(t),CNr=r(DGe," \u2014 "),$Z=n(DGe,"A",{href:!0});var Pqt=s($Z);wNr=r(Pqt,"TFXLMRobertaForQuestionAnswering"),Pqt.forEach(t),ANr=r(DGe," (XLM-RoBERTa model)"),DGe.forEach(t),LNr=i(ge),GC=n(ge,"LI",{});var GGe=s(GC);PEe=n(GGe,"STRONG",{});var Bqt=s(PEe);yNr=r(Bqt,"xlnet"),Bqt.forEach(t),xNr=r(GGe," \u2014 "),kZ=n(GGe,"A",{href:!0});var Iqt=s(kZ);$Nr=r(Iqt,"TFXLNetForQuestionAnsweringSimple"),Iqt.forEach(t),kNr=r(GGe," (XLNet model)"),GGe.forEach(t),ge.forEach(t),SNr=i(Yl),T(OC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Eze=i(f),Gc=n(f,"H2",{class:!0});var SWe=s(Gc);VC=n(SWe,"A",{id:!0,class:!0,href:!0});var Nqt=s(VC);BEe=n(Nqt,"SPAN",{});var qqt=s(BEe);T(Jx.$$.fragment,qqt),qqt.forEach(t),Nqt.forEach(t),RNr=i(SWe),IEe=n(SWe,"SPAN",{});var jqt=s(IEe);PNr=r(jqt,"TFAutoModelForVision2Seq"),jqt.forEach(t),SWe.forEach(t),Cze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Yx.$$.fragment,Kl),BNr=i(Kl),Oc=n(Kl,"P",{});var Xte=s(Oc);INr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=n(Xte,"A",{href:!0});var Dqt=s(SZ);NNr=r(Dqt,"from_pretrained()"),Dqt.forEach(t),qNr=r(Xte," class method or the "),RZ=n(Xte,"A",{href:!0});var Gqt=s(RZ);jNr=r(Gqt,"from_config()"),Gqt.forEach(t),DNr=r(Xte,` class
method.`),Xte.forEach(t),GNr=i(Kl),Kx=n(Kl,"P",{});var RWe=s(Kx);ONr=r(RWe,"This class cannot be instantiated directly using "),NEe=n(RWe,"CODE",{});var Oqt=s(NEe);VNr=r(Oqt,"__init__()"),Oqt.forEach(t),XNr=r(RWe," (throws an error)."),RWe.forEach(t),zNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var wA=s(Xt);T(Zx.$$.fragment,wA),QNr=i(wA),qEe=n(wA,"P",{});var Vqt=s(qEe);WNr=r(Vqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vqt.forEach(t),HNr=i(wA),Vc=n(wA,"P",{});var zte=s(Vc);UNr=r(zte,`Note:
Loading a model from its configuration file does `),jEe=n(zte,"STRONG",{});var Xqt=s(jEe);JNr=r(Xqt,"not"),Xqt.forEach(t),YNr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(zte,"A",{href:!0});var zqt=s(PZ);KNr=r(zqt,"from_pretrained()"),zqt.forEach(t),ZNr=r(zte," to load the model weights."),zte.forEach(t),eqr=i(wA),T(XC.$$.fragment,wA),wA.forEach(t),oqr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(e$.$$.fragment,Zl),rqr=i(Zl),DEe=n(Zl,"P",{});var Qqt=s(DEe);tqr=r(Qqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qqt.forEach(t),aqr=i(Zl),bn=n(Zl,"P",{});var AA=s(bn);nqr=r(AA,"The model class to instantiate is selected based on the "),GEe=n(AA,"CODE",{});var Wqt=s(GEe);sqr=r(Wqt,"model_type"),Wqt.forEach(t),lqr=r(AA,` property of the config object (either
passed as an argument or loaded from `),OEe=n(AA,"CODE",{});var Hqt=s(OEe);iqr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),dqr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(AA,"CODE",{});var Uqt=s(VEe);cqr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),fqr=r(AA,":"),AA.forEach(t),mqr=i(Zl),XEe=n(Zl,"UL",{});var Jqt=s(XEe);zC=n(Jqt,"LI",{});var OGe=s(zC);zEe=n(OGe,"STRONG",{});var Yqt=s(zEe);gqr=r(Yqt,"vision-encoder-decoder"),Yqt.forEach(t),hqr=r(OGe," \u2014 "),BZ=n(OGe,"A",{href:!0});var Kqt=s(BZ);pqr=r(Kqt,"TFVisionEncoderDecoderModel"),Kqt.forEach(t),_qr=r(OGe," (Vision Encoder decoder model)"),OGe.forEach(t),Jqt.forEach(t),uqr=i(Zl),T(QC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),wze=i(f),Xc=n(f,"H2",{class:!0});var PWe=s(Xc);WC=n(PWe,"A",{id:!0,class:!0,href:!0});var Zqt=s(WC);QEe=n(Zqt,"SPAN",{});var ejt=s(QEe);T(o$.$$.fragment,ejt),ejt.forEach(t),Zqt.forEach(t),bqr=i(PWe),WEe=n(PWe,"SPAN",{});var ojt=s(WEe);vqr=r(ojt,"TFAutoModelForSpeechSeq2Seq"),ojt.forEach(t),PWe.forEach(t),Aze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(r$.$$.fragment,ei),Fqr=i(ei),zc=n(ei,"P",{});var Qte=s(zc);Tqr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IZ=n(Qte,"A",{href:!0});var rjt=s(IZ);Mqr=r(rjt,"from_pretrained()"),rjt.forEach(t),Eqr=r(Qte," class method or the "),NZ=n(Qte,"A",{href:!0});var tjt=s(NZ);Cqr=r(tjt,"from_config()"),tjt.forEach(t),wqr=r(Qte,` class
method.`),Qte.forEach(t),Aqr=i(ei),t$=n(ei,"P",{});var BWe=s(t$);Lqr=r(BWe,"This class cannot be instantiated directly using "),HEe=n(BWe,"CODE",{});var ajt=s(HEe);yqr=r(ajt,"__init__()"),ajt.forEach(t),xqr=r(BWe," (throws an error)."),BWe.forEach(t),$qr=i(ei),zt=n(ei,"DIV",{class:!0});var LA=s(zt);T(a$.$$.fragment,LA),kqr=i(LA),UEe=n(LA,"P",{});var njt=s(UEe);Sqr=r(njt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),njt.forEach(t),Rqr=i(LA),Qc=n(LA,"P",{});var Wte=s(Qc);Pqr=r(Wte,`Note:
Loading a model from its configuration file does `),JEe=n(Wte,"STRONG",{});var sjt=s(JEe);Bqr=r(sjt,"not"),sjt.forEach(t),Iqr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Wte,"A",{href:!0});var ljt=s(qZ);Nqr=r(ljt,"from_pretrained()"),ljt.forEach(t),qqr=r(Wte," to load the model weights."),Wte.forEach(t),jqr=i(LA),T(HC.$$.fragment,LA),LA.forEach(t),Dqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(n$.$$.fragment,oi),Gqr=i(oi),YEe=n(oi,"P",{});var ijt=s(YEe);Oqr=r(ijt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ijt.forEach(t),Vqr=i(oi),vn=n(oi,"P",{});var yA=s(vn);Xqr=r(yA,"The model class to instantiate is selected based on the "),KEe=n(yA,"CODE",{});var djt=s(KEe);zqr=r(djt,"model_type"),djt.forEach(t),Qqr=r(yA,` property of the config object (either
passed as an argument or loaded from `),ZEe=n(yA,"CODE",{});var cjt=s(ZEe);Wqr=r(cjt,"pretrained_model_name_or_path"),cjt.forEach(t),Hqr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=n(yA,"CODE",{});var fjt=s(eCe);Uqr=r(fjt,"pretrained_model_name_or_path"),fjt.forEach(t),Jqr=r(yA,":"),yA.forEach(t),Yqr=i(oi),oCe=n(oi,"UL",{});var mjt=s(oCe);UC=n(mjt,"LI",{});var VGe=s(UC);rCe=n(VGe,"STRONG",{});var gjt=s(rCe);Kqr=r(gjt,"speech_to_text"),gjt.forEach(t),Zqr=r(VGe," \u2014 "),jZ=n(VGe,"A",{href:!0});var hjt=s(jZ);ejr=r(hjt,"TFSpeech2TextForConditionalGeneration"),hjt.forEach(t),ojr=r(VGe," (Speech2Text model)"),VGe.forEach(t),mjt.forEach(t),rjr=i(oi),T(JC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Lze=i(f),Wc=n(f,"H2",{class:!0});var IWe=s(Wc);YC=n(IWe,"A",{id:!0,class:!0,href:!0});var pjt=s(YC);tCe=n(pjt,"SPAN",{});var _jt=s(tCe);T(s$.$$.fragment,_jt),_jt.forEach(t),pjt.forEach(t),tjr=i(IWe),aCe=n(IWe,"SPAN",{});var ujt=s(aCe);ajr=r(ujt,"FlaxAutoModel"),ujt.forEach(t),IWe.forEach(t),yze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(l$.$$.fragment,ri),njr=i(ri),Hc=n(ri,"P",{});var Hte=s(Hc);sjr=r(Hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=n(Hte,"A",{href:!0});var bjt=s(DZ);ljr=r(bjt,"from_pretrained()"),bjt.forEach(t),ijr=r(Hte," class method or the "),GZ=n(Hte,"A",{href:!0});var vjt=s(GZ);djr=r(vjt,"from_config()"),vjt.forEach(t),cjr=r(Hte,` class
method.`),Hte.forEach(t),fjr=i(ri),i$=n(ri,"P",{});var NWe=s(i$);mjr=r(NWe,"This class cannot be instantiated directly using "),nCe=n(NWe,"CODE",{});var Fjt=s(nCe);gjr=r(Fjt,"__init__()"),Fjt.forEach(t),hjr=r(NWe," (throws an error)."),NWe.forEach(t),pjr=i(ri),Qt=n(ri,"DIV",{class:!0});var xA=s(Qt);T(d$.$$.fragment,xA),_jr=i(xA),sCe=n(xA,"P",{});var Tjt=s(sCe);ujr=r(Tjt,"Instantiates one of the base model classes of the library from a configuration."),Tjt.forEach(t),bjr=i(xA),Uc=n(xA,"P",{});var Ute=s(Uc);vjr=r(Ute,`Note:
Loading a model from its configuration file does `),lCe=n(Ute,"STRONG",{});var Mjt=s(lCe);Fjr=r(Mjt,"not"),Mjt.forEach(t),Tjr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Ute,"A",{href:!0});var Ejt=s(OZ);Mjr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),Ejr=r(Ute," to load the model weights."),Ute.forEach(t),Cjr=i(xA),T(KC.$$.fragment,xA),xA.forEach(t),wjr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(c$.$$.fragment,ti),Ajr=i(ti),iCe=n(ti,"P",{});var Cjt=s(iCe);Ljr=r(Cjt,"Instantiate one of the base model classes of the library from a pretrained model."),Cjt.forEach(t),yjr=i(ti),Fn=n(ti,"P",{});var $A=s(Fn);xjr=r($A,"The model class to instantiate is selected based on the "),dCe=n($A,"CODE",{});var wjt=s(dCe);$jr=r(wjt,"model_type"),wjt.forEach(t),kjr=r($A,` property of the config object (either
passed as an argument or loaded from `),cCe=n($A,"CODE",{});var Ajt=s(cCe);Sjr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),Rjr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n($A,"CODE",{});var Ljt=s(fCe);Pjr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),Bjr=r($A,":"),$A.forEach(t),Ijr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);ZC=n(ae,"LI",{});var XGe=s(ZC);mCe=n(XGe,"STRONG",{});var yjt=s(mCe);Njr=r(yjt,"albert"),yjt.forEach(t),qjr=r(XGe," \u2014 "),VZ=n(XGe,"A",{href:!0});var xjt=s(VZ);jjr=r(xjt,"FlaxAlbertModel"),xjt.forEach(t),Djr=r(XGe," (ALBERT model)"),XGe.forEach(t),Gjr=i(ae),e3=n(ae,"LI",{});var zGe=s(e3);gCe=n(zGe,"STRONG",{});var $jt=s(gCe);Ojr=r($jt,"bart"),$jt.forEach(t),Vjr=r(zGe," \u2014 "),XZ=n(zGe,"A",{href:!0});var kjt=s(XZ);Xjr=r(kjt,"FlaxBartModel"),kjt.forEach(t),zjr=r(zGe," (BART model)"),zGe.forEach(t),Qjr=i(ae),o3=n(ae,"LI",{});var QGe=s(o3);hCe=n(QGe,"STRONG",{});var Sjt=s(hCe);Wjr=r(Sjt,"beit"),Sjt.forEach(t),Hjr=r(QGe," \u2014 "),zZ=n(QGe,"A",{href:!0});var Rjt=s(zZ);Ujr=r(Rjt,"FlaxBeitModel"),Rjt.forEach(t),Jjr=r(QGe," (BEiT model)"),QGe.forEach(t),Yjr=i(ae),r3=n(ae,"LI",{});var WGe=s(r3);pCe=n(WGe,"STRONG",{});var Pjt=s(pCe);Kjr=r(Pjt,"bert"),Pjt.forEach(t),Zjr=r(WGe," \u2014 "),QZ=n(WGe,"A",{href:!0});var Bjt=s(QZ);eDr=r(Bjt,"FlaxBertModel"),Bjt.forEach(t),oDr=r(WGe," (BERT model)"),WGe.forEach(t),rDr=i(ae),t3=n(ae,"LI",{});var HGe=s(t3);_Ce=n(HGe,"STRONG",{});var Ijt=s(_Ce);tDr=r(Ijt,"big_bird"),Ijt.forEach(t),aDr=r(HGe," \u2014 "),WZ=n(HGe,"A",{href:!0});var Njt=s(WZ);nDr=r(Njt,"FlaxBigBirdModel"),Njt.forEach(t),sDr=r(HGe," (BigBird model)"),HGe.forEach(t),lDr=i(ae),a3=n(ae,"LI",{});var UGe=s(a3);uCe=n(UGe,"STRONG",{});var qjt=s(uCe);iDr=r(qjt,"blenderbot"),qjt.forEach(t),dDr=r(UGe," \u2014 "),HZ=n(UGe,"A",{href:!0});var jjt=s(HZ);cDr=r(jjt,"FlaxBlenderbotModel"),jjt.forEach(t),fDr=r(UGe," (Blenderbot model)"),UGe.forEach(t),mDr=i(ae),n3=n(ae,"LI",{});var JGe=s(n3);bCe=n(JGe,"STRONG",{});var Djt=s(bCe);gDr=r(Djt,"blenderbot-small"),Djt.forEach(t),hDr=r(JGe," \u2014 "),UZ=n(JGe,"A",{href:!0});var Gjt=s(UZ);pDr=r(Gjt,"FlaxBlenderbotSmallModel"),Gjt.forEach(t),_Dr=r(JGe," (BlenderbotSmall model)"),JGe.forEach(t),uDr=i(ae),s3=n(ae,"LI",{});var YGe=s(s3);vCe=n(YGe,"STRONG",{});var Ojt=s(vCe);bDr=r(Ojt,"clip"),Ojt.forEach(t),vDr=r(YGe," \u2014 "),JZ=n(YGe,"A",{href:!0});var Vjt=s(JZ);FDr=r(Vjt,"FlaxCLIPModel"),Vjt.forEach(t),TDr=r(YGe," (CLIP model)"),YGe.forEach(t),MDr=i(ae),l3=n(ae,"LI",{});var KGe=s(l3);FCe=n(KGe,"STRONG",{});var Xjt=s(FCe);EDr=r(Xjt,"distilbert"),Xjt.forEach(t),CDr=r(KGe," \u2014 "),YZ=n(KGe,"A",{href:!0});var zjt=s(YZ);wDr=r(zjt,"FlaxDistilBertModel"),zjt.forEach(t),ADr=r(KGe," (DistilBERT model)"),KGe.forEach(t),LDr=i(ae),i3=n(ae,"LI",{});var ZGe=s(i3);TCe=n(ZGe,"STRONG",{});var Qjt=s(TCe);yDr=r(Qjt,"electra"),Qjt.forEach(t),xDr=r(ZGe," \u2014 "),KZ=n(ZGe,"A",{href:!0});var Wjt=s(KZ);$Dr=r(Wjt,"FlaxElectraModel"),Wjt.forEach(t),kDr=r(ZGe," (ELECTRA model)"),ZGe.forEach(t),SDr=i(ae),d3=n(ae,"LI",{});var eOe=s(d3);MCe=n(eOe,"STRONG",{});var Hjt=s(MCe);RDr=r(Hjt,"gpt2"),Hjt.forEach(t),PDr=r(eOe," \u2014 "),ZZ=n(eOe,"A",{href:!0});var Ujt=s(ZZ);BDr=r(Ujt,"FlaxGPT2Model"),Ujt.forEach(t),IDr=r(eOe," (OpenAI GPT-2 model)"),eOe.forEach(t),NDr=i(ae),c3=n(ae,"LI",{});var oOe=s(c3);ECe=n(oOe,"STRONG",{});var Jjt=s(ECe);qDr=r(Jjt,"gpt_neo"),Jjt.forEach(t),jDr=r(oOe," \u2014 "),eee=n(oOe,"A",{href:!0});var Yjt=s(eee);DDr=r(Yjt,"FlaxGPTNeoModel"),Yjt.forEach(t),GDr=r(oOe," (GPT Neo model)"),oOe.forEach(t),ODr=i(ae),f3=n(ae,"LI",{});var rOe=s(f3);CCe=n(rOe,"STRONG",{});var Kjt=s(CCe);VDr=r(Kjt,"gptj"),Kjt.forEach(t),XDr=r(rOe," \u2014 "),oee=n(rOe,"A",{href:!0});var Zjt=s(oee);zDr=r(Zjt,"FlaxGPTJModel"),Zjt.forEach(t),QDr=r(rOe," (GPT-J model)"),rOe.forEach(t),WDr=i(ae),m3=n(ae,"LI",{});var tOe=s(m3);wCe=n(tOe,"STRONG",{});var eDt=s(wCe);HDr=r(eDt,"longt5"),eDt.forEach(t),UDr=r(tOe," \u2014 "),ree=n(tOe,"A",{href:!0});var oDt=s(ree);JDr=r(oDt,"FlaxLongT5Model"),oDt.forEach(t),YDr=r(tOe," (LongT5 model)"),tOe.forEach(t),KDr=i(ae),g3=n(ae,"LI",{});var aOe=s(g3);ACe=n(aOe,"STRONG",{});var rDt=s(ACe);ZDr=r(rDt,"marian"),rDt.forEach(t),eGr=r(aOe," \u2014 "),tee=n(aOe,"A",{href:!0});var tDt=s(tee);oGr=r(tDt,"FlaxMarianModel"),tDt.forEach(t),rGr=r(aOe," (Marian model)"),aOe.forEach(t),tGr=i(ae),h3=n(ae,"LI",{});var nOe=s(h3);LCe=n(nOe,"STRONG",{});var aDt=s(LCe);aGr=r(aDt,"mbart"),aDt.forEach(t),nGr=r(nOe," \u2014 "),aee=n(nOe,"A",{href:!0});var nDt=s(aee);sGr=r(nDt,"FlaxMBartModel"),nDt.forEach(t),lGr=r(nOe," (mBART model)"),nOe.forEach(t),iGr=i(ae),p3=n(ae,"LI",{});var sOe=s(p3);yCe=n(sOe,"STRONG",{});var sDt=s(yCe);dGr=r(sDt,"mt5"),sDt.forEach(t),cGr=r(sOe," \u2014 "),nee=n(sOe,"A",{href:!0});var lDt=s(nee);fGr=r(lDt,"FlaxMT5Model"),lDt.forEach(t),mGr=r(sOe," (MT5 model)"),sOe.forEach(t),gGr=i(ae),_3=n(ae,"LI",{});var lOe=s(_3);xCe=n(lOe,"STRONG",{});var iDt=s(xCe);hGr=r(iDt,"opt"),iDt.forEach(t),pGr=r(lOe," \u2014 "),see=n(lOe,"A",{href:!0});var dDt=s(see);_Gr=r(dDt,"FlaxOPTModel"),dDt.forEach(t),uGr=r(lOe," (OPT model)"),lOe.forEach(t),bGr=i(ae),u3=n(ae,"LI",{});var iOe=s(u3);$Ce=n(iOe,"STRONG",{});var cDt=s($Ce);vGr=r(cDt,"pegasus"),cDt.forEach(t),FGr=r(iOe," \u2014 "),lee=n(iOe,"A",{href:!0});var fDt=s(lee);TGr=r(fDt,"FlaxPegasusModel"),fDt.forEach(t),MGr=r(iOe," (Pegasus model)"),iOe.forEach(t),EGr=i(ae),b3=n(ae,"LI",{});var dOe=s(b3);kCe=n(dOe,"STRONG",{});var mDt=s(kCe);CGr=r(mDt,"roberta"),mDt.forEach(t),wGr=r(dOe," \u2014 "),iee=n(dOe,"A",{href:!0});var gDt=s(iee);AGr=r(gDt,"FlaxRobertaModel"),gDt.forEach(t),LGr=r(dOe," (RoBERTa model)"),dOe.forEach(t),yGr=i(ae),v3=n(ae,"LI",{});var cOe=s(v3);SCe=n(cOe,"STRONG",{});var hDt=s(SCe);xGr=r(hDt,"roformer"),hDt.forEach(t),$Gr=r(cOe," \u2014 "),dee=n(cOe,"A",{href:!0});var pDt=s(dee);kGr=r(pDt,"FlaxRoFormerModel"),pDt.forEach(t),SGr=r(cOe," (RoFormer model)"),cOe.forEach(t),RGr=i(ae),F3=n(ae,"LI",{});var fOe=s(F3);RCe=n(fOe,"STRONG",{});var _Dt=s(RCe);PGr=r(_Dt,"t5"),_Dt.forEach(t),BGr=r(fOe," \u2014 "),cee=n(fOe,"A",{href:!0});var uDt=s(cee);IGr=r(uDt,"FlaxT5Model"),uDt.forEach(t),NGr=r(fOe," (T5 model)"),fOe.forEach(t),qGr=i(ae),T3=n(ae,"LI",{});var mOe=s(T3);PCe=n(mOe,"STRONG",{});var bDt=s(PCe);jGr=r(bDt,"vision-text-dual-encoder"),bDt.forEach(t),DGr=r(mOe," \u2014 "),fee=n(mOe,"A",{href:!0});var vDt=s(fee);GGr=r(vDt,"FlaxVisionTextDualEncoderModel"),vDt.forEach(t),OGr=r(mOe," (VisionTextDualEncoder model)"),mOe.forEach(t),VGr=i(ae),M3=n(ae,"LI",{});var gOe=s(M3);BCe=n(gOe,"STRONG",{});var FDt=s(BCe);XGr=r(FDt,"vit"),FDt.forEach(t),zGr=r(gOe," \u2014 "),mee=n(gOe,"A",{href:!0});var TDt=s(mee);QGr=r(TDt,"FlaxViTModel"),TDt.forEach(t),WGr=r(gOe," (ViT model)"),gOe.forEach(t),HGr=i(ae),E3=n(ae,"LI",{});var hOe=s(E3);ICe=n(hOe,"STRONG",{});var MDt=s(ICe);UGr=r(MDt,"wav2vec2"),MDt.forEach(t),JGr=r(hOe," \u2014 "),gee=n(hOe,"A",{href:!0});var EDt=s(gee);YGr=r(EDt,"FlaxWav2Vec2Model"),EDt.forEach(t),KGr=r(hOe," (Wav2Vec2 model)"),hOe.forEach(t),ZGr=i(ae),C3=n(ae,"LI",{});var pOe=s(C3);NCe=n(pOe,"STRONG",{});var CDt=s(NCe);eOr=r(CDt,"xglm"),CDt.forEach(t),oOr=r(pOe," \u2014 "),hee=n(pOe,"A",{href:!0});var wDt=s(hee);rOr=r(wDt,"FlaxXGLMModel"),wDt.forEach(t),tOr=r(pOe," (XGLM model)"),pOe.forEach(t),aOr=i(ae),w3=n(ae,"LI",{});var _Oe=s(w3);qCe=n(_Oe,"STRONG",{});var ADt=s(qCe);nOr=r(ADt,"xlm-roberta"),ADt.forEach(t),sOr=r(_Oe," \u2014 "),pee=n(_Oe,"A",{href:!0});var LDt=s(pee);lOr=r(LDt,"FlaxXLMRobertaModel"),LDt.forEach(t),iOr=r(_Oe," (XLM-RoBERTa model)"),_Oe.forEach(t),ae.forEach(t),dOr=i(ti),T(A3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),xze=i(f),Jc=n(f,"H2",{class:!0});var qWe=s(Jc);L3=n(qWe,"A",{id:!0,class:!0,href:!0});var yDt=s(L3);jCe=n(yDt,"SPAN",{});var xDt=s(jCe);T(f$.$$.fragment,xDt),xDt.forEach(t),yDt.forEach(t),cOr=i(qWe),DCe=n(qWe,"SPAN",{});var $Dt=s(DCe);fOr=r($Dt,"FlaxAutoModelForCausalLM"),$Dt.forEach(t),qWe.forEach(t),$ze=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(m$.$$.fragment,ai),mOr=i(ai),Yc=n(ai,"P",{});var Jte=s(Yc);gOr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ee=n(Jte,"A",{href:!0});var kDt=s(_ee);hOr=r(kDt,"from_pretrained()"),kDt.forEach(t),pOr=r(Jte," class method or the "),uee=n(Jte,"A",{href:!0});var SDt=s(uee);_Or=r(SDt,"from_config()"),SDt.forEach(t),uOr=r(Jte,` class
method.`),Jte.forEach(t),bOr=i(ai),g$=n(ai,"P",{});var jWe=s(g$);vOr=r(jWe,"This class cannot be instantiated directly using "),GCe=n(jWe,"CODE",{});var RDt=s(GCe);FOr=r(RDt,"__init__()"),RDt.forEach(t),TOr=r(jWe," (throws an error)."),jWe.forEach(t),MOr=i(ai),Wt=n(ai,"DIV",{class:!0});var kA=s(Wt);T(h$.$$.fragment,kA),EOr=i(kA),OCe=n(kA,"P",{});var PDt=s(OCe);COr=r(PDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PDt.forEach(t),wOr=i(kA),Kc=n(kA,"P",{});var Yte=s(Kc);AOr=r(Yte,`Note:
Loading a model from its configuration file does `),VCe=n(Yte,"STRONG",{});var BDt=s(VCe);LOr=r(BDt,"not"),BDt.forEach(t),yOr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=n(Yte,"A",{href:!0});var IDt=s(bee);xOr=r(IDt,"from_pretrained()"),IDt.forEach(t),$Or=r(Yte," to load the model weights."),Yte.forEach(t),kOr=i(kA),T(y3.$$.fragment,kA),kA.forEach(t),SOr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(p$.$$.fragment,ni),ROr=i(ni),XCe=n(ni,"P",{});var NDt=s(XCe);POr=r(NDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NDt.forEach(t),BOr=i(ni),Tn=n(ni,"P",{});var SA=s(Tn);IOr=r(SA,"The model class to instantiate is selected based on the "),zCe=n(SA,"CODE",{});var qDt=s(zCe);NOr=r(qDt,"model_type"),qDt.forEach(t),qOr=r(SA,` property of the config object (either
passed as an argument or loaded from `),QCe=n(SA,"CODE",{});var jDt=s(QCe);jOr=r(jDt,"pretrained_model_name_or_path"),jDt.forEach(t),DOr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(SA,"CODE",{});var DDt=s(WCe);GOr=r(DDt,"pretrained_model_name_or_path"),DDt.forEach(t),OOr=r(SA,":"),SA.forEach(t),VOr=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);x3=n(Ne,"LI",{});var uOe=s(x3);HCe=n(uOe,"STRONG",{});var GDt=s(HCe);XOr=r(GDt,"bart"),GDt.forEach(t),zOr=r(uOe," \u2014 "),vee=n(uOe,"A",{href:!0});var ODt=s(vee);QOr=r(ODt,"FlaxBartForCausalLM"),ODt.forEach(t),WOr=r(uOe," (BART model)"),uOe.forEach(t),HOr=i(Ne),$3=n(Ne,"LI",{});var bOe=s($3);UCe=n(bOe,"STRONG",{});var VDt=s(UCe);UOr=r(VDt,"bert"),VDt.forEach(t),JOr=r(bOe," \u2014 "),Fee=n(bOe,"A",{href:!0});var XDt=s(Fee);YOr=r(XDt,"FlaxBertForCausalLM"),XDt.forEach(t),KOr=r(bOe," (BERT model)"),bOe.forEach(t),ZOr=i(Ne),k3=n(Ne,"LI",{});var vOe=s(k3);JCe=n(vOe,"STRONG",{});var zDt=s(JCe);eVr=r(zDt,"big_bird"),zDt.forEach(t),oVr=r(vOe," \u2014 "),Tee=n(vOe,"A",{href:!0});var QDt=s(Tee);rVr=r(QDt,"FlaxBigBirdForCausalLM"),QDt.forEach(t),tVr=r(vOe," (BigBird model)"),vOe.forEach(t),aVr=i(Ne),S3=n(Ne,"LI",{});var FOe=s(S3);YCe=n(FOe,"STRONG",{});var WDt=s(YCe);nVr=r(WDt,"electra"),WDt.forEach(t),sVr=r(FOe," \u2014 "),Mee=n(FOe,"A",{href:!0});var HDt=s(Mee);lVr=r(HDt,"FlaxElectraForCausalLM"),HDt.forEach(t),iVr=r(FOe," (ELECTRA model)"),FOe.forEach(t),dVr=i(Ne),R3=n(Ne,"LI",{});var TOe=s(R3);KCe=n(TOe,"STRONG",{});var UDt=s(KCe);cVr=r(UDt,"gpt2"),UDt.forEach(t),fVr=r(TOe," \u2014 "),Eee=n(TOe,"A",{href:!0});var JDt=s(Eee);mVr=r(JDt,"FlaxGPT2LMHeadModel"),JDt.forEach(t),gVr=r(TOe," (OpenAI GPT-2 model)"),TOe.forEach(t),hVr=i(Ne),P3=n(Ne,"LI",{});var MOe=s(P3);ZCe=n(MOe,"STRONG",{});var YDt=s(ZCe);pVr=r(YDt,"gpt_neo"),YDt.forEach(t),_Vr=r(MOe," \u2014 "),Cee=n(MOe,"A",{href:!0});var KDt=s(Cee);uVr=r(KDt,"FlaxGPTNeoForCausalLM"),KDt.forEach(t),bVr=r(MOe," (GPT Neo model)"),MOe.forEach(t),vVr=i(Ne),B3=n(Ne,"LI",{});var EOe=s(B3);e3e=n(EOe,"STRONG",{});var ZDt=s(e3e);FVr=r(ZDt,"gptj"),ZDt.forEach(t),TVr=r(EOe," \u2014 "),wee=n(EOe,"A",{href:!0});var eGt=s(wee);MVr=r(eGt,"FlaxGPTJForCausalLM"),eGt.forEach(t),EVr=r(EOe," (GPT-J model)"),EOe.forEach(t),CVr=i(Ne),I3=n(Ne,"LI",{});var COe=s(I3);o3e=n(COe,"STRONG",{});var oGt=s(o3e);wVr=r(oGt,"opt"),oGt.forEach(t),AVr=r(COe," \u2014 "),Aee=n(COe,"A",{href:!0});var rGt=s(Aee);LVr=r(rGt,"FlaxOPTForCausalLM"),rGt.forEach(t),yVr=r(COe," (OPT model)"),COe.forEach(t),xVr=i(Ne),N3=n(Ne,"LI",{});var wOe=s(N3);r3e=n(wOe,"STRONG",{});var tGt=s(r3e);$Vr=r(tGt,"roberta"),tGt.forEach(t),kVr=r(wOe," \u2014 "),Lee=n(wOe,"A",{href:!0});var aGt=s(Lee);SVr=r(aGt,"FlaxRobertaForCausalLM"),aGt.forEach(t),RVr=r(wOe," (RoBERTa model)"),wOe.forEach(t),PVr=i(Ne),q3=n(Ne,"LI",{});var AOe=s(q3);t3e=n(AOe,"STRONG",{});var nGt=s(t3e);BVr=r(nGt,"xglm"),nGt.forEach(t),IVr=r(AOe," \u2014 "),yee=n(AOe,"A",{href:!0});var sGt=s(yee);NVr=r(sGt,"FlaxXGLMForCausalLM"),sGt.forEach(t),qVr=r(AOe," (XGLM model)"),AOe.forEach(t),Ne.forEach(t),jVr=i(ni),T(j3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),kze=i(f),Zc=n(f,"H2",{class:!0});var DWe=s(Zc);D3=n(DWe,"A",{id:!0,class:!0,href:!0});var lGt=s(D3);a3e=n(lGt,"SPAN",{});var iGt=s(a3e);T(_$.$$.fragment,iGt),iGt.forEach(t),lGt.forEach(t),DVr=i(DWe),n3e=n(DWe,"SPAN",{});var dGt=s(n3e);GVr=r(dGt,"FlaxAutoModelForPreTraining"),dGt.forEach(t),DWe.forEach(t),Sze=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(u$.$$.fragment,si),OVr=i(si),ef=n(si,"P",{});var Kte=s(ef);VVr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=n(Kte,"A",{href:!0});var cGt=s(xee);XVr=r(cGt,"from_pretrained()"),cGt.forEach(t),zVr=r(Kte," class method or the "),$ee=n(Kte,"A",{href:!0});var fGt=s($ee);QVr=r(fGt,"from_config()"),fGt.forEach(t),WVr=r(Kte,` class
method.`),Kte.forEach(t),HVr=i(si),b$=n(si,"P",{});var GWe=s(b$);UVr=r(GWe,"This class cannot be instantiated directly using "),s3e=n(GWe,"CODE",{});var mGt=s(s3e);JVr=r(mGt,"__init__()"),mGt.forEach(t),YVr=r(GWe," (throws an error)."),GWe.forEach(t),KVr=i(si),Ht=n(si,"DIV",{class:!0});var RA=s(Ht);T(v$.$$.fragment,RA),ZVr=i(RA),l3e=n(RA,"P",{});var gGt=s(l3e);eXr=r(gGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gGt.forEach(t),oXr=i(RA),of=n(RA,"P",{});var Zte=s(of);rXr=r(Zte,`Note:
Loading a model from its configuration file does `),i3e=n(Zte,"STRONG",{});var hGt=s(i3e);tXr=r(hGt,"not"),hGt.forEach(t),aXr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=n(Zte,"A",{href:!0});var pGt=s(kee);nXr=r(pGt,"from_pretrained()"),pGt.forEach(t),sXr=r(Zte," to load the model weights."),Zte.forEach(t),lXr=i(RA),T(G3.$$.fragment,RA),RA.forEach(t),iXr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(F$.$$.fragment,li),dXr=i(li),d3e=n(li,"P",{});var _Gt=s(d3e);cXr=r(_Gt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Gt.forEach(t),fXr=i(li),Mn=n(li,"P",{});var PA=s(Mn);mXr=r(PA,"The model class to instantiate is selected based on the "),c3e=n(PA,"CODE",{});var uGt=s(c3e);gXr=r(uGt,"model_type"),uGt.forEach(t),hXr=r(PA,` property of the config object (either
passed as an argument or loaded from `),f3e=n(PA,"CODE",{});var bGt=s(f3e);pXr=r(bGt,"pretrained_model_name_or_path"),bGt.forEach(t),_Xr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=n(PA,"CODE",{});var vGt=s(m3e);uXr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),bXr=r(PA,":"),PA.forEach(t),vXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);O3=n(we,"LI",{});var LOe=s(O3);g3e=n(LOe,"STRONG",{});var FGt=s(g3e);FXr=r(FGt,"albert"),FGt.forEach(t),TXr=r(LOe," \u2014 "),See=n(LOe,"A",{href:!0});var TGt=s(See);MXr=r(TGt,"FlaxAlbertForPreTraining"),TGt.forEach(t),EXr=r(LOe," (ALBERT model)"),LOe.forEach(t),CXr=i(we),V3=n(we,"LI",{});var yOe=s(V3);h3e=n(yOe,"STRONG",{});var MGt=s(h3e);wXr=r(MGt,"bart"),MGt.forEach(t),AXr=r(yOe," \u2014 "),Ree=n(yOe,"A",{href:!0});var EGt=s(Ree);LXr=r(EGt,"FlaxBartForConditionalGeneration"),EGt.forEach(t),yXr=r(yOe," (BART model)"),yOe.forEach(t),xXr=i(we),X3=n(we,"LI",{});var xOe=s(X3);p3e=n(xOe,"STRONG",{});var CGt=s(p3e);$Xr=r(CGt,"bert"),CGt.forEach(t),kXr=r(xOe," \u2014 "),Pee=n(xOe,"A",{href:!0});var wGt=s(Pee);SXr=r(wGt,"FlaxBertForPreTraining"),wGt.forEach(t),RXr=r(xOe," (BERT model)"),xOe.forEach(t),PXr=i(we),z3=n(we,"LI",{});var $Oe=s(z3);_3e=n($Oe,"STRONG",{});var AGt=s(_3e);BXr=r(AGt,"big_bird"),AGt.forEach(t),IXr=r($Oe," \u2014 "),Bee=n($Oe,"A",{href:!0});var LGt=s(Bee);NXr=r(LGt,"FlaxBigBirdForPreTraining"),LGt.forEach(t),qXr=r($Oe," (BigBird model)"),$Oe.forEach(t),jXr=i(we),Q3=n(we,"LI",{});var kOe=s(Q3);u3e=n(kOe,"STRONG",{});var yGt=s(u3e);DXr=r(yGt,"electra"),yGt.forEach(t),GXr=r(kOe," \u2014 "),Iee=n(kOe,"A",{href:!0});var xGt=s(Iee);OXr=r(xGt,"FlaxElectraForPreTraining"),xGt.forEach(t),VXr=r(kOe," (ELECTRA model)"),kOe.forEach(t),XXr=i(we),W3=n(we,"LI",{});var SOe=s(W3);b3e=n(SOe,"STRONG",{});var $Gt=s(b3e);zXr=r($Gt,"longt5"),$Gt.forEach(t),QXr=r(SOe," \u2014 "),Nee=n(SOe,"A",{href:!0});var kGt=s(Nee);WXr=r(kGt,"FlaxLongT5ForConditionalGeneration"),kGt.forEach(t),HXr=r(SOe," (LongT5 model)"),SOe.forEach(t),UXr=i(we),H3=n(we,"LI",{});var ROe=s(H3);v3e=n(ROe,"STRONG",{});var SGt=s(v3e);JXr=r(SGt,"mbart"),SGt.forEach(t),YXr=r(ROe," \u2014 "),qee=n(ROe,"A",{href:!0});var RGt=s(qee);KXr=r(RGt,"FlaxMBartForConditionalGeneration"),RGt.forEach(t),ZXr=r(ROe," (mBART model)"),ROe.forEach(t),ezr=i(we),U3=n(we,"LI",{});var POe=s(U3);F3e=n(POe,"STRONG",{});var PGt=s(F3e);ozr=r(PGt,"mt5"),PGt.forEach(t),rzr=r(POe," \u2014 "),jee=n(POe,"A",{href:!0});var BGt=s(jee);tzr=r(BGt,"FlaxMT5ForConditionalGeneration"),BGt.forEach(t),azr=r(POe," (MT5 model)"),POe.forEach(t),nzr=i(we),J3=n(we,"LI",{});var BOe=s(J3);T3e=n(BOe,"STRONG",{});var IGt=s(T3e);szr=r(IGt,"roberta"),IGt.forEach(t),lzr=r(BOe," \u2014 "),Dee=n(BOe,"A",{href:!0});var NGt=s(Dee);izr=r(NGt,"FlaxRobertaForMaskedLM"),NGt.forEach(t),dzr=r(BOe," (RoBERTa model)"),BOe.forEach(t),czr=i(we),Y3=n(we,"LI",{});var IOe=s(Y3);M3e=n(IOe,"STRONG",{});var qGt=s(M3e);fzr=r(qGt,"roformer"),qGt.forEach(t),mzr=r(IOe," \u2014 "),Gee=n(IOe,"A",{href:!0});var jGt=s(Gee);gzr=r(jGt,"FlaxRoFormerForMaskedLM"),jGt.forEach(t),hzr=r(IOe," (RoFormer model)"),IOe.forEach(t),pzr=i(we),K3=n(we,"LI",{});var NOe=s(K3);E3e=n(NOe,"STRONG",{});var DGt=s(E3e);_zr=r(DGt,"t5"),DGt.forEach(t),uzr=r(NOe," \u2014 "),Oee=n(NOe,"A",{href:!0});var GGt=s(Oee);bzr=r(GGt,"FlaxT5ForConditionalGeneration"),GGt.forEach(t),vzr=r(NOe," (T5 model)"),NOe.forEach(t),Fzr=i(we),Z3=n(we,"LI",{});var qOe=s(Z3);C3e=n(qOe,"STRONG",{});var OGt=s(C3e);Tzr=r(OGt,"wav2vec2"),OGt.forEach(t),Mzr=r(qOe," \u2014 "),Vee=n(qOe,"A",{href:!0});var VGt=s(Vee);Ezr=r(VGt,"FlaxWav2Vec2ForPreTraining"),VGt.forEach(t),Czr=r(qOe," (Wav2Vec2 model)"),qOe.forEach(t),wzr=i(we),e5=n(we,"LI",{});var jOe=s(e5);w3e=n(jOe,"STRONG",{});var XGt=s(w3e);Azr=r(XGt,"xlm-roberta"),XGt.forEach(t),Lzr=r(jOe," \u2014 "),Xee=n(jOe,"A",{href:!0});var zGt=s(Xee);yzr=r(zGt,"FlaxXLMRobertaForMaskedLM"),zGt.forEach(t),xzr=r(jOe," (XLM-RoBERTa model)"),jOe.forEach(t),we.forEach(t),$zr=i(li),T(o5.$$.fragment,li),li.forEach(t),si.forEach(t),Rze=i(f),rf=n(f,"H2",{class:!0});var OWe=s(rf);r5=n(OWe,"A",{id:!0,class:!0,href:!0});var QGt=s(r5);A3e=n(QGt,"SPAN",{});var WGt=s(A3e);T(T$.$$.fragment,WGt),WGt.forEach(t),QGt.forEach(t),kzr=i(OWe),L3e=n(OWe,"SPAN",{});var HGt=s(L3e);Szr=r(HGt,"FlaxAutoModelForMaskedLM"),HGt.forEach(t),OWe.forEach(t),Pze=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(M$.$$.fragment,ii),Rzr=i(ii),tf=n(ii,"P",{});var eae=s(tf);Pzr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=n(eae,"A",{href:!0});var UGt=s(zee);Bzr=r(UGt,"from_pretrained()"),UGt.forEach(t),Izr=r(eae," class method or the "),Qee=n(eae,"A",{href:!0});var JGt=s(Qee);Nzr=r(JGt,"from_config()"),JGt.forEach(t),qzr=r(eae,` class
method.`),eae.forEach(t),jzr=i(ii),E$=n(ii,"P",{});var VWe=s(E$);Dzr=r(VWe,"This class cannot be instantiated directly using "),y3e=n(VWe,"CODE",{});var YGt=s(y3e);Gzr=r(YGt,"__init__()"),YGt.forEach(t),Ozr=r(VWe," (throws an error)."),VWe.forEach(t),Vzr=i(ii),Ut=n(ii,"DIV",{class:!0});var BA=s(Ut);T(C$.$$.fragment,BA),Xzr=i(BA),x3e=n(BA,"P",{});var KGt=s(x3e);zzr=r(KGt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KGt.forEach(t),Qzr=i(BA),af=n(BA,"P",{});var oae=s(af);Wzr=r(oae,`Note:
Loading a model from its configuration file does `),$3e=n(oae,"STRONG",{});var ZGt=s($3e);Hzr=r(ZGt,"not"),ZGt.forEach(t),Uzr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(oae,"A",{href:!0});var eOt=s(Wee);Jzr=r(eOt,"from_pretrained()"),eOt.forEach(t),Yzr=r(oae," to load the model weights."),oae.forEach(t),Kzr=i(BA),T(t5.$$.fragment,BA),BA.forEach(t),Zzr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(w$.$$.fragment,di),eQr=i(di),k3e=n(di,"P",{});var oOt=s(k3e);oQr=r(oOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oOt.forEach(t),rQr=i(di),En=n(di,"P",{});var IA=s(En);tQr=r(IA,"The model class to instantiate is selected based on the "),S3e=n(IA,"CODE",{});var rOt=s(S3e);aQr=r(rOt,"model_type"),rOt.forEach(t),nQr=r(IA,` property of the config object (either
passed as an argument or loaded from `),R3e=n(IA,"CODE",{});var tOt=s(R3e);sQr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),lQr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(IA,"CODE",{});var aOt=s(P3e);iQr=r(aOt,"pretrained_model_name_or_path"),aOt.forEach(t),dQr=r(IA,":"),IA.forEach(t),cQr=i(di),$e=n(di,"UL",{});var qe=s($e);a5=n(qe,"LI",{});var DOe=s(a5);B3e=n(DOe,"STRONG",{});var nOt=s(B3e);fQr=r(nOt,"albert"),nOt.forEach(t),mQr=r(DOe," \u2014 "),Hee=n(DOe,"A",{href:!0});var sOt=s(Hee);gQr=r(sOt,"FlaxAlbertForMaskedLM"),sOt.forEach(t),hQr=r(DOe," (ALBERT model)"),DOe.forEach(t),pQr=i(qe),n5=n(qe,"LI",{});var GOe=s(n5);I3e=n(GOe,"STRONG",{});var lOt=s(I3e);_Qr=r(lOt,"bart"),lOt.forEach(t),uQr=r(GOe," \u2014 "),Uee=n(GOe,"A",{href:!0});var iOt=s(Uee);bQr=r(iOt,"FlaxBartForConditionalGeneration"),iOt.forEach(t),vQr=r(GOe," (BART model)"),GOe.forEach(t),FQr=i(qe),s5=n(qe,"LI",{});var OOe=s(s5);N3e=n(OOe,"STRONG",{});var dOt=s(N3e);TQr=r(dOt,"bert"),dOt.forEach(t),MQr=r(OOe," \u2014 "),Jee=n(OOe,"A",{href:!0});var cOt=s(Jee);EQr=r(cOt,"FlaxBertForMaskedLM"),cOt.forEach(t),CQr=r(OOe," (BERT model)"),OOe.forEach(t),wQr=i(qe),l5=n(qe,"LI",{});var VOe=s(l5);q3e=n(VOe,"STRONG",{});var fOt=s(q3e);AQr=r(fOt,"big_bird"),fOt.forEach(t),LQr=r(VOe," \u2014 "),Yee=n(VOe,"A",{href:!0});var mOt=s(Yee);yQr=r(mOt,"FlaxBigBirdForMaskedLM"),mOt.forEach(t),xQr=r(VOe," (BigBird model)"),VOe.forEach(t),$Qr=i(qe),i5=n(qe,"LI",{});var XOe=s(i5);j3e=n(XOe,"STRONG",{});var gOt=s(j3e);kQr=r(gOt,"distilbert"),gOt.forEach(t),SQr=r(XOe," \u2014 "),Kee=n(XOe,"A",{href:!0});var hOt=s(Kee);RQr=r(hOt,"FlaxDistilBertForMaskedLM"),hOt.forEach(t),PQr=r(XOe," (DistilBERT model)"),XOe.forEach(t),BQr=i(qe),d5=n(qe,"LI",{});var zOe=s(d5);D3e=n(zOe,"STRONG",{});var pOt=s(D3e);IQr=r(pOt,"electra"),pOt.forEach(t),NQr=r(zOe," \u2014 "),Zee=n(zOe,"A",{href:!0});var _Ot=s(Zee);qQr=r(_Ot,"FlaxElectraForMaskedLM"),_Ot.forEach(t),jQr=r(zOe," (ELECTRA model)"),zOe.forEach(t),DQr=i(qe),c5=n(qe,"LI",{});var QOe=s(c5);G3e=n(QOe,"STRONG",{});var uOt=s(G3e);GQr=r(uOt,"mbart"),uOt.forEach(t),OQr=r(QOe," \u2014 "),eoe=n(QOe,"A",{href:!0});var bOt=s(eoe);VQr=r(bOt,"FlaxMBartForConditionalGeneration"),bOt.forEach(t),XQr=r(QOe," (mBART model)"),QOe.forEach(t),zQr=i(qe),f5=n(qe,"LI",{});var WOe=s(f5);O3e=n(WOe,"STRONG",{});var vOt=s(O3e);QQr=r(vOt,"roberta"),vOt.forEach(t),WQr=r(WOe," \u2014 "),ooe=n(WOe,"A",{href:!0});var FOt=s(ooe);HQr=r(FOt,"FlaxRobertaForMaskedLM"),FOt.forEach(t),UQr=r(WOe," (RoBERTa model)"),WOe.forEach(t),JQr=i(qe),m5=n(qe,"LI",{});var HOe=s(m5);V3e=n(HOe,"STRONG",{});var TOt=s(V3e);YQr=r(TOt,"roformer"),TOt.forEach(t),KQr=r(HOe," \u2014 "),roe=n(HOe,"A",{href:!0});var MOt=s(roe);ZQr=r(MOt,"FlaxRoFormerForMaskedLM"),MOt.forEach(t),eWr=r(HOe," (RoFormer model)"),HOe.forEach(t),oWr=i(qe),g5=n(qe,"LI",{});var UOe=s(g5);X3e=n(UOe,"STRONG",{});var EOt=s(X3e);rWr=r(EOt,"xlm-roberta"),EOt.forEach(t),tWr=r(UOe," \u2014 "),toe=n(UOe,"A",{href:!0});var COt=s(toe);aWr=r(COt,"FlaxXLMRobertaForMaskedLM"),COt.forEach(t),nWr=r(UOe," (XLM-RoBERTa model)"),UOe.forEach(t),qe.forEach(t),sWr=i(di),T(h5.$$.fragment,di),di.forEach(t),ii.forEach(t),Bze=i(f),nf=n(f,"H2",{class:!0});var XWe=s(nf);p5=n(XWe,"A",{id:!0,class:!0,href:!0});var wOt=s(p5);z3e=n(wOt,"SPAN",{});var AOt=s(z3e);T(A$.$$.fragment,AOt),AOt.forEach(t),wOt.forEach(t),lWr=i(XWe),Q3e=n(XWe,"SPAN",{});var LOt=s(Q3e);iWr=r(LOt,"FlaxAutoModelForSeq2SeqLM"),LOt.forEach(t),XWe.forEach(t),Ize=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(L$.$$.fragment,ci),dWr=i(ci),sf=n(ci,"P",{});var rae=s(sf);cWr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=n(rae,"A",{href:!0});var yOt=s(aoe);fWr=r(yOt,"from_pretrained()"),yOt.forEach(t),mWr=r(rae," class method or the "),noe=n(rae,"A",{href:!0});var xOt=s(noe);gWr=r(xOt,"from_config()"),xOt.forEach(t),hWr=r(rae,` class
method.`),rae.forEach(t),pWr=i(ci),y$=n(ci,"P",{});var zWe=s(y$);_Wr=r(zWe,"This class cannot be instantiated directly using "),W3e=n(zWe,"CODE",{});var $Ot=s(W3e);uWr=r($Ot,"__init__()"),$Ot.forEach(t),bWr=r(zWe," (throws an error)."),zWe.forEach(t),vWr=i(ci),Jt=n(ci,"DIV",{class:!0});var NA=s(Jt);T(x$.$$.fragment,NA),FWr=i(NA),H3e=n(NA,"P",{});var kOt=s(H3e);TWr=r(kOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kOt.forEach(t),MWr=i(NA),lf=n(NA,"P",{});var tae=s(lf);EWr=r(tae,`Note:
Loading a model from its configuration file does `),U3e=n(tae,"STRONG",{});var SOt=s(U3e);CWr=r(SOt,"not"),SOt.forEach(t),wWr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(tae,"A",{href:!0});var ROt=s(soe);AWr=r(ROt,"from_pretrained()"),ROt.forEach(t),LWr=r(tae," to load the model weights."),tae.forEach(t),yWr=i(NA),T(_5.$$.fragment,NA),NA.forEach(t),xWr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T($$.$$.fragment,fi),$Wr=i(fi),J3e=n(fi,"P",{});var POt=s(J3e);kWr=r(POt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),POt.forEach(t),SWr=i(fi),Cn=n(fi,"P",{});var qA=s(Cn);RWr=r(qA,"The model class to instantiate is selected based on the "),Y3e=n(qA,"CODE",{});var BOt=s(Y3e);PWr=r(BOt,"model_type"),BOt.forEach(t),BWr=r(qA,` property of the config object (either
passed as an argument or loaded from `),K3e=n(qA,"CODE",{});var IOt=s(K3e);IWr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),NWr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(qA,"CODE",{});var NOt=s(Z3e);qWr=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),jWr=r(qA,":"),qA.forEach(t),DWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);u5=n(je,"LI",{});var JOe=s(u5);e5e=n(JOe,"STRONG",{});var qOt=s(e5e);GWr=r(qOt,"bart"),qOt.forEach(t),OWr=r(JOe," \u2014 "),loe=n(JOe,"A",{href:!0});var jOt=s(loe);VWr=r(jOt,"FlaxBartForConditionalGeneration"),jOt.forEach(t),XWr=r(JOe," (BART model)"),JOe.forEach(t),zWr=i(je),b5=n(je,"LI",{});var YOe=s(b5);o5e=n(YOe,"STRONG",{});var DOt=s(o5e);QWr=r(DOt,"blenderbot"),DOt.forEach(t),WWr=r(YOe," \u2014 "),ioe=n(YOe,"A",{href:!0});var GOt=s(ioe);HWr=r(GOt,"FlaxBlenderbotForConditionalGeneration"),GOt.forEach(t),UWr=r(YOe," (Blenderbot model)"),YOe.forEach(t),JWr=i(je),v5=n(je,"LI",{});var KOe=s(v5);r5e=n(KOe,"STRONG",{});var OOt=s(r5e);YWr=r(OOt,"blenderbot-small"),OOt.forEach(t),KWr=r(KOe," \u2014 "),doe=n(KOe,"A",{href:!0});var VOt=s(doe);ZWr=r(VOt,"FlaxBlenderbotSmallForConditionalGeneration"),VOt.forEach(t),eHr=r(KOe," (BlenderbotSmall model)"),KOe.forEach(t),oHr=i(je),F5=n(je,"LI",{});var ZOe=s(F5);t5e=n(ZOe,"STRONG",{});var XOt=s(t5e);rHr=r(XOt,"encoder-decoder"),XOt.forEach(t),tHr=r(ZOe," \u2014 "),coe=n(ZOe,"A",{href:!0});var zOt=s(coe);aHr=r(zOt,"FlaxEncoderDecoderModel"),zOt.forEach(t),nHr=r(ZOe," (Encoder decoder model)"),ZOe.forEach(t),sHr=i(je),T5=n(je,"LI",{});var eVe=s(T5);a5e=n(eVe,"STRONG",{});var QOt=s(a5e);lHr=r(QOt,"longt5"),QOt.forEach(t),iHr=r(eVe," \u2014 "),foe=n(eVe,"A",{href:!0});var WOt=s(foe);dHr=r(WOt,"FlaxLongT5ForConditionalGeneration"),WOt.forEach(t),cHr=r(eVe," (LongT5 model)"),eVe.forEach(t),fHr=i(je),M5=n(je,"LI",{});var oVe=s(M5);n5e=n(oVe,"STRONG",{});var HOt=s(n5e);mHr=r(HOt,"marian"),HOt.forEach(t),gHr=r(oVe," \u2014 "),moe=n(oVe,"A",{href:!0});var UOt=s(moe);hHr=r(UOt,"FlaxMarianMTModel"),UOt.forEach(t),pHr=r(oVe," (Marian model)"),oVe.forEach(t),_Hr=i(je),E5=n(je,"LI",{});var rVe=s(E5);s5e=n(rVe,"STRONG",{});var JOt=s(s5e);uHr=r(JOt,"mbart"),JOt.forEach(t),bHr=r(rVe," \u2014 "),goe=n(rVe,"A",{href:!0});var YOt=s(goe);vHr=r(YOt,"FlaxMBartForConditionalGeneration"),YOt.forEach(t),FHr=r(rVe," (mBART model)"),rVe.forEach(t),THr=i(je),C5=n(je,"LI",{});var tVe=s(C5);l5e=n(tVe,"STRONG",{});var KOt=s(l5e);MHr=r(KOt,"mt5"),KOt.forEach(t),EHr=r(tVe," \u2014 "),hoe=n(tVe,"A",{href:!0});var ZOt=s(hoe);CHr=r(ZOt,"FlaxMT5ForConditionalGeneration"),ZOt.forEach(t),wHr=r(tVe," (MT5 model)"),tVe.forEach(t),AHr=i(je),w5=n(je,"LI",{});var aVe=s(w5);i5e=n(aVe,"STRONG",{});var eVt=s(i5e);LHr=r(eVt,"pegasus"),eVt.forEach(t),yHr=r(aVe," \u2014 "),poe=n(aVe,"A",{href:!0});var oVt=s(poe);xHr=r(oVt,"FlaxPegasusForConditionalGeneration"),oVt.forEach(t),$Hr=r(aVe," (Pegasus model)"),aVe.forEach(t),kHr=i(je),A5=n(je,"LI",{});var nVe=s(A5);d5e=n(nVe,"STRONG",{});var rVt=s(d5e);SHr=r(rVt,"t5"),rVt.forEach(t),RHr=r(nVe," \u2014 "),_oe=n(nVe,"A",{href:!0});var tVt=s(_oe);PHr=r(tVt,"FlaxT5ForConditionalGeneration"),tVt.forEach(t),BHr=r(nVe," (T5 model)"),nVe.forEach(t),je.forEach(t),IHr=i(fi),T(L5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Nze=i(f),df=n(f,"H2",{class:!0});var QWe=s(df);y5=n(QWe,"A",{id:!0,class:!0,href:!0});var aVt=s(y5);c5e=n(aVt,"SPAN",{});var nVt=s(c5e);T(k$.$$.fragment,nVt),nVt.forEach(t),aVt.forEach(t),NHr=i(QWe),f5e=n(QWe,"SPAN",{});var sVt=s(f5e);qHr=r(sVt,"FlaxAutoModelForSequenceClassification"),sVt.forEach(t),QWe.forEach(t),qze=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(S$.$$.fragment,mi),jHr=i(mi),cf=n(mi,"P",{});var aae=s(cf);DHr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=n(aae,"A",{href:!0});var lVt=s(uoe);GHr=r(lVt,"from_pretrained()"),lVt.forEach(t),OHr=r(aae," class method or the "),boe=n(aae,"A",{href:!0});var iVt=s(boe);VHr=r(iVt,"from_config()"),iVt.forEach(t),XHr=r(aae,` class
method.`),aae.forEach(t),zHr=i(mi),R$=n(mi,"P",{});var WWe=s(R$);QHr=r(WWe,"This class cannot be instantiated directly using "),m5e=n(WWe,"CODE",{});var dVt=s(m5e);WHr=r(dVt,"__init__()"),dVt.forEach(t),HHr=r(WWe," (throws an error)."),WWe.forEach(t),UHr=i(mi),Yt=n(mi,"DIV",{class:!0});var jA=s(Yt);T(P$.$$.fragment,jA),JHr=i(jA),g5e=n(jA,"P",{});var cVt=s(g5e);YHr=r(cVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cVt.forEach(t),KHr=i(jA),ff=n(jA,"P",{});var nae=s(ff);ZHr=r(nae,`Note:
Loading a model from its configuration file does `),h5e=n(nae,"STRONG",{});var fVt=s(h5e);eUr=r(fVt,"not"),fVt.forEach(t),oUr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(nae,"A",{href:!0});var mVt=s(voe);rUr=r(mVt,"from_pretrained()"),mVt.forEach(t),tUr=r(nae," to load the model weights."),nae.forEach(t),aUr=i(jA),T(x5.$$.fragment,jA),jA.forEach(t),nUr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(B$.$$.fragment,gi),sUr=i(gi),p5e=n(gi,"P",{});var gVt=s(p5e);lUr=r(gVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gVt.forEach(t),iUr=i(gi),wn=n(gi,"P",{});var DA=s(wn);dUr=r(DA,"The model class to instantiate is selected based on the "),_5e=n(DA,"CODE",{});var hVt=s(_5e);cUr=r(hVt,"model_type"),hVt.forEach(t),fUr=r(DA,` property of the config object (either
passed as an argument or loaded from `),u5e=n(DA,"CODE",{});var pVt=s(u5e);mUr=r(pVt,"pretrained_model_name_or_path"),pVt.forEach(t),gUr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(DA,"CODE",{});var _Vt=s(b5e);hUr=r(_Vt,"pretrained_model_name_or_path"),_Vt.forEach(t),pUr=r(DA,":"),DA.forEach(t),_Ur=i(gi),Se=n(gi,"UL",{});var De=s(Se);$5=n(De,"LI",{});var sVe=s($5);v5e=n(sVe,"STRONG",{});var uVt=s(v5e);uUr=r(uVt,"albert"),uVt.forEach(t),bUr=r(sVe," \u2014 "),Foe=n(sVe,"A",{href:!0});var bVt=s(Foe);vUr=r(bVt,"FlaxAlbertForSequenceClassification"),bVt.forEach(t),FUr=r(sVe," (ALBERT model)"),sVe.forEach(t),TUr=i(De),k5=n(De,"LI",{});var lVe=s(k5);F5e=n(lVe,"STRONG",{});var vVt=s(F5e);MUr=r(vVt,"bart"),vVt.forEach(t),EUr=r(lVe," \u2014 "),Toe=n(lVe,"A",{href:!0});var FVt=s(Toe);CUr=r(FVt,"FlaxBartForSequenceClassification"),FVt.forEach(t),wUr=r(lVe," (BART model)"),lVe.forEach(t),AUr=i(De),S5=n(De,"LI",{});var iVe=s(S5);T5e=n(iVe,"STRONG",{});var TVt=s(T5e);LUr=r(TVt,"bert"),TVt.forEach(t),yUr=r(iVe," \u2014 "),Moe=n(iVe,"A",{href:!0});var MVt=s(Moe);xUr=r(MVt,"FlaxBertForSequenceClassification"),MVt.forEach(t),$Ur=r(iVe," (BERT model)"),iVe.forEach(t),kUr=i(De),R5=n(De,"LI",{});var dVe=s(R5);M5e=n(dVe,"STRONG",{});var EVt=s(M5e);SUr=r(EVt,"big_bird"),EVt.forEach(t),RUr=r(dVe," \u2014 "),Eoe=n(dVe,"A",{href:!0});var CVt=s(Eoe);PUr=r(CVt,"FlaxBigBirdForSequenceClassification"),CVt.forEach(t),BUr=r(dVe," (BigBird model)"),dVe.forEach(t),IUr=i(De),P5=n(De,"LI",{});var cVe=s(P5);E5e=n(cVe,"STRONG",{});var wVt=s(E5e);NUr=r(wVt,"distilbert"),wVt.forEach(t),qUr=r(cVe," \u2014 "),Coe=n(cVe,"A",{href:!0});var AVt=s(Coe);jUr=r(AVt,"FlaxDistilBertForSequenceClassification"),AVt.forEach(t),DUr=r(cVe," (DistilBERT model)"),cVe.forEach(t),GUr=i(De),B5=n(De,"LI",{});var fVe=s(B5);C5e=n(fVe,"STRONG",{});var LVt=s(C5e);OUr=r(LVt,"electra"),LVt.forEach(t),VUr=r(fVe," \u2014 "),woe=n(fVe,"A",{href:!0});var yVt=s(woe);XUr=r(yVt,"FlaxElectraForSequenceClassification"),yVt.forEach(t),zUr=r(fVe," (ELECTRA model)"),fVe.forEach(t),QUr=i(De),I5=n(De,"LI",{});var mVe=s(I5);w5e=n(mVe,"STRONG",{});var xVt=s(w5e);WUr=r(xVt,"mbart"),xVt.forEach(t),HUr=r(mVe," \u2014 "),Aoe=n(mVe,"A",{href:!0});var $Vt=s(Aoe);UUr=r($Vt,"FlaxMBartForSequenceClassification"),$Vt.forEach(t),JUr=r(mVe," (mBART model)"),mVe.forEach(t),YUr=i(De),N5=n(De,"LI",{});var gVe=s(N5);A5e=n(gVe,"STRONG",{});var kVt=s(A5e);KUr=r(kVt,"roberta"),kVt.forEach(t),ZUr=r(gVe," \u2014 "),Loe=n(gVe,"A",{href:!0});var SVt=s(Loe);eJr=r(SVt,"FlaxRobertaForSequenceClassification"),SVt.forEach(t),oJr=r(gVe," (RoBERTa model)"),gVe.forEach(t),rJr=i(De),q5=n(De,"LI",{});var hVe=s(q5);L5e=n(hVe,"STRONG",{});var RVt=s(L5e);tJr=r(RVt,"roformer"),RVt.forEach(t),aJr=r(hVe," \u2014 "),yoe=n(hVe,"A",{href:!0});var PVt=s(yoe);nJr=r(PVt,"FlaxRoFormerForSequenceClassification"),PVt.forEach(t),sJr=r(hVe," (RoFormer model)"),hVe.forEach(t),lJr=i(De),j5=n(De,"LI",{});var pVe=s(j5);y5e=n(pVe,"STRONG",{});var BVt=s(y5e);iJr=r(BVt,"xlm-roberta"),BVt.forEach(t),dJr=r(pVe," \u2014 "),xoe=n(pVe,"A",{href:!0});var IVt=s(xoe);cJr=r(IVt,"FlaxXLMRobertaForSequenceClassification"),IVt.forEach(t),fJr=r(pVe," (XLM-RoBERTa model)"),pVe.forEach(t),De.forEach(t),mJr=i(gi),T(D5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),jze=i(f),mf=n(f,"H2",{class:!0});var HWe=s(mf);G5=n(HWe,"A",{id:!0,class:!0,href:!0});var NVt=s(G5);x5e=n(NVt,"SPAN",{});var qVt=s(x5e);T(I$.$$.fragment,qVt),qVt.forEach(t),NVt.forEach(t),gJr=i(HWe),$5e=n(HWe,"SPAN",{});var jVt=s($5e);hJr=r(jVt,"FlaxAutoModelForQuestionAnswering"),jVt.forEach(t),HWe.forEach(t),Dze=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(N$.$$.fragment,hi),pJr=i(hi),gf=n(hi,"P",{});var sae=s(gf);_Jr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(sae,"A",{href:!0});var DVt=s($oe);uJr=r(DVt,"from_pretrained()"),DVt.forEach(t),bJr=r(sae," class method or the "),koe=n(sae,"A",{href:!0});var GVt=s(koe);vJr=r(GVt,"from_config()"),GVt.forEach(t),FJr=r(sae,` class
method.`),sae.forEach(t),TJr=i(hi),q$=n(hi,"P",{});var UWe=s(q$);MJr=r(UWe,"This class cannot be instantiated directly using "),k5e=n(UWe,"CODE",{});var OVt=s(k5e);EJr=r(OVt,"__init__()"),OVt.forEach(t),CJr=r(UWe," (throws an error)."),UWe.forEach(t),wJr=i(hi),Kt=n(hi,"DIV",{class:!0});var GA=s(Kt);T(j$.$$.fragment,GA),AJr=i(GA),S5e=n(GA,"P",{});var VVt=s(S5e);LJr=r(VVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VVt.forEach(t),yJr=i(GA),hf=n(GA,"P",{});var lae=s(hf);xJr=r(lae,`Note:
Loading a model from its configuration file does `),R5e=n(lae,"STRONG",{});var XVt=s(R5e);$Jr=r(XVt,"not"),XVt.forEach(t),kJr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(lae,"A",{href:!0});var zVt=s(Soe);SJr=r(zVt,"from_pretrained()"),zVt.forEach(t),RJr=r(lae," to load the model weights."),lae.forEach(t),PJr=i(GA),T(O5.$$.fragment,GA),GA.forEach(t),BJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(D$.$$.fragment,pi),IJr=i(pi),P5e=n(pi,"P",{});var QVt=s(P5e);NJr=r(QVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QVt.forEach(t),qJr=i(pi),An=n(pi,"P",{});var OA=s(An);jJr=r(OA,"The model class to instantiate is selected based on the "),B5e=n(OA,"CODE",{});var WVt=s(B5e);DJr=r(WVt,"model_type"),WVt.forEach(t),GJr=r(OA,` property of the config object (either
passed as an argument or loaded from `),I5e=n(OA,"CODE",{});var HVt=s(I5e);OJr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),VJr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(OA,"CODE",{});var UVt=s(N5e);XJr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),zJr=r(OA,":"),OA.forEach(t),QJr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);V5=n(Ge,"LI",{});var _Ve=s(V5);q5e=n(_Ve,"STRONG",{});var JVt=s(q5e);WJr=r(JVt,"albert"),JVt.forEach(t),HJr=r(_Ve," \u2014 "),Roe=n(_Ve,"A",{href:!0});var YVt=s(Roe);UJr=r(YVt,"FlaxAlbertForQuestionAnswering"),YVt.forEach(t),JJr=r(_Ve," (ALBERT model)"),_Ve.forEach(t),YJr=i(Ge),X5=n(Ge,"LI",{});var uVe=s(X5);j5e=n(uVe,"STRONG",{});var KVt=s(j5e);KJr=r(KVt,"bart"),KVt.forEach(t),ZJr=r(uVe," \u2014 "),Poe=n(uVe,"A",{href:!0});var ZVt=s(Poe);eYr=r(ZVt,"FlaxBartForQuestionAnswering"),ZVt.forEach(t),oYr=r(uVe," (BART model)"),uVe.forEach(t),rYr=i(Ge),z5=n(Ge,"LI",{});var bVe=s(z5);D5e=n(bVe,"STRONG",{});var eXt=s(D5e);tYr=r(eXt,"bert"),eXt.forEach(t),aYr=r(bVe," \u2014 "),Boe=n(bVe,"A",{href:!0});var oXt=s(Boe);nYr=r(oXt,"FlaxBertForQuestionAnswering"),oXt.forEach(t),sYr=r(bVe," (BERT model)"),bVe.forEach(t),lYr=i(Ge),Q5=n(Ge,"LI",{});var vVe=s(Q5);G5e=n(vVe,"STRONG",{});var rXt=s(G5e);iYr=r(rXt,"big_bird"),rXt.forEach(t),dYr=r(vVe," \u2014 "),Ioe=n(vVe,"A",{href:!0});var tXt=s(Ioe);cYr=r(tXt,"FlaxBigBirdForQuestionAnswering"),tXt.forEach(t),fYr=r(vVe," (BigBird model)"),vVe.forEach(t),mYr=i(Ge),W5=n(Ge,"LI",{});var FVe=s(W5);O5e=n(FVe,"STRONG",{});var aXt=s(O5e);gYr=r(aXt,"distilbert"),aXt.forEach(t),hYr=r(FVe," \u2014 "),Noe=n(FVe,"A",{href:!0});var nXt=s(Noe);pYr=r(nXt,"FlaxDistilBertForQuestionAnswering"),nXt.forEach(t),_Yr=r(FVe," (DistilBERT model)"),FVe.forEach(t),uYr=i(Ge),H5=n(Ge,"LI",{});var TVe=s(H5);V5e=n(TVe,"STRONG",{});var sXt=s(V5e);bYr=r(sXt,"electra"),sXt.forEach(t),vYr=r(TVe," \u2014 "),qoe=n(TVe,"A",{href:!0});var lXt=s(qoe);FYr=r(lXt,"FlaxElectraForQuestionAnswering"),lXt.forEach(t),TYr=r(TVe," (ELECTRA model)"),TVe.forEach(t),MYr=i(Ge),U5=n(Ge,"LI",{});var MVe=s(U5);X5e=n(MVe,"STRONG",{});var iXt=s(X5e);EYr=r(iXt,"mbart"),iXt.forEach(t),CYr=r(MVe," \u2014 "),joe=n(MVe,"A",{href:!0});var dXt=s(joe);wYr=r(dXt,"FlaxMBartForQuestionAnswering"),dXt.forEach(t),AYr=r(MVe," (mBART model)"),MVe.forEach(t),LYr=i(Ge),J5=n(Ge,"LI",{});var EVe=s(J5);z5e=n(EVe,"STRONG",{});var cXt=s(z5e);yYr=r(cXt,"roberta"),cXt.forEach(t),xYr=r(EVe," \u2014 "),Doe=n(EVe,"A",{href:!0});var fXt=s(Doe);$Yr=r(fXt,"FlaxRobertaForQuestionAnswering"),fXt.forEach(t),kYr=r(EVe," (RoBERTa model)"),EVe.forEach(t),SYr=i(Ge),Y5=n(Ge,"LI",{});var CVe=s(Y5);Q5e=n(CVe,"STRONG",{});var mXt=s(Q5e);RYr=r(mXt,"roformer"),mXt.forEach(t),PYr=r(CVe," \u2014 "),Goe=n(CVe,"A",{href:!0});var gXt=s(Goe);BYr=r(gXt,"FlaxRoFormerForQuestionAnswering"),gXt.forEach(t),IYr=r(CVe," (RoFormer model)"),CVe.forEach(t),NYr=i(Ge),K5=n(Ge,"LI",{});var wVe=s(K5);W5e=n(wVe,"STRONG",{});var hXt=s(W5e);qYr=r(hXt,"xlm-roberta"),hXt.forEach(t),jYr=r(wVe," \u2014 "),Ooe=n(wVe,"A",{href:!0});var pXt=s(Ooe);DYr=r(pXt,"FlaxXLMRobertaForQuestionAnswering"),pXt.forEach(t),GYr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),Ge.forEach(t),OYr=i(pi),T(Z5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Gze=i(f),pf=n(f,"H2",{class:!0});var JWe=s(pf);e0=n(JWe,"A",{id:!0,class:!0,href:!0});var _Xt=s(e0);H5e=n(_Xt,"SPAN",{});var uXt=s(H5e);T(G$.$$.fragment,uXt),uXt.forEach(t),_Xt.forEach(t),VYr=i(JWe),U5e=n(JWe,"SPAN",{});var bXt=s(U5e);XYr=r(bXt,"FlaxAutoModelForTokenClassification"),bXt.forEach(t),JWe.forEach(t),Oze=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(O$.$$.fragment,_i),zYr=i(_i),_f=n(_i,"P",{});var iae=s(_f);QYr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=n(iae,"A",{href:!0});var vXt=s(Voe);WYr=r(vXt,"from_pretrained()"),vXt.forEach(t),HYr=r(iae," class method or the "),Xoe=n(iae,"A",{href:!0});var FXt=s(Xoe);UYr=r(FXt,"from_config()"),FXt.forEach(t),JYr=r(iae,` class
method.`),iae.forEach(t),YYr=i(_i),V$=n(_i,"P",{});var YWe=s(V$);KYr=r(YWe,"This class cannot be instantiated directly using "),J5e=n(YWe,"CODE",{});var TXt=s(J5e);ZYr=r(TXt,"__init__()"),TXt.forEach(t),eKr=r(YWe," (throws an error)."),YWe.forEach(t),oKr=i(_i),Zt=n(_i,"DIV",{class:!0});var VA=s(Zt);T(X$.$$.fragment,VA),rKr=i(VA),Y5e=n(VA,"P",{});var MXt=s(Y5e);tKr=r(MXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MXt.forEach(t),aKr=i(VA),uf=n(VA,"P",{});var dae=s(uf);nKr=r(dae,`Note:
Loading a model from its configuration file does `),K5e=n(dae,"STRONG",{});var EXt=s(K5e);sKr=r(EXt,"not"),EXt.forEach(t),lKr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(dae,"A",{href:!0});var CXt=s(zoe);iKr=r(CXt,"from_pretrained()"),CXt.forEach(t),dKr=r(dae," to load the model weights."),dae.forEach(t),cKr=i(VA),T(o0.$$.fragment,VA),VA.forEach(t),fKr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(z$.$$.fragment,ui),mKr=i(ui),Z5e=n(ui,"P",{});var wXt=s(Z5e);gKr=r(wXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wXt.forEach(t),hKr=i(ui),Ln=n(ui,"P",{});var XA=s(Ln);pKr=r(XA,"The model class to instantiate is selected based on the "),e0e=n(XA,"CODE",{});var AXt=s(e0e);_Kr=r(AXt,"model_type"),AXt.forEach(t),uKr=r(XA,` property of the config object (either
passed as an argument or loaded from `),o0e=n(XA,"CODE",{});var LXt=s(o0e);bKr=r(LXt,"pretrained_model_name_or_path"),LXt.forEach(t),vKr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(XA,"CODE",{});var yXt=s(r0e);FKr=r(yXt,"pretrained_model_name_or_path"),yXt.forEach(t),TKr=r(XA,":"),XA.forEach(t),MKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);r0=n(To,"LI",{});var AVe=s(r0);t0e=n(AVe,"STRONG",{});var xXt=s(t0e);EKr=r(xXt,"albert"),xXt.forEach(t),CKr=r(AVe," \u2014 "),Qoe=n(AVe,"A",{href:!0});var $Xt=s(Qoe);wKr=r($Xt,"FlaxAlbertForTokenClassification"),$Xt.forEach(t),AKr=r(AVe," (ALBERT model)"),AVe.forEach(t),LKr=i(To),t0=n(To,"LI",{});var LVe=s(t0);a0e=n(LVe,"STRONG",{});var kXt=s(a0e);yKr=r(kXt,"bert"),kXt.forEach(t),xKr=r(LVe," \u2014 "),Woe=n(LVe,"A",{href:!0});var SXt=s(Woe);$Kr=r(SXt,"FlaxBertForTokenClassification"),SXt.forEach(t),kKr=r(LVe," (BERT model)"),LVe.forEach(t),SKr=i(To),a0=n(To,"LI",{});var yVe=s(a0);n0e=n(yVe,"STRONG",{});var RXt=s(n0e);RKr=r(RXt,"big_bird"),RXt.forEach(t),PKr=r(yVe," \u2014 "),Hoe=n(yVe,"A",{href:!0});var PXt=s(Hoe);BKr=r(PXt,"FlaxBigBirdForTokenClassification"),PXt.forEach(t),IKr=r(yVe," (BigBird model)"),yVe.forEach(t),NKr=i(To),n0=n(To,"LI",{});var xVe=s(n0);s0e=n(xVe,"STRONG",{});var BXt=s(s0e);qKr=r(BXt,"distilbert"),BXt.forEach(t),jKr=r(xVe," \u2014 "),Uoe=n(xVe,"A",{href:!0});var IXt=s(Uoe);DKr=r(IXt,"FlaxDistilBertForTokenClassification"),IXt.forEach(t),GKr=r(xVe," (DistilBERT model)"),xVe.forEach(t),OKr=i(To),s0=n(To,"LI",{});var $Ve=s(s0);l0e=n($Ve,"STRONG",{});var NXt=s(l0e);VKr=r(NXt,"electra"),NXt.forEach(t),XKr=r($Ve," \u2014 "),Joe=n($Ve,"A",{href:!0});var qXt=s(Joe);zKr=r(qXt,"FlaxElectraForTokenClassification"),qXt.forEach(t),QKr=r($Ve," (ELECTRA model)"),$Ve.forEach(t),WKr=i(To),l0=n(To,"LI",{});var kVe=s(l0);i0e=n(kVe,"STRONG",{});var jXt=s(i0e);HKr=r(jXt,"roberta"),jXt.forEach(t),UKr=r(kVe," \u2014 "),Yoe=n(kVe,"A",{href:!0});var DXt=s(Yoe);JKr=r(DXt,"FlaxRobertaForTokenClassification"),DXt.forEach(t),YKr=r(kVe," (RoBERTa model)"),kVe.forEach(t),KKr=i(To),i0=n(To,"LI",{});var SVe=s(i0);d0e=n(SVe,"STRONG",{});var GXt=s(d0e);ZKr=r(GXt,"roformer"),GXt.forEach(t),eZr=r(SVe," \u2014 "),Koe=n(SVe,"A",{href:!0});var OXt=s(Koe);oZr=r(OXt,"FlaxRoFormerForTokenClassification"),OXt.forEach(t),rZr=r(SVe," (RoFormer model)"),SVe.forEach(t),tZr=i(To),d0=n(To,"LI",{});var RVe=s(d0);c0e=n(RVe,"STRONG",{});var VXt=s(c0e);aZr=r(VXt,"xlm-roberta"),VXt.forEach(t),nZr=r(RVe," \u2014 "),Zoe=n(RVe,"A",{href:!0});var XXt=s(Zoe);sZr=r(XXt,"FlaxXLMRobertaForTokenClassification"),XXt.forEach(t),lZr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),To.forEach(t),iZr=i(ui),T(c0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Vze=i(f),bf=n(f,"H2",{class:!0});var KWe=s(bf);f0=n(KWe,"A",{id:!0,class:!0,href:!0});var zXt=s(f0);f0e=n(zXt,"SPAN",{});var QXt=s(f0e);T(Q$.$$.fragment,QXt),QXt.forEach(t),zXt.forEach(t),dZr=i(KWe),m0e=n(KWe,"SPAN",{});var WXt=s(m0e);cZr=r(WXt,"FlaxAutoModelForMultipleChoice"),WXt.forEach(t),KWe.forEach(t),Xze=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(W$.$$.fragment,bi),fZr=i(bi),vf=n(bi,"P",{});var cae=s(vf);mZr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=n(cae,"A",{href:!0});var HXt=s(ere);gZr=r(HXt,"from_pretrained()"),HXt.forEach(t),hZr=r(cae," class method or the "),ore=n(cae,"A",{href:!0});var UXt=s(ore);pZr=r(UXt,"from_config()"),UXt.forEach(t),_Zr=r(cae,` class
method.`),cae.forEach(t),uZr=i(bi),H$=n(bi,"P",{});var ZWe=s(H$);bZr=r(ZWe,"This class cannot be instantiated directly using "),g0e=n(ZWe,"CODE",{});var JXt=s(g0e);vZr=r(JXt,"__init__()"),JXt.forEach(t),FZr=r(ZWe," (throws an error)."),ZWe.forEach(t),TZr=i(bi),ea=n(bi,"DIV",{class:!0});var zA=s(ea);T(U$.$$.fragment,zA),MZr=i(zA),h0e=n(zA,"P",{});var YXt=s(h0e);EZr=r(YXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YXt.forEach(t),CZr=i(zA),Ff=n(zA,"P",{});var fae=s(Ff);wZr=r(fae,`Note:
Loading a model from its configuration file does `),p0e=n(fae,"STRONG",{});var KXt=s(p0e);AZr=r(KXt,"not"),KXt.forEach(t),LZr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(fae,"A",{href:!0});var ZXt=s(rre);yZr=r(ZXt,"from_pretrained()"),ZXt.forEach(t),xZr=r(fae," to load the model weights."),fae.forEach(t),$Zr=i(zA),T(m0.$$.fragment,zA),zA.forEach(t),kZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(J$.$$.fragment,vi),SZr=i(vi),_0e=n(vi,"P",{});var ezt=s(_0e);RZr=r(ezt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ezt.forEach(t),PZr=i(vi),yn=n(vi,"P",{});var QA=s(yn);BZr=r(QA,"The model class to instantiate is selected based on the "),u0e=n(QA,"CODE",{});var ozt=s(u0e);IZr=r(ozt,"model_type"),ozt.forEach(t),NZr=r(QA,` property of the config object (either
passed as an argument or loaded from `),b0e=n(QA,"CODE",{});var rzt=s(b0e);qZr=r(rzt,"pretrained_model_name_or_path"),rzt.forEach(t),jZr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(QA,"CODE",{});var tzt=s(v0e);DZr=r(tzt,"pretrained_model_name_or_path"),tzt.forEach(t),GZr=r(QA,":"),QA.forEach(t),OZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);g0=n(Mo,"LI",{});var PVe=s(g0);F0e=n(PVe,"STRONG",{});var azt=s(F0e);VZr=r(azt,"albert"),azt.forEach(t),XZr=r(PVe," \u2014 "),tre=n(PVe,"A",{href:!0});var nzt=s(tre);zZr=r(nzt,"FlaxAlbertForMultipleChoice"),nzt.forEach(t),QZr=r(PVe," (ALBERT model)"),PVe.forEach(t),WZr=i(Mo),h0=n(Mo,"LI",{});var BVe=s(h0);T0e=n(BVe,"STRONG",{});var szt=s(T0e);HZr=r(szt,"bert"),szt.forEach(t),UZr=r(BVe," \u2014 "),are=n(BVe,"A",{href:!0});var lzt=s(are);JZr=r(lzt,"FlaxBertForMultipleChoice"),lzt.forEach(t),YZr=r(BVe," (BERT model)"),BVe.forEach(t),KZr=i(Mo),p0=n(Mo,"LI",{});var IVe=s(p0);M0e=n(IVe,"STRONG",{});var izt=s(M0e);ZZr=r(izt,"big_bird"),izt.forEach(t),eet=r(IVe," \u2014 "),nre=n(IVe,"A",{href:!0});var dzt=s(nre);oet=r(dzt,"FlaxBigBirdForMultipleChoice"),dzt.forEach(t),ret=r(IVe," (BigBird model)"),IVe.forEach(t),tet=i(Mo),_0=n(Mo,"LI",{});var NVe=s(_0);E0e=n(NVe,"STRONG",{});var czt=s(E0e);aet=r(czt,"distilbert"),czt.forEach(t),net=r(NVe," \u2014 "),sre=n(NVe,"A",{href:!0});var fzt=s(sre);set=r(fzt,"FlaxDistilBertForMultipleChoice"),fzt.forEach(t),iet=r(NVe," (DistilBERT model)"),NVe.forEach(t),det=i(Mo),u0=n(Mo,"LI",{});var qVe=s(u0);C0e=n(qVe,"STRONG",{});var mzt=s(C0e);cet=r(mzt,"electra"),mzt.forEach(t),fet=r(qVe," \u2014 "),lre=n(qVe,"A",{href:!0});var gzt=s(lre);met=r(gzt,"FlaxElectraForMultipleChoice"),gzt.forEach(t),get=r(qVe," (ELECTRA model)"),qVe.forEach(t),het=i(Mo),b0=n(Mo,"LI",{});var jVe=s(b0);w0e=n(jVe,"STRONG",{});var hzt=s(w0e);pet=r(hzt,"roberta"),hzt.forEach(t),_et=r(jVe," \u2014 "),ire=n(jVe,"A",{href:!0});var pzt=s(ire);uet=r(pzt,"FlaxRobertaForMultipleChoice"),pzt.forEach(t),bet=r(jVe," (RoBERTa model)"),jVe.forEach(t),vet=i(Mo),v0=n(Mo,"LI",{});var DVe=s(v0);A0e=n(DVe,"STRONG",{});var _zt=s(A0e);Fet=r(_zt,"roformer"),_zt.forEach(t),Tet=r(DVe," \u2014 "),dre=n(DVe,"A",{href:!0});var uzt=s(dre);Met=r(uzt,"FlaxRoFormerForMultipleChoice"),uzt.forEach(t),Eet=r(DVe," (RoFormer model)"),DVe.forEach(t),Cet=i(Mo),F0=n(Mo,"LI",{});var GVe=s(F0);L0e=n(GVe,"STRONG",{});var bzt=s(L0e);wet=r(bzt,"xlm-roberta"),bzt.forEach(t),Aet=r(GVe," \u2014 "),cre=n(GVe,"A",{href:!0});var vzt=s(cre);Let=r(vzt,"FlaxXLMRobertaForMultipleChoice"),vzt.forEach(t),yet=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),Mo.forEach(t),xet=i(vi),T(T0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),zze=i(f),Tf=n(f,"H2",{class:!0});var eHe=s(Tf);M0=n(eHe,"A",{id:!0,class:!0,href:!0});var Fzt=s(M0);y0e=n(Fzt,"SPAN",{});var Tzt=s(y0e);T(Y$.$$.fragment,Tzt),Tzt.forEach(t),Fzt.forEach(t),$et=i(eHe),x0e=n(eHe,"SPAN",{});var Mzt=s(x0e);ket=r(Mzt,"FlaxAutoModelForNextSentencePrediction"),Mzt.forEach(t),eHe.forEach(t),Qze=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(K$.$$.fragment,Fi),Set=i(Fi),Mf=n(Fi,"P",{});var mae=s(Mf);Ret=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fre=n(mae,"A",{href:!0});var Ezt=s(fre);Pet=r(Ezt,"from_pretrained()"),Ezt.forEach(t),Bet=r(mae," class method or the "),mre=n(mae,"A",{href:!0});var Czt=s(mre);Iet=r(Czt,"from_config()"),Czt.forEach(t),Net=r(mae,` class
method.`),mae.forEach(t),qet=i(Fi),Z$=n(Fi,"P",{});var oHe=s(Z$);jet=r(oHe,"This class cannot be instantiated directly using "),$0e=n(oHe,"CODE",{});var wzt=s($0e);Det=r(wzt,"__init__()"),wzt.forEach(t),Get=r(oHe," (throws an error)."),oHe.forEach(t),Oet=i(Fi),oa=n(Fi,"DIV",{class:!0});var WA=s(oa);T(ek.$$.fragment,WA),Vet=i(WA),k0e=n(WA,"P",{});var Azt=s(k0e);Xet=r(Azt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Azt.forEach(t),zet=i(WA),Ef=n(WA,"P",{});var gae=s(Ef);Qet=r(gae,`Note:
Loading a model from its configuration file does `),S0e=n(gae,"STRONG",{});var Lzt=s(S0e);Wet=r(Lzt,"not"),Lzt.forEach(t),Het=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(gae,"A",{href:!0});var yzt=s(gre);Uet=r(yzt,"from_pretrained()"),yzt.forEach(t),Jet=r(gae," to load the model weights."),gae.forEach(t),Yet=i(WA),T(E0.$$.fragment,WA),WA.forEach(t),Ket=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ok.$$.fragment,Ti),Zet=i(Ti),R0e=n(Ti,"P",{});var xzt=s(R0e);eot=r(xzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xzt.forEach(t),oot=i(Ti),xn=n(Ti,"P",{});var HA=s(xn);rot=r(HA,"The model class to instantiate is selected based on the "),P0e=n(HA,"CODE",{});var $zt=s(P0e);tot=r($zt,"model_type"),$zt.forEach(t),aot=r(HA,` property of the config object (either
passed as an argument or loaded from `),B0e=n(HA,"CODE",{});var kzt=s(B0e);not=r(kzt,"pretrained_model_name_or_path"),kzt.forEach(t),sot=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(HA,"CODE",{});var Szt=s(I0e);lot=r(Szt,"pretrained_model_name_or_path"),Szt.forEach(t),iot=r(HA,":"),HA.forEach(t),dot=i(Ti),N0e=n(Ti,"UL",{});var Rzt=s(N0e);C0=n(Rzt,"LI",{});var OVe=s(C0);q0e=n(OVe,"STRONG",{});var Pzt=s(q0e);cot=r(Pzt,"bert"),Pzt.forEach(t),fot=r(OVe," \u2014 "),hre=n(OVe,"A",{href:!0});var Bzt=s(hre);mot=r(Bzt,"FlaxBertForNextSentencePrediction"),Bzt.forEach(t),got=r(OVe," (BERT model)"),OVe.forEach(t),Rzt.forEach(t),hot=i(Ti),T(w0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Wze=i(f),Cf=n(f,"H2",{class:!0});var rHe=s(Cf);A0=n(rHe,"A",{id:!0,class:!0,href:!0});var Izt=s(A0);j0e=n(Izt,"SPAN",{});var Nzt=s(j0e);T(rk.$$.fragment,Nzt),Nzt.forEach(t),Izt.forEach(t),pot=i(rHe),D0e=n(rHe,"SPAN",{});var qzt=s(D0e);_ot=r(qzt,"FlaxAutoModelForImageClassification"),qzt.forEach(t),rHe.forEach(t),Hze=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(tk.$$.fragment,Mi),uot=i(Mi),wf=n(Mi,"P",{});var hae=s(wf);bot=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pre=n(hae,"A",{href:!0});var jzt=s(pre);vot=r(jzt,"from_pretrained()"),jzt.forEach(t),Fot=r(hae," class method or the "),_re=n(hae,"A",{href:!0});var Dzt=s(_re);Tot=r(Dzt,"from_config()"),Dzt.forEach(t),Mot=r(hae,` class
method.`),hae.forEach(t),Eot=i(Mi),ak=n(Mi,"P",{});var tHe=s(ak);Cot=r(tHe,"This class cannot be instantiated directly using "),G0e=n(tHe,"CODE",{});var Gzt=s(G0e);wot=r(Gzt,"__init__()"),Gzt.forEach(t),Aot=r(tHe," (throws an error)."),tHe.forEach(t),Lot=i(Mi),ra=n(Mi,"DIV",{class:!0});var UA=s(ra);T(nk.$$.fragment,UA),yot=i(UA),O0e=n(UA,"P",{});var Ozt=s(O0e);xot=r(Ozt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ozt.forEach(t),$ot=i(UA),Af=n(UA,"P",{});var pae=s(Af);kot=r(pae,`Note:
Loading a model from its configuration file does `),V0e=n(pae,"STRONG",{});var Vzt=s(V0e);Sot=r(Vzt,"not"),Vzt.forEach(t),Rot=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(pae,"A",{href:!0});var Xzt=s(ure);Pot=r(Xzt,"from_pretrained()"),Xzt.forEach(t),Bot=r(pae," to load the model weights."),pae.forEach(t),Iot=i(UA),T(L0.$$.fragment,UA),UA.forEach(t),Not=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(sk.$$.fragment,Ei),qot=i(Ei),X0e=n(Ei,"P",{});var zzt=s(X0e);jot=r(zzt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zzt.forEach(t),Dot=i(Ei),$n=n(Ei,"P",{});var JA=s($n);Got=r(JA,"The model class to instantiate is selected based on the "),z0e=n(JA,"CODE",{});var Qzt=s(z0e);Oot=r(Qzt,"model_type"),Qzt.forEach(t),Vot=r(JA,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(JA,"CODE",{});var Wzt=s(Q0e);Xot=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),zot=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(JA,"CODE",{});var Hzt=s(W0e);Qot=r(Hzt,"pretrained_model_name_or_path"),Hzt.forEach(t),Wot=r(JA,":"),JA.forEach(t),Hot=i(Ei),lk=n(Ei,"UL",{});var aHe=s(lk);y0=n(aHe,"LI",{});var VVe=s(y0);H0e=n(VVe,"STRONG",{});var Uzt=s(H0e);Uot=r(Uzt,"beit"),Uzt.forEach(t),Jot=r(VVe," \u2014 "),bre=n(VVe,"A",{href:!0});var Jzt=s(bre);Yot=r(Jzt,"FlaxBeitForImageClassification"),Jzt.forEach(t),Kot=r(VVe," (BEiT model)"),VVe.forEach(t),Zot=i(aHe),x0=n(aHe,"LI",{});var XVe=s(x0);U0e=n(XVe,"STRONG",{});var Yzt=s(U0e);ert=r(Yzt,"vit"),Yzt.forEach(t),ort=r(XVe," \u2014 "),vre=n(XVe,"A",{href:!0});var Kzt=s(vre);rrt=r(Kzt,"FlaxViTForImageClassification"),Kzt.forEach(t),trt=r(XVe," (ViT model)"),XVe.forEach(t),aHe.forEach(t),art=i(Ei),T($0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),Uze=i(f),Lf=n(f,"H2",{class:!0});var nHe=s(Lf);k0=n(nHe,"A",{id:!0,class:!0,href:!0});var Zzt=s(k0);J0e=n(Zzt,"SPAN",{});var eQt=s(J0e);T(ik.$$.fragment,eQt),eQt.forEach(t),Zzt.forEach(t),nrt=i(nHe),Y0e=n(nHe,"SPAN",{});var oQt=s(Y0e);srt=r(oQt,"FlaxAutoModelForVision2Seq"),oQt.forEach(t),nHe.forEach(t),Jze=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(dk.$$.fragment,Ci),lrt=i(Ci),yf=n(Ci,"P",{});var _ae=s(yf);irt=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=n(_ae,"A",{href:!0});var rQt=s(Fre);drt=r(rQt,"from_pretrained()"),rQt.forEach(t),crt=r(_ae," class method or the "),Tre=n(_ae,"A",{href:!0});var tQt=s(Tre);frt=r(tQt,"from_config()"),tQt.forEach(t),mrt=r(_ae,` class
method.`),_ae.forEach(t),grt=i(Ci),ck=n(Ci,"P",{});var sHe=s(ck);hrt=r(sHe,"This class cannot be instantiated directly using "),K0e=n(sHe,"CODE",{});var aQt=s(K0e);prt=r(aQt,"__init__()"),aQt.forEach(t),_rt=r(sHe," (throws an error)."),sHe.forEach(t),urt=i(Ci),ta=n(Ci,"DIV",{class:!0});var YA=s(ta);T(fk.$$.fragment,YA),brt=i(YA),Z0e=n(YA,"P",{});var nQt=s(Z0e);vrt=r(nQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nQt.forEach(t),Frt=i(YA),xf=n(YA,"P",{});var uae=s(xf);Trt=r(uae,`Note:
Loading a model from its configuration file does `),ewe=n(uae,"STRONG",{});var sQt=s(ewe);Mrt=r(sQt,"not"),sQt.forEach(t),Ert=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(uae,"A",{href:!0});var lQt=s(Mre);Crt=r(lQt,"from_pretrained()"),lQt.forEach(t),wrt=r(uae," to load the model weights."),uae.forEach(t),Art=i(YA),T(S0.$$.fragment,YA),YA.forEach(t),Lrt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(mk.$$.fragment,wi),yrt=i(wi),owe=n(wi,"P",{});var iQt=s(owe);xrt=r(iQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iQt.forEach(t),$rt=i(wi),kn=n(wi,"P",{});var KA=s(kn);krt=r(KA,"The model class to instantiate is selected based on the "),rwe=n(KA,"CODE",{});var dQt=s(rwe);Srt=r(dQt,"model_type"),dQt.forEach(t),Rrt=r(KA,` property of the config object (either
passed as an argument or loaded from `),twe=n(KA,"CODE",{});var cQt=s(twe);Prt=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),Brt=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=n(KA,"CODE",{});var fQt=s(awe);Irt=r(fQt,"pretrained_model_name_or_path"),fQt.forEach(t),Nrt=r(KA,":"),KA.forEach(t),qrt=i(wi),nwe=n(wi,"UL",{});var mQt=s(nwe);R0=n(mQt,"LI",{});var zVe=s(R0);swe=n(zVe,"STRONG",{});var gQt=s(swe);jrt=r(gQt,"vision-encoder-decoder"),gQt.forEach(t),Drt=r(zVe," \u2014 "),Ere=n(zVe,"A",{href:!0});var hQt=s(Ere);Grt=r(hQt,"FlaxVisionEncoderDecoderModel"),hQt.forEach(t),Ort=r(zVe," (Vision Encoder decoder model)"),zVe.forEach(t),mQt.forEach(t),Vrt=i(wi),T(P0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(FHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(jS,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(DS,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),c(GS,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),c(OS,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),c(VS,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),c(XS,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(zS,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),c(QS,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(WS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(HS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(US,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),c(JS,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),c(YS,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),c(KS,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),c(ZS,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig"),c(eR,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),c(oR,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),c(rR,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),c(tR,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),c(aR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(nR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(sR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(lR,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),c(iR,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(dR,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(cR,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),c(fR,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),c(mR,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),c(gR,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),c(hR,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),c(pR,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),c(_R,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(uR,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),c(bR,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),c(vR,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),c(FR,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),c(TR,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),c(MR,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),c(ER,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),c(CR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(wR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(AR,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),c(LR,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig"),c(yR,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),c(xR,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),c($R,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(kR,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),c(SR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(RR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(PR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(BR,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),c(IR,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),c(NR,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),c(qR,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),c(jR,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),c(DR,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),c(GR,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),c(OR,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),c(VR,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(XR,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),c(zR,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),c(QR,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(WR,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(HR,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(UR,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),c(JR,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),c(YR,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig"),c(KR,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig"),c(ZR,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(eP,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(oP,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),c(rP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),c(tP,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),c(aP,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),c(nP,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(sP,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(lP,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(iP,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),c(dP,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),c(cP,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),c(fP,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),c(mP,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),c(gP,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),c(hP,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),c(pP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),c(_P,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),c(uP,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),c(bP,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),c(vP,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),c(FP,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(TP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(MP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(EP,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),c(CP,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(wP,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),c(AP,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),c(LP,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),c(yP,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(xP,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c($P,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),c(kP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(SP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(RP,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),c(PP,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),c(BP,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(IP,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(NP,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(qP,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),c(jP,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(DP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(GP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(OP,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),c(VP,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),c(XP,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),c(zP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(QP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(WP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(HP,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),c(UP,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),c(JP,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(YP,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(KP,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZP,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),c(oB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),c(rB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),c(tB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(aB,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(nB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(iB,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(dB,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(cB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(fB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(mB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(pB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(_B,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(uB,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(bB,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(vB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),c(FB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),c(MB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(EB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(CB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(wB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(AB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(LB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),c(xB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),c($B,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(kB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),c(PB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(IB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(NB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(qB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(DB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(GB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),c(OB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(VB,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(XB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),c(zB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(QB,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),c(HB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(UB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZB,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(eI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(tI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aI,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),c(nI,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(cI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(mI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(gI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(hI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(pI,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_I,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(uI,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),c(bI,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),c(vI,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),c(FI,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(TI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(MI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(EI,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),c(CI,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wI,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AI,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(LI,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),c(yI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),c(xI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($I,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(RI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BI,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(II,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qI,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(DI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(GI,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizer"),c(OI,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(VI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(XI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(zI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(QI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(WI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(HI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(UI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KI,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ZI,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),c(eN,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),c(oN,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(rN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(tN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(aN,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),c(nN,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),c(sN,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),c(lN,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),c(iN,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(dN,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),c(cN,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(fN,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(mN,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(gN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pN,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_N,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(uN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(bN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(vN,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),c(FN,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(TN,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(MN,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(EN,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(CN,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(wN,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),c(AN,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),c(LN,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(yN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(xN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c($N,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(kN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(SN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BN,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IN,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NN,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),c(qN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ON,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VN,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XN,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(QN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(WN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lq,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(cq,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(yq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(xq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c($q,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(kq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Sq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Rq,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Pq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Bq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Iq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Nq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(qq,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),c(jq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Dq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),c(Oq,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Vq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Qq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),c(Jq,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),c(Yq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),c(Kq,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(Zq,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ej,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),c(oj,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(rj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(tj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(aj,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),c(nj,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),c(sj,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),c(lj,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),c(ij,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel"),c(dj,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),c(cj,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),c(fj,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),c(mj,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),c(gj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(_j,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),c(uj,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bj,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vj,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),c(Fj,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),c(Tj,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),c(Mj,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Ej,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),c(Cj,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),c(wj,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),c(Aj,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),c(Lj,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),c(yj,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),c(xj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),c($j,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),c(kj,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),c(Sj,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),c(Rj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Pj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Bj,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),c(Ij,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel"),c(Nj,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),c(qj,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),c(jj,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Dj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Gj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Oj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Vj,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),c(Xj,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),c(zj,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),c(Qj,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),c(Wj,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),c(Hj,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),c(Uj,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(Jj,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),c(Yj,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Kj,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),c(Zj,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),c(eD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rD,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel"),c(tD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),c(aD,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),c(nD,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel"),c(sD,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel"),c(lD,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),c(iD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(dD,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),c(cD,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),c(fD,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),c(mD,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),c(gD,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hD,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pD,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_D,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),c(uD,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),c(bD,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),c(vD,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),c(FD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(TD,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),c(MD,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),c(ED,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),c(CD,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),c(wD,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),c(AD,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(LD,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),c(yD,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(xD,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),c($D,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),c(kD,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),c(SD,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(RD,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(PD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),c(BD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(ID,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),c(ND,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),c(qD,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(jD,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),c(DD,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),c(GD,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(OD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(VD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(XD,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),c(zD,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),c(QD,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),c(WD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(HD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(UD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(JD,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),c(YD,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),c(KD,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(ZD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),c(nG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sG,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iG,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cG,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fG,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mG,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),c(hG,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pG,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),c(_G,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uG,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(vG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FG,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(MG,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(EG,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(CG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(wG,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(AG,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LG,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(xG,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($G,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(kG,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(SG,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(RG,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(IG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(NG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(qG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jG,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(DG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(GG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(OG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(VG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForCausalLM"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(WG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),c(YG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),c(KG,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ZG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tO,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nO,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(sO,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(iO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dO,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(mO,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(gO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),c(hO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),c(pO,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(_O,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM"),c(uO,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bO,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),c(vO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(FO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(TO,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(MO,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(EO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(CO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(AO,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(LO,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yO,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xO,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($O,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(RO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(PO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(BO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForMaskedLM"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(IO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(DO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(VO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XO,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(QO,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(WO,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(HO,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(JO,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(YO,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(KO,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rV,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),c(tV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(dV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(cV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(fV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(gV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(_V,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(FV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(TV,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(MV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c($V,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),c(BV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForSequenceClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(VV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForMultipleChoice"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(OX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(QX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(az,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForNextSentencePrediction"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(wz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Az,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForTokenClassification"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c($z,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),c(jz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(zz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.AutoModelForQuestionAnswering"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForTableQuestionAnswering"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(sW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForImageClassification"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(cW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),c(hW,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pW,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_W,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vW,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),c(TW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(EW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AW,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LW,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yW,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xW,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($W,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),c(kW,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),c(SW,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForVision2Seq"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(RW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForAudioClassification"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.AutoModelForAudioFrameClassification"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForCTC"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(lH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),c(mH,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),c(gH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),c(hH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_H,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(FH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(CH,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.AutoModelForAudioXVector"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(wH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($H,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(SH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.AutoModelForMaskedImageModeling"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(RH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(NH,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(qH,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.AutoModelForObjectDetection"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(jH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),c(VH,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e8,"id","transformers.AutoModelForImageSegmentation"),c(e8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e8,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(XH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForSemanticSegmentation"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(HH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(KH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(ZH,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eU,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForInstanceSegmentation"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(rU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.TFAutoModel"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(sU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),c(cU,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),c(fU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),c(mU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),c(pU,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),c(_U,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),c(uU,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),c(bU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),c(vU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(FU,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),c(TU,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(MU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(EU,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(CU,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),c(wU,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(AU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),c(LU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yU,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),c(xU,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),c($U,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),c(kU,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(SU,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),c(RU,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),c(PU,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),c(BU,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),c(IU,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),c(NU,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qU,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),c(jU,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),c(DU,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(GU,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),c(OU,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VU,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel"),c(XU,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),c(zU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),c(QU,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),c(WU,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(HU,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),c(UU,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),c(JU,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),c(YU,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(KU,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),c(ZU,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(eJ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(oJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),c(rJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForPreTraining"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(aJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_J,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(FJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(AJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(LJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForCausalLM"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c($J,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(PJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(BJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NJ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jJ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(DJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(GJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(OJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(VJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForImageClassification"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JJ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YJ,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(KJ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForMaskedLM"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(eY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($Y,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),c(SY,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.TFAutoModelForSequenceClassification"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(IY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForMultipleChoice"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(fK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($K,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(kK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(BK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForTokenClassification"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForQuestionAnswering"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($Z,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForVision2Seq"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModel"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),c(zZ,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),c(QZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),c(WZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JZ,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ree,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(tee,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),c(aee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),c(see,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),c(lee,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),c(fee,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(mee,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),c(gee,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForCausalLM"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(_ee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Fee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Tee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Mee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Eee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Cee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Aee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Lee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(yee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForPreTraining"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(xee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(See,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ree,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Bee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Iee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Nee,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Gee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Oee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vee,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Xee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.FlaxAutoModelForMaskedLM"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(zee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Uee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Yee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Kee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(roe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(toe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(aoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ioe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(doe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(foe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(goe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(uoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Toe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Moe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Eoe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Coe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c($oe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.FlaxAutoModelForTokenClassification"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Voe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qoe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Woe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Joe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Koe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(ere,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ore,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(are,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ire,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(fre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForImageClassification"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(pre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vre,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForVision2Seq"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Fre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,ZA),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Rn),e(Rn,eL),e(Qe,Pn),e(Qe,Bn),e(Bn,oL),e(Qe,$i),e(Qe,In),e(In,rL),e(Qe,ki),b(f,Bf,u),M(ka,f,u),b(f,We,u),b(f,Ae,u),e(Ae,RS),e(Ae,Si),e(Si,PS),e(Ae,BS),b(f,Co,u),b(f,Sa,u),e(Sa,IS),e(Sa,If),e(If,NS),e(Sa,lHe),b(f,QVe,u),b(f,Ri,u),e(Ri,Nf),e(Nf,bae),M(tL,bae,null),e(Ri,iHe),e(Ri,vae),e(vae,dHe),b(f,WVe,u),b(f,Nn,u),e(Nn,cHe),e(Nn,Fae),e(Fae,fHe),e(Nn,mHe),e(Nn,Tae),e(Tae,gHe),e(Nn,hHe),b(f,HVe,u),M(aL,f,u),b(f,UVe,u),b(f,qS,u),e(qS,pHe),b(f,JVe,u),M(qf,f,u),b(f,YVe,u),b(f,Pi,u),e(Pi,jf),e(jf,Mae),M(nL,Mae,null),e(Pi,_He),e(Pi,Eae),e(Eae,uHe),b(f,KVe,u),b(f,wo,u),M(sL,wo,null),e(wo,bHe),e(wo,lL),e(lL,vHe),e(lL,jS),e(jS,FHe),e(lL,THe),e(wo,MHe),e(wo,iL),e(iL,EHe),e(iL,Cae),e(Cae,CHe),e(iL,wHe),e(wo,AHe),e(wo,Ar),M(dL,Ar,null),e(Ar,LHe),e(Ar,wae),e(wae,yHe),e(Ar,xHe),e(Ar,Bi),e(Bi,$He),e(Bi,Aae),e(Aae,kHe),e(Bi,SHe),e(Bi,Lae),e(Lae,RHe),e(Bi,PHe),e(Ar,BHe),e(Ar,A),e(A,Df),e(Df,yae),e(yae,IHe),e(Df,NHe),e(Df,DS),e(DS,qHe),e(Df,jHe),e(A,DHe),e(A,Gf),e(Gf,xae),e(xae,GHe),e(Gf,OHe),e(Gf,GS),e(GS,VHe),e(Gf,XHe),e(A,zHe),e(A,Of),e(Of,$ae),e($ae,QHe),e(Of,WHe),e(Of,OS),e(OS,HHe),e(Of,UHe),e(A,JHe),e(A,Vf),e(Vf,kae),e(kae,YHe),e(Vf,KHe),e(Vf,VS),e(VS,ZHe),e(Vf,eUe),e(A,oUe),e(A,Xf),e(Xf,Sae),e(Sae,rUe),e(Xf,tUe),e(Xf,XS),e(XS,aUe),e(Xf,nUe),e(A,sUe),e(A,zf),e(zf,Rae),e(Rae,lUe),e(zf,iUe),e(zf,zS),e(zS,dUe),e(zf,cUe),e(A,fUe),e(A,Qf),e(Qf,Pae),e(Pae,mUe),e(Qf,gUe),e(Qf,QS),e(QS,hUe),e(Qf,pUe),e(A,_Ue),e(A,Wf),e(Wf,Bae),e(Bae,uUe),e(Wf,bUe),e(Wf,WS),e(WS,vUe),e(Wf,FUe),e(A,TUe),e(A,Hf),e(Hf,Iae),e(Iae,MUe),e(Hf,EUe),e(Hf,HS),e(HS,CUe),e(Hf,wUe),e(A,AUe),e(A,Uf),e(Uf,Nae),e(Nae,LUe),e(Uf,yUe),e(Uf,US),e(US,xUe),e(Uf,$Ue),e(A,kUe),e(A,Jf),e(Jf,qae),e(qae,SUe),e(Jf,RUe),e(Jf,JS),e(JS,PUe),e(Jf,BUe),e(A,IUe),e(A,Yf),e(Yf,jae),e(jae,NUe),e(Yf,qUe),e(Yf,YS),e(YS,jUe),e(Yf,DUe),e(A,GUe),e(A,Kf),e(Kf,Dae),e(Dae,OUe),e(Kf,VUe),e(Kf,KS),e(KS,XUe),e(Kf,zUe),e(A,QUe),e(A,Zf),e(Zf,Gae),e(Gae,WUe),e(Zf,HUe),e(Zf,ZS),e(ZS,UUe),e(Zf,JUe),e(A,YUe),e(A,em),e(em,Oae),e(Oae,KUe),e(em,ZUe),e(em,eR),e(eR,eJe),e(em,oJe),e(A,rJe),e(A,om),e(om,Vae),e(Vae,tJe),e(om,aJe),e(om,oR),e(oR,nJe),e(om,sJe),e(A,lJe),e(A,rm),e(rm,Xae),e(Xae,iJe),e(rm,dJe),e(rm,rR),e(rR,cJe),e(rm,fJe),e(A,mJe),e(A,tm),e(tm,zae),e(zae,gJe),e(tm,hJe),e(tm,tR),e(tR,pJe),e(tm,_Je),e(A,uJe),e(A,am),e(am,Qae),e(Qae,bJe),e(am,vJe),e(am,aR),e(aR,FJe),e(am,TJe),e(A,MJe),e(A,nm),e(nm,Wae),e(Wae,EJe),e(nm,CJe),e(nm,nR),e(nR,wJe),e(nm,AJe),e(A,LJe),e(A,sm),e(sm,Hae),e(Hae,yJe),e(sm,xJe),e(sm,sR),e(sR,$Je),e(sm,kJe),e(A,SJe),e(A,lm),e(lm,Uae),e(Uae,RJe),e(lm,PJe),e(lm,lR),e(lR,BJe),e(lm,IJe),e(A,NJe),e(A,im),e(im,Jae),e(Jae,qJe),e(im,jJe),e(im,iR),e(iR,DJe),e(im,GJe),e(A,OJe),e(A,dm),e(dm,Yae),e(Yae,VJe),e(dm,XJe),e(dm,dR),e(dR,zJe),e(dm,QJe),e(A,WJe),e(A,cm),e(cm,Kae),e(Kae,HJe),e(cm,UJe),e(cm,cR),e(cR,JJe),e(cm,YJe),e(A,KJe),e(A,fm),e(fm,Zae),e(Zae,ZJe),e(fm,eYe),e(fm,fR),e(fR,oYe),e(fm,rYe),e(A,tYe),e(A,mm),e(mm,ene),e(ene,aYe),e(mm,nYe),e(mm,mR),e(mR,sYe),e(mm,lYe),e(A,iYe),e(A,gm),e(gm,one),e(one,dYe),e(gm,cYe),e(gm,gR),e(gR,fYe),e(gm,mYe),e(A,gYe),e(A,hm),e(hm,rne),e(rne,hYe),e(hm,pYe),e(hm,hR),e(hR,_Ye),e(hm,uYe),e(A,bYe),e(A,pm),e(pm,tne),e(tne,vYe),e(pm,FYe),e(pm,pR),e(pR,TYe),e(pm,MYe),e(A,EYe),e(A,_m),e(_m,ane),e(ane,CYe),e(_m,wYe),e(_m,_R),e(_R,AYe),e(_m,LYe),e(A,yYe),e(A,um),e(um,nne),e(nne,xYe),e(um,$Ye),e(um,uR),e(uR,kYe),e(um,SYe),e(A,RYe),e(A,bm),e(bm,sne),e(sne,PYe),e(bm,BYe),e(bm,bR),e(bR,IYe),e(bm,NYe),e(A,qYe),e(A,vm),e(vm,lne),e(lne,jYe),e(vm,DYe),e(vm,vR),e(vR,GYe),e(vm,OYe),e(A,VYe),e(A,Fm),e(Fm,ine),e(ine,XYe),e(Fm,zYe),e(Fm,FR),e(FR,QYe),e(Fm,WYe),e(A,HYe),e(A,Tm),e(Tm,dne),e(dne,UYe),e(Tm,JYe),e(Tm,TR),e(TR,YYe),e(Tm,KYe),e(A,ZYe),e(A,Mm),e(Mm,cne),e(cne,eKe),e(Mm,oKe),e(Mm,MR),e(MR,rKe),e(Mm,tKe),e(A,aKe),e(A,Em),e(Em,fne),e(fne,nKe),e(Em,sKe),e(Em,ER),e(ER,lKe),e(Em,iKe),e(A,dKe),e(A,Cm),e(Cm,mne),e(mne,cKe),e(Cm,fKe),e(Cm,CR),e(CR,mKe),e(Cm,gKe),e(A,hKe),e(A,wm),e(wm,gne),e(gne,pKe),e(wm,_Ke),e(wm,wR),e(wR,uKe),e(wm,bKe),e(A,vKe),e(A,Am),e(Am,hne),e(hne,FKe),e(Am,TKe),e(Am,AR),e(AR,MKe),e(Am,EKe),e(A,CKe),e(A,Lm),e(Lm,pne),e(pne,wKe),e(Lm,AKe),e(Lm,LR),e(LR,LKe),e(Lm,yKe),e(A,xKe),e(A,ym),e(ym,_ne),e(_ne,$Ke),e(ym,kKe),e(ym,yR),e(yR,SKe),e(ym,RKe),e(A,PKe),e(A,xm),e(xm,une),e(une,BKe),e(xm,IKe),e(xm,xR),e(xR,NKe),e(xm,qKe),e(A,jKe),e(A,$m),e($m,bne),e(bne,DKe),e($m,GKe),e($m,$R),e($R,OKe),e($m,VKe),e(A,XKe),e(A,km),e(km,vne),e(vne,zKe),e(km,QKe),e(km,kR),e(kR,WKe),e(km,HKe),e(A,UKe),e(A,Sm),e(Sm,Fne),e(Fne,JKe),e(Sm,YKe),e(Sm,SR),e(SR,KKe),e(Sm,ZKe),e(A,eZe),e(A,Rm),e(Rm,Tne),e(Tne,oZe),e(Rm,rZe),e(Rm,RR),e(RR,tZe),e(Rm,aZe),e(A,nZe),e(A,Pm),e(Pm,Mne),e(Mne,sZe),e(Pm,lZe),e(Pm,PR),e(PR,iZe),e(Pm,dZe),e(A,cZe),e(A,Bm),e(Bm,Ene),e(Ene,fZe),e(Bm,mZe),e(Bm,BR),e(BR,gZe),e(Bm,hZe),e(A,pZe),e(A,Im),e(Im,Cne),e(Cne,_Ze),e(Im,uZe),e(Im,IR),e(IR,bZe),e(Im,vZe),e(A,FZe),e(A,Nm),e(Nm,wne),e(wne,TZe),e(Nm,MZe),e(Nm,NR),e(NR,EZe),e(Nm,CZe),e(A,wZe),e(A,qm),e(qm,Ane),e(Ane,AZe),e(qm,LZe),e(qm,qR),e(qR,yZe),e(qm,xZe),e(A,$Ze),e(A,jm),e(jm,Lne),e(Lne,kZe),e(jm,SZe),e(jm,jR),e(jR,RZe),e(jm,PZe),e(A,BZe),e(A,Dm),e(Dm,yne),e(yne,IZe),e(Dm,NZe),e(Dm,DR),e(DR,qZe),e(Dm,jZe),e(A,DZe),e(A,Gm),e(Gm,xne),e(xne,GZe),e(Gm,OZe),e(Gm,GR),e(GR,VZe),e(Gm,XZe),e(A,zZe),e(A,Om),e(Om,$ne),e($ne,QZe),e(Om,WZe),e(Om,OR),e(OR,HZe),e(Om,UZe),e(A,JZe),e(A,Vm),e(Vm,kne),e(kne,YZe),e(Vm,KZe),e(Vm,VR),e(VR,ZZe),e(Vm,eeo),e(A,oeo),e(A,Xm),e(Xm,Sne),e(Sne,reo),e(Xm,teo),e(Xm,XR),e(XR,aeo),e(Xm,neo),e(A,seo),e(A,zm),e(zm,Rne),e(Rne,leo),e(zm,ieo),e(zm,zR),e(zR,deo),e(zm,ceo),e(A,feo),e(A,Qm),e(Qm,Pne),e(Pne,meo),e(Qm,geo),e(Qm,QR),e(QR,heo),e(Qm,peo),e(A,_eo),e(A,Wm),e(Wm,Bne),e(Bne,ueo),e(Wm,beo),e(Wm,WR),e(WR,veo),e(Wm,Feo),e(A,Teo),e(A,Hm),e(Hm,Ine),e(Ine,Meo),e(Hm,Eeo),e(Hm,HR),e(HR,Ceo),e(Hm,weo),e(A,Aeo),e(A,Um),e(Um,Nne),e(Nne,Leo),e(Um,yeo),e(Um,UR),e(UR,xeo),e(Um,$eo),e(A,keo),e(A,Jm),e(Jm,qne),e(qne,Seo),e(Jm,Reo),e(Jm,JR),e(JR,Peo),e(Jm,Beo),e(A,Ieo),e(A,Ym),e(Ym,jne),e(jne,Neo),e(Ym,qeo),e(Ym,YR),e(YR,jeo),e(Ym,Deo),e(A,Geo),e(A,Km),e(Km,Dne),e(Dne,Oeo),e(Km,Veo),e(Km,KR),e(KR,Xeo),e(Km,zeo),e(A,Qeo),e(A,Zm),e(Zm,Gne),e(Gne,Weo),e(Zm,Heo),e(Zm,ZR),e(ZR,Ueo),e(Zm,Jeo),e(A,Yeo),e(A,eg),e(eg,One),e(One,Keo),e(eg,Zeo),e(eg,eP),e(eP,eoo),e(eg,ooo),e(A,roo),e(A,og),e(og,Vne),e(Vne,too),e(og,aoo),e(og,oP),e(oP,noo),e(og,soo),e(A,loo),e(A,rg),e(rg,Xne),e(Xne,ioo),e(rg,doo),e(rg,rP),e(rP,coo),e(rg,foo),e(A,moo),e(A,tg),e(tg,zne),e(zne,goo),e(tg,hoo),e(tg,tP),e(tP,poo),e(tg,_oo),e(A,uoo),e(A,ag),e(ag,Qne),e(Qne,boo),e(ag,voo),e(ag,aP),e(aP,Foo),e(ag,Too),e(A,Moo),e(A,ng),e(ng,Wne),e(Wne,Eoo),e(ng,Coo),e(ng,nP),e(nP,woo),e(ng,Aoo),e(A,Loo),e(A,sg),e(sg,Hne),e(Hne,yoo),e(sg,xoo),e(sg,sP),e(sP,$oo),e(sg,koo),e(A,Soo),e(A,lg),e(lg,Une),e(Une,Roo),e(lg,Poo),e(lg,lP),e(lP,Boo),e(lg,Ioo),e(A,Noo),e(A,ig),e(ig,Jne),e(Jne,qoo),e(ig,joo),e(ig,iP),e(iP,Doo),e(ig,Goo),e(A,Ooo),e(A,dg),e(dg,Yne),e(Yne,Voo),e(dg,Xoo),e(dg,dP),e(dP,zoo),e(dg,Qoo),e(A,Woo),e(A,cg),e(cg,Kne),e(Kne,Hoo),e(cg,Uoo),e(cg,cP),e(cP,Joo),e(cg,Yoo),e(A,Koo),e(A,fg),e(fg,Zne),e(Zne,Zoo),e(fg,ero),e(fg,fP),e(fP,oro),e(fg,rro),e(A,tro),e(A,mg),e(mg,ese),e(ese,aro),e(mg,nro),e(mg,mP),e(mP,sro),e(mg,lro),e(A,iro),e(A,gg),e(gg,ose),e(ose,dro),e(gg,cro),e(gg,gP),e(gP,fro),e(gg,mro),e(A,gro),e(A,hg),e(hg,rse),e(rse,hro),e(hg,pro),e(hg,hP),e(hP,_ro),e(hg,uro),e(A,bro),e(A,pg),e(pg,tse),e(tse,vro),e(pg,Fro),e(pg,pP),e(pP,Tro),e(pg,Mro),e(A,Ero),e(A,_g),e(_g,ase),e(ase,Cro),e(_g,wro),e(_g,_P),e(_P,Aro),e(_g,Lro),e(A,yro),e(A,ug),e(ug,nse),e(nse,xro),e(ug,$ro),e(ug,uP),e(uP,kro),e(ug,Sro),e(A,Rro),e(A,bg),e(bg,sse),e(sse,Pro),e(bg,Bro),e(bg,bP),e(bP,Iro),e(bg,Nro),e(A,qro),e(A,vg),e(vg,lse),e(lse,jro),e(vg,Dro),e(vg,vP),e(vP,Gro),e(vg,Oro),e(A,Vro),e(A,Fg),e(Fg,ise),e(ise,Xro),e(Fg,zro),e(Fg,FP),e(FP,Qro),e(Fg,Wro),e(A,Hro),e(A,Tg),e(Tg,dse),e(dse,Uro),e(Tg,Jro),e(Tg,TP),e(TP,Yro),e(Tg,Kro),e(A,Zro),e(A,Mg),e(Mg,cse),e(cse,eto),e(Mg,oto),e(Mg,MP),e(MP,rto),e(Mg,tto),e(A,ato),e(A,Eg),e(Eg,fse),e(fse,nto),e(Eg,sto),e(Eg,EP),e(EP,lto),e(Eg,ito),e(A,dto),e(A,Cg),e(Cg,mse),e(mse,cto),e(Cg,fto),e(Cg,CP),e(CP,mto),e(Cg,gto),e(A,hto),e(A,wg),e(wg,gse),e(gse,pto),e(wg,_to),e(wg,wP),e(wP,uto),e(wg,bto),e(A,vto),e(A,Ag),e(Ag,hse),e(hse,Fto),e(Ag,Tto),e(Ag,AP),e(AP,Mto),e(Ag,Eto),e(A,Cto),e(A,Lg),e(Lg,pse),e(pse,wto),e(Lg,Ato),e(Lg,LP),e(LP,Lto),e(Lg,yto),e(A,xto),e(A,yg),e(yg,_se),e(_se,$to),e(yg,kto),e(yg,yP),e(yP,Sto),e(yg,Rto),e(A,Pto),e(A,xg),e(xg,use),e(use,Bto),e(xg,Ito),e(xg,xP),e(xP,Nto),e(xg,qto),e(A,jto),e(A,$g),e($g,bse),e(bse,Dto),e($g,Gto),e($g,$P),e($P,Oto),e($g,Vto),e(A,Xto),e(A,kg),e(kg,vse),e(vse,zto),e(kg,Qto),e(kg,kP),e(kP,Wto),e(kg,Hto),e(A,Uto),e(A,Sg),e(Sg,Fse),e(Fse,Jto),e(Sg,Yto),e(Sg,SP),e(SP,Kto),e(Sg,Zto),e(A,eao),e(A,Rg),e(Rg,Tse),e(Tse,oao),e(Rg,rao),e(Rg,RP),e(RP,tao),e(Rg,aao),e(A,nao),e(A,Pg),e(Pg,Mse),e(Mse,sao),e(Pg,lao),e(Pg,PP),e(PP,iao),e(Pg,dao),e(A,cao),e(A,Bg),e(Bg,Ese),e(Ese,fao),e(Bg,mao),e(Bg,BP),e(BP,gao),e(Bg,hao),e(A,pao),e(A,Ig),e(Ig,Cse),e(Cse,_ao),e(Ig,uao),e(Ig,IP),e(IP,bao),e(Ig,vao),e(A,Fao),e(A,Ng),e(Ng,wse),e(wse,Tao),e(Ng,Mao),e(Ng,NP),e(NP,Eao),e(Ng,Cao),e(A,wao),e(A,qg),e(qg,Ase),e(Ase,Aao),e(qg,Lao),e(qg,qP),e(qP,yao),e(qg,xao),e(A,$ao),e(A,jg),e(jg,Lse),e(Lse,kao),e(jg,Sao),e(jg,jP),e(jP,Rao),e(jg,Pao),e(A,Bao),e(A,Dg),e(Dg,yse),e(yse,Iao),e(Dg,Nao),e(Dg,DP),e(DP,qao),e(Dg,jao),e(A,Dao),e(A,Gg),e(Gg,xse),e(xse,Gao),e(Gg,Oao),e(Gg,GP),e(GP,Vao),e(Gg,Xao),e(A,zao),e(A,Og),e(Og,$se),e($se,Qao),e(Og,Wao),e(Og,OP),e(OP,Hao),e(Og,Uao),e(A,Jao),e(A,Vg),e(Vg,kse),e(kse,Yao),e(Vg,Kao),e(Vg,VP),e(VP,Zao),e(Vg,eno),e(A,ono),e(A,Xg),e(Xg,Sse),e(Sse,rno),e(Xg,tno),e(Xg,XP),e(XP,ano),e(Xg,nno),e(A,sno),e(A,zg),e(zg,Rse),e(Rse,lno),e(zg,ino),e(zg,zP),e(zP,dno),e(zg,cno),e(A,fno),e(A,Qg),e(Qg,Pse),e(Pse,mno),e(Qg,gno),e(Qg,QP),e(QP,hno),e(Qg,pno),e(A,_no),e(A,Wg),e(Wg,Bse),e(Bse,uno),e(Wg,bno),e(Wg,WP),e(WP,vno),e(Wg,Fno),e(A,Tno),e(A,Hg),e(Hg,Ise),e(Ise,Mno),e(Hg,Eno),e(Hg,HP),e(HP,Cno),e(Hg,wno),e(A,Ano),e(A,Ug),e(Ug,Nse),e(Nse,Lno),e(Ug,yno),e(Ug,UP),e(UP,xno),e(Ug,$no),e(A,kno),e(A,Jg),e(Jg,qse),e(qse,Sno),e(Jg,Rno),e(Jg,JP),e(JP,Pno),e(Jg,Bno),e(Ar,Ino),M(Yg,Ar,null),e(wo,Nno),e(wo,Kg),M(cL,Kg,null),e(Kg,qno),e(Kg,jse),e(jse,jno),b(f,ZVe,u),b(f,Ii,u),e(Ii,Zg),e(Zg,Dse),M(fL,Dse,null),e(Ii,Dno),e(Ii,Gse),e(Gse,Gno),b(f,eXe,u),b(f,Ao,u),M(mL,Ao,null),e(Ao,Ono),e(Ao,gL),e(gL,Vno),e(gL,YP),e(YP,Xno),e(gL,zno),e(Ao,Qno),e(Ao,hL),e(hL,Wno),e(hL,Ose),e(Ose,Hno),e(hL,Uno),e(Ao,Jno),e(Ao,Lr),M(pL,Lr,null),e(Lr,Yno),e(Lr,Vse),e(Vse,Kno),e(Lr,Zno),e(Lr,Ra),e(Ra,eso),e(Ra,Xse),e(Xse,oso),e(Ra,rso),e(Ra,zse),e(zse,tso),e(Ra,aso),e(Ra,Qse),e(Qse,nso),e(Ra,sso),e(Lr,lso),e(Lr,k),e(k,qn),e(qn,Wse),e(Wse,iso),e(qn,dso),e(qn,KP),e(KP,cso),e(qn,fso),e(qn,ZP),e(ZP,mso),e(qn,gso),e(k,hso),e(k,jn),e(jn,Hse),e(Hse,pso),e(jn,_so),e(jn,eB),e(eB,uso),e(jn,bso),e(jn,oB),e(oB,vso),e(jn,Fso),e(k,Tso),e(k,Dn),e(Dn,Use),e(Use,Mso),e(Dn,Eso),e(Dn,rB),e(rB,Cso),e(Dn,wso),e(Dn,tB),e(tB,Aso),e(Dn,Lso),e(k,yso),e(k,eh),e(eh,Jse),e(Jse,xso),e(eh,$so),e(eh,aB),e(aB,kso),e(eh,Sso),e(k,Rso),e(k,Gn),e(Gn,Yse),e(Yse,Pso),e(Gn,Bso),e(Gn,nB),e(nB,Iso),e(Gn,Nso),e(Gn,sB),e(sB,qso),e(Gn,jso),e(k,Dso),e(k,oh),e(oh,Kse),e(Kse,Gso),e(oh,Oso),e(oh,lB),e(lB,Vso),e(oh,Xso),e(k,zso),e(k,rh),e(rh,Zse),e(Zse,Qso),e(rh,Wso),e(rh,iB),e(iB,Hso),e(rh,Uso),e(k,Jso),e(k,th),e(th,ele),e(ele,Yso),e(th,Kso),e(th,dB),e(dB,Zso),e(th,elo),e(k,olo),e(k,On),e(On,ole),e(ole,rlo),e(On,tlo),e(On,cB),e(cB,alo),e(On,nlo),e(On,fB),e(fB,slo),e(On,llo),e(k,ilo),e(k,Vn),e(Vn,rle),e(rle,dlo),e(Vn,clo),e(Vn,mB),e(mB,flo),e(Vn,mlo),e(Vn,gB),e(gB,glo),e(Vn,hlo),e(k,plo),e(k,Xn),e(Xn,tle),e(tle,_lo),e(Xn,ulo),e(Xn,hB),e(hB,blo),e(Xn,vlo),e(Xn,pB),e(pB,Flo),e(Xn,Tlo),e(k,Mlo),e(k,ah),e(ah,ale),e(ale,Elo),e(ah,Clo),e(ah,_B),e(_B,wlo),e(ah,Alo),e(k,Llo),e(k,nh),e(nh,nle),e(nle,ylo),e(nh,xlo),e(nh,uB),e(uB,$lo),e(nh,klo),e(k,Slo),e(k,sh),e(sh,sle),e(sle,Rlo),e(sh,Plo),e(sh,bB),e(bB,Blo),e(sh,Ilo),e(k,Nlo),e(k,zn),e(zn,lle),e(lle,qlo),e(zn,jlo),e(zn,vB),e(vB,Dlo),e(zn,Glo),e(zn,FB),e(FB,Olo),e(zn,Vlo),e(k,Xlo),e(k,lh),e(lh,ile),e(ile,zlo),e(lh,Qlo),e(lh,TB),e(TB,Wlo),e(lh,Hlo),e(k,Ulo),e(k,Qn),e(Qn,dle),e(dle,Jlo),e(Qn,Ylo),e(Qn,MB),e(MB,Klo),e(Qn,Zlo),e(Qn,EB),e(EB,eio),e(Qn,oio),e(k,rio),e(k,Wn),e(Wn,cle),e(cle,tio),e(Wn,aio),e(Wn,CB),e(CB,nio),e(Wn,sio),e(Wn,wB),e(wB,lio),e(Wn,iio),e(k,dio),e(k,Hn),e(Hn,fle),e(fle,cio),e(Hn,fio),e(Hn,AB),e(AB,mio),e(Hn,gio),e(Hn,LB),e(LB,hio),e(Hn,pio),e(k,_io),e(k,Un),e(Un,mle),e(mle,uio),e(Un,bio),e(Un,yB),e(yB,vio),e(Un,Fio),e(Un,xB),e(xB,Tio),e(Un,Mio),e(k,Eio),e(k,ih),e(ih,gle),e(gle,Cio),e(ih,wio),e(ih,$B),e($B,Aio),e(ih,Lio),e(k,yio),e(k,Jn),e(Jn,hle),e(hle,xio),e(Jn,$io),e(Jn,kB),e(kB,kio),e(Jn,Sio),e(Jn,SB),e(SB,Rio),e(Jn,Pio),e(k,Bio),e(k,Yn),e(Yn,ple),e(ple,Iio),e(Yn,Nio),e(Yn,RB),e(RB,qio),e(Yn,jio),e(Yn,PB),e(PB,Dio),e(Yn,Gio),e(k,Oio),e(k,Kn),e(Kn,_le),e(_le,Vio),e(Kn,Xio),e(Kn,BB),e(BB,zio),e(Kn,Qio),e(Kn,IB),e(IB,Wio),e(Kn,Hio),e(k,Uio),e(k,Zn),e(Zn,ule),e(ule,Jio),e(Zn,Yio),e(Zn,NB),e(NB,Kio),e(Zn,Zio),e(Zn,qB),e(qB,edo),e(Zn,odo),e(k,rdo),e(k,es),e(es,ble),e(ble,tdo),e(es,ado),e(es,jB),e(jB,ndo),e(es,sdo),e(es,DB),e(DB,ldo),e(es,ido),e(k,ddo),e(k,os),e(os,vle),e(vle,cdo),e(os,fdo),e(os,GB),e(GB,mdo),e(os,gdo),e(os,OB),e(OB,hdo),e(os,pdo),e(k,_do),e(k,dh),e(dh,Fle),e(Fle,udo),e(dh,bdo),e(dh,VB),e(VB,vdo),e(dh,Fdo),e(k,Tdo),e(k,rs),e(rs,Tle),e(Tle,Mdo),e(rs,Edo),e(rs,XB),e(XB,Cdo),e(rs,wdo),e(rs,zB),e(zB,Ado),e(rs,Ldo),e(k,ydo),e(k,ch),e(ch,Mle),e(Mle,xdo),e(ch,$do),e(ch,QB),e(QB,kdo),e(ch,Sdo),e(k,Rdo),e(k,ts),e(ts,Ele),e(Ele,Pdo),e(ts,Bdo),e(ts,WB),e(WB,Ido),e(ts,Ndo),e(ts,HB),e(HB,qdo),e(ts,jdo),e(k,Ddo),e(k,as),e(as,Cle),e(Cle,Gdo),e(as,Odo),e(as,UB),e(UB,Vdo),e(as,Xdo),e(as,JB),e(JB,zdo),e(as,Qdo),e(k,Wdo),e(k,ns),e(ns,wle),e(wle,Hdo),e(ns,Udo),e(ns,YB),e(YB,Jdo),e(ns,Ydo),e(ns,KB),e(KB,Kdo),e(ns,Zdo),e(k,eco),e(k,fh),e(fh,Ale),e(Ale,oco),e(fh,rco),e(fh,ZB),e(ZB,tco),e(fh,aco),e(k,nco),e(k,ss),e(ss,Lle),e(Lle,sco),e(ss,lco),e(ss,eI),e(eI,ico),e(ss,dco),e(ss,oI),e(oI,cco),e(ss,fco),e(k,mco),e(k,ls),e(ls,yle),e(yle,gco),e(ls,hco),e(ls,rI),e(rI,pco),e(ls,_co),e(ls,tI),e(tI,uco),e(ls,bco),e(k,vco),e(k,is),e(is,xle),e(xle,Fco),e(is,Tco),e(is,aI),e(aI,Mco),e(is,Eco),e(is,nI),e(nI,Cco),e(is,wco),e(k,Aco),e(k,mh),e(mh,$le),e($le,Lco),e(mh,yco),e(mh,sI),e(sI,xco),e(mh,$co),e(k,kco),e(k,ds),e(ds,kle),e(kle,Sco),e(ds,Rco),e(ds,lI),e(lI,Pco),e(ds,Bco),e(ds,iI),e(iI,Ico),e(ds,Nco),e(k,qco),e(k,gh),e(gh,Sle),e(Sle,jco),e(gh,Dco),e(gh,Rle),e(Rle,Gco),e(gh,Oco),e(k,Vco),e(k,cs),e(cs,Ple),e(Ple,Xco),e(cs,zco),e(cs,dI),e(dI,Qco),e(cs,Wco),e(cs,cI),e(cI,Hco),e(cs,Uco),e(k,Jco),e(k,fs),e(fs,Ble),e(Ble,Yco),e(fs,Kco),e(fs,fI),e(fI,Zco),e(fs,efo),e(fs,mI),e(mI,ofo),e(fs,rfo),e(k,tfo),e(k,ms),e(ms,Ile),e(Ile,afo),e(ms,nfo),e(ms,gI),e(gI,sfo),e(ms,lfo),e(ms,hI),e(hI,ifo),e(ms,dfo),e(k,cfo),e(k,gs),e(gs,Nle),e(Nle,ffo),e(gs,mfo),e(gs,pI),e(pI,gfo),e(gs,hfo),e(gs,_I),e(_I,pfo),e(gs,_fo),e(k,ufo),e(k,hs),e(hs,qle),e(qle,bfo),e(hs,vfo),e(hs,uI),e(uI,Ffo),e(hs,Tfo),e(hs,bI),e(bI,Mfo),e(hs,Efo),e(k,Cfo),e(k,ps),e(ps,jle),e(jle,wfo),e(ps,Afo),e(ps,vI),e(vI,Lfo),e(ps,yfo),e(ps,FI),e(FI,xfo),e(ps,$fo),e(k,kfo),e(k,_s),e(_s,Dle),e(Dle,Sfo),e(_s,Rfo),e(_s,TI),e(TI,Pfo),e(_s,Bfo),e(_s,MI),e(MI,Ifo),e(_s,Nfo),e(k,qfo),e(k,hh),e(hh,Gle),e(Gle,jfo),e(hh,Dfo),e(hh,EI),e(EI,Gfo),e(hh,Ofo),e(k,Vfo),e(k,us),e(us,Ole),e(Ole,Xfo),e(us,zfo),e(us,CI),e(CI,Qfo),e(us,Wfo),e(us,wI),e(wI,Hfo),e(us,Ufo),e(k,Jfo),e(k,ph),e(ph,Vle),e(Vle,Yfo),e(ph,Kfo),e(ph,AI),e(AI,Zfo),e(ph,emo),e(k,omo),e(k,_h),e(_h,Xle),e(Xle,rmo),e(_h,tmo),e(_h,LI),e(LI,amo),e(_h,nmo),e(k,smo),e(k,bs),e(bs,zle),e(zle,lmo),e(bs,imo),e(bs,yI),e(yI,dmo),e(bs,cmo),e(bs,xI),e(xI,fmo),e(bs,mmo),e(k,gmo),e(k,vs),e(vs,Qle),e(Qle,hmo),e(vs,pmo),e(vs,$I),e($I,_mo),e(vs,umo),e(vs,kI),e(kI,bmo),e(vs,vmo),e(k,Fmo),e(k,Fs),e(Fs,Wle),e(Wle,Tmo),e(Fs,Mmo),e(Fs,SI),e(SI,Emo),e(Fs,Cmo),e(Fs,RI),e(RI,wmo),e(Fs,Amo),e(k,Lmo),e(k,uh),e(uh,Hle),e(Hle,ymo),e(uh,xmo),e(uh,PI),e(PI,$mo),e(uh,kmo),e(k,Smo),e(k,Ts),e(Ts,Ule),e(Ule,Rmo),e(Ts,Pmo),e(Ts,BI),e(BI,Bmo),e(Ts,Imo),e(Ts,II),e(II,Nmo),e(Ts,qmo),e(k,jmo),e(k,Ms),e(Ms,Jle),e(Jle,Dmo),e(Ms,Gmo),e(Ms,NI),e(NI,Omo),e(Ms,Vmo),e(Ms,qI),e(qI,Xmo),e(Ms,zmo),e(k,Qmo),e(k,Es),e(Es,Yle),e(Yle,Wmo),e(Es,Hmo),e(Es,jI),e(jI,Umo),e(Es,Jmo),e(Es,DI),e(DI,Ymo),e(Es,Kmo),e(k,Zmo),e(k,Cs),e(Cs,Kle),e(Kle,ego),e(Cs,ogo),e(Cs,GI),e(GI,rgo),e(Cs,tgo),e(Cs,OI),e(OI,ago),e(Cs,ngo),e(k,sgo),e(k,ws),e(ws,Zle),e(Zle,lgo),e(ws,igo),e(ws,VI),e(VI,dgo),e(ws,cgo),e(ws,XI),e(XI,fgo),e(ws,mgo),e(k,ggo),e(k,As),e(As,eie),e(eie,hgo),e(As,pgo),e(As,zI),e(zI,_go),e(As,ugo),e(As,QI),e(QI,bgo),e(As,vgo),e(k,Fgo),e(k,Ls),e(Ls,oie),e(oie,Tgo),e(Ls,Mgo),e(Ls,WI),e(WI,Ego),e(Ls,Cgo),e(Ls,HI),e(HI,wgo),e(Ls,Ago),e(k,Lgo),e(k,bh),e(bh,rie),e(rie,ygo),e(bh,xgo),e(bh,UI),e(UI,$go),e(bh,kgo),e(k,Sgo),e(k,ys),e(ys,tie),e(tie,Rgo),e(ys,Pgo),e(ys,JI),e(JI,Bgo),e(ys,Igo),e(ys,YI),e(YI,Ngo),e(ys,qgo),e(k,jgo),e(k,vh),e(vh,aie),e(aie,Dgo),e(vh,Ggo),e(vh,KI),e(KI,Ogo),e(vh,Vgo),e(k,Xgo),e(k,Fh),e(Fh,nie),e(nie,zgo),e(Fh,Qgo),e(Fh,ZI),e(ZI,Wgo),e(Fh,Hgo),e(k,Ugo),e(k,Th),e(Th,sie),e(sie,Jgo),e(Th,Ygo),e(Th,eN),e(eN,Kgo),e(Th,Zgo),e(k,eho),e(k,Mh),e(Mh,lie),e(lie,oho),e(Mh,rho),e(Mh,oN),e(oN,tho),e(Mh,aho),e(k,nho),e(k,xs),e(xs,iie),e(iie,sho),e(xs,lho),e(xs,rN),e(rN,iho),e(xs,dho),e(xs,tN),e(tN,cho),e(xs,fho),e(k,mho),e(k,Eh),e(Eh,die),e(die,gho),e(Eh,hho),e(Eh,aN),e(aN,pho),e(Eh,_ho),e(k,uho),e(k,$s),e($s,cie),e(cie,bho),e($s,vho),e($s,nN),e(nN,Fho),e($s,Tho),e($s,sN),e(sN,Mho),e($s,Eho),e(k,Cho),e(k,ks),e(ks,fie),e(fie,who),e(ks,Aho),e(ks,lN),e(lN,Lho),e(ks,yho),e(ks,iN),e(iN,xho),e(ks,$ho),e(k,kho),e(k,Ss),e(Ss,mie),e(mie,Sho),e(Ss,Rho),e(Ss,dN),e(dN,Pho),e(Ss,Bho),e(Ss,cN),e(cN,Iho),e(Ss,Nho),e(k,qho),e(k,Rs),e(Rs,gie),e(gie,jho),e(Rs,Dho),e(Rs,fN),e(fN,Gho),e(Rs,Oho),e(Rs,mN),e(mN,Vho),e(Rs,Xho),e(k,zho),e(k,Ps),e(Ps,hie),e(hie,Qho),e(Ps,Who),e(Ps,gN),e(gN,Hho),e(Ps,Uho),e(Ps,hN),e(hN,Jho),e(Ps,Yho),e(k,Kho),e(k,Bs),e(Bs,pie),e(pie,Zho),e(Bs,epo),e(Bs,pN),e(pN,opo),e(Bs,rpo),e(Bs,_N),e(_N,tpo),e(Bs,apo),e(k,npo),e(k,Ch),e(Ch,_ie),e(_ie,spo),e(Ch,lpo),e(Ch,uN),e(uN,ipo),e(Ch,dpo),e(k,cpo),e(k,wh),e(wh,uie),e(uie,fpo),e(wh,mpo),e(wh,bN),e(bN,gpo),e(wh,hpo),e(k,ppo),e(k,Is),e(Is,bie),e(bie,_po),e(Is,upo),e(Is,vN),e(vN,bpo),e(Is,vpo),e(Is,FN),e(FN,Fpo),e(Is,Tpo),e(k,Mpo),e(k,Ns),e(Ns,vie),e(vie,Epo),e(Ns,Cpo),e(Ns,TN),e(TN,wpo),e(Ns,Apo),e(Ns,MN),e(MN,Lpo),e(Ns,ypo),e(k,xpo),e(k,qs),e(qs,Fie),e(Fie,$po),e(qs,kpo),e(qs,EN),e(EN,Spo),e(qs,Rpo),e(qs,CN),e(CN,Ppo),e(qs,Bpo),e(k,Ipo),e(k,Ah),e(Ah,Tie),e(Tie,Npo),e(Ah,qpo),e(Ah,wN),e(wN,jpo),e(Ah,Dpo),e(k,Gpo),e(k,Lh),e(Lh,Mie),e(Mie,Opo),e(Lh,Vpo),e(Lh,AN),e(AN,Xpo),e(Lh,zpo),e(k,Qpo),e(k,yh),e(yh,Eie),e(Eie,Wpo),e(yh,Hpo),e(yh,LN),e(LN,Upo),e(yh,Jpo),e(k,Ypo),e(k,js),e(js,Cie),e(Cie,Kpo),e(js,Zpo),e(js,yN),e(yN,e_o),e(js,o_o),e(js,xN),e(xN,r_o),e(js,t_o),e(k,a_o),e(k,Ds),e(Ds,wie),e(wie,n_o),e(Ds,s_o),e(Ds,$N),e($N,l_o),e(Ds,i_o),e(Ds,kN),e(kN,d_o),e(Ds,c_o),e(k,f_o),e(k,xh),e(xh,Aie),e(Aie,m_o),e(xh,g_o),e(xh,SN),e(SN,h_o),e(xh,p_o),e(k,__o),e(k,$h),e($h,Lie),e(Lie,u_o),e($h,b_o),e($h,RN),e(RN,v_o),e($h,F_o),e(k,T_o),e(k,kh),e(kh,yie),e(yie,M_o),e(kh,E_o),e(kh,PN),e(PN,C_o),e(kh,w_o),e(k,A_o),e(k,Gs),e(Gs,xie),e(xie,L_o),e(Gs,y_o),e(Gs,BN),e(BN,x_o),e(Gs,$_o),e(Gs,IN),e(IN,k_o),e(Gs,S_o),e(k,R_o),e(k,Sh),e(Sh,$ie),e($ie,P_o),e(Sh,B_o),e(Sh,NN),e(NN,I_o),e(Sh,N_o),e(k,q_o),e(k,Rh),e(Rh,kie),e(kie,j_o),e(Rh,D_o),e(Rh,qN),e(qN,G_o),e(Rh,O_o),e(k,V_o),e(k,Os),e(Os,Sie),e(Sie,X_o),e(Os,z_o),e(Os,jN),e(jN,Q_o),e(Os,W_o),e(Os,DN),e(DN,H_o),e(Os,U_o),e(k,J_o),e(k,Vs),e(Vs,Rie),e(Rie,Y_o),e(Vs,K_o),e(Vs,GN),e(GN,Z_o),e(Vs,euo),e(Vs,ON),e(ON,ouo),e(Vs,ruo),e(k,tuo),e(k,Xs),e(Xs,Pie),e(Pie,auo),e(Xs,nuo),e(Xs,VN),e(VN,suo),e(Xs,luo),e(Xs,XN),e(XN,iuo),e(Xs,duo),e(k,cuo),e(k,zs),e(zs,Bie),e(Bie,fuo),e(zs,muo),e(zs,zN),e(zN,guo),e(zs,huo),e(zs,QN),e(QN,puo),e(zs,_uo),e(Lr,uuo),M(Ph,Lr,null),e(Ao,buo),e(Ao,Bh),M(_L,Bh,null),e(Bh,vuo),e(Bh,Iie),e(Iie,Fuo),b(f,oXe,u),b(f,Ni,u),e(Ni,Ih),e(Ih,Nie),M(uL,Nie,null),e(Ni,Tuo),e(Ni,qie),e(qie,Muo),b(f,rXe,u),b(f,Lo,u),M(bL,Lo,null),e(Lo,Euo),e(Lo,vL),e(vL,Cuo),e(vL,WN),e(WN,wuo),e(vL,Auo),e(Lo,Luo),e(Lo,FL),e(FL,yuo),e(FL,jie),e(jie,xuo),e(FL,$uo),e(Lo,kuo),e(Lo,He),M(TL,He,null),e(He,Suo),e(He,Die),e(Die,Ruo),e(He,Puo),e(He,Pa),e(Pa,Buo),e(Pa,Gie),e(Gie,Iuo),e(Pa,Nuo),e(Pa,Oie),e(Oie,quo),e(Pa,juo),e(Pa,Vie),e(Vie,Duo),e(Pa,Guo),e(He,Ouo),e(He,Y),e(Y,Nh),e(Nh,Xie),e(Xie,Vuo),e(Nh,Xuo),e(Nh,HN),e(HN,zuo),e(Nh,Quo),e(Y,Wuo),e(Y,qh),e(qh,zie),e(zie,Huo),e(qh,Uuo),e(qh,UN),e(UN,Juo),e(qh,Yuo),e(Y,Kuo),e(Y,jh),e(jh,Qie),e(Qie,Zuo),e(jh,e2o),e(jh,JN),e(JN,o2o),e(jh,r2o),e(Y,t2o),e(Y,Dh),e(Dh,Wie),e(Wie,a2o),e(Dh,n2o),e(Dh,YN),e(YN,s2o),e(Dh,l2o),e(Y,i2o),e(Y,Gh),e(Gh,Hie),e(Hie,d2o),e(Gh,c2o),e(Gh,KN),e(KN,f2o),e(Gh,m2o),e(Y,g2o),e(Y,Oh),e(Oh,Uie),e(Uie,h2o),e(Oh,p2o),e(Oh,ZN),e(ZN,_2o),e(Oh,u2o),e(Y,b2o),e(Y,Vh),e(Vh,Jie),e(Jie,v2o),e(Vh,F2o),e(Vh,eq),e(eq,T2o),e(Vh,M2o),e(Y,E2o),e(Y,Xh),e(Xh,Yie),e(Yie,C2o),e(Xh,w2o),e(Xh,oq),e(oq,A2o),e(Xh,L2o),e(Y,y2o),e(Y,zh),e(zh,Kie),e(Kie,x2o),e(zh,$2o),e(zh,rq),e(rq,k2o),e(zh,S2o),e(Y,R2o),e(Y,Qh),e(Qh,Zie),e(Zie,P2o),e(Qh,B2o),e(Qh,tq),e(tq,I2o),e(Qh,N2o),e(Y,q2o),e(Y,Wh),e(Wh,ede),e(ede,j2o),e(Wh,D2o),e(Wh,aq),e(aq,G2o),e(Wh,O2o),e(Y,V2o),e(Y,Hh),e(Hh,ode),e(ode,X2o),e(Hh,z2o),e(Hh,nq),e(nq,Q2o),e(Hh,W2o),e(Y,H2o),e(Y,Uh),e(Uh,rde),e(rde,U2o),e(Uh,J2o),e(Uh,sq),e(sq,Y2o),e(Uh,K2o),e(Y,Z2o),e(Y,Jh),e(Jh,tde),e(tde,e1o),e(Jh,o1o),e(Jh,lq),e(lq,r1o),e(Jh,t1o),e(Y,a1o),e(Y,Yh),e(Yh,ade),e(ade,n1o),e(Yh,s1o),e(Yh,iq),e(iq,l1o),e(Yh,i1o),e(Y,d1o),e(Y,Kh),e(Kh,nde),e(nde,c1o),e(Kh,f1o),e(Kh,dq),e(dq,m1o),e(Kh,g1o),e(Y,h1o),e(Y,Zh),e(Zh,sde),e(sde,p1o),e(Zh,_1o),e(Zh,cq),e(cq,u1o),e(Zh,b1o),e(Y,v1o),e(Y,ep),e(ep,lde),e(lde,F1o),e(ep,T1o),e(ep,fq),e(fq,M1o),e(ep,E1o),e(Y,C1o),e(Y,op),e(op,ide),e(ide,w1o),e(op,A1o),e(op,mq),e(mq,L1o),e(op,y1o),e(Y,x1o),e(Y,rp),e(rp,dde),e(dde,$1o),e(rp,k1o),e(rp,gq),e(gq,S1o),e(rp,R1o),e(Y,P1o),e(Y,tp),e(tp,cde),e(cde,B1o),e(tp,I1o),e(tp,hq),e(hq,N1o),e(tp,q1o),e(Y,j1o),e(Y,ap),e(ap,fde),e(fde,D1o),e(ap,G1o),e(ap,pq),e(pq,O1o),e(ap,V1o),e(Y,X1o),e(Y,np),e(np,mde),e(mde,z1o),e(np,Q1o),e(np,_q),e(_q,W1o),e(np,H1o),e(Y,U1o),e(Y,sp),e(sp,gde),e(gde,J1o),e(sp,Y1o),e(sp,uq),e(uq,K1o),e(sp,Z1o),e(Y,ebo),e(Y,lp),e(lp,hde),e(hde,obo),e(lp,rbo),e(lp,bq),e(bq,tbo),e(lp,abo),e(Y,nbo),e(Y,ip),e(ip,pde),e(pde,sbo),e(ip,lbo),e(ip,vq),e(vq,ibo),e(ip,dbo),e(Y,cbo),e(Y,dp),e(dp,_de),e(_de,fbo),e(dp,mbo),e(dp,Fq),e(Fq,gbo),e(dp,hbo),e(Y,pbo),e(Y,cp),e(cp,ude),e(ude,_bo),e(cp,ubo),e(cp,Tq),e(Tq,bbo),e(cp,vbo),e(Y,Fbo),e(Y,fp),e(fp,bde),e(bde,Tbo),e(fp,Mbo),e(fp,Mq),e(Mq,Ebo),e(fp,Cbo),e(Y,wbo),e(Y,mp),e(mp,vde),e(vde,Abo),e(mp,Lbo),e(mp,Eq),e(Eq,ybo),e(mp,xbo),e(Y,$bo),e(Y,gp),e(gp,Fde),e(Fde,kbo),e(gp,Sbo),e(gp,Cq),e(Cq,Rbo),e(gp,Pbo),e(Y,Bbo),e(Y,hp),e(hp,Tde),e(Tde,Ibo),e(hp,Nbo),e(hp,wq),e(wq,qbo),e(hp,jbo),e(Y,Dbo),e(Y,pp),e(pp,Mde),e(Mde,Gbo),e(pp,Obo),e(pp,Aq),e(Aq,Vbo),e(pp,Xbo),e(Y,zbo),e(Y,_p),e(_p,Ede),e(Ede,Qbo),e(_p,Wbo),e(_p,Lq),e(Lq,Hbo),e(_p,Ubo),e(He,Jbo),M(up,He,null),e(He,Ybo),M(bp,He,null),e(Lo,Kbo),e(Lo,vp),M(ML,vp,null),e(vp,Zbo),e(vp,Cde),e(Cde,evo),b(f,tXe,u),b(f,qi,u),e(qi,Fp),e(Fp,wde),M(EL,wde,null),e(qi,ovo),e(qi,Ade),e(Ade,rvo),b(f,aXe,u),b(f,yo,u),M(CL,yo,null),e(yo,tvo),e(yo,wL),e(wL,avo),e(wL,yq),e(yq,nvo),e(wL,svo),e(yo,lvo),e(yo,AL),e(AL,ivo),e(AL,Lde),e(Lde,dvo),e(AL,cvo),e(yo,fvo),e(yo,Ue),M(LL,Ue,null),e(Ue,mvo),e(Ue,yde),e(yde,gvo),e(Ue,hvo),e(Ue,ji),e(ji,pvo),e(ji,xde),e(xde,_vo),e(ji,uvo),e(ji,$de),e($de,bvo),e(ji,vvo),e(Ue,Fvo),e(Ue,he),e(he,Tp),e(Tp,kde),e(kde,Tvo),e(Tp,Mvo),e(Tp,xq),e(xq,Evo),e(Tp,Cvo),e(he,wvo),e(he,Mp),e(Mp,Sde),e(Sde,Avo),e(Mp,Lvo),e(Mp,Rde),e(Rde,yvo),e(Mp,xvo),e(he,$vo),e(he,Ep),e(Ep,Pde),e(Pde,kvo),e(Ep,Svo),e(Ep,$q),e($q,Rvo),e(Ep,Pvo),e(he,Bvo),e(he,Cp),e(Cp,Bde),e(Bde,Ivo),e(Cp,Nvo),e(Cp,kq),e(kq,qvo),e(Cp,jvo),e(he,Dvo),e(he,wp),e(wp,Ide),e(Ide,Gvo),e(wp,Ovo),e(wp,Sq),e(Sq,Vvo),e(wp,Xvo),e(he,zvo),e(he,Ap),e(Ap,Nde),e(Nde,Qvo),e(Ap,Wvo),e(Ap,Rq),e(Rq,Hvo),e(Ap,Uvo),e(he,Jvo),e(he,Lp),e(Lp,qde),e(qde,Yvo),e(Lp,Kvo),e(Lp,Pq),e(Pq,Zvo),e(Lp,eFo),e(he,oFo),e(he,yp),e(yp,jde),e(jde,rFo),e(yp,tFo),e(yp,Bq),e(Bq,aFo),e(yp,nFo),e(he,sFo),e(he,xp),e(xp,Dde),e(Dde,lFo),e(xp,iFo),e(xp,Iq),e(Iq,dFo),e(xp,cFo),e(he,fFo),e(he,$p),e($p,Gde),e(Gde,mFo),e($p,gFo),e($p,Nq),e(Nq,hFo),e($p,pFo),e(he,_Fo),e(he,kp),e(kp,Ode),e(Ode,uFo),e(kp,bFo),e(kp,qq),e(qq,vFo),e(kp,FFo),e(he,TFo),e(he,Sp),e(Sp,Vde),e(Vde,MFo),e(Sp,EFo),e(Sp,jq),e(jq,CFo),e(Sp,wFo),e(he,AFo),e(he,Rp),e(Rp,Xde),e(Xde,LFo),e(Rp,yFo),e(Rp,Dq),e(Dq,xFo),e(Rp,$Fo),e(he,kFo),e(he,Pp),e(Pp,zde),e(zde,SFo),e(Pp,RFo),e(Pp,Gq),e(Gq,PFo),e(Pp,BFo),e(he,IFo),e(he,Bp),e(Bp,Qde),e(Qde,NFo),e(Bp,qFo),e(Bp,Oq),e(Oq,jFo),e(Bp,DFo),e(he,GFo),e(he,Ip),e(Ip,Wde),e(Wde,OFo),e(Ip,VFo),e(Ip,Vq),e(Vq,XFo),e(Ip,zFo),e(he,QFo),e(he,Np),e(Np,Hde),e(Hde,WFo),e(Np,HFo),e(Np,Xq),e(Xq,UFo),e(Np,JFo),e(he,YFo),e(he,qp),e(qp,Ude),e(Ude,KFo),e(qp,ZFo),e(qp,zq),e(zq,e6o),e(qp,o6o),e(Ue,r6o),M(jp,Ue,null),e(Ue,t6o),M(Dp,Ue,null),e(yo,a6o),e(yo,Gp),M(yL,Gp,null),e(Gp,n6o),e(Gp,Jde),e(Jde,s6o),b(f,nXe,u),b(f,Di,u),e(Di,Op),e(Op,Yde),M(xL,Yde,null),e(Di,l6o),e(Di,Kde),e(Kde,i6o),b(f,sXe,u),b(f,xo,u),M($L,xo,null),e(xo,d6o),e(xo,Gi),e(Gi,c6o),e(Gi,Qq),e(Qq,f6o),e(Gi,m6o),e(Gi,Wq),e(Wq,g6o),e(Gi,h6o),e(xo,p6o),e(xo,kL),e(kL,_6o),e(kL,Zde),e(Zde,u6o),e(kL,b6o),e(xo,v6o),e(xo,lt),M(SL,lt,null),e(lt,F6o),e(lt,ece),e(ece,T6o),e(lt,M6o),e(lt,Oi),e(Oi,E6o),e(Oi,oce),e(oce,C6o),e(Oi,w6o),e(Oi,Hq),e(Hq,A6o),e(Oi,L6o),e(lt,y6o),M(Vp,lt,null),e(xo,x6o),e(xo,Je),M(RL,Je,null),e(Je,$6o),e(Je,rce),e(rce,k6o),e(Je,S6o),e(Je,Ba),e(Ba,R6o),e(Ba,tce),e(tce,P6o),e(Ba,B6o),e(Ba,ace),e(ace,I6o),e(Ba,N6o),e(Ba,nce),e(nce,q6o),e(Ba,j6o),e(Je,D6o),e(Je,y),e(y,Xp),e(Xp,sce),e(sce,G6o),e(Xp,O6o),e(Xp,Uq),e(Uq,V6o),e(Xp,X6o),e(y,z6o),e(y,zp),e(zp,lce),e(lce,Q6o),e(zp,W6o),e(zp,Jq),e(Jq,H6o),e(zp,U6o),e(y,J6o),e(y,Qp),e(Qp,ice),e(ice,Y6o),e(Qp,K6o),e(Qp,Yq),e(Yq,Z6o),e(Qp,eTo),e(y,oTo),e(y,Wp),e(Wp,dce),e(dce,rTo),e(Wp,tTo),e(Wp,Kq),e(Kq,aTo),e(Wp,nTo),e(y,sTo),e(y,Hp),e(Hp,cce),e(cce,lTo),e(Hp,iTo),e(Hp,Zq),e(Zq,dTo),e(Hp,cTo),e(y,fTo),e(y,Up),e(Up,fce),e(fce,mTo),e(Up,gTo),e(Up,ej),e(ej,hTo),e(Up,pTo),e(y,_To),e(y,Jp),e(Jp,mce),e(mce,uTo),e(Jp,bTo),e(Jp,oj),e(oj,vTo),e(Jp,FTo),e(y,TTo),e(y,Yp),e(Yp,gce),e(gce,MTo),e(Yp,ETo),e(Yp,rj),e(rj,CTo),e(Yp,wTo),e(y,ATo),e(y,Kp),e(Kp,hce),e(hce,LTo),e(Kp,yTo),e(Kp,tj),e(tj,xTo),e(Kp,$To),e(y,kTo),e(y,Zp),e(Zp,pce),e(pce,STo),e(Zp,RTo),e(Zp,aj),e(aj,PTo),e(Zp,BTo),e(y,ITo),e(y,e_),e(e_,_ce),e(_ce,NTo),e(e_,qTo),e(e_,nj),e(nj,jTo),e(e_,DTo),e(y,GTo),e(y,o_),e(o_,uce),e(uce,OTo),e(o_,VTo),e(o_,sj),e(sj,XTo),e(o_,zTo),e(y,QTo),e(y,r_),e(r_,bce),e(bce,WTo),e(r_,HTo),e(r_,lj),e(lj,UTo),e(r_,JTo),e(y,YTo),e(y,t_),e(t_,vce),e(vce,KTo),e(t_,ZTo),e(t_,ij),e(ij,e7o),e(t_,o7o),e(y,r7o),e(y,a_),e(a_,Fce),e(Fce,t7o),e(a_,a7o),e(a_,dj),e(dj,n7o),e(a_,s7o),e(y,l7o),e(y,n_),e(n_,Tce),e(Tce,i7o),e(n_,d7o),e(n_,cj),e(cj,c7o),e(n_,f7o),e(y,m7o),e(y,s_),e(s_,Mce),e(Mce,g7o),e(s_,h7o),e(s_,fj),e(fj,p7o),e(s_,_7o),e(y,u7o),e(y,l_),e(l_,Ece),e(Ece,b7o),e(l_,v7o),e(l_,mj),e(mj,F7o),e(l_,T7o),e(y,M7o),e(y,i_),e(i_,Cce),e(Cce,E7o),e(i_,C7o),e(i_,gj),e(gj,w7o),e(i_,A7o),e(y,L7o),e(y,d_),e(d_,wce),e(wce,y7o),e(d_,x7o),e(d_,hj),e(hj,$7o),e(d_,k7o),e(y,S7o),e(y,c_),e(c_,Ace),e(Ace,R7o),e(c_,P7o),e(c_,pj),e(pj,B7o),e(c_,I7o),e(y,N7o),e(y,f_),e(f_,Lce),e(Lce,q7o),e(f_,j7o),e(f_,_j),e(_j,D7o),e(f_,G7o),e(y,O7o),e(y,m_),e(m_,yce),e(yce,V7o),e(m_,X7o),e(m_,uj),e(uj,z7o),e(m_,Q7o),e(y,W7o),e(y,g_),e(g_,xce),e(xce,H7o),e(g_,U7o),e(g_,bj),e(bj,J7o),e(g_,Y7o),e(y,K7o),e(y,h_),e(h_,$ce),e($ce,Z7o),e(h_,e8o),e(h_,vj),e(vj,o8o),e(h_,r8o),e(y,t8o),e(y,p_),e(p_,kce),e(kce,a8o),e(p_,n8o),e(p_,Fj),e(Fj,s8o),e(p_,l8o),e(y,i8o),e(y,__),e(__,Sce),e(Sce,d8o),e(__,c8o),e(__,Tj),e(Tj,f8o),e(__,m8o),e(y,g8o),e(y,u_),e(u_,Rce),e(Rce,h8o),e(u_,p8o),e(u_,Mj),e(Mj,_8o),e(u_,u8o),e(y,b8o),e(y,b_),e(b_,Pce),e(Pce,v8o),e(b_,F8o),e(b_,Ej),e(Ej,T8o),e(b_,M8o),e(y,E8o),e(y,v_),e(v_,Bce),e(Bce,C8o),e(v_,w8o),e(v_,Cj),e(Cj,A8o),e(v_,L8o),e(y,y8o),e(y,F_),e(F_,Ice),e(Ice,x8o),e(F_,$8o),e(F_,wj),e(wj,k8o),e(F_,S8o),e(y,R8o),e(y,T_),e(T_,Nce),e(Nce,P8o),e(T_,B8o),e(T_,Aj),e(Aj,I8o),e(T_,N8o),e(y,q8o),e(y,M_),e(M_,qce),e(qce,j8o),e(M_,D8o),e(M_,Lj),e(Lj,G8o),e(M_,O8o),e(y,V8o),e(y,E_),e(E_,jce),e(jce,X8o),e(E_,z8o),e(E_,yj),e(yj,Q8o),e(E_,W8o),e(y,H8o),e(y,Qs),e(Qs,Dce),e(Dce,U8o),e(Qs,J8o),e(Qs,xj),e(xj,Y8o),e(Qs,K8o),e(Qs,$j),e($j,Z8o),e(Qs,eMo),e(y,oMo),e(y,C_),e(C_,Gce),e(Gce,rMo),e(C_,tMo),e(C_,kj),e(kj,aMo),e(C_,nMo),e(y,sMo),e(y,w_),e(w_,Oce),e(Oce,lMo),e(w_,iMo),e(w_,Sj),e(Sj,dMo),e(w_,cMo),e(y,fMo),e(y,A_),e(A_,Vce),e(Vce,mMo),e(A_,gMo),e(A_,Rj),e(Rj,hMo),e(A_,pMo),e(y,_Mo),e(y,L_),e(L_,Xce),e(Xce,uMo),e(L_,bMo),e(L_,Pj),e(Pj,vMo),e(L_,FMo),e(y,TMo),e(y,y_),e(y_,zce),e(zce,MMo),e(y_,EMo),e(y_,Bj),e(Bj,CMo),e(y_,wMo),e(y,AMo),e(y,x_),e(x_,Qce),e(Qce,LMo),e(x_,yMo),e(x_,Ij),e(Ij,xMo),e(x_,$Mo),e(y,kMo),e(y,$_),e($_,Wce),e(Wce,SMo),e($_,RMo),e($_,Nj),e(Nj,PMo),e($_,BMo),e(y,IMo),e(y,k_),e(k_,Hce),e(Hce,NMo),e(k_,qMo),e(k_,qj),e(qj,jMo),e(k_,DMo),e(y,GMo),e(y,S_),e(S_,Uce),e(Uce,OMo),e(S_,VMo),e(S_,jj),e(jj,XMo),e(S_,zMo),e(y,QMo),e(y,R_),e(R_,Jce),e(Jce,WMo),e(R_,HMo),e(R_,Yce),e(Yce,UMo),e(R_,JMo),e(y,YMo),e(y,P_),e(P_,Kce),e(Kce,KMo),e(P_,ZMo),e(P_,Dj),e(Dj,e4o),e(P_,o4o),e(y,r4o),e(y,B_),e(B_,Zce),e(Zce,t4o),e(B_,a4o),e(B_,Gj),e(Gj,n4o),e(B_,s4o),e(y,l4o),e(y,I_),e(I_,efe),e(efe,i4o),e(I_,d4o),e(I_,Oj),e(Oj,c4o),e(I_,f4o),e(y,m4o),e(y,N_),e(N_,ofe),e(ofe,g4o),e(N_,h4o),e(N_,Vj),e(Vj,p4o),e(N_,_4o),e(y,u4o),e(y,q_),e(q_,rfe),e(rfe,b4o),e(q_,v4o),e(q_,Xj),e(Xj,F4o),e(q_,T4o),e(y,M4o),e(y,j_),e(j_,tfe),e(tfe,E4o),e(j_,C4o),e(j_,zj),e(zj,w4o),e(j_,A4o),e(y,L4o),e(y,D_),e(D_,afe),e(afe,y4o),e(D_,x4o),e(D_,Qj),e(Qj,$4o),e(D_,k4o),e(y,S4o),e(y,G_),e(G_,nfe),e(nfe,R4o),e(G_,P4o),e(G_,Wj),e(Wj,B4o),e(G_,I4o),e(y,N4o),e(y,O_),e(O_,sfe),e(sfe,q4o),e(O_,j4o),e(O_,Hj),e(Hj,D4o),e(O_,G4o),e(y,O4o),e(y,V_),e(V_,lfe),e(lfe,V4o),e(V_,X4o),e(V_,Uj),e(Uj,z4o),e(V_,Q4o),e(y,W4o),e(y,X_),e(X_,ife),e(ife,H4o),e(X_,U4o),e(X_,Jj),e(Jj,J4o),e(X_,Y4o),e(y,K4o),e(y,z_),e(z_,dfe),e(dfe,Z4o),e(z_,eEo),e(z_,Yj),e(Yj,oEo),e(z_,rEo),e(y,tEo),e(y,Q_),e(Q_,cfe),e(cfe,aEo),e(Q_,nEo),e(Q_,Kj),e(Kj,sEo),e(Q_,lEo),e(y,iEo),e(y,W_),e(W_,ffe),e(ffe,dEo),e(W_,cEo),e(W_,Zj),e(Zj,fEo),e(W_,mEo),e(y,gEo),e(y,H_),e(H_,mfe),e(mfe,hEo),e(H_,pEo),e(H_,eD),e(eD,_Eo),e(H_,uEo),e(y,bEo),e(y,U_),e(U_,gfe),e(gfe,vEo),e(U_,FEo),e(U_,oD),e(oD,TEo),e(U_,MEo),e(y,EEo),e(y,J_),e(J_,hfe),e(hfe,CEo),e(J_,wEo),e(J_,rD),e(rD,AEo),e(J_,LEo),e(y,yEo),e(y,Y_),e(Y_,pfe),e(pfe,xEo),e(Y_,$Eo),e(Y_,tD),e(tD,kEo),e(Y_,SEo),e(y,REo),e(y,K_),e(K_,_fe),e(_fe,PEo),e(K_,BEo),e(K_,aD),e(aD,IEo),e(K_,NEo),e(y,qEo),e(y,Z_),e(Z_,ufe),e(ufe,jEo),e(Z_,DEo),e(Z_,nD),e(nD,GEo),e(Z_,OEo),e(y,VEo),e(y,eu),e(eu,bfe),e(bfe,XEo),e(eu,zEo),e(eu,sD),e(sD,QEo),e(eu,WEo),e(y,HEo),e(y,ou),e(ou,vfe),e(vfe,UEo),e(ou,JEo),e(ou,lD),e(lD,YEo),e(ou,KEo),e(y,ZEo),e(y,ru),e(ru,Ffe),e(Ffe,eCo),e(ru,oCo),e(ru,iD),e(iD,rCo),e(ru,tCo),e(y,aCo),e(y,tu),e(tu,Tfe),e(Tfe,nCo),e(tu,sCo),e(tu,dD),e(dD,lCo),e(tu,iCo),e(y,dCo),e(y,au),e(au,Mfe),e(Mfe,cCo),e(au,fCo),e(au,cD),e(cD,mCo),e(au,gCo),e(y,hCo),e(y,nu),e(nu,Efe),e(Efe,pCo),e(nu,_Co),e(nu,fD),e(fD,uCo),e(nu,bCo),e(y,vCo),e(y,su),e(su,Cfe),e(Cfe,FCo),e(su,TCo),e(su,mD),e(mD,MCo),e(su,ECo),e(y,CCo),e(y,lu),e(lu,wfe),e(wfe,wCo),e(lu,ACo),e(lu,gD),e(gD,LCo),e(lu,yCo),e(y,xCo),e(y,iu),e(iu,Afe),e(Afe,$Co),e(iu,kCo),e(iu,hD),e(hD,SCo),e(iu,RCo),e(y,PCo),e(y,du),e(du,Lfe),e(Lfe,BCo),e(du,ICo),e(du,pD),e(pD,NCo),e(du,qCo),e(y,jCo),e(y,cu),e(cu,yfe),e(yfe,DCo),e(cu,GCo),e(cu,_D),e(_D,OCo),e(cu,VCo),e(y,XCo),e(y,fu),e(fu,xfe),e(xfe,zCo),e(fu,QCo),e(fu,uD),e(uD,WCo),e(fu,HCo),e(y,UCo),e(y,mu),e(mu,$fe),e($fe,JCo),e(mu,YCo),e(mu,bD),e(bD,KCo),e(mu,ZCo),e(y,e3o),e(y,gu),e(gu,kfe),e(kfe,o3o),e(gu,r3o),e(gu,vD),e(vD,t3o),e(gu,a3o),e(y,n3o),e(y,hu),e(hu,Sfe),e(Sfe,s3o),e(hu,l3o),e(hu,FD),e(FD,i3o),e(hu,d3o),e(y,c3o),e(y,pu),e(pu,Rfe),e(Rfe,f3o),e(pu,m3o),e(pu,TD),e(TD,g3o),e(pu,h3o),e(y,p3o),e(y,_u),e(_u,Pfe),e(Pfe,_3o),e(_u,u3o),e(_u,MD),e(MD,b3o),e(_u,v3o),e(y,F3o),e(y,uu),e(uu,Bfe),e(Bfe,T3o),e(uu,M3o),e(uu,ED),e(ED,E3o),e(uu,C3o),e(y,w3o),e(y,bu),e(bu,Ife),e(Ife,A3o),e(bu,L3o),e(bu,CD),e(CD,y3o),e(bu,x3o),e(y,$3o),e(y,vu),e(vu,Nfe),e(Nfe,k3o),e(vu,S3o),e(vu,wD),e(wD,R3o),e(vu,P3o),e(y,B3o),e(y,Fu),e(Fu,qfe),e(qfe,I3o),e(Fu,N3o),e(Fu,AD),e(AD,q3o),e(Fu,j3o),e(y,D3o),e(y,Tu),e(Tu,jfe),e(jfe,G3o),e(Tu,O3o),e(Tu,LD),e(LD,V3o),e(Tu,X3o),e(y,z3o),e(y,Mu),e(Mu,Dfe),e(Dfe,Q3o),e(Mu,W3o),e(Mu,yD),e(yD,H3o),e(Mu,U3o),e(y,J3o),e(y,Eu),e(Eu,Gfe),e(Gfe,Y3o),e(Eu,K3o),e(Eu,xD),e(xD,Z3o),e(Eu,e5o),e(y,o5o),e(y,Cu),e(Cu,Ofe),e(Ofe,r5o),e(Cu,t5o),e(Cu,$D),e($D,a5o),e(Cu,n5o),e(y,s5o),e(y,wu),e(wu,Vfe),e(Vfe,l5o),e(wu,i5o),e(wu,kD),e(kD,d5o),e(wu,c5o),e(y,f5o),e(y,Au),e(Au,Xfe),e(Xfe,m5o),e(Au,g5o),e(Au,SD),e(SD,h5o),e(Au,p5o),e(y,_5o),e(y,Lu),e(Lu,zfe),e(zfe,u5o),e(Lu,b5o),e(Lu,RD),e(RD,v5o),e(Lu,F5o),e(y,T5o),e(y,yu),e(yu,Qfe),e(Qfe,M5o),e(yu,E5o),e(yu,PD),e(PD,C5o),e(yu,w5o),e(y,A5o),e(y,xu),e(xu,Wfe),e(Wfe,L5o),e(xu,y5o),e(xu,BD),e(BD,x5o),e(xu,$5o),e(y,k5o),e(y,$u),e($u,Hfe),e(Hfe,S5o),e($u,R5o),e($u,ID),e(ID,P5o),e($u,B5o),e(y,I5o),e(y,ku),e(ku,Ufe),e(Ufe,N5o),e(ku,q5o),e(ku,ND),e(ND,j5o),e(ku,D5o),e(y,G5o),e(y,Su),e(Su,Jfe),e(Jfe,O5o),e(Su,V5o),e(Su,qD),e(qD,X5o),e(Su,z5o),e(y,Q5o),e(y,Ru),e(Ru,Yfe),e(Yfe,W5o),e(Ru,H5o),e(Ru,jD),e(jD,U5o),e(Ru,J5o),e(y,Y5o),e(y,Pu),e(Pu,Kfe),e(Kfe,K5o),e(Pu,Z5o),e(Pu,DD),e(DD,e0o),e(Pu,o0o),e(y,r0o),e(y,Bu),e(Bu,Zfe),e(Zfe,t0o),e(Bu,a0o),e(Bu,GD),e(GD,n0o),e(Bu,s0o),e(y,l0o),e(y,Iu),e(Iu,eme),e(eme,i0o),e(Iu,d0o),e(Iu,OD),e(OD,c0o),e(Iu,f0o),e(y,m0o),e(y,Nu),e(Nu,ome),e(ome,g0o),e(Nu,h0o),e(Nu,VD),e(VD,p0o),e(Nu,_0o),e(y,u0o),e(y,qu),e(qu,rme),e(rme,b0o),e(qu,v0o),e(qu,XD),e(XD,F0o),e(qu,T0o),e(y,M0o),e(y,ju),e(ju,tme),e(tme,E0o),e(ju,C0o),e(ju,zD),e(zD,w0o),e(ju,A0o),e(y,L0o),e(y,Du),e(Du,ame),e(ame,y0o),e(Du,x0o),e(Du,QD),e(QD,$0o),e(Du,k0o),e(y,S0o),e(y,Gu),e(Gu,nme),e(nme,R0o),e(Gu,P0o),e(Gu,WD),e(WD,B0o),e(Gu,I0o),e(y,N0o),e(y,Ou),e(Ou,sme),e(sme,q0o),e(Ou,j0o),e(Ou,HD),e(HD,D0o),e(Ou,G0o),e(y,O0o),e(y,Vu),e(Vu,lme),e(lme,V0o),e(Vu,X0o),e(Vu,UD),e(UD,z0o),e(Vu,Q0o),e(y,W0o),e(y,Xu),e(Xu,ime),e(ime,H0o),e(Xu,U0o),e(Xu,JD),e(JD,J0o),e(Xu,Y0o),e(y,K0o),e(y,zu),e(zu,dme),e(dme,Z0o),e(zu,ewo),e(zu,YD),e(YD,owo),e(zu,rwo),e(y,two),e(y,Qu),e(Qu,cme),e(cme,awo),e(Qu,nwo),e(Qu,KD),e(KD,swo),e(Qu,lwo),e(Je,iwo),e(Je,Wu),e(Wu,dwo),e(Wu,fme),e(fme,cwo),e(Wu,fwo),e(Wu,mme),e(mme,mwo),e(Je,gwo),M(Hu,Je,null),b(f,lXe,u),b(f,Vi,u),e(Vi,Uu),e(Uu,gme),M(PL,gme,null),e(Vi,hwo),e(Vi,hme),e(hme,pwo),b(f,iXe,u),b(f,$o,u),M(BL,$o,null),e($o,_wo),e($o,Xi),e(Xi,uwo),e(Xi,ZD),e(ZD,bwo),e(Xi,vwo),e(Xi,eG),e(eG,Fwo),e(Xi,Two),e($o,Mwo),e($o,IL),e(IL,Ewo),e(IL,pme),e(pme,Cwo),e(IL,wwo),e($o,Awo),e($o,it),M(NL,it,null),e(it,Lwo),e(it,_me),e(_me,ywo),e(it,xwo),e(it,zi),e(zi,$wo),e(zi,ume),e(ume,kwo),e(zi,Swo),e(zi,oG),e(oG,Rwo),e(zi,Pwo),e(it,Bwo),M(Ju,it,null),e($o,Iwo),e($o,Ye),M(qL,Ye,null),e(Ye,Nwo),e(Ye,bme),e(bme,qwo),e(Ye,jwo),e(Ye,Ia),e(Ia,Dwo),e(Ia,vme),e(vme,Gwo),e(Ia,Owo),e(Ia,Fme),e(Fme,Vwo),e(Ia,Xwo),e(Ia,Tme),e(Tme,zwo),e(Ia,Qwo),e(Ye,Wwo),e(Ye,G),e(G,Yu),e(Yu,Mme),e(Mme,Hwo),e(Yu,Uwo),e(Yu,rG),e(rG,Jwo),e(Yu,Ywo),e(G,Kwo),e(G,Ku),e(Ku,Eme),e(Eme,Zwo),e(Ku,eAo),e(Ku,tG),e(tG,oAo),e(Ku,rAo),e(G,tAo),e(G,Zu),e(Zu,Cme),e(Cme,aAo),e(Zu,nAo),e(Zu,aG),e(aG,sAo),e(Zu,lAo),e(G,iAo),e(G,e2),e(e2,wme),e(wme,dAo),e(e2,cAo),e(e2,nG),e(nG,fAo),e(e2,mAo),e(G,gAo),e(G,o2),e(o2,Ame),e(Ame,hAo),e(o2,pAo),e(o2,sG),e(sG,_Ao),e(o2,uAo),e(G,bAo),e(G,r2),e(r2,Lme),e(Lme,vAo),e(r2,FAo),e(r2,lG),e(lG,TAo),e(r2,MAo),e(G,EAo),e(G,t2),e(t2,yme),e(yme,CAo),e(t2,wAo),e(t2,iG),e(iG,AAo),e(t2,LAo),e(G,yAo),e(G,a2),e(a2,xme),e(xme,xAo),e(a2,$Ao),e(a2,dG),e(dG,kAo),e(a2,SAo),e(G,RAo),e(G,n2),e(n2,$me),e($me,PAo),e(n2,BAo),e(n2,cG),e(cG,IAo),e(n2,NAo),e(G,qAo),e(G,s2),e(s2,kme),e(kme,jAo),e(s2,DAo),e(s2,fG),e(fG,GAo),e(s2,OAo),e(G,VAo),e(G,l2),e(l2,Sme),e(Sme,XAo),e(l2,zAo),e(l2,mG),e(mG,QAo),e(l2,WAo),e(G,HAo),e(G,i2),e(i2,Rme),e(Rme,UAo),e(i2,JAo),e(i2,gG),e(gG,YAo),e(i2,KAo),e(G,ZAo),e(G,d2),e(d2,Pme),e(Pme,eLo),e(d2,oLo),e(d2,hG),e(hG,rLo),e(d2,tLo),e(G,aLo),e(G,c2),e(c2,Bme),e(Bme,nLo),e(c2,sLo),e(c2,pG),e(pG,lLo),e(c2,iLo),e(G,dLo),e(G,f2),e(f2,Ime),e(Ime,cLo),e(f2,fLo),e(f2,_G),e(_G,mLo),e(f2,gLo),e(G,hLo),e(G,m2),e(m2,Nme),e(Nme,pLo),e(m2,_Lo),e(m2,uG),e(uG,uLo),e(m2,bLo),e(G,vLo),e(G,g2),e(g2,qme),e(qme,FLo),e(g2,TLo),e(g2,bG),e(bG,MLo),e(g2,ELo),e(G,CLo),e(G,h2),e(h2,jme),e(jme,wLo),e(h2,ALo),e(h2,vG),e(vG,LLo),e(h2,yLo),e(G,xLo),e(G,p2),e(p2,Dme),e(Dme,$Lo),e(p2,kLo),e(p2,FG),e(FG,SLo),e(p2,RLo),e(G,PLo),e(G,_2),e(_2,Gme),e(Gme,BLo),e(_2,ILo),e(_2,TG),e(TG,NLo),e(_2,qLo),e(G,jLo),e(G,u2),e(u2,Ome),e(Ome,DLo),e(u2,GLo),e(u2,MG),e(MG,OLo),e(u2,VLo),e(G,XLo),e(G,b2),e(b2,Vme),e(Vme,zLo),e(b2,QLo),e(b2,EG),e(EG,WLo),e(b2,HLo),e(G,ULo),e(G,v2),e(v2,Xme),e(Xme,JLo),e(v2,YLo),e(v2,CG),e(CG,KLo),e(v2,ZLo),e(G,eyo),e(G,F2),e(F2,zme),e(zme,oyo),e(F2,ryo),e(F2,wG),e(wG,tyo),e(F2,ayo),e(G,nyo),e(G,T2),e(T2,Qme),e(Qme,syo),e(T2,lyo),e(T2,AG),e(AG,iyo),e(T2,dyo),e(G,cyo),e(G,M2),e(M2,Wme),e(Wme,fyo),e(M2,myo),e(M2,LG),e(LG,gyo),e(M2,hyo),e(G,pyo),e(G,E2),e(E2,Hme),e(Hme,_yo),e(E2,uyo),e(E2,yG),e(yG,byo),e(E2,vyo),e(G,Fyo),e(G,C2),e(C2,Ume),e(Ume,Tyo),e(C2,Myo),e(C2,xG),e(xG,Eyo),e(C2,Cyo),e(G,wyo),e(G,w2),e(w2,Jme),e(Jme,Ayo),e(w2,Lyo),e(w2,$G),e($G,yyo),e(w2,xyo),e(G,$yo),e(G,A2),e(A2,Yme),e(Yme,kyo),e(A2,Syo),e(A2,kG),e(kG,Ryo),e(A2,Pyo),e(G,Byo),e(G,L2),e(L2,Kme),e(Kme,Iyo),e(L2,Nyo),e(L2,SG),e(SG,qyo),e(L2,jyo),e(G,Dyo),e(G,y2),e(y2,Zme),e(Zme,Gyo),e(y2,Oyo),e(y2,RG),e(RG,Vyo),e(y2,Xyo),e(G,zyo),e(G,x2),e(x2,ege),e(ege,Qyo),e(x2,Wyo),e(x2,PG),e(PG,Hyo),e(x2,Uyo),e(G,Jyo),e(G,$2),e($2,oge),e(oge,Yyo),e($2,Kyo),e($2,BG),e(BG,Zyo),e($2,e9o),e(G,o9o),e(G,k2),e(k2,rge),e(rge,r9o),e(k2,t9o),e(k2,IG),e(IG,a9o),e(k2,n9o),e(G,s9o),e(G,S2),e(S2,tge),e(tge,l9o),e(S2,i9o),e(S2,NG),e(NG,d9o),e(S2,c9o),e(G,f9o),e(G,R2),e(R2,age),e(age,m9o),e(R2,g9o),e(R2,qG),e(qG,h9o),e(R2,p9o),e(G,_9o),e(G,P2),e(P2,nge),e(nge,u9o),e(P2,b9o),e(P2,jG),e(jG,v9o),e(P2,F9o),e(G,T9o),e(G,B2),e(B2,sge),e(sge,M9o),e(B2,E9o),e(B2,DG),e(DG,C9o),e(B2,w9o),e(G,A9o),e(G,I2),e(I2,lge),e(lge,L9o),e(I2,y9o),e(I2,GG),e(GG,x9o),e(I2,$9o),e(G,k9o),e(G,N2),e(N2,ige),e(ige,S9o),e(N2,R9o),e(N2,OG),e(OG,P9o),e(N2,B9o),e(G,I9o),e(G,q2),e(q2,dge),e(dge,N9o),e(q2,q9o),e(q2,VG),e(VG,j9o),e(q2,D9o),e(G,G9o),e(G,j2),e(j2,cge),e(cge,O9o),e(j2,V9o),e(j2,XG),e(XG,X9o),e(j2,z9o),e(G,Q9o),e(G,D2),e(D2,fge),e(fge,W9o),e(D2,H9o),e(D2,zG),e(zG,U9o),e(D2,J9o),e(G,Y9o),e(G,G2),e(G2,mge),e(mge,K9o),e(G2,Z9o),e(G2,QG),e(QG,exo),e(G2,oxo),e(Ye,rxo),e(Ye,O2),e(O2,txo),e(O2,gge),e(gge,axo),e(O2,nxo),e(O2,hge),e(hge,sxo),e(Ye,lxo),M(V2,Ye,null),b(f,dXe,u),b(f,Qi,u),e(Qi,X2),e(X2,pge),M(jL,pge,null),e(Qi,ixo),e(Qi,_ge),e(_ge,dxo),b(f,cXe,u),b(f,ko,u),M(DL,ko,null),e(ko,cxo),e(ko,Wi),e(Wi,fxo),e(Wi,WG),e(WG,mxo),e(Wi,gxo),e(Wi,HG),e(HG,hxo),e(Wi,pxo),e(ko,_xo),e(ko,GL),e(GL,uxo),e(GL,uge),e(uge,bxo),e(GL,vxo),e(ko,Fxo),e(ko,dt),M(OL,dt,null),e(dt,Txo),e(dt,bge),e(bge,Mxo),e(dt,Exo),e(dt,Hi),e(Hi,Cxo),e(Hi,vge),e(vge,wxo),e(Hi,Axo),e(Hi,UG),e(UG,Lxo),e(Hi,yxo),e(dt,xxo),M(z2,dt,null),e(ko,$xo),e(ko,Ke),M(VL,Ke,null),e(Ke,kxo),e(Ke,Fge),e(Fge,Sxo),e(Ke,Rxo),e(Ke,Na),e(Na,Pxo),e(Na,Tge),e(Tge,Bxo),e(Na,Ixo),e(Na,Mge),e(Mge,Nxo),e(Na,qxo),e(Na,Ege),e(Ege,jxo),e(Na,Dxo),e(Ke,Gxo),e(Ke,z),e(z,Q2),e(Q2,Cge),e(Cge,Oxo),e(Q2,Vxo),e(Q2,JG),e(JG,Xxo),e(Q2,zxo),e(z,Qxo),e(z,W2),e(W2,wge),e(wge,Wxo),e(W2,Hxo),e(W2,YG),e(YG,Uxo),e(W2,Jxo),e(z,Yxo),e(z,H2),e(H2,Age),e(Age,Kxo),e(H2,Zxo),e(H2,KG),e(KG,e$o),e(H2,o$o),e(z,r$o),e(z,U2),e(U2,Lge),e(Lge,t$o),e(U2,a$o),e(U2,ZG),e(ZG,n$o),e(U2,s$o),e(z,l$o),e(z,J2),e(J2,yge),e(yge,i$o),e(J2,d$o),e(J2,eO),e(eO,c$o),e(J2,f$o),e(z,m$o),e(z,Y2),e(Y2,xge),e(xge,g$o),e(Y2,h$o),e(Y2,oO),e(oO,p$o),e(Y2,_$o),e(z,u$o),e(z,K2),e(K2,$ge),e($ge,b$o),e(K2,v$o),e(K2,rO),e(rO,F$o),e(K2,T$o),e(z,M$o),e(z,Z2),e(Z2,kge),e(kge,E$o),e(Z2,C$o),e(Z2,tO),e(tO,w$o),e(Z2,A$o),e(z,L$o),e(z,e1),e(e1,Sge),e(Sge,y$o),e(e1,x$o),e(e1,aO),e(aO,$$o),e(e1,k$o),e(z,S$o),e(z,o1),e(o1,Rge),e(Rge,R$o),e(o1,P$o),e(o1,nO),e(nO,B$o),e(o1,I$o),e(z,N$o),e(z,r1),e(r1,Pge),e(Pge,q$o),e(r1,j$o),e(r1,sO),e(sO,D$o),e(r1,G$o),e(z,O$o),e(z,t1),e(t1,Bge),e(Bge,V$o),e(t1,X$o),e(t1,lO),e(lO,z$o),e(t1,Q$o),e(z,W$o),e(z,a1),e(a1,Ige),e(Ige,H$o),e(a1,U$o),e(a1,iO),e(iO,J$o),e(a1,Y$o),e(z,K$o),e(z,n1),e(n1,Nge),e(Nge,Z$o),e(n1,eko),e(n1,dO),e(dO,oko),e(n1,rko),e(z,tko),e(z,s1),e(s1,qge),e(qge,ako),e(s1,nko),e(s1,cO),e(cO,sko),e(s1,lko),e(z,iko),e(z,l1),e(l1,jge),e(jge,dko),e(l1,cko),e(l1,fO),e(fO,fko),e(l1,mko),e(z,gko),e(z,i1),e(i1,Dge),e(Dge,hko),e(i1,pko),e(i1,mO),e(mO,_ko),e(i1,uko),e(z,bko),e(z,d1),e(d1,Gge),e(Gge,vko),e(d1,Fko),e(d1,gO),e(gO,Tko),e(d1,Mko),e(z,Eko),e(z,c1),e(c1,Oge),e(Oge,Cko),e(c1,wko),e(c1,hO),e(hO,Ako),e(c1,Lko),e(z,yko),e(z,f1),e(f1,Vge),e(Vge,xko),e(f1,$ko),e(f1,pO),e(pO,kko),e(f1,Sko),e(z,Rko),e(z,m1),e(m1,Xge),e(Xge,Pko),e(m1,Bko),e(m1,_O),e(_O,Iko),e(m1,Nko),e(z,qko),e(z,g1),e(g1,zge),e(zge,jko),e(g1,Dko),e(g1,uO),e(uO,Gko),e(g1,Oko),e(z,Vko),e(z,h1),e(h1,Qge),e(Qge,Xko),e(h1,zko),e(h1,bO),e(bO,Qko),e(h1,Wko),e(z,Hko),e(z,p1),e(p1,Wge),e(Wge,Uko),e(p1,Jko),e(p1,vO),e(vO,Yko),e(p1,Kko),e(z,Zko),e(z,_1),e(_1,Hge),e(Hge,eSo),e(_1,oSo),e(_1,FO),e(FO,rSo),e(_1,tSo),e(z,aSo),e(z,u1),e(u1,Uge),e(Uge,nSo),e(u1,sSo),e(u1,TO),e(TO,lSo),e(u1,iSo),e(z,dSo),e(z,b1),e(b1,Jge),e(Jge,cSo),e(b1,fSo),e(b1,MO),e(MO,mSo),e(b1,gSo),e(z,hSo),e(z,v1),e(v1,Yge),e(Yge,pSo),e(v1,_So),e(v1,EO),e(EO,uSo),e(v1,bSo),e(z,vSo),e(z,F1),e(F1,Kge),e(Kge,FSo),e(F1,TSo),e(F1,CO),e(CO,MSo),e(F1,ESo),e(z,CSo),e(z,T1),e(T1,Zge),e(Zge,wSo),e(T1,ASo),e(T1,wO),e(wO,LSo),e(T1,ySo),e(z,xSo),e(z,M1),e(M1,ehe),e(ehe,$So),e(M1,kSo),e(M1,AO),e(AO,SSo),e(M1,RSo),e(z,PSo),e(z,E1),e(E1,ohe),e(ohe,BSo),e(E1,ISo),e(E1,LO),e(LO,NSo),e(E1,qSo),e(z,jSo),e(z,C1),e(C1,rhe),e(rhe,DSo),e(C1,GSo),e(C1,yO),e(yO,OSo),e(C1,VSo),e(z,XSo),e(z,w1),e(w1,the),e(the,zSo),e(w1,QSo),e(w1,xO),e(xO,WSo),e(w1,HSo),e(z,USo),e(z,A1),e(A1,ahe),e(ahe,JSo),e(A1,YSo),e(A1,$O),e($O,KSo),e(A1,ZSo),e(z,eRo),e(z,L1),e(L1,nhe),e(nhe,oRo),e(L1,rRo),e(L1,kO),e(kO,tRo),e(L1,aRo),e(z,nRo),e(z,y1),e(y1,she),e(she,sRo),e(y1,lRo),e(y1,SO),e(SO,iRo),e(y1,dRo),e(z,cRo),e(z,x1),e(x1,lhe),e(lhe,fRo),e(x1,mRo),e(x1,RO),e(RO,gRo),e(x1,hRo),e(z,pRo),e(z,$1),e($1,ihe),e(ihe,_Ro),e($1,uRo),e($1,PO),e(PO,bRo),e($1,vRo),e(z,FRo),e(z,k1),e(k1,dhe),e(dhe,TRo),e(k1,MRo),e(k1,BO),e(BO,ERo),e(k1,CRo),e(Ke,wRo),e(Ke,S1),e(S1,ARo),e(S1,che),e(che,LRo),e(S1,yRo),e(S1,fhe),e(fhe,xRo),e(Ke,$Ro),M(R1,Ke,null),b(f,fXe,u),b(f,Ui,u),e(Ui,P1),e(P1,mhe),M(XL,mhe,null),e(Ui,kRo),e(Ui,ghe),e(ghe,SRo),b(f,mXe,u),b(f,So,u),M(zL,So,null),e(So,RRo),e(So,Ji),e(Ji,PRo),e(Ji,IO),e(IO,BRo),e(Ji,IRo),e(Ji,NO),e(NO,NRo),e(Ji,qRo),e(So,jRo),e(So,QL),e(QL,DRo),e(QL,hhe),e(hhe,GRo),e(QL,ORo),e(So,VRo),e(So,ct),M(WL,ct,null),e(ct,XRo),e(ct,phe),e(phe,zRo),e(ct,QRo),e(ct,Yi),e(Yi,WRo),e(Yi,_he),e(_he,HRo),e(Yi,URo),e(Yi,qO),e(qO,JRo),e(Yi,YRo),e(ct,KRo),M(B1,ct,null),e(So,ZRo),e(So,Ze),M(HL,Ze,null),e(Ze,ePo),e(Ze,uhe),e(uhe,oPo),e(Ze,rPo),e(Ze,qa),e(qa,tPo),e(qa,bhe),e(bhe,aPo),e(qa,nPo),e(qa,vhe),e(vhe,sPo),e(qa,lPo),e(qa,Fhe),e(Fhe,iPo),e(qa,dPo),e(Ze,cPo),e(Ze,W),e(W,I1),e(I1,The),e(The,fPo),e(I1,mPo),e(I1,jO),e(jO,gPo),e(I1,hPo),e(W,pPo),e(W,N1),e(N1,Mhe),e(Mhe,_Po),e(N1,uPo),e(N1,DO),e(DO,bPo),e(N1,vPo),e(W,FPo),e(W,q1),e(q1,Ehe),e(Ehe,TPo),e(q1,MPo),e(q1,GO),e(GO,EPo),e(q1,CPo),e(W,wPo),e(W,j1),e(j1,Che),e(Che,APo),e(j1,LPo),e(j1,OO),e(OO,yPo),e(j1,xPo),e(W,$Po),e(W,D1),e(D1,whe),e(whe,kPo),e(D1,SPo),e(D1,VO),e(VO,RPo),e(D1,PPo),e(W,BPo),e(W,G1),e(G1,Ahe),e(Ahe,IPo),e(G1,NPo),e(G1,XO),e(XO,qPo),e(G1,jPo),e(W,DPo),e(W,O1),e(O1,Lhe),e(Lhe,GPo),e(O1,OPo),e(O1,zO),e(zO,VPo),e(O1,XPo),e(W,zPo),e(W,V1),e(V1,yhe),e(yhe,QPo),e(V1,WPo),e(V1,QO),e(QO,HPo),e(V1,UPo),e(W,JPo),e(W,X1),e(X1,xhe),e(xhe,YPo),e(X1,KPo),e(X1,WO),e(WO,ZPo),e(X1,eBo),e(W,oBo),e(W,z1),e(z1,$he),e($he,rBo),e(z1,tBo),e(z1,HO),e(HO,aBo),e(z1,nBo),e(W,sBo),e(W,Q1),e(Q1,khe),e(khe,lBo),e(Q1,iBo),e(Q1,UO),e(UO,dBo),e(Q1,cBo),e(W,fBo),e(W,W1),e(W1,She),e(She,mBo),e(W1,gBo),e(W1,JO),e(JO,hBo),e(W1,pBo),e(W,_Bo),e(W,H1),e(H1,Rhe),e(Rhe,uBo),e(H1,bBo),e(H1,YO),e(YO,vBo),e(H1,FBo),e(W,TBo),e(W,U1),e(U1,Phe),e(Phe,MBo),e(U1,EBo),e(U1,KO),e(KO,CBo),e(U1,wBo),e(W,ABo),e(W,J1),e(J1,Bhe),e(Bhe,LBo),e(J1,yBo),e(J1,ZO),e(ZO,xBo),e(J1,$Bo),e(W,kBo),e(W,Y1),e(Y1,Ihe),e(Ihe,SBo),e(Y1,RBo),e(Y1,eV),e(eV,PBo),e(Y1,BBo),e(W,IBo),e(W,K1),e(K1,Nhe),e(Nhe,NBo),e(K1,qBo),e(K1,oV),e(oV,jBo),e(K1,DBo),e(W,GBo),e(W,Z1),e(Z1,qhe),e(qhe,OBo),e(Z1,VBo),e(Z1,rV),e(rV,XBo),e(Z1,zBo),e(W,QBo),e(W,eb),e(eb,jhe),e(jhe,WBo),e(eb,HBo),e(eb,tV),e(tV,UBo),e(eb,JBo),e(W,YBo),e(W,ob),e(ob,Dhe),e(Dhe,KBo),e(ob,ZBo),e(ob,aV),e(aV,eIo),e(ob,oIo),e(W,rIo),e(W,rb),e(rb,Ghe),e(Ghe,tIo),e(rb,aIo),e(rb,nV),e(nV,nIo),e(rb,sIo),e(W,lIo),e(W,tb),e(tb,Ohe),e(Ohe,iIo),e(tb,dIo),e(tb,sV),e(sV,cIo),e(tb,fIo),e(W,mIo),e(W,ab),e(ab,Vhe),e(Vhe,gIo),e(ab,hIo),e(ab,lV),e(lV,pIo),e(ab,_Io),e(W,uIo),e(W,nb),e(nb,Xhe),e(Xhe,bIo),e(nb,vIo),e(nb,iV),e(iV,FIo),e(nb,TIo),e(W,MIo),e(W,sb),e(sb,zhe),e(zhe,EIo),e(sb,CIo),e(sb,dV),e(dV,wIo),e(sb,AIo),e(W,LIo),e(W,lb),e(lb,Qhe),e(Qhe,yIo),e(lb,xIo),e(lb,cV),e(cV,$Io),e(lb,kIo),e(W,SIo),e(W,ib),e(ib,Whe),e(Whe,RIo),e(ib,PIo),e(ib,fV),e(fV,BIo),e(ib,IIo),e(W,NIo),e(W,db),e(db,Hhe),e(Hhe,qIo),e(db,jIo),e(db,mV),e(mV,DIo),e(db,GIo),e(W,OIo),e(W,cb),e(cb,Uhe),e(Uhe,VIo),e(cb,XIo),e(cb,gV),e(gV,zIo),e(cb,QIo),e(W,WIo),e(W,fb),e(fb,Jhe),e(Jhe,HIo),e(fb,UIo),e(fb,hV),e(hV,JIo),e(fb,YIo),e(W,KIo),e(W,mb),e(mb,Yhe),e(Yhe,ZIo),e(mb,eNo),e(mb,pV),e(pV,oNo),e(mb,rNo),e(W,tNo),e(W,gb),e(gb,Khe),e(Khe,aNo),e(gb,nNo),e(gb,_V),e(_V,sNo),e(gb,lNo),e(W,iNo),e(W,hb),e(hb,Zhe),e(Zhe,dNo),e(hb,cNo),e(hb,uV),e(uV,fNo),e(hb,mNo),e(W,gNo),e(W,pb),e(pb,epe),e(epe,hNo),e(pb,pNo),e(pb,ope),e(ope,_No),e(pb,uNo),e(W,bNo),e(W,_b),e(_b,rpe),e(rpe,vNo),e(_b,FNo),e(_b,bV),e(bV,TNo),e(_b,MNo),e(W,ENo),e(W,ub),e(ub,tpe),e(tpe,CNo),e(ub,wNo),e(ub,vV),e(vV,ANo),e(ub,LNo),e(W,yNo),e(W,bb),e(bb,ape),e(ape,xNo),e(bb,$No),e(bb,FV),e(FV,kNo),e(bb,SNo),e(W,RNo),e(W,vb),e(vb,npe),e(npe,PNo),e(vb,BNo),e(vb,TV),e(TV,INo),e(vb,NNo),e(Ze,qNo),e(Ze,Fb),e(Fb,jNo),e(Fb,spe),e(spe,DNo),e(Fb,GNo),e(Fb,lpe),e(lpe,ONo),e(Ze,VNo),M(Tb,Ze,null),b(f,gXe,u),b(f,Ki,u),e(Ki,Mb),e(Mb,ipe),M(UL,ipe,null),e(Ki,XNo),e(Ki,dpe),e(dpe,zNo),b(f,hXe,u),b(f,Ro,u),M(JL,Ro,null),e(Ro,QNo),e(Ro,Zi),e(Zi,WNo),e(Zi,MV),e(MV,HNo),e(Zi,UNo),e(Zi,EV),e(EV,JNo),e(Zi,YNo),e(Ro,KNo),e(Ro,YL),e(YL,ZNo),e(YL,cpe),e(cpe,eqo),e(YL,oqo),e(Ro,rqo),e(Ro,ft),M(KL,ft,null),e(ft,tqo),e(ft,fpe),e(fpe,aqo),e(ft,nqo),e(ft,ed),e(ed,sqo),e(ed,mpe),e(mpe,lqo),e(ed,iqo),e(ed,CV),e(CV,dqo),e(ed,cqo),e(ft,fqo),M(Eb,ft,null),e(Ro,mqo),e(Ro,eo),M(ZL,eo,null),e(eo,gqo),e(eo,gpe),e(gpe,hqo),e(eo,pqo),e(eo,ja),e(ja,_qo),e(ja,hpe),e(hpe,uqo),e(ja,bqo),e(ja,ppe),e(ppe,vqo),e(ja,Fqo),e(ja,_pe),e(_pe,Tqo),e(ja,Mqo),e(eo,Eqo),e(eo,pe),e(pe,Cb),e(Cb,upe),e(upe,Cqo),e(Cb,wqo),e(Cb,wV),e(wV,Aqo),e(Cb,Lqo),e(pe,yqo),e(pe,wb),e(wb,bpe),e(bpe,xqo),e(wb,$qo),e(wb,AV),e(AV,kqo),e(wb,Sqo),e(pe,Rqo),e(pe,Ab),e(Ab,vpe),e(vpe,Pqo),e(Ab,Bqo),e(Ab,LV),e(LV,Iqo),e(Ab,Nqo),e(pe,qqo),e(pe,Lb),e(Lb,Fpe),e(Fpe,jqo),e(Lb,Dqo),e(Lb,yV),e(yV,Gqo),e(Lb,Oqo),e(pe,Vqo),e(pe,yb),e(yb,Tpe),e(Tpe,Xqo),e(yb,zqo),e(yb,xV),e(xV,Qqo),e(yb,Wqo),e(pe,Hqo),e(pe,xb),e(xb,Mpe),e(Mpe,Uqo),e(xb,Jqo),e(xb,$V),e($V,Yqo),e(xb,Kqo),e(pe,Zqo),e(pe,$b),e($b,Epe),e(Epe,ejo),e($b,ojo),e($b,kV),e(kV,rjo),e($b,tjo),e(pe,ajo),e(pe,kb),e(kb,Cpe),e(Cpe,njo),e(kb,sjo),e(kb,SV),e(SV,ljo),e(kb,ijo),e(pe,djo),e(pe,Sb),e(Sb,wpe),e(wpe,cjo),e(Sb,fjo),e(Sb,RV),e(RV,mjo),e(Sb,gjo),e(pe,hjo),e(pe,Rb),e(Rb,Ape),e(Ape,pjo),e(Rb,_jo),e(Rb,PV),e(PV,ujo),e(Rb,bjo),e(pe,vjo),e(pe,Pb),e(Pb,Lpe),e(Lpe,Fjo),e(Pb,Tjo),e(Pb,BV),e(BV,Mjo),e(Pb,Ejo),e(pe,Cjo),e(pe,Bb),e(Bb,ype),e(ype,wjo),e(Bb,Ajo),e(Bb,IV),e(IV,Ljo),e(Bb,yjo),e(pe,xjo),e(pe,Ib),e(Ib,xpe),e(xpe,$jo),e(Ib,kjo),e(Ib,NV),e(NV,Sjo),e(Ib,Rjo),e(pe,Pjo),e(pe,Nb),e(Nb,$pe),e($pe,Bjo),e(Nb,Ijo),e(Nb,qV),e(qV,Njo),e(Nb,qjo),e(pe,jjo),e(pe,qb),e(qb,kpe),e(kpe,Djo),e(qb,Gjo),e(qb,jV),e(jV,Ojo),e(qb,Vjo),e(pe,Xjo),e(pe,jb),e(jb,Spe),e(Spe,zjo),e(jb,Qjo),e(jb,DV),e(DV,Wjo),e(jb,Hjo),e(pe,Ujo),e(pe,Db),e(Db,Rpe),e(Rpe,Jjo),e(Db,Yjo),e(Db,GV),e(GV,Kjo),e(Db,Zjo),e(pe,eDo),e(pe,Gb),e(Gb,Ppe),e(Ppe,oDo),e(Gb,rDo),e(Gb,OV),e(OV,tDo),e(Gb,aDo),e(eo,nDo),e(eo,Ob),e(Ob,sDo),e(Ob,Bpe),e(Bpe,lDo),e(Ob,iDo),e(Ob,Ipe),e(Ipe,dDo),e(eo,cDo),M(Vb,eo,null),b(f,pXe,u),b(f,od,u),e(od,Xb),e(Xb,Npe),M(ey,Npe,null),e(od,fDo),e(od,qpe),e(qpe,mDo),b(f,_Xe,u),b(f,Po,u),M(oy,Po,null),e(Po,gDo),e(Po,rd),e(rd,hDo),e(rd,VV),e(VV,pDo),e(rd,_Do),e(rd,XV),e(XV,uDo),e(rd,bDo),e(Po,vDo),e(Po,ry),e(ry,FDo),e(ry,jpe),e(jpe,TDo),e(ry,MDo),e(Po,EDo),e(Po,mt),M(ty,mt,null),e(mt,CDo),e(mt,Dpe),e(Dpe,wDo),e(mt,ADo),e(mt,td),e(td,LDo),e(td,Gpe),e(Gpe,yDo),e(td,xDo),e(td,zV),e(zV,$Do),e(td,kDo),e(mt,SDo),M(zb,mt,null),e(Po,RDo),e(Po,oo),M(ay,oo,null),e(oo,PDo),e(oo,Ope),e(Ope,BDo),e(oo,IDo),e(oo,Da),e(Da,NDo),e(Da,Vpe),e(Vpe,qDo),e(Da,jDo),e(Da,Xpe),e(Xpe,DDo),e(Da,GDo),e(Da,zpe),e(zpe,ODo),e(Da,VDo),e(oo,XDo),e(oo,N),e(N,Qb),e(Qb,Qpe),e(Qpe,zDo),e(Qb,QDo),e(Qb,QV),e(QV,WDo),e(Qb,HDo),e(N,UDo),e(N,Wb),e(Wb,Wpe),e(Wpe,JDo),e(Wb,YDo),e(Wb,WV),e(WV,KDo),e(Wb,ZDo),e(N,eGo),e(N,Hb),e(Hb,Hpe),e(Hpe,oGo),e(Hb,rGo),e(Hb,HV),e(HV,tGo),e(Hb,aGo),e(N,nGo),e(N,Ub),e(Ub,Upe),e(Upe,sGo),e(Ub,lGo),e(Ub,UV),e(UV,iGo),e(Ub,dGo),e(N,cGo),e(N,Jb),e(Jb,Jpe),e(Jpe,fGo),e(Jb,mGo),e(Jb,JV),e(JV,gGo),e(Jb,hGo),e(N,pGo),e(N,Yb),e(Yb,Ype),e(Ype,_Go),e(Yb,uGo),e(Yb,YV),e(YV,bGo),e(Yb,vGo),e(N,FGo),e(N,Kb),e(Kb,Kpe),e(Kpe,TGo),e(Kb,MGo),e(Kb,KV),e(KV,EGo),e(Kb,CGo),e(N,wGo),e(N,Zb),e(Zb,Zpe),e(Zpe,AGo),e(Zb,LGo),e(Zb,ZV),e(ZV,yGo),e(Zb,xGo),e(N,$Go),e(N,ev),e(ev,e_e),e(e_e,kGo),e(ev,SGo),e(ev,eX),e(eX,RGo),e(ev,PGo),e(N,BGo),e(N,ov),e(ov,o_e),e(o_e,IGo),e(ov,NGo),e(ov,oX),e(oX,qGo),e(ov,jGo),e(N,DGo),e(N,rv),e(rv,r_e),e(r_e,GGo),e(rv,OGo),e(rv,rX),e(rX,VGo),e(rv,XGo),e(N,zGo),e(N,tv),e(tv,t_e),e(t_e,QGo),e(tv,WGo),e(tv,tX),e(tX,HGo),e(tv,UGo),e(N,JGo),e(N,av),e(av,a_e),e(a_e,YGo),e(av,KGo),e(av,aX),e(aX,ZGo),e(av,eOo),e(N,oOo),e(N,nv),e(nv,n_e),e(n_e,rOo),e(nv,tOo),e(nv,nX),e(nX,aOo),e(nv,nOo),e(N,sOo),e(N,sv),e(sv,s_e),e(s_e,lOo),e(sv,iOo),e(sv,sX),e(sX,dOo),e(sv,cOo),e(N,fOo),e(N,lv),e(lv,l_e),e(l_e,mOo),e(lv,gOo),e(lv,lX),e(lX,hOo),e(lv,pOo),e(N,_Oo),e(N,iv),e(iv,i_e),e(i_e,uOo),e(iv,bOo),e(iv,iX),e(iX,vOo),e(iv,FOo),e(N,TOo),e(N,dv),e(dv,d_e),e(d_e,MOo),e(dv,EOo),e(dv,dX),e(dX,COo),e(dv,wOo),e(N,AOo),e(N,cv),e(cv,c_e),e(c_e,LOo),e(cv,yOo),e(cv,cX),e(cX,xOo),e(cv,$Oo),e(N,kOo),e(N,fv),e(fv,f_e),e(f_e,SOo),e(fv,ROo),e(fv,fX),e(fX,POo),e(fv,BOo),e(N,IOo),e(N,mv),e(mv,m_e),e(m_e,NOo),e(mv,qOo),e(mv,mX),e(mX,jOo),e(mv,DOo),e(N,GOo),e(N,gv),e(gv,g_e),e(g_e,OOo),e(gv,VOo),e(gv,gX),e(gX,XOo),e(gv,zOo),e(N,QOo),e(N,hv),e(hv,h_e),e(h_e,WOo),e(hv,HOo),e(hv,hX),e(hX,UOo),e(hv,JOo),e(N,YOo),e(N,pv),e(pv,p_e),e(p_e,KOo),e(pv,ZOo),e(pv,pX),e(pX,eVo),e(pv,oVo),e(N,rVo),e(N,_v),e(_v,__e),e(__e,tVo),e(_v,aVo),e(_v,_X),e(_X,nVo),e(_v,sVo),e(N,lVo),e(N,uv),e(uv,u_e),e(u_e,iVo),e(uv,dVo),e(uv,uX),e(uX,cVo),e(uv,fVo),e(N,mVo),e(N,bv),e(bv,b_e),e(b_e,gVo),e(bv,hVo),e(bv,bX),e(bX,pVo),e(bv,_Vo),e(N,uVo),e(N,vv),e(vv,v_e),e(v_e,bVo),e(vv,vVo),e(vv,vX),e(vX,FVo),e(vv,TVo),e(N,MVo),e(N,Fv),e(Fv,F_e),e(F_e,EVo),e(Fv,CVo),e(Fv,FX),e(FX,wVo),e(Fv,AVo),e(N,LVo),e(N,Tv),e(Tv,T_e),e(T_e,yVo),e(Tv,xVo),e(Tv,TX),e(TX,$Vo),e(Tv,kVo),e(N,SVo),e(N,Mv),e(Mv,M_e),e(M_e,RVo),e(Mv,PVo),e(Mv,MX),e(MX,BVo),e(Mv,IVo),e(N,NVo),e(N,Ev),e(Ev,E_e),e(E_e,qVo),e(Ev,jVo),e(Ev,EX),e(EX,DVo),e(Ev,GVo),e(N,OVo),e(N,Cv),e(Cv,C_e),e(C_e,VVo),e(Cv,XVo),e(Cv,CX),e(CX,zVo),e(Cv,QVo),e(N,WVo),e(N,wv),e(wv,w_e),e(w_e,HVo),e(wv,UVo),e(wv,wX),e(wX,JVo),e(wv,YVo),e(N,KVo),e(N,Av),e(Av,A_e),e(A_e,ZVo),e(Av,eXo),e(Av,AX),e(AX,oXo),e(Av,rXo),e(N,tXo),e(N,Lv),e(Lv,L_e),e(L_e,aXo),e(Lv,nXo),e(Lv,LX),e(LX,sXo),e(Lv,lXo),e(N,iXo),e(N,yv),e(yv,y_e),e(y_e,dXo),e(yv,cXo),e(yv,yX),e(yX,fXo),e(yv,mXo),e(N,gXo),e(N,xv),e(xv,x_e),e(x_e,hXo),e(xv,pXo),e(xv,xX),e(xX,_Xo),e(xv,uXo),e(N,bXo),e(N,$v),e($v,$_e),e($_e,vXo),e($v,FXo),e($v,$X),e($X,TXo),e($v,MXo),e(N,EXo),e(N,kv),e(kv,k_e),e(k_e,CXo),e(kv,wXo),e(kv,kX),e(kX,AXo),e(kv,LXo),e(N,yXo),e(N,Sv),e(Sv,S_e),e(S_e,xXo),e(Sv,$Xo),e(Sv,SX),e(SX,kXo),e(Sv,SXo),e(N,RXo),e(N,Rv),e(Rv,R_e),e(R_e,PXo),e(Rv,BXo),e(Rv,RX),e(RX,IXo),e(Rv,NXo),e(N,qXo),e(N,Pv),e(Pv,P_e),e(P_e,jXo),e(Pv,DXo),e(Pv,PX),e(PX,GXo),e(Pv,OXo),e(N,VXo),e(N,Bv),e(Bv,B_e),e(B_e,XXo),e(Bv,zXo),e(Bv,BX),e(BX,QXo),e(Bv,WXo),e(N,HXo),e(N,Iv),e(Iv,I_e),e(I_e,UXo),e(Iv,JXo),e(Iv,IX),e(IX,YXo),e(Iv,KXo),e(N,ZXo),e(N,Nv),e(Nv,N_e),e(N_e,ezo),e(Nv,ozo),e(Nv,NX),e(NX,rzo),e(Nv,tzo),e(N,azo),e(N,qv),e(qv,q_e),e(q_e,nzo),e(qv,szo),e(qv,qX),e(qX,lzo),e(qv,izo),e(N,dzo),e(N,jv),e(jv,j_e),e(j_e,czo),e(jv,fzo),e(jv,jX),e(jX,mzo),e(jv,gzo),e(N,hzo),e(N,Dv),e(Dv,D_e),e(D_e,pzo),e(Dv,_zo),e(Dv,DX),e(DX,uzo),e(Dv,bzo),e(N,vzo),e(N,Gv),e(Gv,G_e),e(G_e,Fzo),e(Gv,Tzo),e(Gv,GX),e(GX,Mzo),e(Gv,Ezo),e(oo,Czo),e(oo,Ov),e(Ov,wzo),e(Ov,O_e),e(O_e,Azo),e(Ov,Lzo),e(Ov,V_e),e(V_e,yzo),e(oo,xzo),M(Vv,oo,null),b(f,uXe,u),b(f,ad,u),e(ad,Xv),e(Xv,X_e),M(ny,X_e,null),e(ad,$zo),e(ad,z_e),e(z_e,kzo),b(f,bXe,u),b(f,Bo,u),M(sy,Bo,null),e(Bo,Szo),e(Bo,nd),e(nd,Rzo),e(nd,OX),e(OX,Pzo),e(nd,Bzo),e(nd,VX),e(VX,Izo),e(nd,Nzo),e(Bo,qzo),e(Bo,ly),e(ly,jzo),e(ly,Q_e),e(Q_e,Dzo),e(ly,Gzo),e(Bo,Ozo),e(Bo,gt),M(iy,gt,null),e(gt,Vzo),e(gt,W_e),e(W_e,Xzo),e(gt,zzo),e(gt,sd),e(sd,Qzo),e(sd,H_e),e(H_e,Wzo),e(sd,Hzo),e(sd,XX),e(XX,Uzo),e(sd,Jzo),e(gt,Yzo),M(zv,gt,null),e(Bo,Kzo),e(Bo,ro),M(dy,ro,null),e(ro,Zzo),e(ro,U_e),e(U_e,eQo),e(ro,oQo),e(ro,Ga),e(Ga,rQo),e(Ga,J_e),e(J_e,tQo),e(Ga,aQo),e(Ga,Y_e),e(Y_e,nQo),e(Ga,sQo),e(Ga,K_e),e(K_e,lQo),e(Ga,iQo),e(ro,dQo),e(ro,Z),e(Z,Qv),e(Qv,Z_e),e(Z_e,cQo),e(Qv,fQo),e(Qv,zX),e(zX,mQo),e(Qv,gQo),e(Z,hQo),e(Z,Wv),e(Wv,eue),e(eue,pQo),e(Wv,_Qo),e(Wv,QX),e(QX,uQo),e(Wv,bQo),e(Z,vQo),e(Z,Hv),e(Hv,oue),e(oue,FQo),e(Hv,TQo),e(Hv,WX),e(WX,MQo),e(Hv,EQo),e(Z,CQo),e(Z,Uv),e(Uv,rue),e(rue,wQo),e(Uv,AQo),e(Uv,HX),e(HX,LQo),e(Uv,yQo),e(Z,xQo),e(Z,Jv),e(Jv,tue),e(tue,$Qo),e(Jv,kQo),e(Jv,UX),e(UX,SQo),e(Jv,RQo),e(Z,PQo),e(Z,Yv),e(Yv,aue),e(aue,BQo),e(Yv,IQo),e(Yv,JX),e(JX,NQo),e(Yv,qQo),e(Z,jQo),e(Z,Kv),e(Kv,nue),e(nue,DQo),e(Kv,GQo),e(Kv,YX),e(YX,OQo),e(Kv,VQo),e(Z,XQo),e(Z,Zv),e(Zv,sue),e(sue,zQo),e(Zv,QQo),e(Zv,KX),e(KX,WQo),e(Zv,HQo),e(Z,UQo),e(Z,eF),e(eF,lue),e(lue,JQo),e(eF,YQo),e(eF,ZX),e(ZX,KQo),e(eF,ZQo),e(Z,eWo),e(Z,oF),e(oF,iue),e(iue,oWo),e(oF,rWo),e(oF,ez),e(ez,tWo),e(oF,aWo),e(Z,nWo),e(Z,rF),e(rF,due),e(due,sWo),e(rF,lWo),e(rF,oz),e(oz,iWo),e(rF,dWo),e(Z,cWo),e(Z,tF),e(tF,cue),e(cue,fWo),e(tF,mWo),e(tF,rz),e(rz,gWo),e(tF,hWo),e(Z,pWo),e(Z,aF),e(aF,fue),e(fue,_Wo),e(aF,uWo),e(aF,tz),e(tz,bWo),e(aF,vWo),e(Z,FWo),e(Z,nF),e(nF,mue),e(mue,TWo),e(nF,MWo),e(nF,az),e(az,EWo),e(nF,CWo),e(Z,wWo),e(Z,sF),e(sF,gue),e(gue,AWo),e(sF,LWo),e(sF,nz),e(nz,yWo),e(sF,xWo),e(Z,$Wo),e(Z,lF),e(lF,hue),e(hue,kWo),e(lF,SWo),e(lF,sz),e(sz,RWo),e(lF,PWo),e(Z,BWo),e(Z,iF),e(iF,pue),e(pue,IWo),e(iF,NWo),e(iF,lz),e(lz,qWo),e(iF,jWo),e(Z,DWo),e(Z,dF),e(dF,_ue),e(_ue,GWo),e(dF,OWo),e(dF,iz),e(iz,VWo),e(dF,XWo),e(Z,zWo),e(Z,cF),e(cF,uue),e(uue,QWo),e(cF,WWo),e(cF,dz),e(dz,HWo),e(cF,UWo),e(Z,JWo),e(Z,fF),e(fF,bue),e(bue,YWo),e(fF,KWo),e(fF,cz),e(cz,ZWo),e(fF,eHo),e(Z,oHo),e(Z,mF),e(mF,vue),e(vue,rHo),e(mF,tHo),e(mF,fz),e(fz,aHo),e(mF,nHo),e(Z,sHo),e(Z,gF),e(gF,Fue),e(Fue,lHo),e(gF,iHo),e(gF,mz),e(mz,dHo),e(gF,cHo),e(Z,fHo),e(Z,hF),e(hF,Tue),e(Tue,mHo),e(hF,gHo),e(hF,gz),e(gz,hHo),e(hF,pHo),e(Z,_Ho),e(Z,pF),e(pF,Mue),e(Mue,uHo),e(pF,bHo),e(pF,hz),e(hz,vHo),e(pF,FHo),e(Z,THo),e(Z,_F),e(_F,Eue),e(Eue,MHo),e(_F,EHo),e(_F,pz),e(pz,CHo),e(_F,wHo),e(Z,AHo),e(Z,uF),e(uF,Cue),e(Cue,LHo),e(uF,yHo),e(uF,_z),e(_z,xHo),e(uF,$Ho),e(Z,kHo),e(Z,bF),e(bF,wue),e(wue,SHo),e(bF,RHo),e(bF,uz),e(uz,PHo),e(bF,BHo),e(Z,IHo),e(Z,vF),e(vF,Aue),e(Aue,NHo),e(vF,qHo),e(vF,bz),e(bz,jHo),e(vF,DHo),e(Z,GHo),e(Z,FF),e(FF,Lue),e(Lue,OHo),e(FF,VHo),e(FF,vz),e(vz,XHo),e(FF,zHo),e(Z,QHo),e(Z,TF),e(TF,yue),e(yue,WHo),e(TF,HHo),e(TF,Fz),e(Fz,UHo),e(TF,JHo),e(ro,YHo),e(ro,MF),e(MF,KHo),e(MF,xue),e(xue,ZHo),e(MF,eUo),e(MF,$ue),e($ue,oUo),e(ro,rUo),M(EF,ro,null),b(f,vXe,u),b(f,ld,u),e(ld,CF),e(CF,kue),M(cy,kue,null),e(ld,tUo),e(ld,Sue),e(Sue,aUo),b(f,FXe,u),b(f,Io,u),M(fy,Io,null),e(Io,nUo),e(Io,id),e(id,sUo),e(id,Tz),e(Tz,lUo),e(id,iUo),e(id,Mz),e(Mz,dUo),e(id,cUo),e(Io,fUo),e(Io,my),e(my,mUo),e(my,Rue),e(Rue,gUo),e(my,hUo),e(Io,pUo),e(Io,ht),M(gy,ht,null),e(ht,_Uo),e(ht,Pue),e(Pue,uUo),e(ht,bUo),e(ht,dd),e(dd,vUo),e(dd,Bue),e(Bue,FUo),e(dd,TUo),e(dd,Ez),e(Ez,MUo),e(dd,EUo),e(ht,CUo),M(wF,ht,null),e(Io,wUo),e(Io,to),M(hy,to,null),e(to,AUo),e(to,Iue),e(Iue,LUo),e(to,yUo),e(to,Oa),e(Oa,xUo),e(Oa,Nue),e(Nue,$Uo),e(Oa,kUo),e(Oa,que),e(que,SUo),e(Oa,RUo),e(Oa,jue),e(jue,PUo),e(Oa,BUo),e(to,IUo),e(to,No),e(No,AF),e(AF,Due),e(Due,NUo),e(AF,qUo),e(AF,Cz),e(Cz,jUo),e(AF,DUo),e(No,GUo),e(No,LF),e(LF,Gue),e(Gue,OUo),e(LF,VUo),e(LF,wz),e(wz,XUo),e(LF,zUo),e(No,QUo),e(No,yF),e(yF,Oue),e(Oue,WUo),e(yF,HUo),e(yF,Az),e(Az,UUo),e(yF,JUo),e(No,YUo),e(No,xF),e(xF,Vue),e(Vue,KUo),e(xF,ZUo),e(xF,Lz),e(Lz,eJo),e(xF,oJo),e(No,rJo),e(No,$F),e($F,Xue),e(Xue,tJo),e($F,aJo),e($F,yz),e(yz,nJo),e($F,sJo),e(No,lJo),e(No,kF),e(kF,zue),e(zue,iJo),e(kF,dJo),e(kF,xz),e(xz,cJo),e(kF,fJo),e(to,mJo),e(to,SF),e(SF,gJo),e(SF,Que),e(Que,hJo),e(SF,pJo),e(SF,Wue),e(Wue,_Jo),e(to,uJo),M(RF,to,null),b(f,TXe,u),b(f,cd,u),e(cd,PF),e(PF,Hue),M(py,Hue,null),e(cd,bJo),e(cd,Uue),e(Uue,vJo),b(f,MXe,u),b(f,qo,u),M(_y,qo,null),e(qo,FJo),e(qo,fd),e(fd,TJo),e(fd,$z),e($z,MJo),e(fd,EJo),e(fd,kz),e(kz,CJo),e(fd,wJo),e(qo,AJo),e(qo,uy),e(uy,LJo),e(uy,Jue),e(Jue,yJo),e(uy,xJo),e(qo,$Jo),e(qo,pt),M(by,pt,null),e(pt,kJo),e(pt,Yue),e(Yue,SJo),e(pt,RJo),e(pt,md),e(md,PJo),e(md,Kue),e(Kue,BJo),e(md,IJo),e(md,Sz),e(Sz,NJo),e(md,qJo),e(pt,jJo),M(BF,pt,null),e(qo,DJo),e(qo,ao),M(vy,ao,null),e(ao,GJo),e(ao,Zue),e(Zue,OJo),e(ao,VJo),e(ao,Va),e(Va,XJo),e(Va,e2e),e(e2e,zJo),e(Va,QJo),e(Va,o2e),e(o2e,WJo),e(Va,HJo),e(Va,r2e),e(r2e,UJo),e(Va,JJo),e(ao,YJo),e(ao,U),e(U,IF),e(IF,t2e),e(t2e,KJo),e(IF,ZJo),e(IF,Rz),e(Rz,eYo),e(IF,oYo),e(U,rYo),e(U,NF),e(NF,a2e),e(a2e,tYo),e(NF,aYo),e(NF,Pz),e(Pz,nYo),e(NF,sYo),e(U,lYo),e(U,qF),e(qF,n2e),e(n2e,iYo),e(qF,dYo),e(qF,Bz),e(Bz,cYo),e(qF,fYo),e(U,mYo),e(U,jF),e(jF,s2e),e(s2e,gYo),e(jF,hYo),e(jF,Iz),e(Iz,pYo),e(jF,_Yo),e(U,uYo),e(U,DF),e(DF,l2e),e(l2e,bYo),e(DF,vYo),e(DF,Nz),e(Nz,FYo),e(DF,TYo),e(U,MYo),e(U,GF),e(GF,i2e),e(i2e,EYo),e(GF,CYo),e(GF,qz),e(qz,wYo),e(GF,AYo),e(U,LYo),e(U,OF),e(OF,d2e),e(d2e,yYo),e(OF,xYo),e(OF,jz),e(jz,$Yo),e(OF,kYo),e(U,SYo),e(U,VF),e(VF,c2e),e(c2e,RYo),e(VF,PYo),e(VF,Dz),e(Dz,BYo),e(VF,IYo),e(U,NYo),e(U,XF),e(XF,f2e),e(f2e,qYo),e(XF,jYo),e(XF,Gz),e(Gz,DYo),e(XF,GYo),e(U,OYo),e(U,zF),e(zF,m2e),e(m2e,VYo),e(zF,XYo),e(zF,Oz),e(Oz,zYo),e(zF,QYo),e(U,WYo),e(U,QF),e(QF,g2e),e(g2e,HYo),e(QF,UYo),e(QF,Vz),e(Vz,JYo),e(QF,YYo),e(U,KYo),e(U,WF),e(WF,h2e),e(h2e,ZYo),e(WF,eKo),e(WF,Xz),e(Xz,oKo),e(WF,rKo),e(U,tKo),e(U,HF),e(HF,p2e),e(p2e,aKo),e(HF,nKo),e(HF,zz),e(zz,sKo),e(HF,lKo),e(U,iKo),e(U,UF),e(UF,_2e),e(_2e,dKo),e(UF,cKo),e(UF,Qz),e(Qz,fKo),e(UF,mKo),e(U,gKo),e(U,JF),e(JF,u2e),e(u2e,hKo),e(JF,pKo),e(JF,Wz),e(Wz,_Ko),e(JF,uKo),e(U,bKo),e(U,YF),e(YF,b2e),e(b2e,vKo),e(YF,FKo),e(YF,Hz),e(Hz,TKo),e(YF,MKo),e(U,EKo),e(U,KF),e(KF,v2e),e(v2e,CKo),e(KF,wKo),e(KF,Uz),e(Uz,AKo),e(KF,LKo),e(U,yKo),e(U,ZF),e(ZF,F2e),e(F2e,xKo),e(ZF,$Ko),e(ZF,Jz),e(Jz,kKo),e(ZF,SKo),e(U,RKo),e(U,e6),e(e6,T2e),e(T2e,PKo),e(e6,BKo),e(e6,Yz),e(Yz,IKo),e(e6,NKo),e(U,qKo),e(U,o6),e(o6,M2e),e(M2e,jKo),e(o6,DKo),e(o6,Kz),e(Kz,GKo),e(o6,OKo),e(U,VKo),e(U,r6),e(r6,E2e),e(E2e,XKo),e(r6,zKo),e(r6,Zz),e(Zz,QKo),e(r6,WKo),e(U,HKo),e(U,t6),e(t6,C2e),e(C2e,UKo),e(t6,JKo),e(t6,eQ),e(eQ,YKo),e(t6,KKo),e(U,ZKo),e(U,a6),e(a6,w2e),e(w2e,eZo),e(a6,oZo),e(a6,oQ),e(oQ,rZo),e(a6,tZo),e(U,aZo),e(U,n6),e(n6,A2e),e(A2e,nZo),e(n6,sZo),e(n6,rQ),e(rQ,lZo),e(n6,iZo),e(U,dZo),e(U,s6),e(s6,L2e),e(L2e,cZo),e(s6,fZo),e(s6,tQ),e(tQ,mZo),e(s6,gZo),e(U,hZo),e(U,l6),e(l6,y2e),e(y2e,pZo),e(l6,_Zo),e(l6,aQ),e(aQ,uZo),e(l6,bZo),e(U,vZo),e(U,i6),e(i6,x2e),e(x2e,FZo),e(i6,TZo),e(i6,nQ),e(nQ,MZo),e(i6,EZo),e(U,CZo),e(U,d6),e(d6,$2e),e($2e,wZo),e(d6,AZo),e(d6,sQ),e(sQ,LZo),e(d6,yZo),e(U,xZo),e(U,c6),e(c6,k2e),e(k2e,$Zo),e(c6,kZo),e(c6,lQ),e(lQ,SZo),e(c6,RZo),e(U,PZo),e(U,f6),e(f6,S2e),e(S2e,BZo),e(f6,IZo),e(f6,iQ),e(iQ,NZo),e(f6,qZo),e(U,jZo),e(U,m6),e(m6,R2e),e(R2e,DZo),e(m6,GZo),e(m6,dQ),e(dQ,OZo),e(m6,VZo),e(U,XZo),e(U,g6),e(g6,P2e),e(P2e,zZo),e(g6,QZo),e(g6,cQ),e(cQ,WZo),e(g6,HZo),e(U,UZo),e(U,h6),e(h6,B2e),e(B2e,JZo),e(h6,YZo),e(h6,fQ),e(fQ,KZo),e(h6,ZZo),e(U,eer),e(U,p6),e(p6,I2e),e(I2e,oer),e(p6,rer),e(p6,mQ),e(mQ,ter),e(p6,aer),e(U,ner),e(U,_6),e(_6,N2e),e(N2e,ser),e(_6,ler),e(_6,gQ),e(gQ,ier),e(_6,der),e(U,cer),e(U,u6),e(u6,q2e),e(q2e,fer),e(u6,mer),e(u6,hQ),e(hQ,ger),e(u6,her),e(ao,per),e(ao,b6),e(b6,_er),e(b6,j2e),e(j2e,uer),e(b6,ber),e(b6,D2e),e(D2e,ver),e(ao,Fer),M(v6,ao,null),b(f,EXe,u),b(f,gd,u),e(gd,F6),e(F6,G2e),M(Fy,G2e,null),e(gd,Ter),e(gd,O2e),e(O2e,Mer),b(f,CXe,u),b(f,jo,u),M(Ty,jo,null),e(jo,Eer),e(jo,hd),e(hd,Cer),e(hd,pQ),e(pQ,wer),e(hd,Aer),e(hd,_Q),e(_Q,Ler),e(hd,yer),e(jo,xer),e(jo,My),e(My,$er),e(My,V2e),e(V2e,ker),e(My,Ser),e(jo,Rer),e(jo,_t),M(Ey,_t,null),e(_t,Per),e(_t,X2e),e(X2e,Ber),e(_t,Ier),e(_t,pd),e(pd,Ner),e(pd,z2e),e(z2e,qer),e(pd,jer),e(pd,uQ),e(uQ,Der),e(pd,Ger),e(_t,Oer),M(T6,_t,null),e(jo,Ver),e(jo,no),M(Cy,no,null),e(no,Xer),e(no,Q2e),e(Q2e,zer),e(no,Qer),e(no,Xa),e(Xa,Wer),e(Xa,W2e),e(W2e,Her),e(Xa,Uer),e(Xa,H2e),e(H2e,Jer),e(Xa,Yer),e(Xa,U2e),e(U2e,Ker),e(Xa,Zer),e(no,eor),e(no,V),e(V,M6),e(M6,J2e),e(J2e,oor),e(M6,ror),e(M6,bQ),e(bQ,tor),e(M6,aor),e(V,nor),e(V,E6),e(E6,Y2e),e(Y2e,sor),e(E6,lor),e(E6,vQ),e(vQ,ior),e(E6,dor),e(V,cor),e(V,C6),e(C6,K2e),e(K2e,mor),e(C6,gor),e(C6,FQ),e(FQ,hor),e(C6,por),e(V,_or),e(V,w6),e(w6,Z2e),e(Z2e,uor),e(w6,bor),e(w6,TQ),e(TQ,vor),e(w6,For),e(V,Tor),e(V,A6),e(A6,e1e),e(e1e,Mor),e(A6,Eor),e(A6,MQ),e(MQ,Cor),e(A6,wor),e(V,Aor),e(V,L6),e(L6,o1e),e(o1e,Lor),e(L6,yor),e(L6,EQ),e(EQ,xor),e(L6,$or),e(V,kor),e(V,y6),e(y6,r1e),e(r1e,Sor),e(y6,Ror),e(y6,CQ),e(CQ,Por),e(y6,Bor),e(V,Ior),e(V,x6),e(x6,t1e),e(t1e,Nor),e(x6,qor),e(x6,wQ),e(wQ,jor),e(x6,Dor),e(V,Gor),e(V,$6),e($6,a1e),e(a1e,Oor),e($6,Vor),e($6,AQ),e(AQ,Xor),e($6,zor),e(V,Qor),e(V,k6),e(k6,n1e),e(n1e,Wor),e(k6,Hor),e(k6,LQ),e(LQ,Uor),e(k6,Jor),e(V,Yor),e(V,S6),e(S6,s1e),e(s1e,Kor),e(S6,Zor),e(S6,yQ),e(yQ,err),e(S6,orr),e(V,rrr),e(V,R6),e(R6,l1e),e(l1e,trr),e(R6,arr),e(R6,xQ),e(xQ,nrr),e(R6,srr),e(V,lrr),e(V,P6),e(P6,i1e),e(i1e,irr),e(P6,drr),e(P6,$Q),e($Q,crr),e(P6,frr),e(V,mrr),e(V,B6),e(B6,d1e),e(d1e,grr),e(B6,hrr),e(B6,kQ),e(kQ,prr),e(B6,_rr),e(V,urr),e(V,I6),e(I6,c1e),e(c1e,brr),e(I6,vrr),e(I6,SQ),e(SQ,Frr),e(I6,Trr),e(V,Mrr),e(V,N6),e(N6,f1e),e(f1e,Err),e(N6,Crr),e(N6,RQ),e(RQ,wrr),e(N6,Arr),e(V,Lrr),e(V,q6),e(q6,m1e),e(m1e,yrr),e(q6,xrr),e(q6,PQ),e(PQ,$rr),e(q6,krr),e(V,Srr),e(V,j6),e(j6,g1e),e(g1e,Rrr),e(j6,Prr),e(j6,BQ),e(BQ,Brr),e(j6,Irr),e(V,Nrr),e(V,D6),e(D6,h1e),e(h1e,qrr),e(D6,jrr),e(D6,IQ),e(IQ,Drr),e(D6,Grr),e(V,Orr),e(V,G6),e(G6,p1e),e(p1e,Vrr),e(G6,Xrr),e(G6,NQ),e(NQ,zrr),e(G6,Qrr),e(V,Wrr),e(V,O6),e(O6,_1e),e(_1e,Hrr),e(O6,Urr),e(O6,qQ),e(qQ,Jrr),e(O6,Yrr),e(V,Krr),e(V,V6),e(V6,u1e),e(u1e,Zrr),e(V6,etr),e(V6,jQ),e(jQ,otr),e(V6,rtr),e(V,ttr),e(V,X6),e(X6,b1e),e(b1e,atr),e(X6,ntr),e(X6,DQ),e(DQ,str),e(X6,ltr),e(V,itr),e(V,z6),e(z6,v1e),e(v1e,dtr),e(z6,ctr),e(z6,GQ),e(GQ,ftr),e(z6,mtr),e(V,gtr),e(V,Q6),e(Q6,F1e),e(F1e,htr),e(Q6,ptr),e(Q6,OQ),e(OQ,_tr),e(Q6,utr),e(V,btr),e(V,W6),e(W6,T1e),e(T1e,vtr),e(W6,Ftr),e(W6,VQ),e(VQ,Ttr),e(W6,Mtr),e(V,Etr),e(V,H6),e(H6,M1e),e(M1e,Ctr),e(H6,wtr),e(H6,XQ),e(XQ,Atr),e(H6,Ltr),e(V,ytr),e(V,U6),e(U6,E1e),e(E1e,xtr),e(U6,$tr),e(U6,zQ),e(zQ,ktr),e(U6,Str),e(V,Rtr),e(V,J6),e(J6,C1e),e(C1e,Ptr),e(J6,Btr),e(J6,QQ),e(QQ,Itr),e(J6,Ntr),e(V,qtr),e(V,Y6),e(Y6,w1e),e(w1e,jtr),e(Y6,Dtr),e(Y6,WQ),e(WQ,Gtr),e(Y6,Otr),e(V,Vtr),e(V,K6),e(K6,A1e),e(A1e,Xtr),e(K6,ztr),e(K6,HQ),e(HQ,Qtr),e(K6,Wtr),e(V,Htr),e(V,Z6),e(Z6,L1e),e(L1e,Utr),e(Z6,Jtr),e(Z6,UQ),e(UQ,Ytr),e(Z6,Ktr),e(V,Ztr),e(V,eT),e(eT,y1e),e(y1e,ear),e(eT,oar),e(eT,JQ),e(JQ,rar),e(eT,tar),e(V,aar),e(V,oT),e(oT,x1e),e(x1e,nar),e(oT,sar),e(oT,YQ),e(YQ,lar),e(oT,iar),e(V,dar),e(V,rT),e(rT,$1e),e($1e,car),e(rT,far),e(rT,KQ),e(KQ,mar),e(rT,gar),e(V,har),e(V,tT),e(tT,k1e),e(k1e,par),e(tT,_ar),e(tT,ZQ),e(ZQ,uar),e(tT,bar),e(V,Far),e(V,aT),e(aT,S1e),e(S1e,Tar),e(aT,Mar),e(aT,eW),e(eW,Ear),e(aT,Car),e(V,war),e(V,nT),e(nT,R1e),e(R1e,Aar),e(nT,Lar),e(nT,oW),e(oW,yar),e(nT,xar),e(V,$ar),e(V,sT),e(sT,P1e),e(P1e,kar),e(sT,Sar),e(sT,rW),e(rW,Rar),e(sT,Par),e(V,Bar),e(V,lT),e(lT,B1e),e(B1e,Iar),e(lT,Nar),e(lT,tW),e(tW,qar),e(lT,jar),e(V,Dar),e(V,iT),e(iT,I1e),e(I1e,Gar),e(iT,Oar),e(iT,aW),e(aW,Var),e(iT,Xar),e(V,zar),e(V,dT),e(dT,N1e),e(N1e,Qar),e(dT,War),e(dT,nW),e(nW,Har),e(dT,Uar),e(no,Jar),e(no,cT),e(cT,Yar),e(cT,q1e),e(q1e,Kar),e(cT,Zar),e(cT,j1e),e(j1e,enr),e(no,onr),M(fT,no,null),b(f,wXe,u),b(f,_d,u),e(_d,mT),e(mT,D1e),M(wy,D1e,null),e(_d,rnr),e(_d,G1e),e(G1e,tnr),b(f,AXe,u),b(f,Do,u),M(Ay,Do,null),e(Do,anr),e(Do,ud),e(ud,nnr),e(ud,sW),e(sW,snr),e(ud,lnr),e(ud,lW),e(lW,inr),e(ud,dnr),e(Do,cnr),e(Do,Ly),e(Ly,fnr),e(Ly,O1e),e(O1e,mnr),e(Ly,gnr),e(Do,hnr),e(Do,ut),M(yy,ut,null),e(ut,pnr),e(ut,V1e),e(V1e,_nr),e(ut,unr),e(ut,bd),e(bd,bnr),e(bd,X1e),e(X1e,vnr),e(bd,Fnr),e(bd,iW),e(iW,Tnr),e(bd,Mnr),e(ut,Enr),M(gT,ut,null),e(Do,Cnr),e(Do,so),M(xy,so,null),e(so,wnr),e(so,z1e),e(z1e,Anr),e(so,Lnr),e(so,za),e(za,ynr),e(za,Q1e),e(Q1e,xnr),e(za,$nr),e(za,W1e),e(W1e,knr),e(za,Snr),e(za,H1e),e(H1e,Rnr),e(za,Pnr),e(so,Bnr),e(so,U1e),e(U1e,hT),e(hT,J1e),e(J1e,Inr),e(hT,Nnr),e(hT,dW),e(dW,qnr),e(hT,jnr),e(so,Dnr),e(so,pT),e(pT,Gnr),e(pT,Y1e),e(Y1e,Onr),e(pT,Vnr),e(pT,K1e),e(K1e,Xnr),e(so,znr),M(_T,so,null),b(f,LXe,u),b(f,vd,u),e(vd,uT),e(uT,Z1e),M($y,Z1e,null),e(vd,Qnr),e(vd,ebe),e(ebe,Wnr),b(f,yXe,u),b(f,Go,u),M(ky,Go,null),e(Go,Hnr),e(Go,Fd),e(Fd,Unr),e(Fd,cW),e(cW,Jnr),e(Fd,Ynr),e(Fd,fW),e(fW,Knr),e(Fd,Znr),e(Go,esr),e(Go,Sy),e(Sy,osr),e(Sy,obe),e(obe,rsr),e(Sy,tsr),e(Go,asr),e(Go,bt),M(Ry,bt,null),e(bt,nsr),e(bt,rbe),e(rbe,ssr),e(bt,lsr),e(bt,Td),e(Td,isr),e(Td,tbe),e(tbe,dsr),e(Td,csr),e(Td,mW),e(mW,fsr),e(Td,msr),e(bt,gsr),M(bT,bt,null),e(Go,hsr),e(Go,lo),M(Py,lo,null),e(lo,psr),e(lo,abe),e(abe,_sr),e(lo,usr),e(lo,Qa),e(Qa,bsr),e(Qa,nbe),e(nbe,vsr),e(Qa,Fsr),e(Qa,sbe),e(sbe,Tsr),e(Qa,Msr),e(Qa,lbe),e(lbe,Esr),e(Qa,Csr),e(lo,wsr),e(lo,ve),e(ve,vT),e(vT,ibe),e(ibe,Asr),e(vT,Lsr),e(vT,gW),e(gW,ysr),e(vT,xsr),e(ve,$sr),e(ve,FT),e(FT,dbe),e(dbe,ksr),e(FT,Ssr),e(FT,hW),e(hW,Rsr),e(FT,Psr),e(ve,Bsr),e(ve,TT),e(TT,cbe),e(cbe,Isr),e(TT,Nsr),e(TT,pW),e(pW,qsr),e(TT,jsr),e(ve,Dsr),e(ve,MT),e(MT,fbe),e(fbe,Gsr),e(MT,Osr),e(MT,_W),e(_W,Vsr),e(MT,Xsr),e(ve,zsr),e(ve,Ws),e(Ws,mbe),e(mbe,Qsr),e(Ws,Wsr),e(Ws,uW),e(uW,Hsr),e(Ws,Usr),e(Ws,bW),e(bW,Jsr),e(Ws,Ysr),e(ve,Ksr),e(ve,ET),e(ET,gbe),e(gbe,Zsr),e(ET,elr),e(ET,vW),e(vW,olr),e(ET,rlr),e(ve,tlr),e(ve,Hs),e(Hs,hbe),e(hbe,alr),e(Hs,nlr),e(Hs,FW),e(FW,slr),e(Hs,llr),e(Hs,TW),e(TW,ilr),e(Hs,dlr),e(ve,clr),e(ve,CT),e(CT,pbe),e(pbe,flr),e(CT,mlr),e(CT,MW),e(MW,glr),e(CT,hlr),e(ve,plr),e(ve,vt),e(vt,_be),e(_be,_lr),e(vt,ulr),e(vt,EW),e(EW,blr),e(vt,vlr),e(vt,CW),e(CW,Flr),e(vt,Tlr),e(vt,wW),e(wW,Mlr),e(vt,Elr),e(ve,Clr),e(ve,wT),e(wT,ube),e(ube,wlr),e(wT,Alr),e(wT,AW),e(AW,Llr),e(wT,ylr),e(ve,xlr),e(ve,AT),e(AT,bbe),e(bbe,$lr),e(AT,klr),e(AT,LW),e(LW,Slr),e(AT,Rlr),e(ve,Plr),e(ve,LT),e(LT,vbe),e(vbe,Blr),e(LT,Ilr),e(LT,yW),e(yW,Nlr),e(LT,qlr),e(ve,jlr),e(ve,yT),e(yT,Fbe),e(Fbe,Dlr),e(yT,Glr),e(yT,xW),e(xW,Olr),e(yT,Vlr),e(ve,Xlr),e(ve,xT),e(xT,Tbe),e(Tbe,zlr),e(xT,Qlr),e(xT,$W),e($W,Wlr),e(xT,Hlr),e(ve,Ulr),e(ve,$T),e($T,Mbe),e(Mbe,Jlr),e($T,Ylr),e($T,kW),e(kW,Klr),e($T,Zlr),e(ve,eir),e(ve,kT),e(kT,Ebe),e(Ebe,oir),e(kT,rir),e(kT,SW),e(SW,tir),e(kT,air),e(lo,nir),e(lo,ST),e(ST,sir),e(ST,Cbe),e(Cbe,lir),e(ST,iir),e(ST,wbe),e(wbe,dir),e(lo,cir),M(RT,lo,null),b(f,xXe,u),b(f,Md,u),e(Md,PT),e(PT,Abe),M(By,Abe,null),e(Md,fir),e(Md,Lbe),e(Lbe,mir),b(f,$Xe,u),b(f,Oo,u),M(Iy,Oo,null),e(Oo,gir),e(Oo,Ed),e(Ed,hir),e(Ed,RW),e(RW,pir),e(Ed,_ir),e(Ed,PW),e(PW,uir),e(Ed,bir),e(Oo,vir),e(Oo,Ny),e(Ny,Fir),e(Ny,ybe),e(ybe,Tir),e(Ny,Mir),e(Oo,Eir),e(Oo,Ft),M(qy,Ft,null),e(Ft,Cir),e(Ft,xbe),e(xbe,wir),e(Ft,Air),e(Ft,Cd),e(Cd,Lir),e(Cd,$be),e($be,yir),e(Cd,xir),e(Cd,BW),e(BW,$ir),e(Cd,kir),e(Ft,Sir),M(BT,Ft,null),e(Oo,Rir),e(Oo,io),M(jy,io,null),e(io,Pir),e(io,kbe),e(kbe,Bir),e(io,Iir),e(io,Wa),e(Wa,Nir),e(Wa,Sbe),e(Sbe,qir),e(Wa,jir),e(Wa,Rbe),e(Rbe,Dir),e(Wa,Gir),e(Wa,Pbe),e(Pbe,Oir),e(Wa,Vir),e(io,Xir),e(io,Bbe),e(Bbe,IT),e(IT,Ibe),e(Ibe,zir),e(IT,Qir),e(IT,IW),e(IW,Wir),e(IT,Hir),e(io,Uir),e(io,NT),e(NT,Jir),e(NT,Nbe),e(Nbe,Yir),e(NT,Kir),e(NT,qbe),e(qbe,Zir),e(io,edr),M(qT,io,null),b(f,kXe,u),b(f,wd,u),e(wd,jT),e(jT,jbe),M(Dy,jbe,null),e(wd,odr),e(wd,Dbe),e(Dbe,rdr),b(f,SXe,u),b(f,Vo,u),M(Gy,Vo,null),e(Vo,tdr),e(Vo,Ad),e(Ad,adr),e(Ad,NW),e(NW,ndr),e(Ad,sdr),e(Ad,qW),e(qW,ldr),e(Ad,idr),e(Vo,ddr),e(Vo,Oy),e(Oy,cdr),e(Oy,Gbe),e(Gbe,fdr),e(Oy,mdr),e(Vo,gdr),e(Vo,Tt),M(Vy,Tt,null),e(Tt,hdr),e(Tt,Obe),e(Obe,pdr),e(Tt,_dr),e(Tt,Ld),e(Ld,udr),e(Ld,Vbe),e(Vbe,bdr),e(Ld,vdr),e(Ld,jW),e(jW,Fdr),e(Ld,Tdr),e(Tt,Mdr),M(DT,Tt,null),e(Vo,Edr),e(Vo,co),M(Xy,co,null),e(co,Cdr),e(co,Xbe),e(Xbe,wdr),e(co,Adr),e(co,Ha),e(Ha,Ldr),e(Ha,zbe),e(zbe,ydr),e(Ha,xdr),e(Ha,Qbe),e(Qbe,$dr),e(Ha,kdr),e(Ha,Wbe),e(Wbe,Sdr),e(Ha,Rdr),e(co,Pdr),e(co,Hbe),e(Hbe,GT),e(GT,Ube),e(Ube,Bdr),e(GT,Idr),e(GT,DW),e(DW,Ndr),e(GT,qdr),e(co,jdr),e(co,OT),e(OT,Ddr),e(OT,Jbe),e(Jbe,Gdr),e(OT,Odr),e(OT,Ybe),e(Ybe,Vdr),e(co,Xdr),M(VT,co,null),b(f,RXe,u),b(f,yd,u),e(yd,XT),e(XT,Kbe),M(zy,Kbe,null),e(yd,zdr),e(yd,Zbe),e(Zbe,Qdr),b(f,PXe,u),b(f,Xo,u),M(Qy,Xo,null),e(Xo,Wdr),e(Xo,xd),e(xd,Hdr),e(xd,GW),e(GW,Udr),e(xd,Jdr),e(xd,OW),e(OW,Ydr),e(xd,Kdr),e(Xo,Zdr),e(Xo,Wy),e(Wy,ecr),e(Wy,eve),e(eve,ocr),e(Wy,rcr),e(Xo,tcr),e(Xo,Mt),M(Hy,Mt,null),e(Mt,acr),e(Mt,ove),e(ove,ncr),e(Mt,scr),e(Mt,$d),e($d,lcr),e($d,rve),e(rve,icr),e($d,dcr),e($d,VW),e(VW,ccr),e($d,fcr),e(Mt,mcr),M(zT,Mt,null),e(Xo,gcr),e(Xo,fo),M(Uy,fo,null),e(fo,hcr),e(fo,tve),e(tve,pcr),e(fo,_cr),e(fo,Ua),e(Ua,ucr),e(Ua,ave),e(ave,bcr),e(Ua,vcr),e(Ua,nve),e(nve,Fcr),e(Ua,Tcr),e(Ua,sve),e(sve,Mcr),e(Ua,Ecr),e(fo,Ccr),e(fo,Pe),e(Pe,QT),e(QT,lve),e(lve,wcr),e(QT,Acr),e(QT,XW),e(XW,Lcr),e(QT,ycr),e(Pe,xcr),e(Pe,WT),e(WT,ive),e(ive,$cr),e(WT,kcr),e(WT,zW),e(zW,Scr),e(WT,Rcr),e(Pe,Pcr),e(Pe,HT),e(HT,dve),e(dve,Bcr),e(HT,Icr),e(HT,QW),e(QW,Ncr),e(HT,qcr),e(Pe,jcr),e(Pe,UT),e(UT,cve),e(cve,Dcr),e(UT,Gcr),e(UT,WW),e(WW,Ocr),e(UT,Vcr),e(Pe,Xcr),e(Pe,JT),e(JT,fve),e(fve,zcr),e(JT,Qcr),e(JT,HW),e(HW,Wcr),e(JT,Hcr),e(Pe,Ucr),e(Pe,YT),e(YT,mve),e(mve,Jcr),e(YT,Ycr),e(YT,UW),e(UW,Kcr),e(YT,Zcr),e(Pe,efr),e(Pe,KT),e(KT,gve),e(gve,ofr),e(KT,rfr),e(KT,JW),e(JW,tfr),e(KT,afr),e(Pe,nfr),e(Pe,ZT),e(ZT,hve),e(hve,sfr),e(ZT,lfr),e(ZT,YW),e(YW,ifr),e(ZT,dfr),e(Pe,cfr),e(Pe,e7),e(e7,pve),e(pve,ffr),e(e7,mfr),e(e7,KW),e(KW,gfr),e(e7,hfr),e(fo,pfr),e(fo,o7),e(o7,_fr),e(o7,_ve),e(_ve,ufr),e(o7,bfr),e(o7,uve),e(uve,vfr),e(fo,Ffr),M(r7,fo,null),b(f,BXe,u),b(f,kd,u),e(kd,t7),e(t7,bve),M(Jy,bve,null),e(kd,Tfr),e(kd,vve),e(vve,Mfr),b(f,IXe,u),b(f,zo,u),M(Yy,zo,null),e(zo,Efr),e(zo,Sd),e(Sd,Cfr),e(Sd,ZW),e(ZW,wfr),e(Sd,Afr),e(Sd,eH),e(eH,Lfr),e(Sd,yfr),e(zo,xfr),e(zo,Ky),e(Ky,$fr),e(Ky,Fve),e(Fve,kfr),e(Ky,Sfr),e(zo,Rfr),e(zo,Et),M(Zy,Et,null),e(Et,Pfr),e(Et,Tve),e(Tve,Bfr),e(Et,Ifr),e(Et,Rd),e(Rd,Nfr),e(Rd,Mve),e(Mve,qfr),e(Rd,jfr),e(Rd,oH),e(oH,Dfr),e(Rd,Gfr),e(Et,Ofr),M(a7,Et,null),e(zo,Vfr),e(zo,mo),M(e9,mo,null),e(mo,Xfr),e(mo,Eve),e(Eve,zfr),e(mo,Qfr),e(mo,Ja),e(Ja,Wfr),e(Ja,Cve),e(Cve,Hfr),e(Ja,Ufr),e(Ja,wve),e(wve,Jfr),e(Ja,Yfr),e(Ja,Ave),e(Ave,Kfr),e(Ja,Zfr),e(mo,emr),e(mo,et),e(et,n7),e(n7,Lve),e(Lve,omr),e(n7,rmr),e(n7,rH),e(rH,tmr),e(n7,amr),e(et,nmr),e(et,s7),e(s7,yve),e(yve,smr),e(s7,lmr),e(s7,tH),e(tH,imr),e(s7,dmr),e(et,cmr),e(et,l7),e(l7,xve),e(xve,fmr),e(l7,mmr),e(l7,aH),e(aH,gmr),e(l7,hmr),e(et,pmr),e(et,i7),e(i7,$ve),e($ve,_mr),e(i7,umr),e(i7,nH),e(nH,bmr),e(i7,vmr),e(et,Fmr),e(et,d7),e(d7,kve),e(kve,Tmr),e(d7,Mmr),e(d7,sH),e(sH,Emr),e(d7,Cmr),e(mo,wmr),e(mo,c7),e(c7,Amr),e(c7,Sve),e(Sve,Lmr),e(c7,ymr),e(c7,Rve),e(Rve,xmr),e(mo,$mr),M(f7,mo,null),b(f,NXe,u),b(f,Pd,u),e(Pd,m7),e(m7,Pve),M(o9,Pve,null),e(Pd,kmr),e(Pd,Bve),e(Bve,Smr),b(f,qXe,u),b(f,Qo,u),M(r9,Qo,null),e(Qo,Rmr),e(Qo,Bd),e(Bd,Pmr),e(Bd,lH),e(lH,Bmr),e(Bd,Imr),e(Bd,iH),e(iH,Nmr),e(Bd,qmr),e(Qo,jmr),e(Qo,t9),e(t9,Dmr),e(t9,Ive),e(Ive,Gmr),e(t9,Omr),e(Qo,Vmr),e(Qo,Ct),M(a9,Ct,null),e(Ct,Xmr),e(Ct,Nve),e(Nve,zmr),e(Ct,Qmr),e(Ct,Id),e(Id,Wmr),e(Id,qve),e(qve,Hmr),e(Id,Umr),e(Id,dH),e(dH,Jmr),e(Id,Ymr),e(Ct,Kmr),M(g7,Ct,null),e(Qo,Zmr),e(Qo,go),M(n9,go,null),e(go,egr),e(go,jve),e(jve,ogr),e(go,rgr),e(go,Ya),e(Ya,tgr),e(Ya,Dve),e(Dve,agr),e(Ya,ngr),e(Ya,Gve),e(Gve,sgr),e(Ya,lgr),e(Ya,Ove),e(Ove,igr),e(Ya,dgr),e(go,cgr),e(go,Le),e(Le,h7),e(h7,Vve),e(Vve,fgr),e(h7,mgr),e(h7,cH),e(cH,ggr),e(h7,hgr),e(Le,pgr),e(Le,p7),e(p7,Xve),e(Xve,_gr),e(p7,ugr),e(p7,fH),e(fH,bgr),e(p7,vgr),e(Le,Fgr),e(Le,_7),e(_7,zve),e(zve,Tgr),e(_7,Mgr),e(_7,mH),e(mH,Egr),e(_7,Cgr),e(Le,wgr),e(Le,u7),e(u7,Qve),e(Qve,Agr),e(u7,Lgr),e(u7,gH),e(gH,ygr),e(u7,xgr),e(Le,$gr),e(Le,b7),e(b7,Wve),e(Wve,kgr),e(b7,Sgr),e(b7,hH),e(hH,Rgr),e(b7,Pgr),e(Le,Bgr),e(Le,v7),e(v7,Hve),e(Hve,Igr),e(v7,Ngr),e(v7,pH),e(pH,qgr),e(v7,jgr),e(Le,Dgr),e(Le,F7),e(F7,Uve),e(Uve,Ggr),e(F7,Ogr),e(F7,_H),e(_H,Vgr),e(F7,Xgr),e(Le,zgr),e(Le,T7),e(T7,Jve),e(Jve,Qgr),e(T7,Wgr),e(T7,uH),e(uH,Hgr),e(T7,Ugr),e(Le,Jgr),e(Le,M7),e(M7,Yve),e(Yve,Ygr),e(M7,Kgr),e(M7,bH),e(bH,Zgr),e(M7,ehr),e(Le,ohr),e(Le,E7),e(E7,Kve),e(Kve,rhr),e(E7,thr),e(E7,vH),e(vH,ahr),e(E7,nhr),e(go,shr),e(go,C7),e(C7,lhr),e(C7,Zve),e(Zve,ihr),e(C7,dhr),e(C7,eFe),e(eFe,chr),e(go,fhr),M(w7,go,null),b(f,jXe,u),b(f,Nd,u),e(Nd,A7),e(A7,oFe),M(s9,oFe,null),e(Nd,mhr),e(Nd,rFe),e(rFe,ghr),b(f,DXe,u),b(f,Wo,u),M(l9,Wo,null),e(Wo,hhr),e(Wo,qd),e(qd,phr),e(qd,FH),e(FH,_hr),e(qd,uhr),e(qd,TH),e(TH,bhr),e(qd,vhr),e(Wo,Fhr),e(Wo,i9),e(i9,Thr),e(i9,tFe),e(tFe,Mhr),e(i9,Ehr),e(Wo,Chr),e(Wo,wt),M(d9,wt,null),e(wt,whr),e(wt,aFe),e(aFe,Ahr),e(wt,Lhr),e(wt,jd),e(jd,yhr),e(jd,nFe),e(nFe,xhr),e(jd,$hr),e(jd,MH),e(MH,khr),e(jd,Shr),e(wt,Rhr),M(L7,wt,null),e(Wo,Phr),e(Wo,ho),M(c9,ho,null),e(ho,Bhr),e(ho,sFe),e(sFe,Ihr),e(ho,Nhr),e(ho,Ka),e(Ka,qhr),e(Ka,lFe),e(lFe,jhr),e(Ka,Dhr),e(Ka,iFe),e(iFe,Ghr),e(Ka,Ohr),e(Ka,dFe),e(dFe,Vhr),e(Ka,Xhr),e(ho,zhr),e(ho,f9),e(f9,y7),e(y7,cFe),e(cFe,Qhr),e(y7,Whr),e(y7,EH),e(EH,Hhr),e(y7,Uhr),e(f9,Jhr),e(f9,x7),e(x7,fFe),e(fFe,Yhr),e(x7,Khr),e(x7,CH),e(CH,Zhr),e(x7,epr),e(ho,opr),e(ho,$7),e($7,rpr),e($7,mFe),e(mFe,tpr),e($7,apr),e($7,gFe),e(gFe,npr),e(ho,spr),M(k7,ho,null),b(f,GXe,u),b(f,Dd,u),e(Dd,S7),e(S7,hFe),M(m9,hFe,null),e(Dd,lpr),e(Dd,pFe),e(pFe,ipr),b(f,OXe,u),b(f,Ho,u),M(g9,Ho,null),e(Ho,dpr),e(Ho,Gd),e(Gd,cpr),e(Gd,wH),e(wH,fpr),e(Gd,mpr),e(Gd,AH),e(AH,gpr),e(Gd,hpr),e(Ho,ppr),e(Ho,h9),e(h9,_pr),e(h9,_Fe),e(_Fe,upr),e(h9,bpr),e(Ho,vpr),e(Ho,At),M(p9,At,null),e(At,Fpr),e(At,uFe),e(uFe,Tpr),e(At,Mpr),e(At,Od),e(Od,Epr),e(Od,bFe),e(bFe,Cpr),e(Od,wpr),e(Od,LH),e(LH,Apr),e(Od,Lpr),e(At,ypr),M(R7,At,null),e(Ho,xpr),e(Ho,po),M(_9,po,null),e(po,$pr),e(po,vFe),e(vFe,kpr),e(po,Spr),e(po,Za),e(Za,Rpr),e(Za,FFe),e(FFe,Ppr),e(Za,Bpr),e(Za,TFe),e(TFe,Ipr),e(Za,Npr),e(Za,MFe),e(MFe,qpr),e(Za,jpr),e(po,Dpr),e(po,ot),e(ot,P7),e(P7,EFe),e(EFe,Gpr),e(P7,Opr),e(P7,yH),e(yH,Vpr),e(P7,Xpr),e(ot,zpr),e(ot,B7),e(B7,CFe),e(CFe,Qpr),e(B7,Wpr),e(B7,xH),e(xH,Hpr),e(B7,Upr),e(ot,Jpr),e(ot,I7),e(I7,wFe),e(wFe,Ypr),e(I7,Kpr),e(I7,$H),e($H,Zpr),e(I7,e_r),e(ot,o_r),e(ot,N7),e(N7,AFe),e(AFe,r_r),e(N7,t_r),e(N7,kH),e(kH,a_r),e(N7,n_r),e(ot,s_r),e(ot,q7),e(q7,LFe),e(LFe,l_r),e(q7,i_r),e(q7,SH),e(SH,d_r),e(q7,c_r),e(po,f_r),e(po,j7),e(j7,m_r),e(j7,yFe),e(yFe,g_r),e(j7,h_r),e(j7,xFe),e(xFe,p_r),e(po,__r),M(D7,po,null),b(f,VXe,u),b(f,Vd,u),e(Vd,G7),e(G7,$Fe),M(u9,$Fe,null),e(Vd,u_r),e(Vd,kFe),e(kFe,b_r),b(f,XXe,u),b(f,Uo,u),M(b9,Uo,null),e(Uo,v_r),e(Uo,Xd),e(Xd,F_r),e(Xd,RH),e(RH,T_r),e(Xd,M_r),e(Xd,PH),e(PH,E_r),e(Xd,C_r),e(Uo,w_r),e(Uo,v9),e(v9,A_r),e(v9,SFe),e(SFe,L_r),e(v9,y_r),e(Uo,x_r),e(Uo,Lt),M(F9,Lt,null),e(Lt,$_r),e(Lt,RFe),e(RFe,k_r),e(Lt,S_r),e(Lt,zd),e(zd,R_r),e(zd,PFe),e(PFe,P_r),e(zd,B_r),e(zd,BH),e(BH,I_r),e(zd,N_r),e(Lt,q_r),M(O7,Lt,null),e(Uo,j_r),e(Uo,_o),M(T9,_o,null),e(_o,D_r),e(_o,BFe),e(BFe,G_r),e(_o,O_r),e(_o,en),e(en,V_r),e(en,IFe),e(IFe,X_r),e(en,z_r),e(en,NFe),e(NFe,Q_r),e(en,W_r),e(en,qFe),e(qFe,H_r),e(en,U_r),e(_o,J_r),e(_o,Qd),e(Qd,V7),e(V7,jFe),e(jFe,Y_r),e(V7,K_r),e(V7,IH),e(IH,Z_r),e(V7,eur),e(Qd,our),e(Qd,X7),e(X7,DFe),e(DFe,rur),e(X7,tur),e(X7,NH),e(NH,aur),e(X7,nur),e(Qd,sur),e(Qd,z7),e(z7,GFe),e(GFe,lur),e(z7,iur),e(z7,qH),e(qH,dur),e(z7,cur),e(_o,fur),e(_o,Q7),e(Q7,mur),e(Q7,OFe),e(OFe,gur),e(Q7,hur),e(Q7,VFe),e(VFe,pur),e(_o,_ur),M(W7,_o,null),b(f,zXe,u),b(f,Wd,u),e(Wd,H7),e(H7,XFe),M(M9,XFe,null),e(Wd,uur),e(Wd,zFe),e(zFe,bur),b(f,QXe,u),b(f,Jo,u),M(E9,Jo,null),e(Jo,vur),e(Jo,Hd),e(Hd,Fur),e(Hd,jH),e(jH,Tur),e(Hd,Mur),e(Hd,DH),e(DH,Eur),e(Hd,Cur),e(Jo,wur),e(Jo,C9),e(C9,Aur),e(C9,QFe),e(QFe,Lur),e(C9,yur),e(Jo,xur),e(Jo,yt),M(w9,yt,null),e(yt,$ur),e(yt,WFe),e(WFe,kur),e(yt,Sur),e(yt,Ud),e(Ud,Rur),e(Ud,HFe),e(HFe,Pur),e(Ud,Bur),e(Ud,GH),e(GH,Iur),e(Ud,Nur),e(yt,qur),M(U7,yt,null),e(Jo,jur),e(Jo,uo),M(A9,uo,null),e(uo,Dur),e(uo,UFe),e(UFe,Gur),e(uo,Our),e(uo,on),e(on,Vur),e(on,JFe),e(JFe,Xur),e(on,zur),e(on,YFe),e(YFe,Qur),e(on,Wur),e(on,KFe),e(KFe,Hur),e(on,Uur),e(uo,Jur),e(uo,L9),e(L9,J7),e(J7,ZFe),e(ZFe,Yur),e(J7,Kur),e(J7,OH),e(OH,Zur),e(J7,e2r),e(L9,o2r),e(L9,Y7),e(Y7,e6e),e(e6e,r2r),e(Y7,t2r),e(Y7,VH),e(VH,a2r),e(Y7,n2r),e(uo,s2r),e(uo,K7),e(K7,l2r),e(K7,o6e),e(o6e,i2r),e(K7,d2r),e(K7,r6e),e(r6e,c2r),e(uo,f2r),M(Z7,uo,null),b(f,WXe,u),b(f,Jd,u),e(Jd,e8),e(e8,t6e),M(y9,t6e,null),e(Jd,m2r),e(Jd,a6e),e(a6e,g2r),b(f,HXe,u),b(f,Yo,u),M(x9,Yo,null),e(Yo,h2r),e(Yo,Yd),e(Yd,p2r),e(Yd,XH),e(XH,_2r),e(Yd,u2r),e(Yd,zH),e(zH,b2r),e(Yd,v2r),e(Yo,F2r),e(Yo,$9),e($9,T2r),e($9,n6e),e(n6e,M2r),e($9,E2r),e(Yo,C2r),e(Yo,xt),M(k9,xt,null),e(xt,w2r),e(xt,s6e),e(s6e,A2r),e(xt,L2r),e(xt,Kd),e(Kd,y2r),e(Kd,l6e),e(l6e,x2r),e(Kd,$2r),e(Kd,QH),e(QH,k2r),e(Kd,S2r),e(xt,R2r),M(o8,xt,null),e(Yo,P2r),e(Yo,bo),M(S9,bo,null),e(bo,B2r),e(bo,i6e),e(i6e,I2r),e(bo,N2r),e(bo,rn),e(rn,q2r),e(rn,d6e),e(d6e,j2r),e(rn,D2r),e(rn,c6e),e(c6e,G2r),e(rn,O2r),e(rn,f6e),e(f6e,V2r),e(rn,X2r),e(bo,z2r),e(bo,m6e),e(m6e,r8),e(r8,g6e),e(g6e,Q2r),e(r8,W2r),e(r8,WH),e(WH,H2r),e(r8,U2r),e(bo,J2r),e(bo,t8),e(t8,Y2r),e(t8,h6e),e(h6e,K2r),e(t8,Z2r),e(t8,p6e),e(p6e,e1r),e(bo,o1r),M(a8,bo,null),b(f,UXe,u),b(f,Zd,u),e(Zd,n8),e(n8,_6e),M(R9,_6e,null),e(Zd,r1r),e(Zd,u6e),e(u6e,t1r),b(f,JXe,u),b(f,Ko,u),M(P9,Ko,null),e(Ko,a1r),e(Ko,ec),e(ec,n1r),e(ec,HH),e(HH,s1r),e(ec,l1r),e(ec,UH),e(UH,i1r),e(ec,d1r),e(Ko,c1r),e(Ko,B9),e(B9,f1r),e(B9,b6e),e(b6e,m1r),e(B9,g1r),e(Ko,h1r),e(Ko,$t),M(I9,$t,null),e($t,p1r),e($t,v6e),e(v6e,_1r),e($t,u1r),e($t,oc),e(oc,b1r),e(oc,F6e),e(F6e,v1r),e(oc,F1r),e(oc,JH),e(JH,T1r),e(oc,M1r),e($t,E1r),M(s8,$t,null),e(Ko,C1r),e(Ko,vo),M(N9,vo,null),e(vo,w1r),e(vo,T6e),e(T6e,A1r),e(vo,L1r),e(vo,tn),e(tn,y1r),e(tn,M6e),e(M6e,x1r),e(tn,$1r),e(tn,E6e),e(E6e,k1r),e(tn,S1r),e(tn,C6e),e(C6e,R1r),e(tn,P1r),e(vo,B1r),e(vo,rt),e(rt,l8),e(l8,w6e),e(w6e,I1r),e(l8,N1r),e(l8,YH),e(YH,q1r),e(l8,j1r),e(rt,D1r),e(rt,i8),e(i8,A6e),e(A6e,G1r),e(i8,O1r),e(i8,KH),e(KH,V1r),e(i8,X1r),e(rt,z1r),e(rt,d8),e(d8,L6e),e(L6e,Q1r),e(d8,W1r),e(d8,ZH),e(ZH,H1r),e(d8,U1r),e(rt,J1r),e(rt,c8),e(c8,y6e),e(y6e,Y1r),e(c8,K1r),e(c8,eU),e(eU,Z1r),e(c8,ebr),e(rt,obr),e(rt,f8),e(f8,x6e),e(x6e,rbr),e(f8,tbr),e(f8,oU),e(oU,abr),e(f8,nbr),e(vo,sbr),e(vo,m8),e(m8,lbr),e(m8,$6e),e($6e,ibr),e(m8,dbr),e(m8,k6e),e(k6e,cbr),e(vo,fbr),M(g8,vo,null),b(f,YXe,u),b(f,rc,u),e(rc,h8),e(h8,S6e),M(q9,S6e,null),e(rc,mbr),e(rc,R6e),e(R6e,gbr),b(f,KXe,u),b(f,Zo,u),M(j9,Zo,null),e(Zo,hbr),e(Zo,tc),e(tc,pbr),e(tc,rU),e(rU,_br),e(tc,ubr),e(tc,tU),e(tU,bbr),e(tc,vbr),e(Zo,Fbr),e(Zo,D9),e(D9,Tbr),e(D9,P6e),e(P6e,Mbr),e(D9,Ebr),e(Zo,Cbr),e(Zo,kt),M(G9,kt,null),e(kt,wbr),e(kt,B6e),e(B6e,Abr),e(kt,Lbr),e(kt,ac),e(ac,ybr),e(ac,I6e),e(I6e,xbr),e(ac,$br),e(ac,aU),e(aU,kbr),e(ac,Sbr),e(kt,Rbr),M(p8,kt,null),e(Zo,Pbr),e(Zo,Fo),M(O9,Fo,null),e(Fo,Bbr),e(Fo,N6e),e(N6e,Ibr),e(Fo,Nbr),e(Fo,an),e(an,qbr),e(an,q6e),e(q6e,jbr),e(an,Dbr),e(an,j6e),e(j6e,Gbr),e(an,Obr),e(an,D6e),e(D6e,Vbr),e(an,Xbr),e(Fo,zbr),e(Fo,G6e),e(G6e,_8),e(_8,O6e),e(O6e,Qbr),e(_8,Wbr),e(_8,nU),e(nU,Hbr),e(_8,Ubr),e(Fo,Jbr),e(Fo,u8),e(u8,Ybr),e(u8,V6e),e(V6e,Kbr),e(u8,Zbr),e(u8,X6e),e(X6e,evr),e(Fo,ovr),M(b8,Fo,null),b(f,ZXe,u),b(f,nc,u),e(nc,v8),e(v8,z6e),M(V9,z6e,null),e(nc,rvr),e(nc,Q6e),e(Q6e,tvr),b(f,eze,u),b(f,er,u),M(X9,er,null),e(er,avr),e(er,sc),e(sc,nvr),e(sc,sU),e(sU,svr),e(sc,lvr),e(sc,lU),e(lU,ivr),e(sc,dvr),e(er,cvr),e(er,z9),e(z9,fvr),e(z9,W6e),e(W6e,mvr),e(z9,gvr),e(er,hvr),e(er,St),M(Q9,St,null),e(St,pvr),e(St,H6e),e(H6e,_vr),e(St,uvr),e(St,lc),e(lc,bvr),e(lc,U6e),e(U6e,vvr),e(lc,Fvr),e(lc,iU),e(iU,Tvr),e(lc,Mvr),e(St,Evr),M(F8,St,null),e(er,Cvr),e(er,yr),M(W9,yr,null),e(yr,wvr),e(yr,J6e),e(J6e,Avr),e(yr,Lvr),e(yr,nn),e(nn,yvr),e(nn,Y6e),e(Y6e,xvr),e(nn,$vr),e(nn,K6e),e(K6e,kvr),e(nn,Svr),e(nn,Z6e),e(Z6e,Rvr),e(nn,Pvr),e(yr,Bvr),e(yr,j),e(j,T8),e(T8,eTe),e(eTe,Ivr),e(T8,Nvr),e(T8,dU),e(dU,qvr),e(T8,jvr),e(j,Dvr),e(j,M8),e(M8,oTe),e(oTe,Gvr),e(M8,Ovr),e(M8,cU),e(cU,Vvr),e(M8,Xvr),e(j,zvr),e(j,E8),e(E8,rTe),e(rTe,Qvr),e(E8,Wvr),e(E8,fU),e(fU,Hvr),e(E8,Uvr),e(j,Jvr),e(j,C8),e(C8,tTe),e(tTe,Yvr),e(C8,Kvr),e(C8,mU),e(mU,Zvr),e(C8,eFr),e(j,oFr),e(j,w8),e(w8,aTe),e(aTe,rFr),e(w8,tFr),e(w8,gU),e(gU,aFr),e(w8,nFr),e(j,sFr),e(j,A8),e(A8,nTe),e(nTe,lFr),e(A8,iFr),e(A8,hU),e(hU,dFr),e(A8,cFr),e(j,fFr),e(j,L8),e(L8,sTe),e(sTe,mFr),e(L8,gFr),e(L8,pU),e(pU,hFr),e(L8,pFr),e(j,_Fr),e(j,y8),e(y8,lTe),e(lTe,uFr),e(y8,bFr),e(y8,_U),e(_U,vFr),e(y8,FFr),e(j,TFr),e(j,x8),e(x8,iTe),e(iTe,MFr),e(x8,EFr),e(x8,uU),e(uU,CFr),e(x8,wFr),e(j,AFr),e(j,$8),e($8,dTe),e(dTe,LFr),e($8,yFr),e($8,bU),e(bU,xFr),e($8,$Fr),e(j,kFr),e(j,k8),e(k8,cTe),e(cTe,SFr),e(k8,RFr),e(k8,vU),e(vU,PFr),e(k8,BFr),e(j,IFr),e(j,S8),e(S8,fTe),e(fTe,NFr),e(S8,qFr),e(S8,FU),e(FU,jFr),e(S8,DFr),e(j,GFr),e(j,R8),e(R8,mTe),e(mTe,OFr),e(R8,VFr),e(R8,TU),e(TU,XFr),e(R8,zFr),e(j,QFr),e(j,P8),e(P8,gTe),e(gTe,WFr),e(P8,HFr),e(P8,MU),e(MU,UFr),e(P8,JFr),e(j,YFr),e(j,B8),e(B8,hTe),e(hTe,KFr),e(B8,ZFr),e(B8,EU),e(EU,e6r),e(B8,o6r),e(j,r6r),e(j,I8),e(I8,pTe),e(pTe,t6r),e(I8,a6r),e(I8,CU),e(CU,n6r),e(I8,s6r),e(j,l6r),e(j,N8),e(N8,_Te),e(_Te,i6r),e(N8,d6r),e(N8,wU),e(wU,c6r),e(N8,f6r),e(j,m6r),e(j,Us),e(Us,uTe),e(uTe,g6r),e(Us,h6r),e(Us,AU),e(AU,p6r),e(Us,_6r),e(Us,LU),e(LU,u6r),e(Us,b6r),e(j,v6r),e(j,q8),e(q8,bTe),e(bTe,F6r),e(q8,T6r),e(q8,yU),e(yU,M6r),e(q8,E6r),e(j,C6r),e(j,j8),e(j8,vTe),e(vTe,w6r),e(j8,A6r),e(j8,xU),e(xU,L6r),e(j8,y6r),e(j,x6r),e(j,D8),e(D8,FTe),e(FTe,$6r),e(D8,k6r),e(D8,$U),e($U,S6r),e(D8,R6r),e(j,P6r),e(j,G8),e(G8,TTe),e(TTe,B6r),e(G8,I6r),e(G8,kU),e(kU,N6r),e(G8,q6r),e(j,j6r),e(j,O8),e(O8,MTe),e(MTe,D6r),e(O8,G6r),e(O8,SU),e(SU,O6r),e(O8,V6r),e(j,X6r),e(j,V8),e(V8,ETe),e(ETe,z6r),e(V8,Q6r),e(V8,RU),e(RU,W6r),e(V8,H6r),e(j,U6r),e(j,X8),e(X8,CTe),e(CTe,J6r),e(X8,Y6r),e(X8,PU),e(PU,K6r),e(X8,Z6r),e(j,eTr),e(j,z8),e(z8,wTe),e(wTe,oTr),e(z8,rTr),e(z8,BU),e(BU,tTr),e(z8,aTr),e(j,nTr),e(j,Q8),e(Q8,ATe),e(ATe,sTr),e(Q8,lTr),e(Q8,IU),e(IU,iTr),e(Q8,dTr),e(j,cTr),e(j,W8),e(W8,LTe),e(LTe,fTr),e(W8,mTr),e(W8,NU),e(NU,gTr),e(W8,hTr),e(j,pTr),e(j,H8),e(H8,yTe),e(yTe,_Tr),e(H8,uTr),e(H8,qU),e(qU,bTr),e(H8,vTr),e(j,FTr),e(j,U8),e(U8,xTe),e(xTe,TTr),e(U8,MTr),e(U8,jU),e(jU,ETr),e(U8,CTr),e(j,wTr),e(j,J8),e(J8,$Te),e($Te,ATr),e(J8,LTr),e(J8,DU),e(DU,yTr),e(J8,xTr),e(j,$Tr),e(j,Y8),e(Y8,kTe),e(kTe,kTr),e(Y8,STr),e(Y8,GU),e(GU,RTr),e(Y8,PTr),e(j,BTr),e(j,K8),e(K8,STe),e(STe,ITr),e(K8,NTr),e(K8,OU),e(OU,qTr),e(K8,jTr),e(j,DTr),e(j,Z8),e(Z8,RTe),e(RTe,GTr),e(Z8,OTr),e(Z8,VU),e(VU,VTr),e(Z8,XTr),e(j,zTr),e(j,eM),e(eM,PTe),e(PTe,QTr),e(eM,WTr),e(eM,XU),e(XU,HTr),e(eM,UTr),e(j,JTr),e(j,oM),e(oM,BTe),e(BTe,YTr),e(oM,KTr),e(oM,zU),e(zU,ZTr),e(oM,e7r),e(j,o7r),e(j,rM),e(rM,ITe),e(ITe,r7r),e(rM,t7r),e(rM,QU),e(QU,a7r),e(rM,n7r),e(j,s7r),e(j,tM),e(tM,NTe),e(NTe,l7r),e(tM,i7r),e(tM,WU),e(WU,d7r),e(tM,c7r),e(j,f7r),e(j,aM),e(aM,qTe),e(qTe,m7r),e(aM,g7r),e(aM,HU),e(HU,h7r),e(aM,p7r),e(j,_7r),e(j,nM),e(nM,jTe),e(jTe,u7r),e(nM,b7r),e(nM,UU),e(UU,v7r),e(nM,F7r),e(j,T7r),e(j,sM),e(sM,DTe),e(DTe,M7r),e(sM,E7r),e(sM,JU),e(JU,C7r),e(sM,w7r),e(j,A7r),e(j,lM),e(lM,GTe),e(GTe,L7r),e(lM,y7r),e(lM,YU),e(YU,x7r),e(lM,$7r),e(j,k7r),e(j,iM),e(iM,OTe),e(OTe,S7r),e(iM,R7r),e(iM,KU),e(KU,P7r),e(iM,B7r),e(j,I7r),e(j,dM),e(dM,VTe),e(VTe,N7r),e(dM,q7r),e(dM,ZU),e(ZU,j7r),e(dM,D7r),e(j,G7r),e(j,cM),e(cM,XTe),e(XTe,O7r),e(cM,V7r),e(cM,eJ),e(eJ,X7r),e(cM,z7r),e(j,Q7r),e(j,fM),e(fM,zTe),e(zTe,W7r),e(fM,H7r),e(fM,oJ),e(oJ,U7r),e(fM,J7r),e(j,Y7r),e(j,mM),e(mM,QTe),e(QTe,K7r),e(mM,Z7r),e(mM,rJ),e(rJ,e8r),e(mM,o8r),e(j,r8r),e(j,gM),e(gM,WTe),e(WTe,t8r),e(gM,a8r),e(gM,tJ),e(tJ,n8r),e(gM,s8r),e(yr,l8r),M(hM,yr,null),b(f,oze,u),b(f,ic,u),e(ic,pM),e(pM,HTe),M(H9,HTe,null),e(ic,i8r),e(ic,UTe),e(UTe,d8r),b(f,rze,u),b(f,or,u),M(U9,or,null),e(or,c8r),e(or,dc),e(dc,f8r),e(dc,aJ),e(aJ,m8r),e(dc,g8r),e(dc,nJ),e(nJ,h8r),e(dc,p8r),e(or,_8r),e(or,J9),e(J9,u8r),e(J9,JTe),e(JTe,b8r),e(J9,v8r),e(or,F8r),e(or,Rt),M(Y9,Rt,null),e(Rt,T8r),e(Rt,YTe),e(YTe,M8r),e(Rt,E8r),e(Rt,cc),e(cc,C8r),e(cc,KTe),e(KTe,w8r),e(cc,A8r),e(cc,sJ),e(sJ,L8r),e(cc,y8r),e(Rt,x8r),M(_M,Rt,null),e(or,$8r),e(or,xr),M(K9,xr,null),e(xr,k8r),e(xr,ZTe),e(ZTe,S8r),e(xr,R8r),e(xr,sn),e(sn,P8r),e(sn,e7e),e(e7e,B8r),e(sn,I8r),e(sn,o7e),e(o7e,N8r),e(sn,q8r),e(sn,r7e),e(r7e,j8r),e(sn,D8r),e(xr,G8r),e(xr,se),e(se,uM),e(uM,t7e),e(t7e,O8r),e(uM,V8r),e(uM,lJ),e(lJ,X8r),e(uM,z8r),e(se,Q8r),e(se,bM),e(bM,a7e),e(a7e,W8r),e(bM,H8r),e(bM,iJ),e(iJ,U8r),e(bM,J8r),e(se,Y8r),e(se,vM),e(vM,n7e),e(n7e,K8r),e(vM,Z8r),e(vM,dJ),e(dJ,eMr),e(vM,oMr),e(se,rMr),e(se,FM),e(FM,s7e),e(s7e,tMr),e(FM,aMr),e(FM,cJ),e(cJ,nMr),e(FM,sMr),e(se,lMr),e(se,TM),e(TM,l7e),e(l7e,iMr),e(TM,dMr),e(TM,fJ),e(fJ,cMr),e(TM,fMr),e(se,mMr),e(se,MM),e(MM,i7e),e(i7e,gMr),e(MM,hMr),e(MM,mJ),e(mJ,pMr),e(MM,_Mr),e(se,uMr),e(se,EM),e(EM,d7e),e(d7e,bMr),e(EM,vMr),e(EM,gJ),e(gJ,FMr),e(EM,TMr),e(se,MMr),e(se,CM),e(CM,c7e),e(c7e,EMr),e(CM,CMr),e(CM,hJ),e(hJ,wMr),e(CM,AMr),e(se,LMr),e(se,wM),e(wM,f7e),e(f7e,yMr),e(wM,xMr),e(wM,pJ),e(pJ,$Mr),e(wM,kMr),e(se,SMr),e(se,AM),e(AM,m7e),e(m7e,RMr),e(AM,PMr),e(AM,_J),e(_J,BMr),e(AM,IMr),e(se,NMr),e(se,LM),e(LM,g7e),e(g7e,qMr),e(LM,jMr),e(LM,uJ),e(uJ,DMr),e(LM,GMr),e(se,OMr),e(se,yM),e(yM,h7e),e(h7e,VMr),e(yM,XMr),e(yM,bJ),e(bJ,zMr),e(yM,QMr),e(se,WMr),e(se,xM),e(xM,p7e),e(p7e,HMr),e(xM,UMr),e(xM,vJ),e(vJ,JMr),e(xM,YMr),e(se,KMr),e(se,$M),e($M,_7e),e(_7e,ZMr),e($M,e4r),e($M,FJ),e(FJ,o4r),e($M,r4r),e(se,t4r),e(se,kM),e(kM,u7e),e(u7e,a4r),e(kM,n4r),e(kM,TJ),e(TJ,s4r),e(kM,l4r),e(se,i4r),e(se,SM),e(SM,b7e),e(b7e,d4r),e(SM,c4r),e(SM,MJ),e(MJ,f4r),e(SM,m4r),e(se,g4r),e(se,RM),e(RM,v7e),e(v7e,h4r),e(RM,p4r),e(RM,EJ),e(EJ,_4r),e(RM,u4r),e(se,b4r),e(se,PM),e(PM,F7e),e(F7e,v4r),e(PM,F4r),e(PM,CJ),e(CJ,T4r),e(PM,M4r),e(se,E4r),e(se,BM),e(BM,T7e),e(T7e,C4r),e(BM,w4r),e(BM,wJ),e(wJ,A4r),e(BM,L4r),e(se,y4r),e(se,IM),e(IM,M7e),e(M7e,x4r),e(IM,$4r),e(IM,AJ),e(AJ,k4r),e(IM,S4r),e(se,R4r),e(se,NM),e(NM,E7e),e(E7e,P4r),e(NM,B4r),e(NM,LJ),e(LJ,I4r),e(NM,N4r),e(se,q4r),e(se,qM),e(qM,C7e),e(C7e,j4r),e(qM,D4r),e(qM,yJ),e(yJ,G4r),e(qM,O4r),e(se,V4r),e(se,jM),e(jM,w7e),e(w7e,X4r),e(jM,z4r),e(jM,xJ),e(xJ,Q4r),e(jM,W4r),e(xr,H4r),M(DM,xr,null),b(f,tze,u),b(f,fc,u),e(fc,GM),e(GM,A7e),M(Z9,A7e,null),e(fc,U4r),e(fc,L7e),e(L7e,J4r),b(f,aze,u),b(f,rr,u),M(ex,rr,null),e(rr,Y4r),e(rr,mc),e(mc,K4r),e(mc,$J),e($J,Z4r),e(mc,eEr),e(mc,kJ),e(kJ,oEr),e(mc,rEr),e(rr,tEr),e(rr,ox),e(ox,aEr),e(ox,y7e),e(y7e,nEr),e(ox,sEr),e(rr,lEr),e(rr,Pt),M(rx,Pt,null),e(Pt,iEr),e(Pt,x7e),e(x7e,dEr),e(Pt,cEr),e(Pt,gc),e(gc,fEr),e(gc,$7e),e($7e,mEr),e(gc,gEr),e(gc,SJ),e(SJ,hEr),e(gc,pEr),e(Pt,_Er),M(OM,Pt,null),e(rr,uEr),e(rr,$r),M(tx,$r,null),e($r,bEr),e($r,k7e),e(k7e,vEr),e($r,FEr),e($r,ln),e(ln,TEr),e(ln,S7e),e(S7e,MEr),e(ln,EEr),e(ln,R7e),e(R7e,CEr),e(ln,wEr),e(ln,P7e),e(P7e,AEr),e(ln,LEr),e($r,yEr),e($r,Me),e(Me,VM),e(VM,B7e),e(B7e,xEr),e(VM,$Er),e(VM,RJ),e(RJ,kEr),e(VM,SEr),e(Me,REr),e(Me,XM),e(XM,I7e),e(I7e,PEr),e(XM,BEr),e(XM,PJ),e(PJ,IEr),e(XM,NEr),e(Me,qEr),e(Me,zM),e(zM,N7e),e(N7e,jEr),e(zM,DEr),e(zM,BJ),e(BJ,GEr),e(zM,OEr),e(Me,VEr),e(Me,QM),e(QM,q7e),e(q7e,XEr),e(QM,zEr),e(QM,IJ),e(IJ,QEr),e(QM,WEr),e(Me,HEr),e(Me,WM),e(WM,j7e),e(j7e,UEr),e(WM,JEr),e(WM,NJ),e(NJ,YEr),e(WM,KEr),e(Me,ZEr),e(Me,HM),e(HM,D7e),e(D7e,eCr),e(HM,oCr),e(HM,qJ),e(qJ,rCr),e(HM,tCr),e(Me,aCr),e(Me,UM),e(UM,G7e),e(G7e,nCr),e(UM,sCr),e(UM,jJ),e(jJ,lCr),e(UM,iCr),e(Me,dCr),e(Me,JM),e(JM,O7e),e(O7e,cCr),e(JM,fCr),e(JM,DJ),e(DJ,mCr),e(JM,gCr),e(Me,hCr),e(Me,YM),e(YM,V7e),e(V7e,pCr),e(YM,_Cr),e(YM,GJ),e(GJ,uCr),e(YM,bCr),e(Me,vCr),e(Me,KM),e(KM,X7e),e(X7e,FCr),e(KM,TCr),e(KM,OJ),e(OJ,MCr),e(KM,ECr),e(Me,CCr),e(Me,ZM),e(ZM,z7e),e(z7e,wCr),e(ZM,ACr),e(ZM,VJ),e(VJ,LCr),e(ZM,yCr),e(Me,xCr),e(Me,e4),e(e4,Q7e),e(Q7e,$Cr),e(e4,kCr),e(e4,XJ),e(XJ,SCr),e(e4,RCr),e(Me,PCr),e(Me,o4),e(o4,W7e),e(W7e,BCr),e(o4,ICr),e(o4,zJ),e(zJ,NCr),e(o4,qCr),e($r,jCr),M(r4,$r,null),b(f,nze,u),b(f,hc,u),e(hc,t4),e(t4,H7e),M(ax,H7e,null),e(hc,DCr),e(hc,U7e),e(U7e,GCr),b(f,sze,u),b(f,tr,u),M(nx,tr,null),e(tr,OCr),e(tr,pc),e(pc,VCr),e(pc,QJ),e(QJ,XCr),e(pc,zCr),e(pc,WJ),e(WJ,QCr),e(pc,WCr),e(tr,HCr),e(tr,sx),e(sx,UCr),e(sx,J7e),e(J7e,JCr),e(sx,YCr),e(tr,KCr),e(tr,Bt),M(lx,Bt,null),e(Bt,ZCr),e(Bt,Y7e),e(Y7e,e3r),e(Bt,o3r),e(Bt,_c),e(_c,r3r),e(_c,K7e),e(K7e,t3r),e(_c,a3r),e(_c,HJ),e(HJ,n3r),e(_c,s3r),e(Bt,l3r),M(a4,Bt,null),e(tr,i3r),e(tr,kr),M(ix,kr,null),e(kr,d3r),e(kr,Z7e),e(Z7e,c3r),e(kr,f3r),e(kr,dn),e(dn,m3r),e(dn,e8e),e(e8e,g3r),e(dn,h3r),e(dn,o8e),e(o8e,p3r),e(dn,_3r),e(dn,r8e),e(r8e,u3r),e(dn,b3r),e(kr,v3r),e(kr,tt),e(tt,n4),e(n4,t8e),e(t8e,F3r),e(n4,T3r),e(n4,UJ),e(UJ,M3r),e(n4,E3r),e(tt,C3r),e(tt,s4),e(s4,a8e),e(a8e,w3r),e(s4,A3r),e(s4,JJ),e(JJ,L3r),e(s4,y3r),e(tt,x3r),e(tt,l4),e(l4,n8e),e(n8e,$3r),e(l4,k3r),e(l4,YJ),e(YJ,S3r),e(l4,R3r),e(tt,P3r),e(tt,i4),e(i4,s8e),e(s8e,B3r),e(i4,I3r),e(i4,KJ),e(KJ,N3r),e(i4,q3r),e(tt,j3r),e(tt,d4),e(d4,l8e),e(l8e,D3r),e(d4,G3r),e(d4,ZJ),e(ZJ,O3r),e(d4,V3r),e(kr,X3r),M(c4,kr,null),b(f,lze,u),b(f,uc,u),e(uc,f4),e(f4,i8e),M(dx,i8e,null),e(uc,z3r),e(uc,d8e),e(d8e,Q3r),b(f,ize,u),b(f,ar,u),M(cx,ar,null),e(ar,W3r),e(ar,bc),e(bc,H3r),e(bc,eY),e(eY,U3r),e(bc,J3r),e(bc,oY),e(oY,Y3r),e(bc,K3r),e(ar,Z3r),e(ar,fx),e(fx,e5r),e(fx,c8e),e(c8e,o5r),e(fx,r5r),e(ar,t5r),e(ar,It),M(mx,It,null),e(It,a5r),e(It,f8e),e(f8e,n5r),e(It,s5r),e(It,vc),e(vc,l5r),e(vc,m8e),e(m8e,i5r),e(vc,d5r),e(vc,rY),e(rY,c5r),e(vc,f5r),e(It,m5r),M(m4,It,null),e(ar,g5r),e(ar,Sr),M(gx,Sr,null),e(Sr,h5r),e(Sr,g8e),e(g8e,p5r),e(Sr,_5r),e(Sr,cn),e(cn,u5r),e(cn,h8e),e(h8e,b5r),e(cn,v5r),e(cn,p8e),e(p8e,F5r),e(cn,T5r),e(cn,_8e),e(_8e,M5r),e(cn,E5r),e(Sr,C5r),e(Sr,ie),e(ie,g4),e(g4,u8e),e(u8e,w5r),e(g4,A5r),e(g4,tY),e(tY,L5r),e(g4,y5r),e(ie,x5r),e(ie,h4),e(h4,b8e),e(b8e,$5r),e(h4,k5r),e(h4,aY),e(aY,S5r),e(h4,R5r),e(ie,P5r),e(ie,p4),e(p4,v8e),e(v8e,B5r),e(p4,I5r),e(p4,nY),e(nY,N5r),e(p4,q5r),e(ie,j5r),e(ie,_4),e(_4,F8e),e(F8e,D5r),e(_4,G5r),e(_4,sY),e(sY,O5r),e(_4,V5r),e(ie,X5r),e(ie,u4),e(u4,T8e),e(T8e,z5r),e(u4,Q5r),e(u4,lY),e(lY,W5r),e(u4,H5r),e(ie,U5r),e(ie,b4),e(b4,M8e),e(M8e,J5r),e(b4,Y5r),e(b4,iY),e(iY,K5r),e(b4,Z5r),e(ie,e0r),e(ie,v4),e(v4,E8e),e(E8e,o0r),e(v4,r0r),e(v4,dY),e(dY,t0r),e(v4,a0r),e(ie,n0r),e(ie,F4),e(F4,C8e),e(C8e,s0r),e(F4,l0r),e(F4,cY),e(cY,i0r),e(F4,d0r),e(ie,c0r),e(ie,T4),e(T4,w8e),e(w8e,f0r),e(T4,m0r),e(T4,fY),e(fY,g0r),e(T4,h0r),e(ie,p0r),e(ie,M4),e(M4,A8e),e(A8e,_0r),e(M4,u0r),e(M4,mY),e(mY,b0r),e(M4,v0r),e(ie,F0r),e(ie,E4),e(E4,L8e),e(L8e,T0r),e(E4,M0r),e(E4,gY),e(gY,E0r),e(E4,C0r),e(ie,w0r),e(ie,C4),e(C4,y8e),e(y8e,A0r),e(C4,L0r),e(C4,hY),e(hY,y0r),e(C4,x0r),e(ie,$0r),e(ie,w4),e(w4,x8e),e(x8e,k0r),e(w4,S0r),e(w4,pY),e(pY,R0r),e(w4,P0r),e(ie,B0r),e(ie,A4),e(A4,$8e),e($8e,I0r),e(A4,N0r),e(A4,_Y),e(_Y,q0r),e(A4,j0r),e(ie,D0r),e(ie,L4),e(L4,k8e),e(k8e,G0r),e(L4,O0r),e(L4,uY),e(uY,V0r),e(L4,X0r),e(ie,z0r),e(ie,y4),e(y4,S8e),e(S8e,Q0r),e(y4,W0r),e(y4,bY),e(bY,H0r),e(y4,U0r),e(ie,J0r),e(ie,x4),e(x4,R8e),e(R8e,Y0r),e(x4,K0r),e(x4,vY),e(vY,Z0r),e(x4,ewr),e(ie,owr),e(ie,$4),e($4,P8e),e(P8e,rwr),e($4,twr),e($4,FY),e(FY,awr),e($4,nwr),e(ie,swr),e(ie,k4),e(k4,B8e),e(B8e,lwr),e(k4,iwr),e(k4,TY),e(TY,dwr),e(k4,cwr),e(ie,fwr),e(ie,S4),e(S4,I8e),e(I8e,mwr),e(S4,gwr),e(S4,MY),e(MY,hwr),e(S4,pwr),e(Sr,_wr),M(R4,Sr,null),b(f,dze,u),b(f,Fc,u),e(Fc,P4),e(P4,N8e),M(hx,N8e,null),e(Fc,uwr),e(Fc,q8e),e(q8e,bwr),b(f,cze,u),b(f,nr,u),M(px,nr,null),e(nr,vwr),e(nr,Tc),e(Tc,Fwr),e(Tc,EY),e(EY,Twr),e(Tc,Mwr),e(Tc,CY),e(CY,Ewr),e(Tc,Cwr),e(nr,wwr),e(nr,_x),e(_x,Awr),e(_x,j8e),e(j8e,Lwr),e(_x,ywr),e(nr,xwr),e(nr,Nt),M(ux,Nt,null),e(Nt,$wr),e(Nt,D8e),e(D8e,kwr),e(Nt,Swr),e(Nt,Mc),e(Mc,Rwr),e(Mc,G8e),e(G8e,Pwr),e(Mc,Bwr),e(Mc,wY),e(wY,Iwr),e(Mc,Nwr),e(Nt,qwr),M(B4,Nt,null),e(nr,jwr),e(nr,Rr),M(bx,Rr,null),e(Rr,Dwr),e(Rr,O8e),e(O8e,Gwr),e(Rr,Owr),e(Rr,fn),e(fn,Vwr),e(fn,V8e),e(V8e,Xwr),e(fn,zwr),e(fn,X8e),e(X8e,Qwr),e(fn,Wwr),e(fn,z8e),e(z8e,Hwr),e(fn,Uwr),e(Rr,Jwr),e(Rr,ye),e(ye,I4),e(I4,Q8e),e(Q8e,Ywr),e(I4,Kwr),e(I4,AY),e(AY,Zwr),e(I4,eAr),e(ye,oAr),e(ye,N4),e(N4,W8e),e(W8e,rAr),e(N4,tAr),e(N4,LY),e(LY,aAr),e(N4,nAr),e(ye,sAr),e(ye,q4),e(q4,H8e),e(H8e,lAr),e(q4,iAr),e(q4,yY),e(yY,dAr),e(q4,cAr),e(ye,fAr),e(ye,j4),e(j4,U8e),e(U8e,mAr),e(j4,gAr),e(j4,xY),e(xY,hAr),e(j4,pAr),e(ye,_Ar),e(ye,D4),e(D4,J8e),e(J8e,uAr),e(D4,bAr),e(D4,$Y),e($Y,vAr),e(D4,FAr),e(ye,TAr),e(ye,G4),e(G4,Y8e),e(Y8e,MAr),e(G4,EAr),e(G4,kY),e(kY,CAr),e(G4,wAr),e(ye,AAr),e(ye,O4),e(O4,K8e),e(K8e,LAr),e(O4,yAr),e(O4,SY),e(SY,xAr),e(O4,$Ar),e(ye,kAr),e(ye,V4),e(V4,Z8e),e(Z8e,SAr),e(V4,RAr),e(V4,RY),e(RY,PAr),e(V4,BAr),e(ye,IAr),e(ye,X4),e(X4,eMe),e(eMe,NAr),e(X4,qAr),e(X4,PY),e(PY,jAr),e(X4,DAr),e(ye,GAr),e(ye,z4),e(z4,oMe),e(oMe,OAr),e(z4,VAr),e(z4,BY),e(BY,XAr),e(z4,zAr),e(Rr,QAr),M(Q4,Rr,null),b(f,fze,u),b(f,Ec,u),e(Ec,W4),e(W4,rMe),M(vx,rMe,null),e(Ec,WAr),e(Ec,tMe),e(tMe,HAr),b(f,mze,u),b(f,sr,u),M(Fx,sr,null),e(sr,UAr),e(sr,Cc),e(Cc,JAr),e(Cc,IY),e(IY,YAr),e(Cc,KAr),e(Cc,NY),e(NY,ZAr),e(Cc,eLr),e(sr,oLr),e(sr,Tx),e(Tx,rLr),e(Tx,aMe),e(aMe,tLr),e(Tx,aLr),e(sr,nLr),e(sr,qt),M(Mx,qt,null),e(qt,sLr),e(qt,nMe),e(nMe,lLr),e(qt,iLr),e(qt,wc),e(wc,dLr),e(wc,sMe),e(sMe,cLr),e(wc,fLr),e(wc,qY),e(qY,mLr),e(wc,gLr),e(qt,hLr),M(H4,qt,null),e(sr,pLr),e(sr,Pr),M(Ex,Pr,null),e(Pr,_Lr),e(Pr,lMe),e(lMe,uLr),e(Pr,bLr),e(Pr,mn),e(mn,vLr),e(mn,iMe),e(iMe,FLr),e(mn,TLr),e(mn,dMe),e(dMe,MLr),e(mn,ELr),e(mn,cMe),e(cMe,CLr),e(mn,wLr),e(Pr,ALr),e(Pr,te),e(te,U4),e(U4,fMe),e(fMe,LLr),e(U4,yLr),e(U4,jY),e(jY,xLr),e(U4,$Lr),e(te,kLr),e(te,J4),e(J4,mMe),e(mMe,SLr),e(J4,RLr),e(J4,DY),e(DY,PLr),e(J4,BLr),e(te,ILr),e(te,Y4),e(Y4,gMe),e(gMe,NLr),e(Y4,qLr),e(Y4,GY),e(GY,jLr),e(Y4,DLr),e(te,GLr),e(te,K4),e(K4,hMe),e(hMe,OLr),e(K4,VLr),e(K4,OY),e(OY,XLr),e(K4,zLr),e(te,QLr),e(te,Z4),e(Z4,pMe),e(pMe,WLr),e(Z4,HLr),e(Z4,VY),e(VY,ULr),e(Z4,JLr),e(te,YLr),e(te,eE),e(eE,_Me),e(_Me,KLr),e(eE,ZLr),e(eE,XY),e(XY,eyr),e(eE,oyr),e(te,ryr),e(te,oE),e(oE,uMe),e(uMe,tyr),e(oE,ayr),e(oE,zY),e(zY,nyr),e(oE,syr),e(te,lyr),e(te,rE),e(rE,bMe),e(bMe,iyr),e(rE,dyr),e(rE,QY),e(QY,cyr),e(rE,fyr),e(te,myr),e(te,tE),e(tE,vMe),e(vMe,gyr),e(tE,hyr),e(tE,WY),e(WY,pyr),e(tE,_yr),e(te,uyr),e(te,aE),e(aE,FMe),e(FMe,byr),e(aE,vyr),e(aE,HY),e(HY,Fyr),e(aE,Tyr),e(te,Myr),e(te,nE),e(nE,TMe),e(TMe,Eyr),e(nE,Cyr),e(nE,UY),e(UY,wyr),e(nE,Ayr),e(te,Lyr),e(te,sE),e(sE,MMe),e(MMe,yyr),e(sE,xyr),e(sE,JY),e(JY,$yr),e(sE,kyr),e(te,Syr),e(te,lE),e(lE,EMe),e(EMe,Ryr),e(lE,Pyr),e(lE,YY),e(YY,Byr),e(lE,Iyr),e(te,Nyr),e(te,iE),e(iE,CMe),e(CMe,qyr),e(iE,jyr),e(iE,KY),e(KY,Dyr),e(iE,Gyr),e(te,Oyr),e(te,dE),e(dE,wMe),e(wMe,Vyr),e(dE,Xyr),e(dE,ZY),e(ZY,zyr),e(dE,Qyr),e(te,Wyr),e(te,cE),e(cE,AMe),e(AMe,Hyr),e(cE,Uyr),e(cE,eK),e(eK,Jyr),e(cE,Yyr),e(te,Kyr),e(te,fE),e(fE,LMe),e(LMe,Zyr),e(fE,e9r),e(fE,oK),e(oK,o9r),e(fE,r9r),e(te,t9r),e(te,mE),e(mE,yMe),e(yMe,a9r),e(mE,n9r),e(mE,rK),e(rK,s9r),e(mE,l9r),e(te,i9r),e(te,gE),e(gE,xMe),e(xMe,d9r),e(gE,c9r),e(gE,tK),e(tK,f9r),e(gE,m9r),e(te,g9r),e(te,hE),e(hE,$Me),e($Me,h9r),e(hE,p9r),e(hE,aK),e(aK,_9r),e(hE,u9r),e(te,b9r),e(te,pE),e(pE,kMe),e(kMe,v9r),e(pE,F9r),e(pE,nK),e(nK,T9r),e(pE,M9r),e(te,E9r),e(te,_E),e(_E,SMe),e(SMe,C9r),e(_E,w9r),e(_E,sK),e(sK,A9r),e(_E,L9r),e(te,y9r),e(te,uE),e(uE,RMe),e(RMe,x9r),e(uE,$9r),e(uE,lK),e(lK,k9r),e(uE,S9r),e(te,R9r),e(te,bE),e(bE,PMe),e(PMe,P9r),e(bE,B9r),e(bE,iK),e(iK,I9r),e(bE,N9r),e(te,q9r),e(te,vE),e(vE,BMe),e(BMe,j9r),e(vE,D9r),e(vE,dK),e(dK,G9r),e(vE,O9r),e(te,V9r),e(te,FE),e(FE,IMe),e(IMe,X9r),e(FE,z9r),e(FE,cK),e(cK,Q9r),e(FE,W9r),e(Pr,H9r),M(TE,Pr,null),b(f,gze,u),b(f,Ac,u),e(Ac,ME),e(ME,NMe),M(Cx,NMe,null),e(Ac,U9r),e(Ac,qMe),e(qMe,J9r),b(f,hze,u),b(f,lr,u),M(wx,lr,null),e(lr,Y9r),e(lr,Lc),e(Lc,K9r),e(Lc,fK),e(fK,Z9r),e(Lc,exr),e(Lc,mK),e(mK,oxr),e(Lc,rxr),e(lr,txr),e(lr,Ax),e(Ax,axr),e(Ax,jMe),e(jMe,nxr),e(Ax,sxr),e(lr,lxr),e(lr,jt),M(Lx,jt,null),e(jt,ixr),e(jt,DMe),e(DMe,dxr),e(jt,cxr),e(jt,yc),e(yc,fxr),e(yc,GMe),e(GMe,mxr),e(yc,gxr),e(yc,gK),e(gK,hxr),e(yc,pxr),e(jt,_xr),M(EE,jt,null),e(lr,uxr),e(lr,Br),M(yx,Br,null),e(Br,bxr),e(Br,OMe),e(OMe,vxr),e(Br,Fxr),e(Br,gn),e(gn,Txr),e(gn,VMe),e(VMe,Mxr),e(gn,Exr),e(gn,XMe),e(XMe,Cxr),e(gn,wxr),e(gn,zMe),e(zMe,Axr),e(gn,Lxr),e(Br,yxr),e(Br,_e),e(_e,CE),e(CE,QMe),e(QMe,xxr),e(CE,$xr),e(CE,hK),e(hK,kxr),e(CE,Sxr),e(_e,Rxr),e(_e,wE),e(wE,WMe),e(WMe,Pxr),e(wE,Bxr),e(wE,pK),e(pK,Ixr),e(wE,Nxr),e(_e,qxr),e(_e,AE),e(AE,HMe),e(HMe,jxr),e(AE,Dxr),e(AE,_K),e(_K,Gxr),e(AE,Oxr),e(_e,Vxr),e(_e,LE),e(LE,UMe),e(UMe,Xxr),e(LE,zxr),e(LE,uK),e(uK,Qxr),e(LE,Wxr),e(_e,Hxr),e(_e,yE),e(yE,JMe),e(JMe,Uxr),e(yE,Jxr),e(yE,bK),e(bK,Yxr),e(yE,Kxr),e(_e,Zxr),e(_e,xE),e(xE,YMe),e(YMe,e$r),e(xE,o$r),e(xE,vK),e(vK,r$r),e(xE,t$r),e(_e,a$r),e(_e,$E),e($E,KMe),e(KMe,n$r),e($E,s$r),e($E,FK),e(FK,l$r),e($E,i$r),e(_e,d$r),e(_e,kE),e(kE,ZMe),e(ZMe,c$r),e(kE,f$r),e(kE,TK),e(TK,m$r),e(kE,g$r),e(_e,h$r),e(_e,SE),e(SE,e4e),e(e4e,p$r),e(SE,_$r),e(SE,MK),e(MK,u$r),e(SE,b$r),e(_e,v$r),e(_e,RE),e(RE,o4e),e(o4e,F$r),e(RE,T$r),e(RE,EK),e(EK,M$r),e(RE,E$r),e(_e,C$r),e(_e,PE),e(PE,r4e),e(r4e,w$r),e(PE,A$r),e(PE,CK),e(CK,L$r),e(PE,y$r),e(_e,x$r),e(_e,BE),e(BE,t4e),e(t4e,$$r),e(BE,k$r),e(BE,wK),e(wK,S$r),e(BE,R$r),e(_e,P$r),e(_e,IE),e(IE,a4e),e(a4e,B$r),e(IE,I$r),e(IE,AK),e(AK,N$r),e(IE,q$r),e(_e,j$r),e(_e,NE),e(NE,n4e),e(n4e,D$r),e(NE,G$r),e(NE,LK),e(LK,O$r),e(NE,V$r),e(_e,X$r),e(_e,qE),e(qE,s4e),e(s4e,z$r),e(qE,Q$r),e(qE,yK),e(yK,W$r),e(qE,H$r),e(_e,U$r),e(_e,jE),e(jE,l4e),e(l4e,J$r),e(jE,Y$r),e(jE,xK),e(xK,K$r),e(jE,Z$r),e(_e,ekr),e(_e,DE),e(DE,i4e),e(i4e,okr),e(DE,rkr),e(DE,$K),e($K,tkr),e(DE,akr),e(Br,nkr),M(GE,Br,null),b(f,pze,u),b(f,xc,u),e(xc,OE),e(OE,d4e),M(xx,d4e,null),e(xc,skr),e(xc,c4e),e(c4e,lkr),b(f,_ze,u),b(f,ir,u),M($x,ir,null),e(ir,ikr),e(ir,$c),e($c,dkr),e($c,kK),e(kK,ckr),e($c,fkr),e($c,SK),e(SK,mkr),e($c,gkr),e(ir,hkr),e(ir,kx),e(kx,pkr),e(kx,f4e),e(f4e,_kr),e(kx,ukr),e(ir,bkr),e(ir,Dt),M(Sx,Dt,null),e(Dt,vkr),e(Dt,m4e),e(m4e,Fkr),e(Dt,Tkr),e(Dt,kc),e(kc,Mkr),e(kc,g4e),e(g4e,Ekr),e(kc,Ckr),e(kc,RK),e(RK,wkr),e(kc,Akr),e(Dt,Lkr),M(VE,Dt,null),e(ir,ykr),e(ir,Ir),M(Rx,Ir,null),e(Ir,xkr),e(Ir,h4e),e(h4e,$kr),e(Ir,kkr),e(Ir,hn),e(hn,Skr),e(hn,p4e),e(p4e,Rkr),e(hn,Pkr),e(hn,_4e),e(_4e,Bkr),e(hn,Ikr),e(hn,u4e),e(u4e,Nkr),e(hn,qkr),e(Ir,jkr),e(Ir,Px),e(Px,XE),e(XE,b4e),e(b4e,Dkr),e(XE,Gkr),e(XE,PK),e(PK,Okr),e(XE,Vkr),e(Px,Xkr),e(Px,zE),e(zE,v4e),e(v4e,zkr),e(zE,Qkr),e(zE,BK),e(BK,Wkr),e(zE,Hkr),e(Ir,Ukr),M(QE,Ir,null),b(f,uze,u),b(f,Sc,u),e(Sc,WE),e(WE,F4e),M(Bx,F4e,null),e(Sc,Jkr),e(Sc,T4e),e(T4e,Ykr),b(f,bze,u),b(f,dr,u),M(Ix,dr,null),e(dr,Kkr),e(dr,Rc),e(Rc,Zkr),e(Rc,IK),e(IK,eSr),e(Rc,oSr),e(Rc,NK),e(NK,rSr),e(Rc,tSr),e(dr,aSr),e(dr,Nx),e(Nx,nSr),e(Nx,M4e),e(M4e,sSr),e(Nx,lSr),e(dr,iSr),e(dr,Gt),M(qx,Gt,null),e(Gt,dSr),e(Gt,E4e),e(E4e,cSr),e(Gt,fSr),e(Gt,Pc),e(Pc,mSr),e(Pc,C4e),e(C4e,gSr),e(Pc,hSr),e(Pc,qK),e(qK,pSr),e(Pc,_Sr),e(Gt,uSr),M(HE,Gt,null),e(dr,bSr),e(dr,Nr),M(jx,Nr,null),e(Nr,vSr),e(Nr,w4e),e(w4e,FSr),e(Nr,TSr),e(Nr,pn),e(pn,MSr),e(pn,A4e),e(A4e,ESr),e(pn,CSr),e(pn,L4e),e(L4e,wSr),e(pn,ASr),e(pn,y4e),e(y4e,LSr),e(pn,ySr),e(Nr,xSr),e(Nr,x4e),e(x4e,UE),e(UE,$4e),e($4e,$Sr),e(UE,kSr),e(UE,jK),e(jK,SSr),e(UE,RSr),e(Nr,PSr),M(JE,Nr,null),b(f,vze,u),b(f,Bc,u),e(Bc,YE),e(YE,k4e),M(Dx,k4e,null),e(Bc,BSr),e(Bc,S4e),e(S4e,ISr),b(f,Fze,u),b(f,cr,u),M(Gx,cr,null),e(cr,NSr),e(cr,Ic),e(Ic,qSr),e(Ic,DK),e(DK,jSr),e(Ic,DSr),e(Ic,GK),e(GK,GSr),e(Ic,OSr),e(cr,VSr),e(cr,Ox),e(Ox,XSr),e(Ox,R4e),e(R4e,zSr),e(Ox,QSr),e(cr,WSr),e(cr,Ot),M(Vx,Ot,null),e(Ot,HSr),e(Ot,P4e),e(P4e,USr),e(Ot,JSr),e(Ot,Nc),e(Nc,YSr),e(Nc,B4e),e(B4e,KSr),e(Nc,ZSr),e(Nc,OK),e(OK,eRr),e(Nc,oRr),e(Ot,rRr),M(KE,Ot,null),e(cr,tRr),e(cr,qr),M(Xx,qr,null),e(qr,aRr),e(qr,I4e),e(I4e,nRr),e(qr,sRr),e(qr,_n),e(_n,lRr),e(_n,N4e),e(N4e,iRr),e(_n,dRr),e(_n,q4e),e(q4e,cRr),e(_n,fRr),e(_n,j4e),e(j4e,mRr),e(_n,gRr),e(qr,hRr),e(qr,de),e(de,ZE),e(ZE,D4e),e(D4e,pRr),e(ZE,_Rr),e(ZE,VK),e(VK,uRr),e(ZE,bRr),e(de,vRr),e(de,eC),e(eC,G4e),e(G4e,FRr),e(eC,TRr),e(eC,XK),e(XK,MRr),e(eC,ERr),e(de,CRr),e(de,oC),e(oC,O4e),e(O4e,wRr),e(oC,ARr),e(oC,zK),e(zK,LRr),e(oC,yRr),e(de,xRr),e(de,rC),e(rC,V4e),e(V4e,$Rr),e(rC,kRr),e(rC,QK),e(QK,SRr),e(rC,RRr),e(de,PRr),e(de,tC),e(tC,X4e),e(X4e,BRr),e(tC,IRr),e(tC,WK),e(WK,NRr),e(tC,qRr),e(de,jRr),e(de,aC),e(aC,z4e),e(z4e,DRr),e(aC,GRr),e(aC,HK),e(HK,ORr),e(aC,VRr),e(de,XRr),e(de,nC),e(nC,Q4e),e(Q4e,zRr),e(nC,QRr),e(nC,UK),e(UK,WRr),e(nC,HRr),e(de,URr),e(de,sC),e(sC,W4e),e(W4e,JRr),e(sC,YRr),e(sC,JK),e(JK,KRr),e(sC,ZRr),e(de,ePr),e(de,lC),e(lC,H4e),e(H4e,oPr),e(lC,rPr),e(lC,YK),e(YK,tPr),e(lC,aPr),e(de,nPr),e(de,iC),e(iC,U4e),e(U4e,sPr),e(iC,lPr),e(iC,KK),e(KK,iPr),e(iC,dPr),e(de,cPr),e(de,dC),e(dC,J4e),e(J4e,fPr),e(dC,mPr),e(dC,ZK),e(ZK,gPr),e(dC,hPr),e(de,pPr),e(de,cC),e(cC,Y4e),e(Y4e,_Pr),e(cC,uPr),e(cC,eZ),e(eZ,bPr),e(cC,vPr),e(de,FPr),e(de,fC),e(fC,K4e),e(K4e,TPr),e(fC,MPr),e(fC,oZ),e(oZ,EPr),e(fC,CPr),e(de,wPr),e(de,mC),e(mC,Z4e),e(Z4e,APr),e(mC,LPr),e(mC,rZ),e(rZ,yPr),e(mC,xPr),e(de,$Pr),e(de,gC),e(gC,eEe),e(eEe,kPr),e(gC,SPr),e(gC,tZ),e(tZ,RPr),e(gC,PPr),e(de,BPr),e(de,hC),e(hC,oEe),e(oEe,IPr),e(hC,NPr),e(hC,aZ),e(aZ,qPr),e(hC,jPr),e(de,DPr),e(de,pC),e(pC,rEe),e(rEe,GPr),e(pC,OPr),e(pC,nZ),e(nZ,VPr),e(pC,XPr),e(de,zPr),e(de,_C),e(_C,tEe),e(tEe,QPr),e(_C,WPr),e(_C,sZ),e(sZ,HPr),e(_C,UPr),e(de,JPr),e(de,uC),e(uC,aEe),e(aEe,YPr),e(uC,KPr),e(uC,lZ),e(lZ,ZPr),e(uC,eBr),e(de,oBr),e(de,bC),e(bC,nEe),e(nEe,rBr),e(bC,tBr),e(bC,iZ),e(iZ,aBr),e(bC,nBr),e(qr,sBr),M(vC,qr,null),b(f,Tze,u),b(f,qc,u),e(qc,FC),e(FC,sEe),M(zx,sEe,null),e(qc,lBr),e(qc,lEe),e(lEe,iBr),b(f,Mze,u),b(f,fr,u),M(Qx,fr,null),e(fr,dBr),e(fr,jc),e(jc,cBr),e(jc,dZ),e(dZ,fBr),e(jc,mBr),e(jc,cZ),e(cZ,gBr),e(jc,hBr),e(fr,pBr),e(fr,Wx),e(Wx,_Br),e(Wx,iEe),e(iEe,uBr),e(Wx,bBr),e(fr,vBr),e(fr,Vt),M(Hx,Vt,null),e(Vt,FBr),e(Vt,dEe),e(dEe,TBr),e(Vt,MBr),e(Vt,Dc),e(Dc,EBr),e(Dc,cEe),e(cEe,CBr),e(Dc,wBr),e(Dc,fZ),e(fZ,ABr),e(Dc,LBr),e(Vt,yBr),M(TC,Vt,null),e(fr,xBr),e(fr,jr),M(Ux,jr,null),e(jr,$Br),e(jr,fEe),e(fEe,kBr),e(jr,SBr),e(jr,un),e(un,RBr),e(un,mEe),e(mEe,PBr),e(un,BBr),e(un,gEe),e(gEe,IBr),e(un,NBr),e(un,hEe),e(hEe,qBr),e(un,jBr),e(jr,DBr),e(jr,ce),e(ce,MC),e(MC,pEe),e(pEe,GBr),e(MC,OBr),e(MC,mZ),e(mZ,VBr),e(MC,XBr),e(ce,zBr),e(ce,EC),e(EC,_Ee),e(_Ee,QBr),e(EC,WBr),e(EC,gZ),e(gZ,HBr),e(EC,UBr),e(ce,JBr),e(ce,CC),e(CC,uEe),e(uEe,YBr),e(CC,KBr),e(CC,hZ),e(hZ,ZBr),e(CC,eIr),e(ce,oIr),e(ce,wC),e(wC,bEe),e(bEe,rIr),e(wC,tIr),e(wC,pZ),e(pZ,aIr),e(wC,nIr),e(ce,sIr),e(ce,AC),e(AC,vEe),e(vEe,lIr),e(AC,iIr),e(AC,_Z),e(_Z,dIr),e(AC,cIr),e(ce,fIr),e(ce,LC),e(LC,FEe),e(FEe,mIr),e(LC,gIr),e(LC,uZ),e(uZ,hIr),e(LC,pIr),e(ce,_Ir),e(ce,yC),e(yC,TEe),e(TEe,uIr),e(yC,bIr),e(yC,bZ),e(bZ,vIr),e(yC,FIr),e(ce,TIr),e(ce,xC),e(xC,MEe),e(MEe,MIr),e(xC,EIr),e(xC,vZ),e(vZ,CIr),e(xC,wIr),e(ce,AIr),e(ce,$C),e($C,EEe),e(EEe,LIr),e($C,yIr),e($C,FZ),e(FZ,xIr),e($C,$Ir),e(ce,kIr),e(ce,kC),e(kC,CEe),e(CEe,SIr),e(kC,RIr),e(kC,TZ),e(TZ,PIr),e(kC,BIr),e(ce,IIr),e(ce,SC),e(SC,wEe),e(wEe,NIr),e(SC,qIr),e(SC,MZ),e(MZ,jIr),e(SC,DIr),e(ce,GIr),e(ce,RC),e(RC,AEe),e(AEe,OIr),e(RC,VIr),e(RC,EZ),e(EZ,XIr),e(RC,zIr),e(ce,QIr),e(ce,PC),e(PC,LEe),e(LEe,WIr),e(PC,HIr),e(PC,CZ),e(CZ,UIr),e(PC,JIr),e(ce,YIr),e(ce,BC),e(BC,yEe),e(yEe,KIr),e(BC,ZIr),e(BC,wZ),e(wZ,eNr),e(BC,oNr),e(ce,rNr),e(ce,IC),e(IC,xEe),e(xEe,tNr),e(IC,aNr),e(IC,AZ),e(AZ,nNr),e(IC,sNr),e(ce,lNr),e(ce,NC),e(NC,$Ee),e($Ee,iNr),e(NC,dNr),e(NC,LZ),e(LZ,cNr),e(NC,fNr),e(ce,mNr),e(ce,qC),e(qC,kEe),e(kEe,gNr),e(qC,hNr),e(qC,yZ),e(yZ,pNr),e(qC,_Nr),e(ce,uNr),e(ce,jC),e(jC,SEe),e(SEe,bNr),e(jC,vNr),e(jC,xZ),e(xZ,FNr),e(jC,TNr),e(ce,MNr),e(ce,DC),e(DC,REe),e(REe,ENr),e(DC,CNr),e(DC,$Z),e($Z,wNr),e(DC,ANr),e(ce,LNr),e(ce,GC),e(GC,PEe),e(PEe,yNr),e(GC,xNr),e(GC,kZ),e(kZ,$Nr),e(GC,kNr),e(jr,SNr),M(OC,jr,null),b(f,Eze,u),b(f,Gc,u),e(Gc,VC),e(VC,BEe),M(Jx,BEe,null),e(Gc,RNr),e(Gc,IEe),e(IEe,PNr),b(f,Cze,u),b(f,mr,u),M(Yx,mr,null),e(mr,BNr),e(mr,Oc),e(Oc,INr),e(Oc,SZ),e(SZ,NNr),e(Oc,qNr),e(Oc,RZ),e(RZ,jNr),e(Oc,DNr),e(mr,GNr),e(mr,Kx),e(Kx,ONr),e(Kx,NEe),e(NEe,VNr),e(Kx,XNr),e(mr,zNr),e(mr,Xt),M(Zx,Xt,null),e(Xt,QNr),e(Xt,qEe),e(qEe,WNr),e(Xt,HNr),e(Xt,Vc),e(Vc,UNr),e(Vc,jEe),e(jEe,JNr),e(Vc,YNr),e(Vc,PZ),e(PZ,KNr),e(Vc,ZNr),e(Xt,eqr),M(XC,Xt,null),e(mr,oqr),e(mr,Dr),M(e$,Dr,null),e(Dr,rqr),e(Dr,DEe),e(DEe,tqr),e(Dr,aqr),e(Dr,bn),e(bn,nqr),e(bn,GEe),e(GEe,sqr),e(bn,lqr),e(bn,OEe),e(OEe,iqr),e(bn,dqr),e(bn,VEe),e(VEe,cqr),e(bn,fqr),e(Dr,mqr),e(Dr,XEe),e(XEe,zC),e(zC,zEe),e(zEe,gqr),e(zC,hqr),e(zC,BZ),e(BZ,pqr),e(zC,_qr),e(Dr,uqr),M(QC,Dr,null),b(f,wze,u),b(f,Xc,u),e(Xc,WC),e(WC,QEe),M(o$,QEe,null),e(Xc,bqr),e(Xc,WEe),e(WEe,vqr),b(f,Aze,u),b(f,gr,u),M(r$,gr,null),e(gr,Fqr),e(gr,zc),e(zc,Tqr),e(zc,IZ),e(IZ,Mqr),e(zc,Eqr),e(zc,NZ),e(NZ,Cqr),e(zc,wqr),e(gr,Aqr),e(gr,t$),e(t$,Lqr),e(t$,HEe),e(HEe,yqr),e(t$,xqr),e(gr,$qr),e(gr,zt),M(a$,zt,null),e(zt,kqr),e(zt,UEe),e(UEe,Sqr),e(zt,Rqr),e(zt,Qc),e(Qc,Pqr),e(Qc,JEe),e(JEe,Bqr),e(Qc,Iqr),e(Qc,qZ),e(qZ,Nqr),e(Qc,qqr),e(zt,jqr),M(HC,zt,null),e(gr,Dqr),e(gr,Gr),M(n$,Gr,null),e(Gr,Gqr),e(Gr,YEe),e(YEe,Oqr),e(Gr,Vqr),e(Gr,vn),e(vn,Xqr),e(vn,KEe),e(KEe,zqr),e(vn,Qqr),e(vn,ZEe),e(ZEe,Wqr),e(vn,Hqr),e(vn,eCe),e(eCe,Uqr),e(vn,Jqr),e(Gr,Yqr),e(Gr,oCe),e(oCe,UC),e(UC,rCe),e(rCe,Kqr),e(UC,Zqr),e(UC,jZ),e(jZ,ejr),e(UC,ojr),e(Gr,rjr),M(JC,Gr,null),b(f,Lze,u),b(f,Wc,u),e(Wc,YC),e(YC,tCe),M(s$,tCe,null),e(Wc,tjr),e(Wc,aCe),e(aCe,ajr),b(f,yze,u),b(f,hr,u),M(l$,hr,null),e(hr,njr),e(hr,Hc),e(Hc,sjr),e(Hc,DZ),e(DZ,ljr),e(Hc,ijr),e(Hc,GZ),e(GZ,djr),e(Hc,cjr),e(hr,fjr),e(hr,i$),e(i$,mjr),e(i$,nCe),e(nCe,gjr),e(i$,hjr),e(hr,pjr),e(hr,Qt),M(d$,Qt,null),e(Qt,_jr),e(Qt,sCe),e(sCe,ujr),e(Qt,bjr),e(Qt,Uc),e(Uc,vjr),e(Uc,lCe),e(lCe,Fjr),e(Uc,Tjr),e(Uc,OZ),e(OZ,Mjr),e(Uc,Ejr),e(Qt,Cjr),M(KC,Qt,null),e(hr,wjr),e(hr,Or),M(c$,Or,null),e(Or,Ajr),e(Or,iCe),e(iCe,Ljr),e(Or,yjr),e(Or,Fn),e(Fn,xjr),e(Fn,dCe),e(dCe,$jr),e(Fn,kjr),e(Fn,cCe),e(cCe,Sjr),e(Fn,Rjr),e(Fn,fCe),e(fCe,Pjr),e(Fn,Bjr),e(Or,Ijr),e(Or,oe),e(oe,ZC),e(ZC,mCe),e(mCe,Njr),e(ZC,qjr),e(ZC,VZ),e(VZ,jjr),e(ZC,Djr),e(oe,Gjr),e(oe,e3),e(e3,gCe),e(gCe,Ojr),e(e3,Vjr),e(e3,XZ),e(XZ,Xjr),e(e3,zjr),e(oe,Qjr),e(oe,o3),e(o3,hCe),e(hCe,Wjr),e(o3,Hjr),e(o3,zZ),e(zZ,Ujr),e(o3,Jjr),e(oe,Yjr),e(oe,r3),e(r3,pCe),e(pCe,Kjr),e(r3,Zjr),e(r3,QZ),e(QZ,eDr),e(r3,oDr),e(oe,rDr),e(oe,t3),e(t3,_Ce),e(_Ce,tDr),e(t3,aDr),e(t3,WZ),e(WZ,nDr),e(t3,sDr),e(oe,lDr),e(oe,a3),e(a3,uCe),e(uCe,iDr),e(a3,dDr),e(a3,HZ),e(HZ,cDr),e(a3,fDr),e(oe,mDr),e(oe,n3),e(n3,bCe),e(bCe,gDr),e(n3,hDr),e(n3,UZ),e(UZ,pDr),e(n3,_Dr),e(oe,uDr),e(oe,s3),e(s3,vCe),e(vCe,bDr),e(s3,vDr),e(s3,JZ),e(JZ,FDr),e(s3,TDr),e(oe,MDr),e(oe,l3),e(l3,FCe),e(FCe,EDr),e(l3,CDr),e(l3,YZ),e(YZ,wDr),e(l3,ADr),e(oe,LDr),e(oe,i3),e(i3,TCe),e(TCe,yDr),e(i3,xDr),e(i3,KZ),e(KZ,$Dr),e(i3,kDr),e(oe,SDr),e(oe,d3),e(d3,MCe),e(MCe,RDr),e(d3,PDr),e(d3,ZZ),e(ZZ,BDr),e(d3,IDr),e(oe,NDr),e(oe,c3),e(c3,ECe),e(ECe,qDr),e(c3,jDr),e(c3,eee),e(eee,DDr),e(c3,GDr),e(oe,ODr),e(oe,f3),e(f3,CCe),e(CCe,VDr),e(f3,XDr),e(f3,oee),e(oee,zDr),e(f3,QDr),e(oe,WDr),e(oe,m3),e(m3,wCe),e(wCe,HDr),e(m3,UDr),e(m3,ree),e(ree,JDr),e(m3,YDr),e(oe,KDr),e(oe,g3),e(g3,ACe),e(ACe,ZDr),e(g3,eGr),e(g3,tee),e(tee,oGr),e(g3,rGr),e(oe,tGr),e(oe,h3),e(h3,LCe),e(LCe,aGr),e(h3,nGr),e(h3,aee),e(aee,sGr),e(h3,lGr),e(oe,iGr),e(oe,p3),e(p3,yCe),e(yCe,dGr),e(p3,cGr),e(p3,nee),e(nee,fGr),e(p3,mGr),e(oe,gGr),e(oe,_3),e(_3,xCe),e(xCe,hGr),e(_3,pGr),e(_3,see),e(see,_Gr),e(_3,uGr),e(oe,bGr),e(oe,u3),e(u3,$Ce),e($Ce,vGr),e(u3,FGr),e(u3,lee),e(lee,TGr),e(u3,MGr),e(oe,EGr),e(oe,b3),e(b3,kCe),e(kCe,CGr),e(b3,wGr),e(b3,iee),e(iee,AGr),e(b3,LGr),e(oe,yGr),e(oe,v3),e(v3,SCe),e(SCe,xGr),e(v3,$Gr),e(v3,dee),e(dee,kGr),e(v3,SGr),e(oe,RGr),e(oe,F3),e(F3,RCe),e(RCe,PGr),e(F3,BGr),e(F3,cee),e(cee,IGr),e(F3,NGr),e(oe,qGr),e(oe,T3),e(T3,PCe),e(PCe,jGr),e(T3,DGr),e(T3,fee),e(fee,GGr),e(T3,OGr),e(oe,VGr),e(oe,M3),e(M3,BCe),e(BCe,XGr),e(M3,zGr),e(M3,mee),e(mee,QGr),e(M3,WGr),e(oe,HGr),e(oe,E3),e(E3,ICe),e(ICe,UGr),e(E3,JGr),e(E3,gee),e(gee,YGr),e(E3,KGr),e(oe,ZGr),e(oe,C3),e(C3,NCe),e(NCe,eOr),e(C3,oOr),e(C3,hee),e(hee,rOr),e(C3,tOr),e(oe,aOr),e(oe,w3),e(w3,qCe),e(qCe,nOr),e(w3,sOr),e(w3,pee),e(pee,lOr),e(w3,iOr),e(Or,dOr),M(A3,Or,null),b(f,xze,u),b(f,Jc,u),e(Jc,L3),e(L3,jCe),M(f$,jCe,null),e(Jc,cOr),e(Jc,DCe),e(DCe,fOr),b(f,$ze,u),b(f,pr,u),M(m$,pr,null),e(pr,mOr),e(pr,Yc),e(Yc,gOr),e(Yc,_ee),e(_ee,hOr),e(Yc,pOr),e(Yc,uee),e(uee,_Or),e(Yc,uOr),e(pr,bOr),e(pr,g$),e(g$,vOr),e(g$,GCe),e(GCe,FOr),e(g$,TOr),e(pr,MOr),e(pr,Wt),M(h$,Wt,null),e(Wt,EOr),e(Wt,OCe),e(OCe,COr),e(Wt,wOr),e(Wt,Kc),e(Kc,AOr),e(Kc,VCe),e(VCe,LOr),e(Kc,yOr),e(Kc,bee),e(bee,xOr),e(Kc,$Or),e(Wt,kOr),M(y3,Wt,null),e(pr,SOr),e(pr,Vr),M(p$,Vr,null),e(Vr,ROr),e(Vr,XCe),e(XCe,POr),e(Vr,BOr),e(Vr,Tn),e(Tn,IOr),e(Tn,zCe),e(zCe,NOr),e(Tn,qOr),e(Tn,QCe),e(QCe,jOr),e(Tn,DOr),e(Tn,WCe),e(WCe,GOr),e(Tn,OOr),e(Vr,VOr),e(Vr,xe),e(xe,x3),e(x3,HCe),e(HCe,XOr),e(x3,zOr),e(x3,vee),e(vee,QOr),e(x3,WOr),e(xe,HOr),e(xe,$3),e($3,UCe),e(UCe,UOr),e($3,JOr),e($3,Fee),e(Fee,YOr),e($3,KOr),e(xe,ZOr),e(xe,k3),e(k3,JCe),e(JCe,eVr),e(k3,oVr),e(k3,Tee),e(Tee,rVr),e(k3,tVr),e(xe,aVr),e(xe,S3),e(S3,YCe),e(YCe,nVr),e(S3,sVr),e(S3,Mee),e(Mee,lVr),e(S3,iVr),e(xe,dVr),e(xe,R3),e(R3,KCe),e(KCe,cVr),e(R3,fVr),e(R3,Eee),e(Eee,mVr),e(R3,gVr),e(xe,hVr),e(xe,P3),e(P3,ZCe),e(ZCe,pVr),e(P3,_Vr),e(P3,Cee),e(Cee,uVr),e(P3,bVr),e(xe,vVr),e(xe,B3),e(B3,e3e),e(e3e,FVr),e(B3,TVr),e(B3,wee),e(wee,MVr),e(B3,EVr),e(xe,CVr),e(xe,I3),e(I3,o3e),e(o3e,wVr),e(I3,AVr),e(I3,Aee),e(Aee,LVr),e(I3,yVr),e(xe,xVr),e(xe,N3),e(N3,r3e),e(r3e,$Vr),e(N3,kVr),e(N3,Lee),e(Lee,SVr),e(N3,RVr),e(xe,PVr),e(xe,q3),e(q3,t3e),e(t3e,BVr),e(q3,IVr),e(q3,yee),e(yee,NVr),e(q3,qVr),e(Vr,jVr),M(j3,Vr,null),b(f,kze,u),b(f,Zc,u),e(Zc,D3),e(D3,a3e),M(_$,a3e,null),e(Zc,DVr),e(Zc,n3e),e(n3e,GVr),b(f,Sze,u),b(f,_r,u),M(u$,_r,null),e(_r,OVr),e(_r,ef),e(ef,VVr),e(ef,xee),e(xee,XVr),e(ef,zVr),e(ef,$ee),e($ee,QVr),e(ef,WVr),e(_r,HVr),e(_r,b$),e(b$,UVr),e(b$,s3e),e(s3e,JVr),e(b$,YVr),e(_r,KVr),e(_r,Ht),M(v$,Ht,null),e(Ht,ZVr),e(Ht,l3e),e(l3e,eXr),e(Ht,oXr),e(Ht,of),e(of,rXr),e(of,i3e),e(i3e,tXr),e(of,aXr),e(of,kee),e(kee,nXr),e(of,sXr),e(Ht,lXr),M(G3,Ht,null),e(_r,iXr),e(_r,Xr),M(F$,Xr,null),e(Xr,dXr),e(Xr,d3e),e(d3e,cXr),e(Xr,fXr),e(Xr,Mn),e(Mn,mXr),e(Mn,c3e),e(c3e,gXr),e(Mn,hXr),e(Mn,f3e),e(f3e,pXr),e(Mn,_Xr),e(Mn,m3e),e(m3e,uXr),e(Mn,bXr),e(Xr,vXr),e(Xr,Ee),e(Ee,O3),e(O3,g3e),e(g3e,FXr),e(O3,TXr),e(O3,See),e(See,MXr),e(O3,EXr),e(Ee,CXr),e(Ee,V3),e(V3,h3e),e(h3e,wXr),e(V3,AXr),e(V3,Ree),e(Ree,LXr),e(V3,yXr),e(Ee,xXr),e(Ee,X3),e(X3,p3e),e(p3e,$Xr),e(X3,kXr),e(X3,Pee),e(Pee,SXr),e(X3,RXr),e(Ee,PXr),e(Ee,z3),e(z3,_3e),e(_3e,BXr),e(z3,IXr),e(z3,Bee),e(Bee,NXr),e(z3,qXr),e(Ee,jXr),e(Ee,Q3),e(Q3,u3e),e(u3e,DXr),e(Q3,GXr),e(Q3,Iee),e(Iee,OXr),e(Q3,VXr),e(Ee,XXr),e(Ee,W3),e(W3,b3e),e(b3e,zXr),e(W3,QXr),e(W3,Nee),e(Nee,WXr),e(W3,HXr),e(Ee,UXr),e(Ee,H3),e(H3,v3e),e(v3e,JXr),e(H3,YXr),e(H3,qee),e(qee,KXr),e(H3,ZXr),e(Ee,ezr),e(Ee,U3),e(U3,F3e),e(F3e,ozr),e(U3,rzr),e(U3,jee),e(jee,tzr),e(U3,azr),e(Ee,nzr),e(Ee,J3),e(J3,T3e),e(T3e,szr),e(J3,lzr),e(J3,Dee),e(Dee,izr),e(J3,dzr),e(Ee,czr),e(Ee,Y3),e(Y3,M3e),e(M3e,fzr),e(Y3,mzr),e(Y3,Gee),e(Gee,gzr),e(Y3,hzr),e(Ee,pzr),e(Ee,K3),e(K3,E3e),e(E3e,_zr),e(K3,uzr),e(K3,Oee),e(Oee,bzr),e(K3,vzr),e(Ee,Fzr),e(Ee,Z3),e(Z3,C3e),e(C3e,Tzr),e(Z3,Mzr),e(Z3,Vee),e(Vee,Ezr),e(Z3,Czr),e(Ee,wzr),e(Ee,e5),e(e5,w3e),e(w3e,Azr),e(e5,Lzr),e(e5,Xee),e(Xee,yzr),e(e5,xzr),e(Xr,$zr),M(o5,Xr,null),b(f,Rze,u),b(f,rf,u),e(rf,r5),e(r5,A3e),M(T$,A3e,null),e(rf,kzr),e(rf,L3e),e(L3e,Szr),b(f,Pze,u),b(f,ur,u),M(M$,ur,null),e(ur,Rzr),e(ur,tf),e(tf,Pzr),e(tf,zee),e(zee,Bzr),e(tf,Izr),e(tf,Qee),e(Qee,Nzr),e(tf,qzr),e(ur,jzr),e(ur,E$),e(E$,Dzr),e(E$,y3e),e(y3e,Gzr),e(E$,Ozr),e(ur,Vzr),e(ur,Ut),M(C$,Ut,null),e(Ut,Xzr),e(Ut,x3e),e(x3e,zzr),e(Ut,Qzr),e(Ut,af),e(af,Wzr),e(af,$3e),e($3e,Hzr),e(af,Uzr),e(af,Wee),e(Wee,Jzr),e(af,Yzr),e(Ut,Kzr),M(t5,Ut,null),e(ur,Zzr),e(ur,zr),M(w$,zr,null),e(zr,eQr),e(zr,k3e),e(k3e,oQr),e(zr,rQr),e(zr,En),e(En,tQr),e(En,S3e),e(S3e,aQr),e(En,nQr),e(En,R3e),e(R3e,sQr),e(En,lQr),e(En,P3e),e(P3e,iQr),e(En,dQr),e(zr,cQr),e(zr,$e),e($e,a5),e(a5,B3e),e(B3e,fQr),e(a5,mQr),e(a5,Hee),e(Hee,gQr),e(a5,hQr),e($e,pQr),e($e,n5),e(n5,I3e),e(I3e,_Qr),e(n5,uQr),e(n5,Uee),e(Uee,bQr),e(n5,vQr),e($e,FQr),e($e,s5),e(s5,N3e),e(N3e,TQr),e(s5,MQr),e(s5,Jee),e(Jee,EQr),e(s5,CQr),e($e,wQr),e($e,l5),e(l5,q3e),e(q3e,AQr),e(l5,LQr),e(l5,Yee),e(Yee,yQr),e(l5,xQr),e($e,$Qr),e($e,i5),e(i5,j3e),e(j3e,kQr),e(i5,SQr),e(i5,Kee),e(Kee,RQr),e(i5,PQr),e($e,BQr),e($e,d5),e(d5,D3e),e(D3e,IQr),e(d5,NQr),e(d5,Zee),e(Zee,qQr),e(d5,jQr),e($e,DQr),e($e,c5),e(c5,G3e),e(G3e,GQr),e(c5,OQr),e(c5,eoe),e(eoe,VQr),e(c5,XQr),e($e,zQr),e($e,f5),e(f5,O3e),e(O3e,QQr),e(f5,WQr),e(f5,ooe),e(ooe,HQr),e(f5,UQr),e($e,JQr),e($e,m5),e(m5,V3e),e(V3e,YQr),e(m5,KQr),e(m5,roe),e(roe,ZQr),e(m5,eWr),e($e,oWr),e($e,g5),e(g5,X3e),e(X3e,rWr),e(g5,tWr),e(g5,toe),e(toe,aWr),e(g5,nWr),e(zr,sWr),M(h5,zr,null),b(f,Bze,u),b(f,nf,u),e(nf,p5),e(p5,z3e),M(A$,z3e,null),e(nf,lWr),e(nf,Q3e),e(Q3e,iWr),b(f,Ize,u),b(f,br,u),M(L$,br,null),e(br,dWr),e(br,sf),e(sf,cWr),e(sf,aoe),e(aoe,fWr),e(sf,mWr),e(sf,noe),e(noe,gWr),e(sf,hWr),e(br,pWr),e(br,y$),e(y$,_Wr),e(y$,W3e),e(W3e,uWr),e(y$,bWr),e(br,vWr),e(br,Jt),M(x$,Jt,null),e(Jt,FWr),e(Jt,H3e),e(H3e,TWr),e(Jt,MWr),e(Jt,lf),e(lf,EWr),e(lf,U3e),e(U3e,CWr),e(lf,wWr),e(lf,soe),e(soe,AWr),e(lf,LWr),e(Jt,yWr),M(_5,Jt,null),e(br,xWr),e(br,Qr),M($$,Qr,null),e(Qr,$Wr),e(Qr,J3e),e(J3e,kWr),e(Qr,SWr),e(Qr,Cn),e(Cn,RWr),e(Cn,Y3e),e(Y3e,PWr),e(Cn,BWr),e(Cn,K3e),e(K3e,IWr),e(Cn,NWr),e(Cn,Z3e),e(Z3e,qWr),e(Cn,jWr),e(Qr,DWr),e(Qr,ke),e(ke,u5),e(u5,e5e),e(e5e,GWr),e(u5,OWr),e(u5,loe),e(loe,VWr),e(u5,XWr),e(ke,zWr),e(ke,b5),e(b5,o5e),e(o5e,QWr),e(b5,WWr),e(b5,ioe),e(ioe,HWr),e(b5,UWr),e(ke,JWr),e(ke,v5),e(v5,r5e),e(r5e,YWr),e(v5,KWr),e(v5,doe),e(doe,ZWr),e(v5,eHr),e(ke,oHr),e(ke,F5),e(F5,t5e),e(t5e,rHr),e(F5,tHr),e(F5,coe),e(coe,aHr),e(F5,nHr),e(ke,sHr),e(ke,T5),e(T5,a5e),e(a5e,lHr),e(T5,iHr),e(T5,foe),e(foe,dHr),e(T5,cHr),e(ke,fHr),e(ke,M5),e(M5,n5e),e(n5e,mHr),e(M5,gHr),e(M5,moe),e(moe,hHr),e(M5,pHr),e(ke,_Hr),e(ke,E5),e(E5,s5e),e(s5e,uHr),e(E5,bHr),e(E5,goe),e(goe,vHr),e(E5,FHr),e(ke,THr),e(ke,C5),e(C5,l5e),e(l5e,MHr),e(C5,EHr),e(C5,hoe),e(hoe,CHr),e(C5,wHr),e(ke,AHr),e(ke,w5),e(w5,i5e),e(i5e,LHr),e(w5,yHr),e(w5,poe),e(poe,xHr),e(w5,$Hr),e(ke,kHr),e(ke,A5),e(A5,d5e),e(d5e,SHr),e(A5,RHr),e(A5,_oe),e(_oe,PHr),e(A5,BHr),e(Qr,IHr),M(L5,Qr,null),b(f,Nze,u),b(f,df,u),e(df,y5),e(y5,c5e),M(k$,c5e,null),e(df,NHr),e(df,f5e),e(f5e,qHr),b(f,qze,u),b(f,vr,u),M(S$,vr,null),e(vr,jHr),e(vr,cf),e(cf,DHr),e(cf,uoe),e(uoe,GHr),e(cf,OHr),e(cf,boe),e(boe,VHr),e(cf,XHr),e(vr,zHr),e(vr,R$),e(R$,QHr),e(R$,m5e),e(m5e,WHr),e(R$,HHr),e(vr,UHr),e(vr,Yt),M(P$,Yt,null),e(Yt,JHr),e(Yt,g5e),e(g5e,YHr),e(Yt,KHr),e(Yt,ff),e(ff,ZHr),e(ff,h5e),e(h5e,eUr),e(ff,oUr),e(ff,voe),e(voe,rUr),e(ff,tUr),e(Yt,aUr),M(x5,Yt,null),e(vr,nUr),e(vr,Wr),M(B$,Wr,null),e(Wr,sUr),e(Wr,p5e),e(p5e,lUr),e(Wr,iUr),e(Wr,wn),e(wn,dUr),e(wn,_5e),e(_5e,cUr),e(wn,fUr),e(wn,u5e),e(u5e,mUr),e(wn,gUr),e(wn,b5e),e(b5e,hUr),e(wn,pUr),e(Wr,_Ur),e(Wr,Se),e(Se,$5),e($5,v5e),e(v5e,uUr),e($5,bUr),e($5,Foe),e(Foe,vUr),e($5,FUr),e(Se,TUr),e(Se,k5),e(k5,F5e),e(F5e,MUr),e(k5,EUr),e(k5,Toe),e(Toe,CUr),e(k5,wUr),e(Se,AUr),e(Se,S5),e(S5,T5e),e(T5e,LUr),e(S5,yUr),e(S5,Moe),e(Moe,xUr),e(S5,$Ur),e(Se,kUr),e(Se,R5),e(R5,M5e),e(M5e,SUr),e(R5,RUr),e(R5,Eoe),e(Eoe,PUr),e(R5,BUr),e(Se,IUr),e(Se,P5),e(P5,E5e),e(E5e,NUr),e(P5,qUr),e(P5,Coe),e(Coe,jUr),e(P5,DUr),e(Se,GUr),e(Se,B5),e(B5,C5e),e(C5e,OUr),e(B5,VUr),e(B5,woe),e(woe,XUr),e(B5,zUr),e(Se,QUr),e(Se,I5),e(I5,w5e),e(w5e,WUr),e(I5,HUr),e(I5,Aoe),e(Aoe,UUr),e(I5,JUr),e(Se,YUr),e(Se,N5),e(N5,A5e),e(A5e,KUr),e(N5,ZUr),e(N5,Loe),e(Loe,eJr),e(N5,oJr),e(Se,rJr),e(Se,q5),e(q5,L5e),e(L5e,tJr),e(q5,aJr),e(q5,yoe),e(yoe,nJr),e(q5,sJr),e(Se,lJr),e(Se,j5),e(j5,y5e),e(y5e,iJr),e(j5,dJr),e(j5,xoe),e(xoe,cJr),e(j5,fJr),e(Wr,mJr),M(D5,Wr,null),b(f,jze,u),b(f,mf,u),e(mf,G5),e(G5,x5e),M(I$,x5e,null),e(mf,gJr),e(mf,$5e),e($5e,hJr),b(f,Dze,u),b(f,Fr,u),M(N$,Fr,null),e(Fr,pJr),e(Fr,gf),e(gf,_Jr),e(gf,$oe),e($oe,uJr),e(gf,bJr),e(gf,koe),e(koe,vJr),e(gf,FJr),e(Fr,TJr),e(Fr,q$),e(q$,MJr),e(q$,k5e),e(k5e,EJr),e(q$,CJr),e(Fr,wJr),e(Fr,Kt),M(j$,Kt,null),e(Kt,AJr),e(Kt,S5e),e(S5e,LJr),e(Kt,yJr),e(Kt,hf),e(hf,xJr),e(hf,R5e),e(R5e,$Jr),e(hf,kJr),e(hf,Soe),e(Soe,SJr),e(hf,RJr),e(Kt,PJr),M(O5,Kt,null),e(Fr,BJr),e(Fr,Hr),M(D$,Hr,null),e(Hr,IJr),e(Hr,P5e),e(P5e,NJr),e(Hr,qJr),e(Hr,An),e(An,jJr),e(An,B5e),e(B5e,DJr),e(An,GJr),e(An,I5e),e(I5e,OJr),e(An,VJr),e(An,N5e),e(N5e,XJr),e(An,zJr),e(Hr,QJr),e(Hr,Re),e(Re,V5),e(V5,q5e),e(q5e,WJr),e(V5,HJr),e(V5,Roe),e(Roe,UJr),e(V5,JJr),e(Re,YJr),e(Re,X5),e(X5,j5e),e(j5e,KJr),e(X5,ZJr),e(X5,Poe),e(Poe,eYr),e(X5,oYr),e(Re,rYr),e(Re,z5),e(z5,D5e),e(D5e,tYr),e(z5,aYr),e(z5,Boe),e(Boe,nYr),e(z5,sYr),e(Re,lYr),e(Re,Q5),e(Q5,G5e),e(G5e,iYr),e(Q5,dYr),e(Q5,Ioe),e(Ioe,cYr),e(Q5,fYr),e(Re,mYr),e(Re,W5),e(W5,O5e),e(O5e,gYr),e(W5,hYr),e(W5,Noe),e(Noe,pYr),e(W5,_Yr),e(Re,uYr),e(Re,H5),e(H5,V5e),e(V5e,bYr),e(H5,vYr),e(H5,qoe),e(qoe,FYr),e(H5,TYr),e(Re,MYr),e(Re,U5),e(U5,X5e),e(X5e,EYr),e(U5,CYr),e(U5,joe),e(joe,wYr),e(U5,AYr),e(Re,LYr),e(Re,J5),e(J5,z5e),e(z5e,yYr),e(J5,xYr),e(J5,Doe),e(Doe,$Yr),e(J5,kYr),e(Re,SYr),e(Re,Y5),e(Y5,Q5e),e(Q5e,RYr),e(Y5,PYr),e(Y5,Goe),e(Goe,BYr),e(Y5,IYr),e(Re,NYr),e(Re,K5),e(K5,W5e),e(W5e,qYr),e(K5,jYr),e(K5,Ooe),e(Ooe,DYr),e(K5,GYr),e(Hr,OYr),M(Z5,Hr,null),b(f,Gze,u),b(f,pf,u),e(pf,e0),e(e0,H5e),M(G$,H5e,null),e(pf,VYr),e(pf,U5e),e(U5e,XYr),b(f,Oze,u),b(f,Tr,u),M(O$,Tr,null),e(Tr,zYr),e(Tr,_f),e(_f,QYr),e(_f,Voe),e(Voe,WYr),e(_f,HYr),e(_f,Xoe),e(Xoe,UYr),e(_f,JYr),e(Tr,YYr),e(Tr,V$),e(V$,KYr),e(V$,J5e),e(J5e,ZYr),e(V$,eKr),e(Tr,oKr),e(Tr,Zt),M(X$,Zt,null),e(Zt,rKr),e(Zt,Y5e),e(Y5e,tKr),e(Zt,aKr),e(Zt,uf),e(uf,nKr),e(uf,K5e),e(K5e,sKr),e(uf,lKr),e(uf,zoe),e(zoe,iKr),e(uf,dKr),e(Zt,cKr),M(o0,Zt,null),e(Tr,fKr),e(Tr,Ur),M(z$,Ur,null),e(Ur,mKr),e(Ur,Z5e),e(Z5e,gKr),e(Ur,hKr),e(Ur,Ln),e(Ln,pKr),e(Ln,e0e),e(e0e,_Kr),e(Ln,uKr),e(Ln,o0e),e(o0e,bKr),e(Ln,vKr),e(Ln,r0e),e(r0e,FKr),e(Ln,TKr),e(Ur,MKr),e(Ur,Ve),e(Ve,r0),e(r0,t0e),e(t0e,EKr),e(r0,CKr),e(r0,Qoe),e(Qoe,wKr),e(r0,AKr),e(Ve,LKr),e(Ve,t0),e(t0,a0e),e(a0e,yKr),e(t0,xKr),e(t0,Woe),e(Woe,$Kr),e(t0,kKr),e(Ve,SKr),e(Ve,a0),e(a0,n0e),e(n0e,RKr),e(a0,PKr),e(a0,Hoe),e(Hoe,BKr),e(a0,IKr),e(Ve,NKr),e(Ve,n0),e(n0,s0e),e(s0e,qKr),e(n0,jKr),e(n0,Uoe),e(Uoe,DKr),e(n0,GKr),e(Ve,OKr),e(Ve,s0),e(s0,l0e),e(l0e,VKr),e(s0,XKr),e(s0,Joe),e(Joe,zKr),e(s0,QKr),e(Ve,WKr),e(Ve,l0),e(l0,i0e),e(i0e,HKr),e(l0,UKr),e(l0,Yoe),e(Yoe,JKr),e(l0,YKr),e(Ve,KKr),e(Ve,i0),e(i0,d0e),e(d0e,ZKr),e(i0,eZr),e(i0,Koe),e(Koe,oZr),e(i0,rZr),e(Ve,tZr),e(Ve,d0),e(d0,c0e),e(c0e,aZr),e(d0,nZr),e(d0,Zoe),e(Zoe,sZr),e(d0,lZr),e(Ur,iZr),M(c0,Ur,null),b(f,Vze,u),b(f,bf,u),e(bf,f0),e(f0,f0e),M(Q$,f0e,null),e(bf,dZr),e(bf,m0e),e(m0e,cZr),b(f,Xze,u),b(f,Mr,u),M(W$,Mr,null),e(Mr,fZr),e(Mr,vf),e(vf,mZr),e(vf,ere),e(ere,gZr),e(vf,hZr),e(vf,ore),e(ore,pZr),e(vf,_Zr),e(Mr,uZr),e(Mr,H$),e(H$,bZr),e(H$,g0e),e(g0e,vZr),e(H$,FZr),e(Mr,TZr),e(Mr,ea),M(U$,ea,null),e(ea,MZr),e(ea,h0e),e(h0e,EZr),e(ea,CZr),e(ea,Ff),e(Ff,wZr),e(Ff,p0e),e(p0e,AZr),e(Ff,LZr),e(Ff,rre),e(rre,yZr),e(Ff,xZr),e(ea,$Zr),M(m0,ea,null),e(Mr,kZr),e(Mr,Jr),M(J$,Jr,null),e(Jr,SZr),e(Jr,_0e),e(_0e,RZr),e(Jr,PZr),e(Jr,yn),e(yn,BZr),e(yn,u0e),e(u0e,IZr),e(yn,NZr),e(yn,b0e),e(b0e,qZr),e(yn,jZr),e(yn,v0e),e(v0e,DZr),e(yn,GZr),e(Jr,OZr),e(Jr,Xe),e(Xe,g0),e(g0,F0e),e(F0e,VZr),e(g0,XZr),e(g0,tre),e(tre,zZr),e(g0,QZr),e(Xe,WZr),e(Xe,h0),e(h0,T0e),e(T0e,HZr),e(h0,UZr),e(h0,are),e(are,JZr),e(h0,YZr),e(Xe,KZr),e(Xe,p0),e(p0,M0e),e(M0e,ZZr),e(p0,eet),e(p0,nre),e(nre,oet),e(p0,ret),e(Xe,tet),e(Xe,_0),e(_0,E0e),e(E0e,aet),e(_0,net),e(_0,sre),e(sre,set),e(_0,iet),e(Xe,det),e(Xe,u0),e(u0,C0e),e(C0e,cet),e(u0,fet),e(u0,lre),e(lre,met),e(u0,get),e(Xe,het),e(Xe,b0),e(b0,w0e),e(w0e,pet),e(b0,_et),e(b0,ire),e(ire,uet),e(b0,bet),e(Xe,vet),e(Xe,v0),e(v0,A0e),e(A0e,Fet),e(v0,Tet),e(v0,dre),e(dre,Met),e(v0,Eet),e(Xe,Cet),e(Xe,F0),e(F0,L0e),e(L0e,wet),e(F0,Aet),e(F0,cre),e(cre,Let),e(F0,yet),e(Jr,xet),M(T0,Jr,null),b(f,zze,u),b(f,Tf,u),e(Tf,M0),e(M0,y0e),M(Y$,y0e,null),e(Tf,$et),e(Tf,x0e),e(x0e,ket),b(f,Qze,u),b(f,Er,u),M(K$,Er,null),e(Er,Set),e(Er,Mf),e(Mf,Ret),e(Mf,fre),e(fre,Pet),e(Mf,Bet),e(Mf,mre),e(mre,Iet),e(Mf,Net),e(Er,qet),e(Er,Z$),e(Z$,jet),e(Z$,$0e),e($0e,Det),e(Z$,Get),e(Er,Oet),e(Er,oa),M(ek,oa,null),e(oa,Vet),e(oa,k0e),e(k0e,Xet),e(oa,zet),e(oa,Ef),e(Ef,Qet),e(Ef,S0e),e(S0e,Wet),e(Ef,Het),e(Ef,gre),e(gre,Uet),e(Ef,Jet),e(oa,Yet),M(E0,oa,null),e(Er,Ket),e(Er,Yr),M(ok,Yr,null),e(Yr,Zet),e(Yr,R0e),e(R0e,eot),e(Yr,oot),e(Yr,xn),e(xn,rot),e(xn,P0e),e(P0e,tot),e(xn,aot),e(xn,B0e),e(B0e,not),e(xn,sot),e(xn,I0e),e(I0e,lot),e(xn,iot),e(Yr,dot),e(Yr,N0e),e(N0e,C0),e(C0,q0e),e(q0e,cot),e(C0,fot),e(C0,hre),e(hre,mot),e(C0,got),e(Yr,hot),M(w0,Yr,null),b(f,Wze,u),b(f,Cf,u),e(Cf,A0),e(A0,j0e),M(rk,j0e,null),e(Cf,pot),e(Cf,D0e),e(D0e,_ot),b(f,Hze,u),b(f,Cr,u),M(tk,Cr,null),e(Cr,uot),e(Cr,wf),e(wf,bot),e(wf,pre),e(pre,vot),e(wf,Fot),e(wf,_re),e(_re,Tot),e(wf,Mot),e(Cr,Eot),e(Cr,ak),e(ak,Cot),e(ak,G0e),e(G0e,wot),e(ak,Aot),e(Cr,Lot),e(Cr,ra),M(nk,ra,null),e(ra,yot),e(ra,O0e),e(O0e,xot),e(ra,$ot),e(ra,Af),e(Af,kot),e(Af,V0e),e(V0e,Sot),e(Af,Rot),e(Af,ure),e(ure,Pot),e(Af,Bot),e(ra,Iot),M(L0,ra,null),e(Cr,Not),e(Cr,Kr),M(sk,Kr,null),e(Kr,qot),e(Kr,X0e),e(X0e,jot),e(Kr,Dot),e(Kr,$n),e($n,Got),e($n,z0e),e(z0e,Oot),e($n,Vot),e($n,Q0e),e(Q0e,Xot),e($n,zot),e($n,W0e),e(W0e,Qot),e($n,Wot),e(Kr,Hot),e(Kr,lk),e(lk,y0),e(y0,H0e),e(H0e,Uot),e(y0,Jot),e(y0,bre),e(bre,Yot),e(y0,Kot),e(lk,Zot),e(lk,x0),e(x0,U0e),e(U0e,ert),e(x0,ort),e(x0,vre),e(vre,rrt),e(x0,trt),e(Kr,art),M($0,Kr,null),b(f,Uze,u),b(f,Lf,u),e(Lf,k0),e(k0,J0e),M(ik,J0e,null),e(Lf,nrt),e(Lf,Y0e),e(Y0e,srt),b(f,Jze,u),b(f,wr,u),M(dk,wr,null),e(wr,lrt),e(wr,yf),e(yf,irt),e(yf,Fre),e(Fre,drt),e(yf,crt),e(yf,Tre),e(Tre,frt),e(yf,mrt),e(wr,grt),e(wr,ck),e(ck,hrt),e(ck,K0e),e(K0e,prt),e(ck,_rt),e(wr,urt),e(wr,ta),M(fk,ta,null),e(ta,brt),e(ta,Z0e),e(Z0e,vrt),e(ta,Frt),e(ta,xf),e(xf,Trt),e(xf,ewe),e(ewe,Mrt),e(xf,Ert),e(xf,Mre),e(Mre,Crt),e(xf,wrt),e(ta,Art),M(S0,ta,null),e(wr,Lrt),e(wr,Zr),M(mk,Zr,null),e(Zr,yrt),e(Zr,owe),e(owe,xrt),e(Zr,$rt),e(Zr,kn),e(kn,krt),e(kn,rwe),e(rwe,Srt),e(kn,Rrt),e(kn,twe),e(twe,Prt),e(kn,Brt),e(kn,awe),e(awe,Irt),e(kn,Nrt),e(Zr,qrt),e(Zr,nwe),e(nwe,R0),e(R0,swe),e(swe,jrt),e(R0,Drt),e(R0,Ere),e(Ere,Grt),e(R0,Ort),e(Zr,Vrt),M(P0,Zr,null),Yze=!0},p(f,[u]){const gk={};u&2&&(gk.$$scope={dirty:u,ctx:f}),qf.$set(gk);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),Yg.$set(lwe);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),Ph.$set(iwe);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),up.$set(dwe);const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),bp.$set(hk);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),jp.$set(cwe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Dp.$set(Sn);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),Vp.$set(fwe);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),Hu.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),Ju.$set(gwe);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),V2.$set(pk);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),z2.$set(hwe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),R1.$set(_k);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),B1.$set(pwe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),Tb.$set(uk);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),Eb.$set(_we);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),Vb.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),zb.$set(bwe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Vv.$set($f);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),zv.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),EF.$set(Fwe);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),wF.$set(Twe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),RF.$set(bk);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),BF.$set(Mwe);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),v6.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),T6.$set(Cwe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),fT.$set(at);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),gT.$set(vk);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),_T.$set(wwe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),bT.$set(Fk);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),RT.$set(Awe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),BT.$set(nt);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),qT.$set(Lwe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),DT.$set(kf);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),VT.$set(ywe);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),zT.$set(xwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),r7.$set(L);const B0={};u&2&&(B0.$$scope={dirty:u,ctx:f}),a7.$set(B0);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),f7.$set($we);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),g7.$set(kwe);const I0={};u&2&&(I0.$$scope={dirty:u,ctx:f}),w7.$set(I0);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),L7.$set(Swe);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),k7.$set(Rwe);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),R7.$set(N0);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),D7.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),O7.$set(Bwe);const q0={};u&2&&(q0.$$scope={dirty:u,ctx:f}),W7.$set(q0);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),U7.$set(Iwe);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),Z7.$set(Nwe);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),o8.$set(j0);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),a8.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),s8.$set(jwe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),g8.$set(D0);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),p8.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),b8.$set(Gwe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),F8.$set(G0);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),hM.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),_M.$set(Vwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),DM.$set(O0);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),OM.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),r4.$set(zwe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),a4.$set(V0);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),c4.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),m4.$set(Wwe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),R4.$set(X0);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),B4.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),Q4.$set(Uwe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),H4.$set(z0);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),TE.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),EE.$set(Ywe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),GE.$set(Q0);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),VE.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),QE.$set(Zwe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),HE.$set(W0);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),JE.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),KE.$set(oAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),vC.$set(H0);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),TC.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),OC.$set(tAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),XC.$set(U0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),QC.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),HC.$set(nAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),JC.$set(J0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),KC.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),A3.$set(lAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),y3.$set(Y0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),j3.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),G3.$set(dAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),o5.$set(K0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),t5.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),h5.$set(fAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),_5.$set(Z0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),L5.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),x5.$set(gAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),D5.$set(ew);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),O5.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),Z5.$set(pAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),o0.$set(ow);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),c0.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),m0.$set(uAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),T0.$set(rw);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),E0.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),w0.$set(vAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),L0.$set(tw);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),$0.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),S0.$set(TAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),P0.$set(aw)},i(f){Yze||(E(d.$$.fragment,f),E(ka.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(qf.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(dL.$$.fragment,f),E(Yg.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(pL.$$.fragment,f),E(Ph.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(TL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(LL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(Vp.$$.fragment,f),E(RL.$$.fragment,f),E(Hu.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(Ju.$$.fragment,f),E(qL.$$.fragment,f),E(V2.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(z2.$$.fragment,f),E(VL.$$.fragment,f),E(R1.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(B1.$$.fragment,f),E(HL.$$.fragment,f),E(Tb.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(Eb.$$.fragment,f),E(ZL.$$.fragment,f),E(Vb.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(zb.$$.fragment,f),E(ay.$$.fragment,f),E(Vv.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(zv.$$.fragment,f),E(dy.$$.fragment,f),E(EF.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(wF.$$.fragment,f),E(hy.$$.fragment,f),E(RF.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(BF.$$.fragment,f),E(vy.$$.fragment,f),E(v6.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(T6.$$.fragment,f),E(Cy.$$.fragment,f),E(fT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(gT.$$.fragment,f),E(xy.$$.fragment,f),E(_T.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(bT.$$.fragment,f),E(Py.$$.fragment,f),E(RT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(BT.$$.fragment,f),E(jy.$$.fragment,f),E(qT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(DT.$$.fragment,f),E(Xy.$$.fragment,f),E(VT.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(zT.$$.fragment,f),E(Uy.$$.fragment,f),E(r7.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(a7.$$.fragment,f),E(e9.$$.fragment,f),E(f7.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(g7.$$.fragment,f),E(n9.$$.fragment,f),E(w7.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(L7.$$.fragment,f),E(c9.$$.fragment,f),E(k7.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(R7.$$.fragment,f),E(_9.$$.fragment,f),E(D7.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(O7.$$.fragment,f),E(T9.$$.fragment,f),E(W7.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(U7.$$.fragment,f),E(A9.$$.fragment,f),E(Z7.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(o8.$$.fragment,f),E(S9.$$.fragment,f),E(a8.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(s8.$$.fragment,f),E(N9.$$.fragment,f),E(g8.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(p8.$$.fragment,f),E(O9.$$.fragment,f),E(b8.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(Q9.$$.fragment,f),E(F8.$$.fragment,f),E(W9.$$.fragment,f),E(hM.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(_M.$$.fragment,f),E(K9.$$.fragment,f),E(DM.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(OM.$$.fragment,f),E(tx.$$.fragment,f),E(r4.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(a4.$$.fragment,f),E(ix.$$.fragment,f),E(c4.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(m4.$$.fragment,f),E(gx.$$.fragment,f),E(R4.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(B4.$$.fragment,f),E(bx.$$.fragment,f),E(Q4.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(H4.$$.fragment,f),E(Ex.$$.fragment,f),E(TE.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(EE.$$.fragment,f),E(yx.$$.fragment,f),E(GE.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(VE.$$.fragment,f),E(Rx.$$.fragment,f),E(QE.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(HE.$$.fragment,f),E(jx.$$.fragment,f),E(JE.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(KE.$$.fragment,f),E(Xx.$$.fragment,f),E(vC.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(TC.$$.fragment,f),E(Ux.$$.fragment,f),E(OC.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(XC.$$.fragment,f),E(e$.$$.fragment,f),E(QC.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(HC.$$.fragment,f),E(n$.$$.fragment,f),E(JC.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(KC.$$.fragment,f),E(c$.$$.fragment,f),E(A3.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(y3.$$.fragment,f),E(p$.$$.fragment,f),E(j3.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(G3.$$.fragment,f),E(F$.$$.fragment,f),E(o5.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(t5.$$.fragment,f),E(w$.$$.fragment,f),E(h5.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(_5.$$.fragment,f),E($$.$$.fragment,f),E(L5.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(x5.$$.fragment,f),E(B$.$$.fragment,f),E(D5.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(O5.$$.fragment,f),E(D$.$$.fragment,f),E(Z5.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(o0.$$.fragment,f),E(z$.$$.fragment,f),E(c0.$$.fragment,f),E(Q$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(m0.$$.fragment,f),E(J$.$$.fragment,f),E(T0.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(E0.$$.fragment,f),E(ok.$$.fragment,f),E(w0.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(L0.$$.fragment,f),E(sk.$$.fragment,f),E($0.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(S0.$$.fragment,f),E(mk.$$.fragment,f),E(P0.$$.fragment,f),Yze=!0)},o(f){C(d.$$.fragment,f),C(ka.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(qf.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(dL.$$.fragment,f),C(Yg.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(pL.$$.fragment,f),C(Ph.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(TL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(LL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(Vp.$$.fragment,f),C(RL.$$.fragment,f),C(Hu.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(Ju.$$.fragment,f),C(qL.$$.fragment,f),C(V2.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(z2.$$.fragment,f),C(VL.$$.fragment,f),C(R1.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(B1.$$.fragment,f),C(HL.$$.fragment,f),C(Tb.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(Eb.$$.fragment,f),C(ZL.$$.fragment,f),C(Vb.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(zb.$$.fragment,f),C(ay.$$.fragment,f),C(Vv.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(zv.$$.fragment,f),C(dy.$$.fragment,f),C(EF.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(wF.$$.fragment,f),C(hy.$$.fragment,f),C(RF.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(BF.$$.fragment,f),C(vy.$$.fragment,f),C(v6.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(T6.$$.fragment,f),C(Cy.$$.fragment,f),C(fT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(gT.$$.fragment,f),C(xy.$$.fragment,f),C(_T.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(bT.$$.fragment,f),C(Py.$$.fragment,f),C(RT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(BT.$$.fragment,f),C(jy.$$.fragment,f),C(qT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(DT.$$.fragment,f),C(Xy.$$.fragment,f),C(VT.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(zT.$$.fragment,f),C(Uy.$$.fragment,f),C(r7.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(a7.$$.fragment,f),C(e9.$$.fragment,f),C(f7.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(g7.$$.fragment,f),C(n9.$$.fragment,f),C(w7.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(L7.$$.fragment,f),C(c9.$$.fragment,f),C(k7.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(R7.$$.fragment,f),C(_9.$$.fragment,f),C(D7.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(O7.$$.fragment,f),C(T9.$$.fragment,f),C(W7.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(U7.$$.fragment,f),C(A9.$$.fragment,f),C(Z7.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(o8.$$.fragment,f),C(S9.$$.fragment,f),C(a8.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(s8.$$.fragment,f),C(N9.$$.fragment,f),C(g8.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(p8.$$.fragment,f),C(O9.$$.fragment,f),C(b8.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(Q9.$$.fragment,f),C(F8.$$.fragment,f),C(W9.$$.fragment,f),C(hM.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(_M.$$.fragment,f),C(K9.$$.fragment,f),C(DM.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(OM.$$.fragment,f),C(tx.$$.fragment,f),C(r4.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(a4.$$.fragment,f),C(ix.$$.fragment,f),C(c4.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(m4.$$.fragment,f),C(gx.$$.fragment,f),C(R4.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(B4.$$.fragment,f),C(bx.$$.fragment,f),C(Q4.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(H4.$$.fragment,f),C(Ex.$$.fragment,f),C(TE.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(EE.$$.fragment,f),C(yx.$$.fragment,f),C(GE.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(VE.$$.fragment,f),C(Rx.$$.fragment,f),C(QE.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(HE.$$.fragment,f),C(jx.$$.fragment,f),C(JE.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(KE.$$.fragment,f),C(Xx.$$.fragment,f),C(vC.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(TC.$$.fragment,f),C(Ux.$$.fragment,f),C(OC.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(XC.$$.fragment,f),C(e$.$$.fragment,f),C(QC.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(HC.$$.fragment,f),C(n$.$$.fragment,f),C(JC.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(KC.$$.fragment,f),C(c$.$$.fragment,f),C(A3.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(y3.$$.fragment,f),C(p$.$$.fragment,f),C(j3.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(G3.$$.fragment,f),C(F$.$$.fragment,f),C(o5.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(t5.$$.fragment,f),C(w$.$$.fragment,f),C(h5.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(_5.$$.fragment,f),C($$.$$.fragment,f),C(L5.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(x5.$$.fragment,f),C(B$.$$.fragment,f),C(D5.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(O5.$$.fragment,f),C(D$.$$.fragment,f),C(Z5.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(o0.$$.fragment,f),C(z$.$$.fragment,f),C(c0.$$.fragment,f),C(Q$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(m0.$$.fragment,f),C(J$.$$.fragment,f),C(T0.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(E0.$$.fragment,f),C(ok.$$.fragment,f),C(w0.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(L0.$$.fragment,f),C(sk.$$.fragment,f),C($0.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(S0.$$.fragment,f),C(mk.$$.fragment,f),C(P0.$$.fragment,f),Yze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(ka,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Sa),f&&t(QVe),f&&t(Ri),w(tL),f&&t(WVe),f&&t(Nn),f&&t(HVe),w(aL,f),f&&t(UVe),f&&t(qS),f&&t(JVe),w(qf,f),f&&t(YVe),f&&t(Pi),w(nL),f&&t(KVe),f&&t(wo),w(sL),w(dL),w(Yg),w(cL),f&&t(ZVe),f&&t(Ii),w(fL),f&&t(eXe),f&&t(Ao),w(mL),w(pL),w(Ph),w(_L),f&&t(oXe),f&&t(Ni),w(uL),f&&t(rXe),f&&t(Lo),w(bL),w(TL),w(up),w(bp),w(ML),f&&t(tXe),f&&t(qi),w(EL),f&&t(aXe),f&&t(yo),w(CL),w(LL),w(jp),w(Dp),w(yL),f&&t(nXe),f&&t(Di),w(xL),f&&t(sXe),f&&t(xo),w($L),w(SL),w(Vp),w(RL),w(Hu),f&&t(lXe),f&&t(Vi),w(PL),f&&t(iXe),f&&t($o),w(BL),w(NL),w(Ju),w(qL),w(V2),f&&t(dXe),f&&t(Qi),w(jL),f&&t(cXe),f&&t(ko),w(DL),w(OL),w(z2),w(VL),w(R1),f&&t(fXe),f&&t(Ui),w(XL),f&&t(mXe),f&&t(So),w(zL),w(WL),w(B1),w(HL),w(Tb),f&&t(gXe),f&&t(Ki),w(UL),f&&t(hXe),f&&t(Ro),w(JL),w(KL),w(Eb),w(ZL),w(Vb),f&&t(pXe),f&&t(od),w(ey),f&&t(_Xe),f&&t(Po),w(oy),w(ty),w(zb),w(ay),w(Vv),f&&t(uXe),f&&t(ad),w(ny),f&&t(bXe),f&&t(Bo),w(sy),w(iy),w(zv),w(dy),w(EF),f&&t(vXe),f&&t(ld),w(cy),f&&t(FXe),f&&t(Io),w(fy),w(gy),w(wF),w(hy),w(RF),f&&t(TXe),f&&t(cd),w(py),f&&t(MXe),f&&t(qo),w(_y),w(by),w(BF),w(vy),w(v6),f&&t(EXe),f&&t(gd),w(Fy),f&&t(CXe),f&&t(jo),w(Ty),w(Ey),w(T6),w(Cy),w(fT),f&&t(wXe),f&&t(_d),w(wy),f&&t(AXe),f&&t(Do),w(Ay),w(yy),w(gT),w(xy),w(_T),f&&t(LXe),f&&t(vd),w($y),f&&t(yXe),f&&t(Go),w(ky),w(Ry),w(bT),w(Py),w(RT),f&&t(xXe),f&&t(Md),w(By),f&&t($Xe),f&&t(Oo),w(Iy),w(qy),w(BT),w(jy),w(qT),f&&t(kXe),f&&t(wd),w(Dy),f&&t(SXe),f&&t(Vo),w(Gy),w(Vy),w(DT),w(Xy),w(VT),f&&t(RXe),f&&t(yd),w(zy),f&&t(PXe),f&&t(Xo),w(Qy),w(Hy),w(zT),w(Uy),w(r7),f&&t(BXe),f&&t(kd),w(Jy),f&&t(IXe),f&&t(zo),w(Yy),w(Zy),w(a7),w(e9),w(f7),f&&t(NXe),f&&t(Pd),w(o9),f&&t(qXe),f&&t(Qo),w(r9),w(a9),w(g7),w(n9),w(w7),f&&t(jXe),f&&t(Nd),w(s9),f&&t(DXe),f&&t(Wo),w(l9),w(d9),w(L7),w(c9),w(k7),f&&t(GXe),f&&t(Dd),w(m9),f&&t(OXe),f&&t(Ho),w(g9),w(p9),w(R7),w(_9),w(D7),f&&t(VXe),f&&t(Vd),w(u9),f&&t(XXe),f&&t(Uo),w(b9),w(F9),w(O7),w(T9),w(W7),f&&t(zXe),f&&t(Wd),w(M9),f&&t(QXe),f&&t(Jo),w(E9),w(w9),w(U7),w(A9),w(Z7),f&&t(WXe),f&&t(Jd),w(y9),f&&t(HXe),f&&t(Yo),w(x9),w(k9),w(o8),w(S9),w(a8),f&&t(UXe),f&&t(Zd),w(R9),f&&t(JXe),f&&t(Ko),w(P9),w(I9),w(s8),w(N9),w(g8),f&&t(YXe),f&&t(rc),w(q9),f&&t(KXe),f&&t(Zo),w(j9),w(G9),w(p8),w(O9),w(b8),f&&t(ZXe),f&&t(nc),w(V9),f&&t(eze),f&&t(er),w(X9),w(Q9),w(F8),w(W9),w(hM),f&&t(oze),f&&t(ic),w(H9),f&&t(rze),f&&t(or),w(U9),w(Y9),w(_M),w(K9),w(DM),f&&t(tze),f&&t(fc),w(Z9),f&&t(aze),f&&t(rr),w(ex),w(rx),w(OM),w(tx),w(r4),f&&t(nze),f&&t(hc),w(ax),f&&t(sze),f&&t(tr),w(nx),w(lx),w(a4),w(ix),w(c4),f&&t(lze),f&&t(uc),w(dx),f&&t(ize),f&&t(ar),w(cx),w(mx),w(m4),w(gx),w(R4),f&&t(dze),f&&t(Fc),w(hx),f&&t(cze),f&&t(nr),w(px),w(ux),w(B4),w(bx),w(Q4),f&&t(fze),f&&t(Ec),w(vx),f&&t(mze),f&&t(sr),w(Fx),w(Mx),w(H4),w(Ex),w(TE),f&&t(gze),f&&t(Ac),w(Cx),f&&t(hze),f&&t(lr),w(wx),w(Lx),w(EE),w(yx),w(GE),f&&t(pze),f&&t(xc),w(xx),f&&t(_ze),f&&t(ir),w($x),w(Sx),w(VE),w(Rx),w(QE),f&&t(uze),f&&t(Sc),w(Bx),f&&t(bze),f&&t(dr),w(Ix),w(qx),w(HE),w(jx),w(JE),f&&t(vze),f&&t(Bc),w(Dx),f&&t(Fze),f&&t(cr),w(Gx),w(Vx),w(KE),w(Xx),w(vC),f&&t(Tze),f&&t(qc),w(zx),f&&t(Mze),f&&t(fr),w(Qx),w(Hx),w(TC),w(Ux),w(OC),f&&t(Eze),f&&t(Gc),w(Jx),f&&t(Cze),f&&t(mr),w(Yx),w(Zx),w(XC),w(e$),w(QC),f&&t(wze),f&&t(Xc),w(o$),f&&t(Aze),f&&t(gr),w(r$),w(a$),w(HC),w(n$),w(JC),f&&t(Lze),f&&t(Wc),w(s$),f&&t(yze),f&&t(hr),w(l$),w(d$),w(KC),w(c$),w(A3),f&&t(xze),f&&t(Jc),w(f$),f&&t($ze),f&&t(pr),w(m$),w(h$),w(y3),w(p$),w(j3),f&&t(kze),f&&t(Zc),w(_$),f&&t(Sze),f&&t(_r),w(u$),w(v$),w(G3),w(F$),w(o5),f&&t(Rze),f&&t(rf),w(T$),f&&t(Pze),f&&t(ur),w(M$),w(C$),w(t5),w(w$),w(h5),f&&t(Bze),f&&t(nf),w(A$),f&&t(Ize),f&&t(br),w(L$),w(x$),w(_5),w($$),w(L5),f&&t(Nze),f&&t(df),w(k$),f&&t(qze),f&&t(vr),w(S$),w(P$),w(x5),w(B$),w(D5),f&&t(jze),f&&t(mf),w(I$),f&&t(Dze),f&&t(Fr),w(N$),w(j$),w(O5),w(D$),w(Z5),f&&t(Gze),f&&t(pf),w(G$),f&&t(Oze),f&&t(Tr),w(O$),w(X$),w(o0),w(z$),w(c0),f&&t(Vze),f&&t(bf),w(Q$),f&&t(Xze),f&&t(Mr),w(W$),w(U$),w(m0),w(J$),w(T0),f&&t(zze),f&&t(Tf),w(Y$),f&&t(Qze),f&&t(Er),w(K$),w(ek),w(E0),w(ok),w(w0),f&&t(Wze),f&&t(Cf),w(rk),f&&t(Hze),f&&t(Cr),w(tk),w(nk),w(L0),w(sk),w($0),f&&t(Uze),f&&t(Lf),w(ik),f&&t(Jze),f&&t(wr),w(dk),w(fk),w(S0),w(mk),w(P0)}}}const FHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function THt($){return vQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yHt extends pQt{constructor(g){super();_Qt(this,g,THt,vHt,uQt,{})}}export{yHt as default,FHt as metadata};
