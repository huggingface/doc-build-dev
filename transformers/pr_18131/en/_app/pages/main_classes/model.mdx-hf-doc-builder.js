import{S as $x,i as xx,s as Tx,e as r,k as l,w as u,t as s,M as kx,c as a,d as t,m as d,a as n,x as g,h as i,b as m,G as e,g as w,y as _,q as b,o as v,B as y,v as Px,L as Be}from"../../chunks/vendor-hf-doc-builder.js";import{T as ud}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as U}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ne}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Mx(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import AutoModel

model = AutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Ex(D){let p,T;return{c(){p=r("p"),T=s("Passing `use_auth_token=True\u201C is required when you want to use a private model.")},l($){p=a($,"P",{});var f=n(p);T=i(f,"Passing `use_auth_token=True\u201C is required when you want to use a private model."),f.forEach(t)},m($,f){w($,p,f),e(p,T)},d($){$&&t(p)}}}function jx(D){let p,T,$,f,k;return{c(){p=r("p"),T=s("Activate the special "),$=r("a"),f=s("\u201Coffline-mode\u201D"),k=s(` to
use this method in a firewalled environment.`),this.h()},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Activate the special "),$=a(x,"A",{href:!0,rel:!0});var ae=n($);f=i(ae,"\u201Coffline-mode\u201D"),ae.forEach(t),k=i(x,` to
use this method in a firewalled environment.`),x.forEach(t),this.h()},h(){m($,"href","https://huggingface.co/transformers/installation.html#offline-mode"),m($,"rel","nofollow")},m(c,x){w(c,p,x),e(p,T),e(p,$),e($,f),e(p,k)},d(c){c&&t(p)}}}function Fx(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import BertConfig, BertModel

# Download model and configuration from huggingface.co and cache.
model = BertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = BertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = BertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./tf_model/my_tf_model_config.json")
model = BertModel.from_pretrained("./tf_model/my_tf_checkpoint.ckpt.index", from_tf=True, config=config)
# Loading from a Flax checkpoint file instead of a PyTorch model (slower)
model = BertModel.from_pretrained("bert-base-uncased", from_flax=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./tf_model/my_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./tf_model/my_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Flax checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, from_flax=<span class="hljs-literal">True</span>)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Dx(D){let p,T;return{c(){p=r("p"),T=s("This API is experimental and may have some slight breaking changes in the next releases.")},l($){p=a($,"P",{});var f=n(p);T=i(f,"This API is experimental and may have some slight breaking changes in the next releases."),f.forEach(t)},m($,f){w($,p,f),e(p,T)},d($){$&&t(p)}}}function qx(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import TFAutoModel

model = TFAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function zx(D){let p,T,$,f,k;return{c(){p=r("p"),T=s("Passing "),$=r("code"),f=s("use_auth_token=True"),k=s(" is required when you want to use a private model.")},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Passing "),$=a(x,"CODE",{});var ae=n($);f=i(ae,"use_auth_token=True"),ae.forEach(t),k=i(x," is required when you want to use a private model."),x.forEach(t)},m(c,x){w(c,p,x),e(p,T),e(p,$),e($,f),e(p,k)},d(c){c&&t(p)}}}function Ax(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import BertConfig, TFBertModel

# Download model and configuration from huggingface.co and cache.
model = TFBertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = TFBertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = TFBertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/my_pt_model_config.json")
model = TFBertModel.from_pretrained("./pt_model/my_pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/my_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/my_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Cx(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import FlaxAutoModel

model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxAutoModel

model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Ix(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import BertConfig, FlaxBertModel

# Download model and configuration from huggingface.co and cache.
model = FlaxBertModel.from_pretrained("bert-base-cased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = FlaxBertModel.from_pretrained("./test/saved_model/")
# Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/config.json")
model = FlaxBertModel.from_pretrained("./pt_model/pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Lx(D){let p,T;return{c(){p=r("p"),T=s("This API is experimental and may have some slight breaking changes in the next releases.")},l($){p=a($,"P",{});var f=n(p);T=i(f,"This API is experimental and may have some slight breaking changes in the next releases."),f.forEach(t)},m($,f){w($,p,f),e(p,T)},d($){$&&t(p)}}}function Ux(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision
model.params = model.to_bf16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_bf16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params, mask)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Ox(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to cast these to float16
model.params = model.to_fp16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_fp16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to cast these to float16</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params, mask)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Nx(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import FlaxBertModel

# Download model and configuration from huggingface.co
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to illustrate the use of this method,
# we'll first cast to fp16 and back to fp32
model.params = model.to_f16(model.params)
# now cast back to fp32
model.params = model.to_fp32(model.params)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to illustrate the use of this method,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we&#x27;ll first cast to fp16 and back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_f16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now cast back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp32(model.params)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Bx(D){let p,T,$,f,k;return f=new U({props:{code:`from transformers import {object_class}

{object} = {object_class}.from_pretrained("bert-base-cased")

# Push the {object} to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
{object}.push_to_hub("my-finetuned-bert")

# Push the {object} to your namespace with the name "my-finetuned-bert" with no local clone.
{object}.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the {object} to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
{object}.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
{object}.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> {object_class}

{<span class="hljs-built_in">object</span>} = {object_class}.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the {object} to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),{c(){p=r("p"),T=s("Examples:"),$=l(),u(f.$$.fragment)},l(c){p=a(c,"P",{});var x=n(p);T=i(x,"Examples:"),x.forEach(t),$=d(c),g(f.$$.fragment,c)},m(c,x){w(c,p,x),e(p,T),w(c,$,x),_(f,c,x),k=!0},p:Be,i(c){k||(b(f.$$.fragment,c),k=!0)},o(c){v(f.$$.fragment,c),k=!1},d(c){c&&t(p),c&&t($),y(f,c)}}}function Sx(D){let p,T,$,f,k,c,x,ae,Tm,gd,Z,km,Aa,Pm,Mm,Ca,Em,jm,Ia,Fm,Dm,_d,Se,La,qm,zm,Ua,Am,Cm,bd,nt,In,Im,Lm,Ln,Um,vd,O,Om,Oa,Nm,Bm,Un,Sm,Xm,Na,Wm,Vm,Ba,Hm,Gm,Sa,Rm,Ym,yd,Xe,st,On,Eo,Km,Nn,Jm,wd,j,jo,Zm,Bn,Qm,ep,Xa,Wa,tp,op,rp,Fo,Sn,ap,np,Xn,sp,ip,Wn,lp,dp,H,Vn,pe,Hn,cp,mp,Va,pp,hp,Ha,fp,up,gp,Do,he,Gn,_p,bp,Rn,vp,yp,Yn,wp,$p,xp,We,it,Kn,Tp,kp,Ga,Pp,Mp,Ep,lt,Jn,jp,Fp,Zn,Dp,qp,zp,dt,Qn,Ap,Cp,es,Ip,Lp,Up,ts,ct,os,Op,Np,rs,Bp,Sp,Xp,as,mt,ns,Wp,Vp,ss,Hp,Gp,Rp,is,S,ls,Yp,Kp,ds,Jp,Zp,cs,Qp,eh,ms,th,oh,ps,rh,ah,nh,fe,qo,sh,zo,ih,hs,lh,dh,ch,pt,mh,z,Ao,ph,fs,hh,fh,Ve,uh,us,gh,_h,gs,bh,vh,yh,Co,wh,_s,$h,xh,Th,Io,kh,bs,Ph,Mh,Eh,ht,jh,ft,Fh,ut,Dh,vs,Ra,ys,qh,zh,Ah,ws,Ch,Ih,$s,Lh,Uh,G,xs,Oh,Nh,Ts,Bh,Sh,ks,Xh,Wh,Ps,Vh,Hh,Ms,Gh,Rh,Es,Yh,Kh,gt,Lo,Jh,js,Zh,Qh,_t,Uo,ef,Fs,tf,of,ue,Oo,rf,Ds,af,nf,qs,sf,lf,ge,No,df,zs,cf,mf,As,pf,hf,bt,Bo,ff,Cs,uf,gf,vt,So,_f,Is,bf,vf,yt,Xo,yf,Ls,wf,$f,_e,Wo,xf,Us,Tf,kf,wt,Pf,be,Vo,Mf,Ho,Ef,Os,jf,Ff,Df,Go,qf,Ns,zf,Af,Cf,$t,Ro,If,Yo,Lf,Bs,Uf,Of,Nf,xt,Ko,Bf,Ss,Sf,Xf,ve,Jo,Wf,Xs,Vf,Hf,Zo,Gf,Ws,Rf,Yf,$d,Ya,xd,He,Tt,Vs,Qo,Kf,Hs,Jf,Td,ye,Zf,Ka,Qf,eu,er,tu,ou,kd,kt,ru,Gs,au,nu,Pd,tr,Md,Pt,su,Rs,iu,lu,Ed,Q,du,Ys,cu,mu,Ks,pu,hu,Js,fu,uu,jd,or,Fd,Mt,gu,Zs,_u,bu,Dd,rr,qd,ar,zd,Ja,vu,Ad,nr,Cd,Et,yu,Qs,wu,$u,Id,Ge,jt,ei,sr,xu,ti,Tu,Ld,ee,ku,oi,Pu,Mu,ri,Eu,ju,ai,Fu,Du,Ud,ir,Od,we,qu,ni,zu,Au,si,Cu,Iu,Nd,lr,Bd,Ft,Lu,ii,Uu,Ou,Sd,dr,Xd,Za,Nu,Wd,Re,Dt,li,cr,Bu,di,Su,Vd,I,mr,Xu,pr,Wu,ci,Vu,Hu,Gu,$e,hr,Ru,mi,Yu,Ku,Ye,Ju,pi,Zu,Qu,hi,eg,tg,og,qt,fr,rg,fi,ag,ng,zt,ur,sg,Ke,ig,ui,lg,dg,gr,cg,mg,pg,At,_r,hg,gi,fg,ug,Ct,br,gg,_i,_g,bg,It,vr,vg,bi,yg,wg,Lt,yr,$g,vi,xg,Tg,Ut,wr,kg,Je,Pg,yi,Mg,Eg,Qa,jg,Fg,Hd,Ze,Ot,wi,$r,Dg,$i,qg,Gd,M,xr,zg,xi,Ag,Cg,en,tn,Ig,Lg,Ug,Tr,Ti,Og,Ng,ki,Bg,Sg,Pi,Xg,Wg,Qe,xe,Mi,Vg,Hg,on,Gg,Rg,rn,Yg,Kg,Jg,Nt,Ei,Zg,Qg,ji,e_,t_,o_,X,Fi,r_,a_,Di,n_,s_,qi,i_,l_,zi,d_,c_,Ai,m_,p_,h_,Te,kr,f_,Pr,u_,Ci,g_,__,b_,Bt,v_,St,Mr,y_,Ii,w_,$_,N,Er,x_,Li,T_,k_,jr,P_,Ui,M_,E_,j_,Fr,F_,Oi,D_,q_,z_,Xt,A_,Wt,C_,Vt,Dr,I_,Ni,L_,U_,Ht,qr,O_,Bi,N_,B_,Gt,zr,S_,Si,X_,W_,Rt,Ar,V_,Xi,H_,G_,Yt,Cr,R_,Wi,Y_,K_,Kt,Ir,J_,Vi,Z_,Q_,Jt,Lr,eb,Hi,tb,ob,Zt,Ur,rb,R,ab,Or,nb,sb,Gi,ib,lb,Ri,db,cb,Yi,mb,pb,hb,Qt,Nr,fb,Ki,ub,gb,ke,Br,_b,Sr,bb,Ji,vb,yb,wb,Xr,$b,Zi,xb,Tb,kb,eo,Wr,Pb,Vr,Mb,an,Eb,jb,Fb,to,Hr,Db,Qi,qb,zb,oo,Gr,Ab,el,Cb,Ib,ro,Rr,Lb,tl,Ub,Ob,ao,Yr,Nb,ol,Bb,Sb,no,Kr,Xb,rl,Wb,Vb,so,Jr,Hb,Zr,Gb,al,Rb,Yb,Kb,io,Qr,Jb,ea,Zb,nl,Qb,ev,Rd,et,lo,sl,ta,tv,il,ov,Yd,ne,oa,rv,ra,av,ll,nv,sv,iv,co,aa,lv,dl,dv,Kd,tt,mo,cl,na,cv,ml,mv,Jd,q,sa,pv,pl,hv,fv,nn,sn,uv,gv,_v,hl,bv,vv,ot,Pe,fl,yv,wv,ln,$v,xv,dn,Tv,kv,Pv,po,ul,Mv,Ev,gl,jv,Fv,Dv,W,_l,qv,zv,bl,Av,Cv,vl,Iv,Lv,yl,Uv,Ov,wl,Nv,Bv,Sv,Me,ia,Xv,la,Wv,$l,Vv,Hv,Gv,ho,Rv,V,da,Yv,xl,Kv,Jv,ca,Zv,Tl,Qv,e1,t1,ma,o1,kl,r1,a1,n1,fo,s1,Ee,pa,i1,ha,l1,Pl,d1,c1,m1,Ml,p1,h1,je,fa,f1,El,u1,g1,uo,_1,go,ua,b1,ga,v1,jl,y1,w1,$1,te,_a,x1,Y,T1,Fl,k1,P1,Dl,M1,E1,ql,j1,F1,zl,D1,q1,z1,Al,A1,C1,_o,I1,oe,ba,L1,K,U1,Cl,O1,N1,Il,B1,S1,Ll,X1,W1,Ul,V1,H1,G1,Ol,R1,Y1,bo,K1,Fe,va,J1,J,Z1,Nl,Q1,ey,Bl,ty,oy,Sl,ry,ay,Xl,ny,sy,iy,vo,Zd,rt,yo,Wl,ya,ly,Vl,dy,Qd,se,wa,cy,Hl,my,py,De,$a,hy,xa,fy,Gl,uy,gy,_y,wo,ec,at,$o,Rl,Ta,by,Yl,vy,tc,ie,ka,yy,Pa,wy,Ma,Kl,$y,xy,Ty,Jl,ky,oc;return c=new Oe({}),Eo=new Oe({}),jo=new P({props:{name:"class transformers.PreTrainedModel",anchor:"transformers.PreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L845"}}),qo=new P({props:{name:"push_to_hub",anchor:"transformers.PreTrainedModel.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": str = 'add model'"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"**model_card_kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.PreTrainedModel.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.PreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;add model&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.PreTrainedModel.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your {object} (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.PreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"},{anchor:"transformers.PreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L2489",returnDescription:`
<p>The url of the commit of your {object} in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),pt=new Ne({props:{anchor:"transformers.PreTrainedModel.push_to_hub.example",$$slots:{default:[Mx]},$$scope:{ctx:D}}}),Ao=new P({props:{name:"from_pretrained",anchor:"transformers.PreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
<li>A path or url to a model folder containing a <em>flax checkpoint file</em> in <em>.msgpack</em> format (e.g,
<code>./flax_model/</code> containing <code>flax_model.msgpack</code>). In this case, <code>from_flax</code> should be set to
<code>True</code>.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.PreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.PreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.PreTrainedModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_flax",description:`<strong>from_flax</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a Flax checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_flax"},{anchor:"transformers.PreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.PreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.PreTrainedModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.PreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.PreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.PreTrainedModel.from_pretrained._fast_init(bool,",description:`<strong>_fast_init(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to disable fast initialization.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>One should only disable <em>_fast_init</em> to ensure backwards compatibility with <code>transformers.__version__ &lt; 4.6.0</code> for seeded model initialization. This argument will be removed at the next major version. See
<a href="https://github.com/huggingface/transformers/pull/11471" rel="nofollow">pull request 11471</a> for more information.</p>

					</div>`,name:"_fast_init(bool,"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1567",parameterGroups:[{title:"Parameters for big model inference",parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.low_cpu_mem_usage(bool,",description:`<strong>low_cpu_mem_usage(<code>bool</code>,</strong> <em>optional</em>) &#x2014;
Tries to not use more than 1x model size in CPU memory (including peak memory) while loading the model.
This is an experimental feature and a subject to change at any moment.`,name:"low_cpu_mem_usage(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"torch_dtype"},{anchor:"transformers.PreTrainedModel.from_pretrained.device_map",description:`<strong>device_map</strong> (<code>str</code> or <code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each
parameter/buffer name, once a given module name is inside, every submodule of it will be sent to the
same device.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>.`,name:"device_map"},{anchor:"transformers.PreTrainedModel.from_pretrained.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each
GPU and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"transformers.PreTrainedModel.from_pretrained.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"transformers.PreTrainedModel.from_pretrained.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict to the hard drive to avoid getting out of CPU
RAM if the weight of the CPU state dict + the biggest shard of the checkpoint does not fit.`,name:"offload_state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}]}}),ht=new ud({props:{$$slots:{default:[Ex]},$$scope:{ctx:D}}}),ft=new ud({props:{$$slots:{default:[jx]},$$scope:{ctx:D}}}),ut=new Ne({props:{anchor:"transformers.PreTrainedModel.from_pretrained.example",$$slots:{default:[Fx]},$$scope:{ctx:D}}}),Lo=new P({props:{name:"get_input_embeddings",anchor:"transformers.PreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1000",returnDescription:`
<p>A torch module mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),Uo=new P({props:{name:"get_output_embeddings",anchor:"transformers.PreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1026",returnDescription:`
<p>A torch module mapping hidden states to vocabulary.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),Oo=new P({props:{name:"gradient_checkpointing_disable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_disable",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1410"}}),No=new P({props:{name:"gradient_checkpointing_enable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_enable",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1399"}}),Bo=new P({props:{name:"init_weights",anchor:"transformers.PreTrainedModel.init_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1366"}}),So=new P({props:{name:"post_init",anchor:"transformers.PreTrainedModel.post_init",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L919"}}),Xo=new P({props:{name:"prune_heads",anchor:"transformers.PreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:": typing.Dict[int, typing.List[int]]"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1382"}}),Wo=new P({props:{name:"register_for_auto_class",anchor:"transformers.PreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoModel'"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L2463"}}),wt=new ud({props:{warning:!0,$$slots:{default:[Dx]},$$scope:{ctx:D}}}),Vo=new P({props:{name:"resize_token_embeddings",anchor:"transformers.PreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>torch.nn.Embedding</code> module of the model without doing anything.`,name:"new_num_tokens"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1157",returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>torch.nn.Embedding</code></p>
`}}),Ro=new P({props:{name:"save_pretrained",anchor:"transformers.PreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"is_main_process",val:": bool = True"},{name:"state_dict",val:": typing.Optional[dict] = None"},{name:"save_function",val:": typing.Callable = <function save at 0x7f82709cf700>"},{name:"push_to_hub",val:": bool = False"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.PreTrainedModel.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"},{anchor:"transformers.PreTrainedModel.save_pretrained.state_dict",description:`<strong>state_dict</strong> (nested dictionary of <code>torch.Tensor</code>) &#x2014;
The state dictionary of the model to save. Will default to <code>self.state_dict()</code>, but can be used to only
save parts of the model or if special precautions need to be taken when recovering the state dictionary
of a model (like when using model parallelism).`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"},{anchor:"transformers.PreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.PreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1430"}}),Ko=new P({props:{name:"set_input_embeddings",anchor:"transformers.PreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:": Module"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.set_input_embeddings.value",description:"<strong>value</strong> (<code>nn.Module</code>) &#x2014; A module mapping vocabulary to hidden states.",name:"value"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1013"}}),Jo=new P({props:{name:"tie_weights",anchor:"transformers.PreTrainedModel.tie_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L1041"}}),Qo=new Oe({}),tr=new U({props:{code:`from transformers import AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained("bigscience/T0pp", low_cpu_mem_usage=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;bigscience/T0pp&quot;</span>, low_cpu_mem_usage=<span class="hljs-literal">True</span>)`}}),or=new U({props:{code:`from transformers import AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained("bigscience/T0pp", device_map="auto")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;bigscience/T0pp&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>)`}}),rr=new U({props:{code:"t0pp.hf_device_map",highlighted:"t0pp.hf_device_map"}}),ar=new U({props:{code:`{'shared': 0,
 'decoder.embed_tokens': 0,
 'encoder': 0,
 'decoder.block.0': 0,
 'decoder.block.1': 1,
 'decoder.block.2': 1,
 'decoder.block.3': 1,
 'decoder.block.4': 1,
 'decoder.block.5': 1,
 'decoder.block.6': 1,
 'decoder.block.7': 1,
 'decoder.block.8': 1,
 'decoder.block.9': 1,
 'decoder.block.10': 1,
 'decoder.block.11': 1,
 'decoder.block.12': 1,
 'decoder.block.13': 1,
 'decoder.block.14': 1,
 'decoder.block.15': 1,
 'decoder.block.16': 1,
 'decoder.block.17': 1,
 'decoder.block.18': 1,
 'decoder.block.19': 1,
 'decoder.block.20': 1,
 'decoder.block.21': 1,
 'decoder.block.22': 'cpu',
 'decoder.block.23': 'cpu',
 'decoder.final_layer_norm': 'cpu',
 'decoder.dropout': 'cpu',
 'lm_head': 'cpu'}`,highlighted:`{<span class="hljs-string">&#x27;shared&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.embed_tokens&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;encoder&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.block.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.block.1&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.2&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.3&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.4&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.5&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.6&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.7&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.8&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.9&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.10&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.11&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.12&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.13&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.14&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.15&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.16&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.17&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.18&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.19&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.20&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.21&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.22&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.block.23&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.final_layer_norm&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.dropout&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>}`}}),nr=new U({props:{code:'device_map = {"shared": 0, "encoder": 0, "decoder": 1, "lm_head": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;shared&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;encoder&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;decoder&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;lm_head&quot;</span>: <span class="hljs-number">1</span>}'}}),sr=new Oe({}),ir=new U({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype=torch.float16)',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=torch.float16)'}}),lr=new U({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype="auto")',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=<span class="hljs-string">&quot;auto&quot;</span>)'}}),dr=new U({props:{code:`config = T5Config.from_pretrained("t5")
model = AutoModel.from_config(config)`,highlighted:`config = T5Config.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>)
model = AutoModel.from_config(config)`}}),cr=new Oe({}),mr=new P({props:{name:"class transformers.modeling_utils.ModuleUtilsMixin",anchor:"transformers.modeling_utils.ModuleUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L562"}}),hr=new P({props:{name:"add_memory_hooks",anchor:"transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L593"}}),fr=new P({props:{name:"estimate_tokens",anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens.inputs",description:"<strong>inputs</strong> (<code>dict</code>) &#x2014; The model inputs.",name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L797",returnDescription:`
<p>The total number of tokens.</p>
`,returnType:`
<p><code>int</code></p>
`}}),ur=new P({props:{name:"floating_point_ops",anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"exclude_embeddings",val:": bool = True"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
The batch size for the forward pass.`,name:"batch_size"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.sequence_length",description:`<strong>sequence_length</strong> (<code>int</code>) &#x2014;
The number of tokens in each line of the batch.`,name:"sequence_length"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to count embedding and softmax operations.`,name:"exclude_embeddings"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L818",returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),_r=new P({props:{name:"get_extended_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask",parameters:[{name:"attention_mask",val:": Tensor"},{name:"input_shape",val:": typing.Tuple[int]"},{name:"device",val:": <property object at 0x7f81bba17180> = None"},{name:"dtype",val:": torch.float32 = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code>) &#x2014;
Mask with ones indicating tokens to attend to, zeros for tokens to ignore.`,name:"attention_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.input_shape",description:`<strong>input_shape</strong> (<code>Tuple[int]</code>) &#x2014;
The shape of the input to the model.`,name:"input_shape"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L681",returnDescription:`
<p><code>torch.Tensor</code> The extended attention mask, with a the same dtype as <code>attention_mask.dtype</code>.</p>
`}}),br=new P({props:{name:"get_head_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask",parameters:[{name:"head_mask",val:": typing.Optional[torch.Tensor]"},{name:"num_hidden_layers",val:": int"},{name:"is_attention_chunked",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> with shape <code>[num_heads]</code> or <code>[num_hidden_layers x num_heads]</code>, <em>optional</em>) &#x2014;
The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard).`,name:"head_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>) &#x2014;
The number of hidden layers in the model.
is_attention_chunked &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether or not the attentions scores are computed by chunks or not.`,name:"num_hidden_layers"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L733",returnDescription:`
<p><code>torch.Tensor</code> with shape <code>[num_hidden_layers x batch x num_heads x seq_length x seq_length]</code> or list with
<code>[None]</code> for each layer.</p>
`}}),vr=new P({props:{name:"invert_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask",parameters:[{name:"encoder_attention_mask",val:": Tensor"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask.encoder_attention_mask",description:"<strong>encoder_attention_mask</strong> (<code>torch.Tensor</code>) &#x2014; An attention mask.",name:"encoder_attention_mask"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L629",returnDescription:`
<p>The inverted attention mask.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),yr=new P({props:{name:"num_parameters",anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"},{name:"exclude_embeddings",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of non-embeddings parameters`,name:"exclude_embeddings"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L771",returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),wr=new P({props:{name:"reset_memory_hooks_state",anchor:"transformers.modeling_utils.ModuleUtilsMixin.reset_memory_hooks_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L605"}}),$r=new Oe({}),xr=new P({props:{name:"class transformers.TFPreTrainedModel",anchor:"transformers.TFPreTrainedModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L965"}}),kr=new P({props:{name:"push_to_hub",anchor:"transformers.TFPreTrainedModel.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"**model_card_kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/utils/hub.py#L872",returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Bt=new Ne({props:{anchor:"transformers.TFPreTrainedModel.push_to_hub.example",$$slots:{default:[qx]},$$scope:{ctx:D}}}),Mr=new P({props:{name:"compile",anchor:"transformers.TFPreTrainedModel.compile",parameters:[{name:"optimizer",val:" = 'rmsprop'"},{name:"loss",val:" = 'passthrough'"},{name:"metrics",val:" = None"},{name:"loss_weights",val:" = None"},{name:"weighted_metrics",val:" = None"},{name:"run_eagerly",val:" = None"},{name:"steps_per_execution",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1257"}}),Er=new P({props:{name:"from_pretrained",anchor:"transformers.TFPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string valid as input to <a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.
from_pt &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Load the model weights from a PyTorch state_dict save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).</li>
</ul>`,name:"config"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.
proxies &#x2014;
(<code>Dict[str, str], </code>optional<code>): A dictionary of proxy servers to use by protocol or endpoint, e.g., </code>{&#x2018;http&#x2019;: &#x2018;foo.bar:3128&#x2019;, &#x2018;http://hostname&#x2019;: &#x2018;foo.bar:4012&#x2019;}<code>. The proxies are used on each request. output_loading_info(</code>bool<code>, *optional*, defaults to </code>False\`): Whether ot not to also return a
dictionary containing missing keys, unexpected keys and error messages.`,name:"resume_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try doanloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L2030"}}),Xt=new ud({props:{$$slots:{default:[zx]},$$scope:{ctx:D}}}),Wt=new Ne({props:{anchor:"transformers.TFPreTrainedModel.from_pretrained.example",$$slots:{default:[Ax]},$$scope:{ctx:D}}}),Dr=new P({props:{name:"get_bias",anchor:"transformers.TFPreTrainedModel.get_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1655",returnDescription:`
<p>The weights representing the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),qr=new P({props:{name:"get_input_embeddings",anchor:"transformers.TFPreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1077",returnDescription:`
<p>The embeddings layer mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),zr=new P({props:{name:"get_lm_head",anchor:"transformers.TFPreTrainedModel.get_lm_head",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1688",returnDescription:`
<p>The LM head layer if the model has one, None if not.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),Ar=new P({props:{name:"get_output_embeddings",anchor:"transformers.TFPreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1595",returnDescription:`
<p>The new weights mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),Cr=new P({props:{name:"get_output_layer_with_bias",anchor:"transformers.TFPreTrainedModel.get_output_layer_with_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1632",returnDescription:`
<p>The layer that handles the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),Ir=new P({props:{name:"get_prefix_bias_name",anchor:"transformers.TFPreTrainedModel.get_prefix_bias_name",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1645",returnDescription:`
<p>The _prefix name of the bias.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Lr=new P({props:{name:"load_repo_checkpoint",anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint",parameters:[{name:"repo_path_or_name",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder).`,name:"repo_path_or_name"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1104",returnDescription:`
<p>A dictionary of extra metadata from the checkpoint, most commonly an \u201Cepoch\u201D count.</p>
`,returnType:`
<p><code>dict</code></p>
`}}),Ur=new P({props:{name:"prepare_tf_dataset",anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset",parameters:[{name:"dataset",val:": datasets.Dataset"},{name:"batch_size",val:": int = 8"},{name:"shuffle",val:": bool = True"},{name:"tokenizer",val:": typing.Optional[ForwardRef('PreTrainedTokenizerBase')] = None"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"collate_fn_args",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"drop_remainder",val:": typing.Optional[bool] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.dataset",description:`<strong>dataset</strong> (<code>Any</code>) &#x2014;
A [~<code>datasets.Dataset</code>] to be wrapped as a <code>tf.data.Dataset</code>.`,name:"dataset"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to 8) &#x2014;
The size of batches to return.`,name:"batch_size"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.shuffle",description:`<strong>shuffle</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to return samples from the dataset in random order. Usually <code>True</code> for training datasets and
<code>False</code> for validation/test datasets.`,name:"shuffle"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_18131/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
A <code>PreTrainedTokenizer</code> that will be used to pad samples to create batches. Has no effect if a specific
<code>collate_fn</code> is passed instead.`,name:"tokenizer"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.collate_fn",description:`<strong>collate_fn</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
A function that collates samples from the dataset into a single batch. Defaults to
<code>DefaultDataCollator</code> if no <code>tokenizer</code> is supplied or <code>DataCollatorWithPadding</code> if a <code>tokenizer</code> is
passed.`,name:"collate_fn"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
A dict of arguments to pass to the <code>collate_fn</code> alongside the list of samples.`,name:"collate_fn_args"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.drop_remainder",description:`<strong>drop_remainder</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to drop the final batch, if the batch_size does not evenly divide the dataset length. Defaults
to the same setting as <code>shuffle</code>.`,name:"drop_remainder"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to add prefetching to the end of the <code>tf.data</code> pipeline. This is almost always beneficial for
performance, but can be disabled in edge cases.`,name:"prefetch"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1158",returnDescription:`
<p>A <code>tf.data.Dataset</code> which is ready to pass to the Keras API.</p>
`,returnType:`
<p><code>Dataset</code></p>
`}}),Nr=new P({props:{name:"prune_heads",anchor:"transformers.TFPreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1897"}}),Br=new P({props:{name:"resize_token_embeddings",anchor:"transformers.TFPreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:" = None"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>tf.Variable</code> module of the model without doing anything.`,name:"new_num_tokens"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1697",returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),Wr=new P({props:{name:"save_pretrained",anchor:"transformers.TFPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"saved_model",val:" = False"},{name:"version",val:" = 1"},{name:"push_to_hub",val:" = False"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.saved_model",description:`<strong>saved_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If the model has to be saved in saved model format as well or not.`,name:"saved_model"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.version",description:`<strong>version</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The version of the saved model. A saved model needs to be versioned in order to be properly loaded by
TensorFlow Serving as detailed in the official documentation
<a href="https://www.tensorflow.org/tfx/serving/serving_basic" rel="nofollow">https://www.tensorflow.org/tfx/serving/serving_basic</a>`,name:"version"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1909"}}),Hr=new P({props:{name:"serving",anchor:"transformers.TFPreTrainedModel.serving",parameters:[{name:"inputs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving.inputs",description:`<strong>inputs</strong> (<code>Dict[str, tf.Tensor]</code>) &#x2014;
The input of the saved model as a dictionary of tensors.`,name:"inputs"}]}}),Gr=new P({props:{name:"serving_output",anchor:"transformers.TFPreTrainedModel.serving_output",parameters:[{name:"output",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving_output.output",description:`<strong>output</strong> (<code>TFBaseModelOutput</code>) &#x2014;
The output returned by the model.`,name:"output"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1067"}}),Rr=new P({props:{name:"set_bias",anchor:"transformers.TFPreTrainedModel.set_bias",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_bias.value",description:`<strong>value</strong> (<code>Dict[tf.Variable]</code>) &#x2014;
All the new bias attached to an LM head.`,name:"value"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1672"}}),Yr=new P({props:{name:"set_input_embeddings",anchor:"transformers.TFPreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_input_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1575"}}),Kr=new P({props:{name:"set_output_embeddings",anchor:"transformers.TFPreTrainedModel.set_output_embeddings",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_output_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1615"}}),Jr=new P({props:{name:"test_step",anchor:"transformers.TFPreTrainedModel.test_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1442"}}),Qr=new P({props:{name:"train_step",anchor:"transformers.TFPreTrainedModel.train_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L1337"}}),ta=new Oe({}),oa=new P({props:{name:"class transformers.modeling_tf_utils.TFModelUtilsMixin",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L96"}}),aa=new P({props:{name:"num_parameters",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_tf_utils.py#L101",returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),na=new Oe({}),sa=new P({props:{name:"class transformers.FlaxPreTrainedModel",anchor:"transformers.FlaxPreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"module",val:": Module"},{name:"input_shape",val:": typing.Tuple = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"_do_init",val:": bool = True"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L163"}}),ia=new P({props:{name:"push_to_hub",anchor:"transformers.FlaxPreTrainedModel.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"**model_card_kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/utils/hub.py#L872",returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ho=new Ne({props:{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.example",$$slots:{default:[Cx]},$$scope:{ctx:D}}}),da=new P({props:{name:"from_pretrained",anchor:"transformers.FlaxPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>pt index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In this case,
<code>from_pt</code> should be set to <code>True</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel.to_fp16">to_fp16()</a> and
<a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel.to_bf16">to_bf16()</a>.`,name:"dtype"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L476"}}),fo=new Ne({props:{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.example",$$slots:{default:[Ix]},$$scope:{ctx:D}}}),pa=new P({props:{name:"load_flax_sharded_weights",anchor:"transformers.FlaxPreTrainedModel.load_flax_sharded_weights",parameters:[{name:"shard_files",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.load_flax_sharded_weights.shard_files",description:`<strong>shard_files</strong> (<code>List[str]</code> &#x2014;
The list of shard files to load.`,name:"shard_files"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L429",returnDescription:`
<p>A nested dictionary of the model parameters, in the expected format for flax models : <code>&#123;'model': &#123;'params': &#123;'...'&#125;&#125;&#125;</code>.</p>
`,returnType:`
<p><code>Dict</code></p>
`}}),fa=new P({props:{name:"register_for_auto_class",anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'FlaxAutoModel'"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;FlaxAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L1034"}}),uo=new ud({props:{warning:!0,$$slots:{default:[Lx]},$$scope:{ctx:D}}}),ua=new P({props:{name:"save_pretrained",anchor:"transformers.FlaxPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:" = None"},{name:"push_to_hub",val:" = False"},{name:"max_shard_size",val:" = '10GB'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_18131/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L933"}}),_a=new P({props:{name:"to_bf16",anchor:"transformers.FlaxPreTrainedModel.to_bf16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_bf16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_bf16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip.`,name:"mask"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L324"}}),_o=new Ne({props:{anchor:"transformers.FlaxPreTrainedModel.to_bf16.example",$$slots:{default:[Ux]},$$scope:{ctx:D}}}),ba=new P({props:{name:"to_fp16",anchor:"transformers.FlaxPreTrainedModel.to_fp16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L390"}}),bo=new Ne({props:{anchor:"transformers.FlaxPreTrainedModel.to_fp16.example",$$slots:{default:[Ox]},$$scope:{ctx:D}}}),va=new P({props:{name:"to_fp32",anchor:"transformers.FlaxPreTrainedModel.to_fp32",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp32.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp32.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_flax_utils.py#L363"}}),vo=new Ne({props:{anchor:"transformers.FlaxPreTrainedModel.to_fp32.example",$$slots:{default:[Nx]},$$scope:{ctx:D}}}),ya=new Oe({}),wa=new P({props:{name:"class transformers.utils.PushToHubMixin",anchor:"transformers.utils.PushToHubMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/utils/hub.py#L867"}}),$a=new P({props:{name:"push_to_hub",anchor:"transformers.utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"**model_card_kwargs",val:""}],parametersDescription:[{anchor:"transformers.utils.PushToHubMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add {object}&quot;</code>.`,name:"commit_message"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your {object} (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/utils/hub.py#L872",returnDescription:`
<p>The url of the commit of your {object} in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),wo=new Ne({props:{anchor:"transformers.utils.PushToHubMixin.push_to_hub.example",$$slots:{default:[Bx]},$$scope:{ctx:D}}}),Ta=new Oe({}),ka=new P({props:{name:"transformers.modeling_utils.load_sharded_checkpoint",anchor:"transformers.modeling_utils.load_sharded_checkpoint",parameters:[{name:"model",val:""},{name:"folder",val:""},{name:"strict",val:" = True"}],parametersDescription:[{anchor:"transformers.modeling_utils.load_sharded_checkpoint.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which to load the checkpoint.",name:"model"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.folder",description:"<strong>folder</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014; A path to a folder containing the sharded checkpoint.",name:"folder"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.strict",description:"<strong>strict</strong> (<code>bool</code>, *optional<code>, defaults to </code>True`) &#x2014;\nWhether to strictly enforce that the keys in the model state dict match the keys in the sharded checkpoint.",name:"strict"}],source:"https://github.com/huggingface/transformers/blob/vr_18131/src/transformers/modeling_utils.py#L294",returnDescription:`
<p>A named tuple with <code>missing_keys</code> and <code>unexpected_keys</code> fields</p>
<ul>
<li><code>missing_keys</code> is a list of str containing the missing keys</li>
<li><code>unexpected_keys</code> is a list of str containing the unexpected keys</li>
</ul>
`,returnType:`
<p><code>NamedTuple</code></p>
`}}),{c(){p=r("meta"),T=l(),$=r("h1"),f=r("a"),k=r("span"),u(c.$$.fragment),x=l(),ae=r("span"),Tm=s("Models"),gd=l(),Z=r("p"),km=s("The base classes "),Aa=r("a"),Pm=s("PreTrainedModel"),Mm=s(", "),Ca=r("a"),Em=s("TFPreTrainedModel"),jm=s(`, and
`),Ia=r("a"),Fm=s("FlaxPreTrainedModel"),Dm=s(` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),_d=l(),Se=r("p"),La=r("a"),qm=s("PreTrainedModel"),zm=s(" and "),Ua=r("a"),Am=s("TFPreTrainedModel"),Cm=s(` also implement a few methods which
are common among all the models to:`),bd=l(),nt=r("ul"),In=r("li"),Im=s("resize the input token embeddings when new tokens are added to the vocabulary"),Lm=l(),Ln=r("li"),Um=s("prune the attention heads of the model."),vd=l(),O=r("p"),Om=s("The other methods that are common to each model are defined in "),Oa=r("a"),Nm=s("ModuleUtilsMixin"),Bm=s(`
(for the PyTorch models) and `),Un=r("code"),Sm=s("TFModuleUtilsMixin"),Xm=s(` (for the TensorFlow models) or
for text generation, `),Na=r("a"),Wm=s("GenerationMixin"),Vm=s(` (for the PyTorch models),
`),Ba=r("a"),Hm=s("TFGenerationMixin"),Gm=s(` (for the TensorFlow models) and
`),Sa=r("a"),Rm=s("FlaxGenerationMixin"),Ym=s(" (for the Flax/JAX models)."),yd=l(),Xe=r("h2"),st=r("a"),On=r("span"),u(Eo.$$.fragment),Km=l(),Nn=r("span"),Jm=s("PreTrainedModel"),wd=l(),j=r("div"),u(jo.$$.fragment),Zm=l(),Bn=r("p"),Qm=s("Base class for all models."),ep=l(),Xa=r("p"),Wa=r("a"),tp=s("PreTrainedModel"),op=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),rp=l(),Fo=r("ul"),Sn=r("li"),ap=s("resize the input embeddings,"),np=l(),Xn=r("li"),sp=s("prune heads in the self-attention heads."),ip=l(),Wn=r("p"),lp=s("Class attributes (overridden by derived classes):"),dp=l(),H=r("ul"),Vn=r("li"),pe=r("p"),Hn=r("strong"),cp=s("config_class"),mp=s(" ("),Va=r("a"),pp=s("PretrainedConfig"),hp=s(") \u2014 A subclass of "),Ha=r("a"),fp=s("PretrainedConfig"),up=s(` to use as configuration class
for this model architecture.`),gp=l(),Do=r("li"),he=r("p"),Gn=r("strong"),_p=s("load_tf_weights"),bp=s(" ("),Rn=r("code"),vp=s("Callable"),yp=s(") \u2014 A python "),Yn=r("em"),wp=s("method"),$p=s(` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),xp=l(),We=r("ul"),it=r("li"),Kn=r("strong"),Tp=s("model"),kp=s(" ("),Ga=r("a"),Pp=s("PreTrainedModel"),Mp=s(") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),Ep=l(),lt=r("li"),Jn=r("strong"),jp=s("config"),Fp=s(" ("),Zn=r("code"),Dp=s("PreTrainedConfig"),qp=s(") \u2014 An instance of the configuration associated to the model."),zp=l(),dt=r("li"),Qn=r("strong"),Ap=s("path"),Cp=s(" ("),es=r("code"),Ip=s("str"),Lp=s(") \u2014 A path to the TensorFlow checkpoint."),Up=l(),ts=r("li"),ct=r("p"),os=r("strong"),Op=s("base_model_prefix"),Np=s(" ("),rs=r("code"),Bp=s("str"),Sp=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),Xp=l(),as=r("li"),mt=r("p"),ns=r("strong"),Wp=s("is_parallelizable"),Vp=s(" ("),ss=r("code"),Hp=s("bool"),Gp=s(") \u2014 A flag indicating whether this model supports model parallelization."),Rp=l(),is=r("li"),S=r("p"),ls=r("strong"),Yp=s("main_input_name"),Kp=s(" ("),ds=r("code"),Jp=s("str"),Zp=s(") \u2014 The name of the principal input to the model (often "),cs=r("code"),Qp=s("input_ids"),eh=s(` for NLP
models, `),ms=r("code"),th=s("pixel_values"),oh=s(" for vision models and "),ps=r("code"),rh=s("input_values"),ah=s(" for speech models)."),nh=l(),fe=r("div"),u(qo.$$.fragment),sh=l(),zo=r("p"),ih=s("Upload the model files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in "),hs=r("code"),lh=s("repo_path_or_name"),dh=s("."),ch=l(),u(pt.$$.fragment),mh=l(),z=r("div"),u(Ao.$$.fragment),ph=l(),fs=r("p"),hh=s("Instantiate a pretrained pytorch model from a pre-trained model configuration."),fh=l(),Ve=r("p"),uh=s("The model is set in evaluation mode by default using "),us=r("code"),gh=s("model.eval()"),_h=s(` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),gs=r("code"),bh=s("model.train()"),vh=s("."),yh=l(),Co=r("p"),wh=s("The warning "),_s=r("em"),$h=s("Weights from XXX not initialized from pretrained model"),xh=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Th=l(),Io=r("p"),kh=s("The warning "),bs=r("em"),Ph=s("Weights from XXX not used in YYY"),Mh=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Eh=l(),u(ht.$$.fragment),jh=l(),u(ft.$$.fragment),Fh=l(),u(ut.$$.fragment),Dh=l(),vs=r("ul"),Ra=r("li"),ys=r("code"),qh=s("low_cpu_mem_usage"),zh=s(" algorithm:"),Ah=l(),ws=r("p"),Ch=s("This is an experimental function that loads the model using ~1x model size CPU memory"),Ih=l(),$s=r("p"),Lh=s("Here is how it works:"),Uh=l(),G=r("ol"),xs=r("li"),Oh=s("save which state_dict keys we have"),Nh=l(),Ts=r("li"),Bh=s("drop state_dict before the model is created, since the latter takes 1x model size CPU memory"),Sh=l(),ks=r("li"),Xh=s(`after the model has been instantiated switch to the meta device all params/buffers that
are going to be replaced from the loaded state_dict`),Wh=l(),Ps=r("li"),Vh=s("load state_dict 2nd time"),Hh=l(),Ms=r("li"),Gh=s("replace the params/buffers from the state_dict"),Rh=l(),Es=r("p"),Yh=s("Currently, it can\u2019t handle deepspeed ZeRO stage 3 and ignores loading errors"),Kh=l(),gt=r("div"),u(Lo.$$.fragment),Jh=l(),js=r("p"),Zh=s("Returns the model\u2019s input embeddings."),Qh=l(),_t=r("div"),u(Uo.$$.fragment),ef=l(),Fs=r("p"),tf=s("Returns the model\u2019s output embeddings."),of=l(),ue=r("div"),u(Oo.$$.fragment),rf=l(),Ds=r("p"),af=s("Deactivates gradient checkpointing for the current model."),nf=l(),qs=r("p"),sf=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),lf=l(),ge=r("div"),u(No.$$.fragment),df=l(),zs=r("p"),cf=s("Activates gradient checkpointing for the current model."),mf=l(),As=r("p"),pf=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),hf=l(),bt=r("div"),u(Bo.$$.fragment),ff=l(),Cs=r("p"),uf=s("If needed prunes and maybe initializes weights."),gf=l(),vt=r("div"),u(So.$$.fragment),_f=l(),Is=r("p"),bf=s(`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),vf=l(),yt=r("div"),u(Xo.$$.fragment),yf=l(),Ls=r("p"),wf=s("Prunes heads of the base model."),$f=l(),_e=r("div"),u(Wo.$$.fragment),xf=l(),Us=r("p"),Tf=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),kf=l(),u(wt.$$.fragment),Pf=l(),be=r("div"),u(Vo.$$.fragment),Mf=l(),Ho=r("p"),Ef=s("Resizes input token embeddings matrix of the model if "),Os=r("code"),jf=s("new_num_tokens != config.vocab_size"),Ff=s("."),Df=l(),Go=r("p"),qf=s("Takes care of tying weights embeddings afterwards if the model class has a "),Ns=r("code"),zf=s("tie_weights()"),Af=s(" method."),Cf=l(),$t=r("div"),u(Ro.$$.fragment),If=l(),Yo=r("p"),Lf=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Bs=r("code"),Uf=s("[from_pretrained()](/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),Of=s(" class method."),Nf=l(),xt=r("div"),u(Ko.$$.fragment),Bf=l(),Ss=r("p"),Sf=s("Set model\u2019s input embeddings."),Xf=l(),ve=r("div"),u(Jo.$$.fragment),Wf=l(),Xs=r("p"),Vf=s("Tie the weights between the input embeddings and the output embeddings."),Hf=l(),Zo=r("p"),Gf=s("If the "),Ws=r("code"),Rf=s("torchscript"),Yf=s(` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),$d=l(),Ya=r("a"),xd=l(),He=r("h3"),Tt=r("a"),Vs=r("span"),u(Qo.$$.fragment),Kf=l(),Hs=r("span"),Jf=s("Large model loading"),Td=l(),ye=r("p"),Zf=s("In Transformers 4.20.0, the "),Ka=r("a"),Qf=s("from_pretrained()"),eu=s(" method has been reworked to accommodate large models using "),er=r("a"),tu=s("Accelerate"),ou=s(". This requires Accelerate >= 0.9.0 and PyTorch >= 1.9.0. Instead of creating the full model, then loading the pretrained weights inside it (which takes twice the size of the model in RAM, one for the randomly initialized model, one for the weights), there is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded."),kd=l(),kt=r("p"),ru=s("This option can be activated with "),Gs=r("code"),au=s("low_cpu_mem_usage=True"),nu=s(". The model is first created on the Meta device (with empty weights) and the state dict is then loaded inside it (shard by shard in the case of a sharded checkpoint). This way the maximum RAM used is the full size of the model only."),Pd=l(),u(tr.$$.fragment),Md=l(),Pt=r("p"),su=s("Moreover, you can directly place the model on different devices if it doesn\u2019t fully fit in RAM (only works for inference for now). With "),Rs=r("code"),iu=s('device_map="auto"'),lu=s(", Accelerate will determine where to put each layer to maximize the use of your fastest devices (GPUs) and offload the rest on the CPU, or even the hard drive if you don\u2019t have enough GPU RAM (or CPU RAM). Even if the model is split across several devices, it will run as you would normally expect."),Ed=l(),Q=r("p"),du=s("When passing a "),Ys=r("code"),cu=s("device_map"),mu=s(", "),Ks=r("code"),pu=s("low_cpu_mem_usage"),hu=s(" is automatically set to "),Js=r("code"),fu=s("True"),uu=s(", so you don\u2019t need to specify it:"),jd=l(),u(or.$$.fragment),Fd=l(),Mt=r("p"),gu=s("You can inspect how the model was split across devices by looking at its "),Zs=r("code"),_u=s("hf_device_map"),bu=s(" attribute:"),Dd=l(),u(rr.$$.fragment),qd=l(),u(ar.$$.fragment),zd=l(),Ja=r("p"),vu=s("You can also write your own device map following the same format (a dictionary layer name to device). It should map all parameters of the model to a given device, but you don\u2019t have to detail where all the submosules of one layer go if that layer is entirely on the same device. For instance, the following device map would work properly for T0pp (as long as you have the GPU memory):"),Ad=l(),u(nr.$$.fragment),Cd=l(),Et=r("p"),yu=s("Another way to minimize the memory impact of your model is to instantiate it at a lower precision dtype (like "),Qs=r("code"),wu=s("torch.float16"),$u=s(")."),Id=l(),Ge=r("h3"),jt=r("a"),ei=r("span"),u(sr.$$.fragment),xu=l(),ti=r("span"),Tu=s("Model Instantiation dtype"),Ld=l(),ee=r("p"),ku=s("Under Pytorch a model normally gets instantiated with "),oi=r("code"),Pu=s("torch.float32"),Mu=s(` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),ri=r("code"),Eu=s("dtype"),ju=s(" using "),ai=r("code"),Fu=s("torch_dtype"),Du=s(" argument:"),Ud=l(),u(ir.$$.fragment),Od=l(),we=r("p"),qu=s("or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),ni=r("code"),zu=s('"auto"'),Au=s(`,
and then `),si=r("code"),Cu=s("dtype"),Iu=s(" will be automatically derived from the model\u2019s weights:"),Nd=l(),u(lr.$$.fragment),Bd=l(),Ft=r("p"),Lu=s("Models instantiated from scratch can also be told which "),ii=r("code"),Uu=s("dtype"),Ou=s(" to use with:"),Sd=l(),u(dr.$$.fragment),Xd=l(),Za=r("p"),Nu=s("Due to Pytorch design, this functionality is only available for floating dtypes."),Wd=l(),Re=r("h2"),Dt=r("a"),li=r("span"),u(cr.$$.fragment),Bu=l(),di=r("span"),Su=s("ModuleUtilsMixin"),Vd=l(),I=r("div"),u(mr.$$.fragment),Xu=l(),pr=r("p"),Wu=s("A few utilities for "),ci=r("code"),Vu=s("torch.nn.Modules"),Hu=s(", to be used as a mixin."),Gu=l(),$e=r("div"),u(hr.$$.fragment),Ru=l(),mi=r("p"),Yu=s("Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),Ku=l(),Ye=r("p"),Ju=s("Increase in memory consumption is stored in a "),pi=r("code"),Zu=s("mem_rss_diff"),Qu=s(` attribute for each module and can be reset to zero
with `),hi=r("code"),eg=s("model.reset_memory_hooks_state()"),tg=s("."),og=l(),qt=r("div"),u(fr.$$.fragment),rg=l(),fi=r("p"),ag=s("Helper function to estimate the total number of tokens from the model inputs."),ng=l(),zt=r("div"),u(ur.$$.fragment),sg=l(),Ke=r("p"),ig=s(`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),ui=r("code"),lg=s("12 * d_model << sequence_length"),dg=s(") as laid out in "),gr=r("a"),cg=s(`this
paper`),mg=s(` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),pg=l(),At=r("div"),u(_r.$$.fragment),hg=l(),gi=r("p"),fg=s("Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),ug=l(),Ct=r("div"),u(br.$$.fragment),gg=l(),_i=r("p"),_g=s("Prepare the head mask if needed."),bg=l(),It=r("div"),u(vr.$$.fragment),vg=l(),bi=r("p"),yg=s("Invert an attention mask (e.g., switches 0. and 1.)."),wg=l(),Lt=r("div"),u(yr.$$.fragment),$g=l(),vi=r("p"),xg=s("Get number of (optionally, trainable or non-embeddings) parameters in the module."),Tg=l(),Ut=r("div"),u(wr.$$.fragment),kg=l(),Je=r("p"),Pg=s("Reset the "),yi=r("code"),Mg=s("mem_rss_diff"),Eg=s(" attribute of each module (see "),Qa=r("a"),jg=s("add_memory_hooks()"),Fg=s(")."),Hd=l(),Ze=r("h2"),Ot=r("a"),wi=r("span"),u($r.$$.fragment),Dg=l(),$i=r("span"),qg=s("TFPreTrainedModel"),Gd=l(),M=r("div"),u(xr.$$.fragment),zg=l(),xi=r("p"),Ag=s("Base class for all TF models."),Cg=l(),en=r("p"),tn=r("a"),Ig=s("TFPreTrainedModel"),Lg=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Ug=l(),Tr=r("ul"),Ti=r("li"),Og=s("resize the input embeddings,"),Ng=l(),ki=r("li"),Bg=s("prune heads in the self-attention heads."),Sg=l(),Pi=r("p"),Xg=s("Class attributes (overridden by derived classes):"),Wg=l(),Qe=r("ul"),xe=r("li"),Mi=r("strong"),Vg=s("config_class"),Hg=s(" ("),on=r("a"),Gg=s("PretrainedConfig"),Rg=s(") \u2014 A subclass of "),rn=r("a"),Yg=s("PretrainedConfig"),Kg=s(` to use as configuration class
for this model architecture.`),Jg=l(),Nt=r("li"),Ei=r("strong"),Zg=s("base_model_prefix"),Qg=s(" ("),ji=r("code"),e_=s("str"),t_=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),o_=l(),X=r("li"),Fi=r("strong"),r_=s("main_input_name"),a_=s(" ("),Di=r("code"),n_=s("str"),s_=s(") \u2014 The name of the principal input to the model (often "),qi=r("code"),i_=s("input_ids"),l_=s(` for NLP
models, `),zi=r("code"),d_=s("pixel_values"),c_=s(" for vision models and "),Ai=r("code"),m_=s("input_values"),p_=s(" for speech models)."),h_=l(),Te=r("div"),u(kr.$$.fragment),f_=l(),Pr=r("p"),u_=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Ci=r("code"),g_=s("repo_path_or_name"),__=s("."),b_=l(),u(Bt.$$.fragment),v_=l(),St=r("div"),u(Mr.$$.fragment),y_=l(),Ii=r("p"),w_=s(`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),$_=l(),N=r("div"),u(Er.$$.fragment),x_=l(),Li=r("p"),T_=s("Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),k_=l(),jr=r("p"),P_=s("The warning "),Ui=r("em"),M_=s("Weights from XXX not initialized from pretrained model"),E_=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),j_=l(),Fr=r("p"),F_=s("The warning "),Oi=r("em"),D_=s("Weights from XXX not used in YYY"),q_=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),z_=l(),u(Xt.$$.fragment),A_=l(),u(Wt.$$.fragment),C_=l(),Vt=r("div"),u(Dr.$$.fragment),I_=l(),Ni=r("p"),L_=s("Dict of bias attached to an LM head. The key represents the name of the bias attribute."),U_=l(),Ht=r("div"),u(qr.$$.fragment),O_=l(),Bi=r("p"),N_=s("Returns the model\u2019s input embeddings layer."),B_=l(),Gt=r("div"),u(zr.$$.fragment),S_=l(),Si=r("p"),X_=s("The LM Head layer. This method must be overwritten by all the models that have a lm head."),W_=l(),Rt=r("div"),u(Ar.$$.fragment),V_=l(),Xi=r("p"),H_=s("Returns the model\u2019s output embeddings"),G_=l(),Yt=r("div"),u(Cr.$$.fragment),R_=l(),Wi=r("p"),Y_=s(`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),K_=l(),Kt=r("div"),u(Ir.$$.fragment),J_=l(),Vi=r("p"),Z_=s("Get the concatenated _prefix name of the bias from the model name to the parent layer"),Q_=l(),Jt=r("div"),u(Lr.$$.fragment),eb=l(),Hi=r("p"),tb=s(`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),ob=l(),Zt=r("div"),u(Ur.$$.fragment),rb=l(),R=r("p"),ab=s("Wraps a HuggingFace "),Or=r("a"),nb=s("Dataset"),sb=s(" as a "),Gi=r("code"),ib=s("tf.data.Dataset"),lb=s(` with collation and batching. This method is
designed to create a \u201Cready-to-use\u201D dataset that can be passed directly to Keras methods like `),Ri=r("code"),db=s("fit()"),cb=s(` without
further modification. The method will drop columns from the dataset if they don\u2019t match input names for the
model. If you want to specify the column names to return rather than using the names that match this model, we
recommend using `),Yi=r("code"),mb=s("Dataset.to_tf_dataset()"),pb=s(" instead."),hb=l(),Qt=r("div"),u(Nr.$$.fragment),fb=l(),Ki=r("p"),ub=s("Prunes heads of the base model."),gb=l(),ke=r("div"),u(Br.$$.fragment),_b=l(),Sr=r("p"),bb=s("Resizes input token embeddings matrix of the model if "),Ji=r("code"),vb=s("new_num_tokens != config.vocab_size"),yb=s("."),wb=l(),Xr=r("p"),$b=s("Takes care of tying weights embeddings afterwards if the model class has a "),Zi=r("code"),xb=s("tie_weights()"),Tb=s(" method."),kb=l(),eo=r("div"),u(Wr.$$.fragment),Pb=l(),Vr=r("p"),Mb=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),an=r("a"),Eb=s("from_pretrained()"),jb=s(" class method."),Fb=l(),to=r("div"),u(Hr.$$.fragment),Db=l(),Qi=r("p"),qb=s("Method used for serving the model."),zb=l(),oo=r("div"),u(Gr.$$.fragment),Ab=l(),el=r("p"),Cb=s("Prepare the output of the saved model. Each model must implement this function."),Ib=l(),ro=r("div"),u(Rr.$$.fragment),Lb=l(),tl=r("p"),Ub=s("Set all the bias in the LM head."),Ob=l(),ao=r("div"),u(Yr.$$.fragment),Nb=l(),ol=r("p"),Bb=s("Set model\u2019s input embeddings"),Sb=l(),no=r("div"),u(Kr.$$.fragment),Xb=l(),rl=r("p"),Wb=s("Set model\u2019s output embeddings"),Vb=l(),so=r("div"),u(Jr.$$.fragment),Hb=l(),Zr=r("p"),Gb=s("A modification of Keras\u2019s default "),al=r("code"),Rb=s("train_step"),Yb=s(` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),Kb=l(),io=r("div"),u(Qr.$$.fragment),Jb=l(),ea=r("p"),Zb=s("A modification of Keras\u2019s default "),nl=r("code"),Qb=s("train_step"),ev=s(` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),Rd=l(),et=r("h2"),lo=r("a"),sl=r("span"),u(ta.$$.fragment),tv=l(),il=r("span"),ov=s("TFModelUtilsMixin"),Yd=l(),ne=r("div"),u(oa.$$.fragment),rv=l(),ra=r("p"),av=s("A few utilities for "),ll=r("code"),nv=s("tf.keras.Model"),sv=s(", to be used as a mixin."),iv=l(),co=r("div"),u(aa.$$.fragment),lv=l(),dl=r("p"),dv=s("Get the number of (optionally, trainable) parameters in the model."),Kd=l(),tt=r("h2"),mo=r("a"),cl=r("span"),u(na.$$.fragment),cv=l(),ml=r("span"),mv=s("FlaxPreTrainedModel"),Jd=l(),q=r("div"),u(sa.$$.fragment),pv=l(),pl=r("p"),hv=s("Base class for all models."),fv=l(),nn=r("p"),sn=r("a"),uv=s("FlaxPreTrainedModel"),gv=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),_v=l(),hl=r("p"),bv=s("Class attributes (overridden by derived classes):"),vv=l(),ot=r("ul"),Pe=r("li"),fl=r("strong"),yv=s("config_class"),wv=s(" ("),ln=r("a"),$v=s("PretrainedConfig"),xv=s(") \u2014 A subclass of "),dn=r("a"),Tv=s("PretrainedConfig"),kv=s(` to use as configuration class
for this model architecture.`),Pv=l(),po=r("li"),ul=r("strong"),Mv=s("base_model_prefix"),Ev=s(" ("),gl=r("code"),jv=s("str"),Fv=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),Dv=l(),W=r("li"),_l=r("strong"),qv=s("main_input_name"),zv=s(" ("),bl=r("code"),Av=s("str"),Cv=s(") \u2014 The name of the principal input to the model (often "),vl=r("code"),Iv=s("input_ids"),Lv=s(` for NLP
models, `),yl=r("code"),Uv=s("pixel_values"),Ov=s(" for vision models and "),wl=r("code"),Nv=s("input_values"),Bv=s(" for speech models)."),Sv=l(),Me=r("div"),u(ia.$$.fragment),Xv=l(),la=r("p"),Wv=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),$l=r("code"),Vv=s("repo_path_or_name"),Hv=s("."),Gv=l(),u(ho.$$.fragment),Rv=l(),V=r("div"),u(da.$$.fragment),Yv=l(),xl=r("p"),Kv=s("Instantiate a pretrained flax model from a pre-trained model configuration."),Jv=l(),ca=r("p"),Zv=s("The warning "),Tl=r("em"),Qv=s("Weights from XXX not initialized from pretrained model"),e1=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),t1=l(),ma=r("p"),o1=s("The warning "),kl=r("em"),r1=s("Weights from XXX not used in YYY"),a1=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),n1=l(),u(fo.$$.fragment),s1=l(),Ee=r("div"),u(pa.$$.fragment),i1=l(),ha=r("p"),l1=s("This is the same as "),Pl=r("code"),d1=s("flax.serialization.from_bytes"),c1=s(`
(https:lax.readthedocs.io/en/latest/_modules/flax/serialization.html#from_bytes) but for a sharded checkpoint.`),m1=l(),Ml=r("p"),p1=s(`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),h1=l(),je=r("div"),u(fa.$$.fragment),f1=l(),El=r("p"),u1=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),g1=l(),u(uo.$$.fragment),_1=l(),go=r("div"),u(ua.$$.fragment),b1=l(),ga=r("p"),v1=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),jl=r("code"),y1=s("[from_pretrained()](/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),w1=s(" class method"),$1=l(),te=r("div"),u(_a.$$.fragment),x1=l(),Y=r("p"),T1=s("Cast the floating-point "),Fl=r("code"),k1=s("params"),P1=s(" to "),Dl=r("code"),M1=s("jax.numpy.bfloat16"),E1=s(". This returns a new "),ql=r("code"),j1=s("params"),F1=s(` tree and does not cast
the `),zl=r("code"),D1=s("params"),q1=s(" in place."),z1=l(),Al=r("p"),A1=s(`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),C1=l(),u(_o.$$.fragment),I1=l(),oe=r("div"),u(ba.$$.fragment),L1=l(),K=r("p"),U1=s("Cast the floating-point "),Cl=r("code"),O1=s("parmas"),N1=s(" to "),Il=r("code"),B1=s("jax.numpy.float16"),S1=s(". This returns a new "),Ll=r("code"),X1=s("params"),W1=s(` tree and does not cast the
`),Ul=r("code"),V1=s("params"),H1=s(" in place."),G1=l(),Ol=r("p"),R1=s(`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),Y1=l(),u(bo.$$.fragment),K1=l(),Fe=r("div"),u(va.$$.fragment),J1=l(),J=r("p"),Z1=s("Cast the floating-point "),Nl=r("code"),Q1=s("parmas"),ey=s(" to "),Bl=r("code"),ty=s("jax.numpy.float32"),oy=s(`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Sl=r("code"),ry=s("params"),ay=s(" tree and does not cast the "),Xl=r("code"),ny=s("params"),sy=s(" in place."),iy=l(),u(vo.$$.fragment),Zd=l(),rt=r("h2"),yo=r("a"),Wl=r("span"),u(ya.$$.fragment),ly=l(),Vl=r("span"),dy=s("Pushing to the Hub"),Qd=l(),se=r("div"),u(wa.$$.fragment),cy=l(),Hl=r("p"),my=s("A Mixin containing the functionality to push a model or tokenizer to the hub."),py=l(),De=r("div"),u($a.$$.fragment),hy=l(),xa=r("p"),fy=s(`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Gl=r("code"),uy=s("repo_path_or_name"),gy=s("."),_y=l(),u(wo.$$.fragment),ec=l(),at=r("h2"),$o=r("a"),Rl=r("span"),u(Ta.$$.fragment),by=l(),Yl=r("span"),vy=s("Sharded checkpoints"),tc=l(),ie=r("div"),u(ka.$$.fragment),yy=l(),Pa=r("p"),wy=s(`This is the same as
`),Ma=r("a"),Kl=r("code"),$y=s("torch.nn.Module.load_state_dict"),xy=s(`
but for a sharded checkpoint.`),Ty=l(),Jl=r("p"),ky=s(`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),this.h()},l(o){const h=kx('[data-svelte="svelte-1phssyn"]',document.head);p=a(h,"META",{name:!0,content:!0}),h.forEach(t),T=d(o),$=a(o,"H1",{class:!0});var Ea=n($);f=a(Ea,"A",{id:!0,class:!0,href:!0});var Zl=n(f);k=a(Zl,"SPAN",{});var Ql=n(k);g(c.$$.fragment,Ql),Ql.forEach(t),Zl.forEach(t),x=d(Ea),ae=a(Ea,"SPAN",{});var ed=n(ae);Tm=i(ed,"Models"),ed.forEach(t),Ea.forEach(t),gd=d(o),Z=a(o,"P",{});var le=n(Z);km=i(le,"The base classes "),Aa=a(le,"A",{href:!0});var td=n(Aa);Pm=i(td,"PreTrainedModel"),td.forEach(t),Mm=i(le,", "),Ca=a(le,"A",{href:!0});var od=n(Ca);Em=i(od,"TFPreTrainedModel"),od.forEach(t),jm=i(le,`, and
`),Ia=a(le,"A",{href:!0});var rd=n(Ia);Fm=i(rd,"FlaxPreTrainedModel"),rd.forEach(t),Dm=i(le,` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),le.forEach(t),_d=d(o),Se=a(o,"P",{});var xo=n(Se);La=a(xo,"A",{href:!0});var ad=n(La);qm=i(ad,"PreTrainedModel"),ad.forEach(t),zm=i(xo," and "),Ua=a(xo,"A",{href:!0});var nd=n(Ua);Am=i(nd,"TFPreTrainedModel"),nd.forEach(t),Cm=i(xo,` also implement a few methods which
are common among all the models to:`),xo.forEach(t),bd=d(o),nt=a(o,"UL",{});var ja=n(nt);In=a(ja,"LI",{});var sd=n(In);Im=i(sd,"resize the input token embeddings when new tokens are added to the vocabulary"),sd.forEach(t),Lm=d(ja),Ln=a(ja,"LI",{});var id=n(Ln);Um=i(id,"prune the attention heads of the model."),id.forEach(t),ja.forEach(t),vd=d(o),O=a(o,"P",{});var B=n(O);Om=i(B,"The other methods that are common to each model are defined in "),Oa=a(B,"A",{href:!0});var Fy=n(Oa);Nm=i(Fy,"ModuleUtilsMixin"),Fy.forEach(t),Bm=i(B,`
(for the PyTorch models) and `),Un=a(B,"CODE",{});var Dy=n(Un);Sm=i(Dy,"TFModuleUtilsMixin"),Dy.forEach(t),Xm=i(B,` (for the TensorFlow models) or
for text generation, `),Na=a(B,"A",{href:!0});var qy=n(Na);Wm=i(qy,"GenerationMixin"),qy.forEach(t),Vm=i(B,` (for the PyTorch models),
`),Ba=a(B,"A",{href:!0});var zy=n(Ba);Hm=i(zy,"TFGenerationMixin"),zy.forEach(t),Gm=i(B,` (for the TensorFlow models) and
`),Sa=a(B,"A",{href:!0});var Ay=n(Sa);Rm=i(Ay,"FlaxGenerationMixin"),Ay.forEach(t),Ym=i(B," (for the Flax/JAX models)."),B.forEach(t),yd=d(o),Xe=a(o,"H2",{class:!0});var rc=n(Xe);st=a(rc,"A",{id:!0,class:!0,href:!0});var Cy=n(st);On=a(Cy,"SPAN",{});var Iy=n(On);g(Eo.$$.fragment,Iy),Iy.forEach(t),Cy.forEach(t),Km=d(rc),Nn=a(rc,"SPAN",{});var Ly=n(Nn);Jm=i(Ly,"PreTrainedModel"),Ly.forEach(t),rc.forEach(t),wd=d(o),j=a(o,"DIV",{class:!0});var F=n(j);g(jo.$$.fragment,F),Zm=d(F),Bn=a(F,"P",{});var Uy=n(Bn);Qm=i(Uy,"Base class for all models."),Uy.forEach(t),ep=d(F),Xa=a(F,"P",{});var Py=n(Xa);Wa=a(Py,"A",{href:!0});var Oy=n(Wa);tp=i(Oy,"PreTrainedModel"),Oy.forEach(t),op=i(Py,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Py.forEach(t),rp=d(F),Fo=a(F,"UL",{});var ac=n(Fo);Sn=a(ac,"LI",{});var Ny=n(Sn);ap=i(Ny,"resize the input embeddings,"),Ny.forEach(t),np=d(ac),Xn=a(ac,"LI",{});var By=n(Xn);sp=i(By,"prune heads in the self-attention heads."),By.forEach(t),ac.forEach(t),ip=d(F),Wn=a(F,"P",{});var Sy=n(Wn);lp=i(Sy,"Class attributes (overridden by derived classes):"),Sy.forEach(t),dp=d(F),H=a(F,"UL",{});var qe=n(H);Vn=a(qe,"LI",{});var Xy=n(Vn);pe=a(Xy,"P",{});var Fa=n(pe);Hn=a(Fa,"STRONG",{});var Wy=n(Hn);cp=i(Wy,"config_class"),Wy.forEach(t),mp=i(Fa," ("),Va=a(Fa,"A",{href:!0});var Vy=n(Va);pp=i(Vy,"PretrainedConfig"),Vy.forEach(t),hp=i(Fa,") \u2014 A subclass of "),Ha=a(Fa,"A",{href:!0});var Hy=n(Ha);fp=i(Hy,"PretrainedConfig"),Hy.forEach(t),up=i(Fa,` to use as configuration class
for this model architecture.`),Fa.forEach(t),Xy.forEach(t),gp=d(qe),Do=a(qe,"LI",{});var nc=n(Do);he=a(nc,"P",{});var Da=n(he);Gn=a(Da,"STRONG",{});var Gy=n(Gn);_p=i(Gy,"load_tf_weights"),Gy.forEach(t),bp=i(Da," ("),Rn=a(Da,"CODE",{});var Ry=n(Rn);vp=i(Ry,"Callable"),Ry.forEach(t),yp=i(Da,") \u2014 A python "),Yn=a(Da,"EM",{});var Yy=n(Yn);wp=i(Yy,"method"),Yy.forEach(t),$p=i(Da,` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),Da.forEach(t),xp=d(nc),We=a(nc,"UL",{});var cn=n(We);it=a(cn,"LI",{});var ld=n(it);Kn=a(ld,"STRONG",{});var Ky=n(Kn);Tp=i(Ky,"model"),Ky.forEach(t),kp=i(ld," ("),Ga=a(ld,"A",{href:!0});var Jy=n(Ga);Pp=i(Jy,"PreTrainedModel"),Jy.forEach(t),Mp=i(ld,") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),ld.forEach(t),Ep=d(cn),lt=a(cn,"LI",{});var dd=n(lt);Jn=a(dd,"STRONG",{});var Zy=n(Jn);jp=i(Zy,"config"),Zy.forEach(t),Fp=i(dd," ("),Zn=a(dd,"CODE",{});var Qy=n(Zn);Dp=i(Qy,"PreTrainedConfig"),Qy.forEach(t),qp=i(dd,") \u2014 An instance of the configuration associated to the model."),dd.forEach(t),zp=d(cn),dt=a(cn,"LI",{});var cd=n(dt);Qn=a(cd,"STRONG",{});var ew=n(Qn);Ap=i(ew,"path"),ew.forEach(t),Cp=i(cd," ("),es=a(cd,"CODE",{});var tw=n(es);Ip=i(tw,"str"),tw.forEach(t),Lp=i(cd,") \u2014 A path to the TensorFlow checkpoint."),cd.forEach(t),cn.forEach(t),nc.forEach(t),Up=d(qe),ts=a(qe,"LI",{});var ow=n(ts);ct=a(ow,"P",{});var md=n(ct);os=a(md,"STRONG",{});var rw=n(os);Op=i(rw,"base_model_prefix"),rw.forEach(t),Np=i(md," ("),rs=a(md,"CODE",{});var aw=n(rs);Bp=i(aw,"str"),aw.forEach(t),Sp=i(md,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),md.forEach(t),ow.forEach(t),Xp=d(qe),as=a(qe,"LI",{});var nw=n(as);mt=a(nw,"P",{});var pd=n(mt);ns=a(pd,"STRONG",{});var sw=n(ns);Wp=i(sw,"is_parallelizable"),sw.forEach(t),Vp=i(pd," ("),ss=a(pd,"CODE",{});var iw=n(ss);Hp=i(iw,"bool"),iw.forEach(t),Gp=i(pd,") \u2014 A flag indicating whether this model supports model parallelization."),pd.forEach(t),nw.forEach(t),Rp=d(qe),is=a(qe,"LI",{});var lw=n(is);S=a(lw,"P",{});var de=n(S);ls=a(de,"STRONG",{});var dw=n(ls);Yp=i(dw,"main_input_name"),dw.forEach(t),Kp=i(de," ("),ds=a(de,"CODE",{});var cw=n(ds);Jp=i(cw,"str"),cw.forEach(t),Zp=i(de,") \u2014 The name of the principal input to the model (often "),cs=a(de,"CODE",{});var mw=n(cs);Qp=i(mw,"input_ids"),mw.forEach(t),eh=i(de,` for NLP
models, `),ms=a(de,"CODE",{});var pw=n(ms);th=i(pw,"pixel_values"),pw.forEach(t),oh=i(de," for vision models and "),ps=a(de,"CODE",{});var hw=n(ps);rh=i(hw,"input_values"),hw.forEach(t),ah=i(de," for speech models)."),de.forEach(t),lw.forEach(t),qe.forEach(t),nh=d(F),fe=a(F,"DIV",{class:!0});var mn=n(fe);g(qo.$$.fragment,mn),sh=d(mn),zo=a(mn,"P",{});var sc=n(zo);ih=i(sc,"Upload the model files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in "),hs=a(sc,"CODE",{});var fw=n(hs);lh=i(fw,"repo_path_or_name"),fw.forEach(t),dh=i(sc,"."),sc.forEach(t),ch=d(mn),g(pt.$$.fragment,mn),mn.forEach(t),mh=d(F),z=a(F,"DIV",{class:!0});var A=n(z);g(Ao.$$.fragment,A),ph=d(A),fs=a(A,"P",{});var uw=n(fs);hh=i(uw,"Instantiate a pretrained pytorch model from a pre-trained model configuration."),uw.forEach(t),fh=d(A),Ve=a(A,"P",{});var pn=n(Ve);uh=i(pn,"The model is set in evaluation mode by default using "),us=a(pn,"CODE",{});var gw=n(us);gh=i(gw,"model.eval()"),gw.forEach(t),_h=i(pn,` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),gs=a(pn,"CODE",{});var _w=n(gs);bh=i(_w,"model.train()"),_w.forEach(t),vh=i(pn,"."),pn.forEach(t),yh=d(A),Co=a(A,"P",{});var ic=n(Co);wh=i(ic,"The warning "),_s=a(ic,"EM",{});var bw=n(_s);$h=i(bw,"Weights from XXX not initialized from pretrained model"),bw.forEach(t),xh=i(ic,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ic.forEach(t),Th=d(A),Io=a(A,"P",{});var lc=n(Io);kh=i(lc,"The warning "),bs=a(lc,"EM",{});var vw=n(bs);Ph=i(vw,"Weights from XXX not used in YYY"),vw.forEach(t),Mh=i(lc,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),lc.forEach(t),Eh=d(A),g(ht.$$.fragment,A),jh=d(A),g(ft.$$.fragment,A),Fh=d(A),g(ut.$$.fragment,A),Dh=d(A),vs=a(A,"UL",{});var yw=n(vs);Ra=a(yw,"LI",{});var My=n(Ra);ys=a(My,"CODE",{});var ww=n(ys);qh=i(ww,"low_cpu_mem_usage"),ww.forEach(t),zh=i(My," algorithm:"),My.forEach(t),yw.forEach(t),Ah=d(A),ws=a(A,"P",{});var $w=n(ws);Ch=i($w,"This is an experimental function that loads the model using ~1x model size CPU memory"),$w.forEach(t),Ih=d(A),$s=a(A,"P",{});var xw=n($s);Lh=i(xw,"Here is how it works:"),xw.forEach(t),Uh=d(A),G=a(A,"OL",{});var ze=n(G);xs=a(ze,"LI",{});var Tw=n(xs);Oh=i(Tw,"save which state_dict keys we have"),Tw.forEach(t),Nh=d(ze),Ts=a(ze,"LI",{});var kw=n(Ts);Bh=i(kw,"drop state_dict before the model is created, since the latter takes 1x model size CPU memory"),kw.forEach(t),Sh=d(ze),ks=a(ze,"LI",{});var Pw=n(ks);Xh=i(Pw,`after the model has been instantiated switch to the meta device all params/buffers that
are going to be replaced from the loaded state_dict`),Pw.forEach(t),Wh=d(ze),Ps=a(ze,"LI",{});var Mw=n(Ps);Vh=i(Mw,"load state_dict 2nd time"),Mw.forEach(t),Hh=d(ze),Ms=a(ze,"LI",{});var Ew=n(Ms);Gh=i(Ew,"replace the params/buffers from the state_dict"),Ew.forEach(t),ze.forEach(t),Rh=d(A),Es=a(A,"P",{});var jw=n(Es);Yh=i(jw,"Currently, it can\u2019t handle deepspeed ZeRO stage 3 and ignores loading errors"),jw.forEach(t),A.forEach(t),Kh=d(F),gt=a(F,"DIV",{class:!0});var dc=n(gt);g(Lo.$$.fragment,dc),Jh=d(dc),js=a(dc,"P",{});var Fw=n(js);Zh=i(Fw,"Returns the model\u2019s input embeddings."),Fw.forEach(t),dc.forEach(t),Qh=d(F),_t=a(F,"DIV",{class:!0});var cc=n(_t);g(Uo.$$.fragment,cc),ef=d(cc),Fs=a(cc,"P",{});var Dw=n(Fs);tf=i(Dw,"Returns the model\u2019s output embeddings."),Dw.forEach(t),cc.forEach(t),of=d(F),ue=a(F,"DIV",{class:!0});var hn=n(ue);g(Oo.$$.fragment,hn),rf=d(hn),Ds=a(hn,"P",{});var qw=n(Ds);af=i(qw,"Deactivates gradient checkpointing for the current model."),qw.forEach(t),nf=d(hn),qs=a(hn,"P",{});var zw=n(qs);sf=i(zw,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),zw.forEach(t),hn.forEach(t),lf=d(F),ge=a(F,"DIV",{class:!0});var fn=n(ge);g(No.$$.fragment,fn),df=d(fn),zs=a(fn,"P",{});var Aw=n(zs);cf=i(Aw,"Activates gradient checkpointing for the current model."),Aw.forEach(t),mf=d(fn),As=a(fn,"P",{});var Cw=n(As);pf=i(Cw,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),Cw.forEach(t),fn.forEach(t),hf=d(F),bt=a(F,"DIV",{class:!0});var mc=n(bt);g(Bo.$$.fragment,mc),ff=d(mc),Cs=a(mc,"P",{});var Iw=n(Cs);uf=i(Iw,"If needed prunes and maybe initializes weights."),Iw.forEach(t),mc.forEach(t),gf=d(F),vt=a(F,"DIV",{class:!0});var pc=n(vt);g(So.$$.fragment,pc),_f=d(pc),Is=a(pc,"P",{});var Lw=n(Is);bf=i(Lw,`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),Lw.forEach(t),pc.forEach(t),vf=d(F),yt=a(F,"DIV",{class:!0});var hc=n(yt);g(Xo.$$.fragment,hc),yf=d(hc),Ls=a(hc,"P",{});var Uw=n(Ls);wf=i(Uw,"Prunes heads of the base model."),Uw.forEach(t),hc.forEach(t),$f=d(F),_e=a(F,"DIV",{class:!0});var un=n(_e);g(Wo.$$.fragment,un),xf=d(un),Us=a(un,"P",{});var Ow=n(Us);Tf=i(Ow,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Ow.forEach(t),kf=d(un),g(wt.$$.fragment,un),un.forEach(t),Pf=d(F),be=a(F,"DIV",{class:!0});var gn=n(be);g(Vo.$$.fragment,gn),Mf=d(gn),Ho=a(gn,"P",{});var fc=n(Ho);Ef=i(fc,"Resizes input token embeddings matrix of the model if "),Os=a(fc,"CODE",{});var Nw=n(Os);jf=i(Nw,"new_num_tokens != config.vocab_size"),Nw.forEach(t),Ff=i(fc,"."),fc.forEach(t),Df=d(gn),Go=a(gn,"P",{});var uc=n(Go);qf=i(uc,"Takes care of tying weights embeddings afterwards if the model class has a "),Ns=a(uc,"CODE",{});var Bw=n(Ns);zf=i(Bw,"tie_weights()"),Bw.forEach(t),Af=i(uc," method."),uc.forEach(t),gn.forEach(t),Cf=d(F),$t=a(F,"DIV",{class:!0});var gc=n($t);g(Ro.$$.fragment,gc),If=d(gc),Yo=a(gc,"P",{});var _c=n(Yo);Lf=i(_c,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Bs=a(_c,"CODE",{});var Sw=n(Bs);Uf=i(Sw,"[from_pretrained()](/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),Sw.forEach(t),Of=i(_c," class method."),_c.forEach(t),gc.forEach(t),Nf=d(F),xt=a(F,"DIV",{class:!0});var bc=n(xt);g(Ko.$$.fragment,bc),Bf=d(bc),Ss=a(bc,"P",{});var Xw=n(Ss);Sf=i(Xw,"Set model\u2019s input embeddings."),Xw.forEach(t),bc.forEach(t),Xf=d(F),ve=a(F,"DIV",{class:!0});var _n=n(ve);g(Jo.$$.fragment,_n),Wf=d(_n),Xs=a(_n,"P",{});var Ww=n(Xs);Vf=i(Ww,"Tie the weights between the input embeddings and the output embeddings."),Ww.forEach(t),Hf=d(_n),Zo=a(_n,"P",{});var vc=n(Zo);Gf=i(vc,"If the "),Ws=a(vc,"CODE",{});var Vw=n(Ws);Rf=i(Vw,"torchscript"),Vw.forEach(t),Yf=i(vc,` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),vc.forEach(t),_n.forEach(t),F.forEach(t),$d=d(o),Ya=a(o,"A",{id:!0}),n(Ya).forEach(t),xd=d(o),He=a(o,"H3",{class:!0});var yc=n(He);Tt=a(yc,"A",{id:!0,class:!0,href:!0});var Hw=n(Tt);Vs=a(Hw,"SPAN",{});var Gw=n(Vs);g(Qo.$$.fragment,Gw),Gw.forEach(t),Hw.forEach(t),Kf=d(yc),Hs=a(yc,"SPAN",{});var Rw=n(Hs);Jf=i(Rw,"Large model loading"),Rw.forEach(t),yc.forEach(t),Td=d(o),ye=a(o,"P",{});var bn=n(ye);Zf=i(bn,"In Transformers 4.20.0, the "),Ka=a(bn,"A",{href:!0});var Yw=n(Ka);Qf=i(Yw,"from_pretrained()"),Yw.forEach(t),eu=i(bn," method has been reworked to accommodate large models using "),er=a(bn,"A",{href:!0,rel:!0});var Kw=n(er);tu=i(Kw,"Accelerate"),Kw.forEach(t),ou=i(bn,". This requires Accelerate >= 0.9.0 and PyTorch >= 1.9.0. Instead of creating the full model, then loading the pretrained weights inside it (which takes twice the size of the model in RAM, one for the randomly initialized model, one for the weights), there is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded."),bn.forEach(t),kd=d(o),kt=a(o,"P",{});var wc=n(kt);ru=i(wc,"This option can be activated with "),Gs=a(wc,"CODE",{});var Jw=n(Gs);au=i(Jw,"low_cpu_mem_usage=True"),Jw.forEach(t),nu=i(wc,". The model is first created on the Meta device (with empty weights) and the state dict is then loaded inside it (shard by shard in the case of a sharded checkpoint). This way the maximum RAM used is the full size of the model only."),wc.forEach(t),Pd=d(o),g(tr.$$.fragment,o),Md=d(o),Pt=a(o,"P",{});var $c=n(Pt);su=i($c,"Moreover, you can directly place the model on different devices if it doesn\u2019t fully fit in RAM (only works for inference for now). With "),Rs=a($c,"CODE",{});var Zw=n(Rs);iu=i(Zw,'device_map="auto"'),Zw.forEach(t),lu=i($c,", Accelerate will determine where to put each layer to maximize the use of your fastest devices (GPUs) and offload the rest on the CPU, or even the hard drive if you don\u2019t have enough GPU RAM (or CPU RAM). Even if the model is split across several devices, it will run as you would normally expect."),$c.forEach(t),Ed=d(o),Q=a(o,"P",{});var To=n(Q);du=i(To,"When passing a "),Ys=a(To,"CODE",{});var Qw=n(Ys);cu=i(Qw,"device_map"),Qw.forEach(t),mu=i(To,", "),Ks=a(To,"CODE",{});var e2=n(Ks);pu=i(e2,"low_cpu_mem_usage"),e2.forEach(t),hu=i(To," is automatically set to "),Js=a(To,"CODE",{});var t2=n(Js);fu=i(t2,"True"),t2.forEach(t),uu=i(To,", so you don\u2019t need to specify it:"),To.forEach(t),jd=d(o),g(or.$$.fragment,o),Fd=d(o),Mt=a(o,"P",{});var xc=n(Mt);gu=i(xc,"You can inspect how the model was split across devices by looking at its "),Zs=a(xc,"CODE",{});var o2=n(Zs);_u=i(o2,"hf_device_map"),o2.forEach(t),bu=i(xc," attribute:"),xc.forEach(t),Dd=d(o),g(rr.$$.fragment,o),qd=d(o),g(ar.$$.fragment,o),zd=d(o),Ja=a(o,"P",{});var r2=n(Ja);vu=i(r2,"You can also write your own device map following the same format (a dictionary layer name to device). It should map all parameters of the model to a given device, but you don\u2019t have to detail where all the submosules of one layer go if that layer is entirely on the same device. For instance, the following device map would work properly for T0pp (as long as you have the GPU memory):"),r2.forEach(t),Ad=d(o),g(nr.$$.fragment,o),Cd=d(o),Et=a(o,"P",{});var Tc=n(Et);yu=i(Tc,"Another way to minimize the memory impact of your model is to instantiate it at a lower precision dtype (like "),Qs=a(Tc,"CODE",{});var a2=n(Qs);wu=i(a2,"torch.float16"),a2.forEach(t),$u=i(Tc,")."),Tc.forEach(t),Id=d(o),Ge=a(o,"H3",{class:!0});var kc=n(Ge);jt=a(kc,"A",{id:!0,class:!0,href:!0});var n2=n(jt);ei=a(n2,"SPAN",{});var s2=n(ei);g(sr.$$.fragment,s2),s2.forEach(t),n2.forEach(t),xu=d(kc),ti=a(kc,"SPAN",{});var i2=n(ti);Tu=i(i2,"Model Instantiation dtype"),i2.forEach(t),kc.forEach(t),Ld=d(o),ee=a(o,"P",{});var ko=n(ee);ku=i(ko,"Under Pytorch a model normally gets instantiated with "),oi=a(ko,"CODE",{});var l2=n(oi);Pu=i(l2,"torch.float32"),l2.forEach(t),Mu=i(ko,` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),ri=a(ko,"CODE",{});var d2=n(ri);Eu=i(d2,"dtype"),d2.forEach(t),ju=i(ko," using "),ai=a(ko,"CODE",{});var c2=n(ai);Fu=i(c2,"torch_dtype"),c2.forEach(t),Du=i(ko," argument:"),ko.forEach(t),Ud=d(o),g(ir.$$.fragment,o),Od=d(o),we=a(o,"P",{});var vn=n(we);qu=i(vn,"or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),ni=a(vn,"CODE",{});var m2=n(ni);zu=i(m2,'"auto"'),m2.forEach(t),Au=i(vn,`,
and then `),si=a(vn,"CODE",{});var p2=n(si);Cu=i(p2,"dtype"),p2.forEach(t),Iu=i(vn," will be automatically derived from the model\u2019s weights:"),vn.forEach(t),Nd=d(o),g(lr.$$.fragment,o),Bd=d(o),Ft=a(o,"P",{});var Pc=n(Ft);Lu=i(Pc,"Models instantiated from scratch can also be told which "),ii=a(Pc,"CODE",{});var h2=n(ii);Uu=i(h2,"dtype"),h2.forEach(t),Ou=i(Pc," to use with:"),Pc.forEach(t),Sd=d(o),g(dr.$$.fragment,o),Xd=d(o),Za=a(o,"P",{});var f2=n(Za);Nu=i(f2,"Due to Pytorch design, this functionality is only available for floating dtypes."),f2.forEach(t),Wd=d(o),Re=a(o,"H2",{class:!0});var Mc=n(Re);Dt=a(Mc,"A",{id:!0,class:!0,href:!0});var u2=n(Dt);li=a(u2,"SPAN",{});var g2=n(li);g(cr.$$.fragment,g2),g2.forEach(t),u2.forEach(t),Bu=d(Mc),di=a(Mc,"SPAN",{});var _2=n(di);Su=i(_2,"ModuleUtilsMixin"),_2.forEach(t),Mc.forEach(t),Vd=d(o),I=a(o,"DIV",{class:!0});var L=n(I);g(mr.$$.fragment,L),Xu=d(L),pr=a(L,"P",{});var Ec=n(pr);Wu=i(Ec,"A few utilities for "),ci=a(Ec,"CODE",{});var b2=n(ci);Vu=i(b2,"torch.nn.Modules"),b2.forEach(t),Hu=i(Ec,", to be used as a mixin."),Ec.forEach(t),Gu=d(L),$e=a(L,"DIV",{class:!0});var yn=n($e);g(hr.$$.fragment,yn),Ru=d(yn),mi=a(yn,"P",{});var v2=n(mi);Yu=i(v2,"Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),v2.forEach(t),Ku=d(yn),Ye=a(yn,"P",{});var wn=n(Ye);Ju=i(wn,"Increase in memory consumption is stored in a "),pi=a(wn,"CODE",{});var y2=n(pi);Zu=i(y2,"mem_rss_diff"),y2.forEach(t),Qu=i(wn,` attribute for each module and can be reset to zero
with `),hi=a(wn,"CODE",{});var w2=n(hi);eg=i(w2,"model.reset_memory_hooks_state()"),w2.forEach(t),tg=i(wn,"."),wn.forEach(t),yn.forEach(t),og=d(L),qt=a(L,"DIV",{class:!0});var jc=n(qt);g(fr.$$.fragment,jc),rg=d(jc),fi=a(jc,"P",{});var $2=n(fi);ag=i($2,"Helper function to estimate the total number of tokens from the model inputs."),$2.forEach(t),jc.forEach(t),ng=d(L),zt=a(L,"DIV",{class:!0});var Fc=n(zt);g(ur.$$.fragment,Fc),sg=d(Fc),Ke=a(Fc,"P",{});var $n=n(Ke);ig=i($n,`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),ui=a($n,"CODE",{});var x2=n(ui);lg=i(x2,"12 * d_model << sequence_length"),x2.forEach(t),dg=i($n,") as laid out in "),gr=a($n,"A",{href:!0,rel:!0});var T2=n(gr);cg=i(T2,`this
paper`),T2.forEach(t),mg=i($n,` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),$n.forEach(t),Fc.forEach(t),pg=d(L),At=a(L,"DIV",{class:!0});var Dc=n(At);g(_r.$$.fragment,Dc),hg=d(Dc),gi=a(Dc,"P",{});var k2=n(gi);fg=i(k2,"Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),k2.forEach(t),Dc.forEach(t),ug=d(L),Ct=a(L,"DIV",{class:!0});var qc=n(Ct);g(br.$$.fragment,qc),gg=d(qc),_i=a(qc,"P",{});var P2=n(_i);_g=i(P2,"Prepare the head mask if needed."),P2.forEach(t),qc.forEach(t),bg=d(L),It=a(L,"DIV",{class:!0});var zc=n(It);g(vr.$$.fragment,zc),vg=d(zc),bi=a(zc,"P",{});var M2=n(bi);yg=i(M2,"Invert an attention mask (e.g., switches 0. and 1.)."),M2.forEach(t),zc.forEach(t),wg=d(L),Lt=a(L,"DIV",{class:!0});var Ac=n(Lt);g(yr.$$.fragment,Ac),$g=d(Ac),vi=a(Ac,"P",{});var E2=n(vi);xg=i(E2,"Get number of (optionally, trainable or non-embeddings) parameters in the module."),E2.forEach(t),Ac.forEach(t),Tg=d(L),Ut=a(L,"DIV",{class:!0});var Cc=n(Ut);g(wr.$$.fragment,Cc),kg=d(Cc),Je=a(Cc,"P",{});var xn=n(Je);Pg=i(xn,"Reset the "),yi=a(xn,"CODE",{});var j2=n(yi);Mg=i(j2,"mem_rss_diff"),j2.forEach(t),Eg=i(xn," attribute of each module (see "),Qa=a(xn,"A",{href:!0});var F2=n(Qa);jg=i(F2,"add_memory_hooks()"),F2.forEach(t),Fg=i(xn,")."),xn.forEach(t),Cc.forEach(t),L.forEach(t),Hd=d(o),Ze=a(o,"H2",{class:!0});var Ic=n(Ze);Ot=a(Ic,"A",{id:!0,class:!0,href:!0});var D2=n(Ot);wi=a(D2,"SPAN",{});var q2=n(wi);g($r.$$.fragment,q2),q2.forEach(t),D2.forEach(t),Dg=d(Ic),$i=a(Ic,"SPAN",{});var z2=n($i);qg=i(z2,"TFPreTrainedModel"),z2.forEach(t),Ic.forEach(t),Gd=d(o),M=a(o,"DIV",{class:!0});var E=n(M);g(xr.$$.fragment,E),zg=d(E),xi=a(E,"P",{});var A2=n(xi);Ag=i(A2,"Base class for all TF models."),A2.forEach(t),Cg=d(E),en=a(E,"P",{});var Ey=n(en);tn=a(Ey,"A",{href:!0});var C2=n(tn);Ig=i(C2,"TFPreTrainedModel"),C2.forEach(t),Lg=i(Ey,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Ey.forEach(t),Ug=d(E),Tr=a(E,"UL",{});var Lc=n(Tr);Ti=a(Lc,"LI",{});var I2=n(Ti);Og=i(I2,"resize the input embeddings,"),I2.forEach(t),Ng=d(Lc),ki=a(Lc,"LI",{});var L2=n(ki);Bg=i(L2,"prune heads in the self-attention heads."),L2.forEach(t),Lc.forEach(t),Sg=d(E),Pi=a(E,"P",{});var U2=n(Pi);Xg=i(U2,"Class attributes (overridden by derived classes):"),U2.forEach(t),Wg=d(E),Qe=a(E,"UL",{});var Tn=n(Qe);xe=a(Tn,"LI",{});var qa=n(xe);Mi=a(qa,"STRONG",{});var O2=n(Mi);Vg=i(O2,"config_class"),O2.forEach(t),Hg=i(qa," ("),on=a(qa,"A",{href:!0});var N2=n(on);Gg=i(N2,"PretrainedConfig"),N2.forEach(t),Rg=i(qa,") \u2014 A subclass of "),rn=a(qa,"A",{href:!0});var B2=n(rn);Yg=i(B2,"PretrainedConfig"),B2.forEach(t),Kg=i(qa,` to use as configuration class
for this model architecture.`),qa.forEach(t),Jg=d(Tn),Nt=a(Tn,"LI",{});var hd=n(Nt);Ei=a(hd,"STRONG",{});var S2=n(Ei);Zg=i(S2,"base_model_prefix"),S2.forEach(t),Qg=i(hd," ("),ji=a(hd,"CODE",{});var X2=n(ji);e_=i(X2,"str"),X2.forEach(t),t_=i(hd,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),hd.forEach(t),o_=d(Tn),X=a(Tn,"LI",{});var ce=n(X);Fi=a(ce,"STRONG",{});var W2=n(Fi);r_=i(W2,"main_input_name"),W2.forEach(t),a_=i(ce," ("),Di=a(ce,"CODE",{});var V2=n(Di);n_=i(V2,"str"),V2.forEach(t),s_=i(ce,") \u2014 The name of the principal input to the model (often "),qi=a(ce,"CODE",{});var H2=n(qi);i_=i(H2,"input_ids"),H2.forEach(t),l_=i(ce,` for NLP
models, `),zi=a(ce,"CODE",{});var G2=n(zi);d_=i(G2,"pixel_values"),G2.forEach(t),c_=i(ce," for vision models and "),Ai=a(ce,"CODE",{});var R2=n(Ai);m_=i(R2,"input_values"),R2.forEach(t),p_=i(ce," for speech models)."),ce.forEach(t),Tn.forEach(t),h_=d(E),Te=a(E,"DIV",{class:!0});var kn=n(Te);g(kr.$$.fragment,kn),f_=d(kn),Pr=a(kn,"P",{});var Uc=n(Pr);u_=i(Uc,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Ci=a(Uc,"CODE",{});var Y2=n(Ci);g_=i(Y2,"repo_path_or_name"),Y2.forEach(t),__=i(Uc,"."),Uc.forEach(t),b_=d(kn),g(Bt.$$.fragment,kn),kn.forEach(t),v_=d(E),St=a(E,"DIV",{class:!0});var Oc=n(St);g(Mr.$$.fragment,Oc),y_=d(Oc),Ii=a(Oc,"P",{});var K2=n(Ii);w_=i(K2,`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),K2.forEach(t),Oc.forEach(t),$_=d(E),N=a(E,"DIV",{class:!0});var re=n(N);g(Er.$$.fragment,re),x_=d(re),Li=a(re,"P",{});var J2=n(Li);T_=i(J2,"Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),J2.forEach(t),k_=d(re),jr=a(re,"P",{});var Nc=n(jr);P_=i(Nc,"The warning "),Ui=a(Nc,"EM",{});var Z2=n(Ui);M_=i(Z2,"Weights from XXX not initialized from pretrained model"),Z2.forEach(t),E_=i(Nc,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Nc.forEach(t),j_=d(re),Fr=a(re,"P",{});var Bc=n(Fr);F_=i(Bc,"The warning "),Oi=a(Bc,"EM",{});var Q2=n(Oi);D_=i(Q2,"Weights from XXX not used in YYY"),Q2.forEach(t),q_=i(Bc,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Bc.forEach(t),z_=d(re),g(Xt.$$.fragment,re),A_=d(re),g(Wt.$$.fragment,re),re.forEach(t),C_=d(E),Vt=a(E,"DIV",{class:!0});var Sc=n(Vt);g(Dr.$$.fragment,Sc),I_=d(Sc),Ni=a(Sc,"P",{});var e$=n(Ni);L_=i(e$,"Dict of bias attached to an LM head. The key represents the name of the bias attribute."),e$.forEach(t),Sc.forEach(t),U_=d(E),Ht=a(E,"DIV",{class:!0});var Xc=n(Ht);g(qr.$$.fragment,Xc),O_=d(Xc),Bi=a(Xc,"P",{});var t$=n(Bi);N_=i(t$,"Returns the model\u2019s input embeddings layer."),t$.forEach(t),Xc.forEach(t),B_=d(E),Gt=a(E,"DIV",{class:!0});var Wc=n(Gt);g(zr.$$.fragment,Wc),S_=d(Wc),Si=a(Wc,"P",{});var o$=n(Si);X_=i(o$,"The LM Head layer. This method must be overwritten by all the models that have a lm head."),o$.forEach(t),Wc.forEach(t),W_=d(E),Rt=a(E,"DIV",{class:!0});var Vc=n(Rt);g(Ar.$$.fragment,Vc),V_=d(Vc),Xi=a(Vc,"P",{});var r$=n(Xi);H_=i(r$,"Returns the model\u2019s output embeddings"),r$.forEach(t),Vc.forEach(t),G_=d(E),Yt=a(E,"DIV",{class:!0});var Hc=n(Yt);g(Cr.$$.fragment,Hc),R_=d(Hc),Wi=a(Hc,"P",{});var a$=n(Wi);Y_=i(a$,`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),a$.forEach(t),Hc.forEach(t),K_=d(E),Kt=a(E,"DIV",{class:!0});var Gc=n(Kt);g(Ir.$$.fragment,Gc),J_=d(Gc),Vi=a(Gc,"P",{});var n$=n(Vi);Z_=i(n$,"Get the concatenated _prefix name of the bias from the model name to the parent layer"),n$.forEach(t),Gc.forEach(t),Q_=d(E),Jt=a(E,"DIV",{class:!0});var Rc=n(Jt);g(Lr.$$.fragment,Rc),eb=d(Rc),Hi=a(Rc,"P",{});var s$=n(Hi);tb=i(s$,`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),s$.forEach(t),Rc.forEach(t),ob=d(E),Zt=a(E,"DIV",{class:!0});var Yc=n(Zt);g(Ur.$$.fragment,Yc),rb=d(Yc),R=a(Yc,"P",{});var Ae=n(R);ab=i(Ae,"Wraps a HuggingFace "),Or=a(Ae,"A",{href:!0,rel:!0});var i$=n(Or);nb=i(i$,"Dataset"),i$.forEach(t),sb=i(Ae," as a "),Gi=a(Ae,"CODE",{});var l$=n(Gi);ib=i(l$,"tf.data.Dataset"),l$.forEach(t),lb=i(Ae,` with collation and batching. This method is
designed to create a \u201Cready-to-use\u201D dataset that can be passed directly to Keras methods like `),Ri=a(Ae,"CODE",{});var d$=n(Ri);db=i(d$,"fit()"),d$.forEach(t),cb=i(Ae,` without
further modification. The method will drop columns from the dataset if they don\u2019t match input names for the
model. If you want to specify the column names to return rather than using the names that match this model, we
recommend using `),Yi=a(Ae,"CODE",{});var c$=n(Yi);mb=i(c$,"Dataset.to_tf_dataset()"),c$.forEach(t),pb=i(Ae," instead."),Ae.forEach(t),Yc.forEach(t),hb=d(E),Qt=a(E,"DIV",{class:!0});var Kc=n(Qt);g(Nr.$$.fragment,Kc),fb=d(Kc),Ki=a(Kc,"P",{});var m$=n(Ki);ub=i(m$,"Prunes heads of the base model."),m$.forEach(t),Kc.forEach(t),gb=d(E),ke=a(E,"DIV",{class:!0});var Pn=n(ke);g(Br.$$.fragment,Pn),_b=d(Pn),Sr=a(Pn,"P",{});var Jc=n(Sr);bb=i(Jc,"Resizes input token embeddings matrix of the model if "),Ji=a(Jc,"CODE",{});var p$=n(Ji);vb=i(p$,"new_num_tokens != config.vocab_size"),p$.forEach(t),yb=i(Jc,"."),Jc.forEach(t),wb=d(Pn),Xr=a(Pn,"P",{});var Zc=n(Xr);$b=i(Zc,"Takes care of tying weights embeddings afterwards if the model class has a "),Zi=a(Zc,"CODE",{});var h$=n(Zi);xb=i(h$,"tie_weights()"),h$.forEach(t),Tb=i(Zc," method."),Zc.forEach(t),Pn.forEach(t),kb=d(E),eo=a(E,"DIV",{class:!0});var Qc=n(eo);g(Wr.$$.fragment,Qc),Pb=d(Qc),Vr=a(Qc,"P",{});var em=n(Vr);Mb=i(em,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),an=a(em,"A",{href:!0});var f$=n(an);Eb=i(f$,"from_pretrained()"),f$.forEach(t),jb=i(em," class method."),em.forEach(t),Qc.forEach(t),Fb=d(E),to=a(E,"DIV",{class:!0});var tm=n(to);g(Hr.$$.fragment,tm),Db=d(tm),Qi=a(tm,"P",{});var u$=n(Qi);qb=i(u$,"Method used for serving the model."),u$.forEach(t),tm.forEach(t),zb=d(E),oo=a(E,"DIV",{class:!0});var om=n(oo);g(Gr.$$.fragment,om),Ab=d(om),el=a(om,"P",{});var g$=n(el);Cb=i(g$,"Prepare the output of the saved model. Each model must implement this function."),g$.forEach(t),om.forEach(t),Ib=d(E),ro=a(E,"DIV",{class:!0});var rm=n(ro);g(Rr.$$.fragment,rm),Lb=d(rm),tl=a(rm,"P",{});var _$=n(tl);Ub=i(_$,"Set all the bias in the LM head."),_$.forEach(t),rm.forEach(t),Ob=d(E),ao=a(E,"DIV",{class:!0});var am=n(ao);g(Yr.$$.fragment,am),Nb=d(am),ol=a(am,"P",{});var b$=n(ol);Bb=i(b$,"Set model\u2019s input embeddings"),b$.forEach(t),am.forEach(t),Sb=d(E),no=a(E,"DIV",{class:!0});var nm=n(no);g(Kr.$$.fragment,nm),Xb=d(nm),rl=a(nm,"P",{});var v$=n(rl);Wb=i(v$,"Set model\u2019s output embeddings"),v$.forEach(t),nm.forEach(t),Vb=d(E),so=a(E,"DIV",{class:!0});var sm=n(so);g(Jr.$$.fragment,sm),Hb=d(sm),Zr=a(sm,"P",{});var im=n(Zr);Gb=i(im,"A modification of Keras\u2019s default "),al=a(im,"CODE",{});var y$=n(al);Rb=i(y$,"train_step"),y$.forEach(t),Yb=i(im,` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),im.forEach(t),sm.forEach(t),Kb=d(E),io=a(E,"DIV",{class:!0});var lm=n(io);g(Qr.$$.fragment,lm),Jb=d(lm),ea=a(lm,"P",{});var dm=n(ea);Zb=i(dm,"A modification of Keras\u2019s default "),nl=a(dm,"CODE",{});var w$=n(nl);Qb=i(w$,"train_step"),w$.forEach(t),ev=i(dm,` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),dm.forEach(t),lm.forEach(t),E.forEach(t),Rd=d(o),et=a(o,"H2",{class:!0});var cm=n(et);lo=a(cm,"A",{id:!0,class:!0,href:!0});var $$=n(lo);sl=a($$,"SPAN",{});var x$=n(sl);g(ta.$$.fragment,x$),x$.forEach(t),$$.forEach(t),tv=d(cm),il=a(cm,"SPAN",{});var T$=n(il);ov=i(T$,"TFModelUtilsMixin"),T$.forEach(t),cm.forEach(t),Yd=d(o),ne=a(o,"DIV",{class:!0});var Mn=n(ne);g(oa.$$.fragment,Mn),rv=d(Mn),ra=a(Mn,"P",{});var mm=n(ra);av=i(mm,"A few utilities for "),ll=a(mm,"CODE",{});var k$=n(ll);nv=i(k$,"tf.keras.Model"),k$.forEach(t),sv=i(mm,", to be used as a mixin."),mm.forEach(t),iv=d(Mn),co=a(Mn,"DIV",{class:!0});var pm=n(co);g(aa.$$.fragment,pm),lv=d(pm),dl=a(pm,"P",{});var P$=n(dl);dv=i(P$,"Get the number of (optionally, trainable) parameters in the model."),P$.forEach(t),pm.forEach(t),Mn.forEach(t),Kd=d(o),tt=a(o,"H2",{class:!0});var hm=n(tt);mo=a(hm,"A",{id:!0,class:!0,href:!0});var M$=n(mo);cl=a(M$,"SPAN",{});var E$=n(cl);g(na.$$.fragment,E$),E$.forEach(t),M$.forEach(t),cv=d(hm),ml=a(hm,"SPAN",{});var j$=n(ml);mv=i(j$,"FlaxPreTrainedModel"),j$.forEach(t),hm.forEach(t),Jd=d(o),q=a(o,"DIV",{class:!0});var C=n(q);g(sa.$$.fragment,C),pv=d(C),pl=a(C,"P",{});var F$=n(pl);hv=i(F$,"Base class for all models."),F$.forEach(t),fv=d(C),nn=a(C,"P",{});var jy=n(nn);sn=a(jy,"A",{href:!0});var D$=n(sn);uv=i(D$,"FlaxPreTrainedModel"),D$.forEach(t),gv=i(jy,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),jy.forEach(t),_v=d(C),hl=a(C,"P",{});var q$=n(hl);bv=i(q$,"Class attributes (overridden by derived classes):"),q$.forEach(t),vv=d(C),ot=a(C,"UL",{});var En=n(ot);Pe=a(En,"LI",{});var za=n(Pe);fl=a(za,"STRONG",{});var z$=n(fl);yv=i(z$,"config_class"),z$.forEach(t),wv=i(za," ("),ln=a(za,"A",{href:!0});var A$=n(ln);$v=i(A$,"PretrainedConfig"),A$.forEach(t),xv=i(za,") \u2014 A subclass of "),dn=a(za,"A",{href:!0});var C$=n(dn);Tv=i(C$,"PretrainedConfig"),C$.forEach(t),kv=i(za,` to use as configuration class
for this model architecture.`),za.forEach(t),Pv=d(En),po=a(En,"LI",{});var fd=n(po);ul=a(fd,"STRONG",{});var I$=n(ul);Mv=i(I$,"base_model_prefix"),I$.forEach(t),Ev=i(fd," ("),gl=a(fd,"CODE",{});var L$=n(gl);jv=i(L$,"str"),L$.forEach(t),Fv=i(fd,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),fd.forEach(t),Dv=d(En),W=a(En,"LI",{});var me=n(W);_l=a(me,"STRONG",{});var U$=n(_l);qv=i(U$,"main_input_name"),U$.forEach(t),zv=i(me," ("),bl=a(me,"CODE",{});var O$=n(bl);Av=i(O$,"str"),O$.forEach(t),Cv=i(me,") \u2014 The name of the principal input to the model (often "),vl=a(me,"CODE",{});var N$=n(vl);Iv=i(N$,"input_ids"),N$.forEach(t),Lv=i(me,` for NLP
models, `),yl=a(me,"CODE",{});var B$=n(yl);Uv=i(B$,"pixel_values"),B$.forEach(t),Ov=i(me," for vision models and "),wl=a(me,"CODE",{});var S$=n(wl);Nv=i(S$,"input_values"),S$.forEach(t),Bv=i(me," for speech models)."),me.forEach(t),En.forEach(t),Sv=d(C),Me=a(C,"DIV",{class:!0});var jn=n(Me);g(ia.$$.fragment,jn),Xv=d(jn),la=a(jn,"P",{});var fm=n(la);Wv=i(fm,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),$l=a(fm,"CODE",{});var X$=n($l);Vv=i(X$,"repo_path_or_name"),X$.forEach(t),Hv=i(fm,"."),fm.forEach(t),Gv=d(jn),g(ho.$$.fragment,jn),jn.forEach(t),Rv=d(C),V=a(C,"DIV",{class:!0});var Ce=n(V);g(da.$$.fragment,Ce),Yv=d(Ce),xl=a(Ce,"P",{});var W$=n(xl);Kv=i(W$,"Instantiate a pretrained flax model from a pre-trained model configuration."),W$.forEach(t),Jv=d(Ce),ca=a(Ce,"P",{});var um=n(ca);Zv=i(um,"The warning "),Tl=a(um,"EM",{});var V$=n(Tl);Qv=i(V$,"Weights from XXX not initialized from pretrained model"),V$.forEach(t),e1=i(um,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),um.forEach(t),t1=d(Ce),ma=a(Ce,"P",{});var gm=n(ma);o1=i(gm,"The warning "),kl=a(gm,"EM",{});var H$=n(kl);r1=i(H$,"Weights from XXX not used in YYY"),H$.forEach(t),a1=i(gm,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),gm.forEach(t),n1=d(Ce),g(fo.$$.fragment,Ce),Ce.forEach(t),s1=d(C),Ee=a(C,"DIV",{class:!0});var Fn=n(Ee);g(pa.$$.fragment,Fn),i1=d(Fn),ha=a(Fn,"P",{});var _m=n(ha);l1=i(_m,"This is the same as "),Pl=a(_m,"CODE",{});var G$=n(Pl);d1=i(G$,"flax.serialization.from_bytes"),G$.forEach(t),c1=i(_m,`
(https:lax.readthedocs.io/en/latest/_modules/flax/serialization.html#from_bytes) but for a sharded checkpoint.`),_m.forEach(t),m1=d(Fn),Ml=a(Fn,"P",{});var R$=n(Ml);p1=i(R$,`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),R$.forEach(t),Fn.forEach(t),h1=d(C),je=a(C,"DIV",{class:!0});var Dn=n(je);g(fa.$$.fragment,Dn),f1=d(Dn),El=a(Dn,"P",{});var Y$=n(El);u1=i(Y$,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Y$.forEach(t),g1=d(Dn),g(uo.$$.fragment,Dn),Dn.forEach(t),_1=d(C),go=a(C,"DIV",{class:!0});var bm=n(go);g(ua.$$.fragment,bm),b1=d(bm),ga=a(bm,"P",{});var vm=n(ga);v1=i(vm,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),jl=a(vm,"CODE",{});var K$=n(jl);y1=i(K$,"[from_pretrained()](/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),K$.forEach(t),w1=i(vm," class method"),vm.forEach(t),bm.forEach(t),$1=d(C),te=a(C,"DIV",{class:!0});var Po=n(te);g(_a.$$.fragment,Po),x1=d(Po),Y=a(Po,"P",{});var Ie=n(Y);T1=i(Ie,"Cast the floating-point "),Fl=a(Ie,"CODE",{});var J$=n(Fl);k1=i(J$,"params"),J$.forEach(t),P1=i(Ie," to "),Dl=a(Ie,"CODE",{});var Z$=n(Dl);M1=i(Z$,"jax.numpy.bfloat16"),Z$.forEach(t),E1=i(Ie,". This returns a new "),ql=a(Ie,"CODE",{});var Q$=n(ql);j1=i(Q$,"params"),Q$.forEach(t),F1=i(Ie,` tree and does not cast
the `),zl=a(Ie,"CODE",{});var ex=n(zl);D1=i(ex,"params"),ex.forEach(t),q1=i(Ie," in place."),Ie.forEach(t),z1=d(Po),Al=a(Po,"P",{});var tx=n(Al);A1=i(tx,`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),tx.forEach(t),C1=d(Po),g(_o.$$.fragment,Po),Po.forEach(t),I1=d(C),oe=a(C,"DIV",{class:!0});var Mo=n(oe);g(ba.$$.fragment,Mo),L1=d(Mo),K=a(Mo,"P",{});var Le=n(K);U1=i(Le,"Cast the floating-point "),Cl=a(Le,"CODE",{});var ox=n(Cl);O1=i(ox,"parmas"),ox.forEach(t),N1=i(Le," to "),Il=a(Le,"CODE",{});var rx=n(Il);B1=i(rx,"jax.numpy.float16"),rx.forEach(t),S1=i(Le,". This returns a new "),Ll=a(Le,"CODE",{});var ax=n(Ll);X1=i(ax,"params"),ax.forEach(t),W1=i(Le,` tree and does not cast the
`),Ul=a(Le,"CODE",{});var nx=n(Ul);V1=i(nx,"params"),nx.forEach(t),H1=i(Le," in place."),Le.forEach(t),G1=d(Mo),Ol=a(Mo,"P",{});var sx=n(Ol);R1=i(sx,`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),sx.forEach(t),Y1=d(Mo),g(bo.$$.fragment,Mo),Mo.forEach(t),K1=d(C),Fe=a(C,"DIV",{class:!0});var qn=n(Fe);g(va.$$.fragment,qn),J1=d(qn),J=a(qn,"P",{});var Ue=n(J);Z1=i(Ue,"Cast the floating-point "),Nl=a(Ue,"CODE",{});var ix=n(Nl);Q1=i(ix,"parmas"),ix.forEach(t),ey=i(Ue," to "),Bl=a(Ue,"CODE",{});var lx=n(Bl);ty=i(lx,"jax.numpy.float32"),lx.forEach(t),oy=i(Ue,`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Sl=a(Ue,"CODE",{});var dx=n(Sl);ry=i(dx,"params"),dx.forEach(t),ay=i(Ue," tree and does not cast the "),Xl=a(Ue,"CODE",{});var cx=n(Xl);ny=i(cx,"params"),cx.forEach(t),sy=i(Ue," in place."),Ue.forEach(t),iy=d(qn),g(vo.$$.fragment,qn),qn.forEach(t),C.forEach(t),Zd=d(o),rt=a(o,"H2",{class:!0});var ym=n(rt);yo=a(ym,"A",{id:!0,class:!0,href:!0});var mx=n(yo);Wl=a(mx,"SPAN",{});var px=n(Wl);g(ya.$$.fragment,px),px.forEach(t),mx.forEach(t),ly=d(ym),Vl=a(ym,"SPAN",{});var hx=n(Vl);dy=i(hx,"Pushing to the Hub"),hx.forEach(t),ym.forEach(t),Qd=d(o),se=a(o,"DIV",{class:!0});var zn=n(se);g(wa.$$.fragment,zn),cy=d(zn),Hl=a(zn,"P",{});var fx=n(Hl);my=i(fx,"A Mixin containing the functionality to push a model or tokenizer to the hub."),fx.forEach(t),py=d(zn),De=a(zn,"DIV",{class:!0});var An=n(De);g($a.$$.fragment,An),hy=d(An),xa=a(An,"P",{});var wm=n(xa);fy=i(wm,`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Gl=a(wm,"CODE",{});var ux=n(Gl);uy=i(ux,"repo_path_or_name"),ux.forEach(t),gy=i(wm,"."),wm.forEach(t),_y=d(An),g(wo.$$.fragment,An),An.forEach(t),zn.forEach(t),ec=d(o),at=a(o,"H2",{class:!0});var $m=n(at);$o=a($m,"A",{id:!0,class:!0,href:!0});var gx=n($o);Rl=a(gx,"SPAN",{});var _x=n(Rl);g(Ta.$$.fragment,_x),_x.forEach(t),gx.forEach(t),by=d($m),Yl=a($m,"SPAN",{});var bx=n(Yl);vy=i(bx,"Sharded checkpoints"),bx.forEach(t),$m.forEach(t),tc=d(o),ie=a(o,"DIV",{class:!0});var Cn=n(ie);g(ka.$$.fragment,Cn),yy=d(Cn),Pa=a(Cn,"P",{});var xm=n(Pa);wy=i(xm,`This is the same as
`),Ma=a(xm,"A",{href:!0,rel:!0});var vx=n(Ma);Kl=a(vx,"CODE",{});var yx=n(Kl);$y=i(yx,"torch.nn.Module.load_state_dict"),yx.forEach(t),vx.forEach(t),xy=i(xm,`
but for a sharded checkpoint.`),xm.forEach(t),Ty=d(Cn),Jl=a(Cn,"P",{});var wx=n(Jl);ky=i(wx,`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),wx.forEach(t),Cn.forEach(t),this.h()},h(){m(p,"name","hf:doc:metadata"),m(p,"content",JSON.stringify(Xx)),m(f,"id","models"),m(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(f,"href","#models"),m($,"class","relative group"),m(Aa,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel"),m(Ca,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.TFPreTrainedModel"),m(Ia,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel"),m(La,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel"),m(Ua,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.TFPreTrainedModel"),m(Oa,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin"),m(Na,"href","/docs/transformers/pr_18131/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin"),m(Ba,"href","/docs/transformers/pr_18131/en/main_classes/text_generation#transformers.generation_tf_utils.TFGenerationMixin"),m(Sa,"href","/docs/transformers/pr_18131/en/main_classes/text_generation#transformers.generation_flax_utils.FlaxGenerationMixin"),m(st,"id","transformers.PreTrainedModel"),m(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(st,"href","#transformers.PreTrainedModel"),m(Xe,"class","relative group"),m(Wa,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel"),m(Va,"href","/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig"),m(Ha,"href","/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig"),m(Ga,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel"),m(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ya,"id","from_pretrained-torch-dtype"),m(Tt,"id","large-model-loading"),m(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Tt,"href","#large-model-loading"),m(He,"class","relative group"),m(Ka,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.PreTrainedModel.from_pretrained"),m(er,"href","https://huggingface.co/docs/accelerate/big_modeling"),m(er,"rel","nofollow"),m(jt,"id","model-instantiation-dtype"),m(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(jt,"href","#model-instantiation-dtype"),m(Ge,"class","relative group"),m(Dt,"id","transformers.modeling_utils.ModuleUtilsMixin"),m(Dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Dt,"href","#transformers.modeling_utils.ModuleUtilsMixin"),m(Re,"class","relative group"),m($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gr,"href","https://arxiv.org/pdf/2001.08361.pdf"),m(gr,"rel","nofollow"),m(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Qa,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks"),m(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ot,"id","transformers.TFPreTrainedModel"),m(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ot,"href","#transformers.TFPreTrainedModel"),m(Ze,"class","relative group"),m(tn,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.TFPreTrainedModel"),m(on,"href","/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig"),m(rn,"href","/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig"),m(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Or,"href","https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),m(Or,"rel","nofollow"),m(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(an,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained"),m(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lo,"id","transformers.modeling_tf_utils.TFModelUtilsMixin"),m(lo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(lo,"href","#transformers.modeling_tf_utils.TFModelUtilsMixin"),m(et,"class","relative group"),m(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mo,"id","transformers.FlaxPreTrainedModel"),m(mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(mo,"href","#transformers.FlaxPreTrainedModel"),m(tt,"class","relative group"),m(sn,"href","/docs/transformers/pr_18131/en/main_classes/model#transformers.FlaxPreTrainedModel"),m(ln,"href","/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig"),m(dn,"href","/docs/transformers/pr_18131/en/main_classes/configuration#transformers.PretrainedConfig"),m(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yo,"id","transformers.utils.PushToHubMixin"),m(yo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(yo,"href","#transformers.utils.PushToHubMixin"),m(rt,"class","relative group"),m(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($o,"id","transformers.modeling_utils.load_sharded_checkpoint"),m($o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m($o,"href","#transformers.modeling_utils.load_sharded_checkpoint"),m(at,"class","relative group"),m(Ma,"href","https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=load_state_dict#torch.nn.Module.load_state_dict"),m(Ma,"rel","nofollow"),m(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,h){e(document.head,p),w(o,T,h),w(o,$,h),e($,f),e(f,k),_(c,k,null),e($,x),e($,ae),e(ae,Tm),w(o,gd,h),w(o,Z,h),e(Z,km),e(Z,Aa),e(Aa,Pm),e(Z,Mm),e(Z,Ca),e(Ca,Em),e(Z,jm),e(Z,Ia),e(Ia,Fm),e(Z,Dm),w(o,_d,h),w(o,Se,h),e(Se,La),e(La,qm),e(Se,zm),e(Se,Ua),e(Ua,Am),e(Se,Cm),w(o,bd,h),w(o,nt,h),e(nt,In),e(In,Im),e(nt,Lm),e(nt,Ln),e(Ln,Um),w(o,vd,h),w(o,O,h),e(O,Om),e(O,Oa),e(Oa,Nm),e(O,Bm),e(O,Un),e(Un,Sm),e(O,Xm),e(O,Na),e(Na,Wm),e(O,Vm),e(O,Ba),e(Ba,Hm),e(O,Gm),e(O,Sa),e(Sa,Rm),e(O,Ym),w(o,yd,h),w(o,Xe,h),e(Xe,st),e(st,On),_(Eo,On,null),e(Xe,Km),e(Xe,Nn),e(Nn,Jm),w(o,wd,h),w(o,j,h),_(jo,j,null),e(j,Zm),e(j,Bn),e(Bn,Qm),e(j,ep),e(j,Xa),e(Xa,Wa),e(Wa,tp),e(Xa,op),e(j,rp),e(j,Fo),e(Fo,Sn),e(Sn,ap),e(Fo,np),e(Fo,Xn),e(Xn,sp),e(j,ip),e(j,Wn),e(Wn,lp),e(j,dp),e(j,H),e(H,Vn),e(Vn,pe),e(pe,Hn),e(Hn,cp),e(pe,mp),e(pe,Va),e(Va,pp),e(pe,hp),e(pe,Ha),e(Ha,fp),e(pe,up),e(H,gp),e(H,Do),e(Do,he),e(he,Gn),e(Gn,_p),e(he,bp),e(he,Rn),e(Rn,vp),e(he,yp),e(he,Yn),e(Yn,wp),e(he,$p),e(Do,xp),e(Do,We),e(We,it),e(it,Kn),e(Kn,Tp),e(it,kp),e(it,Ga),e(Ga,Pp),e(it,Mp),e(We,Ep),e(We,lt),e(lt,Jn),e(Jn,jp),e(lt,Fp),e(lt,Zn),e(Zn,Dp),e(lt,qp),e(We,zp),e(We,dt),e(dt,Qn),e(Qn,Ap),e(dt,Cp),e(dt,es),e(es,Ip),e(dt,Lp),e(H,Up),e(H,ts),e(ts,ct),e(ct,os),e(os,Op),e(ct,Np),e(ct,rs),e(rs,Bp),e(ct,Sp),e(H,Xp),e(H,as),e(as,mt),e(mt,ns),e(ns,Wp),e(mt,Vp),e(mt,ss),e(ss,Hp),e(mt,Gp),e(H,Rp),e(H,is),e(is,S),e(S,ls),e(ls,Yp),e(S,Kp),e(S,ds),e(ds,Jp),e(S,Zp),e(S,cs),e(cs,Qp),e(S,eh),e(S,ms),e(ms,th),e(S,oh),e(S,ps),e(ps,rh),e(S,ah),e(j,nh),e(j,fe),_(qo,fe,null),e(fe,sh),e(fe,zo),e(zo,ih),e(zo,hs),e(hs,lh),e(zo,dh),e(fe,ch),_(pt,fe,null),e(j,mh),e(j,z),_(Ao,z,null),e(z,ph),e(z,fs),e(fs,hh),e(z,fh),e(z,Ve),e(Ve,uh),e(Ve,us),e(us,gh),e(Ve,_h),e(Ve,gs),e(gs,bh),e(Ve,vh),e(z,yh),e(z,Co),e(Co,wh),e(Co,_s),e(_s,$h),e(Co,xh),e(z,Th),e(z,Io),e(Io,kh),e(Io,bs),e(bs,Ph),e(Io,Mh),e(z,Eh),_(ht,z,null),e(z,jh),_(ft,z,null),e(z,Fh),_(ut,z,null),e(z,Dh),e(z,vs),e(vs,Ra),e(Ra,ys),e(ys,qh),e(Ra,zh),e(z,Ah),e(z,ws),e(ws,Ch),e(z,Ih),e(z,$s),e($s,Lh),e(z,Uh),e(z,G),e(G,xs),e(xs,Oh),e(G,Nh),e(G,Ts),e(Ts,Bh),e(G,Sh),e(G,ks),e(ks,Xh),e(G,Wh),e(G,Ps),e(Ps,Vh),e(G,Hh),e(G,Ms),e(Ms,Gh),e(z,Rh),e(z,Es),e(Es,Yh),e(j,Kh),e(j,gt),_(Lo,gt,null),e(gt,Jh),e(gt,js),e(js,Zh),e(j,Qh),e(j,_t),_(Uo,_t,null),e(_t,ef),e(_t,Fs),e(Fs,tf),e(j,of),e(j,ue),_(Oo,ue,null),e(ue,rf),e(ue,Ds),e(Ds,af),e(ue,nf),e(ue,qs),e(qs,sf),e(j,lf),e(j,ge),_(No,ge,null),e(ge,df),e(ge,zs),e(zs,cf),e(ge,mf),e(ge,As),e(As,pf),e(j,hf),e(j,bt),_(Bo,bt,null),e(bt,ff),e(bt,Cs),e(Cs,uf),e(j,gf),e(j,vt),_(So,vt,null),e(vt,_f),e(vt,Is),e(Is,bf),e(j,vf),e(j,yt),_(Xo,yt,null),e(yt,yf),e(yt,Ls),e(Ls,wf),e(j,$f),e(j,_e),_(Wo,_e,null),e(_e,xf),e(_e,Us),e(Us,Tf),e(_e,kf),_(wt,_e,null),e(j,Pf),e(j,be),_(Vo,be,null),e(be,Mf),e(be,Ho),e(Ho,Ef),e(Ho,Os),e(Os,jf),e(Ho,Ff),e(be,Df),e(be,Go),e(Go,qf),e(Go,Ns),e(Ns,zf),e(Go,Af),e(j,Cf),e(j,$t),_(Ro,$t,null),e($t,If),e($t,Yo),e(Yo,Lf),e(Yo,Bs),e(Bs,Uf),e(Yo,Of),e(j,Nf),e(j,xt),_(Ko,xt,null),e(xt,Bf),e(xt,Ss),e(Ss,Sf),e(j,Xf),e(j,ve),_(Jo,ve,null),e(ve,Wf),e(ve,Xs),e(Xs,Vf),e(ve,Hf),e(ve,Zo),e(Zo,Gf),e(Zo,Ws),e(Ws,Rf),e(Zo,Yf),w(o,$d,h),w(o,Ya,h),w(o,xd,h),w(o,He,h),e(He,Tt),e(Tt,Vs),_(Qo,Vs,null),e(He,Kf),e(He,Hs),e(Hs,Jf),w(o,Td,h),w(o,ye,h),e(ye,Zf),e(ye,Ka),e(Ka,Qf),e(ye,eu),e(ye,er),e(er,tu),e(ye,ou),w(o,kd,h),w(o,kt,h),e(kt,ru),e(kt,Gs),e(Gs,au),e(kt,nu),w(o,Pd,h),_(tr,o,h),w(o,Md,h),w(o,Pt,h),e(Pt,su),e(Pt,Rs),e(Rs,iu),e(Pt,lu),w(o,Ed,h),w(o,Q,h),e(Q,du),e(Q,Ys),e(Ys,cu),e(Q,mu),e(Q,Ks),e(Ks,pu),e(Q,hu),e(Q,Js),e(Js,fu),e(Q,uu),w(o,jd,h),_(or,o,h),w(o,Fd,h),w(o,Mt,h),e(Mt,gu),e(Mt,Zs),e(Zs,_u),e(Mt,bu),w(o,Dd,h),_(rr,o,h),w(o,qd,h),_(ar,o,h),w(o,zd,h),w(o,Ja,h),e(Ja,vu),w(o,Ad,h),_(nr,o,h),w(o,Cd,h),w(o,Et,h),e(Et,yu),e(Et,Qs),e(Qs,wu),e(Et,$u),w(o,Id,h),w(o,Ge,h),e(Ge,jt),e(jt,ei),_(sr,ei,null),e(Ge,xu),e(Ge,ti),e(ti,Tu),w(o,Ld,h),w(o,ee,h),e(ee,ku),e(ee,oi),e(oi,Pu),e(ee,Mu),e(ee,ri),e(ri,Eu),e(ee,ju),e(ee,ai),e(ai,Fu),e(ee,Du),w(o,Ud,h),_(ir,o,h),w(o,Od,h),w(o,we,h),e(we,qu),e(we,ni),e(ni,zu),e(we,Au),e(we,si),e(si,Cu),e(we,Iu),w(o,Nd,h),_(lr,o,h),w(o,Bd,h),w(o,Ft,h),e(Ft,Lu),e(Ft,ii),e(ii,Uu),e(Ft,Ou),w(o,Sd,h),_(dr,o,h),w(o,Xd,h),w(o,Za,h),e(Za,Nu),w(o,Wd,h),w(o,Re,h),e(Re,Dt),e(Dt,li),_(cr,li,null),e(Re,Bu),e(Re,di),e(di,Su),w(o,Vd,h),w(o,I,h),_(mr,I,null),e(I,Xu),e(I,pr),e(pr,Wu),e(pr,ci),e(ci,Vu),e(pr,Hu),e(I,Gu),e(I,$e),_(hr,$e,null),e($e,Ru),e($e,mi),e(mi,Yu),e($e,Ku),e($e,Ye),e(Ye,Ju),e(Ye,pi),e(pi,Zu),e(Ye,Qu),e(Ye,hi),e(hi,eg),e(Ye,tg),e(I,og),e(I,qt),_(fr,qt,null),e(qt,rg),e(qt,fi),e(fi,ag),e(I,ng),e(I,zt),_(ur,zt,null),e(zt,sg),e(zt,Ke),e(Ke,ig),e(Ke,ui),e(ui,lg),e(Ke,dg),e(Ke,gr),e(gr,cg),e(Ke,mg),e(I,pg),e(I,At),_(_r,At,null),e(At,hg),e(At,gi),e(gi,fg),e(I,ug),e(I,Ct),_(br,Ct,null),e(Ct,gg),e(Ct,_i),e(_i,_g),e(I,bg),e(I,It),_(vr,It,null),e(It,vg),e(It,bi),e(bi,yg),e(I,wg),e(I,Lt),_(yr,Lt,null),e(Lt,$g),e(Lt,vi),e(vi,xg),e(I,Tg),e(I,Ut),_(wr,Ut,null),e(Ut,kg),e(Ut,Je),e(Je,Pg),e(Je,yi),e(yi,Mg),e(Je,Eg),e(Je,Qa),e(Qa,jg),e(Je,Fg),w(o,Hd,h),w(o,Ze,h),e(Ze,Ot),e(Ot,wi),_($r,wi,null),e(Ze,Dg),e(Ze,$i),e($i,qg),w(o,Gd,h),w(o,M,h),_(xr,M,null),e(M,zg),e(M,xi),e(xi,Ag),e(M,Cg),e(M,en),e(en,tn),e(tn,Ig),e(en,Lg),e(M,Ug),e(M,Tr),e(Tr,Ti),e(Ti,Og),e(Tr,Ng),e(Tr,ki),e(ki,Bg),e(M,Sg),e(M,Pi),e(Pi,Xg),e(M,Wg),e(M,Qe),e(Qe,xe),e(xe,Mi),e(Mi,Vg),e(xe,Hg),e(xe,on),e(on,Gg),e(xe,Rg),e(xe,rn),e(rn,Yg),e(xe,Kg),e(Qe,Jg),e(Qe,Nt),e(Nt,Ei),e(Ei,Zg),e(Nt,Qg),e(Nt,ji),e(ji,e_),e(Nt,t_),e(Qe,o_),e(Qe,X),e(X,Fi),e(Fi,r_),e(X,a_),e(X,Di),e(Di,n_),e(X,s_),e(X,qi),e(qi,i_),e(X,l_),e(X,zi),e(zi,d_),e(X,c_),e(X,Ai),e(Ai,m_),e(X,p_),e(M,h_),e(M,Te),_(kr,Te,null),e(Te,f_),e(Te,Pr),e(Pr,u_),e(Pr,Ci),e(Ci,g_),e(Pr,__),e(Te,b_),_(Bt,Te,null),e(M,v_),e(M,St),_(Mr,St,null),e(St,y_),e(St,Ii),e(Ii,w_),e(M,$_),e(M,N),_(Er,N,null),e(N,x_),e(N,Li),e(Li,T_),e(N,k_),e(N,jr),e(jr,P_),e(jr,Ui),e(Ui,M_),e(jr,E_),e(N,j_),e(N,Fr),e(Fr,F_),e(Fr,Oi),e(Oi,D_),e(Fr,q_),e(N,z_),_(Xt,N,null),e(N,A_),_(Wt,N,null),e(M,C_),e(M,Vt),_(Dr,Vt,null),e(Vt,I_),e(Vt,Ni),e(Ni,L_),e(M,U_),e(M,Ht),_(qr,Ht,null),e(Ht,O_),e(Ht,Bi),e(Bi,N_),e(M,B_),e(M,Gt),_(zr,Gt,null),e(Gt,S_),e(Gt,Si),e(Si,X_),e(M,W_),e(M,Rt),_(Ar,Rt,null),e(Rt,V_),e(Rt,Xi),e(Xi,H_),e(M,G_),e(M,Yt),_(Cr,Yt,null),e(Yt,R_),e(Yt,Wi),e(Wi,Y_),e(M,K_),e(M,Kt),_(Ir,Kt,null),e(Kt,J_),e(Kt,Vi),e(Vi,Z_),e(M,Q_),e(M,Jt),_(Lr,Jt,null),e(Jt,eb),e(Jt,Hi),e(Hi,tb),e(M,ob),e(M,Zt),_(Ur,Zt,null),e(Zt,rb),e(Zt,R),e(R,ab),e(R,Or),e(Or,nb),e(R,sb),e(R,Gi),e(Gi,ib),e(R,lb),e(R,Ri),e(Ri,db),e(R,cb),e(R,Yi),e(Yi,mb),e(R,pb),e(M,hb),e(M,Qt),_(Nr,Qt,null),e(Qt,fb),e(Qt,Ki),e(Ki,ub),e(M,gb),e(M,ke),_(Br,ke,null),e(ke,_b),e(ke,Sr),e(Sr,bb),e(Sr,Ji),e(Ji,vb),e(Sr,yb),e(ke,wb),e(ke,Xr),e(Xr,$b),e(Xr,Zi),e(Zi,xb),e(Xr,Tb),e(M,kb),e(M,eo),_(Wr,eo,null),e(eo,Pb),e(eo,Vr),e(Vr,Mb),e(Vr,an),e(an,Eb),e(Vr,jb),e(M,Fb),e(M,to),_(Hr,to,null),e(to,Db),e(to,Qi),e(Qi,qb),e(M,zb),e(M,oo),_(Gr,oo,null),e(oo,Ab),e(oo,el),e(el,Cb),e(M,Ib),e(M,ro),_(Rr,ro,null),e(ro,Lb),e(ro,tl),e(tl,Ub),e(M,Ob),e(M,ao),_(Yr,ao,null),e(ao,Nb),e(ao,ol),e(ol,Bb),e(M,Sb),e(M,no),_(Kr,no,null),e(no,Xb),e(no,rl),e(rl,Wb),e(M,Vb),e(M,so),_(Jr,so,null),e(so,Hb),e(so,Zr),e(Zr,Gb),e(Zr,al),e(al,Rb),e(Zr,Yb),e(M,Kb),e(M,io),_(Qr,io,null),e(io,Jb),e(io,ea),e(ea,Zb),e(ea,nl),e(nl,Qb),e(ea,ev),w(o,Rd,h),w(o,et,h),e(et,lo),e(lo,sl),_(ta,sl,null),e(et,tv),e(et,il),e(il,ov),w(o,Yd,h),w(o,ne,h),_(oa,ne,null),e(ne,rv),e(ne,ra),e(ra,av),e(ra,ll),e(ll,nv),e(ra,sv),e(ne,iv),e(ne,co),_(aa,co,null),e(co,lv),e(co,dl),e(dl,dv),w(o,Kd,h),w(o,tt,h),e(tt,mo),e(mo,cl),_(na,cl,null),e(tt,cv),e(tt,ml),e(ml,mv),w(o,Jd,h),w(o,q,h),_(sa,q,null),e(q,pv),e(q,pl),e(pl,hv),e(q,fv),e(q,nn),e(nn,sn),e(sn,uv),e(nn,gv),e(q,_v),e(q,hl),e(hl,bv),e(q,vv),e(q,ot),e(ot,Pe),e(Pe,fl),e(fl,yv),e(Pe,wv),e(Pe,ln),e(ln,$v),e(Pe,xv),e(Pe,dn),e(dn,Tv),e(Pe,kv),e(ot,Pv),e(ot,po),e(po,ul),e(ul,Mv),e(po,Ev),e(po,gl),e(gl,jv),e(po,Fv),e(ot,Dv),e(ot,W),e(W,_l),e(_l,qv),e(W,zv),e(W,bl),e(bl,Av),e(W,Cv),e(W,vl),e(vl,Iv),e(W,Lv),e(W,yl),e(yl,Uv),e(W,Ov),e(W,wl),e(wl,Nv),e(W,Bv),e(q,Sv),e(q,Me),_(ia,Me,null),e(Me,Xv),e(Me,la),e(la,Wv),e(la,$l),e($l,Vv),e(la,Hv),e(Me,Gv),_(ho,Me,null),e(q,Rv),e(q,V),_(da,V,null),e(V,Yv),e(V,xl),e(xl,Kv),e(V,Jv),e(V,ca),e(ca,Zv),e(ca,Tl),e(Tl,Qv),e(ca,e1),e(V,t1),e(V,ma),e(ma,o1),e(ma,kl),e(kl,r1),e(ma,a1),e(V,n1),_(fo,V,null),e(q,s1),e(q,Ee),_(pa,Ee,null),e(Ee,i1),e(Ee,ha),e(ha,l1),e(ha,Pl),e(Pl,d1),e(ha,c1),e(Ee,m1),e(Ee,Ml),e(Ml,p1),e(q,h1),e(q,je),_(fa,je,null),e(je,f1),e(je,El),e(El,u1),e(je,g1),_(uo,je,null),e(q,_1),e(q,go),_(ua,go,null),e(go,b1),e(go,ga),e(ga,v1),e(ga,jl),e(jl,y1),e(ga,w1),e(q,$1),e(q,te),_(_a,te,null),e(te,x1),e(te,Y),e(Y,T1),e(Y,Fl),e(Fl,k1),e(Y,P1),e(Y,Dl),e(Dl,M1),e(Y,E1),e(Y,ql),e(ql,j1),e(Y,F1),e(Y,zl),e(zl,D1),e(Y,q1),e(te,z1),e(te,Al),e(Al,A1),e(te,C1),_(_o,te,null),e(q,I1),e(q,oe),_(ba,oe,null),e(oe,L1),e(oe,K),e(K,U1),e(K,Cl),e(Cl,O1),e(K,N1),e(K,Il),e(Il,B1),e(K,S1),e(K,Ll),e(Ll,X1),e(K,W1),e(K,Ul),e(Ul,V1),e(K,H1),e(oe,G1),e(oe,Ol),e(Ol,R1),e(oe,Y1),_(bo,oe,null),e(q,K1),e(q,Fe),_(va,Fe,null),e(Fe,J1),e(Fe,J),e(J,Z1),e(J,Nl),e(Nl,Q1),e(J,ey),e(J,Bl),e(Bl,ty),e(J,oy),e(J,Sl),e(Sl,ry),e(J,ay),e(J,Xl),e(Xl,ny),e(J,sy),e(Fe,iy),_(vo,Fe,null),w(o,Zd,h),w(o,rt,h),e(rt,yo),e(yo,Wl),_(ya,Wl,null),e(rt,ly),e(rt,Vl),e(Vl,dy),w(o,Qd,h),w(o,se,h),_(wa,se,null),e(se,cy),e(se,Hl),e(Hl,my),e(se,py),e(se,De),_($a,De,null),e(De,hy),e(De,xa),e(xa,fy),e(xa,Gl),e(Gl,uy),e(xa,gy),e(De,_y),_(wo,De,null),w(o,ec,h),w(o,at,h),e(at,$o),e($o,Rl),_(Ta,Rl,null),e(at,by),e(at,Yl),e(Yl,vy),w(o,tc,h),w(o,ie,h),_(ka,ie,null),e(ie,yy),e(ie,Pa),e(Pa,wy),e(Pa,Ma),e(Ma,Kl),e(Kl,$y),e(Pa,xy),e(ie,Ty),e(ie,Jl),e(Jl,ky),oc=!0},p(o,[h]){const Ea={};h&2&&(Ea.$$scope={dirty:h,ctx:o}),pt.$set(Ea);const Zl={};h&2&&(Zl.$$scope={dirty:h,ctx:o}),ht.$set(Zl);const Ql={};h&2&&(Ql.$$scope={dirty:h,ctx:o}),ft.$set(Ql);const ed={};h&2&&(ed.$$scope={dirty:h,ctx:o}),ut.$set(ed);const le={};h&2&&(le.$$scope={dirty:h,ctx:o}),wt.$set(le);const td={};h&2&&(td.$$scope={dirty:h,ctx:o}),Bt.$set(td);const od={};h&2&&(od.$$scope={dirty:h,ctx:o}),Xt.$set(od);const rd={};h&2&&(rd.$$scope={dirty:h,ctx:o}),Wt.$set(rd);const xo={};h&2&&(xo.$$scope={dirty:h,ctx:o}),ho.$set(xo);const ad={};h&2&&(ad.$$scope={dirty:h,ctx:o}),fo.$set(ad);const nd={};h&2&&(nd.$$scope={dirty:h,ctx:o}),uo.$set(nd);const ja={};h&2&&(ja.$$scope={dirty:h,ctx:o}),_o.$set(ja);const sd={};h&2&&(sd.$$scope={dirty:h,ctx:o}),bo.$set(sd);const id={};h&2&&(id.$$scope={dirty:h,ctx:o}),vo.$set(id);const B={};h&2&&(B.$$scope={dirty:h,ctx:o}),wo.$set(B)},i(o){oc||(b(c.$$.fragment,o),b(Eo.$$.fragment,o),b(jo.$$.fragment,o),b(qo.$$.fragment,o),b(pt.$$.fragment,o),b(Ao.$$.fragment,o),b(ht.$$.fragment,o),b(ft.$$.fragment,o),b(ut.$$.fragment,o),b(Lo.$$.fragment,o),b(Uo.$$.fragment,o),b(Oo.$$.fragment,o),b(No.$$.fragment,o),b(Bo.$$.fragment,o),b(So.$$.fragment,o),b(Xo.$$.fragment,o),b(Wo.$$.fragment,o),b(wt.$$.fragment,o),b(Vo.$$.fragment,o),b(Ro.$$.fragment,o),b(Ko.$$.fragment,o),b(Jo.$$.fragment,o),b(Qo.$$.fragment,o),b(tr.$$.fragment,o),b(or.$$.fragment,o),b(rr.$$.fragment,o),b(ar.$$.fragment,o),b(nr.$$.fragment,o),b(sr.$$.fragment,o),b(ir.$$.fragment,o),b(lr.$$.fragment,o),b(dr.$$.fragment,o),b(cr.$$.fragment,o),b(mr.$$.fragment,o),b(hr.$$.fragment,o),b(fr.$$.fragment,o),b(ur.$$.fragment,o),b(_r.$$.fragment,o),b(br.$$.fragment,o),b(vr.$$.fragment,o),b(yr.$$.fragment,o),b(wr.$$.fragment,o),b($r.$$.fragment,o),b(xr.$$.fragment,o),b(kr.$$.fragment,o),b(Bt.$$.fragment,o),b(Mr.$$.fragment,o),b(Er.$$.fragment,o),b(Xt.$$.fragment,o),b(Wt.$$.fragment,o),b(Dr.$$.fragment,o),b(qr.$$.fragment,o),b(zr.$$.fragment,o),b(Ar.$$.fragment,o),b(Cr.$$.fragment,o),b(Ir.$$.fragment,o),b(Lr.$$.fragment,o),b(Ur.$$.fragment,o),b(Nr.$$.fragment,o),b(Br.$$.fragment,o),b(Wr.$$.fragment,o),b(Hr.$$.fragment,o),b(Gr.$$.fragment,o),b(Rr.$$.fragment,o),b(Yr.$$.fragment,o),b(Kr.$$.fragment,o),b(Jr.$$.fragment,o),b(Qr.$$.fragment,o),b(ta.$$.fragment,o),b(oa.$$.fragment,o),b(aa.$$.fragment,o),b(na.$$.fragment,o),b(sa.$$.fragment,o),b(ia.$$.fragment,o),b(ho.$$.fragment,o),b(da.$$.fragment,o),b(fo.$$.fragment,o),b(pa.$$.fragment,o),b(fa.$$.fragment,o),b(uo.$$.fragment,o),b(ua.$$.fragment,o),b(_a.$$.fragment,o),b(_o.$$.fragment,o),b(ba.$$.fragment,o),b(bo.$$.fragment,o),b(va.$$.fragment,o),b(vo.$$.fragment,o),b(ya.$$.fragment,o),b(wa.$$.fragment,o),b($a.$$.fragment,o),b(wo.$$.fragment,o),b(Ta.$$.fragment,o),b(ka.$$.fragment,o),oc=!0)},o(o){v(c.$$.fragment,o),v(Eo.$$.fragment,o),v(jo.$$.fragment,o),v(qo.$$.fragment,o),v(pt.$$.fragment,o),v(Ao.$$.fragment,o),v(ht.$$.fragment,o),v(ft.$$.fragment,o),v(ut.$$.fragment,o),v(Lo.$$.fragment,o),v(Uo.$$.fragment,o),v(Oo.$$.fragment,o),v(No.$$.fragment,o),v(Bo.$$.fragment,o),v(So.$$.fragment,o),v(Xo.$$.fragment,o),v(Wo.$$.fragment,o),v(wt.$$.fragment,o),v(Vo.$$.fragment,o),v(Ro.$$.fragment,o),v(Ko.$$.fragment,o),v(Jo.$$.fragment,o),v(Qo.$$.fragment,o),v(tr.$$.fragment,o),v(or.$$.fragment,o),v(rr.$$.fragment,o),v(ar.$$.fragment,o),v(nr.$$.fragment,o),v(sr.$$.fragment,o),v(ir.$$.fragment,o),v(lr.$$.fragment,o),v(dr.$$.fragment,o),v(cr.$$.fragment,o),v(mr.$$.fragment,o),v(hr.$$.fragment,o),v(fr.$$.fragment,o),v(ur.$$.fragment,o),v(_r.$$.fragment,o),v(br.$$.fragment,o),v(vr.$$.fragment,o),v(yr.$$.fragment,o),v(wr.$$.fragment,o),v($r.$$.fragment,o),v(xr.$$.fragment,o),v(kr.$$.fragment,o),v(Bt.$$.fragment,o),v(Mr.$$.fragment,o),v(Er.$$.fragment,o),v(Xt.$$.fragment,o),v(Wt.$$.fragment,o),v(Dr.$$.fragment,o),v(qr.$$.fragment,o),v(zr.$$.fragment,o),v(Ar.$$.fragment,o),v(Cr.$$.fragment,o),v(Ir.$$.fragment,o),v(Lr.$$.fragment,o),v(Ur.$$.fragment,o),v(Nr.$$.fragment,o),v(Br.$$.fragment,o),v(Wr.$$.fragment,o),v(Hr.$$.fragment,o),v(Gr.$$.fragment,o),v(Rr.$$.fragment,o),v(Yr.$$.fragment,o),v(Kr.$$.fragment,o),v(Jr.$$.fragment,o),v(Qr.$$.fragment,o),v(ta.$$.fragment,o),v(oa.$$.fragment,o),v(aa.$$.fragment,o),v(na.$$.fragment,o),v(sa.$$.fragment,o),v(ia.$$.fragment,o),v(ho.$$.fragment,o),v(da.$$.fragment,o),v(fo.$$.fragment,o),v(pa.$$.fragment,o),v(fa.$$.fragment,o),v(uo.$$.fragment,o),v(ua.$$.fragment,o),v(_a.$$.fragment,o),v(_o.$$.fragment,o),v(ba.$$.fragment,o),v(bo.$$.fragment,o),v(va.$$.fragment,o),v(vo.$$.fragment,o),v(ya.$$.fragment,o),v(wa.$$.fragment,o),v($a.$$.fragment,o),v(wo.$$.fragment,o),v(Ta.$$.fragment,o),v(ka.$$.fragment,o),oc=!1},d(o){t(p),o&&t(T),o&&t($),y(c),o&&t(gd),o&&t(Z),o&&t(_d),o&&t(Se),o&&t(bd),o&&t(nt),o&&t(vd),o&&t(O),o&&t(yd),o&&t(Xe),y(Eo),o&&t(wd),o&&t(j),y(jo),y(qo),y(pt),y(Ao),y(ht),y(ft),y(ut),y(Lo),y(Uo),y(Oo),y(No),y(Bo),y(So),y(Xo),y(Wo),y(wt),y(Vo),y(Ro),y(Ko),y(Jo),o&&t($d),o&&t(Ya),o&&t(xd),o&&t(He),y(Qo),o&&t(Td),o&&t(ye),o&&t(kd),o&&t(kt),o&&t(Pd),y(tr,o),o&&t(Md),o&&t(Pt),o&&t(Ed),o&&t(Q),o&&t(jd),y(or,o),o&&t(Fd),o&&t(Mt),o&&t(Dd),y(rr,o),o&&t(qd),y(ar,o),o&&t(zd),o&&t(Ja),o&&t(Ad),y(nr,o),o&&t(Cd),o&&t(Et),o&&t(Id),o&&t(Ge),y(sr),o&&t(Ld),o&&t(ee),o&&t(Ud),y(ir,o),o&&t(Od),o&&t(we),o&&t(Nd),y(lr,o),o&&t(Bd),o&&t(Ft),o&&t(Sd),y(dr,o),o&&t(Xd),o&&t(Za),o&&t(Wd),o&&t(Re),y(cr),o&&t(Vd),o&&t(I),y(mr),y(hr),y(fr),y(ur),y(_r),y(br),y(vr),y(yr),y(wr),o&&t(Hd),o&&t(Ze),y($r),o&&t(Gd),o&&t(M),y(xr),y(kr),y(Bt),y(Mr),y(Er),y(Xt),y(Wt),y(Dr),y(qr),y(zr),y(Ar),y(Cr),y(Ir),y(Lr),y(Ur),y(Nr),y(Br),y(Wr),y(Hr),y(Gr),y(Rr),y(Yr),y(Kr),y(Jr),y(Qr),o&&t(Rd),o&&t(et),y(ta),o&&t(Yd),o&&t(ne),y(oa),y(aa),o&&t(Kd),o&&t(tt),y(na),o&&t(Jd),o&&t(q),y(sa),y(ia),y(ho),y(da),y(fo),y(pa),y(fa),y(uo),y(ua),y(_a),y(_o),y(ba),y(bo),y(va),y(vo),o&&t(Zd),o&&t(rt),y(ya),o&&t(Qd),o&&t(se),y(wa),y($a),y(wo),o&&t(ec),o&&t(at),y(Ta),o&&t(tc),o&&t(ie),y(ka)}}}const Xx={local:"models",sections:[{local:"transformers.PreTrainedModel",sections:[{local:"large-model-loading",title:"Large model loading"},{local:"model-instantiation-dtype",title:"Model Instantiation dtype"}],title:"PreTrainedModel"},{local:"transformers.modeling_utils.ModuleUtilsMixin",title:"ModuleUtilsMixin"},{local:"transformers.TFPreTrainedModel",title:"TFPreTrainedModel"},{local:"transformers.modeling_tf_utils.TFModelUtilsMixin",title:"TFModelUtilsMixin"},{local:"transformers.FlaxPreTrainedModel",title:"FlaxPreTrainedModel"},{local:"transformers.utils.PushToHubMixin",title:"Pushing to the Hub"},{local:"transformers.modeling_utils.load_sharded_checkpoint",title:"Sharded checkpoints"}],title:"Models"};function Wx(D){return Px(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jx extends $x{constructor(p){super();xx(this,p,Wx,Sx,Tx,{})}}export{Jx as default,Xx as metadata};
