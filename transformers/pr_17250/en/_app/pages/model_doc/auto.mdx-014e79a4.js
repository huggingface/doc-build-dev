import{S as LAt,i as xAt,s as $At,e as a,k as l,w as F,t as o,M as kAt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as SAt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function RAt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,XA,gf,qe,Xe,ci,An,zA,yn,Ln,QA,fi,xn,WA,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),XA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),zA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),QA=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),WA=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var f$=s(p);m=r(f$,"NewModelConfig"),f$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var m$=s(li);mf=r(m$,"model_type"),m$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var g$=s(ii);di=r(g$,'"new-model"'),g$.forEach(t),XA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),zA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var h$=s(yn);Ln=r(h$,"PreTrainedModel"),h$.forEach(t),QA=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),WA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var p$=s(mi);hf=r(p$,"NewModelConfig"),p$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,XA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,zA),e(qe,yn),e(yn,Ln),e(qe,QA),e(qe,fi),e(fi,xn),e(qe,WA),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,XA,gf,qe,Xe,ci,An,zA,yn,Ln,QA,fi,xn,WA,mi,hf,Ma,ze,Ae,f$,gi,m$,g$,Eo,Ea,h$,pf,p$,Oje,kPe,hi,uf,HZ,HA,Vje,UZ,Xje,SPe,$n,zje,JZ,Qje,Wje,YZ,Hje,Uje,RPe,UA,BPe,u$,Jje,PPe,_f,IPe,pi,bf,KZ,JA,Yje,ZZ,Kje,qPe,Co,YA,Zje,KA,eDe,_$,oDe,rDe,tDe,ZA,aDe,eee,nDe,sDe,lDe,Er,e6,iDe,oee,dDe,cDe,ui,fDe,ree,mDe,gDe,tee,hDe,pDe,uDe,y,vf,aee,_De,bDe,b$,vDe,FDe,TDe,Ff,nee,MDe,EDe,v$,CDe,wDe,ADe,Tf,see,yDe,LDe,F$,xDe,$De,kDe,Mf,lee,SDe,RDe,T$,BDe,PDe,IDe,Ef,iee,qDe,NDe,M$,jDe,DDe,GDe,Cf,dee,ODe,VDe,E$,XDe,zDe,QDe,wf,cee,WDe,HDe,C$,UDe,JDe,YDe,Af,fee,KDe,ZDe,w$,eGe,oGe,rGe,yf,mee,tGe,aGe,A$,nGe,sGe,lGe,Lf,gee,iGe,dGe,y$,cGe,fGe,mGe,xf,hee,gGe,hGe,L$,pGe,uGe,_Ge,$f,pee,bGe,vGe,x$,FGe,TGe,MGe,kf,uee,EGe,CGe,$$,wGe,AGe,yGe,Sf,_ee,LGe,xGe,k$,$Ge,kGe,SGe,Rf,bee,RGe,BGe,S$,PGe,IGe,qGe,Bf,vee,NGe,jGe,R$,DGe,GGe,OGe,Pf,Fee,VGe,XGe,B$,zGe,QGe,WGe,If,Tee,HGe,UGe,P$,JGe,YGe,KGe,qf,Mee,ZGe,eOe,I$,oOe,rOe,tOe,Nf,Eee,aOe,nOe,q$,sOe,lOe,iOe,jf,Cee,dOe,cOe,N$,fOe,mOe,gOe,Df,wee,hOe,pOe,j$,uOe,_Oe,bOe,Gf,Aee,vOe,FOe,D$,TOe,MOe,EOe,Of,yee,COe,wOe,G$,AOe,yOe,LOe,Vf,Lee,xOe,$Oe,O$,kOe,SOe,ROe,Xf,xee,BOe,POe,V$,IOe,qOe,NOe,zf,$ee,jOe,DOe,X$,GOe,OOe,VOe,Qf,kee,XOe,zOe,z$,QOe,WOe,HOe,Wf,See,UOe,JOe,Q$,YOe,KOe,ZOe,Hf,Ree,eVe,oVe,W$,rVe,tVe,aVe,Uf,Bee,nVe,sVe,H$,lVe,iVe,dVe,Jf,Pee,cVe,fVe,U$,mVe,gVe,hVe,Yf,Iee,pVe,uVe,J$,_Ve,bVe,vVe,Kf,qee,FVe,TVe,Y$,MVe,EVe,CVe,Zf,Nee,wVe,AVe,K$,yVe,LVe,xVe,em,jee,$Ve,kVe,Z$,SVe,RVe,BVe,om,Dee,PVe,IVe,ek,qVe,NVe,jVe,rm,Gee,DVe,GVe,ok,OVe,VVe,XVe,tm,Oee,zVe,QVe,rk,WVe,HVe,UVe,am,Vee,JVe,YVe,tk,KVe,ZVe,eXe,nm,Xee,oXe,rXe,ak,tXe,aXe,nXe,sm,zee,sXe,lXe,nk,iXe,dXe,cXe,lm,Qee,fXe,mXe,sk,gXe,hXe,pXe,im,Wee,uXe,_Xe,lk,bXe,vXe,FXe,dm,Hee,TXe,MXe,ik,EXe,CXe,wXe,cm,Uee,AXe,yXe,dk,LXe,xXe,$Xe,fm,Jee,kXe,SXe,ck,RXe,BXe,PXe,mm,Yee,IXe,qXe,fk,NXe,jXe,DXe,gm,Kee,GXe,OXe,mk,VXe,XXe,zXe,hm,Zee,QXe,WXe,gk,HXe,UXe,JXe,pm,eoe,YXe,KXe,hk,ZXe,eze,oze,um,ooe,rze,tze,pk,aze,nze,sze,_m,roe,lze,ize,uk,dze,cze,fze,bm,toe,mze,gze,_k,hze,pze,uze,vm,aoe,_ze,bze,bk,vze,Fze,Tze,Fm,noe,Mze,Eze,vk,Cze,wze,Aze,Tm,soe,yze,Lze,Fk,xze,$ze,kze,Mm,loe,Sze,Rze,Tk,Bze,Pze,Ize,Em,ioe,qze,Nze,Mk,jze,Dze,Gze,Cm,doe,Oze,Vze,Ek,Xze,zze,Qze,wm,coe,Wze,Hze,Ck,Uze,Jze,Yze,Am,foe,Kze,Zze,wk,eQe,oQe,rQe,ym,moe,tQe,aQe,Ak,nQe,sQe,lQe,Lm,goe,iQe,dQe,yk,cQe,fQe,mQe,xm,hoe,gQe,hQe,Lk,pQe,uQe,_Qe,$m,poe,bQe,vQe,xk,FQe,TQe,MQe,km,uoe,EQe,CQe,$k,wQe,AQe,yQe,Sm,_oe,LQe,xQe,kk,$Qe,kQe,SQe,Rm,boe,RQe,BQe,Sk,PQe,IQe,qQe,Bm,voe,NQe,jQe,Rk,DQe,GQe,OQe,Pm,Foe,VQe,XQe,Bk,zQe,QQe,WQe,Im,Toe,HQe,UQe,Pk,JQe,YQe,KQe,qm,Moe,ZQe,eWe,Ik,oWe,rWe,tWe,Nm,Eoe,aWe,nWe,qk,sWe,lWe,iWe,jm,Coe,dWe,cWe,Nk,fWe,mWe,gWe,Dm,woe,hWe,pWe,jk,uWe,_We,bWe,Gm,Aoe,vWe,FWe,Dk,TWe,MWe,EWe,Om,yoe,CWe,wWe,Gk,AWe,yWe,LWe,Vm,Loe,xWe,$We,Ok,kWe,SWe,RWe,Xm,xoe,BWe,PWe,Vk,IWe,qWe,NWe,zm,$oe,jWe,DWe,Xk,GWe,OWe,VWe,Qm,koe,XWe,zWe,zk,QWe,WWe,HWe,Wm,Soe,UWe,JWe,Qk,YWe,KWe,ZWe,Hm,Roe,eHe,oHe,Wk,rHe,tHe,aHe,Um,Boe,nHe,sHe,Hk,lHe,iHe,dHe,Jm,Poe,cHe,fHe,Uk,mHe,gHe,hHe,Ym,Ioe,pHe,uHe,Jk,_He,bHe,vHe,Km,qoe,FHe,THe,Yk,MHe,EHe,CHe,Zm,Noe,wHe,AHe,Kk,yHe,LHe,xHe,eg,joe,$He,kHe,Zk,SHe,RHe,BHe,og,Doe,PHe,IHe,eS,qHe,NHe,jHe,rg,Goe,DHe,GHe,oS,OHe,VHe,XHe,tg,Ooe,zHe,QHe,rS,WHe,HHe,UHe,ag,Voe,JHe,YHe,tS,KHe,ZHe,eUe,ng,Xoe,oUe,rUe,aS,tUe,aUe,nUe,sg,zoe,sUe,lUe,nS,iUe,dUe,cUe,lg,Qoe,fUe,mUe,sS,gUe,hUe,pUe,ig,Woe,uUe,_Ue,lS,bUe,vUe,FUe,dg,Hoe,TUe,MUe,iS,EUe,CUe,wUe,cg,Uoe,AUe,yUe,dS,LUe,xUe,$Ue,fg,Joe,kUe,SUe,cS,RUe,BUe,PUe,mg,Yoe,IUe,qUe,fS,NUe,jUe,DUe,gg,Koe,GUe,OUe,mS,VUe,XUe,zUe,hg,Zoe,QUe,WUe,gS,HUe,UUe,JUe,pg,YUe,ug,o6,KUe,ere,ZUe,NPe,_i,_g,ore,r6,eJe,rre,oJe,jPe,wo,t6,rJe,a6,tJe,hS,aJe,nJe,sJe,n6,lJe,tre,iJe,dJe,cJe,Cr,s6,fJe,are,mJe,gJe,Ca,hJe,nre,pJe,uJe,sre,_Je,bJe,lre,vJe,FJe,TJe,k,kn,ire,MJe,EJe,pS,CJe,wJe,uS,AJe,yJe,LJe,Sn,dre,xJe,$Je,_S,kJe,SJe,bS,RJe,BJe,PJe,Rn,cre,IJe,qJe,vS,NJe,jJe,FS,DJe,GJe,OJe,bg,fre,VJe,XJe,TS,zJe,QJe,WJe,Bn,mre,HJe,UJe,MS,JJe,YJe,ES,KJe,ZJe,eYe,vg,gre,oYe,rYe,CS,tYe,aYe,nYe,Fg,hre,sYe,lYe,wS,iYe,dYe,cYe,Tg,pre,fYe,mYe,AS,gYe,hYe,pYe,Pn,ure,uYe,_Ye,yS,bYe,vYe,LS,FYe,TYe,MYe,In,_re,EYe,CYe,xS,wYe,AYe,$S,yYe,LYe,xYe,qn,bre,$Ye,kYe,kS,SYe,RYe,SS,BYe,PYe,IYe,Mg,vre,qYe,NYe,RS,jYe,DYe,GYe,Eg,Fre,OYe,VYe,BS,XYe,zYe,QYe,Nn,Tre,WYe,HYe,PS,UYe,JYe,IS,YYe,KYe,ZYe,Cg,Mre,eKe,oKe,qS,rKe,tKe,aKe,jn,Ere,nKe,sKe,NS,lKe,iKe,jS,dKe,cKe,fKe,Dn,Cre,mKe,gKe,DS,hKe,pKe,GS,uKe,_Ke,bKe,Gn,wre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,wg,Are,AKe,yKe,XS,LKe,xKe,$Ke,On,yre,kKe,SKe,zS,RKe,BKe,QS,PKe,IKe,qKe,Vn,Lre,NKe,jKe,WS,DKe,GKe,HS,OKe,VKe,XKe,Xn,xre,zKe,QKe,US,WKe,HKe,JS,UKe,JKe,YKe,zn,$re,KKe,ZKe,YS,eZe,oZe,KS,rZe,tZe,aZe,Qn,kre,nZe,sZe,ZS,lZe,iZe,eR,dZe,cZe,fZe,Wn,Sre,mZe,gZe,oR,hZe,pZe,rR,uZe,_Ze,bZe,Ag,Rre,vZe,FZe,tR,TZe,MZe,EZe,Hn,Bre,CZe,wZe,aR,AZe,yZe,nR,LZe,xZe,$Ze,yg,Pre,kZe,SZe,sR,RZe,BZe,PZe,Un,Ire,IZe,qZe,lR,NZe,jZe,iR,DZe,GZe,OZe,Jn,qre,VZe,XZe,dR,zZe,QZe,cR,WZe,HZe,UZe,Yn,Nre,JZe,YZe,fR,KZe,ZZe,mR,eeo,oeo,reo,Kn,jre,teo,aeo,gR,neo,seo,hR,leo,ieo,deo,Zn,Dre,ceo,feo,pR,meo,geo,uR,heo,peo,ueo,Lg,Gre,_eo,beo,_R,veo,Feo,Teo,es,Ore,Meo,Eeo,bR,Ceo,weo,vR,Aeo,yeo,Leo,os,Vre,xeo,$eo,FR,keo,Seo,TR,Reo,Beo,Peo,rs,Xre,Ieo,qeo,MR,Neo,jeo,ER,Deo,Geo,Oeo,ts,zre,Veo,Xeo,CR,zeo,Qeo,wR,Weo,Heo,Ueo,as,Qre,Jeo,Yeo,AR,Keo,Zeo,yR,eoo,ooo,roo,ns,Wre,too,aoo,LR,noo,soo,xR,loo,ioo,doo,xg,Hre,coo,foo,$R,moo,goo,hoo,ss,Ure,poo,uoo,kR,_oo,boo,SR,voo,Foo,Too,$g,Jre,Moo,Eoo,RR,Coo,woo,Aoo,kg,Yre,yoo,Loo,BR,xoo,$oo,koo,ls,Kre,Soo,Roo,PR,Boo,Poo,IR,Ioo,qoo,Noo,is,Zre,joo,Doo,qR,Goo,Ooo,NR,Voo,Xoo,zoo,ds,ete,Qoo,Woo,jR,Hoo,Uoo,DR,Joo,Yoo,Koo,Sg,ote,Zoo,ero,GR,oro,rro,tro,cs,rte,aro,nro,OR,sro,lro,VR,iro,dro,cro,fs,tte,fro,mro,XR,gro,hro,zR,pro,uro,_ro,ms,ate,bro,vro,QR,Fro,Tro,WR,Mro,Ero,Cro,gs,nte,wro,Aro,HR,yro,Lro,UR,xro,$ro,kro,hs,ste,Sro,Rro,JR,Bro,Pro,YR,Iro,qro,Nro,Rg,lte,jro,Dro,KR,Gro,Oro,Vro,ps,ite,Xro,zro,ZR,Qro,Wro,eB,Hro,Uro,Jro,Bg,dte,Yro,Kro,oB,Zro,eto,oto,Pg,cte,rto,tto,rB,ato,nto,sto,Ig,fte,lto,ito,tB,dto,cto,fto,qg,mte,mto,gto,aB,hto,pto,uto,us,gte,_to,bto,nB,vto,Fto,sB,Tto,Mto,Eto,Ng,hte,Cto,wto,lB,Ato,yto,Lto,_s,pte,xto,$to,iB,kto,Sto,dB,Rto,Bto,Pto,bs,ute,Ito,qto,cB,Nto,jto,fB,Dto,Gto,Oto,vs,_te,Vto,Xto,mB,zto,Qto,gB,Wto,Hto,Uto,Fs,bte,Jto,Yto,hB,Kto,Zto,pB,eao,oao,rao,Ts,vte,tao,aao,uB,nao,sao,_B,lao,iao,dao,Ms,Fte,cao,fao,bB,mao,gao,vB,hao,pao,uao,jg,Tte,_ao,bao,FB,vao,Fao,Tao,Dg,Mte,Mao,Eao,TB,Cao,wao,Aao,Es,Ete,yao,Lao,MB,xao,$ao,EB,kao,Sao,Rao,Cs,Cte,Bao,Pao,CB,Iao,qao,wB,Nao,jao,Dao,ws,wte,Gao,Oao,AB,Vao,Xao,yB,zao,Qao,Wao,Gg,Ate,Hao,Uao,LB,Jao,Yao,Kao,Og,yte,Zao,eno,xB,ono,rno,tno,Vg,Lte,ano,nno,$B,sno,lno,ino,As,xte,dno,cno,kB,fno,mno,SB,gno,hno,pno,Xg,$te,uno,_no,RB,bno,vno,Fno,zg,kte,Tno,Mno,BB,Eno,Cno,wno,ys,Ste,Ano,yno,PB,Lno,xno,IB,$no,kno,Sno,Qg,Rte,Rno,Bno,qB,Pno,Ino,qno,Wg,Bte,Nno,jno,NB,Dno,Gno,Ono,Ls,Pte,Vno,Xno,jB,zno,Qno,DB,Wno,Hno,Uno,xs,Ite,Jno,Yno,GB,Kno,Zno,OB,eso,oso,rso,$s,qte,tso,aso,VB,nso,sso,XB,lso,iso,dso,ks,Nte,cso,fso,zB,mso,gso,QB,hso,pso,uso,Hg,_so,Ug,l6,bso,jte,vso,DPe,bi,Jg,Dte,i6,Fso,Gte,Tso,GPe,Ao,d6,Mso,c6,Eso,WB,Cso,wso,Aso,f6,yso,Ote,Lso,xso,$so,Qe,m6,kso,Vte,Sso,Rso,wa,Bso,Xte,Pso,Iso,zte,qso,Nso,Qte,jso,Dso,Gso,oe,Yg,Wte,Oso,Vso,HB,Xso,zso,Qso,Kg,Hte,Wso,Hso,UB,Uso,Jso,Yso,Zg,Ute,Kso,Zso,JB,elo,olo,rlo,eh,Jte,tlo,alo,YB,nlo,slo,llo,oh,Yte,ilo,dlo,KB,clo,flo,mlo,rh,Kte,glo,hlo,ZB,plo,ulo,_lo,th,Zte,blo,vlo,eP,Flo,Tlo,Mlo,ah,eae,Elo,Clo,oP,wlo,Alo,ylo,nh,oae,Llo,xlo,rP,$lo,klo,Slo,sh,rae,Rlo,Blo,tP,Plo,Ilo,qlo,lh,tae,Nlo,jlo,aP,Dlo,Glo,Olo,ih,aae,Vlo,Xlo,nP,zlo,Qlo,Wlo,dh,nae,Hlo,Ulo,sP,Jlo,Ylo,Klo,ch,sae,Zlo,eio,lP,oio,rio,tio,fh,lae,aio,nio,iP,sio,lio,iio,mh,iae,dio,cio,dP,fio,mio,gio,gh,dae,hio,pio,cP,uio,_io,bio,hh,cae,vio,Fio,fP,Tio,Mio,Eio,ph,fae,Cio,wio,mP,Aio,yio,Lio,uh,mae,xio,$io,gP,kio,Sio,Rio,_h,gae,Bio,Pio,hP,Iio,qio,Nio,bh,hae,jio,Dio,pP,Gio,Oio,Vio,vh,pae,Xio,zio,uP,Qio,Wio,Hio,Fh,uae,Uio,Jio,_P,Yio,Kio,Zio,Th,_ae,edo,odo,bP,rdo,tdo,ado,Mh,ndo,Eh,sdo,Ch,g6,ldo,bae,ido,OPe,vi,wh,vae,h6,ddo,Fae,cdo,VPe,yo,p6,fdo,u6,mdo,vP,gdo,hdo,pdo,_6,udo,Tae,_do,bdo,vdo,We,b6,Fdo,Mae,Tdo,Mdo,Fi,Edo,Eae,Cdo,wdo,Cae,Ado,ydo,Ldo,_e,Ah,wae,xdo,$do,FP,kdo,Sdo,Rdo,yh,Aae,Bdo,Pdo,yae,Ido,qdo,Ndo,Lh,Lae,jdo,Ddo,TP,Gdo,Odo,Vdo,xh,xae,Xdo,zdo,MP,Qdo,Wdo,Hdo,$h,$ae,Udo,Jdo,EP,Ydo,Kdo,Zdo,kh,kae,eco,oco,CP,rco,tco,aco,Sh,Sae,nco,sco,wP,lco,ico,dco,Rh,Rae,cco,fco,AP,mco,gco,hco,Bh,Bae,pco,uco,yP,_co,bco,vco,Ph,Pae,Fco,Tco,LP,Mco,Eco,Cco,Ih,Iae,wco,Aco,xP,yco,Lco,xco,qh,qae,$co,kco,$P,Sco,Rco,Bco,Nh,Nae,Pco,Ico,kP,qco,Nco,jco,jh,jae,Dco,Gco,SP,Oco,Vco,Xco,Dh,Dae,zco,Qco,RP,Wco,Hco,Uco,Gh,Jco,Oh,Yco,Vh,v6,Kco,Gae,Zco,XPe,Ti,Xh,Oae,F6,efo,Vae,ofo,zPe,Lo,T6,rfo,Mi,tfo,BP,afo,nfo,PP,sfo,lfo,ifo,M6,dfo,Xae,cfo,ffo,mfo,ot,E6,gfo,zae,hfo,pfo,Ei,ufo,Qae,_fo,bfo,IP,vfo,Ffo,Tfo,zh,Mfo,He,C6,Efo,Wae,Cfo,wfo,Aa,Afo,Hae,yfo,Lfo,Uae,xfo,$fo,Jae,kfo,Sfo,Rfo,x,Qh,Yae,Bfo,Pfo,qP,Ifo,qfo,Nfo,Wh,Kae,jfo,Dfo,NP,Gfo,Ofo,Vfo,Hh,Zae,Xfo,zfo,jP,Qfo,Wfo,Hfo,Uh,ene,Ufo,Jfo,DP,Yfo,Kfo,Zfo,Jh,one,emo,omo,GP,rmo,tmo,amo,Yh,rne,nmo,smo,OP,lmo,imo,dmo,Kh,tne,cmo,fmo,VP,mmo,gmo,hmo,Zh,ane,pmo,umo,XP,_mo,bmo,vmo,ep,nne,Fmo,Tmo,zP,Mmo,Emo,Cmo,op,sne,wmo,Amo,QP,ymo,Lmo,xmo,rp,lne,$mo,kmo,WP,Smo,Rmo,Bmo,tp,ine,Pmo,Imo,HP,qmo,Nmo,jmo,ap,dne,Dmo,Gmo,UP,Omo,Vmo,Xmo,np,cne,zmo,Qmo,JP,Wmo,Hmo,Umo,sp,fne,Jmo,Ymo,YP,Kmo,Zmo,ego,lp,mne,ogo,rgo,KP,tgo,ago,ngo,ip,gne,sgo,lgo,ZP,igo,dgo,cgo,dp,hne,fgo,mgo,eI,ggo,hgo,pgo,cp,pne,ugo,_go,oI,bgo,vgo,Fgo,fp,une,Tgo,Mgo,rI,Ego,Cgo,wgo,mp,_ne,Ago,ygo,tI,Lgo,xgo,$go,gp,bne,kgo,Sgo,aI,Rgo,Bgo,Pgo,hp,vne,Igo,qgo,nI,Ngo,jgo,Dgo,pp,Fne,Ggo,Ogo,sI,Vgo,Xgo,zgo,up,Tne,Qgo,Wgo,lI,Hgo,Ugo,Jgo,_p,Mne,Ygo,Kgo,iI,Zgo,eho,oho,bp,Ene,rho,tho,dI,aho,nho,sho,vp,Cne,lho,iho,cI,dho,cho,fho,Fp,wne,mho,gho,fI,hho,pho,uho,Tp,Ane,_ho,bho,mI,vho,Fho,Tho,Mp,yne,Mho,Eho,gI,Cho,who,Aho,Ss,Lne,yho,Lho,hI,xho,$ho,pI,kho,Sho,Rho,Ep,xne,Bho,Pho,uI,Iho,qho,Nho,Cp,$ne,jho,Dho,_I,Gho,Oho,Vho,wp,kne,Xho,zho,bI,Qho,Who,Hho,Ap,Sne,Uho,Jho,vI,Yho,Kho,Zho,yp,Rne,epo,opo,FI,rpo,tpo,apo,Lp,Bne,npo,spo,TI,lpo,ipo,dpo,xp,Pne,cpo,fpo,MI,mpo,gpo,hpo,$p,Ine,ppo,upo,EI,_po,bpo,vpo,kp,qne,Fpo,Tpo,CI,Mpo,Epo,Cpo,Sp,Nne,wpo,Apo,wI,ypo,Lpo,xpo,Rp,jne,$po,kpo,AI,Spo,Rpo,Bpo,Bp,Dne,Ppo,Ipo,yI,qpo,Npo,jpo,Pp,Gne,Dpo,Gpo,LI,Opo,Vpo,Xpo,Ip,One,zpo,Qpo,xI,Wpo,Hpo,Upo,qp,Vne,Jpo,Ypo,$I,Kpo,Zpo,euo,Np,Xne,ouo,ruo,kI,tuo,auo,nuo,jp,zne,suo,luo,SI,iuo,duo,cuo,Dp,Qne,fuo,muo,RI,guo,huo,puo,Gp,Wne,uuo,_uo,BI,buo,vuo,Fuo,Op,Hne,Tuo,Muo,PI,Euo,Cuo,wuo,Vp,Une,Auo,yuo,II,Luo,xuo,$uo,Xp,Jne,kuo,Suo,qI,Ruo,Buo,Puo,zp,Yne,Iuo,quo,NI,Nuo,juo,Duo,Qp,Kne,Guo,Ouo,jI,Vuo,Xuo,zuo,Wp,Zne,Quo,Wuo,DI,Huo,Uuo,Juo,Hp,ese,Yuo,Kuo,GI,Zuo,e_o,o_o,Up,ose,r_o,t_o,OI,a_o,n_o,s_o,Jp,rse,l_o,i_o,VI,d_o,c_o,f_o,Yp,tse,m_o,g_o,XI,h_o,p_o,u_o,Kp,ase,__o,b_o,zI,v_o,F_o,T_o,Zp,nse,M_o,E_o,QI,C_o,w_o,A_o,eu,sse,y_o,L_o,WI,x_o,$_o,k_o,ou,lse,S_o,R_o,HI,B_o,P_o,I_o,ru,ise,q_o,N_o,UI,j_o,D_o,G_o,tu,dse,O_o,V_o,JI,X_o,z_o,Q_o,au,cse,W_o,H_o,YI,U_o,J_o,Y_o,nu,fse,K_o,Z_o,KI,e2o,o2o,r2o,su,mse,t2o,a2o,ZI,n2o,s2o,l2o,lu,gse,i2o,d2o,eq,c2o,f2o,m2o,iu,hse,g2o,h2o,oq,p2o,u2o,_2o,du,pse,b2o,v2o,rq,F2o,T2o,M2o,cu,use,E2o,C2o,tq,w2o,A2o,y2o,fu,_se,L2o,x2o,aq,$2o,k2o,S2o,mu,bse,R2o,B2o,nq,P2o,I2o,q2o,gu,vse,N2o,j2o,sq,D2o,G2o,O2o,hu,Fse,V2o,X2o,lq,z2o,Q2o,W2o,pu,Tse,H2o,U2o,iq,J2o,Y2o,K2o,uu,Mse,Z2o,e1o,dq,o1o,r1o,t1o,_u,Ese,a1o,n1o,cq,s1o,l1o,i1o,bu,Cse,d1o,c1o,fq,f1o,m1o,g1o,vu,wse,h1o,p1o,mq,u1o,_1o,b1o,Fu,Ase,v1o,F1o,gq,T1o,M1o,E1o,Tu,yse,C1o,w1o,hq,A1o,y1o,L1o,Mu,Lse,x1o,$1o,pq,k1o,S1o,R1o,Eu,xse,B1o,P1o,uq,I1o,q1o,N1o,Cu,$se,j1o,D1o,_q,G1o,O1o,V1o,wu,kse,X1o,z1o,bq,Q1o,W1o,H1o,Au,Sse,U1o,J1o,vq,Y1o,K1o,Z1o,yu,Rse,ebo,obo,Fq,rbo,tbo,abo,Lu,Bse,nbo,sbo,Tq,lbo,ibo,dbo,xu,Pse,cbo,fbo,Mq,mbo,gbo,hbo,$u,Ise,pbo,ubo,Eq,_bo,bbo,vbo,ku,qse,Fbo,Tbo,Cq,Mbo,Ebo,Cbo,Su,Nse,wbo,Abo,wq,ybo,Lbo,xbo,Ru,jse,$bo,kbo,Aq,Sbo,Rbo,Bbo,Bu,Pbo,Dse,Ibo,qbo,Gse,Nbo,jbo,Pu,QPe,Ci,Iu,Ose,w6,Dbo,Vse,Gbo,WPe,xo,A6,Obo,wi,Vbo,yq,Xbo,zbo,Lq,Qbo,Wbo,Hbo,y6,Ubo,Xse,Jbo,Ybo,Kbo,rt,L6,Zbo,zse,e5o,o5o,Ai,r5o,Qse,t5o,a5o,xq,n5o,s5o,l5o,qu,i5o,Ue,x6,d5o,Wse,c5o,f5o,ya,m5o,Hse,g5o,h5o,Use,p5o,u5o,Jse,_5o,b5o,v5o,G,Nu,Yse,F5o,T5o,$q,M5o,E5o,C5o,ju,Kse,w5o,A5o,kq,y5o,L5o,x5o,Du,Zse,$5o,k5o,Sq,S5o,R5o,B5o,Gu,ele,P5o,I5o,Rq,q5o,N5o,j5o,Ou,ole,D5o,G5o,Bq,O5o,V5o,X5o,Vu,rle,z5o,Q5o,Pq,W5o,H5o,U5o,Xu,tle,J5o,Y5o,Iq,K5o,Z5o,evo,zu,ale,ovo,rvo,qq,tvo,avo,nvo,Qu,nle,svo,lvo,Nq,ivo,dvo,cvo,Wu,sle,fvo,mvo,jq,gvo,hvo,pvo,Hu,lle,uvo,_vo,Dq,bvo,vvo,Fvo,Uu,ile,Tvo,Mvo,Gq,Evo,Cvo,wvo,Ju,dle,Avo,yvo,Oq,Lvo,xvo,$vo,Yu,cle,kvo,Svo,Vq,Rvo,Bvo,Pvo,Ku,fle,Ivo,qvo,Xq,Nvo,jvo,Dvo,Zu,mle,Gvo,Ovo,zq,Vvo,Xvo,zvo,e_,gle,Qvo,Wvo,Qq,Hvo,Uvo,Jvo,o_,hle,Yvo,Kvo,Wq,Zvo,eFo,oFo,r_,ple,rFo,tFo,Hq,aFo,nFo,sFo,t_,ule,lFo,iFo,Uq,dFo,cFo,fFo,a_,_le,mFo,gFo,Jq,hFo,pFo,uFo,n_,ble,_Fo,bFo,Yq,vFo,FFo,TFo,s_,vle,MFo,EFo,Kq,CFo,wFo,AFo,l_,Fle,yFo,LFo,Zq,xFo,$Fo,kFo,i_,Tle,SFo,RFo,eN,BFo,PFo,IFo,d_,Mle,qFo,NFo,oN,jFo,DFo,GFo,c_,Ele,OFo,VFo,rN,XFo,zFo,QFo,f_,Cle,WFo,HFo,tN,UFo,JFo,YFo,m_,wle,KFo,ZFo,aN,e0o,o0o,r0o,g_,Ale,t0o,a0o,nN,n0o,s0o,l0o,h_,yle,i0o,d0o,sN,c0o,f0o,m0o,p_,Lle,g0o,h0o,lN,p0o,u0o,_0o,u_,xle,b0o,v0o,iN,F0o,T0o,M0o,__,$le,E0o,C0o,dN,w0o,A0o,y0o,b_,kle,L0o,x0o,cN,$0o,k0o,S0o,v_,Sle,R0o,B0o,fN,P0o,I0o,q0o,F_,Rle,N0o,j0o,mN,D0o,G0o,O0o,T_,Ble,V0o,X0o,gN,z0o,Q0o,W0o,M_,Ple,H0o,U0o,hN,J0o,Y0o,K0o,E_,Ile,Z0o,eTo,pN,oTo,rTo,tTo,C_,aTo,qle,nTo,sTo,Nle,lTo,iTo,w_,HPe,yi,A_,jle,$6,dTo,Dle,cTo,UPe,$o,k6,fTo,Li,mTo,uN,gTo,hTo,_N,pTo,uTo,_To,S6,bTo,Gle,vTo,FTo,TTo,tt,R6,MTo,Ole,ETo,CTo,xi,wTo,Vle,ATo,yTo,bN,LTo,xTo,$To,y_,kTo,Je,B6,STo,Xle,RTo,BTo,La,PTo,zle,ITo,qTo,Qle,NTo,jTo,Wle,DTo,GTo,OTo,z,L_,Hle,VTo,XTo,vN,zTo,QTo,WTo,x_,Ule,HTo,UTo,FN,JTo,YTo,KTo,$_,Jle,ZTo,e7o,TN,o7o,r7o,t7o,k_,Yle,a7o,n7o,MN,s7o,l7o,i7o,S_,Kle,d7o,c7o,EN,f7o,m7o,g7o,R_,Zle,h7o,p7o,CN,u7o,_7o,b7o,B_,eie,v7o,F7o,wN,T7o,M7o,E7o,P_,oie,C7o,w7o,AN,A7o,y7o,L7o,I_,rie,x7o,$7o,yN,k7o,S7o,R7o,q_,tie,B7o,P7o,LN,I7o,q7o,N7o,N_,aie,j7o,D7o,xN,G7o,O7o,V7o,j_,nie,X7o,z7o,$N,Q7o,W7o,H7o,D_,sie,U7o,J7o,kN,Y7o,K7o,Z7o,G_,lie,eMo,oMo,SN,rMo,tMo,aMo,O_,iie,nMo,sMo,RN,lMo,iMo,dMo,V_,die,cMo,fMo,BN,mMo,gMo,hMo,X_,cie,pMo,uMo,PN,_Mo,bMo,vMo,z_,fie,FMo,TMo,IN,MMo,EMo,CMo,Q_,mie,wMo,AMo,qN,yMo,LMo,xMo,W_,gie,$Mo,kMo,NN,SMo,RMo,BMo,H_,hie,PMo,IMo,jN,qMo,NMo,jMo,U_,pie,DMo,GMo,DN,OMo,VMo,XMo,J_,uie,zMo,QMo,GN,WMo,HMo,UMo,Y_,_ie,JMo,YMo,ON,KMo,ZMo,e4o,K_,bie,o4o,r4o,VN,t4o,a4o,n4o,Z_,vie,s4o,l4o,XN,i4o,d4o,c4o,e2,Fie,f4o,m4o,zN,g4o,h4o,p4o,o2,Tie,u4o,_4o,QN,b4o,v4o,F4o,r2,Mie,T4o,M4o,WN,E4o,C4o,w4o,t2,Eie,A4o,y4o,HN,L4o,x4o,$4o,a2,Cie,k4o,S4o,UN,R4o,B4o,P4o,n2,wie,I4o,q4o,JN,N4o,j4o,D4o,s2,Aie,G4o,O4o,YN,V4o,X4o,z4o,l2,yie,Q4o,W4o,KN,H4o,U4o,J4o,i2,Lie,Y4o,K4o,ZN,Z4o,eEo,oEo,d2,xie,rEo,tEo,ej,aEo,nEo,sEo,c2,lEo,$ie,iEo,dEo,kie,cEo,fEo,f2,JPe,$i,m2,Sie,P6,mEo,Rie,gEo,YPe,ko,I6,hEo,ki,pEo,oj,uEo,_Eo,rj,bEo,vEo,FEo,q6,TEo,Bie,MEo,EEo,CEo,at,N6,wEo,Pie,AEo,yEo,Si,LEo,Iie,xEo,$Eo,tj,kEo,SEo,REo,g2,BEo,Ye,j6,PEo,qie,IEo,qEo,xa,NEo,Nie,jEo,DEo,jie,GEo,OEo,Die,VEo,XEo,zEo,Q,h2,Gie,QEo,WEo,aj,HEo,UEo,JEo,p2,Oie,YEo,KEo,nj,ZEo,eCo,oCo,u2,Vie,rCo,tCo,sj,aCo,nCo,sCo,_2,Xie,lCo,iCo,lj,dCo,cCo,fCo,b2,zie,mCo,gCo,ij,hCo,pCo,uCo,v2,Qie,_Co,bCo,dj,vCo,FCo,TCo,F2,Wie,MCo,ECo,cj,CCo,wCo,ACo,T2,Hie,yCo,LCo,fj,xCo,$Co,kCo,M2,Uie,SCo,RCo,mj,BCo,PCo,ICo,E2,Jie,qCo,NCo,gj,jCo,DCo,GCo,C2,Yie,OCo,VCo,hj,XCo,zCo,QCo,w2,Kie,WCo,HCo,pj,UCo,JCo,YCo,A2,Zie,KCo,ZCo,uj,e3o,o3o,r3o,y2,ede,t3o,a3o,_j,n3o,s3o,l3o,L2,ode,i3o,d3o,bj,c3o,f3o,m3o,x2,rde,g3o,h3o,vj,p3o,u3o,_3o,$2,tde,b3o,v3o,Fj,F3o,T3o,M3o,k2,ade,E3o,C3o,Tj,w3o,A3o,y3o,S2,nde,L3o,x3o,Mj,$3o,k3o,S3o,R2,sde,R3o,B3o,Ej,P3o,I3o,q3o,B2,lde,N3o,j3o,Cj,D3o,G3o,O3o,P2,ide,V3o,X3o,wj,z3o,Q3o,W3o,I2,dde,H3o,U3o,Aj,J3o,Y3o,K3o,q2,cde,Z3o,ewo,yj,owo,rwo,two,N2,fde,awo,nwo,Lj,swo,lwo,iwo,j2,mde,dwo,cwo,xj,fwo,mwo,gwo,D2,gde,hwo,pwo,$j,uwo,_wo,bwo,G2,hde,vwo,Fwo,kj,Two,Mwo,Ewo,O2,pde,Cwo,wwo,Sj,Awo,ywo,Lwo,V2,ude,xwo,$wo,Rj,kwo,Swo,Rwo,X2,_de,Bwo,Pwo,bde,Iwo,qwo,Nwo,z2,vde,jwo,Dwo,Bj,Gwo,Owo,Vwo,Q2,Fde,Xwo,zwo,Pj,Qwo,Wwo,Hwo,W2,Tde,Uwo,Jwo,Ij,Ywo,Kwo,Zwo,H2,Mde,eAo,oAo,qj,rAo,tAo,aAo,U2,nAo,Ede,sAo,lAo,Cde,iAo,dAo,J2,KPe,Ri,Y2,wde,D6,cAo,Ade,fAo,ZPe,So,G6,mAo,Bi,gAo,Nj,hAo,pAo,jj,uAo,_Ao,bAo,O6,vAo,yde,FAo,TAo,MAo,nt,V6,EAo,Lde,CAo,wAo,Pi,AAo,xde,yAo,LAo,Dj,xAo,$Ao,kAo,K2,SAo,Ke,X6,RAo,$de,BAo,PAo,$a,IAo,kde,qAo,NAo,Sde,jAo,DAo,Rde,GAo,OAo,VAo,pe,Z2,Bde,XAo,zAo,Gj,QAo,WAo,HAo,e1,Pde,UAo,JAo,Oj,YAo,KAo,ZAo,o1,Ide,e6o,o6o,Vj,r6o,t6o,a6o,r1,qde,n6o,s6o,Xj,l6o,i6o,d6o,t1,Nde,c6o,f6o,zj,m6o,g6o,h6o,a1,jde,p6o,u6o,Qj,_6o,b6o,v6o,n1,Dde,F6o,T6o,Wj,M6o,E6o,C6o,s1,Gde,w6o,A6o,Hj,y6o,L6o,x6o,l1,Ode,$6o,k6o,Uj,S6o,R6o,B6o,i1,Vde,P6o,I6o,Jj,q6o,N6o,j6o,d1,Xde,D6o,G6o,Yj,O6o,V6o,X6o,c1,zde,z6o,Q6o,Kj,W6o,H6o,U6o,f1,Qde,J6o,Y6o,Zj,K6o,Z6o,eyo,m1,Wde,oyo,ryo,eD,tyo,ayo,nyo,g1,Hde,syo,lyo,oD,iyo,dyo,cyo,h1,Ude,fyo,myo,rD,gyo,hyo,pyo,p1,uyo,Jde,_yo,byo,Yde,vyo,Fyo,u1,eIe,Ii,_1,Kde,z6,Tyo,Zde,Myo,oIe,Ro,Q6,Eyo,qi,Cyo,tD,wyo,Ayo,aD,yyo,Lyo,xyo,W6,$yo,ece,kyo,Syo,Ryo,st,H6,Byo,oce,Pyo,Iyo,Ni,qyo,rce,Nyo,jyo,nD,Dyo,Gyo,Oyo,b1,Vyo,Ze,U6,Xyo,tce,zyo,Qyo,ka,Wyo,ace,Hyo,Uyo,nce,Jyo,Yyo,sce,Kyo,Zyo,eLo,q,v1,lce,oLo,rLo,sD,tLo,aLo,nLo,F1,ice,sLo,lLo,lD,iLo,dLo,cLo,T1,dce,fLo,mLo,iD,gLo,hLo,pLo,M1,cce,uLo,_Lo,dD,bLo,vLo,FLo,E1,fce,TLo,MLo,cD,ELo,CLo,wLo,C1,mce,ALo,yLo,fD,LLo,xLo,$Lo,w1,gce,kLo,SLo,mD,RLo,BLo,PLo,A1,hce,ILo,qLo,gD,NLo,jLo,DLo,y1,pce,GLo,OLo,hD,VLo,XLo,zLo,L1,uce,QLo,WLo,pD,HLo,ULo,JLo,x1,_ce,YLo,KLo,uD,ZLo,e8o,o8o,$1,bce,r8o,t8o,_D,a8o,n8o,s8o,k1,vce,l8o,i8o,bD,d8o,c8o,f8o,S1,Fce,m8o,g8o,vD,h8o,p8o,u8o,R1,Tce,_8o,b8o,FD,v8o,F8o,T8o,B1,Mce,M8o,E8o,TD,C8o,w8o,A8o,P1,Ece,y8o,L8o,MD,x8o,$8o,k8o,I1,Cce,S8o,R8o,ED,B8o,P8o,I8o,q1,wce,q8o,N8o,CD,j8o,D8o,G8o,N1,Ace,O8o,V8o,wD,X8o,z8o,Q8o,j1,yce,W8o,H8o,AD,U8o,J8o,Y8o,D1,Lce,K8o,Z8o,yD,exo,oxo,rxo,G1,xce,txo,axo,LD,nxo,sxo,lxo,O1,$ce,ixo,dxo,xD,cxo,fxo,mxo,V1,kce,gxo,hxo,$D,pxo,uxo,_xo,X1,Sce,bxo,vxo,kD,Fxo,Txo,Mxo,z1,Rce,Exo,Cxo,SD,wxo,Axo,yxo,Q1,Bce,Lxo,xxo,RD,$xo,kxo,Sxo,W1,Pce,Rxo,Bxo,BD,Pxo,Ixo,qxo,H1,Ice,Nxo,jxo,PD,Dxo,Gxo,Oxo,U1,qce,Vxo,Xxo,ID,zxo,Qxo,Wxo,J1,Nce,Hxo,Uxo,qD,Jxo,Yxo,Kxo,Y1,jce,Zxo,e9o,ND,o9o,r9o,t9o,K1,Dce,a9o,n9o,jD,s9o,l9o,i9o,Z1,Gce,d9o,c9o,DD,f9o,m9o,g9o,eb,Oce,h9o,p9o,GD,u9o,_9o,b9o,ob,Vce,v9o,F9o,OD,T9o,M9o,E9o,rb,Xce,C9o,w9o,VD,A9o,y9o,L9o,tb,zce,x9o,$9o,XD,k9o,S9o,R9o,ab,Qce,B9o,P9o,zD,I9o,q9o,N9o,nb,Wce,j9o,D9o,QD,G9o,O9o,V9o,sb,Hce,X9o,z9o,WD,Q9o,W9o,H9o,lb,Uce,U9o,J9o,HD,Y9o,K9o,Z9o,ib,Jce,e$o,o$o,UD,r$o,t$o,a$o,db,Yce,n$o,s$o,JD,l$o,i$o,d$o,cb,Kce,c$o,f$o,YD,m$o,g$o,h$o,fb,p$o,Zce,u$o,_$o,efe,b$o,v$o,mb,rIe,ji,gb,ofe,J6,F$o,rfe,T$o,tIe,Bo,Y6,M$o,Di,E$o,KD,C$o,w$o,ZD,A$o,y$o,L$o,K6,x$o,tfe,$$o,k$o,S$o,lt,Z6,R$o,afe,B$o,P$o,Gi,I$o,nfe,q$o,N$o,eG,j$o,D$o,G$o,hb,O$o,eo,ey,V$o,sfe,X$o,z$o,Sa,Q$o,lfe,W$o,H$o,ife,U$o,J$o,dfe,Y$o,K$o,Z$o,Y,pb,cfe,eko,oko,oG,rko,tko,ako,ub,ffe,nko,sko,rG,lko,iko,dko,_b,mfe,cko,fko,tG,mko,gko,hko,bb,gfe,pko,uko,aG,_ko,bko,vko,vb,hfe,Fko,Tko,nG,Mko,Eko,Cko,Fb,pfe,wko,Ako,sG,yko,Lko,xko,Tb,ufe,$ko,kko,lG,Sko,Rko,Bko,Mb,_fe,Pko,Iko,iG,qko,Nko,jko,Eb,bfe,Dko,Gko,dG,Oko,Vko,Xko,Cb,vfe,zko,Qko,cG,Wko,Hko,Uko,wb,Ffe,Jko,Yko,fG,Kko,Zko,eSo,Ab,Tfe,oSo,rSo,mG,tSo,aSo,nSo,yb,Mfe,sSo,lSo,gG,iSo,dSo,cSo,Lb,Efe,fSo,mSo,hG,gSo,hSo,pSo,xb,Cfe,uSo,_So,pG,bSo,vSo,FSo,$b,wfe,TSo,MSo,uG,ESo,CSo,wSo,kb,Afe,ASo,ySo,_G,LSo,xSo,$So,Sb,yfe,kSo,SSo,bG,RSo,BSo,PSo,Rb,Lfe,ISo,qSo,vG,NSo,jSo,DSo,Bb,xfe,GSo,OSo,FG,VSo,XSo,zSo,Pb,$fe,QSo,WSo,TG,HSo,USo,JSo,Ib,kfe,YSo,KSo,MG,ZSo,eRo,oRo,qb,Sfe,rRo,tRo,EG,aRo,nRo,sRo,Nb,Rfe,lRo,iRo,CG,dRo,cRo,fRo,jb,Bfe,mRo,gRo,wG,hRo,pRo,uRo,Db,Pfe,_Ro,bRo,AG,vRo,FRo,TRo,Gb,Ife,MRo,ERo,yG,CRo,wRo,ARo,Ob,qfe,yRo,LRo,LG,xRo,$Ro,kRo,Vb,Nfe,SRo,RRo,xG,BRo,PRo,IRo,Xb,qRo,jfe,NRo,jRo,Dfe,DRo,GRo,zb,aIe,Oi,Qb,Gfe,oy,ORo,Ofe,VRo,nIe,Po,ry,XRo,Vi,zRo,$G,QRo,WRo,kG,HRo,URo,JRo,ty,YRo,Vfe,KRo,ZRo,eBo,it,ay,oBo,Xfe,rBo,tBo,Xi,aBo,zfe,nBo,sBo,SG,lBo,iBo,dBo,Wb,cBo,oo,ny,fBo,Qfe,mBo,gBo,Ra,hBo,Wfe,pBo,uBo,Hfe,_Bo,bBo,Ufe,vBo,FBo,TBo,Yr,Hb,Jfe,MBo,EBo,RG,CBo,wBo,ABo,Ub,Yfe,yBo,LBo,BG,xBo,$Bo,kBo,Jb,Kfe,SBo,RBo,PG,BBo,PBo,IBo,Yb,Zfe,qBo,NBo,IG,jBo,DBo,GBo,Kb,eme,OBo,VBo,qG,XBo,zBo,QBo,Zb,WBo,ome,HBo,UBo,rme,JBo,YBo,e5,sIe,zi,o5,tme,sy,KBo,ame,ZBo,lIe,Io,ly,ePo,Qi,oPo,NG,rPo,tPo,jG,aPo,nPo,sPo,iy,lPo,nme,iPo,dPo,cPo,dt,dy,fPo,sme,mPo,gPo,Wi,hPo,lme,pPo,uPo,DG,_Po,bPo,vPo,r5,FPo,ro,cy,TPo,ime,MPo,EPo,Ba,CPo,dme,wPo,APo,cme,yPo,LPo,fme,xPo,$Po,kPo,U,t5,mme,SPo,RPo,GG,BPo,PPo,IPo,a5,gme,qPo,NPo,OG,jPo,DPo,GPo,n5,hme,OPo,VPo,VG,XPo,zPo,QPo,s5,pme,WPo,HPo,XG,UPo,JPo,YPo,l5,ume,KPo,ZPo,zG,eIo,oIo,rIo,i5,_me,tIo,aIo,QG,nIo,sIo,lIo,d5,bme,iIo,dIo,WG,cIo,fIo,mIo,c5,vme,gIo,hIo,HG,pIo,uIo,_Io,f5,Fme,bIo,vIo,UG,FIo,TIo,MIo,m5,Tme,EIo,CIo,JG,wIo,AIo,yIo,g5,Mme,LIo,xIo,YG,$Io,kIo,SIo,h5,Eme,RIo,BIo,KG,PIo,IIo,qIo,p5,Cme,NIo,jIo,ZG,DIo,GIo,OIo,u5,wme,VIo,XIo,eO,zIo,QIo,WIo,_5,Ame,HIo,UIo,oO,JIo,YIo,KIo,b5,yme,ZIo,eqo,rO,oqo,rqo,tqo,v5,Lme,aqo,nqo,tO,sqo,lqo,iqo,F5,xme,dqo,cqo,aO,fqo,mqo,gqo,T5,$me,hqo,pqo,nO,uqo,_qo,bqo,M5,kme,vqo,Fqo,sO,Tqo,Mqo,Eqo,E5,Sme,Cqo,wqo,lO,Aqo,yqo,Lqo,C5,Rme,xqo,$qo,iO,kqo,Sqo,Rqo,w5,Bme,Bqo,Pqo,dO,Iqo,qqo,Nqo,A5,Pme,jqo,Dqo,cO,Gqo,Oqo,Vqo,y5,Ime,Xqo,zqo,fO,Qqo,Wqo,Hqo,L5,qme,Uqo,Jqo,mO,Yqo,Kqo,Zqo,x5,Nme,eNo,oNo,gO,rNo,tNo,aNo,$5,jme,nNo,sNo,hO,lNo,iNo,dNo,k5,Dme,cNo,fNo,pO,mNo,gNo,hNo,S5,Gme,pNo,uNo,uO,_No,bNo,vNo,R5,Ome,FNo,TNo,_O,MNo,ENo,CNo,B5,Vme,wNo,ANo,bO,yNo,LNo,xNo,P5,Xme,$No,kNo,vO,SNo,RNo,BNo,I5,PNo,zme,INo,qNo,Qme,NNo,jNo,q5,iIe,Hi,N5,Wme,fy,DNo,Hme,GNo,dIe,qo,my,ONo,Ui,VNo,FO,XNo,zNo,TO,QNo,WNo,HNo,gy,UNo,Ume,JNo,YNo,KNo,ct,hy,ZNo,Jme,ejo,ojo,Ji,rjo,Yme,tjo,ajo,MO,njo,sjo,ljo,j5,ijo,to,py,djo,Kme,cjo,fjo,Pa,mjo,Zme,gjo,hjo,ege,pjo,ujo,oge,_jo,bjo,vjo,O,D5,rge,Fjo,Tjo,EO,Mjo,Ejo,Cjo,G5,tge,wjo,Ajo,CO,yjo,Ljo,xjo,O5,age,$jo,kjo,wO,Sjo,Rjo,Bjo,V5,nge,Pjo,Ijo,AO,qjo,Njo,jjo,X5,sge,Djo,Gjo,yO,Ojo,Vjo,Xjo,z5,lge,zjo,Qjo,LO,Wjo,Hjo,Ujo,Q5,ige,Jjo,Yjo,xO,Kjo,Zjo,eDo,W5,dge,oDo,rDo,$O,tDo,aDo,nDo,H5,cge,sDo,lDo,kO,iDo,dDo,cDo,U5,fge,fDo,mDo,SO,gDo,hDo,pDo,J5,mge,uDo,_Do,RO,bDo,vDo,FDo,Y5,gge,TDo,MDo,BO,EDo,CDo,wDo,K5,hge,ADo,yDo,PO,LDo,xDo,$Do,Z5,pge,kDo,SDo,IO,RDo,BDo,PDo,ev,uge,IDo,qDo,qO,NDo,jDo,DDo,ov,_ge,GDo,ODo,NO,VDo,XDo,zDo,rv,bge,QDo,WDo,jO,HDo,UDo,JDo,tv,vge,YDo,KDo,DO,ZDo,eGo,oGo,av,Fge,rGo,tGo,GO,aGo,nGo,sGo,nv,Tge,lGo,iGo,OO,dGo,cGo,fGo,sv,Mge,mGo,gGo,VO,hGo,pGo,uGo,lv,Ege,_Go,bGo,XO,vGo,FGo,TGo,iv,Cge,MGo,EGo,zO,CGo,wGo,AGo,dv,wge,yGo,LGo,QO,xGo,$Go,kGo,cv,Age,SGo,RGo,WO,BGo,PGo,IGo,fv,yge,qGo,NGo,HO,jGo,DGo,GGo,mv,Lge,OGo,VGo,UO,XGo,zGo,QGo,gv,xge,WGo,HGo,JO,UGo,JGo,YGo,hv,$ge,KGo,ZGo,YO,eOo,oOo,rOo,pv,kge,tOo,aOo,KO,nOo,sOo,lOo,uv,Sge,iOo,dOo,ZO,cOo,fOo,mOo,_v,Rge,gOo,hOo,eV,pOo,uOo,_Oo,bv,Bge,bOo,vOo,oV,FOo,TOo,MOo,vv,Pge,EOo,COo,rV,wOo,AOo,yOo,Fv,Ige,LOo,xOo,tV,$Oo,kOo,SOo,Tv,qge,ROo,BOo,aV,POo,IOo,qOo,Mv,Nge,NOo,jOo,nV,DOo,GOo,OOo,Ev,jge,VOo,XOo,sV,zOo,QOo,WOo,Cv,Dge,HOo,UOo,lV,JOo,YOo,KOo,wv,ZOo,Gge,eVo,oVo,Oge,rVo,tVo,Av,cIe,Yi,yv,Vge,uy,aVo,Xge,nVo,fIe,No,_y,sVo,Ki,lVo,iV,iVo,dVo,dV,cVo,fVo,mVo,by,gVo,zge,hVo,pVo,uVo,ft,vy,_Vo,Qge,bVo,vVo,Zi,FVo,Wge,TVo,MVo,cV,EVo,CVo,wVo,Lv,AVo,ao,Fy,yVo,Hge,LVo,xVo,Ia,$Vo,Uge,kVo,SVo,Jge,RVo,BVo,Yge,PVo,IVo,qVo,Kge,xv,Zge,NVo,jVo,fV,DVo,GVo,OVo,$v,VVo,ehe,XVo,zVo,ohe,QVo,WVo,kv,mIe,ed,Sv,rhe,Ty,HVo,the,UVo,gIe,jo,My,JVo,od,YVo,mV,KVo,ZVo,gV,eXo,oXo,rXo,Ey,tXo,ahe,aXo,nXo,sXo,mt,Cy,lXo,nhe,iXo,dXo,rd,cXo,she,fXo,mXo,hV,gXo,hXo,pXo,Rv,uXo,no,wy,_Xo,lhe,bXo,vXo,qa,FXo,ihe,TXo,MXo,dhe,EXo,CXo,che,wXo,AXo,yXo,Fe,Bv,fhe,LXo,xXo,pV,$Xo,kXo,SXo,Pv,mhe,RXo,BXo,uV,PXo,IXo,qXo,Iv,ghe,NXo,jXo,_V,DXo,GXo,OXo,Rs,hhe,VXo,XXo,bV,zXo,QXo,vV,WXo,HXo,UXo,qv,phe,JXo,YXo,FV,KXo,ZXo,ezo,gt,uhe,ozo,rzo,TV,tzo,azo,MV,nzo,szo,EV,lzo,izo,dzo,Nv,_he,czo,fzo,CV,mzo,gzo,hzo,jv,bhe,pzo,uzo,wV,_zo,bzo,vzo,Dv,vhe,Fzo,Tzo,AV,Mzo,Ezo,Czo,Gv,Fhe,wzo,Azo,yV,yzo,Lzo,xzo,Ov,The,$zo,kzo,LV,Szo,Rzo,Bzo,Vv,Mhe,Pzo,Izo,xV,qzo,Nzo,jzo,Xv,Ehe,Dzo,Gzo,$V,Ozo,Vzo,Xzo,zv,zzo,Che,Qzo,Wzo,whe,Hzo,Uzo,Qv,hIe,td,Wv,Ahe,Ay,Jzo,yhe,Yzo,pIe,Do,yy,Kzo,ad,Zzo,kV,eQo,oQo,SV,rQo,tQo,aQo,Ly,nQo,Lhe,sQo,lQo,iQo,ht,xy,dQo,xhe,cQo,fQo,nd,mQo,$he,gQo,hQo,RV,pQo,uQo,_Qo,Hv,bQo,so,$y,vQo,khe,FQo,TQo,Na,MQo,She,EQo,CQo,Rhe,wQo,AQo,Bhe,yQo,LQo,xQo,Phe,Uv,Ihe,$Qo,kQo,BV,SQo,RQo,BQo,Jv,PQo,qhe,IQo,qQo,Nhe,NQo,jQo,Yv,uIe,sd,Kv,jhe,ky,DQo,Dhe,GQo,_Ie,Go,Sy,OQo,ld,VQo,PV,XQo,zQo,IV,QQo,WQo,HQo,Ry,UQo,Ghe,JQo,YQo,KQo,pt,By,ZQo,Ohe,eWo,oWo,id,rWo,Vhe,tWo,aWo,qV,nWo,sWo,lWo,Zv,iWo,lo,Py,dWo,Xhe,cWo,fWo,ja,mWo,zhe,gWo,hWo,Qhe,pWo,uWo,Whe,_Wo,bWo,vWo,Ne,eF,Hhe,FWo,TWo,NV,MWo,EWo,CWo,oF,Uhe,wWo,AWo,jV,yWo,LWo,xWo,rF,Jhe,$Wo,kWo,DV,SWo,RWo,BWo,tF,Yhe,PWo,IWo,GV,qWo,NWo,jWo,aF,Khe,DWo,GWo,OV,OWo,VWo,XWo,nF,Zhe,zWo,QWo,VV,WWo,HWo,UWo,sF,epe,JWo,YWo,XV,KWo,ZWo,eHo,lF,ope,oHo,rHo,zV,tHo,aHo,nHo,iF,sHo,rpe,lHo,iHo,tpe,dHo,cHo,dF,bIe,dd,cF,ape,Iy,fHo,npe,mHo,vIe,Oo,qy,gHo,cd,hHo,QV,pHo,uHo,WV,_Ho,bHo,vHo,Ny,FHo,spe,THo,MHo,EHo,ut,jy,CHo,lpe,wHo,AHo,fd,yHo,ipe,LHo,xHo,HV,$Ho,kHo,SHo,fF,RHo,io,Dy,BHo,dpe,PHo,IHo,Da,qHo,cpe,NHo,jHo,fpe,DHo,GHo,mpe,OHo,VHo,XHo,Ga,mF,gpe,zHo,QHo,UV,WHo,HHo,UHo,gF,hpe,JHo,YHo,JV,KHo,ZHo,eUo,hF,ppe,oUo,rUo,YV,tUo,aUo,nUo,pF,upe,sUo,lUo,KV,iUo,dUo,cUo,uF,fUo,_pe,mUo,gUo,bpe,hUo,pUo,_F,FIe,md,bF,vpe,Gy,uUo,Fpe,_Uo,TIe,Vo,Oy,bUo,gd,vUo,ZV,FUo,TUo,eX,MUo,EUo,CUo,Vy,wUo,Tpe,AUo,yUo,LUo,_t,Xy,xUo,Mpe,$Uo,kUo,hd,SUo,Epe,RUo,BUo,oX,PUo,IUo,qUo,vF,NUo,co,zy,jUo,Cpe,DUo,GUo,Oa,OUo,wpe,VUo,XUo,Ape,zUo,QUo,ype,WUo,HUo,UUo,je,FF,Lpe,JUo,YUo,rX,KUo,ZUo,eJo,TF,xpe,oJo,rJo,tX,tJo,aJo,nJo,MF,$pe,sJo,lJo,aX,iJo,dJo,cJo,EF,kpe,fJo,mJo,nX,gJo,hJo,pJo,CF,Spe,uJo,_Jo,sX,bJo,vJo,FJo,wF,Rpe,TJo,MJo,lX,EJo,CJo,wJo,AF,Bpe,AJo,yJo,iX,LJo,xJo,$Jo,yF,Ppe,kJo,SJo,dX,RJo,BJo,PJo,LF,IJo,Ipe,qJo,NJo,qpe,jJo,DJo,xF,MIe,pd,$F,Npe,Qy,GJo,jpe,OJo,EIe,Xo,Wy,VJo,ud,XJo,cX,zJo,QJo,fX,WJo,HJo,UJo,Hy,JJo,Dpe,YJo,KJo,ZJo,bt,Uy,eYo,Gpe,oYo,rYo,_d,tYo,Ope,aYo,nYo,mX,sYo,lYo,iYo,kF,dYo,fo,Jy,cYo,Vpe,fYo,mYo,Va,gYo,Xpe,hYo,pYo,zpe,uYo,_Yo,Qpe,bYo,vYo,FYo,Yy,SF,Wpe,TYo,MYo,gX,EYo,CYo,wYo,RF,Hpe,AYo,yYo,hX,LYo,xYo,$Yo,BF,kYo,Upe,SYo,RYo,Jpe,BYo,PYo,PF,CIe,bd,IF,Ype,Ky,IYo,Kpe,qYo,wIe,zo,Zy,NYo,vd,jYo,pX,DYo,GYo,uX,OYo,VYo,XYo,eL,zYo,Zpe,QYo,WYo,HYo,vt,oL,UYo,eue,JYo,YYo,Fd,KYo,oue,ZYo,eKo,_X,oKo,rKo,tKo,qF,aKo,mo,rL,nKo,rue,sKo,lKo,Xa,iKo,tue,dKo,cKo,aue,fKo,mKo,nue,gKo,hKo,pKo,za,NF,sue,uKo,_Ko,bX,bKo,vKo,FKo,jF,lue,TKo,MKo,vX,EKo,CKo,wKo,DF,iue,AKo,yKo,FX,LKo,xKo,$Ko,GF,due,kKo,SKo,TX,RKo,BKo,PKo,OF,IKo,cue,qKo,NKo,fue,jKo,DKo,VF,AIe,Td,XF,mue,tL,GKo,gue,OKo,yIe,Qo,aL,VKo,Md,XKo,MX,zKo,QKo,EX,WKo,HKo,UKo,nL,JKo,hue,YKo,KKo,ZKo,Ft,sL,eZo,pue,oZo,rZo,Ed,tZo,uue,aZo,nZo,CX,sZo,lZo,iZo,zF,dZo,go,lL,cZo,_ue,fZo,mZo,Qa,gZo,bue,hZo,pZo,vue,uZo,_Zo,Fue,bZo,vZo,FZo,Cd,QF,Tue,TZo,MZo,wX,EZo,CZo,wZo,WF,Mue,AZo,yZo,AX,LZo,xZo,$Zo,HF,Eue,kZo,SZo,yX,RZo,BZo,PZo,UF,IZo,Cue,qZo,NZo,wue,jZo,DZo,JF,LIe,wd,YF,Aue,iL,GZo,yue,OZo,xIe,Wo,dL,VZo,Ad,XZo,LX,zZo,QZo,xX,WZo,HZo,UZo,cL,JZo,Lue,YZo,KZo,ZZo,Tt,fL,eer,xue,oer,rer,yd,ter,$ue,aer,ner,$X,ser,ler,ier,KF,der,ho,mL,cer,kue,fer,mer,Wa,ger,Sue,her,per,Rue,uer,_er,Bue,ber,ver,Fer,gL,ZF,Pue,Ter,Mer,kX,Eer,Cer,wer,e0,Iue,Aer,yer,SX,Ler,xer,$er,o0,ker,que,Ser,Rer,Nue,Ber,Per,r0,$Ie,Ld,t0,jue,hL,Ier,Due,qer,kIe,Ho,pL,Ner,xd,jer,RX,Der,Ger,BX,Oer,Ver,Xer,uL,zer,Gue,Qer,Wer,Her,Mt,_L,Uer,Oue,Jer,Yer,$d,Ker,Vue,Zer,eor,PX,oor,ror,tor,a0,aor,po,bL,nor,Xue,sor,lor,Ha,ior,zue,dor,cor,Que,mor,gor,Wue,hor,por,uor,Hue,n0,Uue,_or,bor,IX,vor,For,Tor,s0,Mor,Jue,Eor,Cor,Yue,wor,Aor,l0,SIe,kd,i0,Kue,vL,yor,Zue,Lor,RIe,Uo,FL,xor,Sd,$or,qX,kor,Sor,NX,Ror,Bor,Por,TL,Ior,e_e,qor,Nor,jor,Et,ML,Dor,o_e,Gor,Oor,Rd,Vor,r_e,Xor,zor,jX,Qor,Wor,Hor,d0,Uor,uo,EL,Jor,t_e,Yor,Kor,Ua,Zor,a_e,err,orr,n_e,rrr,trr,s_e,arr,nrr,srr,Ja,c0,l_e,lrr,irr,DX,drr,crr,frr,f0,i_e,mrr,grr,GX,hrr,prr,urr,m0,d_e,_rr,brr,OX,vrr,Frr,Trr,g0,c_e,Mrr,Err,VX,Crr,wrr,Arr,h0,yrr,f_e,Lrr,xrr,m_e,$rr,krr,p0,BIe,Bd,u0,g_e,CL,Srr,h_e,Rrr,PIe,Jo,wL,Brr,Pd,Prr,XX,Irr,qrr,zX,Nrr,jrr,Drr,AL,Grr,p_e,Orr,Vrr,Xrr,Ct,yL,zrr,u_e,Qrr,Wrr,Id,Hrr,__e,Urr,Jrr,QX,Yrr,Krr,Zrr,_0,etr,_o,LL,otr,b_e,rtr,ttr,Ya,atr,v_e,ntr,str,F_e,ltr,itr,T_e,dtr,ctr,ftr,M_e,b0,E_e,mtr,gtr,WX,htr,ptr,utr,v0,_tr,C_e,btr,vtr,w_e,Ftr,Ttr,F0,IIe,qd,T0,A_e,xL,Mtr,y_e,Etr,qIe,Yo,$L,Ctr,Nd,wtr,HX,Atr,ytr,UX,Ltr,xtr,$tr,kL,ktr,L_e,Str,Rtr,Btr,wt,SL,Ptr,x_e,Itr,qtr,jd,Ntr,$_e,jtr,Dtr,JX,Gtr,Otr,Vtr,M0,Xtr,wr,RL,ztr,k_e,Qtr,Wtr,Ka,Htr,S_e,Utr,Jtr,R_e,Ytr,Ktr,B_e,Ztr,ear,oar,N,E0,P_e,rar,tar,YX,aar,nar,sar,C0,I_e,lar,iar,KX,dar,car,far,w0,q_e,mar,gar,ZX,har,par,uar,A0,N_e,_ar,bar,ez,Far,Tar,Mar,y0,j_e,Ear,Car,oz,war,Aar,yar,L0,D_e,Lar,xar,rz,$ar,kar,Sar,x0,G_e,Rar,Bar,tz,Par,Iar,qar,$0,O_e,Nar,jar,az,Dar,Gar,Oar,k0,V_e,Var,Xar,nz,zar,Qar,War,S0,X_e,Har,Uar,sz,Jar,Yar,Kar,R0,z_e,Zar,enr,lz,onr,rnr,tnr,B0,Q_e,anr,nnr,iz,snr,lnr,inr,P0,W_e,dnr,cnr,dz,fnr,mnr,gnr,I0,H_e,hnr,pnr,cz,unr,_nr,bnr,q0,U_e,vnr,Fnr,fz,Tnr,Mnr,Enr,N0,J_e,Cnr,wnr,mz,Anr,ynr,Lnr,j0,Y_e,xnr,$nr,gz,knr,Snr,Rnr,Bs,K_e,Bnr,Pnr,hz,Inr,qnr,pz,Nnr,jnr,Dnr,D0,Z_e,Gnr,Onr,uz,Vnr,Xnr,znr,G0,e2e,Qnr,Wnr,_z,Hnr,Unr,Jnr,O0,o2e,Ynr,Knr,bz,Znr,esr,osr,V0,r2e,rsr,tsr,vz,asr,nsr,ssr,X0,t2e,lsr,isr,Fz,dsr,csr,fsr,z0,a2e,msr,gsr,Tz,hsr,psr,usr,Q0,n2e,_sr,bsr,Mz,vsr,Fsr,Tsr,W0,s2e,Msr,Esr,Ez,Csr,wsr,Asr,H0,l2e,ysr,Lsr,Cz,xsr,$sr,ksr,U0,i2e,Ssr,Rsr,wz,Bsr,Psr,Isr,J0,d2e,qsr,Nsr,Az,jsr,Dsr,Gsr,Y0,c2e,Osr,Vsr,yz,Xsr,zsr,Qsr,K0,f2e,Wsr,Hsr,Lz,Usr,Jsr,Ysr,Z0,m2e,Ksr,Zsr,xz,elr,olr,rlr,eT,g2e,tlr,alr,$z,nlr,slr,llr,oT,h2e,ilr,dlr,kz,clr,flr,mlr,rT,p2e,glr,hlr,Sz,plr,ulr,_lr,tT,u2e,blr,vlr,Rz,Flr,Tlr,Mlr,aT,_2e,Elr,Clr,Bz,wlr,Alr,ylr,nT,b2e,Llr,xlr,Pz,$lr,klr,Slr,sT,v2e,Rlr,Blr,Iz,Plr,Ilr,qlr,lT,F2e,Nlr,jlr,qz,Dlr,Glr,Olr,iT,T2e,Vlr,Xlr,Nz,zlr,Qlr,Wlr,dT,M2e,Hlr,Ulr,jz,Jlr,Ylr,Klr,cT,E2e,Zlr,eir,Dz,oir,rir,tir,fT,C2e,air,nir,Gz,sir,lir,iir,mT,w2e,dir,cir,Oz,fir,mir,gir,gT,NIe,Dd,hT,A2e,BL,hir,y2e,pir,jIe,Ko,PL,uir,Gd,_ir,Vz,bir,vir,Xz,Fir,Tir,Mir,IL,Eir,L2e,Cir,wir,Air,At,qL,yir,x2e,Lir,xir,Od,$ir,$2e,kir,Sir,zz,Rir,Bir,Pir,pT,Iir,Ar,NL,qir,k2e,Nir,jir,Za,Dir,S2e,Gir,Oir,R2e,Vir,Xir,B2e,zir,Qir,Wir,se,uT,P2e,Hir,Uir,Qz,Jir,Yir,Kir,_T,I2e,Zir,edr,Wz,odr,rdr,tdr,bT,q2e,adr,ndr,Hz,sdr,ldr,idr,vT,N2e,ddr,cdr,Uz,fdr,mdr,gdr,FT,j2e,hdr,pdr,Jz,udr,_dr,bdr,TT,D2e,vdr,Fdr,Yz,Tdr,Mdr,Edr,MT,G2e,Cdr,wdr,Kz,Adr,ydr,Ldr,ET,O2e,xdr,$dr,Zz,kdr,Sdr,Rdr,CT,V2e,Bdr,Pdr,eQ,Idr,qdr,Ndr,wT,X2e,jdr,Ddr,oQ,Gdr,Odr,Vdr,AT,z2e,Xdr,zdr,rQ,Qdr,Wdr,Hdr,yT,Q2e,Udr,Jdr,tQ,Ydr,Kdr,Zdr,LT,W2e,ecr,ocr,aQ,rcr,tcr,acr,xT,H2e,ncr,scr,nQ,lcr,icr,dcr,$T,U2e,ccr,fcr,sQ,mcr,gcr,hcr,kT,J2e,pcr,ucr,lQ,_cr,bcr,vcr,ST,Y2e,Fcr,Tcr,iQ,Mcr,Ecr,Ccr,RT,K2e,wcr,Acr,dQ,ycr,Lcr,xcr,BT,Z2e,$cr,kcr,cQ,Scr,Rcr,Bcr,PT,e1e,Pcr,Icr,fQ,qcr,Ncr,jcr,IT,o1e,Dcr,Gcr,mQ,Ocr,Vcr,Xcr,qT,r1e,zcr,Qcr,gQ,Wcr,Hcr,Ucr,NT,t1e,Jcr,Ycr,hQ,Kcr,Zcr,efr,jT,DIe,Vd,DT,a1e,jL,ofr,n1e,rfr,GIe,Zo,DL,tfr,Xd,afr,pQ,nfr,sfr,uQ,lfr,ifr,dfr,GL,cfr,s1e,ffr,mfr,gfr,yt,OL,hfr,l1e,pfr,ufr,zd,_fr,i1e,bfr,vfr,_Q,Ffr,Tfr,Mfr,GT,Efr,yr,VL,Cfr,d1e,wfr,Afr,en,yfr,c1e,Lfr,xfr,f1e,$fr,kfr,m1e,Sfr,Rfr,Bfr,Te,OT,g1e,Pfr,Ifr,bQ,qfr,Nfr,jfr,VT,h1e,Dfr,Gfr,vQ,Ofr,Vfr,Xfr,XT,p1e,zfr,Qfr,FQ,Wfr,Hfr,Ufr,zT,u1e,Jfr,Yfr,TQ,Kfr,Zfr,emr,QT,_1e,omr,rmr,MQ,tmr,amr,nmr,WT,b1e,smr,lmr,EQ,imr,dmr,cmr,HT,v1e,fmr,mmr,CQ,gmr,hmr,pmr,UT,F1e,umr,_mr,wQ,bmr,vmr,Fmr,JT,T1e,Tmr,Mmr,AQ,Emr,Cmr,wmr,YT,M1e,Amr,ymr,yQ,Lmr,xmr,$mr,KT,E1e,kmr,Smr,LQ,Rmr,Bmr,Pmr,ZT,C1e,Imr,qmr,xQ,Nmr,jmr,Dmr,e7,OIe,Qd,o7,w1e,XL,Gmr,A1e,Omr,VIe,er,zL,Vmr,Wd,Xmr,$Q,zmr,Qmr,kQ,Wmr,Hmr,Umr,QL,Jmr,y1e,Ymr,Kmr,Zmr,Lt,WL,egr,L1e,ogr,rgr,Hd,tgr,x1e,agr,ngr,SQ,sgr,lgr,igr,r7,dgr,Lr,HL,cgr,$1e,fgr,mgr,on,ggr,k1e,hgr,pgr,S1e,ugr,_gr,R1e,bgr,vgr,Fgr,Ud,t7,B1e,Tgr,Mgr,RQ,Egr,Cgr,wgr,a7,P1e,Agr,ygr,BQ,Lgr,xgr,$gr,n7,I1e,kgr,Sgr,PQ,Rgr,Bgr,Pgr,s7,XIe,Jd,l7,q1e,UL,Igr,N1e,qgr,zIe,or,JL,Ngr,Yd,jgr,IQ,Dgr,Ggr,qQ,Ogr,Vgr,Xgr,YL,zgr,j1e,Qgr,Wgr,Hgr,xt,KL,Ugr,D1e,Jgr,Ygr,Kd,Kgr,G1e,Zgr,ehr,NQ,ohr,rhr,thr,i7,ahr,xr,ZL,nhr,O1e,shr,lhr,rn,ihr,V1e,dhr,chr,X1e,fhr,mhr,z1e,ghr,hhr,phr,ie,d7,Q1e,uhr,_hr,jQ,bhr,vhr,Fhr,c7,W1e,Thr,Mhr,DQ,Ehr,Chr,whr,f7,H1e,Ahr,yhr,GQ,Lhr,xhr,$hr,m7,U1e,khr,Shr,OQ,Rhr,Bhr,Phr,g7,J1e,Ihr,qhr,VQ,Nhr,jhr,Dhr,h7,Y1e,Ghr,Ohr,XQ,Vhr,Xhr,zhr,p7,K1e,Qhr,Whr,zQ,Hhr,Uhr,Jhr,u7,Z1e,Yhr,Khr,QQ,Zhr,epr,opr,_7,ebe,rpr,tpr,WQ,apr,npr,spr,b7,obe,lpr,ipr,HQ,dpr,cpr,fpr,v7,rbe,mpr,gpr,UQ,hpr,ppr,upr,F7,tbe,_pr,bpr,JQ,vpr,Fpr,Tpr,T7,abe,Mpr,Epr,YQ,Cpr,wpr,Apr,M7,nbe,ypr,Lpr,KQ,xpr,$pr,kpr,E7,sbe,Spr,Rpr,ZQ,Bpr,Ppr,Ipr,C7,lbe,qpr,Npr,eW,jpr,Dpr,Gpr,w7,ibe,Opr,Vpr,oW,Xpr,zpr,Qpr,A7,dbe,Wpr,Hpr,rW,Upr,Jpr,Ypr,y7,cbe,Kpr,Zpr,tW,eur,our,rur,L7,fbe,tur,aur,aW,nur,sur,lur,x7,QIe,Zd,$7,mbe,e8,iur,gbe,dur,WIe,rr,o8,cur,ec,fur,nW,mur,gur,sW,hur,pur,uur,r8,_ur,hbe,bur,vur,Fur,$t,t8,Tur,pbe,Mur,Eur,oc,Cur,ube,wur,Aur,lW,yur,Lur,xur,k7,$ur,$r,a8,kur,_be,Sur,Rur,tn,Bur,bbe,Pur,Iur,vbe,qur,Nur,Fbe,jur,Dur,Gur,ye,S7,Tbe,Our,Vur,iW,Xur,zur,Qur,R7,Mbe,Wur,Hur,dW,Uur,Jur,Yur,B7,Ebe,Kur,Zur,cW,e_r,o_r,r_r,P7,Cbe,t_r,a_r,fW,n_r,s_r,l_r,I7,wbe,i_r,d_r,mW,c_r,f_r,m_r,q7,Abe,g_r,h_r,gW,p_r,u_r,__r,N7,ybe,b_r,v_r,hW,F_r,T_r,M_r,j7,Lbe,E_r,C_r,pW,w_r,A_r,y_r,D7,xbe,L_r,x_r,uW,$_r,k_r,S_r,G7,$be,R_r,B_r,_W,P_r,I_r,q_r,O7,HIe,rc,V7,kbe,n8,N_r,Sbe,j_r,UIe,tr,s8,D_r,tc,G_r,bW,O_r,V_r,vW,X_r,z_r,Q_r,l8,W_r,Rbe,H_r,U_r,J_r,kt,i8,Y_r,Bbe,K_r,Z_r,ac,e2r,Pbe,o2r,r2r,FW,t2r,a2r,n2r,X7,s2r,kr,d8,l2r,Ibe,i2r,d2r,an,c2r,qbe,f2r,m2r,Nbe,g2r,h2r,jbe,p2r,u2r,_2r,Z,z7,Dbe,b2r,v2r,TW,F2r,T2r,M2r,Q7,Gbe,E2r,C2r,MW,w2r,A2r,y2r,W7,Obe,L2r,x2r,EW,$2r,k2r,S2r,H7,Vbe,R2r,B2r,CW,P2r,I2r,q2r,U7,Xbe,N2r,j2r,wW,D2r,G2r,O2r,J7,zbe,V2r,X2r,AW,z2r,Q2r,W2r,Y7,Qbe,H2r,U2r,yW,J2r,Y2r,K2r,K7,Wbe,Z2r,e1r,LW,o1r,r1r,t1r,Z7,Hbe,a1r,n1r,xW,s1r,l1r,i1r,eM,Ube,d1r,c1r,$W,f1r,m1r,g1r,oM,Jbe,h1r,p1r,kW,u1r,_1r,b1r,rM,Ybe,v1r,F1r,SW,T1r,M1r,E1r,tM,Kbe,C1r,w1r,RW,A1r,y1r,L1r,aM,Zbe,x1r,$1r,BW,k1r,S1r,R1r,nM,e5e,B1r,P1r,PW,I1r,q1r,N1r,sM,o5e,j1r,D1r,IW,G1r,O1r,V1r,lM,r5e,X1r,z1r,qW,Q1r,W1r,H1r,iM,t5e,U1r,J1r,NW,Y1r,K1r,Z1r,dM,a5e,ebr,obr,jW,rbr,tbr,abr,cM,n5e,nbr,sbr,DW,lbr,ibr,dbr,fM,s5e,cbr,fbr,GW,mbr,gbr,hbr,mM,l5e,pbr,ubr,OW,_br,bbr,vbr,gM,i5e,Fbr,Tbr,VW,Mbr,Ebr,Cbr,hM,d5e,wbr,Abr,XW,ybr,Lbr,xbr,pM,c5e,$br,kbr,zW,Sbr,Rbr,Bbr,uM,f5e,Pbr,Ibr,QW,qbr,Nbr,jbr,_M,JIe,nc,bM,m5e,c8,Dbr,g5e,Gbr,YIe,ar,f8,Obr,sc,Vbr,WW,Xbr,zbr,HW,Qbr,Wbr,Hbr,m8,Ubr,h5e,Jbr,Ybr,Kbr,St,g8,Zbr,p5e,e5r,o5r,lc,r5r,u5e,t5r,a5r,UW,n5r,s5r,l5r,vM,i5r,Sr,h8,d5r,_5e,c5r,f5r,nn,m5r,b5e,g5r,h5r,v5e,p5r,u5r,F5e,_5r,b5r,v5r,he,FM,T5e,F5r,T5r,JW,M5r,E5r,C5r,TM,M5e,w5r,A5r,YW,y5r,L5r,x5r,MM,E5e,$5r,k5r,KW,S5r,R5r,B5r,EM,C5e,P5r,I5r,ZW,q5r,N5r,j5r,CM,w5e,D5r,G5r,eH,O5r,V5r,X5r,wM,A5e,z5r,Q5r,oH,W5r,H5r,U5r,AM,y5e,J5r,Y5r,rH,K5r,Z5r,evr,yM,L5e,ovr,rvr,tH,tvr,avr,nvr,LM,x5e,svr,lvr,aH,ivr,dvr,cvr,xM,$5e,fvr,mvr,nH,gvr,hvr,pvr,$M,k5e,uvr,_vr,sH,bvr,vvr,Fvr,kM,S5e,Tvr,Mvr,lH,Evr,Cvr,wvr,SM,R5e,Avr,yvr,iH,Lvr,xvr,$vr,RM,B5e,kvr,Svr,dH,Rvr,Bvr,Pvr,BM,P5e,Ivr,qvr,cH,Nvr,jvr,Dvr,PM,I5e,Gvr,Ovr,fH,Vvr,Xvr,zvr,IM,q5e,Qvr,Wvr,mH,Hvr,Uvr,Jvr,qM,KIe,ic,NM,N5e,p8,Yvr,j5e,Kvr,ZIe,nr,u8,Zvr,dc,eFr,gH,oFr,rFr,hH,tFr,aFr,nFr,_8,sFr,D5e,lFr,iFr,dFr,Rt,b8,cFr,G5e,fFr,mFr,cc,gFr,O5e,hFr,pFr,pH,uFr,_Fr,bFr,jM,vFr,Rr,v8,FFr,V5e,TFr,MFr,sn,EFr,X5e,CFr,wFr,z5e,AFr,yFr,Q5e,LFr,xFr,$Fr,F8,DM,W5e,kFr,SFr,uH,RFr,BFr,PFr,GM,H5e,IFr,qFr,_H,NFr,jFr,DFr,OM,eqe,fc,VM,U5e,T8,GFr,J5e,OFr,oqe,sr,M8,VFr,mc,XFr,bH,zFr,QFr,vH,WFr,HFr,UFr,E8,JFr,Y5e,YFr,KFr,ZFr,Bt,C8,e0r,K5e,o0r,r0r,gc,t0r,Z5e,a0r,n0r,FH,s0r,l0r,i0r,XM,d0r,Br,w8,c0r,eve,f0r,m0r,ln,g0r,ove,h0r,p0r,rve,u0r,_0r,tve,b0r,v0r,F0r,ave,zM,nve,T0r,M0r,TH,E0r,C0r,w0r,QM,rqe,hc,WM,sve,A8,A0r,lve,y0r,tqe,lr,y8,L0r,pc,x0r,MH,$0r,k0r,EH,S0r,R0r,B0r,L8,P0r,ive,I0r,q0r,N0r,Pt,x8,j0r,dve,D0r,G0r,uc,O0r,cve,V0r,X0r,CH,z0r,Q0r,W0r,HM,H0r,Pr,$8,U0r,fve,J0r,Y0r,dn,K0r,mve,Z0r,eTr,gve,oTr,rTr,hve,tTr,aTr,nTr,de,UM,pve,sTr,lTr,wH,iTr,dTr,cTr,JM,uve,fTr,mTr,AH,gTr,hTr,pTr,YM,_ve,uTr,_Tr,yH,bTr,vTr,FTr,KM,bve,TTr,MTr,LH,ETr,CTr,wTr,ZM,vve,ATr,yTr,xH,LTr,xTr,$Tr,e4,Fve,kTr,STr,$H,RTr,BTr,PTr,o4,Tve,ITr,qTr,kH,NTr,jTr,DTr,r4,Mve,GTr,OTr,SH,VTr,XTr,zTr,t4,Eve,QTr,WTr,RH,HTr,UTr,JTr,a4,Cve,YTr,KTr,BH,ZTr,e7r,o7r,n4,wve,r7r,t7r,PH,a7r,n7r,s7r,s4,Ave,l7r,i7r,IH,d7r,c7r,f7r,l4,yve,m7r,g7r,qH,h7r,p7r,u7r,i4,Lve,_7r,b7r,NH,v7r,F7r,T7r,d4,xve,M7r,E7r,jH,C7r,w7r,A7r,c4,$ve,y7r,L7r,DH,x7r,$7r,k7r,f4,kve,S7r,R7r,GH,B7r,P7r,I7r,m4,Sve,q7r,N7r,OH,j7r,D7r,G7r,g4,Rve,O7r,V7r,VH,X7r,z7r,Q7r,h4,Bve,W7r,H7r,XH,U7r,J7r,Y7r,p4,aqe,_c,u4,Pve,k8,K7r,Ive,Z7r,nqe,ir,S8,eMr,bc,oMr,zH,rMr,tMr,QH,aMr,nMr,sMr,R8,lMr,qve,iMr,dMr,cMr,It,B8,fMr,Nve,mMr,gMr,vc,hMr,jve,pMr,uMr,WH,_Mr,bMr,vMr,_4,FMr,Ir,P8,TMr,Dve,MMr,EMr,cn,CMr,Gve,wMr,AMr,Ove,yMr,LMr,Vve,xMr,$Mr,kMr,ce,b4,Xve,SMr,RMr,HH,BMr,PMr,IMr,v4,zve,qMr,NMr,UH,jMr,DMr,GMr,F4,Qve,OMr,VMr,JH,XMr,zMr,QMr,T4,Wve,WMr,HMr,YH,UMr,JMr,YMr,M4,Hve,KMr,ZMr,KH,e4r,o4r,r4r,E4,Uve,t4r,a4r,ZH,n4r,s4r,l4r,C4,Jve,i4r,d4r,eU,c4r,f4r,m4r,w4,Yve,g4r,h4r,oU,p4r,u4r,_4r,A4,Kve,b4r,v4r,rU,F4r,T4r,M4r,y4,Zve,E4r,C4r,tU,w4r,A4r,y4r,L4,eFe,L4r,x4r,aU,$4r,k4r,S4r,x4,oFe,R4r,B4r,nU,P4r,I4r,q4r,$4,rFe,N4r,j4r,sU,D4r,G4r,O4r,k4,tFe,V4r,X4r,lU,z4r,Q4r,W4r,S4,aFe,H4r,U4r,iU,J4r,Y4r,K4r,R4,nFe,Z4r,eEr,dU,oEr,rEr,tEr,B4,sFe,aEr,nEr,cU,sEr,lEr,iEr,P4,lFe,dEr,cEr,fU,fEr,mEr,gEr,I4,iFe,hEr,pEr,mU,uEr,_Er,bEr,q4,dFe,vEr,FEr,gU,TEr,MEr,EEr,N4,sqe,Fc,j4,cFe,I8,CEr,fFe,wEr,lqe,dr,q8,AEr,Tc,yEr,hU,LEr,xEr,pU,$Er,kEr,SEr,N8,REr,mFe,BEr,PEr,IEr,qt,j8,qEr,gFe,NEr,jEr,Mc,DEr,hFe,GEr,OEr,uU,VEr,XEr,zEr,D4,QEr,qr,D8,WEr,pFe,HEr,UEr,fn,JEr,uFe,YEr,KEr,_Fe,ZEr,eCr,bFe,oCr,rCr,tCr,vFe,G4,FFe,aCr,nCr,_U,sCr,lCr,iCr,O4,iqe,Ec,V4,TFe,G8,dCr,MFe,cCr,dqe,cr,O8,fCr,Cc,mCr,bU,gCr,hCr,vU,pCr,uCr,_Cr,V8,bCr,EFe,vCr,FCr,TCr,Nt,X8,MCr,CFe,ECr,CCr,wc,wCr,wFe,ACr,yCr,FU,LCr,xCr,$Cr,X4,kCr,Nr,z8,SCr,AFe,RCr,BCr,mn,PCr,yFe,ICr,qCr,LFe,NCr,jCr,xFe,DCr,GCr,OCr,$Fe,z4,kFe,VCr,XCr,TU,zCr,QCr,WCr,Q4,cqe,Ac,W4,SFe,Q8,HCr,RFe,UCr,fqe,fr,W8,JCr,yc,YCr,MU,KCr,ZCr,EU,e3r,o3r,r3r,H8,t3r,BFe,a3r,n3r,s3r,jt,U8,l3r,PFe,i3r,d3r,Lc,c3r,IFe,f3r,m3r,CU,g3r,h3r,p3r,H4,u3r,jr,J8,_3r,qFe,b3r,v3r,gn,F3r,NFe,T3r,M3r,jFe,E3r,C3r,DFe,w3r,A3r,y3r,re,U4,GFe,L3r,x3r,wU,$3r,k3r,S3r,J4,OFe,R3r,B3r,AU,P3r,I3r,q3r,Y4,VFe,N3r,j3r,yU,D3r,G3r,O3r,K4,XFe,V3r,X3r,LU,z3r,Q3r,W3r,Z4,zFe,H3r,U3r,xU,J3r,Y3r,K3r,eE,QFe,Z3r,ewr,$U,owr,rwr,twr,oE,WFe,awr,nwr,kU,swr,lwr,iwr,rE,HFe,dwr,cwr,SU,fwr,mwr,gwr,tE,UFe,hwr,pwr,RU,uwr,_wr,bwr,aE,JFe,vwr,Fwr,BU,Twr,Mwr,Ewr,nE,YFe,Cwr,wwr,PU,Awr,ywr,Lwr,sE,KFe,xwr,$wr,IU,kwr,Swr,Rwr,lE,ZFe,Bwr,Pwr,qU,Iwr,qwr,Nwr,iE,e0e,jwr,Dwr,NU,Gwr,Owr,Vwr,dE,o0e,Xwr,zwr,jU,Qwr,Wwr,Hwr,cE,r0e,Uwr,Jwr,DU,Ywr,Kwr,Zwr,fE,t0e,eAr,oAr,GU,rAr,tAr,aAr,mE,a0e,nAr,sAr,OU,lAr,iAr,dAr,gE,n0e,cAr,fAr,VU,mAr,gAr,hAr,hE,s0e,pAr,uAr,XU,_Ar,bAr,vAr,pE,l0e,FAr,TAr,zU,MAr,EAr,CAr,uE,i0e,wAr,AAr,QU,yAr,LAr,xAr,_E,d0e,$Ar,kAr,WU,SAr,RAr,BAr,bE,c0e,PAr,IAr,HU,qAr,NAr,jAr,vE,f0e,DAr,GAr,UU,OAr,VAr,XAr,FE,mqe,xc,TE,m0e,Y8,zAr,g0e,QAr,gqe,mr,K8,WAr,$c,HAr,JU,UAr,JAr,YU,YAr,KAr,ZAr,Z8,e6r,h0e,o6r,r6r,t6r,Dt,ex,a6r,p0e,n6r,s6r,kc,l6r,u0e,i6r,d6r,KU,c6r,f6r,m6r,ME,g6r,Dr,ox,h6r,_0e,p6r,u6r,hn,_6r,b0e,b6r,v6r,v0e,F6r,T6r,F0e,M6r,E6r,C6r,ke,EE,T0e,w6r,A6r,ZU,y6r,L6r,x6r,CE,M0e,$6r,k6r,eJ,S6r,R6r,B6r,wE,E0e,P6r,I6r,oJ,q6r,N6r,j6r,AE,C0e,D6r,G6r,rJ,O6r,V6r,X6r,yE,w0e,z6r,Q6r,tJ,W6r,H6r,U6r,LE,A0e,J6r,Y6r,aJ,K6r,Z6r,eyr,xE,y0e,oyr,ryr,nJ,tyr,ayr,nyr,$E,L0e,syr,lyr,sJ,iyr,dyr,cyr,kE,x0e,fyr,myr,lJ,gyr,hyr,pyr,SE,hqe,Sc,RE,$0e,rx,uyr,k0e,_yr,pqe,gr,tx,byr,Rc,vyr,iJ,Fyr,Tyr,dJ,Myr,Eyr,Cyr,ax,wyr,S0e,Ayr,yyr,Lyr,Gt,nx,xyr,R0e,$yr,kyr,Bc,Syr,B0e,Ryr,Byr,cJ,Pyr,Iyr,qyr,BE,Nyr,Gr,sx,jyr,P0e,Dyr,Gyr,pn,Oyr,I0e,Vyr,Xyr,q0e,zyr,Qyr,N0e,Wyr,Hyr,Uyr,Me,PE,j0e,Jyr,Yyr,fJ,Kyr,Zyr,eLr,IE,D0e,oLr,rLr,mJ,tLr,aLr,nLr,qE,G0e,sLr,lLr,gJ,iLr,dLr,cLr,NE,O0e,fLr,mLr,hJ,gLr,hLr,pLr,jE,V0e,uLr,_Lr,pJ,bLr,vLr,FLr,DE,X0e,TLr,MLr,uJ,ELr,CLr,wLr,GE,z0e,ALr,yLr,_J,LLr,xLr,$Lr,OE,Q0e,kLr,SLr,bJ,RLr,BLr,PLr,VE,W0e,ILr,qLr,vJ,NLr,jLr,DLr,XE,H0e,GLr,OLr,FJ,VLr,XLr,zLr,zE,U0e,QLr,WLr,TJ,HLr,ULr,JLr,QE,J0e,YLr,KLr,MJ,ZLr,e8r,o8r,WE,uqe,Pc,HE,Y0e,lx,r8r,K0e,t8r,_qe,hr,ix,a8r,Ic,n8r,EJ,s8r,l8r,CJ,i8r,d8r,c8r,dx,f8r,Z0e,m8r,g8r,h8r,Ot,cx,p8r,eTe,u8r,_8r,qc,b8r,oTe,v8r,F8r,wJ,T8r,M8r,E8r,UE,C8r,Or,fx,w8r,rTe,A8r,y8r,un,L8r,tTe,x8r,$8r,aTe,k8r,S8r,nTe,R8r,B8r,P8r,Le,JE,sTe,I8r,q8r,AJ,N8r,j8r,D8r,YE,lTe,G8r,O8r,yJ,V8r,X8r,z8r,KE,iTe,Q8r,W8r,LJ,H8r,U8r,J8r,ZE,dTe,Y8r,K8r,xJ,Z8r,exr,oxr,eC,cTe,rxr,txr,$J,axr,nxr,sxr,oC,fTe,lxr,ixr,kJ,dxr,cxr,fxr,rC,mTe,mxr,gxr,SJ,hxr,pxr,uxr,tC,gTe,_xr,bxr,RJ,vxr,Fxr,Txr,aC,hTe,Mxr,Exr,BJ,Cxr,wxr,Axr,nC,pTe,yxr,Lxr,PJ,xxr,$xr,kxr,sC,bqe,Nc,lC,uTe,mx,Sxr,_Te,Rxr,vqe,pr,gx,Bxr,jc,Pxr,IJ,Ixr,qxr,qJ,Nxr,jxr,Dxr,hx,Gxr,bTe,Oxr,Vxr,Xxr,Vt,px,zxr,vTe,Qxr,Wxr,Dc,Hxr,FTe,Uxr,Jxr,NJ,Yxr,Kxr,Zxr,iC,e9r,Vr,ux,o9r,TTe,r9r,t9r,_n,a9r,MTe,n9r,s9r,ETe,l9r,i9r,CTe,d9r,c9r,f9r,Se,dC,wTe,m9r,g9r,jJ,h9r,p9r,u9r,cC,ATe,_9r,b9r,DJ,v9r,F9r,T9r,fC,yTe,M9r,E9r,GJ,C9r,w9r,A9r,mC,LTe,y9r,L9r,OJ,x9r,$9r,k9r,gC,xTe,S9r,R9r,VJ,B9r,P9r,I9r,hC,$Te,q9r,N9r,XJ,j9r,D9r,G9r,pC,kTe,O9r,V9r,zJ,X9r,z9r,Q9r,uC,STe,W9r,H9r,QJ,U9r,J9r,Y9r,_C,RTe,K9r,Z9r,WJ,e$r,o$r,r$r,bC,Fqe,Gc,vC,BTe,_x,t$r,PTe,a$r,Tqe,ur,bx,n$r,Oc,s$r,HJ,l$r,i$r,UJ,d$r,c$r,f$r,vx,m$r,ITe,g$r,h$r,p$r,Xt,Fx,u$r,qTe,_$r,b$r,Vc,v$r,NTe,F$r,T$r,JJ,M$r,E$r,C$r,FC,w$r,Xr,Tx,A$r,jTe,y$r,L$r,bn,x$r,DTe,$$r,k$r,GTe,S$r,R$r,OTe,B$r,P$r,I$r,xe,TC,VTe,q$r,N$r,YJ,j$r,D$r,G$r,MC,XTe,O$r,V$r,KJ,X$r,z$r,Q$r,EC,zTe,W$r,H$r,ZJ,U$r,J$r,Y$r,CC,QTe,K$r,Z$r,eY,ekr,okr,rkr,wC,WTe,tkr,akr,oY,nkr,skr,lkr,AC,HTe,ikr,dkr,rY,ckr,fkr,mkr,yC,UTe,gkr,hkr,tY,pkr,ukr,_kr,LC,JTe,bkr,vkr,aY,Fkr,Tkr,Mkr,xC,YTe,Ekr,Ckr,nY,wkr,Akr,ykr,$C,KTe,Lkr,xkr,sY,$kr,kkr,Skr,kC,Mqe,Xc,SC,ZTe,Mx,Rkr,e7e,Bkr,Eqe,_r,Ex,Pkr,zc,Ikr,lY,qkr,Nkr,iY,jkr,Dkr,Gkr,Cx,Okr,o7e,Vkr,Xkr,zkr,zt,wx,Qkr,r7e,Wkr,Hkr,Qc,Ukr,t7e,Jkr,Ykr,dY,Kkr,Zkr,eSr,RC,oSr,zr,Ax,rSr,a7e,tSr,aSr,vn,nSr,n7e,sSr,lSr,s7e,iSr,dSr,l7e,cSr,fSr,mSr,$e,BC,i7e,gSr,hSr,cY,pSr,uSr,_Sr,PC,d7e,bSr,vSr,fY,FSr,TSr,MSr,IC,c7e,ESr,CSr,mY,wSr,ASr,ySr,qC,f7e,LSr,xSr,gY,$Sr,kSr,SSr,NC,m7e,RSr,BSr,hY,PSr,ISr,qSr,jC,g7e,NSr,jSr,pY,DSr,GSr,OSr,DC,h7e,VSr,XSr,uY,zSr,QSr,WSr,GC,p7e,HSr,USr,_Y,JSr,YSr,KSr,OC,u7e,ZSr,eRr,bY,oRr,rRr,tRr,VC,_7e,aRr,nRr,vY,sRr,lRr,iRr,XC,Cqe,Wc,zC,b7e,yx,dRr,v7e,cRr,wqe,br,Lx,fRr,Hc,mRr,FY,gRr,hRr,TY,pRr,uRr,_Rr,xx,bRr,F7e,vRr,FRr,TRr,Qt,$x,MRr,T7e,ERr,CRr,Uc,wRr,M7e,ARr,yRr,MY,LRr,xRr,$Rr,QC,kRr,Qr,kx,SRr,E7e,RRr,BRr,Fn,PRr,C7e,IRr,qRr,w7e,NRr,jRr,A7e,DRr,GRr,ORr,De,WC,y7e,VRr,XRr,EY,zRr,QRr,WRr,HC,L7e,HRr,URr,CY,JRr,YRr,KRr,UC,x7e,ZRr,eBr,wY,oBr,rBr,tBr,JC,$7e,aBr,nBr,AY,sBr,lBr,iBr,YC,k7e,dBr,cBr,yY,fBr,mBr,gBr,KC,S7e,hBr,pBr,LY,uBr,_Br,bBr,ZC,R7e,vBr,FBr,xY,TBr,MBr,EBr,e3,B7e,CBr,wBr,$Y,ABr,yBr,LBr,o3,Aqe,Jc,r3,P7e,Sx,xBr,I7e,$Br,yqe,vr,Rx,kBr,Yc,SBr,kY,RBr,BBr,SY,PBr,IBr,qBr,Bx,NBr,q7e,jBr,DBr,GBr,Wt,Px,OBr,N7e,VBr,XBr,Kc,zBr,j7e,QBr,WBr,RY,HBr,UBr,JBr,t3,YBr,Wr,Ix,KBr,D7e,ZBr,ePr,Tn,oPr,G7e,rPr,tPr,O7e,aPr,nPr,V7e,sPr,lPr,iPr,Ge,a3,X7e,dPr,cPr,BY,fPr,mPr,gPr,n3,z7e,hPr,pPr,PY,uPr,_Pr,bPr,s3,Q7e,vPr,FPr,IY,TPr,MPr,EPr,l3,W7e,CPr,wPr,qY,APr,yPr,LPr,i3,H7e,xPr,$Pr,NY,kPr,SPr,RPr,d3,U7e,BPr,PPr,jY,IPr,qPr,NPr,c3,J7e,jPr,DPr,DY,GPr,OPr,VPr,f3,Y7e,XPr,zPr,GY,QPr,WPr,HPr,m3,Lqe,Zc,g3,K7e,qx,UPr,Z7e,JPr,xqe,Fr,Nx,YPr,ef,KPr,OY,ZPr,eIr,VY,oIr,rIr,tIr,jx,aIr,eMe,nIr,sIr,lIr,Ht,Dx,iIr,oMe,dIr,cIr,of,fIr,rMe,mIr,gIr,XY,hIr,pIr,uIr,h3,_Ir,Hr,Gx,bIr,tMe,vIr,FIr,Mn,TIr,aMe,MIr,EIr,nMe,CIr,wIr,sMe,AIr,yIr,LIr,lMe,p3,iMe,xIr,$Ir,zY,kIr,SIr,RIr,u3,$qe,rf,_3,dMe,Ox,BIr,cMe,PIr,kqe,Tr,Vx,IIr,tf,qIr,QY,NIr,jIr,WY,DIr,GIr,OIr,Xx,VIr,fMe,XIr,zIr,QIr,Ut,zx,WIr,mMe,HIr,UIr,af,JIr,gMe,YIr,KIr,HY,ZIr,eqr,oqr,b3,rqr,Ur,Qx,tqr,hMe,aqr,nqr,En,sqr,pMe,lqr,iqr,uMe,dqr,cqr,_Me,fqr,mqr,gqr,Wx,v3,bMe,hqr,pqr,UY,uqr,_qr,bqr,F3,vMe,vqr,Fqr,JY,Tqr,Mqr,Eqr,T3,Sqe,nf,M3,FMe,Hx,Cqr,TMe,wqr,Rqe,Mr,Ux,Aqr,sf,yqr,YY,Lqr,xqr,KY,$qr,kqr,Sqr,Jx,Rqr,MMe,Bqr,Pqr,Iqr,Jt,Yx,qqr,EMe,Nqr,jqr,lf,Dqr,CMe,Gqr,Oqr,ZY,Vqr,Xqr,zqr,E3,Qqr,Jr,Kx,Wqr,wMe,Hqr,Uqr,Cn,Jqr,AMe,Yqr,Kqr,yMe,Zqr,eNr,LMe,oNr,rNr,tNr,xMe,C3,$Me,aNr,nNr,eK,sNr,lNr,iNr,w3,Bqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),HA=new ee({}),UA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new dNr({props:{warning:!0,$$slots:{default:[RAt]},$$scope:{ctx:A}}}),JA=new ee({}),YA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/configuration_auto.py#L570"}}),e6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/configuration_auto.py#L593"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),o6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/configuration_auto.py#L716"}}),r6=new ee({}),t6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/tokenization_auto.py#L381"}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17250/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/tokenization_auto.py#L395"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),l6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/tokenization_auto.py#L591"}}),i6=new ee({}),d6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/feature_extraction_auto.py#L180"}}),m6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17250/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),Mh=new dNr({props:{$$slots:{default:[IAt]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),g6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/feature_extraction_auto.py#L321"}}),h6=new ee({}),p6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/processing_auto.py#L80"}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/processing_auto.py#L94"}}),Gh=new dNr({props:{$$slots:{default:[NAt]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),v6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/processing_auto.py#L247"}}),F6=new ee({}),T6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L719"}}),E6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),C6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),w6=new ee({}),A6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L726"}}),L6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),x6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),$6=new ee({}),k6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L741"}}),R6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),B6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),f2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),P6=new ee({}),I6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L748"}}),N6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),g2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),D6=new ee({}),G6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L755"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),u1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),z6=new ee({}),Q6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L764"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),b1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),J6=new ee({}),Y6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L798"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L805"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L791"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L773"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),uy=new ee({}),_y=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L780"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L814"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L853"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L860"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L883"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L867"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L874"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L892"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L899"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L846"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L821"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L828"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_auto.py#L837"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[I6t]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[N6t]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),x7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),k7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[z6t]},$$scope:{ctx:A}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Q6t]},$$scope:{ctx:A}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[W6t]},$$scope:{ctx:A}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[H6t]},$$scope:{ctx:A}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[U6t]},$$scope:{ctx:A}}}),T8=new ee({}),M8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[J6t]},$$scope:{ctx:A}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Y6t]},$$scope:{ctx:A}}}),A8=new ee({}),y8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[K6t]},$$scope:{ctx:A}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Z6t]},$$scope:{ctx:A}}}),k8=new ee({}),S8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),I8=new ee({}),q8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),G8=new ee({}),O8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),Q8=new ee({}),W8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),U8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),Y8=new ee({}),K8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),rx=new ee({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),lx=new ee({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),mx=new ee({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),_x=new ee({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),Mx=new ee({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),yx=new ee({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),Sx=new ee({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),qx=new ee({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),Ox=new ee({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),Hx=new ee({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17250/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17250/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17250/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),XA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),zA=o("AutoConfig"),yn=o(", "),Ln=a("a"),QA=o("AutoModel"),fi=o(`, and
`),xn=a("a"),WA=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),f$=o("will create a model that is an instance of "),gi=a("a"),m$=o("BertModel"),g$=o("."),Eo=l(),Ea=a("p"),h$=o("There is one class of "),pf=a("code"),p$=o("AutoModel"),Oje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kPe=l(),hi=a("h2"),uf=a("a"),HZ=a("span"),F(HA.$$.fragment),Vje=l(),UZ=a("span"),Xje=o("Extending the Auto Classes"),SPe=l(),$n=a("p"),zje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),JZ=a("code"),Qje=o("NewModel"),Wje=o(", make sure you have a "),YZ=a("code"),Hje=o("NewModelConfig"),Uje=o(` then you can add those to the auto
classes like this:`),RPe=l(),F(UA.$$.fragment),BPe=l(),u$=a("p"),Jje=o("You will then be able to use the auto classes like you would usually do!"),PPe=l(),F(_f.$$.fragment),IPe=l(),pi=a("h2"),bf=a("a"),KZ=a("span"),F(JA.$$.fragment),Yje=l(),ZZ=a("span"),Kje=o("AutoConfig"),qPe=l(),Co=a("div"),F(YA.$$.fragment),Zje=l(),KA=a("p"),eDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_$=a("a"),oDe=o("from_pretrained()"),rDe=o(" class method."),tDe=l(),ZA=a("p"),aDe=o("This class cannot be instantiated directly using "),eee=a("code"),nDe=o("__init__()"),sDe=o(" (throws an error)."),lDe=l(),Er=a("div"),F(e6.$$.fragment),iDe=l(),oee=a("p"),dDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cDe=l(),ui=a("p"),fDe=o("The configuration class to instantiate is selected based on the "),ree=a("code"),mDe=o("model_type"),gDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tee=a("code"),hDe=o("pretrained_model_name_or_path"),pDe=o(":"),uDe=l(),y=a("ul"),vf=a("li"),aee=a("strong"),_De=o("albert"),bDe=o(" \u2014 "),b$=a("a"),vDe=o("AlbertConfig"),FDe=o(" (ALBERT model)"),TDe=l(),Ff=a("li"),nee=a("strong"),MDe=o("bart"),EDe=o(" \u2014 "),v$=a("a"),CDe=o("BartConfig"),wDe=o(" (BART model)"),ADe=l(),Tf=a("li"),see=a("strong"),yDe=o("beit"),LDe=o(" \u2014 "),F$=a("a"),xDe=o("BeitConfig"),$De=o(" (BEiT model)"),kDe=l(),Mf=a("li"),lee=a("strong"),SDe=o("bert"),RDe=o(" \u2014 "),T$=a("a"),BDe=o("BertConfig"),PDe=o(" (BERT model)"),IDe=l(),Ef=a("li"),iee=a("strong"),qDe=o("bert-generation"),NDe=o(" \u2014 "),M$=a("a"),jDe=o("BertGenerationConfig"),DDe=o(" (Bert Generation model)"),GDe=l(),Cf=a("li"),dee=a("strong"),ODe=o("big_bird"),VDe=o(" \u2014 "),E$=a("a"),XDe=o("BigBirdConfig"),zDe=o(" (BigBird model)"),QDe=l(),wf=a("li"),cee=a("strong"),WDe=o("bigbird_pegasus"),HDe=o(" \u2014 "),C$=a("a"),UDe=o("BigBirdPegasusConfig"),JDe=o(" (BigBirdPegasus model)"),YDe=l(),Af=a("li"),fee=a("strong"),KDe=o("blenderbot"),ZDe=o(" \u2014 "),w$=a("a"),eGe=o("BlenderbotConfig"),oGe=o(" (Blenderbot model)"),rGe=l(),yf=a("li"),mee=a("strong"),tGe=o("blenderbot-small"),aGe=o(" \u2014 "),A$=a("a"),nGe=o("BlenderbotSmallConfig"),sGe=o(" (BlenderbotSmall model)"),lGe=l(),Lf=a("li"),gee=a("strong"),iGe=o("camembert"),dGe=o(" \u2014 "),y$=a("a"),cGe=o("CamembertConfig"),fGe=o(" (CamemBERT model)"),mGe=l(),xf=a("li"),hee=a("strong"),gGe=o("canine"),hGe=o(" \u2014 "),L$=a("a"),pGe=o("CanineConfig"),uGe=o(" (Canine model)"),_Ge=l(),$f=a("li"),pee=a("strong"),bGe=o("clip"),vGe=o(" \u2014 "),x$=a("a"),FGe=o("CLIPConfig"),TGe=o(" (CLIP model)"),MGe=l(),kf=a("li"),uee=a("strong"),EGe=o("convbert"),CGe=o(" \u2014 "),$$=a("a"),wGe=o("ConvBertConfig"),AGe=o(" (ConvBERT model)"),yGe=l(),Sf=a("li"),_ee=a("strong"),LGe=o("convnext"),xGe=o(" \u2014 "),k$=a("a"),$Ge=o("ConvNextConfig"),kGe=o(" (ConvNext model)"),SGe=l(),Rf=a("li"),bee=a("strong"),RGe=o("ctrl"),BGe=o(" \u2014 "),S$=a("a"),PGe=o("CTRLConfig"),IGe=o(" (CTRL model)"),qGe=l(),Bf=a("li"),vee=a("strong"),NGe=o("data2vec-audio"),jGe=o(" \u2014 "),R$=a("a"),DGe=o("Data2VecAudioConfig"),GGe=o(" (Data2VecAudio model)"),OGe=l(),Pf=a("li"),Fee=a("strong"),VGe=o("data2vec-text"),XGe=o(" \u2014 "),B$=a("a"),zGe=o("Data2VecTextConfig"),QGe=o(" (Data2VecText model)"),WGe=l(),If=a("li"),Tee=a("strong"),HGe=o("data2vec-vision"),UGe=o(" \u2014 "),P$=a("a"),JGe=o("Data2VecVisionConfig"),YGe=o(" (Data2VecVision model)"),KGe=l(),qf=a("li"),Mee=a("strong"),ZGe=o("deberta"),eOe=o(" \u2014 "),I$=a("a"),oOe=o("DebertaConfig"),rOe=o(" (DeBERTa model)"),tOe=l(),Nf=a("li"),Eee=a("strong"),aOe=o("deberta-v2"),nOe=o(" \u2014 "),q$=a("a"),sOe=o("DebertaV2Config"),lOe=o(" (DeBERTa-v2 model)"),iOe=l(),jf=a("li"),Cee=a("strong"),dOe=o("decision_transformer"),cOe=o(" \u2014 "),N$=a("a"),fOe=o("DecisionTransformerConfig"),mOe=o(" (Decision Transformer model)"),gOe=l(),Df=a("li"),wee=a("strong"),hOe=o("deit"),pOe=o(" \u2014 "),j$=a("a"),uOe=o("DeiTConfig"),_Oe=o(" (DeiT model)"),bOe=l(),Gf=a("li"),Aee=a("strong"),vOe=o("detr"),FOe=o(" \u2014 "),D$=a("a"),TOe=o("DetrConfig"),MOe=o(" (DETR model)"),EOe=l(),Of=a("li"),yee=a("strong"),COe=o("distilbert"),wOe=o(" \u2014 "),G$=a("a"),AOe=o("DistilBertConfig"),yOe=o(" (DistilBERT model)"),LOe=l(),Vf=a("li"),Lee=a("strong"),xOe=o("dpr"),$Oe=o(" \u2014 "),O$=a("a"),kOe=o("DPRConfig"),SOe=o(" (DPR model)"),ROe=l(),Xf=a("li"),xee=a("strong"),BOe=o("dpt"),POe=o(" \u2014 "),V$=a("a"),IOe=o("DPTConfig"),qOe=o(" (DPT model)"),NOe=l(),zf=a("li"),$ee=a("strong"),jOe=o("electra"),DOe=o(" \u2014 "),X$=a("a"),GOe=o("ElectraConfig"),OOe=o(" (ELECTRA model)"),VOe=l(),Qf=a("li"),kee=a("strong"),XOe=o("encoder-decoder"),zOe=o(" \u2014 "),z$=a("a"),QOe=o("EncoderDecoderConfig"),WOe=o(" (Encoder decoder model)"),HOe=l(),Wf=a("li"),See=a("strong"),UOe=o("flaubert"),JOe=o(" \u2014 "),Q$=a("a"),YOe=o("FlaubertConfig"),KOe=o(" (FlauBERT model)"),ZOe=l(),Hf=a("li"),Ree=a("strong"),eVe=o("flava"),oVe=o(" \u2014 "),W$=a("a"),rVe=o("FlavaConfig"),tVe=o(" (Flava model)"),aVe=l(),Uf=a("li"),Bee=a("strong"),nVe=o("fnet"),sVe=o(" \u2014 "),H$=a("a"),lVe=o("FNetConfig"),iVe=o(" (FNet model)"),dVe=l(),Jf=a("li"),Pee=a("strong"),cVe=o("fsmt"),fVe=o(" \u2014 "),U$=a("a"),mVe=o("FSMTConfig"),gVe=o(" (FairSeq Machine-Translation model)"),hVe=l(),Yf=a("li"),Iee=a("strong"),pVe=o("funnel"),uVe=o(" \u2014 "),J$=a("a"),_Ve=o("FunnelConfig"),bVe=o(" (Funnel Transformer model)"),vVe=l(),Kf=a("li"),qee=a("strong"),FVe=o("glpn"),TVe=o(" \u2014 "),Y$=a("a"),MVe=o("GLPNConfig"),EVe=o(" (GLPN model)"),CVe=l(),Zf=a("li"),Nee=a("strong"),wVe=o("gpt2"),AVe=o(" \u2014 "),K$=a("a"),yVe=o("GPT2Config"),LVe=o(" (OpenAI GPT-2 model)"),xVe=l(),em=a("li"),jee=a("strong"),$Ve=o("gpt_neo"),kVe=o(" \u2014 "),Z$=a("a"),SVe=o("GPTNeoConfig"),RVe=o(" (GPT Neo model)"),BVe=l(),om=a("li"),Dee=a("strong"),PVe=o("gptj"),IVe=o(" \u2014 "),ek=a("a"),qVe=o("GPTJConfig"),NVe=o(" (GPT-J model)"),jVe=l(),rm=a("li"),Gee=a("strong"),DVe=o("hubert"),GVe=o(" \u2014 "),ok=a("a"),OVe=o("HubertConfig"),VVe=o(" (Hubert model)"),XVe=l(),tm=a("li"),Oee=a("strong"),zVe=o("ibert"),QVe=o(" \u2014 "),rk=a("a"),WVe=o("IBertConfig"),HVe=o(" (I-BERT model)"),UVe=l(),am=a("li"),Vee=a("strong"),JVe=o("imagegpt"),YVe=o(" \u2014 "),tk=a("a"),KVe=o("ImageGPTConfig"),ZVe=o(" (ImageGPT model)"),eXe=l(),nm=a("li"),Xee=a("strong"),oXe=o("layoutlm"),rXe=o(" \u2014 "),ak=a("a"),tXe=o("LayoutLMConfig"),aXe=o(" (LayoutLM model)"),nXe=l(),sm=a("li"),zee=a("strong"),sXe=o("layoutlmv2"),lXe=o(" \u2014 "),nk=a("a"),iXe=o("LayoutLMv2Config"),dXe=o(" (LayoutLMv2 model)"),cXe=l(),lm=a("li"),Qee=a("strong"),fXe=o("led"),mXe=o(" \u2014 "),sk=a("a"),gXe=o("LEDConfig"),hXe=o(" (LED model)"),pXe=l(),im=a("li"),Wee=a("strong"),uXe=o("longformer"),_Xe=o(" \u2014 "),lk=a("a"),bXe=o("LongformerConfig"),vXe=o(" (Longformer model)"),FXe=l(),dm=a("li"),Hee=a("strong"),TXe=o("luke"),MXe=o(" \u2014 "),ik=a("a"),EXe=o("LukeConfig"),CXe=o(" (LUKE model)"),wXe=l(),cm=a("li"),Uee=a("strong"),AXe=o("lxmert"),yXe=o(" \u2014 "),dk=a("a"),LXe=o("LxmertConfig"),xXe=o(" (LXMERT model)"),$Xe=l(),fm=a("li"),Jee=a("strong"),kXe=o("m2m_100"),SXe=o(" \u2014 "),ck=a("a"),RXe=o("M2M100Config"),BXe=o(" (M2M100 model)"),PXe=l(),mm=a("li"),Yee=a("strong"),IXe=o("marian"),qXe=o(" \u2014 "),fk=a("a"),NXe=o("MarianConfig"),jXe=o(" (Marian model)"),DXe=l(),gm=a("li"),Kee=a("strong"),GXe=o("maskformer"),OXe=o(" \u2014 "),mk=a("a"),VXe=o("MaskFormerConfig"),XXe=o(" (MaskFormer model)"),zXe=l(),hm=a("li"),Zee=a("strong"),QXe=o("mbart"),WXe=o(" \u2014 "),gk=a("a"),HXe=o("MBartConfig"),UXe=o(" (mBART model)"),JXe=l(),pm=a("li"),eoe=a("strong"),YXe=o("megatron-bert"),KXe=o(" \u2014 "),hk=a("a"),ZXe=o("MegatronBertConfig"),eze=o(" (MegatronBert model)"),oze=l(),um=a("li"),ooe=a("strong"),rze=o("mobilebert"),tze=o(" \u2014 "),pk=a("a"),aze=o("MobileBertConfig"),nze=o(" (MobileBERT model)"),sze=l(),_m=a("li"),roe=a("strong"),lze=o("mpnet"),ize=o(" \u2014 "),uk=a("a"),dze=o("MPNetConfig"),cze=o(" (MPNet model)"),fze=l(),bm=a("li"),toe=a("strong"),mze=o("mt5"),gze=o(" \u2014 "),_k=a("a"),hze=o("MT5Config"),pze=o(" (mT5 model)"),uze=l(),vm=a("li"),aoe=a("strong"),_ze=o("nystromformer"),bze=o(" \u2014 "),bk=a("a"),vze=o("NystromformerConfig"),Fze=o(" (Nystromformer model)"),Tze=l(),Fm=a("li"),noe=a("strong"),Mze=o("openai-gpt"),Eze=o(" \u2014 "),vk=a("a"),Cze=o("OpenAIGPTConfig"),wze=o(" (OpenAI GPT model)"),Aze=l(),Tm=a("li"),soe=a("strong"),yze=o("opt"),Lze=o(" \u2014 "),Fk=a("a"),xze=o("OPTConfig"),$ze=o(" (OPT model)"),kze=l(),Mm=a("li"),loe=a("strong"),Sze=o("pegasus"),Rze=o(" \u2014 "),Tk=a("a"),Bze=o("PegasusConfig"),Pze=o(" (Pegasus model)"),Ize=l(),Em=a("li"),ioe=a("strong"),qze=o("perceiver"),Nze=o(" \u2014 "),Mk=a("a"),jze=o("PerceiverConfig"),Dze=o(" (Perceiver model)"),Gze=l(),Cm=a("li"),doe=a("strong"),Oze=o("plbart"),Vze=o(" \u2014 "),Ek=a("a"),Xze=o("PLBartConfig"),zze=o(" (PLBart model)"),Qze=l(),wm=a("li"),coe=a("strong"),Wze=o("poolformer"),Hze=o(" \u2014 "),Ck=a("a"),Uze=o("PoolFormerConfig"),Jze=o(" (PoolFormer model)"),Yze=l(),Am=a("li"),foe=a("strong"),Kze=o("prophetnet"),Zze=o(" \u2014 "),wk=a("a"),eQe=o("ProphetNetConfig"),oQe=o(" (ProphetNet model)"),rQe=l(),ym=a("li"),moe=a("strong"),tQe=o("qdqbert"),aQe=o(" \u2014 "),Ak=a("a"),nQe=o("QDQBertConfig"),sQe=o(" (QDQBert model)"),lQe=l(),Lm=a("li"),goe=a("strong"),iQe=o("rag"),dQe=o(" \u2014 "),yk=a("a"),cQe=o("RagConfig"),fQe=o(" (RAG model)"),mQe=l(),xm=a("li"),hoe=a("strong"),gQe=o("realm"),hQe=o(" \u2014 "),Lk=a("a"),pQe=o("RealmConfig"),uQe=o(" (Realm model)"),_Qe=l(),$m=a("li"),poe=a("strong"),bQe=o("reformer"),vQe=o(" \u2014 "),xk=a("a"),FQe=o("ReformerConfig"),TQe=o(" (Reformer model)"),MQe=l(),km=a("li"),uoe=a("strong"),EQe=o("regnet"),CQe=o(" \u2014 "),$k=a("a"),wQe=o("RegNetConfig"),AQe=o(" (RegNet model)"),yQe=l(),Sm=a("li"),_oe=a("strong"),LQe=o("rembert"),xQe=o(" \u2014 "),kk=a("a"),$Qe=o("RemBertConfig"),kQe=o(" (RemBERT model)"),SQe=l(),Rm=a("li"),boe=a("strong"),RQe=o("resnet"),BQe=o(" \u2014 "),Sk=a("a"),PQe=o("ResNetConfig"),IQe=o(" (ResNet model)"),qQe=l(),Bm=a("li"),voe=a("strong"),NQe=o("retribert"),jQe=o(" \u2014 "),Rk=a("a"),DQe=o("RetriBertConfig"),GQe=o(" (RetriBERT model)"),OQe=l(),Pm=a("li"),Foe=a("strong"),VQe=o("roberta"),XQe=o(" \u2014 "),Bk=a("a"),zQe=o("RobertaConfig"),QQe=o(" (RoBERTa model)"),WQe=l(),Im=a("li"),Toe=a("strong"),HQe=o("roformer"),UQe=o(" \u2014 "),Pk=a("a"),JQe=o("RoFormerConfig"),YQe=o(" (RoFormer model)"),KQe=l(),qm=a("li"),Moe=a("strong"),ZQe=o("segformer"),eWe=o(" \u2014 "),Ik=a("a"),oWe=o("SegformerConfig"),rWe=o(" (SegFormer model)"),tWe=l(),Nm=a("li"),Eoe=a("strong"),aWe=o("sew"),nWe=o(" \u2014 "),qk=a("a"),sWe=o("SEWConfig"),lWe=o(" (SEW model)"),iWe=l(),jm=a("li"),Coe=a("strong"),dWe=o("sew-d"),cWe=o(" \u2014 "),Nk=a("a"),fWe=o("SEWDConfig"),mWe=o(" (SEW-D model)"),gWe=l(),Dm=a("li"),woe=a("strong"),hWe=o("speech-encoder-decoder"),pWe=o(" \u2014 "),jk=a("a"),uWe=o("SpeechEncoderDecoderConfig"),_We=o(" (Speech Encoder decoder model)"),bWe=l(),Gm=a("li"),Aoe=a("strong"),vWe=o("speech_to_text"),FWe=o(" \u2014 "),Dk=a("a"),TWe=o("Speech2TextConfig"),MWe=o(" (Speech2Text model)"),EWe=l(),Om=a("li"),yoe=a("strong"),CWe=o("speech_to_text_2"),wWe=o(" \u2014 "),Gk=a("a"),AWe=o("Speech2Text2Config"),yWe=o(" (Speech2Text2 model)"),LWe=l(),Vm=a("li"),Loe=a("strong"),xWe=o("splinter"),$We=o(" \u2014 "),Ok=a("a"),kWe=o("SplinterConfig"),SWe=o(" (Splinter model)"),RWe=l(),Xm=a("li"),xoe=a("strong"),BWe=o("squeezebert"),PWe=o(" \u2014 "),Vk=a("a"),IWe=o("SqueezeBertConfig"),qWe=o(" (SqueezeBERT model)"),NWe=l(),zm=a("li"),$oe=a("strong"),jWe=o("swin"),DWe=o(" \u2014 "),Xk=a("a"),GWe=o("SwinConfig"),OWe=o(" (Swin model)"),VWe=l(),Qm=a("li"),koe=a("strong"),XWe=o("t5"),zWe=o(" \u2014 "),zk=a("a"),QWe=o("T5Config"),WWe=o(" (T5 model)"),HWe=l(),Wm=a("li"),Soe=a("strong"),UWe=o("tapas"),JWe=o(" \u2014 "),Qk=a("a"),YWe=o("TapasConfig"),KWe=o(" (TAPAS model)"),ZWe=l(),Hm=a("li"),Roe=a("strong"),eHe=o("transfo-xl"),oHe=o(" \u2014 "),Wk=a("a"),rHe=o("TransfoXLConfig"),tHe=o(" (Transformer-XL model)"),aHe=l(),Um=a("li"),Boe=a("strong"),nHe=o("trocr"),sHe=o(" \u2014 "),Hk=a("a"),lHe=o("TrOCRConfig"),iHe=o(" (TrOCR model)"),dHe=l(),Jm=a("li"),Poe=a("strong"),cHe=o("unispeech"),fHe=o(" \u2014 "),Uk=a("a"),mHe=o("UniSpeechConfig"),gHe=o(" (UniSpeech model)"),hHe=l(),Ym=a("li"),Ioe=a("strong"),pHe=o("unispeech-sat"),uHe=o(" \u2014 "),Jk=a("a"),_He=o("UniSpeechSatConfig"),bHe=o(" (UniSpeechSat model)"),vHe=l(),Km=a("li"),qoe=a("strong"),FHe=o("van"),THe=o(" \u2014 "),Yk=a("a"),MHe=o("VanConfig"),EHe=o(" (VAN model)"),CHe=l(),Zm=a("li"),Noe=a("strong"),wHe=o("vilt"),AHe=o(" \u2014 "),Kk=a("a"),yHe=o("ViltConfig"),LHe=o(" (ViLT model)"),xHe=l(),eg=a("li"),joe=a("strong"),$He=o("vision-encoder-decoder"),kHe=o(" \u2014 "),Zk=a("a"),SHe=o("VisionEncoderDecoderConfig"),RHe=o(" (Vision Encoder decoder model)"),BHe=l(),og=a("li"),Doe=a("strong"),PHe=o("vision-text-dual-encoder"),IHe=o(" \u2014 "),eS=a("a"),qHe=o("VisionTextDualEncoderConfig"),NHe=o(" (VisionTextDualEncoder model)"),jHe=l(),rg=a("li"),Goe=a("strong"),DHe=o("visual_bert"),GHe=o(" \u2014 "),oS=a("a"),OHe=o("VisualBertConfig"),VHe=o(" (VisualBert model)"),XHe=l(),tg=a("li"),Ooe=a("strong"),zHe=o("vit"),QHe=o(" \u2014 "),rS=a("a"),WHe=o("ViTConfig"),HHe=o(" (ViT model)"),UHe=l(),ag=a("li"),Voe=a("strong"),JHe=o("vit_mae"),YHe=o(" \u2014 "),tS=a("a"),KHe=o("ViTMAEConfig"),ZHe=o(" (ViTMAE model)"),eUe=l(),ng=a("li"),Xoe=a("strong"),oUe=o("wav2vec2"),rUe=o(" \u2014 "),aS=a("a"),tUe=o("Wav2Vec2Config"),aUe=o(" (Wav2Vec2 model)"),nUe=l(),sg=a("li"),zoe=a("strong"),sUe=o("wavlm"),lUe=o(" \u2014 "),nS=a("a"),iUe=o("WavLMConfig"),dUe=o(" (WavLM model)"),cUe=l(),lg=a("li"),Qoe=a("strong"),fUe=o("xglm"),mUe=o(" \u2014 "),sS=a("a"),gUe=o("XGLMConfig"),hUe=o(" (XGLM model)"),pUe=l(),ig=a("li"),Woe=a("strong"),uUe=o("xlm"),_Ue=o(" \u2014 "),lS=a("a"),bUe=o("XLMConfig"),vUe=o(" (XLM model)"),FUe=l(),dg=a("li"),Hoe=a("strong"),TUe=o("xlm-prophetnet"),MUe=o(" \u2014 "),iS=a("a"),EUe=o("XLMProphetNetConfig"),CUe=o(" (XLMProphetNet model)"),wUe=l(),cg=a("li"),Uoe=a("strong"),AUe=o("xlm-roberta"),yUe=o(" \u2014 "),dS=a("a"),LUe=o("XLMRobertaConfig"),xUe=o(" (XLM-RoBERTa model)"),$Ue=l(),fg=a("li"),Joe=a("strong"),kUe=o("xlm-roberta-xl"),SUe=o(" \u2014 "),cS=a("a"),RUe=o("XLMRobertaXLConfig"),BUe=o(" (XLM-RoBERTa-XL model)"),PUe=l(),mg=a("li"),Yoe=a("strong"),IUe=o("xlnet"),qUe=o(" \u2014 "),fS=a("a"),NUe=o("XLNetConfig"),jUe=o(" (XLNet model)"),DUe=l(),gg=a("li"),Koe=a("strong"),GUe=o("yolos"),OUe=o(" \u2014 "),mS=a("a"),VUe=o("YolosConfig"),XUe=o(" (YOLOS model)"),zUe=l(),hg=a("li"),Zoe=a("strong"),QUe=o("yoso"),WUe=o(" \u2014 "),gS=a("a"),HUe=o("YosoConfig"),UUe=o(" (YOSO model)"),JUe=l(),F(pg.$$.fragment),YUe=l(),ug=a("div"),F(o6.$$.fragment),KUe=l(),ere=a("p"),ZUe=o("Register a new configuration for this class."),NPe=l(),_i=a("h2"),_g=a("a"),ore=a("span"),F(r6.$$.fragment),eJe=l(),rre=a("span"),oJe=o("AutoTokenizer"),jPe=l(),wo=a("div"),F(t6.$$.fragment),rJe=l(),a6=a("p"),tJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hS=a("a"),aJe=o("AutoTokenizer.from_pretrained()"),nJe=o(" class method."),sJe=l(),n6=a("p"),lJe=o("This class cannot be instantiated directly using "),tre=a("code"),iJe=o("__init__()"),dJe=o(" (throws an error)."),cJe=l(),Cr=a("div"),F(s6.$$.fragment),fJe=l(),are=a("p"),mJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gJe=l(),Ca=a("p"),hJe=o("The tokenizer class to instantiate is selected based on the "),nre=a("code"),pJe=o("model_type"),uJe=o(` property of the config object (either
passed as an argument or loaded from `),sre=a("code"),_Je=o("pretrained_model_name_or_path"),bJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lre=a("code"),vJe=o("pretrained_model_name_or_path"),FJe=o(":"),TJe=l(),k=a("ul"),kn=a("li"),ire=a("strong"),MJe=o("albert"),EJe=o(" \u2014 "),pS=a("a"),CJe=o("AlbertTokenizer"),wJe=o(" or "),uS=a("a"),AJe=o("AlbertTokenizerFast"),yJe=o(" (ALBERT model)"),LJe=l(),Sn=a("li"),dre=a("strong"),xJe=o("bart"),$Je=o(" \u2014 "),_S=a("a"),kJe=o("BartTokenizer"),SJe=o(" or "),bS=a("a"),RJe=o("BartTokenizerFast"),BJe=o(" (BART model)"),PJe=l(),Rn=a("li"),cre=a("strong"),IJe=o("barthez"),qJe=o(" \u2014 "),vS=a("a"),NJe=o("BarthezTokenizer"),jJe=o(" or "),FS=a("a"),DJe=o("BarthezTokenizerFast"),GJe=o(" (BARThez model)"),OJe=l(),bg=a("li"),fre=a("strong"),VJe=o("bartpho"),XJe=o(" \u2014 "),TS=a("a"),zJe=o("BartphoTokenizer"),QJe=o(" (BARTpho model)"),WJe=l(),Bn=a("li"),mre=a("strong"),HJe=o("bert"),UJe=o(" \u2014 "),MS=a("a"),JJe=o("BertTokenizer"),YJe=o(" or "),ES=a("a"),KJe=o("BertTokenizerFast"),ZJe=o(" (BERT model)"),eYe=l(),vg=a("li"),gre=a("strong"),oYe=o("bert-generation"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("BertGenerationTokenizer"),aYe=o(" (Bert Generation model)"),nYe=l(),Fg=a("li"),hre=a("strong"),sYe=o("bert-japanese"),lYe=o(" \u2014 "),wS=a("a"),iYe=o("BertJapaneseTokenizer"),dYe=o(" (BertJapanese model)"),cYe=l(),Tg=a("li"),pre=a("strong"),fYe=o("bertweet"),mYe=o(" \u2014 "),AS=a("a"),gYe=o("BertweetTokenizer"),hYe=o(" (Bertweet model)"),pYe=l(),Pn=a("li"),ure=a("strong"),uYe=o("big_bird"),_Ye=o(" \u2014 "),yS=a("a"),bYe=o("BigBirdTokenizer"),vYe=o(" or "),LS=a("a"),FYe=o("BigBirdTokenizerFast"),TYe=o(" (BigBird model)"),MYe=l(),In=a("li"),_re=a("strong"),EYe=o("bigbird_pegasus"),CYe=o(" \u2014 "),xS=a("a"),wYe=o("PegasusTokenizer"),AYe=o(" or "),$S=a("a"),yYe=o("PegasusTokenizerFast"),LYe=o(" (BigBirdPegasus model)"),xYe=l(),qn=a("li"),bre=a("strong"),$Ye=o("blenderbot"),kYe=o(" \u2014 "),kS=a("a"),SYe=o("BlenderbotTokenizer"),RYe=o(" or "),SS=a("a"),BYe=o("BlenderbotTokenizerFast"),PYe=o(" (Blenderbot model)"),IYe=l(),Mg=a("li"),vre=a("strong"),qYe=o("blenderbot-small"),NYe=o(" \u2014 "),RS=a("a"),jYe=o("BlenderbotSmallTokenizer"),DYe=o(" (BlenderbotSmall model)"),GYe=l(),Eg=a("li"),Fre=a("strong"),OYe=o("byt5"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("ByT5Tokenizer"),zYe=o(" (ByT5 model)"),QYe=l(),Nn=a("li"),Tre=a("strong"),WYe=o("camembert"),HYe=o(" \u2014 "),PS=a("a"),UYe=o("CamembertTokenizer"),JYe=o(" or "),IS=a("a"),YYe=o("CamembertTokenizerFast"),KYe=o(" (CamemBERT model)"),ZYe=l(),Cg=a("li"),Mre=a("strong"),eKe=o("canine"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("CanineTokenizer"),tKe=o(" (Canine model)"),aKe=l(),jn=a("li"),Ere=a("strong"),nKe=o("clip"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("CLIPTokenizer"),iKe=o(" or "),jS=a("a"),dKe=o("CLIPTokenizerFast"),cKe=o(" (CLIP model)"),fKe=l(),Dn=a("li"),Cre=a("strong"),mKe=o("convbert"),gKe=o(" \u2014 "),DS=a("a"),hKe=o("ConvBertTokenizer"),pKe=o(" or "),GS=a("a"),uKe=o("ConvBertTokenizerFast"),_Ke=o(" (ConvBERT model)"),bKe=l(),Gn=a("li"),wre=a("strong"),vKe=o("cpm"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("CpmTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("CpmTokenizerFast"),CKe=o(" (CPM model)"),wKe=l(),wg=a("li"),Are=a("strong"),AKe=o("ctrl"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("CTRLTokenizer"),xKe=o(" (CTRL model)"),$Ke=l(),On=a("li"),yre=a("strong"),kKe=o("data2vec-text"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("RobertaTokenizer"),BKe=o(" or "),QS=a("a"),PKe=o("RobertaTokenizerFast"),IKe=o(" (Data2VecText model)"),qKe=l(),Vn=a("li"),Lre=a("strong"),NKe=o("deberta"),jKe=o(" \u2014 "),WS=a("a"),DKe=o("DebertaTokenizer"),GKe=o(" or "),HS=a("a"),OKe=o("DebertaTokenizerFast"),VKe=o(" (DeBERTa model)"),XKe=l(),Xn=a("li"),xre=a("strong"),zKe=o("deberta-v2"),QKe=o(" \u2014 "),US=a("a"),WKe=o("DebertaV2Tokenizer"),HKe=o(" or "),JS=a("a"),UKe=o("DebertaV2TokenizerFast"),JKe=o(" (DeBERTa-v2 model)"),YKe=l(),zn=a("li"),$re=a("strong"),KKe=o("distilbert"),ZKe=o(" \u2014 "),YS=a("a"),eZe=o("DistilBertTokenizer"),oZe=o(" or "),KS=a("a"),rZe=o("DistilBertTokenizerFast"),tZe=o(" (DistilBERT model)"),aZe=l(),Qn=a("li"),kre=a("strong"),nZe=o("dpr"),sZe=o(" \u2014 "),ZS=a("a"),lZe=o("DPRQuestionEncoderTokenizer"),iZe=o(" or "),eR=a("a"),dZe=o("DPRQuestionEncoderTokenizerFast"),cZe=o(" (DPR model)"),fZe=l(),Wn=a("li"),Sre=a("strong"),mZe=o("electra"),gZe=o(" \u2014 "),oR=a("a"),hZe=o("ElectraTokenizer"),pZe=o(" or "),rR=a("a"),uZe=o("ElectraTokenizerFast"),_Ze=o(" (ELECTRA model)"),bZe=l(),Ag=a("li"),Rre=a("strong"),vZe=o("flaubert"),FZe=o(" \u2014 "),tR=a("a"),TZe=o("FlaubertTokenizer"),MZe=o(" (FlauBERT model)"),EZe=l(),Hn=a("li"),Bre=a("strong"),CZe=o("fnet"),wZe=o(" \u2014 "),aR=a("a"),AZe=o("FNetTokenizer"),yZe=o(" or "),nR=a("a"),LZe=o("FNetTokenizerFast"),xZe=o(" (FNet model)"),$Ze=l(),yg=a("li"),Pre=a("strong"),kZe=o("fsmt"),SZe=o(" \u2014 "),sR=a("a"),RZe=o("FSMTTokenizer"),BZe=o(" (FairSeq Machine-Translation model)"),PZe=l(),Un=a("li"),Ire=a("strong"),IZe=o("funnel"),qZe=o(" \u2014 "),lR=a("a"),NZe=o("FunnelTokenizer"),jZe=o(" or "),iR=a("a"),DZe=o("FunnelTokenizerFast"),GZe=o(" (Funnel Transformer model)"),OZe=l(),Jn=a("li"),qre=a("strong"),VZe=o("gpt2"),XZe=o(" \u2014 "),dR=a("a"),zZe=o("GPT2Tokenizer"),QZe=o(" or "),cR=a("a"),WZe=o("GPT2TokenizerFast"),HZe=o(" (OpenAI GPT-2 model)"),UZe=l(),Yn=a("li"),Nre=a("strong"),JZe=o("gpt_neo"),YZe=o(" \u2014 "),fR=a("a"),KZe=o("GPT2Tokenizer"),ZZe=o(" or "),mR=a("a"),eeo=o("GPT2TokenizerFast"),oeo=o(" (GPT Neo model)"),reo=l(),Kn=a("li"),jre=a("strong"),teo=o("gptj"),aeo=o(" \u2014 "),gR=a("a"),neo=o("GPT2Tokenizer"),seo=o(" or "),hR=a("a"),leo=o("GPT2TokenizerFast"),ieo=o(" (GPT-J model)"),deo=l(),Zn=a("li"),Dre=a("strong"),ceo=o("herbert"),feo=o(" \u2014 "),pR=a("a"),meo=o("HerbertTokenizer"),geo=o(" or "),uR=a("a"),heo=o("HerbertTokenizerFast"),peo=o(" (HerBERT model)"),ueo=l(),Lg=a("li"),Gre=a("strong"),_eo=o("hubert"),beo=o(" \u2014 "),_R=a("a"),veo=o("Wav2Vec2CTCTokenizer"),Feo=o(" (Hubert model)"),Teo=l(),es=a("li"),Ore=a("strong"),Meo=o("ibert"),Eeo=o(" \u2014 "),bR=a("a"),Ceo=o("RobertaTokenizer"),weo=o(" or "),vR=a("a"),Aeo=o("RobertaTokenizerFast"),yeo=o(" (I-BERT model)"),Leo=l(),os=a("li"),Vre=a("strong"),xeo=o("layoutlm"),$eo=o(" \u2014 "),FR=a("a"),keo=o("LayoutLMTokenizer"),Seo=o(" or "),TR=a("a"),Reo=o("LayoutLMTokenizerFast"),Beo=o(" (LayoutLM model)"),Peo=l(),rs=a("li"),Xre=a("strong"),Ieo=o("layoutlmv2"),qeo=o(" \u2014 "),MR=a("a"),Neo=o("LayoutLMv2Tokenizer"),jeo=o(" or "),ER=a("a"),Deo=o("LayoutLMv2TokenizerFast"),Geo=o(" (LayoutLMv2 model)"),Oeo=l(),ts=a("li"),zre=a("strong"),Veo=o("layoutxlm"),Xeo=o(" \u2014 "),CR=a("a"),zeo=o("LayoutXLMTokenizer"),Qeo=o(" or "),wR=a("a"),Weo=o("LayoutXLMTokenizerFast"),Heo=o(" (LayoutXLM model)"),Ueo=l(),as=a("li"),Qre=a("strong"),Jeo=o("led"),Yeo=o(" \u2014 "),AR=a("a"),Keo=o("LEDTokenizer"),Zeo=o(" or "),yR=a("a"),eoo=o("LEDTokenizerFast"),ooo=o(" (LED model)"),roo=l(),ns=a("li"),Wre=a("strong"),too=o("longformer"),aoo=o(" \u2014 "),LR=a("a"),noo=o("LongformerTokenizer"),soo=o(" or "),xR=a("a"),loo=o("LongformerTokenizerFast"),ioo=o(" (Longformer model)"),doo=l(),xg=a("li"),Hre=a("strong"),coo=o("luke"),foo=o(" \u2014 "),$R=a("a"),moo=o("LukeTokenizer"),goo=o(" (LUKE model)"),hoo=l(),ss=a("li"),Ure=a("strong"),poo=o("lxmert"),uoo=o(" \u2014 "),kR=a("a"),_oo=o("LxmertTokenizer"),boo=o(" or "),SR=a("a"),voo=o("LxmertTokenizerFast"),Foo=o(" (LXMERT model)"),Too=l(),$g=a("li"),Jre=a("strong"),Moo=o("m2m_100"),Eoo=o(" \u2014 "),RR=a("a"),Coo=o("M2M100Tokenizer"),woo=o(" (M2M100 model)"),Aoo=l(),kg=a("li"),Yre=a("strong"),yoo=o("marian"),Loo=o(" \u2014 "),BR=a("a"),xoo=o("MarianTokenizer"),$oo=o(" (Marian model)"),koo=l(),ls=a("li"),Kre=a("strong"),Soo=o("mbart"),Roo=o(" \u2014 "),PR=a("a"),Boo=o("MBartTokenizer"),Poo=o(" or "),IR=a("a"),Ioo=o("MBartTokenizerFast"),qoo=o(" (mBART model)"),Noo=l(),is=a("li"),Zre=a("strong"),joo=o("mbart50"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("MBart50Tokenizer"),Ooo=o(" or "),NR=a("a"),Voo=o("MBart50TokenizerFast"),Xoo=o(" (mBART-50 model)"),zoo=l(),ds=a("li"),ete=a("strong"),Qoo=o("megatron-bert"),Woo=o(" \u2014 "),jR=a("a"),Hoo=o("BertTokenizer"),Uoo=o(" or "),DR=a("a"),Joo=o("BertTokenizerFast"),Yoo=o(" (MegatronBert model)"),Koo=l(),Sg=a("li"),ote=a("strong"),Zoo=o("mluke"),ero=o(" \u2014 "),GR=a("a"),oro=o("MLukeTokenizer"),rro=o(" (mLUKE model)"),tro=l(),cs=a("li"),rte=a("strong"),aro=o("mobilebert"),nro=o(" \u2014 "),OR=a("a"),sro=o("MobileBertTokenizer"),lro=o(" or "),VR=a("a"),iro=o("MobileBertTokenizerFast"),dro=o(" (MobileBERT model)"),cro=l(),fs=a("li"),tte=a("strong"),fro=o("mpnet"),mro=o(" \u2014 "),XR=a("a"),gro=o("MPNetTokenizer"),hro=o(" or "),zR=a("a"),pro=o("MPNetTokenizerFast"),uro=o(" (MPNet model)"),_ro=l(),ms=a("li"),ate=a("strong"),bro=o("mt5"),vro=o(" \u2014 "),QR=a("a"),Fro=o("MT5Tokenizer"),Tro=o(" or "),WR=a("a"),Mro=o("MT5TokenizerFast"),Ero=o(" (mT5 model)"),Cro=l(),gs=a("li"),nte=a("strong"),wro=o("nystromformer"),Aro=o(" \u2014 "),HR=a("a"),yro=o("AlbertTokenizer"),Lro=o(" or "),UR=a("a"),xro=o("AlbertTokenizerFast"),$ro=o(" (Nystromformer model)"),kro=l(),hs=a("li"),ste=a("strong"),Sro=o("openai-gpt"),Rro=o(" \u2014 "),JR=a("a"),Bro=o("OpenAIGPTTokenizer"),Pro=o(" or "),YR=a("a"),Iro=o("OpenAIGPTTokenizerFast"),qro=o(" (OpenAI GPT model)"),Nro=l(),Rg=a("li"),lte=a("strong"),jro=o("opt"),Dro=o(" \u2014 "),KR=a("a"),Gro=o("GPT2Tokenizer"),Oro=o(" (OPT model)"),Vro=l(),ps=a("li"),ite=a("strong"),Xro=o("pegasus"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("PegasusTokenizer"),Wro=o(" or "),eB=a("a"),Hro=o("PegasusTokenizerFast"),Uro=o(" (Pegasus model)"),Jro=l(),Bg=a("li"),dte=a("strong"),Yro=o("perceiver"),Kro=o(" \u2014 "),oB=a("a"),Zro=o("PerceiverTokenizer"),eto=o(" (Perceiver model)"),oto=l(),Pg=a("li"),cte=a("strong"),rto=o("phobert"),tto=o(" \u2014 "),rB=a("a"),ato=o("PhobertTokenizer"),nto=o(" (PhoBERT model)"),sto=l(),Ig=a("li"),fte=a("strong"),lto=o("plbart"),ito=o(" \u2014 "),tB=a("a"),dto=o("PLBartTokenizer"),cto=o(" (PLBart model)"),fto=l(),qg=a("li"),mte=a("strong"),mto=o("prophetnet"),gto=o(" \u2014 "),aB=a("a"),hto=o("ProphetNetTokenizer"),pto=o(" (ProphetNet model)"),uto=l(),us=a("li"),gte=a("strong"),_to=o("qdqbert"),bto=o(" \u2014 "),nB=a("a"),vto=o("BertTokenizer"),Fto=o(" or "),sB=a("a"),Tto=o("BertTokenizerFast"),Mto=o(" (QDQBert model)"),Eto=l(),Ng=a("li"),hte=a("strong"),Cto=o("rag"),wto=o(" \u2014 "),lB=a("a"),Ato=o("RagTokenizer"),yto=o(" (RAG model)"),Lto=l(),_s=a("li"),pte=a("strong"),xto=o("realm"),$to=o(" \u2014 "),iB=a("a"),kto=o("RealmTokenizer"),Sto=o(" or "),dB=a("a"),Rto=o("RealmTokenizerFast"),Bto=o(" (Realm model)"),Pto=l(),bs=a("li"),ute=a("strong"),Ito=o("reformer"),qto=o(" \u2014 "),cB=a("a"),Nto=o("ReformerTokenizer"),jto=o(" or "),fB=a("a"),Dto=o("ReformerTokenizerFast"),Gto=o(" (Reformer model)"),Oto=l(),vs=a("li"),_te=a("strong"),Vto=o("rembert"),Xto=o(" \u2014 "),mB=a("a"),zto=o("RemBertTokenizer"),Qto=o(" or "),gB=a("a"),Wto=o("RemBertTokenizerFast"),Hto=o(" (RemBERT model)"),Uto=l(),Fs=a("li"),bte=a("strong"),Jto=o("retribert"),Yto=o(" \u2014 "),hB=a("a"),Kto=o("RetriBertTokenizer"),Zto=o(" or "),pB=a("a"),eao=o("RetriBertTokenizerFast"),oao=o(" (RetriBERT model)"),rao=l(),Ts=a("li"),vte=a("strong"),tao=o("roberta"),aao=o(" \u2014 "),uB=a("a"),nao=o("RobertaTokenizer"),sao=o(" or "),_B=a("a"),lao=o("RobertaTokenizerFast"),iao=o(" (RoBERTa model)"),dao=l(),Ms=a("li"),Fte=a("strong"),cao=o("roformer"),fao=o(" \u2014 "),bB=a("a"),mao=o("RoFormerTokenizer"),gao=o(" or "),vB=a("a"),hao=o("RoFormerTokenizerFast"),pao=o(" (RoFormer model)"),uao=l(),jg=a("li"),Tte=a("strong"),_ao=o("speech_to_text"),bao=o(" \u2014 "),FB=a("a"),vao=o("Speech2TextTokenizer"),Fao=o(" (Speech2Text model)"),Tao=l(),Dg=a("li"),Mte=a("strong"),Mao=o("speech_to_text_2"),Eao=o(" \u2014 "),TB=a("a"),Cao=o("Speech2Text2Tokenizer"),wao=o(" (Speech2Text2 model)"),Aao=l(),Es=a("li"),Ete=a("strong"),yao=o("splinter"),Lao=o(" \u2014 "),MB=a("a"),xao=o("SplinterTokenizer"),$ao=o(" or "),EB=a("a"),kao=o("SplinterTokenizerFast"),Sao=o(" (Splinter model)"),Rao=l(),Cs=a("li"),Cte=a("strong"),Bao=o("squeezebert"),Pao=o(" \u2014 "),CB=a("a"),Iao=o("SqueezeBertTokenizer"),qao=o(" or "),wB=a("a"),Nao=o("SqueezeBertTokenizerFast"),jao=o(" (SqueezeBERT model)"),Dao=l(),ws=a("li"),wte=a("strong"),Gao=o("t5"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("T5Tokenizer"),Xao=o(" or "),yB=a("a"),zao=o("T5TokenizerFast"),Qao=o(" (T5 model)"),Wao=l(),Gg=a("li"),Ate=a("strong"),Hao=o("tapas"),Uao=o(" \u2014 "),LB=a("a"),Jao=o("TapasTokenizer"),Yao=o(" (TAPAS model)"),Kao=l(),Og=a("li"),yte=a("strong"),Zao=o("tapex"),eno=o(" \u2014 "),xB=a("a"),ono=o("TapexTokenizer"),rno=o(" (TAPEX model)"),tno=l(),Vg=a("li"),Lte=a("strong"),ano=o("transfo-xl"),nno=o(" \u2014 "),$B=a("a"),sno=o("TransfoXLTokenizer"),lno=o(" (Transformer-XL model)"),ino=l(),As=a("li"),xte=a("strong"),dno=o("visual_bert"),cno=o(" \u2014 "),kB=a("a"),fno=o("BertTokenizer"),mno=o(" or "),SB=a("a"),gno=o("BertTokenizerFast"),hno=o(" (VisualBert model)"),pno=l(),Xg=a("li"),$te=a("strong"),uno=o("wav2vec2"),_no=o(" \u2014 "),RB=a("a"),bno=o("Wav2Vec2CTCTokenizer"),vno=o(" (Wav2Vec2 model)"),Fno=l(),zg=a("li"),kte=a("strong"),Tno=o("wav2vec2_phoneme"),Mno=o(" \u2014 "),BB=a("a"),Eno=o("Wav2Vec2PhonemeCTCTokenizer"),Cno=o(" (Wav2Vec2Phoneme model)"),wno=l(),ys=a("li"),Ste=a("strong"),Ano=o("xglm"),yno=o(" \u2014 "),PB=a("a"),Lno=o("XGLMTokenizer"),xno=o(" or "),IB=a("a"),$no=o("XGLMTokenizerFast"),kno=o(" (XGLM model)"),Sno=l(),Qg=a("li"),Rte=a("strong"),Rno=o("xlm"),Bno=o(" \u2014 "),qB=a("a"),Pno=o("XLMTokenizer"),Ino=o(" (XLM model)"),qno=l(),Wg=a("li"),Bte=a("strong"),Nno=o("xlm-prophetnet"),jno=o(" \u2014 "),NB=a("a"),Dno=o("XLMProphetNetTokenizer"),Gno=o(" (XLMProphetNet model)"),Ono=l(),Ls=a("li"),Pte=a("strong"),Vno=o("xlm-roberta"),Xno=o(" \u2014 "),jB=a("a"),zno=o("XLMRobertaTokenizer"),Qno=o(" or "),DB=a("a"),Wno=o("XLMRobertaTokenizerFast"),Hno=o(" (XLM-RoBERTa model)"),Uno=l(),xs=a("li"),Ite=a("strong"),Jno=o("xlm-roberta-xl"),Yno=o(" \u2014 "),GB=a("a"),Kno=o("RobertaTokenizer"),Zno=o(" or "),OB=a("a"),eso=o("RobertaTokenizerFast"),oso=o(" (XLM-RoBERTa-XL model)"),rso=l(),$s=a("li"),qte=a("strong"),tso=o("xlnet"),aso=o(" \u2014 "),VB=a("a"),nso=o("XLNetTokenizer"),sso=o(" or "),XB=a("a"),lso=o("XLNetTokenizerFast"),iso=o(" (XLNet model)"),dso=l(),ks=a("li"),Nte=a("strong"),cso=o("yoso"),fso=o(" \u2014 "),zB=a("a"),mso=o("AlbertTokenizer"),gso=o(" or "),QB=a("a"),hso=o("AlbertTokenizerFast"),pso=o(" (YOSO model)"),uso=l(),F(Hg.$$.fragment),_so=l(),Ug=a("div"),F(l6.$$.fragment),bso=l(),jte=a("p"),vso=o("Register a new tokenizer in this mapping."),DPe=l(),bi=a("h2"),Jg=a("a"),Dte=a("span"),F(i6.$$.fragment),Fso=l(),Gte=a("span"),Tso=o("AutoFeatureExtractor"),GPe=l(),Ao=a("div"),F(d6.$$.fragment),Mso=l(),c6=a("p"),Eso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=a("a"),Cso=o("AutoFeatureExtractor.from_pretrained()"),wso=o(" class method."),Aso=l(),f6=a("p"),yso=o("This class cannot be instantiated directly using "),Ote=a("code"),Lso=o("__init__()"),xso=o(" (throws an error)."),$so=l(),Qe=a("div"),F(m6.$$.fragment),kso=l(),Vte=a("p"),Sso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Rso=l(),wa=a("p"),Bso=o("The feature extractor class to instantiate is selected based on the "),Xte=a("code"),Pso=o("model_type"),Iso=o(` property of the config object
(either passed as an argument or loaded from `),zte=a("code"),qso=o("pretrained_model_name_or_path"),Nso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qte=a("code"),jso=o("pretrained_model_name_or_path"),Dso=o(":"),Gso=l(),oe=a("ul"),Yg=a("li"),Wte=a("strong"),Oso=o("beit"),Vso=o(" \u2014 "),HB=a("a"),Xso=o("BeitFeatureExtractor"),zso=o(" (BEiT model)"),Qso=l(),Kg=a("li"),Hte=a("strong"),Wso=o("clip"),Hso=o(" \u2014 "),UB=a("a"),Uso=o("CLIPFeatureExtractor"),Jso=o(" (CLIP model)"),Yso=l(),Zg=a("li"),Ute=a("strong"),Kso=o("convnext"),Zso=o(" \u2014 "),JB=a("a"),elo=o("ConvNextFeatureExtractor"),olo=o(" (ConvNext model)"),rlo=l(),eh=a("li"),Jte=a("strong"),tlo=o("data2vec-audio"),alo=o(" \u2014 "),YB=a("a"),nlo=o("Wav2Vec2FeatureExtractor"),slo=o(" (Data2VecAudio model)"),llo=l(),oh=a("li"),Yte=a("strong"),ilo=o("data2vec-vision"),dlo=o(" \u2014 "),KB=a("a"),clo=o("BeitFeatureExtractor"),flo=o(" (Data2VecVision model)"),mlo=l(),rh=a("li"),Kte=a("strong"),glo=o("deit"),hlo=o(" \u2014 "),ZB=a("a"),plo=o("DeiTFeatureExtractor"),ulo=o(" (DeiT model)"),_lo=l(),th=a("li"),Zte=a("strong"),blo=o("detr"),vlo=o(" \u2014 "),eP=a("a"),Flo=o("DetrFeatureExtractor"),Tlo=o(" (DETR model)"),Mlo=l(),ah=a("li"),eae=a("strong"),Elo=o("dpt"),Clo=o(" \u2014 "),oP=a("a"),wlo=o("DPTFeatureExtractor"),Alo=o(" (DPT model)"),ylo=l(),nh=a("li"),oae=a("strong"),Llo=o("flava"),xlo=o(" \u2014 "),rP=a("a"),$lo=o("FlavaFeatureExtractor"),klo=o(" (Flava model)"),Slo=l(),sh=a("li"),rae=a("strong"),Rlo=o("glpn"),Blo=o(" \u2014 "),tP=a("a"),Plo=o("GLPNFeatureExtractor"),Ilo=o(" (GLPN model)"),qlo=l(),lh=a("li"),tae=a("strong"),Nlo=o("hubert"),jlo=o(" \u2014 "),aP=a("a"),Dlo=o("Wav2Vec2FeatureExtractor"),Glo=o(" (Hubert model)"),Olo=l(),ih=a("li"),aae=a("strong"),Vlo=o("layoutlmv2"),Xlo=o(" \u2014 "),nP=a("a"),zlo=o("LayoutLMv2FeatureExtractor"),Qlo=o(" (LayoutLMv2 model)"),Wlo=l(),dh=a("li"),nae=a("strong"),Hlo=o("maskformer"),Ulo=o(" \u2014 "),sP=a("a"),Jlo=o("MaskFormerFeatureExtractor"),Ylo=o(" (MaskFormer model)"),Klo=l(),ch=a("li"),sae=a("strong"),Zlo=o("perceiver"),eio=o(" \u2014 "),lP=a("a"),oio=o("PerceiverFeatureExtractor"),rio=o(" (Perceiver model)"),tio=l(),fh=a("li"),lae=a("strong"),aio=o("poolformer"),nio=o(" \u2014 "),iP=a("a"),sio=o("PoolFormerFeatureExtractor"),lio=o(" (PoolFormer model)"),iio=l(),mh=a("li"),iae=a("strong"),dio=o("regnet"),cio=o(" \u2014 "),dP=a("a"),fio=o("ConvNextFeatureExtractor"),mio=o(" (RegNet model)"),gio=l(),gh=a("li"),dae=a("strong"),hio=o("resnet"),pio=o(" \u2014 "),cP=a("a"),uio=o("ConvNextFeatureExtractor"),_io=o(" (ResNet model)"),bio=l(),hh=a("li"),cae=a("strong"),vio=o("segformer"),Fio=o(" \u2014 "),fP=a("a"),Tio=o("SegformerFeatureExtractor"),Mio=o(" (SegFormer model)"),Eio=l(),ph=a("li"),fae=a("strong"),Cio=o("speech_to_text"),wio=o(" \u2014 "),mP=a("a"),Aio=o("Speech2TextFeatureExtractor"),yio=o(" (Speech2Text model)"),Lio=l(),uh=a("li"),mae=a("strong"),xio=o("swin"),$io=o(" \u2014 "),gP=a("a"),kio=o("ViTFeatureExtractor"),Sio=o(" (Swin model)"),Rio=l(),_h=a("li"),gae=a("strong"),Bio=o("van"),Pio=o(" \u2014 "),hP=a("a"),Iio=o("ConvNextFeatureExtractor"),qio=o(" (VAN model)"),Nio=l(),bh=a("li"),hae=a("strong"),jio=o("vit"),Dio=o(" \u2014 "),pP=a("a"),Gio=o("ViTFeatureExtractor"),Oio=o(" (ViT model)"),Vio=l(),vh=a("li"),pae=a("strong"),Xio=o("vit_mae"),zio=o(" \u2014 "),uP=a("a"),Qio=o("ViTFeatureExtractor"),Wio=o(" (ViTMAE model)"),Hio=l(),Fh=a("li"),uae=a("strong"),Uio=o("wav2vec2"),Jio=o(" \u2014 "),_P=a("a"),Yio=o("Wav2Vec2FeatureExtractor"),Kio=o(" (Wav2Vec2 model)"),Zio=l(),Th=a("li"),_ae=a("strong"),edo=o("yolos"),odo=o(" \u2014 "),bP=a("a"),rdo=o("YolosFeatureExtractor"),tdo=o(" (YOLOS model)"),ado=l(),F(Mh.$$.fragment),ndo=l(),F(Eh.$$.fragment),sdo=l(),Ch=a("div"),F(g6.$$.fragment),ldo=l(),bae=a("p"),ido=o("Register a new feature extractor for this class."),OPe=l(),vi=a("h2"),wh=a("a"),vae=a("span"),F(h6.$$.fragment),ddo=l(),Fae=a("span"),cdo=o("AutoProcessor"),VPe=l(),yo=a("div"),F(p6.$$.fragment),fdo=l(),u6=a("p"),mdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vP=a("a"),gdo=o("AutoProcessor.from_pretrained()"),hdo=o(" class method."),pdo=l(),_6=a("p"),udo=o("This class cannot be instantiated directly using "),Tae=a("code"),_do=o("__init__()"),bdo=o(" (throws an error)."),vdo=l(),We=a("div"),F(b6.$$.fragment),Fdo=l(),Mae=a("p"),Tdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mdo=l(),Fi=a("p"),Edo=o("The processor class to instantiate is selected based on the "),Eae=a("code"),Cdo=o("model_type"),wdo=o(` property of the config object (either
passed as an argument or loaded from `),Cae=a("code"),Ado=o("pretrained_model_name_or_path"),ydo=o(" if possible):"),Ldo=l(),_e=a("ul"),Ah=a("li"),wae=a("strong"),xdo=o("clip"),$do=o(" \u2014 "),FP=a("a"),kdo=o("CLIPProcessor"),Sdo=o(" (CLIP model)"),Rdo=l(),yh=a("li"),Aae=a("strong"),Bdo=o("flava"),Pdo=o(" \u2014 "),yae=a("code"),Ido=o("FLAVAProcessor"),qdo=o(" (Flava model)"),Ndo=l(),Lh=a("li"),Lae=a("strong"),jdo=o("layoutlmv2"),Ddo=o(" \u2014 "),TP=a("a"),Gdo=o("LayoutLMv2Processor"),Odo=o(" (LayoutLMv2 model)"),Vdo=l(),xh=a("li"),xae=a("strong"),Xdo=o("layoutxlm"),zdo=o(" \u2014 "),MP=a("a"),Qdo=o("LayoutXLMProcessor"),Wdo=o(" (LayoutXLM model)"),Hdo=l(),$h=a("li"),$ae=a("strong"),Udo=o("sew"),Jdo=o(" \u2014 "),EP=a("a"),Ydo=o("Wav2Vec2Processor"),Kdo=o(" (SEW model)"),Zdo=l(),kh=a("li"),kae=a("strong"),eco=o("sew-d"),oco=o(" \u2014 "),CP=a("a"),rco=o("Wav2Vec2Processor"),tco=o(" (SEW-D model)"),aco=l(),Sh=a("li"),Sae=a("strong"),nco=o("speech_to_text"),sco=o(" \u2014 "),wP=a("a"),lco=o("Speech2TextProcessor"),ico=o(" (Speech2Text model)"),dco=l(),Rh=a("li"),Rae=a("strong"),cco=o("speech_to_text_2"),fco=o(" \u2014 "),AP=a("a"),mco=o("Speech2Text2Processor"),gco=o(" (Speech2Text2 model)"),hco=l(),Bh=a("li"),Bae=a("strong"),pco=o("trocr"),uco=o(" \u2014 "),yP=a("a"),_co=o("TrOCRProcessor"),bco=o(" (TrOCR model)"),vco=l(),Ph=a("li"),Pae=a("strong"),Fco=o("unispeech"),Tco=o(" \u2014 "),LP=a("a"),Mco=o("Wav2Vec2Processor"),Eco=o(" (UniSpeech model)"),Cco=l(),Ih=a("li"),Iae=a("strong"),wco=o("unispeech-sat"),Aco=o(" \u2014 "),xP=a("a"),yco=o("Wav2Vec2Processor"),Lco=o(" (UniSpeechSat model)"),xco=l(),qh=a("li"),qae=a("strong"),$co=o("vilt"),kco=o(" \u2014 "),$P=a("a"),Sco=o("ViltProcessor"),Rco=o(" (ViLT model)"),Bco=l(),Nh=a("li"),Nae=a("strong"),Pco=o("vision-text-dual-encoder"),Ico=o(" \u2014 "),kP=a("a"),qco=o("VisionTextDualEncoderProcessor"),Nco=o(" (VisionTextDualEncoder model)"),jco=l(),jh=a("li"),jae=a("strong"),Dco=o("wav2vec2"),Gco=o(" \u2014 "),SP=a("a"),Oco=o("Wav2Vec2Processor"),Vco=o(" (Wav2Vec2 model)"),Xco=l(),Dh=a("li"),Dae=a("strong"),zco=o("wavlm"),Qco=o(" \u2014 "),RP=a("a"),Wco=o("Wav2Vec2Processor"),Hco=o(" (WavLM model)"),Uco=l(),F(Gh.$$.fragment),Jco=l(),F(Oh.$$.fragment),Yco=l(),Vh=a("div"),F(v6.$$.fragment),Kco=l(),Gae=a("p"),Zco=o("Register a new processor for this class."),XPe=l(),Ti=a("h2"),Xh=a("a"),Oae=a("span"),F(F6.$$.fragment),efo=l(),Vae=a("span"),ofo=o("AutoModel"),zPe=l(),Lo=a("div"),F(T6.$$.fragment),rfo=l(),Mi=a("p"),tfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BP=a("a"),afo=o("from_pretrained()"),nfo=o(" class method or the "),PP=a("a"),sfo=o("from_config()"),lfo=o(` class
method.`),ifo=l(),M6=a("p"),dfo=o("This class cannot be instantiated directly using "),Xae=a("code"),cfo=o("__init__()"),ffo=o(" (throws an error)."),mfo=l(),ot=a("div"),F(E6.$$.fragment),gfo=l(),zae=a("p"),hfo=o("Instantiates one of the base model classes of the library from a configuration."),pfo=l(),Ei=a("p"),ufo=o(`Note:
Loading a model from its configuration file does `),Qae=a("strong"),_fo=o("not"),bfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=a("a"),vfo=o("from_pretrained()"),Ffo=o(" to load the model weights."),Tfo=l(),F(zh.$$.fragment),Mfo=l(),He=a("div"),F(C6.$$.fragment),Efo=l(),Wae=a("p"),Cfo=o("Instantiate one of the base model classes of the library from a pretrained model."),wfo=l(),Aa=a("p"),Afo=o("The model class to instantiate is selected based on the "),Hae=a("code"),yfo=o("model_type"),Lfo=o(` property of the config object (either
passed as an argument or loaded from `),Uae=a("code"),xfo=o("pretrained_model_name_or_path"),$fo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jae=a("code"),kfo=o("pretrained_model_name_or_path"),Sfo=o(":"),Rfo=l(),x=a("ul"),Qh=a("li"),Yae=a("strong"),Bfo=o("albert"),Pfo=o(" \u2014 "),qP=a("a"),Ifo=o("AlbertModel"),qfo=o(" (ALBERT model)"),Nfo=l(),Wh=a("li"),Kae=a("strong"),jfo=o("bart"),Dfo=o(" \u2014 "),NP=a("a"),Gfo=o("BartModel"),Ofo=o(" (BART model)"),Vfo=l(),Hh=a("li"),Zae=a("strong"),Xfo=o("beit"),zfo=o(" \u2014 "),jP=a("a"),Qfo=o("BeitModel"),Wfo=o(" (BEiT model)"),Hfo=l(),Uh=a("li"),ene=a("strong"),Ufo=o("bert"),Jfo=o(" \u2014 "),DP=a("a"),Yfo=o("BertModel"),Kfo=o(" (BERT model)"),Zfo=l(),Jh=a("li"),one=a("strong"),emo=o("bert-generation"),omo=o(" \u2014 "),GP=a("a"),rmo=o("BertGenerationEncoder"),tmo=o(" (Bert Generation model)"),amo=l(),Yh=a("li"),rne=a("strong"),nmo=o("big_bird"),smo=o(" \u2014 "),OP=a("a"),lmo=o("BigBirdModel"),imo=o(" (BigBird model)"),dmo=l(),Kh=a("li"),tne=a("strong"),cmo=o("bigbird_pegasus"),fmo=o(" \u2014 "),VP=a("a"),mmo=o("BigBirdPegasusModel"),gmo=o(" (BigBirdPegasus model)"),hmo=l(),Zh=a("li"),ane=a("strong"),pmo=o("blenderbot"),umo=o(" \u2014 "),XP=a("a"),_mo=o("BlenderbotModel"),bmo=o(" (Blenderbot model)"),vmo=l(),ep=a("li"),nne=a("strong"),Fmo=o("blenderbot-small"),Tmo=o(" \u2014 "),zP=a("a"),Mmo=o("BlenderbotSmallModel"),Emo=o(" (BlenderbotSmall model)"),Cmo=l(),op=a("li"),sne=a("strong"),wmo=o("camembert"),Amo=o(" \u2014 "),QP=a("a"),ymo=o("CamembertModel"),Lmo=o(" (CamemBERT model)"),xmo=l(),rp=a("li"),lne=a("strong"),$mo=o("canine"),kmo=o(" \u2014 "),WP=a("a"),Smo=o("CanineModel"),Rmo=o(" (Canine model)"),Bmo=l(),tp=a("li"),ine=a("strong"),Pmo=o("clip"),Imo=o(" \u2014 "),HP=a("a"),qmo=o("CLIPModel"),Nmo=o(" (CLIP model)"),jmo=l(),ap=a("li"),dne=a("strong"),Dmo=o("convbert"),Gmo=o(" \u2014 "),UP=a("a"),Omo=o("ConvBertModel"),Vmo=o(" (ConvBERT model)"),Xmo=l(),np=a("li"),cne=a("strong"),zmo=o("convnext"),Qmo=o(" \u2014 "),JP=a("a"),Wmo=o("ConvNextModel"),Hmo=o(" (ConvNext model)"),Umo=l(),sp=a("li"),fne=a("strong"),Jmo=o("ctrl"),Ymo=o(" \u2014 "),YP=a("a"),Kmo=o("CTRLModel"),Zmo=o(" (CTRL model)"),ego=l(),lp=a("li"),mne=a("strong"),ogo=o("data2vec-audio"),rgo=o(" \u2014 "),KP=a("a"),tgo=o("Data2VecAudioModel"),ago=o(" (Data2VecAudio model)"),ngo=l(),ip=a("li"),gne=a("strong"),sgo=o("data2vec-text"),lgo=o(" \u2014 "),ZP=a("a"),igo=o("Data2VecTextModel"),dgo=o(" (Data2VecText model)"),cgo=l(),dp=a("li"),hne=a("strong"),fgo=o("data2vec-vision"),mgo=o(" \u2014 "),eI=a("a"),ggo=o("Data2VecVisionModel"),hgo=o(" (Data2VecVision model)"),pgo=l(),cp=a("li"),pne=a("strong"),ugo=o("deberta"),_go=o(" \u2014 "),oI=a("a"),bgo=o("DebertaModel"),vgo=o(" (DeBERTa model)"),Fgo=l(),fp=a("li"),une=a("strong"),Tgo=o("deberta-v2"),Mgo=o(" \u2014 "),rI=a("a"),Ego=o("DebertaV2Model"),Cgo=o(" (DeBERTa-v2 model)"),wgo=l(),mp=a("li"),_ne=a("strong"),Ago=o("decision_transformer"),ygo=o(" \u2014 "),tI=a("a"),Lgo=o("DecisionTransformerModel"),xgo=o(" (Decision Transformer model)"),$go=l(),gp=a("li"),bne=a("strong"),kgo=o("deit"),Sgo=o(" \u2014 "),aI=a("a"),Rgo=o("DeiTModel"),Bgo=o(" (DeiT model)"),Pgo=l(),hp=a("li"),vne=a("strong"),Igo=o("detr"),qgo=o(" \u2014 "),nI=a("a"),Ngo=o("DetrModel"),jgo=o(" (DETR model)"),Dgo=l(),pp=a("li"),Fne=a("strong"),Ggo=o("distilbert"),Ogo=o(" \u2014 "),sI=a("a"),Vgo=o("DistilBertModel"),Xgo=o(" (DistilBERT model)"),zgo=l(),up=a("li"),Tne=a("strong"),Qgo=o("dpr"),Wgo=o(" \u2014 "),lI=a("a"),Hgo=o("DPRQuestionEncoder"),Ugo=o(" (DPR model)"),Jgo=l(),_p=a("li"),Mne=a("strong"),Ygo=o("dpt"),Kgo=o(" \u2014 "),iI=a("a"),Zgo=o("DPTModel"),eho=o(" (DPT model)"),oho=l(),bp=a("li"),Ene=a("strong"),rho=o("electra"),tho=o(" \u2014 "),dI=a("a"),aho=o("ElectraModel"),nho=o(" (ELECTRA model)"),sho=l(),vp=a("li"),Cne=a("strong"),lho=o("flaubert"),iho=o(" \u2014 "),cI=a("a"),dho=o("FlaubertModel"),cho=o(" (FlauBERT model)"),fho=l(),Fp=a("li"),wne=a("strong"),mho=o("flava"),gho=o(" \u2014 "),fI=a("a"),hho=o("FlavaModel"),pho=o(" (Flava model)"),uho=l(),Tp=a("li"),Ane=a("strong"),_ho=o("fnet"),bho=o(" \u2014 "),mI=a("a"),vho=o("FNetModel"),Fho=o(" (FNet model)"),Tho=l(),Mp=a("li"),yne=a("strong"),Mho=o("fsmt"),Eho=o(" \u2014 "),gI=a("a"),Cho=o("FSMTModel"),who=o(" (FairSeq Machine-Translation model)"),Aho=l(),Ss=a("li"),Lne=a("strong"),yho=o("funnel"),Lho=o(" \u2014 "),hI=a("a"),xho=o("FunnelModel"),$ho=o(" or "),pI=a("a"),kho=o("FunnelBaseModel"),Sho=o(" (Funnel Transformer model)"),Rho=l(),Ep=a("li"),xne=a("strong"),Bho=o("glpn"),Pho=o(" \u2014 "),uI=a("a"),Iho=o("GLPNModel"),qho=o(" (GLPN model)"),Nho=l(),Cp=a("li"),$ne=a("strong"),jho=o("gpt2"),Dho=o(" \u2014 "),_I=a("a"),Gho=o("GPT2Model"),Oho=o(" (OpenAI GPT-2 model)"),Vho=l(),wp=a("li"),kne=a("strong"),Xho=o("gpt_neo"),zho=o(" \u2014 "),bI=a("a"),Qho=o("GPTNeoModel"),Who=o(" (GPT Neo model)"),Hho=l(),Ap=a("li"),Sne=a("strong"),Uho=o("gptj"),Jho=o(" \u2014 "),vI=a("a"),Yho=o("GPTJModel"),Kho=o(" (GPT-J model)"),Zho=l(),yp=a("li"),Rne=a("strong"),epo=o("hubert"),opo=o(" \u2014 "),FI=a("a"),rpo=o("HubertModel"),tpo=o(" (Hubert model)"),apo=l(),Lp=a("li"),Bne=a("strong"),npo=o("ibert"),spo=o(" \u2014 "),TI=a("a"),lpo=o("IBertModel"),ipo=o(" (I-BERT model)"),dpo=l(),xp=a("li"),Pne=a("strong"),cpo=o("imagegpt"),fpo=o(" \u2014 "),MI=a("a"),mpo=o("ImageGPTModel"),gpo=o(" (ImageGPT model)"),hpo=l(),$p=a("li"),Ine=a("strong"),ppo=o("layoutlm"),upo=o(" \u2014 "),EI=a("a"),_po=o("LayoutLMModel"),bpo=o(" (LayoutLM model)"),vpo=l(),kp=a("li"),qne=a("strong"),Fpo=o("layoutlmv2"),Tpo=o(" \u2014 "),CI=a("a"),Mpo=o("LayoutLMv2Model"),Epo=o(" (LayoutLMv2 model)"),Cpo=l(),Sp=a("li"),Nne=a("strong"),wpo=o("led"),Apo=o(" \u2014 "),wI=a("a"),ypo=o("LEDModel"),Lpo=o(" (LED model)"),xpo=l(),Rp=a("li"),jne=a("strong"),$po=o("longformer"),kpo=o(" \u2014 "),AI=a("a"),Spo=o("LongformerModel"),Rpo=o(" (Longformer model)"),Bpo=l(),Bp=a("li"),Dne=a("strong"),Ppo=o("luke"),Ipo=o(" \u2014 "),yI=a("a"),qpo=o("LukeModel"),Npo=o(" (LUKE model)"),jpo=l(),Pp=a("li"),Gne=a("strong"),Dpo=o("lxmert"),Gpo=o(" \u2014 "),LI=a("a"),Opo=o("LxmertModel"),Vpo=o(" (LXMERT model)"),Xpo=l(),Ip=a("li"),One=a("strong"),zpo=o("m2m_100"),Qpo=o(" \u2014 "),xI=a("a"),Wpo=o("M2M100Model"),Hpo=o(" (M2M100 model)"),Upo=l(),qp=a("li"),Vne=a("strong"),Jpo=o("marian"),Ypo=o(" \u2014 "),$I=a("a"),Kpo=o("MarianModel"),Zpo=o(" (Marian model)"),euo=l(),Np=a("li"),Xne=a("strong"),ouo=o("maskformer"),ruo=o(" \u2014 "),kI=a("a"),tuo=o("MaskFormerModel"),auo=o(" (MaskFormer model)"),nuo=l(),jp=a("li"),zne=a("strong"),suo=o("mbart"),luo=o(" \u2014 "),SI=a("a"),iuo=o("MBartModel"),duo=o(" (mBART model)"),cuo=l(),Dp=a("li"),Qne=a("strong"),fuo=o("megatron-bert"),muo=o(" \u2014 "),RI=a("a"),guo=o("MegatronBertModel"),huo=o(" (MegatronBert model)"),puo=l(),Gp=a("li"),Wne=a("strong"),uuo=o("mobilebert"),_uo=o(" \u2014 "),BI=a("a"),buo=o("MobileBertModel"),vuo=o(" (MobileBERT model)"),Fuo=l(),Op=a("li"),Hne=a("strong"),Tuo=o("mpnet"),Muo=o(" \u2014 "),PI=a("a"),Euo=o("MPNetModel"),Cuo=o(" (MPNet model)"),wuo=l(),Vp=a("li"),Une=a("strong"),Auo=o("mt5"),yuo=o(" \u2014 "),II=a("a"),Luo=o("MT5Model"),xuo=o(" (mT5 model)"),$uo=l(),Xp=a("li"),Jne=a("strong"),kuo=o("nystromformer"),Suo=o(" \u2014 "),qI=a("a"),Ruo=o("NystromformerModel"),Buo=o(" (Nystromformer model)"),Puo=l(),zp=a("li"),Yne=a("strong"),Iuo=o("openai-gpt"),quo=o(" \u2014 "),NI=a("a"),Nuo=o("OpenAIGPTModel"),juo=o(" (OpenAI GPT model)"),Duo=l(),Qp=a("li"),Kne=a("strong"),Guo=o("opt"),Ouo=o(" \u2014 "),jI=a("a"),Vuo=o("OPTModel"),Xuo=o(" (OPT model)"),zuo=l(),Wp=a("li"),Zne=a("strong"),Quo=o("pegasus"),Wuo=o(" \u2014 "),DI=a("a"),Huo=o("PegasusModel"),Uuo=o(" (Pegasus model)"),Juo=l(),Hp=a("li"),ese=a("strong"),Yuo=o("perceiver"),Kuo=o(" \u2014 "),GI=a("a"),Zuo=o("PerceiverModel"),e_o=o(" (Perceiver model)"),o_o=l(),Up=a("li"),ose=a("strong"),r_o=o("plbart"),t_o=o(" \u2014 "),OI=a("a"),a_o=o("PLBartModel"),n_o=o(" (PLBart model)"),s_o=l(),Jp=a("li"),rse=a("strong"),l_o=o("poolformer"),i_o=o(" \u2014 "),VI=a("a"),d_o=o("PoolFormerModel"),c_o=o(" (PoolFormer model)"),f_o=l(),Yp=a("li"),tse=a("strong"),m_o=o("prophetnet"),g_o=o(" \u2014 "),XI=a("a"),h_o=o("ProphetNetModel"),p_o=o(" (ProphetNet model)"),u_o=l(),Kp=a("li"),ase=a("strong"),__o=o("qdqbert"),b_o=o(" \u2014 "),zI=a("a"),v_o=o("QDQBertModel"),F_o=o(" (QDQBert model)"),T_o=l(),Zp=a("li"),nse=a("strong"),M_o=o("reformer"),E_o=o(" \u2014 "),QI=a("a"),C_o=o("ReformerModel"),w_o=o(" (Reformer model)"),A_o=l(),eu=a("li"),sse=a("strong"),y_o=o("regnet"),L_o=o(" \u2014 "),WI=a("a"),x_o=o("RegNetModel"),$_o=o(" (RegNet model)"),k_o=l(),ou=a("li"),lse=a("strong"),S_o=o("rembert"),R_o=o(" \u2014 "),HI=a("a"),B_o=o("RemBertModel"),P_o=o(" (RemBERT model)"),I_o=l(),ru=a("li"),ise=a("strong"),q_o=o("resnet"),N_o=o(" \u2014 "),UI=a("a"),j_o=o("ResNetModel"),D_o=o(" (ResNet model)"),G_o=l(),tu=a("li"),dse=a("strong"),O_o=o("retribert"),V_o=o(" \u2014 "),JI=a("a"),X_o=o("RetriBertModel"),z_o=o(" (RetriBERT model)"),Q_o=l(),au=a("li"),cse=a("strong"),W_o=o("roberta"),H_o=o(" \u2014 "),YI=a("a"),U_o=o("RobertaModel"),J_o=o(" (RoBERTa model)"),Y_o=l(),nu=a("li"),fse=a("strong"),K_o=o("roformer"),Z_o=o(" \u2014 "),KI=a("a"),e2o=o("RoFormerModel"),o2o=o(" (RoFormer model)"),r2o=l(),su=a("li"),mse=a("strong"),t2o=o("segformer"),a2o=o(" \u2014 "),ZI=a("a"),n2o=o("SegformerModel"),s2o=o(" (SegFormer model)"),l2o=l(),lu=a("li"),gse=a("strong"),i2o=o("sew"),d2o=o(" \u2014 "),eq=a("a"),c2o=o("SEWModel"),f2o=o(" (SEW model)"),m2o=l(),iu=a("li"),hse=a("strong"),g2o=o("sew-d"),h2o=o(" \u2014 "),oq=a("a"),p2o=o("SEWDModel"),u2o=o(" (SEW-D model)"),_2o=l(),du=a("li"),pse=a("strong"),b2o=o("speech_to_text"),v2o=o(" \u2014 "),rq=a("a"),F2o=o("Speech2TextModel"),T2o=o(" (Speech2Text model)"),M2o=l(),cu=a("li"),use=a("strong"),E2o=o("splinter"),C2o=o(" \u2014 "),tq=a("a"),w2o=o("SplinterModel"),A2o=o(" (Splinter model)"),y2o=l(),fu=a("li"),_se=a("strong"),L2o=o("squeezebert"),x2o=o(" \u2014 "),aq=a("a"),$2o=o("SqueezeBertModel"),k2o=o(" (SqueezeBERT model)"),S2o=l(),mu=a("li"),bse=a("strong"),R2o=o("swin"),B2o=o(" \u2014 "),nq=a("a"),P2o=o("SwinModel"),I2o=o(" (Swin model)"),q2o=l(),gu=a("li"),vse=a("strong"),N2o=o("t5"),j2o=o(" \u2014 "),sq=a("a"),D2o=o("T5Model"),G2o=o(" (T5 model)"),O2o=l(),hu=a("li"),Fse=a("strong"),V2o=o("tapas"),X2o=o(" \u2014 "),lq=a("a"),z2o=o("TapasModel"),Q2o=o(" (TAPAS model)"),W2o=l(),pu=a("li"),Tse=a("strong"),H2o=o("transfo-xl"),U2o=o(" \u2014 "),iq=a("a"),J2o=o("TransfoXLModel"),Y2o=o(" (Transformer-XL model)"),K2o=l(),uu=a("li"),Mse=a("strong"),Z2o=o("unispeech"),e1o=o(" \u2014 "),dq=a("a"),o1o=o("UniSpeechModel"),r1o=o(" (UniSpeech model)"),t1o=l(),_u=a("li"),Ese=a("strong"),a1o=o("unispeech-sat"),n1o=o(" \u2014 "),cq=a("a"),s1o=o("UniSpeechSatModel"),l1o=o(" (UniSpeechSat model)"),i1o=l(),bu=a("li"),Cse=a("strong"),d1o=o("van"),c1o=o(" \u2014 "),fq=a("a"),f1o=o("VanModel"),m1o=o(" (VAN model)"),g1o=l(),vu=a("li"),wse=a("strong"),h1o=o("vilt"),p1o=o(" \u2014 "),mq=a("a"),u1o=o("ViltModel"),_1o=o(" (ViLT model)"),b1o=l(),Fu=a("li"),Ase=a("strong"),v1o=o("vision-text-dual-encoder"),F1o=o(" \u2014 "),gq=a("a"),T1o=o("VisionTextDualEncoderModel"),M1o=o(" (VisionTextDualEncoder model)"),E1o=l(),Tu=a("li"),yse=a("strong"),C1o=o("visual_bert"),w1o=o(" \u2014 "),hq=a("a"),A1o=o("VisualBertModel"),y1o=o(" (VisualBert model)"),L1o=l(),Mu=a("li"),Lse=a("strong"),x1o=o("vit"),$1o=o(" \u2014 "),pq=a("a"),k1o=o("ViTModel"),S1o=o(" (ViT model)"),R1o=l(),Eu=a("li"),xse=a("strong"),B1o=o("vit_mae"),P1o=o(" \u2014 "),uq=a("a"),I1o=o("ViTMAEModel"),q1o=o(" (ViTMAE model)"),N1o=l(),Cu=a("li"),$se=a("strong"),j1o=o("wav2vec2"),D1o=o(" \u2014 "),_q=a("a"),G1o=o("Wav2Vec2Model"),O1o=o(" (Wav2Vec2 model)"),V1o=l(),wu=a("li"),kse=a("strong"),X1o=o("wavlm"),z1o=o(" \u2014 "),bq=a("a"),Q1o=o("WavLMModel"),W1o=o(" (WavLM model)"),H1o=l(),Au=a("li"),Sse=a("strong"),U1o=o("xglm"),J1o=o(" \u2014 "),vq=a("a"),Y1o=o("XGLMModel"),K1o=o(" (XGLM model)"),Z1o=l(),yu=a("li"),Rse=a("strong"),ebo=o("xlm"),obo=o(" \u2014 "),Fq=a("a"),rbo=o("XLMModel"),tbo=o(" (XLM model)"),abo=l(),Lu=a("li"),Bse=a("strong"),nbo=o("xlm-prophetnet"),sbo=o(" \u2014 "),Tq=a("a"),lbo=o("XLMProphetNetModel"),ibo=o(" (XLMProphetNet model)"),dbo=l(),xu=a("li"),Pse=a("strong"),cbo=o("xlm-roberta"),fbo=o(" \u2014 "),Mq=a("a"),mbo=o("XLMRobertaModel"),gbo=o(" (XLM-RoBERTa model)"),hbo=l(),$u=a("li"),Ise=a("strong"),pbo=o("xlm-roberta-xl"),ubo=o(" \u2014 "),Eq=a("a"),_bo=o("XLMRobertaXLModel"),bbo=o(" (XLM-RoBERTa-XL model)"),vbo=l(),ku=a("li"),qse=a("strong"),Fbo=o("xlnet"),Tbo=o(" \u2014 "),Cq=a("a"),Mbo=o("XLNetModel"),Ebo=o(" (XLNet model)"),Cbo=l(),Su=a("li"),Nse=a("strong"),wbo=o("yolos"),Abo=o(" \u2014 "),wq=a("a"),ybo=o("YolosModel"),Lbo=o(" (YOLOS model)"),xbo=l(),Ru=a("li"),jse=a("strong"),$bo=o("yoso"),kbo=o(" \u2014 "),Aq=a("a"),Sbo=o("YosoModel"),Rbo=o(" (YOSO model)"),Bbo=l(),Bu=a("p"),Pbo=o("The model is set in evaluation mode by default using "),Dse=a("code"),Ibo=o("model.eval()"),qbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gse=a("code"),Nbo=o("model.train()"),jbo=l(),F(Pu.$$.fragment),QPe=l(),Ci=a("h2"),Iu=a("a"),Ose=a("span"),F(w6.$$.fragment),Dbo=l(),Vse=a("span"),Gbo=o("AutoModelForPreTraining"),WPe=l(),xo=a("div"),F(A6.$$.fragment),Obo=l(),wi=a("p"),Vbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=a("a"),Xbo=o("from_pretrained()"),zbo=o(" class method or the "),Lq=a("a"),Qbo=o("from_config()"),Wbo=o(` class
method.`),Hbo=l(),y6=a("p"),Ubo=o("This class cannot be instantiated directly using "),Xse=a("code"),Jbo=o("__init__()"),Ybo=o(" (throws an error)."),Kbo=l(),rt=a("div"),F(L6.$$.fragment),Zbo=l(),zse=a("p"),e5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o5o=l(),Ai=a("p"),r5o=o(`Note:
Loading a model from its configuration file does `),Qse=a("strong"),t5o=o("not"),a5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),n5o=o("from_pretrained()"),s5o=o(" to load the model weights."),l5o=l(),F(qu.$$.fragment),i5o=l(),Ue=a("div"),F(x6.$$.fragment),d5o=l(),Wse=a("p"),c5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f5o=l(),ya=a("p"),m5o=o("The model class to instantiate is selected based on the "),Hse=a("code"),g5o=o("model_type"),h5o=o(` property of the config object (either
passed as an argument or loaded from `),Use=a("code"),p5o=o("pretrained_model_name_or_path"),u5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=a("code"),_5o=o("pretrained_model_name_or_path"),b5o=o(":"),v5o=l(),G=a("ul"),Nu=a("li"),Yse=a("strong"),F5o=o("albert"),T5o=o(" \u2014 "),$q=a("a"),M5o=o("AlbertForPreTraining"),E5o=o(" (ALBERT model)"),C5o=l(),ju=a("li"),Kse=a("strong"),w5o=o("bart"),A5o=o(" \u2014 "),kq=a("a"),y5o=o("BartForConditionalGeneration"),L5o=o(" (BART model)"),x5o=l(),Du=a("li"),Zse=a("strong"),$5o=o("bert"),k5o=o(" \u2014 "),Sq=a("a"),S5o=o("BertForPreTraining"),R5o=o(" (BERT model)"),B5o=l(),Gu=a("li"),ele=a("strong"),P5o=o("big_bird"),I5o=o(" \u2014 "),Rq=a("a"),q5o=o("BigBirdForPreTraining"),N5o=o(" (BigBird model)"),j5o=l(),Ou=a("li"),ole=a("strong"),D5o=o("camembert"),G5o=o(" \u2014 "),Bq=a("a"),O5o=o("CamembertForMaskedLM"),V5o=o(" (CamemBERT model)"),X5o=l(),Vu=a("li"),rle=a("strong"),z5o=o("ctrl"),Q5o=o(" \u2014 "),Pq=a("a"),W5o=o("CTRLLMHeadModel"),H5o=o(" (CTRL model)"),U5o=l(),Xu=a("li"),tle=a("strong"),J5o=o("data2vec-text"),Y5o=o(" \u2014 "),Iq=a("a"),K5o=o("Data2VecTextForMaskedLM"),Z5o=o(" (Data2VecText model)"),evo=l(),zu=a("li"),ale=a("strong"),ovo=o("deberta"),rvo=o(" \u2014 "),qq=a("a"),tvo=o("DebertaForMaskedLM"),avo=o(" (DeBERTa model)"),nvo=l(),Qu=a("li"),nle=a("strong"),svo=o("deberta-v2"),lvo=o(" \u2014 "),Nq=a("a"),ivo=o("DebertaV2ForMaskedLM"),dvo=o(" (DeBERTa-v2 model)"),cvo=l(),Wu=a("li"),sle=a("strong"),fvo=o("distilbert"),mvo=o(" \u2014 "),jq=a("a"),gvo=o("DistilBertForMaskedLM"),hvo=o(" (DistilBERT model)"),pvo=l(),Hu=a("li"),lle=a("strong"),uvo=o("electra"),_vo=o(" \u2014 "),Dq=a("a"),bvo=o("ElectraForPreTraining"),vvo=o(" (ELECTRA model)"),Fvo=l(),Uu=a("li"),ile=a("strong"),Tvo=o("flaubert"),Mvo=o(" \u2014 "),Gq=a("a"),Evo=o("FlaubertWithLMHeadModel"),Cvo=o(" (FlauBERT model)"),wvo=l(),Ju=a("li"),dle=a("strong"),Avo=o("flava"),yvo=o(" \u2014 "),Oq=a("a"),Lvo=o("FlavaForPreTraining"),xvo=o(" (Flava model)"),$vo=l(),Yu=a("li"),cle=a("strong"),kvo=o("fnet"),Svo=o(" \u2014 "),Vq=a("a"),Rvo=o("FNetForPreTraining"),Bvo=o(" (FNet model)"),Pvo=l(),Ku=a("li"),fle=a("strong"),Ivo=o("fsmt"),qvo=o(" \u2014 "),Xq=a("a"),Nvo=o("FSMTForConditionalGeneration"),jvo=o(" (FairSeq Machine-Translation model)"),Dvo=l(),Zu=a("li"),mle=a("strong"),Gvo=o("funnel"),Ovo=o(" \u2014 "),zq=a("a"),Vvo=o("FunnelForPreTraining"),Xvo=o(" (Funnel Transformer model)"),zvo=l(),e_=a("li"),gle=a("strong"),Qvo=o("gpt2"),Wvo=o(" \u2014 "),Qq=a("a"),Hvo=o("GPT2LMHeadModel"),Uvo=o(" (OpenAI GPT-2 model)"),Jvo=l(),o_=a("li"),hle=a("strong"),Yvo=o("ibert"),Kvo=o(" \u2014 "),Wq=a("a"),Zvo=o("IBertForMaskedLM"),eFo=o(" (I-BERT model)"),oFo=l(),r_=a("li"),ple=a("strong"),rFo=o("layoutlm"),tFo=o(" \u2014 "),Hq=a("a"),aFo=o("LayoutLMForMaskedLM"),nFo=o(" (LayoutLM model)"),sFo=l(),t_=a("li"),ule=a("strong"),lFo=o("longformer"),iFo=o(" \u2014 "),Uq=a("a"),dFo=o("LongformerForMaskedLM"),cFo=o(" (Longformer model)"),fFo=l(),a_=a("li"),_le=a("strong"),mFo=o("lxmert"),gFo=o(" \u2014 "),Jq=a("a"),hFo=o("LxmertForPreTraining"),pFo=o(" (LXMERT model)"),uFo=l(),n_=a("li"),ble=a("strong"),_Fo=o("megatron-bert"),bFo=o(" \u2014 "),Yq=a("a"),vFo=o("MegatronBertForPreTraining"),FFo=o(" (MegatronBert model)"),TFo=l(),s_=a("li"),vle=a("strong"),MFo=o("mobilebert"),EFo=o(" \u2014 "),Kq=a("a"),CFo=o("MobileBertForPreTraining"),wFo=o(" (MobileBERT model)"),AFo=l(),l_=a("li"),Fle=a("strong"),yFo=o("mpnet"),LFo=o(" \u2014 "),Zq=a("a"),xFo=o("MPNetForMaskedLM"),$Fo=o(" (MPNet model)"),kFo=l(),i_=a("li"),Tle=a("strong"),SFo=o("openai-gpt"),RFo=o(" \u2014 "),eN=a("a"),BFo=o("OpenAIGPTLMHeadModel"),PFo=o(" (OpenAI GPT model)"),IFo=l(),d_=a("li"),Mle=a("strong"),qFo=o("retribert"),NFo=o(" \u2014 "),oN=a("a"),jFo=o("RetriBertModel"),DFo=o(" (RetriBERT model)"),GFo=l(),c_=a("li"),Ele=a("strong"),OFo=o("roberta"),VFo=o(" \u2014 "),rN=a("a"),XFo=o("RobertaForMaskedLM"),zFo=o(" (RoBERTa model)"),QFo=l(),f_=a("li"),Cle=a("strong"),WFo=o("squeezebert"),HFo=o(" \u2014 "),tN=a("a"),UFo=o("SqueezeBertForMaskedLM"),JFo=o(" (SqueezeBERT model)"),YFo=l(),m_=a("li"),wle=a("strong"),KFo=o("t5"),ZFo=o(" \u2014 "),aN=a("a"),e0o=o("T5ForConditionalGeneration"),o0o=o(" (T5 model)"),r0o=l(),g_=a("li"),Ale=a("strong"),t0o=o("tapas"),a0o=o(" \u2014 "),nN=a("a"),n0o=o("TapasForMaskedLM"),s0o=o(" (TAPAS model)"),l0o=l(),h_=a("li"),yle=a("strong"),i0o=o("transfo-xl"),d0o=o(" \u2014 "),sN=a("a"),c0o=o("TransfoXLLMHeadModel"),f0o=o(" (Transformer-XL model)"),m0o=l(),p_=a("li"),Lle=a("strong"),g0o=o("unispeech"),h0o=o(" \u2014 "),lN=a("a"),p0o=o("UniSpeechForPreTraining"),u0o=o(" (UniSpeech model)"),_0o=l(),u_=a("li"),xle=a("strong"),b0o=o("unispeech-sat"),v0o=o(" \u2014 "),iN=a("a"),F0o=o("UniSpeechSatForPreTraining"),T0o=o(" (UniSpeechSat model)"),M0o=l(),__=a("li"),$le=a("strong"),E0o=o("visual_bert"),C0o=o(" \u2014 "),dN=a("a"),w0o=o("VisualBertForPreTraining"),A0o=o(" (VisualBert model)"),y0o=l(),b_=a("li"),kle=a("strong"),L0o=o("vit_mae"),x0o=o(" \u2014 "),cN=a("a"),$0o=o("ViTMAEForPreTraining"),k0o=o(" (ViTMAE model)"),S0o=l(),v_=a("li"),Sle=a("strong"),R0o=o("wav2vec2"),B0o=o(" \u2014 "),fN=a("a"),P0o=o("Wav2Vec2ForPreTraining"),I0o=o(" (Wav2Vec2 model)"),q0o=l(),F_=a("li"),Rle=a("strong"),N0o=o("xlm"),j0o=o(" \u2014 "),mN=a("a"),D0o=o("XLMWithLMHeadModel"),G0o=o(" (XLM model)"),O0o=l(),T_=a("li"),Ble=a("strong"),V0o=o("xlm-roberta"),X0o=o(" \u2014 "),gN=a("a"),z0o=o("XLMRobertaForMaskedLM"),Q0o=o(" (XLM-RoBERTa model)"),W0o=l(),M_=a("li"),Ple=a("strong"),H0o=o("xlm-roberta-xl"),U0o=o(" \u2014 "),hN=a("a"),J0o=o("XLMRobertaXLForMaskedLM"),Y0o=o(" (XLM-RoBERTa-XL model)"),K0o=l(),E_=a("li"),Ile=a("strong"),Z0o=o("xlnet"),eTo=o(" \u2014 "),pN=a("a"),oTo=o("XLNetLMHeadModel"),rTo=o(" (XLNet model)"),tTo=l(),C_=a("p"),aTo=o("The model is set in evaluation mode by default using "),qle=a("code"),nTo=o("model.eval()"),sTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=a("code"),lTo=o("model.train()"),iTo=l(),F(w_.$$.fragment),HPe=l(),yi=a("h2"),A_=a("a"),jle=a("span"),F($6.$$.fragment),dTo=l(),Dle=a("span"),cTo=o("AutoModelForCausalLM"),UPe=l(),$o=a("div"),F(k6.$$.fragment),fTo=l(),Li=a("p"),mTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uN=a("a"),gTo=o("from_pretrained()"),hTo=o(" class method or the "),_N=a("a"),pTo=o("from_config()"),uTo=o(` class
method.`),_To=l(),S6=a("p"),bTo=o("This class cannot be instantiated directly using "),Gle=a("code"),vTo=o("__init__()"),FTo=o(" (throws an error)."),TTo=l(),tt=a("div"),F(R6.$$.fragment),MTo=l(),Ole=a("p"),ETo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CTo=l(),xi=a("p"),wTo=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),ATo=o("not"),yTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),LTo=o("from_pretrained()"),xTo=o(" to load the model weights."),$To=l(),F(y_.$$.fragment),kTo=l(),Je=a("div"),F(B6.$$.fragment),STo=l(),Xle=a("p"),RTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BTo=l(),La=a("p"),PTo=o("The model class to instantiate is selected based on the "),zle=a("code"),ITo=o("model_type"),qTo=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),NTo=o("pretrained_model_name_or_path"),jTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),DTo=o("pretrained_model_name_or_path"),GTo=o(":"),OTo=l(),z=a("ul"),L_=a("li"),Hle=a("strong"),VTo=o("bart"),XTo=o(" \u2014 "),vN=a("a"),zTo=o("BartForCausalLM"),QTo=o(" (BART model)"),WTo=l(),x_=a("li"),Ule=a("strong"),HTo=o("bert"),UTo=o(" \u2014 "),FN=a("a"),JTo=o("BertLMHeadModel"),YTo=o(" (BERT model)"),KTo=l(),$_=a("li"),Jle=a("strong"),ZTo=o("bert-generation"),e7o=o(" \u2014 "),TN=a("a"),o7o=o("BertGenerationDecoder"),r7o=o(" (Bert Generation model)"),t7o=l(),k_=a("li"),Yle=a("strong"),a7o=o("big_bird"),n7o=o(" \u2014 "),MN=a("a"),s7o=o("BigBirdForCausalLM"),l7o=o(" (BigBird model)"),i7o=l(),S_=a("li"),Kle=a("strong"),d7o=o("bigbird_pegasus"),c7o=o(" \u2014 "),EN=a("a"),f7o=o("BigBirdPegasusForCausalLM"),m7o=o(" (BigBirdPegasus model)"),g7o=l(),R_=a("li"),Zle=a("strong"),h7o=o("blenderbot"),p7o=o(" \u2014 "),CN=a("a"),u7o=o("BlenderbotForCausalLM"),_7o=o(" (Blenderbot model)"),b7o=l(),B_=a("li"),eie=a("strong"),v7o=o("blenderbot-small"),F7o=o(" \u2014 "),wN=a("a"),T7o=o("BlenderbotSmallForCausalLM"),M7o=o(" (BlenderbotSmall model)"),E7o=l(),P_=a("li"),oie=a("strong"),C7o=o("camembert"),w7o=o(" \u2014 "),AN=a("a"),A7o=o("CamembertForCausalLM"),y7o=o(" (CamemBERT model)"),L7o=l(),I_=a("li"),rie=a("strong"),x7o=o("ctrl"),$7o=o(" \u2014 "),yN=a("a"),k7o=o("CTRLLMHeadModel"),S7o=o(" (CTRL model)"),R7o=l(),q_=a("li"),tie=a("strong"),B7o=o("data2vec-text"),P7o=o(" \u2014 "),LN=a("a"),I7o=o("Data2VecTextForCausalLM"),q7o=o(" (Data2VecText model)"),N7o=l(),N_=a("li"),aie=a("strong"),j7o=o("electra"),D7o=o(" \u2014 "),xN=a("a"),G7o=o("ElectraForCausalLM"),O7o=o(" (ELECTRA model)"),V7o=l(),j_=a("li"),nie=a("strong"),X7o=o("gpt2"),z7o=o(" \u2014 "),$N=a("a"),Q7o=o("GPT2LMHeadModel"),W7o=o(" (OpenAI GPT-2 model)"),H7o=l(),D_=a("li"),sie=a("strong"),U7o=o("gpt_neo"),J7o=o(" \u2014 "),kN=a("a"),Y7o=o("GPTNeoForCausalLM"),K7o=o(" (GPT Neo model)"),Z7o=l(),G_=a("li"),lie=a("strong"),eMo=o("gptj"),oMo=o(" \u2014 "),SN=a("a"),rMo=o("GPTJForCausalLM"),tMo=o(" (GPT-J model)"),aMo=l(),O_=a("li"),iie=a("strong"),nMo=o("marian"),sMo=o(" \u2014 "),RN=a("a"),lMo=o("MarianForCausalLM"),iMo=o(" (Marian model)"),dMo=l(),V_=a("li"),die=a("strong"),cMo=o("mbart"),fMo=o(" \u2014 "),BN=a("a"),mMo=o("MBartForCausalLM"),gMo=o(" (mBART model)"),hMo=l(),X_=a("li"),cie=a("strong"),pMo=o("megatron-bert"),uMo=o(" \u2014 "),PN=a("a"),_Mo=o("MegatronBertForCausalLM"),bMo=o(" (MegatronBert model)"),vMo=l(),z_=a("li"),fie=a("strong"),FMo=o("openai-gpt"),TMo=o(" \u2014 "),IN=a("a"),MMo=o("OpenAIGPTLMHeadModel"),EMo=o(" (OpenAI GPT model)"),CMo=l(),Q_=a("li"),mie=a("strong"),wMo=o("opt"),AMo=o(" \u2014 "),qN=a("a"),yMo=o("OPTForCausalLM"),LMo=o(" (OPT model)"),xMo=l(),W_=a("li"),gie=a("strong"),$Mo=o("pegasus"),kMo=o(" \u2014 "),NN=a("a"),SMo=o("PegasusForCausalLM"),RMo=o(" (Pegasus model)"),BMo=l(),H_=a("li"),hie=a("strong"),PMo=o("plbart"),IMo=o(" \u2014 "),jN=a("a"),qMo=o("PLBartForCausalLM"),NMo=o(" (PLBart model)"),jMo=l(),U_=a("li"),pie=a("strong"),DMo=o("prophetnet"),GMo=o(" \u2014 "),DN=a("a"),OMo=o("ProphetNetForCausalLM"),VMo=o(" (ProphetNet model)"),XMo=l(),J_=a("li"),uie=a("strong"),zMo=o("qdqbert"),QMo=o(" \u2014 "),GN=a("a"),WMo=o("QDQBertLMHeadModel"),HMo=o(" (QDQBert model)"),UMo=l(),Y_=a("li"),_ie=a("strong"),JMo=o("reformer"),YMo=o(" \u2014 "),ON=a("a"),KMo=o("ReformerModelWithLMHead"),ZMo=o(" (Reformer model)"),e4o=l(),K_=a("li"),bie=a("strong"),o4o=o("rembert"),r4o=o(" \u2014 "),VN=a("a"),t4o=o("RemBertForCausalLM"),a4o=o(" (RemBERT model)"),n4o=l(),Z_=a("li"),vie=a("strong"),s4o=o("roberta"),l4o=o(" \u2014 "),XN=a("a"),i4o=o("RobertaForCausalLM"),d4o=o(" (RoBERTa model)"),c4o=l(),e2=a("li"),Fie=a("strong"),f4o=o("roformer"),m4o=o(" \u2014 "),zN=a("a"),g4o=o("RoFormerForCausalLM"),h4o=o(" (RoFormer model)"),p4o=l(),o2=a("li"),Tie=a("strong"),u4o=o("speech_to_text_2"),_4o=o(" \u2014 "),QN=a("a"),b4o=o("Speech2Text2ForCausalLM"),v4o=o(" (Speech2Text2 model)"),F4o=l(),r2=a("li"),Mie=a("strong"),T4o=o("transfo-xl"),M4o=o(" \u2014 "),WN=a("a"),E4o=o("TransfoXLLMHeadModel"),C4o=o(" (Transformer-XL model)"),w4o=l(),t2=a("li"),Eie=a("strong"),A4o=o("trocr"),y4o=o(" \u2014 "),HN=a("a"),L4o=o("TrOCRForCausalLM"),x4o=o(" (TrOCR model)"),$4o=l(),a2=a("li"),Cie=a("strong"),k4o=o("xglm"),S4o=o(" \u2014 "),UN=a("a"),R4o=o("XGLMForCausalLM"),B4o=o(" (XGLM model)"),P4o=l(),n2=a("li"),wie=a("strong"),I4o=o("xlm"),q4o=o(" \u2014 "),JN=a("a"),N4o=o("XLMWithLMHeadModel"),j4o=o(" (XLM model)"),D4o=l(),s2=a("li"),Aie=a("strong"),G4o=o("xlm-prophetnet"),O4o=o(" \u2014 "),YN=a("a"),V4o=o("XLMProphetNetForCausalLM"),X4o=o(" (XLMProphetNet model)"),z4o=l(),l2=a("li"),yie=a("strong"),Q4o=o("xlm-roberta"),W4o=o(" \u2014 "),KN=a("a"),H4o=o("XLMRobertaForCausalLM"),U4o=o(" (XLM-RoBERTa model)"),J4o=l(),i2=a("li"),Lie=a("strong"),Y4o=o("xlm-roberta-xl"),K4o=o(" \u2014 "),ZN=a("a"),Z4o=o("XLMRobertaXLForCausalLM"),eEo=o(" (XLM-RoBERTa-XL model)"),oEo=l(),d2=a("li"),xie=a("strong"),rEo=o("xlnet"),tEo=o(" \u2014 "),ej=a("a"),aEo=o("XLNetLMHeadModel"),nEo=o(" (XLNet model)"),sEo=l(),c2=a("p"),lEo=o("The model is set in evaluation mode by default using "),$ie=a("code"),iEo=o("model.eval()"),dEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),cEo=o("model.train()"),fEo=l(),F(f2.$$.fragment),JPe=l(),$i=a("h2"),m2=a("a"),Sie=a("span"),F(P6.$$.fragment),mEo=l(),Rie=a("span"),gEo=o("AutoModelForMaskedLM"),YPe=l(),ko=a("div"),F(I6.$$.fragment),hEo=l(),ki=a("p"),pEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oj=a("a"),uEo=o("from_pretrained()"),_Eo=o(" class method or the "),rj=a("a"),bEo=o("from_config()"),vEo=o(` class
method.`),FEo=l(),q6=a("p"),TEo=o("This class cannot be instantiated directly using "),Bie=a("code"),MEo=o("__init__()"),EEo=o(" (throws an error)."),CEo=l(),at=a("div"),F(N6.$$.fragment),wEo=l(),Pie=a("p"),AEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yEo=l(),Si=a("p"),LEo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),xEo=o("not"),$Eo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),kEo=o("from_pretrained()"),SEo=o(" to load the model weights."),REo=l(),F(g2.$$.fragment),BEo=l(),Ye=a("div"),F(j6.$$.fragment),PEo=l(),qie=a("p"),IEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qEo=l(),xa=a("p"),NEo=o("The model class to instantiate is selected based on the "),Nie=a("code"),jEo=o("model_type"),DEo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),GEo=o("pretrained_model_name_or_path"),OEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),VEo=o("pretrained_model_name_or_path"),XEo=o(":"),zEo=l(),Q=a("ul"),h2=a("li"),Gie=a("strong"),QEo=o("albert"),WEo=o(" \u2014 "),aj=a("a"),HEo=o("AlbertForMaskedLM"),UEo=o(" (ALBERT model)"),JEo=l(),p2=a("li"),Oie=a("strong"),YEo=o("bart"),KEo=o(" \u2014 "),nj=a("a"),ZEo=o("BartForConditionalGeneration"),eCo=o(" (BART model)"),oCo=l(),u2=a("li"),Vie=a("strong"),rCo=o("bert"),tCo=o(" \u2014 "),sj=a("a"),aCo=o("BertForMaskedLM"),nCo=o(" (BERT model)"),sCo=l(),_2=a("li"),Xie=a("strong"),lCo=o("big_bird"),iCo=o(" \u2014 "),lj=a("a"),dCo=o("BigBirdForMaskedLM"),cCo=o(" (BigBird model)"),fCo=l(),b2=a("li"),zie=a("strong"),mCo=o("camembert"),gCo=o(" \u2014 "),ij=a("a"),hCo=o("CamembertForMaskedLM"),pCo=o(" (CamemBERT model)"),uCo=l(),v2=a("li"),Qie=a("strong"),_Co=o("convbert"),bCo=o(" \u2014 "),dj=a("a"),vCo=o("ConvBertForMaskedLM"),FCo=o(" (ConvBERT model)"),TCo=l(),F2=a("li"),Wie=a("strong"),MCo=o("data2vec-text"),ECo=o(" \u2014 "),cj=a("a"),CCo=o("Data2VecTextForMaskedLM"),wCo=o(" (Data2VecText model)"),ACo=l(),T2=a("li"),Hie=a("strong"),yCo=o("deberta"),LCo=o(" \u2014 "),fj=a("a"),xCo=o("DebertaForMaskedLM"),$Co=o(" (DeBERTa model)"),kCo=l(),M2=a("li"),Uie=a("strong"),SCo=o("deberta-v2"),RCo=o(" \u2014 "),mj=a("a"),BCo=o("DebertaV2ForMaskedLM"),PCo=o(" (DeBERTa-v2 model)"),ICo=l(),E2=a("li"),Jie=a("strong"),qCo=o("distilbert"),NCo=o(" \u2014 "),gj=a("a"),jCo=o("DistilBertForMaskedLM"),DCo=o(" (DistilBERT model)"),GCo=l(),C2=a("li"),Yie=a("strong"),OCo=o("electra"),VCo=o(" \u2014 "),hj=a("a"),XCo=o("ElectraForMaskedLM"),zCo=o(" (ELECTRA model)"),QCo=l(),w2=a("li"),Kie=a("strong"),WCo=o("flaubert"),HCo=o(" \u2014 "),pj=a("a"),UCo=o("FlaubertWithLMHeadModel"),JCo=o(" (FlauBERT model)"),YCo=l(),A2=a("li"),Zie=a("strong"),KCo=o("fnet"),ZCo=o(" \u2014 "),uj=a("a"),e3o=o("FNetForMaskedLM"),o3o=o(" (FNet model)"),r3o=l(),y2=a("li"),ede=a("strong"),t3o=o("funnel"),a3o=o(" \u2014 "),_j=a("a"),n3o=o("FunnelForMaskedLM"),s3o=o(" (Funnel Transformer model)"),l3o=l(),L2=a("li"),ode=a("strong"),i3o=o("ibert"),d3o=o(" \u2014 "),bj=a("a"),c3o=o("IBertForMaskedLM"),f3o=o(" (I-BERT model)"),m3o=l(),x2=a("li"),rde=a("strong"),g3o=o("layoutlm"),h3o=o(" \u2014 "),vj=a("a"),p3o=o("LayoutLMForMaskedLM"),u3o=o(" (LayoutLM model)"),_3o=l(),$2=a("li"),tde=a("strong"),b3o=o("longformer"),v3o=o(" \u2014 "),Fj=a("a"),F3o=o("LongformerForMaskedLM"),T3o=o(" (Longformer model)"),M3o=l(),k2=a("li"),ade=a("strong"),E3o=o("mbart"),C3o=o(" \u2014 "),Tj=a("a"),w3o=o("MBartForConditionalGeneration"),A3o=o(" (mBART model)"),y3o=l(),S2=a("li"),nde=a("strong"),L3o=o("megatron-bert"),x3o=o(" \u2014 "),Mj=a("a"),$3o=o("MegatronBertForMaskedLM"),k3o=o(" (MegatronBert model)"),S3o=l(),R2=a("li"),sde=a("strong"),R3o=o("mobilebert"),B3o=o(" \u2014 "),Ej=a("a"),P3o=o("MobileBertForMaskedLM"),I3o=o(" (MobileBERT model)"),q3o=l(),B2=a("li"),lde=a("strong"),N3o=o("mpnet"),j3o=o(" \u2014 "),Cj=a("a"),D3o=o("MPNetForMaskedLM"),G3o=o(" (MPNet model)"),O3o=l(),P2=a("li"),ide=a("strong"),V3o=o("nystromformer"),X3o=o(" \u2014 "),wj=a("a"),z3o=o("NystromformerForMaskedLM"),Q3o=o(" (Nystromformer model)"),W3o=l(),I2=a("li"),dde=a("strong"),H3o=o("perceiver"),U3o=o(" \u2014 "),Aj=a("a"),J3o=o("PerceiverForMaskedLM"),Y3o=o(" (Perceiver model)"),K3o=l(),q2=a("li"),cde=a("strong"),Z3o=o("qdqbert"),ewo=o(" \u2014 "),yj=a("a"),owo=o("QDQBertForMaskedLM"),rwo=o(" (QDQBert model)"),two=l(),N2=a("li"),fde=a("strong"),awo=o("reformer"),nwo=o(" \u2014 "),Lj=a("a"),swo=o("ReformerForMaskedLM"),lwo=o(" (Reformer model)"),iwo=l(),j2=a("li"),mde=a("strong"),dwo=o("rembert"),cwo=o(" \u2014 "),xj=a("a"),fwo=o("RemBertForMaskedLM"),mwo=o(" (RemBERT model)"),gwo=l(),D2=a("li"),gde=a("strong"),hwo=o("roberta"),pwo=o(" \u2014 "),$j=a("a"),uwo=o("RobertaForMaskedLM"),_wo=o(" (RoBERTa model)"),bwo=l(),G2=a("li"),hde=a("strong"),vwo=o("roformer"),Fwo=o(" \u2014 "),kj=a("a"),Two=o("RoFormerForMaskedLM"),Mwo=o(" (RoFormer model)"),Ewo=l(),O2=a("li"),pde=a("strong"),Cwo=o("squeezebert"),wwo=o(" \u2014 "),Sj=a("a"),Awo=o("SqueezeBertForMaskedLM"),ywo=o(" (SqueezeBERT model)"),Lwo=l(),V2=a("li"),ude=a("strong"),xwo=o("tapas"),$wo=o(" \u2014 "),Rj=a("a"),kwo=o("TapasForMaskedLM"),Swo=o(" (TAPAS model)"),Rwo=l(),X2=a("li"),_de=a("strong"),Bwo=o("wav2vec2"),Pwo=o(" \u2014 "),bde=a("code"),Iwo=o("Wav2Vec2ForMaskedLM"),qwo=o(" (Wav2Vec2 model)"),Nwo=l(),z2=a("li"),vde=a("strong"),jwo=o("xlm"),Dwo=o(" \u2014 "),Bj=a("a"),Gwo=o("XLMWithLMHeadModel"),Owo=o(" (XLM model)"),Vwo=l(),Q2=a("li"),Fde=a("strong"),Xwo=o("xlm-roberta"),zwo=o(" \u2014 "),Pj=a("a"),Qwo=o("XLMRobertaForMaskedLM"),Wwo=o(" (XLM-RoBERTa model)"),Hwo=l(),W2=a("li"),Tde=a("strong"),Uwo=o("xlm-roberta-xl"),Jwo=o(" \u2014 "),Ij=a("a"),Ywo=o("XLMRobertaXLForMaskedLM"),Kwo=o(" (XLM-RoBERTa-XL model)"),Zwo=l(),H2=a("li"),Mde=a("strong"),eAo=o("yoso"),oAo=o(" \u2014 "),qj=a("a"),rAo=o("YosoForMaskedLM"),tAo=o(" (YOSO model)"),aAo=l(),U2=a("p"),nAo=o("The model is set in evaluation mode by default using "),Ede=a("code"),sAo=o("model.eval()"),lAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),iAo=o("model.train()"),dAo=l(),F(J2.$$.fragment),KPe=l(),Ri=a("h2"),Y2=a("a"),wde=a("span"),F(D6.$$.fragment),cAo=l(),Ade=a("span"),fAo=o("AutoModelForSeq2SeqLM"),ZPe=l(),So=a("div"),F(G6.$$.fragment),mAo=l(),Bi=a("p"),gAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nj=a("a"),hAo=o("from_pretrained()"),pAo=o(" class method or the "),jj=a("a"),uAo=o("from_config()"),_Ao=o(` class
method.`),bAo=l(),O6=a("p"),vAo=o("This class cannot be instantiated directly using "),yde=a("code"),FAo=o("__init__()"),TAo=o(" (throws an error)."),MAo=l(),nt=a("div"),F(V6.$$.fragment),EAo=l(),Lde=a("p"),CAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wAo=l(),Pi=a("p"),AAo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),yAo=o("not"),LAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=a("a"),xAo=o("from_pretrained()"),$Ao=o(" to load the model weights."),kAo=l(),F(K2.$$.fragment),SAo=l(),Ke=a("div"),F(X6.$$.fragment),RAo=l(),$de=a("p"),BAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PAo=l(),$a=a("p"),IAo=o("The model class to instantiate is selected based on the "),kde=a("code"),qAo=o("model_type"),NAo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),jAo=o("pretrained_model_name_or_path"),DAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=a("code"),GAo=o("pretrained_model_name_or_path"),OAo=o(":"),VAo=l(),pe=a("ul"),Z2=a("li"),Bde=a("strong"),XAo=o("bart"),zAo=o(" \u2014 "),Gj=a("a"),QAo=o("BartForConditionalGeneration"),WAo=o(" (BART model)"),HAo=l(),e1=a("li"),Pde=a("strong"),UAo=o("bigbird_pegasus"),JAo=o(" \u2014 "),Oj=a("a"),YAo=o("BigBirdPegasusForConditionalGeneration"),KAo=o(" (BigBirdPegasus model)"),ZAo=l(),o1=a("li"),Ide=a("strong"),e6o=o("blenderbot"),o6o=o(" \u2014 "),Vj=a("a"),r6o=o("BlenderbotForConditionalGeneration"),t6o=o(" (Blenderbot model)"),a6o=l(),r1=a("li"),qde=a("strong"),n6o=o("blenderbot-small"),s6o=o(" \u2014 "),Xj=a("a"),l6o=o("BlenderbotSmallForConditionalGeneration"),i6o=o(" (BlenderbotSmall model)"),d6o=l(),t1=a("li"),Nde=a("strong"),c6o=o("encoder-decoder"),f6o=o(" \u2014 "),zj=a("a"),m6o=o("EncoderDecoderModel"),g6o=o(" (Encoder decoder model)"),h6o=l(),a1=a("li"),jde=a("strong"),p6o=o("fsmt"),u6o=o(" \u2014 "),Qj=a("a"),_6o=o("FSMTForConditionalGeneration"),b6o=o(" (FairSeq Machine-Translation model)"),v6o=l(),n1=a("li"),Dde=a("strong"),F6o=o("led"),T6o=o(" \u2014 "),Wj=a("a"),M6o=o("LEDForConditionalGeneration"),E6o=o(" (LED model)"),C6o=l(),s1=a("li"),Gde=a("strong"),w6o=o("m2m_100"),A6o=o(" \u2014 "),Hj=a("a"),y6o=o("M2M100ForConditionalGeneration"),L6o=o(" (M2M100 model)"),x6o=l(),l1=a("li"),Ode=a("strong"),$6o=o("marian"),k6o=o(" \u2014 "),Uj=a("a"),S6o=o("MarianMTModel"),R6o=o(" (Marian model)"),B6o=l(),i1=a("li"),Vde=a("strong"),P6o=o("mbart"),I6o=o(" \u2014 "),Jj=a("a"),q6o=o("MBartForConditionalGeneration"),N6o=o(" (mBART model)"),j6o=l(),d1=a("li"),Xde=a("strong"),D6o=o("mt5"),G6o=o(" \u2014 "),Yj=a("a"),O6o=o("MT5ForConditionalGeneration"),V6o=o(" (mT5 model)"),X6o=l(),c1=a("li"),zde=a("strong"),z6o=o("pegasus"),Q6o=o(" \u2014 "),Kj=a("a"),W6o=o("PegasusForConditionalGeneration"),H6o=o(" (Pegasus model)"),U6o=l(),f1=a("li"),Qde=a("strong"),J6o=o("plbart"),Y6o=o(" \u2014 "),Zj=a("a"),K6o=o("PLBartForConditionalGeneration"),Z6o=o(" (PLBart model)"),eyo=l(),m1=a("li"),Wde=a("strong"),oyo=o("prophetnet"),ryo=o(" \u2014 "),eD=a("a"),tyo=o("ProphetNetForConditionalGeneration"),ayo=o(" (ProphetNet model)"),nyo=l(),g1=a("li"),Hde=a("strong"),syo=o("t5"),lyo=o(" \u2014 "),oD=a("a"),iyo=o("T5ForConditionalGeneration"),dyo=o(" (T5 model)"),cyo=l(),h1=a("li"),Ude=a("strong"),fyo=o("xlm-prophetnet"),myo=o(" \u2014 "),rD=a("a"),gyo=o("XLMProphetNetForConditionalGeneration"),hyo=o(" (XLMProphetNet model)"),pyo=l(),p1=a("p"),uyo=o("The model is set in evaluation mode by default using "),Jde=a("code"),_yo=o("model.eval()"),byo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=a("code"),vyo=o("model.train()"),Fyo=l(),F(u1.$$.fragment),eIe=l(),Ii=a("h2"),_1=a("a"),Kde=a("span"),F(z6.$$.fragment),Tyo=l(),Zde=a("span"),Myo=o("AutoModelForSequenceClassification"),oIe=l(),Ro=a("div"),F(Q6.$$.fragment),Eyo=l(),qi=a("p"),Cyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tD=a("a"),wyo=o("from_pretrained()"),Ayo=o(" class method or the "),aD=a("a"),yyo=o("from_config()"),Lyo=o(` class
method.`),xyo=l(),W6=a("p"),$yo=o("This class cannot be instantiated directly using "),ece=a("code"),kyo=o("__init__()"),Syo=o(" (throws an error)."),Ryo=l(),st=a("div"),F(H6.$$.fragment),Byo=l(),oce=a("p"),Pyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Iyo=l(),Ni=a("p"),qyo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),Nyo=o("not"),jyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),Dyo=o("from_pretrained()"),Gyo=o(" to load the model weights."),Oyo=l(),F(b1.$$.fragment),Vyo=l(),Ze=a("div"),F(U6.$$.fragment),Xyo=l(),tce=a("p"),zyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qyo=l(),ka=a("p"),Wyo=o("The model class to instantiate is selected based on the "),ace=a("code"),Hyo=o("model_type"),Uyo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),Jyo=o("pretrained_model_name_or_path"),Yyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),Kyo=o("pretrained_model_name_or_path"),Zyo=o(":"),eLo=l(),q=a("ul"),v1=a("li"),lce=a("strong"),oLo=o("albert"),rLo=o(" \u2014 "),sD=a("a"),tLo=o("AlbertForSequenceClassification"),aLo=o(" (ALBERT model)"),nLo=l(),F1=a("li"),ice=a("strong"),sLo=o("bart"),lLo=o(" \u2014 "),lD=a("a"),iLo=o("BartForSequenceClassification"),dLo=o(" (BART model)"),cLo=l(),T1=a("li"),dce=a("strong"),fLo=o("bert"),mLo=o(" \u2014 "),iD=a("a"),gLo=o("BertForSequenceClassification"),hLo=o(" (BERT model)"),pLo=l(),M1=a("li"),cce=a("strong"),uLo=o("big_bird"),_Lo=o(" \u2014 "),dD=a("a"),bLo=o("BigBirdForSequenceClassification"),vLo=o(" (BigBird model)"),FLo=l(),E1=a("li"),fce=a("strong"),TLo=o("bigbird_pegasus"),MLo=o(" \u2014 "),cD=a("a"),ELo=o("BigBirdPegasusForSequenceClassification"),CLo=o(" (BigBirdPegasus model)"),wLo=l(),C1=a("li"),mce=a("strong"),ALo=o("camembert"),yLo=o(" \u2014 "),fD=a("a"),LLo=o("CamembertForSequenceClassification"),xLo=o(" (CamemBERT model)"),$Lo=l(),w1=a("li"),gce=a("strong"),kLo=o("canine"),SLo=o(" \u2014 "),mD=a("a"),RLo=o("CanineForSequenceClassification"),BLo=o(" (Canine model)"),PLo=l(),A1=a("li"),hce=a("strong"),ILo=o("convbert"),qLo=o(" \u2014 "),gD=a("a"),NLo=o("ConvBertForSequenceClassification"),jLo=o(" (ConvBERT model)"),DLo=l(),y1=a("li"),pce=a("strong"),GLo=o("ctrl"),OLo=o(" \u2014 "),hD=a("a"),VLo=o("CTRLForSequenceClassification"),XLo=o(" (CTRL model)"),zLo=l(),L1=a("li"),uce=a("strong"),QLo=o("data2vec-text"),WLo=o(" \u2014 "),pD=a("a"),HLo=o("Data2VecTextForSequenceClassification"),ULo=o(" (Data2VecText model)"),JLo=l(),x1=a("li"),_ce=a("strong"),YLo=o("deberta"),KLo=o(" \u2014 "),uD=a("a"),ZLo=o("DebertaForSequenceClassification"),e8o=o(" (DeBERTa model)"),o8o=l(),$1=a("li"),bce=a("strong"),r8o=o("deberta-v2"),t8o=o(" \u2014 "),_D=a("a"),a8o=o("DebertaV2ForSequenceClassification"),n8o=o(" (DeBERTa-v2 model)"),s8o=l(),k1=a("li"),vce=a("strong"),l8o=o("distilbert"),i8o=o(" \u2014 "),bD=a("a"),d8o=o("DistilBertForSequenceClassification"),c8o=o(" (DistilBERT model)"),f8o=l(),S1=a("li"),Fce=a("strong"),m8o=o("electra"),g8o=o(" \u2014 "),vD=a("a"),h8o=o("ElectraForSequenceClassification"),p8o=o(" (ELECTRA model)"),u8o=l(),R1=a("li"),Tce=a("strong"),_8o=o("flaubert"),b8o=o(" \u2014 "),FD=a("a"),v8o=o("FlaubertForSequenceClassification"),F8o=o(" (FlauBERT model)"),T8o=l(),B1=a("li"),Mce=a("strong"),M8o=o("fnet"),E8o=o(" \u2014 "),TD=a("a"),C8o=o("FNetForSequenceClassification"),w8o=o(" (FNet model)"),A8o=l(),P1=a("li"),Ece=a("strong"),y8o=o("funnel"),L8o=o(" \u2014 "),MD=a("a"),x8o=o("FunnelForSequenceClassification"),$8o=o(" (Funnel Transformer model)"),k8o=l(),I1=a("li"),Cce=a("strong"),S8o=o("gpt2"),R8o=o(" \u2014 "),ED=a("a"),B8o=o("GPT2ForSequenceClassification"),P8o=o(" (OpenAI GPT-2 model)"),I8o=l(),q1=a("li"),wce=a("strong"),q8o=o("gpt_neo"),N8o=o(" \u2014 "),CD=a("a"),j8o=o("GPTNeoForSequenceClassification"),D8o=o(" (GPT Neo model)"),G8o=l(),N1=a("li"),Ace=a("strong"),O8o=o("gptj"),V8o=o(" \u2014 "),wD=a("a"),X8o=o("GPTJForSequenceClassification"),z8o=o(" (GPT-J model)"),Q8o=l(),j1=a("li"),yce=a("strong"),W8o=o("ibert"),H8o=o(" \u2014 "),AD=a("a"),U8o=o("IBertForSequenceClassification"),J8o=o(" (I-BERT model)"),Y8o=l(),D1=a("li"),Lce=a("strong"),K8o=o("layoutlm"),Z8o=o(" \u2014 "),yD=a("a"),exo=o("LayoutLMForSequenceClassification"),oxo=o(" (LayoutLM model)"),rxo=l(),G1=a("li"),xce=a("strong"),txo=o("layoutlmv2"),axo=o(" \u2014 "),LD=a("a"),nxo=o("LayoutLMv2ForSequenceClassification"),sxo=o(" (LayoutLMv2 model)"),lxo=l(),O1=a("li"),$ce=a("strong"),ixo=o("led"),dxo=o(" \u2014 "),xD=a("a"),cxo=o("LEDForSequenceClassification"),fxo=o(" (LED model)"),mxo=l(),V1=a("li"),kce=a("strong"),gxo=o("longformer"),hxo=o(" \u2014 "),$D=a("a"),pxo=o("LongformerForSequenceClassification"),uxo=o(" (Longformer model)"),_xo=l(),X1=a("li"),Sce=a("strong"),bxo=o("mbart"),vxo=o(" \u2014 "),kD=a("a"),Fxo=o("MBartForSequenceClassification"),Txo=o(" (mBART model)"),Mxo=l(),z1=a("li"),Rce=a("strong"),Exo=o("megatron-bert"),Cxo=o(" \u2014 "),SD=a("a"),wxo=o("MegatronBertForSequenceClassification"),Axo=o(" (MegatronBert model)"),yxo=l(),Q1=a("li"),Bce=a("strong"),Lxo=o("mobilebert"),xxo=o(" \u2014 "),RD=a("a"),$xo=o("MobileBertForSequenceClassification"),kxo=o(" (MobileBERT model)"),Sxo=l(),W1=a("li"),Pce=a("strong"),Rxo=o("mpnet"),Bxo=o(" \u2014 "),BD=a("a"),Pxo=o("MPNetForSequenceClassification"),Ixo=o(" (MPNet model)"),qxo=l(),H1=a("li"),Ice=a("strong"),Nxo=o("nystromformer"),jxo=o(" \u2014 "),PD=a("a"),Dxo=o("NystromformerForSequenceClassification"),Gxo=o(" (Nystromformer model)"),Oxo=l(),U1=a("li"),qce=a("strong"),Vxo=o("openai-gpt"),Xxo=o(" \u2014 "),ID=a("a"),zxo=o("OpenAIGPTForSequenceClassification"),Qxo=o(" (OpenAI GPT model)"),Wxo=l(),J1=a("li"),Nce=a("strong"),Hxo=o("perceiver"),Uxo=o(" \u2014 "),qD=a("a"),Jxo=o("PerceiverForSequenceClassification"),Yxo=o(" (Perceiver model)"),Kxo=l(),Y1=a("li"),jce=a("strong"),Zxo=o("plbart"),e9o=o(" \u2014 "),ND=a("a"),o9o=o("PLBartForSequenceClassification"),r9o=o(" (PLBart model)"),t9o=l(),K1=a("li"),Dce=a("strong"),a9o=o("qdqbert"),n9o=o(" \u2014 "),jD=a("a"),s9o=o("QDQBertForSequenceClassification"),l9o=o(" (QDQBert model)"),i9o=l(),Z1=a("li"),Gce=a("strong"),d9o=o("reformer"),c9o=o(" \u2014 "),DD=a("a"),f9o=o("ReformerForSequenceClassification"),m9o=o(" (Reformer model)"),g9o=l(),eb=a("li"),Oce=a("strong"),h9o=o("rembert"),p9o=o(" \u2014 "),GD=a("a"),u9o=o("RemBertForSequenceClassification"),_9o=o(" (RemBERT model)"),b9o=l(),ob=a("li"),Vce=a("strong"),v9o=o("roberta"),F9o=o(" \u2014 "),OD=a("a"),T9o=o("RobertaForSequenceClassification"),M9o=o(" (RoBERTa model)"),E9o=l(),rb=a("li"),Xce=a("strong"),C9o=o("roformer"),w9o=o(" \u2014 "),VD=a("a"),A9o=o("RoFormerForSequenceClassification"),y9o=o(" (RoFormer model)"),L9o=l(),tb=a("li"),zce=a("strong"),x9o=o("squeezebert"),$9o=o(" \u2014 "),XD=a("a"),k9o=o("SqueezeBertForSequenceClassification"),S9o=o(" (SqueezeBERT model)"),R9o=l(),ab=a("li"),Qce=a("strong"),B9o=o("tapas"),P9o=o(" \u2014 "),zD=a("a"),I9o=o("TapasForSequenceClassification"),q9o=o(" (TAPAS model)"),N9o=l(),nb=a("li"),Wce=a("strong"),j9o=o("transfo-xl"),D9o=o(" \u2014 "),QD=a("a"),G9o=o("TransfoXLForSequenceClassification"),O9o=o(" (Transformer-XL model)"),V9o=l(),sb=a("li"),Hce=a("strong"),X9o=o("xlm"),z9o=o(" \u2014 "),WD=a("a"),Q9o=o("XLMForSequenceClassification"),W9o=o(" (XLM model)"),H9o=l(),lb=a("li"),Uce=a("strong"),U9o=o("xlm-roberta"),J9o=o(" \u2014 "),HD=a("a"),Y9o=o("XLMRobertaForSequenceClassification"),K9o=o(" (XLM-RoBERTa model)"),Z9o=l(),ib=a("li"),Jce=a("strong"),e$o=o("xlm-roberta-xl"),o$o=o(" \u2014 "),UD=a("a"),r$o=o("XLMRobertaXLForSequenceClassification"),t$o=o(" (XLM-RoBERTa-XL model)"),a$o=l(),db=a("li"),Yce=a("strong"),n$o=o("xlnet"),s$o=o(" \u2014 "),JD=a("a"),l$o=o("XLNetForSequenceClassification"),i$o=o(" (XLNet model)"),d$o=l(),cb=a("li"),Kce=a("strong"),c$o=o("yoso"),f$o=o(" \u2014 "),YD=a("a"),m$o=o("YosoForSequenceClassification"),g$o=o(" (YOSO model)"),h$o=l(),fb=a("p"),p$o=o("The model is set in evaluation mode by default using "),Zce=a("code"),u$o=o("model.eval()"),_$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),b$o=o("model.train()"),v$o=l(),F(mb.$$.fragment),rIe=l(),ji=a("h2"),gb=a("a"),ofe=a("span"),F(J6.$$.fragment),F$o=l(),rfe=a("span"),T$o=o("AutoModelForMultipleChoice"),tIe=l(),Bo=a("div"),F(Y6.$$.fragment),M$o=l(),Di=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KD=a("a"),C$o=o("from_pretrained()"),w$o=o(" class method or the "),ZD=a("a"),A$o=o("from_config()"),y$o=o(` class
method.`),L$o=l(),K6=a("p"),x$o=o("This class cannot be instantiated directly using "),tfe=a("code"),$$o=o("__init__()"),k$o=o(" (throws an error)."),S$o=l(),lt=a("div"),F(Z6.$$.fragment),R$o=l(),afe=a("p"),B$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P$o=l(),Gi=a("p"),I$o=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),q$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),j$o=o("from_pretrained()"),D$o=o(" to load the model weights."),G$o=l(),F(hb.$$.fragment),O$o=l(),eo=a("div"),F(ey.$$.fragment),V$o=l(),sfe=a("p"),X$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z$o=l(),Sa=a("p"),Q$o=o("The model class to instantiate is selected based on the "),lfe=a("code"),W$o=o("model_type"),H$o=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),U$o=o("pretrained_model_name_or_path"),J$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),Y$o=o("pretrained_model_name_or_path"),K$o=o(":"),Z$o=l(),Y=a("ul"),pb=a("li"),cfe=a("strong"),eko=o("albert"),oko=o(" \u2014 "),oG=a("a"),rko=o("AlbertForMultipleChoice"),tko=o(" (ALBERT model)"),ako=l(),ub=a("li"),ffe=a("strong"),nko=o("bert"),sko=o(" \u2014 "),rG=a("a"),lko=o("BertForMultipleChoice"),iko=o(" (BERT model)"),dko=l(),_b=a("li"),mfe=a("strong"),cko=o("big_bird"),fko=o(" \u2014 "),tG=a("a"),mko=o("BigBirdForMultipleChoice"),gko=o(" (BigBird model)"),hko=l(),bb=a("li"),gfe=a("strong"),pko=o("camembert"),uko=o(" \u2014 "),aG=a("a"),_ko=o("CamembertForMultipleChoice"),bko=o(" (CamemBERT model)"),vko=l(),vb=a("li"),hfe=a("strong"),Fko=o("canine"),Tko=o(" \u2014 "),nG=a("a"),Mko=o("CanineForMultipleChoice"),Eko=o(" (Canine model)"),Cko=l(),Fb=a("li"),pfe=a("strong"),wko=o("convbert"),Ako=o(" \u2014 "),sG=a("a"),yko=o("ConvBertForMultipleChoice"),Lko=o(" (ConvBERT model)"),xko=l(),Tb=a("li"),ufe=a("strong"),$ko=o("data2vec-text"),kko=o(" \u2014 "),lG=a("a"),Sko=o("Data2VecTextForMultipleChoice"),Rko=o(" (Data2VecText model)"),Bko=l(),Mb=a("li"),_fe=a("strong"),Pko=o("deberta-v2"),Iko=o(" \u2014 "),iG=a("a"),qko=o("DebertaV2ForMultipleChoice"),Nko=o(" (DeBERTa-v2 model)"),jko=l(),Eb=a("li"),bfe=a("strong"),Dko=o("distilbert"),Gko=o(" \u2014 "),dG=a("a"),Oko=o("DistilBertForMultipleChoice"),Vko=o(" (DistilBERT model)"),Xko=l(),Cb=a("li"),vfe=a("strong"),zko=o("electra"),Qko=o(" \u2014 "),cG=a("a"),Wko=o("ElectraForMultipleChoice"),Hko=o(" (ELECTRA model)"),Uko=l(),wb=a("li"),Ffe=a("strong"),Jko=o("flaubert"),Yko=o(" \u2014 "),fG=a("a"),Kko=o("FlaubertForMultipleChoice"),Zko=o(" (FlauBERT model)"),eSo=l(),Ab=a("li"),Tfe=a("strong"),oSo=o("fnet"),rSo=o(" \u2014 "),mG=a("a"),tSo=o("FNetForMultipleChoice"),aSo=o(" (FNet model)"),nSo=l(),yb=a("li"),Mfe=a("strong"),sSo=o("funnel"),lSo=o(" \u2014 "),gG=a("a"),iSo=o("FunnelForMultipleChoice"),dSo=o(" (Funnel Transformer model)"),cSo=l(),Lb=a("li"),Efe=a("strong"),fSo=o("ibert"),mSo=o(" \u2014 "),hG=a("a"),gSo=o("IBertForMultipleChoice"),hSo=o(" (I-BERT model)"),pSo=l(),xb=a("li"),Cfe=a("strong"),uSo=o("longformer"),_So=o(" \u2014 "),pG=a("a"),bSo=o("LongformerForMultipleChoice"),vSo=o(" (Longformer model)"),FSo=l(),$b=a("li"),wfe=a("strong"),TSo=o("megatron-bert"),MSo=o(" \u2014 "),uG=a("a"),ESo=o("MegatronBertForMultipleChoice"),CSo=o(" (MegatronBert model)"),wSo=l(),kb=a("li"),Afe=a("strong"),ASo=o("mobilebert"),ySo=o(" \u2014 "),_G=a("a"),LSo=o("MobileBertForMultipleChoice"),xSo=o(" (MobileBERT model)"),$So=l(),Sb=a("li"),yfe=a("strong"),kSo=o("mpnet"),SSo=o(" \u2014 "),bG=a("a"),RSo=o("MPNetForMultipleChoice"),BSo=o(" (MPNet model)"),PSo=l(),Rb=a("li"),Lfe=a("strong"),ISo=o("nystromformer"),qSo=o(" \u2014 "),vG=a("a"),NSo=o("NystromformerForMultipleChoice"),jSo=o(" (Nystromformer model)"),DSo=l(),Bb=a("li"),xfe=a("strong"),GSo=o("qdqbert"),OSo=o(" \u2014 "),FG=a("a"),VSo=o("QDQBertForMultipleChoice"),XSo=o(" (QDQBert model)"),zSo=l(),Pb=a("li"),$fe=a("strong"),QSo=o("rembert"),WSo=o(" \u2014 "),TG=a("a"),HSo=o("RemBertForMultipleChoice"),USo=o(" (RemBERT model)"),JSo=l(),Ib=a("li"),kfe=a("strong"),YSo=o("roberta"),KSo=o(" \u2014 "),MG=a("a"),ZSo=o("RobertaForMultipleChoice"),eRo=o(" (RoBERTa model)"),oRo=l(),qb=a("li"),Sfe=a("strong"),rRo=o("roformer"),tRo=o(" \u2014 "),EG=a("a"),aRo=o("RoFormerForMultipleChoice"),nRo=o(" (RoFormer model)"),sRo=l(),Nb=a("li"),Rfe=a("strong"),lRo=o("squeezebert"),iRo=o(" \u2014 "),CG=a("a"),dRo=o("SqueezeBertForMultipleChoice"),cRo=o(" (SqueezeBERT model)"),fRo=l(),jb=a("li"),Bfe=a("strong"),mRo=o("xlm"),gRo=o(" \u2014 "),wG=a("a"),hRo=o("XLMForMultipleChoice"),pRo=o(" (XLM model)"),uRo=l(),Db=a("li"),Pfe=a("strong"),_Ro=o("xlm-roberta"),bRo=o(" \u2014 "),AG=a("a"),vRo=o("XLMRobertaForMultipleChoice"),FRo=o(" (XLM-RoBERTa model)"),TRo=l(),Gb=a("li"),Ife=a("strong"),MRo=o("xlm-roberta-xl"),ERo=o(" \u2014 "),yG=a("a"),CRo=o("XLMRobertaXLForMultipleChoice"),wRo=o(" (XLM-RoBERTa-XL model)"),ARo=l(),Ob=a("li"),qfe=a("strong"),yRo=o("xlnet"),LRo=o(" \u2014 "),LG=a("a"),xRo=o("XLNetForMultipleChoice"),$Ro=o(" (XLNet model)"),kRo=l(),Vb=a("li"),Nfe=a("strong"),SRo=o("yoso"),RRo=o(" \u2014 "),xG=a("a"),BRo=o("YosoForMultipleChoice"),PRo=o(" (YOSO model)"),IRo=l(),Xb=a("p"),qRo=o("The model is set in evaluation mode by default using "),jfe=a("code"),NRo=o("model.eval()"),jRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=a("code"),DRo=o("model.train()"),GRo=l(),F(zb.$$.fragment),aIe=l(),Oi=a("h2"),Qb=a("a"),Gfe=a("span"),F(oy.$$.fragment),ORo=l(),Ofe=a("span"),VRo=o("AutoModelForNextSentencePrediction"),nIe=l(),Po=a("div"),F(ry.$$.fragment),XRo=l(),Vi=a("p"),zRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$G=a("a"),QRo=o("from_pretrained()"),WRo=o(" class method or the "),kG=a("a"),HRo=o("from_config()"),URo=o(` class
method.`),JRo=l(),ty=a("p"),YRo=o("This class cannot be instantiated directly using "),Vfe=a("code"),KRo=o("__init__()"),ZRo=o(" (throws an error)."),eBo=l(),it=a("div"),F(ay.$$.fragment),oBo=l(),Xfe=a("p"),rBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tBo=l(),Xi=a("p"),aBo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),nBo=o("not"),sBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),lBo=o("from_pretrained()"),iBo=o(" to load the model weights."),dBo=l(),F(Wb.$$.fragment),cBo=l(),oo=a("div"),F(ny.$$.fragment),fBo=l(),Qfe=a("p"),mBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gBo=l(),Ra=a("p"),hBo=o("The model class to instantiate is selected based on the "),Wfe=a("code"),pBo=o("model_type"),uBo=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),_Bo=o("pretrained_model_name_or_path"),bBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),vBo=o("pretrained_model_name_or_path"),FBo=o(":"),TBo=l(),Yr=a("ul"),Hb=a("li"),Jfe=a("strong"),MBo=o("bert"),EBo=o(" \u2014 "),RG=a("a"),CBo=o("BertForNextSentencePrediction"),wBo=o(" (BERT model)"),ABo=l(),Ub=a("li"),Yfe=a("strong"),yBo=o("fnet"),LBo=o(" \u2014 "),BG=a("a"),xBo=o("FNetForNextSentencePrediction"),$Bo=o(" (FNet model)"),kBo=l(),Jb=a("li"),Kfe=a("strong"),SBo=o("megatron-bert"),RBo=o(" \u2014 "),PG=a("a"),BBo=o("MegatronBertForNextSentencePrediction"),PBo=o(" (MegatronBert model)"),IBo=l(),Yb=a("li"),Zfe=a("strong"),qBo=o("mobilebert"),NBo=o(" \u2014 "),IG=a("a"),jBo=o("MobileBertForNextSentencePrediction"),DBo=o(" (MobileBERT model)"),GBo=l(),Kb=a("li"),eme=a("strong"),OBo=o("qdqbert"),VBo=o(" \u2014 "),qG=a("a"),XBo=o("QDQBertForNextSentencePrediction"),zBo=o(" (QDQBert model)"),QBo=l(),Zb=a("p"),WBo=o("The model is set in evaluation mode by default using "),ome=a("code"),HBo=o("model.eval()"),UBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=a("code"),JBo=o("model.train()"),YBo=l(),F(e5.$$.fragment),sIe=l(),zi=a("h2"),o5=a("a"),tme=a("span"),F(sy.$$.fragment),KBo=l(),ame=a("span"),ZBo=o("AutoModelForTokenClassification"),lIe=l(),Io=a("div"),F(ly.$$.fragment),ePo=l(),Qi=a("p"),oPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NG=a("a"),rPo=o("from_pretrained()"),tPo=o(" class method or the "),jG=a("a"),aPo=o("from_config()"),nPo=o(` class
method.`),sPo=l(),iy=a("p"),lPo=o("This class cannot be instantiated directly using "),nme=a("code"),iPo=o("__init__()"),dPo=o(" (throws an error)."),cPo=l(),dt=a("div"),F(dy.$$.fragment),fPo=l(),sme=a("p"),mPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gPo=l(),Wi=a("p"),hPo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),pPo=o("not"),uPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),_Po=o("from_pretrained()"),bPo=o(" to load the model weights."),vPo=l(),F(r5.$$.fragment),FPo=l(),ro=a("div"),F(cy.$$.fragment),TPo=l(),ime=a("p"),MPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EPo=l(),Ba=a("p"),CPo=o("The model class to instantiate is selected based on the "),dme=a("code"),wPo=o("model_type"),APo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),yPo=o("pretrained_model_name_or_path"),LPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),xPo=o("pretrained_model_name_or_path"),$Po=o(":"),kPo=l(),U=a("ul"),t5=a("li"),mme=a("strong"),SPo=o("albert"),RPo=o(" \u2014 "),GG=a("a"),BPo=o("AlbertForTokenClassification"),PPo=o(" (ALBERT model)"),IPo=l(),a5=a("li"),gme=a("strong"),qPo=o("bert"),NPo=o(" \u2014 "),OG=a("a"),jPo=o("BertForTokenClassification"),DPo=o(" (BERT model)"),GPo=l(),n5=a("li"),hme=a("strong"),OPo=o("big_bird"),VPo=o(" \u2014 "),VG=a("a"),XPo=o("BigBirdForTokenClassification"),zPo=o(" (BigBird model)"),QPo=l(),s5=a("li"),pme=a("strong"),WPo=o("camembert"),HPo=o(" \u2014 "),XG=a("a"),UPo=o("CamembertForTokenClassification"),JPo=o(" (CamemBERT model)"),YPo=l(),l5=a("li"),ume=a("strong"),KPo=o("canine"),ZPo=o(" \u2014 "),zG=a("a"),eIo=o("CanineForTokenClassification"),oIo=o(" (Canine model)"),rIo=l(),i5=a("li"),_me=a("strong"),tIo=o("convbert"),aIo=o(" \u2014 "),QG=a("a"),nIo=o("ConvBertForTokenClassification"),sIo=o(" (ConvBERT model)"),lIo=l(),d5=a("li"),bme=a("strong"),iIo=o("data2vec-text"),dIo=o(" \u2014 "),WG=a("a"),cIo=o("Data2VecTextForTokenClassification"),fIo=o(" (Data2VecText model)"),mIo=l(),c5=a("li"),vme=a("strong"),gIo=o("deberta"),hIo=o(" \u2014 "),HG=a("a"),pIo=o("DebertaForTokenClassification"),uIo=o(" (DeBERTa model)"),_Io=l(),f5=a("li"),Fme=a("strong"),bIo=o("deberta-v2"),vIo=o(" \u2014 "),UG=a("a"),FIo=o("DebertaV2ForTokenClassification"),TIo=o(" (DeBERTa-v2 model)"),MIo=l(),m5=a("li"),Tme=a("strong"),EIo=o("distilbert"),CIo=o(" \u2014 "),JG=a("a"),wIo=o("DistilBertForTokenClassification"),AIo=o(" (DistilBERT model)"),yIo=l(),g5=a("li"),Mme=a("strong"),LIo=o("electra"),xIo=o(" \u2014 "),YG=a("a"),$Io=o("ElectraForTokenClassification"),kIo=o(" (ELECTRA model)"),SIo=l(),h5=a("li"),Eme=a("strong"),RIo=o("flaubert"),BIo=o(" \u2014 "),KG=a("a"),PIo=o("FlaubertForTokenClassification"),IIo=o(" (FlauBERT model)"),qIo=l(),p5=a("li"),Cme=a("strong"),NIo=o("fnet"),jIo=o(" \u2014 "),ZG=a("a"),DIo=o("FNetForTokenClassification"),GIo=o(" (FNet model)"),OIo=l(),u5=a("li"),wme=a("strong"),VIo=o("funnel"),XIo=o(" \u2014 "),eO=a("a"),zIo=o("FunnelForTokenClassification"),QIo=o(" (Funnel Transformer model)"),WIo=l(),_5=a("li"),Ame=a("strong"),HIo=o("gpt2"),UIo=o(" \u2014 "),oO=a("a"),JIo=o("GPT2ForTokenClassification"),YIo=o(" (OpenAI GPT-2 model)"),KIo=l(),b5=a("li"),yme=a("strong"),ZIo=o("ibert"),eqo=o(" \u2014 "),rO=a("a"),oqo=o("IBertForTokenClassification"),rqo=o(" (I-BERT model)"),tqo=l(),v5=a("li"),Lme=a("strong"),aqo=o("layoutlm"),nqo=o(" \u2014 "),tO=a("a"),sqo=o("LayoutLMForTokenClassification"),lqo=o(" (LayoutLM model)"),iqo=l(),F5=a("li"),xme=a("strong"),dqo=o("layoutlmv2"),cqo=o(" \u2014 "),aO=a("a"),fqo=o("LayoutLMv2ForTokenClassification"),mqo=o(" (LayoutLMv2 model)"),gqo=l(),T5=a("li"),$me=a("strong"),hqo=o("longformer"),pqo=o(" \u2014 "),nO=a("a"),uqo=o("LongformerForTokenClassification"),_qo=o(" (Longformer model)"),bqo=l(),M5=a("li"),kme=a("strong"),vqo=o("megatron-bert"),Fqo=o(" \u2014 "),sO=a("a"),Tqo=o("MegatronBertForTokenClassification"),Mqo=o(" (MegatronBert model)"),Eqo=l(),E5=a("li"),Sme=a("strong"),Cqo=o("mobilebert"),wqo=o(" \u2014 "),lO=a("a"),Aqo=o("MobileBertForTokenClassification"),yqo=o(" (MobileBERT model)"),Lqo=l(),C5=a("li"),Rme=a("strong"),xqo=o("mpnet"),$qo=o(" \u2014 "),iO=a("a"),kqo=o("MPNetForTokenClassification"),Sqo=o(" (MPNet model)"),Rqo=l(),w5=a("li"),Bme=a("strong"),Bqo=o("nystromformer"),Pqo=o(" \u2014 "),dO=a("a"),Iqo=o("NystromformerForTokenClassification"),qqo=o(" (Nystromformer model)"),Nqo=l(),A5=a("li"),Pme=a("strong"),jqo=o("qdqbert"),Dqo=o(" \u2014 "),cO=a("a"),Gqo=o("QDQBertForTokenClassification"),Oqo=o(" (QDQBert model)"),Vqo=l(),y5=a("li"),Ime=a("strong"),Xqo=o("rembert"),zqo=o(" \u2014 "),fO=a("a"),Qqo=o("RemBertForTokenClassification"),Wqo=o(" (RemBERT model)"),Hqo=l(),L5=a("li"),qme=a("strong"),Uqo=o("roberta"),Jqo=o(" \u2014 "),mO=a("a"),Yqo=o("RobertaForTokenClassification"),Kqo=o(" (RoBERTa model)"),Zqo=l(),x5=a("li"),Nme=a("strong"),eNo=o("roformer"),oNo=o(" \u2014 "),gO=a("a"),rNo=o("RoFormerForTokenClassification"),tNo=o(" (RoFormer model)"),aNo=l(),$5=a("li"),jme=a("strong"),nNo=o("squeezebert"),sNo=o(" \u2014 "),hO=a("a"),lNo=o("SqueezeBertForTokenClassification"),iNo=o(" (SqueezeBERT model)"),dNo=l(),k5=a("li"),Dme=a("strong"),cNo=o("xlm"),fNo=o(" \u2014 "),pO=a("a"),mNo=o("XLMForTokenClassification"),gNo=o(" (XLM model)"),hNo=l(),S5=a("li"),Gme=a("strong"),pNo=o("xlm-roberta"),uNo=o(" \u2014 "),uO=a("a"),_No=o("XLMRobertaForTokenClassification"),bNo=o(" (XLM-RoBERTa model)"),vNo=l(),R5=a("li"),Ome=a("strong"),FNo=o("xlm-roberta-xl"),TNo=o(" \u2014 "),_O=a("a"),MNo=o("XLMRobertaXLForTokenClassification"),ENo=o(" (XLM-RoBERTa-XL model)"),CNo=l(),B5=a("li"),Vme=a("strong"),wNo=o("xlnet"),ANo=o(" \u2014 "),bO=a("a"),yNo=o("XLNetForTokenClassification"),LNo=o(" (XLNet model)"),xNo=l(),P5=a("li"),Xme=a("strong"),$No=o("yoso"),kNo=o(" \u2014 "),vO=a("a"),SNo=o("YosoForTokenClassification"),RNo=o(" (YOSO model)"),BNo=l(),I5=a("p"),PNo=o("The model is set in evaluation mode by default using "),zme=a("code"),INo=o("model.eval()"),qNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),NNo=o("model.train()"),jNo=l(),F(q5.$$.fragment),iIe=l(),Hi=a("h2"),N5=a("a"),Wme=a("span"),F(fy.$$.fragment),DNo=l(),Hme=a("span"),GNo=o("AutoModelForQuestionAnswering"),dIe=l(),qo=a("div"),F(my.$$.fragment),ONo=l(),Ui=a("p"),VNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FO=a("a"),XNo=o("from_pretrained()"),zNo=o(" class method or the "),TO=a("a"),QNo=o("from_config()"),WNo=o(` class
method.`),HNo=l(),gy=a("p"),UNo=o("This class cannot be instantiated directly using "),Ume=a("code"),JNo=o("__init__()"),YNo=o(" (throws an error)."),KNo=l(),ct=a("div"),F(hy.$$.fragment),ZNo=l(),Jme=a("p"),ejo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ojo=l(),Ji=a("p"),rjo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),tjo=o("not"),ajo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),njo=o("from_pretrained()"),sjo=o(" to load the model weights."),ljo=l(),F(j5.$$.fragment),ijo=l(),to=a("div"),F(py.$$.fragment),djo=l(),Kme=a("p"),cjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fjo=l(),Pa=a("p"),mjo=o("The model class to instantiate is selected based on the "),Zme=a("code"),gjo=o("model_type"),hjo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),pjo=o("pretrained_model_name_or_path"),ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),_jo=o("pretrained_model_name_or_path"),bjo=o(":"),vjo=l(),O=a("ul"),D5=a("li"),rge=a("strong"),Fjo=o("albert"),Tjo=o(" \u2014 "),EO=a("a"),Mjo=o("AlbertForQuestionAnswering"),Ejo=o(" (ALBERT model)"),Cjo=l(),G5=a("li"),tge=a("strong"),wjo=o("bart"),Ajo=o(" \u2014 "),CO=a("a"),yjo=o("BartForQuestionAnswering"),Ljo=o(" (BART model)"),xjo=l(),O5=a("li"),age=a("strong"),$jo=o("bert"),kjo=o(" \u2014 "),wO=a("a"),Sjo=o("BertForQuestionAnswering"),Rjo=o(" (BERT model)"),Bjo=l(),V5=a("li"),nge=a("strong"),Pjo=o("big_bird"),Ijo=o(" \u2014 "),AO=a("a"),qjo=o("BigBirdForQuestionAnswering"),Njo=o(" (BigBird model)"),jjo=l(),X5=a("li"),sge=a("strong"),Djo=o("bigbird_pegasus"),Gjo=o(" \u2014 "),yO=a("a"),Ojo=o("BigBirdPegasusForQuestionAnswering"),Vjo=o(" (BigBirdPegasus model)"),Xjo=l(),z5=a("li"),lge=a("strong"),zjo=o("camembert"),Qjo=o(" \u2014 "),LO=a("a"),Wjo=o("CamembertForQuestionAnswering"),Hjo=o(" (CamemBERT model)"),Ujo=l(),Q5=a("li"),ige=a("strong"),Jjo=o("canine"),Yjo=o(" \u2014 "),xO=a("a"),Kjo=o("CanineForQuestionAnswering"),Zjo=o(" (Canine model)"),eDo=l(),W5=a("li"),dge=a("strong"),oDo=o("convbert"),rDo=o(" \u2014 "),$O=a("a"),tDo=o("ConvBertForQuestionAnswering"),aDo=o(" (ConvBERT model)"),nDo=l(),H5=a("li"),cge=a("strong"),sDo=o("data2vec-text"),lDo=o(" \u2014 "),kO=a("a"),iDo=o("Data2VecTextForQuestionAnswering"),dDo=o(" (Data2VecText model)"),cDo=l(),U5=a("li"),fge=a("strong"),fDo=o("deberta"),mDo=o(" \u2014 "),SO=a("a"),gDo=o("DebertaForQuestionAnswering"),hDo=o(" (DeBERTa model)"),pDo=l(),J5=a("li"),mge=a("strong"),uDo=o("deberta-v2"),_Do=o(" \u2014 "),RO=a("a"),bDo=o("DebertaV2ForQuestionAnswering"),vDo=o(" (DeBERTa-v2 model)"),FDo=l(),Y5=a("li"),gge=a("strong"),TDo=o("distilbert"),MDo=o(" \u2014 "),BO=a("a"),EDo=o("DistilBertForQuestionAnswering"),CDo=o(" (DistilBERT model)"),wDo=l(),K5=a("li"),hge=a("strong"),ADo=o("electra"),yDo=o(" \u2014 "),PO=a("a"),LDo=o("ElectraForQuestionAnswering"),xDo=o(" (ELECTRA model)"),$Do=l(),Z5=a("li"),pge=a("strong"),kDo=o("flaubert"),SDo=o(" \u2014 "),IO=a("a"),RDo=o("FlaubertForQuestionAnsweringSimple"),BDo=o(" (FlauBERT model)"),PDo=l(),ev=a("li"),uge=a("strong"),IDo=o("fnet"),qDo=o(" \u2014 "),qO=a("a"),NDo=o("FNetForQuestionAnswering"),jDo=o(" (FNet model)"),DDo=l(),ov=a("li"),_ge=a("strong"),GDo=o("funnel"),ODo=o(" \u2014 "),NO=a("a"),VDo=o("FunnelForQuestionAnswering"),XDo=o(" (Funnel Transformer model)"),zDo=l(),rv=a("li"),bge=a("strong"),QDo=o("gptj"),WDo=o(" \u2014 "),jO=a("a"),HDo=o("GPTJForQuestionAnswering"),UDo=o(" (GPT-J model)"),JDo=l(),tv=a("li"),vge=a("strong"),YDo=o("ibert"),KDo=o(" \u2014 "),DO=a("a"),ZDo=o("IBertForQuestionAnswering"),eGo=o(" (I-BERT model)"),oGo=l(),av=a("li"),Fge=a("strong"),rGo=o("layoutlmv2"),tGo=o(" \u2014 "),GO=a("a"),aGo=o("LayoutLMv2ForQuestionAnswering"),nGo=o(" (LayoutLMv2 model)"),sGo=l(),nv=a("li"),Tge=a("strong"),lGo=o("led"),iGo=o(" \u2014 "),OO=a("a"),dGo=o("LEDForQuestionAnswering"),cGo=o(" (LED model)"),fGo=l(),sv=a("li"),Mge=a("strong"),mGo=o("longformer"),gGo=o(" \u2014 "),VO=a("a"),hGo=o("LongformerForQuestionAnswering"),pGo=o(" (Longformer model)"),uGo=l(),lv=a("li"),Ege=a("strong"),_Go=o("lxmert"),bGo=o(" \u2014 "),XO=a("a"),vGo=o("LxmertForQuestionAnswering"),FGo=o(" (LXMERT model)"),TGo=l(),iv=a("li"),Cge=a("strong"),MGo=o("mbart"),EGo=o(" \u2014 "),zO=a("a"),CGo=o("MBartForQuestionAnswering"),wGo=o(" (mBART model)"),AGo=l(),dv=a("li"),wge=a("strong"),yGo=o("megatron-bert"),LGo=o(" \u2014 "),QO=a("a"),xGo=o("MegatronBertForQuestionAnswering"),$Go=o(" (MegatronBert model)"),kGo=l(),cv=a("li"),Age=a("strong"),SGo=o("mobilebert"),RGo=o(" \u2014 "),WO=a("a"),BGo=o("MobileBertForQuestionAnswering"),PGo=o(" (MobileBERT model)"),IGo=l(),fv=a("li"),yge=a("strong"),qGo=o("mpnet"),NGo=o(" \u2014 "),HO=a("a"),jGo=o("MPNetForQuestionAnswering"),DGo=o(" (MPNet model)"),GGo=l(),mv=a("li"),Lge=a("strong"),OGo=o("nystromformer"),VGo=o(" \u2014 "),UO=a("a"),XGo=o("NystromformerForQuestionAnswering"),zGo=o(" (Nystromformer model)"),QGo=l(),gv=a("li"),xge=a("strong"),WGo=o("qdqbert"),HGo=o(" \u2014 "),JO=a("a"),UGo=o("QDQBertForQuestionAnswering"),JGo=o(" (QDQBert model)"),YGo=l(),hv=a("li"),$ge=a("strong"),KGo=o("reformer"),ZGo=o(" \u2014 "),YO=a("a"),eOo=o("ReformerForQuestionAnswering"),oOo=o(" (Reformer model)"),rOo=l(),pv=a("li"),kge=a("strong"),tOo=o("rembert"),aOo=o(" \u2014 "),KO=a("a"),nOo=o("RemBertForQuestionAnswering"),sOo=o(" (RemBERT model)"),lOo=l(),uv=a("li"),Sge=a("strong"),iOo=o("roberta"),dOo=o(" \u2014 "),ZO=a("a"),cOo=o("RobertaForQuestionAnswering"),fOo=o(" (RoBERTa model)"),mOo=l(),_v=a("li"),Rge=a("strong"),gOo=o("roformer"),hOo=o(" \u2014 "),eV=a("a"),pOo=o("RoFormerForQuestionAnswering"),uOo=o(" (RoFormer model)"),_Oo=l(),bv=a("li"),Bge=a("strong"),bOo=o("splinter"),vOo=o(" \u2014 "),oV=a("a"),FOo=o("SplinterForQuestionAnswering"),TOo=o(" (Splinter model)"),MOo=l(),vv=a("li"),Pge=a("strong"),EOo=o("squeezebert"),COo=o(" \u2014 "),rV=a("a"),wOo=o("SqueezeBertForQuestionAnswering"),AOo=o(" (SqueezeBERT model)"),yOo=l(),Fv=a("li"),Ige=a("strong"),LOo=o("xlm"),xOo=o(" \u2014 "),tV=a("a"),$Oo=o("XLMForQuestionAnsweringSimple"),kOo=o(" (XLM model)"),SOo=l(),Tv=a("li"),qge=a("strong"),ROo=o("xlm-roberta"),BOo=o(" \u2014 "),aV=a("a"),POo=o("XLMRobertaForQuestionAnswering"),IOo=o(" (XLM-RoBERTa model)"),qOo=l(),Mv=a("li"),Nge=a("strong"),NOo=o("xlm-roberta-xl"),jOo=o(" \u2014 "),nV=a("a"),DOo=o("XLMRobertaXLForQuestionAnswering"),GOo=o(" (XLM-RoBERTa-XL model)"),OOo=l(),Ev=a("li"),jge=a("strong"),VOo=o("xlnet"),XOo=o(" \u2014 "),sV=a("a"),zOo=o("XLNetForQuestionAnsweringSimple"),QOo=o(" (XLNet model)"),WOo=l(),Cv=a("li"),Dge=a("strong"),HOo=o("yoso"),UOo=o(" \u2014 "),lV=a("a"),JOo=o("YosoForQuestionAnswering"),YOo=o(" (YOSO model)"),KOo=l(),wv=a("p"),ZOo=o("The model is set in evaluation mode by default using "),Gge=a("code"),eVo=o("model.eval()"),oVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),rVo=o("model.train()"),tVo=l(),F(Av.$$.fragment),cIe=l(),Yi=a("h2"),yv=a("a"),Vge=a("span"),F(uy.$$.fragment),aVo=l(),Xge=a("span"),nVo=o("AutoModelForTableQuestionAnswering"),fIe=l(),No=a("div"),F(_y.$$.fragment),sVo=l(),Ki=a("p"),lVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iV=a("a"),iVo=o("from_pretrained()"),dVo=o(" class method or the "),dV=a("a"),cVo=o("from_config()"),fVo=o(` class
method.`),mVo=l(),by=a("p"),gVo=o("This class cannot be instantiated directly using "),zge=a("code"),hVo=o("__init__()"),pVo=o(" (throws an error)."),uVo=l(),ft=a("div"),F(vy.$$.fragment),_Vo=l(),Qge=a("p"),bVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vVo=l(),Zi=a("p"),FVo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),TVo=o("not"),MVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),EVo=o("from_pretrained()"),CVo=o(" to load the model weights."),wVo=l(),F(Lv.$$.fragment),AVo=l(),ao=a("div"),F(Fy.$$.fragment),yVo=l(),Hge=a("p"),LVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xVo=l(),Ia=a("p"),$Vo=o("The model class to instantiate is selected based on the "),Uge=a("code"),kVo=o("model_type"),SVo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),RVo=o("pretrained_model_name_or_path"),BVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),PVo=o("pretrained_model_name_or_path"),IVo=o(":"),qVo=l(),Kge=a("ul"),xv=a("li"),Zge=a("strong"),NVo=o("tapas"),jVo=o(" \u2014 "),fV=a("a"),DVo=o("TapasForQuestionAnswering"),GVo=o(" (TAPAS model)"),OVo=l(),$v=a("p"),VVo=o("The model is set in evaluation mode by default using "),ehe=a("code"),XVo=o("model.eval()"),zVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),QVo=o("model.train()"),WVo=l(),F(kv.$$.fragment),mIe=l(),ed=a("h2"),Sv=a("a"),rhe=a("span"),F(Ty.$$.fragment),HVo=l(),the=a("span"),UVo=o("AutoModelForImageClassification"),gIe=l(),jo=a("div"),F(My.$$.fragment),JVo=l(),od=a("p"),YVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mV=a("a"),KVo=o("from_pretrained()"),ZVo=o(" class method or the "),gV=a("a"),eXo=o("from_config()"),oXo=o(` class
method.`),rXo=l(),Ey=a("p"),tXo=o("This class cannot be instantiated directly using "),ahe=a("code"),aXo=o("__init__()"),nXo=o(" (throws an error)."),sXo=l(),mt=a("div"),F(Cy.$$.fragment),lXo=l(),nhe=a("p"),iXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dXo=l(),rd=a("p"),cXo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),fXo=o("not"),mXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),gXo=o("from_pretrained()"),hXo=o(" to load the model weights."),pXo=l(),F(Rv.$$.fragment),uXo=l(),no=a("div"),F(wy.$$.fragment),_Xo=l(),lhe=a("p"),bXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vXo=l(),qa=a("p"),FXo=o("The model class to instantiate is selected based on the "),ihe=a("code"),TXo=o("model_type"),MXo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),EXo=o("pretrained_model_name_or_path"),CXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(":"),yXo=l(),Fe=a("ul"),Bv=a("li"),fhe=a("strong"),LXo=o("beit"),xXo=o(" \u2014 "),pV=a("a"),$Xo=o("BeitForImageClassification"),kXo=o(" (BEiT model)"),SXo=l(),Pv=a("li"),mhe=a("strong"),RXo=o("convnext"),BXo=o(" \u2014 "),uV=a("a"),PXo=o("ConvNextForImageClassification"),IXo=o(" (ConvNext model)"),qXo=l(),Iv=a("li"),ghe=a("strong"),NXo=o("data2vec-vision"),jXo=o(" \u2014 "),_V=a("a"),DXo=o("Data2VecVisionForImageClassification"),GXo=o(" (Data2VecVision model)"),OXo=l(),Rs=a("li"),hhe=a("strong"),VXo=o("deit"),XXo=o(" \u2014 "),bV=a("a"),zXo=o("DeiTForImageClassification"),QXo=o(" or "),vV=a("a"),WXo=o("DeiTForImageClassificationWithTeacher"),HXo=o(" (DeiT model)"),UXo=l(),qv=a("li"),phe=a("strong"),JXo=o("imagegpt"),YXo=o(" \u2014 "),FV=a("a"),KXo=o("ImageGPTForImageClassification"),ZXo=o(" (ImageGPT model)"),ezo=l(),gt=a("li"),uhe=a("strong"),ozo=o("perceiver"),rzo=o(" \u2014 "),TV=a("a"),tzo=o("PerceiverForImageClassificationLearned"),azo=o(" or "),MV=a("a"),nzo=o("PerceiverForImageClassificationFourier"),szo=o(" or "),EV=a("a"),lzo=o("PerceiverForImageClassificationConvProcessing"),izo=o(" (Perceiver model)"),dzo=l(),Nv=a("li"),_he=a("strong"),czo=o("poolformer"),fzo=o(" \u2014 "),CV=a("a"),mzo=o("PoolFormerForImageClassification"),gzo=o(" (PoolFormer model)"),hzo=l(),jv=a("li"),bhe=a("strong"),pzo=o("regnet"),uzo=o(" \u2014 "),wV=a("a"),_zo=o("RegNetForImageClassification"),bzo=o(" (RegNet model)"),vzo=l(),Dv=a("li"),vhe=a("strong"),Fzo=o("resnet"),Tzo=o(" \u2014 "),AV=a("a"),Mzo=o("ResNetForImageClassification"),Ezo=o(" (ResNet model)"),Czo=l(),Gv=a("li"),Fhe=a("strong"),wzo=o("segformer"),Azo=o(" \u2014 "),yV=a("a"),yzo=o("SegformerForImageClassification"),Lzo=o(" (SegFormer model)"),xzo=l(),Ov=a("li"),The=a("strong"),$zo=o("swin"),kzo=o(" \u2014 "),LV=a("a"),Szo=o("SwinForImageClassification"),Rzo=o(" (Swin model)"),Bzo=l(),Vv=a("li"),Mhe=a("strong"),Pzo=o("van"),Izo=o(" \u2014 "),xV=a("a"),qzo=o("VanForImageClassification"),Nzo=o(" (VAN model)"),jzo=l(),Xv=a("li"),Ehe=a("strong"),Dzo=o("vit"),Gzo=o(" \u2014 "),$V=a("a"),Ozo=o("ViTForImageClassification"),Vzo=o(" (ViT model)"),Xzo=l(),zv=a("p"),zzo=o("The model is set in evaluation mode by default using "),Che=a("code"),Qzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),Hzo=o("model.train()"),Uzo=l(),F(Qv.$$.fragment),hIe=l(),td=a("h2"),Wv=a("a"),Ahe=a("span"),F(Ay.$$.fragment),Jzo=l(),yhe=a("span"),Yzo=o("AutoModelForVision2Seq"),pIe=l(),Do=a("div"),F(yy.$$.fragment),Kzo=l(),ad=a("p"),Zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kV=a("a"),eQo=o("from_pretrained()"),oQo=o(" class method or the "),SV=a("a"),rQo=o("from_config()"),tQo=o(` class
method.`),aQo=l(),Ly=a("p"),nQo=o("This class cannot be instantiated directly using "),Lhe=a("code"),sQo=o("__init__()"),lQo=o(" (throws an error)."),iQo=l(),ht=a("div"),F(xy.$$.fragment),dQo=l(),xhe=a("p"),cQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fQo=l(),nd=a("p"),mQo=o(`Note:
Loading a model from its configuration file does `),$he=a("strong"),gQo=o("not"),hQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),pQo=o("from_pretrained()"),uQo=o(" to load the model weights."),_Qo=l(),F(Hv.$$.fragment),bQo=l(),so=a("div"),F($y.$$.fragment),vQo=l(),khe=a("p"),FQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TQo=l(),Na=a("p"),MQo=o("The model class to instantiate is selected based on the "),She=a("code"),EQo=o("model_type"),CQo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),yQo=o("pretrained_model_name_or_path"),LQo=o(":"),xQo=l(),Phe=a("ul"),Uv=a("li"),Ihe=a("strong"),$Qo=o("vision-encoder-decoder"),kQo=o(" \u2014 "),BV=a("a"),SQo=o("VisionEncoderDecoderModel"),RQo=o(" (Vision Encoder decoder model)"),BQo=l(),Jv=a("p"),PQo=o("The model is set in evaluation mode by default using "),qhe=a("code"),IQo=o("model.eval()"),qQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),NQo=o("model.train()"),jQo=l(),F(Yv.$$.fragment),uIe=l(),sd=a("h2"),Kv=a("a"),jhe=a("span"),F(ky.$$.fragment),DQo=l(),Dhe=a("span"),GQo=o("AutoModelForAudioClassification"),_Ie=l(),Go=a("div"),F(Sy.$$.fragment),OQo=l(),ld=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PV=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),IV=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),HQo=l(),Ry=a("p"),UQo=o("This class cannot be instantiated directly using "),Ghe=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),KQo=l(),pt=a("div"),F(By.$$.fragment),ZQo=l(),Ohe=a("p"),eWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oWo=l(),id=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),F(Zv.$$.fragment),iWo=l(),lo=a("div"),F(Py.$$.fragment),dWo=l(),Xhe=a("p"),cWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fWo=l(),ja=a("p"),mWo=o("The model class to instantiate is selected based on the "),zhe=a("code"),gWo=o("model_type"),hWo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),pWo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),_Wo=o("pretrained_model_name_or_path"),bWo=o(":"),vWo=l(),Ne=a("ul"),eF=a("li"),Hhe=a("strong"),FWo=o("data2vec-audio"),TWo=o(" \u2014 "),NV=a("a"),MWo=o("Data2VecAudioForSequenceClassification"),EWo=o(" (Data2VecAudio model)"),CWo=l(),oF=a("li"),Uhe=a("strong"),wWo=o("hubert"),AWo=o(" \u2014 "),jV=a("a"),yWo=o("HubertForSequenceClassification"),LWo=o(" (Hubert model)"),xWo=l(),rF=a("li"),Jhe=a("strong"),$Wo=o("sew"),kWo=o(" \u2014 "),DV=a("a"),SWo=o("SEWForSequenceClassification"),RWo=o(" (SEW model)"),BWo=l(),tF=a("li"),Yhe=a("strong"),PWo=o("sew-d"),IWo=o(" \u2014 "),GV=a("a"),qWo=o("SEWDForSequenceClassification"),NWo=o(" (SEW-D model)"),jWo=l(),aF=a("li"),Khe=a("strong"),DWo=o("unispeech"),GWo=o(" \u2014 "),OV=a("a"),OWo=o("UniSpeechForSequenceClassification"),VWo=o(" (UniSpeech model)"),XWo=l(),nF=a("li"),Zhe=a("strong"),zWo=o("unispeech-sat"),QWo=o(" \u2014 "),VV=a("a"),WWo=o("UniSpeechSatForSequenceClassification"),HWo=o(" (UniSpeechSat model)"),UWo=l(),sF=a("li"),epe=a("strong"),JWo=o("wav2vec2"),YWo=o(" \u2014 "),XV=a("a"),KWo=o("Wav2Vec2ForSequenceClassification"),ZWo=o(" (Wav2Vec2 model)"),eHo=l(),lF=a("li"),ope=a("strong"),oHo=o("wavlm"),rHo=o(" \u2014 "),zV=a("a"),tHo=o("WavLMForSequenceClassification"),aHo=o(" (WavLM model)"),nHo=l(),iF=a("p"),sHo=o("The model is set in evaluation mode by default using "),rpe=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),dHo=o("model.train()"),cHo=l(),F(dF.$$.fragment),bIe=l(),dd=a("h2"),cF=a("a"),ape=a("span"),F(Iy.$$.fragment),fHo=l(),npe=a("span"),mHo=o("AutoModelForAudioFrameClassification"),vIe=l(),Oo=a("div"),F(qy.$$.fragment),gHo=l(),cd=a("p"),hHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QV=a("a"),pHo=o("from_pretrained()"),uHo=o(" class method or the "),WV=a("a"),_Ho=o("from_config()"),bHo=o(` class
method.`),vHo=l(),Ny=a("p"),FHo=o("This class cannot be instantiated directly using "),spe=a("code"),THo=o("__init__()"),MHo=o(" (throws an error)."),EHo=l(),ut=a("div"),F(jy.$$.fragment),CHo=l(),lpe=a("p"),wHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AHo=l(),fd=a("p"),yHo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),LHo=o("not"),xHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),$Ho=o("from_pretrained()"),kHo=o(" to load the model weights."),SHo=l(),F(fF.$$.fragment),RHo=l(),io=a("div"),F(Dy.$$.fragment),BHo=l(),dpe=a("p"),PHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IHo=l(),Da=a("p"),qHo=o("The model class to instantiate is selected based on the "),cpe=a("code"),NHo=o("model_type"),jHo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),OHo=o("pretrained_model_name_or_path"),VHo=o(":"),XHo=l(),Ga=a("ul"),mF=a("li"),gpe=a("strong"),zHo=o("data2vec-audio"),QHo=o(" \u2014 "),UV=a("a"),WHo=o("Data2VecAudioForAudioFrameClassification"),HHo=o(" (Data2VecAudio model)"),UHo=l(),gF=a("li"),hpe=a("strong"),JHo=o("unispeech-sat"),YHo=o(" \u2014 "),JV=a("a"),KHo=o("UniSpeechSatForAudioFrameClassification"),ZHo=o(" (UniSpeechSat model)"),eUo=l(),hF=a("li"),ppe=a("strong"),oUo=o("wav2vec2"),rUo=o(" \u2014 "),YV=a("a"),tUo=o("Wav2Vec2ForAudioFrameClassification"),aUo=o(" (Wav2Vec2 model)"),nUo=l(),pF=a("li"),upe=a("strong"),sUo=o("wavlm"),lUo=o(" \u2014 "),KV=a("a"),iUo=o("WavLMForAudioFrameClassification"),dUo=o(" (WavLM model)"),cUo=l(),uF=a("p"),fUo=o("The model is set in evaluation mode by default using "),_pe=a("code"),mUo=o("model.eval()"),gUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),hUo=o("model.train()"),pUo=l(),F(_F.$$.fragment),FIe=l(),md=a("h2"),bF=a("a"),vpe=a("span"),F(Gy.$$.fragment),uUo=l(),Fpe=a("span"),_Uo=o("AutoModelForCTC"),TIe=l(),Vo=a("div"),F(Oy.$$.fragment),bUo=l(),gd=a("p"),vUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZV=a("a"),FUo=o("from_pretrained()"),TUo=o(" class method or the "),eX=a("a"),MUo=o("from_config()"),EUo=o(` class
method.`),CUo=l(),Vy=a("p"),wUo=o("This class cannot be instantiated directly using "),Tpe=a("code"),AUo=o("__init__()"),yUo=o(" (throws an error)."),LUo=l(),_t=a("div"),F(Xy.$$.fragment),xUo=l(),Mpe=a("p"),$Uo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kUo=l(),hd=a("p"),SUo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),RUo=o("not"),BUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),PUo=o("from_pretrained()"),IUo=o(" to load the model weights."),qUo=l(),F(vF.$$.fragment),NUo=l(),co=a("div"),F(zy.$$.fragment),jUo=l(),Cpe=a("p"),DUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GUo=l(),Oa=a("p"),OUo=o("The model class to instantiate is selected based on the "),wpe=a("code"),VUo=o("model_type"),XUo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),zUo=o("pretrained_model_name_or_path"),QUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),WUo=o("pretrained_model_name_or_path"),HUo=o(":"),UUo=l(),je=a("ul"),FF=a("li"),Lpe=a("strong"),JUo=o("data2vec-audio"),YUo=o(" \u2014 "),rX=a("a"),KUo=o("Data2VecAudioForCTC"),ZUo=o(" (Data2VecAudio model)"),eJo=l(),TF=a("li"),xpe=a("strong"),oJo=o("hubert"),rJo=o(" \u2014 "),tX=a("a"),tJo=o("HubertForCTC"),aJo=o(" (Hubert model)"),nJo=l(),MF=a("li"),$pe=a("strong"),sJo=o("sew"),lJo=o(" \u2014 "),aX=a("a"),iJo=o("SEWForCTC"),dJo=o(" (SEW model)"),cJo=l(),EF=a("li"),kpe=a("strong"),fJo=o("sew-d"),mJo=o(" \u2014 "),nX=a("a"),gJo=o("SEWDForCTC"),hJo=o(" (SEW-D model)"),pJo=l(),CF=a("li"),Spe=a("strong"),uJo=o("unispeech"),_Jo=o(" \u2014 "),sX=a("a"),bJo=o("UniSpeechForCTC"),vJo=o(" (UniSpeech model)"),FJo=l(),wF=a("li"),Rpe=a("strong"),TJo=o("unispeech-sat"),MJo=o(" \u2014 "),lX=a("a"),EJo=o("UniSpeechSatForCTC"),CJo=o(" (UniSpeechSat model)"),wJo=l(),AF=a("li"),Bpe=a("strong"),AJo=o("wav2vec2"),yJo=o(" \u2014 "),iX=a("a"),LJo=o("Wav2Vec2ForCTC"),xJo=o(" (Wav2Vec2 model)"),$Jo=l(),yF=a("li"),Ppe=a("strong"),kJo=o("wavlm"),SJo=o(" \u2014 "),dX=a("a"),RJo=o("WavLMForCTC"),BJo=o(" (WavLM model)"),PJo=l(),LF=a("p"),IJo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),qJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),jJo=o("model.train()"),DJo=l(),F(xF.$$.fragment),MIe=l(),pd=a("h2"),$F=a("a"),Npe=a("span"),F(Qy.$$.fragment),GJo=l(),jpe=a("span"),OJo=o("AutoModelForSpeechSeq2Seq"),EIe=l(),Xo=a("div"),F(Wy.$$.fragment),VJo=l(),ud=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cX=a("a"),zJo=o("from_pretrained()"),QJo=o(" class method or the "),fX=a("a"),WJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),Hy=a("p"),JJo=o("This class cannot be instantiated directly using "),Dpe=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),bt=a("div"),F(Uy.$$.fragment),eYo=l(),Gpe=a("p"),oYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rYo=l(),_d=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),F(kF.$$.fragment),dYo=l(),fo=a("div"),F(Jy.$$.fragment),cYo=l(),Vpe=a("p"),fYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mYo=l(),Va=a("p"),gYo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),hYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),uYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),Yy=a("ul"),SF=a("li"),Wpe=a("strong"),TYo=o("speech-encoder-decoder"),MYo=o(" \u2014 "),gX=a("a"),EYo=o("SpeechEncoderDecoderModel"),CYo=o(" (Speech Encoder decoder model)"),wYo=l(),RF=a("li"),Hpe=a("strong"),AYo=o("speech_to_text"),yYo=o(" \u2014 "),hX=a("a"),LYo=o("Speech2TextForConditionalGeneration"),xYo=o(" (Speech2Text model)"),$Yo=l(),BF=a("p"),kYo=o("The model is set in evaluation mode by default using "),Upe=a("code"),SYo=o("model.eval()"),RYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),BYo=o("model.train()"),PYo=l(),F(PF.$$.fragment),CIe=l(),bd=a("h2"),IF=a("a"),Ype=a("span"),F(Ky.$$.fragment),IYo=l(),Kpe=a("span"),qYo=o("AutoModelForAudioXVector"),wIe=l(),zo=a("div"),F(Zy.$$.fragment),NYo=l(),vd=a("p"),jYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pX=a("a"),DYo=o("from_pretrained()"),GYo=o(" class method or the "),uX=a("a"),OYo=o("from_config()"),VYo=o(` class
method.`),XYo=l(),eL=a("p"),zYo=o("This class cannot be instantiated directly using "),Zpe=a("code"),QYo=o("__init__()"),WYo=o(" (throws an error)."),HYo=l(),vt=a("div"),F(oL.$$.fragment),UYo=l(),eue=a("p"),JYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YYo=l(),Fd=a("p"),KYo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),ZYo=o("not"),eKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),oKo=o("from_pretrained()"),rKo=o(" to load the model weights."),tKo=l(),F(qF.$$.fragment),aKo=l(),mo=a("div"),F(rL.$$.fragment),nKo=l(),rue=a("p"),sKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lKo=l(),Xa=a("p"),iKo=o("The model class to instantiate is selected based on the "),tue=a("code"),dKo=o("model_type"),cKo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),gKo=o("pretrained_model_name_or_path"),hKo=o(":"),pKo=l(),za=a("ul"),NF=a("li"),sue=a("strong"),uKo=o("data2vec-audio"),_Ko=o(" \u2014 "),bX=a("a"),bKo=o("Data2VecAudioForXVector"),vKo=o(" (Data2VecAudio model)"),FKo=l(),jF=a("li"),lue=a("strong"),TKo=o("unispeech-sat"),MKo=o(" \u2014 "),vX=a("a"),EKo=o("UniSpeechSatForXVector"),CKo=o(" (UniSpeechSat model)"),wKo=l(),DF=a("li"),iue=a("strong"),AKo=o("wav2vec2"),yKo=o(" \u2014 "),FX=a("a"),LKo=o("Wav2Vec2ForXVector"),xKo=o(" (Wav2Vec2 model)"),$Ko=l(),GF=a("li"),due=a("strong"),kKo=o("wavlm"),SKo=o(" \u2014 "),TX=a("a"),RKo=o("WavLMForXVector"),BKo=o(" (WavLM model)"),PKo=l(),OF=a("p"),IKo=o("The model is set in evaluation mode by default using "),cue=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),jKo=o("model.train()"),DKo=l(),F(VF.$$.fragment),AIe=l(),Td=a("h2"),XF=a("a"),mue=a("span"),F(tL.$$.fragment),GKo=l(),gue=a("span"),OKo=o("AutoModelForMaskedImageModeling"),yIe=l(),Qo=a("div"),F(aL.$$.fragment),VKo=l(),Md=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MX=a("a"),zKo=o("from_pretrained()"),QKo=o(" class method or the "),EX=a("a"),WKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),nL=a("p"),JKo=o("This class cannot be instantiated directly using "),hue=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),Ft=a("div"),F(sL.$$.fragment),eZo=l(),pue=a("p"),oZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rZo=l(),Ed=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(zF.$$.fragment),dZo=l(),go=a("div"),F(lL.$$.fragment),cZo=l(),_ue=a("p"),fZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mZo=l(),Qa=a("p"),gZo=o("The model class to instantiate is selected based on the "),bue=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),uZo=o("pretrained_model_name_or_path"),_Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),Cd=a("ul"),QF=a("li"),Tue=a("strong"),TZo=o("deit"),MZo=o(" \u2014 "),wX=a("a"),EZo=o("DeiTForMaskedImageModeling"),CZo=o(" (DeiT model)"),wZo=l(),WF=a("li"),Mue=a("strong"),AZo=o("swin"),yZo=o(" \u2014 "),AX=a("a"),LZo=o("SwinForMaskedImageModeling"),xZo=o(" (Swin model)"),$Zo=l(),HF=a("li"),Eue=a("strong"),kZo=o("vit"),SZo=o(" \u2014 "),yX=a("a"),RZo=o("ViTForMaskedImageModeling"),BZo=o(" (ViT model)"),PZo=l(),UF=a("p"),IZo=o("The model is set in evaluation mode by default using "),Cue=a("code"),qZo=o("model.eval()"),NZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),jZo=o("model.train()"),DZo=l(),F(JF.$$.fragment),LIe=l(),wd=a("h2"),YF=a("a"),Aue=a("span"),F(iL.$$.fragment),GZo=l(),yue=a("span"),OZo=o("AutoModelForObjectDetection"),xIe=l(),Wo=a("div"),F(dL.$$.fragment),VZo=l(),Ad=a("p"),XZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LX=a("a"),zZo=o("from_pretrained()"),QZo=o(" class method or the "),xX=a("a"),WZo=o("from_config()"),HZo=o(` class
method.`),UZo=l(),cL=a("p"),JZo=o("This class cannot be instantiated directly using "),Lue=a("code"),YZo=o("__init__()"),KZo=o(" (throws an error)."),ZZo=l(),Tt=a("div"),F(fL.$$.fragment),eer=l(),xue=a("p"),oer=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rer=l(),yd=a("p"),ter=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),aer=o("not"),ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),ser=o("from_pretrained()"),ler=o(" to load the model weights."),ier=l(),F(KF.$$.fragment),der=l(),ho=a("div"),F(mL.$$.fragment),cer=l(),kue=a("p"),fer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mer=l(),Wa=a("p"),ger=o("The model class to instantiate is selected based on the "),Sue=a("code"),her=o("model_type"),per=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),uer=o("pretrained_model_name_or_path"),_er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),ber=o("pretrained_model_name_or_path"),ver=o(":"),Fer=l(),gL=a("ul"),ZF=a("li"),Pue=a("strong"),Ter=o("detr"),Mer=o(" \u2014 "),kX=a("a"),Eer=o("DetrForObjectDetection"),Cer=o(" (DETR model)"),wer=l(),e0=a("li"),Iue=a("strong"),Aer=o("yolos"),yer=o(" \u2014 "),SX=a("a"),Ler=o("YolosForObjectDetection"),xer=o(" (YOLOS model)"),$er=l(),o0=a("p"),ker=o("The model is set in evaluation mode by default using "),que=a("code"),Ser=o("model.eval()"),Rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),Ber=o("model.train()"),Per=l(),F(r0.$$.fragment),$Ie=l(),Ld=a("h2"),t0=a("a"),jue=a("span"),F(hL.$$.fragment),Ier=l(),Due=a("span"),qer=o("AutoModelForImageSegmentation"),kIe=l(),Ho=a("div"),F(pL.$$.fragment),Ner=l(),xd=a("p"),jer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RX=a("a"),Der=o("from_pretrained()"),Ger=o(" class method or the "),BX=a("a"),Oer=o("from_config()"),Ver=o(` class
method.`),Xer=l(),uL=a("p"),zer=o("This class cannot be instantiated directly using "),Gue=a("code"),Qer=o("__init__()"),Wer=o(" (throws an error)."),Her=l(),Mt=a("div"),F(_L.$$.fragment),Uer=l(),Oue=a("p"),Jer=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Yer=l(),$d=a("p"),Ker=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),Zer=o("not"),eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),oor=o("from_pretrained()"),ror=o(" to load the model weights."),tor=l(),F(a0.$$.fragment),aor=l(),po=a("div"),F(bL.$$.fragment),nor=l(),Xue=a("p"),sor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lor=l(),Ha=a("p"),ior=o("The model class to instantiate is selected based on the "),zue=a("code"),dor=o("model_type"),cor=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),mor=o("pretrained_model_name_or_path"),gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),hor=o("pretrained_model_name_or_path"),por=o(":"),uor=l(),Hue=a("ul"),n0=a("li"),Uue=a("strong"),_or=o("detr"),bor=o(" \u2014 "),IX=a("a"),vor=o("DetrForSegmentation"),For=o(" (DETR model)"),Tor=l(),s0=a("p"),Mor=o("The model is set in evaluation mode by default using "),Jue=a("code"),Eor=o("model.eval()"),Cor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),wor=o("model.train()"),Aor=l(),F(l0.$$.fragment),SIe=l(),kd=a("h2"),i0=a("a"),Kue=a("span"),F(vL.$$.fragment),yor=l(),Zue=a("span"),Lor=o("AutoModelForSemanticSegmentation"),RIe=l(),Uo=a("div"),F(FL.$$.fragment),xor=l(),Sd=a("p"),$or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),qX=a("a"),kor=o("from_pretrained()"),Sor=o(" class method or the "),NX=a("a"),Ror=o("from_config()"),Bor=o(` class
method.`),Por=l(),TL=a("p"),Ior=o("This class cannot be instantiated directly using "),e_e=a("code"),qor=o("__init__()"),Nor=o(" (throws an error)."),jor=l(),Et=a("div"),F(ML.$$.fragment),Dor=l(),o_e=a("p"),Gor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Oor=l(),Rd=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),Xor=o("not"),zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Qor=o("from_pretrained()"),Wor=o(" to load the model weights."),Hor=l(),F(d0.$$.fragment),Uor=l(),uo=a("div"),F(EL.$$.fragment),Jor=l(),t_e=a("p"),Yor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kor=l(),Ua=a("p"),Zor=o("The model class to instantiate is selected based on the "),a_e=a("code"),err=o("model_type"),orr=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),rrr=o("pretrained_model_name_or_path"),trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),arr=o("pretrained_model_name_or_path"),nrr=o(":"),srr=l(),Ja=a("ul"),c0=a("li"),l_e=a("strong"),lrr=o("beit"),irr=o(" \u2014 "),DX=a("a"),drr=o("BeitForSemanticSegmentation"),crr=o(" (BEiT model)"),frr=l(),f0=a("li"),i_e=a("strong"),mrr=o("data2vec-vision"),grr=o(" \u2014 "),GX=a("a"),hrr=o("Data2VecVisionForSemanticSegmentation"),prr=o(" (Data2VecVision model)"),urr=l(),m0=a("li"),d_e=a("strong"),_rr=o("dpt"),brr=o(" \u2014 "),OX=a("a"),vrr=o("DPTForSemanticSegmentation"),Frr=o(" (DPT model)"),Trr=l(),g0=a("li"),c_e=a("strong"),Mrr=o("segformer"),Err=o(" \u2014 "),VX=a("a"),Crr=o("SegformerForSemanticSegmentation"),wrr=o(" (SegFormer model)"),Arr=l(),h0=a("p"),yrr=o("The model is set in evaluation mode by default using "),f_e=a("code"),Lrr=o("model.eval()"),xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),$rr=o("model.train()"),krr=l(),F(p0.$$.fragment),BIe=l(),Bd=a("h2"),u0=a("a"),g_e=a("span"),F(CL.$$.fragment),Srr=l(),h_e=a("span"),Rrr=o("AutoModelForInstanceSegmentation"),PIe=l(),Jo=a("div"),F(wL.$$.fragment),Brr=l(),Pd=a("p"),Prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XX=a("a"),Irr=o("from_pretrained()"),qrr=o(" class method or the "),zX=a("a"),Nrr=o("from_config()"),jrr=o(` class
method.`),Drr=l(),AL=a("p"),Grr=o("This class cannot be instantiated directly using "),p_e=a("code"),Orr=o("__init__()"),Vrr=o(" (throws an error)."),Xrr=l(),Ct=a("div"),F(yL.$$.fragment),zrr=l(),u_e=a("p"),Qrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wrr=l(),Id=a("p"),Hrr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),Urr=o("not"),Jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Yrr=o("from_pretrained()"),Krr=o(" to load the model weights."),Zrr=l(),F(_0.$$.fragment),etr=l(),_o=a("div"),F(LL.$$.fragment),otr=l(),b_e=a("p"),rtr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ttr=l(),Ya=a("p"),atr=o("The model class to instantiate is selected based on the "),v_e=a("code"),ntr=o("model_type"),str=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(":"),ftr=l(),M_e=a("ul"),b0=a("li"),E_e=a("strong"),mtr=o("maskformer"),gtr=o(" \u2014 "),WX=a("a"),htr=o("MaskFormerForInstanceSegmentation"),ptr=o(" (MaskFormer model)"),utr=l(),v0=a("p"),_tr=o("The model is set in evaluation mode by default using "),C_e=a("code"),btr=o("model.eval()"),vtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),Ftr=o("model.train()"),Ttr=l(),F(F0.$$.fragment),IIe=l(),qd=a("h2"),T0=a("a"),A_e=a("span"),F(xL.$$.fragment),Mtr=l(),y_e=a("span"),Etr=o("TFAutoModel"),qIe=l(),Yo=a("div"),F($L.$$.fragment),Ctr=l(),Nd=a("p"),wtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HX=a("a"),Atr=o("from_pretrained()"),ytr=o(" class method or the "),UX=a("a"),Ltr=o("from_config()"),xtr=o(` class
method.`),$tr=l(),kL=a("p"),ktr=o("This class cannot be instantiated directly using "),L_e=a("code"),Str=o("__init__()"),Rtr=o(" (throws an error)."),Btr=l(),wt=a("div"),F(SL.$$.fragment),Ptr=l(),x_e=a("p"),Itr=o("Instantiates one of the base model classes of the library from a configuration."),qtr=l(),jd=a("p"),Ntr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),jtr=o("not"),Dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),Gtr=o("from_pretrained()"),Otr=o(" to load the model weights."),Vtr=l(),F(M0.$$.fragment),Xtr=l(),wr=a("div"),F(RL.$$.fragment),ztr=l(),k_e=a("p"),Qtr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wtr=l(),Ka=a("p"),Htr=o("The model class to instantiate is selected based on the "),S_e=a("code"),Utr=o("model_type"),Jtr=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),Ztr=o("pretrained_model_name_or_path"),ear=o(":"),oar=l(),N=a("ul"),E0=a("li"),P_e=a("strong"),rar=o("albert"),tar=o(" \u2014 "),YX=a("a"),aar=o("TFAlbertModel"),nar=o(" (ALBERT model)"),sar=l(),C0=a("li"),I_e=a("strong"),lar=o("bart"),iar=o(" \u2014 "),KX=a("a"),dar=o("TFBartModel"),car=o(" (BART model)"),far=l(),w0=a("li"),q_e=a("strong"),mar=o("bert"),gar=o(" \u2014 "),ZX=a("a"),har=o("TFBertModel"),par=o(" (BERT model)"),uar=l(),A0=a("li"),N_e=a("strong"),_ar=o("blenderbot"),bar=o(" \u2014 "),ez=a("a"),Far=o("TFBlenderbotModel"),Tar=o(" (Blenderbot model)"),Mar=l(),y0=a("li"),j_e=a("strong"),Ear=o("blenderbot-small"),Car=o(" \u2014 "),oz=a("a"),war=o("TFBlenderbotSmallModel"),Aar=o(" (BlenderbotSmall model)"),yar=l(),L0=a("li"),D_e=a("strong"),Lar=o("camembert"),xar=o(" \u2014 "),rz=a("a"),$ar=o("TFCamembertModel"),kar=o(" (CamemBERT model)"),Sar=l(),x0=a("li"),G_e=a("strong"),Rar=o("clip"),Bar=o(" \u2014 "),tz=a("a"),Par=o("TFCLIPModel"),Iar=o(" (CLIP model)"),qar=l(),$0=a("li"),O_e=a("strong"),Nar=o("convbert"),jar=o(" \u2014 "),az=a("a"),Dar=o("TFConvBertModel"),Gar=o(" (ConvBERT model)"),Oar=l(),k0=a("li"),V_e=a("strong"),Var=o("convnext"),Xar=o(" \u2014 "),nz=a("a"),zar=o("TFConvNextModel"),Qar=o(" (ConvNext model)"),War=l(),S0=a("li"),X_e=a("strong"),Har=o("ctrl"),Uar=o(" \u2014 "),sz=a("a"),Jar=o("TFCTRLModel"),Yar=o(" (CTRL model)"),Kar=l(),R0=a("li"),z_e=a("strong"),Zar=o("data2vec-vision"),enr=o(" \u2014 "),lz=a("a"),onr=o("TFData2VecVisionModel"),rnr=o(" (Data2VecVision model)"),tnr=l(),B0=a("li"),Q_e=a("strong"),anr=o("deberta"),nnr=o(" \u2014 "),iz=a("a"),snr=o("TFDebertaModel"),lnr=o(" (DeBERTa model)"),inr=l(),P0=a("li"),W_e=a("strong"),dnr=o("deberta-v2"),cnr=o(" \u2014 "),dz=a("a"),fnr=o("TFDebertaV2Model"),mnr=o(" (DeBERTa-v2 model)"),gnr=l(),I0=a("li"),H_e=a("strong"),hnr=o("distilbert"),pnr=o(" \u2014 "),cz=a("a"),unr=o("TFDistilBertModel"),_nr=o(" (DistilBERT model)"),bnr=l(),q0=a("li"),U_e=a("strong"),vnr=o("dpr"),Fnr=o(" \u2014 "),fz=a("a"),Tnr=o("TFDPRQuestionEncoder"),Mnr=o(" (DPR model)"),Enr=l(),N0=a("li"),J_e=a("strong"),Cnr=o("electra"),wnr=o(" \u2014 "),mz=a("a"),Anr=o("TFElectraModel"),ynr=o(" (ELECTRA model)"),Lnr=l(),j0=a("li"),Y_e=a("strong"),xnr=o("flaubert"),$nr=o(" \u2014 "),gz=a("a"),knr=o("TFFlaubertModel"),Snr=o(" (FlauBERT model)"),Rnr=l(),Bs=a("li"),K_e=a("strong"),Bnr=o("funnel"),Pnr=o(" \u2014 "),hz=a("a"),Inr=o("TFFunnelModel"),qnr=o(" or "),pz=a("a"),Nnr=o("TFFunnelBaseModel"),jnr=o(" (Funnel Transformer model)"),Dnr=l(),D0=a("li"),Z_e=a("strong"),Gnr=o("gpt2"),Onr=o(" \u2014 "),uz=a("a"),Vnr=o("TFGPT2Model"),Xnr=o(" (OpenAI GPT-2 model)"),znr=l(),G0=a("li"),e2e=a("strong"),Qnr=o("gptj"),Wnr=o(" \u2014 "),_z=a("a"),Hnr=o("TFGPTJModel"),Unr=o(" (GPT-J model)"),Jnr=l(),O0=a("li"),o2e=a("strong"),Ynr=o("hubert"),Knr=o(" \u2014 "),bz=a("a"),Znr=o("TFHubertModel"),esr=o(" (Hubert model)"),osr=l(),V0=a("li"),r2e=a("strong"),rsr=o("layoutlm"),tsr=o(" \u2014 "),vz=a("a"),asr=o("TFLayoutLMModel"),nsr=o(" (LayoutLM model)"),ssr=l(),X0=a("li"),t2e=a("strong"),lsr=o("led"),isr=o(" \u2014 "),Fz=a("a"),dsr=o("TFLEDModel"),csr=o(" (LED model)"),fsr=l(),z0=a("li"),a2e=a("strong"),msr=o("longformer"),gsr=o(" \u2014 "),Tz=a("a"),hsr=o("TFLongformerModel"),psr=o(" (Longformer model)"),usr=l(),Q0=a("li"),n2e=a("strong"),_sr=o("lxmert"),bsr=o(" \u2014 "),Mz=a("a"),vsr=o("TFLxmertModel"),Fsr=o(" (LXMERT model)"),Tsr=l(),W0=a("li"),s2e=a("strong"),Msr=o("marian"),Esr=o(" \u2014 "),Ez=a("a"),Csr=o("TFMarianModel"),wsr=o(" (Marian model)"),Asr=l(),H0=a("li"),l2e=a("strong"),ysr=o("mbart"),Lsr=o(" \u2014 "),Cz=a("a"),xsr=o("TFMBartModel"),$sr=o(" (mBART model)"),ksr=l(),U0=a("li"),i2e=a("strong"),Ssr=o("mobilebert"),Rsr=o(" \u2014 "),wz=a("a"),Bsr=o("TFMobileBertModel"),Psr=o(" (MobileBERT model)"),Isr=l(),J0=a("li"),d2e=a("strong"),qsr=o("mpnet"),Nsr=o(" \u2014 "),Az=a("a"),jsr=o("TFMPNetModel"),Dsr=o(" (MPNet model)"),Gsr=l(),Y0=a("li"),c2e=a("strong"),Osr=o("mt5"),Vsr=o(" \u2014 "),yz=a("a"),Xsr=o("TFMT5Model"),zsr=o(" (mT5 model)"),Qsr=l(),K0=a("li"),f2e=a("strong"),Wsr=o("openai-gpt"),Hsr=o(" \u2014 "),Lz=a("a"),Usr=o("TFOpenAIGPTModel"),Jsr=o(" (OpenAI GPT model)"),Ysr=l(),Z0=a("li"),m2e=a("strong"),Ksr=o("pegasus"),Zsr=o(" \u2014 "),xz=a("a"),elr=o("TFPegasusModel"),olr=o(" (Pegasus model)"),rlr=l(),eT=a("li"),g2e=a("strong"),tlr=o("rembert"),alr=o(" \u2014 "),$z=a("a"),nlr=o("TFRemBertModel"),slr=o(" (RemBERT model)"),llr=l(),oT=a("li"),h2e=a("strong"),ilr=o("roberta"),dlr=o(" \u2014 "),kz=a("a"),clr=o("TFRobertaModel"),flr=o(" (RoBERTa model)"),mlr=l(),rT=a("li"),p2e=a("strong"),glr=o("roformer"),hlr=o(" \u2014 "),Sz=a("a"),plr=o("TFRoFormerModel"),ulr=o(" (RoFormer model)"),_lr=l(),tT=a("li"),u2e=a("strong"),blr=o("speech_to_text"),vlr=o(" \u2014 "),Rz=a("a"),Flr=o("TFSpeech2TextModel"),Tlr=o(" (Speech2Text model)"),Mlr=l(),aT=a("li"),_2e=a("strong"),Elr=o("t5"),Clr=o(" \u2014 "),Bz=a("a"),wlr=o("TFT5Model"),Alr=o(" (T5 model)"),ylr=l(),nT=a("li"),b2e=a("strong"),Llr=o("tapas"),xlr=o(" \u2014 "),Pz=a("a"),$lr=o("TFTapasModel"),klr=o(" (TAPAS model)"),Slr=l(),sT=a("li"),v2e=a("strong"),Rlr=o("transfo-xl"),Blr=o(" \u2014 "),Iz=a("a"),Plr=o("TFTransfoXLModel"),Ilr=o(" (Transformer-XL model)"),qlr=l(),lT=a("li"),F2e=a("strong"),Nlr=o("vit"),jlr=o(" \u2014 "),qz=a("a"),Dlr=o("TFViTModel"),Glr=o(" (ViT model)"),Olr=l(),iT=a("li"),T2e=a("strong"),Vlr=o("vit_mae"),Xlr=o(" \u2014 "),Nz=a("a"),zlr=o("TFViTMAEModel"),Qlr=o(" (ViTMAE model)"),Wlr=l(),dT=a("li"),M2e=a("strong"),Hlr=o("wav2vec2"),Ulr=o(" \u2014 "),jz=a("a"),Jlr=o("TFWav2Vec2Model"),Ylr=o(" (Wav2Vec2 model)"),Klr=l(),cT=a("li"),E2e=a("strong"),Zlr=o("xlm"),eir=o(" \u2014 "),Dz=a("a"),oir=o("TFXLMModel"),rir=o(" (XLM model)"),tir=l(),fT=a("li"),C2e=a("strong"),air=o("xlm-roberta"),nir=o(" \u2014 "),Gz=a("a"),sir=o("TFXLMRobertaModel"),lir=o(" (XLM-RoBERTa model)"),iir=l(),mT=a("li"),w2e=a("strong"),dir=o("xlnet"),cir=o(" \u2014 "),Oz=a("a"),fir=o("TFXLNetModel"),mir=o(" (XLNet model)"),gir=l(),F(gT.$$.fragment),NIe=l(),Dd=a("h2"),hT=a("a"),A2e=a("span"),F(BL.$$.fragment),hir=l(),y2e=a("span"),pir=o("TFAutoModelForPreTraining"),jIe=l(),Ko=a("div"),F(PL.$$.fragment),uir=l(),Gd=a("p"),_ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vz=a("a"),bir=o("from_pretrained()"),vir=o(" class method or the "),Xz=a("a"),Fir=o("from_config()"),Tir=o(` class
method.`),Mir=l(),IL=a("p"),Eir=o("This class cannot be instantiated directly using "),L2e=a("code"),Cir=o("__init__()"),wir=o(" (throws an error)."),Air=l(),At=a("div"),F(qL.$$.fragment),yir=l(),x2e=a("p"),Lir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xir=l(),Od=a("p"),$ir=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),kir=o("not"),Sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Rir=o("from_pretrained()"),Bir=o(" to load the model weights."),Pir=l(),F(pT.$$.fragment),Iir=l(),Ar=a("div"),F(NL.$$.fragment),qir=l(),k2e=a("p"),Nir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jir=l(),Za=a("p"),Dir=o("The model class to instantiate is selected based on the "),S2e=a("code"),Gir=o("model_type"),Oir=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),Vir=o("pretrained_model_name_or_path"),Xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),zir=o("pretrained_model_name_or_path"),Qir=o(":"),Wir=l(),se=a("ul"),uT=a("li"),P2e=a("strong"),Hir=o("albert"),Uir=o(" \u2014 "),Qz=a("a"),Jir=o("TFAlbertForPreTraining"),Yir=o(" (ALBERT model)"),Kir=l(),_T=a("li"),I2e=a("strong"),Zir=o("bart"),edr=o(" \u2014 "),Wz=a("a"),odr=o("TFBartForConditionalGeneration"),rdr=o(" (BART model)"),tdr=l(),bT=a("li"),q2e=a("strong"),adr=o("bert"),ndr=o(" \u2014 "),Hz=a("a"),sdr=o("TFBertForPreTraining"),ldr=o(" (BERT model)"),idr=l(),vT=a("li"),N2e=a("strong"),ddr=o("camembert"),cdr=o(" \u2014 "),Uz=a("a"),fdr=o("TFCamembertForMaskedLM"),mdr=o(" (CamemBERT model)"),gdr=l(),FT=a("li"),j2e=a("strong"),hdr=o("ctrl"),pdr=o(" \u2014 "),Jz=a("a"),udr=o("TFCTRLLMHeadModel"),_dr=o(" (CTRL model)"),bdr=l(),TT=a("li"),D2e=a("strong"),vdr=o("distilbert"),Fdr=o(" \u2014 "),Yz=a("a"),Tdr=o("TFDistilBertForMaskedLM"),Mdr=o(" (DistilBERT model)"),Edr=l(),MT=a("li"),G2e=a("strong"),Cdr=o("electra"),wdr=o(" \u2014 "),Kz=a("a"),Adr=o("TFElectraForPreTraining"),ydr=o(" (ELECTRA model)"),Ldr=l(),ET=a("li"),O2e=a("strong"),xdr=o("flaubert"),$dr=o(" \u2014 "),Zz=a("a"),kdr=o("TFFlaubertWithLMHeadModel"),Sdr=o(" (FlauBERT model)"),Rdr=l(),CT=a("li"),V2e=a("strong"),Bdr=o("funnel"),Pdr=o(" \u2014 "),eQ=a("a"),Idr=o("TFFunnelForPreTraining"),qdr=o(" (Funnel Transformer model)"),Ndr=l(),wT=a("li"),X2e=a("strong"),jdr=o("gpt2"),Ddr=o(" \u2014 "),oQ=a("a"),Gdr=o("TFGPT2LMHeadModel"),Odr=o(" (OpenAI GPT-2 model)"),Vdr=l(),AT=a("li"),z2e=a("strong"),Xdr=o("layoutlm"),zdr=o(" \u2014 "),rQ=a("a"),Qdr=o("TFLayoutLMForMaskedLM"),Wdr=o(" (LayoutLM model)"),Hdr=l(),yT=a("li"),Q2e=a("strong"),Udr=o("lxmert"),Jdr=o(" \u2014 "),tQ=a("a"),Ydr=o("TFLxmertForPreTraining"),Kdr=o(" (LXMERT model)"),Zdr=l(),LT=a("li"),W2e=a("strong"),ecr=o("mobilebert"),ocr=o(" \u2014 "),aQ=a("a"),rcr=o("TFMobileBertForPreTraining"),tcr=o(" (MobileBERT model)"),acr=l(),xT=a("li"),H2e=a("strong"),ncr=o("mpnet"),scr=o(" \u2014 "),nQ=a("a"),lcr=o("TFMPNetForMaskedLM"),icr=o(" (MPNet model)"),dcr=l(),$T=a("li"),U2e=a("strong"),ccr=o("openai-gpt"),fcr=o(" \u2014 "),sQ=a("a"),mcr=o("TFOpenAIGPTLMHeadModel"),gcr=o(" (OpenAI GPT model)"),hcr=l(),kT=a("li"),J2e=a("strong"),pcr=o("roberta"),ucr=o(" \u2014 "),lQ=a("a"),_cr=o("TFRobertaForMaskedLM"),bcr=o(" (RoBERTa model)"),vcr=l(),ST=a("li"),Y2e=a("strong"),Fcr=o("t5"),Tcr=o(" \u2014 "),iQ=a("a"),Mcr=o("TFT5ForConditionalGeneration"),Ecr=o(" (T5 model)"),Ccr=l(),RT=a("li"),K2e=a("strong"),wcr=o("tapas"),Acr=o(" \u2014 "),dQ=a("a"),ycr=o("TFTapasForMaskedLM"),Lcr=o(" (TAPAS model)"),xcr=l(),BT=a("li"),Z2e=a("strong"),$cr=o("transfo-xl"),kcr=o(" \u2014 "),cQ=a("a"),Scr=o("TFTransfoXLLMHeadModel"),Rcr=o(" (Transformer-XL model)"),Bcr=l(),PT=a("li"),e1e=a("strong"),Pcr=o("vit_mae"),Icr=o(" \u2014 "),fQ=a("a"),qcr=o("TFViTMAEForPreTraining"),Ncr=o(" (ViTMAE model)"),jcr=l(),IT=a("li"),o1e=a("strong"),Dcr=o("xlm"),Gcr=o(" \u2014 "),mQ=a("a"),Ocr=o("TFXLMWithLMHeadModel"),Vcr=o(" (XLM model)"),Xcr=l(),qT=a("li"),r1e=a("strong"),zcr=o("xlm-roberta"),Qcr=o(" \u2014 "),gQ=a("a"),Wcr=o("TFXLMRobertaForMaskedLM"),Hcr=o(" (XLM-RoBERTa model)"),Ucr=l(),NT=a("li"),t1e=a("strong"),Jcr=o("xlnet"),Ycr=o(" \u2014 "),hQ=a("a"),Kcr=o("TFXLNetLMHeadModel"),Zcr=o(" (XLNet model)"),efr=l(),F(jT.$$.fragment),DIe=l(),Vd=a("h2"),DT=a("a"),a1e=a("span"),F(jL.$$.fragment),ofr=l(),n1e=a("span"),rfr=o("TFAutoModelForCausalLM"),GIe=l(),Zo=a("div"),F(DL.$$.fragment),tfr=l(),Xd=a("p"),afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pQ=a("a"),nfr=o("from_pretrained()"),sfr=o(" class method or the "),uQ=a("a"),lfr=o("from_config()"),ifr=o(` class
method.`),dfr=l(),GL=a("p"),cfr=o("This class cannot be instantiated directly using "),s1e=a("code"),ffr=o("__init__()"),mfr=o(" (throws an error)."),gfr=l(),yt=a("div"),F(OL.$$.fragment),hfr=l(),l1e=a("p"),pfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ufr=l(),zd=a("p"),_fr=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),bfr=o("not"),vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Ffr=o("from_pretrained()"),Tfr=o(" to load the model weights."),Mfr=l(),F(GT.$$.fragment),Efr=l(),yr=a("div"),F(VL.$$.fragment),Cfr=l(),d1e=a("p"),wfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Afr=l(),en=a("p"),yfr=o("The model class to instantiate is selected based on the "),c1e=a("code"),Lfr=o("model_type"),xfr=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),$fr=o("pretrained_model_name_or_path"),kfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),Sfr=o("pretrained_model_name_or_path"),Rfr=o(":"),Bfr=l(),Te=a("ul"),OT=a("li"),g1e=a("strong"),Pfr=o("bert"),Ifr=o(" \u2014 "),bQ=a("a"),qfr=o("TFBertLMHeadModel"),Nfr=o(" (BERT model)"),jfr=l(),VT=a("li"),h1e=a("strong"),Dfr=o("camembert"),Gfr=o(" \u2014 "),vQ=a("a"),Ofr=o("TFCamembertForCausalLM"),Vfr=o(" (CamemBERT model)"),Xfr=l(),XT=a("li"),p1e=a("strong"),zfr=o("ctrl"),Qfr=o(" \u2014 "),FQ=a("a"),Wfr=o("TFCTRLLMHeadModel"),Hfr=o(" (CTRL model)"),Ufr=l(),zT=a("li"),u1e=a("strong"),Jfr=o("gpt2"),Yfr=o(" \u2014 "),TQ=a("a"),Kfr=o("TFGPT2LMHeadModel"),Zfr=o(" (OpenAI GPT-2 model)"),emr=l(),QT=a("li"),_1e=a("strong"),omr=o("gptj"),rmr=o(" \u2014 "),MQ=a("a"),tmr=o("TFGPTJForCausalLM"),amr=o(" (GPT-J model)"),nmr=l(),WT=a("li"),b1e=a("strong"),smr=o("openai-gpt"),lmr=o(" \u2014 "),EQ=a("a"),imr=o("TFOpenAIGPTLMHeadModel"),dmr=o(" (OpenAI GPT model)"),cmr=l(),HT=a("li"),v1e=a("strong"),fmr=o("rembert"),mmr=o(" \u2014 "),CQ=a("a"),gmr=o("TFRemBertForCausalLM"),hmr=o(" (RemBERT model)"),pmr=l(),UT=a("li"),F1e=a("strong"),umr=o("roberta"),_mr=o(" \u2014 "),wQ=a("a"),bmr=o("TFRobertaForCausalLM"),vmr=o(" (RoBERTa model)"),Fmr=l(),JT=a("li"),T1e=a("strong"),Tmr=o("roformer"),Mmr=o(" \u2014 "),AQ=a("a"),Emr=o("TFRoFormerForCausalLM"),Cmr=o(" (RoFormer model)"),wmr=l(),YT=a("li"),M1e=a("strong"),Amr=o("transfo-xl"),ymr=o(" \u2014 "),yQ=a("a"),Lmr=o("TFTransfoXLLMHeadModel"),xmr=o(" (Transformer-XL model)"),$mr=l(),KT=a("li"),E1e=a("strong"),kmr=o("xlm"),Smr=o(" \u2014 "),LQ=a("a"),Rmr=o("TFXLMWithLMHeadModel"),Bmr=o(" (XLM model)"),Pmr=l(),ZT=a("li"),C1e=a("strong"),Imr=o("xlnet"),qmr=o(" \u2014 "),xQ=a("a"),Nmr=o("TFXLNetLMHeadModel"),jmr=o(" (XLNet model)"),Dmr=l(),F(e7.$$.fragment),OIe=l(),Qd=a("h2"),o7=a("a"),w1e=a("span"),F(XL.$$.fragment),Gmr=l(),A1e=a("span"),Omr=o("TFAutoModelForImageClassification"),VIe=l(),er=a("div"),F(zL.$$.fragment),Vmr=l(),Wd=a("p"),Xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=a("a"),zmr=o("from_pretrained()"),Qmr=o(" class method or the "),kQ=a("a"),Wmr=o("from_config()"),Hmr=o(` class
method.`),Umr=l(),QL=a("p"),Jmr=o("This class cannot be instantiated directly using "),y1e=a("code"),Ymr=o("__init__()"),Kmr=o(" (throws an error)."),Zmr=l(),Lt=a("div"),F(WL.$$.fragment),egr=l(),L1e=a("p"),ogr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rgr=l(),Hd=a("p"),tgr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),agr=o("not"),ngr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),sgr=o("from_pretrained()"),lgr=o(" to load the model weights."),igr=l(),F(r7.$$.fragment),dgr=l(),Lr=a("div"),F(HL.$$.fragment),cgr=l(),$1e=a("p"),fgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mgr=l(),on=a("p"),ggr=o("The model class to instantiate is selected based on the "),k1e=a("code"),hgr=o("model_type"),pgr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),ugr=o("pretrained_model_name_or_path"),_gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),bgr=o("pretrained_model_name_or_path"),vgr=o(":"),Fgr=l(),Ud=a("ul"),t7=a("li"),B1e=a("strong"),Tgr=o("convnext"),Mgr=o(" \u2014 "),RQ=a("a"),Egr=o("TFConvNextForImageClassification"),Cgr=o(" (ConvNext model)"),wgr=l(),a7=a("li"),P1e=a("strong"),Agr=o("data2vec-vision"),ygr=o(" \u2014 "),BQ=a("a"),Lgr=o("TFData2VecVisionForImageClassification"),xgr=o(" (Data2VecVision model)"),$gr=l(),n7=a("li"),I1e=a("strong"),kgr=o("vit"),Sgr=o(" \u2014 "),PQ=a("a"),Rgr=o("TFViTForImageClassification"),Bgr=o(" (ViT model)"),Pgr=l(),F(s7.$$.fragment),XIe=l(),Jd=a("h2"),l7=a("a"),q1e=a("span"),F(UL.$$.fragment),Igr=l(),N1e=a("span"),qgr=o("TFAutoModelForMaskedLM"),zIe=l(),or=a("div"),F(JL.$$.fragment),Ngr=l(),Yd=a("p"),jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IQ=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" class method or the "),qQ=a("a"),Ogr=o("from_config()"),Vgr=o(` class
method.`),Xgr=l(),YL=a("p"),zgr=o("This class cannot be instantiated directly using "),j1e=a("code"),Qgr=o("__init__()"),Wgr=o(" (throws an error)."),Hgr=l(),xt=a("div"),F(KL.$$.fragment),Ugr=l(),D1e=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ygr=l(),Kd=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),ohr=o("from_pretrained()"),rhr=o(" to load the model weights."),thr=l(),F(i7.$$.fragment),ahr=l(),xr=a("div"),F(ZL.$$.fragment),nhr=l(),O1e=a("p"),shr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lhr=l(),rn=a("p"),ihr=o("The model class to instantiate is selected based on the "),V1e=a("code"),dhr=o("model_type"),chr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),fhr=o("pretrained_model_name_or_path"),mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(":"),phr=l(),ie=a("ul"),d7=a("li"),Q1e=a("strong"),uhr=o("albert"),_hr=o(" \u2014 "),jQ=a("a"),bhr=o("TFAlbertForMaskedLM"),vhr=o(" (ALBERT model)"),Fhr=l(),c7=a("li"),W1e=a("strong"),Thr=o("bert"),Mhr=o(" \u2014 "),DQ=a("a"),Ehr=o("TFBertForMaskedLM"),Chr=o(" (BERT model)"),whr=l(),f7=a("li"),H1e=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),GQ=a("a"),Lhr=o("TFCamembertForMaskedLM"),xhr=o(" (CamemBERT model)"),$hr=l(),m7=a("li"),U1e=a("strong"),khr=o("convbert"),Shr=o(" \u2014 "),OQ=a("a"),Rhr=o("TFConvBertForMaskedLM"),Bhr=o(" (ConvBERT model)"),Phr=l(),g7=a("li"),J1e=a("strong"),Ihr=o("deberta"),qhr=o(" \u2014 "),VQ=a("a"),Nhr=o("TFDebertaForMaskedLM"),jhr=o(" (DeBERTa model)"),Dhr=l(),h7=a("li"),Y1e=a("strong"),Ghr=o("deberta-v2"),Ohr=o(" \u2014 "),XQ=a("a"),Vhr=o("TFDebertaV2ForMaskedLM"),Xhr=o(" (DeBERTa-v2 model)"),zhr=l(),p7=a("li"),K1e=a("strong"),Qhr=o("distilbert"),Whr=o(" \u2014 "),zQ=a("a"),Hhr=o("TFDistilBertForMaskedLM"),Uhr=o(" (DistilBERT model)"),Jhr=l(),u7=a("li"),Z1e=a("strong"),Yhr=o("electra"),Khr=o(" \u2014 "),QQ=a("a"),Zhr=o("TFElectraForMaskedLM"),epr=o(" (ELECTRA model)"),opr=l(),_7=a("li"),ebe=a("strong"),rpr=o("flaubert"),tpr=o(" \u2014 "),WQ=a("a"),apr=o("TFFlaubertWithLMHeadModel"),npr=o(" (FlauBERT model)"),spr=l(),b7=a("li"),obe=a("strong"),lpr=o("funnel"),ipr=o(" \u2014 "),HQ=a("a"),dpr=o("TFFunnelForMaskedLM"),cpr=o(" (Funnel Transformer model)"),fpr=l(),v7=a("li"),rbe=a("strong"),mpr=o("layoutlm"),gpr=o(" \u2014 "),UQ=a("a"),hpr=o("TFLayoutLMForMaskedLM"),ppr=o(" (LayoutLM model)"),upr=l(),F7=a("li"),tbe=a("strong"),_pr=o("longformer"),bpr=o(" \u2014 "),JQ=a("a"),vpr=o("TFLongformerForMaskedLM"),Fpr=o(" (Longformer model)"),Tpr=l(),T7=a("li"),abe=a("strong"),Mpr=o("mobilebert"),Epr=o(" \u2014 "),YQ=a("a"),Cpr=o("TFMobileBertForMaskedLM"),wpr=o(" (MobileBERT model)"),Apr=l(),M7=a("li"),nbe=a("strong"),ypr=o("mpnet"),Lpr=o(" \u2014 "),KQ=a("a"),xpr=o("TFMPNetForMaskedLM"),$pr=o(" (MPNet model)"),kpr=l(),E7=a("li"),sbe=a("strong"),Spr=o("rembert"),Rpr=o(" \u2014 "),ZQ=a("a"),Bpr=o("TFRemBertForMaskedLM"),Ppr=o(" (RemBERT model)"),Ipr=l(),C7=a("li"),lbe=a("strong"),qpr=o("roberta"),Npr=o(" \u2014 "),eW=a("a"),jpr=o("TFRobertaForMaskedLM"),Dpr=o(" (RoBERTa model)"),Gpr=l(),w7=a("li"),ibe=a("strong"),Opr=o("roformer"),Vpr=o(" \u2014 "),oW=a("a"),Xpr=o("TFRoFormerForMaskedLM"),zpr=o(" (RoFormer model)"),Qpr=l(),A7=a("li"),dbe=a("strong"),Wpr=o("tapas"),Hpr=o(" \u2014 "),rW=a("a"),Upr=o("TFTapasForMaskedLM"),Jpr=o(" (TAPAS model)"),Ypr=l(),y7=a("li"),cbe=a("strong"),Kpr=o("xlm"),Zpr=o(" \u2014 "),tW=a("a"),eur=o("TFXLMWithLMHeadModel"),our=o(" (XLM model)"),rur=l(),L7=a("li"),fbe=a("strong"),tur=o("xlm-roberta"),aur=o(" \u2014 "),aW=a("a"),nur=o("TFXLMRobertaForMaskedLM"),sur=o(" (XLM-RoBERTa model)"),lur=l(),F(x7.$$.fragment),QIe=l(),Zd=a("h2"),$7=a("a"),mbe=a("span"),F(e8.$$.fragment),iur=l(),gbe=a("span"),dur=o("TFAutoModelForSeq2SeqLM"),WIe=l(),rr=a("div"),F(o8.$$.fragment),cur=l(),ec=a("p"),fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nW=a("a"),mur=o("from_pretrained()"),gur=o(" class method or the "),sW=a("a"),hur=o("from_config()"),pur=o(` class
method.`),uur=l(),r8=a("p"),_ur=o("This class cannot be instantiated directly using "),hbe=a("code"),bur=o("__init__()"),vur=o(" (throws an error)."),Fur=l(),$t=a("div"),F(t8.$$.fragment),Tur=l(),pbe=a("p"),Mur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Eur=l(),oc=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),yur=o("from_pretrained()"),Lur=o(" to load the model weights."),xur=l(),F(k7.$$.fragment),$ur=l(),$r=a("div"),F(a8.$$.fragment),kur=l(),_be=a("p"),Sur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rur=l(),tn=a("p"),Bur=o("The model class to instantiate is selected based on the "),bbe=a("code"),Pur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),qur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),ye=a("ul"),S7=a("li"),Tbe=a("strong"),Our=o("bart"),Vur=o(" \u2014 "),iW=a("a"),Xur=o("TFBartForConditionalGeneration"),zur=o(" (BART model)"),Qur=l(),R7=a("li"),Mbe=a("strong"),Wur=o("blenderbot"),Hur=o(" \u2014 "),dW=a("a"),Uur=o("TFBlenderbotForConditionalGeneration"),Jur=o(" (Blenderbot model)"),Yur=l(),B7=a("li"),Ebe=a("strong"),Kur=o("blenderbot-small"),Zur=o(" \u2014 "),cW=a("a"),e_r=o("TFBlenderbotSmallForConditionalGeneration"),o_r=o(" (BlenderbotSmall model)"),r_r=l(),P7=a("li"),Cbe=a("strong"),t_r=o("encoder-decoder"),a_r=o(" \u2014 "),fW=a("a"),n_r=o("TFEncoderDecoderModel"),s_r=o(" (Encoder decoder model)"),l_r=l(),I7=a("li"),wbe=a("strong"),i_r=o("led"),d_r=o(" \u2014 "),mW=a("a"),c_r=o("TFLEDForConditionalGeneration"),f_r=o(" (LED model)"),m_r=l(),q7=a("li"),Abe=a("strong"),g_r=o("marian"),h_r=o(" \u2014 "),gW=a("a"),p_r=o("TFMarianMTModel"),u_r=o(" (Marian model)"),__r=l(),N7=a("li"),ybe=a("strong"),b_r=o("mbart"),v_r=o(" \u2014 "),hW=a("a"),F_r=o("TFMBartForConditionalGeneration"),T_r=o(" (mBART model)"),M_r=l(),j7=a("li"),Lbe=a("strong"),E_r=o("mt5"),C_r=o(" \u2014 "),pW=a("a"),w_r=o("TFMT5ForConditionalGeneration"),A_r=o(" (mT5 model)"),y_r=l(),D7=a("li"),xbe=a("strong"),L_r=o("pegasus"),x_r=o(" \u2014 "),uW=a("a"),$_r=o("TFPegasusForConditionalGeneration"),k_r=o(" (Pegasus model)"),S_r=l(),G7=a("li"),$be=a("strong"),R_r=o("t5"),B_r=o(" \u2014 "),_W=a("a"),P_r=o("TFT5ForConditionalGeneration"),I_r=o(" (T5 model)"),q_r=l(),F(O7.$$.fragment),HIe=l(),rc=a("h2"),V7=a("a"),kbe=a("span"),F(n8.$$.fragment),N_r=l(),Sbe=a("span"),j_r=o("TFAutoModelForSequenceClassification"),UIe=l(),tr=a("div"),F(s8.$$.fragment),D_r=l(),tc=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bW=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),vW=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),Q_r=l(),l8=a("p"),W_r=o("This class cannot be instantiated directly using "),Rbe=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),kt=a("div"),F(i8.$$.fragment),Y_r=l(),Bbe=a("p"),K_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z_r=l(),ac=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),F(X7.$$.fragment),s2r=l(),kr=a("div"),F(d8.$$.fragment),l2r=l(),Ibe=a("p"),i2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d2r=l(),an=a("p"),c2r=o("The model class to instantiate is selected based on the "),qbe=a("code"),f2r=o("model_type"),m2r=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),p2r=o("pretrained_model_name_or_path"),u2r=o(":"),_2r=l(),Z=a("ul"),z7=a("li"),Dbe=a("strong"),b2r=o("albert"),v2r=o(" \u2014 "),TW=a("a"),F2r=o("TFAlbertForSequenceClassification"),T2r=o(" (ALBERT model)"),M2r=l(),Q7=a("li"),Gbe=a("strong"),E2r=o("bert"),C2r=o(" \u2014 "),MW=a("a"),w2r=o("TFBertForSequenceClassification"),A2r=o(" (BERT model)"),y2r=l(),W7=a("li"),Obe=a("strong"),L2r=o("camembert"),x2r=o(" \u2014 "),EW=a("a"),$2r=o("TFCamembertForSequenceClassification"),k2r=o(" (CamemBERT model)"),S2r=l(),H7=a("li"),Vbe=a("strong"),R2r=o("convbert"),B2r=o(" \u2014 "),CW=a("a"),P2r=o("TFConvBertForSequenceClassification"),I2r=o(" (ConvBERT model)"),q2r=l(),U7=a("li"),Xbe=a("strong"),N2r=o("ctrl"),j2r=o(" \u2014 "),wW=a("a"),D2r=o("TFCTRLForSequenceClassification"),G2r=o(" (CTRL model)"),O2r=l(),J7=a("li"),zbe=a("strong"),V2r=o("deberta"),X2r=o(" \u2014 "),AW=a("a"),z2r=o("TFDebertaForSequenceClassification"),Q2r=o(" (DeBERTa model)"),W2r=l(),Y7=a("li"),Qbe=a("strong"),H2r=o("deberta-v2"),U2r=o(" \u2014 "),yW=a("a"),J2r=o("TFDebertaV2ForSequenceClassification"),Y2r=o(" (DeBERTa-v2 model)"),K2r=l(),K7=a("li"),Wbe=a("strong"),Z2r=o("distilbert"),e1r=o(" \u2014 "),LW=a("a"),o1r=o("TFDistilBertForSequenceClassification"),r1r=o(" (DistilBERT model)"),t1r=l(),Z7=a("li"),Hbe=a("strong"),a1r=o("electra"),n1r=o(" \u2014 "),xW=a("a"),s1r=o("TFElectraForSequenceClassification"),l1r=o(" (ELECTRA model)"),i1r=l(),eM=a("li"),Ube=a("strong"),d1r=o("flaubert"),c1r=o(" \u2014 "),$W=a("a"),f1r=o("TFFlaubertForSequenceClassification"),m1r=o(" (FlauBERT model)"),g1r=l(),oM=a("li"),Jbe=a("strong"),h1r=o("funnel"),p1r=o(" \u2014 "),kW=a("a"),u1r=o("TFFunnelForSequenceClassification"),_1r=o(" (Funnel Transformer model)"),b1r=l(),rM=a("li"),Ybe=a("strong"),v1r=o("gpt2"),F1r=o(" \u2014 "),SW=a("a"),T1r=o("TFGPT2ForSequenceClassification"),M1r=o(" (OpenAI GPT-2 model)"),E1r=l(),tM=a("li"),Kbe=a("strong"),C1r=o("gptj"),w1r=o(" \u2014 "),RW=a("a"),A1r=o("TFGPTJForSequenceClassification"),y1r=o(" (GPT-J model)"),L1r=l(),aM=a("li"),Zbe=a("strong"),x1r=o("layoutlm"),$1r=o(" \u2014 "),BW=a("a"),k1r=o("TFLayoutLMForSequenceClassification"),S1r=o(" (LayoutLM model)"),R1r=l(),nM=a("li"),e5e=a("strong"),B1r=o("longformer"),P1r=o(" \u2014 "),PW=a("a"),I1r=o("TFLongformerForSequenceClassification"),q1r=o(" (Longformer model)"),N1r=l(),sM=a("li"),o5e=a("strong"),j1r=o("mobilebert"),D1r=o(" \u2014 "),IW=a("a"),G1r=o("TFMobileBertForSequenceClassification"),O1r=o(" (MobileBERT model)"),V1r=l(),lM=a("li"),r5e=a("strong"),X1r=o("mpnet"),z1r=o(" \u2014 "),qW=a("a"),Q1r=o("TFMPNetForSequenceClassification"),W1r=o(" (MPNet model)"),H1r=l(),iM=a("li"),t5e=a("strong"),U1r=o("openai-gpt"),J1r=o(" \u2014 "),NW=a("a"),Y1r=o("TFOpenAIGPTForSequenceClassification"),K1r=o(" (OpenAI GPT model)"),Z1r=l(),dM=a("li"),a5e=a("strong"),ebr=o("rembert"),obr=o(" \u2014 "),jW=a("a"),rbr=o("TFRemBertForSequenceClassification"),tbr=o(" (RemBERT model)"),abr=l(),cM=a("li"),n5e=a("strong"),nbr=o("roberta"),sbr=o(" \u2014 "),DW=a("a"),lbr=o("TFRobertaForSequenceClassification"),ibr=o(" (RoBERTa model)"),dbr=l(),fM=a("li"),s5e=a("strong"),cbr=o("roformer"),fbr=o(" \u2014 "),GW=a("a"),mbr=o("TFRoFormerForSequenceClassification"),gbr=o(" (RoFormer model)"),hbr=l(),mM=a("li"),l5e=a("strong"),pbr=o("tapas"),ubr=o(" \u2014 "),OW=a("a"),_br=o("TFTapasForSequenceClassification"),bbr=o(" (TAPAS model)"),vbr=l(),gM=a("li"),i5e=a("strong"),Fbr=o("transfo-xl"),Tbr=o(" \u2014 "),VW=a("a"),Mbr=o("TFTransfoXLForSequenceClassification"),Ebr=o(" (Transformer-XL model)"),Cbr=l(),hM=a("li"),d5e=a("strong"),wbr=o("xlm"),Abr=o(" \u2014 "),XW=a("a"),ybr=o("TFXLMForSequenceClassification"),Lbr=o(" (XLM model)"),xbr=l(),pM=a("li"),c5e=a("strong"),$br=o("xlm-roberta"),kbr=o(" \u2014 "),zW=a("a"),Sbr=o("TFXLMRobertaForSequenceClassification"),Rbr=o(" (XLM-RoBERTa model)"),Bbr=l(),uM=a("li"),f5e=a("strong"),Pbr=o("xlnet"),Ibr=o(" \u2014 "),QW=a("a"),qbr=o("TFXLNetForSequenceClassification"),Nbr=o(" (XLNet model)"),jbr=l(),F(_M.$$.fragment),JIe=l(),nc=a("h2"),bM=a("a"),m5e=a("span"),F(c8.$$.fragment),Dbr=l(),g5e=a("span"),Gbr=o("TFAutoModelForMultipleChoice"),YIe=l(),ar=a("div"),F(f8.$$.fragment),Obr=l(),sc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WW=a("a"),Xbr=o("from_pretrained()"),zbr=o(" class method or the "),HW=a("a"),Qbr=o("from_config()"),Wbr=o(` class
method.`),Hbr=l(),m8=a("p"),Ubr=o("This class cannot be instantiated directly using "),h5e=a("code"),Jbr=o("__init__()"),Ybr=o(" (throws an error)."),Kbr=l(),St=a("div"),F(g8.$$.fragment),Zbr=l(),p5e=a("p"),e5r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o5r=l(),lc=a("p"),r5r=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),t5r=o("not"),a5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),n5r=o("from_pretrained()"),s5r=o(" to load the model weights."),l5r=l(),F(vM.$$.fragment),i5r=l(),Sr=a("div"),F(h8.$$.fragment),d5r=l(),_5e=a("p"),c5r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f5r=l(),nn=a("p"),m5r=o("The model class to instantiate is selected based on the "),b5e=a("code"),g5r=o("model_type"),h5r=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),p5r=o("pretrained_model_name_or_path"),u5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),_5r=o("pretrained_model_name_or_path"),b5r=o(":"),v5r=l(),he=a("ul"),FM=a("li"),T5e=a("strong"),F5r=o("albert"),T5r=o(" \u2014 "),JW=a("a"),M5r=o("TFAlbertForMultipleChoice"),E5r=o(" (ALBERT model)"),C5r=l(),TM=a("li"),M5e=a("strong"),w5r=o("bert"),A5r=o(" \u2014 "),YW=a("a"),y5r=o("TFBertForMultipleChoice"),L5r=o(" (BERT model)"),x5r=l(),MM=a("li"),E5e=a("strong"),$5r=o("camembert"),k5r=o(" \u2014 "),KW=a("a"),S5r=o("TFCamembertForMultipleChoice"),R5r=o(" (CamemBERT model)"),B5r=l(),EM=a("li"),C5e=a("strong"),P5r=o("convbert"),I5r=o(" \u2014 "),ZW=a("a"),q5r=o("TFConvBertForMultipleChoice"),N5r=o(" (ConvBERT model)"),j5r=l(),CM=a("li"),w5e=a("strong"),D5r=o("distilbert"),G5r=o(" \u2014 "),eH=a("a"),O5r=o("TFDistilBertForMultipleChoice"),V5r=o(" (DistilBERT model)"),X5r=l(),wM=a("li"),A5e=a("strong"),z5r=o("electra"),Q5r=o(" \u2014 "),oH=a("a"),W5r=o("TFElectraForMultipleChoice"),H5r=o(" (ELECTRA model)"),U5r=l(),AM=a("li"),y5e=a("strong"),J5r=o("flaubert"),Y5r=o(" \u2014 "),rH=a("a"),K5r=o("TFFlaubertForMultipleChoice"),Z5r=o(" (FlauBERT model)"),evr=l(),yM=a("li"),L5e=a("strong"),ovr=o("funnel"),rvr=o(" \u2014 "),tH=a("a"),tvr=o("TFFunnelForMultipleChoice"),avr=o(" (Funnel Transformer model)"),nvr=l(),LM=a("li"),x5e=a("strong"),svr=o("longformer"),lvr=o(" \u2014 "),aH=a("a"),ivr=o("TFLongformerForMultipleChoice"),dvr=o(" (Longformer model)"),cvr=l(),xM=a("li"),$5e=a("strong"),fvr=o("mobilebert"),mvr=o(" \u2014 "),nH=a("a"),gvr=o("TFMobileBertForMultipleChoice"),hvr=o(" (MobileBERT model)"),pvr=l(),$M=a("li"),k5e=a("strong"),uvr=o("mpnet"),_vr=o(" \u2014 "),sH=a("a"),bvr=o("TFMPNetForMultipleChoice"),vvr=o(" (MPNet model)"),Fvr=l(),kM=a("li"),S5e=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),lH=a("a"),Evr=o("TFRemBertForMultipleChoice"),Cvr=o(" (RemBERT model)"),wvr=l(),SM=a("li"),R5e=a("strong"),Avr=o("roberta"),yvr=o(" \u2014 "),iH=a("a"),Lvr=o("TFRobertaForMultipleChoice"),xvr=o(" (RoBERTa model)"),$vr=l(),RM=a("li"),B5e=a("strong"),kvr=o("roformer"),Svr=o(" \u2014 "),dH=a("a"),Rvr=o("TFRoFormerForMultipleChoice"),Bvr=o(" (RoFormer model)"),Pvr=l(),BM=a("li"),P5e=a("strong"),Ivr=o("xlm"),qvr=o(" \u2014 "),cH=a("a"),Nvr=o("TFXLMForMultipleChoice"),jvr=o(" (XLM model)"),Dvr=l(),PM=a("li"),I5e=a("strong"),Gvr=o("xlm-roberta"),Ovr=o(" \u2014 "),fH=a("a"),Vvr=o("TFXLMRobertaForMultipleChoice"),Xvr=o(" (XLM-RoBERTa model)"),zvr=l(),IM=a("li"),q5e=a("strong"),Qvr=o("xlnet"),Wvr=o(" \u2014 "),mH=a("a"),Hvr=o("TFXLNetForMultipleChoice"),Uvr=o(" (XLNet model)"),Jvr=l(),F(qM.$$.fragment),KIe=l(),ic=a("h2"),NM=a("a"),N5e=a("span"),F(p8.$$.fragment),Yvr=l(),j5e=a("span"),Kvr=o("TFAutoModelForNextSentencePrediction"),ZIe=l(),nr=a("div"),F(u8.$$.fragment),Zvr=l(),dc=a("p"),eFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gH=a("a"),oFr=o("from_pretrained()"),rFr=o(" class method or the "),hH=a("a"),tFr=o("from_config()"),aFr=o(` class
method.`),nFr=l(),_8=a("p"),sFr=o("This class cannot be instantiated directly using "),D5e=a("code"),lFr=o("__init__()"),iFr=o(" (throws an error)."),dFr=l(),Rt=a("div"),F(b8.$$.fragment),cFr=l(),G5e=a("p"),fFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mFr=l(),cc=a("p"),gFr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),hFr=o("not"),pFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),uFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),bFr=l(),F(jM.$$.fragment),vFr=l(),Rr=a("div"),F(v8.$$.fragment),FFr=l(),V5e=a("p"),TFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MFr=l(),sn=a("p"),EFr=o("The model class to instantiate is selected based on the "),X5e=a("code"),CFr=o("model_type"),wFr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),AFr=o("pretrained_model_name_or_path"),yFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=a("code"),LFr=o("pretrained_model_name_or_path"),xFr=o(":"),$Fr=l(),F8=a("ul"),DM=a("li"),W5e=a("strong"),kFr=o("bert"),SFr=o(" \u2014 "),uH=a("a"),RFr=o("TFBertForNextSentencePrediction"),BFr=o(" (BERT model)"),PFr=l(),GM=a("li"),H5e=a("strong"),IFr=o("mobilebert"),qFr=o(" \u2014 "),_H=a("a"),NFr=o("TFMobileBertForNextSentencePrediction"),jFr=o(" (MobileBERT model)"),DFr=l(),F(OM.$$.fragment),eqe=l(),fc=a("h2"),VM=a("a"),U5e=a("span"),F(T8.$$.fragment),GFr=l(),J5e=a("span"),OFr=o("TFAutoModelForTableQuestionAnswering"),oqe=l(),sr=a("div"),F(M8.$$.fragment),VFr=l(),mc=a("p"),XFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bH=a("a"),zFr=o("from_pretrained()"),QFr=o(" class method or the "),vH=a("a"),WFr=o("from_config()"),HFr=o(` class
method.`),UFr=l(),E8=a("p"),JFr=o("This class cannot be instantiated directly using "),Y5e=a("code"),YFr=o("__init__()"),KFr=o(" (throws an error)."),ZFr=l(),Bt=a("div"),F(C8.$$.fragment),e0r=l(),K5e=a("p"),o0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r0r=l(),gc=a("p"),t0r=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),a0r=o("not"),n0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),s0r=o("from_pretrained()"),l0r=o(" to load the model weights."),i0r=l(),F(XM.$$.fragment),d0r=l(),Br=a("div"),F(w8.$$.fragment),c0r=l(),eve=a("p"),f0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),m0r=l(),ln=a("p"),g0r=o("The model class to instantiate is selected based on the "),ove=a("code"),h0r=o("model_type"),p0r=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),u0r=o("pretrained_model_name_or_path"),_0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),b0r=o("pretrained_model_name_or_path"),v0r=o(":"),F0r=l(),ave=a("ul"),zM=a("li"),nve=a("strong"),T0r=o("tapas"),M0r=o(" \u2014 "),TH=a("a"),E0r=o("TFTapasForQuestionAnswering"),C0r=o(" (TAPAS model)"),w0r=l(),F(QM.$$.fragment),rqe=l(),hc=a("h2"),WM=a("a"),sve=a("span"),F(A8.$$.fragment),A0r=l(),lve=a("span"),y0r=o("TFAutoModelForTokenClassification"),tqe=l(),lr=a("div"),F(y8.$$.fragment),L0r=l(),pc=a("p"),x0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MH=a("a"),$0r=o("from_pretrained()"),k0r=o(" class method or the "),EH=a("a"),S0r=o("from_config()"),R0r=o(` class
method.`),B0r=l(),L8=a("p"),P0r=o("This class cannot be instantiated directly using "),ive=a("code"),I0r=o("__init__()"),q0r=o(" (throws an error)."),N0r=l(),Pt=a("div"),F(x8.$$.fragment),j0r=l(),dve=a("p"),D0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G0r=l(),uc=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),V0r=o("not"),X0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),z0r=o("from_pretrained()"),Q0r=o(" to load the model weights."),W0r=l(),F(HM.$$.fragment),H0r=l(),Pr=a("div"),F($8.$$.fragment),U0r=l(),fve=a("p"),J0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y0r=l(),dn=a("p"),K0r=o("The model class to instantiate is selected based on the "),mve=a("code"),Z0r=o("model_type"),eTr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),oTr=o("pretrained_model_name_or_path"),rTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),tTr=o("pretrained_model_name_or_path"),aTr=o(":"),nTr=l(),de=a("ul"),UM=a("li"),pve=a("strong"),sTr=o("albert"),lTr=o(" \u2014 "),wH=a("a"),iTr=o("TFAlbertForTokenClassification"),dTr=o(" (ALBERT model)"),cTr=l(),JM=a("li"),uve=a("strong"),fTr=o("bert"),mTr=o(" \u2014 "),AH=a("a"),gTr=o("TFBertForTokenClassification"),hTr=o(" (BERT model)"),pTr=l(),YM=a("li"),_ve=a("strong"),uTr=o("camembert"),_Tr=o(" \u2014 "),yH=a("a"),bTr=o("TFCamembertForTokenClassification"),vTr=o(" (CamemBERT model)"),FTr=l(),KM=a("li"),bve=a("strong"),TTr=o("convbert"),MTr=o(" \u2014 "),LH=a("a"),ETr=o("TFConvBertForTokenClassification"),CTr=o(" (ConvBERT model)"),wTr=l(),ZM=a("li"),vve=a("strong"),ATr=o("deberta"),yTr=o(" \u2014 "),xH=a("a"),LTr=o("TFDebertaForTokenClassification"),xTr=o(" (DeBERTa model)"),$Tr=l(),e4=a("li"),Fve=a("strong"),kTr=o("deberta-v2"),STr=o(" \u2014 "),$H=a("a"),RTr=o("TFDebertaV2ForTokenClassification"),BTr=o(" (DeBERTa-v2 model)"),PTr=l(),o4=a("li"),Tve=a("strong"),ITr=o("distilbert"),qTr=o(" \u2014 "),kH=a("a"),NTr=o("TFDistilBertForTokenClassification"),jTr=o(" (DistilBERT model)"),DTr=l(),r4=a("li"),Mve=a("strong"),GTr=o("electra"),OTr=o(" \u2014 "),SH=a("a"),VTr=o("TFElectraForTokenClassification"),XTr=o(" (ELECTRA model)"),zTr=l(),t4=a("li"),Eve=a("strong"),QTr=o("flaubert"),WTr=o(" \u2014 "),RH=a("a"),HTr=o("TFFlaubertForTokenClassification"),UTr=o(" (FlauBERT model)"),JTr=l(),a4=a("li"),Cve=a("strong"),YTr=o("funnel"),KTr=o(" \u2014 "),BH=a("a"),ZTr=o("TFFunnelForTokenClassification"),e7r=o(" (Funnel Transformer model)"),o7r=l(),n4=a("li"),wve=a("strong"),r7r=o("layoutlm"),t7r=o(" \u2014 "),PH=a("a"),a7r=o("TFLayoutLMForTokenClassification"),n7r=o(" (LayoutLM model)"),s7r=l(),s4=a("li"),Ave=a("strong"),l7r=o("longformer"),i7r=o(" \u2014 "),IH=a("a"),d7r=o("TFLongformerForTokenClassification"),c7r=o(" (Longformer model)"),f7r=l(),l4=a("li"),yve=a("strong"),m7r=o("mobilebert"),g7r=o(" \u2014 "),qH=a("a"),h7r=o("TFMobileBertForTokenClassification"),p7r=o(" (MobileBERT model)"),u7r=l(),i4=a("li"),Lve=a("strong"),_7r=o("mpnet"),b7r=o(" \u2014 "),NH=a("a"),v7r=o("TFMPNetForTokenClassification"),F7r=o(" (MPNet model)"),T7r=l(),d4=a("li"),xve=a("strong"),M7r=o("rembert"),E7r=o(" \u2014 "),jH=a("a"),C7r=o("TFRemBertForTokenClassification"),w7r=o(" (RemBERT model)"),A7r=l(),c4=a("li"),$ve=a("strong"),y7r=o("roberta"),L7r=o(" \u2014 "),DH=a("a"),x7r=o("TFRobertaForTokenClassification"),$7r=o(" (RoBERTa model)"),k7r=l(),f4=a("li"),kve=a("strong"),S7r=o("roformer"),R7r=o(" \u2014 "),GH=a("a"),B7r=o("TFRoFormerForTokenClassification"),P7r=o(" (RoFormer model)"),I7r=l(),m4=a("li"),Sve=a("strong"),q7r=o("xlm"),N7r=o(" \u2014 "),OH=a("a"),j7r=o("TFXLMForTokenClassification"),D7r=o(" (XLM model)"),G7r=l(),g4=a("li"),Rve=a("strong"),O7r=o("xlm-roberta"),V7r=o(" \u2014 "),VH=a("a"),X7r=o("TFXLMRobertaForTokenClassification"),z7r=o(" (XLM-RoBERTa model)"),Q7r=l(),h4=a("li"),Bve=a("strong"),W7r=o("xlnet"),H7r=o(" \u2014 "),XH=a("a"),U7r=o("TFXLNetForTokenClassification"),J7r=o(" (XLNet model)"),Y7r=l(),F(p4.$$.fragment),aqe=l(),_c=a("h2"),u4=a("a"),Pve=a("span"),F(k8.$$.fragment),K7r=l(),Ive=a("span"),Z7r=o("TFAutoModelForQuestionAnswering"),nqe=l(),ir=a("div"),F(S8.$$.fragment),eMr=l(),bc=a("p"),oMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zH=a("a"),rMr=o("from_pretrained()"),tMr=o(" class method or the "),QH=a("a"),aMr=o("from_config()"),nMr=o(` class
method.`),sMr=l(),R8=a("p"),lMr=o("This class cannot be instantiated directly using "),qve=a("code"),iMr=o("__init__()"),dMr=o(" (throws an error)."),cMr=l(),It=a("div"),F(B8.$$.fragment),fMr=l(),Nve=a("p"),mMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gMr=l(),vc=a("p"),hMr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),pMr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),_Mr=o("from_pretrained()"),bMr=o(" to load the model weights."),vMr=l(),F(_4.$$.fragment),FMr=l(),Ir=a("div"),F(P8.$$.fragment),TMr=l(),Dve=a("p"),MMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EMr=l(),cn=a("p"),CMr=o("The model class to instantiate is selected based on the "),Gve=a("code"),wMr=o("model_type"),AMr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),yMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(":"),kMr=l(),ce=a("ul"),b4=a("li"),Xve=a("strong"),SMr=o("albert"),RMr=o(" \u2014 "),HH=a("a"),BMr=o("TFAlbertForQuestionAnswering"),PMr=o(" (ALBERT model)"),IMr=l(),v4=a("li"),zve=a("strong"),qMr=o("bert"),NMr=o(" \u2014 "),UH=a("a"),jMr=o("TFBertForQuestionAnswering"),DMr=o(" (BERT model)"),GMr=l(),F4=a("li"),Qve=a("strong"),OMr=o("camembert"),VMr=o(" \u2014 "),JH=a("a"),XMr=o("TFCamembertForQuestionAnswering"),zMr=o(" (CamemBERT model)"),QMr=l(),T4=a("li"),Wve=a("strong"),WMr=o("convbert"),HMr=o(" \u2014 "),YH=a("a"),UMr=o("TFConvBertForQuestionAnswering"),JMr=o(" (ConvBERT model)"),YMr=l(),M4=a("li"),Hve=a("strong"),KMr=o("deberta"),ZMr=o(" \u2014 "),KH=a("a"),e4r=o("TFDebertaForQuestionAnswering"),o4r=o(" (DeBERTa model)"),r4r=l(),E4=a("li"),Uve=a("strong"),t4r=o("deberta-v2"),a4r=o(" \u2014 "),ZH=a("a"),n4r=o("TFDebertaV2ForQuestionAnswering"),s4r=o(" (DeBERTa-v2 model)"),l4r=l(),C4=a("li"),Jve=a("strong"),i4r=o("distilbert"),d4r=o(" \u2014 "),eU=a("a"),c4r=o("TFDistilBertForQuestionAnswering"),f4r=o(" (DistilBERT model)"),m4r=l(),w4=a("li"),Yve=a("strong"),g4r=o("electra"),h4r=o(" \u2014 "),oU=a("a"),p4r=o("TFElectraForQuestionAnswering"),u4r=o(" (ELECTRA model)"),_4r=l(),A4=a("li"),Kve=a("strong"),b4r=o("flaubert"),v4r=o(" \u2014 "),rU=a("a"),F4r=o("TFFlaubertForQuestionAnsweringSimple"),T4r=o(" (FlauBERT model)"),M4r=l(),y4=a("li"),Zve=a("strong"),E4r=o("funnel"),C4r=o(" \u2014 "),tU=a("a"),w4r=o("TFFunnelForQuestionAnswering"),A4r=o(" (Funnel Transformer model)"),y4r=l(),L4=a("li"),eFe=a("strong"),L4r=o("gptj"),x4r=o(" \u2014 "),aU=a("a"),$4r=o("TFGPTJForQuestionAnswering"),k4r=o(" (GPT-J model)"),S4r=l(),x4=a("li"),oFe=a("strong"),R4r=o("longformer"),B4r=o(" \u2014 "),nU=a("a"),P4r=o("TFLongformerForQuestionAnswering"),I4r=o(" (Longformer model)"),q4r=l(),$4=a("li"),rFe=a("strong"),N4r=o("mobilebert"),j4r=o(" \u2014 "),sU=a("a"),D4r=o("TFMobileBertForQuestionAnswering"),G4r=o(" (MobileBERT model)"),O4r=l(),k4=a("li"),tFe=a("strong"),V4r=o("mpnet"),X4r=o(" \u2014 "),lU=a("a"),z4r=o("TFMPNetForQuestionAnswering"),Q4r=o(" (MPNet model)"),W4r=l(),S4=a("li"),aFe=a("strong"),H4r=o("rembert"),U4r=o(" \u2014 "),iU=a("a"),J4r=o("TFRemBertForQuestionAnswering"),Y4r=o(" (RemBERT model)"),K4r=l(),R4=a("li"),nFe=a("strong"),Z4r=o("roberta"),eEr=o(" \u2014 "),dU=a("a"),oEr=o("TFRobertaForQuestionAnswering"),rEr=o(" (RoBERTa model)"),tEr=l(),B4=a("li"),sFe=a("strong"),aEr=o("roformer"),nEr=o(" \u2014 "),cU=a("a"),sEr=o("TFRoFormerForQuestionAnswering"),lEr=o(" (RoFormer model)"),iEr=l(),P4=a("li"),lFe=a("strong"),dEr=o("xlm"),cEr=o(" \u2014 "),fU=a("a"),fEr=o("TFXLMForQuestionAnsweringSimple"),mEr=o(" (XLM model)"),gEr=l(),I4=a("li"),iFe=a("strong"),hEr=o("xlm-roberta"),pEr=o(" \u2014 "),mU=a("a"),uEr=o("TFXLMRobertaForQuestionAnswering"),_Er=o(" (XLM-RoBERTa model)"),bEr=l(),q4=a("li"),dFe=a("strong"),vEr=o("xlnet"),FEr=o(" \u2014 "),gU=a("a"),TEr=o("TFXLNetForQuestionAnsweringSimple"),MEr=o(" (XLNet model)"),EEr=l(),F(N4.$$.fragment),sqe=l(),Fc=a("h2"),j4=a("a"),cFe=a("span"),F(I8.$$.fragment),CEr=l(),fFe=a("span"),wEr=o("TFAutoModelForVision2Seq"),lqe=l(),dr=a("div"),F(q8.$$.fragment),AEr=l(),Tc=a("p"),yEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hU=a("a"),LEr=o("from_pretrained()"),xEr=o(" class method or the "),pU=a("a"),$Er=o("from_config()"),kEr=o(` class
method.`),SEr=l(),N8=a("p"),REr=o("This class cannot be instantiated directly using "),mFe=a("code"),BEr=o("__init__()"),PEr=o(" (throws an error)."),IEr=l(),qt=a("div"),F(j8.$$.fragment),qEr=l(),gFe=a("p"),NEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jEr=l(),Mc=a("p"),DEr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),GEr=o("not"),OEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),VEr=o("from_pretrained()"),XEr=o(" to load the model weights."),zEr=l(),F(D4.$$.fragment),QEr=l(),qr=a("div"),F(D8.$$.fragment),WEr=l(),pFe=a("p"),HEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UEr=l(),fn=a("p"),JEr=o("The model class to instantiate is selected based on the "),uFe=a("code"),YEr=o("model_type"),KEr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),ZEr=o("pretrained_model_name_or_path"),eCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(":"),tCr=l(),vFe=a("ul"),G4=a("li"),FFe=a("strong"),aCr=o("vision-encoder-decoder"),nCr=o(" \u2014 "),_U=a("a"),sCr=o("TFVisionEncoderDecoderModel"),lCr=o(" (Vision Encoder decoder model)"),iCr=l(),F(O4.$$.fragment),iqe=l(),Ec=a("h2"),V4=a("a"),TFe=a("span"),F(G8.$$.fragment),dCr=l(),MFe=a("span"),cCr=o("TFAutoModelForSpeechSeq2Seq"),dqe=l(),cr=a("div"),F(O8.$$.fragment),fCr=l(),Cc=a("p"),mCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bU=a("a"),gCr=o("from_pretrained()"),hCr=o(" class method or the "),vU=a("a"),pCr=o("from_config()"),uCr=o(` class
method.`),_Cr=l(),V8=a("p"),bCr=o("This class cannot be instantiated directly using "),EFe=a("code"),vCr=o("__init__()"),FCr=o(" (throws an error)."),TCr=l(),Nt=a("div"),F(X8.$$.fragment),MCr=l(),CFe=a("p"),ECr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CCr=l(),wc=a("p"),wCr=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),ACr=o("not"),yCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),LCr=o("from_pretrained()"),xCr=o(" to load the model weights."),$Cr=l(),F(X4.$$.fragment),kCr=l(),Nr=a("div"),F(z8.$$.fragment),SCr=l(),AFe=a("p"),RCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BCr=l(),mn=a("p"),PCr=o("The model class to instantiate is selected based on the "),yFe=a("code"),ICr=o("model_type"),qCr=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),NCr=o("pretrained_model_name_or_path"),jCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(":"),OCr=l(),$Fe=a("ul"),z4=a("li"),kFe=a("strong"),VCr=o("speech_to_text"),XCr=o(" \u2014 "),TU=a("a"),zCr=o("TFSpeech2TextForConditionalGeneration"),QCr=o(" (Speech2Text model)"),WCr=l(),F(Q4.$$.fragment),cqe=l(),Ac=a("h2"),W4=a("a"),SFe=a("span"),F(Q8.$$.fragment),HCr=l(),RFe=a("span"),UCr=o("FlaxAutoModel"),fqe=l(),fr=a("div"),F(W8.$$.fragment),JCr=l(),yc=a("p"),YCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MU=a("a"),KCr=o("from_pretrained()"),ZCr=o(" class method or the "),EU=a("a"),e3r=o("from_config()"),o3r=o(` class
method.`),r3r=l(),H8=a("p"),t3r=o("This class cannot be instantiated directly using "),BFe=a("code"),a3r=o("__init__()"),n3r=o(" (throws an error)."),s3r=l(),jt=a("div"),F(U8.$$.fragment),l3r=l(),PFe=a("p"),i3r=o("Instantiates one of the base model classes of the library from a configuration."),d3r=l(),Lc=a("p"),c3r=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),f3r=o("not"),m3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),g3r=o("from_pretrained()"),h3r=o(" to load the model weights."),p3r=l(),F(H4.$$.fragment),u3r=l(),jr=a("div"),F(J8.$$.fragment),_3r=l(),qFe=a("p"),b3r=o("Instantiate one of the base model classes of the library from a pretrained model."),v3r=l(),gn=a("p"),F3r=o("The model class to instantiate is selected based on the "),NFe=a("code"),T3r=o("model_type"),M3r=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),E3r=o("pretrained_model_name_or_path"),C3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),w3r=o("pretrained_model_name_or_path"),A3r=o(":"),y3r=l(),re=a("ul"),U4=a("li"),GFe=a("strong"),L3r=o("albert"),x3r=o(" \u2014 "),wU=a("a"),$3r=o("FlaxAlbertModel"),k3r=o(" (ALBERT model)"),S3r=l(),J4=a("li"),OFe=a("strong"),R3r=o("bart"),B3r=o(" \u2014 "),AU=a("a"),P3r=o("FlaxBartModel"),I3r=o(" (BART model)"),q3r=l(),Y4=a("li"),VFe=a("strong"),N3r=o("beit"),j3r=o(" \u2014 "),yU=a("a"),D3r=o("FlaxBeitModel"),G3r=o(" (BEiT model)"),O3r=l(),K4=a("li"),XFe=a("strong"),V3r=o("bert"),X3r=o(" \u2014 "),LU=a("a"),z3r=o("FlaxBertModel"),Q3r=o(" (BERT model)"),W3r=l(),Z4=a("li"),zFe=a("strong"),H3r=o("big_bird"),U3r=o(" \u2014 "),xU=a("a"),J3r=o("FlaxBigBirdModel"),Y3r=o(" (BigBird model)"),K3r=l(),eE=a("li"),QFe=a("strong"),Z3r=o("blenderbot"),ewr=o(" \u2014 "),$U=a("a"),owr=o("FlaxBlenderbotModel"),rwr=o(" (Blenderbot model)"),twr=l(),oE=a("li"),WFe=a("strong"),awr=o("blenderbot-small"),nwr=o(" \u2014 "),kU=a("a"),swr=o("FlaxBlenderbotSmallModel"),lwr=o(" (BlenderbotSmall model)"),iwr=l(),rE=a("li"),HFe=a("strong"),dwr=o("clip"),cwr=o(" \u2014 "),SU=a("a"),fwr=o("FlaxCLIPModel"),mwr=o(" (CLIP model)"),gwr=l(),tE=a("li"),UFe=a("strong"),hwr=o("distilbert"),pwr=o(" \u2014 "),RU=a("a"),uwr=o("FlaxDistilBertModel"),_wr=o(" (DistilBERT model)"),bwr=l(),aE=a("li"),JFe=a("strong"),vwr=o("electra"),Fwr=o(" \u2014 "),BU=a("a"),Twr=o("FlaxElectraModel"),Mwr=o(" (ELECTRA model)"),Ewr=l(),nE=a("li"),YFe=a("strong"),Cwr=o("gpt2"),wwr=o(" \u2014 "),PU=a("a"),Awr=o("FlaxGPT2Model"),ywr=o(" (OpenAI GPT-2 model)"),Lwr=l(),sE=a("li"),KFe=a("strong"),xwr=o("gpt_neo"),$wr=o(" \u2014 "),IU=a("a"),kwr=o("FlaxGPTNeoModel"),Swr=o(" (GPT Neo model)"),Rwr=l(),lE=a("li"),ZFe=a("strong"),Bwr=o("gptj"),Pwr=o(" \u2014 "),qU=a("a"),Iwr=o("FlaxGPTJModel"),qwr=o(" (GPT-J model)"),Nwr=l(),iE=a("li"),e0e=a("strong"),jwr=o("marian"),Dwr=o(" \u2014 "),NU=a("a"),Gwr=o("FlaxMarianModel"),Owr=o(" (Marian model)"),Vwr=l(),dE=a("li"),o0e=a("strong"),Xwr=o("mbart"),zwr=o(" \u2014 "),jU=a("a"),Qwr=o("FlaxMBartModel"),Wwr=o(" (mBART model)"),Hwr=l(),cE=a("li"),r0e=a("strong"),Uwr=o("mt5"),Jwr=o(" \u2014 "),DU=a("a"),Ywr=o("FlaxMT5Model"),Kwr=o(" (mT5 model)"),Zwr=l(),fE=a("li"),t0e=a("strong"),eAr=o("pegasus"),oAr=o(" \u2014 "),GU=a("a"),rAr=o("FlaxPegasusModel"),tAr=o(" (Pegasus model)"),aAr=l(),mE=a("li"),a0e=a("strong"),nAr=o("roberta"),sAr=o(" \u2014 "),OU=a("a"),lAr=o("FlaxRobertaModel"),iAr=o(" (RoBERTa model)"),dAr=l(),gE=a("li"),n0e=a("strong"),cAr=o("roformer"),fAr=o(" \u2014 "),VU=a("a"),mAr=o("FlaxRoFormerModel"),gAr=o(" (RoFormer model)"),hAr=l(),hE=a("li"),s0e=a("strong"),pAr=o("t5"),uAr=o(" \u2014 "),XU=a("a"),_Ar=o("FlaxT5Model"),bAr=o(" (T5 model)"),vAr=l(),pE=a("li"),l0e=a("strong"),FAr=o("vision-text-dual-encoder"),TAr=o(" \u2014 "),zU=a("a"),MAr=o("FlaxVisionTextDualEncoderModel"),EAr=o(" (VisionTextDualEncoder model)"),CAr=l(),uE=a("li"),i0e=a("strong"),wAr=o("vit"),AAr=o(" \u2014 "),QU=a("a"),yAr=o("FlaxViTModel"),LAr=o(" (ViT model)"),xAr=l(),_E=a("li"),d0e=a("strong"),$Ar=o("wav2vec2"),kAr=o(" \u2014 "),WU=a("a"),SAr=o("FlaxWav2Vec2Model"),RAr=o(" (Wav2Vec2 model)"),BAr=l(),bE=a("li"),c0e=a("strong"),PAr=o("xglm"),IAr=o(" \u2014 "),HU=a("a"),qAr=o("FlaxXGLMModel"),NAr=o(" (XGLM model)"),jAr=l(),vE=a("li"),f0e=a("strong"),DAr=o("xlm-roberta"),GAr=o(" \u2014 "),UU=a("a"),OAr=o("FlaxXLMRobertaModel"),VAr=o(" (XLM-RoBERTa model)"),XAr=l(),F(FE.$$.fragment),mqe=l(),xc=a("h2"),TE=a("a"),m0e=a("span"),F(Y8.$$.fragment),zAr=l(),g0e=a("span"),QAr=o("FlaxAutoModelForCausalLM"),gqe=l(),mr=a("div"),F(K8.$$.fragment),WAr=l(),$c=a("p"),HAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=a("a"),UAr=o("from_pretrained()"),JAr=o(" class method or the "),YU=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),Z8=a("p"),e6r=o("This class cannot be instantiated directly using "),h0e=a("code"),o6r=o("__init__()"),r6r=o(" (throws an error)."),t6r=l(),Dt=a("div"),F(ex.$$.fragment),a6r=l(),p0e=a("p"),n6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s6r=l(),kc=a("p"),l6r=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),i6r=o("not"),d6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),c6r=o("from_pretrained()"),f6r=o(" to load the model weights."),m6r=l(),F(ME.$$.fragment),g6r=l(),Dr=a("div"),F(ox.$$.fragment),h6r=l(),_0e=a("p"),p6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u6r=l(),hn=a("p"),_6r=o("The model class to instantiate is selected based on the "),b0e=a("code"),b6r=o("model_type"),v6r=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),F6r=o("pretrained_model_name_or_path"),T6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(":"),C6r=l(),ke=a("ul"),EE=a("li"),T0e=a("strong"),w6r=o("bart"),A6r=o(" \u2014 "),ZU=a("a"),y6r=o("FlaxBartForCausalLM"),L6r=o(" (BART model)"),x6r=l(),CE=a("li"),M0e=a("strong"),$6r=o("bert"),k6r=o(" \u2014 "),eJ=a("a"),S6r=o("FlaxBertForCausalLM"),R6r=o(" (BERT model)"),B6r=l(),wE=a("li"),E0e=a("strong"),P6r=o("big_bird"),I6r=o(" \u2014 "),oJ=a("a"),q6r=o("FlaxBigBirdForCausalLM"),N6r=o(" (BigBird model)"),j6r=l(),AE=a("li"),C0e=a("strong"),D6r=o("electra"),G6r=o(" \u2014 "),rJ=a("a"),O6r=o("FlaxElectraForCausalLM"),V6r=o(" (ELECTRA model)"),X6r=l(),yE=a("li"),w0e=a("strong"),z6r=o("gpt2"),Q6r=o(" \u2014 "),tJ=a("a"),W6r=o("FlaxGPT2LMHeadModel"),H6r=o(" (OpenAI GPT-2 model)"),U6r=l(),LE=a("li"),A0e=a("strong"),J6r=o("gpt_neo"),Y6r=o(" \u2014 "),aJ=a("a"),K6r=o("FlaxGPTNeoForCausalLM"),Z6r=o(" (GPT Neo model)"),eyr=l(),xE=a("li"),y0e=a("strong"),oyr=o("gptj"),ryr=o(" \u2014 "),nJ=a("a"),tyr=o("FlaxGPTJForCausalLM"),ayr=o(" (GPT-J model)"),nyr=l(),$E=a("li"),L0e=a("strong"),syr=o("roberta"),lyr=o(" \u2014 "),sJ=a("a"),iyr=o("FlaxRobertaForCausalLM"),dyr=o(" (RoBERTa model)"),cyr=l(),kE=a("li"),x0e=a("strong"),fyr=o("xglm"),myr=o(" \u2014 "),lJ=a("a"),gyr=o("FlaxXGLMForCausalLM"),hyr=o(" (XGLM model)"),pyr=l(),F(SE.$$.fragment),hqe=l(),Sc=a("h2"),RE=a("a"),$0e=a("span"),F(rx.$$.fragment),uyr=l(),k0e=a("span"),_yr=o("FlaxAutoModelForPreTraining"),pqe=l(),gr=a("div"),F(tx.$$.fragment),byr=l(),Rc=a("p"),vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iJ=a("a"),Fyr=o("from_pretrained()"),Tyr=o(" class method or the "),dJ=a("a"),Myr=o("from_config()"),Eyr=o(` class
method.`),Cyr=l(),ax=a("p"),wyr=o("This class cannot be instantiated directly using "),S0e=a("code"),Ayr=o("__init__()"),yyr=o(" (throws an error)."),Lyr=l(),Gt=a("div"),F(nx.$$.fragment),xyr=l(),R0e=a("p"),$yr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kyr=l(),Bc=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),B0e=a("strong"),Ryr=o("not"),Byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),Pyr=o("from_pretrained()"),Iyr=o(" to load the model weights."),qyr=l(),F(BE.$$.fragment),Nyr=l(),Gr=a("div"),F(sx.$$.fragment),jyr=l(),P0e=a("p"),Dyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gyr=l(),pn=a("p"),Oyr=o("The model class to instantiate is selected based on the "),I0e=a("code"),Vyr=o("model_type"),Xyr=o(` property of the config object (either
passed as an argument or loaded from `),q0e=a("code"),zyr=o("pretrained_model_name_or_path"),Qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),Wyr=o("pretrained_model_name_or_path"),Hyr=o(":"),Uyr=l(),Me=a("ul"),PE=a("li"),j0e=a("strong"),Jyr=o("albert"),Yyr=o(" \u2014 "),fJ=a("a"),Kyr=o("FlaxAlbertForPreTraining"),Zyr=o(" (ALBERT model)"),eLr=l(),IE=a("li"),D0e=a("strong"),oLr=o("bart"),rLr=o(" \u2014 "),mJ=a("a"),tLr=o("FlaxBartForConditionalGeneration"),aLr=o(" (BART model)"),nLr=l(),qE=a("li"),G0e=a("strong"),sLr=o("bert"),lLr=o(" \u2014 "),gJ=a("a"),iLr=o("FlaxBertForPreTraining"),dLr=o(" (BERT model)"),cLr=l(),NE=a("li"),O0e=a("strong"),fLr=o("big_bird"),mLr=o(" \u2014 "),hJ=a("a"),gLr=o("FlaxBigBirdForPreTraining"),hLr=o(" (BigBird model)"),pLr=l(),jE=a("li"),V0e=a("strong"),uLr=o("electra"),_Lr=o(" \u2014 "),pJ=a("a"),bLr=o("FlaxElectraForPreTraining"),vLr=o(" (ELECTRA model)"),FLr=l(),DE=a("li"),X0e=a("strong"),TLr=o("mbart"),MLr=o(" \u2014 "),uJ=a("a"),ELr=o("FlaxMBartForConditionalGeneration"),CLr=o(" (mBART model)"),wLr=l(),GE=a("li"),z0e=a("strong"),ALr=o("mt5"),yLr=o(" \u2014 "),_J=a("a"),LLr=o("FlaxMT5ForConditionalGeneration"),xLr=o(" (mT5 model)"),$Lr=l(),OE=a("li"),Q0e=a("strong"),kLr=o("roberta"),SLr=o(" \u2014 "),bJ=a("a"),RLr=o("FlaxRobertaForMaskedLM"),BLr=o(" (RoBERTa model)"),PLr=l(),VE=a("li"),W0e=a("strong"),ILr=o("roformer"),qLr=o(" \u2014 "),vJ=a("a"),NLr=o("FlaxRoFormerForMaskedLM"),jLr=o(" (RoFormer model)"),DLr=l(),XE=a("li"),H0e=a("strong"),GLr=o("t5"),OLr=o(" \u2014 "),FJ=a("a"),VLr=o("FlaxT5ForConditionalGeneration"),XLr=o(" (T5 model)"),zLr=l(),zE=a("li"),U0e=a("strong"),QLr=o("wav2vec2"),WLr=o(" \u2014 "),TJ=a("a"),HLr=o("FlaxWav2Vec2ForPreTraining"),ULr=o(" (Wav2Vec2 model)"),JLr=l(),QE=a("li"),J0e=a("strong"),YLr=o("xlm-roberta"),KLr=o(" \u2014 "),MJ=a("a"),ZLr=o("FlaxXLMRobertaForMaskedLM"),e8r=o(" (XLM-RoBERTa model)"),o8r=l(),F(WE.$$.fragment),uqe=l(),Pc=a("h2"),HE=a("a"),Y0e=a("span"),F(lx.$$.fragment),r8r=l(),K0e=a("span"),t8r=o("FlaxAutoModelForMaskedLM"),_qe=l(),hr=a("div"),F(ix.$$.fragment),a8r=l(),Ic=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EJ=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),CJ=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),dx=a("p"),f8r=o("This class cannot be instantiated directly using "),Z0e=a("code"),m8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),Ot=a("div"),F(cx.$$.fragment),p8r=l(),eTe=a("p"),u8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_8r=l(),qc=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),v8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),F(UE.$$.fragment),C8r=l(),Or=a("div"),F(fx.$$.fragment),w8r=l(),rTe=a("p"),A8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y8r=l(),un=a("p"),L8r=o("The model class to instantiate is selected based on the "),tTe=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),R8r=o("pretrained_model_name_or_path"),B8r=o(":"),P8r=l(),Le=a("ul"),JE=a("li"),sTe=a("strong"),I8r=o("albert"),q8r=o(" \u2014 "),AJ=a("a"),N8r=o("FlaxAlbertForMaskedLM"),j8r=o(" (ALBERT model)"),D8r=l(),YE=a("li"),lTe=a("strong"),G8r=o("bart"),O8r=o(" \u2014 "),yJ=a("a"),V8r=o("FlaxBartForConditionalGeneration"),X8r=o(" (BART model)"),z8r=l(),KE=a("li"),iTe=a("strong"),Q8r=o("bert"),W8r=o(" \u2014 "),LJ=a("a"),H8r=o("FlaxBertForMaskedLM"),U8r=o(" (BERT model)"),J8r=l(),ZE=a("li"),dTe=a("strong"),Y8r=o("big_bird"),K8r=o(" \u2014 "),xJ=a("a"),Z8r=o("FlaxBigBirdForMaskedLM"),exr=o(" (BigBird model)"),oxr=l(),eC=a("li"),cTe=a("strong"),rxr=o("distilbert"),txr=o(" \u2014 "),$J=a("a"),axr=o("FlaxDistilBertForMaskedLM"),nxr=o(" (DistilBERT model)"),sxr=l(),oC=a("li"),fTe=a("strong"),lxr=o("electra"),ixr=o(" \u2014 "),kJ=a("a"),dxr=o("FlaxElectraForMaskedLM"),cxr=o(" (ELECTRA model)"),fxr=l(),rC=a("li"),mTe=a("strong"),mxr=o("mbart"),gxr=o(" \u2014 "),SJ=a("a"),hxr=o("FlaxMBartForConditionalGeneration"),pxr=o(" (mBART model)"),uxr=l(),tC=a("li"),gTe=a("strong"),_xr=o("roberta"),bxr=o(" \u2014 "),RJ=a("a"),vxr=o("FlaxRobertaForMaskedLM"),Fxr=o(" (RoBERTa model)"),Txr=l(),aC=a("li"),hTe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),BJ=a("a"),Cxr=o("FlaxRoFormerForMaskedLM"),wxr=o(" (RoFormer model)"),Axr=l(),nC=a("li"),pTe=a("strong"),yxr=o("xlm-roberta"),Lxr=o(" \u2014 "),PJ=a("a"),xxr=o("FlaxXLMRobertaForMaskedLM"),$xr=o(" (XLM-RoBERTa model)"),kxr=l(),F(sC.$$.fragment),bqe=l(),Nc=a("h2"),lC=a("a"),uTe=a("span"),F(mx.$$.fragment),Sxr=l(),_Te=a("span"),Rxr=o("FlaxAutoModelForSeq2SeqLM"),vqe=l(),pr=a("div"),F(gx.$$.fragment),Bxr=l(),jc=a("p"),Pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IJ=a("a"),Ixr=o("from_pretrained()"),qxr=o(" class method or the "),qJ=a("a"),Nxr=o("from_config()"),jxr=o(` class
method.`),Dxr=l(),hx=a("p"),Gxr=o("This class cannot be instantiated directly using "),bTe=a("code"),Oxr=o("__init__()"),Vxr=o(" (throws an error)."),Xxr=l(),Vt=a("div"),F(px.$$.fragment),zxr=l(),vTe=a("p"),Qxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wxr=l(),Dc=a("p"),Hxr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),Uxr=o("not"),Jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),Yxr=o("from_pretrained()"),Kxr=o(" to load the model weights."),Zxr=l(),F(iC.$$.fragment),e9r=l(),Vr=a("div"),F(ux.$$.fragment),o9r=l(),TTe=a("p"),r9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t9r=l(),_n=a("p"),a9r=o("The model class to instantiate is selected based on the "),MTe=a("code"),n9r=o("model_type"),s9r=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(":"),f9r=l(),Se=a("ul"),dC=a("li"),wTe=a("strong"),m9r=o("bart"),g9r=o(" \u2014 "),jJ=a("a"),h9r=o("FlaxBartForConditionalGeneration"),p9r=o(" (BART model)"),u9r=l(),cC=a("li"),ATe=a("strong"),_9r=o("blenderbot"),b9r=o(" \u2014 "),DJ=a("a"),v9r=o("FlaxBlenderbotForConditionalGeneration"),F9r=o(" (Blenderbot model)"),T9r=l(),fC=a("li"),yTe=a("strong"),M9r=o("blenderbot-small"),E9r=o(" \u2014 "),GJ=a("a"),C9r=o("FlaxBlenderbotSmallForConditionalGeneration"),w9r=o(" (BlenderbotSmall model)"),A9r=l(),mC=a("li"),LTe=a("strong"),y9r=o("encoder-decoder"),L9r=o(" \u2014 "),OJ=a("a"),x9r=o("FlaxEncoderDecoderModel"),$9r=o(" (Encoder decoder model)"),k9r=l(),gC=a("li"),xTe=a("strong"),S9r=o("marian"),R9r=o(" \u2014 "),VJ=a("a"),B9r=o("FlaxMarianMTModel"),P9r=o(" (Marian model)"),I9r=l(),hC=a("li"),$Te=a("strong"),q9r=o("mbart"),N9r=o(" \u2014 "),XJ=a("a"),j9r=o("FlaxMBartForConditionalGeneration"),D9r=o(" (mBART model)"),G9r=l(),pC=a("li"),kTe=a("strong"),O9r=o("mt5"),V9r=o(" \u2014 "),zJ=a("a"),X9r=o("FlaxMT5ForConditionalGeneration"),z9r=o(" (mT5 model)"),Q9r=l(),uC=a("li"),STe=a("strong"),W9r=o("pegasus"),H9r=o(" \u2014 "),QJ=a("a"),U9r=o("FlaxPegasusForConditionalGeneration"),J9r=o(" (Pegasus model)"),Y9r=l(),_C=a("li"),RTe=a("strong"),K9r=o("t5"),Z9r=o(" \u2014 "),WJ=a("a"),e$r=o("FlaxT5ForConditionalGeneration"),o$r=o(" (T5 model)"),r$r=l(),F(bC.$$.fragment),Fqe=l(),Gc=a("h2"),vC=a("a"),BTe=a("span"),F(_x.$$.fragment),t$r=l(),PTe=a("span"),a$r=o("FlaxAutoModelForSequenceClassification"),Tqe=l(),ur=a("div"),F(bx.$$.fragment),n$r=l(),Oc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HJ=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),UJ=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),f$r=l(),vx=a("p"),m$r=o("This class cannot be instantiated directly using "),ITe=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),p$r=l(),Xt=a("div"),F(Fx.$$.fragment),u$r=l(),qTe=a("p"),_$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b$r=l(),Vc=a("p"),v$r=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),F$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),F(FC.$$.fragment),w$r=l(),Xr=a("div"),F(Tx.$$.fragment),A$r=l(),jTe=a("p"),y$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L$r=l(),bn=a("p"),x$r=o("The model class to instantiate is selected based on the "),DTe=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),B$r=o("pretrained_model_name_or_path"),P$r=o(":"),I$r=l(),xe=a("ul"),TC=a("li"),VTe=a("strong"),q$r=o("albert"),N$r=o(" \u2014 "),YJ=a("a"),j$r=o("FlaxAlbertForSequenceClassification"),D$r=o(" (ALBERT model)"),G$r=l(),MC=a("li"),XTe=a("strong"),O$r=o("bart"),V$r=o(" \u2014 "),KJ=a("a"),X$r=o("FlaxBartForSequenceClassification"),z$r=o(" (BART model)"),Q$r=l(),EC=a("li"),zTe=a("strong"),W$r=o("bert"),H$r=o(" \u2014 "),ZJ=a("a"),U$r=o("FlaxBertForSequenceClassification"),J$r=o(" (BERT model)"),Y$r=l(),CC=a("li"),QTe=a("strong"),K$r=o("big_bird"),Z$r=o(" \u2014 "),eY=a("a"),ekr=o("FlaxBigBirdForSequenceClassification"),okr=o(" (BigBird model)"),rkr=l(),wC=a("li"),WTe=a("strong"),tkr=o("distilbert"),akr=o(" \u2014 "),oY=a("a"),nkr=o("FlaxDistilBertForSequenceClassification"),skr=o(" (DistilBERT model)"),lkr=l(),AC=a("li"),HTe=a("strong"),ikr=o("electra"),dkr=o(" \u2014 "),rY=a("a"),ckr=o("FlaxElectraForSequenceClassification"),fkr=o(" (ELECTRA model)"),mkr=l(),yC=a("li"),UTe=a("strong"),gkr=o("mbart"),hkr=o(" \u2014 "),tY=a("a"),pkr=o("FlaxMBartForSequenceClassification"),ukr=o(" (mBART model)"),_kr=l(),LC=a("li"),JTe=a("strong"),bkr=o("roberta"),vkr=o(" \u2014 "),aY=a("a"),Fkr=o("FlaxRobertaForSequenceClassification"),Tkr=o(" (RoBERTa model)"),Mkr=l(),xC=a("li"),YTe=a("strong"),Ekr=o("roformer"),Ckr=o(" \u2014 "),nY=a("a"),wkr=o("FlaxRoFormerForSequenceClassification"),Akr=o(" (RoFormer model)"),ykr=l(),$C=a("li"),KTe=a("strong"),Lkr=o("xlm-roberta"),xkr=o(" \u2014 "),sY=a("a"),$kr=o("FlaxXLMRobertaForSequenceClassification"),kkr=o(" (XLM-RoBERTa model)"),Skr=l(),F(kC.$$.fragment),Mqe=l(),Xc=a("h2"),SC=a("a"),ZTe=a("span"),F(Mx.$$.fragment),Rkr=l(),e7e=a("span"),Bkr=o("FlaxAutoModelForQuestionAnswering"),Eqe=l(),_r=a("div"),F(Ex.$$.fragment),Pkr=l(),zc=a("p"),Ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lY=a("a"),qkr=o("from_pretrained()"),Nkr=o(" class method or the "),iY=a("a"),jkr=o("from_config()"),Dkr=o(` class
method.`),Gkr=l(),Cx=a("p"),Okr=o("This class cannot be instantiated directly using "),o7e=a("code"),Vkr=o("__init__()"),Xkr=o(" (throws an error)."),zkr=l(),zt=a("div"),F(wx.$$.fragment),Qkr=l(),r7e=a("p"),Wkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Hkr=l(),Qc=a("p"),Ukr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),Jkr=o("not"),Ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" to load the model weights."),eSr=l(),F(RC.$$.fragment),oSr=l(),zr=a("div"),F(Ax.$$.fragment),rSr=l(),a7e=a("p"),tSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aSr=l(),vn=a("p"),nSr=o("The model class to instantiate is selected based on the "),n7e=a("code"),sSr=o("model_type"),lSr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),cSr=o("pretrained_model_name_or_path"),fSr=o(":"),mSr=l(),$e=a("ul"),BC=a("li"),i7e=a("strong"),gSr=o("albert"),hSr=o(" \u2014 "),cY=a("a"),pSr=o("FlaxAlbertForQuestionAnswering"),uSr=o(" (ALBERT model)"),_Sr=l(),PC=a("li"),d7e=a("strong"),bSr=o("bart"),vSr=o(" \u2014 "),fY=a("a"),FSr=o("FlaxBartForQuestionAnswering"),TSr=o(" (BART model)"),MSr=l(),IC=a("li"),c7e=a("strong"),ESr=o("bert"),CSr=o(" \u2014 "),mY=a("a"),wSr=o("FlaxBertForQuestionAnswering"),ASr=o(" (BERT model)"),ySr=l(),qC=a("li"),f7e=a("strong"),LSr=o("big_bird"),xSr=o(" \u2014 "),gY=a("a"),$Sr=o("FlaxBigBirdForQuestionAnswering"),kSr=o(" (BigBird model)"),SSr=l(),NC=a("li"),m7e=a("strong"),RSr=o("distilbert"),BSr=o(" \u2014 "),hY=a("a"),PSr=o("FlaxDistilBertForQuestionAnswering"),ISr=o(" (DistilBERT model)"),qSr=l(),jC=a("li"),g7e=a("strong"),NSr=o("electra"),jSr=o(" \u2014 "),pY=a("a"),DSr=o("FlaxElectraForQuestionAnswering"),GSr=o(" (ELECTRA model)"),OSr=l(),DC=a("li"),h7e=a("strong"),VSr=o("mbart"),XSr=o(" \u2014 "),uY=a("a"),zSr=o("FlaxMBartForQuestionAnswering"),QSr=o(" (mBART model)"),WSr=l(),GC=a("li"),p7e=a("strong"),HSr=o("roberta"),USr=o(" \u2014 "),_Y=a("a"),JSr=o("FlaxRobertaForQuestionAnswering"),YSr=o(" (RoBERTa model)"),KSr=l(),OC=a("li"),u7e=a("strong"),ZSr=o("roformer"),eRr=o(" \u2014 "),bY=a("a"),oRr=o("FlaxRoFormerForQuestionAnswering"),rRr=o(" (RoFormer model)"),tRr=l(),VC=a("li"),_7e=a("strong"),aRr=o("xlm-roberta"),nRr=o(" \u2014 "),vY=a("a"),sRr=o("FlaxXLMRobertaForQuestionAnswering"),lRr=o(" (XLM-RoBERTa model)"),iRr=l(),F(XC.$$.fragment),Cqe=l(),Wc=a("h2"),zC=a("a"),b7e=a("span"),F(yx.$$.fragment),dRr=l(),v7e=a("span"),cRr=o("FlaxAutoModelForTokenClassification"),wqe=l(),br=a("div"),F(Lx.$$.fragment),fRr=l(),Hc=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FY=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),TY=a("a"),pRr=o("from_config()"),uRr=o(` class
method.`),_Rr=l(),xx=a("p"),bRr=o("This class cannot be instantiated directly using "),F7e=a("code"),vRr=o("__init__()"),FRr=o(" (throws an error)."),TRr=l(),Qt=a("div"),F($x.$$.fragment),MRr=l(),T7e=a("p"),ERr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CRr=l(),Uc=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),$Rr=l(),F(QC.$$.fragment),kRr=l(),Qr=a("div"),F(kx.$$.fragment),SRr=l(),E7e=a("p"),RRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BRr=l(),Fn=a("p"),PRr=o("The model class to instantiate is selected based on the "),C7e=a("code"),IRr=o("model_type"),qRr=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),NRr=o("pretrained_model_name_or_path"),jRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(":"),ORr=l(),De=a("ul"),WC=a("li"),y7e=a("strong"),VRr=o("albert"),XRr=o(" \u2014 "),EY=a("a"),zRr=o("FlaxAlbertForTokenClassification"),QRr=o(" (ALBERT model)"),WRr=l(),HC=a("li"),L7e=a("strong"),HRr=o("bert"),URr=o(" \u2014 "),CY=a("a"),JRr=o("FlaxBertForTokenClassification"),YRr=o(" (BERT model)"),KRr=l(),UC=a("li"),x7e=a("strong"),ZRr=o("big_bird"),eBr=o(" \u2014 "),wY=a("a"),oBr=o("FlaxBigBirdForTokenClassification"),rBr=o(" (BigBird model)"),tBr=l(),JC=a("li"),$7e=a("strong"),aBr=o("distilbert"),nBr=o(" \u2014 "),AY=a("a"),sBr=o("FlaxDistilBertForTokenClassification"),lBr=o(" (DistilBERT model)"),iBr=l(),YC=a("li"),k7e=a("strong"),dBr=o("electra"),cBr=o(" \u2014 "),yY=a("a"),fBr=o("FlaxElectraForTokenClassification"),mBr=o(" (ELECTRA model)"),gBr=l(),KC=a("li"),S7e=a("strong"),hBr=o("roberta"),pBr=o(" \u2014 "),LY=a("a"),uBr=o("FlaxRobertaForTokenClassification"),_Br=o(" (RoBERTa model)"),bBr=l(),ZC=a("li"),R7e=a("strong"),vBr=o("roformer"),FBr=o(" \u2014 "),xY=a("a"),TBr=o("FlaxRoFormerForTokenClassification"),MBr=o(" (RoFormer model)"),EBr=l(),e3=a("li"),B7e=a("strong"),CBr=o("xlm-roberta"),wBr=o(" \u2014 "),$Y=a("a"),ABr=o("FlaxXLMRobertaForTokenClassification"),yBr=o(" (XLM-RoBERTa model)"),LBr=l(),F(o3.$$.fragment),Aqe=l(),Jc=a("h2"),r3=a("a"),P7e=a("span"),F(Sx.$$.fragment),xBr=l(),I7e=a("span"),$Br=o("FlaxAutoModelForMultipleChoice"),yqe=l(),vr=a("div"),F(Rx.$$.fragment),kBr=l(),Yc=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=a("a"),RBr=o("from_pretrained()"),BBr=o(" class method or the "),SY=a("a"),PBr=o("from_config()"),IBr=o(` class
method.`),qBr=l(),Bx=a("p"),NBr=o("This class cannot be instantiated directly using "),q7e=a("code"),jBr=o("__init__()"),DBr=o(" (throws an error)."),GBr=l(),Wt=a("div"),F(Px.$$.fragment),OBr=l(),N7e=a("p"),VBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XBr=l(),Kc=a("p"),zBr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),QBr=o("not"),WBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),HBr=o("from_pretrained()"),UBr=o(" to load the model weights."),JBr=l(),F(t3.$$.fragment),YBr=l(),Wr=a("div"),F(Ix.$$.fragment),KBr=l(),D7e=a("p"),ZBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ePr=l(),Tn=a("p"),oPr=o("The model class to instantiate is selected based on the "),G7e=a("code"),rPr=o("model_type"),tPr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),sPr=o("pretrained_model_name_or_path"),lPr=o(":"),iPr=l(),Ge=a("ul"),a3=a("li"),X7e=a("strong"),dPr=o("albert"),cPr=o(" \u2014 "),BY=a("a"),fPr=o("FlaxAlbertForMultipleChoice"),mPr=o(" (ALBERT model)"),gPr=l(),n3=a("li"),z7e=a("strong"),hPr=o("bert"),pPr=o(" \u2014 "),PY=a("a"),uPr=o("FlaxBertForMultipleChoice"),_Pr=o(" (BERT model)"),bPr=l(),s3=a("li"),Q7e=a("strong"),vPr=o("big_bird"),FPr=o(" \u2014 "),IY=a("a"),TPr=o("FlaxBigBirdForMultipleChoice"),MPr=o(" (BigBird model)"),EPr=l(),l3=a("li"),W7e=a("strong"),CPr=o("distilbert"),wPr=o(" \u2014 "),qY=a("a"),APr=o("FlaxDistilBertForMultipleChoice"),yPr=o(" (DistilBERT model)"),LPr=l(),i3=a("li"),H7e=a("strong"),xPr=o("electra"),$Pr=o(" \u2014 "),NY=a("a"),kPr=o("FlaxElectraForMultipleChoice"),SPr=o(" (ELECTRA model)"),RPr=l(),d3=a("li"),U7e=a("strong"),BPr=o("roberta"),PPr=o(" \u2014 "),jY=a("a"),IPr=o("FlaxRobertaForMultipleChoice"),qPr=o(" (RoBERTa model)"),NPr=l(),c3=a("li"),J7e=a("strong"),jPr=o("roformer"),DPr=o(" \u2014 "),DY=a("a"),GPr=o("FlaxRoFormerForMultipleChoice"),OPr=o(" (RoFormer model)"),VPr=l(),f3=a("li"),Y7e=a("strong"),XPr=o("xlm-roberta"),zPr=o(" \u2014 "),GY=a("a"),QPr=o("FlaxXLMRobertaForMultipleChoice"),WPr=o(" (XLM-RoBERTa model)"),HPr=l(),F(m3.$$.fragment),Lqe=l(),Zc=a("h2"),g3=a("a"),K7e=a("span"),F(qx.$$.fragment),UPr=l(),Z7e=a("span"),JPr=o("FlaxAutoModelForNextSentencePrediction"),xqe=l(),Fr=a("div"),F(Nx.$$.fragment),YPr=l(),ef=a("p"),KPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" class method or the "),VY=a("a"),oIr=o("from_config()"),rIr=o(` class
method.`),tIr=l(),jx=a("p"),aIr=o("This class cannot be instantiated directly using "),eMe=a("code"),nIr=o("__init__()"),sIr=o(" (throws an error)."),lIr=l(),Ht=a("div"),F(Dx.$$.fragment),iIr=l(),oMe=a("p"),dIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cIr=l(),of=a("p"),fIr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),mIr=o("not"),gIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),hIr=o("from_pretrained()"),pIr=o(" to load the model weights."),uIr=l(),F(h3.$$.fragment),_Ir=l(),Hr=a("div"),F(Gx.$$.fragment),bIr=l(),tMe=a("p"),vIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FIr=l(),Mn=a("p"),TIr=o("The model class to instantiate is selected based on the "),aMe=a("code"),MIr=o("model_type"),EIr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),CIr=o("pretrained_model_name_or_path"),wIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),AIr=o("pretrained_model_name_or_path"),yIr=o(":"),LIr=l(),lMe=a("ul"),p3=a("li"),iMe=a("strong"),xIr=o("bert"),$Ir=o(" \u2014 "),zY=a("a"),kIr=o("FlaxBertForNextSentencePrediction"),SIr=o(" (BERT model)"),RIr=l(),F(u3.$$.fragment),$qe=l(),rf=a("h2"),_3=a("a"),dMe=a("span"),F(Ox.$$.fragment),BIr=l(),cMe=a("span"),PIr=o("FlaxAutoModelForImageClassification"),kqe=l(),Tr=a("div"),F(Vx.$$.fragment),IIr=l(),tf=a("p"),qIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QY=a("a"),NIr=o("from_pretrained()"),jIr=o(" class method or the "),WY=a("a"),DIr=o("from_config()"),GIr=o(` class
method.`),OIr=l(),Xx=a("p"),VIr=o("This class cannot be instantiated directly using "),fMe=a("code"),XIr=o("__init__()"),zIr=o(" (throws an error)."),QIr=l(),Ut=a("div"),F(zx.$$.fragment),WIr=l(),mMe=a("p"),HIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UIr=l(),af=a("p"),JIr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),YIr=o("not"),KIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),ZIr=o("from_pretrained()"),eqr=o(" to load the model weights."),oqr=l(),F(b3.$$.fragment),rqr=l(),Ur=a("div"),F(Qx.$$.fragment),tqr=l(),hMe=a("p"),aqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nqr=l(),En=a("p"),sqr=o("The model class to instantiate is selected based on the "),pMe=a("code"),lqr=o("model_type"),iqr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),dqr=o("pretrained_model_name_or_path"),cqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),fqr=o("pretrained_model_name_or_path"),mqr=o(":"),gqr=l(),Wx=a("ul"),v3=a("li"),bMe=a("strong"),hqr=o("beit"),pqr=o(" \u2014 "),UY=a("a"),uqr=o("FlaxBeitForImageClassification"),_qr=o(" (BEiT model)"),bqr=l(),F3=a("li"),vMe=a("strong"),vqr=o("vit"),Fqr=o(" \u2014 "),JY=a("a"),Tqr=o("FlaxViTForImageClassification"),Mqr=o(" (ViT model)"),Eqr=l(),F(T3.$$.fragment),Sqe=l(),nf=a("h2"),M3=a("a"),FMe=a("span"),F(Hx.$$.fragment),Cqr=l(),TMe=a("span"),wqr=o("FlaxAutoModelForVision2Seq"),Rqe=l(),Mr=a("div"),F(Ux.$$.fragment),Aqr=l(),sf=a("p"),yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YY=a("a"),Lqr=o("from_pretrained()"),xqr=o(" class method or the "),KY=a("a"),$qr=o("from_config()"),kqr=o(` class
method.`),Sqr=l(),Jx=a("p"),Rqr=o("This class cannot be instantiated directly using "),MMe=a("code"),Bqr=o("__init__()"),Pqr=o(" (throws an error)."),Iqr=l(),Jt=a("div"),F(Yx.$$.fragment),qqr=l(),EMe=a("p"),Nqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jqr=l(),lf=a("p"),Dqr=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),Gqr=o("not"),Oqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" to load the model weights."),zqr=l(),F(E3.$$.fragment),Qqr=l(),Jr=a("div"),F(Kx.$$.fragment),Wqr=l(),wMe=a("p"),Hqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uqr=l(),Cn=a("p"),Jqr=o("The model class to instantiate is selected based on the "),AMe=a("code"),Yqr=o("model_type"),Kqr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),Zqr=o("pretrained_model_name_or_path"),eNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),oNr=o("pretrained_model_name_or_path"),rNr=o(":"),tNr=l(),xMe=a("ul"),C3=a("li"),$Me=a("strong"),aNr=o("vision-encoder-decoder"),nNr=o(" \u2014 "),eK=a("a"),sNr=o("FlaxVisionEncoderDecoderModel"),lNr=o(" (Vision Encoder decoder model)"),iNr=l(),F(w3.$$.fragment),this.h()},l(f){const _=kAt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Zx=s(p);m=n(Zx,"A",{id:!0,class:!0,href:!0});var kMe=s(m);u=n(kMe,"SPAN",{});var SMe=s(u);T(d.$$.fragment,SMe),SMe.forEach(t),kMe.forEach(t),h=i(Zx),Mo=n(Zx,"SPAN",{});var RMe=s(Mo);li=r(RMe,"Auto Classes"),RMe.forEach(t),Zx.forEach(t),mf=i(f),et=n(f,"P",{});var e9=s(et);ii=r(e9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(e9,"CODE",{});var BMe=s(di);XA=r(BMe,"from_pretrained()"),BMe.forEach(t),gf=r(e9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),e9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var PMe=s(An);zA=r(PMe,"AutoConfig"),PMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var IMe=s(Ln);QA=r(IMe,"AutoModel"),IMe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var qMe=s(xn);WA=r(qMe,"AutoTokenizer"),qMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var o9=s(Ae);f$=r(o9,"will create a model that is an instance of "),gi=n(o9,"A",{href:!0});var NMe=s(gi);m$=r(NMe,"BertModel"),NMe.forEach(t),g$=r(o9,"."),o9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var r9=s(Ea);h$=r(r9,"There is one class of "),pf=n(r9,"CODE",{});var jMe=s(pf);p$=r(jMe,"AutoModel"),jMe.forEach(t),Oje=r(r9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),r9.forEach(t),kPe=i(f),hi=n(f,"H2",{class:!0});var t9=s(hi);uf=n(t9,"A",{id:!0,class:!0,href:!0});var DMe=s(uf);HZ=n(DMe,"SPAN",{});var GMe=s(HZ);T(HA.$$.fragment,GMe),GMe.forEach(t),DMe.forEach(t),Vje=i(t9),UZ=n(t9,"SPAN",{});var OMe=s(UZ);Xje=r(OMe,"Extending the Auto Classes"),OMe.forEach(t),t9.forEach(t),SPe=i(f),$n=n(f,"P",{});var df=s($n);zje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),JZ=n(df,"CODE",{});var VMe=s(JZ);Qje=r(VMe,"NewModel"),VMe.forEach(t),Wje=r(df,", make sure you have a "),YZ=n(df,"CODE",{});var XMe=s(YZ);Hje=r(XMe,"NewModelConfig"),XMe.forEach(t),Uje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),RPe=i(f),T(UA.$$.fragment,f),BPe=i(f),u$=n(f,"P",{});var zMe=s(u$);Jje=r(zMe,"You will then be able to use the auto classes like you would usually do!"),zMe.forEach(t),PPe=i(f),T(_f.$$.fragment,f),IPe=i(f),pi=n(f,"H2",{class:!0});var a9=s(pi);bf=n(a9,"A",{id:!0,class:!0,href:!0});var QMe=s(bf);KZ=n(QMe,"SPAN",{});var WMe=s(KZ);T(JA.$$.fragment,WMe),WMe.forEach(t),QMe.forEach(t),Yje=i(a9),ZZ=n(a9,"SPAN",{});var HMe=s(ZZ);Kje=r(HMe,"AutoConfig"),HMe.forEach(t),a9.forEach(t),qPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(YA.$$.fragment,Kr),Zje=i(Kr),KA=n(Kr,"P",{});var n9=s(KA);eDe=r(n9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_$=n(n9,"A",{href:!0});var UMe=s(_$);oDe=r(UMe,"from_pretrained()"),UMe.forEach(t),rDe=r(n9," class method."),n9.forEach(t),tDe=i(Kr),ZA=n(Kr,"P",{});var s9=s(ZA);aDe=r(s9,"This class cannot be instantiated directly using "),eee=n(s9,"CODE",{});var JMe=s(eee);nDe=r(JMe,"__init__()"),JMe.forEach(t),sDe=r(s9," (throws an error)."),s9.forEach(t),lDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(e6.$$.fragment,Zr),iDe=i(Zr),oee=n(Zr,"P",{});var YMe=s(oee);dDe=r(YMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),YMe.forEach(t),cDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);fDe=r(cf,"The configuration class to instantiate is selected based on the "),ree=n(cf,"CODE",{});var KMe=s(ree);mDe=r(KMe,"model_type"),KMe.forEach(t),gDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tee=n(cf,"CODE",{});var ZMe=s(tee);hDe=r(ZMe,"pretrained_model_name_or_path"),ZMe.forEach(t),pDe=r(cf,":"),cf.forEach(t),uDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var A3=s(vf);aee=n(A3,"STRONG",{});var e4e=s(aee);_De=r(e4e,"albert"),e4e.forEach(t),bDe=r(A3," \u2014 "),b$=n(A3,"A",{href:!0});var o4e=s(b$);vDe=r(o4e,"AlbertConfig"),o4e.forEach(t),FDe=r(A3," (ALBERT model)"),A3.forEach(t),TDe=i(L),Ff=n(L,"LI",{});var y3=s(Ff);nee=n(y3,"STRONG",{});var r4e=s(nee);MDe=r(r4e,"bart"),r4e.forEach(t),EDe=r(y3," \u2014 "),v$=n(y3,"A",{href:!0});var t4e=s(v$);CDe=r(t4e,"BartConfig"),t4e.forEach(t),wDe=r(y3," (BART model)"),y3.forEach(t),ADe=i(L),Tf=n(L,"LI",{});var L3=s(Tf);see=n(L3,"STRONG",{});var a4e=s(see);yDe=r(a4e,"beit"),a4e.forEach(t),LDe=r(L3," \u2014 "),F$=n(L3,"A",{href:!0});var n4e=s(F$);xDe=r(n4e,"BeitConfig"),n4e.forEach(t),$De=r(L3," (BEiT model)"),L3.forEach(t),kDe=i(L),Mf=n(L,"LI",{});var x3=s(Mf);lee=n(x3,"STRONG",{});var s4e=s(lee);SDe=r(s4e,"bert"),s4e.forEach(t),RDe=r(x3," \u2014 "),T$=n(x3,"A",{href:!0});var l4e=s(T$);BDe=r(l4e,"BertConfig"),l4e.forEach(t),PDe=r(x3," (BERT model)"),x3.forEach(t),IDe=i(L),Ef=n(L,"LI",{});var $3=s(Ef);iee=n($3,"STRONG",{});var i4e=s(iee);qDe=r(i4e,"bert-generation"),i4e.forEach(t),NDe=r($3," \u2014 "),M$=n($3,"A",{href:!0});var d4e=s(M$);jDe=r(d4e,"BertGenerationConfig"),d4e.forEach(t),DDe=r($3," (Bert Generation model)"),$3.forEach(t),GDe=i(L),Cf=n(L,"LI",{});var k3=s(Cf);dee=n(k3,"STRONG",{});var c4e=s(dee);ODe=r(c4e,"big_bird"),c4e.forEach(t),VDe=r(k3," \u2014 "),E$=n(k3,"A",{href:!0});var f4e=s(E$);XDe=r(f4e,"BigBirdConfig"),f4e.forEach(t),zDe=r(k3," (BigBird model)"),k3.forEach(t),QDe=i(L),wf=n(L,"LI",{});var S3=s(wf);cee=n(S3,"STRONG",{});var m4e=s(cee);WDe=r(m4e,"bigbird_pegasus"),m4e.forEach(t),HDe=r(S3," \u2014 "),C$=n(S3,"A",{href:!0});var g4e=s(C$);UDe=r(g4e,"BigBirdPegasusConfig"),g4e.forEach(t),JDe=r(S3," (BigBirdPegasus model)"),S3.forEach(t),YDe=i(L),Af=n(L,"LI",{});var R3=s(Af);fee=n(R3,"STRONG",{});var h4e=s(fee);KDe=r(h4e,"blenderbot"),h4e.forEach(t),ZDe=r(R3," \u2014 "),w$=n(R3,"A",{href:!0});var p4e=s(w$);eGe=r(p4e,"BlenderbotConfig"),p4e.forEach(t),oGe=r(R3," (Blenderbot model)"),R3.forEach(t),rGe=i(L),yf=n(L,"LI",{});var B3=s(yf);mee=n(B3,"STRONG",{});var u4e=s(mee);tGe=r(u4e,"blenderbot-small"),u4e.forEach(t),aGe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var _4e=s(A$);nGe=r(_4e,"BlenderbotSmallConfig"),_4e.forEach(t),sGe=r(B3," (BlenderbotSmall model)"),B3.forEach(t),lGe=i(L),Lf=n(L,"LI",{});var P3=s(Lf);gee=n(P3,"STRONG",{});var b4e=s(gee);iGe=r(b4e,"camembert"),b4e.forEach(t),dGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var v4e=s(y$);cGe=r(v4e,"CamembertConfig"),v4e.forEach(t),fGe=r(P3," (CamemBERT model)"),P3.forEach(t),mGe=i(L),xf=n(L,"LI",{});var I3=s(xf);hee=n(I3,"STRONG",{});var F4e=s(hee);gGe=r(F4e,"canine"),F4e.forEach(t),hGe=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var T4e=s(L$);pGe=r(T4e,"CanineConfig"),T4e.forEach(t),uGe=r(I3," (Canine model)"),I3.forEach(t),_Ge=i(L),$f=n(L,"LI",{});var q3=s($f);pee=n(q3,"STRONG",{});var M4e=s(pee);bGe=r(M4e,"clip"),M4e.forEach(t),vGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var E4e=s(x$);FGe=r(E4e,"CLIPConfig"),E4e.forEach(t),TGe=r(q3," (CLIP model)"),q3.forEach(t),MGe=i(L),kf=n(L,"LI",{});var N3=s(kf);uee=n(N3,"STRONG",{});var C4e=s(uee);EGe=r(C4e,"convbert"),C4e.forEach(t),CGe=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var w4e=s($$);wGe=r(w4e,"ConvBertConfig"),w4e.forEach(t),AGe=r(N3," (ConvBERT model)"),N3.forEach(t),yGe=i(L),Sf=n(L,"LI",{});var j3=s(Sf);_ee=n(j3,"STRONG",{});var A4e=s(_ee);LGe=r(A4e,"convnext"),A4e.forEach(t),xGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var y4e=s(k$);$Ge=r(y4e,"ConvNextConfig"),y4e.forEach(t),kGe=r(j3," (ConvNext model)"),j3.forEach(t),SGe=i(L),Rf=n(L,"LI",{});var D3=s(Rf);bee=n(D3,"STRONG",{});var L4e=s(bee);RGe=r(L4e,"ctrl"),L4e.forEach(t),BGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var x4e=s(S$);PGe=r(x4e,"CTRLConfig"),x4e.forEach(t),IGe=r(D3," (CTRL model)"),D3.forEach(t),qGe=i(L),Bf=n(L,"LI",{});var G3=s(Bf);vee=n(G3,"STRONG",{});var $4e=s(vee);NGe=r($4e,"data2vec-audio"),$4e.forEach(t),jGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var k4e=s(R$);DGe=r(k4e,"Data2VecAudioConfig"),k4e.forEach(t),GGe=r(G3," (Data2VecAudio model)"),G3.forEach(t),OGe=i(L),Pf=n(L,"LI",{});var O3=s(Pf);Fee=n(O3,"STRONG",{});var S4e=s(Fee);VGe=r(S4e,"data2vec-text"),S4e.forEach(t),XGe=r(O3," \u2014 "),B$=n(O3,"A",{href:!0});var R4e=s(B$);zGe=r(R4e,"Data2VecTextConfig"),R4e.forEach(t),QGe=r(O3," (Data2VecText model)"),O3.forEach(t),WGe=i(L),If=n(L,"LI",{});var V3=s(If);Tee=n(V3,"STRONG",{});var B4e=s(Tee);HGe=r(B4e,"data2vec-vision"),B4e.forEach(t),UGe=r(V3," \u2014 "),P$=n(V3,"A",{href:!0});var P4e=s(P$);JGe=r(P4e,"Data2VecVisionConfig"),P4e.forEach(t),YGe=r(V3," (Data2VecVision model)"),V3.forEach(t),KGe=i(L),qf=n(L,"LI",{});var X3=s(qf);Mee=n(X3,"STRONG",{});var I4e=s(Mee);ZGe=r(I4e,"deberta"),I4e.forEach(t),eOe=r(X3," \u2014 "),I$=n(X3,"A",{href:!0});var q4e=s(I$);oOe=r(q4e,"DebertaConfig"),q4e.forEach(t),rOe=r(X3," (DeBERTa model)"),X3.forEach(t),tOe=i(L),Nf=n(L,"LI",{});var z3=s(Nf);Eee=n(z3,"STRONG",{});var N4e=s(Eee);aOe=r(N4e,"deberta-v2"),N4e.forEach(t),nOe=r(z3," \u2014 "),q$=n(z3,"A",{href:!0});var j4e=s(q$);sOe=r(j4e,"DebertaV2Config"),j4e.forEach(t),lOe=r(z3," (DeBERTa-v2 model)"),z3.forEach(t),iOe=i(L),jf=n(L,"LI",{});var Q3=s(jf);Cee=n(Q3,"STRONG",{});var D4e=s(Cee);dOe=r(D4e,"decision_transformer"),D4e.forEach(t),cOe=r(Q3," \u2014 "),N$=n(Q3,"A",{href:!0});var G4e=s(N$);fOe=r(G4e,"DecisionTransformerConfig"),G4e.forEach(t),mOe=r(Q3," (Decision Transformer model)"),Q3.forEach(t),gOe=i(L),Df=n(L,"LI",{});var W3=s(Df);wee=n(W3,"STRONG",{});var O4e=s(wee);hOe=r(O4e,"deit"),O4e.forEach(t),pOe=r(W3," \u2014 "),j$=n(W3,"A",{href:!0});var V4e=s(j$);uOe=r(V4e,"DeiTConfig"),V4e.forEach(t),_Oe=r(W3," (DeiT model)"),W3.forEach(t),bOe=i(L),Gf=n(L,"LI",{});var H3=s(Gf);Aee=n(H3,"STRONG",{});var X4e=s(Aee);vOe=r(X4e,"detr"),X4e.forEach(t),FOe=r(H3," \u2014 "),D$=n(H3,"A",{href:!0});var cNr=s(D$);TOe=r(cNr,"DetrConfig"),cNr.forEach(t),MOe=r(H3," (DETR model)"),H3.forEach(t),EOe=i(L),Of=n(L,"LI",{});var z4e=s(Of);yee=n(z4e,"STRONG",{});var fNr=s(yee);COe=r(fNr,"distilbert"),fNr.forEach(t),wOe=r(z4e," \u2014 "),G$=n(z4e,"A",{href:!0});var mNr=s(G$);AOe=r(mNr,"DistilBertConfig"),mNr.forEach(t),yOe=r(z4e," (DistilBERT model)"),z4e.forEach(t),LOe=i(L),Vf=n(L,"LI",{});var Q4e=s(Vf);Lee=n(Q4e,"STRONG",{});var gNr=s(Lee);xOe=r(gNr,"dpr"),gNr.forEach(t),$Oe=r(Q4e," \u2014 "),O$=n(Q4e,"A",{href:!0});var hNr=s(O$);kOe=r(hNr,"DPRConfig"),hNr.forEach(t),SOe=r(Q4e," (DPR model)"),Q4e.forEach(t),ROe=i(L),Xf=n(L,"LI",{});var W4e=s(Xf);xee=n(W4e,"STRONG",{});var pNr=s(xee);BOe=r(pNr,"dpt"),pNr.forEach(t),POe=r(W4e," \u2014 "),V$=n(W4e,"A",{href:!0});var uNr=s(V$);IOe=r(uNr,"DPTConfig"),uNr.forEach(t),qOe=r(W4e," (DPT model)"),W4e.forEach(t),NOe=i(L),zf=n(L,"LI",{});var H4e=s(zf);$ee=n(H4e,"STRONG",{});var _Nr=s($ee);jOe=r(_Nr,"electra"),_Nr.forEach(t),DOe=r(H4e," \u2014 "),X$=n(H4e,"A",{href:!0});var bNr=s(X$);GOe=r(bNr,"ElectraConfig"),bNr.forEach(t),OOe=r(H4e," (ELECTRA model)"),H4e.forEach(t),VOe=i(L),Qf=n(L,"LI",{});var U4e=s(Qf);kee=n(U4e,"STRONG",{});var vNr=s(kee);XOe=r(vNr,"encoder-decoder"),vNr.forEach(t),zOe=r(U4e," \u2014 "),z$=n(U4e,"A",{href:!0});var FNr=s(z$);QOe=r(FNr,"EncoderDecoderConfig"),FNr.forEach(t),WOe=r(U4e," (Encoder decoder model)"),U4e.forEach(t),HOe=i(L),Wf=n(L,"LI",{});var J4e=s(Wf);See=n(J4e,"STRONG",{});var TNr=s(See);UOe=r(TNr,"flaubert"),TNr.forEach(t),JOe=r(J4e," \u2014 "),Q$=n(J4e,"A",{href:!0});var MNr=s(Q$);YOe=r(MNr,"FlaubertConfig"),MNr.forEach(t),KOe=r(J4e," (FlauBERT model)"),J4e.forEach(t),ZOe=i(L),Hf=n(L,"LI",{});var Y4e=s(Hf);Ree=n(Y4e,"STRONG",{});var ENr=s(Ree);eVe=r(ENr,"flava"),ENr.forEach(t),oVe=r(Y4e," \u2014 "),W$=n(Y4e,"A",{href:!0});var CNr=s(W$);rVe=r(CNr,"FlavaConfig"),CNr.forEach(t),tVe=r(Y4e," (Flava model)"),Y4e.forEach(t),aVe=i(L),Uf=n(L,"LI",{});var K4e=s(Uf);Bee=n(K4e,"STRONG",{});var wNr=s(Bee);nVe=r(wNr,"fnet"),wNr.forEach(t),sVe=r(K4e," \u2014 "),H$=n(K4e,"A",{href:!0});var ANr=s(H$);lVe=r(ANr,"FNetConfig"),ANr.forEach(t),iVe=r(K4e," (FNet model)"),K4e.forEach(t),dVe=i(L),Jf=n(L,"LI",{});var Z4e=s(Jf);Pee=n(Z4e,"STRONG",{});var yNr=s(Pee);cVe=r(yNr,"fsmt"),yNr.forEach(t),fVe=r(Z4e," \u2014 "),U$=n(Z4e,"A",{href:!0});var LNr=s(U$);mVe=r(LNr,"FSMTConfig"),LNr.forEach(t),gVe=r(Z4e," (FairSeq Machine-Translation model)"),Z4e.forEach(t),hVe=i(L),Yf=n(L,"LI",{});var eEe=s(Yf);Iee=n(eEe,"STRONG",{});var xNr=s(Iee);pVe=r(xNr,"funnel"),xNr.forEach(t),uVe=r(eEe," \u2014 "),J$=n(eEe,"A",{href:!0});var $Nr=s(J$);_Ve=r($Nr,"FunnelConfig"),$Nr.forEach(t),bVe=r(eEe," (Funnel Transformer model)"),eEe.forEach(t),vVe=i(L),Kf=n(L,"LI",{});var oEe=s(Kf);qee=n(oEe,"STRONG",{});var kNr=s(qee);FVe=r(kNr,"glpn"),kNr.forEach(t),TVe=r(oEe," \u2014 "),Y$=n(oEe,"A",{href:!0});var SNr=s(Y$);MVe=r(SNr,"GLPNConfig"),SNr.forEach(t),EVe=r(oEe," (GLPN model)"),oEe.forEach(t),CVe=i(L),Zf=n(L,"LI",{});var rEe=s(Zf);Nee=n(rEe,"STRONG",{});var RNr=s(Nee);wVe=r(RNr,"gpt2"),RNr.forEach(t),AVe=r(rEe," \u2014 "),K$=n(rEe,"A",{href:!0});var BNr=s(K$);yVe=r(BNr,"GPT2Config"),BNr.forEach(t),LVe=r(rEe," (OpenAI GPT-2 model)"),rEe.forEach(t),xVe=i(L),em=n(L,"LI",{});var tEe=s(em);jee=n(tEe,"STRONG",{});var PNr=s(jee);$Ve=r(PNr,"gpt_neo"),PNr.forEach(t),kVe=r(tEe," \u2014 "),Z$=n(tEe,"A",{href:!0});var INr=s(Z$);SVe=r(INr,"GPTNeoConfig"),INr.forEach(t),RVe=r(tEe," (GPT Neo model)"),tEe.forEach(t),BVe=i(L),om=n(L,"LI",{});var aEe=s(om);Dee=n(aEe,"STRONG",{});var qNr=s(Dee);PVe=r(qNr,"gptj"),qNr.forEach(t),IVe=r(aEe," \u2014 "),ek=n(aEe,"A",{href:!0});var NNr=s(ek);qVe=r(NNr,"GPTJConfig"),NNr.forEach(t),NVe=r(aEe," (GPT-J model)"),aEe.forEach(t),jVe=i(L),rm=n(L,"LI",{});var nEe=s(rm);Gee=n(nEe,"STRONG",{});var jNr=s(Gee);DVe=r(jNr,"hubert"),jNr.forEach(t),GVe=r(nEe," \u2014 "),ok=n(nEe,"A",{href:!0});var DNr=s(ok);OVe=r(DNr,"HubertConfig"),DNr.forEach(t),VVe=r(nEe," (Hubert model)"),nEe.forEach(t),XVe=i(L),tm=n(L,"LI",{});var sEe=s(tm);Oee=n(sEe,"STRONG",{});var GNr=s(Oee);zVe=r(GNr,"ibert"),GNr.forEach(t),QVe=r(sEe," \u2014 "),rk=n(sEe,"A",{href:!0});var ONr=s(rk);WVe=r(ONr,"IBertConfig"),ONr.forEach(t),HVe=r(sEe," (I-BERT model)"),sEe.forEach(t),UVe=i(L),am=n(L,"LI",{});var lEe=s(am);Vee=n(lEe,"STRONG",{});var VNr=s(Vee);JVe=r(VNr,"imagegpt"),VNr.forEach(t),YVe=r(lEe," \u2014 "),tk=n(lEe,"A",{href:!0});var XNr=s(tk);KVe=r(XNr,"ImageGPTConfig"),XNr.forEach(t),ZVe=r(lEe," (ImageGPT model)"),lEe.forEach(t),eXe=i(L),nm=n(L,"LI",{});var iEe=s(nm);Xee=n(iEe,"STRONG",{});var zNr=s(Xee);oXe=r(zNr,"layoutlm"),zNr.forEach(t),rXe=r(iEe," \u2014 "),ak=n(iEe,"A",{href:!0});var QNr=s(ak);tXe=r(QNr,"LayoutLMConfig"),QNr.forEach(t),aXe=r(iEe," (LayoutLM model)"),iEe.forEach(t),nXe=i(L),sm=n(L,"LI",{});var dEe=s(sm);zee=n(dEe,"STRONG",{});var WNr=s(zee);sXe=r(WNr,"layoutlmv2"),WNr.forEach(t),lXe=r(dEe," \u2014 "),nk=n(dEe,"A",{href:!0});var HNr=s(nk);iXe=r(HNr,"LayoutLMv2Config"),HNr.forEach(t),dXe=r(dEe," (LayoutLMv2 model)"),dEe.forEach(t),cXe=i(L),lm=n(L,"LI",{});var cEe=s(lm);Qee=n(cEe,"STRONG",{});var UNr=s(Qee);fXe=r(UNr,"led"),UNr.forEach(t),mXe=r(cEe," \u2014 "),sk=n(cEe,"A",{href:!0});var JNr=s(sk);gXe=r(JNr,"LEDConfig"),JNr.forEach(t),hXe=r(cEe," (LED model)"),cEe.forEach(t),pXe=i(L),im=n(L,"LI",{});var fEe=s(im);Wee=n(fEe,"STRONG",{});var YNr=s(Wee);uXe=r(YNr,"longformer"),YNr.forEach(t),_Xe=r(fEe," \u2014 "),lk=n(fEe,"A",{href:!0});var KNr=s(lk);bXe=r(KNr,"LongformerConfig"),KNr.forEach(t),vXe=r(fEe," (Longformer model)"),fEe.forEach(t),FXe=i(L),dm=n(L,"LI",{});var mEe=s(dm);Hee=n(mEe,"STRONG",{});var ZNr=s(Hee);TXe=r(ZNr,"luke"),ZNr.forEach(t),MXe=r(mEe," \u2014 "),ik=n(mEe,"A",{href:!0});var ejr=s(ik);EXe=r(ejr,"LukeConfig"),ejr.forEach(t),CXe=r(mEe," (LUKE model)"),mEe.forEach(t),wXe=i(L),cm=n(L,"LI",{});var gEe=s(cm);Uee=n(gEe,"STRONG",{});var ojr=s(Uee);AXe=r(ojr,"lxmert"),ojr.forEach(t),yXe=r(gEe," \u2014 "),dk=n(gEe,"A",{href:!0});var rjr=s(dk);LXe=r(rjr,"LxmertConfig"),rjr.forEach(t),xXe=r(gEe," (LXMERT model)"),gEe.forEach(t),$Xe=i(L),fm=n(L,"LI",{});var hEe=s(fm);Jee=n(hEe,"STRONG",{});var tjr=s(Jee);kXe=r(tjr,"m2m_100"),tjr.forEach(t),SXe=r(hEe," \u2014 "),ck=n(hEe,"A",{href:!0});var ajr=s(ck);RXe=r(ajr,"M2M100Config"),ajr.forEach(t),BXe=r(hEe," (M2M100 model)"),hEe.forEach(t),PXe=i(L),mm=n(L,"LI",{});var pEe=s(mm);Yee=n(pEe,"STRONG",{});var njr=s(Yee);IXe=r(njr,"marian"),njr.forEach(t),qXe=r(pEe," \u2014 "),fk=n(pEe,"A",{href:!0});var sjr=s(fk);NXe=r(sjr,"MarianConfig"),sjr.forEach(t),jXe=r(pEe," (Marian model)"),pEe.forEach(t),DXe=i(L),gm=n(L,"LI",{});var uEe=s(gm);Kee=n(uEe,"STRONG",{});var ljr=s(Kee);GXe=r(ljr,"maskformer"),ljr.forEach(t),OXe=r(uEe," \u2014 "),mk=n(uEe,"A",{href:!0});var ijr=s(mk);VXe=r(ijr,"MaskFormerConfig"),ijr.forEach(t),XXe=r(uEe," (MaskFormer model)"),uEe.forEach(t),zXe=i(L),hm=n(L,"LI",{});var _Ee=s(hm);Zee=n(_Ee,"STRONG",{});var djr=s(Zee);QXe=r(djr,"mbart"),djr.forEach(t),WXe=r(_Ee," \u2014 "),gk=n(_Ee,"A",{href:!0});var cjr=s(gk);HXe=r(cjr,"MBartConfig"),cjr.forEach(t),UXe=r(_Ee," (mBART model)"),_Ee.forEach(t),JXe=i(L),pm=n(L,"LI",{});var bEe=s(pm);eoe=n(bEe,"STRONG",{});var fjr=s(eoe);YXe=r(fjr,"megatron-bert"),fjr.forEach(t),KXe=r(bEe," \u2014 "),hk=n(bEe,"A",{href:!0});var mjr=s(hk);ZXe=r(mjr,"MegatronBertConfig"),mjr.forEach(t),eze=r(bEe," (MegatronBert model)"),bEe.forEach(t),oze=i(L),um=n(L,"LI",{});var vEe=s(um);ooe=n(vEe,"STRONG",{});var gjr=s(ooe);rze=r(gjr,"mobilebert"),gjr.forEach(t),tze=r(vEe," \u2014 "),pk=n(vEe,"A",{href:!0});var hjr=s(pk);aze=r(hjr,"MobileBertConfig"),hjr.forEach(t),nze=r(vEe," (MobileBERT model)"),vEe.forEach(t),sze=i(L),_m=n(L,"LI",{});var FEe=s(_m);roe=n(FEe,"STRONG",{});var pjr=s(roe);lze=r(pjr,"mpnet"),pjr.forEach(t),ize=r(FEe," \u2014 "),uk=n(FEe,"A",{href:!0});var ujr=s(uk);dze=r(ujr,"MPNetConfig"),ujr.forEach(t),cze=r(FEe," (MPNet model)"),FEe.forEach(t),fze=i(L),bm=n(L,"LI",{});var TEe=s(bm);toe=n(TEe,"STRONG",{});var _jr=s(toe);mze=r(_jr,"mt5"),_jr.forEach(t),gze=r(TEe," \u2014 "),_k=n(TEe,"A",{href:!0});var bjr=s(_k);hze=r(bjr,"MT5Config"),bjr.forEach(t),pze=r(TEe," (mT5 model)"),TEe.forEach(t),uze=i(L),vm=n(L,"LI",{});var MEe=s(vm);aoe=n(MEe,"STRONG",{});var vjr=s(aoe);_ze=r(vjr,"nystromformer"),vjr.forEach(t),bze=r(MEe," \u2014 "),bk=n(MEe,"A",{href:!0});var Fjr=s(bk);vze=r(Fjr,"NystromformerConfig"),Fjr.forEach(t),Fze=r(MEe," (Nystromformer model)"),MEe.forEach(t),Tze=i(L),Fm=n(L,"LI",{});var EEe=s(Fm);noe=n(EEe,"STRONG",{});var Tjr=s(noe);Mze=r(Tjr,"openai-gpt"),Tjr.forEach(t),Eze=r(EEe," \u2014 "),vk=n(EEe,"A",{href:!0});var Mjr=s(vk);Cze=r(Mjr,"OpenAIGPTConfig"),Mjr.forEach(t),wze=r(EEe," (OpenAI GPT model)"),EEe.forEach(t),Aze=i(L),Tm=n(L,"LI",{});var CEe=s(Tm);soe=n(CEe,"STRONG",{});var Ejr=s(soe);yze=r(Ejr,"opt"),Ejr.forEach(t),Lze=r(CEe," \u2014 "),Fk=n(CEe,"A",{href:!0});var Cjr=s(Fk);xze=r(Cjr,"OPTConfig"),Cjr.forEach(t),$ze=r(CEe," (OPT model)"),CEe.forEach(t),kze=i(L),Mm=n(L,"LI",{});var wEe=s(Mm);loe=n(wEe,"STRONG",{});var wjr=s(loe);Sze=r(wjr,"pegasus"),wjr.forEach(t),Rze=r(wEe," \u2014 "),Tk=n(wEe,"A",{href:!0});var Ajr=s(Tk);Bze=r(Ajr,"PegasusConfig"),Ajr.forEach(t),Pze=r(wEe," (Pegasus model)"),wEe.forEach(t),Ize=i(L),Em=n(L,"LI",{});var AEe=s(Em);ioe=n(AEe,"STRONG",{});var yjr=s(ioe);qze=r(yjr,"perceiver"),yjr.forEach(t),Nze=r(AEe," \u2014 "),Mk=n(AEe,"A",{href:!0});var Ljr=s(Mk);jze=r(Ljr,"PerceiverConfig"),Ljr.forEach(t),Dze=r(AEe," (Perceiver model)"),AEe.forEach(t),Gze=i(L),Cm=n(L,"LI",{});var yEe=s(Cm);doe=n(yEe,"STRONG",{});var xjr=s(doe);Oze=r(xjr,"plbart"),xjr.forEach(t),Vze=r(yEe," \u2014 "),Ek=n(yEe,"A",{href:!0});var $jr=s(Ek);Xze=r($jr,"PLBartConfig"),$jr.forEach(t),zze=r(yEe," (PLBart model)"),yEe.forEach(t),Qze=i(L),wm=n(L,"LI",{});var LEe=s(wm);coe=n(LEe,"STRONG",{});var kjr=s(coe);Wze=r(kjr,"poolformer"),kjr.forEach(t),Hze=r(LEe," \u2014 "),Ck=n(LEe,"A",{href:!0});var Sjr=s(Ck);Uze=r(Sjr,"PoolFormerConfig"),Sjr.forEach(t),Jze=r(LEe," (PoolFormer model)"),LEe.forEach(t),Yze=i(L),Am=n(L,"LI",{});var xEe=s(Am);foe=n(xEe,"STRONG",{});var Rjr=s(foe);Kze=r(Rjr,"prophetnet"),Rjr.forEach(t),Zze=r(xEe," \u2014 "),wk=n(xEe,"A",{href:!0});var Bjr=s(wk);eQe=r(Bjr,"ProphetNetConfig"),Bjr.forEach(t),oQe=r(xEe," (ProphetNet model)"),xEe.forEach(t),rQe=i(L),ym=n(L,"LI",{});var $Ee=s(ym);moe=n($Ee,"STRONG",{});var Pjr=s(moe);tQe=r(Pjr,"qdqbert"),Pjr.forEach(t),aQe=r($Ee," \u2014 "),Ak=n($Ee,"A",{href:!0});var Ijr=s(Ak);nQe=r(Ijr,"QDQBertConfig"),Ijr.forEach(t),sQe=r($Ee," (QDQBert model)"),$Ee.forEach(t),lQe=i(L),Lm=n(L,"LI",{});var kEe=s(Lm);goe=n(kEe,"STRONG",{});var qjr=s(goe);iQe=r(qjr,"rag"),qjr.forEach(t),dQe=r(kEe," \u2014 "),yk=n(kEe,"A",{href:!0});var Njr=s(yk);cQe=r(Njr,"RagConfig"),Njr.forEach(t),fQe=r(kEe," (RAG model)"),kEe.forEach(t),mQe=i(L),xm=n(L,"LI",{});var SEe=s(xm);hoe=n(SEe,"STRONG",{});var jjr=s(hoe);gQe=r(jjr,"realm"),jjr.forEach(t),hQe=r(SEe," \u2014 "),Lk=n(SEe,"A",{href:!0});var Djr=s(Lk);pQe=r(Djr,"RealmConfig"),Djr.forEach(t),uQe=r(SEe," (Realm model)"),SEe.forEach(t),_Qe=i(L),$m=n(L,"LI",{});var REe=s($m);poe=n(REe,"STRONG",{});var Gjr=s(poe);bQe=r(Gjr,"reformer"),Gjr.forEach(t),vQe=r(REe," \u2014 "),xk=n(REe,"A",{href:!0});var Ojr=s(xk);FQe=r(Ojr,"ReformerConfig"),Ojr.forEach(t),TQe=r(REe," (Reformer model)"),REe.forEach(t),MQe=i(L),km=n(L,"LI",{});var BEe=s(km);uoe=n(BEe,"STRONG",{});var Vjr=s(uoe);EQe=r(Vjr,"regnet"),Vjr.forEach(t),CQe=r(BEe," \u2014 "),$k=n(BEe,"A",{href:!0});var Xjr=s($k);wQe=r(Xjr,"RegNetConfig"),Xjr.forEach(t),AQe=r(BEe," (RegNet model)"),BEe.forEach(t),yQe=i(L),Sm=n(L,"LI",{});var PEe=s(Sm);_oe=n(PEe,"STRONG",{});var zjr=s(_oe);LQe=r(zjr,"rembert"),zjr.forEach(t),xQe=r(PEe," \u2014 "),kk=n(PEe,"A",{href:!0});var Qjr=s(kk);$Qe=r(Qjr,"RemBertConfig"),Qjr.forEach(t),kQe=r(PEe," (RemBERT model)"),PEe.forEach(t),SQe=i(L),Rm=n(L,"LI",{});var IEe=s(Rm);boe=n(IEe,"STRONG",{});var Wjr=s(boe);RQe=r(Wjr,"resnet"),Wjr.forEach(t),BQe=r(IEe," \u2014 "),Sk=n(IEe,"A",{href:!0});var Hjr=s(Sk);PQe=r(Hjr,"ResNetConfig"),Hjr.forEach(t),IQe=r(IEe," (ResNet model)"),IEe.forEach(t),qQe=i(L),Bm=n(L,"LI",{});var qEe=s(Bm);voe=n(qEe,"STRONG",{});var Ujr=s(voe);NQe=r(Ujr,"retribert"),Ujr.forEach(t),jQe=r(qEe," \u2014 "),Rk=n(qEe,"A",{href:!0});var Jjr=s(Rk);DQe=r(Jjr,"RetriBertConfig"),Jjr.forEach(t),GQe=r(qEe," (RetriBERT model)"),qEe.forEach(t),OQe=i(L),Pm=n(L,"LI",{});var NEe=s(Pm);Foe=n(NEe,"STRONG",{});var Yjr=s(Foe);VQe=r(Yjr,"roberta"),Yjr.forEach(t),XQe=r(NEe," \u2014 "),Bk=n(NEe,"A",{href:!0});var Kjr=s(Bk);zQe=r(Kjr,"RobertaConfig"),Kjr.forEach(t),QQe=r(NEe," (RoBERTa model)"),NEe.forEach(t),WQe=i(L),Im=n(L,"LI",{});var jEe=s(Im);Toe=n(jEe,"STRONG",{});var Zjr=s(Toe);HQe=r(Zjr,"roformer"),Zjr.forEach(t),UQe=r(jEe," \u2014 "),Pk=n(jEe,"A",{href:!0});var eDr=s(Pk);JQe=r(eDr,"RoFormerConfig"),eDr.forEach(t),YQe=r(jEe," (RoFormer model)"),jEe.forEach(t),KQe=i(L),qm=n(L,"LI",{});var DEe=s(qm);Moe=n(DEe,"STRONG",{});var oDr=s(Moe);ZQe=r(oDr,"segformer"),oDr.forEach(t),eWe=r(DEe," \u2014 "),Ik=n(DEe,"A",{href:!0});var rDr=s(Ik);oWe=r(rDr,"SegformerConfig"),rDr.forEach(t),rWe=r(DEe," (SegFormer model)"),DEe.forEach(t),tWe=i(L),Nm=n(L,"LI",{});var GEe=s(Nm);Eoe=n(GEe,"STRONG",{});var tDr=s(Eoe);aWe=r(tDr,"sew"),tDr.forEach(t),nWe=r(GEe," \u2014 "),qk=n(GEe,"A",{href:!0});var aDr=s(qk);sWe=r(aDr,"SEWConfig"),aDr.forEach(t),lWe=r(GEe," (SEW model)"),GEe.forEach(t),iWe=i(L),jm=n(L,"LI",{});var OEe=s(jm);Coe=n(OEe,"STRONG",{});var nDr=s(Coe);dWe=r(nDr,"sew-d"),nDr.forEach(t),cWe=r(OEe," \u2014 "),Nk=n(OEe,"A",{href:!0});var sDr=s(Nk);fWe=r(sDr,"SEWDConfig"),sDr.forEach(t),mWe=r(OEe," (SEW-D model)"),OEe.forEach(t),gWe=i(L),Dm=n(L,"LI",{});var VEe=s(Dm);woe=n(VEe,"STRONG",{});var lDr=s(woe);hWe=r(lDr,"speech-encoder-decoder"),lDr.forEach(t),pWe=r(VEe," \u2014 "),jk=n(VEe,"A",{href:!0});var iDr=s(jk);uWe=r(iDr,"SpeechEncoderDecoderConfig"),iDr.forEach(t),_We=r(VEe," (Speech Encoder decoder model)"),VEe.forEach(t),bWe=i(L),Gm=n(L,"LI",{});var XEe=s(Gm);Aoe=n(XEe,"STRONG",{});var dDr=s(Aoe);vWe=r(dDr,"speech_to_text"),dDr.forEach(t),FWe=r(XEe," \u2014 "),Dk=n(XEe,"A",{href:!0});var cDr=s(Dk);TWe=r(cDr,"Speech2TextConfig"),cDr.forEach(t),MWe=r(XEe," (Speech2Text model)"),XEe.forEach(t),EWe=i(L),Om=n(L,"LI",{});var zEe=s(Om);yoe=n(zEe,"STRONG",{});var fDr=s(yoe);CWe=r(fDr,"speech_to_text_2"),fDr.forEach(t),wWe=r(zEe," \u2014 "),Gk=n(zEe,"A",{href:!0});var mDr=s(Gk);AWe=r(mDr,"Speech2Text2Config"),mDr.forEach(t),yWe=r(zEe," (Speech2Text2 model)"),zEe.forEach(t),LWe=i(L),Vm=n(L,"LI",{});var QEe=s(Vm);Loe=n(QEe,"STRONG",{});var gDr=s(Loe);xWe=r(gDr,"splinter"),gDr.forEach(t),$We=r(QEe," \u2014 "),Ok=n(QEe,"A",{href:!0});var hDr=s(Ok);kWe=r(hDr,"SplinterConfig"),hDr.forEach(t),SWe=r(QEe," (Splinter model)"),QEe.forEach(t),RWe=i(L),Xm=n(L,"LI",{});var WEe=s(Xm);xoe=n(WEe,"STRONG",{});var pDr=s(xoe);BWe=r(pDr,"squeezebert"),pDr.forEach(t),PWe=r(WEe," \u2014 "),Vk=n(WEe,"A",{href:!0});var uDr=s(Vk);IWe=r(uDr,"SqueezeBertConfig"),uDr.forEach(t),qWe=r(WEe," (SqueezeBERT model)"),WEe.forEach(t),NWe=i(L),zm=n(L,"LI",{});var HEe=s(zm);$oe=n(HEe,"STRONG",{});var _Dr=s($oe);jWe=r(_Dr,"swin"),_Dr.forEach(t),DWe=r(HEe," \u2014 "),Xk=n(HEe,"A",{href:!0});var bDr=s(Xk);GWe=r(bDr,"SwinConfig"),bDr.forEach(t),OWe=r(HEe," (Swin model)"),HEe.forEach(t),VWe=i(L),Qm=n(L,"LI",{});var UEe=s(Qm);koe=n(UEe,"STRONG",{});var vDr=s(koe);XWe=r(vDr,"t5"),vDr.forEach(t),zWe=r(UEe," \u2014 "),zk=n(UEe,"A",{href:!0});var FDr=s(zk);QWe=r(FDr,"T5Config"),FDr.forEach(t),WWe=r(UEe," (T5 model)"),UEe.forEach(t),HWe=i(L),Wm=n(L,"LI",{});var JEe=s(Wm);Soe=n(JEe,"STRONG",{});var TDr=s(Soe);UWe=r(TDr,"tapas"),TDr.forEach(t),JWe=r(JEe," \u2014 "),Qk=n(JEe,"A",{href:!0});var MDr=s(Qk);YWe=r(MDr,"TapasConfig"),MDr.forEach(t),KWe=r(JEe," (TAPAS model)"),JEe.forEach(t),ZWe=i(L),Hm=n(L,"LI",{});var YEe=s(Hm);Roe=n(YEe,"STRONG",{});var EDr=s(Roe);eHe=r(EDr,"transfo-xl"),EDr.forEach(t),oHe=r(YEe," \u2014 "),Wk=n(YEe,"A",{href:!0});var CDr=s(Wk);rHe=r(CDr,"TransfoXLConfig"),CDr.forEach(t),tHe=r(YEe," (Transformer-XL model)"),YEe.forEach(t),aHe=i(L),Um=n(L,"LI",{});var KEe=s(Um);Boe=n(KEe,"STRONG",{});var wDr=s(Boe);nHe=r(wDr,"trocr"),wDr.forEach(t),sHe=r(KEe," \u2014 "),Hk=n(KEe,"A",{href:!0});var ADr=s(Hk);lHe=r(ADr,"TrOCRConfig"),ADr.forEach(t),iHe=r(KEe," (TrOCR model)"),KEe.forEach(t),dHe=i(L),Jm=n(L,"LI",{});var ZEe=s(Jm);Poe=n(ZEe,"STRONG",{});var yDr=s(Poe);cHe=r(yDr,"unispeech"),yDr.forEach(t),fHe=r(ZEe," \u2014 "),Uk=n(ZEe,"A",{href:!0});var LDr=s(Uk);mHe=r(LDr,"UniSpeechConfig"),LDr.forEach(t),gHe=r(ZEe," (UniSpeech model)"),ZEe.forEach(t),hHe=i(L),Ym=n(L,"LI",{});var eCe=s(Ym);Ioe=n(eCe,"STRONG",{});var xDr=s(Ioe);pHe=r(xDr,"unispeech-sat"),xDr.forEach(t),uHe=r(eCe," \u2014 "),Jk=n(eCe,"A",{href:!0});var $Dr=s(Jk);_He=r($Dr,"UniSpeechSatConfig"),$Dr.forEach(t),bHe=r(eCe," (UniSpeechSat model)"),eCe.forEach(t),vHe=i(L),Km=n(L,"LI",{});var oCe=s(Km);qoe=n(oCe,"STRONG",{});var kDr=s(qoe);FHe=r(kDr,"van"),kDr.forEach(t),THe=r(oCe," \u2014 "),Yk=n(oCe,"A",{href:!0});var SDr=s(Yk);MHe=r(SDr,"VanConfig"),SDr.forEach(t),EHe=r(oCe," (VAN model)"),oCe.forEach(t),CHe=i(L),Zm=n(L,"LI",{});var rCe=s(Zm);Noe=n(rCe,"STRONG",{});var RDr=s(Noe);wHe=r(RDr,"vilt"),RDr.forEach(t),AHe=r(rCe," \u2014 "),Kk=n(rCe,"A",{href:!0});var BDr=s(Kk);yHe=r(BDr,"ViltConfig"),BDr.forEach(t),LHe=r(rCe," (ViLT model)"),rCe.forEach(t),xHe=i(L),eg=n(L,"LI",{});var tCe=s(eg);joe=n(tCe,"STRONG",{});var PDr=s(joe);$He=r(PDr,"vision-encoder-decoder"),PDr.forEach(t),kHe=r(tCe," \u2014 "),Zk=n(tCe,"A",{href:!0});var IDr=s(Zk);SHe=r(IDr,"VisionEncoderDecoderConfig"),IDr.forEach(t),RHe=r(tCe," (Vision Encoder decoder model)"),tCe.forEach(t),BHe=i(L),og=n(L,"LI",{});var aCe=s(og);Doe=n(aCe,"STRONG",{});var qDr=s(Doe);PHe=r(qDr,"vision-text-dual-encoder"),qDr.forEach(t),IHe=r(aCe," \u2014 "),eS=n(aCe,"A",{href:!0});var NDr=s(eS);qHe=r(NDr,"VisionTextDualEncoderConfig"),NDr.forEach(t),NHe=r(aCe," (VisionTextDualEncoder model)"),aCe.forEach(t),jHe=i(L),rg=n(L,"LI",{});var nCe=s(rg);Goe=n(nCe,"STRONG",{});var jDr=s(Goe);DHe=r(jDr,"visual_bert"),jDr.forEach(t),GHe=r(nCe," \u2014 "),oS=n(nCe,"A",{href:!0});var DDr=s(oS);OHe=r(DDr,"VisualBertConfig"),DDr.forEach(t),VHe=r(nCe," (VisualBert model)"),nCe.forEach(t),XHe=i(L),tg=n(L,"LI",{});var sCe=s(tg);Ooe=n(sCe,"STRONG",{});var GDr=s(Ooe);zHe=r(GDr,"vit"),GDr.forEach(t),QHe=r(sCe," \u2014 "),rS=n(sCe,"A",{href:!0});var ODr=s(rS);WHe=r(ODr,"ViTConfig"),ODr.forEach(t),HHe=r(sCe," (ViT model)"),sCe.forEach(t),UHe=i(L),ag=n(L,"LI",{});var lCe=s(ag);Voe=n(lCe,"STRONG",{});var VDr=s(Voe);JHe=r(VDr,"vit_mae"),VDr.forEach(t),YHe=r(lCe," \u2014 "),tS=n(lCe,"A",{href:!0});var XDr=s(tS);KHe=r(XDr,"ViTMAEConfig"),XDr.forEach(t),ZHe=r(lCe," (ViTMAE model)"),lCe.forEach(t),eUe=i(L),ng=n(L,"LI",{});var iCe=s(ng);Xoe=n(iCe,"STRONG",{});var zDr=s(Xoe);oUe=r(zDr,"wav2vec2"),zDr.forEach(t),rUe=r(iCe," \u2014 "),aS=n(iCe,"A",{href:!0});var QDr=s(aS);tUe=r(QDr,"Wav2Vec2Config"),QDr.forEach(t),aUe=r(iCe," (Wav2Vec2 model)"),iCe.forEach(t),nUe=i(L),sg=n(L,"LI",{});var dCe=s(sg);zoe=n(dCe,"STRONG",{});var WDr=s(zoe);sUe=r(WDr,"wavlm"),WDr.forEach(t),lUe=r(dCe," \u2014 "),nS=n(dCe,"A",{href:!0});var HDr=s(nS);iUe=r(HDr,"WavLMConfig"),HDr.forEach(t),dUe=r(dCe," (WavLM model)"),dCe.forEach(t),cUe=i(L),lg=n(L,"LI",{});var cCe=s(lg);Qoe=n(cCe,"STRONG",{});var UDr=s(Qoe);fUe=r(UDr,"xglm"),UDr.forEach(t),mUe=r(cCe," \u2014 "),sS=n(cCe,"A",{href:!0});var JDr=s(sS);gUe=r(JDr,"XGLMConfig"),JDr.forEach(t),hUe=r(cCe," (XGLM model)"),cCe.forEach(t),pUe=i(L),ig=n(L,"LI",{});var fCe=s(ig);Woe=n(fCe,"STRONG",{});var YDr=s(Woe);uUe=r(YDr,"xlm"),YDr.forEach(t),_Ue=r(fCe," \u2014 "),lS=n(fCe,"A",{href:!0});var KDr=s(lS);bUe=r(KDr,"XLMConfig"),KDr.forEach(t),vUe=r(fCe," (XLM model)"),fCe.forEach(t),FUe=i(L),dg=n(L,"LI",{});var mCe=s(dg);Hoe=n(mCe,"STRONG",{});var ZDr=s(Hoe);TUe=r(ZDr,"xlm-prophetnet"),ZDr.forEach(t),MUe=r(mCe," \u2014 "),iS=n(mCe,"A",{href:!0});var eGr=s(iS);EUe=r(eGr,"XLMProphetNetConfig"),eGr.forEach(t),CUe=r(mCe," (XLMProphetNet model)"),mCe.forEach(t),wUe=i(L),cg=n(L,"LI",{});var gCe=s(cg);Uoe=n(gCe,"STRONG",{});var oGr=s(Uoe);AUe=r(oGr,"xlm-roberta"),oGr.forEach(t),yUe=r(gCe," \u2014 "),dS=n(gCe,"A",{href:!0});var rGr=s(dS);LUe=r(rGr,"XLMRobertaConfig"),rGr.forEach(t),xUe=r(gCe," (XLM-RoBERTa model)"),gCe.forEach(t),$Ue=i(L),fg=n(L,"LI",{});var hCe=s(fg);Joe=n(hCe,"STRONG",{});var tGr=s(Joe);kUe=r(tGr,"xlm-roberta-xl"),tGr.forEach(t),SUe=r(hCe," \u2014 "),cS=n(hCe,"A",{href:!0});var aGr=s(cS);RUe=r(aGr,"XLMRobertaXLConfig"),aGr.forEach(t),BUe=r(hCe," (XLM-RoBERTa-XL model)"),hCe.forEach(t),PUe=i(L),mg=n(L,"LI",{});var pCe=s(mg);Yoe=n(pCe,"STRONG",{});var nGr=s(Yoe);IUe=r(nGr,"xlnet"),nGr.forEach(t),qUe=r(pCe," \u2014 "),fS=n(pCe,"A",{href:!0});var sGr=s(fS);NUe=r(sGr,"XLNetConfig"),sGr.forEach(t),jUe=r(pCe," (XLNet model)"),pCe.forEach(t),DUe=i(L),gg=n(L,"LI",{});var uCe=s(gg);Koe=n(uCe,"STRONG",{});var lGr=s(Koe);GUe=r(lGr,"yolos"),lGr.forEach(t),OUe=r(uCe," \u2014 "),mS=n(uCe,"A",{href:!0});var iGr=s(mS);VUe=r(iGr,"YolosConfig"),iGr.forEach(t),XUe=r(uCe," (YOLOS model)"),uCe.forEach(t),zUe=i(L),hg=n(L,"LI",{});var _Ce=s(hg);Zoe=n(_Ce,"STRONG",{});var dGr=s(Zoe);QUe=r(dGr,"yoso"),dGr.forEach(t),WUe=r(_Ce," \u2014 "),gS=n(_Ce,"A",{href:!0});var cGr=s(gS);HUe=r(cGr,"YosoConfig"),cGr.forEach(t),UUe=r(_Ce," (YOSO model)"),_Ce.forEach(t),L.forEach(t),JUe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),YUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var Pqe=s(ug);T(o6.$$.fragment,Pqe),KUe=i(Pqe),ere=n(Pqe,"P",{});var fGr=s(ere);ZUe=r(fGr,"Register a new configuration for this class."),fGr.forEach(t),Pqe.forEach(t),Kr.forEach(t),NPe=i(f),_i=n(f,"H2",{class:!0});var Iqe=s(_i);_g=n(Iqe,"A",{id:!0,class:!0,href:!0});var mGr=s(_g);ore=n(mGr,"SPAN",{});var gGr=s(ore);T(r6.$$.fragment,gGr),gGr.forEach(t),mGr.forEach(t),eJe=i(Iqe),rre=n(Iqe,"SPAN",{});var hGr=s(rre);oJe=r(hGr,"AutoTokenizer"),hGr.forEach(t),Iqe.forEach(t),jPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(t6.$$.fragment,Ps),rJe=i(Ps),a6=n(Ps,"P",{});var qqe=s(a6);tJe=r(qqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hS=n(qqe,"A",{href:!0});var pGr=s(hS);aJe=r(pGr,"AutoTokenizer.from_pretrained()"),pGr.forEach(t),nJe=r(qqe," class method."),qqe.forEach(t),sJe=i(Ps),n6=n(Ps,"P",{});var Nqe=s(n6);lJe=r(Nqe,"This class cannot be instantiated directly using "),tre=n(Nqe,"CODE",{});var uGr=s(tre);iJe=r(uGr,"__init__()"),uGr.forEach(t),dJe=r(Nqe," (throws an error)."),Nqe.forEach(t),cJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(s6.$$.fragment,Is),fJe=i(Is),are=n(Is,"P",{});var _Gr=s(are);mJe=r(_Gr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_Gr.forEach(t),gJe=i(Is),Ca=n(Is,"P",{});var U3=s(Ca);hJe=r(U3,"The tokenizer class to instantiate is selected based on the "),nre=n(U3,"CODE",{});var bGr=s(nre);pJe=r(bGr,"model_type"),bGr.forEach(t),uJe=r(U3,` property of the config object (either
passed as an argument or loaded from `),sre=n(U3,"CODE",{});var vGr=s(sre);_Je=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),bJe=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lre=n(U3,"CODE",{});var FGr=s(lre);vJe=r(FGr,"pretrained_model_name_or_path"),FGr.forEach(t),FJe=r(U3,":"),U3.forEach(t),TJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var l9=s(kn);ire=n(l9,"STRONG",{});var TGr=s(ire);MJe=r(TGr,"albert"),TGr.forEach(t),EJe=r(l9," \u2014 "),pS=n(l9,"A",{href:!0});var MGr=s(pS);CJe=r(MGr,"AlbertTokenizer"),MGr.forEach(t),wJe=r(l9," or "),uS=n(l9,"A",{href:!0});var EGr=s(uS);AJe=r(EGr,"AlbertTokenizerFast"),EGr.forEach(t),yJe=r(l9," (ALBERT model)"),l9.forEach(t),LJe=i(S),Sn=n(S,"LI",{});var i9=s(Sn);dre=n(i9,"STRONG",{});var CGr=s(dre);xJe=r(CGr,"bart"),CGr.forEach(t),$Je=r(i9," \u2014 "),_S=n(i9,"A",{href:!0});var wGr=s(_S);kJe=r(wGr,"BartTokenizer"),wGr.forEach(t),SJe=r(i9," or "),bS=n(i9,"A",{href:!0});var AGr=s(bS);RJe=r(AGr,"BartTokenizerFast"),AGr.forEach(t),BJe=r(i9," (BART model)"),i9.forEach(t),PJe=i(S),Rn=n(S,"LI",{});var d9=s(Rn);cre=n(d9,"STRONG",{});var yGr=s(cre);IJe=r(yGr,"barthez"),yGr.forEach(t),qJe=r(d9," \u2014 "),vS=n(d9,"A",{href:!0});var LGr=s(vS);NJe=r(LGr,"BarthezTokenizer"),LGr.forEach(t),jJe=r(d9," or "),FS=n(d9,"A",{href:!0});var xGr=s(FS);DJe=r(xGr,"BarthezTokenizerFast"),xGr.forEach(t),GJe=r(d9," (BARThez model)"),d9.forEach(t),OJe=i(S),bg=n(S,"LI",{});var bCe=s(bg);fre=n(bCe,"STRONG",{});var $Gr=s(fre);VJe=r($Gr,"bartpho"),$Gr.forEach(t),XJe=r(bCe," \u2014 "),TS=n(bCe,"A",{href:!0});var kGr=s(TS);zJe=r(kGr,"BartphoTokenizer"),kGr.forEach(t),QJe=r(bCe," (BARTpho model)"),bCe.forEach(t),WJe=i(S),Bn=n(S,"LI",{});var c9=s(Bn);mre=n(c9,"STRONG",{});var SGr=s(mre);HJe=r(SGr,"bert"),SGr.forEach(t),UJe=r(c9," \u2014 "),MS=n(c9,"A",{href:!0});var RGr=s(MS);JJe=r(RGr,"BertTokenizer"),RGr.forEach(t),YJe=r(c9," or "),ES=n(c9,"A",{href:!0});var BGr=s(ES);KJe=r(BGr,"BertTokenizerFast"),BGr.forEach(t),ZJe=r(c9," (BERT model)"),c9.forEach(t),eYe=i(S),vg=n(S,"LI",{});var vCe=s(vg);gre=n(vCe,"STRONG",{});var PGr=s(gre);oYe=r(PGr,"bert-generation"),PGr.forEach(t),rYe=r(vCe," \u2014 "),CS=n(vCe,"A",{href:!0});var IGr=s(CS);tYe=r(IGr,"BertGenerationTokenizer"),IGr.forEach(t),aYe=r(vCe," (Bert Generation model)"),vCe.forEach(t),nYe=i(S),Fg=n(S,"LI",{});var FCe=s(Fg);hre=n(FCe,"STRONG",{});var qGr=s(hre);sYe=r(qGr,"bert-japanese"),qGr.forEach(t),lYe=r(FCe," \u2014 "),wS=n(FCe,"A",{href:!0});var NGr=s(wS);iYe=r(NGr,"BertJapaneseTokenizer"),NGr.forEach(t),dYe=r(FCe," (BertJapanese model)"),FCe.forEach(t),cYe=i(S),Tg=n(S,"LI",{});var TCe=s(Tg);pre=n(TCe,"STRONG",{});var jGr=s(pre);fYe=r(jGr,"bertweet"),jGr.forEach(t),mYe=r(TCe," \u2014 "),AS=n(TCe,"A",{href:!0});var DGr=s(AS);gYe=r(DGr,"BertweetTokenizer"),DGr.forEach(t),hYe=r(TCe," (Bertweet model)"),TCe.forEach(t),pYe=i(S),Pn=n(S,"LI",{});var f9=s(Pn);ure=n(f9,"STRONG",{});var GGr=s(ure);uYe=r(GGr,"big_bird"),GGr.forEach(t),_Ye=r(f9," \u2014 "),yS=n(f9,"A",{href:!0});var OGr=s(yS);bYe=r(OGr,"BigBirdTokenizer"),OGr.forEach(t),vYe=r(f9," or "),LS=n(f9,"A",{href:!0});var VGr=s(LS);FYe=r(VGr,"BigBirdTokenizerFast"),VGr.forEach(t),TYe=r(f9," (BigBird model)"),f9.forEach(t),MYe=i(S),In=n(S,"LI",{});var m9=s(In);_re=n(m9,"STRONG",{});var XGr=s(_re);EYe=r(XGr,"bigbird_pegasus"),XGr.forEach(t),CYe=r(m9," \u2014 "),xS=n(m9,"A",{href:!0});var zGr=s(xS);wYe=r(zGr,"PegasusTokenizer"),zGr.forEach(t),AYe=r(m9," or "),$S=n(m9,"A",{href:!0});var QGr=s($S);yYe=r(QGr,"PegasusTokenizerFast"),QGr.forEach(t),LYe=r(m9," (BigBirdPegasus model)"),m9.forEach(t),xYe=i(S),qn=n(S,"LI",{});var g9=s(qn);bre=n(g9,"STRONG",{});var WGr=s(bre);$Ye=r(WGr,"blenderbot"),WGr.forEach(t),kYe=r(g9," \u2014 "),kS=n(g9,"A",{href:!0});var HGr=s(kS);SYe=r(HGr,"BlenderbotTokenizer"),HGr.forEach(t),RYe=r(g9," or "),SS=n(g9,"A",{href:!0});var UGr=s(SS);BYe=r(UGr,"BlenderbotTokenizerFast"),UGr.forEach(t),PYe=r(g9," (Blenderbot model)"),g9.forEach(t),IYe=i(S),Mg=n(S,"LI",{});var MCe=s(Mg);vre=n(MCe,"STRONG",{});var JGr=s(vre);qYe=r(JGr,"blenderbot-small"),JGr.forEach(t),NYe=r(MCe," \u2014 "),RS=n(MCe,"A",{href:!0});var YGr=s(RS);jYe=r(YGr,"BlenderbotSmallTokenizer"),YGr.forEach(t),DYe=r(MCe," (BlenderbotSmall model)"),MCe.forEach(t),GYe=i(S),Eg=n(S,"LI",{});var ECe=s(Eg);Fre=n(ECe,"STRONG",{});var KGr=s(Fre);OYe=r(KGr,"byt5"),KGr.forEach(t),VYe=r(ECe," \u2014 "),BS=n(ECe,"A",{href:!0});var ZGr=s(BS);XYe=r(ZGr,"ByT5Tokenizer"),ZGr.forEach(t),zYe=r(ECe," (ByT5 model)"),ECe.forEach(t),QYe=i(S),Nn=n(S,"LI",{});var h9=s(Nn);Tre=n(h9,"STRONG",{});var eOr=s(Tre);WYe=r(eOr,"camembert"),eOr.forEach(t),HYe=r(h9," \u2014 "),PS=n(h9,"A",{href:!0});var oOr=s(PS);UYe=r(oOr,"CamembertTokenizer"),oOr.forEach(t),JYe=r(h9," or "),IS=n(h9,"A",{href:!0});var rOr=s(IS);YYe=r(rOr,"CamembertTokenizerFast"),rOr.forEach(t),KYe=r(h9," (CamemBERT model)"),h9.forEach(t),ZYe=i(S),Cg=n(S,"LI",{});var CCe=s(Cg);Mre=n(CCe,"STRONG",{});var tOr=s(Mre);eKe=r(tOr,"canine"),tOr.forEach(t),oKe=r(CCe," \u2014 "),qS=n(CCe,"A",{href:!0});var aOr=s(qS);rKe=r(aOr,"CanineTokenizer"),aOr.forEach(t),tKe=r(CCe," (Canine model)"),CCe.forEach(t),aKe=i(S),jn=n(S,"LI",{});var p9=s(jn);Ere=n(p9,"STRONG",{});var nOr=s(Ere);nKe=r(nOr,"clip"),nOr.forEach(t),sKe=r(p9," \u2014 "),NS=n(p9,"A",{href:!0});var sOr=s(NS);lKe=r(sOr,"CLIPTokenizer"),sOr.forEach(t),iKe=r(p9," or "),jS=n(p9,"A",{href:!0});var lOr=s(jS);dKe=r(lOr,"CLIPTokenizerFast"),lOr.forEach(t),cKe=r(p9," (CLIP model)"),p9.forEach(t),fKe=i(S),Dn=n(S,"LI",{});var u9=s(Dn);Cre=n(u9,"STRONG",{});var iOr=s(Cre);mKe=r(iOr,"convbert"),iOr.forEach(t),gKe=r(u9," \u2014 "),DS=n(u9,"A",{href:!0});var dOr=s(DS);hKe=r(dOr,"ConvBertTokenizer"),dOr.forEach(t),pKe=r(u9," or "),GS=n(u9,"A",{href:!0});var cOr=s(GS);uKe=r(cOr,"ConvBertTokenizerFast"),cOr.forEach(t),_Ke=r(u9," (ConvBERT model)"),u9.forEach(t),bKe=i(S),Gn=n(S,"LI",{});var _9=s(Gn);wre=n(_9,"STRONG",{});var fOr=s(wre);vKe=r(fOr,"cpm"),fOr.forEach(t),FKe=r(_9," \u2014 "),OS=n(_9,"A",{href:!0});var mOr=s(OS);TKe=r(mOr,"CpmTokenizer"),mOr.forEach(t),MKe=r(_9," or "),VS=n(_9,"A",{href:!0});var gOr=s(VS);EKe=r(gOr,"CpmTokenizerFast"),gOr.forEach(t),CKe=r(_9," (CPM model)"),_9.forEach(t),wKe=i(S),wg=n(S,"LI",{});var wCe=s(wg);Are=n(wCe,"STRONG",{});var hOr=s(Are);AKe=r(hOr,"ctrl"),hOr.forEach(t),yKe=r(wCe," \u2014 "),XS=n(wCe,"A",{href:!0});var pOr=s(XS);LKe=r(pOr,"CTRLTokenizer"),pOr.forEach(t),xKe=r(wCe," (CTRL model)"),wCe.forEach(t),$Ke=i(S),On=n(S,"LI",{});var b9=s(On);yre=n(b9,"STRONG",{});var uOr=s(yre);kKe=r(uOr,"data2vec-text"),uOr.forEach(t),SKe=r(b9," \u2014 "),zS=n(b9,"A",{href:!0});var _Or=s(zS);RKe=r(_Or,"RobertaTokenizer"),_Or.forEach(t),BKe=r(b9," or "),QS=n(b9,"A",{href:!0});var bOr=s(QS);PKe=r(bOr,"RobertaTokenizerFast"),bOr.forEach(t),IKe=r(b9," (Data2VecText model)"),b9.forEach(t),qKe=i(S),Vn=n(S,"LI",{});var v9=s(Vn);Lre=n(v9,"STRONG",{});var vOr=s(Lre);NKe=r(vOr,"deberta"),vOr.forEach(t),jKe=r(v9," \u2014 "),WS=n(v9,"A",{href:!0});var FOr=s(WS);DKe=r(FOr,"DebertaTokenizer"),FOr.forEach(t),GKe=r(v9," or "),HS=n(v9,"A",{href:!0});var TOr=s(HS);OKe=r(TOr,"DebertaTokenizerFast"),TOr.forEach(t),VKe=r(v9," (DeBERTa model)"),v9.forEach(t),XKe=i(S),Xn=n(S,"LI",{});var F9=s(Xn);xre=n(F9,"STRONG",{});var MOr=s(xre);zKe=r(MOr,"deberta-v2"),MOr.forEach(t),QKe=r(F9," \u2014 "),US=n(F9,"A",{href:!0});var EOr=s(US);WKe=r(EOr,"DebertaV2Tokenizer"),EOr.forEach(t),HKe=r(F9," or "),JS=n(F9,"A",{href:!0});var COr=s(JS);UKe=r(COr,"DebertaV2TokenizerFast"),COr.forEach(t),JKe=r(F9," (DeBERTa-v2 model)"),F9.forEach(t),YKe=i(S),zn=n(S,"LI",{});var T9=s(zn);$re=n(T9,"STRONG",{});var wOr=s($re);KKe=r(wOr,"distilbert"),wOr.forEach(t),ZKe=r(T9," \u2014 "),YS=n(T9,"A",{href:!0});var AOr=s(YS);eZe=r(AOr,"DistilBertTokenizer"),AOr.forEach(t),oZe=r(T9," or "),KS=n(T9,"A",{href:!0});var yOr=s(KS);rZe=r(yOr,"DistilBertTokenizerFast"),yOr.forEach(t),tZe=r(T9," (DistilBERT model)"),T9.forEach(t),aZe=i(S),Qn=n(S,"LI",{});var M9=s(Qn);kre=n(M9,"STRONG",{});var LOr=s(kre);nZe=r(LOr,"dpr"),LOr.forEach(t),sZe=r(M9," \u2014 "),ZS=n(M9,"A",{href:!0});var xOr=s(ZS);lZe=r(xOr,"DPRQuestionEncoderTokenizer"),xOr.forEach(t),iZe=r(M9," or "),eR=n(M9,"A",{href:!0});var $Or=s(eR);dZe=r($Or,"DPRQuestionEncoderTokenizerFast"),$Or.forEach(t),cZe=r(M9," (DPR model)"),M9.forEach(t),fZe=i(S),Wn=n(S,"LI",{});var E9=s(Wn);Sre=n(E9,"STRONG",{});var kOr=s(Sre);mZe=r(kOr,"electra"),kOr.forEach(t),gZe=r(E9," \u2014 "),oR=n(E9,"A",{href:!0});var SOr=s(oR);hZe=r(SOr,"ElectraTokenizer"),SOr.forEach(t),pZe=r(E9," or "),rR=n(E9,"A",{href:!0});var ROr=s(rR);uZe=r(ROr,"ElectraTokenizerFast"),ROr.forEach(t),_Ze=r(E9," (ELECTRA model)"),E9.forEach(t),bZe=i(S),Ag=n(S,"LI",{});var ACe=s(Ag);Rre=n(ACe,"STRONG",{});var BOr=s(Rre);vZe=r(BOr,"flaubert"),BOr.forEach(t),FZe=r(ACe," \u2014 "),tR=n(ACe,"A",{href:!0});var POr=s(tR);TZe=r(POr,"FlaubertTokenizer"),POr.forEach(t),MZe=r(ACe," (FlauBERT model)"),ACe.forEach(t),EZe=i(S),Hn=n(S,"LI",{});var C9=s(Hn);Bre=n(C9,"STRONG",{});var IOr=s(Bre);CZe=r(IOr,"fnet"),IOr.forEach(t),wZe=r(C9," \u2014 "),aR=n(C9,"A",{href:!0});var qOr=s(aR);AZe=r(qOr,"FNetTokenizer"),qOr.forEach(t),yZe=r(C9," or "),nR=n(C9,"A",{href:!0});var NOr=s(nR);LZe=r(NOr,"FNetTokenizerFast"),NOr.forEach(t),xZe=r(C9," (FNet model)"),C9.forEach(t),$Ze=i(S),yg=n(S,"LI",{});var yCe=s(yg);Pre=n(yCe,"STRONG",{});var jOr=s(Pre);kZe=r(jOr,"fsmt"),jOr.forEach(t),SZe=r(yCe," \u2014 "),sR=n(yCe,"A",{href:!0});var DOr=s(sR);RZe=r(DOr,"FSMTTokenizer"),DOr.forEach(t),BZe=r(yCe," (FairSeq Machine-Translation model)"),yCe.forEach(t),PZe=i(S),Un=n(S,"LI",{});var w9=s(Un);Ire=n(w9,"STRONG",{});var GOr=s(Ire);IZe=r(GOr,"funnel"),GOr.forEach(t),qZe=r(w9," \u2014 "),lR=n(w9,"A",{href:!0});var OOr=s(lR);NZe=r(OOr,"FunnelTokenizer"),OOr.forEach(t),jZe=r(w9," or "),iR=n(w9,"A",{href:!0});var VOr=s(iR);DZe=r(VOr,"FunnelTokenizerFast"),VOr.forEach(t),GZe=r(w9," (Funnel Transformer model)"),w9.forEach(t),OZe=i(S),Jn=n(S,"LI",{});var A9=s(Jn);qre=n(A9,"STRONG",{});var XOr=s(qre);VZe=r(XOr,"gpt2"),XOr.forEach(t),XZe=r(A9," \u2014 "),dR=n(A9,"A",{href:!0});var zOr=s(dR);zZe=r(zOr,"GPT2Tokenizer"),zOr.forEach(t),QZe=r(A9," or "),cR=n(A9,"A",{href:!0});var QOr=s(cR);WZe=r(QOr,"GPT2TokenizerFast"),QOr.forEach(t),HZe=r(A9," (OpenAI GPT-2 model)"),A9.forEach(t),UZe=i(S),Yn=n(S,"LI",{});var y9=s(Yn);Nre=n(y9,"STRONG",{});var WOr=s(Nre);JZe=r(WOr,"gpt_neo"),WOr.forEach(t),YZe=r(y9," \u2014 "),fR=n(y9,"A",{href:!0});var HOr=s(fR);KZe=r(HOr,"GPT2Tokenizer"),HOr.forEach(t),ZZe=r(y9," or "),mR=n(y9,"A",{href:!0});var UOr=s(mR);eeo=r(UOr,"GPT2TokenizerFast"),UOr.forEach(t),oeo=r(y9," (GPT Neo model)"),y9.forEach(t),reo=i(S),Kn=n(S,"LI",{});var L9=s(Kn);jre=n(L9,"STRONG",{});var JOr=s(jre);teo=r(JOr,"gptj"),JOr.forEach(t),aeo=r(L9," \u2014 "),gR=n(L9,"A",{href:!0});var YOr=s(gR);neo=r(YOr,"GPT2Tokenizer"),YOr.forEach(t),seo=r(L9," or "),hR=n(L9,"A",{href:!0});var KOr=s(hR);leo=r(KOr,"GPT2TokenizerFast"),KOr.forEach(t),ieo=r(L9," (GPT-J model)"),L9.forEach(t),deo=i(S),Zn=n(S,"LI",{});var x9=s(Zn);Dre=n(x9,"STRONG",{});var ZOr=s(Dre);ceo=r(ZOr,"herbert"),ZOr.forEach(t),feo=r(x9," \u2014 "),pR=n(x9,"A",{href:!0});var eVr=s(pR);meo=r(eVr,"HerbertTokenizer"),eVr.forEach(t),geo=r(x9," or "),uR=n(x9,"A",{href:!0});var oVr=s(uR);heo=r(oVr,"HerbertTokenizerFast"),oVr.forEach(t),peo=r(x9," (HerBERT model)"),x9.forEach(t),ueo=i(S),Lg=n(S,"LI",{});var LCe=s(Lg);Gre=n(LCe,"STRONG",{});var rVr=s(Gre);_eo=r(rVr,"hubert"),rVr.forEach(t),beo=r(LCe," \u2014 "),_R=n(LCe,"A",{href:!0});var tVr=s(_R);veo=r(tVr,"Wav2Vec2CTCTokenizer"),tVr.forEach(t),Feo=r(LCe," (Hubert model)"),LCe.forEach(t),Teo=i(S),es=n(S,"LI",{});var $9=s(es);Ore=n($9,"STRONG",{});var aVr=s(Ore);Meo=r(aVr,"ibert"),aVr.forEach(t),Eeo=r($9," \u2014 "),bR=n($9,"A",{href:!0});var nVr=s(bR);Ceo=r(nVr,"RobertaTokenizer"),nVr.forEach(t),weo=r($9," or "),vR=n($9,"A",{href:!0});var sVr=s(vR);Aeo=r(sVr,"RobertaTokenizerFast"),sVr.forEach(t),yeo=r($9," (I-BERT model)"),$9.forEach(t),Leo=i(S),os=n(S,"LI",{});var k9=s(os);Vre=n(k9,"STRONG",{});var lVr=s(Vre);xeo=r(lVr,"layoutlm"),lVr.forEach(t),$eo=r(k9," \u2014 "),FR=n(k9,"A",{href:!0});var iVr=s(FR);keo=r(iVr,"LayoutLMTokenizer"),iVr.forEach(t),Seo=r(k9," or "),TR=n(k9,"A",{href:!0});var dVr=s(TR);Reo=r(dVr,"LayoutLMTokenizerFast"),dVr.forEach(t),Beo=r(k9," (LayoutLM model)"),k9.forEach(t),Peo=i(S),rs=n(S,"LI",{});var S9=s(rs);Xre=n(S9,"STRONG",{});var cVr=s(Xre);Ieo=r(cVr,"layoutlmv2"),cVr.forEach(t),qeo=r(S9," \u2014 "),MR=n(S9,"A",{href:!0});var fVr=s(MR);Neo=r(fVr,"LayoutLMv2Tokenizer"),fVr.forEach(t),jeo=r(S9," or "),ER=n(S9,"A",{href:!0});var mVr=s(ER);Deo=r(mVr,"LayoutLMv2TokenizerFast"),mVr.forEach(t),Geo=r(S9," (LayoutLMv2 model)"),S9.forEach(t),Oeo=i(S),ts=n(S,"LI",{});var R9=s(ts);zre=n(R9,"STRONG",{});var gVr=s(zre);Veo=r(gVr,"layoutxlm"),gVr.forEach(t),Xeo=r(R9," \u2014 "),CR=n(R9,"A",{href:!0});var hVr=s(CR);zeo=r(hVr,"LayoutXLMTokenizer"),hVr.forEach(t),Qeo=r(R9," or "),wR=n(R9,"A",{href:!0});var pVr=s(wR);Weo=r(pVr,"LayoutXLMTokenizerFast"),pVr.forEach(t),Heo=r(R9," (LayoutXLM model)"),R9.forEach(t),Ueo=i(S),as=n(S,"LI",{});var B9=s(as);Qre=n(B9,"STRONG",{});var uVr=s(Qre);Jeo=r(uVr,"led"),uVr.forEach(t),Yeo=r(B9," \u2014 "),AR=n(B9,"A",{href:!0});var _Vr=s(AR);Keo=r(_Vr,"LEDTokenizer"),_Vr.forEach(t),Zeo=r(B9," or "),yR=n(B9,"A",{href:!0});var bVr=s(yR);eoo=r(bVr,"LEDTokenizerFast"),bVr.forEach(t),ooo=r(B9," (LED model)"),B9.forEach(t),roo=i(S),ns=n(S,"LI",{});var P9=s(ns);Wre=n(P9,"STRONG",{});var vVr=s(Wre);too=r(vVr,"longformer"),vVr.forEach(t),aoo=r(P9," \u2014 "),LR=n(P9,"A",{href:!0});var FVr=s(LR);noo=r(FVr,"LongformerTokenizer"),FVr.forEach(t),soo=r(P9," or "),xR=n(P9,"A",{href:!0});var TVr=s(xR);loo=r(TVr,"LongformerTokenizerFast"),TVr.forEach(t),ioo=r(P9," (Longformer model)"),P9.forEach(t),doo=i(S),xg=n(S,"LI",{});var xCe=s(xg);Hre=n(xCe,"STRONG",{});var MVr=s(Hre);coo=r(MVr,"luke"),MVr.forEach(t),foo=r(xCe," \u2014 "),$R=n(xCe,"A",{href:!0});var EVr=s($R);moo=r(EVr,"LukeTokenizer"),EVr.forEach(t),goo=r(xCe," (LUKE model)"),xCe.forEach(t),hoo=i(S),ss=n(S,"LI",{});var I9=s(ss);Ure=n(I9,"STRONG",{});var CVr=s(Ure);poo=r(CVr,"lxmert"),CVr.forEach(t),uoo=r(I9," \u2014 "),kR=n(I9,"A",{href:!0});var wVr=s(kR);_oo=r(wVr,"LxmertTokenizer"),wVr.forEach(t),boo=r(I9," or "),SR=n(I9,"A",{href:!0});var AVr=s(SR);voo=r(AVr,"LxmertTokenizerFast"),AVr.forEach(t),Foo=r(I9," (LXMERT model)"),I9.forEach(t),Too=i(S),$g=n(S,"LI",{});var $Ce=s($g);Jre=n($Ce,"STRONG",{});var yVr=s(Jre);Moo=r(yVr,"m2m_100"),yVr.forEach(t),Eoo=r($Ce," \u2014 "),RR=n($Ce,"A",{href:!0});var LVr=s(RR);Coo=r(LVr,"M2M100Tokenizer"),LVr.forEach(t),woo=r($Ce," (M2M100 model)"),$Ce.forEach(t),Aoo=i(S),kg=n(S,"LI",{});var kCe=s(kg);Yre=n(kCe,"STRONG",{});var xVr=s(Yre);yoo=r(xVr,"marian"),xVr.forEach(t),Loo=r(kCe," \u2014 "),BR=n(kCe,"A",{href:!0});var $Vr=s(BR);xoo=r($Vr,"MarianTokenizer"),$Vr.forEach(t),$oo=r(kCe," (Marian model)"),kCe.forEach(t),koo=i(S),ls=n(S,"LI",{});var q9=s(ls);Kre=n(q9,"STRONG",{});var kVr=s(Kre);Soo=r(kVr,"mbart"),kVr.forEach(t),Roo=r(q9," \u2014 "),PR=n(q9,"A",{href:!0});var SVr=s(PR);Boo=r(SVr,"MBartTokenizer"),SVr.forEach(t),Poo=r(q9," or "),IR=n(q9,"A",{href:!0});var RVr=s(IR);Ioo=r(RVr,"MBartTokenizerFast"),RVr.forEach(t),qoo=r(q9," (mBART model)"),q9.forEach(t),Noo=i(S),is=n(S,"LI",{});var N9=s(is);Zre=n(N9,"STRONG",{});var BVr=s(Zre);joo=r(BVr,"mbart50"),BVr.forEach(t),Doo=r(N9," \u2014 "),qR=n(N9,"A",{href:!0});var PVr=s(qR);Goo=r(PVr,"MBart50Tokenizer"),PVr.forEach(t),Ooo=r(N9," or "),NR=n(N9,"A",{href:!0});var IVr=s(NR);Voo=r(IVr,"MBart50TokenizerFast"),IVr.forEach(t),Xoo=r(N9," (mBART-50 model)"),N9.forEach(t),zoo=i(S),ds=n(S,"LI",{});var j9=s(ds);ete=n(j9,"STRONG",{});var qVr=s(ete);Qoo=r(qVr,"megatron-bert"),qVr.forEach(t),Woo=r(j9," \u2014 "),jR=n(j9,"A",{href:!0});var NVr=s(jR);Hoo=r(NVr,"BertTokenizer"),NVr.forEach(t),Uoo=r(j9," or "),DR=n(j9,"A",{href:!0});var jVr=s(DR);Joo=r(jVr,"BertTokenizerFast"),jVr.forEach(t),Yoo=r(j9," (MegatronBert model)"),j9.forEach(t),Koo=i(S),Sg=n(S,"LI",{});var SCe=s(Sg);ote=n(SCe,"STRONG",{});var DVr=s(ote);Zoo=r(DVr,"mluke"),DVr.forEach(t),ero=r(SCe," \u2014 "),GR=n(SCe,"A",{href:!0});var GVr=s(GR);oro=r(GVr,"MLukeTokenizer"),GVr.forEach(t),rro=r(SCe," (mLUKE model)"),SCe.forEach(t),tro=i(S),cs=n(S,"LI",{});var D9=s(cs);rte=n(D9,"STRONG",{});var OVr=s(rte);aro=r(OVr,"mobilebert"),OVr.forEach(t),nro=r(D9," \u2014 "),OR=n(D9,"A",{href:!0});var VVr=s(OR);sro=r(VVr,"MobileBertTokenizer"),VVr.forEach(t),lro=r(D9," or "),VR=n(D9,"A",{href:!0});var XVr=s(VR);iro=r(XVr,"MobileBertTokenizerFast"),XVr.forEach(t),dro=r(D9," (MobileBERT model)"),D9.forEach(t),cro=i(S),fs=n(S,"LI",{});var G9=s(fs);tte=n(G9,"STRONG",{});var zVr=s(tte);fro=r(zVr,"mpnet"),zVr.forEach(t),mro=r(G9," \u2014 "),XR=n(G9,"A",{href:!0});var QVr=s(XR);gro=r(QVr,"MPNetTokenizer"),QVr.forEach(t),hro=r(G9," or "),zR=n(G9,"A",{href:!0});var WVr=s(zR);pro=r(WVr,"MPNetTokenizerFast"),WVr.forEach(t),uro=r(G9," (MPNet model)"),G9.forEach(t),_ro=i(S),ms=n(S,"LI",{});var O9=s(ms);ate=n(O9,"STRONG",{});var HVr=s(ate);bro=r(HVr,"mt5"),HVr.forEach(t),vro=r(O9," \u2014 "),QR=n(O9,"A",{href:!0});var UVr=s(QR);Fro=r(UVr,"MT5Tokenizer"),UVr.forEach(t),Tro=r(O9," or "),WR=n(O9,"A",{href:!0});var JVr=s(WR);Mro=r(JVr,"MT5TokenizerFast"),JVr.forEach(t),Ero=r(O9," (mT5 model)"),O9.forEach(t),Cro=i(S),gs=n(S,"LI",{});var V9=s(gs);nte=n(V9,"STRONG",{});var YVr=s(nte);wro=r(YVr,"nystromformer"),YVr.forEach(t),Aro=r(V9," \u2014 "),HR=n(V9,"A",{href:!0});var KVr=s(HR);yro=r(KVr,"AlbertTokenizer"),KVr.forEach(t),Lro=r(V9," or "),UR=n(V9,"A",{href:!0});var ZVr=s(UR);xro=r(ZVr,"AlbertTokenizerFast"),ZVr.forEach(t),$ro=r(V9," (Nystromformer model)"),V9.forEach(t),kro=i(S),hs=n(S,"LI",{});var X9=s(hs);ste=n(X9,"STRONG",{});var eXr=s(ste);Sro=r(eXr,"openai-gpt"),eXr.forEach(t),Rro=r(X9," \u2014 "),JR=n(X9,"A",{href:!0});var oXr=s(JR);Bro=r(oXr,"OpenAIGPTTokenizer"),oXr.forEach(t),Pro=r(X9," or "),YR=n(X9,"A",{href:!0});var rXr=s(YR);Iro=r(rXr,"OpenAIGPTTokenizerFast"),rXr.forEach(t),qro=r(X9," (OpenAI GPT model)"),X9.forEach(t),Nro=i(S),Rg=n(S,"LI",{});var RCe=s(Rg);lte=n(RCe,"STRONG",{});var tXr=s(lte);jro=r(tXr,"opt"),tXr.forEach(t),Dro=r(RCe," \u2014 "),KR=n(RCe,"A",{href:!0});var aXr=s(KR);Gro=r(aXr,"GPT2Tokenizer"),aXr.forEach(t),Oro=r(RCe," (OPT model)"),RCe.forEach(t),Vro=i(S),ps=n(S,"LI",{});var z9=s(ps);ite=n(z9,"STRONG",{});var nXr=s(ite);Xro=r(nXr,"pegasus"),nXr.forEach(t),zro=r(z9," \u2014 "),ZR=n(z9,"A",{href:!0});var sXr=s(ZR);Qro=r(sXr,"PegasusTokenizer"),sXr.forEach(t),Wro=r(z9," or "),eB=n(z9,"A",{href:!0});var lXr=s(eB);Hro=r(lXr,"PegasusTokenizerFast"),lXr.forEach(t),Uro=r(z9," (Pegasus model)"),z9.forEach(t),Jro=i(S),Bg=n(S,"LI",{});var BCe=s(Bg);dte=n(BCe,"STRONG",{});var iXr=s(dte);Yro=r(iXr,"perceiver"),iXr.forEach(t),Kro=r(BCe," \u2014 "),oB=n(BCe,"A",{href:!0});var dXr=s(oB);Zro=r(dXr,"PerceiverTokenizer"),dXr.forEach(t),eto=r(BCe," (Perceiver model)"),BCe.forEach(t),oto=i(S),Pg=n(S,"LI",{});var PCe=s(Pg);cte=n(PCe,"STRONG",{});var cXr=s(cte);rto=r(cXr,"phobert"),cXr.forEach(t),tto=r(PCe," \u2014 "),rB=n(PCe,"A",{href:!0});var fXr=s(rB);ato=r(fXr,"PhobertTokenizer"),fXr.forEach(t),nto=r(PCe," (PhoBERT model)"),PCe.forEach(t),sto=i(S),Ig=n(S,"LI",{});var ICe=s(Ig);fte=n(ICe,"STRONG",{});var mXr=s(fte);lto=r(mXr,"plbart"),mXr.forEach(t),ito=r(ICe," \u2014 "),tB=n(ICe,"A",{href:!0});var gXr=s(tB);dto=r(gXr,"PLBartTokenizer"),gXr.forEach(t),cto=r(ICe," (PLBart model)"),ICe.forEach(t),fto=i(S),qg=n(S,"LI",{});var qCe=s(qg);mte=n(qCe,"STRONG",{});var hXr=s(mte);mto=r(hXr,"prophetnet"),hXr.forEach(t),gto=r(qCe," \u2014 "),aB=n(qCe,"A",{href:!0});var pXr=s(aB);hto=r(pXr,"ProphetNetTokenizer"),pXr.forEach(t),pto=r(qCe," (ProphetNet model)"),qCe.forEach(t),uto=i(S),us=n(S,"LI",{});var Q9=s(us);gte=n(Q9,"STRONG",{});var uXr=s(gte);_to=r(uXr,"qdqbert"),uXr.forEach(t),bto=r(Q9," \u2014 "),nB=n(Q9,"A",{href:!0});var _Xr=s(nB);vto=r(_Xr,"BertTokenizer"),_Xr.forEach(t),Fto=r(Q9," or "),sB=n(Q9,"A",{href:!0});var bXr=s(sB);Tto=r(bXr,"BertTokenizerFast"),bXr.forEach(t),Mto=r(Q9," (QDQBert model)"),Q9.forEach(t),Eto=i(S),Ng=n(S,"LI",{});var NCe=s(Ng);hte=n(NCe,"STRONG",{});var vXr=s(hte);Cto=r(vXr,"rag"),vXr.forEach(t),wto=r(NCe," \u2014 "),lB=n(NCe,"A",{href:!0});var FXr=s(lB);Ato=r(FXr,"RagTokenizer"),FXr.forEach(t),yto=r(NCe," (RAG model)"),NCe.forEach(t),Lto=i(S),_s=n(S,"LI",{});var W9=s(_s);pte=n(W9,"STRONG",{});var TXr=s(pte);xto=r(TXr,"realm"),TXr.forEach(t),$to=r(W9," \u2014 "),iB=n(W9,"A",{href:!0});var MXr=s(iB);kto=r(MXr,"RealmTokenizer"),MXr.forEach(t),Sto=r(W9," or "),dB=n(W9,"A",{href:!0});var EXr=s(dB);Rto=r(EXr,"RealmTokenizerFast"),EXr.forEach(t),Bto=r(W9," (Realm model)"),W9.forEach(t),Pto=i(S),bs=n(S,"LI",{});var H9=s(bs);ute=n(H9,"STRONG",{});var CXr=s(ute);Ito=r(CXr,"reformer"),CXr.forEach(t),qto=r(H9," \u2014 "),cB=n(H9,"A",{href:!0});var wXr=s(cB);Nto=r(wXr,"ReformerTokenizer"),wXr.forEach(t),jto=r(H9," or "),fB=n(H9,"A",{href:!0});var AXr=s(fB);Dto=r(AXr,"ReformerTokenizerFast"),AXr.forEach(t),Gto=r(H9," (Reformer model)"),H9.forEach(t),Oto=i(S),vs=n(S,"LI",{});var U9=s(vs);_te=n(U9,"STRONG",{});var yXr=s(_te);Vto=r(yXr,"rembert"),yXr.forEach(t),Xto=r(U9," \u2014 "),mB=n(U9,"A",{href:!0});var LXr=s(mB);zto=r(LXr,"RemBertTokenizer"),LXr.forEach(t),Qto=r(U9," or "),gB=n(U9,"A",{href:!0});var xXr=s(gB);Wto=r(xXr,"RemBertTokenizerFast"),xXr.forEach(t),Hto=r(U9," (RemBERT model)"),U9.forEach(t),Uto=i(S),Fs=n(S,"LI",{});var J9=s(Fs);bte=n(J9,"STRONG",{});var $Xr=s(bte);Jto=r($Xr,"retribert"),$Xr.forEach(t),Yto=r(J9," \u2014 "),hB=n(J9,"A",{href:!0});var kXr=s(hB);Kto=r(kXr,"RetriBertTokenizer"),kXr.forEach(t),Zto=r(J9," or "),pB=n(J9,"A",{href:!0});var SXr=s(pB);eao=r(SXr,"RetriBertTokenizerFast"),SXr.forEach(t),oao=r(J9," (RetriBERT model)"),J9.forEach(t),rao=i(S),Ts=n(S,"LI",{});var Y9=s(Ts);vte=n(Y9,"STRONG",{});var RXr=s(vte);tao=r(RXr,"roberta"),RXr.forEach(t),aao=r(Y9," \u2014 "),uB=n(Y9,"A",{href:!0});var BXr=s(uB);nao=r(BXr,"RobertaTokenizer"),BXr.forEach(t),sao=r(Y9," or "),_B=n(Y9,"A",{href:!0});var PXr=s(_B);lao=r(PXr,"RobertaTokenizerFast"),PXr.forEach(t),iao=r(Y9," (RoBERTa model)"),Y9.forEach(t),dao=i(S),Ms=n(S,"LI",{});var K9=s(Ms);Fte=n(K9,"STRONG",{});var IXr=s(Fte);cao=r(IXr,"roformer"),IXr.forEach(t),fao=r(K9," \u2014 "),bB=n(K9,"A",{href:!0});var qXr=s(bB);mao=r(qXr,"RoFormerTokenizer"),qXr.forEach(t),gao=r(K9," or "),vB=n(K9,"A",{href:!0});var NXr=s(vB);hao=r(NXr,"RoFormerTokenizerFast"),NXr.forEach(t),pao=r(K9," (RoFormer model)"),K9.forEach(t),uao=i(S),jg=n(S,"LI",{});var jCe=s(jg);Tte=n(jCe,"STRONG",{});var jXr=s(Tte);_ao=r(jXr,"speech_to_text"),jXr.forEach(t),bao=r(jCe," \u2014 "),FB=n(jCe,"A",{href:!0});var DXr=s(FB);vao=r(DXr,"Speech2TextTokenizer"),DXr.forEach(t),Fao=r(jCe," (Speech2Text model)"),jCe.forEach(t),Tao=i(S),Dg=n(S,"LI",{});var DCe=s(Dg);Mte=n(DCe,"STRONG",{});var GXr=s(Mte);Mao=r(GXr,"speech_to_text_2"),GXr.forEach(t),Eao=r(DCe," \u2014 "),TB=n(DCe,"A",{href:!0});var OXr=s(TB);Cao=r(OXr,"Speech2Text2Tokenizer"),OXr.forEach(t),wao=r(DCe," (Speech2Text2 model)"),DCe.forEach(t),Aao=i(S),Es=n(S,"LI",{});var Z9=s(Es);Ete=n(Z9,"STRONG",{});var VXr=s(Ete);yao=r(VXr,"splinter"),VXr.forEach(t),Lao=r(Z9," \u2014 "),MB=n(Z9,"A",{href:!0});var XXr=s(MB);xao=r(XXr,"SplinterTokenizer"),XXr.forEach(t),$ao=r(Z9," or "),EB=n(Z9,"A",{href:!0});var zXr=s(EB);kao=r(zXr,"SplinterTokenizerFast"),zXr.forEach(t),Sao=r(Z9," (Splinter model)"),Z9.forEach(t),Rao=i(S),Cs=n(S,"LI",{});var e$=s(Cs);Cte=n(e$,"STRONG",{});var QXr=s(Cte);Bao=r(QXr,"squeezebert"),QXr.forEach(t),Pao=r(e$," \u2014 "),CB=n(e$,"A",{href:!0});var WXr=s(CB);Iao=r(WXr,"SqueezeBertTokenizer"),WXr.forEach(t),qao=r(e$," or "),wB=n(e$,"A",{href:!0});var HXr=s(wB);Nao=r(HXr,"SqueezeBertTokenizerFast"),HXr.forEach(t),jao=r(e$," (SqueezeBERT model)"),e$.forEach(t),Dao=i(S),ws=n(S,"LI",{});var o$=s(ws);wte=n(o$,"STRONG",{});var UXr=s(wte);Gao=r(UXr,"t5"),UXr.forEach(t),Oao=r(o$," \u2014 "),AB=n(o$,"A",{href:!0});var JXr=s(AB);Vao=r(JXr,"T5Tokenizer"),JXr.forEach(t),Xao=r(o$," or "),yB=n(o$,"A",{href:!0});var YXr=s(yB);zao=r(YXr,"T5TokenizerFast"),YXr.forEach(t),Qao=r(o$," (T5 model)"),o$.forEach(t),Wao=i(S),Gg=n(S,"LI",{});var GCe=s(Gg);Ate=n(GCe,"STRONG",{});var KXr=s(Ate);Hao=r(KXr,"tapas"),KXr.forEach(t),Uao=r(GCe," \u2014 "),LB=n(GCe,"A",{href:!0});var ZXr=s(LB);Jao=r(ZXr,"TapasTokenizer"),ZXr.forEach(t),Yao=r(GCe," (TAPAS model)"),GCe.forEach(t),Kao=i(S),Og=n(S,"LI",{});var OCe=s(Og);yte=n(OCe,"STRONG",{});var ezr=s(yte);Zao=r(ezr,"tapex"),ezr.forEach(t),eno=r(OCe," \u2014 "),xB=n(OCe,"A",{href:!0});var ozr=s(xB);ono=r(ozr,"TapexTokenizer"),ozr.forEach(t),rno=r(OCe," (TAPEX model)"),OCe.forEach(t),tno=i(S),Vg=n(S,"LI",{});var VCe=s(Vg);Lte=n(VCe,"STRONG",{});var rzr=s(Lte);ano=r(rzr,"transfo-xl"),rzr.forEach(t),nno=r(VCe," \u2014 "),$B=n(VCe,"A",{href:!0});var tzr=s($B);sno=r(tzr,"TransfoXLTokenizer"),tzr.forEach(t),lno=r(VCe," (Transformer-XL model)"),VCe.forEach(t),ino=i(S),As=n(S,"LI",{});var r$=s(As);xte=n(r$,"STRONG",{});var azr=s(xte);dno=r(azr,"visual_bert"),azr.forEach(t),cno=r(r$," \u2014 "),kB=n(r$,"A",{href:!0});var nzr=s(kB);fno=r(nzr,"BertTokenizer"),nzr.forEach(t),mno=r(r$," or "),SB=n(r$,"A",{href:!0});var szr=s(SB);gno=r(szr,"BertTokenizerFast"),szr.forEach(t),hno=r(r$," (VisualBert model)"),r$.forEach(t),pno=i(S),Xg=n(S,"LI",{});var XCe=s(Xg);$te=n(XCe,"STRONG",{});var lzr=s($te);uno=r(lzr,"wav2vec2"),lzr.forEach(t),_no=r(XCe," \u2014 "),RB=n(XCe,"A",{href:!0});var izr=s(RB);bno=r(izr,"Wav2Vec2CTCTokenizer"),izr.forEach(t),vno=r(XCe," (Wav2Vec2 model)"),XCe.forEach(t),Fno=i(S),zg=n(S,"LI",{});var zCe=s(zg);kte=n(zCe,"STRONG",{});var dzr=s(kte);Tno=r(dzr,"wav2vec2_phoneme"),dzr.forEach(t),Mno=r(zCe," \u2014 "),BB=n(zCe,"A",{href:!0});var czr=s(BB);Eno=r(czr,"Wav2Vec2PhonemeCTCTokenizer"),czr.forEach(t),Cno=r(zCe," (Wav2Vec2Phoneme model)"),zCe.forEach(t),wno=i(S),ys=n(S,"LI",{});var t$=s(ys);Ste=n(t$,"STRONG",{});var fzr=s(Ste);Ano=r(fzr,"xglm"),fzr.forEach(t),yno=r(t$," \u2014 "),PB=n(t$,"A",{href:!0});var mzr=s(PB);Lno=r(mzr,"XGLMTokenizer"),mzr.forEach(t),xno=r(t$," or "),IB=n(t$,"A",{href:!0});var gzr=s(IB);$no=r(gzr,"XGLMTokenizerFast"),gzr.forEach(t),kno=r(t$," (XGLM model)"),t$.forEach(t),Sno=i(S),Qg=n(S,"LI",{});var QCe=s(Qg);Rte=n(QCe,"STRONG",{});var hzr=s(Rte);Rno=r(hzr,"xlm"),hzr.forEach(t),Bno=r(QCe," \u2014 "),qB=n(QCe,"A",{href:!0});var pzr=s(qB);Pno=r(pzr,"XLMTokenizer"),pzr.forEach(t),Ino=r(QCe," (XLM model)"),QCe.forEach(t),qno=i(S),Wg=n(S,"LI",{});var WCe=s(Wg);Bte=n(WCe,"STRONG",{});var uzr=s(Bte);Nno=r(uzr,"xlm-prophetnet"),uzr.forEach(t),jno=r(WCe," \u2014 "),NB=n(WCe,"A",{href:!0});var _zr=s(NB);Dno=r(_zr,"XLMProphetNetTokenizer"),_zr.forEach(t),Gno=r(WCe," (XLMProphetNet model)"),WCe.forEach(t),Ono=i(S),Ls=n(S,"LI",{});var a$=s(Ls);Pte=n(a$,"STRONG",{});var bzr=s(Pte);Vno=r(bzr,"xlm-roberta"),bzr.forEach(t),Xno=r(a$," \u2014 "),jB=n(a$,"A",{href:!0});var vzr=s(jB);zno=r(vzr,"XLMRobertaTokenizer"),vzr.forEach(t),Qno=r(a$," or "),DB=n(a$,"A",{href:!0});var Fzr=s(DB);Wno=r(Fzr,"XLMRobertaTokenizerFast"),Fzr.forEach(t),Hno=r(a$," (XLM-RoBERTa model)"),a$.forEach(t),Uno=i(S),xs=n(S,"LI",{});var n$=s(xs);Ite=n(n$,"STRONG",{});var Tzr=s(Ite);Jno=r(Tzr,"xlm-roberta-xl"),Tzr.forEach(t),Yno=r(n$," \u2014 "),GB=n(n$,"A",{href:!0});var Mzr=s(GB);Kno=r(Mzr,"RobertaTokenizer"),Mzr.forEach(t),Zno=r(n$," or "),OB=n(n$,"A",{href:!0});var Ezr=s(OB);eso=r(Ezr,"RobertaTokenizerFast"),Ezr.forEach(t),oso=r(n$," (XLM-RoBERTa-XL model)"),n$.forEach(t),rso=i(S),$s=n(S,"LI",{});var s$=s($s);qte=n(s$,"STRONG",{});var Czr=s(qte);tso=r(Czr,"xlnet"),Czr.forEach(t),aso=r(s$," \u2014 "),VB=n(s$,"A",{href:!0});var wzr=s(VB);nso=r(wzr,"XLNetTokenizer"),wzr.forEach(t),sso=r(s$," or "),XB=n(s$,"A",{href:!0});var Azr=s(XB);lso=r(Azr,"XLNetTokenizerFast"),Azr.forEach(t),iso=r(s$," (XLNet model)"),s$.forEach(t),dso=i(S),ks=n(S,"LI",{});var l$=s(ks);Nte=n(l$,"STRONG",{});var yzr=s(Nte);cso=r(yzr,"yoso"),yzr.forEach(t),fso=r(l$," \u2014 "),zB=n(l$,"A",{href:!0});var Lzr=s(zB);mso=r(Lzr,"AlbertTokenizer"),Lzr.forEach(t),gso=r(l$," or "),QB=n(l$,"A",{href:!0});var xzr=s(QB);hso=r(xzr,"AlbertTokenizerFast"),xzr.forEach(t),pso=r(l$," (YOSO model)"),l$.forEach(t),S.forEach(t),uso=i(Is),T(Hg.$$.fragment,Is),Is.forEach(t),_so=i(Ps),Ug=n(Ps,"DIV",{class:!0});var jqe=s(Ug);T(l6.$$.fragment,jqe),bso=i(jqe),jte=n(jqe,"P",{});var $zr=s(jte);vso=r($zr,"Register a new tokenizer in this mapping."),$zr.forEach(t),jqe.forEach(t),Ps.forEach(t),DPe=i(f),bi=n(f,"H2",{class:!0});var Dqe=s(bi);Jg=n(Dqe,"A",{id:!0,class:!0,href:!0});var kzr=s(Jg);Dte=n(kzr,"SPAN",{});var Szr=s(Dte);T(i6.$$.fragment,Szr),Szr.forEach(t),kzr.forEach(t),Fso=i(Dqe),Gte=n(Dqe,"SPAN",{});var Rzr=s(Gte);Tso=r(Rzr,"AutoFeatureExtractor"),Rzr.forEach(t),Dqe.forEach(t),GPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(d6.$$.fragment,qs),Mso=i(qs),c6=n(qs,"P",{});var Gqe=s(c6);Eso=r(Gqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=n(Gqe,"A",{href:!0});var Bzr=s(WB);Cso=r(Bzr,"AutoFeatureExtractor.from_pretrained()"),Bzr.forEach(t),wso=r(Gqe," class method."),Gqe.forEach(t),Aso=i(qs),f6=n(qs,"P",{});var Oqe=s(f6);yso=r(Oqe,"This class cannot be instantiated directly using "),Ote=n(Oqe,"CODE",{});var Pzr=s(Ote);Lso=r(Pzr,"__init__()"),Pzr.forEach(t),xso=r(Oqe," (throws an error)."),Oqe.forEach(t),$so=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(m6.$$.fragment,Yt),kso=i(Yt),Vte=n(Yt,"P",{});var Izr=s(Vte);Sso=r(Izr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Izr.forEach(t),Rso=i(Yt),wa=n(Yt,"P",{});var J3=s(wa);Bso=r(J3,"The feature extractor class to instantiate is selected based on the "),Xte=n(J3,"CODE",{});var qzr=s(Xte);Pso=r(qzr,"model_type"),qzr.forEach(t),Iso=r(J3,` property of the config object
(either passed as an argument or loaded from `),zte=n(J3,"CODE",{});var Nzr=s(zte);qso=r(Nzr,"pretrained_model_name_or_path"),Nzr.forEach(t),Nso=r(J3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qte=n(J3,"CODE",{});var jzr=s(Qte);jso=r(jzr,"pretrained_model_name_or_path"),jzr.forEach(t),Dso=r(J3,":"),J3.forEach(t),Gso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var HCe=s(Yg);Wte=n(HCe,"STRONG",{});var Dzr=s(Wte);Oso=r(Dzr,"beit"),Dzr.forEach(t),Vso=r(HCe," \u2014 "),HB=n(HCe,"A",{href:!0});var Gzr=s(HB);Xso=r(Gzr,"BeitFeatureExtractor"),Gzr.forEach(t),zso=r(HCe," (BEiT model)"),HCe.forEach(t),Qso=i(ae),Kg=n(ae,"LI",{});var UCe=s(Kg);Hte=n(UCe,"STRONG",{});var Ozr=s(Hte);Wso=r(Ozr,"clip"),Ozr.forEach(t),Hso=r(UCe," \u2014 "),UB=n(UCe,"A",{href:!0});var Vzr=s(UB);Uso=r(Vzr,"CLIPFeatureExtractor"),Vzr.forEach(t),Jso=r(UCe," (CLIP model)"),UCe.forEach(t),Yso=i(ae),Zg=n(ae,"LI",{});var JCe=s(Zg);Ute=n(JCe,"STRONG",{});var Xzr=s(Ute);Kso=r(Xzr,"convnext"),Xzr.forEach(t),Zso=r(JCe," \u2014 "),JB=n(JCe,"A",{href:!0});var zzr=s(JB);elo=r(zzr,"ConvNextFeatureExtractor"),zzr.forEach(t),olo=r(JCe," (ConvNext model)"),JCe.forEach(t),rlo=i(ae),eh=n(ae,"LI",{});var YCe=s(eh);Jte=n(YCe,"STRONG",{});var Qzr=s(Jte);tlo=r(Qzr,"data2vec-audio"),Qzr.forEach(t),alo=r(YCe," \u2014 "),YB=n(YCe,"A",{href:!0});var Wzr=s(YB);nlo=r(Wzr,"Wav2Vec2FeatureExtractor"),Wzr.forEach(t),slo=r(YCe," (Data2VecAudio model)"),YCe.forEach(t),llo=i(ae),oh=n(ae,"LI",{});var KCe=s(oh);Yte=n(KCe,"STRONG",{});var Hzr=s(Yte);ilo=r(Hzr,"data2vec-vision"),Hzr.forEach(t),dlo=r(KCe," \u2014 "),KB=n(KCe,"A",{href:!0});var Uzr=s(KB);clo=r(Uzr,"BeitFeatureExtractor"),Uzr.forEach(t),flo=r(KCe," (Data2VecVision model)"),KCe.forEach(t),mlo=i(ae),rh=n(ae,"LI",{});var ZCe=s(rh);Kte=n(ZCe,"STRONG",{});var Jzr=s(Kte);glo=r(Jzr,"deit"),Jzr.forEach(t),hlo=r(ZCe," \u2014 "),ZB=n(ZCe,"A",{href:!0});var Yzr=s(ZB);plo=r(Yzr,"DeiTFeatureExtractor"),Yzr.forEach(t),ulo=r(ZCe," (DeiT model)"),ZCe.forEach(t),_lo=i(ae),th=n(ae,"LI",{});var e3e=s(th);Zte=n(e3e,"STRONG",{});var Kzr=s(Zte);blo=r(Kzr,"detr"),Kzr.forEach(t),vlo=r(e3e," \u2014 "),eP=n(e3e,"A",{href:!0});var Zzr=s(eP);Flo=r(Zzr,"DetrFeatureExtractor"),Zzr.forEach(t),Tlo=r(e3e," (DETR model)"),e3e.forEach(t),Mlo=i(ae),ah=n(ae,"LI",{});var o3e=s(ah);eae=n(o3e,"STRONG",{});var eQr=s(eae);Elo=r(eQr,"dpt"),eQr.forEach(t),Clo=r(o3e," \u2014 "),oP=n(o3e,"A",{href:!0});var oQr=s(oP);wlo=r(oQr,"DPTFeatureExtractor"),oQr.forEach(t),Alo=r(o3e," (DPT model)"),o3e.forEach(t),ylo=i(ae),nh=n(ae,"LI",{});var r3e=s(nh);oae=n(r3e,"STRONG",{});var rQr=s(oae);Llo=r(rQr,"flava"),rQr.forEach(t),xlo=r(r3e," \u2014 "),rP=n(r3e,"A",{href:!0});var tQr=s(rP);$lo=r(tQr,"FlavaFeatureExtractor"),tQr.forEach(t),klo=r(r3e," (Flava model)"),r3e.forEach(t),Slo=i(ae),sh=n(ae,"LI",{});var t3e=s(sh);rae=n(t3e,"STRONG",{});var aQr=s(rae);Rlo=r(aQr,"glpn"),aQr.forEach(t),Blo=r(t3e," \u2014 "),tP=n(t3e,"A",{href:!0});var nQr=s(tP);Plo=r(nQr,"GLPNFeatureExtractor"),nQr.forEach(t),Ilo=r(t3e," (GLPN model)"),t3e.forEach(t),qlo=i(ae),lh=n(ae,"LI",{});var a3e=s(lh);tae=n(a3e,"STRONG",{});var sQr=s(tae);Nlo=r(sQr,"hubert"),sQr.forEach(t),jlo=r(a3e," \u2014 "),aP=n(a3e,"A",{href:!0});var lQr=s(aP);Dlo=r(lQr,"Wav2Vec2FeatureExtractor"),lQr.forEach(t),Glo=r(a3e," (Hubert model)"),a3e.forEach(t),Olo=i(ae),ih=n(ae,"LI",{});var n3e=s(ih);aae=n(n3e,"STRONG",{});var iQr=s(aae);Vlo=r(iQr,"layoutlmv2"),iQr.forEach(t),Xlo=r(n3e," \u2014 "),nP=n(n3e,"A",{href:!0});var dQr=s(nP);zlo=r(dQr,"LayoutLMv2FeatureExtractor"),dQr.forEach(t),Qlo=r(n3e," (LayoutLMv2 model)"),n3e.forEach(t),Wlo=i(ae),dh=n(ae,"LI",{});var s3e=s(dh);nae=n(s3e,"STRONG",{});var cQr=s(nae);Hlo=r(cQr,"maskformer"),cQr.forEach(t),Ulo=r(s3e," \u2014 "),sP=n(s3e,"A",{href:!0});var fQr=s(sP);Jlo=r(fQr,"MaskFormerFeatureExtractor"),fQr.forEach(t),Ylo=r(s3e," (MaskFormer model)"),s3e.forEach(t),Klo=i(ae),ch=n(ae,"LI",{});var l3e=s(ch);sae=n(l3e,"STRONG",{});var mQr=s(sae);Zlo=r(mQr,"perceiver"),mQr.forEach(t),eio=r(l3e," \u2014 "),lP=n(l3e,"A",{href:!0});var gQr=s(lP);oio=r(gQr,"PerceiverFeatureExtractor"),gQr.forEach(t),rio=r(l3e," (Perceiver model)"),l3e.forEach(t),tio=i(ae),fh=n(ae,"LI",{});var i3e=s(fh);lae=n(i3e,"STRONG",{});var hQr=s(lae);aio=r(hQr,"poolformer"),hQr.forEach(t),nio=r(i3e," \u2014 "),iP=n(i3e,"A",{href:!0});var pQr=s(iP);sio=r(pQr,"PoolFormerFeatureExtractor"),pQr.forEach(t),lio=r(i3e," (PoolFormer model)"),i3e.forEach(t),iio=i(ae),mh=n(ae,"LI",{});var d3e=s(mh);iae=n(d3e,"STRONG",{});var uQr=s(iae);dio=r(uQr,"regnet"),uQr.forEach(t),cio=r(d3e," \u2014 "),dP=n(d3e,"A",{href:!0});var _Qr=s(dP);fio=r(_Qr,"ConvNextFeatureExtractor"),_Qr.forEach(t),mio=r(d3e," (RegNet model)"),d3e.forEach(t),gio=i(ae),gh=n(ae,"LI",{});var c3e=s(gh);dae=n(c3e,"STRONG",{});var bQr=s(dae);hio=r(bQr,"resnet"),bQr.forEach(t),pio=r(c3e," \u2014 "),cP=n(c3e,"A",{href:!0});var vQr=s(cP);uio=r(vQr,"ConvNextFeatureExtractor"),vQr.forEach(t),_io=r(c3e," (ResNet model)"),c3e.forEach(t),bio=i(ae),hh=n(ae,"LI",{});var f3e=s(hh);cae=n(f3e,"STRONG",{});var FQr=s(cae);vio=r(FQr,"segformer"),FQr.forEach(t),Fio=r(f3e," \u2014 "),fP=n(f3e,"A",{href:!0});var TQr=s(fP);Tio=r(TQr,"SegformerFeatureExtractor"),TQr.forEach(t),Mio=r(f3e," (SegFormer model)"),f3e.forEach(t),Eio=i(ae),ph=n(ae,"LI",{});var m3e=s(ph);fae=n(m3e,"STRONG",{});var MQr=s(fae);Cio=r(MQr,"speech_to_text"),MQr.forEach(t),wio=r(m3e," \u2014 "),mP=n(m3e,"A",{href:!0});var EQr=s(mP);Aio=r(EQr,"Speech2TextFeatureExtractor"),EQr.forEach(t),yio=r(m3e," (Speech2Text model)"),m3e.forEach(t),Lio=i(ae),uh=n(ae,"LI",{});var g3e=s(uh);mae=n(g3e,"STRONG",{});var CQr=s(mae);xio=r(CQr,"swin"),CQr.forEach(t),$io=r(g3e," \u2014 "),gP=n(g3e,"A",{href:!0});var wQr=s(gP);kio=r(wQr,"ViTFeatureExtractor"),wQr.forEach(t),Sio=r(g3e," (Swin model)"),g3e.forEach(t),Rio=i(ae),_h=n(ae,"LI",{});var h3e=s(_h);gae=n(h3e,"STRONG",{});var AQr=s(gae);Bio=r(AQr,"van"),AQr.forEach(t),Pio=r(h3e," \u2014 "),hP=n(h3e,"A",{href:!0});var yQr=s(hP);Iio=r(yQr,"ConvNextFeatureExtractor"),yQr.forEach(t),qio=r(h3e," (VAN model)"),h3e.forEach(t),Nio=i(ae),bh=n(ae,"LI",{});var p3e=s(bh);hae=n(p3e,"STRONG",{});var LQr=s(hae);jio=r(LQr,"vit"),LQr.forEach(t),Dio=r(p3e," \u2014 "),pP=n(p3e,"A",{href:!0});var xQr=s(pP);Gio=r(xQr,"ViTFeatureExtractor"),xQr.forEach(t),Oio=r(p3e," (ViT model)"),p3e.forEach(t),Vio=i(ae),vh=n(ae,"LI",{});var u3e=s(vh);pae=n(u3e,"STRONG",{});var $Qr=s(pae);Xio=r($Qr,"vit_mae"),$Qr.forEach(t),zio=r(u3e," \u2014 "),uP=n(u3e,"A",{href:!0});var kQr=s(uP);Qio=r(kQr,"ViTFeatureExtractor"),kQr.forEach(t),Wio=r(u3e," (ViTMAE model)"),u3e.forEach(t),Hio=i(ae),Fh=n(ae,"LI",{});var _3e=s(Fh);uae=n(_3e,"STRONG",{});var SQr=s(uae);Uio=r(SQr,"wav2vec2"),SQr.forEach(t),Jio=r(_3e," \u2014 "),_P=n(_3e,"A",{href:!0});var RQr=s(_P);Yio=r(RQr,"Wav2Vec2FeatureExtractor"),RQr.forEach(t),Kio=r(_3e," (Wav2Vec2 model)"),_3e.forEach(t),Zio=i(ae),Th=n(ae,"LI",{});var b3e=s(Th);_ae=n(b3e,"STRONG",{});var BQr=s(_ae);edo=r(BQr,"yolos"),BQr.forEach(t),odo=r(b3e," \u2014 "),bP=n(b3e,"A",{href:!0});var PQr=s(bP);rdo=r(PQr,"YolosFeatureExtractor"),PQr.forEach(t),tdo=r(b3e," (YOLOS model)"),b3e.forEach(t),ae.forEach(t),ado=i(Yt),T(Mh.$$.fragment,Yt),ndo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),sdo=i(qs),Ch=n(qs,"DIV",{class:!0});var Vqe=s(Ch);T(g6.$$.fragment,Vqe),ldo=i(Vqe),bae=n(Vqe,"P",{});var IQr=s(bae);ido=r(IQr,"Register a new feature extractor for this class."),IQr.forEach(t),Vqe.forEach(t),qs.forEach(t),OPe=i(f),vi=n(f,"H2",{class:!0});var Xqe=s(vi);wh=n(Xqe,"A",{id:!0,class:!0,href:!0});var qQr=s(wh);vae=n(qQr,"SPAN",{});var NQr=s(vae);T(h6.$$.fragment,NQr),NQr.forEach(t),qQr.forEach(t),ddo=i(Xqe),Fae=n(Xqe,"SPAN",{});var jQr=s(Fae);cdo=r(jQr,"AutoProcessor"),jQr.forEach(t),Xqe.forEach(t),VPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(p6.$$.fragment,Ns),fdo=i(Ns),u6=n(Ns,"P",{});var zqe=s(u6);mdo=r(zqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vP=n(zqe,"A",{href:!0});var DQr=s(vP);gdo=r(DQr,"AutoProcessor.from_pretrained()"),DQr.forEach(t),hdo=r(zqe," class method."),zqe.forEach(t),pdo=i(Ns),_6=n(Ns,"P",{});var Qqe=s(_6);udo=r(Qqe,"This class cannot be instantiated directly using "),Tae=n(Qqe,"CODE",{});var GQr=s(Tae);_do=r(GQr,"__init__()"),GQr.forEach(t),bdo=r(Qqe," (throws an error)."),Qqe.forEach(t),vdo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(b6.$$.fragment,Kt),Fdo=i(Kt),Mae=n(Kt,"P",{});var OQr=s(Mae);Tdo=r(OQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),OQr.forEach(t),Mdo=i(Kt),Fi=n(Kt,"P",{});var oK=s(Fi);Edo=r(oK,"The processor class to instantiate is selected based on the "),Eae=n(oK,"CODE",{});var VQr=s(Eae);Cdo=r(VQr,"model_type"),VQr.forEach(t),wdo=r(oK,` property of the config object (either
passed as an argument or loaded from `),Cae=n(oK,"CODE",{});var XQr=s(Cae);Ado=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),ydo=r(oK," if possible):"),oK.forEach(t),Ldo=i(Kt),_e=n(Kt,"UL",{});var ve=s(_e);Ah=n(ve,"LI",{});var v3e=s(Ah);wae=n(v3e,"STRONG",{});var zQr=s(wae);xdo=r(zQr,"clip"),zQr.forEach(t),$do=r(v3e," \u2014 "),FP=n(v3e,"A",{href:!0});var QQr=s(FP);kdo=r(QQr,"CLIPProcessor"),QQr.forEach(t),Sdo=r(v3e," (CLIP model)"),v3e.forEach(t),Rdo=i(ve),yh=n(ve,"LI",{});var F3e=s(yh);Aae=n(F3e,"STRONG",{});var WQr=s(Aae);Bdo=r(WQr,"flava"),WQr.forEach(t),Pdo=r(F3e," \u2014 "),yae=n(F3e,"CODE",{});var HQr=s(yae);Ido=r(HQr,"FLAVAProcessor"),HQr.forEach(t),qdo=r(F3e," (Flava model)"),F3e.forEach(t),Ndo=i(ve),Lh=n(ve,"LI",{});var T3e=s(Lh);Lae=n(T3e,"STRONG",{});var UQr=s(Lae);jdo=r(UQr,"layoutlmv2"),UQr.forEach(t),Ddo=r(T3e," \u2014 "),TP=n(T3e,"A",{href:!0});var JQr=s(TP);Gdo=r(JQr,"LayoutLMv2Processor"),JQr.forEach(t),Odo=r(T3e," (LayoutLMv2 model)"),T3e.forEach(t),Vdo=i(ve),xh=n(ve,"LI",{});var M3e=s(xh);xae=n(M3e,"STRONG",{});var YQr=s(xae);Xdo=r(YQr,"layoutxlm"),YQr.forEach(t),zdo=r(M3e," \u2014 "),MP=n(M3e,"A",{href:!0});var KQr=s(MP);Qdo=r(KQr,"LayoutXLMProcessor"),KQr.forEach(t),Wdo=r(M3e," (LayoutXLM model)"),M3e.forEach(t),Hdo=i(ve),$h=n(ve,"LI",{});var E3e=s($h);$ae=n(E3e,"STRONG",{});var ZQr=s($ae);Udo=r(ZQr,"sew"),ZQr.forEach(t),Jdo=r(E3e," \u2014 "),EP=n(E3e,"A",{href:!0});var eWr=s(EP);Ydo=r(eWr,"Wav2Vec2Processor"),eWr.forEach(t),Kdo=r(E3e," (SEW model)"),E3e.forEach(t),Zdo=i(ve),kh=n(ve,"LI",{});var C3e=s(kh);kae=n(C3e,"STRONG",{});var oWr=s(kae);eco=r(oWr,"sew-d"),oWr.forEach(t),oco=r(C3e," \u2014 "),CP=n(C3e,"A",{href:!0});var rWr=s(CP);rco=r(rWr,"Wav2Vec2Processor"),rWr.forEach(t),tco=r(C3e," (SEW-D model)"),C3e.forEach(t),aco=i(ve),Sh=n(ve,"LI",{});var w3e=s(Sh);Sae=n(w3e,"STRONG",{});var tWr=s(Sae);nco=r(tWr,"speech_to_text"),tWr.forEach(t),sco=r(w3e," \u2014 "),wP=n(w3e,"A",{href:!0});var aWr=s(wP);lco=r(aWr,"Speech2TextProcessor"),aWr.forEach(t),ico=r(w3e," (Speech2Text model)"),w3e.forEach(t),dco=i(ve),Rh=n(ve,"LI",{});var A3e=s(Rh);Rae=n(A3e,"STRONG",{});var nWr=s(Rae);cco=r(nWr,"speech_to_text_2"),nWr.forEach(t),fco=r(A3e," \u2014 "),AP=n(A3e,"A",{href:!0});var sWr=s(AP);mco=r(sWr,"Speech2Text2Processor"),sWr.forEach(t),gco=r(A3e," (Speech2Text2 model)"),A3e.forEach(t),hco=i(ve),Bh=n(ve,"LI",{});var y3e=s(Bh);Bae=n(y3e,"STRONG",{});var lWr=s(Bae);pco=r(lWr,"trocr"),lWr.forEach(t),uco=r(y3e," \u2014 "),yP=n(y3e,"A",{href:!0});var iWr=s(yP);_co=r(iWr,"TrOCRProcessor"),iWr.forEach(t),bco=r(y3e," (TrOCR model)"),y3e.forEach(t),vco=i(ve),Ph=n(ve,"LI",{});var L3e=s(Ph);Pae=n(L3e,"STRONG",{});var dWr=s(Pae);Fco=r(dWr,"unispeech"),dWr.forEach(t),Tco=r(L3e," \u2014 "),LP=n(L3e,"A",{href:!0});var cWr=s(LP);Mco=r(cWr,"Wav2Vec2Processor"),cWr.forEach(t),Eco=r(L3e," (UniSpeech model)"),L3e.forEach(t),Cco=i(ve),Ih=n(ve,"LI",{});var x3e=s(Ih);Iae=n(x3e,"STRONG",{});var fWr=s(Iae);wco=r(fWr,"unispeech-sat"),fWr.forEach(t),Aco=r(x3e," \u2014 "),xP=n(x3e,"A",{href:!0});var mWr=s(xP);yco=r(mWr,"Wav2Vec2Processor"),mWr.forEach(t),Lco=r(x3e," (UniSpeechSat model)"),x3e.forEach(t),xco=i(ve),qh=n(ve,"LI",{});var $3e=s(qh);qae=n($3e,"STRONG",{});var gWr=s(qae);$co=r(gWr,"vilt"),gWr.forEach(t),kco=r($3e," \u2014 "),$P=n($3e,"A",{href:!0});var hWr=s($P);Sco=r(hWr,"ViltProcessor"),hWr.forEach(t),Rco=r($3e," (ViLT model)"),$3e.forEach(t),Bco=i(ve),Nh=n(ve,"LI",{});var k3e=s(Nh);Nae=n(k3e,"STRONG",{});var pWr=s(Nae);Pco=r(pWr,"vision-text-dual-encoder"),pWr.forEach(t),Ico=r(k3e," \u2014 "),kP=n(k3e,"A",{href:!0});var uWr=s(kP);qco=r(uWr,"VisionTextDualEncoderProcessor"),uWr.forEach(t),Nco=r(k3e," (VisionTextDualEncoder model)"),k3e.forEach(t),jco=i(ve),jh=n(ve,"LI",{});var S3e=s(jh);jae=n(S3e,"STRONG",{});var _Wr=s(jae);Dco=r(_Wr,"wav2vec2"),_Wr.forEach(t),Gco=r(S3e," \u2014 "),SP=n(S3e,"A",{href:!0});var bWr=s(SP);Oco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),Vco=r(S3e," (Wav2Vec2 model)"),S3e.forEach(t),Xco=i(ve),Dh=n(ve,"LI",{});var R3e=s(Dh);Dae=n(R3e,"STRONG",{});var vWr=s(Dae);zco=r(vWr,"wavlm"),vWr.forEach(t),Qco=r(R3e," \u2014 "),RP=n(R3e,"A",{href:!0});var FWr=s(RP);Wco=r(FWr,"Wav2Vec2Processor"),FWr.forEach(t),Hco=r(R3e," (WavLM model)"),R3e.forEach(t),ve.forEach(t),Uco=i(Kt),T(Gh.$$.fragment,Kt),Jco=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),Yco=i(Ns),Vh=n(Ns,"DIV",{class:!0});var Wqe=s(Vh);T(v6.$$.fragment,Wqe),Kco=i(Wqe),Gae=n(Wqe,"P",{});var TWr=s(Gae);Zco=r(TWr,"Register a new processor for this class."),TWr.forEach(t),Wqe.forEach(t),Ns.forEach(t),XPe=i(f),Ti=n(f,"H2",{class:!0});var Hqe=s(Ti);Xh=n(Hqe,"A",{id:!0,class:!0,href:!0});var MWr=s(Xh);Oae=n(MWr,"SPAN",{});var EWr=s(Oae);T(F6.$$.fragment,EWr),EWr.forEach(t),MWr.forEach(t),efo=i(Hqe),Vae=n(Hqe,"SPAN",{});var CWr=s(Vae);ofo=r(CWr,"AutoModel"),CWr.forEach(t),Hqe.forEach(t),zPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(T6.$$.fragment,js),rfo=i(js),Mi=n(js,"P",{});var rK=s(Mi);tfo=r(rK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BP=n(rK,"A",{href:!0});var wWr=s(BP);afo=r(wWr,"from_pretrained()"),wWr.forEach(t),nfo=r(rK," class method or the "),PP=n(rK,"A",{href:!0});var AWr=s(PP);sfo=r(AWr,"from_config()"),AWr.forEach(t),lfo=r(rK,` class
method.`),rK.forEach(t),ifo=i(js),M6=n(js,"P",{});var Uqe=s(M6);dfo=r(Uqe,"This class cannot be instantiated directly using "),Xae=n(Uqe,"CODE",{});var yWr=s(Xae);cfo=r(yWr,"__init__()"),yWr.forEach(t),ffo=r(Uqe," (throws an error)."),Uqe.forEach(t),mfo=i(js),ot=n(js,"DIV",{class:!0});var Y3=s(ot);T(E6.$$.fragment,Y3),gfo=i(Y3),zae=n(Y3,"P",{});var LWr=s(zae);hfo=r(LWr,"Instantiates one of the base model classes of the library from a configuration."),LWr.forEach(t),pfo=i(Y3),Ei=n(Y3,"P",{});var tK=s(Ei);ufo=r(tK,`Note:
Loading a model from its configuration file does `),Qae=n(tK,"STRONG",{});var xWr=s(Qae);_fo=r(xWr,"not"),xWr.forEach(t),bfo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=n(tK,"A",{href:!0});var $Wr=s(IP);vfo=r($Wr,"from_pretrained()"),$Wr.forEach(t),Ffo=r(tK," to load the model weights."),tK.forEach(t),Tfo=i(Y3),T(zh.$$.fragment,Y3),Y3.forEach(t),Mfo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(C6.$$.fragment,Zt),Efo=i(Zt),Wae=n(Zt,"P",{});var kWr=s(Wae);Cfo=r(kWr,"Instantiate one of the base model classes of the library from a pretrained model."),kWr.forEach(t),wfo=i(Zt),Aa=n(Zt,"P",{});var K3=s(Aa);Afo=r(K3,"The model class to instantiate is selected based on the "),Hae=n(K3,"CODE",{});var SWr=s(Hae);yfo=r(SWr,"model_type"),SWr.forEach(t),Lfo=r(K3,` property of the config object (either
passed as an argument or loaded from `),Uae=n(K3,"CODE",{});var RWr=s(Uae);xfo=r(RWr,"pretrained_model_name_or_path"),RWr.forEach(t),$fo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jae=n(K3,"CODE",{});var BWr=s(Jae);kfo=r(BWr,"pretrained_model_name_or_path"),BWr.forEach(t),Sfo=r(K3,":"),K3.forEach(t),Rfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var B3e=s(Qh);Yae=n(B3e,"STRONG",{});var PWr=s(Yae);Bfo=r(PWr,"albert"),PWr.forEach(t),Pfo=r(B3e," \u2014 "),qP=n(B3e,"A",{href:!0});var IWr=s(qP);Ifo=r(IWr,"AlbertModel"),IWr.forEach(t),qfo=r(B3e," (ALBERT model)"),B3e.forEach(t),Nfo=i($),Wh=n($,"LI",{});var P3e=s(Wh);Kae=n(P3e,"STRONG",{});var qWr=s(Kae);jfo=r(qWr,"bart"),qWr.forEach(t),Dfo=r(P3e," \u2014 "),NP=n(P3e,"A",{href:!0});var NWr=s(NP);Gfo=r(NWr,"BartModel"),NWr.forEach(t),Ofo=r(P3e," (BART model)"),P3e.forEach(t),Vfo=i($),Hh=n($,"LI",{});var I3e=s(Hh);Zae=n(I3e,"STRONG",{});var jWr=s(Zae);Xfo=r(jWr,"beit"),jWr.forEach(t),zfo=r(I3e," \u2014 "),jP=n(I3e,"A",{href:!0});var DWr=s(jP);Qfo=r(DWr,"BeitModel"),DWr.forEach(t),Wfo=r(I3e," (BEiT model)"),I3e.forEach(t),Hfo=i($),Uh=n($,"LI",{});var q3e=s(Uh);ene=n(q3e,"STRONG",{});var GWr=s(ene);Ufo=r(GWr,"bert"),GWr.forEach(t),Jfo=r(q3e," \u2014 "),DP=n(q3e,"A",{href:!0});var OWr=s(DP);Yfo=r(OWr,"BertModel"),OWr.forEach(t),Kfo=r(q3e," (BERT model)"),q3e.forEach(t),Zfo=i($),Jh=n($,"LI",{});var N3e=s(Jh);one=n(N3e,"STRONG",{});var VWr=s(one);emo=r(VWr,"bert-generation"),VWr.forEach(t),omo=r(N3e," \u2014 "),GP=n(N3e,"A",{href:!0});var XWr=s(GP);rmo=r(XWr,"BertGenerationEncoder"),XWr.forEach(t),tmo=r(N3e," (Bert Generation model)"),N3e.forEach(t),amo=i($),Yh=n($,"LI",{});var j3e=s(Yh);rne=n(j3e,"STRONG",{});var zWr=s(rne);nmo=r(zWr,"big_bird"),zWr.forEach(t),smo=r(j3e," \u2014 "),OP=n(j3e,"A",{href:!0});var QWr=s(OP);lmo=r(QWr,"BigBirdModel"),QWr.forEach(t),imo=r(j3e," (BigBird model)"),j3e.forEach(t),dmo=i($),Kh=n($,"LI",{});var D3e=s(Kh);tne=n(D3e,"STRONG",{});var WWr=s(tne);cmo=r(WWr,"bigbird_pegasus"),WWr.forEach(t),fmo=r(D3e," \u2014 "),VP=n(D3e,"A",{href:!0});var HWr=s(VP);mmo=r(HWr,"BigBirdPegasusModel"),HWr.forEach(t),gmo=r(D3e," (BigBirdPegasus model)"),D3e.forEach(t),hmo=i($),Zh=n($,"LI",{});var G3e=s(Zh);ane=n(G3e,"STRONG",{});var UWr=s(ane);pmo=r(UWr,"blenderbot"),UWr.forEach(t),umo=r(G3e," \u2014 "),XP=n(G3e,"A",{href:!0});var JWr=s(XP);_mo=r(JWr,"BlenderbotModel"),JWr.forEach(t),bmo=r(G3e," (Blenderbot model)"),G3e.forEach(t),vmo=i($),ep=n($,"LI",{});var O3e=s(ep);nne=n(O3e,"STRONG",{});var YWr=s(nne);Fmo=r(YWr,"blenderbot-small"),YWr.forEach(t),Tmo=r(O3e," \u2014 "),zP=n(O3e,"A",{href:!0});var KWr=s(zP);Mmo=r(KWr,"BlenderbotSmallModel"),KWr.forEach(t),Emo=r(O3e," (BlenderbotSmall model)"),O3e.forEach(t),Cmo=i($),op=n($,"LI",{});var V3e=s(op);sne=n(V3e,"STRONG",{});var ZWr=s(sne);wmo=r(ZWr,"camembert"),ZWr.forEach(t),Amo=r(V3e," \u2014 "),QP=n(V3e,"A",{href:!0});var eHr=s(QP);ymo=r(eHr,"CamembertModel"),eHr.forEach(t),Lmo=r(V3e," (CamemBERT model)"),V3e.forEach(t),xmo=i($),rp=n($,"LI",{});var X3e=s(rp);lne=n(X3e,"STRONG",{});var oHr=s(lne);$mo=r(oHr,"canine"),oHr.forEach(t),kmo=r(X3e," \u2014 "),WP=n(X3e,"A",{href:!0});var rHr=s(WP);Smo=r(rHr,"CanineModel"),rHr.forEach(t),Rmo=r(X3e," (Canine model)"),X3e.forEach(t),Bmo=i($),tp=n($,"LI",{});var z3e=s(tp);ine=n(z3e,"STRONG",{});var tHr=s(ine);Pmo=r(tHr,"clip"),tHr.forEach(t),Imo=r(z3e," \u2014 "),HP=n(z3e,"A",{href:!0});var aHr=s(HP);qmo=r(aHr,"CLIPModel"),aHr.forEach(t),Nmo=r(z3e," (CLIP model)"),z3e.forEach(t),jmo=i($),ap=n($,"LI",{});var Q3e=s(ap);dne=n(Q3e,"STRONG",{});var nHr=s(dne);Dmo=r(nHr,"convbert"),nHr.forEach(t),Gmo=r(Q3e," \u2014 "),UP=n(Q3e,"A",{href:!0});var sHr=s(UP);Omo=r(sHr,"ConvBertModel"),sHr.forEach(t),Vmo=r(Q3e," (ConvBERT model)"),Q3e.forEach(t),Xmo=i($),np=n($,"LI",{});var W3e=s(np);cne=n(W3e,"STRONG",{});var lHr=s(cne);zmo=r(lHr,"convnext"),lHr.forEach(t),Qmo=r(W3e," \u2014 "),JP=n(W3e,"A",{href:!0});var iHr=s(JP);Wmo=r(iHr,"ConvNextModel"),iHr.forEach(t),Hmo=r(W3e," (ConvNext model)"),W3e.forEach(t),Umo=i($),sp=n($,"LI",{});var H3e=s(sp);fne=n(H3e,"STRONG",{});var dHr=s(fne);Jmo=r(dHr,"ctrl"),dHr.forEach(t),Ymo=r(H3e," \u2014 "),YP=n(H3e,"A",{href:!0});var cHr=s(YP);Kmo=r(cHr,"CTRLModel"),cHr.forEach(t),Zmo=r(H3e," (CTRL model)"),H3e.forEach(t),ego=i($),lp=n($,"LI",{});var U3e=s(lp);mne=n(U3e,"STRONG",{});var fHr=s(mne);ogo=r(fHr,"data2vec-audio"),fHr.forEach(t),rgo=r(U3e," \u2014 "),KP=n(U3e,"A",{href:!0});var mHr=s(KP);tgo=r(mHr,"Data2VecAudioModel"),mHr.forEach(t),ago=r(U3e," (Data2VecAudio model)"),U3e.forEach(t),ngo=i($),ip=n($,"LI",{});var J3e=s(ip);gne=n(J3e,"STRONG",{});var gHr=s(gne);sgo=r(gHr,"data2vec-text"),gHr.forEach(t),lgo=r(J3e," \u2014 "),ZP=n(J3e,"A",{href:!0});var hHr=s(ZP);igo=r(hHr,"Data2VecTextModel"),hHr.forEach(t),dgo=r(J3e," (Data2VecText model)"),J3e.forEach(t),cgo=i($),dp=n($,"LI",{});var Y3e=s(dp);hne=n(Y3e,"STRONG",{});var pHr=s(hne);fgo=r(pHr,"data2vec-vision"),pHr.forEach(t),mgo=r(Y3e," \u2014 "),eI=n(Y3e,"A",{href:!0});var uHr=s(eI);ggo=r(uHr,"Data2VecVisionModel"),uHr.forEach(t),hgo=r(Y3e," (Data2VecVision model)"),Y3e.forEach(t),pgo=i($),cp=n($,"LI",{});var K3e=s(cp);pne=n(K3e,"STRONG",{});var _Hr=s(pne);ugo=r(_Hr,"deberta"),_Hr.forEach(t),_go=r(K3e," \u2014 "),oI=n(K3e,"A",{href:!0});var bHr=s(oI);bgo=r(bHr,"DebertaModel"),bHr.forEach(t),vgo=r(K3e," (DeBERTa model)"),K3e.forEach(t),Fgo=i($),fp=n($,"LI",{});var Z3e=s(fp);une=n(Z3e,"STRONG",{});var vHr=s(une);Tgo=r(vHr,"deberta-v2"),vHr.forEach(t),Mgo=r(Z3e," \u2014 "),rI=n(Z3e,"A",{href:!0});var FHr=s(rI);Ego=r(FHr,"DebertaV2Model"),FHr.forEach(t),Cgo=r(Z3e," (DeBERTa-v2 model)"),Z3e.forEach(t),wgo=i($),mp=n($,"LI",{});var ewe=s(mp);_ne=n(ewe,"STRONG",{});var THr=s(_ne);Ago=r(THr,"decision_transformer"),THr.forEach(t),ygo=r(ewe," \u2014 "),tI=n(ewe,"A",{href:!0});var MHr=s(tI);Lgo=r(MHr,"DecisionTransformerModel"),MHr.forEach(t),xgo=r(ewe," (Decision Transformer model)"),ewe.forEach(t),$go=i($),gp=n($,"LI",{});var owe=s(gp);bne=n(owe,"STRONG",{});var EHr=s(bne);kgo=r(EHr,"deit"),EHr.forEach(t),Sgo=r(owe," \u2014 "),aI=n(owe,"A",{href:!0});var CHr=s(aI);Rgo=r(CHr,"DeiTModel"),CHr.forEach(t),Bgo=r(owe," (DeiT model)"),owe.forEach(t),Pgo=i($),hp=n($,"LI",{});var rwe=s(hp);vne=n(rwe,"STRONG",{});var wHr=s(vne);Igo=r(wHr,"detr"),wHr.forEach(t),qgo=r(rwe," \u2014 "),nI=n(rwe,"A",{href:!0});var AHr=s(nI);Ngo=r(AHr,"DetrModel"),AHr.forEach(t),jgo=r(rwe," (DETR model)"),rwe.forEach(t),Dgo=i($),pp=n($,"LI",{});var twe=s(pp);Fne=n(twe,"STRONG",{});var yHr=s(Fne);Ggo=r(yHr,"distilbert"),yHr.forEach(t),Ogo=r(twe," \u2014 "),sI=n(twe,"A",{href:!0});var LHr=s(sI);Vgo=r(LHr,"DistilBertModel"),LHr.forEach(t),Xgo=r(twe," (DistilBERT model)"),twe.forEach(t),zgo=i($),up=n($,"LI",{});var awe=s(up);Tne=n(awe,"STRONG",{});var xHr=s(Tne);Qgo=r(xHr,"dpr"),xHr.forEach(t),Wgo=r(awe," \u2014 "),lI=n(awe,"A",{href:!0});var $Hr=s(lI);Hgo=r($Hr,"DPRQuestionEncoder"),$Hr.forEach(t),Ugo=r(awe," (DPR model)"),awe.forEach(t),Jgo=i($),_p=n($,"LI",{});var nwe=s(_p);Mne=n(nwe,"STRONG",{});var kHr=s(Mne);Ygo=r(kHr,"dpt"),kHr.forEach(t),Kgo=r(nwe," \u2014 "),iI=n(nwe,"A",{href:!0});var SHr=s(iI);Zgo=r(SHr,"DPTModel"),SHr.forEach(t),eho=r(nwe," (DPT model)"),nwe.forEach(t),oho=i($),bp=n($,"LI",{});var swe=s(bp);Ene=n(swe,"STRONG",{});var RHr=s(Ene);rho=r(RHr,"electra"),RHr.forEach(t),tho=r(swe," \u2014 "),dI=n(swe,"A",{href:!0});var BHr=s(dI);aho=r(BHr,"ElectraModel"),BHr.forEach(t),nho=r(swe," (ELECTRA model)"),swe.forEach(t),sho=i($),vp=n($,"LI",{});var lwe=s(vp);Cne=n(lwe,"STRONG",{});var PHr=s(Cne);lho=r(PHr,"flaubert"),PHr.forEach(t),iho=r(lwe," \u2014 "),cI=n(lwe,"A",{href:!0});var IHr=s(cI);dho=r(IHr,"FlaubertModel"),IHr.forEach(t),cho=r(lwe," (FlauBERT model)"),lwe.forEach(t),fho=i($),Fp=n($,"LI",{});var iwe=s(Fp);wne=n(iwe,"STRONG",{});var qHr=s(wne);mho=r(qHr,"flava"),qHr.forEach(t),gho=r(iwe," \u2014 "),fI=n(iwe,"A",{href:!0});var NHr=s(fI);hho=r(NHr,"FlavaModel"),NHr.forEach(t),pho=r(iwe," (Flava model)"),iwe.forEach(t),uho=i($),Tp=n($,"LI",{});var dwe=s(Tp);Ane=n(dwe,"STRONG",{});var jHr=s(Ane);_ho=r(jHr,"fnet"),jHr.forEach(t),bho=r(dwe," \u2014 "),mI=n(dwe,"A",{href:!0});var DHr=s(mI);vho=r(DHr,"FNetModel"),DHr.forEach(t),Fho=r(dwe," (FNet model)"),dwe.forEach(t),Tho=i($),Mp=n($,"LI",{});var cwe=s(Mp);yne=n(cwe,"STRONG",{});var GHr=s(yne);Mho=r(GHr,"fsmt"),GHr.forEach(t),Eho=r(cwe," \u2014 "),gI=n(cwe,"A",{href:!0});var OHr=s(gI);Cho=r(OHr,"FSMTModel"),OHr.forEach(t),who=r(cwe," (FairSeq Machine-Translation model)"),cwe.forEach(t),Aho=i($),Ss=n($,"LI",{});var i$=s(Ss);Lne=n(i$,"STRONG",{});var VHr=s(Lne);yho=r(VHr,"funnel"),VHr.forEach(t),Lho=r(i$," \u2014 "),hI=n(i$,"A",{href:!0});var XHr=s(hI);xho=r(XHr,"FunnelModel"),XHr.forEach(t),$ho=r(i$," or "),pI=n(i$,"A",{href:!0});var zHr=s(pI);kho=r(zHr,"FunnelBaseModel"),zHr.forEach(t),Sho=r(i$," (Funnel Transformer model)"),i$.forEach(t),Rho=i($),Ep=n($,"LI",{});var fwe=s(Ep);xne=n(fwe,"STRONG",{});var QHr=s(xne);Bho=r(QHr,"glpn"),QHr.forEach(t),Pho=r(fwe," \u2014 "),uI=n(fwe,"A",{href:!0});var WHr=s(uI);Iho=r(WHr,"GLPNModel"),WHr.forEach(t),qho=r(fwe," (GLPN model)"),fwe.forEach(t),Nho=i($),Cp=n($,"LI",{});var mwe=s(Cp);$ne=n(mwe,"STRONG",{});var HHr=s($ne);jho=r(HHr,"gpt2"),HHr.forEach(t),Dho=r(mwe," \u2014 "),_I=n(mwe,"A",{href:!0});var UHr=s(_I);Gho=r(UHr,"GPT2Model"),UHr.forEach(t),Oho=r(mwe," (OpenAI GPT-2 model)"),mwe.forEach(t),Vho=i($),wp=n($,"LI",{});var gwe=s(wp);kne=n(gwe,"STRONG",{});var JHr=s(kne);Xho=r(JHr,"gpt_neo"),JHr.forEach(t),zho=r(gwe," \u2014 "),bI=n(gwe,"A",{href:!0});var YHr=s(bI);Qho=r(YHr,"GPTNeoModel"),YHr.forEach(t),Who=r(gwe," (GPT Neo model)"),gwe.forEach(t),Hho=i($),Ap=n($,"LI",{});var hwe=s(Ap);Sne=n(hwe,"STRONG",{});var KHr=s(Sne);Uho=r(KHr,"gptj"),KHr.forEach(t),Jho=r(hwe," \u2014 "),vI=n(hwe,"A",{href:!0});var ZHr=s(vI);Yho=r(ZHr,"GPTJModel"),ZHr.forEach(t),Kho=r(hwe," (GPT-J model)"),hwe.forEach(t),Zho=i($),yp=n($,"LI",{});var pwe=s(yp);Rne=n(pwe,"STRONG",{});var eUr=s(Rne);epo=r(eUr,"hubert"),eUr.forEach(t),opo=r(pwe," \u2014 "),FI=n(pwe,"A",{href:!0});var oUr=s(FI);rpo=r(oUr,"HubertModel"),oUr.forEach(t),tpo=r(pwe," (Hubert model)"),pwe.forEach(t),apo=i($),Lp=n($,"LI",{});var uwe=s(Lp);Bne=n(uwe,"STRONG",{});var rUr=s(Bne);npo=r(rUr,"ibert"),rUr.forEach(t),spo=r(uwe," \u2014 "),TI=n(uwe,"A",{href:!0});var tUr=s(TI);lpo=r(tUr,"IBertModel"),tUr.forEach(t),ipo=r(uwe," (I-BERT model)"),uwe.forEach(t),dpo=i($),xp=n($,"LI",{});var _we=s(xp);Pne=n(_we,"STRONG",{});var aUr=s(Pne);cpo=r(aUr,"imagegpt"),aUr.forEach(t),fpo=r(_we," \u2014 "),MI=n(_we,"A",{href:!0});var nUr=s(MI);mpo=r(nUr,"ImageGPTModel"),nUr.forEach(t),gpo=r(_we," (ImageGPT model)"),_we.forEach(t),hpo=i($),$p=n($,"LI",{});var bwe=s($p);Ine=n(bwe,"STRONG",{});var sUr=s(Ine);ppo=r(sUr,"layoutlm"),sUr.forEach(t),upo=r(bwe," \u2014 "),EI=n(bwe,"A",{href:!0});var lUr=s(EI);_po=r(lUr,"LayoutLMModel"),lUr.forEach(t),bpo=r(bwe," (LayoutLM model)"),bwe.forEach(t),vpo=i($),kp=n($,"LI",{});var vwe=s(kp);qne=n(vwe,"STRONG",{});var iUr=s(qne);Fpo=r(iUr,"layoutlmv2"),iUr.forEach(t),Tpo=r(vwe," \u2014 "),CI=n(vwe,"A",{href:!0});var dUr=s(CI);Mpo=r(dUr,"LayoutLMv2Model"),dUr.forEach(t),Epo=r(vwe," (LayoutLMv2 model)"),vwe.forEach(t),Cpo=i($),Sp=n($,"LI",{});var Fwe=s(Sp);Nne=n(Fwe,"STRONG",{});var cUr=s(Nne);wpo=r(cUr,"led"),cUr.forEach(t),Apo=r(Fwe," \u2014 "),wI=n(Fwe,"A",{href:!0});var fUr=s(wI);ypo=r(fUr,"LEDModel"),fUr.forEach(t),Lpo=r(Fwe," (LED model)"),Fwe.forEach(t),xpo=i($),Rp=n($,"LI",{});var Twe=s(Rp);jne=n(Twe,"STRONG",{});var mUr=s(jne);$po=r(mUr,"longformer"),mUr.forEach(t),kpo=r(Twe," \u2014 "),AI=n(Twe,"A",{href:!0});var gUr=s(AI);Spo=r(gUr,"LongformerModel"),gUr.forEach(t),Rpo=r(Twe," (Longformer model)"),Twe.forEach(t),Bpo=i($),Bp=n($,"LI",{});var Mwe=s(Bp);Dne=n(Mwe,"STRONG",{});var hUr=s(Dne);Ppo=r(hUr,"luke"),hUr.forEach(t),Ipo=r(Mwe," \u2014 "),yI=n(Mwe,"A",{href:!0});var pUr=s(yI);qpo=r(pUr,"LukeModel"),pUr.forEach(t),Npo=r(Mwe," (LUKE model)"),Mwe.forEach(t),jpo=i($),Pp=n($,"LI",{});var Ewe=s(Pp);Gne=n(Ewe,"STRONG",{});var uUr=s(Gne);Dpo=r(uUr,"lxmert"),uUr.forEach(t),Gpo=r(Ewe," \u2014 "),LI=n(Ewe,"A",{href:!0});var _Ur=s(LI);Opo=r(_Ur,"LxmertModel"),_Ur.forEach(t),Vpo=r(Ewe," (LXMERT model)"),Ewe.forEach(t),Xpo=i($),Ip=n($,"LI",{});var Cwe=s(Ip);One=n(Cwe,"STRONG",{});var bUr=s(One);zpo=r(bUr,"m2m_100"),bUr.forEach(t),Qpo=r(Cwe," \u2014 "),xI=n(Cwe,"A",{href:!0});var vUr=s(xI);Wpo=r(vUr,"M2M100Model"),vUr.forEach(t),Hpo=r(Cwe," (M2M100 model)"),Cwe.forEach(t),Upo=i($),qp=n($,"LI",{});var wwe=s(qp);Vne=n(wwe,"STRONG",{});var FUr=s(Vne);Jpo=r(FUr,"marian"),FUr.forEach(t),Ypo=r(wwe," \u2014 "),$I=n(wwe,"A",{href:!0});var TUr=s($I);Kpo=r(TUr,"MarianModel"),TUr.forEach(t),Zpo=r(wwe," (Marian model)"),wwe.forEach(t),euo=i($),Np=n($,"LI",{});var Awe=s(Np);Xne=n(Awe,"STRONG",{});var MUr=s(Xne);ouo=r(MUr,"maskformer"),MUr.forEach(t),ruo=r(Awe," \u2014 "),kI=n(Awe,"A",{href:!0});var EUr=s(kI);tuo=r(EUr,"MaskFormerModel"),EUr.forEach(t),auo=r(Awe," (MaskFormer model)"),Awe.forEach(t),nuo=i($),jp=n($,"LI",{});var ywe=s(jp);zne=n(ywe,"STRONG",{});var CUr=s(zne);suo=r(CUr,"mbart"),CUr.forEach(t),luo=r(ywe," \u2014 "),SI=n(ywe,"A",{href:!0});var wUr=s(SI);iuo=r(wUr,"MBartModel"),wUr.forEach(t),duo=r(ywe," (mBART model)"),ywe.forEach(t),cuo=i($),Dp=n($,"LI",{});var Lwe=s(Dp);Qne=n(Lwe,"STRONG",{});var AUr=s(Qne);fuo=r(AUr,"megatron-bert"),AUr.forEach(t),muo=r(Lwe," \u2014 "),RI=n(Lwe,"A",{href:!0});var yUr=s(RI);guo=r(yUr,"MegatronBertModel"),yUr.forEach(t),huo=r(Lwe," (MegatronBert model)"),Lwe.forEach(t),puo=i($),Gp=n($,"LI",{});var xwe=s(Gp);Wne=n(xwe,"STRONG",{});var LUr=s(Wne);uuo=r(LUr,"mobilebert"),LUr.forEach(t),_uo=r(xwe," \u2014 "),BI=n(xwe,"A",{href:!0});var xUr=s(BI);buo=r(xUr,"MobileBertModel"),xUr.forEach(t),vuo=r(xwe," (MobileBERT model)"),xwe.forEach(t),Fuo=i($),Op=n($,"LI",{});var $we=s(Op);Hne=n($we,"STRONG",{});var $Ur=s(Hne);Tuo=r($Ur,"mpnet"),$Ur.forEach(t),Muo=r($we," \u2014 "),PI=n($we,"A",{href:!0});var kUr=s(PI);Euo=r(kUr,"MPNetModel"),kUr.forEach(t),Cuo=r($we," (MPNet model)"),$we.forEach(t),wuo=i($),Vp=n($,"LI",{});var kwe=s(Vp);Une=n(kwe,"STRONG",{});var SUr=s(Une);Auo=r(SUr,"mt5"),SUr.forEach(t),yuo=r(kwe," \u2014 "),II=n(kwe,"A",{href:!0});var RUr=s(II);Luo=r(RUr,"MT5Model"),RUr.forEach(t),xuo=r(kwe," (mT5 model)"),kwe.forEach(t),$uo=i($),Xp=n($,"LI",{});var Swe=s(Xp);Jne=n(Swe,"STRONG",{});var BUr=s(Jne);kuo=r(BUr,"nystromformer"),BUr.forEach(t),Suo=r(Swe," \u2014 "),qI=n(Swe,"A",{href:!0});var PUr=s(qI);Ruo=r(PUr,"NystromformerModel"),PUr.forEach(t),Buo=r(Swe," (Nystromformer model)"),Swe.forEach(t),Puo=i($),zp=n($,"LI",{});var Rwe=s(zp);Yne=n(Rwe,"STRONG",{});var IUr=s(Yne);Iuo=r(IUr,"openai-gpt"),IUr.forEach(t),quo=r(Rwe," \u2014 "),NI=n(Rwe,"A",{href:!0});var qUr=s(NI);Nuo=r(qUr,"OpenAIGPTModel"),qUr.forEach(t),juo=r(Rwe," (OpenAI GPT model)"),Rwe.forEach(t),Duo=i($),Qp=n($,"LI",{});var Bwe=s(Qp);Kne=n(Bwe,"STRONG",{});var NUr=s(Kne);Guo=r(NUr,"opt"),NUr.forEach(t),Ouo=r(Bwe," \u2014 "),jI=n(Bwe,"A",{href:!0});var jUr=s(jI);Vuo=r(jUr,"OPTModel"),jUr.forEach(t),Xuo=r(Bwe," (OPT model)"),Bwe.forEach(t),zuo=i($),Wp=n($,"LI",{});var Pwe=s(Wp);Zne=n(Pwe,"STRONG",{});var DUr=s(Zne);Quo=r(DUr,"pegasus"),DUr.forEach(t),Wuo=r(Pwe," \u2014 "),DI=n(Pwe,"A",{href:!0});var GUr=s(DI);Huo=r(GUr,"PegasusModel"),GUr.forEach(t),Uuo=r(Pwe," (Pegasus model)"),Pwe.forEach(t),Juo=i($),Hp=n($,"LI",{});var Iwe=s(Hp);ese=n(Iwe,"STRONG",{});var OUr=s(ese);Yuo=r(OUr,"perceiver"),OUr.forEach(t),Kuo=r(Iwe," \u2014 "),GI=n(Iwe,"A",{href:!0});var VUr=s(GI);Zuo=r(VUr,"PerceiverModel"),VUr.forEach(t),e_o=r(Iwe," (Perceiver model)"),Iwe.forEach(t),o_o=i($),Up=n($,"LI",{});var qwe=s(Up);ose=n(qwe,"STRONG",{});var XUr=s(ose);r_o=r(XUr,"plbart"),XUr.forEach(t),t_o=r(qwe," \u2014 "),OI=n(qwe,"A",{href:!0});var zUr=s(OI);a_o=r(zUr,"PLBartModel"),zUr.forEach(t),n_o=r(qwe," (PLBart model)"),qwe.forEach(t),s_o=i($),Jp=n($,"LI",{});var Nwe=s(Jp);rse=n(Nwe,"STRONG",{});var QUr=s(rse);l_o=r(QUr,"poolformer"),QUr.forEach(t),i_o=r(Nwe," \u2014 "),VI=n(Nwe,"A",{href:!0});var WUr=s(VI);d_o=r(WUr,"PoolFormerModel"),WUr.forEach(t),c_o=r(Nwe," (PoolFormer model)"),Nwe.forEach(t),f_o=i($),Yp=n($,"LI",{});var jwe=s(Yp);tse=n(jwe,"STRONG",{});var HUr=s(tse);m_o=r(HUr,"prophetnet"),HUr.forEach(t),g_o=r(jwe," \u2014 "),XI=n(jwe,"A",{href:!0});var UUr=s(XI);h_o=r(UUr,"ProphetNetModel"),UUr.forEach(t),p_o=r(jwe," (ProphetNet model)"),jwe.forEach(t),u_o=i($),Kp=n($,"LI",{});var Dwe=s(Kp);ase=n(Dwe,"STRONG",{});var JUr=s(ase);__o=r(JUr,"qdqbert"),JUr.forEach(t),b_o=r(Dwe," \u2014 "),zI=n(Dwe,"A",{href:!0});var YUr=s(zI);v_o=r(YUr,"QDQBertModel"),YUr.forEach(t),F_o=r(Dwe," (QDQBert model)"),Dwe.forEach(t),T_o=i($),Zp=n($,"LI",{});var Gwe=s(Zp);nse=n(Gwe,"STRONG",{});var KUr=s(nse);M_o=r(KUr,"reformer"),KUr.forEach(t),E_o=r(Gwe," \u2014 "),QI=n(Gwe,"A",{href:!0});var ZUr=s(QI);C_o=r(ZUr,"ReformerModel"),ZUr.forEach(t),w_o=r(Gwe," (Reformer model)"),Gwe.forEach(t),A_o=i($),eu=n($,"LI",{});var Owe=s(eu);sse=n(Owe,"STRONG",{});var eJr=s(sse);y_o=r(eJr,"regnet"),eJr.forEach(t),L_o=r(Owe," \u2014 "),WI=n(Owe,"A",{href:!0});var oJr=s(WI);x_o=r(oJr,"RegNetModel"),oJr.forEach(t),$_o=r(Owe," (RegNet model)"),Owe.forEach(t),k_o=i($),ou=n($,"LI",{});var Vwe=s(ou);lse=n(Vwe,"STRONG",{});var rJr=s(lse);S_o=r(rJr,"rembert"),rJr.forEach(t),R_o=r(Vwe," \u2014 "),HI=n(Vwe,"A",{href:!0});var tJr=s(HI);B_o=r(tJr,"RemBertModel"),tJr.forEach(t),P_o=r(Vwe," (RemBERT model)"),Vwe.forEach(t),I_o=i($),ru=n($,"LI",{});var Xwe=s(ru);ise=n(Xwe,"STRONG",{});var aJr=s(ise);q_o=r(aJr,"resnet"),aJr.forEach(t),N_o=r(Xwe," \u2014 "),UI=n(Xwe,"A",{href:!0});var nJr=s(UI);j_o=r(nJr,"ResNetModel"),nJr.forEach(t),D_o=r(Xwe," (ResNet model)"),Xwe.forEach(t),G_o=i($),tu=n($,"LI",{});var zwe=s(tu);dse=n(zwe,"STRONG",{});var sJr=s(dse);O_o=r(sJr,"retribert"),sJr.forEach(t),V_o=r(zwe," \u2014 "),JI=n(zwe,"A",{href:!0});var lJr=s(JI);X_o=r(lJr,"RetriBertModel"),lJr.forEach(t),z_o=r(zwe," (RetriBERT model)"),zwe.forEach(t),Q_o=i($),au=n($,"LI",{});var Qwe=s(au);cse=n(Qwe,"STRONG",{});var iJr=s(cse);W_o=r(iJr,"roberta"),iJr.forEach(t),H_o=r(Qwe," \u2014 "),YI=n(Qwe,"A",{href:!0});var dJr=s(YI);U_o=r(dJr,"RobertaModel"),dJr.forEach(t),J_o=r(Qwe," (RoBERTa model)"),Qwe.forEach(t),Y_o=i($),nu=n($,"LI",{});var Wwe=s(nu);fse=n(Wwe,"STRONG",{});var cJr=s(fse);K_o=r(cJr,"roformer"),cJr.forEach(t),Z_o=r(Wwe," \u2014 "),KI=n(Wwe,"A",{href:!0});var fJr=s(KI);e2o=r(fJr,"RoFormerModel"),fJr.forEach(t),o2o=r(Wwe," (RoFormer model)"),Wwe.forEach(t),r2o=i($),su=n($,"LI",{});var Hwe=s(su);mse=n(Hwe,"STRONG",{});var mJr=s(mse);t2o=r(mJr,"segformer"),mJr.forEach(t),a2o=r(Hwe," \u2014 "),ZI=n(Hwe,"A",{href:!0});var gJr=s(ZI);n2o=r(gJr,"SegformerModel"),gJr.forEach(t),s2o=r(Hwe," (SegFormer model)"),Hwe.forEach(t),l2o=i($),lu=n($,"LI",{});var Uwe=s(lu);gse=n(Uwe,"STRONG",{});var hJr=s(gse);i2o=r(hJr,"sew"),hJr.forEach(t),d2o=r(Uwe," \u2014 "),eq=n(Uwe,"A",{href:!0});var pJr=s(eq);c2o=r(pJr,"SEWModel"),pJr.forEach(t),f2o=r(Uwe," (SEW model)"),Uwe.forEach(t),m2o=i($),iu=n($,"LI",{});var Jwe=s(iu);hse=n(Jwe,"STRONG",{});var uJr=s(hse);g2o=r(uJr,"sew-d"),uJr.forEach(t),h2o=r(Jwe," \u2014 "),oq=n(Jwe,"A",{href:!0});var _Jr=s(oq);p2o=r(_Jr,"SEWDModel"),_Jr.forEach(t),u2o=r(Jwe," (SEW-D model)"),Jwe.forEach(t),_2o=i($),du=n($,"LI",{});var Ywe=s(du);pse=n(Ywe,"STRONG",{});var bJr=s(pse);b2o=r(bJr,"speech_to_text"),bJr.forEach(t),v2o=r(Ywe," \u2014 "),rq=n(Ywe,"A",{href:!0});var vJr=s(rq);F2o=r(vJr,"Speech2TextModel"),vJr.forEach(t),T2o=r(Ywe," (Speech2Text model)"),Ywe.forEach(t),M2o=i($),cu=n($,"LI",{});var Kwe=s(cu);use=n(Kwe,"STRONG",{});var FJr=s(use);E2o=r(FJr,"splinter"),FJr.forEach(t),C2o=r(Kwe," \u2014 "),tq=n(Kwe,"A",{href:!0});var TJr=s(tq);w2o=r(TJr,"SplinterModel"),TJr.forEach(t),A2o=r(Kwe," (Splinter model)"),Kwe.forEach(t),y2o=i($),fu=n($,"LI",{});var Zwe=s(fu);_se=n(Zwe,"STRONG",{});var MJr=s(_se);L2o=r(MJr,"squeezebert"),MJr.forEach(t),x2o=r(Zwe," \u2014 "),aq=n(Zwe,"A",{href:!0});var EJr=s(aq);$2o=r(EJr,"SqueezeBertModel"),EJr.forEach(t),k2o=r(Zwe," (SqueezeBERT model)"),Zwe.forEach(t),S2o=i($),mu=n($,"LI",{});var eAe=s(mu);bse=n(eAe,"STRONG",{});var CJr=s(bse);R2o=r(CJr,"swin"),CJr.forEach(t),B2o=r(eAe," \u2014 "),nq=n(eAe,"A",{href:!0});var wJr=s(nq);P2o=r(wJr,"SwinModel"),wJr.forEach(t),I2o=r(eAe," (Swin model)"),eAe.forEach(t),q2o=i($),gu=n($,"LI",{});var oAe=s(gu);vse=n(oAe,"STRONG",{});var AJr=s(vse);N2o=r(AJr,"t5"),AJr.forEach(t),j2o=r(oAe," \u2014 "),sq=n(oAe,"A",{href:!0});var yJr=s(sq);D2o=r(yJr,"T5Model"),yJr.forEach(t),G2o=r(oAe," (T5 model)"),oAe.forEach(t),O2o=i($),hu=n($,"LI",{});var rAe=s(hu);Fse=n(rAe,"STRONG",{});var LJr=s(Fse);V2o=r(LJr,"tapas"),LJr.forEach(t),X2o=r(rAe," \u2014 "),lq=n(rAe,"A",{href:!0});var xJr=s(lq);z2o=r(xJr,"TapasModel"),xJr.forEach(t),Q2o=r(rAe," (TAPAS model)"),rAe.forEach(t),W2o=i($),pu=n($,"LI",{});var tAe=s(pu);Tse=n(tAe,"STRONG",{});var $Jr=s(Tse);H2o=r($Jr,"transfo-xl"),$Jr.forEach(t),U2o=r(tAe," \u2014 "),iq=n(tAe,"A",{href:!0});var kJr=s(iq);J2o=r(kJr,"TransfoXLModel"),kJr.forEach(t),Y2o=r(tAe," (Transformer-XL model)"),tAe.forEach(t),K2o=i($),uu=n($,"LI",{});var aAe=s(uu);Mse=n(aAe,"STRONG",{});var SJr=s(Mse);Z2o=r(SJr,"unispeech"),SJr.forEach(t),e1o=r(aAe," \u2014 "),dq=n(aAe,"A",{href:!0});var RJr=s(dq);o1o=r(RJr,"UniSpeechModel"),RJr.forEach(t),r1o=r(aAe," (UniSpeech model)"),aAe.forEach(t),t1o=i($),_u=n($,"LI",{});var nAe=s(_u);Ese=n(nAe,"STRONG",{});var BJr=s(Ese);a1o=r(BJr,"unispeech-sat"),BJr.forEach(t),n1o=r(nAe," \u2014 "),cq=n(nAe,"A",{href:!0});var PJr=s(cq);s1o=r(PJr,"UniSpeechSatModel"),PJr.forEach(t),l1o=r(nAe," (UniSpeechSat model)"),nAe.forEach(t),i1o=i($),bu=n($,"LI",{});var sAe=s(bu);Cse=n(sAe,"STRONG",{});var IJr=s(Cse);d1o=r(IJr,"van"),IJr.forEach(t),c1o=r(sAe," \u2014 "),fq=n(sAe,"A",{href:!0});var qJr=s(fq);f1o=r(qJr,"VanModel"),qJr.forEach(t),m1o=r(sAe," (VAN model)"),sAe.forEach(t),g1o=i($),vu=n($,"LI",{});var lAe=s(vu);wse=n(lAe,"STRONG",{});var NJr=s(wse);h1o=r(NJr,"vilt"),NJr.forEach(t),p1o=r(lAe," \u2014 "),mq=n(lAe,"A",{href:!0});var jJr=s(mq);u1o=r(jJr,"ViltModel"),jJr.forEach(t),_1o=r(lAe," (ViLT model)"),lAe.forEach(t),b1o=i($),Fu=n($,"LI",{});var iAe=s(Fu);Ase=n(iAe,"STRONG",{});var DJr=s(Ase);v1o=r(DJr,"vision-text-dual-encoder"),DJr.forEach(t),F1o=r(iAe," \u2014 "),gq=n(iAe,"A",{href:!0});var GJr=s(gq);T1o=r(GJr,"VisionTextDualEncoderModel"),GJr.forEach(t),M1o=r(iAe," (VisionTextDualEncoder model)"),iAe.forEach(t),E1o=i($),Tu=n($,"LI",{});var dAe=s(Tu);yse=n(dAe,"STRONG",{});var OJr=s(yse);C1o=r(OJr,"visual_bert"),OJr.forEach(t),w1o=r(dAe," \u2014 "),hq=n(dAe,"A",{href:!0});var VJr=s(hq);A1o=r(VJr,"VisualBertModel"),VJr.forEach(t),y1o=r(dAe," (VisualBert model)"),dAe.forEach(t),L1o=i($),Mu=n($,"LI",{});var cAe=s(Mu);Lse=n(cAe,"STRONG",{});var XJr=s(Lse);x1o=r(XJr,"vit"),XJr.forEach(t),$1o=r(cAe," \u2014 "),pq=n(cAe,"A",{href:!0});var zJr=s(pq);k1o=r(zJr,"ViTModel"),zJr.forEach(t),S1o=r(cAe," (ViT model)"),cAe.forEach(t),R1o=i($),Eu=n($,"LI",{});var fAe=s(Eu);xse=n(fAe,"STRONG",{});var QJr=s(xse);B1o=r(QJr,"vit_mae"),QJr.forEach(t),P1o=r(fAe," \u2014 "),uq=n(fAe,"A",{href:!0});var WJr=s(uq);I1o=r(WJr,"ViTMAEModel"),WJr.forEach(t),q1o=r(fAe," (ViTMAE model)"),fAe.forEach(t),N1o=i($),Cu=n($,"LI",{});var mAe=s(Cu);$se=n(mAe,"STRONG",{});var HJr=s($se);j1o=r(HJr,"wav2vec2"),HJr.forEach(t),D1o=r(mAe," \u2014 "),_q=n(mAe,"A",{href:!0});var UJr=s(_q);G1o=r(UJr,"Wav2Vec2Model"),UJr.forEach(t),O1o=r(mAe," (Wav2Vec2 model)"),mAe.forEach(t),V1o=i($),wu=n($,"LI",{});var gAe=s(wu);kse=n(gAe,"STRONG",{});var JJr=s(kse);X1o=r(JJr,"wavlm"),JJr.forEach(t),z1o=r(gAe," \u2014 "),bq=n(gAe,"A",{href:!0});var YJr=s(bq);Q1o=r(YJr,"WavLMModel"),YJr.forEach(t),W1o=r(gAe," (WavLM model)"),gAe.forEach(t),H1o=i($),Au=n($,"LI",{});var hAe=s(Au);Sse=n(hAe,"STRONG",{});var KJr=s(Sse);U1o=r(KJr,"xglm"),KJr.forEach(t),J1o=r(hAe," \u2014 "),vq=n(hAe,"A",{href:!0});var ZJr=s(vq);Y1o=r(ZJr,"XGLMModel"),ZJr.forEach(t),K1o=r(hAe," (XGLM model)"),hAe.forEach(t),Z1o=i($),yu=n($,"LI",{});var pAe=s(yu);Rse=n(pAe,"STRONG",{});var eYr=s(Rse);ebo=r(eYr,"xlm"),eYr.forEach(t),obo=r(pAe," \u2014 "),Fq=n(pAe,"A",{href:!0});var oYr=s(Fq);rbo=r(oYr,"XLMModel"),oYr.forEach(t),tbo=r(pAe," (XLM model)"),pAe.forEach(t),abo=i($),Lu=n($,"LI",{});var uAe=s(Lu);Bse=n(uAe,"STRONG",{});var rYr=s(Bse);nbo=r(rYr,"xlm-prophetnet"),rYr.forEach(t),sbo=r(uAe," \u2014 "),Tq=n(uAe,"A",{href:!0});var tYr=s(Tq);lbo=r(tYr,"XLMProphetNetModel"),tYr.forEach(t),ibo=r(uAe," (XLMProphetNet model)"),uAe.forEach(t),dbo=i($),xu=n($,"LI",{});var _Ae=s(xu);Pse=n(_Ae,"STRONG",{});var aYr=s(Pse);cbo=r(aYr,"xlm-roberta"),aYr.forEach(t),fbo=r(_Ae," \u2014 "),Mq=n(_Ae,"A",{href:!0});var nYr=s(Mq);mbo=r(nYr,"XLMRobertaModel"),nYr.forEach(t),gbo=r(_Ae," (XLM-RoBERTa model)"),_Ae.forEach(t),hbo=i($),$u=n($,"LI",{});var bAe=s($u);Ise=n(bAe,"STRONG",{});var sYr=s(Ise);pbo=r(sYr,"xlm-roberta-xl"),sYr.forEach(t),ubo=r(bAe," \u2014 "),Eq=n(bAe,"A",{href:!0});var lYr=s(Eq);_bo=r(lYr,"XLMRobertaXLModel"),lYr.forEach(t),bbo=r(bAe," (XLM-RoBERTa-XL model)"),bAe.forEach(t),vbo=i($),ku=n($,"LI",{});var vAe=s(ku);qse=n(vAe,"STRONG",{});var iYr=s(qse);Fbo=r(iYr,"xlnet"),iYr.forEach(t),Tbo=r(vAe," \u2014 "),Cq=n(vAe,"A",{href:!0});var dYr=s(Cq);Mbo=r(dYr,"XLNetModel"),dYr.forEach(t),Ebo=r(vAe," (XLNet model)"),vAe.forEach(t),Cbo=i($),Su=n($,"LI",{});var FAe=s(Su);Nse=n(FAe,"STRONG",{});var cYr=s(Nse);wbo=r(cYr,"yolos"),cYr.forEach(t),Abo=r(FAe," \u2014 "),wq=n(FAe,"A",{href:!0});var fYr=s(wq);ybo=r(fYr,"YolosModel"),fYr.forEach(t),Lbo=r(FAe," (YOLOS model)"),FAe.forEach(t),xbo=i($),Ru=n($,"LI",{});var TAe=s(Ru);jse=n(TAe,"STRONG",{});var mYr=s(jse);$bo=r(mYr,"yoso"),mYr.forEach(t),kbo=r(TAe," \u2014 "),Aq=n(TAe,"A",{href:!0});var gYr=s(Aq);Sbo=r(gYr,"YosoModel"),gYr.forEach(t),Rbo=r(TAe," (YOSO model)"),TAe.forEach(t),$.forEach(t),Bbo=i(Zt),Bu=n(Zt,"P",{});var MAe=s(Bu);Pbo=r(MAe,"The model is set in evaluation mode by default using "),Dse=n(MAe,"CODE",{});var hYr=s(Dse);Ibo=r(hYr,"model.eval()"),hYr.forEach(t),qbo=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gse=n(MAe,"CODE",{});var pYr=s(Gse);Nbo=r(pYr,"model.train()"),pYr.forEach(t),MAe.forEach(t),jbo=i(Zt),T(Pu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),QPe=i(f),Ci=n(f,"H2",{class:!0});var Jqe=s(Ci);Iu=n(Jqe,"A",{id:!0,class:!0,href:!0});var uYr=s(Iu);Ose=n(uYr,"SPAN",{});var _Yr=s(Ose);T(w6.$$.fragment,_Yr),_Yr.forEach(t),uYr.forEach(t),Dbo=i(Jqe),Vse=n(Jqe,"SPAN",{});var bYr=s(Vse);Gbo=r(bYr,"AutoModelForPreTraining"),bYr.forEach(t),Jqe.forEach(t),WPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(A6.$$.fragment,Ds),Obo=i(Ds),wi=n(Ds,"P",{});var aK=s(wi);Vbo=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=n(aK,"A",{href:!0});var vYr=s(yq);Xbo=r(vYr,"from_pretrained()"),vYr.forEach(t),zbo=r(aK," class method or the "),Lq=n(aK,"A",{href:!0});var FYr=s(Lq);Qbo=r(FYr,"from_config()"),FYr.forEach(t),Wbo=r(aK,` class
method.`),aK.forEach(t),Hbo=i(Ds),y6=n(Ds,"P",{});var Yqe=s(y6);Ubo=r(Yqe,"This class cannot be instantiated directly using "),Xse=n(Yqe,"CODE",{});var TYr=s(Xse);Jbo=r(TYr,"__init__()"),TYr.forEach(t),Ybo=r(Yqe," (throws an error)."),Yqe.forEach(t),Kbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var Z3=s(rt);T(L6.$$.fragment,Z3),Zbo=i(Z3),zse=n(Z3,"P",{});var MYr=s(zse);e5o=r(MYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MYr.forEach(t),o5o=i(Z3),Ai=n(Z3,"P",{});var nK=s(Ai);r5o=r(nK,`Note:
Loading a model from its configuration file does `),Qse=n(nK,"STRONG",{});var EYr=s(Qse);t5o=r(EYr,"not"),EYr.forEach(t),a5o=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(nK,"A",{href:!0});var CYr=s(xq);n5o=r(CYr,"from_pretrained()"),CYr.forEach(t),s5o=r(nK," to load the model weights."),nK.forEach(t),l5o=i(Z3),T(qu.$$.fragment,Z3),Z3.forEach(t),i5o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(x6.$$.fragment,ea),d5o=i(ea),Wse=n(ea,"P",{});var wYr=s(Wse);c5o=r(wYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wYr.forEach(t),f5o=i(ea),ya=n(ea,"P",{});var ew=s(ya);m5o=r(ew,"The model class to instantiate is selected based on the "),Hse=n(ew,"CODE",{});var AYr=s(Hse);g5o=r(AYr,"model_type"),AYr.forEach(t),h5o=r(ew,` property of the config object (either
passed as an argument or loaded from `),Use=n(ew,"CODE",{});var yYr=s(Use);p5o=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),u5o=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=n(ew,"CODE",{});var LYr=s(Jse);_5o=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),b5o=r(ew,":"),ew.forEach(t),v5o=i(ea),G=n(ea,"UL",{});var V=s(G);Nu=n(V,"LI",{});var EAe=s(Nu);Yse=n(EAe,"STRONG",{});var xYr=s(Yse);F5o=r(xYr,"albert"),xYr.forEach(t),T5o=r(EAe," \u2014 "),$q=n(EAe,"A",{href:!0});var $Yr=s($q);M5o=r($Yr,"AlbertForPreTraining"),$Yr.forEach(t),E5o=r(EAe," (ALBERT model)"),EAe.forEach(t),C5o=i(V),ju=n(V,"LI",{});var CAe=s(ju);Kse=n(CAe,"STRONG",{});var kYr=s(Kse);w5o=r(kYr,"bart"),kYr.forEach(t),A5o=r(CAe," \u2014 "),kq=n(CAe,"A",{href:!0});var SYr=s(kq);y5o=r(SYr,"BartForConditionalGeneration"),SYr.forEach(t),L5o=r(CAe," (BART model)"),CAe.forEach(t),x5o=i(V),Du=n(V,"LI",{});var wAe=s(Du);Zse=n(wAe,"STRONG",{});var RYr=s(Zse);$5o=r(RYr,"bert"),RYr.forEach(t),k5o=r(wAe," \u2014 "),Sq=n(wAe,"A",{href:!0});var BYr=s(Sq);S5o=r(BYr,"BertForPreTraining"),BYr.forEach(t),R5o=r(wAe," (BERT model)"),wAe.forEach(t),B5o=i(V),Gu=n(V,"LI",{});var AAe=s(Gu);ele=n(AAe,"STRONG",{});var PYr=s(ele);P5o=r(PYr,"big_bird"),PYr.forEach(t),I5o=r(AAe," \u2014 "),Rq=n(AAe,"A",{href:!0});var IYr=s(Rq);q5o=r(IYr,"BigBirdForPreTraining"),IYr.forEach(t),N5o=r(AAe," (BigBird model)"),AAe.forEach(t),j5o=i(V),Ou=n(V,"LI",{});var yAe=s(Ou);ole=n(yAe,"STRONG",{});var qYr=s(ole);D5o=r(qYr,"camembert"),qYr.forEach(t),G5o=r(yAe," \u2014 "),Bq=n(yAe,"A",{href:!0});var NYr=s(Bq);O5o=r(NYr,"CamembertForMaskedLM"),NYr.forEach(t),V5o=r(yAe," (CamemBERT model)"),yAe.forEach(t),X5o=i(V),Vu=n(V,"LI",{});var LAe=s(Vu);rle=n(LAe,"STRONG",{});var jYr=s(rle);z5o=r(jYr,"ctrl"),jYr.forEach(t),Q5o=r(LAe," \u2014 "),Pq=n(LAe,"A",{href:!0});var DYr=s(Pq);W5o=r(DYr,"CTRLLMHeadModel"),DYr.forEach(t),H5o=r(LAe," (CTRL model)"),LAe.forEach(t),U5o=i(V),Xu=n(V,"LI",{});var xAe=s(Xu);tle=n(xAe,"STRONG",{});var GYr=s(tle);J5o=r(GYr,"data2vec-text"),GYr.forEach(t),Y5o=r(xAe," \u2014 "),Iq=n(xAe,"A",{href:!0});var OYr=s(Iq);K5o=r(OYr,"Data2VecTextForMaskedLM"),OYr.forEach(t),Z5o=r(xAe," (Data2VecText model)"),xAe.forEach(t),evo=i(V),zu=n(V,"LI",{});var $Ae=s(zu);ale=n($Ae,"STRONG",{});var VYr=s(ale);ovo=r(VYr,"deberta"),VYr.forEach(t),rvo=r($Ae," \u2014 "),qq=n($Ae,"A",{href:!0});var XYr=s(qq);tvo=r(XYr,"DebertaForMaskedLM"),XYr.forEach(t),avo=r($Ae," (DeBERTa model)"),$Ae.forEach(t),nvo=i(V),Qu=n(V,"LI",{});var kAe=s(Qu);nle=n(kAe,"STRONG",{});var zYr=s(nle);svo=r(zYr,"deberta-v2"),zYr.forEach(t),lvo=r(kAe," \u2014 "),Nq=n(kAe,"A",{href:!0});var QYr=s(Nq);ivo=r(QYr,"DebertaV2ForMaskedLM"),QYr.forEach(t),dvo=r(kAe," (DeBERTa-v2 model)"),kAe.forEach(t),cvo=i(V),Wu=n(V,"LI",{});var SAe=s(Wu);sle=n(SAe,"STRONG",{});var WYr=s(sle);fvo=r(WYr,"distilbert"),WYr.forEach(t),mvo=r(SAe," \u2014 "),jq=n(SAe,"A",{href:!0});var HYr=s(jq);gvo=r(HYr,"DistilBertForMaskedLM"),HYr.forEach(t),hvo=r(SAe," (DistilBERT model)"),SAe.forEach(t),pvo=i(V),Hu=n(V,"LI",{});var RAe=s(Hu);lle=n(RAe,"STRONG",{});var UYr=s(lle);uvo=r(UYr,"electra"),UYr.forEach(t),_vo=r(RAe," \u2014 "),Dq=n(RAe,"A",{href:!0});var JYr=s(Dq);bvo=r(JYr,"ElectraForPreTraining"),JYr.forEach(t),vvo=r(RAe," (ELECTRA model)"),RAe.forEach(t),Fvo=i(V),Uu=n(V,"LI",{});var BAe=s(Uu);ile=n(BAe,"STRONG",{});var YYr=s(ile);Tvo=r(YYr,"flaubert"),YYr.forEach(t),Mvo=r(BAe," \u2014 "),Gq=n(BAe,"A",{href:!0});var KYr=s(Gq);Evo=r(KYr,"FlaubertWithLMHeadModel"),KYr.forEach(t),Cvo=r(BAe," (FlauBERT model)"),BAe.forEach(t),wvo=i(V),Ju=n(V,"LI",{});var PAe=s(Ju);dle=n(PAe,"STRONG",{});var ZYr=s(dle);Avo=r(ZYr,"flava"),ZYr.forEach(t),yvo=r(PAe," \u2014 "),Oq=n(PAe,"A",{href:!0});var eKr=s(Oq);Lvo=r(eKr,"FlavaForPreTraining"),eKr.forEach(t),xvo=r(PAe," (Flava model)"),PAe.forEach(t),$vo=i(V),Yu=n(V,"LI",{});var IAe=s(Yu);cle=n(IAe,"STRONG",{});var oKr=s(cle);kvo=r(oKr,"fnet"),oKr.forEach(t),Svo=r(IAe," \u2014 "),Vq=n(IAe,"A",{href:!0});var rKr=s(Vq);Rvo=r(rKr,"FNetForPreTraining"),rKr.forEach(t),Bvo=r(IAe," (FNet model)"),IAe.forEach(t),Pvo=i(V),Ku=n(V,"LI",{});var qAe=s(Ku);fle=n(qAe,"STRONG",{});var tKr=s(fle);Ivo=r(tKr,"fsmt"),tKr.forEach(t),qvo=r(qAe," \u2014 "),Xq=n(qAe,"A",{href:!0});var aKr=s(Xq);Nvo=r(aKr,"FSMTForConditionalGeneration"),aKr.forEach(t),jvo=r(qAe," (FairSeq Machine-Translation model)"),qAe.forEach(t),Dvo=i(V),Zu=n(V,"LI",{});var NAe=s(Zu);mle=n(NAe,"STRONG",{});var nKr=s(mle);Gvo=r(nKr,"funnel"),nKr.forEach(t),Ovo=r(NAe," \u2014 "),zq=n(NAe,"A",{href:!0});var sKr=s(zq);Vvo=r(sKr,"FunnelForPreTraining"),sKr.forEach(t),Xvo=r(NAe," (Funnel Transformer model)"),NAe.forEach(t),zvo=i(V),e_=n(V,"LI",{});var jAe=s(e_);gle=n(jAe,"STRONG",{});var lKr=s(gle);Qvo=r(lKr,"gpt2"),lKr.forEach(t),Wvo=r(jAe," \u2014 "),Qq=n(jAe,"A",{href:!0});var iKr=s(Qq);Hvo=r(iKr,"GPT2LMHeadModel"),iKr.forEach(t),Uvo=r(jAe," (OpenAI GPT-2 model)"),jAe.forEach(t),Jvo=i(V),o_=n(V,"LI",{});var DAe=s(o_);hle=n(DAe,"STRONG",{});var dKr=s(hle);Yvo=r(dKr,"ibert"),dKr.forEach(t),Kvo=r(DAe," \u2014 "),Wq=n(DAe,"A",{href:!0});var cKr=s(Wq);Zvo=r(cKr,"IBertForMaskedLM"),cKr.forEach(t),eFo=r(DAe," (I-BERT model)"),DAe.forEach(t),oFo=i(V),r_=n(V,"LI",{});var GAe=s(r_);ple=n(GAe,"STRONG",{});var fKr=s(ple);rFo=r(fKr,"layoutlm"),fKr.forEach(t),tFo=r(GAe," \u2014 "),Hq=n(GAe,"A",{href:!0});var mKr=s(Hq);aFo=r(mKr,"LayoutLMForMaskedLM"),mKr.forEach(t),nFo=r(GAe," (LayoutLM model)"),GAe.forEach(t),sFo=i(V),t_=n(V,"LI",{});var OAe=s(t_);ule=n(OAe,"STRONG",{});var gKr=s(ule);lFo=r(gKr,"longformer"),gKr.forEach(t),iFo=r(OAe," \u2014 "),Uq=n(OAe,"A",{href:!0});var hKr=s(Uq);dFo=r(hKr,"LongformerForMaskedLM"),hKr.forEach(t),cFo=r(OAe," (Longformer model)"),OAe.forEach(t),fFo=i(V),a_=n(V,"LI",{});var VAe=s(a_);_le=n(VAe,"STRONG",{});var pKr=s(_le);mFo=r(pKr,"lxmert"),pKr.forEach(t),gFo=r(VAe," \u2014 "),Jq=n(VAe,"A",{href:!0});var uKr=s(Jq);hFo=r(uKr,"LxmertForPreTraining"),uKr.forEach(t),pFo=r(VAe," (LXMERT model)"),VAe.forEach(t),uFo=i(V),n_=n(V,"LI",{});var XAe=s(n_);ble=n(XAe,"STRONG",{});var _Kr=s(ble);_Fo=r(_Kr,"megatron-bert"),_Kr.forEach(t),bFo=r(XAe," \u2014 "),Yq=n(XAe,"A",{href:!0});var bKr=s(Yq);vFo=r(bKr,"MegatronBertForPreTraining"),bKr.forEach(t),FFo=r(XAe," (MegatronBert model)"),XAe.forEach(t),TFo=i(V),s_=n(V,"LI",{});var zAe=s(s_);vle=n(zAe,"STRONG",{});var vKr=s(vle);MFo=r(vKr,"mobilebert"),vKr.forEach(t),EFo=r(zAe," \u2014 "),Kq=n(zAe,"A",{href:!0});var FKr=s(Kq);CFo=r(FKr,"MobileBertForPreTraining"),FKr.forEach(t),wFo=r(zAe," (MobileBERT model)"),zAe.forEach(t),AFo=i(V),l_=n(V,"LI",{});var QAe=s(l_);Fle=n(QAe,"STRONG",{});var TKr=s(Fle);yFo=r(TKr,"mpnet"),TKr.forEach(t),LFo=r(QAe," \u2014 "),Zq=n(QAe,"A",{href:!0});var MKr=s(Zq);xFo=r(MKr,"MPNetForMaskedLM"),MKr.forEach(t),$Fo=r(QAe," (MPNet model)"),QAe.forEach(t),kFo=i(V),i_=n(V,"LI",{});var WAe=s(i_);Tle=n(WAe,"STRONG",{});var EKr=s(Tle);SFo=r(EKr,"openai-gpt"),EKr.forEach(t),RFo=r(WAe," \u2014 "),eN=n(WAe,"A",{href:!0});var CKr=s(eN);BFo=r(CKr,"OpenAIGPTLMHeadModel"),CKr.forEach(t),PFo=r(WAe," (OpenAI GPT model)"),WAe.forEach(t),IFo=i(V),d_=n(V,"LI",{});var HAe=s(d_);Mle=n(HAe,"STRONG",{});var wKr=s(Mle);qFo=r(wKr,"retribert"),wKr.forEach(t),NFo=r(HAe," \u2014 "),oN=n(HAe,"A",{href:!0});var AKr=s(oN);jFo=r(AKr,"RetriBertModel"),AKr.forEach(t),DFo=r(HAe," (RetriBERT model)"),HAe.forEach(t),GFo=i(V),c_=n(V,"LI",{});var UAe=s(c_);Ele=n(UAe,"STRONG",{});var yKr=s(Ele);OFo=r(yKr,"roberta"),yKr.forEach(t),VFo=r(UAe," \u2014 "),rN=n(UAe,"A",{href:!0});var LKr=s(rN);XFo=r(LKr,"RobertaForMaskedLM"),LKr.forEach(t),zFo=r(UAe," (RoBERTa model)"),UAe.forEach(t),QFo=i(V),f_=n(V,"LI",{});var JAe=s(f_);Cle=n(JAe,"STRONG",{});var xKr=s(Cle);WFo=r(xKr,"squeezebert"),xKr.forEach(t),HFo=r(JAe," \u2014 "),tN=n(JAe,"A",{href:!0});var $Kr=s(tN);UFo=r($Kr,"SqueezeBertForMaskedLM"),$Kr.forEach(t),JFo=r(JAe," (SqueezeBERT model)"),JAe.forEach(t),YFo=i(V),m_=n(V,"LI",{});var YAe=s(m_);wle=n(YAe,"STRONG",{});var kKr=s(wle);KFo=r(kKr,"t5"),kKr.forEach(t),ZFo=r(YAe," \u2014 "),aN=n(YAe,"A",{href:!0});var SKr=s(aN);e0o=r(SKr,"T5ForConditionalGeneration"),SKr.forEach(t),o0o=r(YAe," (T5 model)"),YAe.forEach(t),r0o=i(V),g_=n(V,"LI",{});var KAe=s(g_);Ale=n(KAe,"STRONG",{});var RKr=s(Ale);t0o=r(RKr,"tapas"),RKr.forEach(t),a0o=r(KAe," \u2014 "),nN=n(KAe,"A",{href:!0});var BKr=s(nN);n0o=r(BKr,"TapasForMaskedLM"),BKr.forEach(t),s0o=r(KAe," (TAPAS model)"),KAe.forEach(t),l0o=i(V),h_=n(V,"LI",{});var ZAe=s(h_);yle=n(ZAe,"STRONG",{});var PKr=s(yle);i0o=r(PKr,"transfo-xl"),PKr.forEach(t),d0o=r(ZAe," \u2014 "),sN=n(ZAe,"A",{href:!0});var IKr=s(sN);c0o=r(IKr,"TransfoXLLMHeadModel"),IKr.forEach(t),f0o=r(ZAe," (Transformer-XL model)"),ZAe.forEach(t),m0o=i(V),p_=n(V,"LI",{});var e6e=s(p_);Lle=n(e6e,"STRONG",{});var qKr=s(Lle);g0o=r(qKr,"unispeech"),qKr.forEach(t),h0o=r(e6e," \u2014 "),lN=n(e6e,"A",{href:!0});var NKr=s(lN);p0o=r(NKr,"UniSpeechForPreTraining"),NKr.forEach(t),u0o=r(e6e," (UniSpeech model)"),e6e.forEach(t),_0o=i(V),u_=n(V,"LI",{});var o6e=s(u_);xle=n(o6e,"STRONG",{});var jKr=s(xle);b0o=r(jKr,"unispeech-sat"),jKr.forEach(t),v0o=r(o6e," \u2014 "),iN=n(o6e,"A",{href:!0});var DKr=s(iN);F0o=r(DKr,"UniSpeechSatForPreTraining"),DKr.forEach(t),T0o=r(o6e," (UniSpeechSat model)"),o6e.forEach(t),M0o=i(V),__=n(V,"LI",{});var r6e=s(__);$le=n(r6e,"STRONG",{});var GKr=s($le);E0o=r(GKr,"visual_bert"),GKr.forEach(t),C0o=r(r6e," \u2014 "),dN=n(r6e,"A",{href:!0});var OKr=s(dN);w0o=r(OKr,"VisualBertForPreTraining"),OKr.forEach(t),A0o=r(r6e," (VisualBert model)"),r6e.forEach(t),y0o=i(V),b_=n(V,"LI",{});var t6e=s(b_);kle=n(t6e,"STRONG",{});var VKr=s(kle);L0o=r(VKr,"vit_mae"),VKr.forEach(t),x0o=r(t6e," \u2014 "),cN=n(t6e,"A",{href:!0});var XKr=s(cN);$0o=r(XKr,"ViTMAEForPreTraining"),XKr.forEach(t),k0o=r(t6e," (ViTMAE model)"),t6e.forEach(t),S0o=i(V),v_=n(V,"LI",{});var a6e=s(v_);Sle=n(a6e,"STRONG",{});var zKr=s(Sle);R0o=r(zKr,"wav2vec2"),zKr.forEach(t),B0o=r(a6e," \u2014 "),fN=n(a6e,"A",{href:!0});var QKr=s(fN);P0o=r(QKr,"Wav2Vec2ForPreTraining"),QKr.forEach(t),I0o=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),q0o=i(V),F_=n(V,"LI",{});var n6e=s(F_);Rle=n(n6e,"STRONG",{});var WKr=s(Rle);N0o=r(WKr,"xlm"),WKr.forEach(t),j0o=r(n6e," \u2014 "),mN=n(n6e,"A",{href:!0});var HKr=s(mN);D0o=r(HKr,"XLMWithLMHeadModel"),HKr.forEach(t),G0o=r(n6e," (XLM model)"),n6e.forEach(t),O0o=i(V),T_=n(V,"LI",{});var s6e=s(T_);Ble=n(s6e,"STRONG",{});var UKr=s(Ble);V0o=r(UKr,"xlm-roberta"),UKr.forEach(t),X0o=r(s6e," \u2014 "),gN=n(s6e,"A",{href:!0});var JKr=s(gN);z0o=r(JKr,"XLMRobertaForMaskedLM"),JKr.forEach(t),Q0o=r(s6e," (XLM-RoBERTa model)"),s6e.forEach(t),W0o=i(V),M_=n(V,"LI",{});var l6e=s(M_);Ple=n(l6e,"STRONG",{});var YKr=s(Ple);H0o=r(YKr,"xlm-roberta-xl"),YKr.forEach(t),U0o=r(l6e," \u2014 "),hN=n(l6e,"A",{href:!0});var KKr=s(hN);J0o=r(KKr,"XLMRobertaXLForMaskedLM"),KKr.forEach(t),Y0o=r(l6e," (XLM-RoBERTa-XL model)"),l6e.forEach(t),K0o=i(V),E_=n(V,"LI",{});var i6e=s(E_);Ile=n(i6e,"STRONG",{});var ZKr=s(Ile);Z0o=r(ZKr,"xlnet"),ZKr.forEach(t),eTo=r(i6e," \u2014 "),pN=n(i6e,"A",{href:!0});var eZr=s(pN);oTo=r(eZr,"XLNetLMHeadModel"),eZr.forEach(t),rTo=r(i6e," (XLNet model)"),i6e.forEach(t),V.forEach(t),tTo=i(ea),C_=n(ea,"P",{});var d6e=s(C_);aTo=r(d6e,"The model is set in evaluation mode by default using "),qle=n(d6e,"CODE",{});var oZr=s(qle);nTo=r(oZr,"model.eval()"),oZr.forEach(t),sTo=r(d6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=n(d6e,"CODE",{});var rZr=s(Nle);lTo=r(rZr,"model.train()"),rZr.forEach(t),d6e.forEach(t),iTo=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),HPe=i(f),yi=n(f,"H2",{class:!0});var Kqe=s(yi);A_=n(Kqe,"A",{id:!0,class:!0,href:!0});var tZr=s(A_);jle=n(tZr,"SPAN",{});var aZr=s(jle);T($6.$$.fragment,aZr),aZr.forEach(t),tZr.forEach(t),dTo=i(Kqe),Dle=n(Kqe,"SPAN",{});var nZr=s(Dle);cTo=r(nZr,"AutoModelForCausalLM"),nZr.forEach(t),Kqe.forEach(t),UPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(k6.$$.fragment,Gs),fTo=i(Gs),Li=n(Gs,"P",{});var sK=s(Li);mTo=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uN=n(sK,"A",{href:!0});var sZr=s(uN);gTo=r(sZr,"from_pretrained()"),sZr.forEach(t),hTo=r(sK," class method or the "),_N=n(sK,"A",{href:!0});var lZr=s(_N);pTo=r(lZr,"from_config()"),lZr.forEach(t),uTo=r(sK,` class
method.`),sK.forEach(t),_To=i(Gs),S6=n(Gs,"P",{});var Zqe=s(S6);bTo=r(Zqe,"This class cannot be instantiated directly using "),Gle=n(Zqe,"CODE",{});var iZr=s(Gle);vTo=r(iZr,"__init__()"),iZr.forEach(t),FTo=r(Zqe," (throws an error)."),Zqe.forEach(t),TTo=i(Gs),tt=n(Gs,"DIV",{class:!0});var ow=s(tt);T(R6.$$.fragment,ow),MTo=i(ow),Ole=n(ow,"P",{});var dZr=s(Ole);ETo=r(dZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dZr.forEach(t),CTo=i(ow),xi=n(ow,"P",{});var lK=s(xi);wTo=r(lK,`Note:
Loading a model from its configuration file does `),Vle=n(lK,"STRONG",{});var cZr=s(Vle);ATo=r(cZr,"not"),cZr.forEach(t),yTo=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(lK,"A",{href:!0});var fZr=s(bN);LTo=r(fZr,"from_pretrained()"),fZr.forEach(t),xTo=r(lK," to load the model weights."),lK.forEach(t),$To=i(ow),T(y_.$$.fragment,ow),ow.forEach(t),kTo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(B6.$$.fragment,oa),STo=i(oa),Xle=n(oa,"P",{});var mZr=s(Xle);RTo=r(mZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mZr.forEach(t),BTo=i(oa),La=n(oa,"P",{});var rw=s(La);PTo=r(rw,"The model class to instantiate is selected based on the "),zle=n(rw,"CODE",{});var gZr=s(zle);ITo=r(gZr,"model_type"),gZr.forEach(t),qTo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Qle=n(rw,"CODE",{});var hZr=s(Qle);NTo=r(hZr,"pretrained_model_name_or_path"),hZr.forEach(t),jTo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(rw,"CODE",{});var pZr=s(Wle);DTo=r(pZr,"pretrained_model_name_or_path"),pZr.forEach(t),GTo=r(rw,":"),rw.forEach(t),OTo=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var c6e=s(L_);Hle=n(c6e,"STRONG",{});var uZr=s(Hle);VTo=r(uZr,"bart"),uZr.forEach(t),XTo=r(c6e," \u2014 "),vN=n(c6e,"A",{href:!0});var _Zr=s(vN);zTo=r(_Zr,"BartForCausalLM"),_Zr.forEach(t),QTo=r(c6e," (BART model)"),c6e.forEach(t),WTo=i(W),x_=n(W,"LI",{});var f6e=s(x_);Ule=n(f6e,"STRONG",{});var bZr=s(Ule);HTo=r(bZr,"bert"),bZr.forEach(t),UTo=r(f6e," \u2014 "),FN=n(f6e,"A",{href:!0});var vZr=s(FN);JTo=r(vZr,"BertLMHeadModel"),vZr.forEach(t),YTo=r(f6e," (BERT model)"),f6e.forEach(t),KTo=i(W),$_=n(W,"LI",{});var m6e=s($_);Jle=n(m6e,"STRONG",{});var FZr=s(Jle);ZTo=r(FZr,"bert-generation"),FZr.forEach(t),e7o=r(m6e," \u2014 "),TN=n(m6e,"A",{href:!0});var TZr=s(TN);o7o=r(TZr,"BertGenerationDecoder"),TZr.forEach(t),r7o=r(m6e," (Bert Generation model)"),m6e.forEach(t),t7o=i(W),k_=n(W,"LI",{});var g6e=s(k_);Yle=n(g6e,"STRONG",{});var MZr=s(Yle);a7o=r(MZr,"big_bird"),MZr.forEach(t),n7o=r(g6e," \u2014 "),MN=n(g6e,"A",{href:!0});var EZr=s(MN);s7o=r(EZr,"BigBirdForCausalLM"),EZr.forEach(t),l7o=r(g6e," (BigBird model)"),g6e.forEach(t),i7o=i(W),S_=n(W,"LI",{});var h6e=s(S_);Kle=n(h6e,"STRONG",{});var CZr=s(Kle);d7o=r(CZr,"bigbird_pegasus"),CZr.forEach(t),c7o=r(h6e," \u2014 "),EN=n(h6e,"A",{href:!0});var wZr=s(EN);f7o=r(wZr,"BigBirdPegasusForCausalLM"),wZr.forEach(t),m7o=r(h6e," (BigBirdPegasus model)"),h6e.forEach(t),g7o=i(W),R_=n(W,"LI",{});var p6e=s(R_);Zle=n(p6e,"STRONG",{});var AZr=s(Zle);h7o=r(AZr,"blenderbot"),AZr.forEach(t),p7o=r(p6e," \u2014 "),CN=n(p6e,"A",{href:!0});var yZr=s(CN);u7o=r(yZr,"BlenderbotForCausalLM"),yZr.forEach(t),_7o=r(p6e," (Blenderbot model)"),p6e.forEach(t),b7o=i(W),B_=n(W,"LI",{});var u6e=s(B_);eie=n(u6e,"STRONG",{});var LZr=s(eie);v7o=r(LZr,"blenderbot-small"),LZr.forEach(t),F7o=r(u6e," \u2014 "),wN=n(u6e,"A",{href:!0});var xZr=s(wN);T7o=r(xZr,"BlenderbotSmallForCausalLM"),xZr.forEach(t),M7o=r(u6e," (BlenderbotSmall model)"),u6e.forEach(t),E7o=i(W),P_=n(W,"LI",{});var _6e=s(P_);oie=n(_6e,"STRONG",{});var $Zr=s(oie);C7o=r($Zr,"camembert"),$Zr.forEach(t),w7o=r(_6e," \u2014 "),AN=n(_6e,"A",{href:!0});var kZr=s(AN);A7o=r(kZr,"CamembertForCausalLM"),kZr.forEach(t),y7o=r(_6e," (CamemBERT model)"),_6e.forEach(t),L7o=i(W),I_=n(W,"LI",{});var b6e=s(I_);rie=n(b6e,"STRONG",{});var SZr=s(rie);x7o=r(SZr,"ctrl"),SZr.forEach(t),$7o=r(b6e," \u2014 "),yN=n(b6e,"A",{href:!0});var RZr=s(yN);k7o=r(RZr,"CTRLLMHeadModel"),RZr.forEach(t),S7o=r(b6e," (CTRL model)"),b6e.forEach(t),R7o=i(W),q_=n(W,"LI",{});var v6e=s(q_);tie=n(v6e,"STRONG",{});var BZr=s(tie);B7o=r(BZr,"data2vec-text"),BZr.forEach(t),P7o=r(v6e," \u2014 "),LN=n(v6e,"A",{href:!0});var PZr=s(LN);I7o=r(PZr,"Data2VecTextForCausalLM"),PZr.forEach(t),q7o=r(v6e," (Data2VecText model)"),v6e.forEach(t),N7o=i(W),N_=n(W,"LI",{});var F6e=s(N_);aie=n(F6e,"STRONG",{});var IZr=s(aie);j7o=r(IZr,"electra"),IZr.forEach(t),D7o=r(F6e," \u2014 "),xN=n(F6e,"A",{href:!0});var qZr=s(xN);G7o=r(qZr,"ElectraForCausalLM"),qZr.forEach(t),O7o=r(F6e," (ELECTRA model)"),F6e.forEach(t),V7o=i(W),j_=n(W,"LI",{});var T6e=s(j_);nie=n(T6e,"STRONG",{});var NZr=s(nie);X7o=r(NZr,"gpt2"),NZr.forEach(t),z7o=r(T6e," \u2014 "),$N=n(T6e,"A",{href:!0});var jZr=s($N);Q7o=r(jZr,"GPT2LMHeadModel"),jZr.forEach(t),W7o=r(T6e," (OpenAI GPT-2 model)"),T6e.forEach(t),H7o=i(W),D_=n(W,"LI",{});var M6e=s(D_);sie=n(M6e,"STRONG",{});var DZr=s(sie);U7o=r(DZr,"gpt_neo"),DZr.forEach(t),J7o=r(M6e," \u2014 "),kN=n(M6e,"A",{href:!0});var GZr=s(kN);Y7o=r(GZr,"GPTNeoForCausalLM"),GZr.forEach(t),K7o=r(M6e," (GPT Neo model)"),M6e.forEach(t),Z7o=i(W),G_=n(W,"LI",{});var E6e=s(G_);lie=n(E6e,"STRONG",{});var OZr=s(lie);eMo=r(OZr,"gptj"),OZr.forEach(t),oMo=r(E6e," \u2014 "),SN=n(E6e,"A",{href:!0});var VZr=s(SN);rMo=r(VZr,"GPTJForCausalLM"),VZr.forEach(t),tMo=r(E6e," (GPT-J model)"),E6e.forEach(t),aMo=i(W),O_=n(W,"LI",{});var C6e=s(O_);iie=n(C6e,"STRONG",{});var XZr=s(iie);nMo=r(XZr,"marian"),XZr.forEach(t),sMo=r(C6e," \u2014 "),RN=n(C6e,"A",{href:!0});var zZr=s(RN);lMo=r(zZr,"MarianForCausalLM"),zZr.forEach(t),iMo=r(C6e," (Marian model)"),C6e.forEach(t),dMo=i(W),V_=n(W,"LI",{});var w6e=s(V_);die=n(w6e,"STRONG",{});var QZr=s(die);cMo=r(QZr,"mbart"),QZr.forEach(t),fMo=r(w6e," \u2014 "),BN=n(w6e,"A",{href:!0});var WZr=s(BN);mMo=r(WZr,"MBartForCausalLM"),WZr.forEach(t),gMo=r(w6e," (mBART model)"),w6e.forEach(t),hMo=i(W),X_=n(W,"LI",{});var A6e=s(X_);cie=n(A6e,"STRONG",{});var HZr=s(cie);pMo=r(HZr,"megatron-bert"),HZr.forEach(t),uMo=r(A6e," \u2014 "),PN=n(A6e,"A",{href:!0});var UZr=s(PN);_Mo=r(UZr,"MegatronBertForCausalLM"),UZr.forEach(t),bMo=r(A6e," (MegatronBert model)"),A6e.forEach(t),vMo=i(W),z_=n(W,"LI",{});var y6e=s(z_);fie=n(y6e,"STRONG",{});var JZr=s(fie);FMo=r(JZr,"openai-gpt"),JZr.forEach(t),TMo=r(y6e," \u2014 "),IN=n(y6e,"A",{href:!0});var YZr=s(IN);MMo=r(YZr,"OpenAIGPTLMHeadModel"),YZr.forEach(t),EMo=r(y6e," (OpenAI GPT model)"),y6e.forEach(t),CMo=i(W),Q_=n(W,"LI",{});var L6e=s(Q_);mie=n(L6e,"STRONG",{});var KZr=s(mie);wMo=r(KZr,"opt"),KZr.forEach(t),AMo=r(L6e," \u2014 "),qN=n(L6e,"A",{href:!0});var ZZr=s(qN);yMo=r(ZZr,"OPTForCausalLM"),ZZr.forEach(t),LMo=r(L6e," (OPT model)"),L6e.forEach(t),xMo=i(W),W_=n(W,"LI",{});var x6e=s(W_);gie=n(x6e,"STRONG",{});var eet=s(gie);$Mo=r(eet,"pegasus"),eet.forEach(t),kMo=r(x6e," \u2014 "),NN=n(x6e,"A",{href:!0});var oet=s(NN);SMo=r(oet,"PegasusForCausalLM"),oet.forEach(t),RMo=r(x6e," (Pegasus model)"),x6e.forEach(t),BMo=i(W),H_=n(W,"LI",{});var $6e=s(H_);hie=n($6e,"STRONG",{});var ret=s(hie);PMo=r(ret,"plbart"),ret.forEach(t),IMo=r($6e," \u2014 "),jN=n($6e,"A",{href:!0});var tet=s(jN);qMo=r(tet,"PLBartForCausalLM"),tet.forEach(t),NMo=r($6e," (PLBart model)"),$6e.forEach(t),jMo=i(W),U_=n(W,"LI",{});var k6e=s(U_);pie=n(k6e,"STRONG",{});var aet=s(pie);DMo=r(aet,"prophetnet"),aet.forEach(t),GMo=r(k6e," \u2014 "),DN=n(k6e,"A",{href:!0});var net=s(DN);OMo=r(net,"ProphetNetForCausalLM"),net.forEach(t),VMo=r(k6e," (ProphetNet model)"),k6e.forEach(t),XMo=i(W),J_=n(W,"LI",{});var S6e=s(J_);uie=n(S6e,"STRONG",{});var set=s(uie);zMo=r(set,"qdqbert"),set.forEach(t),QMo=r(S6e," \u2014 "),GN=n(S6e,"A",{href:!0});var iet=s(GN);WMo=r(iet,"QDQBertLMHeadModel"),iet.forEach(t),HMo=r(S6e," (QDQBert model)"),S6e.forEach(t),UMo=i(W),Y_=n(W,"LI",{});var R6e=s(Y_);_ie=n(R6e,"STRONG",{});var det=s(_ie);JMo=r(det,"reformer"),det.forEach(t),YMo=r(R6e," \u2014 "),ON=n(R6e,"A",{href:!0});var cet=s(ON);KMo=r(cet,"ReformerModelWithLMHead"),cet.forEach(t),ZMo=r(R6e," (Reformer model)"),R6e.forEach(t),e4o=i(W),K_=n(W,"LI",{});var B6e=s(K_);bie=n(B6e,"STRONG",{});var fet=s(bie);o4o=r(fet,"rembert"),fet.forEach(t),r4o=r(B6e," \u2014 "),VN=n(B6e,"A",{href:!0});var met=s(VN);t4o=r(met,"RemBertForCausalLM"),met.forEach(t),a4o=r(B6e," (RemBERT model)"),B6e.forEach(t),n4o=i(W),Z_=n(W,"LI",{});var P6e=s(Z_);vie=n(P6e,"STRONG",{});var get=s(vie);s4o=r(get,"roberta"),get.forEach(t),l4o=r(P6e," \u2014 "),XN=n(P6e,"A",{href:!0});var het=s(XN);i4o=r(het,"RobertaForCausalLM"),het.forEach(t),d4o=r(P6e," (RoBERTa model)"),P6e.forEach(t),c4o=i(W),e2=n(W,"LI",{});var I6e=s(e2);Fie=n(I6e,"STRONG",{});var pet=s(Fie);f4o=r(pet,"roformer"),pet.forEach(t),m4o=r(I6e," \u2014 "),zN=n(I6e,"A",{href:!0});var uet=s(zN);g4o=r(uet,"RoFormerForCausalLM"),uet.forEach(t),h4o=r(I6e," (RoFormer model)"),I6e.forEach(t),p4o=i(W),o2=n(W,"LI",{});var q6e=s(o2);Tie=n(q6e,"STRONG",{});var _et=s(Tie);u4o=r(_et,"speech_to_text_2"),_et.forEach(t),_4o=r(q6e," \u2014 "),QN=n(q6e,"A",{href:!0});var bet=s(QN);b4o=r(bet,"Speech2Text2ForCausalLM"),bet.forEach(t),v4o=r(q6e," (Speech2Text2 model)"),q6e.forEach(t),F4o=i(W),r2=n(W,"LI",{});var N6e=s(r2);Mie=n(N6e,"STRONG",{});var vet=s(Mie);T4o=r(vet,"transfo-xl"),vet.forEach(t),M4o=r(N6e," \u2014 "),WN=n(N6e,"A",{href:!0});var Fet=s(WN);E4o=r(Fet,"TransfoXLLMHeadModel"),Fet.forEach(t),C4o=r(N6e," (Transformer-XL model)"),N6e.forEach(t),w4o=i(W),t2=n(W,"LI",{});var j6e=s(t2);Eie=n(j6e,"STRONG",{});var Tet=s(Eie);A4o=r(Tet,"trocr"),Tet.forEach(t),y4o=r(j6e," \u2014 "),HN=n(j6e,"A",{href:!0});var Met=s(HN);L4o=r(Met,"TrOCRForCausalLM"),Met.forEach(t),x4o=r(j6e," (TrOCR model)"),j6e.forEach(t),$4o=i(W),a2=n(W,"LI",{});var D6e=s(a2);Cie=n(D6e,"STRONG",{});var Eet=s(Cie);k4o=r(Eet,"xglm"),Eet.forEach(t),S4o=r(D6e," \u2014 "),UN=n(D6e,"A",{href:!0});var Cet=s(UN);R4o=r(Cet,"XGLMForCausalLM"),Cet.forEach(t),B4o=r(D6e," (XGLM model)"),D6e.forEach(t),P4o=i(W),n2=n(W,"LI",{});var G6e=s(n2);wie=n(G6e,"STRONG",{});var wet=s(wie);I4o=r(wet,"xlm"),wet.forEach(t),q4o=r(G6e," \u2014 "),JN=n(G6e,"A",{href:!0});var Aet=s(JN);N4o=r(Aet,"XLMWithLMHeadModel"),Aet.forEach(t),j4o=r(G6e," (XLM model)"),G6e.forEach(t),D4o=i(W),s2=n(W,"LI",{});var O6e=s(s2);Aie=n(O6e,"STRONG",{});var yet=s(Aie);G4o=r(yet,"xlm-prophetnet"),yet.forEach(t),O4o=r(O6e," \u2014 "),YN=n(O6e,"A",{href:!0});var Let=s(YN);V4o=r(Let,"XLMProphetNetForCausalLM"),Let.forEach(t),X4o=r(O6e," (XLMProphetNet model)"),O6e.forEach(t),z4o=i(W),l2=n(W,"LI",{});var V6e=s(l2);yie=n(V6e,"STRONG",{});var xet=s(yie);Q4o=r(xet,"xlm-roberta"),xet.forEach(t),W4o=r(V6e," \u2014 "),KN=n(V6e,"A",{href:!0});var $et=s(KN);H4o=r($et,"XLMRobertaForCausalLM"),$et.forEach(t),U4o=r(V6e," (XLM-RoBERTa model)"),V6e.forEach(t),J4o=i(W),i2=n(W,"LI",{});var X6e=s(i2);Lie=n(X6e,"STRONG",{});var ket=s(Lie);Y4o=r(ket,"xlm-roberta-xl"),ket.forEach(t),K4o=r(X6e," \u2014 "),ZN=n(X6e,"A",{href:!0});var Set=s(ZN);Z4o=r(Set,"XLMRobertaXLForCausalLM"),Set.forEach(t),eEo=r(X6e," (XLM-RoBERTa-XL model)"),X6e.forEach(t),oEo=i(W),d2=n(W,"LI",{});var z6e=s(d2);xie=n(z6e,"STRONG",{});var Ret=s(xie);rEo=r(Ret,"xlnet"),Ret.forEach(t),tEo=r(z6e," \u2014 "),ej=n(z6e,"A",{href:!0});var Bet=s(ej);aEo=r(Bet,"XLNetLMHeadModel"),Bet.forEach(t),nEo=r(z6e," (XLNet model)"),z6e.forEach(t),W.forEach(t),sEo=i(oa),c2=n(oa,"P",{});var Q6e=s(c2);lEo=r(Q6e,"The model is set in evaluation mode by default using "),$ie=n(Q6e,"CODE",{});var Pet=s($ie);iEo=r(Pet,"model.eval()"),Pet.forEach(t),dEo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(Q6e,"CODE",{});var Iet=s(kie);cEo=r(Iet,"model.train()"),Iet.forEach(t),Q6e.forEach(t),fEo=i(oa),T(f2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),JPe=i(f),$i=n(f,"H2",{class:!0});var eNe=s($i);m2=n(eNe,"A",{id:!0,class:!0,href:!0});var qet=s(m2);Sie=n(qet,"SPAN",{});var Net=s(Sie);T(P6.$$.fragment,Net),Net.forEach(t),qet.forEach(t),mEo=i(eNe),Rie=n(eNe,"SPAN",{});var jet=s(Rie);gEo=r(jet,"AutoModelForMaskedLM"),jet.forEach(t),eNe.forEach(t),YPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(I6.$$.fragment,Os),hEo=i(Os),ki=n(Os,"P",{});var iK=s(ki);pEo=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oj=n(iK,"A",{href:!0});var Det=s(oj);uEo=r(Det,"from_pretrained()"),Det.forEach(t),_Eo=r(iK," class method or the "),rj=n(iK,"A",{href:!0});var Get=s(rj);bEo=r(Get,"from_config()"),Get.forEach(t),vEo=r(iK,` class
method.`),iK.forEach(t),FEo=i(Os),q6=n(Os,"P",{});var oNe=s(q6);TEo=r(oNe,"This class cannot be instantiated directly using "),Bie=n(oNe,"CODE",{});var Oet=s(Bie);MEo=r(Oet,"__init__()"),Oet.forEach(t),EEo=r(oNe," (throws an error)."),oNe.forEach(t),CEo=i(Os),at=n(Os,"DIV",{class:!0});var tw=s(at);T(N6.$$.fragment,tw),wEo=i(tw),Pie=n(tw,"P",{});var Vet=s(Pie);AEo=r(Vet,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vet.forEach(t),yEo=i(tw),Si=n(tw,"P",{});var dK=s(Si);LEo=r(dK,`Note:
Loading a model from its configuration file does `),Iie=n(dK,"STRONG",{});var Xet=s(Iie);xEo=r(Xet,"not"),Xet.forEach(t),$Eo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(dK,"A",{href:!0});var zet=s(tj);kEo=r(zet,"from_pretrained()"),zet.forEach(t),SEo=r(dK," to load the model weights."),dK.forEach(t),REo=i(tw),T(g2.$$.fragment,tw),tw.forEach(t),BEo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(j6.$$.fragment,ra),PEo=i(ra),qie=n(ra,"P",{});var Qet=s(qie);IEo=r(Qet,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qet.forEach(t),qEo=i(ra),xa=n(ra,"P",{});var aw=s(xa);NEo=r(aw,"The model class to instantiate is selected based on the "),Nie=n(aw,"CODE",{});var Wet=s(Nie);jEo=r(Wet,"model_type"),Wet.forEach(t),DEo=r(aw,` property of the config object (either
passed as an argument or loaded from `),jie=n(aw,"CODE",{});var Het=s(jie);GEo=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),OEo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(aw,"CODE",{});var Uet=s(Die);VEo=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),XEo=r(aw,":"),aw.forEach(t),zEo=i(ra),Q=n(ra,"UL",{});var H=s(Q);h2=n(H,"LI",{});var W6e=s(h2);Gie=n(W6e,"STRONG",{});var Jet=s(Gie);QEo=r(Jet,"albert"),Jet.forEach(t),WEo=r(W6e," \u2014 "),aj=n(W6e,"A",{href:!0});var Yet=s(aj);HEo=r(Yet,"AlbertForMaskedLM"),Yet.forEach(t),UEo=r(W6e," (ALBERT model)"),W6e.forEach(t),JEo=i(H),p2=n(H,"LI",{});var H6e=s(p2);Oie=n(H6e,"STRONG",{});var Ket=s(Oie);YEo=r(Ket,"bart"),Ket.forEach(t),KEo=r(H6e," \u2014 "),nj=n(H6e,"A",{href:!0});var Zet=s(nj);ZEo=r(Zet,"BartForConditionalGeneration"),Zet.forEach(t),eCo=r(H6e," (BART model)"),H6e.forEach(t),oCo=i(H),u2=n(H,"LI",{});var U6e=s(u2);Vie=n(U6e,"STRONG",{});var eot=s(Vie);rCo=r(eot,"bert"),eot.forEach(t),tCo=r(U6e," \u2014 "),sj=n(U6e,"A",{href:!0});var oot=s(sj);aCo=r(oot,"BertForMaskedLM"),oot.forEach(t),nCo=r(U6e," (BERT model)"),U6e.forEach(t),sCo=i(H),_2=n(H,"LI",{});var J6e=s(_2);Xie=n(J6e,"STRONG",{});var rot=s(Xie);lCo=r(rot,"big_bird"),rot.forEach(t),iCo=r(J6e," \u2014 "),lj=n(J6e,"A",{href:!0});var tot=s(lj);dCo=r(tot,"BigBirdForMaskedLM"),tot.forEach(t),cCo=r(J6e," (BigBird model)"),J6e.forEach(t),fCo=i(H),b2=n(H,"LI",{});var Y6e=s(b2);zie=n(Y6e,"STRONG",{});var aot=s(zie);mCo=r(aot,"camembert"),aot.forEach(t),gCo=r(Y6e," \u2014 "),ij=n(Y6e,"A",{href:!0});var not=s(ij);hCo=r(not,"CamembertForMaskedLM"),not.forEach(t),pCo=r(Y6e," (CamemBERT model)"),Y6e.forEach(t),uCo=i(H),v2=n(H,"LI",{});var K6e=s(v2);Qie=n(K6e,"STRONG",{});var sot=s(Qie);_Co=r(sot,"convbert"),sot.forEach(t),bCo=r(K6e," \u2014 "),dj=n(K6e,"A",{href:!0});var lot=s(dj);vCo=r(lot,"ConvBertForMaskedLM"),lot.forEach(t),FCo=r(K6e," (ConvBERT model)"),K6e.forEach(t),TCo=i(H),F2=n(H,"LI",{});var Z6e=s(F2);Wie=n(Z6e,"STRONG",{});var iot=s(Wie);MCo=r(iot,"data2vec-text"),iot.forEach(t),ECo=r(Z6e," \u2014 "),cj=n(Z6e,"A",{href:!0});var dot=s(cj);CCo=r(dot,"Data2VecTextForMaskedLM"),dot.forEach(t),wCo=r(Z6e," (Data2VecText model)"),Z6e.forEach(t),ACo=i(H),T2=n(H,"LI",{});var eye=s(T2);Hie=n(eye,"STRONG",{});var cot=s(Hie);yCo=r(cot,"deberta"),cot.forEach(t),LCo=r(eye," \u2014 "),fj=n(eye,"A",{href:!0});var fot=s(fj);xCo=r(fot,"DebertaForMaskedLM"),fot.forEach(t),$Co=r(eye," (DeBERTa model)"),eye.forEach(t),kCo=i(H),M2=n(H,"LI",{});var oye=s(M2);Uie=n(oye,"STRONG",{});var mot=s(Uie);SCo=r(mot,"deberta-v2"),mot.forEach(t),RCo=r(oye," \u2014 "),mj=n(oye,"A",{href:!0});var got=s(mj);BCo=r(got,"DebertaV2ForMaskedLM"),got.forEach(t),PCo=r(oye," (DeBERTa-v2 model)"),oye.forEach(t),ICo=i(H),E2=n(H,"LI",{});var rye=s(E2);Jie=n(rye,"STRONG",{});var hot=s(Jie);qCo=r(hot,"distilbert"),hot.forEach(t),NCo=r(rye," \u2014 "),gj=n(rye,"A",{href:!0});var pot=s(gj);jCo=r(pot,"DistilBertForMaskedLM"),pot.forEach(t),DCo=r(rye," (DistilBERT model)"),rye.forEach(t),GCo=i(H),C2=n(H,"LI",{});var tye=s(C2);Yie=n(tye,"STRONG",{});var uot=s(Yie);OCo=r(uot,"electra"),uot.forEach(t),VCo=r(tye," \u2014 "),hj=n(tye,"A",{href:!0});var _ot=s(hj);XCo=r(_ot,"ElectraForMaskedLM"),_ot.forEach(t),zCo=r(tye," (ELECTRA model)"),tye.forEach(t),QCo=i(H),w2=n(H,"LI",{});var aye=s(w2);Kie=n(aye,"STRONG",{});var bot=s(Kie);WCo=r(bot,"flaubert"),bot.forEach(t),HCo=r(aye," \u2014 "),pj=n(aye,"A",{href:!0});var vot=s(pj);UCo=r(vot,"FlaubertWithLMHeadModel"),vot.forEach(t),JCo=r(aye," (FlauBERT model)"),aye.forEach(t),YCo=i(H),A2=n(H,"LI",{});var nye=s(A2);Zie=n(nye,"STRONG",{});var Fot=s(Zie);KCo=r(Fot,"fnet"),Fot.forEach(t),ZCo=r(nye," \u2014 "),uj=n(nye,"A",{href:!0});var Tot=s(uj);e3o=r(Tot,"FNetForMaskedLM"),Tot.forEach(t),o3o=r(nye," (FNet model)"),nye.forEach(t),r3o=i(H),y2=n(H,"LI",{});var sye=s(y2);ede=n(sye,"STRONG",{});var Mot=s(ede);t3o=r(Mot,"funnel"),Mot.forEach(t),a3o=r(sye," \u2014 "),_j=n(sye,"A",{href:!0});var Eot=s(_j);n3o=r(Eot,"FunnelForMaskedLM"),Eot.forEach(t),s3o=r(sye," (Funnel Transformer model)"),sye.forEach(t),l3o=i(H),L2=n(H,"LI",{});var lye=s(L2);ode=n(lye,"STRONG",{});var Cot=s(ode);i3o=r(Cot,"ibert"),Cot.forEach(t),d3o=r(lye," \u2014 "),bj=n(lye,"A",{href:!0});var wot=s(bj);c3o=r(wot,"IBertForMaskedLM"),wot.forEach(t),f3o=r(lye," (I-BERT model)"),lye.forEach(t),m3o=i(H),x2=n(H,"LI",{});var iye=s(x2);rde=n(iye,"STRONG",{});var Aot=s(rde);g3o=r(Aot,"layoutlm"),Aot.forEach(t),h3o=r(iye," \u2014 "),vj=n(iye,"A",{href:!0});var yot=s(vj);p3o=r(yot,"LayoutLMForMaskedLM"),yot.forEach(t),u3o=r(iye," (LayoutLM model)"),iye.forEach(t),_3o=i(H),$2=n(H,"LI",{});var dye=s($2);tde=n(dye,"STRONG",{});var Lot=s(tde);b3o=r(Lot,"longformer"),Lot.forEach(t),v3o=r(dye," \u2014 "),Fj=n(dye,"A",{href:!0});var xot=s(Fj);F3o=r(xot,"LongformerForMaskedLM"),xot.forEach(t),T3o=r(dye," (Longformer model)"),dye.forEach(t),M3o=i(H),k2=n(H,"LI",{});var cye=s(k2);ade=n(cye,"STRONG",{});var $ot=s(ade);E3o=r($ot,"mbart"),$ot.forEach(t),C3o=r(cye," \u2014 "),Tj=n(cye,"A",{href:!0});var kot=s(Tj);w3o=r(kot,"MBartForConditionalGeneration"),kot.forEach(t),A3o=r(cye," (mBART model)"),cye.forEach(t),y3o=i(H),S2=n(H,"LI",{});var fye=s(S2);nde=n(fye,"STRONG",{});var Sot=s(nde);L3o=r(Sot,"megatron-bert"),Sot.forEach(t),x3o=r(fye," \u2014 "),Mj=n(fye,"A",{href:!0});var Rot=s(Mj);$3o=r(Rot,"MegatronBertForMaskedLM"),Rot.forEach(t),k3o=r(fye," (MegatronBert model)"),fye.forEach(t),S3o=i(H),R2=n(H,"LI",{});var mye=s(R2);sde=n(mye,"STRONG",{});var Bot=s(sde);R3o=r(Bot,"mobilebert"),Bot.forEach(t),B3o=r(mye," \u2014 "),Ej=n(mye,"A",{href:!0});var Pot=s(Ej);P3o=r(Pot,"MobileBertForMaskedLM"),Pot.forEach(t),I3o=r(mye," (MobileBERT model)"),mye.forEach(t),q3o=i(H),B2=n(H,"LI",{});var gye=s(B2);lde=n(gye,"STRONG",{});var Iot=s(lde);N3o=r(Iot,"mpnet"),Iot.forEach(t),j3o=r(gye," \u2014 "),Cj=n(gye,"A",{href:!0});var qot=s(Cj);D3o=r(qot,"MPNetForMaskedLM"),qot.forEach(t),G3o=r(gye," (MPNet model)"),gye.forEach(t),O3o=i(H),P2=n(H,"LI",{});var hye=s(P2);ide=n(hye,"STRONG",{});var Not=s(ide);V3o=r(Not,"nystromformer"),Not.forEach(t),X3o=r(hye," \u2014 "),wj=n(hye,"A",{href:!0});var jot=s(wj);z3o=r(jot,"NystromformerForMaskedLM"),jot.forEach(t),Q3o=r(hye," (Nystromformer model)"),hye.forEach(t),W3o=i(H),I2=n(H,"LI",{});var pye=s(I2);dde=n(pye,"STRONG",{});var Dot=s(dde);H3o=r(Dot,"perceiver"),Dot.forEach(t),U3o=r(pye," \u2014 "),Aj=n(pye,"A",{href:!0});var Got=s(Aj);J3o=r(Got,"PerceiverForMaskedLM"),Got.forEach(t),Y3o=r(pye," (Perceiver model)"),pye.forEach(t),K3o=i(H),q2=n(H,"LI",{});var uye=s(q2);cde=n(uye,"STRONG",{});var Oot=s(cde);Z3o=r(Oot,"qdqbert"),Oot.forEach(t),ewo=r(uye," \u2014 "),yj=n(uye,"A",{href:!0});var Vot=s(yj);owo=r(Vot,"QDQBertForMaskedLM"),Vot.forEach(t),rwo=r(uye," (QDQBert model)"),uye.forEach(t),two=i(H),N2=n(H,"LI",{});var _ye=s(N2);fde=n(_ye,"STRONG",{});var Xot=s(fde);awo=r(Xot,"reformer"),Xot.forEach(t),nwo=r(_ye," \u2014 "),Lj=n(_ye,"A",{href:!0});var zot=s(Lj);swo=r(zot,"ReformerForMaskedLM"),zot.forEach(t),lwo=r(_ye," (Reformer model)"),_ye.forEach(t),iwo=i(H),j2=n(H,"LI",{});var bye=s(j2);mde=n(bye,"STRONG",{});var Qot=s(mde);dwo=r(Qot,"rembert"),Qot.forEach(t),cwo=r(bye," \u2014 "),xj=n(bye,"A",{href:!0});var Wot=s(xj);fwo=r(Wot,"RemBertForMaskedLM"),Wot.forEach(t),mwo=r(bye," (RemBERT model)"),bye.forEach(t),gwo=i(H),D2=n(H,"LI",{});var vye=s(D2);gde=n(vye,"STRONG",{});var Hot=s(gde);hwo=r(Hot,"roberta"),Hot.forEach(t),pwo=r(vye," \u2014 "),$j=n(vye,"A",{href:!0});var Uot=s($j);uwo=r(Uot,"RobertaForMaskedLM"),Uot.forEach(t),_wo=r(vye," (RoBERTa model)"),vye.forEach(t),bwo=i(H),G2=n(H,"LI",{});var Fye=s(G2);hde=n(Fye,"STRONG",{});var Jot=s(hde);vwo=r(Jot,"roformer"),Jot.forEach(t),Fwo=r(Fye," \u2014 "),kj=n(Fye,"A",{href:!0});var Yot=s(kj);Two=r(Yot,"RoFormerForMaskedLM"),Yot.forEach(t),Mwo=r(Fye," (RoFormer model)"),Fye.forEach(t),Ewo=i(H),O2=n(H,"LI",{});var Tye=s(O2);pde=n(Tye,"STRONG",{});var Kot=s(pde);Cwo=r(Kot,"squeezebert"),Kot.forEach(t),wwo=r(Tye," \u2014 "),Sj=n(Tye,"A",{href:!0});var Zot=s(Sj);Awo=r(Zot,"SqueezeBertForMaskedLM"),Zot.forEach(t),ywo=r(Tye," (SqueezeBERT model)"),Tye.forEach(t),Lwo=i(H),V2=n(H,"LI",{});var Mye=s(V2);ude=n(Mye,"STRONG",{});var ert=s(ude);xwo=r(ert,"tapas"),ert.forEach(t),$wo=r(Mye," \u2014 "),Rj=n(Mye,"A",{href:!0});var ort=s(Rj);kwo=r(ort,"TapasForMaskedLM"),ort.forEach(t),Swo=r(Mye," (TAPAS model)"),Mye.forEach(t),Rwo=i(H),X2=n(H,"LI",{});var Eye=s(X2);_de=n(Eye,"STRONG",{});var rrt=s(_de);Bwo=r(rrt,"wav2vec2"),rrt.forEach(t),Pwo=r(Eye," \u2014 "),bde=n(Eye,"CODE",{});var trt=s(bde);Iwo=r(trt,"Wav2Vec2ForMaskedLM"),trt.forEach(t),qwo=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),Nwo=i(H),z2=n(H,"LI",{});var Cye=s(z2);vde=n(Cye,"STRONG",{});var art=s(vde);jwo=r(art,"xlm"),art.forEach(t),Dwo=r(Cye," \u2014 "),Bj=n(Cye,"A",{href:!0});var nrt=s(Bj);Gwo=r(nrt,"XLMWithLMHeadModel"),nrt.forEach(t),Owo=r(Cye," (XLM model)"),Cye.forEach(t),Vwo=i(H),Q2=n(H,"LI",{});var wye=s(Q2);Fde=n(wye,"STRONG",{});var srt=s(Fde);Xwo=r(srt,"xlm-roberta"),srt.forEach(t),zwo=r(wye," \u2014 "),Pj=n(wye,"A",{href:!0});var lrt=s(Pj);Qwo=r(lrt,"XLMRobertaForMaskedLM"),lrt.forEach(t),Wwo=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),Hwo=i(H),W2=n(H,"LI",{});var Aye=s(W2);Tde=n(Aye,"STRONG",{});var irt=s(Tde);Uwo=r(irt,"xlm-roberta-xl"),irt.forEach(t),Jwo=r(Aye," \u2014 "),Ij=n(Aye,"A",{href:!0});var drt=s(Ij);Ywo=r(drt,"XLMRobertaXLForMaskedLM"),drt.forEach(t),Kwo=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),Zwo=i(H),H2=n(H,"LI",{});var yye=s(H2);Mde=n(yye,"STRONG",{});var crt=s(Mde);eAo=r(crt,"yoso"),crt.forEach(t),oAo=r(yye," \u2014 "),qj=n(yye,"A",{href:!0});var frt=s(qj);rAo=r(frt,"YosoForMaskedLM"),frt.forEach(t),tAo=r(yye," (YOSO model)"),yye.forEach(t),H.forEach(t),aAo=i(ra),U2=n(ra,"P",{});var Lye=s(U2);nAo=r(Lye,"The model is set in evaluation mode by default using "),Ede=n(Lye,"CODE",{});var mrt=s(Ede);sAo=r(mrt,"model.eval()"),mrt.forEach(t),lAo=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(Lye,"CODE",{});var grt=s(Cde);iAo=r(grt,"model.train()"),grt.forEach(t),Lye.forEach(t),dAo=i(ra),T(J2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),KPe=i(f),Ri=n(f,"H2",{class:!0});var rNe=s(Ri);Y2=n(rNe,"A",{id:!0,class:!0,href:!0});var hrt=s(Y2);wde=n(hrt,"SPAN",{});var prt=s(wde);T(D6.$$.fragment,prt),prt.forEach(t),hrt.forEach(t),cAo=i(rNe),Ade=n(rNe,"SPAN",{});var urt=s(Ade);fAo=r(urt,"AutoModelForSeq2SeqLM"),urt.forEach(t),rNe.forEach(t),ZPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(G6.$$.fragment,Vs),mAo=i(Vs),Bi=n(Vs,"P",{});var cK=s(Bi);gAo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nj=n(cK,"A",{href:!0});var _rt=s(Nj);hAo=r(_rt,"from_pretrained()"),_rt.forEach(t),pAo=r(cK," class method or the "),jj=n(cK,"A",{href:!0});var brt=s(jj);uAo=r(brt,"from_config()"),brt.forEach(t),_Ao=r(cK,` class
method.`),cK.forEach(t),bAo=i(Vs),O6=n(Vs,"P",{});var tNe=s(O6);vAo=r(tNe,"This class cannot be instantiated directly using "),yde=n(tNe,"CODE",{});var vrt=s(yde);FAo=r(vrt,"__init__()"),vrt.forEach(t),TAo=r(tNe," (throws an error)."),tNe.forEach(t),MAo=i(Vs),nt=n(Vs,"DIV",{class:!0});var nw=s(nt);T(V6.$$.fragment,nw),EAo=i(nw),Lde=n(nw,"P",{});var Frt=s(Lde);CAo=r(Frt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Frt.forEach(t),wAo=i(nw),Pi=n(nw,"P",{});var fK=s(Pi);AAo=r(fK,`Note:
Loading a model from its configuration file does `),xde=n(fK,"STRONG",{});var Trt=s(xde);yAo=r(Trt,"not"),Trt.forEach(t),LAo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=n(fK,"A",{href:!0});var Mrt=s(Dj);xAo=r(Mrt,"from_pretrained()"),Mrt.forEach(t),$Ao=r(fK," to load the model weights."),fK.forEach(t),kAo=i(nw),T(K2.$$.fragment,nw),nw.forEach(t),SAo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(X6.$$.fragment,ta),RAo=i(ta),$de=n(ta,"P",{});var Ert=s($de);BAo=r(Ert,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ert.forEach(t),PAo=i(ta),$a=n(ta,"P",{});var sw=s($a);IAo=r(sw,"The model class to instantiate is selected based on the "),kde=n(sw,"CODE",{});var Crt=s(kde);qAo=r(Crt,"model_type"),Crt.forEach(t),NAo=r(sw,` property of the config object (either
passed as an argument or loaded from `),Sde=n(sw,"CODE",{});var wrt=s(Sde);jAo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),DAo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=n(sw,"CODE",{});var Art=s(Rde);GAo=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),OAo=r(sw,":"),sw.forEach(t),VAo=i(ta),pe=n(ta,"UL",{});var be=s(pe);Z2=n(be,"LI",{});var xye=s(Z2);Bde=n(xye,"STRONG",{});var yrt=s(Bde);XAo=r(yrt,"bart"),yrt.forEach(t),zAo=r(xye," \u2014 "),Gj=n(xye,"A",{href:!0});var Lrt=s(Gj);QAo=r(Lrt,"BartForConditionalGeneration"),Lrt.forEach(t),WAo=r(xye," (BART model)"),xye.forEach(t),HAo=i(be),e1=n(be,"LI",{});var $ye=s(e1);Pde=n($ye,"STRONG",{});var xrt=s(Pde);UAo=r(xrt,"bigbird_pegasus"),xrt.forEach(t),JAo=r($ye," \u2014 "),Oj=n($ye,"A",{href:!0});var $rt=s(Oj);YAo=r($rt,"BigBirdPegasusForConditionalGeneration"),$rt.forEach(t),KAo=r($ye," (BigBirdPegasus model)"),$ye.forEach(t),ZAo=i(be),o1=n(be,"LI",{});var kye=s(o1);Ide=n(kye,"STRONG",{});var krt=s(Ide);e6o=r(krt,"blenderbot"),krt.forEach(t),o6o=r(kye," \u2014 "),Vj=n(kye,"A",{href:!0});var Srt=s(Vj);r6o=r(Srt,"BlenderbotForConditionalGeneration"),Srt.forEach(t),t6o=r(kye," (Blenderbot model)"),kye.forEach(t),a6o=i(be),r1=n(be,"LI",{});var Sye=s(r1);qde=n(Sye,"STRONG",{});var Rrt=s(qde);n6o=r(Rrt,"blenderbot-small"),Rrt.forEach(t),s6o=r(Sye," \u2014 "),Xj=n(Sye,"A",{href:!0});var Brt=s(Xj);l6o=r(Brt,"BlenderbotSmallForConditionalGeneration"),Brt.forEach(t),i6o=r(Sye," (BlenderbotSmall model)"),Sye.forEach(t),d6o=i(be),t1=n(be,"LI",{});var Rye=s(t1);Nde=n(Rye,"STRONG",{});var Prt=s(Nde);c6o=r(Prt,"encoder-decoder"),Prt.forEach(t),f6o=r(Rye," \u2014 "),zj=n(Rye,"A",{href:!0});var Irt=s(zj);m6o=r(Irt,"EncoderDecoderModel"),Irt.forEach(t),g6o=r(Rye," (Encoder decoder model)"),Rye.forEach(t),h6o=i(be),a1=n(be,"LI",{});var Bye=s(a1);jde=n(Bye,"STRONG",{});var qrt=s(jde);p6o=r(qrt,"fsmt"),qrt.forEach(t),u6o=r(Bye," \u2014 "),Qj=n(Bye,"A",{href:!0});var Nrt=s(Qj);_6o=r(Nrt,"FSMTForConditionalGeneration"),Nrt.forEach(t),b6o=r(Bye," (FairSeq Machine-Translation model)"),Bye.forEach(t),v6o=i(be),n1=n(be,"LI",{});var Pye=s(n1);Dde=n(Pye,"STRONG",{});var jrt=s(Dde);F6o=r(jrt,"led"),jrt.forEach(t),T6o=r(Pye," \u2014 "),Wj=n(Pye,"A",{href:!0});var Drt=s(Wj);M6o=r(Drt,"LEDForConditionalGeneration"),Drt.forEach(t),E6o=r(Pye," (LED model)"),Pye.forEach(t),C6o=i(be),s1=n(be,"LI",{});var Iye=s(s1);Gde=n(Iye,"STRONG",{});var Grt=s(Gde);w6o=r(Grt,"m2m_100"),Grt.forEach(t),A6o=r(Iye," \u2014 "),Hj=n(Iye,"A",{href:!0});var Ort=s(Hj);y6o=r(Ort,"M2M100ForConditionalGeneration"),Ort.forEach(t),L6o=r(Iye," (M2M100 model)"),Iye.forEach(t),x6o=i(be),l1=n(be,"LI",{});var qye=s(l1);Ode=n(qye,"STRONG",{});var Vrt=s(Ode);$6o=r(Vrt,"marian"),Vrt.forEach(t),k6o=r(qye," \u2014 "),Uj=n(qye,"A",{href:!0});var Xrt=s(Uj);S6o=r(Xrt,"MarianMTModel"),Xrt.forEach(t),R6o=r(qye," (Marian model)"),qye.forEach(t),B6o=i(be),i1=n(be,"LI",{});var Nye=s(i1);Vde=n(Nye,"STRONG",{});var zrt=s(Vde);P6o=r(zrt,"mbart"),zrt.forEach(t),I6o=r(Nye," \u2014 "),Jj=n(Nye,"A",{href:!0});var Qrt=s(Jj);q6o=r(Qrt,"MBartForConditionalGeneration"),Qrt.forEach(t),N6o=r(Nye," (mBART model)"),Nye.forEach(t),j6o=i(be),d1=n(be,"LI",{});var jye=s(d1);Xde=n(jye,"STRONG",{});var Wrt=s(Xde);D6o=r(Wrt,"mt5"),Wrt.forEach(t),G6o=r(jye," \u2014 "),Yj=n(jye,"A",{href:!0});var Hrt=s(Yj);O6o=r(Hrt,"MT5ForConditionalGeneration"),Hrt.forEach(t),V6o=r(jye," (mT5 model)"),jye.forEach(t),X6o=i(be),c1=n(be,"LI",{});var Dye=s(c1);zde=n(Dye,"STRONG",{});var Urt=s(zde);z6o=r(Urt,"pegasus"),Urt.forEach(t),Q6o=r(Dye," \u2014 "),Kj=n(Dye,"A",{href:!0});var Jrt=s(Kj);W6o=r(Jrt,"PegasusForConditionalGeneration"),Jrt.forEach(t),H6o=r(Dye," (Pegasus model)"),Dye.forEach(t),U6o=i(be),f1=n(be,"LI",{});var Gye=s(f1);Qde=n(Gye,"STRONG",{});var Yrt=s(Qde);J6o=r(Yrt,"plbart"),Yrt.forEach(t),Y6o=r(Gye," \u2014 "),Zj=n(Gye,"A",{href:!0});var Krt=s(Zj);K6o=r(Krt,"PLBartForConditionalGeneration"),Krt.forEach(t),Z6o=r(Gye," (PLBart model)"),Gye.forEach(t),eyo=i(be),m1=n(be,"LI",{});var Oye=s(m1);Wde=n(Oye,"STRONG",{});var Zrt=s(Wde);oyo=r(Zrt,"prophetnet"),Zrt.forEach(t),ryo=r(Oye," \u2014 "),eD=n(Oye,"A",{href:!0});var ett=s(eD);tyo=r(ett,"ProphetNetForConditionalGeneration"),ett.forEach(t),ayo=r(Oye," (ProphetNet model)"),Oye.forEach(t),nyo=i(be),g1=n(be,"LI",{});var Vye=s(g1);Hde=n(Vye,"STRONG",{});var ott=s(Hde);syo=r(ott,"t5"),ott.forEach(t),lyo=r(Vye," \u2014 "),oD=n(Vye,"A",{href:!0});var rtt=s(oD);iyo=r(rtt,"T5ForConditionalGeneration"),rtt.forEach(t),dyo=r(Vye," (T5 model)"),Vye.forEach(t),cyo=i(be),h1=n(be,"LI",{});var Xye=s(h1);Ude=n(Xye,"STRONG",{});var ttt=s(Ude);fyo=r(ttt,"xlm-prophetnet"),ttt.forEach(t),myo=r(Xye," \u2014 "),rD=n(Xye,"A",{href:!0});var att=s(rD);gyo=r(att,"XLMProphetNetForConditionalGeneration"),att.forEach(t),hyo=r(Xye," (XLMProphetNet model)"),Xye.forEach(t),be.forEach(t),pyo=i(ta),p1=n(ta,"P",{});var zye=s(p1);uyo=r(zye,"The model is set in evaluation mode by default using "),Jde=n(zye,"CODE",{});var ntt=s(Jde);_yo=r(ntt,"model.eval()"),ntt.forEach(t),byo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=n(zye,"CODE",{});var stt=s(Yde);vyo=r(stt,"model.train()"),stt.forEach(t),zye.forEach(t),Fyo=i(ta),T(u1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),eIe=i(f),Ii=n(f,"H2",{class:!0});var aNe=s(Ii);_1=n(aNe,"A",{id:!0,class:!0,href:!0});var ltt=s(_1);Kde=n(ltt,"SPAN",{});var itt=s(Kde);T(z6.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),Tyo=i(aNe),Zde=n(aNe,"SPAN",{});var dtt=s(Zde);Myo=r(dtt,"AutoModelForSequenceClassification"),dtt.forEach(t),aNe.forEach(t),oIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(Q6.$$.fragment,Xs),Eyo=i(Xs),qi=n(Xs,"P",{});var mK=s(qi);Cyo=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tD=n(mK,"A",{href:!0});var ctt=s(tD);wyo=r(ctt,"from_pretrained()"),ctt.forEach(t),Ayo=r(mK," class method or the "),aD=n(mK,"A",{href:!0});var ftt=s(aD);yyo=r(ftt,"from_config()"),ftt.forEach(t),Lyo=r(mK,` class
method.`),mK.forEach(t),xyo=i(Xs),W6=n(Xs,"P",{});var nNe=s(W6);$yo=r(nNe,"This class cannot be instantiated directly using "),ece=n(nNe,"CODE",{});var mtt=s(ece);kyo=r(mtt,"__init__()"),mtt.forEach(t),Syo=r(nNe," (throws an error)."),nNe.forEach(t),Ryo=i(Xs),st=n(Xs,"DIV",{class:!0});var lw=s(st);T(H6.$$.fragment,lw),Byo=i(lw),oce=n(lw,"P",{});var gtt=s(oce);Pyo=r(gtt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gtt.forEach(t),Iyo=i(lw),Ni=n(lw,"P",{});var gK=s(Ni);qyo=r(gK,`Note:
Loading a model from its configuration file does `),rce=n(gK,"STRONG",{});var htt=s(rce);Nyo=r(htt,"not"),htt.forEach(t),jyo=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(gK,"A",{href:!0});var ptt=s(nD);Dyo=r(ptt,"from_pretrained()"),ptt.forEach(t),Gyo=r(gK," to load the model weights."),gK.forEach(t),Oyo=i(lw),T(b1.$$.fragment,lw),lw.forEach(t),Vyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(U6.$$.fragment,aa),Xyo=i(aa),tce=n(aa,"P",{});var utt=s(tce);zyo=r(utt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),utt.forEach(t),Qyo=i(aa),ka=n(aa,"P",{});var iw=s(ka);Wyo=r(iw,"The model class to instantiate is selected based on the "),ace=n(iw,"CODE",{});var _tt=s(ace);Hyo=r(_tt,"model_type"),_tt.forEach(t),Uyo=r(iw,` property of the config object (either
passed as an argument or loaded from `),nce=n(iw,"CODE",{});var btt=s(nce);Jyo=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),Yyo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(iw,"CODE",{});var vtt=s(sce);Kyo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),Zyo=r(iw,":"),iw.forEach(t),eLo=i(aa),q=n(aa,"UL",{});var j=s(q);v1=n(j,"LI",{});var Qye=s(v1);lce=n(Qye,"STRONG",{});var Ftt=s(lce);oLo=r(Ftt,"albert"),Ftt.forEach(t),rLo=r(Qye," \u2014 "),sD=n(Qye,"A",{href:!0});var Ttt=s(sD);tLo=r(Ttt,"AlbertForSequenceClassification"),Ttt.forEach(t),aLo=r(Qye," (ALBERT model)"),Qye.forEach(t),nLo=i(j),F1=n(j,"LI",{});var Wye=s(F1);ice=n(Wye,"STRONG",{});var Mtt=s(ice);sLo=r(Mtt,"bart"),Mtt.forEach(t),lLo=r(Wye," \u2014 "),lD=n(Wye,"A",{href:!0});var Ett=s(lD);iLo=r(Ett,"BartForSequenceClassification"),Ett.forEach(t),dLo=r(Wye," (BART model)"),Wye.forEach(t),cLo=i(j),T1=n(j,"LI",{});var Hye=s(T1);dce=n(Hye,"STRONG",{});var Ctt=s(dce);fLo=r(Ctt,"bert"),Ctt.forEach(t),mLo=r(Hye," \u2014 "),iD=n(Hye,"A",{href:!0});var wtt=s(iD);gLo=r(wtt,"BertForSequenceClassification"),wtt.forEach(t),hLo=r(Hye," (BERT model)"),Hye.forEach(t),pLo=i(j),M1=n(j,"LI",{});var Uye=s(M1);cce=n(Uye,"STRONG",{});var Att=s(cce);uLo=r(Att,"big_bird"),Att.forEach(t),_Lo=r(Uye," \u2014 "),dD=n(Uye,"A",{href:!0});var ytt=s(dD);bLo=r(ytt,"BigBirdForSequenceClassification"),ytt.forEach(t),vLo=r(Uye," (BigBird model)"),Uye.forEach(t),FLo=i(j),E1=n(j,"LI",{});var Jye=s(E1);fce=n(Jye,"STRONG",{});var Ltt=s(fce);TLo=r(Ltt,"bigbird_pegasus"),Ltt.forEach(t),MLo=r(Jye," \u2014 "),cD=n(Jye,"A",{href:!0});var xtt=s(cD);ELo=r(xtt,"BigBirdPegasusForSequenceClassification"),xtt.forEach(t),CLo=r(Jye," (BigBirdPegasus model)"),Jye.forEach(t),wLo=i(j),C1=n(j,"LI",{});var Yye=s(C1);mce=n(Yye,"STRONG",{});var $tt=s(mce);ALo=r($tt,"camembert"),$tt.forEach(t),yLo=r(Yye," \u2014 "),fD=n(Yye,"A",{href:!0});var ktt=s(fD);LLo=r(ktt,"CamembertForSequenceClassification"),ktt.forEach(t),xLo=r(Yye," (CamemBERT model)"),Yye.forEach(t),$Lo=i(j),w1=n(j,"LI",{});var Kye=s(w1);gce=n(Kye,"STRONG",{});var Stt=s(gce);kLo=r(Stt,"canine"),Stt.forEach(t),SLo=r(Kye," \u2014 "),mD=n(Kye,"A",{href:!0});var Rtt=s(mD);RLo=r(Rtt,"CanineForSequenceClassification"),Rtt.forEach(t),BLo=r(Kye," (Canine model)"),Kye.forEach(t),PLo=i(j),A1=n(j,"LI",{});var Zye=s(A1);hce=n(Zye,"STRONG",{});var Btt=s(hce);ILo=r(Btt,"convbert"),Btt.forEach(t),qLo=r(Zye," \u2014 "),gD=n(Zye,"A",{href:!0});var Ptt=s(gD);NLo=r(Ptt,"ConvBertForSequenceClassification"),Ptt.forEach(t),jLo=r(Zye," (ConvBERT model)"),Zye.forEach(t),DLo=i(j),y1=n(j,"LI",{});var eLe=s(y1);pce=n(eLe,"STRONG",{});var Itt=s(pce);GLo=r(Itt,"ctrl"),Itt.forEach(t),OLo=r(eLe," \u2014 "),hD=n(eLe,"A",{href:!0});var qtt=s(hD);VLo=r(qtt,"CTRLForSequenceClassification"),qtt.forEach(t),XLo=r(eLe," (CTRL model)"),eLe.forEach(t),zLo=i(j),L1=n(j,"LI",{});var oLe=s(L1);uce=n(oLe,"STRONG",{});var Ntt=s(uce);QLo=r(Ntt,"data2vec-text"),Ntt.forEach(t),WLo=r(oLe," \u2014 "),pD=n(oLe,"A",{href:!0});var jtt=s(pD);HLo=r(jtt,"Data2VecTextForSequenceClassification"),jtt.forEach(t),ULo=r(oLe," (Data2VecText model)"),oLe.forEach(t),JLo=i(j),x1=n(j,"LI",{});var rLe=s(x1);_ce=n(rLe,"STRONG",{});var Dtt=s(_ce);YLo=r(Dtt,"deberta"),Dtt.forEach(t),KLo=r(rLe," \u2014 "),uD=n(rLe,"A",{href:!0});var Gtt=s(uD);ZLo=r(Gtt,"DebertaForSequenceClassification"),Gtt.forEach(t),e8o=r(rLe," (DeBERTa model)"),rLe.forEach(t),o8o=i(j),$1=n(j,"LI",{});var tLe=s($1);bce=n(tLe,"STRONG",{});var Ott=s(bce);r8o=r(Ott,"deberta-v2"),Ott.forEach(t),t8o=r(tLe," \u2014 "),_D=n(tLe,"A",{href:!0});var Vtt=s(_D);a8o=r(Vtt,"DebertaV2ForSequenceClassification"),Vtt.forEach(t),n8o=r(tLe," (DeBERTa-v2 model)"),tLe.forEach(t),s8o=i(j),k1=n(j,"LI",{});var aLe=s(k1);vce=n(aLe,"STRONG",{});var Xtt=s(vce);l8o=r(Xtt,"distilbert"),Xtt.forEach(t),i8o=r(aLe," \u2014 "),bD=n(aLe,"A",{href:!0});var ztt=s(bD);d8o=r(ztt,"DistilBertForSequenceClassification"),ztt.forEach(t),c8o=r(aLe," (DistilBERT model)"),aLe.forEach(t),f8o=i(j),S1=n(j,"LI",{});var nLe=s(S1);Fce=n(nLe,"STRONG",{});var Qtt=s(Fce);m8o=r(Qtt,"electra"),Qtt.forEach(t),g8o=r(nLe," \u2014 "),vD=n(nLe,"A",{href:!0});var Wtt=s(vD);h8o=r(Wtt,"ElectraForSequenceClassification"),Wtt.forEach(t),p8o=r(nLe," (ELECTRA model)"),nLe.forEach(t),u8o=i(j),R1=n(j,"LI",{});var sLe=s(R1);Tce=n(sLe,"STRONG",{});var Htt=s(Tce);_8o=r(Htt,"flaubert"),Htt.forEach(t),b8o=r(sLe," \u2014 "),FD=n(sLe,"A",{href:!0});var Utt=s(FD);v8o=r(Utt,"FlaubertForSequenceClassification"),Utt.forEach(t),F8o=r(sLe," (FlauBERT model)"),sLe.forEach(t),T8o=i(j),B1=n(j,"LI",{});var lLe=s(B1);Mce=n(lLe,"STRONG",{});var Jtt=s(Mce);M8o=r(Jtt,"fnet"),Jtt.forEach(t),E8o=r(lLe," \u2014 "),TD=n(lLe,"A",{href:!0});var Ytt=s(TD);C8o=r(Ytt,"FNetForSequenceClassification"),Ytt.forEach(t),w8o=r(lLe," (FNet model)"),lLe.forEach(t),A8o=i(j),P1=n(j,"LI",{});var iLe=s(P1);Ece=n(iLe,"STRONG",{});var Ktt=s(Ece);y8o=r(Ktt,"funnel"),Ktt.forEach(t),L8o=r(iLe," \u2014 "),MD=n(iLe,"A",{href:!0});var Ztt=s(MD);x8o=r(Ztt,"FunnelForSequenceClassification"),Ztt.forEach(t),$8o=r(iLe," (Funnel Transformer model)"),iLe.forEach(t),k8o=i(j),I1=n(j,"LI",{});var dLe=s(I1);Cce=n(dLe,"STRONG",{});var eat=s(Cce);S8o=r(eat,"gpt2"),eat.forEach(t),R8o=r(dLe," \u2014 "),ED=n(dLe,"A",{href:!0});var oat=s(ED);B8o=r(oat,"GPT2ForSequenceClassification"),oat.forEach(t),P8o=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),I8o=i(j),q1=n(j,"LI",{});var cLe=s(q1);wce=n(cLe,"STRONG",{});var rat=s(wce);q8o=r(rat,"gpt_neo"),rat.forEach(t),N8o=r(cLe," \u2014 "),CD=n(cLe,"A",{href:!0});var tat=s(CD);j8o=r(tat,"GPTNeoForSequenceClassification"),tat.forEach(t),D8o=r(cLe," (GPT Neo model)"),cLe.forEach(t),G8o=i(j),N1=n(j,"LI",{});var fLe=s(N1);Ace=n(fLe,"STRONG",{});var aat=s(Ace);O8o=r(aat,"gptj"),aat.forEach(t),V8o=r(fLe," \u2014 "),wD=n(fLe,"A",{href:!0});var nat=s(wD);X8o=r(nat,"GPTJForSequenceClassification"),nat.forEach(t),z8o=r(fLe," (GPT-J model)"),fLe.forEach(t),Q8o=i(j),j1=n(j,"LI",{});var mLe=s(j1);yce=n(mLe,"STRONG",{});var sat=s(yce);W8o=r(sat,"ibert"),sat.forEach(t),H8o=r(mLe," \u2014 "),AD=n(mLe,"A",{href:!0});var lat=s(AD);U8o=r(lat,"IBertForSequenceClassification"),lat.forEach(t),J8o=r(mLe," (I-BERT model)"),mLe.forEach(t),Y8o=i(j),D1=n(j,"LI",{});var gLe=s(D1);Lce=n(gLe,"STRONG",{});var iat=s(Lce);K8o=r(iat,"layoutlm"),iat.forEach(t),Z8o=r(gLe," \u2014 "),yD=n(gLe,"A",{href:!0});var dat=s(yD);exo=r(dat,"LayoutLMForSequenceClassification"),dat.forEach(t),oxo=r(gLe," (LayoutLM model)"),gLe.forEach(t),rxo=i(j),G1=n(j,"LI",{});var hLe=s(G1);xce=n(hLe,"STRONG",{});var cat=s(xce);txo=r(cat,"layoutlmv2"),cat.forEach(t),axo=r(hLe," \u2014 "),LD=n(hLe,"A",{href:!0});var fat=s(LD);nxo=r(fat,"LayoutLMv2ForSequenceClassification"),fat.forEach(t),sxo=r(hLe," (LayoutLMv2 model)"),hLe.forEach(t),lxo=i(j),O1=n(j,"LI",{});var pLe=s(O1);$ce=n(pLe,"STRONG",{});var mat=s($ce);ixo=r(mat,"led"),mat.forEach(t),dxo=r(pLe," \u2014 "),xD=n(pLe,"A",{href:!0});var gat=s(xD);cxo=r(gat,"LEDForSequenceClassification"),gat.forEach(t),fxo=r(pLe," (LED model)"),pLe.forEach(t),mxo=i(j),V1=n(j,"LI",{});var uLe=s(V1);kce=n(uLe,"STRONG",{});var hat=s(kce);gxo=r(hat,"longformer"),hat.forEach(t),hxo=r(uLe," \u2014 "),$D=n(uLe,"A",{href:!0});var pat=s($D);pxo=r(pat,"LongformerForSequenceClassification"),pat.forEach(t),uxo=r(uLe," (Longformer model)"),uLe.forEach(t),_xo=i(j),X1=n(j,"LI",{});var _Le=s(X1);Sce=n(_Le,"STRONG",{});var uat=s(Sce);bxo=r(uat,"mbart"),uat.forEach(t),vxo=r(_Le," \u2014 "),kD=n(_Le,"A",{href:!0});var _at=s(kD);Fxo=r(_at,"MBartForSequenceClassification"),_at.forEach(t),Txo=r(_Le," (mBART model)"),_Le.forEach(t),Mxo=i(j),z1=n(j,"LI",{});var bLe=s(z1);Rce=n(bLe,"STRONG",{});var bat=s(Rce);Exo=r(bat,"megatron-bert"),bat.forEach(t),Cxo=r(bLe," \u2014 "),SD=n(bLe,"A",{href:!0});var vat=s(SD);wxo=r(vat,"MegatronBertForSequenceClassification"),vat.forEach(t),Axo=r(bLe," (MegatronBert model)"),bLe.forEach(t),yxo=i(j),Q1=n(j,"LI",{});var vLe=s(Q1);Bce=n(vLe,"STRONG",{});var Fat=s(Bce);Lxo=r(Fat,"mobilebert"),Fat.forEach(t),xxo=r(vLe," \u2014 "),RD=n(vLe,"A",{href:!0});var Tat=s(RD);$xo=r(Tat,"MobileBertForSequenceClassification"),Tat.forEach(t),kxo=r(vLe," (MobileBERT model)"),vLe.forEach(t),Sxo=i(j),W1=n(j,"LI",{});var FLe=s(W1);Pce=n(FLe,"STRONG",{});var Mat=s(Pce);Rxo=r(Mat,"mpnet"),Mat.forEach(t),Bxo=r(FLe," \u2014 "),BD=n(FLe,"A",{href:!0});var Eat=s(BD);Pxo=r(Eat,"MPNetForSequenceClassification"),Eat.forEach(t),Ixo=r(FLe," (MPNet model)"),FLe.forEach(t),qxo=i(j),H1=n(j,"LI",{});var TLe=s(H1);Ice=n(TLe,"STRONG",{});var Cat=s(Ice);Nxo=r(Cat,"nystromformer"),Cat.forEach(t),jxo=r(TLe," \u2014 "),PD=n(TLe,"A",{href:!0});var wat=s(PD);Dxo=r(wat,"NystromformerForSequenceClassification"),wat.forEach(t),Gxo=r(TLe," (Nystromformer model)"),TLe.forEach(t),Oxo=i(j),U1=n(j,"LI",{});var MLe=s(U1);qce=n(MLe,"STRONG",{});var Aat=s(qce);Vxo=r(Aat,"openai-gpt"),Aat.forEach(t),Xxo=r(MLe," \u2014 "),ID=n(MLe,"A",{href:!0});var yat=s(ID);zxo=r(yat,"OpenAIGPTForSequenceClassification"),yat.forEach(t),Qxo=r(MLe," (OpenAI GPT model)"),MLe.forEach(t),Wxo=i(j),J1=n(j,"LI",{});var ELe=s(J1);Nce=n(ELe,"STRONG",{});var Lat=s(Nce);Hxo=r(Lat,"perceiver"),Lat.forEach(t),Uxo=r(ELe," \u2014 "),qD=n(ELe,"A",{href:!0});var xat=s(qD);Jxo=r(xat,"PerceiverForSequenceClassification"),xat.forEach(t),Yxo=r(ELe," (Perceiver model)"),ELe.forEach(t),Kxo=i(j),Y1=n(j,"LI",{});var CLe=s(Y1);jce=n(CLe,"STRONG",{});var $at=s(jce);Zxo=r($at,"plbart"),$at.forEach(t),e9o=r(CLe," \u2014 "),ND=n(CLe,"A",{href:!0});var kat=s(ND);o9o=r(kat,"PLBartForSequenceClassification"),kat.forEach(t),r9o=r(CLe," (PLBart model)"),CLe.forEach(t),t9o=i(j),K1=n(j,"LI",{});var wLe=s(K1);Dce=n(wLe,"STRONG",{});var Sat=s(Dce);a9o=r(Sat,"qdqbert"),Sat.forEach(t),n9o=r(wLe," \u2014 "),jD=n(wLe,"A",{href:!0});var Rat=s(jD);s9o=r(Rat,"QDQBertForSequenceClassification"),Rat.forEach(t),l9o=r(wLe," (QDQBert model)"),wLe.forEach(t),i9o=i(j),Z1=n(j,"LI",{});var ALe=s(Z1);Gce=n(ALe,"STRONG",{});var Bat=s(Gce);d9o=r(Bat,"reformer"),Bat.forEach(t),c9o=r(ALe," \u2014 "),DD=n(ALe,"A",{href:!0});var Pat=s(DD);f9o=r(Pat,"ReformerForSequenceClassification"),Pat.forEach(t),m9o=r(ALe," (Reformer model)"),ALe.forEach(t),g9o=i(j),eb=n(j,"LI",{});var yLe=s(eb);Oce=n(yLe,"STRONG",{});var Iat=s(Oce);h9o=r(Iat,"rembert"),Iat.forEach(t),p9o=r(yLe," \u2014 "),GD=n(yLe,"A",{href:!0});var qat=s(GD);u9o=r(qat,"RemBertForSequenceClassification"),qat.forEach(t),_9o=r(yLe," (RemBERT model)"),yLe.forEach(t),b9o=i(j),ob=n(j,"LI",{});var LLe=s(ob);Vce=n(LLe,"STRONG",{});var Nat=s(Vce);v9o=r(Nat,"roberta"),Nat.forEach(t),F9o=r(LLe," \u2014 "),OD=n(LLe,"A",{href:!0});var jat=s(OD);T9o=r(jat,"RobertaForSequenceClassification"),jat.forEach(t),M9o=r(LLe," (RoBERTa model)"),LLe.forEach(t),E9o=i(j),rb=n(j,"LI",{});var xLe=s(rb);Xce=n(xLe,"STRONG",{});var Dat=s(Xce);C9o=r(Dat,"roformer"),Dat.forEach(t),w9o=r(xLe," \u2014 "),VD=n(xLe,"A",{href:!0});var Gat=s(VD);A9o=r(Gat,"RoFormerForSequenceClassification"),Gat.forEach(t),y9o=r(xLe," (RoFormer model)"),xLe.forEach(t),L9o=i(j),tb=n(j,"LI",{});var $Le=s(tb);zce=n($Le,"STRONG",{});var Oat=s(zce);x9o=r(Oat,"squeezebert"),Oat.forEach(t),$9o=r($Le," \u2014 "),XD=n($Le,"A",{href:!0});var Vat=s(XD);k9o=r(Vat,"SqueezeBertForSequenceClassification"),Vat.forEach(t),S9o=r($Le," (SqueezeBERT model)"),$Le.forEach(t),R9o=i(j),ab=n(j,"LI",{});var kLe=s(ab);Qce=n(kLe,"STRONG",{});var Xat=s(Qce);B9o=r(Xat,"tapas"),Xat.forEach(t),P9o=r(kLe," \u2014 "),zD=n(kLe,"A",{href:!0});var zat=s(zD);I9o=r(zat,"TapasForSequenceClassification"),zat.forEach(t),q9o=r(kLe," (TAPAS model)"),kLe.forEach(t),N9o=i(j),nb=n(j,"LI",{});var SLe=s(nb);Wce=n(SLe,"STRONG",{});var Qat=s(Wce);j9o=r(Qat,"transfo-xl"),Qat.forEach(t),D9o=r(SLe," \u2014 "),QD=n(SLe,"A",{href:!0});var Wat=s(QD);G9o=r(Wat,"TransfoXLForSequenceClassification"),Wat.forEach(t),O9o=r(SLe," (Transformer-XL model)"),SLe.forEach(t),V9o=i(j),sb=n(j,"LI",{});var RLe=s(sb);Hce=n(RLe,"STRONG",{});var Hat=s(Hce);X9o=r(Hat,"xlm"),Hat.forEach(t),z9o=r(RLe," \u2014 "),WD=n(RLe,"A",{href:!0});var Uat=s(WD);Q9o=r(Uat,"XLMForSequenceClassification"),Uat.forEach(t),W9o=r(RLe," (XLM model)"),RLe.forEach(t),H9o=i(j),lb=n(j,"LI",{});var BLe=s(lb);Uce=n(BLe,"STRONG",{});var Jat=s(Uce);U9o=r(Jat,"xlm-roberta"),Jat.forEach(t),J9o=r(BLe," \u2014 "),HD=n(BLe,"A",{href:!0});var Yat=s(HD);Y9o=r(Yat,"XLMRobertaForSequenceClassification"),Yat.forEach(t),K9o=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),Z9o=i(j),ib=n(j,"LI",{});var PLe=s(ib);Jce=n(PLe,"STRONG",{});var Kat=s(Jce);e$o=r(Kat,"xlm-roberta-xl"),Kat.forEach(t),o$o=r(PLe," \u2014 "),UD=n(PLe,"A",{href:!0});var Zat=s(UD);r$o=r(Zat,"XLMRobertaXLForSequenceClassification"),Zat.forEach(t),t$o=r(PLe," (XLM-RoBERTa-XL model)"),PLe.forEach(t),a$o=i(j),db=n(j,"LI",{});var ILe=s(db);Yce=n(ILe,"STRONG",{});var ent=s(Yce);n$o=r(ent,"xlnet"),ent.forEach(t),s$o=r(ILe," \u2014 "),JD=n(ILe,"A",{href:!0});var ont=s(JD);l$o=r(ont,"XLNetForSequenceClassification"),ont.forEach(t),i$o=r(ILe," (XLNet model)"),ILe.forEach(t),d$o=i(j),cb=n(j,"LI",{});var qLe=s(cb);Kce=n(qLe,"STRONG",{});var rnt=s(Kce);c$o=r(rnt,"yoso"),rnt.forEach(t),f$o=r(qLe," \u2014 "),YD=n(qLe,"A",{href:!0});var tnt=s(YD);m$o=r(tnt,"YosoForSequenceClassification"),tnt.forEach(t),g$o=r(qLe," (YOSO model)"),qLe.forEach(t),j.forEach(t),h$o=i(aa),fb=n(aa,"P",{});var NLe=s(fb);p$o=r(NLe,"The model is set in evaluation mode by default using "),Zce=n(NLe,"CODE",{});var ant=s(Zce);u$o=r(ant,"model.eval()"),ant.forEach(t),_$o=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(NLe,"CODE",{});var nnt=s(efe);b$o=r(nnt,"model.train()"),nnt.forEach(t),NLe.forEach(t),v$o=i(aa),T(mb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),rIe=i(f),ji=n(f,"H2",{class:!0});var sNe=s(ji);gb=n(sNe,"A",{id:!0,class:!0,href:!0});var snt=s(gb);ofe=n(snt,"SPAN",{});var lnt=s(ofe);T(J6.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),F$o=i(sNe),rfe=n(sNe,"SPAN",{});var int=s(rfe);T$o=r(int,"AutoModelForMultipleChoice"),int.forEach(t),sNe.forEach(t),tIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(Y6.$$.fragment,zs),M$o=i(zs),Di=n(zs,"P",{});var hK=s(Di);E$o=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KD=n(hK,"A",{href:!0});var dnt=s(KD);C$o=r(dnt,"from_pretrained()"),dnt.forEach(t),w$o=r(hK," class method or the "),ZD=n(hK,"A",{href:!0});var cnt=s(ZD);A$o=r(cnt,"from_config()"),cnt.forEach(t),y$o=r(hK,` class
method.`),hK.forEach(t),L$o=i(zs),K6=n(zs,"P",{});var lNe=s(K6);x$o=r(lNe,"This class cannot be instantiated directly using "),tfe=n(lNe,"CODE",{});var fnt=s(tfe);$$o=r(fnt,"__init__()"),fnt.forEach(t),k$o=r(lNe," (throws an error)."),lNe.forEach(t),S$o=i(zs),lt=n(zs,"DIV",{class:!0});var dw=s(lt);T(Z6.$$.fragment,dw),R$o=i(dw),afe=n(dw,"P",{});var mnt=s(afe);B$o=r(mnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mnt.forEach(t),P$o=i(dw),Gi=n(dw,"P",{});var pK=s(Gi);I$o=r(pK,`Note:
Loading a model from its configuration file does `),nfe=n(pK,"STRONG",{});var gnt=s(nfe);q$o=r(gnt,"not"),gnt.forEach(t),N$o=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(pK,"A",{href:!0});var hnt=s(eG);j$o=r(hnt,"from_pretrained()"),hnt.forEach(t),D$o=r(pK," to load the model weights."),pK.forEach(t),G$o=i(dw),T(hb.$$.fragment,dw),dw.forEach(t),O$o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ey.$$.fragment,na),V$o=i(na),sfe=n(na,"P",{});var pnt=s(sfe);X$o=r(pnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pnt.forEach(t),z$o=i(na),Sa=n(na,"P",{});var cw=s(Sa);Q$o=r(cw,"The model class to instantiate is selected based on the "),lfe=n(cw,"CODE",{});var unt=s(lfe);W$o=r(unt,"model_type"),unt.forEach(t),H$o=r(cw,` property of the config object (either
passed as an argument or loaded from `),ife=n(cw,"CODE",{});var _nt=s(ife);U$o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),J$o=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(cw,"CODE",{});var bnt=s(dfe);Y$o=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),K$o=r(cw,":"),cw.forEach(t),Z$o=i(na),Y=n(na,"UL",{});var K=s(Y);pb=n(K,"LI",{});var jLe=s(pb);cfe=n(jLe,"STRONG",{});var vnt=s(cfe);eko=r(vnt,"albert"),vnt.forEach(t),oko=r(jLe," \u2014 "),oG=n(jLe,"A",{href:!0});var Fnt=s(oG);rko=r(Fnt,"AlbertForMultipleChoice"),Fnt.forEach(t),tko=r(jLe," (ALBERT model)"),jLe.forEach(t),ako=i(K),ub=n(K,"LI",{});var DLe=s(ub);ffe=n(DLe,"STRONG",{});var Tnt=s(ffe);nko=r(Tnt,"bert"),Tnt.forEach(t),sko=r(DLe," \u2014 "),rG=n(DLe,"A",{href:!0});var Mnt=s(rG);lko=r(Mnt,"BertForMultipleChoice"),Mnt.forEach(t),iko=r(DLe," (BERT model)"),DLe.forEach(t),dko=i(K),_b=n(K,"LI",{});var GLe=s(_b);mfe=n(GLe,"STRONG",{});var Ent=s(mfe);cko=r(Ent,"big_bird"),Ent.forEach(t),fko=r(GLe," \u2014 "),tG=n(GLe,"A",{href:!0});var Cnt=s(tG);mko=r(Cnt,"BigBirdForMultipleChoice"),Cnt.forEach(t),gko=r(GLe," (BigBird model)"),GLe.forEach(t),hko=i(K),bb=n(K,"LI",{});var OLe=s(bb);gfe=n(OLe,"STRONG",{});var wnt=s(gfe);pko=r(wnt,"camembert"),wnt.forEach(t),uko=r(OLe," \u2014 "),aG=n(OLe,"A",{href:!0});var Ant=s(aG);_ko=r(Ant,"CamembertForMultipleChoice"),Ant.forEach(t),bko=r(OLe," (CamemBERT model)"),OLe.forEach(t),vko=i(K),vb=n(K,"LI",{});var VLe=s(vb);hfe=n(VLe,"STRONG",{});var ynt=s(hfe);Fko=r(ynt,"canine"),ynt.forEach(t),Tko=r(VLe," \u2014 "),nG=n(VLe,"A",{href:!0});var Lnt=s(nG);Mko=r(Lnt,"CanineForMultipleChoice"),Lnt.forEach(t),Eko=r(VLe," (Canine model)"),VLe.forEach(t),Cko=i(K),Fb=n(K,"LI",{});var XLe=s(Fb);pfe=n(XLe,"STRONG",{});var xnt=s(pfe);wko=r(xnt,"convbert"),xnt.forEach(t),Ako=r(XLe," \u2014 "),sG=n(XLe,"A",{href:!0});var $nt=s(sG);yko=r($nt,"ConvBertForMultipleChoice"),$nt.forEach(t),Lko=r(XLe," (ConvBERT model)"),XLe.forEach(t),xko=i(K),Tb=n(K,"LI",{});var zLe=s(Tb);ufe=n(zLe,"STRONG",{});var knt=s(ufe);$ko=r(knt,"data2vec-text"),knt.forEach(t),kko=r(zLe," \u2014 "),lG=n(zLe,"A",{href:!0});var Snt=s(lG);Sko=r(Snt,"Data2VecTextForMultipleChoice"),Snt.forEach(t),Rko=r(zLe," (Data2VecText model)"),zLe.forEach(t),Bko=i(K),Mb=n(K,"LI",{});var QLe=s(Mb);_fe=n(QLe,"STRONG",{});var Rnt=s(_fe);Pko=r(Rnt,"deberta-v2"),Rnt.forEach(t),Iko=r(QLe," \u2014 "),iG=n(QLe,"A",{href:!0});var Bnt=s(iG);qko=r(Bnt,"DebertaV2ForMultipleChoice"),Bnt.forEach(t),Nko=r(QLe," (DeBERTa-v2 model)"),QLe.forEach(t),jko=i(K),Eb=n(K,"LI",{});var WLe=s(Eb);bfe=n(WLe,"STRONG",{});var Pnt=s(bfe);Dko=r(Pnt,"distilbert"),Pnt.forEach(t),Gko=r(WLe," \u2014 "),dG=n(WLe,"A",{href:!0});var Int=s(dG);Oko=r(Int,"DistilBertForMultipleChoice"),Int.forEach(t),Vko=r(WLe," (DistilBERT model)"),WLe.forEach(t),Xko=i(K),Cb=n(K,"LI",{});var HLe=s(Cb);vfe=n(HLe,"STRONG",{});var qnt=s(vfe);zko=r(qnt,"electra"),qnt.forEach(t),Qko=r(HLe," \u2014 "),cG=n(HLe,"A",{href:!0});var Nnt=s(cG);Wko=r(Nnt,"ElectraForMultipleChoice"),Nnt.forEach(t),Hko=r(HLe," (ELECTRA model)"),HLe.forEach(t),Uko=i(K),wb=n(K,"LI",{});var ULe=s(wb);Ffe=n(ULe,"STRONG",{});var jnt=s(Ffe);Jko=r(jnt,"flaubert"),jnt.forEach(t),Yko=r(ULe," \u2014 "),fG=n(ULe,"A",{href:!0});var Dnt=s(fG);Kko=r(Dnt,"FlaubertForMultipleChoice"),Dnt.forEach(t),Zko=r(ULe," (FlauBERT model)"),ULe.forEach(t),eSo=i(K),Ab=n(K,"LI",{});var JLe=s(Ab);Tfe=n(JLe,"STRONG",{});var Gnt=s(Tfe);oSo=r(Gnt,"fnet"),Gnt.forEach(t),rSo=r(JLe," \u2014 "),mG=n(JLe,"A",{href:!0});var Ont=s(mG);tSo=r(Ont,"FNetForMultipleChoice"),Ont.forEach(t),aSo=r(JLe," (FNet model)"),JLe.forEach(t),nSo=i(K),yb=n(K,"LI",{});var YLe=s(yb);Mfe=n(YLe,"STRONG",{});var Vnt=s(Mfe);sSo=r(Vnt,"funnel"),Vnt.forEach(t),lSo=r(YLe," \u2014 "),gG=n(YLe,"A",{href:!0});var Xnt=s(gG);iSo=r(Xnt,"FunnelForMultipleChoice"),Xnt.forEach(t),dSo=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),cSo=i(K),Lb=n(K,"LI",{});var KLe=s(Lb);Efe=n(KLe,"STRONG",{});var znt=s(Efe);fSo=r(znt,"ibert"),znt.forEach(t),mSo=r(KLe," \u2014 "),hG=n(KLe,"A",{href:!0});var Qnt=s(hG);gSo=r(Qnt,"IBertForMultipleChoice"),Qnt.forEach(t),hSo=r(KLe," (I-BERT model)"),KLe.forEach(t),pSo=i(K),xb=n(K,"LI",{});var ZLe=s(xb);Cfe=n(ZLe,"STRONG",{});var Wnt=s(Cfe);uSo=r(Wnt,"longformer"),Wnt.forEach(t),_So=r(ZLe," \u2014 "),pG=n(ZLe,"A",{href:!0});var Hnt=s(pG);bSo=r(Hnt,"LongformerForMultipleChoice"),Hnt.forEach(t),vSo=r(ZLe," (Longformer model)"),ZLe.forEach(t),FSo=i(K),$b=n(K,"LI",{});var e8e=s($b);wfe=n(e8e,"STRONG",{});var Unt=s(wfe);TSo=r(Unt,"megatron-bert"),Unt.forEach(t),MSo=r(e8e," \u2014 "),uG=n(e8e,"A",{href:!0});var Jnt=s(uG);ESo=r(Jnt,"MegatronBertForMultipleChoice"),Jnt.forEach(t),CSo=r(e8e," (MegatronBert model)"),e8e.forEach(t),wSo=i(K),kb=n(K,"LI",{});var o8e=s(kb);Afe=n(o8e,"STRONG",{});var Ynt=s(Afe);ASo=r(Ynt,"mobilebert"),Ynt.forEach(t),ySo=r(o8e," \u2014 "),_G=n(o8e,"A",{href:!0});var Knt=s(_G);LSo=r(Knt,"MobileBertForMultipleChoice"),Knt.forEach(t),xSo=r(o8e," (MobileBERT model)"),o8e.forEach(t),$So=i(K),Sb=n(K,"LI",{});var r8e=s(Sb);yfe=n(r8e,"STRONG",{});var Znt=s(yfe);kSo=r(Znt,"mpnet"),Znt.forEach(t),SSo=r(r8e," \u2014 "),bG=n(r8e,"A",{href:!0});var est=s(bG);RSo=r(est,"MPNetForMultipleChoice"),est.forEach(t),BSo=r(r8e," (MPNet model)"),r8e.forEach(t),PSo=i(K),Rb=n(K,"LI",{});var t8e=s(Rb);Lfe=n(t8e,"STRONG",{});var ost=s(Lfe);ISo=r(ost,"nystromformer"),ost.forEach(t),qSo=r(t8e," \u2014 "),vG=n(t8e,"A",{href:!0});var rst=s(vG);NSo=r(rst,"NystromformerForMultipleChoice"),rst.forEach(t),jSo=r(t8e," (Nystromformer model)"),t8e.forEach(t),DSo=i(K),Bb=n(K,"LI",{});var a8e=s(Bb);xfe=n(a8e,"STRONG",{});var tst=s(xfe);GSo=r(tst,"qdqbert"),tst.forEach(t),OSo=r(a8e," \u2014 "),FG=n(a8e,"A",{href:!0});var ast=s(FG);VSo=r(ast,"QDQBertForMultipleChoice"),ast.forEach(t),XSo=r(a8e," (QDQBert model)"),a8e.forEach(t),zSo=i(K),Pb=n(K,"LI",{});var n8e=s(Pb);$fe=n(n8e,"STRONG",{});var nst=s($fe);QSo=r(nst,"rembert"),nst.forEach(t),WSo=r(n8e," \u2014 "),TG=n(n8e,"A",{href:!0});var sst=s(TG);HSo=r(sst,"RemBertForMultipleChoice"),sst.forEach(t),USo=r(n8e," (RemBERT model)"),n8e.forEach(t),JSo=i(K),Ib=n(K,"LI",{});var s8e=s(Ib);kfe=n(s8e,"STRONG",{});var lst=s(kfe);YSo=r(lst,"roberta"),lst.forEach(t),KSo=r(s8e," \u2014 "),MG=n(s8e,"A",{href:!0});var ist=s(MG);ZSo=r(ist,"RobertaForMultipleChoice"),ist.forEach(t),eRo=r(s8e," (RoBERTa model)"),s8e.forEach(t),oRo=i(K),qb=n(K,"LI",{});var l8e=s(qb);Sfe=n(l8e,"STRONG",{});var dst=s(Sfe);rRo=r(dst,"roformer"),dst.forEach(t),tRo=r(l8e," \u2014 "),EG=n(l8e,"A",{href:!0});var cst=s(EG);aRo=r(cst,"RoFormerForMultipleChoice"),cst.forEach(t),nRo=r(l8e," (RoFormer model)"),l8e.forEach(t),sRo=i(K),Nb=n(K,"LI",{});var i8e=s(Nb);Rfe=n(i8e,"STRONG",{});var fst=s(Rfe);lRo=r(fst,"squeezebert"),fst.forEach(t),iRo=r(i8e," \u2014 "),CG=n(i8e,"A",{href:!0});var mst=s(CG);dRo=r(mst,"SqueezeBertForMultipleChoice"),mst.forEach(t),cRo=r(i8e," (SqueezeBERT model)"),i8e.forEach(t),fRo=i(K),jb=n(K,"LI",{});var d8e=s(jb);Bfe=n(d8e,"STRONG",{});var gst=s(Bfe);mRo=r(gst,"xlm"),gst.forEach(t),gRo=r(d8e," \u2014 "),wG=n(d8e,"A",{href:!0});var hst=s(wG);hRo=r(hst,"XLMForMultipleChoice"),hst.forEach(t),pRo=r(d8e," (XLM model)"),d8e.forEach(t),uRo=i(K),Db=n(K,"LI",{});var c8e=s(Db);Pfe=n(c8e,"STRONG",{});var pst=s(Pfe);_Ro=r(pst,"xlm-roberta"),pst.forEach(t),bRo=r(c8e," \u2014 "),AG=n(c8e,"A",{href:!0});var ust=s(AG);vRo=r(ust,"XLMRobertaForMultipleChoice"),ust.forEach(t),FRo=r(c8e," (XLM-RoBERTa model)"),c8e.forEach(t),TRo=i(K),Gb=n(K,"LI",{});var f8e=s(Gb);Ife=n(f8e,"STRONG",{});var _st=s(Ife);MRo=r(_st,"xlm-roberta-xl"),_st.forEach(t),ERo=r(f8e," \u2014 "),yG=n(f8e,"A",{href:!0});var bst=s(yG);CRo=r(bst,"XLMRobertaXLForMultipleChoice"),bst.forEach(t),wRo=r(f8e," (XLM-RoBERTa-XL model)"),f8e.forEach(t),ARo=i(K),Ob=n(K,"LI",{});var m8e=s(Ob);qfe=n(m8e,"STRONG",{});var vst=s(qfe);yRo=r(vst,"xlnet"),vst.forEach(t),LRo=r(m8e," \u2014 "),LG=n(m8e,"A",{href:!0});var Fst=s(LG);xRo=r(Fst,"XLNetForMultipleChoice"),Fst.forEach(t),$Ro=r(m8e," (XLNet model)"),m8e.forEach(t),kRo=i(K),Vb=n(K,"LI",{});var g8e=s(Vb);Nfe=n(g8e,"STRONG",{});var Tst=s(Nfe);SRo=r(Tst,"yoso"),Tst.forEach(t),RRo=r(g8e," \u2014 "),xG=n(g8e,"A",{href:!0});var Mst=s(xG);BRo=r(Mst,"YosoForMultipleChoice"),Mst.forEach(t),PRo=r(g8e," (YOSO model)"),g8e.forEach(t),K.forEach(t),IRo=i(na),Xb=n(na,"P",{});var h8e=s(Xb);qRo=r(h8e,"The model is set in evaluation mode by default using "),jfe=n(h8e,"CODE",{});var Est=s(jfe);NRo=r(Est,"model.eval()"),Est.forEach(t),jRo=r(h8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=n(h8e,"CODE",{});var Cst=s(Dfe);DRo=r(Cst,"model.train()"),Cst.forEach(t),h8e.forEach(t),GRo=i(na),T(zb.$$.fragment,na),na.forEach(t),zs.forEach(t),aIe=i(f),Oi=n(f,"H2",{class:!0});var iNe=s(Oi);Qb=n(iNe,"A",{id:!0,class:!0,href:!0});var wst=s(Qb);Gfe=n(wst,"SPAN",{});var Ast=s(Gfe);T(oy.$$.fragment,Ast),Ast.forEach(t),wst.forEach(t),ORo=i(iNe),Ofe=n(iNe,"SPAN",{});var yst=s(Ofe);VRo=r(yst,"AutoModelForNextSentencePrediction"),yst.forEach(t),iNe.forEach(t),nIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(ry.$$.fragment,Qs),XRo=i(Qs),Vi=n(Qs,"P",{});var uK=s(Vi);zRo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$G=n(uK,"A",{href:!0});var Lst=s($G);QRo=r(Lst,"from_pretrained()"),Lst.forEach(t),WRo=r(uK," class method or the "),kG=n(uK,"A",{href:!0});var xst=s(kG);HRo=r(xst,"from_config()"),xst.forEach(t),URo=r(uK,` class
method.`),uK.forEach(t),JRo=i(Qs),ty=n(Qs,"P",{});var dNe=s(ty);YRo=r(dNe,"This class cannot be instantiated directly using "),Vfe=n(dNe,"CODE",{});var $st=s(Vfe);KRo=r($st,"__init__()"),$st.forEach(t),ZRo=r(dNe," (throws an error)."),dNe.forEach(t),eBo=i(Qs),it=n(Qs,"DIV",{class:!0});var fw=s(it);T(ay.$$.fragment,fw),oBo=i(fw),Xfe=n(fw,"P",{});var kst=s(Xfe);rBo=r(kst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kst.forEach(t),tBo=i(fw),Xi=n(fw,"P",{});var _K=s(Xi);aBo=r(_K,`Note:
Loading a model from its configuration file does `),zfe=n(_K,"STRONG",{});var Sst=s(zfe);nBo=r(Sst,"not"),Sst.forEach(t),sBo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(_K,"A",{href:!0});var Rst=s(SG);lBo=r(Rst,"from_pretrained()"),Rst.forEach(t),iBo=r(_K," to load the model weights."),_K.forEach(t),dBo=i(fw),T(Wb.$$.fragment,fw),fw.forEach(t),cBo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(ny.$$.fragment,sa),fBo=i(sa),Qfe=n(sa,"P",{});var Bst=s(Qfe);mBo=r(Bst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Bst.forEach(t),gBo=i(sa),Ra=n(sa,"P",{});var mw=s(Ra);hBo=r(mw,"The model class to instantiate is selected based on the "),Wfe=n(mw,"CODE",{});var Pst=s(Wfe);pBo=r(Pst,"model_type"),Pst.forEach(t),uBo=r(mw,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(mw,"CODE",{});var Ist=s(Hfe);_Bo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),bBo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(mw,"CODE",{});var qst=s(Ufe);vBo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),FBo=r(mw,":"),mw.forEach(t),TBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Hb=n(Ws,"LI",{});var p8e=s(Hb);Jfe=n(p8e,"STRONG",{});var Nst=s(Jfe);MBo=r(Nst,"bert"),Nst.forEach(t),EBo=r(p8e," \u2014 "),RG=n(p8e,"A",{href:!0});var jst=s(RG);CBo=r(jst,"BertForNextSentencePrediction"),jst.forEach(t),wBo=r(p8e," (BERT model)"),p8e.forEach(t),ABo=i(Ws),Ub=n(Ws,"LI",{});var u8e=s(Ub);Yfe=n(u8e,"STRONG",{});var Dst=s(Yfe);yBo=r(Dst,"fnet"),Dst.forEach(t),LBo=r(u8e," \u2014 "),BG=n(u8e,"A",{href:!0});var Gst=s(BG);xBo=r(Gst,"FNetForNextSentencePrediction"),Gst.forEach(t),$Bo=r(u8e," (FNet model)"),u8e.forEach(t),kBo=i(Ws),Jb=n(Ws,"LI",{});var _8e=s(Jb);Kfe=n(_8e,"STRONG",{});var Ost=s(Kfe);SBo=r(Ost,"megatron-bert"),Ost.forEach(t),RBo=r(_8e," \u2014 "),PG=n(_8e,"A",{href:!0});var Vst=s(PG);BBo=r(Vst,"MegatronBertForNextSentencePrediction"),Vst.forEach(t),PBo=r(_8e," (MegatronBert model)"),_8e.forEach(t),IBo=i(Ws),Yb=n(Ws,"LI",{});var b8e=s(Yb);Zfe=n(b8e,"STRONG",{});var Xst=s(Zfe);qBo=r(Xst,"mobilebert"),Xst.forEach(t),NBo=r(b8e," \u2014 "),IG=n(b8e,"A",{href:!0});var zst=s(IG);jBo=r(zst,"MobileBertForNextSentencePrediction"),zst.forEach(t),DBo=r(b8e," (MobileBERT model)"),b8e.forEach(t),GBo=i(Ws),Kb=n(Ws,"LI",{});var v8e=s(Kb);eme=n(v8e,"STRONG",{});var Qst=s(eme);OBo=r(Qst,"qdqbert"),Qst.forEach(t),VBo=r(v8e," \u2014 "),qG=n(v8e,"A",{href:!0});var Wst=s(qG);XBo=r(Wst,"QDQBertForNextSentencePrediction"),Wst.forEach(t),zBo=r(v8e," (QDQBert model)"),v8e.forEach(t),Ws.forEach(t),QBo=i(sa),Zb=n(sa,"P",{});var F8e=s(Zb);WBo=r(F8e,"The model is set in evaluation mode by default using "),ome=n(F8e,"CODE",{});var Hst=s(ome);HBo=r(Hst,"model.eval()"),Hst.forEach(t),UBo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=n(F8e,"CODE",{});var Ust=s(rme);JBo=r(Ust,"model.train()"),Ust.forEach(t),F8e.forEach(t),YBo=i(sa),T(e5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),sIe=i(f),zi=n(f,"H2",{class:!0});var cNe=s(zi);o5=n(cNe,"A",{id:!0,class:!0,href:!0});var Jst=s(o5);tme=n(Jst,"SPAN",{});var Yst=s(tme);T(sy.$$.fragment,Yst),Yst.forEach(t),Jst.forEach(t),KBo=i(cNe),ame=n(cNe,"SPAN",{});var Kst=s(ame);ZBo=r(Kst,"AutoModelForTokenClassification"),Kst.forEach(t),cNe.forEach(t),lIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(ly.$$.fragment,Hs),ePo=i(Hs),Qi=n(Hs,"P",{});var bK=s(Qi);oPo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NG=n(bK,"A",{href:!0});var Zst=s(NG);rPo=r(Zst,"from_pretrained()"),Zst.forEach(t),tPo=r(bK," class method or the "),jG=n(bK,"A",{href:!0});var elt=s(jG);aPo=r(elt,"from_config()"),elt.forEach(t),nPo=r(bK,` class
method.`),bK.forEach(t),sPo=i(Hs),iy=n(Hs,"P",{});var fNe=s(iy);lPo=r(fNe,"This class cannot be instantiated directly using "),nme=n(fNe,"CODE",{});var olt=s(nme);iPo=r(olt,"__init__()"),olt.forEach(t),dPo=r(fNe," (throws an error)."),fNe.forEach(t),cPo=i(Hs),dt=n(Hs,"DIV",{class:!0});var gw=s(dt);T(dy.$$.fragment,gw),fPo=i(gw),sme=n(gw,"P",{});var rlt=s(sme);mPo=r(rlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rlt.forEach(t),gPo=i(gw),Wi=n(gw,"P",{});var vK=s(Wi);hPo=r(vK,`Note:
Loading a model from its configuration file does `),lme=n(vK,"STRONG",{});var tlt=s(lme);pPo=r(tlt,"not"),tlt.forEach(t),uPo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(vK,"A",{href:!0});var alt=s(DG);_Po=r(alt,"from_pretrained()"),alt.forEach(t),bPo=r(vK," to load the model weights."),vK.forEach(t),vPo=i(gw),T(r5.$$.fragment,gw),gw.forEach(t),FPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(cy.$$.fragment,la),TPo=i(la),ime=n(la,"P",{});var nlt=s(ime);MPo=r(nlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nlt.forEach(t),EPo=i(la),Ba=n(la,"P",{});var hw=s(Ba);CPo=r(hw,"The model class to instantiate is selected based on the "),dme=n(hw,"CODE",{});var slt=s(dme);wPo=r(slt,"model_type"),slt.forEach(t),APo=r(hw,` property of the config object (either
passed as an argument or loaded from `),cme=n(hw,"CODE",{});var llt=s(cme);yPo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),LPo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(hw,"CODE",{});var ilt=s(fme);xPo=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),$Po=r(hw,":"),hw.forEach(t),kPo=i(la),U=n(la,"UL",{});var J=s(U);t5=n(J,"LI",{});var T8e=s(t5);mme=n(T8e,"STRONG",{});var dlt=s(mme);SPo=r(dlt,"albert"),dlt.forEach(t),RPo=r(T8e," \u2014 "),GG=n(T8e,"A",{href:!0});var clt=s(GG);BPo=r(clt,"AlbertForTokenClassification"),clt.forEach(t),PPo=r(T8e," (ALBERT model)"),T8e.forEach(t),IPo=i(J),a5=n(J,"LI",{});var M8e=s(a5);gme=n(M8e,"STRONG",{});var flt=s(gme);qPo=r(flt,"bert"),flt.forEach(t),NPo=r(M8e," \u2014 "),OG=n(M8e,"A",{href:!0});var mlt=s(OG);jPo=r(mlt,"BertForTokenClassification"),mlt.forEach(t),DPo=r(M8e," (BERT model)"),M8e.forEach(t),GPo=i(J),n5=n(J,"LI",{});var E8e=s(n5);hme=n(E8e,"STRONG",{});var glt=s(hme);OPo=r(glt,"big_bird"),glt.forEach(t),VPo=r(E8e," \u2014 "),VG=n(E8e,"A",{href:!0});var hlt=s(VG);XPo=r(hlt,"BigBirdForTokenClassification"),hlt.forEach(t),zPo=r(E8e," (BigBird model)"),E8e.forEach(t),QPo=i(J),s5=n(J,"LI",{});var C8e=s(s5);pme=n(C8e,"STRONG",{});var plt=s(pme);WPo=r(plt,"camembert"),plt.forEach(t),HPo=r(C8e," \u2014 "),XG=n(C8e,"A",{href:!0});var ult=s(XG);UPo=r(ult,"CamembertForTokenClassification"),ult.forEach(t),JPo=r(C8e," (CamemBERT model)"),C8e.forEach(t),YPo=i(J),l5=n(J,"LI",{});var w8e=s(l5);ume=n(w8e,"STRONG",{});var _lt=s(ume);KPo=r(_lt,"canine"),_lt.forEach(t),ZPo=r(w8e," \u2014 "),zG=n(w8e,"A",{href:!0});var blt=s(zG);eIo=r(blt,"CanineForTokenClassification"),blt.forEach(t),oIo=r(w8e," (Canine model)"),w8e.forEach(t),rIo=i(J),i5=n(J,"LI",{});var A8e=s(i5);_me=n(A8e,"STRONG",{});var vlt=s(_me);tIo=r(vlt,"convbert"),vlt.forEach(t),aIo=r(A8e," \u2014 "),QG=n(A8e,"A",{href:!0});var Flt=s(QG);nIo=r(Flt,"ConvBertForTokenClassification"),Flt.forEach(t),sIo=r(A8e," (ConvBERT model)"),A8e.forEach(t),lIo=i(J),d5=n(J,"LI",{});var y8e=s(d5);bme=n(y8e,"STRONG",{});var Tlt=s(bme);iIo=r(Tlt,"data2vec-text"),Tlt.forEach(t),dIo=r(y8e," \u2014 "),WG=n(y8e,"A",{href:!0});var Mlt=s(WG);cIo=r(Mlt,"Data2VecTextForTokenClassification"),Mlt.forEach(t),fIo=r(y8e," (Data2VecText model)"),y8e.forEach(t),mIo=i(J),c5=n(J,"LI",{});var L8e=s(c5);vme=n(L8e,"STRONG",{});var Elt=s(vme);gIo=r(Elt,"deberta"),Elt.forEach(t),hIo=r(L8e," \u2014 "),HG=n(L8e,"A",{href:!0});var Clt=s(HG);pIo=r(Clt,"DebertaForTokenClassification"),Clt.forEach(t),uIo=r(L8e," (DeBERTa model)"),L8e.forEach(t),_Io=i(J),f5=n(J,"LI",{});var x8e=s(f5);Fme=n(x8e,"STRONG",{});var wlt=s(Fme);bIo=r(wlt,"deberta-v2"),wlt.forEach(t),vIo=r(x8e," \u2014 "),UG=n(x8e,"A",{href:!0});var Alt=s(UG);FIo=r(Alt,"DebertaV2ForTokenClassification"),Alt.forEach(t),TIo=r(x8e," (DeBERTa-v2 model)"),x8e.forEach(t),MIo=i(J),m5=n(J,"LI",{});var $8e=s(m5);Tme=n($8e,"STRONG",{});var ylt=s(Tme);EIo=r(ylt,"distilbert"),ylt.forEach(t),CIo=r($8e," \u2014 "),JG=n($8e,"A",{href:!0});var Llt=s(JG);wIo=r(Llt,"DistilBertForTokenClassification"),Llt.forEach(t),AIo=r($8e," (DistilBERT model)"),$8e.forEach(t),yIo=i(J),g5=n(J,"LI",{});var k8e=s(g5);Mme=n(k8e,"STRONG",{});var xlt=s(Mme);LIo=r(xlt,"electra"),xlt.forEach(t),xIo=r(k8e," \u2014 "),YG=n(k8e,"A",{href:!0});var $lt=s(YG);$Io=r($lt,"ElectraForTokenClassification"),$lt.forEach(t),kIo=r(k8e," (ELECTRA model)"),k8e.forEach(t),SIo=i(J),h5=n(J,"LI",{});var S8e=s(h5);Eme=n(S8e,"STRONG",{});var klt=s(Eme);RIo=r(klt,"flaubert"),klt.forEach(t),BIo=r(S8e," \u2014 "),KG=n(S8e,"A",{href:!0});var Slt=s(KG);PIo=r(Slt,"FlaubertForTokenClassification"),Slt.forEach(t),IIo=r(S8e," (FlauBERT model)"),S8e.forEach(t),qIo=i(J),p5=n(J,"LI",{});var R8e=s(p5);Cme=n(R8e,"STRONG",{});var Rlt=s(Cme);NIo=r(Rlt,"fnet"),Rlt.forEach(t),jIo=r(R8e," \u2014 "),ZG=n(R8e,"A",{href:!0});var Blt=s(ZG);DIo=r(Blt,"FNetForTokenClassification"),Blt.forEach(t),GIo=r(R8e," (FNet model)"),R8e.forEach(t),OIo=i(J),u5=n(J,"LI",{});var B8e=s(u5);wme=n(B8e,"STRONG",{});var Plt=s(wme);VIo=r(Plt,"funnel"),Plt.forEach(t),XIo=r(B8e," \u2014 "),eO=n(B8e,"A",{href:!0});var Ilt=s(eO);zIo=r(Ilt,"FunnelForTokenClassification"),Ilt.forEach(t),QIo=r(B8e," (Funnel Transformer model)"),B8e.forEach(t),WIo=i(J),_5=n(J,"LI",{});var P8e=s(_5);Ame=n(P8e,"STRONG",{});var qlt=s(Ame);HIo=r(qlt,"gpt2"),qlt.forEach(t),UIo=r(P8e," \u2014 "),oO=n(P8e,"A",{href:!0});var Nlt=s(oO);JIo=r(Nlt,"GPT2ForTokenClassification"),Nlt.forEach(t),YIo=r(P8e," (OpenAI GPT-2 model)"),P8e.forEach(t),KIo=i(J),b5=n(J,"LI",{});var I8e=s(b5);yme=n(I8e,"STRONG",{});var jlt=s(yme);ZIo=r(jlt,"ibert"),jlt.forEach(t),eqo=r(I8e," \u2014 "),rO=n(I8e,"A",{href:!0});var Dlt=s(rO);oqo=r(Dlt,"IBertForTokenClassification"),Dlt.forEach(t),rqo=r(I8e," (I-BERT model)"),I8e.forEach(t),tqo=i(J),v5=n(J,"LI",{});var q8e=s(v5);Lme=n(q8e,"STRONG",{});var Glt=s(Lme);aqo=r(Glt,"layoutlm"),Glt.forEach(t),nqo=r(q8e," \u2014 "),tO=n(q8e,"A",{href:!0});var Olt=s(tO);sqo=r(Olt,"LayoutLMForTokenClassification"),Olt.forEach(t),lqo=r(q8e," (LayoutLM model)"),q8e.forEach(t),iqo=i(J),F5=n(J,"LI",{});var N8e=s(F5);xme=n(N8e,"STRONG",{});var Vlt=s(xme);dqo=r(Vlt,"layoutlmv2"),Vlt.forEach(t),cqo=r(N8e," \u2014 "),aO=n(N8e,"A",{href:!0});var Xlt=s(aO);fqo=r(Xlt,"LayoutLMv2ForTokenClassification"),Xlt.forEach(t),mqo=r(N8e," (LayoutLMv2 model)"),N8e.forEach(t),gqo=i(J),T5=n(J,"LI",{});var j8e=s(T5);$me=n(j8e,"STRONG",{});var zlt=s($me);hqo=r(zlt,"longformer"),zlt.forEach(t),pqo=r(j8e," \u2014 "),nO=n(j8e,"A",{href:!0});var Qlt=s(nO);uqo=r(Qlt,"LongformerForTokenClassification"),Qlt.forEach(t),_qo=r(j8e," (Longformer model)"),j8e.forEach(t),bqo=i(J),M5=n(J,"LI",{});var D8e=s(M5);kme=n(D8e,"STRONG",{});var Wlt=s(kme);vqo=r(Wlt,"megatron-bert"),Wlt.forEach(t),Fqo=r(D8e," \u2014 "),sO=n(D8e,"A",{href:!0});var Hlt=s(sO);Tqo=r(Hlt,"MegatronBertForTokenClassification"),Hlt.forEach(t),Mqo=r(D8e," (MegatronBert model)"),D8e.forEach(t),Eqo=i(J),E5=n(J,"LI",{});var G8e=s(E5);Sme=n(G8e,"STRONG",{});var Ult=s(Sme);Cqo=r(Ult,"mobilebert"),Ult.forEach(t),wqo=r(G8e," \u2014 "),lO=n(G8e,"A",{href:!0});var Jlt=s(lO);Aqo=r(Jlt,"MobileBertForTokenClassification"),Jlt.forEach(t),yqo=r(G8e," (MobileBERT model)"),G8e.forEach(t),Lqo=i(J),C5=n(J,"LI",{});var O8e=s(C5);Rme=n(O8e,"STRONG",{});var Ylt=s(Rme);xqo=r(Ylt,"mpnet"),Ylt.forEach(t),$qo=r(O8e," \u2014 "),iO=n(O8e,"A",{href:!0});var Klt=s(iO);kqo=r(Klt,"MPNetForTokenClassification"),Klt.forEach(t),Sqo=r(O8e," (MPNet model)"),O8e.forEach(t),Rqo=i(J),w5=n(J,"LI",{});var V8e=s(w5);Bme=n(V8e,"STRONG",{});var Zlt=s(Bme);Bqo=r(Zlt,"nystromformer"),Zlt.forEach(t),Pqo=r(V8e," \u2014 "),dO=n(V8e,"A",{href:!0});var eit=s(dO);Iqo=r(eit,"NystromformerForTokenClassification"),eit.forEach(t),qqo=r(V8e," (Nystromformer model)"),V8e.forEach(t),Nqo=i(J),A5=n(J,"LI",{});var X8e=s(A5);Pme=n(X8e,"STRONG",{});var oit=s(Pme);jqo=r(oit,"qdqbert"),oit.forEach(t),Dqo=r(X8e," \u2014 "),cO=n(X8e,"A",{href:!0});var rit=s(cO);Gqo=r(rit,"QDQBertForTokenClassification"),rit.forEach(t),Oqo=r(X8e," (QDQBert model)"),X8e.forEach(t),Vqo=i(J),y5=n(J,"LI",{});var z8e=s(y5);Ime=n(z8e,"STRONG",{});var tit=s(Ime);Xqo=r(tit,"rembert"),tit.forEach(t),zqo=r(z8e," \u2014 "),fO=n(z8e,"A",{href:!0});var ait=s(fO);Qqo=r(ait,"RemBertForTokenClassification"),ait.forEach(t),Wqo=r(z8e," (RemBERT model)"),z8e.forEach(t),Hqo=i(J),L5=n(J,"LI",{});var Q8e=s(L5);qme=n(Q8e,"STRONG",{});var nit=s(qme);Uqo=r(nit,"roberta"),nit.forEach(t),Jqo=r(Q8e," \u2014 "),mO=n(Q8e,"A",{href:!0});var sit=s(mO);Yqo=r(sit,"RobertaForTokenClassification"),sit.forEach(t),Kqo=r(Q8e," (RoBERTa model)"),Q8e.forEach(t),Zqo=i(J),x5=n(J,"LI",{});var W8e=s(x5);Nme=n(W8e,"STRONG",{});var lit=s(Nme);eNo=r(lit,"roformer"),lit.forEach(t),oNo=r(W8e," \u2014 "),gO=n(W8e,"A",{href:!0});var iit=s(gO);rNo=r(iit,"RoFormerForTokenClassification"),iit.forEach(t),tNo=r(W8e," (RoFormer model)"),W8e.forEach(t),aNo=i(J),$5=n(J,"LI",{});var H8e=s($5);jme=n(H8e,"STRONG",{});var dit=s(jme);nNo=r(dit,"squeezebert"),dit.forEach(t),sNo=r(H8e," \u2014 "),hO=n(H8e,"A",{href:!0});var cit=s(hO);lNo=r(cit,"SqueezeBertForTokenClassification"),cit.forEach(t),iNo=r(H8e," (SqueezeBERT model)"),H8e.forEach(t),dNo=i(J),k5=n(J,"LI",{});var U8e=s(k5);Dme=n(U8e,"STRONG",{});var fit=s(Dme);cNo=r(fit,"xlm"),fit.forEach(t),fNo=r(U8e," \u2014 "),pO=n(U8e,"A",{href:!0});var mit=s(pO);mNo=r(mit,"XLMForTokenClassification"),mit.forEach(t),gNo=r(U8e," (XLM model)"),U8e.forEach(t),hNo=i(J),S5=n(J,"LI",{});var J8e=s(S5);Gme=n(J8e,"STRONG",{});var git=s(Gme);pNo=r(git,"xlm-roberta"),git.forEach(t),uNo=r(J8e," \u2014 "),uO=n(J8e,"A",{href:!0});var hit=s(uO);_No=r(hit,"XLMRobertaForTokenClassification"),hit.forEach(t),bNo=r(J8e," (XLM-RoBERTa model)"),J8e.forEach(t),vNo=i(J),R5=n(J,"LI",{});var Y8e=s(R5);Ome=n(Y8e,"STRONG",{});var pit=s(Ome);FNo=r(pit,"xlm-roberta-xl"),pit.forEach(t),TNo=r(Y8e," \u2014 "),_O=n(Y8e,"A",{href:!0});var uit=s(_O);MNo=r(uit,"XLMRobertaXLForTokenClassification"),uit.forEach(t),ENo=r(Y8e," (XLM-RoBERTa-XL model)"),Y8e.forEach(t),CNo=i(J),B5=n(J,"LI",{});var K8e=s(B5);Vme=n(K8e,"STRONG",{});var _it=s(Vme);wNo=r(_it,"xlnet"),_it.forEach(t),ANo=r(K8e," \u2014 "),bO=n(K8e,"A",{href:!0});var bit=s(bO);yNo=r(bit,"XLNetForTokenClassification"),bit.forEach(t),LNo=r(K8e," (XLNet model)"),K8e.forEach(t),xNo=i(J),P5=n(J,"LI",{});var Z8e=s(P5);Xme=n(Z8e,"STRONG",{});var vit=s(Xme);$No=r(vit,"yoso"),vit.forEach(t),kNo=r(Z8e," \u2014 "),vO=n(Z8e,"A",{href:!0});var Fit=s(vO);SNo=r(Fit,"YosoForTokenClassification"),Fit.forEach(t),RNo=r(Z8e," (YOSO model)"),Z8e.forEach(t),J.forEach(t),BNo=i(la),I5=n(la,"P",{});var exe=s(I5);PNo=r(exe,"The model is set in evaluation mode by default using "),zme=n(exe,"CODE",{});var Tit=s(zme);INo=r(Tit,"model.eval()"),Tit.forEach(t),qNo=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(exe,"CODE",{});var Mit=s(Qme);NNo=r(Mit,"model.train()"),Mit.forEach(t),exe.forEach(t),jNo=i(la),T(q5.$$.fragment,la),la.forEach(t),Hs.forEach(t),iIe=i(f),Hi=n(f,"H2",{class:!0});var mNe=s(Hi);N5=n(mNe,"A",{id:!0,class:!0,href:!0});var Eit=s(N5);Wme=n(Eit,"SPAN",{});var Cit=s(Wme);T(fy.$$.fragment,Cit),Cit.forEach(t),Eit.forEach(t),DNo=i(mNe),Hme=n(mNe,"SPAN",{});var wit=s(Hme);GNo=r(wit,"AutoModelForQuestionAnswering"),wit.forEach(t),mNe.forEach(t),dIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(my.$$.fragment,Us),ONo=i(Us),Ui=n(Us,"P",{});var FK=s(Ui);VNo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FO=n(FK,"A",{href:!0});var Ait=s(FO);XNo=r(Ait,"from_pretrained()"),Ait.forEach(t),zNo=r(FK," class method or the "),TO=n(FK,"A",{href:!0});var yit=s(TO);QNo=r(yit,"from_config()"),yit.forEach(t),WNo=r(FK,` class
method.`),FK.forEach(t),HNo=i(Us),gy=n(Us,"P",{});var gNe=s(gy);UNo=r(gNe,"This class cannot be instantiated directly using "),Ume=n(gNe,"CODE",{});var Lit=s(Ume);JNo=r(Lit,"__init__()"),Lit.forEach(t),YNo=r(gNe," (throws an error)."),gNe.forEach(t),KNo=i(Us),ct=n(Us,"DIV",{class:!0});var pw=s(ct);T(hy.$$.fragment,pw),ZNo=i(pw),Jme=n(pw,"P",{});var xit=s(Jme);ejo=r(xit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xit.forEach(t),ojo=i(pw),Ji=n(pw,"P",{});var TK=s(Ji);rjo=r(TK,`Note:
Loading a model from its configuration file does `),Yme=n(TK,"STRONG",{});var $it=s(Yme);tjo=r($it,"not"),$it.forEach(t),ajo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(TK,"A",{href:!0});var kit=s(MO);njo=r(kit,"from_pretrained()"),kit.forEach(t),sjo=r(TK," to load the model weights."),TK.forEach(t),ljo=i(pw),T(j5.$$.fragment,pw),pw.forEach(t),ijo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(py.$$.fragment,ia),djo=i(ia),Kme=n(ia,"P",{});var Sit=s(Kme);cjo=r(Sit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sit.forEach(t),fjo=i(ia),Pa=n(ia,"P",{});var uw=s(Pa);mjo=r(uw,"The model class to instantiate is selected based on the "),Zme=n(uw,"CODE",{});var Rit=s(Zme);gjo=r(Rit,"model_type"),Rit.forEach(t),hjo=r(uw,` property of the config object (either
passed as an argument or loaded from `),ege=n(uw,"CODE",{});var Bit=s(ege);pjo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),ujo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(uw,"CODE",{});var Pit=s(oge);_jo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),bjo=r(uw,":"),uw.forEach(t),vjo=i(ia),O=n(ia,"UL",{});var X=s(O);D5=n(X,"LI",{});var oxe=s(D5);rge=n(oxe,"STRONG",{});var Iit=s(rge);Fjo=r(Iit,"albert"),Iit.forEach(t),Tjo=r(oxe," \u2014 "),EO=n(oxe,"A",{href:!0});var qit=s(EO);Mjo=r(qit,"AlbertForQuestionAnswering"),qit.forEach(t),Ejo=r(oxe," (ALBERT model)"),oxe.forEach(t),Cjo=i(X),G5=n(X,"LI",{});var rxe=s(G5);tge=n(rxe,"STRONG",{});var Nit=s(tge);wjo=r(Nit,"bart"),Nit.forEach(t),Ajo=r(rxe," \u2014 "),CO=n(rxe,"A",{href:!0});var jit=s(CO);yjo=r(jit,"BartForQuestionAnswering"),jit.forEach(t),Ljo=r(rxe," (BART model)"),rxe.forEach(t),xjo=i(X),O5=n(X,"LI",{});var txe=s(O5);age=n(txe,"STRONG",{});var Dit=s(age);$jo=r(Dit,"bert"),Dit.forEach(t),kjo=r(txe," \u2014 "),wO=n(txe,"A",{href:!0});var Git=s(wO);Sjo=r(Git,"BertForQuestionAnswering"),Git.forEach(t),Rjo=r(txe," (BERT model)"),txe.forEach(t),Bjo=i(X),V5=n(X,"LI",{});var axe=s(V5);nge=n(axe,"STRONG",{});var Oit=s(nge);Pjo=r(Oit,"big_bird"),Oit.forEach(t),Ijo=r(axe," \u2014 "),AO=n(axe,"A",{href:!0});var Vit=s(AO);qjo=r(Vit,"BigBirdForQuestionAnswering"),Vit.forEach(t),Njo=r(axe," (BigBird model)"),axe.forEach(t),jjo=i(X),X5=n(X,"LI",{});var nxe=s(X5);sge=n(nxe,"STRONG",{});var Xit=s(sge);Djo=r(Xit,"bigbird_pegasus"),Xit.forEach(t),Gjo=r(nxe," \u2014 "),yO=n(nxe,"A",{href:!0});var zit=s(yO);Ojo=r(zit,"BigBirdPegasusForQuestionAnswering"),zit.forEach(t),Vjo=r(nxe," (BigBirdPegasus model)"),nxe.forEach(t),Xjo=i(X),z5=n(X,"LI",{});var sxe=s(z5);lge=n(sxe,"STRONG",{});var Qit=s(lge);zjo=r(Qit,"camembert"),Qit.forEach(t),Qjo=r(sxe," \u2014 "),LO=n(sxe,"A",{href:!0});var Wit=s(LO);Wjo=r(Wit,"CamembertForQuestionAnswering"),Wit.forEach(t),Hjo=r(sxe," (CamemBERT model)"),sxe.forEach(t),Ujo=i(X),Q5=n(X,"LI",{});var lxe=s(Q5);ige=n(lxe,"STRONG",{});var Hit=s(ige);Jjo=r(Hit,"canine"),Hit.forEach(t),Yjo=r(lxe," \u2014 "),xO=n(lxe,"A",{href:!0});var Uit=s(xO);Kjo=r(Uit,"CanineForQuestionAnswering"),Uit.forEach(t),Zjo=r(lxe," (Canine model)"),lxe.forEach(t),eDo=i(X),W5=n(X,"LI",{});var ixe=s(W5);dge=n(ixe,"STRONG",{});var Jit=s(dge);oDo=r(Jit,"convbert"),Jit.forEach(t),rDo=r(ixe," \u2014 "),$O=n(ixe,"A",{href:!0});var Yit=s($O);tDo=r(Yit,"ConvBertForQuestionAnswering"),Yit.forEach(t),aDo=r(ixe," (ConvBERT model)"),ixe.forEach(t),nDo=i(X),H5=n(X,"LI",{});var dxe=s(H5);cge=n(dxe,"STRONG",{});var Kit=s(cge);sDo=r(Kit,"data2vec-text"),Kit.forEach(t),lDo=r(dxe," \u2014 "),kO=n(dxe,"A",{href:!0});var Zit=s(kO);iDo=r(Zit,"Data2VecTextForQuestionAnswering"),Zit.forEach(t),dDo=r(dxe," (Data2VecText model)"),dxe.forEach(t),cDo=i(X),U5=n(X,"LI",{});var cxe=s(U5);fge=n(cxe,"STRONG",{});var edt=s(fge);fDo=r(edt,"deberta"),edt.forEach(t),mDo=r(cxe," \u2014 "),SO=n(cxe,"A",{href:!0});var odt=s(SO);gDo=r(odt,"DebertaForQuestionAnswering"),odt.forEach(t),hDo=r(cxe," (DeBERTa model)"),cxe.forEach(t),pDo=i(X),J5=n(X,"LI",{});var fxe=s(J5);mge=n(fxe,"STRONG",{});var rdt=s(mge);uDo=r(rdt,"deberta-v2"),rdt.forEach(t),_Do=r(fxe," \u2014 "),RO=n(fxe,"A",{href:!0});var tdt=s(RO);bDo=r(tdt,"DebertaV2ForQuestionAnswering"),tdt.forEach(t),vDo=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),FDo=i(X),Y5=n(X,"LI",{});var mxe=s(Y5);gge=n(mxe,"STRONG",{});var adt=s(gge);TDo=r(adt,"distilbert"),adt.forEach(t),MDo=r(mxe," \u2014 "),BO=n(mxe,"A",{href:!0});var ndt=s(BO);EDo=r(ndt,"DistilBertForQuestionAnswering"),ndt.forEach(t),CDo=r(mxe," (DistilBERT model)"),mxe.forEach(t),wDo=i(X),K5=n(X,"LI",{});var gxe=s(K5);hge=n(gxe,"STRONG",{});var sdt=s(hge);ADo=r(sdt,"electra"),sdt.forEach(t),yDo=r(gxe," \u2014 "),PO=n(gxe,"A",{href:!0});var ldt=s(PO);LDo=r(ldt,"ElectraForQuestionAnswering"),ldt.forEach(t),xDo=r(gxe," (ELECTRA model)"),gxe.forEach(t),$Do=i(X),Z5=n(X,"LI",{});var hxe=s(Z5);pge=n(hxe,"STRONG",{});var idt=s(pge);kDo=r(idt,"flaubert"),idt.forEach(t),SDo=r(hxe," \u2014 "),IO=n(hxe,"A",{href:!0});var ddt=s(IO);RDo=r(ddt,"FlaubertForQuestionAnsweringSimple"),ddt.forEach(t),BDo=r(hxe," (FlauBERT model)"),hxe.forEach(t),PDo=i(X),ev=n(X,"LI",{});var pxe=s(ev);uge=n(pxe,"STRONG",{});var cdt=s(uge);IDo=r(cdt,"fnet"),cdt.forEach(t),qDo=r(pxe," \u2014 "),qO=n(pxe,"A",{href:!0});var fdt=s(qO);NDo=r(fdt,"FNetForQuestionAnswering"),fdt.forEach(t),jDo=r(pxe," (FNet model)"),pxe.forEach(t),DDo=i(X),ov=n(X,"LI",{});var uxe=s(ov);_ge=n(uxe,"STRONG",{});var mdt=s(_ge);GDo=r(mdt,"funnel"),mdt.forEach(t),ODo=r(uxe," \u2014 "),NO=n(uxe,"A",{href:!0});var gdt=s(NO);VDo=r(gdt,"FunnelForQuestionAnswering"),gdt.forEach(t),XDo=r(uxe," (Funnel Transformer model)"),uxe.forEach(t),zDo=i(X),rv=n(X,"LI",{});var _xe=s(rv);bge=n(_xe,"STRONG",{});var hdt=s(bge);QDo=r(hdt,"gptj"),hdt.forEach(t),WDo=r(_xe," \u2014 "),jO=n(_xe,"A",{href:!0});var pdt=s(jO);HDo=r(pdt,"GPTJForQuestionAnswering"),pdt.forEach(t),UDo=r(_xe," (GPT-J model)"),_xe.forEach(t),JDo=i(X),tv=n(X,"LI",{});var bxe=s(tv);vge=n(bxe,"STRONG",{});var udt=s(vge);YDo=r(udt,"ibert"),udt.forEach(t),KDo=r(bxe," \u2014 "),DO=n(bxe,"A",{href:!0});var _dt=s(DO);ZDo=r(_dt,"IBertForQuestionAnswering"),_dt.forEach(t),eGo=r(bxe," (I-BERT model)"),bxe.forEach(t),oGo=i(X),av=n(X,"LI",{});var vxe=s(av);Fge=n(vxe,"STRONG",{});var bdt=s(Fge);rGo=r(bdt,"layoutlmv2"),bdt.forEach(t),tGo=r(vxe," \u2014 "),GO=n(vxe,"A",{href:!0});var vdt=s(GO);aGo=r(vdt,"LayoutLMv2ForQuestionAnswering"),vdt.forEach(t),nGo=r(vxe," (LayoutLMv2 model)"),vxe.forEach(t),sGo=i(X),nv=n(X,"LI",{});var Fxe=s(nv);Tge=n(Fxe,"STRONG",{});var Fdt=s(Tge);lGo=r(Fdt,"led"),Fdt.forEach(t),iGo=r(Fxe," \u2014 "),OO=n(Fxe,"A",{href:!0});var Tdt=s(OO);dGo=r(Tdt,"LEDForQuestionAnswering"),Tdt.forEach(t),cGo=r(Fxe," (LED model)"),Fxe.forEach(t),fGo=i(X),sv=n(X,"LI",{});var Txe=s(sv);Mge=n(Txe,"STRONG",{});var Mdt=s(Mge);mGo=r(Mdt,"longformer"),Mdt.forEach(t),gGo=r(Txe," \u2014 "),VO=n(Txe,"A",{href:!0});var Edt=s(VO);hGo=r(Edt,"LongformerForQuestionAnswering"),Edt.forEach(t),pGo=r(Txe," (Longformer model)"),Txe.forEach(t),uGo=i(X),lv=n(X,"LI",{});var Mxe=s(lv);Ege=n(Mxe,"STRONG",{});var Cdt=s(Ege);_Go=r(Cdt,"lxmert"),Cdt.forEach(t),bGo=r(Mxe," \u2014 "),XO=n(Mxe,"A",{href:!0});var wdt=s(XO);vGo=r(wdt,"LxmertForQuestionAnswering"),wdt.forEach(t),FGo=r(Mxe," (LXMERT model)"),Mxe.forEach(t),TGo=i(X),iv=n(X,"LI",{});var Exe=s(iv);Cge=n(Exe,"STRONG",{});var Adt=s(Cge);MGo=r(Adt,"mbart"),Adt.forEach(t),EGo=r(Exe," \u2014 "),zO=n(Exe,"A",{href:!0});var ydt=s(zO);CGo=r(ydt,"MBartForQuestionAnswering"),ydt.forEach(t),wGo=r(Exe," (mBART model)"),Exe.forEach(t),AGo=i(X),dv=n(X,"LI",{});var Cxe=s(dv);wge=n(Cxe,"STRONG",{});var Ldt=s(wge);yGo=r(Ldt,"megatron-bert"),Ldt.forEach(t),LGo=r(Cxe," \u2014 "),QO=n(Cxe,"A",{href:!0});var xdt=s(QO);xGo=r(xdt,"MegatronBertForQuestionAnswering"),xdt.forEach(t),$Go=r(Cxe," (MegatronBert model)"),Cxe.forEach(t),kGo=i(X),cv=n(X,"LI",{});var wxe=s(cv);Age=n(wxe,"STRONG",{});var $dt=s(Age);SGo=r($dt,"mobilebert"),$dt.forEach(t),RGo=r(wxe," \u2014 "),WO=n(wxe,"A",{href:!0});var kdt=s(WO);BGo=r(kdt,"MobileBertForQuestionAnswering"),kdt.forEach(t),PGo=r(wxe," (MobileBERT model)"),wxe.forEach(t),IGo=i(X),fv=n(X,"LI",{});var Axe=s(fv);yge=n(Axe,"STRONG",{});var Sdt=s(yge);qGo=r(Sdt,"mpnet"),Sdt.forEach(t),NGo=r(Axe," \u2014 "),HO=n(Axe,"A",{href:!0});var Rdt=s(HO);jGo=r(Rdt,"MPNetForQuestionAnswering"),Rdt.forEach(t),DGo=r(Axe," (MPNet model)"),Axe.forEach(t),GGo=i(X),mv=n(X,"LI",{});var yxe=s(mv);Lge=n(yxe,"STRONG",{});var Bdt=s(Lge);OGo=r(Bdt,"nystromformer"),Bdt.forEach(t),VGo=r(yxe," \u2014 "),UO=n(yxe,"A",{href:!0});var Pdt=s(UO);XGo=r(Pdt,"NystromformerForQuestionAnswering"),Pdt.forEach(t),zGo=r(yxe," (Nystromformer model)"),yxe.forEach(t),QGo=i(X),gv=n(X,"LI",{});var Lxe=s(gv);xge=n(Lxe,"STRONG",{});var Idt=s(xge);WGo=r(Idt,"qdqbert"),Idt.forEach(t),HGo=r(Lxe," \u2014 "),JO=n(Lxe,"A",{href:!0});var qdt=s(JO);UGo=r(qdt,"QDQBertForQuestionAnswering"),qdt.forEach(t),JGo=r(Lxe," (QDQBert model)"),Lxe.forEach(t),YGo=i(X),hv=n(X,"LI",{});var xxe=s(hv);$ge=n(xxe,"STRONG",{});var Ndt=s($ge);KGo=r(Ndt,"reformer"),Ndt.forEach(t),ZGo=r(xxe," \u2014 "),YO=n(xxe,"A",{href:!0});var jdt=s(YO);eOo=r(jdt,"ReformerForQuestionAnswering"),jdt.forEach(t),oOo=r(xxe," (Reformer model)"),xxe.forEach(t),rOo=i(X),pv=n(X,"LI",{});var $xe=s(pv);kge=n($xe,"STRONG",{});var Ddt=s(kge);tOo=r(Ddt,"rembert"),Ddt.forEach(t),aOo=r($xe," \u2014 "),KO=n($xe,"A",{href:!0});var Gdt=s(KO);nOo=r(Gdt,"RemBertForQuestionAnswering"),Gdt.forEach(t),sOo=r($xe," (RemBERT model)"),$xe.forEach(t),lOo=i(X),uv=n(X,"LI",{});var kxe=s(uv);Sge=n(kxe,"STRONG",{});var Odt=s(Sge);iOo=r(Odt,"roberta"),Odt.forEach(t),dOo=r(kxe," \u2014 "),ZO=n(kxe,"A",{href:!0});var Vdt=s(ZO);cOo=r(Vdt,"RobertaForQuestionAnswering"),Vdt.forEach(t),fOo=r(kxe," (RoBERTa model)"),kxe.forEach(t),mOo=i(X),_v=n(X,"LI",{});var Sxe=s(_v);Rge=n(Sxe,"STRONG",{});var Xdt=s(Rge);gOo=r(Xdt,"roformer"),Xdt.forEach(t),hOo=r(Sxe," \u2014 "),eV=n(Sxe,"A",{href:!0});var zdt=s(eV);pOo=r(zdt,"RoFormerForQuestionAnswering"),zdt.forEach(t),uOo=r(Sxe," (RoFormer model)"),Sxe.forEach(t),_Oo=i(X),bv=n(X,"LI",{});var Rxe=s(bv);Bge=n(Rxe,"STRONG",{});var Qdt=s(Bge);bOo=r(Qdt,"splinter"),Qdt.forEach(t),vOo=r(Rxe," \u2014 "),oV=n(Rxe,"A",{href:!0});var Wdt=s(oV);FOo=r(Wdt,"SplinterForQuestionAnswering"),Wdt.forEach(t),TOo=r(Rxe," (Splinter model)"),Rxe.forEach(t),MOo=i(X),vv=n(X,"LI",{});var Bxe=s(vv);Pge=n(Bxe,"STRONG",{});var Hdt=s(Pge);EOo=r(Hdt,"squeezebert"),Hdt.forEach(t),COo=r(Bxe," \u2014 "),rV=n(Bxe,"A",{href:!0});var Udt=s(rV);wOo=r(Udt,"SqueezeBertForQuestionAnswering"),Udt.forEach(t),AOo=r(Bxe," (SqueezeBERT model)"),Bxe.forEach(t),yOo=i(X),Fv=n(X,"LI",{});var Pxe=s(Fv);Ige=n(Pxe,"STRONG",{});var Jdt=s(Ige);LOo=r(Jdt,"xlm"),Jdt.forEach(t),xOo=r(Pxe," \u2014 "),tV=n(Pxe,"A",{href:!0});var Ydt=s(tV);$Oo=r(Ydt,"XLMForQuestionAnsweringSimple"),Ydt.forEach(t),kOo=r(Pxe," (XLM model)"),Pxe.forEach(t),SOo=i(X),Tv=n(X,"LI",{});var Ixe=s(Tv);qge=n(Ixe,"STRONG",{});var Kdt=s(qge);ROo=r(Kdt,"xlm-roberta"),Kdt.forEach(t),BOo=r(Ixe," \u2014 "),aV=n(Ixe,"A",{href:!0});var Zdt=s(aV);POo=r(Zdt,"XLMRobertaForQuestionAnswering"),Zdt.forEach(t),IOo=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),qOo=i(X),Mv=n(X,"LI",{});var qxe=s(Mv);Nge=n(qxe,"STRONG",{});var ect=s(Nge);NOo=r(ect,"xlm-roberta-xl"),ect.forEach(t),jOo=r(qxe," \u2014 "),nV=n(qxe,"A",{href:!0});var oct=s(nV);DOo=r(oct,"XLMRobertaXLForQuestionAnswering"),oct.forEach(t),GOo=r(qxe," (XLM-RoBERTa-XL model)"),qxe.forEach(t),OOo=i(X),Ev=n(X,"LI",{});var Nxe=s(Ev);jge=n(Nxe,"STRONG",{});var rct=s(jge);VOo=r(rct,"xlnet"),rct.forEach(t),XOo=r(Nxe," \u2014 "),sV=n(Nxe,"A",{href:!0});var tct=s(sV);zOo=r(tct,"XLNetForQuestionAnsweringSimple"),tct.forEach(t),QOo=r(Nxe," (XLNet model)"),Nxe.forEach(t),WOo=i(X),Cv=n(X,"LI",{});var jxe=s(Cv);Dge=n(jxe,"STRONG",{});var act=s(Dge);HOo=r(act,"yoso"),act.forEach(t),UOo=r(jxe," \u2014 "),lV=n(jxe,"A",{href:!0});var nct=s(lV);JOo=r(nct,"YosoForQuestionAnswering"),nct.forEach(t),YOo=r(jxe," (YOSO model)"),jxe.forEach(t),X.forEach(t),KOo=i(ia),wv=n(ia,"P",{});var Dxe=s(wv);ZOo=r(Dxe,"The model is set in evaluation mode by default using "),Gge=n(Dxe,"CODE",{});var sct=s(Gge);eVo=r(sct,"model.eval()"),sct.forEach(t),oVo=r(Dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(Dxe,"CODE",{});var lct=s(Oge);rVo=r(lct,"model.train()"),lct.forEach(t),Dxe.forEach(t),tVo=i(ia),T(Av.$$.fragment,ia),ia.forEach(t),Us.forEach(t),cIe=i(f),Yi=n(f,"H2",{class:!0});var hNe=s(Yi);yv=n(hNe,"A",{id:!0,class:!0,href:!0});var ict=s(yv);Vge=n(ict,"SPAN",{});var dct=s(Vge);T(uy.$$.fragment,dct),dct.forEach(t),ict.forEach(t),aVo=i(hNe),Xge=n(hNe,"SPAN",{});var cct=s(Xge);nVo=r(cct,"AutoModelForTableQuestionAnswering"),cct.forEach(t),hNe.forEach(t),fIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(_y.$$.fragment,Js),sVo=i(Js),Ki=n(Js,"P",{});var MK=s(Ki);lVo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iV=n(MK,"A",{href:!0});var fct=s(iV);iVo=r(fct,"from_pretrained()"),fct.forEach(t),dVo=r(MK," class method or the "),dV=n(MK,"A",{href:!0});var mct=s(dV);cVo=r(mct,"from_config()"),mct.forEach(t),fVo=r(MK,` class
method.`),MK.forEach(t),mVo=i(Js),by=n(Js,"P",{});var pNe=s(by);gVo=r(pNe,"This class cannot be instantiated directly using "),zge=n(pNe,"CODE",{});var gct=s(zge);hVo=r(gct,"__init__()"),gct.forEach(t),pVo=r(pNe," (throws an error)."),pNe.forEach(t),uVo=i(Js),ft=n(Js,"DIV",{class:!0});var _w=s(ft);T(vy.$$.fragment,_w),_Vo=i(_w),Qge=n(_w,"P",{});var hct=s(Qge);bVo=r(hct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hct.forEach(t),vVo=i(_w),Zi=n(_w,"P",{});var EK=s(Zi);FVo=r(EK,`Note:
Loading a model from its configuration file does `),Wge=n(EK,"STRONG",{});var pct=s(Wge);TVo=r(pct,"not"),pct.forEach(t),MVo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(EK,"A",{href:!0});var uct=s(cV);EVo=r(uct,"from_pretrained()"),uct.forEach(t),CVo=r(EK," to load the model weights."),EK.forEach(t),wVo=i(_w),T(Lv.$$.fragment,_w),_w.forEach(t),AVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Fy.$$.fragment,da),yVo=i(da),Hge=n(da,"P",{});var _ct=s(Hge);LVo=r(_ct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_ct.forEach(t),xVo=i(da),Ia=n(da,"P",{});var bw=s(Ia);$Vo=r(bw,"The model class to instantiate is selected based on the "),Uge=n(bw,"CODE",{});var bct=s(Uge);kVo=r(bct,"model_type"),bct.forEach(t),SVo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Jge=n(bw,"CODE",{});var vct=s(Jge);RVo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),BVo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(bw,"CODE",{});var Fct=s(Yge);PVo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),IVo=r(bw,":"),bw.forEach(t),qVo=i(da),Kge=n(da,"UL",{});var Tct=s(Kge);xv=n(Tct,"LI",{});var Gxe=s(xv);Zge=n(Gxe,"STRONG",{});var Mct=s(Zge);NVo=r(Mct,"tapas"),Mct.forEach(t),jVo=r(Gxe," \u2014 "),fV=n(Gxe,"A",{href:!0});var Ect=s(fV);DVo=r(Ect,"TapasForQuestionAnswering"),Ect.forEach(t),GVo=r(Gxe," (TAPAS model)"),Gxe.forEach(t),Tct.forEach(t),OVo=i(da),$v=n(da,"P",{});var Oxe=s($v);VVo=r(Oxe,"The model is set in evaluation mode by default using "),ehe=n(Oxe,"CODE",{});var Cct=s(ehe);XVo=r(Cct,"model.eval()"),Cct.forEach(t),zVo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(Oxe,"CODE",{});var wct=s(ohe);QVo=r(wct,"model.train()"),wct.forEach(t),Oxe.forEach(t),WVo=i(da),T(kv.$$.fragment,da),da.forEach(t),Js.forEach(t),mIe=i(f),ed=n(f,"H2",{class:!0});var uNe=s(ed);Sv=n(uNe,"A",{id:!0,class:!0,href:!0});var Act=s(Sv);rhe=n(Act,"SPAN",{});var yct=s(rhe);T(Ty.$$.fragment,yct),yct.forEach(t),Act.forEach(t),HVo=i(uNe),the=n(uNe,"SPAN",{});var Lct=s(the);UVo=r(Lct,"AutoModelForImageClassification"),Lct.forEach(t),uNe.forEach(t),gIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(My.$$.fragment,Ys),JVo=i(Ys),od=n(Ys,"P",{});var CK=s(od);YVo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mV=n(CK,"A",{href:!0});var xct=s(mV);KVo=r(xct,"from_pretrained()"),xct.forEach(t),ZVo=r(CK," class method or the "),gV=n(CK,"A",{href:!0});var $ct=s(gV);eXo=r($ct,"from_config()"),$ct.forEach(t),oXo=r(CK,` class
method.`),CK.forEach(t),rXo=i(Ys),Ey=n(Ys,"P",{});var _Ne=s(Ey);tXo=r(_Ne,"This class cannot be instantiated directly using "),ahe=n(_Ne,"CODE",{});var kct=s(ahe);aXo=r(kct,"__init__()"),kct.forEach(t),nXo=r(_Ne," (throws an error)."),_Ne.forEach(t),sXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var vw=s(mt);T(Cy.$$.fragment,vw),lXo=i(vw),nhe=n(vw,"P",{});var Sct=s(nhe);iXo=r(Sct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sct.forEach(t),dXo=i(vw),rd=n(vw,"P",{});var wK=s(rd);cXo=r(wK,`Note:
Loading a model from its configuration file does `),she=n(wK,"STRONG",{});var Rct=s(she);fXo=r(Rct,"not"),Rct.forEach(t),mXo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(wK,"A",{href:!0});var Bct=s(hV);gXo=r(Bct,"from_pretrained()"),Bct.forEach(t),hXo=r(wK," to load the model weights."),wK.forEach(t),pXo=i(vw),T(Rv.$$.fragment,vw),vw.forEach(t),uXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(wy.$$.fragment,ca),_Xo=i(ca),lhe=n(ca,"P",{});var Pct=s(lhe);bXo=r(Pct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pct.forEach(t),vXo=i(ca),qa=n(ca,"P",{});var Fw=s(qa);FXo=r(Fw,"The model class to instantiate is selected based on the "),ihe=n(Fw,"CODE",{});var Ict=s(ihe);TXo=r(Ict,"model_type"),Ict.forEach(t),MXo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),dhe=n(Fw,"CODE",{});var qct=s(dhe);EXo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),CXo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(Fw,"CODE",{});var Nct=s(che);wXo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),AXo=r(Fw,":"),Fw.forEach(t),yXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);Bv=n(Ee,"LI",{});var Vxe=s(Bv);fhe=n(Vxe,"STRONG",{});var jct=s(fhe);LXo=r(jct,"beit"),jct.forEach(t),xXo=r(Vxe," \u2014 "),pV=n(Vxe,"A",{href:!0});var Dct=s(pV);$Xo=r(Dct,"BeitForImageClassification"),Dct.forEach(t),kXo=r(Vxe," (BEiT model)"),Vxe.forEach(t),SXo=i(Ee),Pv=n(Ee,"LI",{});var Xxe=s(Pv);mhe=n(Xxe,"STRONG",{});var Gct=s(mhe);RXo=r(Gct,"convnext"),Gct.forEach(t),BXo=r(Xxe," \u2014 "),uV=n(Xxe,"A",{href:!0});var Oct=s(uV);PXo=r(Oct,"ConvNextForImageClassification"),Oct.forEach(t),IXo=r(Xxe," (ConvNext model)"),Xxe.forEach(t),qXo=i(Ee),Iv=n(Ee,"LI",{});var zxe=s(Iv);ghe=n(zxe,"STRONG",{});var Vct=s(ghe);NXo=r(Vct,"data2vec-vision"),Vct.forEach(t),jXo=r(zxe," \u2014 "),_V=n(zxe,"A",{href:!0});var Xct=s(_V);DXo=r(Xct,"Data2VecVisionForImageClassification"),Xct.forEach(t),GXo=r(zxe," (Data2VecVision model)"),zxe.forEach(t),OXo=i(Ee),Rs=n(Ee,"LI",{});var d$=s(Rs);hhe=n(d$,"STRONG",{});var zct=s(hhe);VXo=r(zct,"deit"),zct.forEach(t),XXo=r(d$," \u2014 "),bV=n(d$,"A",{href:!0});var Qct=s(bV);zXo=r(Qct,"DeiTForImageClassification"),Qct.forEach(t),QXo=r(d$," or "),vV=n(d$,"A",{href:!0});var Wct=s(vV);WXo=r(Wct,"DeiTForImageClassificationWithTeacher"),Wct.forEach(t),HXo=r(d$," (DeiT model)"),d$.forEach(t),UXo=i(Ee),qv=n(Ee,"LI",{});var Qxe=s(qv);phe=n(Qxe,"STRONG",{});var Hct=s(phe);JXo=r(Hct,"imagegpt"),Hct.forEach(t),YXo=r(Qxe," \u2014 "),FV=n(Qxe,"A",{href:!0});var Uct=s(FV);KXo=r(Uct,"ImageGPTForImageClassification"),Uct.forEach(t),ZXo=r(Qxe," (ImageGPT model)"),Qxe.forEach(t),ezo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);uhe=n(ff,"STRONG",{});var Jct=s(uhe);ozo=r(Jct,"perceiver"),Jct.forEach(t),rzo=r(ff," \u2014 "),TV=n(ff,"A",{href:!0});var Yct=s(TV);tzo=r(Yct,"PerceiverForImageClassificationLearned"),Yct.forEach(t),azo=r(ff," or "),MV=n(ff,"A",{href:!0});var Kct=s(MV);nzo=r(Kct,"PerceiverForImageClassificationFourier"),Kct.forEach(t),szo=r(ff," or "),EV=n(ff,"A",{href:!0});var Zct=s(EV);lzo=r(Zct,"PerceiverForImageClassificationConvProcessing"),Zct.forEach(t),izo=r(ff," (Perceiver model)"),ff.forEach(t),dzo=i(Ee),Nv=n(Ee,"LI",{});var Wxe=s(Nv);_he=n(Wxe,"STRONG",{});var eft=s(_he);czo=r(eft,"poolformer"),eft.forEach(t),fzo=r(Wxe," \u2014 "),CV=n(Wxe,"A",{href:!0});var oft=s(CV);mzo=r(oft,"PoolFormerForImageClassification"),oft.forEach(t),gzo=r(Wxe," (PoolFormer model)"),Wxe.forEach(t),hzo=i(Ee),jv=n(Ee,"LI",{});var Hxe=s(jv);bhe=n(Hxe,"STRONG",{});var rft=s(bhe);pzo=r(rft,"regnet"),rft.forEach(t),uzo=r(Hxe," \u2014 "),wV=n(Hxe,"A",{href:!0});var tft=s(wV);_zo=r(tft,"RegNetForImageClassification"),tft.forEach(t),bzo=r(Hxe," (RegNet model)"),Hxe.forEach(t),vzo=i(Ee),Dv=n(Ee,"LI",{});var Uxe=s(Dv);vhe=n(Uxe,"STRONG",{});var aft=s(vhe);Fzo=r(aft,"resnet"),aft.forEach(t),Tzo=r(Uxe," \u2014 "),AV=n(Uxe,"A",{href:!0});var nft=s(AV);Mzo=r(nft,"ResNetForImageClassification"),nft.forEach(t),Ezo=r(Uxe," (ResNet model)"),Uxe.forEach(t),Czo=i(Ee),Gv=n(Ee,"LI",{});var Jxe=s(Gv);Fhe=n(Jxe,"STRONG",{});var sft=s(Fhe);wzo=r(sft,"segformer"),sft.forEach(t),Azo=r(Jxe," \u2014 "),yV=n(Jxe,"A",{href:!0});var lft=s(yV);yzo=r(lft,"SegformerForImageClassification"),lft.forEach(t),Lzo=r(Jxe," (SegFormer model)"),Jxe.forEach(t),xzo=i(Ee),Ov=n(Ee,"LI",{});var Yxe=s(Ov);The=n(Yxe,"STRONG",{});var ift=s(The);$zo=r(ift,"swin"),ift.forEach(t),kzo=r(Yxe," \u2014 "),LV=n(Yxe,"A",{href:!0});var dft=s(LV);Szo=r(dft,"SwinForImageClassification"),dft.forEach(t),Rzo=r(Yxe," (Swin model)"),Yxe.forEach(t),Bzo=i(Ee),Vv=n(Ee,"LI",{});var Kxe=s(Vv);Mhe=n(Kxe,"STRONG",{});var cft=s(Mhe);Pzo=r(cft,"van"),cft.forEach(t),Izo=r(Kxe," \u2014 "),xV=n(Kxe,"A",{href:!0});var fft=s(xV);qzo=r(fft,"VanForImageClassification"),fft.forEach(t),Nzo=r(Kxe," (VAN model)"),Kxe.forEach(t),jzo=i(Ee),Xv=n(Ee,"LI",{});var Zxe=s(Xv);Ehe=n(Zxe,"STRONG",{});var mft=s(Ehe);Dzo=r(mft,"vit"),mft.forEach(t),Gzo=r(Zxe," \u2014 "),$V=n(Zxe,"A",{href:!0});var gft=s($V);Ozo=r(gft,"ViTForImageClassification"),gft.forEach(t),Vzo=r(Zxe," (ViT model)"),Zxe.forEach(t),Ee.forEach(t),Xzo=i(ca),zv=n(ca,"P",{});var e9e=s(zv);zzo=r(e9e,"The model is set in evaluation mode by default using "),Che=n(e9e,"CODE",{});var hft=s(Che);Qzo=r(hft,"model.eval()"),hft.forEach(t),Wzo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(e9e,"CODE",{});var pft=s(whe);Hzo=r(pft,"model.train()"),pft.forEach(t),e9e.forEach(t),Uzo=i(ca),T(Qv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),hIe=i(f),td=n(f,"H2",{class:!0});var bNe=s(td);Wv=n(bNe,"A",{id:!0,class:!0,href:!0});var uft=s(Wv);Ahe=n(uft,"SPAN",{});var _ft=s(Ahe);T(Ay.$$.fragment,_ft),_ft.forEach(t),uft.forEach(t),Jzo=i(bNe),yhe=n(bNe,"SPAN",{});var bft=s(yhe);Yzo=r(bft,"AutoModelForVision2Seq"),bft.forEach(t),bNe.forEach(t),pIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(yy.$$.fragment,Ks),Kzo=i(Ks),ad=n(Ks,"P",{});var AK=s(ad);Zzo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kV=n(AK,"A",{href:!0});var vft=s(kV);eQo=r(vft,"from_pretrained()"),vft.forEach(t),oQo=r(AK," class method or the "),SV=n(AK,"A",{href:!0});var Fft=s(SV);rQo=r(Fft,"from_config()"),Fft.forEach(t),tQo=r(AK,` class
method.`),AK.forEach(t),aQo=i(Ks),Ly=n(Ks,"P",{});var vNe=s(Ly);nQo=r(vNe,"This class cannot be instantiated directly using "),Lhe=n(vNe,"CODE",{});var Tft=s(Lhe);sQo=r(Tft,"__init__()"),Tft.forEach(t),lQo=r(vNe," (throws an error)."),vNe.forEach(t),iQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Tw=s(ht);T(xy.$$.fragment,Tw),dQo=i(Tw),xhe=n(Tw,"P",{});var Mft=s(xhe);cQo=r(Mft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mft.forEach(t),fQo=i(Tw),nd=n(Tw,"P",{});var yK=s(nd);mQo=r(yK,`Note:
Loading a model from its configuration file does `),$he=n(yK,"STRONG",{});var Eft=s($he);gQo=r(Eft,"not"),Eft.forEach(t),hQo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(yK,"A",{href:!0});var Cft=s(RV);pQo=r(Cft,"from_pretrained()"),Cft.forEach(t),uQo=r(yK," to load the model weights."),yK.forEach(t),_Qo=i(Tw),T(Hv.$$.fragment,Tw),Tw.forEach(t),bQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T($y.$$.fragment,fa),vQo=i(fa),khe=n(fa,"P",{});var wft=s(khe);FQo=r(wft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wft.forEach(t),TQo=i(fa),Na=n(fa,"P",{});var Mw=s(Na);MQo=r(Mw,"The model class to instantiate is selected based on the "),She=n(Mw,"CODE",{});var Aft=s(She);EQo=r(Aft,"model_type"),Aft.forEach(t),CQo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(Mw,"CODE",{});var yft=s(Rhe);wQo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),AQo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(Mw,"CODE",{});var Lft=s(Bhe);yQo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),LQo=r(Mw,":"),Mw.forEach(t),xQo=i(fa),Phe=n(fa,"UL",{});var xft=s(Phe);Uv=n(xft,"LI",{});var o9e=s(Uv);Ihe=n(o9e,"STRONG",{});var $ft=s(Ihe);$Qo=r($ft,"vision-encoder-decoder"),$ft.forEach(t),kQo=r(o9e," \u2014 "),BV=n(o9e,"A",{href:!0});var kft=s(BV);SQo=r(kft,"VisionEncoderDecoderModel"),kft.forEach(t),RQo=r(o9e," (Vision Encoder decoder model)"),o9e.forEach(t),xft.forEach(t),BQo=i(fa),Jv=n(fa,"P",{});var r9e=s(Jv);PQo=r(r9e,"The model is set in evaluation mode by default using "),qhe=n(r9e,"CODE",{});var Sft=s(qhe);IQo=r(Sft,"model.eval()"),Sft.forEach(t),qQo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(r9e,"CODE",{});var Rft=s(Nhe);NQo=r(Rft,"model.train()"),Rft.forEach(t),r9e.forEach(t),jQo=i(fa),T(Yv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),uIe=i(f),sd=n(f,"H2",{class:!0});var FNe=s(sd);Kv=n(FNe,"A",{id:!0,class:!0,href:!0});var Bft=s(Kv);jhe=n(Bft,"SPAN",{});var Pft=s(jhe);T(ky.$$.fragment,Pft),Pft.forEach(t),Bft.forEach(t),DQo=i(FNe),Dhe=n(FNe,"SPAN",{});var Ift=s(Dhe);GQo=r(Ift,"AutoModelForAudioClassification"),Ift.forEach(t),FNe.forEach(t),_Ie=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Sy.$$.fragment,Zs),OQo=i(Zs),ld=n(Zs,"P",{});var LK=s(ld);VQo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PV=n(LK,"A",{href:!0});var qft=s(PV);XQo=r(qft,"from_pretrained()"),qft.forEach(t),zQo=r(LK," class method or the "),IV=n(LK,"A",{href:!0});var Nft=s(IV);QQo=r(Nft,"from_config()"),Nft.forEach(t),WQo=r(LK,` class
method.`),LK.forEach(t),HQo=i(Zs),Ry=n(Zs,"P",{});var TNe=s(Ry);UQo=r(TNe,"This class cannot be instantiated directly using "),Ghe=n(TNe,"CODE",{});var jft=s(Ghe);JQo=r(jft,"__init__()"),jft.forEach(t),YQo=r(TNe," (throws an error)."),TNe.forEach(t),KQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var Ew=s(pt);T(By.$$.fragment,Ew),ZQo=i(Ew),Ohe=n(Ew,"P",{});var Dft=s(Ohe);eWo=r(Dft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Dft.forEach(t),oWo=i(Ew),id=n(Ew,"P",{});var xK=s(id);rWo=r(xK,`Note:
Loading a model from its configuration file does `),Vhe=n(xK,"STRONG",{});var Gft=s(Vhe);tWo=r(Gft,"not"),Gft.forEach(t),aWo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(xK,"A",{href:!0});var Oft=s(qV);nWo=r(Oft,"from_pretrained()"),Oft.forEach(t),sWo=r(xK," to load the model weights."),xK.forEach(t),lWo=i(Ew),T(Zv.$$.fragment,Ew),Ew.forEach(t),iWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Py.$$.fragment,ma),dWo=i(ma),Xhe=n(ma,"P",{});var Vft=s(Xhe);cWo=r(Vft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Vft.forEach(t),fWo=i(ma),ja=n(ma,"P",{});var Cw=s(ja);mWo=r(Cw,"The model class to instantiate is selected based on the "),zhe=n(Cw,"CODE",{});var Xft=s(zhe);gWo=r(Xft,"model_type"),Xft.forEach(t),hWo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(Cw,"CODE",{});var zft=s(Qhe);pWo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),uWo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(Cw,"CODE",{});var Qft=s(Whe);_Wo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),bWo=r(Cw,":"),Cw.forEach(t),vWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);eF=n(bo,"LI",{});var t9e=s(eF);Hhe=n(t9e,"STRONG",{});var Wft=s(Hhe);FWo=r(Wft,"data2vec-audio"),Wft.forEach(t),TWo=r(t9e," \u2014 "),NV=n(t9e,"A",{href:!0});var Hft=s(NV);MWo=r(Hft,"Data2VecAudioForSequenceClassification"),Hft.forEach(t),EWo=r(t9e," (Data2VecAudio model)"),t9e.forEach(t),CWo=i(bo),oF=n(bo,"LI",{});var a9e=s(oF);Uhe=n(a9e,"STRONG",{});var Uft=s(Uhe);wWo=r(Uft,"hubert"),Uft.forEach(t),AWo=r(a9e," \u2014 "),jV=n(a9e,"A",{href:!0});var Jft=s(jV);yWo=r(Jft,"HubertForSequenceClassification"),Jft.forEach(t),LWo=r(a9e," (Hubert model)"),a9e.forEach(t),xWo=i(bo),rF=n(bo,"LI",{});var n9e=s(rF);Jhe=n(n9e,"STRONG",{});var Yft=s(Jhe);$Wo=r(Yft,"sew"),Yft.forEach(t),kWo=r(n9e," \u2014 "),DV=n(n9e,"A",{href:!0});var Kft=s(DV);SWo=r(Kft,"SEWForSequenceClassification"),Kft.forEach(t),RWo=r(n9e," (SEW model)"),n9e.forEach(t),BWo=i(bo),tF=n(bo,"LI",{});var s9e=s(tF);Yhe=n(s9e,"STRONG",{});var Zft=s(Yhe);PWo=r(Zft,"sew-d"),Zft.forEach(t),IWo=r(s9e," \u2014 "),GV=n(s9e,"A",{href:!0});var emt=s(GV);qWo=r(emt,"SEWDForSequenceClassification"),emt.forEach(t),NWo=r(s9e," (SEW-D model)"),s9e.forEach(t),jWo=i(bo),aF=n(bo,"LI",{});var l9e=s(aF);Khe=n(l9e,"STRONG",{});var omt=s(Khe);DWo=r(omt,"unispeech"),omt.forEach(t),GWo=r(l9e," \u2014 "),OV=n(l9e,"A",{href:!0});var rmt=s(OV);OWo=r(rmt,"UniSpeechForSequenceClassification"),rmt.forEach(t),VWo=r(l9e," (UniSpeech model)"),l9e.forEach(t),XWo=i(bo),nF=n(bo,"LI",{});var i9e=s(nF);Zhe=n(i9e,"STRONG",{});var tmt=s(Zhe);zWo=r(tmt,"unispeech-sat"),tmt.forEach(t),QWo=r(i9e," \u2014 "),VV=n(i9e,"A",{href:!0});var amt=s(VV);WWo=r(amt,"UniSpeechSatForSequenceClassification"),amt.forEach(t),HWo=r(i9e," (UniSpeechSat model)"),i9e.forEach(t),UWo=i(bo),sF=n(bo,"LI",{});var d9e=s(sF);epe=n(d9e,"STRONG",{});var nmt=s(epe);JWo=r(nmt,"wav2vec2"),nmt.forEach(t),YWo=r(d9e," \u2014 "),XV=n(d9e,"A",{href:!0});var smt=s(XV);KWo=r(smt,"Wav2Vec2ForSequenceClassification"),smt.forEach(t),ZWo=r(d9e," (Wav2Vec2 model)"),d9e.forEach(t),eHo=i(bo),lF=n(bo,"LI",{});var c9e=s(lF);ope=n(c9e,"STRONG",{});var lmt=s(ope);oHo=r(lmt,"wavlm"),lmt.forEach(t),rHo=r(c9e," \u2014 "),zV=n(c9e,"A",{href:!0});var imt=s(zV);tHo=r(imt,"WavLMForSequenceClassification"),imt.forEach(t),aHo=r(c9e," (WavLM model)"),c9e.forEach(t),bo.forEach(t),nHo=i(ma),iF=n(ma,"P",{});var f9e=s(iF);sHo=r(f9e,"The model is set in evaluation mode by default using "),rpe=n(f9e,"CODE",{});var dmt=s(rpe);lHo=r(dmt,"model.eval()"),dmt.forEach(t),iHo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(f9e,"CODE",{});var cmt=s(tpe);dHo=r(cmt,"model.train()"),cmt.forEach(t),f9e.forEach(t),cHo=i(ma),T(dF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),bIe=i(f),dd=n(f,"H2",{class:!0});var MNe=s(dd);cF=n(MNe,"A",{id:!0,class:!0,href:!0});var fmt=s(cF);ape=n(fmt,"SPAN",{});var mmt=s(ape);T(Iy.$$.fragment,mmt),mmt.forEach(t),fmt.forEach(t),fHo=i(MNe),npe=n(MNe,"SPAN",{});var gmt=s(npe);mHo=r(gmt,"AutoModelForAudioFrameClassification"),gmt.forEach(t),MNe.forEach(t),vIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(qy.$$.fragment,el),gHo=i(el),cd=n(el,"P",{});var $K=s(cd);hHo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QV=n($K,"A",{href:!0});var hmt=s(QV);pHo=r(hmt,"from_pretrained()"),hmt.forEach(t),uHo=r($K," class method or the "),WV=n($K,"A",{href:!0});var pmt=s(WV);_Ho=r(pmt,"from_config()"),pmt.forEach(t),bHo=r($K,` class
method.`),$K.forEach(t),vHo=i(el),Ny=n(el,"P",{});var ENe=s(Ny);FHo=r(ENe,"This class cannot be instantiated directly using "),spe=n(ENe,"CODE",{});var umt=s(spe);THo=r(umt,"__init__()"),umt.forEach(t),MHo=r(ENe," (throws an error)."),ENe.forEach(t),EHo=i(el),ut=n(el,"DIV",{class:!0});var ww=s(ut);T(jy.$$.fragment,ww),CHo=i(ww),lpe=n(ww,"P",{});var _mt=s(lpe);wHo=r(_mt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_mt.forEach(t),AHo=i(ww),fd=n(ww,"P",{});var kK=s(fd);yHo=r(kK,`Note:
Loading a model from its configuration file does `),ipe=n(kK,"STRONG",{});var bmt=s(ipe);LHo=r(bmt,"not"),bmt.forEach(t),xHo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(kK,"A",{href:!0});var vmt=s(HV);$Ho=r(vmt,"from_pretrained()"),vmt.forEach(t),kHo=r(kK," to load the model weights."),kK.forEach(t),SHo=i(ww),T(fF.$$.fragment,ww),ww.forEach(t),RHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Dy.$$.fragment,ga),BHo=i(ga),dpe=n(ga,"P",{});var Fmt=s(dpe);PHo=r(Fmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Fmt.forEach(t),IHo=i(ga),Da=n(ga,"P",{});var Aw=s(Da);qHo=r(Aw,"The model class to instantiate is selected based on the "),cpe=n(Aw,"CODE",{});var Tmt=s(cpe);NHo=r(Tmt,"model_type"),Tmt.forEach(t),jHo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),fpe=n(Aw,"CODE",{});var Mmt=s(fpe);DHo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),GHo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(Aw,"CODE",{});var Emt=s(mpe);OHo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),VHo=r(Aw,":"),Aw.forEach(t),XHo=i(ga),Ga=n(ga,"UL",{});var yw=s(Ga);mF=n(yw,"LI",{});var m9e=s(mF);gpe=n(m9e,"STRONG",{});var Cmt=s(gpe);zHo=r(Cmt,"data2vec-audio"),Cmt.forEach(t),QHo=r(m9e," \u2014 "),UV=n(m9e,"A",{href:!0});var wmt=s(UV);WHo=r(wmt,"Data2VecAudioForAudioFrameClassification"),wmt.forEach(t),HHo=r(m9e," (Data2VecAudio model)"),m9e.forEach(t),UHo=i(yw),gF=n(yw,"LI",{});var g9e=s(gF);hpe=n(g9e,"STRONG",{});var Amt=s(hpe);JHo=r(Amt,"unispeech-sat"),Amt.forEach(t),YHo=r(g9e," \u2014 "),JV=n(g9e,"A",{href:!0});var ymt=s(JV);KHo=r(ymt,"UniSpeechSatForAudioFrameClassification"),ymt.forEach(t),ZHo=r(g9e," (UniSpeechSat model)"),g9e.forEach(t),eUo=i(yw),hF=n(yw,"LI",{});var h9e=s(hF);ppe=n(h9e,"STRONG",{});var Lmt=s(ppe);oUo=r(Lmt,"wav2vec2"),Lmt.forEach(t),rUo=r(h9e," \u2014 "),YV=n(h9e,"A",{href:!0});var xmt=s(YV);tUo=r(xmt,"Wav2Vec2ForAudioFrameClassification"),xmt.forEach(t),aUo=r(h9e," (Wav2Vec2 model)"),h9e.forEach(t),nUo=i(yw),pF=n(yw,"LI",{});var p9e=s(pF);upe=n(p9e,"STRONG",{});var $mt=s(upe);sUo=r($mt,"wavlm"),$mt.forEach(t),lUo=r(p9e," \u2014 "),KV=n(p9e,"A",{href:!0});var kmt=s(KV);iUo=r(kmt,"WavLMForAudioFrameClassification"),kmt.forEach(t),dUo=r(p9e," (WavLM model)"),p9e.forEach(t),yw.forEach(t),cUo=i(ga),uF=n(ga,"P",{});var u9e=s(uF);fUo=r(u9e,"The model is set in evaluation mode by default using "),_pe=n(u9e,"CODE",{});var Smt=s(_pe);mUo=r(Smt,"model.eval()"),Smt.forEach(t),gUo=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(u9e,"CODE",{});var Rmt=s(bpe);hUo=r(Rmt,"model.train()"),Rmt.forEach(t),u9e.forEach(t),pUo=i(ga),T(_F.$$.fragment,ga),ga.forEach(t),el.forEach(t),FIe=i(f),md=n(f,"H2",{class:!0});var CNe=s(md);bF=n(CNe,"A",{id:!0,class:!0,href:!0});var Bmt=s(bF);vpe=n(Bmt,"SPAN",{});var Pmt=s(vpe);T(Gy.$$.fragment,Pmt),Pmt.forEach(t),Bmt.forEach(t),uUo=i(CNe),Fpe=n(CNe,"SPAN",{});var Imt=s(Fpe);_Uo=r(Imt,"AutoModelForCTC"),Imt.forEach(t),CNe.forEach(t),TIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Oy.$$.fragment,ol),bUo=i(ol),gd=n(ol,"P",{});var SK=s(gd);vUo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZV=n(SK,"A",{href:!0});var qmt=s(ZV);FUo=r(qmt,"from_pretrained()"),qmt.forEach(t),TUo=r(SK," class method or the "),eX=n(SK,"A",{href:!0});var Nmt=s(eX);MUo=r(Nmt,"from_config()"),Nmt.forEach(t),EUo=r(SK,` class
method.`),SK.forEach(t),CUo=i(ol),Vy=n(ol,"P",{});var wNe=s(Vy);wUo=r(wNe,"This class cannot be instantiated directly using "),Tpe=n(wNe,"CODE",{});var jmt=s(Tpe);AUo=r(jmt,"__init__()"),jmt.forEach(t),yUo=r(wNe," (throws an error)."),wNe.forEach(t),LUo=i(ol),_t=n(ol,"DIV",{class:!0});var Lw=s(_t);T(Xy.$$.fragment,Lw),xUo=i(Lw),Mpe=n(Lw,"P",{});var Dmt=s(Mpe);$Uo=r(Dmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dmt.forEach(t),kUo=i(Lw),hd=n(Lw,"P",{});var RK=s(hd);SUo=r(RK,`Note:
Loading a model from its configuration file does `),Epe=n(RK,"STRONG",{});var Gmt=s(Epe);RUo=r(Gmt,"not"),Gmt.forEach(t),BUo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(RK,"A",{href:!0});var Omt=s(oX);PUo=r(Omt,"from_pretrained()"),Omt.forEach(t),IUo=r(RK," to load the model weights."),RK.forEach(t),qUo=i(Lw),T(vF.$$.fragment,Lw),Lw.forEach(t),NUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(zy.$$.fragment,ha),jUo=i(ha),Cpe=n(ha,"P",{});var Vmt=s(Cpe);DUo=r(Vmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vmt.forEach(t),GUo=i(ha),Oa=n(ha,"P",{});var xw=s(Oa);OUo=r(xw,"The model class to instantiate is selected based on the "),wpe=n(xw,"CODE",{});var Xmt=s(wpe);VUo=r(Xmt,"model_type"),Xmt.forEach(t),XUo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Ape=n(xw,"CODE",{});var zmt=s(Ape);zUo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),QUo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(xw,"CODE",{});var Qmt=s(ype);WUo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),HUo=r(xw,":"),xw.forEach(t),UUo=i(ha),je=n(ha,"UL",{});var vo=s(je);FF=n(vo,"LI",{});var _9e=s(FF);Lpe=n(_9e,"STRONG",{});var Wmt=s(Lpe);JUo=r(Wmt,"data2vec-audio"),Wmt.forEach(t),YUo=r(_9e," \u2014 "),rX=n(_9e,"A",{href:!0});var Hmt=s(rX);KUo=r(Hmt,"Data2VecAudioForCTC"),Hmt.forEach(t),ZUo=r(_9e," (Data2VecAudio model)"),_9e.forEach(t),eJo=i(vo),TF=n(vo,"LI",{});var b9e=s(TF);xpe=n(b9e,"STRONG",{});var Umt=s(xpe);oJo=r(Umt,"hubert"),Umt.forEach(t),rJo=r(b9e," \u2014 "),tX=n(b9e,"A",{href:!0});var Jmt=s(tX);tJo=r(Jmt,"HubertForCTC"),Jmt.forEach(t),aJo=r(b9e," (Hubert model)"),b9e.forEach(t),nJo=i(vo),MF=n(vo,"LI",{});var v9e=s(MF);$pe=n(v9e,"STRONG",{});var Ymt=s($pe);sJo=r(Ymt,"sew"),Ymt.forEach(t),lJo=r(v9e," \u2014 "),aX=n(v9e,"A",{href:!0});var Kmt=s(aX);iJo=r(Kmt,"SEWForCTC"),Kmt.forEach(t),dJo=r(v9e," (SEW model)"),v9e.forEach(t),cJo=i(vo),EF=n(vo,"LI",{});var F9e=s(EF);kpe=n(F9e,"STRONG",{});var Zmt=s(kpe);fJo=r(Zmt,"sew-d"),Zmt.forEach(t),mJo=r(F9e," \u2014 "),nX=n(F9e,"A",{href:!0});var egt=s(nX);gJo=r(egt,"SEWDForCTC"),egt.forEach(t),hJo=r(F9e," (SEW-D model)"),F9e.forEach(t),pJo=i(vo),CF=n(vo,"LI",{});var T9e=s(CF);Spe=n(T9e,"STRONG",{});var ogt=s(Spe);uJo=r(ogt,"unispeech"),ogt.forEach(t),_Jo=r(T9e," \u2014 "),sX=n(T9e,"A",{href:!0});var rgt=s(sX);bJo=r(rgt,"UniSpeechForCTC"),rgt.forEach(t),vJo=r(T9e," (UniSpeech model)"),T9e.forEach(t),FJo=i(vo),wF=n(vo,"LI",{});var M9e=s(wF);Rpe=n(M9e,"STRONG",{});var tgt=s(Rpe);TJo=r(tgt,"unispeech-sat"),tgt.forEach(t),MJo=r(M9e," \u2014 "),lX=n(M9e,"A",{href:!0});var agt=s(lX);EJo=r(agt,"UniSpeechSatForCTC"),agt.forEach(t),CJo=r(M9e," (UniSpeechSat model)"),M9e.forEach(t),wJo=i(vo),AF=n(vo,"LI",{});var E9e=s(AF);Bpe=n(E9e,"STRONG",{});var ngt=s(Bpe);AJo=r(ngt,"wav2vec2"),ngt.forEach(t),yJo=r(E9e," \u2014 "),iX=n(E9e,"A",{href:!0});var sgt=s(iX);LJo=r(sgt,"Wav2Vec2ForCTC"),sgt.forEach(t),xJo=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),$Jo=i(vo),yF=n(vo,"LI",{});var C9e=s(yF);Ppe=n(C9e,"STRONG",{});var lgt=s(Ppe);kJo=r(lgt,"wavlm"),lgt.forEach(t),SJo=r(C9e," \u2014 "),dX=n(C9e,"A",{href:!0});var igt=s(dX);RJo=r(igt,"WavLMForCTC"),igt.forEach(t),BJo=r(C9e," (WavLM model)"),C9e.forEach(t),vo.forEach(t),PJo=i(ha),LF=n(ha,"P",{});var w9e=s(LF);IJo=r(w9e,"The model is set in evaluation mode by default using "),Ipe=n(w9e,"CODE",{});var dgt=s(Ipe);qJo=r(dgt,"model.eval()"),dgt.forEach(t),NJo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(w9e,"CODE",{});var cgt=s(qpe);jJo=r(cgt,"model.train()"),cgt.forEach(t),w9e.forEach(t),DJo=i(ha),T(xF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),MIe=i(f),pd=n(f,"H2",{class:!0});var ANe=s(pd);$F=n(ANe,"A",{id:!0,class:!0,href:!0});var fgt=s($F);Npe=n(fgt,"SPAN",{});var mgt=s(Npe);T(Qy.$$.fragment,mgt),mgt.forEach(t),fgt.forEach(t),GJo=i(ANe),jpe=n(ANe,"SPAN",{});var ggt=s(jpe);OJo=r(ggt,"AutoModelForSpeechSeq2Seq"),ggt.forEach(t),ANe.forEach(t),EIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Wy.$$.fragment,rl),VJo=i(rl),ud=n(rl,"P",{});var BK=s(ud);XJo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cX=n(BK,"A",{href:!0});var hgt=s(cX);zJo=r(hgt,"from_pretrained()"),hgt.forEach(t),QJo=r(BK," class method or the "),fX=n(BK,"A",{href:!0});var pgt=s(fX);WJo=r(pgt,"from_config()"),pgt.forEach(t),HJo=r(BK,` class
method.`),BK.forEach(t),UJo=i(rl),Hy=n(rl,"P",{});var yNe=s(Hy);JJo=r(yNe,"This class cannot be instantiated directly using "),Dpe=n(yNe,"CODE",{});var ugt=s(Dpe);YJo=r(ugt,"__init__()"),ugt.forEach(t),KJo=r(yNe," (throws an error)."),yNe.forEach(t),ZJo=i(rl),bt=n(rl,"DIV",{class:!0});var $w=s(bt);T(Uy.$$.fragment,$w),eYo=i($w),Gpe=n($w,"P",{});var _gt=s(Gpe);oYo=r(_gt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_gt.forEach(t),rYo=i($w),_d=n($w,"P",{});var PK=s(_d);tYo=r(PK,`Note:
Loading a model from its configuration file does `),Ope=n(PK,"STRONG",{});var bgt=s(Ope);aYo=r(bgt,"not"),bgt.forEach(t),nYo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(PK,"A",{href:!0});var vgt=s(mX);sYo=r(vgt,"from_pretrained()"),vgt.forEach(t),lYo=r(PK," to load the model weights."),PK.forEach(t),iYo=i($w),T(kF.$$.fragment,$w),$w.forEach(t),dYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Jy.$$.fragment,pa),cYo=i(pa),Vpe=n(pa,"P",{});var Fgt=s(Vpe);fYo=r(Fgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fgt.forEach(t),mYo=i(pa),Va=n(pa,"P",{});var kw=s(Va);gYo=r(kw,"The model class to instantiate is selected based on the "),Xpe=n(kw,"CODE",{});var Tgt=s(Xpe);hYo=r(Tgt,"model_type"),Tgt.forEach(t),pYo=r(kw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(kw,"CODE",{});var Mgt=s(zpe);uYo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),_Yo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(kw,"CODE",{});var Egt=s(Qpe);bYo=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),vYo=r(kw,":"),kw.forEach(t),FYo=i(pa),Yy=n(pa,"UL",{});var LNe=s(Yy);SF=n(LNe,"LI",{});var A9e=s(SF);Wpe=n(A9e,"STRONG",{});var Cgt=s(Wpe);TYo=r(Cgt,"speech-encoder-decoder"),Cgt.forEach(t),MYo=r(A9e," \u2014 "),gX=n(A9e,"A",{href:!0});var wgt=s(gX);EYo=r(wgt,"SpeechEncoderDecoderModel"),wgt.forEach(t),CYo=r(A9e," (Speech Encoder decoder model)"),A9e.forEach(t),wYo=i(LNe),RF=n(LNe,"LI",{});var y9e=s(RF);Hpe=n(y9e,"STRONG",{});var Agt=s(Hpe);AYo=r(Agt,"speech_to_text"),Agt.forEach(t),yYo=r(y9e," \u2014 "),hX=n(y9e,"A",{href:!0});var ygt=s(hX);LYo=r(ygt,"Speech2TextForConditionalGeneration"),ygt.forEach(t),xYo=r(y9e," (Speech2Text model)"),y9e.forEach(t),LNe.forEach(t),$Yo=i(pa),BF=n(pa,"P",{});var L9e=s(BF);kYo=r(L9e,"The model is set in evaluation mode by default using "),Upe=n(L9e,"CODE",{});var Lgt=s(Upe);SYo=r(Lgt,"model.eval()"),Lgt.forEach(t),RYo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(L9e,"CODE",{});var xgt=s(Jpe);BYo=r(xgt,"model.train()"),xgt.forEach(t),L9e.forEach(t),PYo=i(pa),T(PF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),CIe=i(f),bd=n(f,"H2",{class:!0});var xNe=s(bd);IF=n(xNe,"A",{id:!0,class:!0,href:!0});var $gt=s(IF);Ype=n($gt,"SPAN",{});var kgt=s(Ype);T(Ky.$$.fragment,kgt),kgt.forEach(t),$gt.forEach(t),IYo=i(xNe),Kpe=n(xNe,"SPAN",{});var Sgt=s(Kpe);qYo=r(Sgt,"AutoModelForAudioXVector"),Sgt.forEach(t),xNe.forEach(t),wIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(Zy.$$.fragment,tl),NYo=i(tl),vd=n(tl,"P",{});var IK=s(vd);jYo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pX=n(IK,"A",{href:!0});var Rgt=s(pX);DYo=r(Rgt,"from_pretrained()"),Rgt.forEach(t),GYo=r(IK," class method or the "),uX=n(IK,"A",{href:!0});var Bgt=s(uX);OYo=r(Bgt,"from_config()"),Bgt.forEach(t),VYo=r(IK,` class
method.`),IK.forEach(t),XYo=i(tl),eL=n(tl,"P",{});var $Ne=s(eL);zYo=r($Ne,"This class cannot be instantiated directly using "),Zpe=n($Ne,"CODE",{});var Pgt=s(Zpe);QYo=r(Pgt,"__init__()"),Pgt.forEach(t),WYo=r($Ne," (throws an error)."),$Ne.forEach(t),HYo=i(tl),vt=n(tl,"DIV",{class:!0});var Sw=s(vt);T(oL.$$.fragment,Sw),UYo=i(Sw),eue=n(Sw,"P",{});var Igt=s(eue);JYo=r(Igt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Igt.forEach(t),YYo=i(Sw),Fd=n(Sw,"P",{});var qK=s(Fd);KYo=r(qK,`Note:
Loading a model from its configuration file does `),oue=n(qK,"STRONG",{});var qgt=s(oue);ZYo=r(qgt,"not"),qgt.forEach(t),eKo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(qK,"A",{href:!0});var Ngt=s(_X);oKo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),rKo=r(qK," to load the model weights."),qK.forEach(t),tKo=i(Sw),T(qF.$$.fragment,Sw),Sw.forEach(t),aKo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(rL.$$.fragment,ua),nKo=i(ua),rue=n(ua,"P",{});var jgt=s(rue);sKo=r(jgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jgt.forEach(t),lKo=i(ua),Xa=n(ua,"P",{});var Rw=s(Xa);iKo=r(Rw,"The model class to instantiate is selected based on the "),tue=n(Rw,"CODE",{});var Dgt=s(tue);dKo=r(Dgt,"model_type"),Dgt.forEach(t),cKo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),aue=n(Rw,"CODE",{});var Ggt=s(aue);fKo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),mKo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(Rw,"CODE",{});var Ogt=s(nue);gKo=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),hKo=r(Rw,":"),Rw.forEach(t),pKo=i(ua),za=n(ua,"UL",{});var Bw=s(za);NF=n(Bw,"LI",{});var x9e=s(NF);sue=n(x9e,"STRONG",{});var Vgt=s(sue);uKo=r(Vgt,"data2vec-audio"),Vgt.forEach(t),_Ko=r(x9e," \u2014 "),bX=n(x9e,"A",{href:!0});var Xgt=s(bX);bKo=r(Xgt,"Data2VecAudioForXVector"),Xgt.forEach(t),vKo=r(x9e," (Data2VecAudio model)"),x9e.forEach(t),FKo=i(Bw),jF=n(Bw,"LI",{});var $9e=s(jF);lue=n($9e,"STRONG",{});var zgt=s(lue);TKo=r(zgt,"unispeech-sat"),zgt.forEach(t),MKo=r($9e," \u2014 "),vX=n($9e,"A",{href:!0});var Qgt=s(vX);EKo=r(Qgt,"UniSpeechSatForXVector"),Qgt.forEach(t),CKo=r($9e," (UniSpeechSat model)"),$9e.forEach(t),wKo=i(Bw),DF=n(Bw,"LI",{});var k9e=s(DF);iue=n(k9e,"STRONG",{});var Wgt=s(iue);AKo=r(Wgt,"wav2vec2"),Wgt.forEach(t),yKo=r(k9e," \u2014 "),FX=n(k9e,"A",{href:!0});var Hgt=s(FX);LKo=r(Hgt,"Wav2Vec2ForXVector"),Hgt.forEach(t),xKo=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),$Ko=i(Bw),GF=n(Bw,"LI",{});var S9e=s(GF);due=n(S9e,"STRONG",{});var Ugt=s(due);kKo=r(Ugt,"wavlm"),Ugt.forEach(t),SKo=r(S9e," \u2014 "),TX=n(S9e,"A",{href:!0});var Jgt=s(TX);RKo=r(Jgt,"WavLMForXVector"),Jgt.forEach(t),BKo=r(S9e," (WavLM model)"),S9e.forEach(t),Bw.forEach(t),PKo=i(ua),OF=n(ua,"P",{});var R9e=s(OF);IKo=r(R9e,"The model is set in evaluation mode by default using "),cue=n(R9e,"CODE",{});var Ygt=s(cue);qKo=r(Ygt,"model.eval()"),Ygt.forEach(t),NKo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(R9e,"CODE",{});var Kgt=s(fue);jKo=r(Kgt,"model.train()"),Kgt.forEach(t),R9e.forEach(t),DKo=i(ua),T(VF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),AIe=i(f),Td=n(f,"H2",{class:!0});var kNe=s(Td);XF=n(kNe,"A",{id:!0,class:!0,href:!0});var Zgt=s(XF);mue=n(Zgt,"SPAN",{});var eht=s(mue);T(tL.$$.fragment,eht),eht.forEach(t),Zgt.forEach(t),GKo=i(kNe),gue=n(kNe,"SPAN",{});var oht=s(gue);OKo=r(oht,"AutoModelForMaskedImageModeling"),oht.forEach(t),kNe.forEach(t),yIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(aL.$$.fragment,al),VKo=i(al),Md=n(al,"P",{});var NK=s(Md);XKo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MX=n(NK,"A",{href:!0});var rht=s(MX);zKo=r(rht,"from_pretrained()"),rht.forEach(t),QKo=r(NK," class method or the "),EX=n(NK,"A",{href:!0});var tht=s(EX);WKo=r(tht,"from_config()"),tht.forEach(t),HKo=r(NK,` class
method.`),NK.forEach(t),UKo=i(al),nL=n(al,"P",{});var SNe=s(nL);JKo=r(SNe,"This class cannot be instantiated directly using "),hue=n(SNe,"CODE",{});var aht=s(hue);YKo=r(aht,"__init__()"),aht.forEach(t),KKo=r(SNe," (throws an error)."),SNe.forEach(t),ZKo=i(al),Ft=n(al,"DIV",{class:!0});var Pw=s(Ft);T(sL.$$.fragment,Pw),eZo=i(Pw),pue=n(Pw,"P",{});var nht=s(pue);oZo=r(nht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),nht.forEach(t),rZo=i(Pw),Ed=n(Pw,"P",{});var jK=s(Ed);tZo=r(jK,`Note:
Loading a model from its configuration file does `),uue=n(jK,"STRONG",{});var sht=s(uue);aZo=r(sht,"not"),sht.forEach(t),nZo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(jK,"A",{href:!0});var lht=s(CX);sZo=r(lht,"from_pretrained()"),lht.forEach(t),lZo=r(jK," to load the model weights."),jK.forEach(t),iZo=i(Pw),T(zF.$$.fragment,Pw),Pw.forEach(t),dZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(lL.$$.fragment,_a),cZo=i(_a),_ue=n(_a,"P",{});var iht=s(_ue);fZo=r(iht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iht.forEach(t),mZo=i(_a),Qa=n(_a,"P",{});var Iw=s(Qa);gZo=r(Iw,"The model class to instantiate is selected based on the "),bue=n(Iw,"CODE",{});var dht=s(bue);hZo=r(dht,"model_type"),dht.forEach(t),pZo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),vue=n(Iw,"CODE",{});var cht=s(vue);uZo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),_Zo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(Iw,"CODE",{});var fht=s(Fue);bZo=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),vZo=r(Iw,":"),Iw.forEach(t),FZo=i(_a),Cd=n(_a,"UL",{});var DK=s(Cd);QF=n(DK,"LI",{});var B9e=s(QF);Tue=n(B9e,"STRONG",{});var mht=s(Tue);TZo=r(mht,"deit"),mht.forEach(t),MZo=r(B9e," \u2014 "),wX=n(B9e,"A",{href:!0});var ght=s(wX);EZo=r(ght,"DeiTForMaskedImageModeling"),ght.forEach(t),CZo=r(B9e," (DeiT model)"),B9e.forEach(t),wZo=i(DK),WF=n(DK,"LI",{});var P9e=s(WF);Mue=n(P9e,"STRONG",{});var hht=s(Mue);AZo=r(hht,"swin"),hht.forEach(t),yZo=r(P9e," \u2014 "),AX=n(P9e,"A",{href:!0});var pht=s(AX);LZo=r(pht,"SwinForMaskedImageModeling"),pht.forEach(t),xZo=r(P9e," (Swin model)"),P9e.forEach(t),$Zo=i(DK),HF=n(DK,"LI",{});var I9e=s(HF);Eue=n(I9e,"STRONG",{});var uht=s(Eue);kZo=r(uht,"vit"),uht.forEach(t),SZo=r(I9e," \u2014 "),yX=n(I9e,"A",{href:!0});var _ht=s(yX);RZo=r(_ht,"ViTForMaskedImageModeling"),_ht.forEach(t),BZo=r(I9e," (ViT model)"),I9e.forEach(t),DK.forEach(t),PZo=i(_a),UF=n(_a,"P",{});var q9e=s(UF);IZo=r(q9e,"The model is set in evaluation mode by default using "),Cue=n(q9e,"CODE",{});var bht=s(Cue);qZo=r(bht,"model.eval()"),bht.forEach(t),NZo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(q9e,"CODE",{});var vht=s(wue);jZo=r(vht,"model.train()"),vht.forEach(t),q9e.forEach(t),DZo=i(_a),T(JF.$$.fragment,_a),_a.forEach(t),al.forEach(t),LIe=i(f),wd=n(f,"H2",{class:!0});var RNe=s(wd);YF=n(RNe,"A",{id:!0,class:!0,href:!0});var Fht=s(YF);Aue=n(Fht,"SPAN",{});var Tht=s(Aue);T(iL.$$.fragment,Tht),Tht.forEach(t),Fht.forEach(t),GZo=i(RNe),yue=n(RNe,"SPAN",{});var Mht=s(yue);OZo=r(Mht,"AutoModelForObjectDetection"),Mht.forEach(t),RNe.forEach(t),xIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(dL.$$.fragment,nl),VZo=i(nl),Ad=n(nl,"P",{});var GK=s(Ad);XZo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LX=n(GK,"A",{href:!0});var Eht=s(LX);zZo=r(Eht,"from_pretrained()"),Eht.forEach(t),QZo=r(GK," class method or the "),xX=n(GK,"A",{href:!0});var Cht=s(xX);WZo=r(Cht,"from_config()"),Cht.forEach(t),HZo=r(GK,` class
method.`),GK.forEach(t),UZo=i(nl),cL=n(nl,"P",{});var BNe=s(cL);JZo=r(BNe,"This class cannot be instantiated directly using "),Lue=n(BNe,"CODE",{});var wht=s(Lue);YZo=r(wht,"__init__()"),wht.forEach(t),KZo=r(BNe," (throws an error)."),BNe.forEach(t),ZZo=i(nl),Tt=n(nl,"DIV",{class:!0});var qw=s(Tt);T(fL.$$.fragment,qw),eer=i(qw),xue=n(qw,"P",{});var Aht=s(xue);oer=r(Aht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Aht.forEach(t),rer=i(qw),yd=n(qw,"P",{});var OK=s(yd);ter=r(OK,`Note:
Loading a model from its configuration file does `),$ue=n(OK,"STRONG",{});var yht=s($ue);aer=r(yht,"not"),yht.forEach(t),ner=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(OK,"A",{href:!0});var Lht=s($X);ser=r(Lht,"from_pretrained()"),Lht.forEach(t),ler=r(OK," to load the model weights."),OK.forEach(t),ier=i(qw),T(KF.$$.fragment,qw),qw.forEach(t),der=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(mL.$$.fragment,ba),cer=i(ba),kue=n(ba,"P",{});var xht=s(kue);fer=r(xht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),xht.forEach(t),mer=i(ba),Wa=n(ba,"P",{});var Nw=s(Wa);ger=r(Nw,"The model class to instantiate is selected based on the "),Sue=n(Nw,"CODE",{});var $ht=s(Sue);her=r($ht,"model_type"),$ht.forEach(t),per=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Rue=n(Nw,"CODE",{});var kht=s(Rue);uer=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),_er=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(Nw,"CODE",{});var Sht=s(Bue);ber=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),ver=r(Nw,":"),Nw.forEach(t),Fer=i(ba),gL=n(ba,"UL",{});var PNe=s(gL);ZF=n(PNe,"LI",{});var N9e=s(ZF);Pue=n(N9e,"STRONG",{});var Rht=s(Pue);Ter=r(Rht,"detr"),Rht.forEach(t),Mer=r(N9e," \u2014 "),kX=n(N9e,"A",{href:!0});var Bht=s(kX);Eer=r(Bht,"DetrForObjectDetection"),Bht.forEach(t),Cer=r(N9e," (DETR model)"),N9e.forEach(t),wer=i(PNe),e0=n(PNe,"LI",{});var j9e=s(e0);Iue=n(j9e,"STRONG",{});var Pht=s(Iue);Aer=r(Pht,"yolos"),Pht.forEach(t),yer=r(j9e," \u2014 "),SX=n(j9e,"A",{href:!0});var Iht=s(SX);Ler=r(Iht,"YolosForObjectDetection"),Iht.forEach(t),xer=r(j9e," (YOLOS model)"),j9e.forEach(t),PNe.forEach(t),$er=i(ba),o0=n(ba,"P",{});var D9e=s(o0);ker=r(D9e,"The model is set in evaluation mode by default using "),que=n(D9e,"CODE",{});var qht=s(que);Ser=r(qht,"model.eval()"),qht.forEach(t),Rer=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(D9e,"CODE",{});var Nht=s(Nue);Ber=r(Nht,"model.train()"),Nht.forEach(t),D9e.forEach(t),Per=i(ba),T(r0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),$Ie=i(f),Ld=n(f,"H2",{class:!0});var INe=s(Ld);t0=n(INe,"A",{id:!0,class:!0,href:!0});var jht=s(t0);jue=n(jht,"SPAN",{});var Dht=s(jue);T(hL.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),Ier=i(INe),Due=n(INe,"SPAN",{});var Ght=s(Due);qer=r(Ght,"AutoModelForImageSegmentation"),Ght.forEach(t),INe.forEach(t),kIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(pL.$$.fragment,sl),Ner=i(sl),xd=n(sl,"P",{});var VK=s(xd);jer=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RX=n(VK,"A",{href:!0});var Oht=s(RX);Der=r(Oht,"from_pretrained()"),Oht.forEach(t),Ger=r(VK," class method or the "),BX=n(VK,"A",{href:!0});var Vht=s(BX);Oer=r(Vht,"from_config()"),Vht.forEach(t),Ver=r(VK,` class
method.`),VK.forEach(t),Xer=i(sl),uL=n(sl,"P",{});var qNe=s(uL);zer=r(qNe,"This class cannot be instantiated directly using "),Gue=n(qNe,"CODE",{});var Xht=s(Gue);Qer=r(Xht,"__init__()"),Xht.forEach(t),Wer=r(qNe," (throws an error)."),qNe.forEach(t),Her=i(sl),Mt=n(sl,"DIV",{class:!0});var jw=s(Mt);T(_L.$$.fragment,jw),Uer=i(jw),Oue=n(jw,"P",{});var zht=s(Oue);Jer=r(zht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zht.forEach(t),Yer=i(jw),$d=n(jw,"P",{});var XK=s($d);Ker=r(XK,`Note:
Loading a model from its configuration file does `),Vue=n(XK,"STRONG",{});var Qht=s(Vue);Zer=r(Qht,"not"),Qht.forEach(t),eor=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(XK,"A",{href:!0});var Wht=s(PX);oor=r(Wht,"from_pretrained()"),Wht.forEach(t),ror=r(XK," to load the model weights."),XK.forEach(t),tor=i(jw),T(a0.$$.fragment,jw),jw.forEach(t),aor=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(bL.$$.fragment,va),nor=i(va),Xue=n(va,"P",{});var Hht=s(Xue);sor=r(Hht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hht.forEach(t),lor=i(va),Ha=n(va,"P",{});var Dw=s(Ha);ior=r(Dw,"The model class to instantiate is selected based on the "),zue=n(Dw,"CODE",{});var Uht=s(zue);dor=r(Uht,"model_type"),Uht.forEach(t),cor=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Que=n(Dw,"CODE",{});var Jht=s(Que);mor=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),gor=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(Dw,"CODE",{});var Yht=s(Wue);hor=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),por=r(Dw,":"),Dw.forEach(t),uor=i(va),Hue=n(va,"UL",{});var Kht=s(Hue);n0=n(Kht,"LI",{});var G9e=s(n0);Uue=n(G9e,"STRONG",{});var Zht=s(Uue);_or=r(Zht,"detr"),Zht.forEach(t),bor=r(G9e," \u2014 "),IX=n(G9e,"A",{href:!0});var ept=s(IX);vor=r(ept,"DetrForSegmentation"),ept.forEach(t),For=r(G9e," (DETR model)"),G9e.forEach(t),Kht.forEach(t),Tor=i(va),s0=n(va,"P",{});var O9e=s(s0);Mor=r(O9e,"The model is set in evaluation mode by default using "),Jue=n(O9e,"CODE",{});var opt=s(Jue);Eor=r(opt,"model.eval()"),opt.forEach(t),Cor=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(O9e,"CODE",{});var rpt=s(Yue);wor=r(rpt,"model.train()"),rpt.forEach(t),O9e.forEach(t),Aor=i(va),T(l0.$$.fragment,va),va.forEach(t),sl.forEach(t),SIe=i(f),kd=n(f,"H2",{class:!0});var NNe=s(kd);i0=n(NNe,"A",{id:!0,class:!0,href:!0});var tpt=s(i0);Kue=n(tpt,"SPAN",{});var apt=s(Kue);T(vL.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),yor=i(NNe),Zue=n(NNe,"SPAN",{});var npt=s(Zue);Lor=r(npt,"AutoModelForSemanticSegmentation"),npt.forEach(t),NNe.forEach(t),RIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(FL.$$.fragment,ll),xor=i(ll),Sd=n(ll,"P",{});var zK=s(Sd);$or=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),qX=n(zK,"A",{href:!0});var spt=s(qX);kor=r(spt,"from_pretrained()"),spt.forEach(t),Sor=r(zK," class method or the "),NX=n(zK,"A",{href:!0});var lpt=s(NX);Ror=r(lpt,"from_config()"),lpt.forEach(t),Bor=r(zK,` class
method.`),zK.forEach(t),Por=i(ll),TL=n(ll,"P",{});var jNe=s(TL);Ior=r(jNe,"This class cannot be instantiated directly using "),e_e=n(jNe,"CODE",{});var ipt=s(e_e);qor=r(ipt,"__init__()"),ipt.forEach(t),Nor=r(jNe," (throws an error)."),jNe.forEach(t),jor=i(ll),Et=n(ll,"DIV",{class:!0});var Gw=s(Et);T(ML.$$.fragment,Gw),Dor=i(Gw),o_e=n(Gw,"P",{});var dpt=s(o_e);Gor=r(dpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dpt.forEach(t),Oor=i(Gw),Rd=n(Gw,"P",{});var QK=s(Rd);Vor=r(QK,`Note:
Loading a model from its configuration file does `),r_e=n(QK,"STRONG",{});var cpt=s(r_e);Xor=r(cpt,"not"),cpt.forEach(t),zor=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(QK,"A",{href:!0});var fpt=s(jX);Qor=r(fpt,"from_pretrained()"),fpt.forEach(t),Wor=r(QK," to load the model weights."),QK.forEach(t),Hor=i(Gw),T(d0.$$.fragment,Gw),Gw.forEach(t),Uor=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(EL.$$.fragment,Fa),Jor=i(Fa),t_e=n(Fa,"P",{});var mpt=s(t_e);Yor=r(mpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mpt.forEach(t),Kor=i(Fa),Ua=n(Fa,"P",{});var Ow=s(Ua);Zor=r(Ow,"The model class to instantiate is selected based on the "),a_e=n(Ow,"CODE",{});var gpt=s(a_e);err=r(gpt,"model_type"),gpt.forEach(t),orr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),n_e=n(Ow,"CODE",{});var hpt=s(n_e);rrr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),trr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(Ow,"CODE",{});var ppt=s(s_e);arr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),nrr=r(Ow,":"),Ow.forEach(t),srr=i(Fa),Ja=n(Fa,"UL",{});var Vw=s(Ja);c0=n(Vw,"LI",{});var V9e=s(c0);l_e=n(V9e,"STRONG",{});var upt=s(l_e);lrr=r(upt,"beit"),upt.forEach(t),irr=r(V9e," \u2014 "),DX=n(V9e,"A",{href:!0});var _pt=s(DX);drr=r(_pt,"BeitForSemanticSegmentation"),_pt.forEach(t),crr=r(V9e," (BEiT model)"),V9e.forEach(t),frr=i(Vw),f0=n(Vw,"LI",{});var X9e=s(f0);i_e=n(X9e,"STRONG",{});var bpt=s(i_e);mrr=r(bpt,"data2vec-vision"),bpt.forEach(t),grr=r(X9e," \u2014 "),GX=n(X9e,"A",{href:!0});var vpt=s(GX);hrr=r(vpt,"Data2VecVisionForSemanticSegmentation"),vpt.forEach(t),prr=r(X9e," (Data2VecVision model)"),X9e.forEach(t),urr=i(Vw),m0=n(Vw,"LI",{});var z9e=s(m0);d_e=n(z9e,"STRONG",{});var Fpt=s(d_e);_rr=r(Fpt,"dpt"),Fpt.forEach(t),brr=r(z9e," \u2014 "),OX=n(z9e,"A",{href:!0});var Tpt=s(OX);vrr=r(Tpt,"DPTForSemanticSegmentation"),Tpt.forEach(t),Frr=r(z9e," (DPT model)"),z9e.forEach(t),Trr=i(Vw),g0=n(Vw,"LI",{});var Q9e=s(g0);c_e=n(Q9e,"STRONG",{});var Mpt=s(c_e);Mrr=r(Mpt,"segformer"),Mpt.forEach(t),Err=r(Q9e," \u2014 "),VX=n(Q9e,"A",{href:!0});var Ept=s(VX);Crr=r(Ept,"SegformerForSemanticSegmentation"),Ept.forEach(t),wrr=r(Q9e," (SegFormer model)"),Q9e.forEach(t),Vw.forEach(t),Arr=i(Fa),h0=n(Fa,"P",{});var W9e=s(h0);yrr=r(W9e,"The model is set in evaluation mode by default using "),f_e=n(W9e,"CODE",{});var Cpt=s(f_e);Lrr=r(Cpt,"model.eval()"),Cpt.forEach(t),xrr=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n(W9e,"CODE",{});var wpt=s(m_e);$rr=r(wpt,"model.train()"),wpt.forEach(t),W9e.forEach(t),krr=i(Fa),T(p0.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),BIe=i(f),Bd=n(f,"H2",{class:!0});var DNe=s(Bd);u0=n(DNe,"A",{id:!0,class:!0,href:!0});var Apt=s(u0);g_e=n(Apt,"SPAN",{});var ypt=s(g_e);T(CL.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),Srr=i(DNe),h_e=n(DNe,"SPAN",{});var Lpt=s(h_e);Rrr=r(Lpt,"AutoModelForInstanceSegmentation"),Lpt.forEach(t),DNe.forEach(t),PIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(wL.$$.fragment,il),Brr=i(il),Pd=n(il,"P",{});var WK=s(Pd);Prr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XX=n(WK,"A",{href:!0});var xpt=s(XX);Irr=r(xpt,"from_pretrained()"),xpt.forEach(t),qrr=r(WK," class method or the "),zX=n(WK,"A",{href:!0});var $pt=s(zX);Nrr=r($pt,"from_config()"),$pt.forEach(t),jrr=r(WK,` class
method.`),WK.forEach(t),Drr=i(il),AL=n(il,"P",{});var GNe=s(AL);Grr=r(GNe,"This class cannot be instantiated directly using "),p_e=n(GNe,"CODE",{});var kpt=s(p_e);Orr=r(kpt,"__init__()"),kpt.forEach(t),Vrr=r(GNe," (throws an error)."),GNe.forEach(t),Xrr=i(il),Ct=n(il,"DIV",{class:!0});var Xw=s(Ct);T(yL.$$.fragment,Xw),zrr=i(Xw),u_e=n(Xw,"P",{});var Spt=s(u_e);Qrr=r(Spt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Spt.forEach(t),Wrr=i(Xw),Id=n(Xw,"P",{});var HK=s(Id);Hrr=r(HK,`Note:
Loading a model from its configuration file does `),__e=n(HK,"STRONG",{});var Rpt=s(__e);Urr=r(Rpt,"not"),Rpt.forEach(t),Jrr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(HK,"A",{href:!0});var Bpt=s(QX);Yrr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),Krr=r(HK," to load the model weights."),HK.forEach(t),Zrr=i(Xw),T(_0.$$.fragment,Xw),Xw.forEach(t),etr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(LL.$$.fragment,Ta),otr=i(Ta),b_e=n(Ta,"P",{});var Ppt=s(b_e);rtr=r(Ppt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ppt.forEach(t),ttr=i(Ta),Ya=n(Ta,"P",{});var zw=s(Ya);atr=r(zw,"The model class to instantiate is selected based on the "),v_e=n(zw,"CODE",{});var Ipt=s(v_e);ntr=r(Ipt,"model_type"),Ipt.forEach(t),str=r(zw,` property of the config object (either
passed as an argument or loaded from `),F_e=n(zw,"CODE",{});var qpt=s(F_e);ltr=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),itr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(zw,"CODE",{});var Npt=s(T_e);dtr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),ctr=r(zw,":"),zw.forEach(t),ftr=i(Ta),M_e=n(Ta,"UL",{});var jpt=s(M_e);b0=n(jpt,"LI",{});var H9e=s(b0);E_e=n(H9e,"STRONG",{});var Dpt=s(E_e);mtr=r(Dpt,"maskformer"),Dpt.forEach(t),gtr=r(H9e," \u2014 "),WX=n(H9e,"A",{href:!0});var Gpt=s(WX);htr=r(Gpt,"MaskFormerForInstanceSegmentation"),Gpt.forEach(t),ptr=r(H9e," (MaskFormer model)"),H9e.forEach(t),jpt.forEach(t),utr=i(Ta),v0=n(Ta,"P",{});var U9e=s(v0);_tr=r(U9e,"The model is set in evaluation mode by default using "),C_e=n(U9e,"CODE",{});var Opt=s(C_e);btr=r(Opt,"model.eval()"),Opt.forEach(t),vtr=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(U9e,"CODE",{});var Vpt=s(w_e);Ftr=r(Vpt,"model.train()"),Vpt.forEach(t),U9e.forEach(t),Ttr=i(Ta),T(F0.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),IIe=i(f),qd=n(f,"H2",{class:!0});var ONe=s(qd);T0=n(ONe,"A",{id:!0,class:!0,href:!0});var Xpt=s(T0);A_e=n(Xpt,"SPAN",{});var zpt=s(A_e);T(xL.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),Mtr=i(ONe),y_e=n(ONe,"SPAN",{});var Qpt=s(y_e);Etr=r(Qpt,"TFAutoModel"),Qpt.forEach(t),ONe.forEach(t),qIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T($L.$$.fragment,dl),Ctr=i(dl),Nd=n(dl,"P",{});var UK=s(Nd);wtr=r(UK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HX=n(UK,"A",{href:!0});var Wpt=s(HX);Atr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),ytr=r(UK," class method or the "),UX=n(UK,"A",{href:!0});var Hpt=s(UX);Ltr=r(Hpt,"from_config()"),Hpt.forEach(t),xtr=r(UK,` class
method.`),UK.forEach(t),$tr=i(dl),kL=n(dl,"P",{});var VNe=s(kL);ktr=r(VNe,"This class cannot be instantiated directly using "),L_e=n(VNe,"CODE",{});var Upt=s(L_e);Str=r(Upt,"__init__()"),Upt.forEach(t),Rtr=r(VNe," (throws an error)."),VNe.forEach(t),Btr=i(dl),wt=n(dl,"DIV",{class:!0});var Qw=s(wt);T(SL.$$.fragment,Qw),Ptr=i(Qw),x_e=n(Qw,"P",{});var Jpt=s(x_e);Itr=r(Jpt,"Instantiates one of the base model classes of the library from a configuration."),Jpt.forEach(t),qtr=i(Qw),jd=n(Qw,"P",{});var JK=s(jd);Ntr=r(JK,`Note:
Loading a model from its configuration file does `),$_e=n(JK,"STRONG",{});var Ypt=s($_e);jtr=r(Ypt,"not"),Ypt.forEach(t),Dtr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(JK,"A",{href:!0});var Kpt=s(JX);Gtr=r(Kpt,"from_pretrained()"),Kpt.forEach(t),Otr=r(JK," to load the model weights."),JK.forEach(t),Vtr=i(Qw),T(M0.$$.fragment,Qw),Qw.forEach(t),Xtr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(RL.$$.fragment,cl),ztr=i(cl),k_e=n(cl,"P",{});var Zpt=s(k_e);Qtr=r(Zpt,"Instantiate one of the base model classes of the library from a pretrained model."),Zpt.forEach(t),Wtr=i(cl),Ka=n(cl,"P",{});var Ww=s(Ka);Htr=r(Ww,"The model class to instantiate is selected based on the "),S_e=n(Ww,"CODE",{});var eut=s(S_e);Utr=r(eut,"model_type"),eut.forEach(t),Jtr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),R_e=n(Ww,"CODE",{});var out=s(R_e);Ytr=r(out,"pretrained_model_name_or_path"),out.forEach(t),Ktr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(Ww,"CODE",{});var rut=s(B_e);Ztr=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),ear=r(Ww,":"),Ww.forEach(t),oar=i(cl),N=n(cl,"UL",{});var D=s(N);E0=n(D,"LI",{});var J9e=s(E0);P_e=n(J9e,"STRONG",{});var tut=s(P_e);rar=r(tut,"albert"),tut.forEach(t),tar=r(J9e," \u2014 "),YX=n(J9e,"A",{href:!0});var aut=s(YX);aar=r(aut,"TFAlbertModel"),aut.forEach(t),nar=r(J9e," (ALBERT model)"),J9e.forEach(t),sar=i(D),C0=n(D,"LI",{});var Y9e=s(C0);I_e=n(Y9e,"STRONG",{});var nut=s(I_e);lar=r(nut,"bart"),nut.forEach(t),iar=r(Y9e," \u2014 "),KX=n(Y9e,"A",{href:!0});var sut=s(KX);dar=r(sut,"TFBartModel"),sut.forEach(t),car=r(Y9e," (BART model)"),Y9e.forEach(t),far=i(D),w0=n(D,"LI",{});var K9e=s(w0);q_e=n(K9e,"STRONG",{});var lut=s(q_e);mar=r(lut,"bert"),lut.forEach(t),gar=r(K9e," \u2014 "),ZX=n(K9e,"A",{href:!0});var iut=s(ZX);har=r(iut,"TFBertModel"),iut.forEach(t),par=r(K9e," (BERT model)"),K9e.forEach(t),uar=i(D),A0=n(D,"LI",{});var Z9e=s(A0);N_e=n(Z9e,"STRONG",{});var dut=s(N_e);_ar=r(dut,"blenderbot"),dut.forEach(t),bar=r(Z9e," \u2014 "),ez=n(Z9e,"A",{href:!0});var cut=s(ez);Far=r(cut,"TFBlenderbotModel"),cut.forEach(t),Tar=r(Z9e," (Blenderbot model)"),Z9e.forEach(t),Mar=i(D),y0=n(D,"LI",{});var e$e=s(y0);j_e=n(e$e,"STRONG",{});var fut=s(j_e);Ear=r(fut,"blenderbot-small"),fut.forEach(t),Car=r(e$e," \u2014 "),oz=n(e$e,"A",{href:!0});var mut=s(oz);war=r(mut,"TFBlenderbotSmallModel"),mut.forEach(t),Aar=r(e$e," (BlenderbotSmall model)"),e$e.forEach(t),yar=i(D),L0=n(D,"LI",{});var o$e=s(L0);D_e=n(o$e,"STRONG",{});var gut=s(D_e);Lar=r(gut,"camembert"),gut.forEach(t),xar=r(o$e," \u2014 "),rz=n(o$e,"A",{href:!0});var hut=s(rz);$ar=r(hut,"TFCamembertModel"),hut.forEach(t),kar=r(o$e," (CamemBERT model)"),o$e.forEach(t),Sar=i(D),x0=n(D,"LI",{});var r$e=s(x0);G_e=n(r$e,"STRONG",{});var put=s(G_e);Rar=r(put,"clip"),put.forEach(t),Bar=r(r$e," \u2014 "),tz=n(r$e,"A",{href:!0});var uut=s(tz);Par=r(uut,"TFCLIPModel"),uut.forEach(t),Iar=r(r$e," (CLIP model)"),r$e.forEach(t),qar=i(D),$0=n(D,"LI",{});var t$e=s($0);O_e=n(t$e,"STRONG",{});var _ut=s(O_e);Nar=r(_ut,"convbert"),_ut.forEach(t),jar=r(t$e," \u2014 "),az=n(t$e,"A",{href:!0});var but=s(az);Dar=r(but,"TFConvBertModel"),but.forEach(t),Gar=r(t$e," (ConvBERT model)"),t$e.forEach(t),Oar=i(D),k0=n(D,"LI",{});var a$e=s(k0);V_e=n(a$e,"STRONG",{});var vut=s(V_e);Var=r(vut,"convnext"),vut.forEach(t),Xar=r(a$e," \u2014 "),nz=n(a$e,"A",{href:!0});var Fut=s(nz);zar=r(Fut,"TFConvNextModel"),Fut.forEach(t),Qar=r(a$e," (ConvNext model)"),a$e.forEach(t),War=i(D),S0=n(D,"LI",{});var n$e=s(S0);X_e=n(n$e,"STRONG",{});var Tut=s(X_e);Har=r(Tut,"ctrl"),Tut.forEach(t),Uar=r(n$e," \u2014 "),sz=n(n$e,"A",{href:!0});var Mut=s(sz);Jar=r(Mut,"TFCTRLModel"),Mut.forEach(t),Yar=r(n$e," (CTRL model)"),n$e.forEach(t),Kar=i(D),R0=n(D,"LI",{});var s$e=s(R0);z_e=n(s$e,"STRONG",{});var Eut=s(z_e);Zar=r(Eut,"data2vec-vision"),Eut.forEach(t),enr=r(s$e," \u2014 "),lz=n(s$e,"A",{href:!0});var Cut=s(lz);onr=r(Cut,"TFData2VecVisionModel"),Cut.forEach(t),rnr=r(s$e," (Data2VecVision model)"),s$e.forEach(t),tnr=i(D),B0=n(D,"LI",{});var l$e=s(B0);Q_e=n(l$e,"STRONG",{});var wut=s(Q_e);anr=r(wut,"deberta"),wut.forEach(t),nnr=r(l$e," \u2014 "),iz=n(l$e,"A",{href:!0});var Aut=s(iz);snr=r(Aut,"TFDebertaModel"),Aut.forEach(t),lnr=r(l$e," (DeBERTa model)"),l$e.forEach(t),inr=i(D),P0=n(D,"LI",{});var i$e=s(P0);W_e=n(i$e,"STRONG",{});var yut=s(W_e);dnr=r(yut,"deberta-v2"),yut.forEach(t),cnr=r(i$e," \u2014 "),dz=n(i$e,"A",{href:!0});var Lut=s(dz);fnr=r(Lut,"TFDebertaV2Model"),Lut.forEach(t),mnr=r(i$e," (DeBERTa-v2 model)"),i$e.forEach(t),gnr=i(D),I0=n(D,"LI",{});var d$e=s(I0);H_e=n(d$e,"STRONG",{});var xut=s(H_e);hnr=r(xut,"distilbert"),xut.forEach(t),pnr=r(d$e," \u2014 "),cz=n(d$e,"A",{href:!0});var $ut=s(cz);unr=r($ut,"TFDistilBertModel"),$ut.forEach(t),_nr=r(d$e," (DistilBERT model)"),d$e.forEach(t),bnr=i(D),q0=n(D,"LI",{});var c$e=s(q0);U_e=n(c$e,"STRONG",{});var kut=s(U_e);vnr=r(kut,"dpr"),kut.forEach(t),Fnr=r(c$e," \u2014 "),fz=n(c$e,"A",{href:!0});var Sut=s(fz);Tnr=r(Sut,"TFDPRQuestionEncoder"),Sut.forEach(t),Mnr=r(c$e," (DPR model)"),c$e.forEach(t),Enr=i(D),N0=n(D,"LI",{});var f$e=s(N0);J_e=n(f$e,"STRONG",{});var Rut=s(J_e);Cnr=r(Rut,"electra"),Rut.forEach(t),wnr=r(f$e," \u2014 "),mz=n(f$e,"A",{href:!0});var But=s(mz);Anr=r(But,"TFElectraModel"),But.forEach(t),ynr=r(f$e," (ELECTRA model)"),f$e.forEach(t),Lnr=i(D),j0=n(D,"LI",{});var m$e=s(j0);Y_e=n(m$e,"STRONG",{});var Put=s(Y_e);xnr=r(Put,"flaubert"),Put.forEach(t),$nr=r(m$e," \u2014 "),gz=n(m$e,"A",{href:!0});var Iut=s(gz);knr=r(Iut,"TFFlaubertModel"),Iut.forEach(t),Snr=r(m$e," (FlauBERT model)"),m$e.forEach(t),Rnr=i(D),Bs=n(D,"LI",{});var c$=s(Bs);K_e=n(c$,"STRONG",{});var qut=s(K_e);Bnr=r(qut,"funnel"),qut.forEach(t),Pnr=r(c$," \u2014 "),hz=n(c$,"A",{href:!0});var Nut=s(hz);Inr=r(Nut,"TFFunnelModel"),Nut.forEach(t),qnr=r(c$," or "),pz=n(c$,"A",{href:!0});var jut=s(pz);Nnr=r(jut,"TFFunnelBaseModel"),jut.forEach(t),jnr=r(c$," (Funnel Transformer model)"),c$.forEach(t),Dnr=i(D),D0=n(D,"LI",{});var g$e=s(D0);Z_e=n(g$e,"STRONG",{});var Dut=s(Z_e);Gnr=r(Dut,"gpt2"),Dut.forEach(t),Onr=r(g$e," \u2014 "),uz=n(g$e,"A",{href:!0});var Gut=s(uz);Vnr=r(Gut,"TFGPT2Model"),Gut.forEach(t),Xnr=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),znr=i(D),G0=n(D,"LI",{});var h$e=s(G0);e2e=n(h$e,"STRONG",{});var Out=s(e2e);Qnr=r(Out,"gptj"),Out.forEach(t),Wnr=r(h$e," \u2014 "),_z=n(h$e,"A",{href:!0});var Vut=s(_z);Hnr=r(Vut,"TFGPTJModel"),Vut.forEach(t),Unr=r(h$e," (GPT-J model)"),h$e.forEach(t),Jnr=i(D),O0=n(D,"LI",{});var p$e=s(O0);o2e=n(p$e,"STRONG",{});var Xut=s(o2e);Ynr=r(Xut,"hubert"),Xut.forEach(t),Knr=r(p$e," \u2014 "),bz=n(p$e,"A",{href:!0});var zut=s(bz);Znr=r(zut,"TFHubertModel"),zut.forEach(t),esr=r(p$e," (Hubert model)"),p$e.forEach(t),osr=i(D),V0=n(D,"LI",{});var u$e=s(V0);r2e=n(u$e,"STRONG",{});var Qut=s(r2e);rsr=r(Qut,"layoutlm"),Qut.forEach(t),tsr=r(u$e," \u2014 "),vz=n(u$e,"A",{href:!0});var Wut=s(vz);asr=r(Wut,"TFLayoutLMModel"),Wut.forEach(t),nsr=r(u$e," (LayoutLM model)"),u$e.forEach(t),ssr=i(D),X0=n(D,"LI",{});var _$e=s(X0);t2e=n(_$e,"STRONG",{});var Hut=s(t2e);lsr=r(Hut,"led"),Hut.forEach(t),isr=r(_$e," \u2014 "),Fz=n(_$e,"A",{href:!0});var Uut=s(Fz);dsr=r(Uut,"TFLEDModel"),Uut.forEach(t),csr=r(_$e," (LED model)"),_$e.forEach(t),fsr=i(D),z0=n(D,"LI",{});var b$e=s(z0);a2e=n(b$e,"STRONG",{});var Jut=s(a2e);msr=r(Jut,"longformer"),Jut.forEach(t),gsr=r(b$e," \u2014 "),Tz=n(b$e,"A",{href:!0});var Yut=s(Tz);hsr=r(Yut,"TFLongformerModel"),Yut.forEach(t),psr=r(b$e," (Longformer model)"),b$e.forEach(t),usr=i(D),Q0=n(D,"LI",{});var v$e=s(Q0);n2e=n(v$e,"STRONG",{});var Kut=s(n2e);_sr=r(Kut,"lxmert"),Kut.forEach(t),bsr=r(v$e," \u2014 "),Mz=n(v$e,"A",{href:!0});var Zut=s(Mz);vsr=r(Zut,"TFLxmertModel"),Zut.forEach(t),Fsr=r(v$e," (LXMERT model)"),v$e.forEach(t),Tsr=i(D),W0=n(D,"LI",{});var F$e=s(W0);s2e=n(F$e,"STRONG",{});var e_t=s(s2e);Msr=r(e_t,"marian"),e_t.forEach(t),Esr=r(F$e," \u2014 "),Ez=n(F$e,"A",{href:!0});var o_t=s(Ez);Csr=r(o_t,"TFMarianModel"),o_t.forEach(t),wsr=r(F$e," (Marian model)"),F$e.forEach(t),Asr=i(D),H0=n(D,"LI",{});var T$e=s(H0);l2e=n(T$e,"STRONG",{});var r_t=s(l2e);ysr=r(r_t,"mbart"),r_t.forEach(t),Lsr=r(T$e," \u2014 "),Cz=n(T$e,"A",{href:!0});var t_t=s(Cz);xsr=r(t_t,"TFMBartModel"),t_t.forEach(t),$sr=r(T$e," (mBART model)"),T$e.forEach(t),ksr=i(D),U0=n(D,"LI",{});var M$e=s(U0);i2e=n(M$e,"STRONG",{});var a_t=s(i2e);Ssr=r(a_t,"mobilebert"),a_t.forEach(t),Rsr=r(M$e," \u2014 "),wz=n(M$e,"A",{href:!0});var n_t=s(wz);Bsr=r(n_t,"TFMobileBertModel"),n_t.forEach(t),Psr=r(M$e," (MobileBERT model)"),M$e.forEach(t),Isr=i(D),J0=n(D,"LI",{});var E$e=s(J0);d2e=n(E$e,"STRONG",{});var s_t=s(d2e);qsr=r(s_t,"mpnet"),s_t.forEach(t),Nsr=r(E$e," \u2014 "),Az=n(E$e,"A",{href:!0});var l_t=s(Az);jsr=r(l_t,"TFMPNetModel"),l_t.forEach(t),Dsr=r(E$e," (MPNet model)"),E$e.forEach(t),Gsr=i(D),Y0=n(D,"LI",{});var C$e=s(Y0);c2e=n(C$e,"STRONG",{});var i_t=s(c2e);Osr=r(i_t,"mt5"),i_t.forEach(t),Vsr=r(C$e," \u2014 "),yz=n(C$e,"A",{href:!0});var d_t=s(yz);Xsr=r(d_t,"TFMT5Model"),d_t.forEach(t),zsr=r(C$e," (mT5 model)"),C$e.forEach(t),Qsr=i(D),K0=n(D,"LI",{});var w$e=s(K0);f2e=n(w$e,"STRONG",{});var c_t=s(f2e);Wsr=r(c_t,"openai-gpt"),c_t.forEach(t),Hsr=r(w$e," \u2014 "),Lz=n(w$e,"A",{href:!0});var f_t=s(Lz);Usr=r(f_t,"TFOpenAIGPTModel"),f_t.forEach(t),Jsr=r(w$e," (OpenAI GPT model)"),w$e.forEach(t),Ysr=i(D),Z0=n(D,"LI",{});var A$e=s(Z0);m2e=n(A$e,"STRONG",{});var m_t=s(m2e);Ksr=r(m_t,"pegasus"),m_t.forEach(t),Zsr=r(A$e," \u2014 "),xz=n(A$e,"A",{href:!0});var g_t=s(xz);elr=r(g_t,"TFPegasusModel"),g_t.forEach(t),olr=r(A$e," (Pegasus model)"),A$e.forEach(t),rlr=i(D),eT=n(D,"LI",{});var y$e=s(eT);g2e=n(y$e,"STRONG",{});var h_t=s(g2e);tlr=r(h_t,"rembert"),h_t.forEach(t),alr=r(y$e," \u2014 "),$z=n(y$e,"A",{href:!0});var p_t=s($z);nlr=r(p_t,"TFRemBertModel"),p_t.forEach(t),slr=r(y$e," (RemBERT model)"),y$e.forEach(t),llr=i(D),oT=n(D,"LI",{});var L$e=s(oT);h2e=n(L$e,"STRONG",{});var u_t=s(h2e);ilr=r(u_t,"roberta"),u_t.forEach(t),dlr=r(L$e," \u2014 "),kz=n(L$e,"A",{href:!0});var __t=s(kz);clr=r(__t,"TFRobertaModel"),__t.forEach(t),flr=r(L$e," (RoBERTa model)"),L$e.forEach(t),mlr=i(D),rT=n(D,"LI",{});var x$e=s(rT);p2e=n(x$e,"STRONG",{});var b_t=s(p2e);glr=r(b_t,"roformer"),b_t.forEach(t),hlr=r(x$e," \u2014 "),Sz=n(x$e,"A",{href:!0});var v_t=s(Sz);plr=r(v_t,"TFRoFormerModel"),v_t.forEach(t),ulr=r(x$e," (RoFormer model)"),x$e.forEach(t),_lr=i(D),tT=n(D,"LI",{});var $$e=s(tT);u2e=n($$e,"STRONG",{});var F_t=s(u2e);blr=r(F_t,"speech_to_text"),F_t.forEach(t),vlr=r($$e," \u2014 "),Rz=n($$e,"A",{href:!0});var T_t=s(Rz);Flr=r(T_t,"TFSpeech2TextModel"),T_t.forEach(t),Tlr=r($$e," (Speech2Text model)"),$$e.forEach(t),Mlr=i(D),aT=n(D,"LI",{});var k$e=s(aT);_2e=n(k$e,"STRONG",{});var M_t=s(_2e);Elr=r(M_t,"t5"),M_t.forEach(t),Clr=r(k$e," \u2014 "),Bz=n(k$e,"A",{href:!0});var E_t=s(Bz);wlr=r(E_t,"TFT5Model"),E_t.forEach(t),Alr=r(k$e," (T5 model)"),k$e.forEach(t),ylr=i(D),nT=n(D,"LI",{});var S$e=s(nT);b2e=n(S$e,"STRONG",{});var C_t=s(b2e);Llr=r(C_t,"tapas"),C_t.forEach(t),xlr=r(S$e," \u2014 "),Pz=n(S$e,"A",{href:!0});var w_t=s(Pz);$lr=r(w_t,"TFTapasModel"),w_t.forEach(t),klr=r(S$e," (TAPAS model)"),S$e.forEach(t),Slr=i(D),sT=n(D,"LI",{});var R$e=s(sT);v2e=n(R$e,"STRONG",{});var A_t=s(v2e);Rlr=r(A_t,"transfo-xl"),A_t.forEach(t),Blr=r(R$e," \u2014 "),Iz=n(R$e,"A",{href:!0});var y_t=s(Iz);Plr=r(y_t,"TFTransfoXLModel"),y_t.forEach(t),Ilr=r(R$e," (Transformer-XL model)"),R$e.forEach(t),qlr=i(D),lT=n(D,"LI",{});var B$e=s(lT);F2e=n(B$e,"STRONG",{});var L_t=s(F2e);Nlr=r(L_t,"vit"),L_t.forEach(t),jlr=r(B$e," \u2014 "),qz=n(B$e,"A",{href:!0});var x_t=s(qz);Dlr=r(x_t,"TFViTModel"),x_t.forEach(t),Glr=r(B$e," (ViT model)"),B$e.forEach(t),Olr=i(D),iT=n(D,"LI",{});var P$e=s(iT);T2e=n(P$e,"STRONG",{});var $_t=s(T2e);Vlr=r($_t,"vit_mae"),$_t.forEach(t),Xlr=r(P$e," \u2014 "),Nz=n(P$e,"A",{href:!0});var k_t=s(Nz);zlr=r(k_t,"TFViTMAEModel"),k_t.forEach(t),Qlr=r(P$e," (ViTMAE model)"),P$e.forEach(t),Wlr=i(D),dT=n(D,"LI",{});var I$e=s(dT);M2e=n(I$e,"STRONG",{});var S_t=s(M2e);Hlr=r(S_t,"wav2vec2"),S_t.forEach(t),Ulr=r(I$e," \u2014 "),jz=n(I$e,"A",{href:!0});var R_t=s(jz);Jlr=r(R_t,"TFWav2Vec2Model"),R_t.forEach(t),Ylr=r(I$e," (Wav2Vec2 model)"),I$e.forEach(t),Klr=i(D),cT=n(D,"LI",{});var q$e=s(cT);E2e=n(q$e,"STRONG",{});var B_t=s(E2e);Zlr=r(B_t,"xlm"),B_t.forEach(t),eir=r(q$e," \u2014 "),Dz=n(q$e,"A",{href:!0});var P_t=s(Dz);oir=r(P_t,"TFXLMModel"),P_t.forEach(t),rir=r(q$e," (XLM model)"),q$e.forEach(t),tir=i(D),fT=n(D,"LI",{});var N$e=s(fT);C2e=n(N$e,"STRONG",{});var I_t=s(C2e);air=r(I_t,"xlm-roberta"),I_t.forEach(t),nir=r(N$e," \u2014 "),Gz=n(N$e,"A",{href:!0});var q_t=s(Gz);sir=r(q_t,"TFXLMRobertaModel"),q_t.forEach(t),lir=r(N$e," (XLM-RoBERTa model)"),N$e.forEach(t),iir=i(D),mT=n(D,"LI",{});var j$e=s(mT);w2e=n(j$e,"STRONG",{});var N_t=s(w2e);dir=r(N_t,"xlnet"),N_t.forEach(t),cir=r(j$e," \u2014 "),Oz=n(j$e,"A",{href:!0});var j_t=s(Oz);fir=r(j_t,"TFXLNetModel"),j_t.forEach(t),mir=r(j$e," (XLNet model)"),j$e.forEach(t),D.forEach(t),gir=i(cl),T(gT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),NIe=i(f),Dd=n(f,"H2",{class:!0});var XNe=s(Dd);hT=n(XNe,"A",{id:!0,class:!0,href:!0});var D_t=s(hT);A2e=n(D_t,"SPAN",{});var G_t=s(A2e);T(BL.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),hir=i(XNe),y2e=n(XNe,"SPAN",{});var O_t=s(y2e);pir=r(O_t,"TFAutoModelForPreTraining"),O_t.forEach(t),XNe.forEach(t),jIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(PL.$$.fragment,fl),uir=i(fl),Gd=n(fl,"P",{});var YK=s(Gd);_ir=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vz=n(YK,"A",{href:!0});var V_t=s(Vz);bir=r(V_t,"from_pretrained()"),V_t.forEach(t),vir=r(YK," class method or the "),Xz=n(YK,"A",{href:!0});var X_t=s(Xz);Fir=r(X_t,"from_config()"),X_t.forEach(t),Tir=r(YK,` class
method.`),YK.forEach(t),Mir=i(fl),IL=n(fl,"P",{});var zNe=s(IL);Eir=r(zNe,"This class cannot be instantiated directly using "),L2e=n(zNe,"CODE",{});var z_t=s(L2e);Cir=r(z_t,"__init__()"),z_t.forEach(t),wir=r(zNe," (throws an error)."),zNe.forEach(t),Air=i(fl),At=n(fl,"DIV",{class:!0});var Hw=s(At);T(qL.$$.fragment,Hw),yir=i(Hw),x2e=n(Hw,"P",{});var Q_t=s(x2e);Lir=r(Q_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q_t.forEach(t),xir=i(Hw),Od=n(Hw,"P",{});var KK=s(Od);$ir=r(KK,`Note:
Loading a model from its configuration file does `),$2e=n(KK,"STRONG",{});var W_t=s($2e);kir=r(W_t,"not"),W_t.forEach(t),Sir=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(KK,"A",{href:!0});var H_t=s(zz);Rir=r(H_t,"from_pretrained()"),H_t.forEach(t),Bir=r(KK," to load the model weights."),KK.forEach(t),Pir=i(Hw),T(pT.$$.fragment,Hw),Hw.forEach(t),Iir=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(NL.$$.fragment,ml),qir=i(ml),k2e=n(ml,"P",{});var U_t=s(k2e);Nir=r(U_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),U_t.forEach(t),jir=i(ml),Za=n(ml,"P",{});var Uw=s(Za);Dir=r(Uw,"The model class to instantiate is selected based on the "),S2e=n(Uw,"CODE",{});var J_t=s(S2e);Gir=r(J_t,"model_type"),J_t.forEach(t),Oir=r(Uw,` property of the config object (either
passed as an argument or loaded from `),R2e=n(Uw,"CODE",{});var Y_t=s(R2e);Vir=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Xir=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(Uw,"CODE",{});var K_t=s(B2e);zir=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),Qir=r(Uw,":"),Uw.forEach(t),Wir=i(ml),se=n(ml,"UL",{});var le=s(se);uT=n(le,"LI",{});var D$e=s(uT);P2e=n(D$e,"STRONG",{});var Z_t=s(P2e);Hir=r(Z_t,"albert"),Z_t.forEach(t),Uir=r(D$e," \u2014 "),Qz=n(D$e,"A",{href:!0});var e2t=s(Qz);Jir=r(e2t,"TFAlbertForPreTraining"),e2t.forEach(t),Yir=r(D$e," (ALBERT model)"),D$e.forEach(t),Kir=i(le),_T=n(le,"LI",{});var G$e=s(_T);I2e=n(G$e,"STRONG",{});var o2t=s(I2e);Zir=r(o2t,"bart"),o2t.forEach(t),edr=r(G$e," \u2014 "),Wz=n(G$e,"A",{href:!0});var r2t=s(Wz);odr=r(r2t,"TFBartForConditionalGeneration"),r2t.forEach(t),rdr=r(G$e," (BART model)"),G$e.forEach(t),tdr=i(le),bT=n(le,"LI",{});var O$e=s(bT);q2e=n(O$e,"STRONG",{});var t2t=s(q2e);adr=r(t2t,"bert"),t2t.forEach(t),ndr=r(O$e," \u2014 "),Hz=n(O$e,"A",{href:!0});var a2t=s(Hz);sdr=r(a2t,"TFBertForPreTraining"),a2t.forEach(t),ldr=r(O$e," (BERT model)"),O$e.forEach(t),idr=i(le),vT=n(le,"LI",{});var V$e=s(vT);N2e=n(V$e,"STRONG",{});var n2t=s(N2e);ddr=r(n2t,"camembert"),n2t.forEach(t),cdr=r(V$e," \u2014 "),Uz=n(V$e,"A",{href:!0});var s2t=s(Uz);fdr=r(s2t,"TFCamembertForMaskedLM"),s2t.forEach(t),mdr=r(V$e," (CamemBERT model)"),V$e.forEach(t),gdr=i(le),FT=n(le,"LI",{});var X$e=s(FT);j2e=n(X$e,"STRONG",{});var l2t=s(j2e);hdr=r(l2t,"ctrl"),l2t.forEach(t),pdr=r(X$e," \u2014 "),Jz=n(X$e,"A",{href:!0});var i2t=s(Jz);udr=r(i2t,"TFCTRLLMHeadModel"),i2t.forEach(t),_dr=r(X$e," (CTRL model)"),X$e.forEach(t),bdr=i(le),TT=n(le,"LI",{});var z$e=s(TT);D2e=n(z$e,"STRONG",{});var d2t=s(D2e);vdr=r(d2t,"distilbert"),d2t.forEach(t),Fdr=r(z$e," \u2014 "),Yz=n(z$e,"A",{href:!0});var c2t=s(Yz);Tdr=r(c2t,"TFDistilBertForMaskedLM"),c2t.forEach(t),Mdr=r(z$e," (DistilBERT model)"),z$e.forEach(t),Edr=i(le),MT=n(le,"LI",{});var Q$e=s(MT);G2e=n(Q$e,"STRONG",{});var f2t=s(G2e);Cdr=r(f2t,"electra"),f2t.forEach(t),wdr=r(Q$e," \u2014 "),Kz=n(Q$e,"A",{href:!0});var m2t=s(Kz);Adr=r(m2t,"TFElectraForPreTraining"),m2t.forEach(t),ydr=r(Q$e," (ELECTRA model)"),Q$e.forEach(t),Ldr=i(le),ET=n(le,"LI",{});var W$e=s(ET);O2e=n(W$e,"STRONG",{});var g2t=s(O2e);xdr=r(g2t,"flaubert"),g2t.forEach(t),$dr=r(W$e," \u2014 "),Zz=n(W$e,"A",{href:!0});var h2t=s(Zz);kdr=r(h2t,"TFFlaubertWithLMHeadModel"),h2t.forEach(t),Sdr=r(W$e," (FlauBERT model)"),W$e.forEach(t),Rdr=i(le),CT=n(le,"LI",{});var H$e=s(CT);V2e=n(H$e,"STRONG",{});var p2t=s(V2e);Bdr=r(p2t,"funnel"),p2t.forEach(t),Pdr=r(H$e," \u2014 "),eQ=n(H$e,"A",{href:!0});var u2t=s(eQ);Idr=r(u2t,"TFFunnelForPreTraining"),u2t.forEach(t),qdr=r(H$e," (Funnel Transformer model)"),H$e.forEach(t),Ndr=i(le),wT=n(le,"LI",{});var U$e=s(wT);X2e=n(U$e,"STRONG",{});var _2t=s(X2e);jdr=r(_2t,"gpt2"),_2t.forEach(t),Ddr=r(U$e," \u2014 "),oQ=n(U$e,"A",{href:!0});var b2t=s(oQ);Gdr=r(b2t,"TFGPT2LMHeadModel"),b2t.forEach(t),Odr=r(U$e," (OpenAI GPT-2 model)"),U$e.forEach(t),Vdr=i(le),AT=n(le,"LI",{});var J$e=s(AT);z2e=n(J$e,"STRONG",{});var v2t=s(z2e);Xdr=r(v2t,"layoutlm"),v2t.forEach(t),zdr=r(J$e," \u2014 "),rQ=n(J$e,"A",{href:!0});var F2t=s(rQ);Qdr=r(F2t,"TFLayoutLMForMaskedLM"),F2t.forEach(t),Wdr=r(J$e," (LayoutLM model)"),J$e.forEach(t),Hdr=i(le),yT=n(le,"LI",{});var Y$e=s(yT);Q2e=n(Y$e,"STRONG",{});var T2t=s(Q2e);Udr=r(T2t,"lxmert"),T2t.forEach(t),Jdr=r(Y$e," \u2014 "),tQ=n(Y$e,"A",{href:!0});var M2t=s(tQ);Ydr=r(M2t,"TFLxmertForPreTraining"),M2t.forEach(t),Kdr=r(Y$e," (LXMERT model)"),Y$e.forEach(t),Zdr=i(le),LT=n(le,"LI",{});var K$e=s(LT);W2e=n(K$e,"STRONG",{});var E2t=s(W2e);ecr=r(E2t,"mobilebert"),E2t.forEach(t),ocr=r(K$e," \u2014 "),aQ=n(K$e,"A",{href:!0});var C2t=s(aQ);rcr=r(C2t,"TFMobileBertForPreTraining"),C2t.forEach(t),tcr=r(K$e," (MobileBERT model)"),K$e.forEach(t),acr=i(le),xT=n(le,"LI",{});var Z$e=s(xT);H2e=n(Z$e,"STRONG",{});var w2t=s(H2e);ncr=r(w2t,"mpnet"),w2t.forEach(t),scr=r(Z$e," \u2014 "),nQ=n(Z$e,"A",{href:!0});var A2t=s(nQ);lcr=r(A2t,"TFMPNetForMaskedLM"),A2t.forEach(t),icr=r(Z$e," (MPNet model)"),Z$e.forEach(t),dcr=i(le),$T=n(le,"LI",{});var eke=s($T);U2e=n(eke,"STRONG",{});var y2t=s(U2e);ccr=r(y2t,"openai-gpt"),y2t.forEach(t),fcr=r(eke," \u2014 "),sQ=n(eke,"A",{href:!0});var L2t=s(sQ);mcr=r(L2t,"TFOpenAIGPTLMHeadModel"),L2t.forEach(t),gcr=r(eke," (OpenAI GPT model)"),eke.forEach(t),hcr=i(le),kT=n(le,"LI",{});var oke=s(kT);J2e=n(oke,"STRONG",{});var x2t=s(J2e);pcr=r(x2t,"roberta"),x2t.forEach(t),ucr=r(oke," \u2014 "),lQ=n(oke,"A",{href:!0});var $2t=s(lQ);_cr=r($2t,"TFRobertaForMaskedLM"),$2t.forEach(t),bcr=r(oke," (RoBERTa model)"),oke.forEach(t),vcr=i(le),ST=n(le,"LI",{});var rke=s(ST);Y2e=n(rke,"STRONG",{});var k2t=s(Y2e);Fcr=r(k2t,"t5"),k2t.forEach(t),Tcr=r(rke," \u2014 "),iQ=n(rke,"A",{href:!0});var S2t=s(iQ);Mcr=r(S2t,"TFT5ForConditionalGeneration"),S2t.forEach(t),Ecr=r(rke," (T5 model)"),rke.forEach(t),Ccr=i(le),RT=n(le,"LI",{});var tke=s(RT);K2e=n(tke,"STRONG",{});var R2t=s(K2e);wcr=r(R2t,"tapas"),R2t.forEach(t),Acr=r(tke," \u2014 "),dQ=n(tke,"A",{href:!0});var B2t=s(dQ);ycr=r(B2t,"TFTapasForMaskedLM"),B2t.forEach(t),Lcr=r(tke," (TAPAS model)"),tke.forEach(t),xcr=i(le),BT=n(le,"LI",{});var ake=s(BT);Z2e=n(ake,"STRONG",{});var P2t=s(Z2e);$cr=r(P2t,"transfo-xl"),P2t.forEach(t),kcr=r(ake," \u2014 "),cQ=n(ake,"A",{href:!0});var I2t=s(cQ);Scr=r(I2t,"TFTransfoXLLMHeadModel"),I2t.forEach(t),Rcr=r(ake," (Transformer-XL model)"),ake.forEach(t),Bcr=i(le),PT=n(le,"LI",{});var nke=s(PT);e1e=n(nke,"STRONG",{});var q2t=s(e1e);Pcr=r(q2t,"vit_mae"),q2t.forEach(t),Icr=r(nke," \u2014 "),fQ=n(nke,"A",{href:!0});var N2t=s(fQ);qcr=r(N2t,"TFViTMAEForPreTraining"),N2t.forEach(t),Ncr=r(nke," (ViTMAE model)"),nke.forEach(t),jcr=i(le),IT=n(le,"LI",{});var ske=s(IT);o1e=n(ske,"STRONG",{});var j2t=s(o1e);Dcr=r(j2t,"xlm"),j2t.forEach(t),Gcr=r(ske," \u2014 "),mQ=n(ske,"A",{href:!0});var D2t=s(mQ);Ocr=r(D2t,"TFXLMWithLMHeadModel"),D2t.forEach(t),Vcr=r(ske," (XLM model)"),ske.forEach(t),Xcr=i(le),qT=n(le,"LI",{});var lke=s(qT);r1e=n(lke,"STRONG",{});var G2t=s(r1e);zcr=r(G2t,"xlm-roberta"),G2t.forEach(t),Qcr=r(lke," \u2014 "),gQ=n(lke,"A",{href:!0});var O2t=s(gQ);Wcr=r(O2t,"TFXLMRobertaForMaskedLM"),O2t.forEach(t),Hcr=r(lke," (XLM-RoBERTa model)"),lke.forEach(t),Ucr=i(le),NT=n(le,"LI",{});var ike=s(NT);t1e=n(ike,"STRONG",{});var V2t=s(t1e);Jcr=r(V2t,"xlnet"),V2t.forEach(t),Ycr=r(ike," \u2014 "),hQ=n(ike,"A",{href:!0});var X2t=s(hQ);Kcr=r(X2t,"TFXLNetLMHeadModel"),X2t.forEach(t),Zcr=r(ike," (XLNet model)"),ike.forEach(t),le.forEach(t),efr=i(ml),T(jT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),DIe=i(f),Vd=n(f,"H2",{class:!0});var QNe=s(Vd);DT=n(QNe,"A",{id:!0,class:!0,href:!0});var z2t=s(DT);a1e=n(z2t,"SPAN",{});var Q2t=s(a1e);T(jL.$$.fragment,Q2t),Q2t.forEach(t),z2t.forEach(t),ofr=i(QNe),n1e=n(QNe,"SPAN",{});var W2t=s(n1e);rfr=r(W2t,"TFAutoModelForCausalLM"),W2t.forEach(t),QNe.forEach(t),GIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(DL.$$.fragment,gl),tfr=i(gl),Xd=n(gl,"P",{});var ZK=s(Xd);afr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pQ=n(ZK,"A",{href:!0});var H2t=s(pQ);nfr=r(H2t,"from_pretrained()"),H2t.forEach(t),sfr=r(ZK," class method or the "),uQ=n(ZK,"A",{href:!0});var U2t=s(uQ);lfr=r(U2t,"from_config()"),U2t.forEach(t),ifr=r(ZK,` class
method.`),ZK.forEach(t),dfr=i(gl),GL=n(gl,"P",{});var WNe=s(GL);cfr=r(WNe,"This class cannot be instantiated directly using "),s1e=n(WNe,"CODE",{});var J2t=s(s1e);ffr=r(J2t,"__init__()"),J2t.forEach(t),mfr=r(WNe," (throws an error)."),WNe.forEach(t),gfr=i(gl),yt=n(gl,"DIV",{class:!0});var Jw=s(yt);T(OL.$$.fragment,Jw),hfr=i(Jw),l1e=n(Jw,"P",{});var Y2t=s(l1e);pfr=r(Y2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y2t.forEach(t),ufr=i(Jw),zd=n(Jw,"P",{});var eZ=s(zd);_fr=r(eZ,`Note:
Loading a model from its configuration file does `),i1e=n(eZ,"STRONG",{});var K2t=s(i1e);bfr=r(K2t,"not"),K2t.forEach(t),vfr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(eZ,"A",{href:!0});var Z2t=s(_Q);Ffr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Tfr=r(eZ," to load the model weights."),eZ.forEach(t),Mfr=i(Jw),T(GT.$$.fragment,Jw),Jw.forEach(t),Efr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(VL.$$.fragment,hl),Cfr=i(hl),d1e=n(hl,"P",{});var e1t=s(d1e);wfr=r(e1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e1t.forEach(t),Afr=i(hl),en=n(hl,"P",{});var Yw=s(en);yfr=r(Yw,"The model class to instantiate is selected based on the "),c1e=n(Yw,"CODE",{});var o1t=s(c1e);Lfr=r(o1t,"model_type"),o1t.forEach(t),xfr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),f1e=n(Yw,"CODE",{});var r1t=s(f1e);$fr=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),kfr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(Yw,"CODE",{});var t1t=s(m1e);Sfr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),Rfr=r(Yw,":"),Yw.forEach(t),Bfr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);OT=n(Ce,"LI",{});var dke=s(OT);g1e=n(dke,"STRONG",{});var a1t=s(g1e);Pfr=r(a1t,"bert"),a1t.forEach(t),Ifr=r(dke," \u2014 "),bQ=n(dke,"A",{href:!0});var n1t=s(bQ);qfr=r(n1t,"TFBertLMHeadModel"),n1t.forEach(t),Nfr=r(dke," (BERT model)"),dke.forEach(t),jfr=i(Ce),VT=n(Ce,"LI",{});var cke=s(VT);h1e=n(cke,"STRONG",{});var s1t=s(h1e);Dfr=r(s1t,"camembert"),s1t.forEach(t),Gfr=r(cke," \u2014 "),vQ=n(cke,"A",{href:!0});var l1t=s(vQ);Ofr=r(l1t,"TFCamembertForCausalLM"),l1t.forEach(t),Vfr=r(cke," (CamemBERT model)"),cke.forEach(t),Xfr=i(Ce),XT=n(Ce,"LI",{});var fke=s(XT);p1e=n(fke,"STRONG",{});var i1t=s(p1e);zfr=r(i1t,"ctrl"),i1t.forEach(t),Qfr=r(fke," \u2014 "),FQ=n(fke,"A",{href:!0});var d1t=s(FQ);Wfr=r(d1t,"TFCTRLLMHeadModel"),d1t.forEach(t),Hfr=r(fke," (CTRL model)"),fke.forEach(t),Ufr=i(Ce),zT=n(Ce,"LI",{});var mke=s(zT);u1e=n(mke,"STRONG",{});var c1t=s(u1e);Jfr=r(c1t,"gpt2"),c1t.forEach(t),Yfr=r(mke," \u2014 "),TQ=n(mke,"A",{href:!0});var f1t=s(TQ);Kfr=r(f1t,"TFGPT2LMHeadModel"),f1t.forEach(t),Zfr=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),emr=i(Ce),QT=n(Ce,"LI",{});var gke=s(QT);_1e=n(gke,"STRONG",{});var m1t=s(_1e);omr=r(m1t,"gptj"),m1t.forEach(t),rmr=r(gke," \u2014 "),MQ=n(gke,"A",{href:!0});var g1t=s(MQ);tmr=r(g1t,"TFGPTJForCausalLM"),g1t.forEach(t),amr=r(gke," (GPT-J model)"),gke.forEach(t),nmr=i(Ce),WT=n(Ce,"LI",{});var hke=s(WT);b1e=n(hke,"STRONG",{});var h1t=s(b1e);smr=r(h1t,"openai-gpt"),h1t.forEach(t),lmr=r(hke," \u2014 "),EQ=n(hke,"A",{href:!0});var p1t=s(EQ);imr=r(p1t,"TFOpenAIGPTLMHeadModel"),p1t.forEach(t),dmr=r(hke," (OpenAI GPT model)"),hke.forEach(t),cmr=i(Ce),HT=n(Ce,"LI",{});var pke=s(HT);v1e=n(pke,"STRONG",{});var u1t=s(v1e);fmr=r(u1t,"rembert"),u1t.forEach(t),mmr=r(pke," \u2014 "),CQ=n(pke,"A",{href:!0});var _1t=s(CQ);gmr=r(_1t,"TFRemBertForCausalLM"),_1t.forEach(t),hmr=r(pke," (RemBERT model)"),pke.forEach(t),pmr=i(Ce),UT=n(Ce,"LI",{});var uke=s(UT);F1e=n(uke,"STRONG",{});var b1t=s(F1e);umr=r(b1t,"roberta"),b1t.forEach(t),_mr=r(uke," \u2014 "),wQ=n(uke,"A",{href:!0});var v1t=s(wQ);bmr=r(v1t,"TFRobertaForCausalLM"),v1t.forEach(t),vmr=r(uke," (RoBERTa model)"),uke.forEach(t),Fmr=i(Ce),JT=n(Ce,"LI",{});var _ke=s(JT);T1e=n(_ke,"STRONG",{});var F1t=s(T1e);Tmr=r(F1t,"roformer"),F1t.forEach(t),Mmr=r(_ke," \u2014 "),AQ=n(_ke,"A",{href:!0});var T1t=s(AQ);Emr=r(T1t,"TFRoFormerForCausalLM"),T1t.forEach(t),Cmr=r(_ke," (RoFormer model)"),_ke.forEach(t),wmr=i(Ce),YT=n(Ce,"LI",{});var bke=s(YT);M1e=n(bke,"STRONG",{});var M1t=s(M1e);Amr=r(M1t,"transfo-xl"),M1t.forEach(t),ymr=r(bke," \u2014 "),yQ=n(bke,"A",{href:!0});var E1t=s(yQ);Lmr=r(E1t,"TFTransfoXLLMHeadModel"),E1t.forEach(t),xmr=r(bke," (Transformer-XL model)"),bke.forEach(t),$mr=i(Ce),KT=n(Ce,"LI",{});var vke=s(KT);E1e=n(vke,"STRONG",{});var C1t=s(E1e);kmr=r(C1t,"xlm"),C1t.forEach(t),Smr=r(vke," \u2014 "),LQ=n(vke,"A",{href:!0});var w1t=s(LQ);Rmr=r(w1t,"TFXLMWithLMHeadModel"),w1t.forEach(t),Bmr=r(vke," (XLM model)"),vke.forEach(t),Pmr=i(Ce),ZT=n(Ce,"LI",{});var Fke=s(ZT);C1e=n(Fke,"STRONG",{});var A1t=s(C1e);Imr=r(A1t,"xlnet"),A1t.forEach(t),qmr=r(Fke," \u2014 "),xQ=n(Fke,"A",{href:!0});var y1t=s(xQ);Nmr=r(y1t,"TFXLNetLMHeadModel"),y1t.forEach(t),jmr=r(Fke," (XLNet model)"),Fke.forEach(t),Ce.forEach(t),Dmr=i(hl),T(e7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),OIe=i(f),Qd=n(f,"H2",{class:!0});var HNe=s(Qd);o7=n(HNe,"A",{id:!0,class:!0,href:!0});var L1t=s(o7);w1e=n(L1t,"SPAN",{});var x1t=s(w1e);T(XL.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),Gmr=i(HNe),A1e=n(HNe,"SPAN",{});var $1t=s(A1e);Omr=r($1t,"TFAutoModelForImageClassification"),$1t.forEach(t),HNe.forEach(t),VIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(zL.$$.fragment,pl),Vmr=i(pl),Wd=n(pl,"P",{});var oZ=s(Wd);Xmr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=n(oZ,"A",{href:!0});var k1t=s($Q);zmr=r(k1t,"from_pretrained()"),k1t.forEach(t),Qmr=r(oZ," class method or the "),kQ=n(oZ,"A",{href:!0});var S1t=s(kQ);Wmr=r(S1t,"from_config()"),S1t.forEach(t),Hmr=r(oZ,` class
method.`),oZ.forEach(t),Umr=i(pl),QL=n(pl,"P",{});var UNe=s(QL);Jmr=r(UNe,"This class cannot be instantiated directly using "),y1e=n(UNe,"CODE",{});var R1t=s(y1e);Ymr=r(R1t,"__init__()"),R1t.forEach(t),Kmr=r(UNe," (throws an error)."),UNe.forEach(t),Zmr=i(pl),Lt=n(pl,"DIV",{class:!0});var Kw=s(Lt);T(WL.$$.fragment,Kw),egr=i(Kw),L1e=n(Kw,"P",{});var B1t=s(L1e);ogr=r(B1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B1t.forEach(t),rgr=i(Kw),Hd=n(Kw,"P",{});var rZ=s(Hd);tgr=r(rZ,`Note:
Loading a model from its configuration file does `),x1e=n(rZ,"STRONG",{});var P1t=s(x1e);agr=r(P1t,"not"),P1t.forEach(t),ngr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(rZ,"A",{href:!0});var I1t=s(SQ);sgr=r(I1t,"from_pretrained()"),I1t.forEach(t),lgr=r(rZ," to load the model weights."),rZ.forEach(t),igr=i(Kw),T(r7.$$.fragment,Kw),Kw.forEach(t),dgr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(HL.$$.fragment,ul),cgr=i(ul),$1e=n(ul,"P",{});var q1t=s($1e);fgr=r(q1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q1t.forEach(t),mgr=i(ul),on=n(ul,"P",{});var Zw=s(on);ggr=r(Zw,"The model class to instantiate is selected based on the "),k1e=n(Zw,"CODE",{});var N1t=s(k1e);hgr=r(N1t,"model_type"),N1t.forEach(t),pgr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),S1e=n(Zw,"CODE",{});var j1t=s(S1e);ugr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),_gr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(Zw,"CODE",{});var D1t=s(R1e);bgr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),vgr=r(Zw,":"),Zw.forEach(t),Fgr=i(ul),Ud=n(ul,"UL",{});var tZ=s(Ud);t7=n(tZ,"LI",{});var Tke=s(t7);B1e=n(Tke,"STRONG",{});var G1t=s(B1e);Tgr=r(G1t,"convnext"),G1t.forEach(t),Mgr=r(Tke," \u2014 "),RQ=n(Tke,"A",{href:!0});var O1t=s(RQ);Egr=r(O1t,"TFConvNextForImageClassification"),O1t.forEach(t),Cgr=r(Tke," (ConvNext model)"),Tke.forEach(t),wgr=i(tZ),a7=n(tZ,"LI",{});var Mke=s(a7);P1e=n(Mke,"STRONG",{});var V1t=s(P1e);Agr=r(V1t,"data2vec-vision"),V1t.forEach(t),ygr=r(Mke," \u2014 "),BQ=n(Mke,"A",{href:!0});var X1t=s(BQ);Lgr=r(X1t,"TFData2VecVisionForImageClassification"),X1t.forEach(t),xgr=r(Mke," (Data2VecVision model)"),Mke.forEach(t),$gr=i(tZ),n7=n(tZ,"LI",{});var Eke=s(n7);I1e=n(Eke,"STRONG",{});var z1t=s(I1e);kgr=r(z1t,"vit"),z1t.forEach(t),Sgr=r(Eke," \u2014 "),PQ=n(Eke,"A",{href:!0});var Q1t=s(PQ);Rgr=r(Q1t,"TFViTForImageClassification"),Q1t.forEach(t),Bgr=r(Eke," (ViT model)"),Eke.forEach(t),tZ.forEach(t),Pgr=i(ul),T(s7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),XIe=i(f),Jd=n(f,"H2",{class:!0});var JNe=s(Jd);l7=n(JNe,"A",{id:!0,class:!0,href:!0});var W1t=s(l7);q1e=n(W1t,"SPAN",{});var H1t=s(q1e);T(UL.$$.fragment,H1t),H1t.forEach(t),W1t.forEach(t),Igr=i(JNe),N1e=n(JNe,"SPAN",{});var U1t=s(N1e);qgr=r(U1t,"TFAutoModelForMaskedLM"),U1t.forEach(t),JNe.forEach(t),zIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(JL.$$.fragment,_l),Ngr=i(_l),Yd=n(_l,"P",{});var aZ=s(Yd);jgr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IQ=n(aZ,"A",{href:!0});var J1t=s(IQ);Dgr=r(J1t,"from_pretrained()"),J1t.forEach(t),Ggr=r(aZ," class method or the "),qQ=n(aZ,"A",{href:!0});var Y1t=s(qQ);Ogr=r(Y1t,"from_config()"),Y1t.forEach(t),Vgr=r(aZ,` class
method.`),aZ.forEach(t),Xgr=i(_l),YL=n(_l,"P",{});var YNe=s(YL);zgr=r(YNe,"This class cannot be instantiated directly using "),j1e=n(YNe,"CODE",{});var K1t=s(j1e);Qgr=r(K1t,"__init__()"),K1t.forEach(t),Wgr=r(YNe," (throws an error)."),YNe.forEach(t),Hgr=i(_l),xt=n(_l,"DIV",{class:!0});var eA=s(xt);T(KL.$$.fragment,eA),Ugr=i(eA),D1e=n(eA,"P",{});var Z1t=s(D1e);Jgr=r(Z1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z1t.forEach(t),Ygr=i(eA),Kd=n(eA,"P",{});var nZ=s(Kd);Kgr=r(nZ,`Note:
Loading a model from its configuration file does `),G1e=n(nZ,"STRONG",{});var ebt=s(G1e);Zgr=r(ebt,"not"),ebt.forEach(t),ehr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(nZ,"A",{href:!0});var obt=s(NQ);ohr=r(obt,"from_pretrained()"),obt.forEach(t),rhr=r(nZ," to load the model weights."),nZ.forEach(t),thr=i(eA),T(i7.$$.fragment,eA),eA.forEach(t),ahr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(ZL.$$.fragment,bl),nhr=i(bl),O1e=n(bl,"P",{});var rbt=s(O1e);shr=r(rbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rbt.forEach(t),lhr=i(bl),rn=n(bl,"P",{});var oA=s(rn);ihr=r(oA,"The model class to instantiate is selected based on the "),V1e=n(oA,"CODE",{});var tbt=s(V1e);dhr=r(tbt,"model_type"),tbt.forEach(t),chr=r(oA,` property of the config object (either
passed as an argument or loaded from `),X1e=n(oA,"CODE",{});var abt=s(X1e);fhr=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),mhr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(oA,"CODE",{});var nbt=s(z1e);ghr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),hhr=r(oA,":"),oA.forEach(t),phr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);d7=n(fe,"LI",{});var Cke=s(d7);Q1e=n(Cke,"STRONG",{});var sbt=s(Q1e);uhr=r(sbt,"albert"),sbt.forEach(t),_hr=r(Cke," \u2014 "),jQ=n(Cke,"A",{href:!0});var lbt=s(jQ);bhr=r(lbt,"TFAlbertForMaskedLM"),lbt.forEach(t),vhr=r(Cke," (ALBERT model)"),Cke.forEach(t),Fhr=i(fe),c7=n(fe,"LI",{});var wke=s(c7);W1e=n(wke,"STRONG",{});var ibt=s(W1e);Thr=r(ibt,"bert"),ibt.forEach(t),Mhr=r(wke," \u2014 "),DQ=n(wke,"A",{href:!0});var dbt=s(DQ);Ehr=r(dbt,"TFBertForMaskedLM"),dbt.forEach(t),Chr=r(wke," (BERT model)"),wke.forEach(t),whr=i(fe),f7=n(fe,"LI",{});var Ake=s(f7);H1e=n(Ake,"STRONG",{});var cbt=s(H1e);Ahr=r(cbt,"camembert"),cbt.forEach(t),yhr=r(Ake," \u2014 "),GQ=n(Ake,"A",{href:!0});var fbt=s(GQ);Lhr=r(fbt,"TFCamembertForMaskedLM"),fbt.forEach(t),xhr=r(Ake," (CamemBERT model)"),Ake.forEach(t),$hr=i(fe),m7=n(fe,"LI",{});var yke=s(m7);U1e=n(yke,"STRONG",{});var mbt=s(U1e);khr=r(mbt,"convbert"),mbt.forEach(t),Shr=r(yke," \u2014 "),OQ=n(yke,"A",{href:!0});var gbt=s(OQ);Rhr=r(gbt,"TFConvBertForMaskedLM"),gbt.forEach(t),Bhr=r(yke," (ConvBERT model)"),yke.forEach(t),Phr=i(fe),g7=n(fe,"LI",{});var Lke=s(g7);J1e=n(Lke,"STRONG",{});var hbt=s(J1e);Ihr=r(hbt,"deberta"),hbt.forEach(t),qhr=r(Lke," \u2014 "),VQ=n(Lke,"A",{href:!0});var pbt=s(VQ);Nhr=r(pbt,"TFDebertaForMaskedLM"),pbt.forEach(t),jhr=r(Lke," (DeBERTa model)"),Lke.forEach(t),Dhr=i(fe),h7=n(fe,"LI",{});var xke=s(h7);Y1e=n(xke,"STRONG",{});var ubt=s(Y1e);Ghr=r(ubt,"deberta-v2"),ubt.forEach(t),Ohr=r(xke," \u2014 "),XQ=n(xke,"A",{href:!0});var _bt=s(XQ);Vhr=r(_bt,"TFDebertaV2ForMaskedLM"),_bt.forEach(t),Xhr=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),zhr=i(fe),p7=n(fe,"LI",{});var $ke=s(p7);K1e=n($ke,"STRONG",{});var bbt=s(K1e);Qhr=r(bbt,"distilbert"),bbt.forEach(t),Whr=r($ke," \u2014 "),zQ=n($ke,"A",{href:!0});var vbt=s(zQ);Hhr=r(vbt,"TFDistilBertForMaskedLM"),vbt.forEach(t),Uhr=r($ke," (DistilBERT model)"),$ke.forEach(t),Jhr=i(fe),u7=n(fe,"LI",{});var kke=s(u7);Z1e=n(kke,"STRONG",{});var Fbt=s(Z1e);Yhr=r(Fbt,"electra"),Fbt.forEach(t),Khr=r(kke," \u2014 "),QQ=n(kke,"A",{href:!0});var Tbt=s(QQ);Zhr=r(Tbt,"TFElectraForMaskedLM"),Tbt.forEach(t),epr=r(kke," (ELECTRA model)"),kke.forEach(t),opr=i(fe),_7=n(fe,"LI",{});var Ske=s(_7);ebe=n(Ske,"STRONG",{});var Mbt=s(ebe);rpr=r(Mbt,"flaubert"),Mbt.forEach(t),tpr=r(Ske," \u2014 "),WQ=n(Ske,"A",{href:!0});var Ebt=s(WQ);apr=r(Ebt,"TFFlaubertWithLMHeadModel"),Ebt.forEach(t),npr=r(Ske," (FlauBERT model)"),Ske.forEach(t),spr=i(fe),b7=n(fe,"LI",{});var Rke=s(b7);obe=n(Rke,"STRONG",{});var Cbt=s(obe);lpr=r(Cbt,"funnel"),Cbt.forEach(t),ipr=r(Rke," \u2014 "),HQ=n(Rke,"A",{href:!0});var wbt=s(HQ);dpr=r(wbt,"TFFunnelForMaskedLM"),wbt.forEach(t),cpr=r(Rke," (Funnel Transformer model)"),Rke.forEach(t),fpr=i(fe),v7=n(fe,"LI",{});var Bke=s(v7);rbe=n(Bke,"STRONG",{});var Abt=s(rbe);mpr=r(Abt,"layoutlm"),Abt.forEach(t),gpr=r(Bke," \u2014 "),UQ=n(Bke,"A",{href:!0});var ybt=s(UQ);hpr=r(ybt,"TFLayoutLMForMaskedLM"),ybt.forEach(t),ppr=r(Bke," (LayoutLM model)"),Bke.forEach(t),upr=i(fe),F7=n(fe,"LI",{});var Pke=s(F7);tbe=n(Pke,"STRONG",{});var Lbt=s(tbe);_pr=r(Lbt,"longformer"),Lbt.forEach(t),bpr=r(Pke," \u2014 "),JQ=n(Pke,"A",{href:!0});var xbt=s(JQ);vpr=r(xbt,"TFLongformerForMaskedLM"),xbt.forEach(t),Fpr=r(Pke," (Longformer model)"),Pke.forEach(t),Tpr=i(fe),T7=n(fe,"LI",{});var Ike=s(T7);abe=n(Ike,"STRONG",{});var $bt=s(abe);Mpr=r($bt,"mobilebert"),$bt.forEach(t),Epr=r(Ike," \u2014 "),YQ=n(Ike,"A",{href:!0});var kbt=s(YQ);Cpr=r(kbt,"TFMobileBertForMaskedLM"),kbt.forEach(t),wpr=r(Ike," (MobileBERT model)"),Ike.forEach(t),Apr=i(fe),M7=n(fe,"LI",{});var qke=s(M7);nbe=n(qke,"STRONG",{});var Sbt=s(nbe);ypr=r(Sbt,"mpnet"),Sbt.forEach(t),Lpr=r(qke," \u2014 "),KQ=n(qke,"A",{href:!0});var Rbt=s(KQ);xpr=r(Rbt,"TFMPNetForMaskedLM"),Rbt.forEach(t),$pr=r(qke," (MPNet model)"),qke.forEach(t),kpr=i(fe),E7=n(fe,"LI",{});var Nke=s(E7);sbe=n(Nke,"STRONG",{});var Bbt=s(sbe);Spr=r(Bbt,"rembert"),Bbt.forEach(t),Rpr=r(Nke," \u2014 "),ZQ=n(Nke,"A",{href:!0});var Pbt=s(ZQ);Bpr=r(Pbt,"TFRemBertForMaskedLM"),Pbt.forEach(t),Ppr=r(Nke," (RemBERT model)"),Nke.forEach(t),Ipr=i(fe),C7=n(fe,"LI",{});var jke=s(C7);lbe=n(jke,"STRONG",{});var Ibt=s(lbe);qpr=r(Ibt,"roberta"),Ibt.forEach(t),Npr=r(jke," \u2014 "),eW=n(jke,"A",{href:!0});var qbt=s(eW);jpr=r(qbt,"TFRobertaForMaskedLM"),qbt.forEach(t),Dpr=r(jke," (RoBERTa model)"),jke.forEach(t),Gpr=i(fe),w7=n(fe,"LI",{});var Dke=s(w7);ibe=n(Dke,"STRONG",{});var Nbt=s(ibe);Opr=r(Nbt,"roformer"),Nbt.forEach(t),Vpr=r(Dke," \u2014 "),oW=n(Dke,"A",{href:!0});var jbt=s(oW);Xpr=r(jbt,"TFRoFormerForMaskedLM"),jbt.forEach(t),zpr=r(Dke," (RoFormer model)"),Dke.forEach(t),Qpr=i(fe),A7=n(fe,"LI",{});var Gke=s(A7);dbe=n(Gke,"STRONG",{});var Dbt=s(dbe);Wpr=r(Dbt,"tapas"),Dbt.forEach(t),Hpr=r(Gke," \u2014 "),rW=n(Gke,"A",{href:!0});var Gbt=s(rW);Upr=r(Gbt,"TFTapasForMaskedLM"),Gbt.forEach(t),Jpr=r(Gke," (TAPAS model)"),Gke.forEach(t),Ypr=i(fe),y7=n(fe,"LI",{});var Oke=s(y7);cbe=n(Oke,"STRONG",{});var Obt=s(cbe);Kpr=r(Obt,"xlm"),Obt.forEach(t),Zpr=r(Oke," \u2014 "),tW=n(Oke,"A",{href:!0});var Vbt=s(tW);eur=r(Vbt,"TFXLMWithLMHeadModel"),Vbt.forEach(t),our=r(Oke," (XLM model)"),Oke.forEach(t),rur=i(fe),L7=n(fe,"LI",{});var Vke=s(L7);fbe=n(Vke,"STRONG",{});var Xbt=s(fbe);tur=r(Xbt,"xlm-roberta"),Xbt.forEach(t),aur=r(Vke," \u2014 "),aW=n(Vke,"A",{href:!0});var zbt=s(aW);nur=r(zbt,"TFXLMRobertaForMaskedLM"),zbt.forEach(t),sur=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),fe.forEach(t),lur=i(bl),T(x7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),QIe=i(f),Zd=n(f,"H2",{class:!0});var KNe=s(Zd);$7=n(KNe,"A",{id:!0,class:!0,href:!0});var Qbt=s($7);mbe=n(Qbt,"SPAN",{});var Wbt=s(mbe);T(e8.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),iur=i(KNe),gbe=n(KNe,"SPAN",{});var Hbt=s(gbe);dur=r(Hbt,"TFAutoModelForSeq2SeqLM"),Hbt.forEach(t),KNe.forEach(t),WIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(o8.$$.fragment,vl),cur=i(vl),ec=n(vl,"P",{});var sZ=s(ec);fur=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nW=n(sZ,"A",{href:!0});var Ubt=s(nW);mur=r(Ubt,"from_pretrained()"),Ubt.forEach(t),gur=r(sZ," class method or the "),sW=n(sZ,"A",{href:!0});var Jbt=s(sW);hur=r(Jbt,"from_config()"),Jbt.forEach(t),pur=r(sZ,` class
method.`),sZ.forEach(t),uur=i(vl),r8=n(vl,"P",{});var ZNe=s(r8);_ur=r(ZNe,"This class cannot be instantiated directly using "),hbe=n(ZNe,"CODE",{});var Ybt=s(hbe);bur=r(Ybt,"__init__()"),Ybt.forEach(t),vur=r(ZNe," (throws an error)."),ZNe.forEach(t),Fur=i(vl),$t=n(vl,"DIV",{class:!0});var rA=s($t);T(t8.$$.fragment,rA),Tur=i(rA),pbe=n(rA,"P",{});var Kbt=s(pbe);Mur=r(Kbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kbt.forEach(t),Eur=i(rA),oc=n(rA,"P",{});var lZ=s(oc);Cur=r(lZ,`Note:
Loading a model from its configuration file does `),ube=n(lZ,"STRONG",{});var Zbt=s(ube);wur=r(Zbt,"not"),Zbt.forEach(t),Aur=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(lZ,"A",{href:!0});var e5t=s(lW);yur=r(e5t,"from_pretrained()"),e5t.forEach(t),Lur=r(lZ," to load the model weights."),lZ.forEach(t),xur=i(rA),T(k7.$$.fragment,rA),rA.forEach(t),$ur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(a8.$$.fragment,Fl),kur=i(Fl),_be=n(Fl,"P",{});var o5t=s(_be);Sur=r(o5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o5t.forEach(t),Rur=i(Fl),tn=n(Fl,"P",{});var tA=s(tn);Bur=r(tA,"The model class to instantiate is selected based on the "),bbe=n(tA,"CODE",{});var r5t=s(bbe);Pur=r(r5t,"model_type"),r5t.forEach(t),Iur=r(tA,` property of the config object (either
passed as an argument or loaded from `),vbe=n(tA,"CODE",{});var t5t=s(vbe);qur=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),Nur=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(tA,"CODE",{});var a5t=s(Fbe);jur=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),Dur=r(tA,":"),tA.forEach(t),Gur=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);S7=n(Re,"LI",{});var Xke=s(S7);Tbe=n(Xke,"STRONG",{});var n5t=s(Tbe);Our=r(n5t,"bart"),n5t.forEach(t),Vur=r(Xke," \u2014 "),iW=n(Xke,"A",{href:!0});var s5t=s(iW);Xur=r(s5t,"TFBartForConditionalGeneration"),s5t.forEach(t),zur=r(Xke," (BART model)"),Xke.forEach(t),Qur=i(Re),R7=n(Re,"LI",{});var zke=s(R7);Mbe=n(zke,"STRONG",{});var l5t=s(Mbe);Wur=r(l5t,"blenderbot"),l5t.forEach(t),Hur=r(zke," \u2014 "),dW=n(zke,"A",{href:!0});var i5t=s(dW);Uur=r(i5t,"TFBlenderbotForConditionalGeneration"),i5t.forEach(t),Jur=r(zke," (Blenderbot model)"),zke.forEach(t),Yur=i(Re),B7=n(Re,"LI",{});var Qke=s(B7);Ebe=n(Qke,"STRONG",{});var d5t=s(Ebe);Kur=r(d5t,"blenderbot-small"),d5t.forEach(t),Zur=r(Qke," \u2014 "),cW=n(Qke,"A",{href:!0});var c5t=s(cW);e_r=r(c5t,"TFBlenderbotSmallForConditionalGeneration"),c5t.forEach(t),o_r=r(Qke," (BlenderbotSmall model)"),Qke.forEach(t),r_r=i(Re),P7=n(Re,"LI",{});var Wke=s(P7);Cbe=n(Wke,"STRONG",{});var f5t=s(Cbe);t_r=r(f5t,"encoder-decoder"),f5t.forEach(t),a_r=r(Wke," \u2014 "),fW=n(Wke,"A",{href:!0});var m5t=s(fW);n_r=r(m5t,"TFEncoderDecoderModel"),m5t.forEach(t),s_r=r(Wke," (Encoder decoder model)"),Wke.forEach(t),l_r=i(Re),I7=n(Re,"LI",{});var Hke=s(I7);wbe=n(Hke,"STRONG",{});var g5t=s(wbe);i_r=r(g5t,"led"),g5t.forEach(t),d_r=r(Hke," \u2014 "),mW=n(Hke,"A",{href:!0});var h5t=s(mW);c_r=r(h5t,"TFLEDForConditionalGeneration"),h5t.forEach(t),f_r=r(Hke," (LED model)"),Hke.forEach(t),m_r=i(Re),q7=n(Re,"LI",{});var Uke=s(q7);Abe=n(Uke,"STRONG",{});var p5t=s(Abe);g_r=r(p5t,"marian"),p5t.forEach(t),h_r=r(Uke," \u2014 "),gW=n(Uke,"A",{href:!0});var u5t=s(gW);p_r=r(u5t,"TFMarianMTModel"),u5t.forEach(t),u_r=r(Uke," (Marian model)"),Uke.forEach(t),__r=i(Re),N7=n(Re,"LI",{});var Jke=s(N7);ybe=n(Jke,"STRONG",{});var _5t=s(ybe);b_r=r(_5t,"mbart"),_5t.forEach(t),v_r=r(Jke," \u2014 "),hW=n(Jke,"A",{href:!0});var b5t=s(hW);F_r=r(b5t,"TFMBartForConditionalGeneration"),b5t.forEach(t),T_r=r(Jke," (mBART model)"),Jke.forEach(t),M_r=i(Re),j7=n(Re,"LI",{});var Yke=s(j7);Lbe=n(Yke,"STRONG",{});var v5t=s(Lbe);E_r=r(v5t,"mt5"),v5t.forEach(t),C_r=r(Yke," \u2014 "),pW=n(Yke,"A",{href:!0});var F5t=s(pW);w_r=r(F5t,"TFMT5ForConditionalGeneration"),F5t.forEach(t),A_r=r(Yke," (mT5 model)"),Yke.forEach(t),y_r=i(Re),D7=n(Re,"LI",{});var Kke=s(D7);xbe=n(Kke,"STRONG",{});var T5t=s(xbe);L_r=r(T5t,"pegasus"),T5t.forEach(t),x_r=r(Kke," \u2014 "),uW=n(Kke,"A",{href:!0});var M5t=s(uW);$_r=r(M5t,"TFPegasusForConditionalGeneration"),M5t.forEach(t),k_r=r(Kke," (Pegasus model)"),Kke.forEach(t),S_r=i(Re),G7=n(Re,"LI",{});var Zke=s(G7);$be=n(Zke,"STRONG",{});var E5t=s($be);R_r=r(E5t,"t5"),E5t.forEach(t),B_r=r(Zke," \u2014 "),_W=n(Zke,"A",{href:!0});var C5t=s(_W);P_r=r(C5t,"TFT5ForConditionalGeneration"),C5t.forEach(t),I_r=r(Zke," (T5 model)"),Zke.forEach(t),Re.forEach(t),q_r=i(Fl),T(O7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),HIe=i(f),rc=n(f,"H2",{class:!0});var eje=s(rc);V7=n(eje,"A",{id:!0,class:!0,href:!0});var w5t=s(V7);kbe=n(w5t,"SPAN",{});var A5t=s(kbe);T(n8.$$.fragment,A5t),A5t.forEach(t),w5t.forEach(t),N_r=i(eje),Sbe=n(eje,"SPAN",{});var y5t=s(Sbe);j_r=r(y5t,"TFAutoModelForSequenceClassification"),y5t.forEach(t),eje.forEach(t),UIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(s8.$$.fragment,Tl),D_r=i(Tl),tc=n(Tl,"P",{});var iZ=s(tc);G_r=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bW=n(iZ,"A",{href:!0});var L5t=s(bW);O_r=r(L5t,"from_pretrained()"),L5t.forEach(t),V_r=r(iZ," class method or the "),vW=n(iZ,"A",{href:!0});var x5t=s(vW);X_r=r(x5t,"from_config()"),x5t.forEach(t),z_r=r(iZ,` class
method.`),iZ.forEach(t),Q_r=i(Tl),l8=n(Tl,"P",{});var oje=s(l8);W_r=r(oje,"This class cannot be instantiated directly using "),Rbe=n(oje,"CODE",{});var $5t=s(Rbe);H_r=r($5t,"__init__()"),$5t.forEach(t),U_r=r(oje," (throws an error)."),oje.forEach(t),J_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var aA=s(kt);T(i8.$$.fragment,aA),Y_r=i(aA),Bbe=n(aA,"P",{});var k5t=s(Bbe);K_r=r(k5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k5t.forEach(t),Z_r=i(aA),ac=n(aA,"P",{});var dZ=s(ac);e2r=r(dZ,`Note:
Loading a model from its configuration file does `),Pbe=n(dZ,"STRONG",{});var S5t=s(Pbe);o2r=r(S5t,"not"),S5t.forEach(t),r2r=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(dZ,"A",{href:!0});var R5t=s(FW);t2r=r(R5t,"from_pretrained()"),R5t.forEach(t),a2r=r(dZ," to load the model weights."),dZ.forEach(t),n2r=i(aA),T(X7.$$.fragment,aA),aA.forEach(t),s2r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(d8.$$.fragment,Ml),l2r=i(Ml),Ibe=n(Ml,"P",{});var B5t=s(Ibe);i2r=r(B5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B5t.forEach(t),d2r=i(Ml),an=n(Ml,"P",{});var nA=s(an);c2r=r(nA,"The model class to instantiate is selected based on the "),qbe=n(nA,"CODE",{});var P5t=s(qbe);f2r=r(P5t,"model_type"),P5t.forEach(t),m2r=r(nA,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(nA,"CODE",{});var I5t=s(Nbe);g2r=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),h2r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(nA,"CODE",{});var q5t=s(jbe);p2r=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),u2r=r(nA,":"),nA.forEach(t),_2r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);z7=n(te,"LI",{});var eSe=s(z7);Dbe=n(eSe,"STRONG",{});var N5t=s(Dbe);b2r=r(N5t,"albert"),N5t.forEach(t),v2r=r(eSe," \u2014 "),TW=n(eSe,"A",{href:!0});var j5t=s(TW);F2r=r(j5t,"TFAlbertForSequenceClassification"),j5t.forEach(t),T2r=r(eSe," (ALBERT model)"),eSe.forEach(t),M2r=i(te),Q7=n(te,"LI",{});var oSe=s(Q7);Gbe=n(oSe,"STRONG",{});var D5t=s(Gbe);E2r=r(D5t,"bert"),D5t.forEach(t),C2r=r(oSe," \u2014 "),MW=n(oSe,"A",{href:!0});var G5t=s(MW);w2r=r(G5t,"TFBertForSequenceClassification"),G5t.forEach(t),A2r=r(oSe," (BERT model)"),oSe.forEach(t),y2r=i(te),W7=n(te,"LI",{});var rSe=s(W7);Obe=n(rSe,"STRONG",{});var O5t=s(Obe);L2r=r(O5t,"camembert"),O5t.forEach(t),x2r=r(rSe," \u2014 "),EW=n(rSe,"A",{href:!0});var V5t=s(EW);$2r=r(V5t,"TFCamembertForSequenceClassification"),V5t.forEach(t),k2r=r(rSe," (CamemBERT model)"),rSe.forEach(t),S2r=i(te),H7=n(te,"LI",{});var tSe=s(H7);Vbe=n(tSe,"STRONG",{});var X5t=s(Vbe);R2r=r(X5t,"convbert"),X5t.forEach(t),B2r=r(tSe," \u2014 "),CW=n(tSe,"A",{href:!0});var z5t=s(CW);P2r=r(z5t,"TFConvBertForSequenceClassification"),z5t.forEach(t),I2r=r(tSe," (ConvBERT model)"),tSe.forEach(t),q2r=i(te),U7=n(te,"LI",{});var aSe=s(U7);Xbe=n(aSe,"STRONG",{});var Q5t=s(Xbe);N2r=r(Q5t,"ctrl"),Q5t.forEach(t),j2r=r(aSe," \u2014 "),wW=n(aSe,"A",{href:!0});var W5t=s(wW);D2r=r(W5t,"TFCTRLForSequenceClassification"),W5t.forEach(t),G2r=r(aSe," (CTRL model)"),aSe.forEach(t),O2r=i(te),J7=n(te,"LI",{});var nSe=s(J7);zbe=n(nSe,"STRONG",{});var H5t=s(zbe);V2r=r(H5t,"deberta"),H5t.forEach(t),X2r=r(nSe," \u2014 "),AW=n(nSe,"A",{href:!0});var U5t=s(AW);z2r=r(U5t,"TFDebertaForSequenceClassification"),U5t.forEach(t),Q2r=r(nSe," (DeBERTa model)"),nSe.forEach(t),W2r=i(te),Y7=n(te,"LI",{});var sSe=s(Y7);Qbe=n(sSe,"STRONG",{});var J5t=s(Qbe);H2r=r(J5t,"deberta-v2"),J5t.forEach(t),U2r=r(sSe," \u2014 "),yW=n(sSe,"A",{href:!0});var Y5t=s(yW);J2r=r(Y5t,"TFDebertaV2ForSequenceClassification"),Y5t.forEach(t),Y2r=r(sSe," (DeBERTa-v2 model)"),sSe.forEach(t),K2r=i(te),K7=n(te,"LI",{});var lSe=s(K7);Wbe=n(lSe,"STRONG",{});var K5t=s(Wbe);Z2r=r(K5t,"distilbert"),K5t.forEach(t),e1r=r(lSe," \u2014 "),LW=n(lSe,"A",{href:!0});var Z5t=s(LW);o1r=r(Z5t,"TFDistilBertForSequenceClassification"),Z5t.forEach(t),r1r=r(lSe," (DistilBERT model)"),lSe.forEach(t),t1r=i(te),Z7=n(te,"LI",{});var iSe=s(Z7);Hbe=n(iSe,"STRONG",{});var evt=s(Hbe);a1r=r(evt,"electra"),evt.forEach(t),n1r=r(iSe," \u2014 "),xW=n(iSe,"A",{href:!0});var ovt=s(xW);s1r=r(ovt,"TFElectraForSequenceClassification"),ovt.forEach(t),l1r=r(iSe," (ELECTRA model)"),iSe.forEach(t),i1r=i(te),eM=n(te,"LI",{});var dSe=s(eM);Ube=n(dSe,"STRONG",{});var rvt=s(Ube);d1r=r(rvt,"flaubert"),rvt.forEach(t),c1r=r(dSe," \u2014 "),$W=n(dSe,"A",{href:!0});var tvt=s($W);f1r=r(tvt,"TFFlaubertForSequenceClassification"),tvt.forEach(t),m1r=r(dSe," (FlauBERT model)"),dSe.forEach(t),g1r=i(te),oM=n(te,"LI",{});var cSe=s(oM);Jbe=n(cSe,"STRONG",{});var avt=s(Jbe);h1r=r(avt,"funnel"),avt.forEach(t),p1r=r(cSe," \u2014 "),kW=n(cSe,"A",{href:!0});var nvt=s(kW);u1r=r(nvt,"TFFunnelForSequenceClassification"),nvt.forEach(t),_1r=r(cSe," (Funnel Transformer model)"),cSe.forEach(t),b1r=i(te),rM=n(te,"LI",{});var fSe=s(rM);Ybe=n(fSe,"STRONG",{});var svt=s(Ybe);v1r=r(svt,"gpt2"),svt.forEach(t),F1r=r(fSe," \u2014 "),SW=n(fSe,"A",{href:!0});var lvt=s(SW);T1r=r(lvt,"TFGPT2ForSequenceClassification"),lvt.forEach(t),M1r=r(fSe," (OpenAI GPT-2 model)"),fSe.forEach(t),E1r=i(te),tM=n(te,"LI",{});var mSe=s(tM);Kbe=n(mSe,"STRONG",{});var ivt=s(Kbe);C1r=r(ivt,"gptj"),ivt.forEach(t),w1r=r(mSe," \u2014 "),RW=n(mSe,"A",{href:!0});var dvt=s(RW);A1r=r(dvt,"TFGPTJForSequenceClassification"),dvt.forEach(t),y1r=r(mSe," (GPT-J model)"),mSe.forEach(t),L1r=i(te),aM=n(te,"LI",{});var gSe=s(aM);Zbe=n(gSe,"STRONG",{});var cvt=s(Zbe);x1r=r(cvt,"layoutlm"),cvt.forEach(t),$1r=r(gSe," \u2014 "),BW=n(gSe,"A",{href:!0});var fvt=s(BW);k1r=r(fvt,"TFLayoutLMForSequenceClassification"),fvt.forEach(t),S1r=r(gSe," (LayoutLM model)"),gSe.forEach(t),R1r=i(te),nM=n(te,"LI",{});var hSe=s(nM);e5e=n(hSe,"STRONG",{});var mvt=s(e5e);B1r=r(mvt,"longformer"),mvt.forEach(t),P1r=r(hSe," \u2014 "),PW=n(hSe,"A",{href:!0});var gvt=s(PW);I1r=r(gvt,"TFLongformerForSequenceClassification"),gvt.forEach(t),q1r=r(hSe," (Longformer model)"),hSe.forEach(t),N1r=i(te),sM=n(te,"LI",{});var pSe=s(sM);o5e=n(pSe,"STRONG",{});var hvt=s(o5e);j1r=r(hvt,"mobilebert"),hvt.forEach(t),D1r=r(pSe," \u2014 "),IW=n(pSe,"A",{href:!0});var pvt=s(IW);G1r=r(pvt,"TFMobileBertForSequenceClassification"),pvt.forEach(t),O1r=r(pSe," (MobileBERT model)"),pSe.forEach(t),V1r=i(te),lM=n(te,"LI",{});var uSe=s(lM);r5e=n(uSe,"STRONG",{});var uvt=s(r5e);X1r=r(uvt,"mpnet"),uvt.forEach(t),z1r=r(uSe," \u2014 "),qW=n(uSe,"A",{href:!0});var _vt=s(qW);Q1r=r(_vt,"TFMPNetForSequenceClassification"),_vt.forEach(t),W1r=r(uSe," (MPNet model)"),uSe.forEach(t),H1r=i(te),iM=n(te,"LI",{});var _Se=s(iM);t5e=n(_Se,"STRONG",{});var bvt=s(t5e);U1r=r(bvt,"openai-gpt"),bvt.forEach(t),J1r=r(_Se," \u2014 "),NW=n(_Se,"A",{href:!0});var vvt=s(NW);Y1r=r(vvt,"TFOpenAIGPTForSequenceClassification"),vvt.forEach(t),K1r=r(_Se," (OpenAI GPT model)"),_Se.forEach(t),Z1r=i(te),dM=n(te,"LI",{});var bSe=s(dM);a5e=n(bSe,"STRONG",{});var Fvt=s(a5e);ebr=r(Fvt,"rembert"),Fvt.forEach(t),obr=r(bSe," \u2014 "),jW=n(bSe,"A",{href:!0});var Tvt=s(jW);rbr=r(Tvt,"TFRemBertForSequenceClassification"),Tvt.forEach(t),tbr=r(bSe," (RemBERT model)"),bSe.forEach(t),abr=i(te),cM=n(te,"LI",{});var vSe=s(cM);n5e=n(vSe,"STRONG",{});var Mvt=s(n5e);nbr=r(Mvt,"roberta"),Mvt.forEach(t),sbr=r(vSe," \u2014 "),DW=n(vSe,"A",{href:!0});var Evt=s(DW);lbr=r(Evt,"TFRobertaForSequenceClassification"),Evt.forEach(t),ibr=r(vSe," (RoBERTa model)"),vSe.forEach(t),dbr=i(te),fM=n(te,"LI",{});var FSe=s(fM);s5e=n(FSe,"STRONG",{});var Cvt=s(s5e);cbr=r(Cvt,"roformer"),Cvt.forEach(t),fbr=r(FSe," \u2014 "),GW=n(FSe,"A",{href:!0});var wvt=s(GW);mbr=r(wvt,"TFRoFormerForSequenceClassification"),wvt.forEach(t),gbr=r(FSe," (RoFormer model)"),FSe.forEach(t),hbr=i(te),mM=n(te,"LI",{});var TSe=s(mM);l5e=n(TSe,"STRONG",{});var Avt=s(l5e);pbr=r(Avt,"tapas"),Avt.forEach(t),ubr=r(TSe," \u2014 "),OW=n(TSe,"A",{href:!0});var yvt=s(OW);_br=r(yvt,"TFTapasForSequenceClassification"),yvt.forEach(t),bbr=r(TSe," (TAPAS model)"),TSe.forEach(t),vbr=i(te),gM=n(te,"LI",{});var MSe=s(gM);i5e=n(MSe,"STRONG",{});var Lvt=s(i5e);Fbr=r(Lvt,"transfo-xl"),Lvt.forEach(t),Tbr=r(MSe," \u2014 "),VW=n(MSe,"A",{href:!0});var xvt=s(VW);Mbr=r(xvt,"TFTransfoXLForSequenceClassification"),xvt.forEach(t),Ebr=r(MSe," (Transformer-XL model)"),MSe.forEach(t),Cbr=i(te),hM=n(te,"LI",{});var ESe=s(hM);d5e=n(ESe,"STRONG",{});var $vt=s(d5e);wbr=r($vt,"xlm"),$vt.forEach(t),Abr=r(ESe," \u2014 "),XW=n(ESe,"A",{href:!0});var kvt=s(XW);ybr=r(kvt,"TFXLMForSequenceClassification"),kvt.forEach(t),Lbr=r(ESe," (XLM model)"),ESe.forEach(t),xbr=i(te),pM=n(te,"LI",{});var CSe=s(pM);c5e=n(CSe,"STRONG",{});var Svt=s(c5e);$br=r(Svt,"xlm-roberta"),Svt.forEach(t),kbr=r(CSe," \u2014 "),zW=n(CSe,"A",{href:!0});var Rvt=s(zW);Sbr=r(Rvt,"TFXLMRobertaForSequenceClassification"),Rvt.forEach(t),Rbr=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Bbr=i(te),uM=n(te,"LI",{});var wSe=s(uM);f5e=n(wSe,"STRONG",{});var Bvt=s(f5e);Pbr=r(Bvt,"xlnet"),Bvt.forEach(t),Ibr=r(wSe," \u2014 "),QW=n(wSe,"A",{href:!0});var Pvt=s(QW);qbr=r(Pvt,"TFXLNetForSequenceClassification"),Pvt.forEach(t),Nbr=r(wSe," (XLNet model)"),wSe.forEach(t),te.forEach(t),jbr=i(Ml),T(_M.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),JIe=i(f),nc=n(f,"H2",{class:!0});var rje=s(nc);bM=n(rje,"A",{id:!0,class:!0,href:!0});var Ivt=s(bM);m5e=n(Ivt,"SPAN",{});var qvt=s(m5e);T(c8.$$.fragment,qvt),qvt.forEach(t),Ivt.forEach(t),Dbr=i(rje),g5e=n(rje,"SPAN",{});var Nvt=s(g5e);Gbr=r(Nvt,"TFAutoModelForMultipleChoice"),Nvt.forEach(t),rje.forEach(t),YIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(f8.$$.fragment,El),Obr=i(El),sc=n(El,"P",{});var cZ=s(sc);Vbr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WW=n(cZ,"A",{href:!0});var jvt=s(WW);Xbr=r(jvt,"from_pretrained()"),jvt.forEach(t),zbr=r(cZ," class method or the "),HW=n(cZ,"A",{href:!0});var Dvt=s(HW);Qbr=r(Dvt,"from_config()"),Dvt.forEach(t),Wbr=r(cZ,` class
method.`),cZ.forEach(t),Hbr=i(El),m8=n(El,"P",{});var tje=s(m8);Ubr=r(tje,"This class cannot be instantiated directly using "),h5e=n(tje,"CODE",{});var Gvt=s(h5e);Jbr=r(Gvt,"__init__()"),Gvt.forEach(t),Ybr=r(tje," (throws an error)."),tje.forEach(t),Kbr=i(El),St=n(El,"DIV",{class:!0});var sA=s(St);T(g8.$$.fragment,sA),Zbr=i(sA),p5e=n(sA,"P",{});var Ovt=s(p5e);e5r=r(Ovt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ovt.forEach(t),o5r=i(sA),lc=n(sA,"P",{});var fZ=s(lc);r5r=r(fZ,`Note:
Loading a model from its configuration file does `),u5e=n(fZ,"STRONG",{});var Vvt=s(u5e);t5r=r(Vvt,"not"),Vvt.forEach(t),a5r=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(fZ,"A",{href:!0});var Xvt=s(UW);n5r=r(Xvt,"from_pretrained()"),Xvt.forEach(t),s5r=r(fZ," to load the model weights."),fZ.forEach(t),l5r=i(sA),T(vM.$$.fragment,sA),sA.forEach(t),i5r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(h8.$$.fragment,Cl),d5r=i(Cl),_5e=n(Cl,"P",{});var zvt=s(_5e);c5r=r(zvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zvt.forEach(t),f5r=i(Cl),nn=n(Cl,"P",{});var lA=s(nn);m5r=r(lA,"The model class to instantiate is selected based on the "),b5e=n(lA,"CODE",{});var Qvt=s(b5e);g5r=r(Qvt,"model_type"),Qvt.forEach(t),h5r=r(lA,` property of the config object (either
passed as an argument or loaded from `),v5e=n(lA,"CODE",{});var Wvt=s(v5e);p5r=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),u5r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(lA,"CODE",{});var Hvt=s(F5e);_5r=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),b5r=r(lA,":"),lA.forEach(t),v5r=i(Cl),he=n(Cl,"UL",{});var ue=s(he);FM=n(ue,"LI",{});var ASe=s(FM);T5e=n(ASe,"STRONG",{});var Uvt=s(T5e);F5r=r(Uvt,"albert"),Uvt.forEach(t),T5r=r(ASe," \u2014 "),JW=n(ASe,"A",{href:!0});var Jvt=s(JW);M5r=r(Jvt,"TFAlbertForMultipleChoice"),Jvt.forEach(t),E5r=r(ASe," (ALBERT model)"),ASe.forEach(t),C5r=i(ue),TM=n(ue,"LI",{});var ySe=s(TM);M5e=n(ySe,"STRONG",{});var Yvt=s(M5e);w5r=r(Yvt,"bert"),Yvt.forEach(t),A5r=r(ySe," \u2014 "),YW=n(ySe,"A",{href:!0});var Kvt=s(YW);y5r=r(Kvt,"TFBertForMultipleChoice"),Kvt.forEach(t),L5r=r(ySe," (BERT model)"),ySe.forEach(t),x5r=i(ue),MM=n(ue,"LI",{});var LSe=s(MM);E5e=n(LSe,"STRONG",{});var Zvt=s(E5e);$5r=r(Zvt,"camembert"),Zvt.forEach(t),k5r=r(LSe," \u2014 "),KW=n(LSe,"A",{href:!0});var eFt=s(KW);S5r=r(eFt,"TFCamembertForMultipleChoice"),eFt.forEach(t),R5r=r(LSe," (CamemBERT model)"),LSe.forEach(t),B5r=i(ue),EM=n(ue,"LI",{});var xSe=s(EM);C5e=n(xSe,"STRONG",{});var oFt=s(C5e);P5r=r(oFt,"convbert"),oFt.forEach(t),I5r=r(xSe," \u2014 "),ZW=n(xSe,"A",{href:!0});var rFt=s(ZW);q5r=r(rFt,"TFConvBertForMultipleChoice"),rFt.forEach(t),N5r=r(xSe," (ConvBERT model)"),xSe.forEach(t),j5r=i(ue),CM=n(ue,"LI",{});var $Se=s(CM);w5e=n($Se,"STRONG",{});var tFt=s(w5e);D5r=r(tFt,"distilbert"),tFt.forEach(t),G5r=r($Se," \u2014 "),eH=n($Se,"A",{href:!0});var aFt=s(eH);O5r=r(aFt,"TFDistilBertForMultipleChoice"),aFt.forEach(t),V5r=r($Se," (DistilBERT model)"),$Se.forEach(t),X5r=i(ue),wM=n(ue,"LI",{});var kSe=s(wM);A5e=n(kSe,"STRONG",{});var nFt=s(A5e);z5r=r(nFt,"electra"),nFt.forEach(t),Q5r=r(kSe," \u2014 "),oH=n(kSe,"A",{href:!0});var sFt=s(oH);W5r=r(sFt,"TFElectraForMultipleChoice"),sFt.forEach(t),H5r=r(kSe," (ELECTRA model)"),kSe.forEach(t),U5r=i(ue),AM=n(ue,"LI",{});var SSe=s(AM);y5e=n(SSe,"STRONG",{});var lFt=s(y5e);J5r=r(lFt,"flaubert"),lFt.forEach(t),Y5r=r(SSe," \u2014 "),rH=n(SSe,"A",{href:!0});var iFt=s(rH);K5r=r(iFt,"TFFlaubertForMultipleChoice"),iFt.forEach(t),Z5r=r(SSe," (FlauBERT model)"),SSe.forEach(t),evr=i(ue),yM=n(ue,"LI",{});var RSe=s(yM);L5e=n(RSe,"STRONG",{});var dFt=s(L5e);ovr=r(dFt,"funnel"),dFt.forEach(t),rvr=r(RSe," \u2014 "),tH=n(RSe,"A",{href:!0});var cFt=s(tH);tvr=r(cFt,"TFFunnelForMultipleChoice"),cFt.forEach(t),avr=r(RSe," (Funnel Transformer model)"),RSe.forEach(t),nvr=i(ue),LM=n(ue,"LI",{});var BSe=s(LM);x5e=n(BSe,"STRONG",{});var fFt=s(x5e);svr=r(fFt,"longformer"),fFt.forEach(t),lvr=r(BSe," \u2014 "),aH=n(BSe,"A",{href:!0});var mFt=s(aH);ivr=r(mFt,"TFLongformerForMultipleChoice"),mFt.forEach(t),dvr=r(BSe," (Longformer model)"),BSe.forEach(t),cvr=i(ue),xM=n(ue,"LI",{});var PSe=s(xM);$5e=n(PSe,"STRONG",{});var gFt=s($5e);fvr=r(gFt,"mobilebert"),gFt.forEach(t),mvr=r(PSe," \u2014 "),nH=n(PSe,"A",{href:!0});var hFt=s(nH);gvr=r(hFt,"TFMobileBertForMultipleChoice"),hFt.forEach(t),hvr=r(PSe," (MobileBERT model)"),PSe.forEach(t),pvr=i(ue),$M=n(ue,"LI",{});var ISe=s($M);k5e=n(ISe,"STRONG",{});var pFt=s(k5e);uvr=r(pFt,"mpnet"),pFt.forEach(t),_vr=r(ISe," \u2014 "),sH=n(ISe,"A",{href:!0});var uFt=s(sH);bvr=r(uFt,"TFMPNetForMultipleChoice"),uFt.forEach(t),vvr=r(ISe," (MPNet model)"),ISe.forEach(t),Fvr=i(ue),kM=n(ue,"LI",{});var qSe=s(kM);S5e=n(qSe,"STRONG",{});var _Ft=s(S5e);Tvr=r(_Ft,"rembert"),_Ft.forEach(t),Mvr=r(qSe," \u2014 "),lH=n(qSe,"A",{href:!0});var bFt=s(lH);Evr=r(bFt,"TFRemBertForMultipleChoice"),bFt.forEach(t),Cvr=r(qSe," (RemBERT model)"),qSe.forEach(t),wvr=i(ue),SM=n(ue,"LI",{});var NSe=s(SM);R5e=n(NSe,"STRONG",{});var vFt=s(R5e);Avr=r(vFt,"roberta"),vFt.forEach(t),yvr=r(NSe," \u2014 "),iH=n(NSe,"A",{href:!0});var FFt=s(iH);Lvr=r(FFt,"TFRobertaForMultipleChoice"),FFt.forEach(t),xvr=r(NSe," (RoBERTa model)"),NSe.forEach(t),$vr=i(ue),RM=n(ue,"LI",{});var jSe=s(RM);B5e=n(jSe,"STRONG",{});var TFt=s(B5e);kvr=r(TFt,"roformer"),TFt.forEach(t),Svr=r(jSe," \u2014 "),dH=n(jSe,"A",{href:!0});var MFt=s(dH);Rvr=r(MFt,"TFRoFormerForMultipleChoice"),MFt.forEach(t),Bvr=r(jSe," (RoFormer model)"),jSe.forEach(t),Pvr=i(ue),BM=n(ue,"LI",{});var DSe=s(BM);P5e=n(DSe,"STRONG",{});var EFt=s(P5e);Ivr=r(EFt,"xlm"),EFt.forEach(t),qvr=r(DSe," \u2014 "),cH=n(DSe,"A",{href:!0});var CFt=s(cH);Nvr=r(CFt,"TFXLMForMultipleChoice"),CFt.forEach(t),jvr=r(DSe," (XLM model)"),DSe.forEach(t),Dvr=i(ue),PM=n(ue,"LI",{});var GSe=s(PM);I5e=n(GSe,"STRONG",{});var wFt=s(I5e);Gvr=r(wFt,"xlm-roberta"),wFt.forEach(t),Ovr=r(GSe," \u2014 "),fH=n(GSe,"A",{href:!0});var AFt=s(fH);Vvr=r(AFt,"TFXLMRobertaForMultipleChoice"),AFt.forEach(t),Xvr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),zvr=i(ue),IM=n(ue,"LI",{});var OSe=s(IM);q5e=n(OSe,"STRONG",{});var yFt=s(q5e);Qvr=r(yFt,"xlnet"),yFt.forEach(t),Wvr=r(OSe," \u2014 "),mH=n(OSe,"A",{href:!0});var LFt=s(mH);Hvr=r(LFt,"TFXLNetForMultipleChoice"),LFt.forEach(t),Uvr=r(OSe," (XLNet model)"),OSe.forEach(t),ue.forEach(t),Jvr=i(Cl),T(qM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),KIe=i(f),ic=n(f,"H2",{class:!0});var aje=s(ic);NM=n(aje,"A",{id:!0,class:!0,href:!0});var xFt=s(NM);N5e=n(xFt,"SPAN",{});var $Ft=s(N5e);T(p8.$$.fragment,$Ft),$Ft.forEach(t),xFt.forEach(t),Yvr=i(aje),j5e=n(aje,"SPAN",{});var kFt=s(j5e);Kvr=r(kFt,"TFAutoModelForNextSentencePrediction"),kFt.forEach(t),aje.forEach(t),ZIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(u8.$$.fragment,wl),Zvr=i(wl),dc=n(wl,"P",{});var mZ=s(dc);eFr=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gH=n(mZ,"A",{href:!0});var SFt=s(gH);oFr=r(SFt,"from_pretrained()"),SFt.forEach(t),rFr=r(mZ," class method or the "),hH=n(mZ,"A",{href:!0});var RFt=s(hH);tFr=r(RFt,"from_config()"),RFt.forEach(t),aFr=r(mZ,` class
method.`),mZ.forEach(t),nFr=i(wl),_8=n(wl,"P",{});var nje=s(_8);sFr=r(nje,"This class cannot be instantiated directly using "),D5e=n(nje,"CODE",{});var BFt=s(D5e);lFr=r(BFt,"__init__()"),BFt.forEach(t),iFr=r(nje," (throws an error)."),nje.forEach(t),dFr=i(wl),Rt=n(wl,"DIV",{class:!0});var iA=s(Rt);T(b8.$$.fragment,iA),cFr=i(iA),G5e=n(iA,"P",{});var PFt=s(G5e);fFr=r(PFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PFt.forEach(t),mFr=i(iA),cc=n(iA,"P",{});var gZ=s(cc);gFr=r(gZ,`Note:
Loading a model from its configuration file does `),O5e=n(gZ,"STRONG",{});var IFt=s(O5e);hFr=r(IFt,"not"),IFt.forEach(t),pFr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(gZ,"A",{href:!0});var qFt=s(pH);uFr=r(qFt,"from_pretrained()"),qFt.forEach(t),_Fr=r(gZ," to load the model weights."),gZ.forEach(t),bFr=i(iA),T(jM.$$.fragment,iA),iA.forEach(t),vFr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(v8.$$.fragment,Al),FFr=i(Al),V5e=n(Al,"P",{});var NFt=s(V5e);TFr=r(NFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NFt.forEach(t),MFr=i(Al),sn=n(Al,"P",{});var dA=s(sn);EFr=r(dA,"The model class to instantiate is selected based on the "),X5e=n(dA,"CODE",{});var jFt=s(X5e);CFr=r(jFt,"model_type"),jFt.forEach(t),wFr=r(dA,` property of the config object (either
passed as an argument or loaded from `),z5e=n(dA,"CODE",{});var DFt=s(z5e);AFr=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),yFr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=n(dA,"CODE",{});var GFt=s(Q5e);LFr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),xFr=r(dA,":"),dA.forEach(t),$Fr=i(Al),F8=n(Al,"UL",{});var sje=s(F8);DM=n(sje,"LI",{});var VSe=s(DM);W5e=n(VSe,"STRONG",{});var OFt=s(W5e);kFr=r(OFt,"bert"),OFt.forEach(t),SFr=r(VSe," \u2014 "),uH=n(VSe,"A",{href:!0});var VFt=s(uH);RFr=r(VFt,"TFBertForNextSentencePrediction"),VFt.forEach(t),BFr=r(VSe," (BERT model)"),VSe.forEach(t),PFr=i(sje),GM=n(sje,"LI",{});var XSe=s(GM);H5e=n(XSe,"STRONG",{});var XFt=s(H5e);IFr=r(XFt,"mobilebert"),XFt.forEach(t),qFr=r(XSe," \u2014 "),_H=n(XSe,"A",{href:!0});var zFt=s(_H);NFr=r(zFt,"TFMobileBertForNextSentencePrediction"),zFt.forEach(t),jFr=r(XSe," (MobileBERT model)"),XSe.forEach(t),sje.forEach(t),DFr=i(Al),T(OM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),eqe=i(f),fc=n(f,"H2",{class:!0});var lje=s(fc);VM=n(lje,"A",{id:!0,class:!0,href:!0});var QFt=s(VM);U5e=n(QFt,"SPAN",{});var WFt=s(U5e);T(T8.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),GFr=i(lje),J5e=n(lje,"SPAN",{});var HFt=s(J5e);OFr=r(HFt,"TFAutoModelForTableQuestionAnswering"),HFt.forEach(t),lje.forEach(t),oqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(M8.$$.fragment,yl),VFr=i(yl),mc=n(yl,"P",{});var hZ=s(mc);XFr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bH=n(hZ,"A",{href:!0});var UFt=s(bH);zFr=r(UFt,"from_pretrained()"),UFt.forEach(t),QFr=r(hZ," class method or the "),vH=n(hZ,"A",{href:!0});var JFt=s(vH);WFr=r(JFt,"from_config()"),JFt.forEach(t),HFr=r(hZ,` class
method.`),hZ.forEach(t),UFr=i(yl),E8=n(yl,"P",{});var ije=s(E8);JFr=r(ije,"This class cannot be instantiated directly using "),Y5e=n(ije,"CODE",{});var YFt=s(Y5e);YFr=r(YFt,"__init__()"),YFt.forEach(t),KFr=r(ije," (throws an error)."),ije.forEach(t),ZFr=i(yl),Bt=n(yl,"DIV",{class:!0});var cA=s(Bt);T(C8.$$.fragment,cA),e0r=i(cA),K5e=n(cA,"P",{});var KFt=s(K5e);o0r=r(KFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KFt.forEach(t),r0r=i(cA),gc=n(cA,"P",{});var pZ=s(gc);t0r=r(pZ,`Note:
Loading a model from its configuration file does `),Z5e=n(pZ,"STRONG",{});var ZFt=s(Z5e);a0r=r(ZFt,"not"),ZFt.forEach(t),n0r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(pZ,"A",{href:!0});var e0t=s(FH);s0r=r(e0t,"from_pretrained()"),e0t.forEach(t),l0r=r(pZ," to load the model weights."),pZ.forEach(t),i0r=i(cA),T(XM.$$.fragment,cA),cA.forEach(t),d0r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(w8.$$.fragment,Ll),c0r=i(Ll),eve=n(Ll,"P",{});var o0t=s(eve);f0r=r(o0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o0t.forEach(t),m0r=i(Ll),ln=n(Ll,"P",{});var fA=s(ln);g0r=r(fA,"The model class to instantiate is selected based on the "),ove=n(fA,"CODE",{});var r0t=s(ove);h0r=r(r0t,"model_type"),r0t.forEach(t),p0r=r(fA,` property of the config object (either
passed as an argument or loaded from `),rve=n(fA,"CODE",{});var t0t=s(rve);u0r=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),_0r=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(fA,"CODE",{});var a0t=s(tve);b0r=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),v0r=r(fA,":"),fA.forEach(t),F0r=i(Ll),ave=n(Ll,"UL",{});var n0t=s(ave);zM=n(n0t,"LI",{});var zSe=s(zM);nve=n(zSe,"STRONG",{});var s0t=s(nve);T0r=r(s0t,"tapas"),s0t.forEach(t),M0r=r(zSe," \u2014 "),TH=n(zSe,"A",{href:!0});var l0t=s(TH);E0r=r(l0t,"TFTapasForQuestionAnswering"),l0t.forEach(t),C0r=r(zSe," (TAPAS model)"),zSe.forEach(t),n0t.forEach(t),w0r=i(Ll),T(QM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),rqe=i(f),hc=n(f,"H2",{class:!0});var dje=s(hc);WM=n(dje,"A",{id:!0,class:!0,href:!0});var i0t=s(WM);sve=n(i0t,"SPAN",{});var d0t=s(sve);T(A8.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),A0r=i(dje),lve=n(dje,"SPAN",{});var c0t=s(lve);y0r=r(c0t,"TFAutoModelForTokenClassification"),c0t.forEach(t),dje.forEach(t),tqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(y8.$$.fragment,xl),L0r=i(xl),pc=n(xl,"P",{});var uZ=s(pc);x0r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MH=n(uZ,"A",{href:!0});var f0t=s(MH);$0r=r(f0t,"from_pretrained()"),f0t.forEach(t),k0r=r(uZ," class method or the "),EH=n(uZ,"A",{href:!0});var m0t=s(EH);S0r=r(m0t,"from_config()"),m0t.forEach(t),R0r=r(uZ,` class
method.`),uZ.forEach(t),B0r=i(xl),L8=n(xl,"P",{});var cje=s(L8);P0r=r(cje,"This class cannot be instantiated directly using "),ive=n(cje,"CODE",{});var g0t=s(ive);I0r=r(g0t,"__init__()"),g0t.forEach(t),q0r=r(cje," (throws an error)."),cje.forEach(t),N0r=i(xl),Pt=n(xl,"DIV",{class:!0});var mA=s(Pt);T(x8.$$.fragment,mA),j0r=i(mA),dve=n(mA,"P",{});var h0t=s(dve);D0r=r(h0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h0t.forEach(t),G0r=i(mA),uc=n(mA,"P",{});var _Z=s(uc);O0r=r(_Z,`Note:
Loading a model from its configuration file does `),cve=n(_Z,"STRONG",{});var p0t=s(cve);V0r=r(p0t,"not"),p0t.forEach(t),X0r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(_Z,"A",{href:!0});var u0t=s(CH);z0r=r(u0t,"from_pretrained()"),u0t.forEach(t),Q0r=r(_Z," to load the model weights."),_Z.forEach(t),W0r=i(mA),T(HM.$$.fragment,mA),mA.forEach(t),H0r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T($8.$$.fragment,$l),U0r=i($l),fve=n($l,"P",{});var _0t=s(fve);J0r=r(_0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_0t.forEach(t),Y0r=i($l),dn=n($l,"P",{});var gA=s(dn);K0r=r(gA,"The model class to instantiate is selected based on the "),mve=n(gA,"CODE",{});var b0t=s(mve);Z0r=r(b0t,"model_type"),b0t.forEach(t),eTr=r(gA,` property of the config object (either
passed as an argument or loaded from `),gve=n(gA,"CODE",{});var v0t=s(gve);oTr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),rTr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(gA,"CODE",{});var F0t=s(hve);tTr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),aTr=r(gA,":"),gA.forEach(t),nTr=i($l),de=n($l,"UL",{});var me=s(de);UM=n(me,"LI",{});var QSe=s(UM);pve=n(QSe,"STRONG",{});var T0t=s(pve);sTr=r(T0t,"albert"),T0t.forEach(t),lTr=r(QSe," \u2014 "),wH=n(QSe,"A",{href:!0});var M0t=s(wH);iTr=r(M0t,"TFAlbertForTokenClassification"),M0t.forEach(t),dTr=r(QSe," (ALBERT model)"),QSe.forEach(t),cTr=i(me),JM=n(me,"LI",{});var WSe=s(JM);uve=n(WSe,"STRONG",{});var E0t=s(uve);fTr=r(E0t,"bert"),E0t.forEach(t),mTr=r(WSe," \u2014 "),AH=n(WSe,"A",{href:!0});var C0t=s(AH);gTr=r(C0t,"TFBertForTokenClassification"),C0t.forEach(t),hTr=r(WSe," (BERT model)"),WSe.forEach(t),pTr=i(me),YM=n(me,"LI",{});var HSe=s(YM);_ve=n(HSe,"STRONG",{});var w0t=s(_ve);uTr=r(w0t,"camembert"),w0t.forEach(t),_Tr=r(HSe," \u2014 "),yH=n(HSe,"A",{href:!0});var A0t=s(yH);bTr=r(A0t,"TFCamembertForTokenClassification"),A0t.forEach(t),vTr=r(HSe," (CamemBERT model)"),HSe.forEach(t),FTr=i(me),KM=n(me,"LI",{});var USe=s(KM);bve=n(USe,"STRONG",{});var y0t=s(bve);TTr=r(y0t,"convbert"),y0t.forEach(t),MTr=r(USe," \u2014 "),LH=n(USe,"A",{href:!0});var L0t=s(LH);ETr=r(L0t,"TFConvBertForTokenClassification"),L0t.forEach(t),CTr=r(USe," (ConvBERT model)"),USe.forEach(t),wTr=i(me),ZM=n(me,"LI",{});var JSe=s(ZM);vve=n(JSe,"STRONG",{});var x0t=s(vve);ATr=r(x0t,"deberta"),x0t.forEach(t),yTr=r(JSe," \u2014 "),xH=n(JSe,"A",{href:!0});var $0t=s(xH);LTr=r($0t,"TFDebertaForTokenClassification"),$0t.forEach(t),xTr=r(JSe," (DeBERTa model)"),JSe.forEach(t),$Tr=i(me),e4=n(me,"LI",{});var YSe=s(e4);Fve=n(YSe,"STRONG",{});var k0t=s(Fve);kTr=r(k0t,"deberta-v2"),k0t.forEach(t),STr=r(YSe," \u2014 "),$H=n(YSe,"A",{href:!0});var S0t=s($H);RTr=r(S0t,"TFDebertaV2ForTokenClassification"),S0t.forEach(t),BTr=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),PTr=i(me),o4=n(me,"LI",{});var KSe=s(o4);Tve=n(KSe,"STRONG",{});var R0t=s(Tve);ITr=r(R0t,"distilbert"),R0t.forEach(t),qTr=r(KSe," \u2014 "),kH=n(KSe,"A",{href:!0});var B0t=s(kH);NTr=r(B0t,"TFDistilBertForTokenClassification"),B0t.forEach(t),jTr=r(KSe," (DistilBERT model)"),KSe.forEach(t),DTr=i(me),r4=n(me,"LI",{});var ZSe=s(r4);Mve=n(ZSe,"STRONG",{});var P0t=s(Mve);GTr=r(P0t,"electra"),P0t.forEach(t),OTr=r(ZSe," \u2014 "),SH=n(ZSe,"A",{href:!0});var I0t=s(SH);VTr=r(I0t,"TFElectraForTokenClassification"),I0t.forEach(t),XTr=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),zTr=i(me),t4=n(me,"LI",{});var eRe=s(t4);Eve=n(eRe,"STRONG",{});var q0t=s(Eve);QTr=r(q0t,"flaubert"),q0t.forEach(t),WTr=r(eRe," \u2014 "),RH=n(eRe,"A",{href:!0});var N0t=s(RH);HTr=r(N0t,"TFFlaubertForTokenClassification"),N0t.forEach(t),UTr=r(eRe," (FlauBERT model)"),eRe.forEach(t),JTr=i(me),a4=n(me,"LI",{});var oRe=s(a4);Cve=n(oRe,"STRONG",{});var j0t=s(Cve);YTr=r(j0t,"funnel"),j0t.forEach(t),KTr=r(oRe," \u2014 "),BH=n(oRe,"A",{href:!0});var D0t=s(BH);ZTr=r(D0t,"TFFunnelForTokenClassification"),D0t.forEach(t),e7r=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),o7r=i(me),n4=n(me,"LI",{});var rRe=s(n4);wve=n(rRe,"STRONG",{});var G0t=s(wve);r7r=r(G0t,"layoutlm"),G0t.forEach(t),t7r=r(rRe," \u2014 "),PH=n(rRe,"A",{href:!0});var O0t=s(PH);a7r=r(O0t,"TFLayoutLMForTokenClassification"),O0t.forEach(t),n7r=r(rRe," (LayoutLM model)"),rRe.forEach(t),s7r=i(me),s4=n(me,"LI",{});var tRe=s(s4);Ave=n(tRe,"STRONG",{});var V0t=s(Ave);l7r=r(V0t,"longformer"),V0t.forEach(t),i7r=r(tRe," \u2014 "),IH=n(tRe,"A",{href:!0});var X0t=s(IH);d7r=r(X0t,"TFLongformerForTokenClassification"),X0t.forEach(t),c7r=r(tRe," (Longformer model)"),tRe.forEach(t),f7r=i(me),l4=n(me,"LI",{});var aRe=s(l4);yve=n(aRe,"STRONG",{});var z0t=s(yve);m7r=r(z0t,"mobilebert"),z0t.forEach(t),g7r=r(aRe," \u2014 "),qH=n(aRe,"A",{href:!0});var Q0t=s(qH);h7r=r(Q0t,"TFMobileBertForTokenClassification"),Q0t.forEach(t),p7r=r(aRe," (MobileBERT model)"),aRe.forEach(t),u7r=i(me),i4=n(me,"LI",{});var nRe=s(i4);Lve=n(nRe,"STRONG",{});var W0t=s(Lve);_7r=r(W0t,"mpnet"),W0t.forEach(t),b7r=r(nRe," \u2014 "),NH=n(nRe,"A",{href:!0});var H0t=s(NH);v7r=r(H0t,"TFMPNetForTokenClassification"),H0t.forEach(t),F7r=r(nRe," (MPNet model)"),nRe.forEach(t),T7r=i(me),d4=n(me,"LI",{});var sRe=s(d4);xve=n(sRe,"STRONG",{});var U0t=s(xve);M7r=r(U0t,"rembert"),U0t.forEach(t),E7r=r(sRe," \u2014 "),jH=n(sRe,"A",{href:!0});var J0t=s(jH);C7r=r(J0t,"TFRemBertForTokenClassification"),J0t.forEach(t),w7r=r(sRe," (RemBERT model)"),sRe.forEach(t),A7r=i(me),c4=n(me,"LI",{});var lRe=s(c4);$ve=n(lRe,"STRONG",{});var Y0t=s($ve);y7r=r(Y0t,"roberta"),Y0t.forEach(t),L7r=r(lRe," \u2014 "),DH=n(lRe,"A",{href:!0});var K0t=s(DH);x7r=r(K0t,"TFRobertaForTokenClassification"),K0t.forEach(t),$7r=r(lRe," (RoBERTa model)"),lRe.forEach(t),k7r=i(me),f4=n(me,"LI",{});var iRe=s(f4);kve=n(iRe,"STRONG",{});var Z0t=s(kve);S7r=r(Z0t,"roformer"),Z0t.forEach(t),R7r=r(iRe," \u2014 "),GH=n(iRe,"A",{href:!0});var eTt=s(GH);B7r=r(eTt,"TFRoFormerForTokenClassification"),eTt.forEach(t),P7r=r(iRe," (RoFormer model)"),iRe.forEach(t),I7r=i(me),m4=n(me,"LI",{});var dRe=s(m4);Sve=n(dRe,"STRONG",{});var oTt=s(Sve);q7r=r(oTt,"xlm"),oTt.forEach(t),N7r=r(dRe," \u2014 "),OH=n(dRe,"A",{href:!0});var rTt=s(OH);j7r=r(rTt,"TFXLMForTokenClassification"),rTt.forEach(t),D7r=r(dRe," (XLM model)"),dRe.forEach(t),G7r=i(me),g4=n(me,"LI",{});var cRe=s(g4);Rve=n(cRe,"STRONG",{});var tTt=s(Rve);O7r=r(tTt,"xlm-roberta"),tTt.forEach(t),V7r=r(cRe," \u2014 "),VH=n(cRe,"A",{href:!0});var aTt=s(VH);X7r=r(aTt,"TFXLMRobertaForTokenClassification"),aTt.forEach(t),z7r=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Q7r=i(me),h4=n(me,"LI",{});var fRe=s(h4);Bve=n(fRe,"STRONG",{});var nTt=s(Bve);W7r=r(nTt,"xlnet"),nTt.forEach(t),H7r=r(fRe," \u2014 "),XH=n(fRe,"A",{href:!0});var sTt=s(XH);U7r=r(sTt,"TFXLNetForTokenClassification"),sTt.forEach(t),J7r=r(fRe," (XLNet model)"),fRe.forEach(t),me.forEach(t),Y7r=i($l),T(p4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),aqe=i(f),_c=n(f,"H2",{class:!0});var fje=s(_c);u4=n(fje,"A",{id:!0,class:!0,href:!0});var lTt=s(u4);Pve=n(lTt,"SPAN",{});var iTt=s(Pve);T(k8.$$.fragment,iTt),iTt.forEach(t),lTt.forEach(t),K7r=i(fje),Ive=n(fje,"SPAN",{});var dTt=s(Ive);Z7r=r(dTt,"TFAutoModelForQuestionAnswering"),dTt.forEach(t),fje.forEach(t),nqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(S8.$$.fragment,kl),eMr=i(kl),bc=n(kl,"P",{});var bZ=s(bc);oMr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zH=n(bZ,"A",{href:!0});var cTt=s(zH);rMr=r(cTt,"from_pretrained()"),cTt.forEach(t),tMr=r(bZ," class method or the "),QH=n(bZ,"A",{href:!0});var fTt=s(QH);aMr=r(fTt,"from_config()"),fTt.forEach(t),nMr=r(bZ,` class
method.`),bZ.forEach(t),sMr=i(kl),R8=n(kl,"P",{});var mje=s(R8);lMr=r(mje,"This class cannot be instantiated directly using "),qve=n(mje,"CODE",{});var mTt=s(qve);iMr=r(mTt,"__init__()"),mTt.forEach(t),dMr=r(mje," (throws an error)."),mje.forEach(t),cMr=i(kl),It=n(kl,"DIV",{class:!0});var hA=s(It);T(B8.$$.fragment,hA),fMr=i(hA),Nve=n(hA,"P",{});var gTt=s(Nve);mMr=r(gTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gTt.forEach(t),gMr=i(hA),vc=n(hA,"P",{});var vZ=s(vc);hMr=r(vZ,`Note:
Loading a model from its configuration file does `),jve=n(vZ,"STRONG",{});var hTt=s(jve);pMr=r(hTt,"not"),hTt.forEach(t),uMr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(vZ,"A",{href:!0});var pTt=s(WH);_Mr=r(pTt,"from_pretrained()"),pTt.forEach(t),bMr=r(vZ," to load the model weights."),vZ.forEach(t),vMr=i(hA),T(_4.$$.fragment,hA),hA.forEach(t),FMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(P8.$$.fragment,Sl),TMr=i(Sl),Dve=n(Sl,"P",{});var uTt=s(Dve);MMr=r(uTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uTt.forEach(t),EMr=i(Sl),cn=n(Sl,"P",{});var pA=s(cn);CMr=r(pA,"The model class to instantiate is selected based on the "),Gve=n(pA,"CODE",{});var _Tt=s(Gve);wMr=r(_Tt,"model_type"),_Tt.forEach(t),AMr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(pA,"CODE",{});var bTt=s(Ove);yMr=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),LMr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(pA,"CODE",{});var vTt=s(Vve);xMr=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),$Mr=r(pA,":"),pA.forEach(t),kMr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);b4=n(ge,"LI",{});var mRe=s(b4);Xve=n(mRe,"STRONG",{});var FTt=s(Xve);SMr=r(FTt,"albert"),FTt.forEach(t),RMr=r(mRe," \u2014 "),HH=n(mRe,"A",{href:!0});var TTt=s(HH);BMr=r(TTt,"TFAlbertForQuestionAnswering"),TTt.forEach(t),PMr=r(mRe," (ALBERT model)"),mRe.forEach(t),IMr=i(ge),v4=n(ge,"LI",{});var gRe=s(v4);zve=n(gRe,"STRONG",{});var MTt=s(zve);qMr=r(MTt,"bert"),MTt.forEach(t),NMr=r(gRe," \u2014 "),UH=n(gRe,"A",{href:!0});var ETt=s(UH);jMr=r(ETt,"TFBertForQuestionAnswering"),ETt.forEach(t),DMr=r(gRe," (BERT model)"),gRe.forEach(t),GMr=i(ge),F4=n(ge,"LI",{});var hRe=s(F4);Qve=n(hRe,"STRONG",{});var CTt=s(Qve);OMr=r(CTt,"camembert"),CTt.forEach(t),VMr=r(hRe," \u2014 "),JH=n(hRe,"A",{href:!0});var wTt=s(JH);XMr=r(wTt,"TFCamembertForQuestionAnswering"),wTt.forEach(t),zMr=r(hRe," (CamemBERT model)"),hRe.forEach(t),QMr=i(ge),T4=n(ge,"LI",{});var pRe=s(T4);Wve=n(pRe,"STRONG",{});var ATt=s(Wve);WMr=r(ATt,"convbert"),ATt.forEach(t),HMr=r(pRe," \u2014 "),YH=n(pRe,"A",{href:!0});var yTt=s(YH);UMr=r(yTt,"TFConvBertForQuestionAnswering"),yTt.forEach(t),JMr=r(pRe," (ConvBERT model)"),pRe.forEach(t),YMr=i(ge),M4=n(ge,"LI",{});var uRe=s(M4);Hve=n(uRe,"STRONG",{});var LTt=s(Hve);KMr=r(LTt,"deberta"),LTt.forEach(t),ZMr=r(uRe," \u2014 "),KH=n(uRe,"A",{href:!0});var xTt=s(KH);e4r=r(xTt,"TFDebertaForQuestionAnswering"),xTt.forEach(t),o4r=r(uRe," (DeBERTa model)"),uRe.forEach(t),r4r=i(ge),E4=n(ge,"LI",{});var _Re=s(E4);Uve=n(_Re,"STRONG",{});var $Tt=s(Uve);t4r=r($Tt,"deberta-v2"),$Tt.forEach(t),a4r=r(_Re," \u2014 "),ZH=n(_Re,"A",{href:!0});var kTt=s(ZH);n4r=r(kTt,"TFDebertaV2ForQuestionAnswering"),kTt.forEach(t),s4r=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),l4r=i(ge),C4=n(ge,"LI",{});var bRe=s(C4);Jve=n(bRe,"STRONG",{});var STt=s(Jve);i4r=r(STt,"distilbert"),STt.forEach(t),d4r=r(bRe," \u2014 "),eU=n(bRe,"A",{href:!0});var RTt=s(eU);c4r=r(RTt,"TFDistilBertForQuestionAnswering"),RTt.forEach(t),f4r=r(bRe," (DistilBERT model)"),bRe.forEach(t),m4r=i(ge),w4=n(ge,"LI",{});var vRe=s(w4);Yve=n(vRe,"STRONG",{});var BTt=s(Yve);g4r=r(BTt,"electra"),BTt.forEach(t),h4r=r(vRe," \u2014 "),oU=n(vRe,"A",{href:!0});var PTt=s(oU);p4r=r(PTt,"TFElectraForQuestionAnswering"),PTt.forEach(t),u4r=r(vRe," (ELECTRA model)"),vRe.forEach(t),_4r=i(ge),A4=n(ge,"LI",{});var FRe=s(A4);Kve=n(FRe,"STRONG",{});var ITt=s(Kve);b4r=r(ITt,"flaubert"),ITt.forEach(t),v4r=r(FRe," \u2014 "),rU=n(FRe,"A",{href:!0});var qTt=s(rU);F4r=r(qTt,"TFFlaubertForQuestionAnsweringSimple"),qTt.forEach(t),T4r=r(FRe," (FlauBERT model)"),FRe.forEach(t),M4r=i(ge),y4=n(ge,"LI",{});var TRe=s(y4);Zve=n(TRe,"STRONG",{});var NTt=s(Zve);E4r=r(NTt,"funnel"),NTt.forEach(t),C4r=r(TRe," \u2014 "),tU=n(TRe,"A",{href:!0});var jTt=s(tU);w4r=r(jTt,"TFFunnelForQuestionAnswering"),jTt.forEach(t),A4r=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),y4r=i(ge),L4=n(ge,"LI",{});var MRe=s(L4);eFe=n(MRe,"STRONG",{});var DTt=s(eFe);L4r=r(DTt,"gptj"),DTt.forEach(t),x4r=r(MRe," \u2014 "),aU=n(MRe,"A",{href:!0});var GTt=s(aU);$4r=r(GTt,"TFGPTJForQuestionAnswering"),GTt.forEach(t),k4r=r(MRe," (GPT-J model)"),MRe.forEach(t),S4r=i(ge),x4=n(ge,"LI",{});var ERe=s(x4);oFe=n(ERe,"STRONG",{});var OTt=s(oFe);R4r=r(OTt,"longformer"),OTt.forEach(t),B4r=r(ERe," \u2014 "),nU=n(ERe,"A",{href:!0});var VTt=s(nU);P4r=r(VTt,"TFLongformerForQuestionAnswering"),VTt.forEach(t),I4r=r(ERe," (Longformer model)"),ERe.forEach(t),q4r=i(ge),$4=n(ge,"LI",{});var CRe=s($4);rFe=n(CRe,"STRONG",{});var XTt=s(rFe);N4r=r(XTt,"mobilebert"),XTt.forEach(t),j4r=r(CRe," \u2014 "),sU=n(CRe,"A",{href:!0});var zTt=s(sU);D4r=r(zTt,"TFMobileBertForQuestionAnswering"),zTt.forEach(t),G4r=r(CRe," (MobileBERT model)"),CRe.forEach(t),O4r=i(ge),k4=n(ge,"LI",{});var wRe=s(k4);tFe=n(wRe,"STRONG",{});var QTt=s(tFe);V4r=r(QTt,"mpnet"),QTt.forEach(t),X4r=r(wRe," \u2014 "),lU=n(wRe,"A",{href:!0});var WTt=s(lU);z4r=r(WTt,"TFMPNetForQuestionAnswering"),WTt.forEach(t),Q4r=r(wRe," (MPNet model)"),wRe.forEach(t),W4r=i(ge),S4=n(ge,"LI",{});var ARe=s(S4);aFe=n(ARe,"STRONG",{});var HTt=s(aFe);H4r=r(HTt,"rembert"),HTt.forEach(t),U4r=r(ARe," \u2014 "),iU=n(ARe,"A",{href:!0});var UTt=s(iU);J4r=r(UTt,"TFRemBertForQuestionAnswering"),UTt.forEach(t),Y4r=r(ARe," (RemBERT model)"),ARe.forEach(t),K4r=i(ge),R4=n(ge,"LI",{});var yRe=s(R4);nFe=n(yRe,"STRONG",{});var JTt=s(nFe);Z4r=r(JTt,"roberta"),JTt.forEach(t),eEr=r(yRe," \u2014 "),dU=n(yRe,"A",{href:!0});var YTt=s(dU);oEr=r(YTt,"TFRobertaForQuestionAnswering"),YTt.forEach(t),rEr=r(yRe," (RoBERTa model)"),yRe.forEach(t),tEr=i(ge),B4=n(ge,"LI",{});var LRe=s(B4);sFe=n(LRe,"STRONG",{});var KTt=s(sFe);aEr=r(KTt,"roformer"),KTt.forEach(t),nEr=r(LRe," \u2014 "),cU=n(LRe,"A",{href:!0});var ZTt=s(cU);sEr=r(ZTt,"TFRoFormerForQuestionAnswering"),ZTt.forEach(t),lEr=r(LRe," (RoFormer model)"),LRe.forEach(t),iEr=i(ge),P4=n(ge,"LI",{});var xRe=s(P4);lFe=n(xRe,"STRONG",{});var e7t=s(lFe);dEr=r(e7t,"xlm"),e7t.forEach(t),cEr=r(xRe," \u2014 "),fU=n(xRe,"A",{href:!0});var o7t=s(fU);fEr=r(o7t,"TFXLMForQuestionAnsweringSimple"),o7t.forEach(t),mEr=r(xRe," (XLM model)"),xRe.forEach(t),gEr=i(ge),I4=n(ge,"LI",{});var $Re=s(I4);iFe=n($Re,"STRONG",{});var r7t=s(iFe);hEr=r(r7t,"xlm-roberta"),r7t.forEach(t),pEr=r($Re," \u2014 "),mU=n($Re,"A",{href:!0});var t7t=s(mU);uEr=r(t7t,"TFXLMRobertaForQuestionAnswering"),t7t.forEach(t),_Er=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),bEr=i(ge),q4=n(ge,"LI",{});var kRe=s(q4);dFe=n(kRe,"STRONG",{});var a7t=s(dFe);vEr=r(a7t,"xlnet"),a7t.forEach(t),FEr=r(kRe," \u2014 "),gU=n(kRe,"A",{href:!0});var n7t=s(gU);TEr=r(n7t,"TFXLNetForQuestionAnsweringSimple"),n7t.forEach(t),MEr=r(kRe," (XLNet model)"),kRe.forEach(t),ge.forEach(t),EEr=i(Sl),T(N4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),sqe=i(f),Fc=n(f,"H2",{class:!0});var gje=s(Fc);j4=n(gje,"A",{id:!0,class:!0,href:!0});var s7t=s(j4);cFe=n(s7t,"SPAN",{});var l7t=s(cFe);T(I8.$$.fragment,l7t),l7t.forEach(t),s7t.forEach(t),CEr=i(gje),fFe=n(gje,"SPAN",{});var i7t=s(fFe);wEr=r(i7t,"TFAutoModelForVision2Seq"),i7t.forEach(t),gje.forEach(t),lqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(q8.$$.fragment,Rl),AEr=i(Rl),Tc=n(Rl,"P",{});var FZ=s(Tc);yEr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hU=n(FZ,"A",{href:!0});var d7t=s(hU);LEr=r(d7t,"from_pretrained()"),d7t.forEach(t),xEr=r(FZ," class method or the "),pU=n(FZ,"A",{href:!0});var c7t=s(pU);$Er=r(c7t,"from_config()"),c7t.forEach(t),kEr=r(FZ,` class
method.`),FZ.forEach(t),SEr=i(Rl),N8=n(Rl,"P",{});var hje=s(N8);REr=r(hje,"This class cannot be instantiated directly using "),mFe=n(hje,"CODE",{});var f7t=s(mFe);BEr=r(f7t,"__init__()"),f7t.forEach(t),PEr=r(hje," (throws an error)."),hje.forEach(t),IEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var uA=s(qt);T(j8.$$.fragment,uA),qEr=i(uA),gFe=n(uA,"P",{});var m7t=s(gFe);NEr=r(m7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m7t.forEach(t),jEr=i(uA),Mc=n(uA,"P",{});var TZ=s(Mc);DEr=r(TZ,`Note:
Loading a model from its configuration file does `),hFe=n(TZ,"STRONG",{});var g7t=s(hFe);GEr=r(g7t,"not"),g7t.forEach(t),OEr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(TZ,"A",{href:!0});var h7t=s(uU);VEr=r(h7t,"from_pretrained()"),h7t.forEach(t),XEr=r(TZ," to load the model weights."),TZ.forEach(t),zEr=i(uA),T(D4.$$.fragment,uA),uA.forEach(t),QEr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(D8.$$.fragment,Bl),WEr=i(Bl),pFe=n(Bl,"P",{});var p7t=s(pFe);HEr=r(p7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p7t.forEach(t),UEr=i(Bl),fn=n(Bl,"P",{});var _A=s(fn);JEr=r(_A,"The model class to instantiate is selected based on the "),uFe=n(_A,"CODE",{});var u7t=s(uFe);YEr=r(u7t,"model_type"),u7t.forEach(t),KEr=r(_A,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(_A,"CODE",{});var _7t=s(_Fe);ZEr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),eCr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(_A,"CODE",{});var b7t=s(bFe);oCr=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),rCr=r(_A,":"),_A.forEach(t),tCr=i(Bl),vFe=n(Bl,"UL",{});var v7t=s(vFe);G4=n(v7t,"LI",{});var SRe=s(G4);FFe=n(SRe,"STRONG",{});var F7t=s(FFe);aCr=r(F7t,"vision-encoder-decoder"),F7t.forEach(t),nCr=r(SRe," \u2014 "),_U=n(SRe,"A",{href:!0});var T7t=s(_U);sCr=r(T7t,"TFVisionEncoderDecoderModel"),T7t.forEach(t),lCr=r(SRe," (Vision Encoder decoder model)"),SRe.forEach(t),v7t.forEach(t),iCr=i(Bl),T(O4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),iqe=i(f),Ec=n(f,"H2",{class:!0});var pje=s(Ec);V4=n(pje,"A",{id:!0,class:!0,href:!0});var M7t=s(V4);TFe=n(M7t,"SPAN",{});var E7t=s(TFe);T(G8.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),dCr=i(pje),MFe=n(pje,"SPAN",{});var C7t=s(MFe);cCr=r(C7t,"TFAutoModelForSpeechSeq2Seq"),C7t.forEach(t),pje.forEach(t),dqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(O8.$$.fragment,Pl),fCr=i(Pl),Cc=n(Pl,"P",{});var MZ=s(Cc);mCr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bU=n(MZ,"A",{href:!0});var w7t=s(bU);gCr=r(w7t,"from_pretrained()"),w7t.forEach(t),hCr=r(MZ," class method or the "),vU=n(MZ,"A",{href:!0});var A7t=s(vU);pCr=r(A7t,"from_config()"),A7t.forEach(t),uCr=r(MZ,` class
method.`),MZ.forEach(t),_Cr=i(Pl),V8=n(Pl,"P",{});var uje=s(V8);bCr=r(uje,"This class cannot be instantiated directly using "),EFe=n(uje,"CODE",{});var y7t=s(EFe);vCr=r(y7t,"__init__()"),y7t.forEach(t),FCr=r(uje," (throws an error)."),uje.forEach(t),TCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var bA=s(Nt);T(X8.$$.fragment,bA),MCr=i(bA),CFe=n(bA,"P",{});var L7t=s(CFe);ECr=r(L7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),L7t.forEach(t),CCr=i(bA),wc=n(bA,"P",{});var EZ=s(wc);wCr=r(EZ,`Note:
Loading a model from its configuration file does `),wFe=n(EZ,"STRONG",{});var x7t=s(wFe);ACr=r(x7t,"not"),x7t.forEach(t),yCr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(EZ,"A",{href:!0});var $7t=s(FU);LCr=r($7t,"from_pretrained()"),$7t.forEach(t),xCr=r(EZ," to load the model weights."),EZ.forEach(t),$Cr=i(bA),T(X4.$$.fragment,bA),bA.forEach(t),kCr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(z8.$$.fragment,Il),SCr=i(Il),AFe=n(Il,"P",{});var k7t=s(AFe);RCr=r(k7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k7t.forEach(t),BCr=i(Il),mn=n(Il,"P",{});var vA=s(mn);PCr=r(vA,"The model class to instantiate is selected based on the "),yFe=n(vA,"CODE",{});var S7t=s(yFe);ICr=r(S7t,"model_type"),S7t.forEach(t),qCr=r(vA,` property of the config object (either
passed as an argument or loaded from `),LFe=n(vA,"CODE",{});var R7t=s(LFe);NCr=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),jCr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(vA,"CODE",{});var B7t=s(xFe);DCr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),GCr=r(vA,":"),vA.forEach(t),OCr=i(Il),$Fe=n(Il,"UL",{});var P7t=s($Fe);z4=n(P7t,"LI",{});var RRe=s(z4);kFe=n(RRe,"STRONG",{});var I7t=s(kFe);VCr=r(I7t,"speech_to_text"),I7t.forEach(t),XCr=r(RRe," \u2014 "),TU=n(RRe,"A",{href:!0});var q7t=s(TU);zCr=r(q7t,"TFSpeech2TextForConditionalGeneration"),q7t.forEach(t),QCr=r(RRe," (Speech2Text model)"),RRe.forEach(t),P7t.forEach(t),WCr=i(Il),T(Q4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),cqe=i(f),Ac=n(f,"H2",{class:!0});var _je=s(Ac);W4=n(_je,"A",{id:!0,class:!0,href:!0});var N7t=s(W4);SFe=n(N7t,"SPAN",{});var j7t=s(SFe);T(Q8.$$.fragment,j7t),j7t.forEach(t),N7t.forEach(t),HCr=i(_je),RFe=n(_je,"SPAN",{});var D7t=s(RFe);UCr=r(D7t,"FlaxAutoModel"),D7t.forEach(t),_je.forEach(t),fqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(W8.$$.fragment,ql),JCr=i(ql),yc=n(ql,"P",{});var CZ=s(yc);YCr=r(CZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MU=n(CZ,"A",{href:!0});var G7t=s(MU);KCr=r(G7t,"from_pretrained()"),G7t.forEach(t),ZCr=r(CZ," class method or the "),EU=n(CZ,"A",{href:!0});var O7t=s(EU);e3r=r(O7t,"from_config()"),O7t.forEach(t),o3r=r(CZ,` class
method.`),CZ.forEach(t),r3r=i(ql),H8=n(ql,"P",{});var bje=s(H8);t3r=r(bje,"This class cannot be instantiated directly using "),BFe=n(bje,"CODE",{});var V7t=s(BFe);a3r=r(V7t,"__init__()"),V7t.forEach(t),n3r=r(bje," (throws an error)."),bje.forEach(t),s3r=i(ql),jt=n(ql,"DIV",{class:!0});var FA=s(jt);T(U8.$$.fragment,FA),l3r=i(FA),PFe=n(FA,"P",{});var X7t=s(PFe);i3r=r(X7t,"Instantiates one of the base model classes of the library from a configuration."),X7t.forEach(t),d3r=i(FA),Lc=n(FA,"P",{});var wZ=s(Lc);c3r=r(wZ,`Note:
Loading a model from its configuration file does `),IFe=n(wZ,"STRONG",{});var z7t=s(IFe);f3r=r(z7t,"not"),z7t.forEach(t),m3r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(wZ,"A",{href:!0});var Q7t=s(CU);g3r=r(Q7t,"from_pretrained()"),Q7t.forEach(t),h3r=r(wZ," to load the model weights."),wZ.forEach(t),p3r=i(FA),T(H4.$$.fragment,FA),FA.forEach(t),u3r=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(J8.$$.fragment,Nl),_3r=i(Nl),qFe=n(Nl,"P",{});var W7t=s(qFe);b3r=r(W7t,"Instantiate one of the base model classes of the library from a pretrained model."),W7t.forEach(t),v3r=i(Nl),gn=n(Nl,"P",{});var TA=s(gn);F3r=r(TA,"The model class to instantiate is selected based on the "),NFe=n(TA,"CODE",{});var H7t=s(NFe);T3r=r(H7t,"model_type"),H7t.forEach(t),M3r=r(TA,` property of the config object (either
passed as an argument or loaded from `),jFe=n(TA,"CODE",{});var U7t=s(jFe);E3r=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),C3r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(TA,"CODE",{});var J7t=s(DFe);w3r=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),A3r=r(TA,":"),TA.forEach(t),y3r=i(Nl),re=n(Nl,"UL",{});var ne=s(re);U4=n(ne,"LI",{});var BRe=s(U4);GFe=n(BRe,"STRONG",{});var Y7t=s(GFe);L3r=r(Y7t,"albert"),Y7t.forEach(t),x3r=r(BRe," \u2014 "),wU=n(BRe,"A",{href:!0});var K7t=s(wU);$3r=r(K7t,"FlaxAlbertModel"),K7t.forEach(t),k3r=r(BRe," (ALBERT model)"),BRe.forEach(t),S3r=i(ne),J4=n(ne,"LI",{});var PRe=s(J4);OFe=n(PRe,"STRONG",{});var Z7t=s(OFe);R3r=r(Z7t,"bart"),Z7t.forEach(t),B3r=r(PRe," \u2014 "),AU=n(PRe,"A",{href:!0});var eMt=s(AU);P3r=r(eMt,"FlaxBartModel"),eMt.forEach(t),I3r=r(PRe," (BART model)"),PRe.forEach(t),q3r=i(ne),Y4=n(ne,"LI",{});var IRe=s(Y4);VFe=n(IRe,"STRONG",{});var oMt=s(VFe);N3r=r(oMt,"beit"),oMt.forEach(t),j3r=r(IRe," \u2014 "),yU=n(IRe,"A",{href:!0});var rMt=s(yU);D3r=r(rMt,"FlaxBeitModel"),rMt.forEach(t),G3r=r(IRe," (BEiT model)"),IRe.forEach(t),O3r=i(ne),K4=n(ne,"LI",{});var qRe=s(K4);XFe=n(qRe,"STRONG",{});var tMt=s(XFe);V3r=r(tMt,"bert"),tMt.forEach(t),X3r=r(qRe," \u2014 "),LU=n(qRe,"A",{href:!0});var aMt=s(LU);z3r=r(aMt,"FlaxBertModel"),aMt.forEach(t),Q3r=r(qRe," (BERT model)"),qRe.forEach(t),W3r=i(ne),Z4=n(ne,"LI",{});var NRe=s(Z4);zFe=n(NRe,"STRONG",{});var nMt=s(zFe);H3r=r(nMt,"big_bird"),nMt.forEach(t),U3r=r(NRe," \u2014 "),xU=n(NRe,"A",{href:!0});var sMt=s(xU);J3r=r(sMt,"FlaxBigBirdModel"),sMt.forEach(t),Y3r=r(NRe," (BigBird model)"),NRe.forEach(t),K3r=i(ne),eE=n(ne,"LI",{});var jRe=s(eE);QFe=n(jRe,"STRONG",{});var lMt=s(QFe);Z3r=r(lMt,"blenderbot"),lMt.forEach(t),ewr=r(jRe," \u2014 "),$U=n(jRe,"A",{href:!0});var iMt=s($U);owr=r(iMt,"FlaxBlenderbotModel"),iMt.forEach(t),rwr=r(jRe," (Blenderbot model)"),jRe.forEach(t),twr=i(ne),oE=n(ne,"LI",{});var DRe=s(oE);WFe=n(DRe,"STRONG",{});var dMt=s(WFe);awr=r(dMt,"blenderbot-small"),dMt.forEach(t),nwr=r(DRe," \u2014 "),kU=n(DRe,"A",{href:!0});var cMt=s(kU);swr=r(cMt,"FlaxBlenderbotSmallModel"),cMt.forEach(t),lwr=r(DRe," (BlenderbotSmall model)"),DRe.forEach(t),iwr=i(ne),rE=n(ne,"LI",{});var GRe=s(rE);HFe=n(GRe,"STRONG",{});var fMt=s(HFe);dwr=r(fMt,"clip"),fMt.forEach(t),cwr=r(GRe," \u2014 "),SU=n(GRe,"A",{href:!0});var mMt=s(SU);fwr=r(mMt,"FlaxCLIPModel"),mMt.forEach(t),mwr=r(GRe," (CLIP model)"),GRe.forEach(t),gwr=i(ne),tE=n(ne,"LI",{});var ORe=s(tE);UFe=n(ORe,"STRONG",{});var gMt=s(UFe);hwr=r(gMt,"distilbert"),gMt.forEach(t),pwr=r(ORe," \u2014 "),RU=n(ORe,"A",{href:!0});var hMt=s(RU);uwr=r(hMt,"FlaxDistilBertModel"),hMt.forEach(t),_wr=r(ORe," (DistilBERT model)"),ORe.forEach(t),bwr=i(ne),aE=n(ne,"LI",{});var VRe=s(aE);JFe=n(VRe,"STRONG",{});var pMt=s(JFe);vwr=r(pMt,"electra"),pMt.forEach(t),Fwr=r(VRe," \u2014 "),BU=n(VRe,"A",{href:!0});var uMt=s(BU);Twr=r(uMt,"FlaxElectraModel"),uMt.forEach(t),Mwr=r(VRe," (ELECTRA model)"),VRe.forEach(t),Ewr=i(ne),nE=n(ne,"LI",{});var XRe=s(nE);YFe=n(XRe,"STRONG",{});var _Mt=s(YFe);Cwr=r(_Mt,"gpt2"),_Mt.forEach(t),wwr=r(XRe," \u2014 "),PU=n(XRe,"A",{href:!0});var bMt=s(PU);Awr=r(bMt,"FlaxGPT2Model"),bMt.forEach(t),ywr=r(XRe," (OpenAI GPT-2 model)"),XRe.forEach(t),Lwr=i(ne),sE=n(ne,"LI",{});var zRe=s(sE);KFe=n(zRe,"STRONG",{});var vMt=s(KFe);xwr=r(vMt,"gpt_neo"),vMt.forEach(t),$wr=r(zRe," \u2014 "),IU=n(zRe,"A",{href:!0});var FMt=s(IU);kwr=r(FMt,"FlaxGPTNeoModel"),FMt.forEach(t),Swr=r(zRe," (GPT Neo model)"),zRe.forEach(t),Rwr=i(ne),lE=n(ne,"LI",{});var QRe=s(lE);ZFe=n(QRe,"STRONG",{});var TMt=s(ZFe);Bwr=r(TMt,"gptj"),TMt.forEach(t),Pwr=r(QRe," \u2014 "),qU=n(QRe,"A",{href:!0});var MMt=s(qU);Iwr=r(MMt,"FlaxGPTJModel"),MMt.forEach(t),qwr=r(QRe," (GPT-J model)"),QRe.forEach(t),Nwr=i(ne),iE=n(ne,"LI",{});var WRe=s(iE);e0e=n(WRe,"STRONG",{});var EMt=s(e0e);jwr=r(EMt,"marian"),EMt.forEach(t),Dwr=r(WRe," \u2014 "),NU=n(WRe,"A",{href:!0});var CMt=s(NU);Gwr=r(CMt,"FlaxMarianModel"),CMt.forEach(t),Owr=r(WRe," (Marian model)"),WRe.forEach(t),Vwr=i(ne),dE=n(ne,"LI",{});var HRe=s(dE);o0e=n(HRe,"STRONG",{});var wMt=s(o0e);Xwr=r(wMt,"mbart"),wMt.forEach(t),zwr=r(HRe," \u2014 "),jU=n(HRe,"A",{href:!0});var AMt=s(jU);Qwr=r(AMt,"FlaxMBartModel"),AMt.forEach(t),Wwr=r(HRe," (mBART model)"),HRe.forEach(t),Hwr=i(ne),cE=n(ne,"LI",{});var URe=s(cE);r0e=n(URe,"STRONG",{});var yMt=s(r0e);Uwr=r(yMt,"mt5"),yMt.forEach(t),Jwr=r(URe," \u2014 "),DU=n(URe,"A",{href:!0});var LMt=s(DU);Ywr=r(LMt,"FlaxMT5Model"),LMt.forEach(t),Kwr=r(URe," (mT5 model)"),URe.forEach(t),Zwr=i(ne),fE=n(ne,"LI",{});var JRe=s(fE);t0e=n(JRe,"STRONG",{});var xMt=s(t0e);eAr=r(xMt,"pegasus"),xMt.forEach(t),oAr=r(JRe," \u2014 "),GU=n(JRe,"A",{href:!0});var $Mt=s(GU);rAr=r($Mt,"FlaxPegasusModel"),$Mt.forEach(t),tAr=r(JRe," (Pegasus model)"),JRe.forEach(t),aAr=i(ne),mE=n(ne,"LI",{});var YRe=s(mE);a0e=n(YRe,"STRONG",{});var kMt=s(a0e);nAr=r(kMt,"roberta"),kMt.forEach(t),sAr=r(YRe," \u2014 "),OU=n(YRe,"A",{href:!0});var SMt=s(OU);lAr=r(SMt,"FlaxRobertaModel"),SMt.forEach(t),iAr=r(YRe," (RoBERTa model)"),YRe.forEach(t),dAr=i(ne),gE=n(ne,"LI",{});var KRe=s(gE);n0e=n(KRe,"STRONG",{});var RMt=s(n0e);cAr=r(RMt,"roformer"),RMt.forEach(t),fAr=r(KRe," \u2014 "),VU=n(KRe,"A",{href:!0});var BMt=s(VU);mAr=r(BMt,"FlaxRoFormerModel"),BMt.forEach(t),gAr=r(KRe," (RoFormer model)"),KRe.forEach(t),hAr=i(ne),hE=n(ne,"LI",{});var ZRe=s(hE);s0e=n(ZRe,"STRONG",{});var PMt=s(s0e);pAr=r(PMt,"t5"),PMt.forEach(t),uAr=r(ZRe," \u2014 "),XU=n(ZRe,"A",{href:!0});var IMt=s(XU);_Ar=r(IMt,"FlaxT5Model"),IMt.forEach(t),bAr=r(ZRe," (T5 model)"),ZRe.forEach(t),vAr=i(ne),pE=n(ne,"LI",{});var eBe=s(pE);l0e=n(eBe,"STRONG",{});var qMt=s(l0e);FAr=r(qMt,"vision-text-dual-encoder"),qMt.forEach(t),TAr=r(eBe," \u2014 "),zU=n(eBe,"A",{href:!0});var NMt=s(zU);MAr=r(NMt,"FlaxVisionTextDualEncoderModel"),NMt.forEach(t),EAr=r(eBe," (VisionTextDualEncoder model)"),eBe.forEach(t),CAr=i(ne),uE=n(ne,"LI",{});var oBe=s(uE);i0e=n(oBe,"STRONG",{});var jMt=s(i0e);wAr=r(jMt,"vit"),jMt.forEach(t),AAr=r(oBe," \u2014 "),QU=n(oBe,"A",{href:!0});var DMt=s(QU);yAr=r(DMt,"FlaxViTModel"),DMt.forEach(t),LAr=r(oBe," (ViT model)"),oBe.forEach(t),xAr=i(ne),_E=n(ne,"LI",{});var rBe=s(_E);d0e=n(rBe,"STRONG",{});var GMt=s(d0e);$Ar=r(GMt,"wav2vec2"),GMt.forEach(t),kAr=r(rBe," \u2014 "),WU=n(rBe,"A",{href:!0});var OMt=s(WU);SAr=r(OMt,"FlaxWav2Vec2Model"),OMt.forEach(t),RAr=r(rBe," (Wav2Vec2 model)"),rBe.forEach(t),BAr=i(ne),bE=n(ne,"LI",{});var tBe=s(bE);c0e=n(tBe,"STRONG",{});var VMt=s(c0e);PAr=r(VMt,"xglm"),VMt.forEach(t),IAr=r(tBe," \u2014 "),HU=n(tBe,"A",{href:!0});var XMt=s(HU);qAr=r(XMt,"FlaxXGLMModel"),XMt.forEach(t),NAr=r(tBe," (XGLM model)"),tBe.forEach(t),jAr=i(ne),vE=n(ne,"LI",{});var aBe=s(vE);f0e=n(aBe,"STRONG",{});var zMt=s(f0e);DAr=r(zMt,"xlm-roberta"),zMt.forEach(t),GAr=r(aBe," \u2014 "),UU=n(aBe,"A",{href:!0});var QMt=s(UU);OAr=r(QMt,"FlaxXLMRobertaModel"),QMt.forEach(t),VAr=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),ne.forEach(t),XAr=i(Nl),T(FE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),mqe=i(f),xc=n(f,"H2",{class:!0});var vje=s(xc);TE=n(vje,"A",{id:!0,class:!0,href:!0});var WMt=s(TE);m0e=n(WMt,"SPAN",{});var HMt=s(m0e);T(Y8.$$.fragment,HMt),HMt.forEach(t),WMt.forEach(t),zAr=i(vje),g0e=n(vje,"SPAN",{});var UMt=s(g0e);QAr=r(UMt,"FlaxAutoModelForCausalLM"),UMt.forEach(t),vje.forEach(t),gqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(K8.$$.fragment,jl),WAr=i(jl),$c=n(jl,"P",{});var AZ=s($c);HAr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=n(AZ,"A",{href:!0});var JMt=s(JU);UAr=r(JMt,"from_pretrained()"),JMt.forEach(t),JAr=r(AZ," class method or the "),YU=n(AZ,"A",{href:!0});var YMt=s(YU);YAr=r(YMt,"from_config()"),YMt.forEach(t),KAr=r(AZ,` class
method.`),AZ.forEach(t),ZAr=i(jl),Z8=n(jl,"P",{});var Fje=s(Z8);e6r=r(Fje,"This class cannot be instantiated directly using "),h0e=n(Fje,"CODE",{});var KMt=s(h0e);o6r=r(KMt,"__init__()"),KMt.forEach(t),r6r=r(Fje," (throws an error)."),Fje.forEach(t),t6r=i(jl),Dt=n(jl,"DIV",{class:!0});var MA=s(Dt);T(ex.$$.fragment,MA),a6r=i(MA),p0e=n(MA,"P",{});var ZMt=s(p0e);n6r=r(ZMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZMt.forEach(t),s6r=i(MA),kc=n(MA,"P",{});var yZ=s(kc);l6r=r(yZ,`Note:
Loading a model from its configuration file does `),u0e=n(yZ,"STRONG",{});var e4t=s(u0e);i6r=r(e4t,"not"),e4t.forEach(t),d6r=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(yZ,"A",{href:!0});var o4t=s(KU);c6r=r(o4t,"from_pretrained()"),o4t.forEach(t),f6r=r(yZ," to load the model weights."),yZ.forEach(t),m6r=i(MA),T(ME.$$.fragment,MA),MA.forEach(t),g6r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(ox.$$.fragment,Dl),h6r=i(Dl),_0e=n(Dl,"P",{});var r4t=s(_0e);p6r=r(r4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r4t.forEach(t),u6r=i(Dl),hn=n(Dl,"P",{});var EA=s(hn);_6r=r(EA,"The model class to instantiate is selected based on the "),b0e=n(EA,"CODE",{});var t4t=s(b0e);b6r=r(t4t,"model_type"),t4t.forEach(t),v6r=r(EA,` property of the config object (either
passed as an argument or loaded from `),v0e=n(EA,"CODE",{});var a4t=s(v0e);F6r=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),T6r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(EA,"CODE",{});var n4t=s(F0e);M6r=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),E6r=r(EA,":"),EA.forEach(t),C6r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);EE=n(Oe,"LI",{});var nBe=s(EE);T0e=n(nBe,"STRONG",{});var s4t=s(T0e);w6r=r(s4t,"bart"),s4t.forEach(t),A6r=r(nBe," \u2014 "),ZU=n(nBe,"A",{href:!0});var l4t=s(ZU);y6r=r(l4t,"FlaxBartForCausalLM"),l4t.forEach(t),L6r=r(nBe," (BART model)"),nBe.forEach(t),x6r=i(Oe),CE=n(Oe,"LI",{});var sBe=s(CE);M0e=n(sBe,"STRONG",{});var i4t=s(M0e);$6r=r(i4t,"bert"),i4t.forEach(t),k6r=r(sBe," \u2014 "),eJ=n(sBe,"A",{href:!0});var d4t=s(eJ);S6r=r(d4t,"FlaxBertForCausalLM"),d4t.forEach(t),R6r=r(sBe," (BERT model)"),sBe.forEach(t),B6r=i(Oe),wE=n(Oe,"LI",{});var lBe=s(wE);E0e=n(lBe,"STRONG",{});var c4t=s(E0e);P6r=r(c4t,"big_bird"),c4t.forEach(t),I6r=r(lBe," \u2014 "),oJ=n(lBe,"A",{href:!0});var f4t=s(oJ);q6r=r(f4t,"FlaxBigBirdForCausalLM"),f4t.forEach(t),N6r=r(lBe," (BigBird model)"),lBe.forEach(t),j6r=i(Oe),AE=n(Oe,"LI",{});var iBe=s(AE);C0e=n(iBe,"STRONG",{});var m4t=s(C0e);D6r=r(m4t,"electra"),m4t.forEach(t),G6r=r(iBe," \u2014 "),rJ=n(iBe,"A",{href:!0});var g4t=s(rJ);O6r=r(g4t,"FlaxElectraForCausalLM"),g4t.forEach(t),V6r=r(iBe," (ELECTRA model)"),iBe.forEach(t),X6r=i(Oe),yE=n(Oe,"LI",{});var dBe=s(yE);w0e=n(dBe,"STRONG",{});var h4t=s(w0e);z6r=r(h4t,"gpt2"),h4t.forEach(t),Q6r=r(dBe," \u2014 "),tJ=n(dBe,"A",{href:!0});var p4t=s(tJ);W6r=r(p4t,"FlaxGPT2LMHeadModel"),p4t.forEach(t),H6r=r(dBe," (OpenAI GPT-2 model)"),dBe.forEach(t),U6r=i(Oe),LE=n(Oe,"LI",{});var cBe=s(LE);A0e=n(cBe,"STRONG",{});var u4t=s(A0e);J6r=r(u4t,"gpt_neo"),u4t.forEach(t),Y6r=r(cBe," \u2014 "),aJ=n(cBe,"A",{href:!0});var _4t=s(aJ);K6r=r(_4t,"FlaxGPTNeoForCausalLM"),_4t.forEach(t),Z6r=r(cBe," (GPT Neo model)"),cBe.forEach(t),eyr=i(Oe),xE=n(Oe,"LI",{});var fBe=s(xE);y0e=n(fBe,"STRONG",{});var b4t=s(y0e);oyr=r(b4t,"gptj"),b4t.forEach(t),ryr=r(fBe," \u2014 "),nJ=n(fBe,"A",{href:!0});var v4t=s(nJ);tyr=r(v4t,"FlaxGPTJForCausalLM"),v4t.forEach(t),ayr=r(fBe," (GPT-J model)"),fBe.forEach(t),nyr=i(Oe),$E=n(Oe,"LI",{});var mBe=s($E);L0e=n(mBe,"STRONG",{});var F4t=s(L0e);syr=r(F4t,"roberta"),F4t.forEach(t),lyr=r(mBe," \u2014 "),sJ=n(mBe,"A",{href:!0});var T4t=s(sJ);iyr=r(T4t,"FlaxRobertaForCausalLM"),T4t.forEach(t),dyr=r(mBe," (RoBERTa model)"),mBe.forEach(t),cyr=i(Oe),kE=n(Oe,"LI",{});var gBe=s(kE);x0e=n(gBe,"STRONG",{});var M4t=s(x0e);fyr=r(M4t,"xglm"),M4t.forEach(t),myr=r(gBe," \u2014 "),lJ=n(gBe,"A",{href:!0});var E4t=s(lJ);gyr=r(E4t,"FlaxXGLMForCausalLM"),E4t.forEach(t),hyr=r(gBe," (XGLM model)"),gBe.forEach(t),Oe.forEach(t),pyr=i(Dl),T(SE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),hqe=i(f),Sc=n(f,"H2",{class:!0});var Tje=s(Sc);RE=n(Tje,"A",{id:!0,class:!0,href:!0});var C4t=s(RE);$0e=n(C4t,"SPAN",{});var w4t=s($0e);T(rx.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),uyr=i(Tje),k0e=n(Tje,"SPAN",{});var A4t=s(k0e);_yr=r(A4t,"FlaxAutoModelForPreTraining"),A4t.forEach(t),Tje.forEach(t),pqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(tx.$$.fragment,Gl),byr=i(Gl),Rc=n(Gl,"P",{});var LZ=s(Rc);vyr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iJ=n(LZ,"A",{href:!0});var y4t=s(iJ);Fyr=r(y4t,"from_pretrained()"),y4t.forEach(t),Tyr=r(LZ," class method or the "),dJ=n(LZ,"A",{href:!0});var L4t=s(dJ);Myr=r(L4t,"from_config()"),L4t.forEach(t),Eyr=r(LZ,` class
method.`),LZ.forEach(t),Cyr=i(Gl),ax=n(Gl,"P",{});var Mje=s(ax);wyr=r(Mje,"This class cannot be instantiated directly using "),S0e=n(Mje,"CODE",{});var x4t=s(S0e);Ayr=r(x4t,"__init__()"),x4t.forEach(t),yyr=r(Mje," (throws an error)."),Mje.forEach(t),Lyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var CA=s(Gt);T(nx.$$.fragment,CA),xyr=i(CA),R0e=n(CA,"P",{});var $4t=s(R0e);$yr=r($4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$4t.forEach(t),kyr=i(CA),Bc=n(CA,"P",{});var xZ=s(Bc);Syr=r(xZ,`Note:
Loading a model from its configuration file does `),B0e=n(xZ,"STRONG",{});var k4t=s(B0e);Ryr=r(k4t,"not"),k4t.forEach(t),Byr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(xZ,"A",{href:!0});var S4t=s(cJ);Pyr=r(S4t,"from_pretrained()"),S4t.forEach(t),Iyr=r(xZ," to load the model weights."),xZ.forEach(t),qyr=i(CA),T(BE.$$.fragment,CA),CA.forEach(t),Nyr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(sx.$$.fragment,Ol),jyr=i(Ol),P0e=n(Ol,"P",{});var R4t=s(P0e);Dyr=r(R4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R4t.forEach(t),Gyr=i(Ol),pn=n(Ol,"P",{});var wA=s(pn);Oyr=r(wA,"The model class to instantiate is selected based on the "),I0e=n(wA,"CODE",{});var B4t=s(I0e);Vyr=r(B4t,"model_type"),B4t.forEach(t),Xyr=r(wA,` property of the config object (either
passed as an argument or loaded from `),q0e=n(wA,"CODE",{});var P4t=s(q0e);zyr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),Qyr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(wA,"CODE",{});var I4t=s(N0e);Wyr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),Hyr=r(wA,":"),wA.forEach(t),Uyr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);PE=n(we,"LI",{});var hBe=s(PE);j0e=n(hBe,"STRONG",{});var q4t=s(j0e);Jyr=r(q4t,"albert"),q4t.forEach(t),Yyr=r(hBe," \u2014 "),fJ=n(hBe,"A",{href:!0});var N4t=s(fJ);Kyr=r(N4t,"FlaxAlbertForPreTraining"),N4t.forEach(t),Zyr=r(hBe," (ALBERT model)"),hBe.forEach(t),eLr=i(we),IE=n(we,"LI",{});var pBe=s(IE);D0e=n(pBe,"STRONG",{});var j4t=s(D0e);oLr=r(j4t,"bart"),j4t.forEach(t),rLr=r(pBe," \u2014 "),mJ=n(pBe,"A",{href:!0});var D4t=s(mJ);tLr=r(D4t,"FlaxBartForConditionalGeneration"),D4t.forEach(t),aLr=r(pBe," (BART model)"),pBe.forEach(t),nLr=i(we),qE=n(we,"LI",{});var uBe=s(qE);G0e=n(uBe,"STRONG",{});var G4t=s(G0e);sLr=r(G4t,"bert"),G4t.forEach(t),lLr=r(uBe," \u2014 "),gJ=n(uBe,"A",{href:!0});var O4t=s(gJ);iLr=r(O4t,"FlaxBertForPreTraining"),O4t.forEach(t),dLr=r(uBe," (BERT model)"),uBe.forEach(t),cLr=i(we),NE=n(we,"LI",{});var _Be=s(NE);O0e=n(_Be,"STRONG",{});var V4t=s(O0e);fLr=r(V4t,"big_bird"),V4t.forEach(t),mLr=r(_Be," \u2014 "),hJ=n(_Be,"A",{href:!0});var X4t=s(hJ);gLr=r(X4t,"FlaxBigBirdForPreTraining"),X4t.forEach(t),hLr=r(_Be," (BigBird model)"),_Be.forEach(t),pLr=i(we),jE=n(we,"LI",{});var bBe=s(jE);V0e=n(bBe,"STRONG",{});var z4t=s(V0e);uLr=r(z4t,"electra"),z4t.forEach(t),_Lr=r(bBe," \u2014 "),pJ=n(bBe,"A",{href:!0});var Q4t=s(pJ);bLr=r(Q4t,"FlaxElectraForPreTraining"),Q4t.forEach(t),vLr=r(bBe," (ELECTRA model)"),bBe.forEach(t),FLr=i(we),DE=n(we,"LI",{});var vBe=s(DE);X0e=n(vBe,"STRONG",{});var W4t=s(X0e);TLr=r(W4t,"mbart"),W4t.forEach(t),MLr=r(vBe," \u2014 "),uJ=n(vBe,"A",{href:!0});var H4t=s(uJ);ELr=r(H4t,"FlaxMBartForConditionalGeneration"),H4t.forEach(t),CLr=r(vBe," (mBART model)"),vBe.forEach(t),wLr=i(we),GE=n(we,"LI",{});var FBe=s(GE);z0e=n(FBe,"STRONG",{});var U4t=s(z0e);ALr=r(U4t,"mt5"),U4t.forEach(t),yLr=r(FBe," \u2014 "),_J=n(FBe,"A",{href:!0});var J4t=s(_J);LLr=r(J4t,"FlaxMT5ForConditionalGeneration"),J4t.forEach(t),xLr=r(FBe," (mT5 model)"),FBe.forEach(t),$Lr=i(we),OE=n(we,"LI",{});var TBe=s(OE);Q0e=n(TBe,"STRONG",{});var Y4t=s(Q0e);kLr=r(Y4t,"roberta"),Y4t.forEach(t),SLr=r(TBe," \u2014 "),bJ=n(TBe,"A",{href:!0});var K4t=s(bJ);RLr=r(K4t,"FlaxRobertaForMaskedLM"),K4t.forEach(t),BLr=r(TBe," (RoBERTa model)"),TBe.forEach(t),PLr=i(we),VE=n(we,"LI",{});var MBe=s(VE);W0e=n(MBe,"STRONG",{});var Z4t=s(W0e);ILr=r(Z4t,"roformer"),Z4t.forEach(t),qLr=r(MBe," \u2014 "),vJ=n(MBe,"A",{href:!0});var eEt=s(vJ);NLr=r(eEt,"FlaxRoFormerForMaskedLM"),eEt.forEach(t),jLr=r(MBe," (RoFormer model)"),MBe.forEach(t),DLr=i(we),XE=n(we,"LI",{});var EBe=s(XE);H0e=n(EBe,"STRONG",{});var oEt=s(H0e);GLr=r(oEt,"t5"),oEt.forEach(t),OLr=r(EBe," \u2014 "),FJ=n(EBe,"A",{href:!0});var rEt=s(FJ);VLr=r(rEt,"FlaxT5ForConditionalGeneration"),rEt.forEach(t),XLr=r(EBe," (T5 model)"),EBe.forEach(t),zLr=i(we),zE=n(we,"LI",{});var CBe=s(zE);U0e=n(CBe,"STRONG",{});var tEt=s(U0e);QLr=r(tEt,"wav2vec2"),tEt.forEach(t),WLr=r(CBe," \u2014 "),TJ=n(CBe,"A",{href:!0});var aEt=s(TJ);HLr=r(aEt,"FlaxWav2Vec2ForPreTraining"),aEt.forEach(t),ULr=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),JLr=i(we),QE=n(we,"LI",{});var wBe=s(QE);J0e=n(wBe,"STRONG",{});var nEt=s(J0e);YLr=r(nEt,"xlm-roberta"),nEt.forEach(t),KLr=r(wBe," \u2014 "),MJ=n(wBe,"A",{href:!0});var sEt=s(MJ);ZLr=r(sEt,"FlaxXLMRobertaForMaskedLM"),sEt.forEach(t),e8r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),we.forEach(t),o8r=i(Ol),T(WE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),uqe=i(f),Pc=n(f,"H2",{class:!0});var Eje=s(Pc);HE=n(Eje,"A",{id:!0,class:!0,href:!0});var lEt=s(HE);Y0e=n(lEt,"SPAN",{});var iEt=s(Y0e);T(lx.$$.fragment,iEt),iEt.forEach(t),lEt.forEach(t),r8r=i(Eje),K0e=n(Eje,"SPAN",{});var dEt=s(K0e);t8r=r(dEt,"FlaxAutoModelForMaskedLM"),dEt.forEach(t),Eje.forEach(t),_qe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(ix.$$.fragment,Vl),a8r=i(Vl),Ic=n(Vl,"P",{});var $Z=s(Ic);n8r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EJ=n($Z,"A",{href:!0});var cEt=s(EJ);s8r=r(cEt,"from_pretrained()"),cEt.forEach(t),l8r=r($Z," class method or the "),CJ=n($Z,"A",{href:!0});var fEt=s(CJ);i8r=r(fEt,"from_config()"),fEt.forEach(t),d8r=r($Z,` class
method.`),$Z.forEach(t),c8r=i(Vl),dx=n(Vl,"P",{});var Cje=s(dx);f8r=r(Cje,"This class cannot be instantiated directly using "),Z0e=n(Cje,"CODE",{});var mEt=s(Z0e);m8r=r(mEt,"__init__()"),mEt.forEach(t),g8r=r(Cje," (throws an error)."),Cje.forEach(t),h8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var AA=s(Ot);T(cx.$$.fragment,AA),p8r=i(AA),eTe=n(AA,"P",{});var gEt=s(eTe);u8r=r(gEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gEt.forEach(t),_8r=i(AA),qc=n(AA,"P",{});var kZ=s(qc);b8r=r(kZ,`Note:
Loading a model from its configuration file does `),oTe=n(kZ,"STRONG",{});var hEt=s(oTe);v8r=r(hEt,"not"),hEt.forEach(t),F8r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(kZ,"A",{href:!0});var pEt=s(wJ);T8r=r(pEt,"from_pretrained()"),pEt.forEach(t),M8r=r(kZ," to load the model weights."),kZ.forEach(t),E8r=i(AA),T(UE.$$.fragment,AA),AA.forEach(t),C8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(fx.$$.fragment,Xl),w8r=i(Xl),rTe=n(Xl,"P",{});var uEt=s(rTe);A8r=r(uEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uEt.forEach(t),y8r=i(Xl),un=n(Xl,"P",{});var yA=s(un);L8r=r(yA,"The model class to instantiate is selected based on the "),tTe=n(yA,"CODE",{});var _Et=s(tTe);x8r=r(_Et,"model_type"),_Et.forEach(t),$8r=r(yA,` property of the config object (either
passed as an argument or loaded from `),aTe=n(yA,"CODE",{});var bEt=s(aTe);k8r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),S8r=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(yA,"CODE",{});var vEt=s(nTe);R8r=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),B8r=r(yA,":"),yA.forEach(t),P8r=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);JE=n(Be,"LI",{});var ABe=s(JE);sTe=n(ABe,"STRONG",{});var FEt=s(sTe);I8r=r(FEt,"albert"),FEt.forEach(t),q8r=r(ABe," \u2014 "),AJ=n(ABe,"A",{href:!0});var TEt=s(AJ);N8r=r(TEt,"FlaxAlbertForMaskedLM"),TEt.forEach(t),j8r=r(ABe," (ALBERT model)"),ABe.forEach(t),D8r=i(Be),YE=n(Be,"LI",{});var yBe=s(YE);lTe=n(yBe,"STRONG",{});var MEt=s(lTe);G8r=r(MEt,"bart"),MEt.forEach(t),O8r=r(yBe," \u2014 "),yJ=n(yBe,"A",{href:!0});var EEt=s(yJ);V8r=r(EEt,"FlaxBartForConditionalGeneration"),EEt.forEach(t),X8r=r(yBe," (BART model)"),yBe.forEach(t),z8r=i(Be),KE=n(Be,"LI",{});var LBe=s(KE);iTe=n(LBe,"STRONG",{});var CEt=s(iTe);Q8r=r(CEt,"bert"),CEt.forEach(t),W8r=r(LBe," \u2014 "),LJ=n(LBe,"A",{href:!0});var wEt=s(LJ);H8r=r(wEt,"FlaxBertForMaskedLM"),wEt.forEach(t),U8r=r(LBe," (BERT model)"),LBe.forEach(t),J8r=i(Be),ZE=n(Be,"LI",{});var xBe=s(ZE);dTe=n(xBe,"STRONG",{});var AEt=s(dTe);Y8r=r(AEt,"big_bird"),AEt.forEach(t),K8r=r(xBe," \u2014 "),xJ=n(xBe,"A",{href:!0});var yEt=s(xJ);Z8r=r(yEt,"FlaxBigBirdForMaskedLM"),yEt.forEach(t),exr=r(xBe," (BigBird model)"),xBe.forEach(t),oxr=i(Be),eC=n(Be,"LI",{});var $Be=s(eC);cTe=n($Be,"STRONG",{});var LEt=s(cTe);rxr=r(LEt,"distilbert"),LEt.forEach(t),txr=r($Be," \u2014 "),$J=n($Be,"A",{href:!0});var xEt=s($J);axr=r(xEt,"FlaxDistilBertForMaskedLM"),xEt.forEach(t),nxr=r($Be," (DistilBERT model)"),$Be.forEach(t),sxr=i(Be),oC=n(Be,"LI",{});var kBe=s(oC);fTe=n(kBe,"STRONG",{});var $Et=s(fTe);lxr=r($Et,"electra"),$Et.forEach(t),ixr=r(kBe," \u2014 "),kJ=n(kBe,"A",{href:!0});var kEt=s(kJ);dxr=r(kEt,"FlaxElectraForMaskedLM"),kEt.forEach(t),cxr=r(kBe," (ELECTRA model)"),kBe.forEach(t),fxr=i(Be),rC=n(Be,"LI",{});var SBe=s(rC);mTe=n(SBe,"STRONG",{});var SEt=s(mTe);mxr=r(SEt,"mbart"),SEt.forEach(t),gxr=r(SBe," \u2014 "),SJ=n(SBe,"A",{href:!0});var REt=s(SJ);hxr=r(REt,"FlaxMBartForConditionalGeneration"),REt.forEach(t),pxr=r(SBe," (mBART model)"),SBe.forEach(t),uxr=i(Be),tC=n(Be,"LI",{});var RBe=s(tC);gTe=n(RBe,"STRONG",{});var BEt=s(gTe);_xr=r(BEt,"roberta"),BEt.forEach(t),bxr=r(RBe," \u2014 "),RJ=n(RBe,"A",{href:!0});var PEt=s(RJ);vxr=r(PEt,"FlaxRobertaForMaskedLM"),PEt.forEach(t),Fxr=r(RBe," (RoBERTa model)"),RBe.forEach(t),Txr=i(Be),aC=n(Be,"LI",{});var BBe=s(aC);hTe=n(BBe,"STRONG",{});var IEt=s(hTe);Mxr=r(IEt,"roformer"),IEt.forEach(t),Exr=r(BBe," \u2014 "),BJ=n(BBe,"A",{href:!0});var qEt=s(BJ);Cxr=r(qEt,"FlaxRoFormerForMaskedLM"),qEt.forEach(t),wxr=r(BBe," (RoFormer model)"),BBe.forEach(t),Axr=i(Be),nC=n(Be,"LI",{});var PBe=s(nC);pTe=n(PBe,"STRONG",{});var NEt=s(pTe);yxr=r(NEt,"xlm-roberta"),NEt.forEach(t),Lxr=r(PBe," \u2014 "),PJ=n(PBe,"A",{href:!0});var jEt=s(PJ);xxr=r(jEt,"FlaxXLMRobertaForMaskedLM"),jEt.forEach(t),$xr=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),Be.forEach(t),kxr=i(Xl),T(sC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),bqe=i(f),Nc=n(f,"H2",{class:!0});var wje=s(Nc);lC=n(wje,"A",{id:!0,class:!0,href:!0});var DEt=s(lC);uTe=n(DEt,"SPAN",{});var GEt=s(uTe);T(mx.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),Sxr=i(wje),_Te=n(wje,"SPAN",{});var OEt=s(_Te);Rxr=r(OEt,"FlaxAutoModelForSeq2SeqLM"),OEt.forEach(t),wje.forEach(t),vqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(gx.$$.fragment,zl),Bxr=i(zl),jc=n(zl,"P",{});var SZ=s(jc);Pxr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IJ=n(SZ,"A",{href:!0});var VEt=s(IJ);Ixr=r(VEt,"from_pretrained()"),VEt.forEach(t),qxr=r(SZ," class method or the "),qJ=n(SZ,"A",{href:!0});var XEt=s(qJ);Nxr=r(XEt,"from_config()"),XEt.forEach(t),jxr=r(SZ,` class
method.`),SZ.forEach(t),Dxr=i(zl),hx=n(zl,"P",{});var Aje=s(hx);Gxr=r(Aje,"This class cannot be instantiated directly using "),bTe=n(Aje,"CODE",{});var zEt=s(bTe);Oxr=r(zEt,"__init__()"),zEt.forEach(t),Vxr=r(Aje," (throws an error)."),Aje.forEach(t),Xxr=i(zl),Vt=n(zl,"DIV",{class:!0});var LA=s(Vt);T(px.$$.fragment,LA),zxr=i(LA),vTe=n(LA,"P",{});var QEt=s(vTe);Qxr=r(QEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QEt.forEach(t),Wxr=i(LA),Dc=n(LA,"P",{});var RZ=s(Dc);Hxr=r(RZ,`Note:
Loading a model from its configuration file does `),FTe=n(RZ,"STRONG",{});var WEt=s(FTe);Uxr=r(WEt,"not"),WEt.forEach(t),Jxr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(RZ,"A",{href:!0});var HEt=s(NJ);Yxr=r(HEt,"from_pretrained()"),HEt.forEach(t),Kxr=r(RZ," to load the model weights."),RZ.forEach(t),Zxr=i(LA),T(iC.$$.fragment,LA),LA.forEach(t),e9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(ux.$$.fragment,Ql),o9r=i(Ql),TTe=n(Ql,"P",{});var UEt=s(TTe);r9r=r(UEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UEt.forEach(t),t9r=i(Ql),_n=n(Ql,"P",{});var xA=s(_n);a9r=r(xA,"The model class to instantiate is selected based on the "),MTe=n(xA,"CODE",{});var JEt=s(MTe);n9r=r(JEt,"model_type"),JEt.forEach(t),s9r=r(xA,` property of the config object (either
passed as an argument or loaded from `),ETe=n(xA,"CODE",{});var YEt=s(ETe);l9r=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),i9r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(xA,"CODE",{});var KEt=s(CTe);d9r=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),c9r=r(xA,":"),xA.forEach(t),f9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);dC=n(Ve,"LI",{});var IBe=s(dC);wTe=n(IBe,"STRONG",{});var ZEt=s(wTe);m9r=r(ZEt,"bart"),ZEt.forEach(t),g9r=r(IBe," \u2014 "),jJ=n(IBe,"A",{href:!0});var eCt=s(jJ);h9r=r(eCt,"FlaxBartForConditionalGeneration"),eCt.forEach(t),p9r=r(IBe," (BART model)"),IBe.forEach(t),u9r=i(Ve),cC=n(Ve,"LI",{});var qBe=s(cC);ATe=n(qBe,"STRONG",{});var oCt=s(ATe);_9r=r(oCt,"blenderbot"),oCt.forEach(t),b9r=r(qBe," \u2014 "),DJ=n(qBe,"A",{href:!0});var rCt=s(DJ);v9r=r(rCt,"FlaxBlenderbotForConditionalGeneration"),rCt.forEach(t),F9r=r(qBe," (Blenderbot model)"),qBe.forEach(t),T9r=i(Ve),fC=n(Ve,"LI",{});var NBe=s(fC);yTe=n(NBe,"STRONG",{});var tCt=s(yTe);M9r=r(tCt,"blenderbot-small"),tCt.forEach(t),E9r=r(NBe," \u2014 "),GJ=n(NBe,"A",{href:!0});var aCt=s(GJ);C9r=r(aCt,"FlaxBlenderbotSmallForConditionalGeneration"),aCt.forEach(t),w9r=r(NBe," (BlenderbotSmall model)"),NBe.forEach(t),A9r=i(Ve),mC=n(Ve,"LI",{});var jBe=s(mC);LTe=n(jBe,"STRONG",{});var nCt=s(LTe);y9r=r(nCt,"encoder-decoder"),nCt.forEach(t),L9r=r(jBe," \u2014 "),OJ=n(jBe,"A",{href:!0});var sCt=s(OJ);x9r=r(sCt,"FlaxEncoderDecoderModel"),sCt.forEach(t),$9r=r(jBe," (Encoder decoder model)"),jBe.forEach(t),k9r=i(Ve),gC=n(Ve,"LI",{});var DBe=s(gC);xTe=n(DBe,"STRONG",{});var lCt=s(xTe);S9r=r(lCt,"marian"),lCt.forEach(t),R9r=r(DBe," \u2014 "),VJ=n(DBe,"A",{href:!0});var iCt=s(VJ);B9r=r(iCt,"FlaxMarianMTModel"),iCt.forEach(t),P9r=r(DBe," (Marian model)"),DBe.forEach(t),I9r=i(Ve),hC=n(Ve,"LI",{});var GBe=s(hC);$Te=n(GBe,"STRONG",{});var dCt=s($Te);q9r=r(dCt,"mbart"),dCt.forEach(t),N9r=r(GBe," \u2014 "),XJ=n(GBe,"A",{href:!0});var cCt=s(XJ);j9r=r(cCt,"FlaxMBartForConditionalGeneration"),cCt.forEach(t),D9r=r(GBe," (mBART model)"),GBe.forEach(t),G9r=i(Ve),pC=n(Ve,"LI",{});var OBe=s(pC);kTe=n(OBe,"STRONG",{});var fCt=s(kTe);O9r=r(fCt,"mt5"),fCt.forEach(t),V9r=r(OBe," \u2014 "),zJ=n(OBe,"A",{href:!0});var mCt=s(zJ);X9r=r(mCt,"FlaxMT5ForConditionalGeneration"),mCt.forEach(t),z9r=r(OBe," (mT5 model)"),OBe.forEach(t),Q9r=i(Ve),uC=n(Ve,"LI",{});var VBe=s(uC);STe=n(VBe,"STRONG",{});var gCt=s(STe);W9r=r(gCt,"pegasus"),gCt.forEach(t),H9r=r(VBe," \u2014 "),QJ=n(VBe,"A",{href:!0});var hCt=s(QJ);U9r=r(hCt,"FlaxPegasusForConditionalGeneration"),hCt.forEach(t),J9r=r(VBe," (Pegasus model)"),VBe.forEach(t),Y9r=i(Ve),_C=n(Ve,"LI",{});var XBe=s(_C);RTe=n(XBe,"STRONG",{});var pCt=s(RTe);K9r=r(pCt,"t5"),pCt.forEach(t),Z9r=r(XBe," \u2014 "),WJ=n(XBe,"A",{href:!0});var uCt=s(WJ);e$r=r(uCt,"FlaxT5ForConditionalGeneration"),uCt.forEach(t),o$r=r(XBe," (T5 model)"),XBe.forEach(t),Ve.forEach(t),r$r=i(Ql),T(bC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Fqe=i(f),Gc=n(f,"H2",{class:!0});var yje=s(Gc);vC=n(yje,"A",{id:!0,class:!0,href:!0});var _Ct=s(vC);BTe=n(_Ct,"SPAN",{});var bCt=s(BTe);T(_x.$$.fragment,bCt),bCt.forEach(t),_Ct.forEach(t),t$r=i(yje),PTe=n(yje,"SPAN",{});var vCt=s(PTe);a$r=r(vCt,"FlaxAutoModelForSequenceClassification"),vCt.forEach(t),yje.forEach(t),Tqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(bx.$$.fragment,Wl),n$r=i(Wl),Oc=n(Wl,"P",{});var BZ=s(Oc);s$r=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HJ=n(BZ,"A",{href:!0});var FCt=s(HJ);l$r=r(FCt,"from_pretrained()"),FCt.forEach(t),i$r=r(BZ," class method or the "),UJ=n(BZ,"A",{href:!0});var TCt=s(UJ);d$r=r(TCt,"from_config()"),TCt.forEach(t),c$r=r(BZ,` class
method.`),BZ.forEach(t),f$r=i(Wl),vx=n(Wl,"P",{});var Lje=s(vx);m$r=r(Lje,"This class cannot be instantiated directly using "),ITe=n(Lje,"CODE",{});var MCt=s(ITe);g$r=r(MCt,"__init__()"),MCt.forEach(t),h$r=r(Lje," (throws an error)."),Lje.forEach(t),p$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var $A=s(Xt);T(Fx.$$.fragment,$A),u$r=i($A),qTe=n($A,"P",{});var ECt=s(qTe);_$r=r(ECt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ECt.forEach(t),b$r=i($A),Vc=n($A,"P",{});var PZ=s(Vc);v$r=r(PZ,`Note:
Loading a model from its configuration file does `),NTe=n(PZ,"STRONG",{});var CCt=s(NTe);F$r=r(CCt,"not"),CCt.forEach(t),T$r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(PZ,"A",{href:!0});var wCt=s(JJ);M$r=r(wCt,"from_pretrained()"),wCt.forEach(t),E$r=r(PZ," to load the model weights."),PZ.forEach(t),C$r=i($A),T(FC.$$.fragment,$A),$A.forEach(t),w$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Tx.$$.fragment,Hl),A$r=i(Hl),jTe=n(Hl,"P",{});var ACt=s(jTe);y$r=r(ACt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ACt.forEach(t),L$r=i(Hl),bn=n(Hl,"P",{});var kA=s(bn);x$r=r(kA,"The model class to instantiate is selected based on the "),DTe=n(kA,"CODE",{});var yCt=s(DTe);$$r=r(yCt,"model_type"),yCt.forEach(t),k$r=r(kA,` property of the config object (either
passed as an argument or loaded from `),GTe=n(kA,"CODE",{});var LCt=s(GTe);S$r=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),R$r=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(kA,"CODE",{});var xCt=s(OTe);B$r=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),P$r=r(kA,":"),kA.forEach(t),I$r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);TC=n(Pe,"LI",{});var zBe=s(TC);VTe=n(zBe,"STRONG",{});var $Ct=s(VTe);q$r=r($Ct,"albert"),$Ct.forEach(t),N$r=r(zBe," \u2014 "),YJ=n(zBe,"A",{href:!0});var kCt=s(YJ);j$r=r(kCt,"FlaxAlbertForSequenceClassification"),kCt.forEach(t),D$r=r(zBe," (ALBERT model)"),zBe.forEach(t),G$r=i(Pe),MC=n(Pe,"LI",{});var QBe=s(MC);XTe=n(QBe,"STRONG",{});var SCt=s(XTe);O$r=r(SCt,"bart"),SCt.forEach(t),V$r=r(QBe," \u2014 "),KJ=n(QBe,"A",{href:!0});var RCt=s(KJ);X$r=r(RCt,"FlaxBartForSequenceClassification"),RCt.forEach(t),z$r=r(QBe," (BART model)"),QBe.forEach(t),Q$r=i(Pe),EC=n(Pe,"LI",{});var WBe=s(EC);zTe=n(WBe,"STRONG",{});var BCt=s(zTe);W$r=r(BCt,"bert"),BCt.forEach(t),H$r=r(WBe," \u2014 "),ZJ=n(WBe,"A",{href:!0});var PCt=s(ZJ);U$r=r(PCt,"FlaxBertForSequenceClassification"),PCt.forEach(t),J$r=r(WBe," (BERT model)"),WBe.forEach(t),Y$r=i(Pe),CC=n(Pe,"LI",{});var HBe=s(CC);QTe=n(HBe,"STRONG",{});var ICt=s(QTe);K$r=r(ICt,"big_bird"),ICt.forEach(t),Z$r=r(HBe," \u2014 "),eY=n(HBe,"A",{href:!0});var qCt=s(eY);ekr=r(qCt,"FlaxBigBirdForSequenceClassification"),qCt.forEach(t),okr=r(HBe," (BigBird model)"),HBe.forEach(t),rkr=i(Pe),wC=n(Pe,"LI",{});var UBe=s(wC);WTe=n(UBe,"STRONG",{});var NCt=s(WTe);tkr=r(NCt,"distilbert"),NCt.forEach(t),akr=r(UBe," \u2014 "),oY=n(UBe,"A",{href:!0});var jCt=s(oY);nkr=r(jCt,"FlaxDistilBertForSequenceClassification"),jCt.forEach(t),skr=r(UBe," (DistilBERT model)"),UBe.forEach(t),lkr=i(Pe),AC=n(Pe,"LI",{});var JBe=s(AC);HTe=n(JBe,"STRONG",{});var DCt=s(HTe);ikr=r(DCt,"electra"),DCt.forEach(t),dkr=r(JBe," \u2014 "),rY=n(JBe,"A",{href:!0});var GCt=s(rY);ckr=r(GCt,"FlaxElectraForSequenceClassification"),GCt.forEach(t),fkr=r(JBe," (ELECTRA model)"),JBe.forEach(t),mkr=i(Pe),yC=n(Pe,"LI",{});var YBe=s(yC);UTe=n(YBe,"STRONG",{});var OCt=s(UTe);gkr=r(OCt,"mbart"),OCt.forEach(t),hkr=r(YBe," \u2014 "),tY=n(YBe,"A",{href:!0});var VCt=s(tY);pkr=r(VCt,"FlaxMBartForSequenceClassification"),VCt.forEach(t),ukr=r(YBe," (mBART model)"),YBe.forEach(t),_kr=i(Pe),LC=n(Pe,"LI",{});var KBe=s(LC);JTe=n(KBe,"STRONG",{});var XCt=s(JTe);bkr=r(XCt,"roberta"),XCt.forEach(t),vkr=r(KBe," \u2014 "),aY=n(KBe,"A",{href:!0});var zCt=s(aY);Fkr=r(zCt,"FlaxRobertaForSequenceClassification"),zCt.forEach(t),Tkr=r(KBe," (RoBERTa model)"),KBe.forEach(t),Mkr=i(Pe),xC=n(Pe,"LI",{});var ZBe=s(xC);YTe=n(ZBe,"STRONG",{});var QCt=s(YTe);Ekr=r(QCt,"roformer"),QCt.forEach(t),Ckr=r(ZBe," \u2014 "),nY=n(ZBe,"A",{href:!0});var WCt=s(nY);wkr=r(WCt,"FlaxRoFormerForSequenceClassification"),WCt.forEach(t),Akr=r(ZBe," (RoFormer model)"),ZBe.forEach(t),ykr=i(Pe),$C=n(Pe,"LI",{});var ePe=s($C);KTe=n(ePe,"STRONG",{});var HCt=s(KTe);Lkr=r(HCt,"xlm-roberta"),HCt.forEach(t),xkr=r(ePe," \u2014 "),sY=n(ePe,"A",{href:!0});var UCt=s(sY);$kr=r(UCt,"FlaxXLMRobertaForSequenceClassification"),UCt.forEach(t),kkr=r(ePe," (XLM-RoBERTa model)"),ePe.forEach(t),Pe.forEach(t),Skr=i(Hl),T(kC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Mqe=i(f),Xc=n(f,"H2",{class:!0});var xje=s(Xc);SC=n(xje,"A",{id:!0,class:!0,href:!0});var JCt=s(SC);ZTe=n(JCt,"SPAN",{});var YCt=s(ZTe);T(Mx.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),Rkr=i(xje),e7e=n(xje,"SPAN",{});var KCt=s(e7e);Bkr=r(KCt,"FlaxAutoModelForQuestionAnswering"),KCt.forEach(t),xje.forEach(t),Eqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(Ex.$$.fragment,Ul),Pkr=i(Ul),zc=n(Ul,"P",{});var IZ=s(zc);Ikr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lY=n(IZ,"A",{href:!0});var ZCt=s(lY);qkr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),Nkr=r(IZ," class method or the "),iY=n(IZ,"A",{href:!0});var e3t=s(iY);jkr=r(e3t,"from_config()"),e3t.forEach(t),Dkr=r(IZ,` class
method.`),IZ.forEach(t),Gkr=i(Ul),Cx=n(Ul,"P",{});var $je=s(Cx);Okr=r($je,"This class cannot be instantiated directly using "),o7e=n($je,"CODE",{});var o3t=s(o7e);Vkr=r(o3t,"__init__()"),o3t.forEach(t),Xkr=r($je," (throws an error)."),$je.forEach(t),zkr=i(Ul),zt=n(Ul,"DIV",{class:!0});var SA=s(zt);T(wx.$$.fragment,SA),Qkr=i(SA),r7e=n(SA,"P",{});var r3t=s(r7e);Wkr=r(r3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r3t.forEach(t),Hkr=i(SA),Qc=n(SA,"P",{});var qZ=s(Qc);Ukr=r(qZ,`Note:
Loading a model from its configuration file does `),t7e=n(qZ,"STRONG",{});var t3t=s(t7e);Jkr=r(t3t,"not"),t3t.forEach(t),Ykr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(qZ,"A",{href:!0});var a3t=s(dY);Kkr=r(a3t,"from_pretrained()"),a3t.forEach(t),Zkr=r(qZ," to load the model weights."),qZ.forEach(t),eSr=i(SA),T(RC.$$.fragment,SA),SA.forEach(t),oSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Ax.$$.fragment,Jl),rSr=i(Jl),a7e=n(Jl,"P",{});var n3t=s(a7e);tSr=r(n3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n3t.forEach(t),aSr=i(Jl),vn=n(Jl,"P",{});var RA=s(vn);nSr=r(RA,"The model class to instantiate is selected based on the "),n7e=n(RA,"CODE",{});var s3t=s(n7e);sSr=r(s3t,"model_type"),s3t.forEach(t),lSr=r(RA,` property of the config object (either
passed as an argument or loaded from `),s7e=n(RA,"CODE",{});var l3t=s(s7e);iSr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),dSr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(RA,"CODE",{});var i3t=s(l7e);cSr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),fSr=r(RA,":"),RA.forEach(t),mSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);BC=n(Ie,"LI",{});var oPe=s(BC);i7e=n(oPe,"STRONG",{});var d3t=s(i7e);gSr=r(d3t,"albert"),d3t.forEach(t),hSr=r(oPe," \u2014 "),cY=n(oPe,"A",{href:!0});var c3t=s(cY);pSr=r(c3t,"FlaxAlbertForQuestionAnswering"),c3t.forEach(t),uSr=r(oPe," (ALBERT model)"),oPe.forEach(t),_Sr=i(Ie),PC=n(Ie,"LI",{});var rPe=s(PC);d7e=n(rPe,"STRONG",{});var f3t=s(d7e);bSr=r(f3t,"bart"),f3t.forEach(t),vSr=r(rPe," \u2014 "),fY=n(rPe,"A",{href:!0});var m3t=s(fY);FSr=r(m3t,"FlaxBartForQuestionAnswering"),m3t.forEach(t),TSr=r(rPe," (BART model)"),rPe.forEach(t),MSr=i(Ie),IC=n(Ie,"LI",{});var tPe=s(IC);c7e=n(tPe,"STRONG",{});var g3t=s(c7e);ESr=r(g3t,"bert"),g3t.forEach(t),CSr=r(tPe," \u2014 "),mY=n(tPe,"A",{href:!0});var h3t=s(mY);wSr=r(h3t,"FlaxBertForQuestionAnswering"),h3t.forEach(t),ASr=r(tPe," (BERT model)"),tPe.forEach(t),ySr=i(Ie),qC=n(Ie,"LI",{});var aPe=s(qC);f7e=n(aPe,"STRONG",{});var p3t=s(f7e);LSr=r(p3t,"big_bird"),p3t.forEach(t),xSr=r(aPe," \u2014 "),gY=n(aPe,"A",{href:!0});var u3t=s(gY);$Sr=r(u3t,"FlaxBigBirdForQuestionAnswering"),u3t.forEach(t),kSr=r(aPe," (BigBird model)"),aPe.forEach(t),SSr=i(Ie),NC=n(Ie,"LI",{});var nPe=s(NC);m7e=n(nPe,"STRONG",{});var _3t=s(m7e);RSr=r(_3t,"distilbert"),_3t.forEach(t),BSr=r(nPe," \u2014 "),hY=n(nPe,"A",{href:!0});var b3t=s(hY);PSr=r(b3t,"FlaxDistilBertForQuestionAnswering"),b3t.forEach(t),ISr=r(nPe," (DistilBERT model)"),nPe.forEach(t),qSr=i(Ie),jC=n(Ie,"LI",{});var sPe=s(jC);g7e=n(sPe,"STRONG",{});var v3t=s(g7e);NSr=r(v3t,"electra"),v3t.forEach(t),jSr=r(sPe," \u2014 "),pY=n(sPe,"A",{href:!0});var F3t=s(pY);DSr=r(F3t,"FlaxElectraForQuestionAnswering"),F3t.forEach(t),GSr=r(sPe," (ELECTRA model)"),sPe.forEach(t),OSr=i(Ie),DC=n(Ie,"LI",{});var lPe=s(DC);h7e=n(lPe,"STRONG",{});var T3t=s(h7e);VSr=r(T3t,"mbart"),T3t.forEach(t),XSr=r(lPe," \u2014 "),uY=n(lPe,"A",{href:!0});var M3t=s(uY);zSr=r(M3t,"FlaxMBartForQuestionAnswering"),M3t.forEach(t),QSr=r(lPe," (mBART model)"),lPe.forEach(t),WSr=i(Ie),GC=n(Ie,"LI",{});var iPe=s(GC);p7e=n(iPe,"STRONG",{});var E3t=s(p7e);HSr=r(E3t,"roberta"),E3t.forEach(t),USr=r(iPe," \u2014 "),_Y=n(iPe,"A",{href:!0});var C3t=s(_Y);JSr=r(C3t,"FlaxRobertaForQuestionAnswering"),C3t.forEach(t),YSr=r(iPe," (RoBERTa model)"),iPe.forEach(t),KSr=i(Ie),OC=n(Ie,"LI",{});var dPe=s(OC);u7e=n(dPe,"STRONG",{});var w3t=s(u7e);ZSr=r(w3t,"roformer"),w3t.forEach(t),eRr=r(dPe," \u2014 "),bY=n(dPe,"A",{href:!0});var A3t=s(bY);oRr=r(A3t,"FlaxRoFormerForQuestionAnswering"),A3t.forEach(t),rRr=r(dPe," (RoFormer model)"),dPe.forEach(t),tRr=i(Ie),VC=n(Ie,"LI",{});var cPe=s(VC);_7e=n(cPe,"STRONG",{});var y3t=s(_7e);aRr=r(y3t,"xlm-roberta"),y3t.forEach(t),nRr=r(cPe," \u2014 "),vY=n(cPe,"A",{href:!0});var L3t=s(vY);sRr=r(L3t,"FlaxXLMRobertaForQuestionAnswering"),L3t.forEach(t),lRr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Ie.forEach(t),iRr=i(Jl),T(XC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Cqe=i(f),Wc=n(f,"H2",{class:!0});var kje=s(Wc);zC=n(kje,"A",{id:!0,class:!0,href:!0});var x3t=s(zC);b7e=n(x3t,"SPAN",{});var $3t=s(b7e);T(yx.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),dRr=i(kje),v7e=n(kje,"SPAN",{});var k3t=s(v7e);cRr=r(k3t,"FlaxAutoModelForTokenClassification"),k3t.forEach(t),kje.forEach(t),wqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Lx.$$.fragment,Yl),fRr=i(Yl),Hc=n(Yl,"P",{});var NZ=s(Hc);mRr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FY=n(NZ,"A",{href:!0});var S3t=s(FY);gRr=r(S3t,"from_pretrained()"),S3t.forEach(t),hRr=r(NZ," class method or the "),TY=n(NZ,"A",{href:!0});var R3t=s(TY);pRr=r(R3t,"from_config()"),R3t.forEach(t),uRr=r(NZ,` class
method.`),NZ.forEach(t),_Rr=i(Yl),xx=n(Yl,"P",{});var Sje=s(xx);bRr=r(Sje,"This class cannot be instantiated directly using "),F7e=n(Sje,"CODE",{});var B3t=s(F7e);vRr=r(B3t,"__init__()"),B3t.forEach(t),FRr=r(Sje," (throws an error)."),Sje.forEach(t),TRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var BA=s(Qt);T($x.$$.fragment,BA),MRr=i(BA),T7e=n(BA,"P",{});var P3t=s(T7e);ERr=r(P3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P3t.forEach(t),CRr=i(BA),Uc=n(BA,"P",{});var jZ=s(Uc);wRr=r(jZ,`Note:
Loading a model from its configuration file does `),M7e=n(jZ,"STRONG",{});var I3t=s(M7e);ARr=r(I3t,"not"),I3t.forEach(t),yRr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(jZ,"A",{href:!0});var q3t=s(MY);LRr=r(q3t,"from_pretrained()"),q3t.forEach(t),xRr=r(jZ," to load the model weights."),jZ.forEach(t),$Rr=i(BA),T(QC.$$.fragment,BA),BA.forEach(t),kRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(kx.$$.fragment,Kl),SRr=i(Kl),E7e=n(Kl,"P",{});var N3t=s(E7e);RRr=r(N3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N3t.forEach(t),BRr=i(Kl),Fn=n(Kl,"P",{});var PA=s(Fn);PRr=r(PA,"The model class to instantiate is selected based on the "),C7e=n(PA,"CODE",{});var j3t=s(C7e);IRr=r(j3t,"model_type"),j3t.forEach(t),qRr=r(PA,` property of the config object (either
passed as an argument or loaded from `),w7e=n(PA,"CODE",{});var D3t=s(w7e);NRr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),jRr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(PA,"CODE",{});var G3t=s(A7e);DRr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),GRr=r(PA,":"),PA.forEach(t),ORr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);WC=n(Fo,"LI",{});var fPe=s(WC);y7e=n(fPe,"STRONG",{});var O3t=s(y7e);VRr=r(O3t,"albert"),O3t.forEach(t),XRr=r(fPe," \u2014 "),EY=n(fPe,"A",{href:!0});var V3t=s(EY);zRr=r(V3t,"FlaxAlbertForTokenClassification"),V3t.forEach(t),QRr=r(fPe," (ALBERT model)"),fPe.forEach(t),WRr=i(Fo),HC=n(Fo,"LI",{});var mPe=s(HC);L7e=n(mPe,"STRONG",{});var X3t=s(L7e);HRr=r(X3t,"bert"),X3t.forEach(t),URr=r(mPe," \u2014 "),CY=n(mPe,"A",{href:!0});var z3t=s(CY);JRr=r(z3t,"FlaxBertForTokenClassification"),z3t.forEach(t),YRr=r(mPe," (BERT model)"),mPe.forEach(t),KRr=i(Fo),UC=n(Fo,"LI",{});var gPe=s(UC);x7e=n(gPe,"STRONG",{});var Q3t=s(x7e);ZRr=r(Q3t,"big_bird"),Q3t.forEach(t),eBr=r(gPe," \u2014 "),wY=n(gPe,"A",{href:!0});var W3t=s(wY);oBr=r(W3t,"FlaxBigBirdForTokenClassification"),W3t.forEach(t),rBr=r(gPe," (BigBird model)"),gPe.forEach(t),tBr=i(Fo),JC=n(Fo,"LI",{});var hPe=s(JC);$7e=n(hPe,"STRONG",{});var H3t=s($7e);aBr=r(H3t,"distilbert"),H3t.forEach(t),nBr=r(hPe," \u2014 "),AY=n(hPe,"A",{href:!0});var U3t=s(AY);sBr=r(U3t,"FlaxDistilBertForTokenClassification"),U3t.forEach(t),lBr=r(hPe," (DistilBERT model)"),hPe.forEach(t),iBr=i(Fo),YC=n(Fo,"LI",{});var pPe=s(YC);k7e=n(pPe,"STRONG",{});var J3t=s(k7e);dBr=r(J3t,"electra"),J3t.forEach(t),cBr=r(pPe," \u2014 "),yY=n(pPe,"A",{href:!0});var Y3t=s(yY);fBr=r(Y3t,"FlaxElectraForTokenClassification"),Y3t.forEach(t),mBr=r(pPe," (ELECTRA model)"),pPe.forEach(t),gBr=i(Fo),KC=n(Fo,"LI",{});var uPe=s(KC);S7e=n(uPe,"STRONG",{});var K3t=s(S7e);hBr=r(K3t,"roberta"),K3t.forEach(t),pBr=r(uPe," \u2014 "),LY=n(uPe,"A",{href:!0});var Z3t=s(LY);uBr=r(Z3t,"FlaxRobertaForTokenClassification"),Z3t.forEach(t),_Br=r(uPe," (RoBERTa model)"),uPe.forEach(t),bBr=i(Fo),ZC=n(Fo,"LI",{});var _Pe=s(ZC);R7e=n(_Pe,"STRONG",{});var ewt=s(R7e);vBr=r(ewt,"roformer"),ewt.forEach(t),FBr=r(_Pe," \u2014 "),xY=n(_Pe,"A",{href:!0});var owt=s(xY);TBr=r(owt,"FlaxRoFormerForTokenClassification"),owt.forEach(t),MBr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),EBr=i(Fo),e3=n(Fo,"LI",{});var bPe=s(e3);B7e=n(bPe,"STRONG",{});var rwt=s(B7e);CBr=r(rwt,"xlm-roberta"),rwt.forEach(t),wBr=r(bPe," \u2014 "),$Y=n(bPe,"A",{href:!0});var twt=s($Y);ABr=r(twt,"FlaxXLMRobertaForTokenClassification"),twt.forEach(t),yBr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),Fo.forEach(t),LBr=i(Kl),T(o3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Aqe=i(f),Jc=n(f,"H2",{class:!0});var Rje=s(Jc);r3=n(Rje,"A",{id:!0,class:!0,href:!0});var awt=s(r3);P7e=n(awt,"SPAN",{});var nwt=s(P7e);T(Sx.$$.fragment,nwt),nwt.forEach(t),awt.forEach(t),xBr=i(Rje),I7e=n(Rje,"SPAN",{});var swt=s(I7e);$Br=r(swt,"FlaxAutoModelForMultipleChoice"),swt.forEach(t),Rje.forEach(t),yqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Rx.$$.fragment,Zl),kBr=i(Zl),Yc=n(Zl,"P",{});var DZ=s(Yc);SBr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=n(DZ,"A",{href:!0});var lwt=s(kY);RBr=r(lwt,"from_pretrained()"),lwt.forEach(t),BBr=r(DZ," class method or the "),SY=n(DZ,"A",{href:!0});var iwt=s(SY);PBr=r(iwt,"from_config()"),iwt.forEach(t),IBr=r(DZ,` class
method.`),DZ.forEach(t),qBr=i(Zl),Bx=n(Zl,"P",{});var Bje=s(Bx);NBr=r(Bje,"This class cannot be instantiated directly using "),q7e=n(Bje,"CODE",{});var dwt=s(q7e);jBr=r(dwt,"__init__()"),dwt.forEach(t),DBr=r(Bje," (throws an error)."),Bje.forEach(t),GBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var IA=s(Wt);T(Px.$$.fragment,IA),OBr=i(IA),N7e=n(IA,"P",{});var cwt=s(N7e);VBr=r(cwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cwt.forEach(t),XBr=i(IA),Kc=n(IA,"P",{});var GZ=s(Kc);zBr=r(GZ,`Note:
Loading a model from its configuration file does `),j7e=n(GZ,"STRONG",{});var fwt=s(j7e);QBr=r(fwt,"not"),fwt.forEach(t),WBr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(GZ,"A",{href:!0});var mwt=s(RY);HBr=r(mwt,"from_pretrained()"),mwt.forEach(t),UBr=r(GZ," to load the model weights."),GZ.forEach(t),JBr=i(IA),T(t3.$$.fragment,IA),IA.forEach(t),YBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Ix.$$.fragment,ei),KBr=i(ei),D7e=n(ei,"P",{});var gwt=s(D7e);ZBr=r(gwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gwt.forEach(t),ePr=i(ei),Tn=n(ei,"P",{});var qA=s(Tn);oPr=r(qA,"The model class to instantiate is selected based on the "),G7e=n(qA,"CODE",{});var hwt=s(G7e);rPr=r(hwt,"model_type"),hwt.forEach(t),tPr=r(qA,` property of the config object (either
passed as an argument or loaded from `),O7e=n(qA,"CODE",{});var pwt=s(O7e);aPr=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),nPr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(qA,"CODE",{});var uwt=s(V7e);sPr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),lPr=r(qA,":"),qA.forEach(t),iPr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);a3=n(To,"LI",{});var vPe=s(a3);X7e=n(vPe,"STRONG",{});var _wt=s(X7e);dPr=r(_wt,"albert"),_wt.forEach(t),cPr=r(vPe," \u2014 "),BY=n(vPe,"A",{href:!0});var bwt=s(BY);fPr=r(bwt,"FlaxAlbertForMultipleChoice"),bwt.forEach(t),mPr=r(vPe," (ALBERT model)"),vPe.forEach(t),gPr=i(To),n3=n(To,"LI",{});var FPe=s(n3);z7e=n(FPe,"STRONG",{});var vwt=s(z7e);hPr=r(vwt,"bert"),vwt.forEach(t),pPr=r(FPe," \u2014 "),PY=n(FPe,"A",{href:!0});var Fwt=s(PY);uPr=r(Fwt,"FlaxBertForMultipleChoice"),Fwt.forEach(t),_Pr=r(FPe," (BERT model)"),FPe.forEach(t),bPr=i(To),s3=n(To,"LI",{});var TPe=s(s3);Q7e=n(TPe,"STRONG",{});var Twt=s(Q7e);vPr=r(Twt,"big_bird"),Twt.forEach(t),FPr=r(TPe," \u2014 "),IY=n(TPe,"A",{href:!0});var Mwt=s(IY);TPr=r(Mwt,"FlaxBigBirdForMultipleChoice"),Mwt.forEach(t),MPr=r(TPe," (BigBird model)"),TPe.forEach(t),EPr=i(To),l3=n(To,"LI",{});var MPe=s(l3);W7e=n(MPe,"STRONG",{});var Ewt=s(W7e);CPr=r(Ewt,"distilbert"),Ewt.forEach(t),wPr=r(MPe," \u2014 "),qY=n(MPe,"A",{href:!0});var Cwt=s(qY);APr=r(Cwt,"FlaxDistilBertForMultipleChoice"),Cwt.forEach(t),yPr=r(MPe," (DistilBERT model)"),MPe.forEach(t),LPr=i(To),i3=n(To,"LI",{});var EPe=s(i3);H7e=n(EPe,"STRONG",{});var wwt=s(H7e);xPr=r(wwt,"electra"),wwt.forEach(t),$Pr=r(EPe," \u2014 "),NY=n(EPe,"A",{href:!0});var Awt=s(NY);kPr=r(Awt,"FlaxElectraForMultipleChoice"),Awt.forEach(t),SPr=r(EPe," (ELECTRA model)"),EPe.forEach(t),RPr=i(To),d3=n(To,"LI",{});var CPe=s(d3);U7e=n(CPe,"STRONG",{});var ywt=s(U7e);BPr=r(ywt,"roberta"),ywt.forEach(t),PPr=r(CPe," \u2014 "),jY=n(CPe,"A",{href:!0});var Lwt=s(jY);IPr=r(Lwt,"FlaxRobertaForMultipleChoice"),Lwt.forEach(t),qPr=r(CPe," (RoBERTa model)"),CPe.forEach(t),NPr=i(To),c3=n(To,"LI",{});var wPe=s(c3);J7e=n(wPe,"STRONG",{});var xwt=s(J7e);jPr=r(xwt,"roformer"),xwt.forEach(t),DPr=r(wPe," \u2014 "),DY=n(wPe,"A",{href:!0});var $wt=s(DY);GPr=r($wt,"FlaxRoFormerForMultipleChoice"),$wt.forEach(t),OPr=r(wPe," (RoFormer model)"),wPe.forEach(t),VPr=i(To),f3=n(To,"LI",{});var APe=s(f3);Y7e=n(APe,"STRONG",{});var kwt=s(Y7e);XPr=r(kwt,"xlm-roberta"),kwt.forEach(t),zPr=r(APe," \u2014 "),GY=n(APe,"A",{href:!0});var Swt=s(GY);QPr=r(Swt,"FlaxXLMRobertaForMultipleChoice"),Swt.forEach(t),WPr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),To.forEach(t),HPr=i(ei),T(m3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Lqe=i(f),Zc=n(f,"H2",{class:!0});var Pje=s(Zc);g3=n(Pje,"A",{id:!0,class:!0,href:!0});var Rwt=s(g3);K7e=n(Rwt,"SPAN",{});var Bwt=s(K7e);T(qx.$$.fragment,Bwt),Bwt.forEach(t),Rwt.forEach(t),UPr=i(Pje),Z7e=n(Pje,"SPAN",{});var Pwt=s(Z7e);JPr=r(Pwt,"FlaxAutoModelForNextSentencePrediction"),Pwt.forEach(t),Pje.forEach(t),xqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Nx.$$.fragment,oi),YPr=i(oi),ef=n(oi,"P",{});var OZ=s(ef);KPr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OY=n(OZ,"A",{href:!0});var Iwt=s(OY);ZPr=r(Iwt,"from_pretrained()"),Iwt.forEach(t),eIr=r(OZ," class method or the "),VY=n(OZ,"A",{href:!0});var qwt=s(VY);oIr=r(qwt,"from_config()"),qwt.forEach(t),rIr=r(OZ,` class
method.`),OZ.forEach(t),tIr=i(oi),jx=n(oi,"P",{});var Ije=s(jx);aIr=r(Ije,"This class cannot be instantiated directly using "),eMe=n(Ije,"CODE",{});var Nwt=s(eMe);nIr=r(Nwt,"__init__()"),Nwt.forEach(t),sIr=r(Ije," (throws an error)."),Ije.forEach(t),lIr=i(oi),Ht=n(oi,"DIV",{class:!0});var NA=s(Ht);T(Dx.$$.fragment,NA),iIr=i(NA),oMe=n(NA,"P",{});var jwt=s(oMe);dIr=r(jwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jwt.forEach(t),cIr=i(NA),of=n(NA,"P",{});var VZ=s(of);fIr=r(VZ,`Note:
Loading a model from its configuration file does `),rMe=n(VZ,"STRONG",{});var Dwt=s(rMe);mIr=r(Dwt,"not"),Dwt.forEach(t),gIr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(VZ,"A",{href:!0});var Gwt=s(XY);hIr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),pIr=r(VZ," to load the model weights."),VZ.forEach(t),uIr=i(NA),T(h3.$$.fragment,NA),NA.forEach(t),_Ir=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Gx.$$.fragment,ri),bIr=i(ri),tMe=n(ri,"P",{});var Owt=s(tMe);vIr=r(Owt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Owt.forEach(t),FIr=i(ri),Mn=n(ri,"P",{});var jA=s(Mn);TIr=r(jA,"The model class to instantiate is selected based on the "),aMe=n(jA,"CODE",{});var Vwt=s(aMe);MIr=r(Vwt,"model_type"),Vwt.forEach(t),EIr=r(jA,` property of the config object (either
passed as an argument or loaded from `),nMe=n(jA,"CODE",{});var Xwt=s(nMe);CIr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),wIr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(jA,"CODE",{});var zwt=s(sMe);AIr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),yIr=r(jA,":"),jA.forEach(t),LIr=i(ri),lMe=n(ri,"UL",{});var Qwt=s(lMe);p3=n(Qwt,"LI",{});var yPe=s(p3);iMe=n(yPe,"STRONG",{});var Wwt=s(iMe);xIr=r(Wwt,"bert"),Wwt.forEach(t),$Ir=r(yPe," \u2014 "),zY=n(yPe,"A",{href:!0});var Hwt=s(zY);kIr=r(Hwt,"FlaxBertForNextSentencePrediction"),Hwt.forEach(t),SIr=r(yPe," (BERT model)"),yPe.forEach(t),Qwt.forEach(t),RIr=i(ri),T(u3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),$qe=i(f),rf=n(f,"H2",{class:!0});var qje=s(rf);_3=n(qje,"A",{id:!0,class:!0,href:!0});var Uwt=s(_3);dMe=n(Uwt,"SPAN",{});var Jwt=s(dMe);T(Ox.$$.fragment,Jwt),Jwt.forEach(t),Uwt.forEach(t),BIr=i(qje),cMe=n(qje,"SPAN",{});var Ywt=s(cMe);PIr=r(Ywt,"FlaxAutoModelForImageClassification"),Ywt.forEach(t),qje.forEach(t),kqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Vx.$$.fragment,ti),IIr=i(ti),tf=n(ti,"P",{});var XZ=s(tf);qIr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QY=n(XZ,"A",{href:!0});var Kwt=s(QY);NIr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),jIr=r(XZ," class method or the "),WY=n(XZ,"A",{href:!0});var Zwt=s(WY);DIr=r(Zwt,"from_config()"),Zwt.forEach(t),GIr=r(XZ,` class
method.`),XZ.forEach(t),OIr=i(ti),Xx=n(ti,"P",{});var Nje=s(Xx);VIr=r(Nje,"This class cannot be instantiated directly using "),fMe=n(Nje,"CODE",{});var eAt=s(fMe);XIr=r(eAt,"__init__()"),eAt.forEach(t),zIr=r(Nje," (throws an error)."),Nje.forEach(t),QIr=i(ti),Ut=n(ti,"DIV",{class:!0});var DA=s(Ut);T(zx.$$.fragment,DA),WIr=i(DA),mMe=n(DA,"P",{});var oAt=s(mMe);HIr=r(oAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oAt.forEach(t),UIr=i(DA),af=n(DA,"P",{});var zZ=s(af);JIr=r(zZ,`Note:
Loading a model from its configuration file does `),gMe=n(zZ,"STRONG",{});var rAt=s(gMe);YIr=r(rAt,"not"),rAt.forEach(t),KIr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(zZ,"A",{href:!0});var tAt=s(HY);ZIr=r(tAt,"from_pretrained()"),tAt.forEach(t),eqr=r(zZ," to load the model weights."),zZ.forEach(t),oqr=i(DA),T(b3.$$.fragment,DA),DA.forEach(t),rqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Qx.$$.fragment,ai),tqr=i(ai),hMe=n(ai,"P",{});var aAt=s(hMe);aqr=r(aAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aAt.forEach(t),nqr=i(ai),En=n(ai,"P",{});var GA=s(En);sqr=r(GA,"The model class to instantiate is selected based on the "),pMe=n(GA,"CODE",{});var nAt=s(pMe);lqr=r(nAt,"model_type"),nAt.forEach(t),iqr=r(GA,` property of the config object (either
passed as an argument or loaded from `),uMe=n(GA,"CODE",{});var sAt=s(uMe);dqr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),cqr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(GA,"CODE",{});var lAt=s(_Me);fqr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),mqr=r(GA,":"),GA.forEach(t),gqr=i(ai),Wx=n(ai,"UL",{});var jje=s(Wx);v3=n(jje,"LI",{});var LPe=s(v3);bMe=n(LPe,"STRONG",{});var iAt=s(bMe);hqr=r(iAt,"beit"),iAt.forEach(t),pqr=r(LPe," \u2014 "),UY=n(LPe,"A",{href:!0});var dAt=s(UY);uqr=r(dAt,"FlaxBeitForImageClassification"),dAt.forEach(t),_qr=r(LPe," (BEiT model)"),LPe.forEach(t),bqr=i(jje),F3=n(jje,"LI",{});var xPe=s(F3);vMe=n(xPe,"STRONG",{});var cAt=s(vMe);vqr=r(cAt,"vit"),cAt.forEach(t),Fqr=r(xPe," \u2014 "),JY=n(xPe,"A",{href:!0});var fAt=s(JY);Tqr=r(fAt,"FlaxViTForImageClassification"),fAt.forEach(t),Mqr=r(xPe," (ViT model)"),xPe.forEach(t),jje.forEach(t),Eqr=i(ai),T(T3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Sqe=i(f),nf=n(f,"H2",{class:!0});var Dje=s(nf);M3=n(Dje,"A",{id:!0,class:!0,href:!0});var mAt=s(M3);FMe=n(mAt,"SPAN",{});var gAt=s(FMe);T(Hx.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),Cqr=i(Dje),TMe=n(Dje,"SPAN",{});var hAt=s(TMe);wqr=r(hAt,"FlaxAutoModelForVision2Seq"),hAt.forEach(t),Dje.forEach(t),Rqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Ux.$$.fragment,ni),Aqr=i(ni),sf=n(ni,"P",{});var QZ=s(sf);yqr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YY=n(QZ,"A",{href:!0});var pAt=s(YY);Lqr=r(pAt,"from_pretrained()"),pAt.forEach(t),xqr=r(QZ," class method or the "),KY=n(QZ,"A",{href:!0});var uAt=s(KY);$qr=r(uAt,"from_config()"),uAt.forEach(t),kqr=r(QZ,` class
method.`),QZ.forEach(t),Sqr=i(ni),Jx=n(ni,"P",{});var Gje=s(Jx);Rqr=r(Gje,"This class cannot be instantiated directly using "),MMe=n(Gje,"CODE",{});var _At=s(MMe);Bqr=r(_At,"__init__()"),_At.forEach(t),Pqr=r(Gje," (throws an error)."),Gje.forEach(t),Iqr=i(ni),Jt=n(ni,"DIV",{class:!0});var OA=s(Jt);T(Yx.$$.fragment,OA),qqr=i(OA),EMe=n(OA,"P",{});var bAt=s(EMe);Nqr=r(bAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bAt.forEach(t),jqr=i(OA),lf=n(OA,"P",{});var WZ=s(lf);Dqr=r(WZ,`Note:
Loading a model from its configuration file does `),CMe=n(WZ,"STRONG",{});var vAt=s(CMe);Gqr=r(vAt,"not"),vAt.forEach(t),Oqr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(WZ,"A",{href:!0});var FAt=s(ZY);Vqr=r(FAt,"from_pretrained()"),FAt.forEach(t),Xqr=r(WZ," to load the model weights."),WZ.forEach(t),zqr=i(OA),T(E3.$$.fragment,OA),OA.forEach(t),Qqr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Kx.$$.fragment,si),Wqr=i(si),wMe=n(si,"P",{});var TAt=s(wMe);Hqr=r(TAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TAt.forEach(t),Uqr=i(si),Cn=n(si,"P",{});var VA=s(Cn);Jqr=r(VA,"The model class to instantiate is selected based on the "),AMe=n(VA,"CODE",{});var MAt=s(AMe);Yqr=r(MAt,"model_type"),MAt.forEach(t),Kqr=r(VA,` property of the config object (either
passed as an argument or loaded from `),yMe=n(VA,"CODE",{});var EAt=s(yMe);Zqr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),eNr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(VA,"CODE",{});var CAt=s(LMe);oNr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),rNr=r(VA,":"),VA.forEach(t),tNr=i(si),xMe=n(si,"UL",{});var wAt=s(xMe);C3=n(wAt,"LI",{});var $Pe=s(C3);$Me=n($Pe,"STRONG",{});var AAt=s($Me);aNr=r(AAt,"vision-encoder-decoder"),AAt.forEach(t),nNr=r($Pe," \u2014 "),eK=n($Pe,"A",{href:!0});var yAt=s(eK);sNr=r(yAt,"FlaxVisionEncoderDecoderModel"),yAt.forEach(t),lNr=r($Pe," (Vision Encoder decoder model)"),$Pe.forEach(t),wAt.forEach(t),iNr=i(si),T(w3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kyt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(_$,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(b$,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertConfig"),c(v$,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartConfig"),c(F$,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitConfig"),c(T$,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertConfig"),c(M$,"href","/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(E$,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdConfig"),c(C$,"href","/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(w$,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(A$,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(y$,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertConfig"),c(L$,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineConfig"),c(x$,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPConfig"),c($$,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertConfig"),c(k$,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextConfig"),c(S$,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLConfig"),c(R$,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(B$,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(P$,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(I$,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaConfig"),c(q$,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(N$,"href","/docs/transformers/pr_17250/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(j$,"href","/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTConfig"),c(D$,"href","/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrConfig"),c(G$,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertConfig"),c(O$,"href","/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRConfig"),c(V$,"href","/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTConfig"),c(X$,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraConfig"),c(z$,"href","/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Q$,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertConfig"),c(W$,"href","/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaConfig"),c(H$,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetConfig"),c(U$,"href","/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTConfig"),c(J$,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelConfig"),c(Y$,"href","/docs/transformers/pr_17250/en/model_doc/glpn#transformers.GLPNConfig"),c(K$,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Config"),c(Z$,"href","/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ek,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJConfig"),c(ok,"href","/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertConfig"),c(rk,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertConfig"),c(tk,"href","/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ak,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nk,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sk,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDConfig"),c(lk,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerConfig"),c(ik,"href","/docs/transformers/pr_17250/en/model_doc/luke#transformers.LukeConfig"),c(dk,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertConfig"),c(ck,"href","/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100Config"),c(fk,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianConfig"),c(mk,"href","/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(gk,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartConfig"),c(hk,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(pk,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(uk,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetConfig"),c(_k,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Config"),c(bk,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vk,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Fk,"href","/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTConfig"),c(Tk,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusConfig"),c(Mk,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ek,"href","/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartConfig"),c(Ck,"href","/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(wk,"href","/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ak,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(yk,"href","/docs/transformers/pr_17250/en/model_doc/rag#transformers.RagConfig"),c(Lk,"href","/docs/transformers/pr_17250/en/model_doc/realm#transformers.RealmConfig"),c(xk,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerConfig"),c($k,"href","/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetConfig"),c(kk,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertConfig"),c(Sk,"href","/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetConfig"),c(Rk,"href","/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertConfig"),c(Bk,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaConfig"),c(Pk,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerConfig"),c(Ik,"href","/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerConfig"),c(qk,"href","/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWConfig"),c(Nk,"href","/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDConfig"),c(jk,"href","/docs/transformers/pr_17250/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Dk,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Gk,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Ok,"href","/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterConfig"),c(Vk,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Xk,"href","/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinConfig"),c(zk,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Config"),c(Qk,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasConfig"),c(Wk,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Hk,"href","/docs/transformers/pr_17250/en/model_doc/trocr#transformers.TrOCRConfig"),c(Uk,"href","/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Jk,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Yk,"href","/docs/transformers/pr_17250/en/model_doc/van#transformers.VanConfig"),c(Kk,"href","/docs/transformers/pr_17250/en/model_doc/vilt#transformers.ViltConfig"),c(Zk,"href","/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(eS,"href","/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(oS,"href","/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(rS,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTConfig"),c(tS,"href","/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(aS,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(nS,"href","/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMConfig"),c(sS,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMConfig"),c(lS,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMConfig"),c(iS,"href","/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(dS,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(cS,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(fS,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetConfig"),c(mS,"href","/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosConfig"),c(gS,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(hS,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(pS,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertTokenizer"),c(uS,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_S,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartTokenizer"),c(bS,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartTokenizerFast"),c(vS,"href","/docs/transformers/pr_17250/en/model_doc/barthez#transformers.BarthezTokenizer"),c(FS,"href","/docs/transformers/pr_17250/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(TS,"href","/docs/transformers/pr_17250/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(MS,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizer"),c(ES,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizerFast"),c(CS,"href","/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(wS,"href","/docs/transformers/pr_17250/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(AS,"href","/docs/transformers/pr_17250/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(yS,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(LS,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(xS,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($S,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kS,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(SS,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(RS,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(BS,"href","/docs/transformers/pr_17250/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(PS,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertTokenizer"),c(IS,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(qS,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineTokenizer"),c(NS,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPTokenizer"),c(jS,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(DS,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(GS,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(OS,"href","/docs/transformers/pr_17250/en/model_doc/cpm#transformers.CpmTokenizer"),c(VS,"href","/docs/transformers/pr_17250/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(XS,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(zS,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QS,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WS,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaTokenizer"),c(HS,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(US,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(JS,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(YS,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(KS,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(eR,"href","/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(oR,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraTokenizer"),c(rR,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(tR,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(aR,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetTokenizer"),c(nR,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(sR,"href","/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(lR,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelTokenizer"),c(iR,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(dR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pR,"href","/docs/transformers/pr_17250/en/model_doc/herbert#transformers.HerbertTokenizer"),c(uR,"href","/docs/transformers/pr_17250/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(_R,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bR,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vR,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FR,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(TR,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(MR,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(ER,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(CR,"href","/docs/transformers/pr_17250/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(wR,"href","/docs/transformers/pr_17250/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(AR,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDTokenizer"),c(yR,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDTokenizerFast"),c(LR,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerTokenizer"),c(xR,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c($R,"href","/docs/transformers/pr_17250/en/model_doc/luke#transformers.LukeTokenizer"),c(kR,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SR,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BR,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianTokenizer"),c(PR,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartTokenizer"),c(IR,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qR,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NR,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jR,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizer"),c(DR,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizerFast"),c(GR,"href","/docs/transformers/pr_17250/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OR,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VR,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zR,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QR,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.T5Tokenizer"),c(WR,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HR,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertTokenizer"),c(UR,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YR,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KR,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eB,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oB,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rB,"href","/docs/transformers/pr_17250/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tB,"href","/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aB,"href","/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17250/en/model_doc/rag#transformers.RagTokenizer"),c(iB,"href","/docs/transformers/pr_17250/en/model_doc/realm#transformers.RealmTokenizer"),c(dB,"href","/docs/transformers/pr_17250/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cB,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fB,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mB,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gB,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pB,"href","/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vB,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FB,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TB,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MB,"href","/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EB,"href","/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CB,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wB,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.T5Tokenizer"),c(yB,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.T5TokenizerFast"),c(LB,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasTokenizer"),c(xB,"href","/docs/transformers/pr_17250/en/model_doc/tapex#transformers.TapexTokenizer"),c($B,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kB,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizer"),c(SB,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PB,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qB,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMTokenizer"),c(NB,"href","/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(WB,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17250/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nP,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(sP,"href","/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bP,"href","/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(vP,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(FP,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPProcessor"),c(TP,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(MP,"href","/docs/transformers/pr_17250/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(EP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wP,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(AP,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(yP,"href","/docs/transformers/pr_17250/en/model_doc/trocr#transformers.TrOCRProcessor"),c(LP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/pr_17250/en/model_doc/vilt#transformers.ViltProcessor"),c(kP,"href","/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(SP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(BP,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PP,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IP,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qP,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertModel"),c(NP,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartModel"),c(jP,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitModel"),c(DP,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertModel"),c(GP,"href","/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(OP,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdModel"),c(VP,"href","/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(XP,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(zP,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(QP,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertModel"),c(WP,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineModel"),c(HP,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.CLIPModel"),c(UP,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertModel"),c(JP,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextModel"),c(YP,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLModel"),c(KP,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(ZP,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(eI,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(oI,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaModel"),c(rI,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(tI,"href","/docs/transformers/pr_17250/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(aI,"href","/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTModel"),c(nI,"href","/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrModel"),c(sI,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertModel"),c(lI,"href","/docs/transformers/pr_17250/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iI,"href","/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTModel"),c(dI,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraModel"),c(cI,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertModel"),c(fI,"href","/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaModel"),c(mI,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetModel"),c(gI,"href","/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTModel"),c(hI,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelModel"),c(pI,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelBaseModel"),c(uI,"href","/docs/transformers/pr_17250/en/model_doc/glpn#transformers.GLPNModel"),c(_I,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2Model"),c(bI,"href","/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vI,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJModel"),c(FI,"href","/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertModel"),c(TI,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertModel"),c(MI,"href","/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(EI,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(CI,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(wI,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDModel"),c(AI,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerModel"),c(yI,"href","/docs/transformers/pr_17250/en/model_doc/luke#transformers.LukeModel"),c(LI,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertModel"),c(xI,"href","/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100Model"),c($I,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianModel"),c(kI,"href","/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerModel"),c(SI,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartModel"),c(RI,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(BI,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertModel"),c(PI,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetModel"),c(II,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5Model"),c(qI,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerModel"),c(NI,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jI,"href","/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTModel"),c(DI,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusModel"),c(GI,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverModel"),c(OI,"href","/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartModel"),c(VI,"href","/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerModel"),c(XI,"href","/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zI,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertModel"),c(QI,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerModel"),c(WI,"href","/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetModel"),c(HI,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertModel"),c(UI,"href","/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetModel"),c(JI,"href","/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertModel"),c(YI,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaModel"),c(KI,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerModel"),c(ZI,"href","/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerModel"),c(eq,"href","/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWModel"),c(oq,"href","/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDModel"),c(rq,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tq,"href","/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterModel"),c(aq,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nq,"href","/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinModel"),c(sq,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5Model"),c(lq,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasModel"),c(iq,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(dq,"href","/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechModel"),c(cq,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(fq,"href","/docs/transformers/pr_17250/en/model_doc/van#transformers.VanModel"),c(mq,"href","/docs/transformers/pr_17250/en/model_doc/vilt#transformers.ViltModel"),c(gq,"href","/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(hq,"href","/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertModel"),c(pq,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTModel"),c(uq,"href","/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_q,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(bq,"href","/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMModel"),c(vq,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMModel"),c(Fq,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMModel"),c(Tq,"href","/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Mq,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Eq,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Cq,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetModel"),c(wq,"href","/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosModel"),c(Aq,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(yq,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lq,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xq,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($q,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kq,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Sq,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForPreTraining"),c(Rq,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Bq,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Pq,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Iq,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qq,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jq,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Gq,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Oq,"href","/docs/transformers/pr_17250/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Vq,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Xq,"href","/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Qq,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wq,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eN,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oN,"href","/docs/transformers/pr_17250/en/model_doc/retribert#transformers.RetriBertModel"),c(rN,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tN,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aN,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nN,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sN,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(lN,"href","/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(iN,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(dN,"href","/docs/transformers/pr_17250/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(cN,"href","/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(fN,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(mN,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gN,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hN,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pN,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(uN,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vN,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForCausalLM"),c(FN,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertLMHeadModel"),c(TN,"href","/docs/transformers/pr_17250/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(MN,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(EN,"href","/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(CN,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(wN,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(AN,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(yN,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LN,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(xN,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForCausalLM"),c($N,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kN,"href","/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(SN,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(RN,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianForCausalLM"),c(BN,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForCausalLM"),c(PN,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(IN,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qN,"href","/docs/transformers/pr_17250/en/model_doc/opt#transformers.OPTForCausalLM"),c(NN,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jN,"href","/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(DN,"href","/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(GN,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ON,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(VN,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(XN,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(zN,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QN,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(WN,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(HN,"href","/docs/transformers/pr_17250/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(UN,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(JN,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YN,"href","/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(KN,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ZN,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ej,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForMaskedLM"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(oj,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nj,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ij,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fj,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mj,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gj,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(pj,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(_j,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bj,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wj,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(yj,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(xj,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qj,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForSeq2SeqLM"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Nj,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jj,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dj,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gj,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Qj,"href","/docs/transformers/pr_17250/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17250/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.MarianMTModel"),c(Jj,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17250/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17250/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_1,"id","transformers.AutoModelForSequenceClassification"),c(_1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(tD,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDForSequenceClassification"),c($D,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17250/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(KD,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForNextSentencePrediction"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c($G,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(BG,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(PG,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(IG,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qG,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.AutoModelForTokenClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(NG,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForTokenClassification"),c(VG,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(XG,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForTokenClassification"),c(QG,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(HG,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(UG,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(JG,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(KG,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eO,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oO,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rO,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tO,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aO,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(nO,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sO,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dO,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cO,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gO,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hO,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(uO,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_O,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bO,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vO,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.AutoModelForQuestionAnswering"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(FO,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17250/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17250/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(qO,"href","/docs/transformers/pr_17250/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17250/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17250/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17250/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17250/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17250/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17250/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17250/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17250/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/pr_17250/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForTableQuestionAnswering"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(iV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForImageClassification"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(mV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitForImageClassification"),c(uV,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_V,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bV,"href","/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vV,"href","/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FV,"href","/docs/transformers/pr_17250/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TV,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MV,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EV,"href","/docs/transformers/pr_17250/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CV,"href","/docs/transformers/pr_17250/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wV,"href","/docs/transformers/pr_17250/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AV,"href","/docs/transformers/pr_17250/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(yV,"href","/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(LV,"href","/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinForImageClassification"),c(xV,"href","/docs/transformers/pr_17250/en/model_doc/van#transformers.VanForImageClassification"),c($V,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForVision2Seq"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(kV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForAudioClassification"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(PV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForAudioFrameClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(QV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(JV,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(YV,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(KV,"href","/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForCTC"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(tX,"href","/docs/transformers/pr_17250/en/model_doc/hubert#transformers.HubertForCTC"),c(aX,"href","/docs/transformers/pr_17250/en/model_doc/sew#transformers.SEWForCTC"),c(nX,"href","/docs/transformers/pr_17250/en/model_doc/sew-d#transformers.SEWDForCTC"),c(sX,"href","/docs/transformers/pr_17250/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(lX,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(iX,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(dX,"href","/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForSpeechSeq2Seq"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17250/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(hX,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForAudioXVector"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(pX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(vX,"href","/docs/transformers/pr_17250/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(FX,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(TX,"href","/docs/transformers/pr_17250/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForMaskedImageModeling"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(MX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17250/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(AX,"href","/docs/transformers/pr_17250/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(yX,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForObjectDetection"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrForObjectDetection"),c(SX,"href","/docs/transformers/pr_17250/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.AutoModelForImageSegmentation"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(RX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17250/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.AutoModelForSemanticSegmentation"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(qX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(GX,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(OX,"href","/docs/transformers/pr_17250/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(VX,"href","/docs/transformers/pr_17250/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.AutoModelForInstanceSegmentation"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17250/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.TFAutoModel"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertModel"),c(KX,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.TFBartModel"),c(ZX,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertModel"),c(ez,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(oz,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(rz,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertModel"),c(tz,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.TFCLIPModel"),c(az,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertModel"),c(nz,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.TFConvNextModel"),c(sz,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLModel"),c(lz,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(iz,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaModel"),c(dz,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(cz,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(fz,"href","/docs/transformers/pr_17250/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(mz,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraModel"),c(gz,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(hz,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelModel"),c(pz,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(uz,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_z,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJModel"),c(bz,"href","/docs/transformers/pr_17250/en/model_doc/hubert#transformers.TFHubertModel"),c(vz,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Fz,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.TFLEDModel"),c(Tz,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerModel"),c(Mz,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Ez,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.TFMarianModel"),c(Cz,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.TFMBartModel"),c(wz,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Az,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetModel"),c(yz,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.TFMT5Model"),c(Lz,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(xz,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.TFPegasusModel"),c($z,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertModel"),c(kz,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaModel"),c(Sz,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Rz,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Bz,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.TFT5Model"),c(Pz,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasModel"),c(Iz,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(qz,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.TFViTModel"),c(Nz,"href","/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(jz,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Dz,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMModel"),c(Gz,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Oz,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.TFAutoModelForPreTraining"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Wz,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Hz,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Uz,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Jz,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Yz,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Kz,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Zz,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(oQ,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(rQ,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17250/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(aQ,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(nQ,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(dQ,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17250/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(mQ,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForCausalLM"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(FQ,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MQ,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(EQ,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(wQ,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(AQ,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(yQ,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.TFAutoModelForImageClassification"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17250/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(BQ,"href","/docs/transformers/pr_17250/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(PQ,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.TFAutoModelForMaskedLM"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eW,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oW,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(rW,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tW,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aW,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($7,"id","transformers.TFAutoModelForSeq2SeqLM"),c($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dW,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cW,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(fW,"href","/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(mW,"href","/docs/transformers/pr_17250/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.TFMarianMTModel"),c(hW,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.TFAutoModelForSequenceClassification"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(bW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17250/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($W,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17250/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17250/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.TFAutoModelForMultipleChoice"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(WW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(gH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(_H,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(bH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17250/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForTokenClassification"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(AH,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(yH,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(LH,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(xH,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c($H,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(kH,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(SH,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RH,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(PH,"href","/docs/transformers/pr_17250/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(IH,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(qH,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(NH,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(jH,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(DH,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(GH,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(OH,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(VH,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XH,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.TFAutoModelForQuestionAnswering"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(zH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17250/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17250/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17250/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17250/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17250/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tU,"href","/docs/transformers/pr_17250/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17250/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17250/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17250/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17250/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17250/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(mU,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17250/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.TFAutoModelForVision2Seq"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(hU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(bU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17250/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.FlaxAutoModel"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(MU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AU,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartModel"),c(yU,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.FlaxBeitModel"),c(LU,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertModel"),c(xU,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c($U,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(kU,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SU,"href","/docs/transformers/pr_17250/en/model_doc/clip#transformers.FlaxCLIPModel"),c(RU,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(BU,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraModel"),c(PU,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(IU,"href","/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(qU,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NU,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.FlaxMarianModel"),c(jU,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartModel"),c(DU,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.FlaxMT5Model"),c(GU,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(OU,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VU,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(XU,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.FlaxT5Model"),c(zU,"href","/docs/transformers/pr_17250/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(QU,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.FlaxViTModel"),c(WU,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(HU,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(UU,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.FlaxAutoModelForCausalLM"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(JU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(eJ,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(oJ,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(rJ,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(tJ,"href","/docs/transformers/pr_17250/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aJ,"href","/docs/transformers/pr_17250/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nJ,"href","/docs/transformers/pr_17250/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sJ,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(lJ,"href","/docs/transformers/pr_17250/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModelForPreTraining"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(mJ,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(hJ,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(pJ,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(uJ,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17250/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(MJ,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForMaskedLM"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c($J,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17250/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17250/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(VJ,"href","/docs/transformers/pr_17250/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(XJ,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17250/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17250/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17250/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_17250/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17250/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForTokenClassification"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(FY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(wY,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(AY,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(LY,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(xY,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c($Y,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17250/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17250/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17250/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17250/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17250/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17250/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17250/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(OY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_17250/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForImageClassification"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(QY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17250/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(JY,"href","/docs/transformers/pr_17250/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForVision2Seq"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(YY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17250/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17250/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,XA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,zA),e(Xe,yn),e(Xe,Ln),e(Ln,QA),e(Xe,fi),e(Xe,xn),e(xn,WA),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,f$),e(Ae,gi),e(gi,m$),e(Ae,g$),b(f,Eo,_),b(f,Ea,_),e(Ea,h$),e(Ea,pf),e(pf,p$),e(Ea,Oje),b(f,kPe,_),b(f,hi,_),e(hi,uf),e(uf,HZ),M(HA,HZ,null),e(hi,Vje),e(hi,UZ),e(UZ,Xje),b(f,SPe,_),b(f,$n,_),e($n,zje),e($n,JZ),e(JZ,Qje),e($n,Wje),e($n,YZ),e(YZ,Hje),e($n,Uje),b(f,RPe,_),M(UA,f,_),b(f,BPe,_),b(f,u$,_),e(u$,Jje),b(f,PPe,_),M(_f,f,_),b(f,IPe,_),b(f,pi,_),e(pi,bf),e(bf,KZ),M(JA,KZ,null),e(pi,Yje),e(pi,ZZ),e(ZZ,Kje),b(f,qPe,_),b(f,Co,_),M(YA,Co,null),e(Co,Zje),e(Co,KA),e(KA,eDe),e(KA,_$),e(_$,oDe),e(KA,rDe),e(Co,tDe),e(Co,ZA),e(ZA,aDe),e(ZA,eee),e(eee,nDe),e(ZA,sDe),e(Co,lDe),e(Co,Er),M(e6,Er,null),e(Er,iDe),e(Er,oee),e(oee,dDe),e(Er,cDe),e(Er,ui),e(ui,fDe),e(ui,ree),e(ree,mDe),e(ui,gDe),e(ui,tee),e(tee,hDe),e(ui,pDe),e(Er,uDe),e(Er,y),e(y,vf),e(vf,aee),e(aee,_De),e(vf,bDe),e(vf,b$),e(b$,vDe),e(vf,FDe),e(y,TDe),e(y,Ff),e(Ff,nee),e(nee,MDe),e(Ff,EDe),e(Ff,v$),e(v$,CDe),e(Ff,wDe),e(y,ADe),e(y,Tf),e(Tf,see),e(see,yDe),e(Tf,LDe),e(Tf,F$),e(F$,xDe),e(Tf,$De),e(y,kDe),e(y,Mf),e(Mf,lee),e(lee,SDe),e(Mf,RDe),e(Mf,T$),e(T$,BDe),e(Mf,PDe),e(y,IDe),e(y,Ef),e(Ef,iee),e(iee,qDe),e(Ef,NDe),e(Ef,M$),e(M$,jDe),e(Ef,DDe),e(y,GDe),e(y,Cf),e(Cf,dee),e(dee,ODe),e(Cf,VDe),e(Cf,E$),e(E$,XDe),e(Cf,zDe),e(y,QDe),e(y,wf),e(wf,cee),e(cee,WDe),e(wf,HDe),e(wf,C$),e(C$,UDe),e(wf,JDe),e(y,YDe),e(y,Af),e(Af,fee),e(fee,KDe),e(Af,ZDe),e(Af,w$),e(w$,eGe),e(Af,oGe),e(y,rGe),e(y,yf),e(yf,mee),e(mee,tGe),e(yf,aGe),e(yf,A$),e(A$,nGe),e(yf,sGe),e(y,lGe),e(y,Lf),e(Lf,gee),e(gee,iGe),e(Lf,dGe),e(Lf,y$),e(y$,cGe),e(Lf,fGe),e(y,mGe),e(y,xf),e(xf,hee),e(hee,gGe),e(xf,hGe),e(xf,L$),e(L$,pGe),e(xf,uGe),e(y,_Ge),e(y,$f),e($f,pee),e(pee,bGe),e($f,vGe),e($f,x$),e(x$,FGe),e($f,TGe),e(y,MGe),e(y,kf),e(kf,uee),e(uee,EGe),e(kf,CGe),e(kf,$$),e($$,wGe),e(kf,AGe),e(y,yGe),e(y,Sf),e(Sf,_ee),e(_ee,LGe),e(Sf,xGe),e(Sf,k$),e(k$,$Ge),e(Sf,kGe),e(y,SGe),e(y,Rf),e(Rf,bee),e(bee,RGe),e(Rf,BGe),e(Rf,S$),e(S$,PGe),e(Rf,IGe),e(y,qGe),e(y,Bf),e(Bf,vee),e(vee,NGe),e(Bf,jGe),e(Bf,R$),e(R$,DGe),e(Bf,GGe),e(y,OGe),e(y,Pf),e(Pf,Fee),e(Fee,VGe),e(Pf,XGe),e(Pf,B$),e(B$,zGe),e(Pf,QGe),e(y,WGe),e(y,If),e(If,Tee),e(Tee,HGe),e(If,UGe),e(If,P$),e(P$,JGe),e(If,YGe),e(y,KGe),e(y,qf),e(qf,Mee),e(Mee,ZGe),e(qf,eOe),e(qf,I$),e(I$,oOe),e(qf,rOe),e(y,tOe),e(y,Nf),e(Nf,Eee),e(Eee,aOe),e(Nf,nOe),e(Nf,q$),e(q$,sOe),e(Nf,lOe),e(y,iOe),e(y,jf),e(jf,Cee),e(Cee,dOe),e(jf,cOe),e(jf,N$),e(N$,fOe),e(jf,mOe),e(y,gOe),e(y,Df),e(Df,wee),e(wee,hOe),e(Df,pOe),e(Df,j$),e(j$,uOe),e(Df,_Oe),e(y,bOe),e(y,Gf),e(Gf,Aee),e(Aee,vOe),e(Gf,FOe),e(Gf,D$),e(D$,TOe),e(Gf,MOe),e(y,EOe),e(y,Of),e(Of,yee),e(yee,COe),e(Of,wOe),e(Of,G$),e(G$,AOe),e(Of,yOe),e(y,LOe),e(y,Vf),e(Vf,Lee),e(Lee,xOe),e(Vf,$Oe),e(Vf,O$),e(O$,kOe),e(Vf,SOe),e(y,ROe),e(y,Xf),e(Xf,xee),e(xee,BOe),e(Xf,POe),e(Xf,V$),e(V$,IOe),e(Xf,qOe),e(y,NOe),e(y,zf),e(zf,$ee),e($ee,jOe),e(zf,DOe),e(zf,X$),e(X$,GOe),e(zf,OOe),e(y,VOe),e(y,Qf),e(Qf,kee),e(kee,XOe),e(Qf,zOe),e(Qf,z$),e(z$,QOe),e(Qf,WOe),e(y,HOe),e(y,Wf),e(Wf,See),e(See,UOe),e(Wf,JOe),e(Wf,Q$),e(Q$,YOe),e(Wf,KOe),e(y,ZOe),e(y,Hf),e(Hf,Ree),e(Ree,eVe),e(Hf,oVe),e(Hf,W$),e(W$,rVe),e(Hf,tVe),e(y,aVe),e(y,Uf),e(Uf,Bee),e(Bee,nVe),e(Uf,sVe),e(Uf,H$),e(H$,lVe),e(Uf,iVe),e(y,dVe),e(y,Jf),e(Jf,Pee),e(Pee,cVe),e(Jf,fVe),e(Jf,U$),e(U$,mVe),e(Jf,gVe),e(y,hVe),e(y,Yf),e(Yf,Iee),e(Iee,pVe),e(Yf,uVe),e(Yf,J$),e(J$,_Ve),e(Yf,bVe),e(y,vVe),e(y,Kf),e(Kf,qee),e(qee,FVe),e(Kf,TVe),e(Kf,Y$),e(Y$,MVe),e(Kf,EVe),e(y,CVe),e(y,Zf),e(Zf,Nee),e(Nee,wVe),e(Zf,AVe),e(Zf,K$),e(K$,yVe),e(Zf,LVe),e(y,xVe),e(y,em),e(em,jee),e(jee,$Ve),e(em,kVe),e(em,Z$),e(Z$,SVe),e(em,RVe),e(y,BVe),e(y,om),e(om,Dee),e(Dee,PVe),e(om,IVe),e(om,ek),e(ek,qVe),e(om,NVe),e(y,jVe),e(y,rm),e(rm,Gee),e(Gee,DVe),e(rm,GVe),e(rm,ok),e(ok,OVe),e(rm,VVe),e(y,XVe),e(y,tm),e(tm,Oee),e(Oee,zVe),e(tm,QVe),e(tm,rk),e(rk,WVe),e(tm,HVe),e(y,UVe),e(y,am),e(am,Vee),e(Vee,JVe),e(am,YVe),e(am,tk),e(tk,KVe),e(am,ZVe),e(y,eXe),e(y,nm),e(nm,Xee),e(Xee,oXe),e(nm,rXe),e(nm,ak),e(ak,tXe),e(nm,aXe),e(y,nXe),e(y,sm),e(sm,zee),e(zee,sXe),e(sm,lXe),e(sm,nk),e(nk,iXe),e(sm,dXe),e(y,cXe),e(y,lm),e(lm,Qee),e(Qee,fXe),e(lm,mXe),e(lm,sk),e(sk,gXe),e(lm,hXe),e(y,pXe),e(y,im),e(im,Wee),e(Wee,uXe),e(im,_Xe),e(im,lk),e(lk,bXe),e(im,vXe),e(y,FXe),e(y,dm),e(dm,Hee),e(Hee,TXe),e(dm,MXe),e(dm,ik),e(ik,EXe),e(dm,CXe),e(y,wXe),e(y,cm),e(cm,Uee),e(Uee,AXe),e(cm,yXe),e(cm,dk),e(dk,LXe),e(cm,xXe),e(y,$Xe),e(y,fm),e(fm,Jee),e(Jee,kXe),e(fm,SXe),e(fm,ck),e(ck,RXe),e(fm,BXe),e(y,PXe),e(y,mm),e(mm,Yee),e(Yee,IXe),e(mm,qXe),e(mm,fk),e(fk,NXe),e(mm,jXe),e(y,DXe),e(y,gm),e(gm,Kee),e(Kee,GXe),e(gm,OXe),e(gm,mk),e(mk,VXe),e(gm,XXe),e(y,zXe),e(y,hm),e(hm,Zee),e(Zee,QXe),e(hm,WXe),e(hm,gk),e(gk,HXe),e(hm,UXe),e(y,JXe),e(y,pm),e(pm,eoe),e(eoe,YXe),e(pm,KXe),e(pm,hk),e(hk,ZXe),e(pm,eze),e(y,oze),e(y,um),e(um,ooe),e(ooe,rze),e(um,tze),e(um,pk),e(pk,aze),e(um,nze),e(y,sze),e(y,_m),e(_m,roe),e(roe,lze),e(_m,ize),e(_m,uk),e(uk,dze),e(_m,cze),e(y,fze),e(y,bm),e(bm,toe),e(toe,mze),e(bm,gze),e(bm,_k),e(_k,hze),e(bm,pze),e(y,uze),e(y,vm),e(vm,aoe),e(aoe,_ze),e(vm,bze),e(vm,bk),e(bk,vze),e(vm,Fze),e(y,Tze),e(y,Fm),e(Fm,noe),e(noe,Mze),e(Fm,Eze),e(Fm,vk),e(vk,Cze),e(Fm,wze),e(y,Aze),e(y,Tm),e(Tm,soe),e(soe,yze),e(Tm,Lze),e(Tm,Fk),e(Fk,xze),e(Tm,$ze),e(y,kze),e(y,Mm),e(Mm,loe),e(loe,Sze),e(Mm,Rze),e(Mm,Tk),e(Tk,Bze),e(Mm,Pze),e(y,Ize),e(y,Em),e(Em,ioe),e(ioe,qze),e(Em,Nze),e(Em,Mk),e(Mk,jze),e(Em,Dze),e(y,Gze),e(y,Cm),e(Cm,doe),e(doe,Oze),e(Cm,Vze),e(Cm,Ek),e(Ek,Xze),e(Cm,zze),e(y,Qze),e(y,wm),e(wm,coe),e(coe,Wze),e(wm,Hze),e(wm,Ck),e(Ck,Uze),e(wm,Jze),e(y,Yze),e(y,Am),e(Am,foe),e(foe,Kze),e(Am,Zze),e(Am,wk),e(wk,eQe),e(Am,oQe),e(y,rQe),e(y,ym),e(ym,moe),e(moe,tQe),e(ym,aQe),e(ym,Ak),e(Ak,nQe),e(ym,sQe),e(y,lQe),e(y,Lm),e(Lm,goe),e(goe,iQe),e(Lm,dQe),e(Lm,yk),e(yk,cQe),e(Lm,fQe),e(y,mQe),e(y,xm),e(xm,hoe),e(hoe,gQe),e(xm,hQe),e(xm,Lk),e(Lk,pQe),e(xm,uQe),e(y,_Qe),e(y,$m),e($m,poe),e(poe,bQe),e($m,vQe),e($m,xk),e(xk,FQe),e($m,TQe),e(y,MQe),e(y,km),e(km,uoe),e(uoe,EQe),e(km,CQe),e(km,$k),e($k,wQe),e(km,AQe),e(y,yQe),e(y,Sm),e(Sm,_oe),e(_oe,LQe),e(Sm,xQe),e(Sm,kk),e(kk,$Qe),e(Sm,kQe),e(y,SQe),e(y,Rm),e(Rm,boe),e(boe,RQe),e(Rm,BQe),e(Rm,Sk),e(Sk,PQe),e(Rm,IQe),e(y,qQe),e(y,Bm),e(Bm,voe),e(voe,NQe),e(Bm,jQe),e(Bm,Rk),e(Rk,DQe),e(Bm,GQe),e(y,OQe),e(y,Pm),e(Pm,Foe),e(Foe,VQe),e(Pm,XQe),e(Pm,Bk),e(Bk,zQe),e(Pm,QQe),e(y,WQe),e(y,Im),e(Im,Toe),e(Toe,HQe),e(Im,UQe),e(Im,Pk),e(Pk,JQe),e(Im,YQe),e(y,KQe),e(y,qm),e(qm,Moe),e(Moe,ZQe),e(qm,eWe),e(qm,Ik),e(Ik,oWe),e(qm,rWe),e(y,tWe),e(y,Nm),e(Nm,Eoe),e(Eoe,aWe),e(Nm,nWe),e(Nm,qk),e(qk,sWe),e(Nm,lWe),e(y,iWe),e(y,jm),e(jm,Coe),e(Coe,dWe),e(jm,cWe),e(jm,Nk),e(Nk,fWe),e(jm,mWe),e(y,gWe),e(y,Dm),e(Dm,woe),e(woe,hWe),e(Dm,pWe),e(Dm,jk),e(jk,uWe),e(Dm,_We),e(y,bWe),e(y,Gm),e(Gm,Aoe),e(Aoe,vWe),e(Gm,FWe),e(Gm,Dk),e(Dk,TWe),e(Gm,MWe),e(y,EWe),e(y,Om),e(Om,yoe),e(yoe,CWe),e(Om,wWe),e(Om,Gk),e(Gk,AWe),e(Om,yWe),e(y,LWe),e(y,Vm),e(Vm,Loe),e(Loe,xWe),e(Vm,$We),e(Vm,Ok),e(Ok,kWe),e(Vm,SWe),e(y,RWe),e(y,Xm),e(Xm,xoe),e(xoe,BWe),e(Xm,PWe),e(Xm,Vk),e(Vk,IWe),e(Xm,qWe),e(y,NWe),e(y,zm),e(zm,$oe),e($oe,jWe),e(zm,DWe),e(zm,Xk),e(Xk,GWe),e(zm,OWe),e(y,VWe),e(y,Qm),e(Qm,koe),e(koe,XWe),e(Qm,zWe),e(Qm,zk),e(zk,QWe),e(Qm,WWe),e(y,HWe),e(y,Wm),e(Wm,Soe),e(Soe,UWe),e(Wm,JWe),e(Wm,Qk),e(Qk,YWe),e(Wm,KWe),e(y,ZWe),e(y,Hm),e(Hm,Roe),e(Roe,eHe),e(Hm,oHe),e(Hm,Wk),e(Wk,rHe),e(Hm,tHe),e(y,aHe),e(y,Um),e(Um,Boe),e(Boe,nHe),e(Um,sHe),e(Um,Hk),e(Hk,lHe),e(Um,iHe),e(y,dHe),e(y,Jm),e(Jm,Poe),e(Poe,cHe),e(Jm,fHe),e(Jm,Uk),e(Uk,mHe),e(Jm,gHe),e(y,hHe),e(y,Ym),e(Ym,Ioe),e(Ioe,pHe),e(Ym,uHe),e(Ym,Jk),e(Jk,_He),e(Ym,bHe),e(y,vHe),e(y,Km),e(Km,qoe),e(qoe,FHe),e(Km,THe),e(Km,Yk),e(Yk,MHe),e(Km,EHe),e(y,CHe),e(y,Zm),e(Zm,Noe),e(Noe,wHe),e(Zm,AHe),e(Zm,Kk),e(Kk,yHe),e(Zm,LHe),e(y,xHe),e(y,eg),e(eg,joe),e(joe,$He),e(eg,kHe),e(eg,Zk),e(Zk,SHe),e(eg,RHe),e(y,BHe),e(y,og),e(og,Doe),e(Doe,PHe),e(og,IHe),e(og,eS),e(eS,qHe),e(og,NHe),e(y,jHe),e(y,rg),e(rg,Goe),e(Goe,DHe),e(rg,GHe),e(rg,oS),e(oS,OHe),e(rg,VHe),e(y,XHe),e(y,tg),e(tg,Ooe),e(Ooe,zHe),e(tg,QHe),e(tg,rS),e(rS,WHe),e(tg,HHe),e(y,UHe),e(y,ag),e(ag,Voe),e(Voe,JHe),e(ag,YHe),e(ag,tS),e(tS,KHe),e(ag,ZHe),e(y,eUe),e(y,ng),e(ng,Xoe),e(Xoe,oUe),e(ng,rUe),e(ng,aS),e(aS,tUe),e(ng,aUe),e(y,nUe),e(y,sg),e(sg,zoe),e(zoe,sUe),e(sg,lUe),e(sg,nS),e(nS,iUe),e(sg,dUe),e(y,cUe),e(y,lg),e(lg,Qoe),e(Qoe,fUe),e(lg,mUe),e(lg,sS),e(sS,gUe),e(lg,hUe),e(y,pUe),e(y,ig),e(ig,Woe),e(Woe,uUe),e(ig,_Ue),e(ig,lS),e(lS,bUe),e(ig,vUe),e(y,FUe),e(y,dg),e(dg,Hoe),e(Hoe,TUe),e(dg,MUe),e(dg,iS),e(iS,EUe),e(dg,CUe),e(y,wUe),e(y,cg),e(cg,Uoe),e(Uoe,AUe),e(cg,yUe),e(cg,dS),e(dS,LUe),e(cg,xUe),e(y,$Ue),e(y,fg),e(fg,Joe),e(Joe,kUe),e(fg,SUe),e(fg,cS),e(cS,RUe),e(fg,BUe),e(y,PUe),e(y,mg),e(mg,Yoe),e(Yoe,IUe),e(mg,qUe),e(mg,fS),e(fS,NUe),e(mg,jUe),e(y,DUe),e(y,gg),e(gg,Koe),e(Koe,GUe),e(gg,OUe),e(gg,mS),e(mS,VUe),e(gg,XUe),e(y,zUe),e(y,hg),e(hg,Zoe),e(Zoe,QUe),e(hg,WUe),e(hg,gS),e(gS,HUe),e(hg,UUe),e(Er,JUe),M(pg,Er,null),e(Co,YUe),e(Co,ug),M(o6,ug,null),e(ug,KUe),e(ug,ere),e(ere,ZUe),b(f,NPe,_),b(f,_i,_),e(_i,_g),e(_g,ore),M(r6,ore,null),e(_i,eJe),e(_i,rre),e(rre,oJe),b(f,jPe,_),b(f,wo,_),M(t6,wo,null),e(wo,rJe),e(wo,a6),e(a6,tJe),e(a6,hS),e(hS,aJe),e(a6,nJe),e(wo,sJe),e(wo,n6),e(n6,lJe),e(n6,tre),e(tre,iJe),e(n6,dJe),e(wo,cJe),e(wo,Cr),M(s6,Cr,null),e(Cr,fJe),e(Cr,are),e(are,mJe),e(Cr,gJe),e(Cr,Ca),e(Ca,hJe),e(Ca,nre),e(nre,pJe),e(Ca,uJe),e(Ca,sre),e(sre,_Je),e(Ca,bJe),e(Ca,lre),e(lre,vJe),e(Ca,FJe),e(Cr,TJe),e(Cr,k),e(k,kn),e(kn,ire),e(ire,MJe),e(kn,EJe),e(kn,pS),e(pS,CJe),e(kn,wJe),e(kn,uS),e(uS,AJe),e(kn,yJe),e(k,LJe),e(k,Sn),e(Sn,dre),e(dre,xJe),e(Sn,$Je),e(Sn,_S),e(_S,kJe),e(Sn,SJe),e(Sn,bS),e(bS,RJe),e(Sn,BJe),e(k,PJe),e(k,Rn),e(Rn,cre),e(cre,IJe),e(Rn,qJe),e(Rn,vS),e(vS,NJe),e(Rn,jJe),e(Rn,FS),e(FS,DJe),e(Rn,GJe),e(k,OJe),e(k,bg),e(bg,fre),e(fre,VJe),e(bg,XJe),e(bg,TS),e(TS,zJe),e(bg,QJe),e(k,WJe),e(k,Bn),e(Bn,mre),e(mre,HJe),e(Bn,UJe),e(Bn,MS),e(MS,JJe),e(Bn,YJe),e(Bn,ES),e(ES,KJe),e(Bn,ZJe),e(k,eYe),e(k,vg),e(vg,gre),e(gre,oYe),e(vg,rYe),e(vg,CS),e(CS,tYe),e(vg,aYe),e(k,nYe),e(k,Fg),e(Fg,hre),e(hre,sYe),e(Fg,lYe),e(Fg,wS),e(wS,iYe),e(Fg,dYe),e(k,cYe),e(k,Tg),e(Tg,pre),e(pre,fYe),e(Tg,mYe),e(Tg,AS),e(AS,gYe),e(Tg,hYe),e(k,pYe),e(k,Pn),e(Pn,ure),e(ure,uYe),e(Pn,_Ye),e(Pn,yS),e(yS,bYe),e(Pn,vYe),e(Pn,LS),e(LS,FYe),e(Pn,TYe),e(k,MYe),e(k,In),e(In,_re),e(_re,EYe),e(In,CYe),e(In,xS),e(xS,wYe),e(In,AYe),e(In,$S),e($S,yYe),e(In,LYe),e(k,xYe),e(k,qn),e(qn,bre),e(bre,$Ye),e(qn,kYe),e(qn,kS),e(kS,SYe),e(qn,RYe),e(qn,SS),e(SS,BYe),e(qn,PYe),e(k,IYe),e(k,Mg),e(Mg,vre),e(vre,qYe),e(Mg,NYe),e(Mg,RS),e(RS,jYe),e(Mg,DYe),e(k,GYe),e(k,Eg),e(Eg,Fre),e(Fre,OYe),e(Eg,VYe),e(Eg,BS),e(BS,XYe),e(Eg,zYe),e(k,QYe),e(k,Nn),e(Nn,Tre),e(Tre,WYe),e(Nn,HYe),e(Nn,PS),e(PS,UYe),e(Nn,JYe),e(Nn,IS),e(IS,YYe),e(Nn,KYe),e(k,ZYe),e(k,Cg),e(Cg,Mre),e(Mre,eKe),e(Cg,oKe),e(Cg,qS),e(qS,rKe),e(Cg,tKe),e(k,aKe),e(k,jn),e(jn,Ere),e(Ere,nKe),e(jn,sKe),e(jn,NS),e(NS,lKe),e(jn,iKe),e(jn,jS),e(jS,dKe),e(jn,cKe),e(k,fKe),e(k,Dn),e(Dn,Cre),e(Cre,mKe),e(Dn,gKe),e(Dn,DS),e(DS,hKe),e(Dn,pKe),e(Dn,GS),e(GS,uKe),e(Dn,_Ke),e(k,bKe),e(k,Gn),e(Gn,wre),e(wre,vKe),e(Gn,FKe),e(Gn,OS),e(OS,TKe),e(Gn,MKe),e(Gn,VS),e(VS,EKe),e(Gn,CKe),e(k,wKe),e(k,wg),e(wg,Are),e(Are,AKe),e(wg,yKe),e(wg,XS),e(XS,LKe),e(wg,xKe),e(k,$Ke),e(k,On),e(On,yre),e(yre,kKe),e(On,SKe),e(On,zS),e(zS,RKe),e(On,BKe),e(On,QS),e(QS,PKe),e(On,IKe),e(k,qKe),e(k,Vn),e(Vn,Lre),e(Lre,NKe),e(Vn,jKe),e(Vn,WS),e(WS,DKe),e(Vn,GKe),e(Vn,HS),e(HS,OKe),e(Vn,VKe),e(k,XKe),e(k,Xn),e(Xn,xre),e(xre,zKe),e(Xn,QKe),e(Xn,US),e(US,WKe),e(Xn,HKe),e(Xn,JS),e(JS,UKe),e(Xn,JKe),e(k,YKe),e(k,zn),e(zn,$re),e($re,KKe),e(zn,ZKe),e(zn,YS),e(YS,eZe),e(zn,oZe),e(zn,KS),e(KS,rZe),e(zn,tZe),e(k,aZe),e(k,Qn),e(Qn,kre),e(kre,nZe),e(Qn,sZe),e(Qn,ZS),e(ZS,lZe),e(Qn,iZe),e(Qn,eR),e(eR,dZe),e(Qn,cZe),e(k,fZe),e(k,Wn),e(Wn,Sre),e(Sre,mZe),e(Wn,gZe),e(Wn,oR),e(oR,hZe),e(Wn,pZe),e(Wn,rR),e(rR,uZe),e(Wn,_Ze),e(k,bZe),e(k,Ag),e(Ag,Rre),e(Rre,vZe),e(Ag,FZe),e(Ag,tR),e(tR,TZe),e(Ag,MZe),e(k,EZe),e(k,Hn),e(Hn,Bre),e(Bre,CZe),e(Hn,wZe),e(Hn,aR),e(aR,AZe),e(Hn,yZe),e(Hn,nR),e(nR,LZe),e(Hn,xZe),e(k,$Ze),e(k,yg),e(yg,Pre),e(Pre,kZe),e(yg,SZe),e(yg,sR),e(sR,RZe),e(yg,BZe),e(k,PZe),e(k,Un),e(Un,Ire),e(Ire,IZe),e(Un,qZe),e(Un,lR),e(lR,NZe),e(Un,jZe),e(Un,iR),e(iR,DZe),e(Un,GZe),e(k,OZe),e(k,Jn),e(Jn,qre),e(qre,VZe),e(Jn,XZe),e(Jn,dR),e(dR,zZe),e(Jn,QZe),e(Jn,cR),e(cR,WZe),e(Jn,HZe),e(k,UZe),e(k,Yn),e(Yn,Nre),e(Nre,JZe),e(Yn,YZe),e(Yn,fR),e(fR,KZe),e(Yn,ZZe),e(Yn,mR),e(mR,eeo),e(Yn,oeo),e(k,reo),e(k,Kn),e(Kn,jre),e(jre,teo),e(Kn,aeo),e(Kn,gR),e(gR,neo),e(Kn,seo),e(Kn,hR),e(hR,leo),e(Kn,ieo),e(k,deo),e(k,Zn),e(Zn,Dre),e(Dre,ceo),e(Zn,feo),e(Zn,pR),e(pR,meo),e(Zn,geo),e(Zn,uR),e(uR,heo),e(Zn,peo),e(k,ueo),e(k,Lg),e(Lg,Gre),e(Gre,_eo),e(Lg,beo),e(Lg,_R),e(_R,veo),e(Lg,Feo),e(k,Teo),e(k,es),e(es,Ore),e(Ore,Meo),e(es,Eeo),e(es,bR),e(bR,Ceo),e(es,weo),e(es,vR),e(vR,Aeo),e(es,yeo),e(k,Leo),e(k,os),e(os,Vre),e(Vre,xeo),e(os,$eo),e(os,FR),e(FR,keo),e(os,Seo),e(os,TR),e(TR,Reo),e(os,Beo),e(k,Peo),e(k,rs),e(rs,Xre),e(Xre,Ieo),e(rs,qeo),e(rs,MR),e(MR,Neo),e(rs,jeo),e(rs,ER),e(ER,Deo),e(rs,Geo),e(k,Oeo),e(k,ts),e(ts,zre),e(zre,Veo),e(ts,Xeo),e(ts,CR),e(CR,zeo),e(ts,Qeo),e(ts,wR),e(wR,Weo),e(ts,Heo),e(k,Ueo),e(k,as),e(as,Qre),e(Qre,Jeo),e(as,Yeo),e(as,AR),e(AR,Keo),e(as,Zeo),e(as,yR),e(yR,eoo),e(as,ooo),e(k,roo),e(k,ns),e(ns,Wre),e(Wre,too),e(ns,aoo),e(ns,LR),e(LR,noo),e(ns,soo),e(ns,xR),e(xR,loo),e(ns,ioo),e(k,doo),e(k,xg),e(xg,Hre),e(Hre,coo),e(xg,foo),e(xg,$R),e($R,moo),e(xg,goo),e(k,hoo),e(k,ss),e(ss,Ure),e(Ure,poo),e(ss,uoo),e(ss,kR),e(kR,_oo),e(ss,boo),e(ss,SR),e(SR,voo),e(ss,Foo),e(k,Too),e(k,$g),e($g,Jre),e(Jre,Moo),e($g,Eoo),e($g,RR),e(RR,Coo),e($g,woo),e(k,Aoo),e(k,kg),e(kg,Yre),e(Yre,yoo),e(kg,Loo),e(kg,BR),e(BR,xoo),e(kg,$oo),e(k,koo),e(k,ls),e(ls,Kre),e(Kre,Soo),e(ls,Roo),e(ls,PR),e(PR,Boo),e(ls,Poo),e(ls,IR),e(IR,Ioo),e(ls,qoo),e(k,Noo),e(k,is),e(is,Zre),e(Zre,joo),e(is,Doo),e(is,qR),e(qR,Goo),e(is,Ooo),e(is,NR),e(NR,Voo),e(is,Xoo),e(k,zoo),e(k,ds),e(ds,ete),e(ete,Qoo),e(ds,Woo),e(ds,jR),e(jR,Hoo),e(ds,Uoo),e(ds,DR),e(DR,Joo),e(ds,Yoo),e(k,Koo),e(k,Sg),e(Sg,ote),e(ote,Zoo),e(Sg,ero),e(Sg,GR),e(GR,oro),e(Sg,rro),e(k,tro),e(k,cs),e(cs,rte),e(rte,aro),e(cs,nro),e(cs,OR),e(OR,sro),e(cs,lro),e(cs,VR),e(VR,iro),e(cs,dro),e(k,cro),e(k,fs),e(fs,tte),e(tte,fro),e(fs,mro),e(fs,XR),e(XR,gro),e(fs,hro),e(fs,zR),e(zR,pro),e(fs,uro),e(k,_ro),e(k,ms),e(ms,ate),e(ate,bro),e(ms,vro),e(ms,QR),e(QR,Fro),e(ms,Tro),e(ms,WR),e(WR,Mro),e(ms,Ero),e(k,Cro),e(k,gs),e(gs,nte),e(nte,wro),e(gs,Aro),e(gs,HR),e(HR,yro),e(gs,Lro),e(gs,UR),e(UR,xro),e(gs,$ro),e(k,kro),e(k,hs),e(hs,ste),e(ste,Sro),e(hs,Rro),e(hs,JR),e(JR,Bro),e(hs,Pro),e(hs,YR),e(YR,Iro),e(hs,qro),e(k,Nro),e(k,Rg),e(Rg,lte),e(lte,jro),e(Rg,Dro),e(Rg,KR),e(KR,Gro),e(Rg,Oro),e(k,Vro),e(k,ps),e(ps,ite),e(ite,Xro),e(ps,zro),e(ps,ZR),e(ZR,Qro),e(ps,Wro),e(ps,eB),e(eB,Hro),e(ps,Uro),e(k,Jro),e(k,Bg),e(Bg,dte),e(dte,Yro),e(Bg,Kro),e(Bg,oB),e(oB,Zro),e(Bg,eto),e(k,oto),e(k,Pg),e(Pg,cte),e(cte,rto),e(Pg,tto),e(Pg,rB),e(rB,ato),e(Pg,nto),e(k,sto),e(k,Ig),e(Ig,fte),e(fte,lto),e(Ig,ito),e(Ig,tB),e(tB,dto),e(Ig,cto),e(k,fto),e(k,qg),e(qg,mte),e(mte,mto),e(qg,gto),e(qg,aB),e(aB,hto),e(qg,pto),e(k,uto),e(k,us),e(us,gte),e(gte,_to),e(us,bto),e(us,nB),e(nB,vto),e(us,Fto),e(us,sB),e(sB,Tto),e(us,Mto),e(k,Eto),e(k,Ng),e(Ng,hte),e(hte,Cto),e(Ng,wto),e(Ng,lB),e(lB,Ato),e(Ng,yto),e(k,Lto),e(k,_s),e(_s,pte),e(pte,xto),e(_s,$to),e(_s,iB),e(iB,kto),e(_s,Sto),e(_s,dB),e(dB,Rto),e(_s,Bto),e(k,Pto),e(k,bs),e(bs,ute),e(ute,Ito),e(bs,qto),e(bs,cB),e(cB,Nto),e(bs,jto),e(bs,fB),e(fB,Dto),e(bs,Gto),e(k,Oto),e(k,vs),e(vs,_te),e(_te,Vto),e(vs,Xto),e(vs,mB),e(mB,zto),e(vs,Qto),e(vs,gB),e(gB,Wto),e(vs,Hto),e(k,Uto),e(k,Fs),e(Fs,bte),e(bte,Jto),e(Fs,Yto),e(Fs,hB),e(hB,Kto),e(Fs,Zto),e(Fs,pB),e(pB,eao),e(Fs,oao),e(k,rao),e(k,Ts),e(Ts,vte),e(vte,tao),e(Ts,aao),e(Ts,uB),e(uB,nao),e(Ts,sao),e(Ts,_B),e(_B,lao),e(Ts,iao),e(k,dao),e(k,Ms),e(Ms,Fte),e(Fte,cao),e(Ms,fao),e(Ms,bB),e(bB,mao),e(Ms,gao),e(Ms,vB),e(vB,hao),e(Ms,pao),e(k,uao),e(k,jg),e(jg,Tte),e(Tte,_ao),e(jg,bao),e(jg,FB),e(FB,vao),e(jg,Fao),e(k,Tao),e(k,Dg),e(Dg,Mte),e(Mte,Mao),e(Dg,Eao),e(Dg,TB),e(TB,Cao),e(Dg,wao),e(k,Aao),e(k,Es),e(Es,Ete),e(Ete,yao),e(Es,Lao),e(Es,MB),e(MB,xao),e(Es,$ao),e(Es,EB),e(EB,kao),e(Es,Sao),e(k,Rao),e(k,Cs),e(Cs,Cte),e(Cte,Bao),e(Cs,Pao),e(Cs,CB),e(CB,Iao),e(Cs,qao),e(Cs,wB),e(wB,Nao),e(Cs,jao),e(k,Dao),e(k,ws),e(ws,wte),e(wte,Gao),e(ws,Oao),e(ws,AB),e(AB,Vao),e(ws,Xao),e(ws,yB),e(yB,zao),e(ws,Qao),e(k,Wao),e(k,Gg),e(Gg,Ate),e(Ate,Hao),e(Gg,Uao),e(Gg,LB),e(LB,Jao),e(Gg,Yao),e(k,Kao),e(k,Og),e(Og,yte),e(yte,Zao),e(Og,eno),e(Og,xB),e(xB,ono),e(Og,rno),e(k,tno),e(k,Vg),e(Vg,Lte),e(Lte,ano),e(Vg,nno),e(Vg,$B),e($B,sno),e(Vg,lno),e(k,ino),e(k,As),e(As,xte),e(xte,dno),e(As,cno),e(As,kB),e(kB,fno),e(As,mno),e(As,SB),e(SB,gno),e(As,hno),e(k,pno),e(k,Xg),e(Xg,$te),e($te,uno),e(Xg,_no),e(Xg,RB),e(RB,bno),e(Xg,vno),e(k,Fno),e(k,zg),e(zg,kte),e(kte,Tno),e(zg,Mno),e(zg,BB),e(BB,Eno),e(zg,Cno),e(k,wno),e(k,ys),e(ys,Ste),e(Ste,Ano),e(ys,yno),e(ys,PB),e(PB,Lno),e(ys,xno),e(ys,IB),e(IB,$no),e(ys,kno),e(k,Sno),e(k,Qg),e(Qg,Rte),e(Rte,Rno),e(Qg,Bno),e(Qg,qB),e(qB,Pno),e(Qg,Ino),e(k,qno),e(k,Wg),e(Wg,Bte),e(Bte,Nno),e(Wg,jno),e(Wg,NB),e(NB,Dno),e(Wg,Gno),e(k,Ono),e(k,Ls),e(Ls,Pte),e(Pte,Vno),e(Ls,Xno),e(Ls,jB),e(jB,zno),e(Ls,Qno),e(Ls,DB),e(DB,Wno),e(Ls,Hno),e(k,Uno),e(k,xs),e(xs,Ite),e(Ite,Jno),e(xs,Yno),e(xs,GB),e(GB,Kno),e(xs,Zno),e(xs,OB),e(OB,eso),e(xs,oso),e(k,rso),e(k,$s),e($s,qte),e(qte,tso),e($s,aso),e($s,VB),e(VB,nso),e($s,sso),e($s,XB),e(XB,lso),e($s,iso),e(k,dso),e(k,ks),e(ks,Nte),e(Nte,cso),e(ks,fso),e(ks,zB),e(zB,mso),e(ks,gso),e(ks,QB),e(QB,hso),e(ks,pso),e(Cr,uso),M(Hg,Cr,null),e(wo,_so),e(wo,Ug),M(l6,Ug,null),e(Ug,bso),e(Ug,jte),e(jte,vso),b(f,DPe,_),b(f,bi,_),e(bi,Jg),e(Jg,Dte),M(i6,Dte,null),e(bi,Fso),e(bi,Gte),e(Gte,Tso),b(f,GPe,_),b(f,Ao,_),M(d6,Ao,null),e(Ao,Mso),e(Ao,c6),e(c6,Eso),e(c6,WB),e(WB,Cso),e(c6,wso),e(Ao,Aso),e(Ao,f6),e(f6,yso),e(f6,Ote),e(Ote,Lso),e(f6,xso),e(Ao,$so),e(Ao,Qe),M(m6,Qe,null),e(Qe,kso),e(Qe,Vte),e(Vte,Sso),e(Qe,Rso),e(Qe,wa),e(wa,Bso),e(wa,Xte),e(Xte,Pso),e(wa,Iso),e(wa,zte),e(zte,qso),e(wa,Nso),e(wa,Qte),e(Qte,jso),e(wa,Dso),e(Qe,Gso),e(Qe,oe),e(oe,Yg),e(Yg,Wte),e(Wte,Oso),e(Yg,Vso),e(Yg,HB),e(HB,Xso),e(Yg,zso),e(oe,Qso),e(oe,Kg),e(Kg,Hte),e(Hte,Wso),e(Kg,Hso),e(Kg,UB),e(UB,Uso),e(Kg,Jso),e(oe,Yso),e(oe,Zg),e(Zg,Ute),e(Ute,Kso),e(Zg,Zso),e(Zg,JB),e(JB,elo),e(Zg,olo),e(oe,rlo),e(oe,eh),e(eh,Jte),e(Jte,tlo),e(eh,alo),e(eh,YB),e(YB,nlo),e(eh,slo),e(oe,llo),e(oe,oh),e(oh,Yte),e(Yte,ilo),e(oh,dlo),e(oh,KB),e(KB,clo),e(oh,flo),e(oe,mlo),e(oe,rh),e(rh,Kte),e(Kte,glo),e(rh,hlo),e(rh,ZB),e(ZB,plo),e(rh,ulo),e(oe,_lo),e(oe,th),e(th,Zte),e(Zte,blo),e(th,vlo),e(th,eP),e(eP,Flo),e(th,Tlo),e(oe,Mlo),e(oe,ah),e(ah,eae),e(eae,Elo),e(ah,Clo),e(ah,oP),e(oP,wlo),e(ah,Alo),e(oe,ylo),e(oe,nh),e(nh,oae),e(oae,Llo),e(nh,xlo),e(nh,rP),e(rP,$lo),e(nh,klo),e(oe,Slo),e(oe,sh),e(sh,rae),e(rae,Rlo),e(sh,Blo),e(sh,tP),e(tP,Plo),e(sh,Ilo),e(oe,qlo),e(oe,lh),e(lh,tae),e(tae,Nlo),e(lh,jlo),e(lh,aP),e(aP,Dlo),e(lh,Glo),e(oe,Olo),e(oe,ih),e(ih,aae),e(aae,Vlo),e(ih,Xlo),e(ih,nP),e(nP,zlo),e(ih,Qlo),e(oe,Wlo),e(oe,dh),e(dh,nae),e(nae,Hlo),e(dh,Ulo),e(dh,sP),e(sP,Jlo),e(dh,Ylo),e(oe,Klo),e(oe,ch),e(ch,sae),e(sae,Zlo),e(ch,eio),e(ch,lP),e(lP,oio),e(ch,rio),e(oe,tio),e(oe,fh),e(fh,lae),e(lae,aio),e(fh,nio),e(fh,iP),e(iP,sio),e(fh,lio),e(oe,iio),e(oe,mh),e(mh,iae),e(iae,dio),e(mh,cio),e(mh,dP),e(dP,fio),e(mh,mio),e(oe,gio),e(oe,gh),e(gh,dae),e(dae,hio),e(gh,pio),e(gh,cP),e(cP,uio),e(gh,_io),e(oe,bio),e(oe,hh),e(hh,cae),e(cae,vio),e(hh,Fio),e(hh,fP),e(fP,Tio),e(hh,Mio),e(oe,Eio),e(oe,ph),e(ph,fae),e(fae,Cio),e(ph,wio),e(ph,mP),e(mP,Aio),e(ph,yio),e(oe,Lio),e(oe,uh),e(uh,mae),e(mae,xio),e(uh,$io),e(uh,gP),e(gP,kio),e(uh,Sio),e(oe,Rio),e(oe,_h),e(_h,gae),e(gae,Bio),e(_h,Pio),e(_h,hP),e(hP,Iio),e(_h,qio),e(oe,Nio),e(oe,bh),e(bh,hae),e(hae,jio),e(bh,Dio),e(bh,pP),e(pP,Gio),e(bh,Oio),e(oe,Vio),e(oe,vh),e(vh,pae),e(pae,Xio),e(vh,zio),e(vh,uP),e(uP,Qio),e(vh,Wio),e(oe,Hio),e(oe,Fh),e(Fh,uae),e(uae,Uio),e(Fh,Jio),e(Fh,_P),e(_P,Yio),e(Fh,Kio),e(oe,Zio),e(oe,Th),e(Th,_ae),e(_ae,edo),e(Th,odo),e(Th,bP),e(bP,rdo),e(Th,tdo),e(Qe,ado),M(Mh,Qe,null),e(Qe,ndo),M(Eh,Qe,null),e(Ao,sdo),e(Ao,Ch),M(g6,Ch,null),e(Ch,ldo),e(Ch,bae),e(bae,ido),b(f,OPe,_),b(f,vi,_),e(vi,wh),e(wh,vae),M(h6,vae,null),e(vi,ddo),e(vi,Fae),e(Fae,cdo),b(f,VPe,_),b(f,yo,_),M(p6,yo,null),e(yo,fdo),e(yo,u6),e(u6,mdo),e(u6,vP),e(vP,gdo),e(u6,hdo),e(yo,pdo),e(yo,_6),e(_6,udo),e(_6,Tae),e(Tae,_do),e(_6,bdo),e(yo,vdo),e(yo,We),M(b6,We,null),e(We,Fdo),e(We,Mae),e(Mae,Tdo),e(We,Mdo),e(We,Fi),e(Fi,Edo),e(Fi,Eae),e(Eae,Cdo),e(Fi,wdo),e(Fi,Cae),e(Cae,Ado),e(Fi,ydo),e(We,Ldo),e(We,_e),e(_e,Ah),e(Ah,wae),e(wae,xdo),e(Ah,$do),e(Ah,FP),e(FP,kdo),e(Ah,Sdo),e(_e,Rdo),e(_e,yh),e(yh,Aae),e(Aae,Bdo),e(yh,Pdo),e(yh,yae),e(yae,Ido),e(yh,qdo),e(_e,Ndo),e(_e,Lh),e(Lh,Lae),e(Lae,jdo),e(Lh,Ddo),e(Lh,TP),e(TP,Gdo),e(Lh,Odo),e(_e,Vdo),e(_e,xh),e(xh,xae),e(xae,Xdo),e(xh,zdo),e(xh,MP),e(MP,Qdo),e(xh,Wdo),e(_e,Hdo),e(_e,$h),e($h,$ae),e($ae,Udo),e($h,Jdo),e($h,EP),e(EP,Ydo),e($h,Kdo),e(_e,Zdo),e(_e,kh),e(kh,kae),e(kae,eco),e(kh,oco),e(kh,CP),e(CP,rco),e(kh,tco),e(_e,aco),e(_e,Sh),e(Sh,Sae),e(Sae,nco),e(Sh,sco),e(Sh,wP),e(wP,lco),e(Sh,ico),e(_e,dco),e(_e,Rh),e(Rh,Rae),e(Rae,cco),e(Rh,fco),e(Rh,AP),e(AP,mco),e(Rh,gco),e(_e,hco),e(_e,Bh),e(Bh,Bae),e(Bae,pco),e(Bh,uco),e(Bh,yP),e(yP,_co),e(Bh,bco),e(_e,vco),e(_e,Ph),e(Ph,Pae),e(Pae,Fco),e(Ph,Tco),e(Ph,LP),e(LP,Mco),e(Ph,Eco),e(_e,Cco),e(_e,Ih),e(Ih,Iae),e(Iae,wco),e(Ih,Aco),e(Ih,xP),e(xP,yco),e(Ih,Lco),e(_e,xco),e(_e,qh),e(qh,qae),e(qae,$co),e(qh,kco),e(qh,$P),e($P,Sco),e(qh,Rco),e(_e,Bco),e(_e,Nh),e(Nh,Nae),e(Nae,Pco),e(Nh,Ico),e(Nh,kP),e(kP,qco),e(Nh,Nco),e(_e,jco),e(_e,jh),e(jh,jae),e(jae,Dco),e(jh,Gco),e(jh,SP),e(SP,Oco),e(jh,Vco),e(_e,Xco),e(_e,Dh),e(Dh,Dae),e(Dae,zco),e(Dh,Qco),e(Dh,RP),e(RP,Wco),e(Dh,Hco),e(We,Uco),M(Gh,We,null),e(We,Jco),M(Oh,We,null),e(yo,Yco),e(yo,Vh),M(v6,Vh,null),e(Vh,Kco),e(Vh,Gae),e(Gae,Zco),b(f,XPe,_),b(f,Ti,_),e(Ti,Xh),e(Xh,Oae),M(F6,Oae,null),e(Ti,efo),e(Ti,Vae),e(Vae,ofo),b(f,zPe,_),b(f,Lo,_),M(T6,Lo,null),e(Lo,rfo),e(Lo,Mi),e(Mi,tfo),e(Mi,BP),e(BP,afo),e(Mi,nfo),e(Mi,PP),e(PP,sfo),e(Mi,lfo),e(Lo,ifo),e(Lo,M6),e(M6,dfo),e(M6,Xae),e(Xae,cfo),e(M6,ffo),e(Lo,mfo),e(Lo,ot),M(E6,ot,null),e(ot,gfo),e(ot,zae),e(zae,hfo),e(ot,pfo),e(ot,Ei),e(Ei,ufo),e(Ei,Qae),e(Qae,_fo),e(Ei,bfo),e(Ei,IP),e(IP,vfo),e(Ei,Ffo),e(ot,Tfo),M(zh,ot,null),e(Lo,Mfo),e(Lo,He),M(C6,He,null),e(He,Efo),e(He,Wae),e(Wae,Cfo),e(He,wfo),e(He,Aa),e(Aa,Afo),e(Aa,Hae),e(Hae,yfo),e(Aa,Lfo),e(Aa,Uae),e(Uae,xfo),e(Aa,$fo),e(Aa,Jae),e(Jae,kfo),e(Aa,Sfo),e(He,Rfo),e(He,x),e(x,Qh),e(Qh,Yae),e(Yae,Bfo),e(Qh,Pfo),e(Qh,qP),e(qP,Ifo),e(Qh,qfo),e(x,Nfo),e(x,Wh),e(Wh,Kae),e(Kae,jfo),e(Wh,Dfo),e(Wh,NP),e(NP,Gfo),e(Wh,Ofo),e(x,Vfo),e(x,Hh),e(Hh,Zae),e(Zae,Xfo),e(Hh,zfo),e(Hh,jP),e(jP,Qfo),e(Hh,Wfo),e(x,Hfo),e(x,Uh),e(Uh,ene),e(ene,Ufo),e(Uh,Jfo),e(Uh,DP),e(DP,Yfo),e(Uh,Kfo),e(x,Zfo),e(x,Jh),e(Jh,one),e(one,emo),e(Jh,omo),e(Jh,GP),e(GP,rmo),e(Jh,tmo),e(x,amo),e(x,Yh),e(Yh,rne),e(rne,nmo),e(Yh,smo),e(Yh,OP),e(OP,lmo),e(Yh,imo),e(x,dmo),e(x,Kh),e(Kh,tne),e(tne,cmo),e(Kh,fmo),e(Kh,VP),e(VP,mmo),e(Kh,gmo),e(x,hmo),e(x,Zh),e(Zh,ane),e(ane,pmo),e(Zh,umo),e(Zh,XP),e(XP,_mo),e(Zh,bmo),e(x,vmo),e(x,ep),e(ep,nne),e(nne,Fmo),e(ep,Tmo),e(ep,zP),e(zP,Mmo),e(ep,Emo),e(x,Cmo),e(x,op),e(op,sne),e(sne,wmo),e(op,Amo),e(op,QP),e(QP,ymo),e(op,Lmo),e(x,xmo),e(x,rp),e(rp,lne),e(lne,$mo),e(rp,kmo),e(rp,WP),e(WP,Smo),e(rp,Rmo),e(x,Bmo),e(x,tp),e(tp,ine),e(ine,Pmo),e(tp,Imo),e(tp,HP),e(HP,qmo),e(tp,Nmo),e(x,jmo),e(x,ap),e(ap,dne),e(dne,Dmo),e(ap,Gmo),e(ap,UP),e(UP,Omo),e(ap,Vmo),e(x,Xmo),e(x,np),e(np,cne),e(cne,zmo),e(np,Qmo),e(np,JP),e(JP,Wmo),e(np,Hmo),e(x,Umo),e(x,sp),e(sp,fne),e(fne,Jmo),e(sp,Ymo),e(sp,YP),e(YP,Kmo),e(sp,Zmo),e(x,ego),e(x,lp),e(lp,mne),e(mne,ogo),e(lp,rgo),e(lp,KP),e(KP,tgo),e(lp,ago),e(x,ngo),e(x,ip),e(ip,gne),e(gne,sgo),e(ip,lgo),e(ip,ZP),e(ZP,igo),e(ip,dgo),e(x,cgo),e(x,dp),e(dp,hne),e(hne,fgo),e(dp,mgo),e(dp,eI),e(eI,ggo),e(dp,hgo),e(x,pgo),e(x,cp),e(cp,pne),e(pne,ugo),e(cp,_go),e(cp,oI),e(oI,bgo),e(cp,vgo),e(x,Fgo),e(x,fp),e(fp,une),e(une,Tgo),e(fp,Mgo),e(fp,rI),e(rI,Ego),e(fp,Cgo),e(x,wgo),e(x,mp),e(mp,_ne),e(_ne,Ago),e(mp,ygo),e(mp,tI),e(tI,Lgo),e(mp,xgo),e(x,$go),e(x,gp),e(gp,bne),e(bne,kgo),e(gp,Sgo),e(gp,aI),e(aI,Rgo),e(gp,Bgo),e(x,Pgo),e(x,hp),e(hp,vne),e(vne,Igo),e(hp,qgo),e(hp,nI),e(nI,Ngo),e(hp,jgo),e(x,Dgo),e(x,pp),e(pp,Fne),e(Fne,Ggo),e(pp,Ogo),e(pp,sI),e(sI,Vgo),e(pp,Xgo),e(x,zgo),e(x,up),e(up,Tne),e(Tne,Qgo),e(up,Wgo),e(up,lI),e(lI,Hgo),e(up,Ugo),e(x,Jgo),e(x,_p),e(_p,Mne),e(Mne,Ygo),e(_p,Kgo),e(_p,iI),e(iI,Zgo),e(_p,eho),e(x,oho),e(x,bp),e(bp,Ene),e(Ene,rho),e(bp,tho),e(bp,dI),e(dI,aho),e(bp,nho),e(x,sho),e(x,vp),e(vp,Cne),e(Cne,lho),e(vp,iho),e(vp,cI),e(cI,dho),e(vp,cho),e(x,fho),e(x,Fp),e(Fp,wne),e(wne,mho),e(Fp,gho),e(Fp,fI),e(fI,hho),e(Fp,pho),e(x,uho),e(x,Tp),e(Tp,Ane),e(Ane,_ho),e(Tp,bho),e(Tp,mI),e(mI,vho),e(Tp,Fho),e(x,Tho),e(x,Mp),e(Mp,yne),e(yne,Mho),e(Mp,Eho),e(Mp,gI),e(gI,Cho),e(Mp,who),e(x,Aho),e(x,Ss),e(Ss,Lne),e(Lne,yho),e(Ss,Lho),e(Ss,hI),e(hI,xho),e(Ss,$ho),e(Ss,pI),e(pI,kho),e(Ss,Sho),e(x,Rho),e(x,Ep),e(Ep,xne),e(xne,Bho),e(Ep,Pho),e(Ep,uI),e(uI,Iho),e(Ep,qho),e(x,Nho),e(x,Cp),e(Cp,$ne),e($ne,jho),e(Cp,Dho),e(Cp,_I),e(_I,Gho),e(Cp,Oho),e(x,Vho),e(x,wp),e(wp,kne),e(kne,Xho),e(wp,zho),e(wp,bI),e(bI,Qho),e(wp,Who),e(x,Hho),e(x,Ap),e(Ap,Sne),e(Sne,Uho),e(Ap,Jho),e(Ap,vI),e(vI,Yho),e(Ap,Kho),e(x,Zho),e(x,yp),e(yp,Rne),e(Rne,epo),e(yp,opo),e(yp,FI),e(FI,rpo),e(yp,tpo),e(x,apo),e(x,Lp),e(Lp,Bne),e(Bne,npo),e(Lp,spo),e(Lp,TI),e(TI,lpo),e(Lp,ipo),e(x,dpo),e(x,xp),e(xp,Pne),e(Pne,cpo),e(xp,fpo),e(xp,MI),e(MI,mpo),e(xp,gpo),e(x,hpo),e(x,$p),e($p,Ine),e(Ine,ppo),e($p,upo),e($p,EI),e(EI,_po),e($p,bpo),e(x,vpo),e(x,kp),e(kp,qne),e(qne,Fpo),e(kp,Tpo),e(kp,CI),e(CI,Mpo),e(kp,Epo),e(x,Cpo),e(x,Sp),e(Sp,Nne),e(Nne,wpo),e(Sp,Apo),e(Sp,wI),e(wI,ypo),e(Sp,Lpo),e(x,xpo),e(x,Rp),e(Rp,jne),e(jne,$po),e(Rp,kpo),e(Rp,AI),e(AI,Spo),e(Rp,Rpo),e(x,Bpo),e(x,Bp),e(Bp,Dne),e(Dne,Ppo),e(Bp,Ipo),e(Bp,yI),e(yI,qpo),e(Bp,Npo),e(x,jpo),e(x,Pp),e(Pp,Gne),e(Gne,Dpo),e(Pp,Gpo),e(Pp,LI),e(LI,Opo),e(Pp,Vpo),e(x,Xpo),e(x,Ip),e(Ip,One),e(One,zpo),e(Ip,Qpo),e(Ip,xI),e(xI,Wpo),e(Ip,Hpo),e(x,Upo),e(x,qp),e(qp,Vne),e(Vne,Jpo),e(qp,Ypo),e(qp,$I),e($I,Kpo),e(qp,Zpo),e(x,euo),e(x,Np),e(Np,Xne),e(Xne,ouo),e(Np,ruo),e(Np,kI),e(kI,tuo),e(Np,auo),e(x,nuo),e(x,jp),e(jp,zne),e(zne,suo),e(jp,luo),e(jp,SI),e(SI,iuo),e(jp,duo),e(x,cuo),e(x,Dp),e(Dp,Qne),e(Qne,fuo),e(Dp,muo),e(Dp,RI),e(RI,guo),e(Dp,huo),e(x,puo),e(x,Gp),e(Gp,Wne),e(Wne,uuo),e(Gp,_uo),e(Gp,BI),e(BI,buo),e(Gp,vuo),e(x,Fuo),e(x,Op),e(Op,Hne),e(Hne,Tuo),e(Op,Muo),e(Op,PI),e(PI,Euo),e(Op,Cuo),e(x,wuo),e(x,Vp),e(Vp,Une),e(Une,Auo),e(Vp,yuo),e(Vp,II),e(II,Luo),e(Vp,xuo),e(x,$uo),e(x,Xp),e(Xp,Jne),e(Jne,kuo),e(Xp,Suo),e(Xp,qI),e(qI,Ruo),e(Xp,Buo),e(x,Puo),e(x,zp),e(zp,Yne),e(Yne,Iuo),e(zp,quo),e(zp,NI),e(NI,Nuo),e(zp,juo),e(x,Duo),e(x,Qp),e(Qp,Kne),e(Kne,Guo),e(Qp,Ouo),e(Qp,jI),e(jI,Vuo),e(Qp,Xuo),e(x,zuo),e(x,Wp),e(Wp,Zne),e(Zne,Quo),e(Wp,Wuo),e(Wp,DI),e(DI,Huo),e(Wp,Uuo),e(x,Juo),e(x,Hp),e(Hp,ese),e(ese,Yuo),e(Hp,Kuo),e(Hp,GI),e(GI,Zuo),e(Hp,e_o),e(x,o_o),e(x,Up),e(Up,ose),e(ose,r_o),e(Up,t_o),e(Up,OI),e(OI,a_o),e(Up,n_o),e(x,s_o),e(x,Jp),e(Jp,rse),e(rse,l_o),e(Jp,i_o),e(Jp,VI),e(VI,d_o),e(Jp,c_o),e(x,f_o),e(x,Yp),e(Yp,tse),e(tse,m_o),e(Yp,g_o),e(Yp,XI),e(XI,h_o),e(Yp,p_o),e(x,u_o),e(x,Kp),e(Kp,ase),e(ase,__o),e(Kp,b_o),e(Kp,zI),e(zI,v_o),e(Kp,F_o),e(x,T_o),e(x,Zp),e(Zp,nse),e(nse,M_o),e(Zp,E_o),e(Zp,QI),e(QI,C_o),e(Zp,w_o),e(x,A_o),e(x,eu),e(eu,sse),e(sse,y_o),e(eu,L_o),e(eu,WI),e(WI,x_o),e(eu,$_o),e(x,k_o),e(x,ou),e(ou,lse),e(lse,S_o),e(ou,R_o),e(ou,HI),e(HI,B_o),e(ou,P_o),e(x,I_o),e(x,ru),e(ru,ise),e(ise,q_o),e(ru,N_o),e(ru,UI),e(UI,j_o),e(ru,D_o),e(x,G_o),e(x,tu),e(tu,dse),e(dse,O_o),e(tu,V_o),e(tu,JI),e(JI,X_o),e(tu,z_o),e(x,Q_o),e(x,au),e(au,cse),e(cse,W_o),e(au,H_o),e(au,YI),e(YI,U_o),e(au,J_o),e(x,Y_o),e(x,nu),e(nu,fse),e(fse,K_o),e(nu,Z_o),e(nu,KI),e(KI,e2o),e(nu,o2o),e(x,r2o),e(x,su),e(su,mse),e(mse,t2o),e(su,a2o),e(su,ZI),e(ZI,n2o),e(su,s2o),e(x,l2o),e(x,lu),e(lu,gse),e(gse,i2o),e(lu,d2o),e(lu,eq),e(eq,c2o),e(lu,f2o),e(x,m2o),e(x,iu),e(iu,hse),e(hse,g2o),e(iu,h2o),e(iu,oq),e(oq,p2o),e(iu,u2o),e(x,_2o),e(x,du),e(du,pse),e(pse,b2o),e(du,v2o),e(du,rq),e(rq,F2o),e(du,T2o),e(x,M2o),e(x,cu),e(cu,use),e(use,E2o),e(cu,C2o),e(cu,tq),e(tq,w2o),e(cu,A2o),e(x,y2o),e(x,fu),e(fu,_se),e(_se,L2o),e(fu,x2o),e(fu,aq),e(aq,$2o),e(fu,k2o),e(x,S2o),e(x,mu),e(mu,bse),e(bse,R2o),e(mu,B2o),e(mu,nq),e(nq,P2o),e(mu,I2o),e(x,q2o),e(x,gu),e(gu,vse),e(vse,N2o),e(gu,j2o),e(gu,sq),e(sq,D2o),e(gu,G2o),e(x,O2o),e(x,hu),e(hu,Fse),e(Fse,V2o),e(hu,X2o),e(hu,lq),e(lq,z2o),e(hu,Q2o),e(x,W2o),e(x,pu),e(pu,Tse),e(Tse,H2o),e(pu,U2o),e(pu,iq),e(iq,J2o),e(pu,Y2o),e(x,K2o),e(x,uu),e(uu,Mse),e(Mse,Z2o),e(uu,e1o),e(uu,dq),e(dq,o1o),e(uu,r1o),e(x,t1o),e(x,_u),e(_u,Ese),e(Ese,a1o),e(_u,n1o),e(_u,cq),e(cq,s1o),e(_u,l1o),e(x,i1o),e(x,bu),e(bu,Cse),e(Cse,d1o),e(bu,c1o),e(bu,fq),e(fq,f1o),e(bu,m1o),e(x,g1o),e(x,vu),e(vu,wse),e(wse,h1o),e(vu,p1o),e(vu,mq),e(mq,u1o),e(vu,_1o),e(x,b1o),e(x,Fu),e(Fu,Ase),e(Ase,v1o),e(Fu,F1o),e(Fu,gq),e(gq,T1o),e(Fu,M1o),e(x,E1o),e(x,Tu),e(Tu,yse),e(yse,C1o),e(Tu,w1o),e(Tu,hq),e(hq,A1o),e(Tu,y1o),e(x,L1o),e(x,Mu),e(Mu,Lse),e(Lse,x1o),e(Mu,$1o),e(Mu,pq),e(pq,k1o),e(Mu,S1o),e(x,R1o),e(x,Eu),e(Eu,xse),e(xse,B1o),e(Eu,P1o),e(Eu,uq),e(uq,I1o),e(Eu,q1o),e(x,N1o),e(x,Cu),e(Cu,$se),e($se,j1o),e(Cu,D1o),e(Cu,_q),e(_q,G1o),e(Cu,O1o),e(x,V1o),e(x,wu),e(wu,kse),e(kse,X1o),e(wu,z1o),e(wu,bq),e(bq,Q1o),e(wu,W1o),e(x,H1o),e(x,Au),e(Au,Sse),e(Sse,U1o),e(Au,J1o),e(Au,vq),e(vq,Y1o),e(Au,K1o),e(x,Z1o),e(x,yu),e(yu,Rse),e(Rse,ebo),e(yu,obo),e(yu,Fq),e(Fq,rbo),e(yu,tbo),e(x,abo),e(x,Lu),e(Lu,Bse),e(Bse,nbo),e(Lu,sbo),e(Lu,Tq),e(Tq,lbo),e(Lu,ibo),e(x,dbo),e(x,xu),e(xu,Pse),e(Pse,cbo),e(xu,fbo),e(xu,Mq),e(Mq,mbo),e(xu,gbo),e(x,hbo),e(x,$u),e($u,Ise),e(Ise,pbo),e($u,ubo),e($u,Eq),e(Eq,_bo),e($u,bbo),e(x,vbo),e(x,ku),e(ku,qse),e(qse,Fbo),e(ku,Tbo),e(ku,Cq),e(Cq,Mbo),e(ku,Ebo),e(x,Cbo),e(x,Su),e(Su,Nse),e(Nse,wbo),e(Su,Abo),e(Su,wq),e(wq,ybo),e(Su,Lbo),e(x,xbo),e(x,Ru),e(Ru,jse),e(jse,$bo),e(Ru,kbo),e(Ru,Aq),e(Aq,Sbo),e(Ru,Rbo),e(He,Bbo),e(He,Bu),e(Bu,Pbo),e(Bu,Dse),e(Dse,Ibo),e(Bu,qbo),e(Bu,Gse),e(Gse,Nbo),e(He,jbo),M(Pu,He,null),b(f,QPe,_),b(f,Ci,_),e(Ci,Iu),e(Iu,Ose),M(w6,Ose,null),e(Ci,Dbo),e(Ci,Vse),e(Vse,Gbo),b(f,WPe,_),b(f,xo,_),M(A6,xo,null),e(xo,Obo),e(xo,wi),e(wi,Vbo),e(wi,yq),e(yq,Xbo),e(wi,zbo),e(wi,Lq),e(Lq,Qbo),e(wi,Wbo),e(xo,Hbo),e(xo,y6),e(y6,Ubo),e(y6,Xse),e(Xse,Jbo),e(y6,Ybo),e(xo,Kbo),e(xo,rt),M(L6,rt,null),e(rt,Zbo),e(rt,zse),e(zse,e5o),e(rt,o5o),e(rt,Ai),e(Ai,r5o),e(Ai,Qse),e(Qse,t5o),e(Ai,a5o),e(Ai,xq),e(xq,n5o),e(Ai,s5o),e(rt,l5o),M(qu,rt,null),e(xo,i5o),e(xo,Ue),M(x6,Ue,null),e(Ue,d5o),e(Ue,Wse),e(Wse,c5o),e(Ue,f5o),e(Ue,ya),e(ya,m5o),e(ya,Hse),e(Hse,g5o),e(ya,h5o),e(ya,Use),e(Use,p5o),e(ya,u5o),e(ya,Jse),e(Jse,_5o),e(ya,b5o),e(Ue,v5o),e(Ue,G),e(G,Nu),e(Nu,Yse),e(Yse,F5o),e(Nu,T5o),e(Nu,$q),e($q,M5o),e(Nu,E5o),e(G,C5o),e(G,ju),e(ju,Kse),e(Kse,w5o),e(ju,A5o),e(ju,kq),e(kq,y5o),e(ju,L5o),e(G,x5o),e(G,Du),e(Du,Zse),e(Zse,$5o),e(Du,k5o),e(Du,Sq),e(Sq,S5o),e(Du,R5o),e(G,B5o),e(G,Gu),e(Gu,ele),e(ele,P5o),e(Gu,I5o),e(Gu,Rq),e(Rq,q5o),e(Gu,N5o),e(G,j5o),e(G,Ou),e(Ou,ole),e(ole,D5o),e(Ou,G5o),e(Ou,Bq),e(Bq,O5o),e(Ou,V5o),e(G,X5o),e(G,Vu),e(Vu,rle),e(rle,z5o),e(Vu,Q5o),e(Vu,Pq),e(Pq,W5o),e(Vu,H5o),e(G,U5o),e(G,Xu),e(Xu,tle),e(tle,J5o),e(Xu,Y5o),e(Xu,Iq),e(Iq,K5o),e(Xu,Z5o),e(G,evo),e(G,zu),e(zu,ale),e(ale,ovo),e(zu,rvo),e(zu,qq),e(qq,tvo),e(zu,avo),e(G,nvo),e(G,Qu),e(Qu,nle),e(nle,svo),e(Qu,lvo),e(Qu,Nq),e(Nq,ivo),e(Qu,dvo),e(G,cvo),e(G,Wu),e(Wu,sle),e(sle,fvo),e(Wu,mvo),e(Wu,jq),e(jq,gvo),e(Wu,hvo),e(G,pvo),e(G,Hu),e(Hu,lle),e(lle,uvo),e(Hu,_vo),e(Hu,Dq),e(Dq,bvo),e(Hu,vvo),e(G,Fvo),e(G,Uu),e(Uu,ile),e(ile,Tvo),e(Uu,Mvo),e(Uu,Gq),e(Gq,Evo),e(Uu,Cvo),e(G,wvo),e(G,Ju),e(Ju,dle),e(dle,Avo),e(Ju,yvo),e(Ju,Oq),e(Oq,Lvo),e(Ju,xvo),e(G,$vo),e(G,Yu),e(Yu,cle),e(cle,kvo),e(Yu,Svo),e(Yu,Vq),e(Vq,Rvo),e(Yu,Bvo),e(G,Pvo),e(G,Ku),e(Ku,fle),e(fle,Ivo),e(Ku,qvo),e(Ku,Xq),e(Xq,Nvo),e(Ku,jvo),e(G,Dvo),e(G,Zu),e(Zu,mle),e(mle,Gvo),e(Zu,Ovo),e(Zu,zq),e(zq,Vvo),e(Zu,Xvo),e(G,zvo),e(G,e_),e(e_,gle),e(gle,Qvo),e(e_,Wvo),e(e_,Qq),e(Qq,Hvo),e(e_,Uvo),e(G,Jvo),e(G,o_),e(o_,hle),e(hle,Yvo),e(o_,Kvo),e(o_,Wq),e(Wq,Zvo),e(o_,eFo),e(G,oFo),e(G,r_),e(r_,ple),e(ple,rFo),e(r_,tFo),e(r_,Hq),e(Hq,aFo),e(r_,nFo),e(G,sFo),e(G,t_),e(t_,ule),e(ule,lFo),e(t_,iFo),e(t_,Uq),e(Uq,dFo),e(t_,cFo),e(G,fFo),e(G,a_),e(a_,_le),e(_le,mFo),e(a_,gFo),e(a_,Jq),e(Jq,hFo),e(a_,pFo),e(G,uFo),e(G,n_),e(n_,ble),e(ble,_Fo),e(n_,bFo),e(n_,Yq),e(Yq,vFo),e(n_,FFo),e(G,TFo),e(G,s_),e(s_,vle),e(vle,MFo),e(s_,EFo),e(s_,Kq),e(Kq,CFo),e(s_,wFo),e(G,AFo),e(G,l_),e(l_,Fle),e(Fle,yFo),e(l_,LFo),e(l_,Zq),e(Zq,xFo),e(l_,$Fo),e(G,kFo),e(G,i_),e(i_,Tle),e(Tle,SFo),e(i_,RFo),e(i_,eN),e(eN,BFo),e(i_,PFo),e(G,IFo),e(G,d_),e(d_,Mle),e(Mle,qFo),e(d_,NFo),e(d_,oN),e(oN,jFo),e(d_,DFo),e(G,GFo),e(G,c_),e(c_,Ele),e(Ele,OFo),e(c_,VFo),e(c_,rN),e(rN,XFo),e(c_,zFo),e(G,QFo),e(G,f_),e(f_,Cle),e(Cle,WFo),e(f_,HFo),e(f_,tN),e(tN,UFo),e(f_,JFo),e(G,YFo),e(G,m_),e(m_,wle),e(wle,KFo),e(m_,ZFo),e(m_,aN),e(aN,e0o),e(m_,o0o),e(G,r0o),e(G,g_),e(g_,Ale),e(Ale,t0o),e(g_,a0o),e(g_,nN),e(nN,n0o),e(g_,s0o),e(G,l0o),e(G,h_),e(h_,yle),e(yle,i0o),e(h_,d0o),e(h_,sN),e(sN,c0o),e(h_,f0o),e(G,m0o),e(G,p_),e(p_,Lle),e(Lle,g0o),e(p_,h0o),e(p_,lN),e(lN,p0o),e(p_,u0o),e(G,_0o),e(G,u_),e(u_,xle),e(xle,b0o),e(u_,v0o),e(u_,iN),e(iN,F0o),e(u_,T0o),e(G,M0o),e(G,__),e(__,$le),e($le,E0o),e(__,C0o),e(__,dN),e(dN,w0o),e(__,A0o),e(G,y0o),e(G,b_),e(b_,kle),e(kle,L0o),e(b_,x0o),e(b_,cN),e(cN,$0o),e(b_,k0o),e(G,S0o),e(G,v_),e(v_,Sle),e(Sle,R0o),e(v_,B0o),e(v_,fN),e(fN,P0o),e(v_,I0o),e(G,q0o),e(G,F_),e(F_,Rle),e(Rle,N0o),e(F_,j0o),e(F_,mN),e(mN,D0o),e(F_,G0o),e(G,O0o),e(G,T_),e(T_,Ble),e(Ble,V0o),e(T_,X0o),e(T_,gN),e(gN,z0o),e(T_,Q0o),e(G,W0o),e(G,M_),e(M_,Ple),e(Ple,H0o),e(M_,U0o),e(M_,hN),e(hN,J0o),e(M_,Y0o),e(G,K0o),e(G,E_),e(E_,Ile),e(Ile,Z0o),e(E_,eTo),e(E_,pN),e(pN,oTo),e(E_,rTo),e(Ue,tTo),e(Ue,C_),e(C_,aTo),e(C_,qle),e(qle,nTo),e(C_,sTo),e(C_,Nle),e(Nle,lTo),e(Ue,iTo),M(w_,Ue,null),b(f,HPe,_),b(f,yi,_),e(yi,A_),e(A_,jle),M($6,jle,null),e(yi,dTo),e(yi,Dle),e(Dle,cTo),b(f,UPe,_),b(f,$o,_),M(k6,$o,null),e($o,fTo),e($o,Li),e(Li,mTo),e(Li,uN),e(uN,gTo),e(Li,hTo),e(Li,_N),e(_N,pTo),e(Li,uTo),e($o,_To),e($o,S6),e(S6,bTo),e(S6,Gle),e(Gle,vTo),e(S6,FTo),e($o,TTo),e($o,tt),M(R6,tt,null),e(tt,MTo),e(tt,Ole),e(Ole,ETo),e(tt,CTo),e(tt,xi),e(xi,wTo),e(xi,Vle),e(Vle,ATo),e(xi,yTo),e(xi,bN),e(bN,LTo),e(xi,xTo),e(tt,$To),M(y_,tt,null),e($o,kTo),e($o,Je),M(B6,Je,null),e(Je,STo),e(Je,Xle),e(Xle,RTo),e(Je,BTo),e(Je,La),e(La,PTo),e(La,zle),e(zle,ITo),e(La,qTo),e(La,Qle),e(Qle,NTo),e(La,jTo),e(La,Wle),e(Wle,DTo),e(La,GTo),e(Je,OTo),e(Je,z),e(z,L_),e(L_,Hle),e(Hle,VTo),e(L_,XTo),e(L_,vN),e(vN,zTo),e(L_,QTo),e(z,WTo),e(z,x_),e(x_,Ule),e(Ule,HTo),e(x_,UTo),e(x_,FN),e(FN,JTo),e(x_,YTo),e(z,KTo),e(z,$_),e($_,Jle),e(Jle,ZTo),e($_,e7o),e($_,TN),e(TN,o7o),e($_,r7o),e(z,t7o),e(z,k_),e(k_,Yle),e(Yle,a7o),e(k_,n7o),e(k_,MN),e(MN,s7o),e(k_,l7o),e(z,i7o),e(z,S_),e(S_,Kle),e(Kle,d7o),e(S_,c7o),e(S_,EN),e(EN,f7o),e(S_,m7o),e(z,g7o),e(z,R_),e(R_,Zle),e(Zle,h7o),e(R_,p7o),e(R_,CN),e(CN,u7o),e(R_,_7o),e(z,b7o),e(z,B_),e(B_,eie),e(eie,v7o),e(B_,F7o),e(B_,wN),e(wN,T7o),e(B_,M7o),e(z,E7o),e(z,P_),e(P_,oie),e(oie,C7o),e(P_,w7o),e(P_,AN),e(AN,A7o),e(P_,y7o),e(z,L7o),e(z,I_),e(I_,rie),e(rie,x7o),e(I_,$7o),e(I_,yN),e(yN,k7o),e(I_,S7o),e(z,R7o),e(z,q_),e(q_,tie),e(tie,B7o),e(q_,P7o),e(q_,LN),e(LN,I7o),e(q_,q7o),e(z,N7o),e(z,N_),e(N_,aie),e(aie,j7o),e(N_,D7o),e(N_,xN),e(xN,G7o),e(N_,O7o),e(z,V7o),e(z,j_),e(j_,nie),e(nie,X7o),e(j_,z7o),e(j_,$N),e($N,Q7o),e(j_,W7o),e(z,H7o),e(z,D_),e(D_,sie),e(sie,U7o),e(D_,J7o),e(D_,kN),e(kN,Y7o),e(D_,K7o),e(z,Z7o),e(z,G_),e(G_,lie),e(lie,eMo),e(G_,oMo),e(G_,SN),e(SN,rMo),e(G_,tMo),e(z,aMo),e(z,O_),e(O_,iie),e(iie,nMo),e(O_,sMo),e(O_,RN),e(RN,lMo),e(O_,iMo),e(z,dMo),e(z,V_),e(V_,die),e(die,cMo),e(V_,fMo),e(V_,BN),e(BN,mMo),e(V_,gMo),e(z,hMo),e(z,X_),e(X_,cie),e(cie,pMo),e(X_,uMo),e(X_,PN),e(PN,_Mo),e(X_,bMo),e(z,vMo),e(z,z_),e(z_,fie),e(fie,FMo),e(z_,TMo),e(z_,IN),e(IN,MMo),e(z_,EMo),e(z,CMo),e(z,Q_),e(Q_,mie),e(mie,wMo),e(Q_,AMo),e(Q_,qN),e(qN,yMo),e(Q_,LMo),e(z,xMo),e(z,W_),e(W_,gie),e(gie,$Mo),e(W_,kMo),e(W_,NN),e(NN,SMo),e(W_,RMo),e(z,BMo),e(z,H_),e(H_,hie),e(hie,PMo),e(H_,IMo),e(H_,jN),e(jN,qMo),e(H_,NMo),e(z,jMo),e(z,U_),e(U_,pie),e(pie,DMo),e(U_,GMo),e(U_,DN),e(DN,OMo),e(U_,VMo),e(z,XMo),e(z,J_),e(J_,uie),e(uie,zMo),e(J_,QMo),e(J_,GN),e(GN,WMo),e(J_,HMo),e(z,UMo),e(z,Y_),e(Y_,_ie),e(_ie,JMo),e(Y_,YMo),e(Y_,ON),e(ON,KMo),e(Y_,ZMo),e(z,e4o),e(z,K_),e(K_,bie),e(bie,o4o),e(K_,r4o),e(K_,VN),e(VN,t4o),e(K_,a4o),e(z,n4o),e(z,Z_),e(Z_,vie),e(vie,s4o),e(Z_,l4o),e(Z_,XN),e(XN,i4o),e(Z_,d4o),e(z,c4o),e(z,e2),e(e2,Fie),e(Fie,f4o),e(e2,m4o),e(e2,zN),e(zN,g4o),e(e2,h4o),e(z,p4o),e(z,o2),e(o2,Tie),e(Tie,u4o),e(o2,_4o),e(o2,QN),e(QN,b4o),e(o2,v4o),e(z,F4o),e(z,r2),e(r2,Mie),e(Mie,T4o),e(r2,M4o),e(r2,WN),e(WN,E4o),e(r2,C4o),e(z,w4o),e(z,t2),e(t2,Eie),e(Eie,A4o),e(t2,y4o),e(t2,HN),e(HN,L4o),e(t2,x4o),e(z,$4o),e(z,a2),e(a2,Cie),e(Cie,k4o),e(a2,S4o),e(a2,UN),e(UN,R4o),e(a2,B4o),e(z,P4o),e(z,n2),e(n2,wie),e(wie,I4o),e(n2,q4o),e(n2,JN),e(JN,N4o),e(n2,j4o),e(z,D4o),e(z,s2),e(s2,Aie),e(Aie,G4o),e(s2,O4o),e(s2,YN),e(YN,V4o),e(s2,X4o),e(z,z4o),e(z,l2),e(l2,yie),e(yie,Q4o),e(l2,W4o),e(l2,KN),e(KN,H4o),e(l2,U4o),e(z,J4o),e(z,i2),e(i2,Lie),e(Lie,Y4o),e(i2,K4o),e(i2,ZN),e(ZN,Z4o),e(i2,eEo),e(z,oEo),e(z,d2),e(d2,xie),e(xie,rEo),e(d2,tEo),e(d2,ej),e(ej,aEo),e(d2,nEo),e(Je,sEo),e(Je,c2),e(c2,lEo),e(c2,$ie),e($ie,iEo),e(c2,dEo),e(c2,kie),e(kie,cEo),e(Je,fEo),M(f2,Je,null),b(f,JPe,_),b(f,$i,_),e($i,m2),e(m2,Sie),M(P6,Sie,null),e($i,mEo),e($i,Rie),e(Rie,gEo),b(f,YPe,_),b(f,ko,_),M(I6,ko,null),e(ko,hEo),e(ko,ki),e(ki,pEo),e(ki,oj),e(oj,uEo),e(ki,_Eo),e(ki,rj),e(rj,bEo),e(ki,vEo),e(ko,FEo),e(ko,q6),e(q6,TEo),e(q6,Bie),e(Bie,MEo),e(q6,EEo),e(ko,CEo),e(ko,at),M(N6,at,null),e(at,wEo),e(at,Pie),e(Pie,AEo),e(at,yEo),e(at,Si),e(Si,LEo),e(Si,Iie),e(Iie,xEo),e(Si,$Eo),e(Si,tj),e(tj,kEo),e(Si,SEo),e(at,REo),M(g2,at,null),e(ko,BEo),e(ko,Ye),M(j6,Ye,null),e(Ye,PEo),e(Ye,qie),e(qie,IEo),e(Ye,qEo),e(Ye,xa),e(xa,NEo),e(xa,Nie),e(Nie,jEo),e(xa,DEo),e(xa,jie),e(jie,GEo),e(xa,OEo),e(xa,Die),e(Die,VEo),e(xa,XEo),e(Ye,zEo),e(Ye,Q),e(Q,h2),e(h2,Gie),e(Gie,QEo),e(h2,WEo),e(h2,aj),e(aj,HEo),e(h2,UEo),e(Q,JEo),e(Q,p2),e(p2,Oie),e(Oie,YEo),e(p2,KEo),e(p2,nj),e(nj,ZEo),e(p2,eCo),e(Q,oCo),e(Q,u2),e(u2,Vie),e(Vie,rCo),e(u2,tCo),e(u2,sj),e(sj,aCo),e(u2,nCo),e(Q,sCo),e(Q,_2),e(_2,Xie),e(Xie,lCo),e(_2,iCo),e(_2,lj),e(lj,dCo),e(_2,cCo),e(Q,fCo),e(Q,b2),e(b2,zie),e(zie,mCo),e(b2,gCo),e(b2,ij),e(ij,hCo),e(b2,pCo),e(Q,uCo),e(Q,v2),e(v2,Qie),e(Qie,_Co),e(v2,bCo),e(v2,dj),e(dj,vCo),e(v2,FCo),e(Q,TCo),e(Q,F2),e(F2,Wie),e(Wie,MCo),e(F2,ECo),e(F2,cj),e(cj,CCo),e(F2,wCo),e(Q,ACo),e(Q,T2),e(T2,Hie),e(Hie,yCo),e(T2,LCo),e(T2,fj),e(fj,xCo),e(T2,$Co),e(Q,kCo),e(Q,M2),e(M2,Uie),e(Uie,SCo),e(M2,RCo),e(M2,mj),e(mj,BCo),e(M2,PCo),e(Q,ICo),e(Q,E2),e(E2,Jie),e(Jie,qCo),e(E2,NCo),e(E2,gj),e(gj,jCo),e(E2,DCo),e(Q,GCo),e(Q,C2),e(C2,Yie),e(Yie,OCo),e(C2,VCo),e(C2,hj),e(hj,XCo),e(C2,zCo),e(Q,QCo),e(Q,w2),e(w2,Kie),e(Kie,WCo),e(w2,HCo),e(w2,pj),e(pj,UCo),e(w2,JCo),e(Q,YCo),e(Q,A2),e(A2,Zie),e(Zie,KCo),e(A2,ZCo),e(A2,uj),e(uj,e3o),e(A2,o3o),e(Q,r3o),e(Q,y2),e(y2,ede),e(ede,t3o),e(y2,a3o),e(y2,_j),e(_j,n3o),e(y2,s3o),e(Q,l3o),e(Q,L2),e(L2,ode),e(ode,i3o),e(L2,d3o),e(L2,bj),e(bj,c3o),e(L2,f3o),e(Q,m3o),e(Q,x2),e(x2,rde),e(rde,g3o),e(x2,h3o),e(x2,vj),e(vj,p3o),e(x2,u3o),e(Q,_3o),e(Q,$2),e($2,tde),e(tde,b3o),e($2,v3o),e($2,Fj),e(Fj,F3o),e($2,T3o),e(Q,M3o),e(Q,k2),e(k2,ade),e(ade,E3o),e(k2,C3o),e(k2,Tj),e(Tj,w3o),e(k2,A3o),e(Q,y3o),e(Q,S2),e(S2,nde),e(nde,L3o),e(S2,x3o),e(S2,Mj),e(Mj,$3o),e(S2,k3o),e(Q,S3o),e(Q,R2),e(R2,sde),e(sde,R3o),e(R2,B3o),e(R2,Ej),e(Ej,P3o),e(R2,I3o),e(Q,q3o),e(Q,B2),e(B2,lde),e(lde,N3o),e(B2,j3o),e(B2,Cj),e(Cj,D3o),e(B2,G3o),e(Q,O3o),e(Q,P2),e(P2,ide),e(ide,V3o),e(P2,X3o),e(P2,wj),e(wj,z3o),e(P2,Q3o),e(Q,W3o),e(Q,I2),e(I2,dde),e(dde,H3o),e(I2,U3o),e(I2,Aj),e(Aj,J3o),e(I2,Y3o),e(Q,K3o),e(Q,q2),e(q2,cde),e(cde,Z3o),e(q2,ewo),e(q2,yj),e(yj,owo),e(q2,rwo),e(Q,two),e(Q,N2),e(N2,fde),e(fde,awo),e(N2,nwo),e(N2,Lj),e(Lj,swo),e(N2,lwo),e(Q,iwo),e(Q,j2),e(j2,mde),e(mde,dwo),e(j2,cwo),e(j2,xj),e(xj,fwo),e(j2,mwo),e(Q,gwo),e(Q,D2),e(D2,gde),e(gde,hwo),e(D2,pwo),e(D2,$j),e($j,uwo),e(D2,_wo),e(Q,bwo),e(Q,G2),e(G2,hde),e(hde,vwo),e(G2,Fwo),e(G2,kj),e(kj,Two),e(G2,Mwo),e(Q,Ewo),e(Q,O2),e(O2,pde),e(pde,Cwo),e(O2,wwo),e(O2,Sj),e(Sj,Awo),e(O2,ywo),e(Q,Lwo),e(Q,V2),e(V2,ude),e(ude,xwo),e(V2,$wo),e(V2,Rj),e(Rj,kwo),e(V2,Swo),e(Q,Rwo),e(Q,X2),e(X2,_de),e(_de,Bwo),e(X2,Pwo),e(X2,bde),e(bde,Iwo),e(X2,qwo),e(Q,Nwo),e(Q,z2),e(z2,vde),e(vde,jwo),e(z2,Dwo),e(z2,Bj),e(Bj,Gwo),e(z2,Owo),e(Q,Vwo),e(Q,Q2),e(Q2,Fde),e(Fde,Xwo),e(Q2,zwo),e(Q2,Pj),e(Pj,Qwo),e(Q2,Wwo),e(Q,Hwo),e(Q,W2),e(W2,Tde),e(Tde,Uwo),e(W2,Jwo),e(W2,Ij),e(Ij,Ywo),e(W2,Kwo),e(Q,Zwo),e(Q,H2),e(H2,Mde),e(Mde,eAo),e(H2,oAo),e(H2,qj),e(qj,rAo),e(H2,tAo),e(Ye,aAo),e(Ye,U2),e(U2,nAo),e(U2,Ede),e(Ede,sAo),e(U2,lAo),e(U2,Cde),e(Cde,iAo),e(Ye,dAo),M(J2,Ye,null),b(f,KPe,_),b(f,Ri,_),e(Ri,Y2),e(Y2,wde),M(D6,wde,null),e(Ri,cAo),e(Ri,Ade),e(Ade,fAo),b(f,ZPe,_),b(f,So,_),M(G6,So,null),e(So,mAo),e(So,Bi),e(Bi,gAo),e(Bi,Nj),e(Nj,hAo),e(Bi,pAo),e(Bi,jj),e(jj,uAo),e(Bi,_Ao),e(So,bAo),e(So,O6),e(O6,vAo),e(O6,yde),e(yde,FAo),e(O6,TAo),e(So,MAo),e(So,nt),M(V6,nt,null),e(nt,EAo),e(nt,Lde),e(Lde,CAo),e(nt,wAo),e(nt,Pi),e(Pi,AAo),e(Pi,xde),e(xde,yAo),e(Pi,LAo),e(Pi,Dj),e(Dj,xAo),e(Pi,$Ao),e(nt,kAo),M(K2,nt,null),e(So,SAo),e(So,Ke),M(X6,Ke,null),e(Ke,RAo),e(Ke,$de),e($de,BAo),e(Ke,PAo),e(Ke,$a),e($a,IAo),e($a,kde),e(kde,qAo),e($a,NAo),e($a,Sde),e(Sde,jAo),e($a,DAo),e($a,Rde),e(Rde,GAo),e($a,OAo),e(Ke,VAo),e(Ke,pe),e(pe,Z2),e(Z2,Bde),e(Bde,XAo),e(Z2,zAo),e(Z2,Gj),e(Gj,QAo),e(Z2,WAo),e(pe,HAo),e(pe,e1),e(e1,Pde),e(Pde,UAo),e(e1,JAo),e(e1,Oj),e(Oj,YAo),e(e1,KAo),e(pe,ZAo),e(pe,o1),e(o1,Ide),e(Ide,e6o),e(o1,o6o),e(o1,Vj),e(Vj,r6o),e(o1,t6o),e(pe,a6o),e(pe,r1),e(r1,qde),e(qde,n6o),e(r1,s6o),e(r1,Xj),e(Xj,l6o),e(r1,i6o),e(pe,d6o),e(pe,t1),e(t1,Nde),e(Nde,c6o),e(t1,f6o),e(t1,zj),e(zj,m6o),e(t1,g6o),e(pe,h6o),e(pe,a1),e(a1,jde),e(jde,p6o),e(a1,u6o),e(a1,Qj),e(Qj,_6o),e(a1,b6o),e(pe,v6o),e(pe,n1),e(n1,Dde),e(Dde,F6o),e(n1,T6o),e(n1,Wj),e(Wj,M6o),e(n1,E6o),e(pe,C6o),e(pe,s1),e(s1,Gde),e(Gde,w6o),e(s1,A6o),e(s1,Hj),e(Hj,y6o),e(s1,L6o),e(pe,x6o),e(pe,l1),e(l1,Ode),e(Ode,$6o),e(l1,k6o),e(l1,Uj),e(Uj,S6o),e(l1,R6o),e(pe,B6o),e(pe,i1),e(i1,Vde),e(Vde,P6o),e(i1,I6o),e(i1,Jj),e(Jj,q6o),e(i1,N6o),e(pe,j6o),e(pe,d1),e(d1,Xde),e(Xde,D6o),e(d1,G6o),e(d1,Yj),e(Yj,O6o),e(d1,V6o),e(pe,X6o),e(pe,c1),e(c1,zde),e(zde,z6o),e(c1,Q6o),e(c1,Kj),e(Kj,W6o),e(c1,H6o),e(pe,U6o),e(pe,f1),e(f1,Qde),e(Qde,J6o),e(f1,Y6o),e(f1,Zj),e(Zj,K6o),e(f1,Z6o),e(pe,eyo),e(pe,m1),e(m1,Wde),e(Wde,oyo),e(m1,ryo),e(m1,eD),e(eD,tyo),e(m1,ayo),e(pe,nyo),e(pe,g1),e(g1,Hde),e(Hde,syo),e(g1,lyo),e(g1,oD),e(oD,iyo),e(g1,dyo),e(pe,cyo),e(pe,h1),e(h1,Ude),e(Ude,fyo),e(h1,myo),e(h1,rD),e(rD,gyo),e(h1,hyo),e(Ke,pyo),e(Ke,p1),e(p1,uyo),e(p1,Jde),e(Jde,_yo),e(p1,byo),e(p1,Yde),e(Yde,vyo),e(Ke,Fyo),M(u1,Ke,null),b(f,eIe,_),b(f,Ii,_),e(Ii,_1),e(_1,Kde),M(z6,Kde,null),e(Ii,Tyo),e(Ii,Zde),e(Zde,Myo),b(f,oIe,_),b(f,Ro,_),M(Q6,Ro,null),e(Ro,Eyo),e(Ro,qi),e(qi,Cyo),e(qi,tD),e(tD,wyo),e(qi,Ayo),e(qi,aD),e(aD,yyo),e(qi,Lyo),e(Ro,xyo),e(Ro,W6),e(W6,$yo),e(W6,ece),e(ece,kyo),e(W6,Syo),e(Ro,Ryo),e(Ro,st),M(H6,st,null),e(st,Byo),e(st,oce),e(oce,Pyo),e(st,Iyo),e(st,Ni),e(Ni,qyo),e(Ni,rce),e(rce,Nyo),e(Ni,jyo),e(Ni,nD),e(nD,Dyo),e(Ni,Gyo),e(st,Oyo),M(b1,st,null),e(Ro,Vyo),e(Ro,Ze),M(U6,Ze,null),e(Ze,Xyo),e(Ze,tce),e(tce,zyo),e(Ze,Qyo),e(Ze,ka),e(ka,Wyo),e(ka,ace),e(ace,Hyo),e(ka,Uyo),e(ka,nce),e(nce,Jyo),e(ka,Yyo),e(ka,sce),e(sce,Kyo),e(ka,Zyo),e(Ze,eLo),e(Ze,q),e(q,v1),e(v1,lce),e(lce,oLo),e(v1,rLo),e(v1,sD),e(sD,tLo),e(v1,aLo),e(q,nLo),e(q,F1),e(F1,ice),e(ice,sLo),e(F1,lLo),e(F1,lD),e(lD,iLo),e(F1,dLo),e(q,cLo),e(q,T1),e(T1,dce),e(dce,fLo),e(T1,mLo),e(T1,iD),e(iD,gLo),e(T1,hLo),e(q,pLo),e(q,M1),e(M1,cce),e(cce,uLo),e(M1,_Lo),e(M1,dD),e(dD,bLo),e(M1,vLo),e(q,FLo),e(q,E1),e(E1,fce),e(fce,TLo),e(E1,MLo),e(E1,cD),e(cD,ELo),e(E1,CLo),e(q,wLo),e(q,C1),e(C1,mce),e(mce,ALo),e(C1,yLo),e(C1,fD),e(fD,LLo),e(C1,xLo),e(q,$Lo),e(q,w1),e(w1,gce),e(gce,kLo),e(w1,SLo),e(w1,mD),e(mD,RLo),e(w1,BLo),e(q,PLo),e(q,A1),e(A1,hce),e(hce,ILo),e(A1,qLo),e(A1,gD),e(gD,NLo),e(A1,jLo),e(q,DLo),e(q,y1),e(y1,pce),e(pce,GLo),e(y1,OLo),e(y1,hD),e(hD,VLo),e(y1,XLo),e(q,zLo),e(q,L1),e(L1,uce),e(uce,QLo),e(L1,WLo),e(L1,pD),e(pD,HLo),e(L1,ULo),e(q,JLo),e(q,x1),e(x1,_ce),e(_ce,YLo),e(x1,KLo),e(x1,uD),e(uD,ZLo),e(x1,e8o),e(q,o8o),e(q,$1),e($1,bce),e(bce,r8o),e($1,t8o),e($1,_D),e(_D,a8o),e($1,n8o),e(q,s8o),e(q,k1),e(k1,vce),e(vce,l8o),e(k1,i8o),e(k1,bD),e(bD,d8o),e(k1,c8o),e(q,f8o),e(q,S1),e(S1,Fce),e(Fce,m8o),e(S1,g8o),e(S1,vD),e(vD,h8o),e(S1,p8o),e(q,u8o),e(q,R1),e(R1,Tce),e(Tce,_8o),e(R1,b8o),e(R1,FD),e(FD,v8o),e(R1,F8o),e(q,T8o),e(q,B1),e(B1,Mce),e(Mce,M8o),e(B1,E8o),e(B1,TD),e(TD,C8o),e(B1,w8o),e(q,A8o),e(q,P1),e(P1,Ece),e(Ece,y8o),e(P1,L8o),e(P1,MD),e(MD,x8o),e(P1,$8o),e(q,k8o),e(q,I1),e(I1,Cce),e(Cce,S8o),e(I1,R8o),e(I1,ED),e(ED,B8o),e(I1,P8o),e(q,I8o),e(q,q1),e(q1,wce),e(wce,q8o),e(q1,N8o),e(q1,CD),e(CD,j8o),e(q1,D8o),e(q,G8o),e(q,N1),e(N1,Ace),e(Ace,O8o),e(N1,V8o),e(N1,wD),e(wD,X8o),e(N1,z8o),e(q,Q8o),e(q,j1),e(j1,yce),e(yce,W8o),e(j1,H8o),e(j1,AD),e(AD,U8o),e(j1,J8o),e(q,Y8o),e(q,D1),e(D1,Lce),e(Lce,K8o),e(D1,Z8o),e(D1,yD),e(yD,exo),e(D1,oxo),e(q,rxo),e(q,G1),e(G1,xce),e(xce,txo),e(G1,axo),e(G1,LD),e(LD,nxo),e(G1,sxo),e(q,lxo),e(q,O1),e(O1,$ce),e($ce,ixo),e(O1,dxo),e(O1,xD),e(xD,cxo),e(O1,fxo),e(q,mxo),e(q,V1),e(V1,kce),e(kce,gxo),e(V1,hxo),e(V1,$D),e($D,pxo),e(V1,uxo),e(q,_xo),e(q,X1),e(X1,Sce),e(Sce,bxo),e(X1,vxo),e(X1,kD),e(kD,Fxo),e(X1,Txo),e(q,Mxo),e(q,z1),e(z1,Rce),e(Rce,Exo),e(z1,Cxo),e(z1,SD),e(SD,wxo),e(z1,Axo),e(q,yxo),e(q,Q1),e(Q1,Bce),e(Bce,Lxo),e(Q1,xxo),e(Q1,RD),e(RD,$xo),e(Q1,kxo),e(q,Sxo),e(q,W1),e(W1,Pce),e(Pce,Rxo),e(W1,Bxo),e(W1,BD),e(BD,Pxo),e(W1,Ixo),e(q,qxo),e(q,H1),e(H1,Ice),e(Ice,Nxo),e(H1,jxo),e(H1,PD),e(PD,Dxo),e(H1,Gxo),e(q,Oxo),e(q,U1),e(U1,qce),e(qce,Vxo),e(U1,Xxo),e(U1,ID),e(ID,zxo),e(U1,Qxo),e(q,Wxo),e(q,J1),e(J1,Nce),e(Nce,Hxo),e(J1,Uxo),e(J1,qD),e(qD,Jxo),e(J1,Yxo),e(q,Kxo),e(q,Y1),e(Y1,jce),e(jce,Zxo),e(Y1,e9o),e(Y1,ND),e(ND,o9o),e(Y1,r9o),e(q,t9o),e(q,K1),e(K1,Dce),e(Dce,a9o),e(K1,n9o),e(K1,jD),e(jD,s9o),e(K1,l9o),e(q,i9o),e(q,Z1),e(Z1,Gce),e(Gce,d9o),e(Z1,c9o),e(Z1,DD),e(DD,f9o),e(Z1,m9o),e(q,g9o),e(q,eb),e(eb,Oce),e(Oce,h9o),e(eb,p9o),e(eb,GD),e(GD,u9o),e(eb,_9o),e(q,b9o),e(q,ob),e(ob,Vce),e(Vce,v9o),e(ob,F9o),e(ob,OD),e(OD,T9o),e(ob,M9o),e(q,E9o),e(q,rb),e(rb,Xce),e(Xce,C9o),e(rb,w9o),e(rb,VD),e(VD,A9o),e(rb,y9o),e(q,L9o),e(q,tb),e(tb,zce),e(zce,x9o),e(tb,$9o),e(tb,XD),e(XD,k9o),e(tb,S9o),e(q,R9o),e(q,ab),e(ab,Qce),e(Qce,B9o),e(ab,P9o),e(ab,zD),e(zD,I9o),e(ab,q9o),e(q,N9o),e(q,nb),e(nb,Wce),e(Wce,j9o),e(nb,D9o),e(nb,QD),e(QD,G9o),e(nb,O9o),e(q,V9o),e(q,sb),e(sb,Hce),e(Hce,X9o),e(sb,z9o),e(sb,WD),e(WD,Q9o),e(sb,W9o),e(q,H9o),e(q,lb),e(lb,Uce),e(Uce,U9o),e(lb,J9o),e(lb,HD),e(HD,Y9o),e(lb,K9o),e(q,Z9o),e(q,ib),e(ib,Jce),e(Jce,e$o),e(ib,o$o),e(ib,UD),e(UD,r$o),e(ib,t$o),e(q,a$o),e(q,db),e(db,Yce),e(Yce,n$o),e(db,s$o),e(db,JD),e(JD,l$o),e(db,i$o),e(q,d$o),e(q,cb),e(cb,Kce),e(Kce,c$o),e(cb,f$o),e(cb,YD),e(YD,m$o),e(cb,g$o),e(Ze,h$o),e(Ze,fb),e(fb,p$o),e(fb,Zce),e(Zce,u$o),e(fb,_$o),e(fb,efe),e(efe,b$o),e(Ze,v$o),M(mb,Ze,null),b(f,rIe,_),b(f,ji,_),e(ji,gb),e(gb,ofe),M(J6,ofe,null),e(ji,F$o),e(ji,rfe),e(rfe,T$o),b(f,tIe,_),b(f,Bo,_),M(Y6,Bo,null),e(Bo,M$o),e(Bo,Di),e(Di,E$o),e(Di,KD),e(KD,C$o),e(Di,w$o),e(Di,ZD),e(ZD,A$o),e(Di,y$o),e(Bo,L$o),e(Bo,K6),e(K6,x$o),e(K6,tfe),e(tfe,$$o),e(K6,k$o),e(Bo,S$o),e(Bo,lt),M(Z6,lt,null),e(lt,R$o),e(lt,afe),e(afe,B$o),e(lt,P$o),e(lt,Gi),e(Gi,I$o),e(Gi,nfe),e(nfe,q$o),e(Gi,N$o),e(Gi,eG),e(eG,j$o),e(Gi,D$o),e(lt,G$o),M(hb,lt,null),e(Bo,O$o),e(Bo,eo),M(ey,eo,null),e(eo,V$o),e(eo,sfe),e(sfe,X$o),e(eo,z$o),e(eo,Sa),e(Sa,Q$o),e(Sa,lfe),e(lfe,W$o),e(Sa,H$o),e(Sa,ife),e(ife,U$o),e(Sa,J$o),e(Sa,dfe),e(dfe,Y$o),e(Sa,K$o),e(eo,Z$o),e(eo,Y),e(Y,pb),e(pb,cfe),e(cfe,eko),e(pb,oko),e(pb,oG),e(oG,rko),e(pb,tko),e(Y,ako),e(Y,ub),e(ub,ffe),e(ffe,nko),e(ub,sko),e(ub,rG),e(rG,lko),e(ub,iko),e(Y,dko),e(Y,_b),e(_b,mfe),e(mfe,cko),e(_b,fko),e(_b,tG),e(tG,mko),e(_b,gko),e(Y,hko),e(Y,bb),e(bb,gfe),e(gfe,pko),e(bb,uko),e(bb,aG),e(aG,_ko),e(bb,bko),e(Y,vko),e(Y,vb),e(vb,hfe),e(hfe,Fko),e(vb,Tko),e(vb,nG),e(nG,Mko),e(vb,Eko),e(Y,Cko),e(Y,Fb),e(Fb,pfe),e(pfe,wko),e(Fb,Ako),e(Fb,sG),e(sG,yko),e(Fb,Lko),e(Y,xko),e(Y,Tb),e(Tb,ufe),e(ufe,$ko),e(Tb,kko),e(Tb,lG),e(lG,Sko),e(Tb,Rko),e(Y,Bko),e(Y,Mb),e(Mb,_fe),e(_fe,Pko),e(Mb,Iko),e(Mb,iG),e(iG,qko),e(Mb,Nko),e(Y,jko),e(Y,Eb),e(Eb,bfe),e(bfe,Dko),e(Eb,Gko),e(Eb,dG),e(dG,Oko),e(Eb,Vko),e(Y,Xko),e(Y,Cb),e(Cb,vfe),e(vfe,zko),e(Cb,Qko),e(Cb,cG),e(cG,Wko),e(Cb,Hko),e(Y,Uko),e(Y,wb),e(wb,Ffe),e(Ffe,Jko),e(wb,Yko),e(wb,fG),e(fG,Kko),e(wb,Zko),e(Y,eSo),e(Y,Ab),e(Ab,Tfe),e(Tfe,oSo),e(Ab,rSo),e(Ab,mG),e(mG,tSo),e(Ab,aSo),e(Y,nSo),e(Y,yb),e(yb,Mfe),e(Mfe,sSo),e(yb,lSo),e(yb,gG),e(gG,iSo),e(yb,dSo),e(Y,cSo),e(Y,Lb),e(Lb,Efe),e(Efe,fSo),e(Lb,mSo),e(Lb,hG),e(hG,gSo),e(Lb,hSo),e(Y,pSo),e(Y,xb),e(xb,Cfe),e(Cfe,uSo),e(xb,_So),e(xb,pG),e(pG,bSo),e(xb,vSo),e(Y,FSo),e(Y,$b),e($b,wfe),e(wfe,TSo),e($b,MSo),e($b,uG),e(uG,ESo),e($b,CSo),e(Y,wSo),e(Y,kb),e(kb,Afe),e(Afe,ASo),e(kb,ySo),e(kb,_G),e(_G,LSo),e(kb,xSo),e(Y,$So),e(Y,Sb),e(Sb,yfe),e(yfe,kSo),e(Sb,SSo),e(Sb,bG),e(bG,RSo),e(Sb,BSo),e(Y,PSo),e(Y,Rb),e(Rb,Lfe),e(Lfe,ISo),e(Rb,qSo),e(Rb,vG),e(vG,NSo),e(Rb,jSo),e(Y,DSo),e(Y,Bb),e(Bb,xfe),e(xfe,GSo),e(Bb,OSo),e(Bb,FG),e(FG,VSo),e(Bb,XSo),e(Y,zSo),e(Y,Pb),e(Pb,$fe),e($fe,QSo),e(Pb,WSo),e(Pb,TG),e(TG,HSo),e(Pb,USo),e(Y,JSo),e(Y,Ib),e(Ib,kfe),e(kfe,YSo),e(Ib,KSo),e(Ib,MG),e(MG,ZSo),e(Ib,eRo),e(Y,oRo),e(Y,qb),e(qb,Sfe),e(Sfe,rRo),e(qb,tRo),e(qb,EG),e(EG,aRo),e(qb,nRo),e(Y,sRo),e(Y,Nb),e(Nb,Rfe),e(Rfe,lRo),e(Nb,iRo),e(Nb,CG),e(CG,dRo),e(Nb,cRo),e(Y,fRo),e(Y,jb),e(jb,Bfe),e(Bfe,mRo),e(jb,gRo),e(jb,wG),e(wG,hRo),e(jb,pRo),e(Y,uRo),e(Y,Db),e(Db,Pfe),e(Pfe,_Ro),e(Db,bRo),e(Db,AG),e(AG,vRo),e(Db,FRo),e(Y,TRo),e(Y,Gb),e(Gb,Ife),e(Ife,MRo),e(Gb,ERo),e(Gb,yG),e(yG,CRo),e(Gb,wRo),e(Y,ARo),e(Y,Ob),e(Ob,qfe),e(qfe,yRo),e(Ob,LRo),e(Ob,LG),e(LG,xRo),e(Ob,$Ro),e(Y,kRo),e(Y,Vb),e(Vb,Nfe),e(Nfe,SRo),e(Vb,RRo),e(Vb,xG),e(xG,BRo),e(Vb,PRo),e(eo,IRo),e(eo,Xb),e(Xb,qRo),e(Xb,jfe),e(jfe,NRo),e(Xb,jRo),e(Xb,Dfe),e(Dfe,DRo),e(eo,GRo),M(zb,eo,null),b(f,aIe,_),b(f,Oi,_),e(Oi,Qb),e(Qb,Gfe),M(oy,Gfe,null),e(Oi,ORo),e(Oi,Ofe),e(Ofe,VRo),b(f,nIe,_),b(f,Po,_),M(ry,Po,null),e(Po,XRo),e(Po,Vi),e(Vi,zRo),e(Vi,$G),e($G,QRo),e(Vi,WRo),e(Vi,kG),e(kG,HRo),e(Vi,URo),e(Po,JRo),e(Po,ty),e(ty,YRo),e(ty,Vfe),e(Vfe,KRo),e(ty,ZRo),e(Po,eBo),e(Po,it),M(ay,it,null),e(it,oBo),e(it,Xfe),e(Xfe,rBo),e(it,tBo),e(it,Xi),e(Xi,aBo),e(Xi,zfe),e(zfe,nBo),e(Xi,sBo),e(Xi,SG),e(SG,lBo),e(Xi,iBo),e(it,dBo),M(Wb,it,null),e(Po,cBo),e(Po,oo),M(ny,oo,null),e(oo,fBo),e(oo,Qfe),e(Qfe,mBo),e(oo,gBo),e(oo,Ra),e(Ra,hBo),e(Ra,Wfe),e(Wfe,pBo),e(Ra,uBo),e(Ra,Hfe),e(Hfe,_Bo),e(Ra,bBo),e(Ra,Ufe),e(Ufe,vBo),e(Ra,FBo),e(oo,TBo),e(oo,Yr),e(Yr,Hb),e(Hb,Jfe),e(Jfe,MBo),e(Hb,EBo),e(Hb,RG),e(RG,CBo),e(Hb,wBo),e(Yr,ABo),e(Yr,Ub),e(Ub,Yfe),e(Yfe,yBo),e(Ub,LBo),e(Ub,BG),e(BG,xBo),e(Ub,$Bo),e(Yr,kBo),e(Yr,Jb),e(Jb,Kfe),e(Kfe,SBo),e(Jb,RBo),e(Jb,PG),e(PG,BBo),e(Jb,PBo),e(Yr,IBo),e(Yr,Yb),e(Yb,Zfe),e(Zfe,qBo),e(Yb,NBo),e(Yb,IG),e(IG,jBo),e(Yb,DBo),e(Yr,GBo),e(Yr,Kb),e(Kb,eme),e(eme,OBo),e(Kb,VBo),e(Kb,qG),e(qG,XBo),e(Kb,zBo),e(oo,QBo),e(oo,Zb),e(Zb,WBo),e(Zb,ome),e(ome,HBo),e(Zb,UBo),e(Zb,rme),e(rme,JBo),e(oo,YBo),M(e5,oo,null),b(f,sIe,_),b(f,zi,_),e(zi,o5),e(o5,tme),M(sy,tme,null),e(zi,KBo),e(zi,ame),e(ame,ZBo),b(f,lIe,_),b(f,Io,_),M(ly,Io,null),e(Io,ePo),e(Io,Qi),e(Qi,oPo),e(Qi,NG),e(NG,rPo),e(Qi,tPo),e(Qi,jG),e(jG,aPo),e(Qi,nPo),e(Io,sPo),e(Io,iy),e(iy,lPo),e(iy,nme),e(nme,iPo),e(iy,dPo),e(Io,cPo),e(Io,dt),M(dy,dt,null),e(dt,fPo),e(dt,sme),e(sme,mPo),e(dt,gPo),e(dt,Wi),e(Wi,hPo),e(Wi,lme),e(lme,pPo),e(Wi,uPo),e(Wi,DG),e(DG,_Po),e(Wi,bPo),e(dt,vPo),M(r5,dt,null),e(Io,FPo),e(Io,ro),M(cy,ro,null),e(ro,TPo),e(ro,ime),e(ime,MPo),e(ro,EPo),e(ro,Ba),e(Ba,CPo),e(Ba,dme),e(dme,wPo),e(Ba,APo),e(Ba,cme),e(cme,yPo),e(Ba,LPo),e(Ba,fme),e(fme,xPo),e(Ba,$Po),e(ro,kPo),e(ro,U),e(U,t5),e(t5,mme),e(mme,SPo),e(t5,RPo),e(t5,GG),e(GG,BPo),e(t5,PPo),e(U,IPo),e(U,a5),e(a5,gme),e(gme,qPo),e(a5,NPo),e(a5,OG),e(OG,jPo),e(a5,DPo),e(U,GPo),e(U,n5),e(n5,hme),e(hme,OPo),e(n5,VPo),e(n5,VG),e(VG,XPo),e(n5,zPo),e(U,QPo),e(U,s5),e(s5,pme),e(pme,WPo),e(s5,HPo),e(s5,XG),e(XG,UPo),e(s5,JPo),e(U,YPo),e(U,l5),e(l5,ume),e(ume,KPo),e(l5,ZPo),e(l5,zG),e(zG,eIo),e(l5,oIo),e(U,rIo),e(U,i5),e(i5,_me),e(_me,tIo),e(i5,aIo),e(i5,QG),e(QG,nIo),e(i5,sIo),e(U,lIo),e(U,d5),e(d5,bme),e(bme,iIo),e(d5,dIo),e(d5,WG),e(WG,cIo),e(d5,fIo),e(U,mIo),e(U,c5),e(c5,vme),e(vme,gIo),e(c5,hIo),e(c5,HG),e(HG,pIo),e(c5,uIo),e(U,_Io),e(U,f5),e(f5,Fme),e(Fme,bIo),e(f5,vIo),e(f5,UG),e(UG,FIo),e(f5,TIo),e(U,MIo),e(U,m5),e(m5,Tme),e(Tme,EIo),e(m5,CIo),e(m5,JG),e(JG,wIo),e(m5,AIo),e(U,yIo),e(U,g5),e(g5,Mme),e(Mme,LIo),e(g5,xIo),e(g5,YG),e(YG,$Io),e(g5,kIo),e(U,SIo),e(U,h5),e(h5,Eme),e(Eme,RIo),e(h5,BIo),e(h5,KG),e(KG,PIo),e(h5,IIo),e(U,qIo),e(U,p5),e(p5,Cme),e(Cme,NIo),e(p5,jIo),e(p5,ZG),e(ZG,DIo),e(p5,GIo),e(U,OIo),e(U,u5),e(u5,wme),e(wme,VIo),e(u5,XIo),e(u5,eO),e(eO,zIo),e(u5,QIo),e(U,WIo),e(U,_5),e(_5,Ame),e(Ame,HIo),e(_5,UIo),e(_5,oO),e(oO,JIo),e(_5,YIo),e(U,KIo),e(U,b5),e(b5,yme),e(yme,ZIo),e(b5,eqo),e(b5,rO),e(rO,oqo),e(b5,rqo),e(U,tqo),e(U,v5),e(v5,Lme),e(Lme,aqo),e(v5,nqo),e(v5,tO),e(tO,sqo),e(v5,lqo),e(U,iqo),e(U,F5),e(F5,xme),e(xme,dqo),e(F5,cqo),e(F5,aO),e(aO,fqo),e(F5,mqo),e(U,gqo),e(U,T5),e(T5,$me),e($me,hqo),e(T5,pqo),e(T5,nO),e(nO,uqo),e(T5,_qo),e(U,bqo),e(U,M5),e(M5,kme),e(kme,vqo),e(M5,Fqo),e(M5,sO),e(sO,Tqo),e(M5,Mqo),e(U,Eqo),e(U,E5),e(E5,Sme),e(Sme,Cqo),e(E5,wqo),e(E5,lO),e(lO,Aqo),e(E5,yqo),e(U,Lqo),e(U,C5),e(C5,Rme),e(Rme,xqo),e(C5,$qo),e(C5,iO),e(iO,kqo),e(C5,Sqo),e(U,Rqo),e(U,w5),e(w5,Bme),e(Bme,Bqo),e(w5,Pqo),e(w5,dO),e(dO,Iqo),e(w5,qqo),e(U,Nqo),e(U,A5),e(A5,Pme),e(Pme,jqo),e(A5,Dqo),e(A5,cO),e(cO,Gqo),e(A5,Oqo),e(U,Vqo),e(U,y5),e(y5,Ime),e(Ime,Xqo),e(y5,zqo),e(y5,fO),e(fO,Qqo),e(y5,Wqo),e(U,Hqo),e(U,L5),e(L5,qme),e(qme,Uqo),e(L5,Jqo),e(L5,mO),e(mO,Yqo),e(L5,Kqo),e(U,Zqo),e(U,x5),e(x5,Nme),e(Nme,eNo),e(x5,oNo),e(x5,gO),e(gO,rNo),e(x5,tNo),e(U,aNo),e(U,$5),e($5,jme),e(jme,nNo),e($5,sNo),e($5,hO),e(hO,lNo),e($5,iNo),e(U,dNo),e(U,k5),e(k5,Dme),e(Dme,cNo),e(k5,fNo),e(k5,pO),e(pO,mNo),e(k5,gNo),e(U,hNo),e(U,S5),e(S5,Gme),e(Gme,pNo),e(S5,uNo),e(S5,uO),e(uO,_No),e(S5,bNo),e(U,vNo),e(U,R5),e(R5,Ome),e(Ome,FNo),e(R5,TNo),e(R5,_O),e(_O,MNo),e(R5,ENo),e(U,CNo),e(U,B5),e(B5,Vme),e(Vme,wNo),e(B5,ANo),e(B5,bO),e(bO,yNo),e(B5,LNo),e(U,xNo),e(U,P5),e(P5,Xme),e(Xme,$No),e(P5,kNo),e(P5,vO),e(vO,SNo),e(P5,RNo),e(ro,BNo),e(ro,I5),e(I5,PNo),e(I5,zme),e(zme,INo),e(I5,qNo),e(I5,Qme),e(Qme,NNo),e(ro,jNo),M(q5,ro,null),b(f,iIe,_),b(f,Hi,_),e(Hi,N5),e(N5,Wme),M(fy,Wme,null),e(Hi,DNo),e(Hi,Hme),e(Hme,GNo),b(f,dIe,_),b(f,qo,_),M(my,qo,null),e(qo,ONo),e(qo,Ui),e(Ui,VNo),e(Ui,FO),e(FO,XNo),e(Ui,zNo),e(Ui,TO),e(TO,QNo),e(Ui,WNo),e(qo,HNo),e(qo,gy),e(gy,UNo),e(gy,Ume),e(Ume,JNo),e(gy,YNo),e(qo,KNo),e(qo,ct),M(hy,ct,null),e(ct,ZNo),e(ct,Jme),e(Jme,ejo),e(ct,ojo),e(ct,Ji),e(Ji,rjo),e(Ji,Yme),e(Yme,tjo),e(Ji,ajo),e(Ji,MO),e(MO,njo),e(Ji,sjo),e(ct,ljo),M(j5,ct,null),e(qo,ijo),e(qo,to),M(py,to,null),e(to,djo),e(to,Kme),e(Kme,cjo),e(to,fjo),e(to,Pa),e(Pa,mjo),e(Pa,Zme),e(Zme,gjo),e(Pa,hjo),e(Pa,ege),e(ege,pjo),e(Pa,ujo),e(Pa,oge),e(oge,_jo),e(Pa,bjo),e(to,vjo),e(to,O),e(O,D5),e(D5,rge),e(rge,Fjo),e(D5,Tjo),e(D5,EO),e(EO,Mjo),e(D5,Ejo),e(O,Cjo),e(O,G5),e(G5,tge),e(tge,wjo),e(G5,Ajo),e(G5,CO),e(CO,yjo),e(G5,Ljo),e(O,xjo),e(O,O5),e(O5,age),e(age,$jo),e(O5,kjo),e(O5,wO),e(wO,Sjo),e(O5,Rjo),e(O,Bjo),e(O,V5),e(V5,nge),e(nge,Pjo),e(V5,Ijo),e(V5,AO),e(AO,qjo),e(V5,Njo),e(O,jjo),e(O,X5),e(X5,sge),e(sge,Djo),e(X5,Gjo),e(X5,yO),e(yO,Ojo),e(X5,Vjo),e(O,Xjo),e(O,z5),e(z5,lge),e(lge,zjo),e(z5,Qjo),e(z5,LO),e(LO,Wjo),e(z5,Hjo),e(O,Ujo),e(O,Q5),e(Q5,ige),e(ige,Jjo),e(Q5,Yjo),e(Q5,xO),e(xO,Kjo),e(Q5,Zjo),e(O,eDo),e(O,W5),e(W5,dge),e(dge,oDo),e(W5,rDo),e(W5,$O),e($O,tDo),e(W5,aDo),e(O,nDo),e(O,H5),e(H5,cge),e(cge,sDo),e(H5,lDo),e(H5,kO),e(kO,iDo),e(H5,dDo),e(O,cDo),e(O,U5),e(U5,fge),e(fge,fDo),e(U5,mDo),e(U5,SO),e(SO,gDo),e(U5,hDo),e(O,pDo),e(O,J5),e(J5,mge),e(mge,uDo),e(J5,_Do),e(J5,RO),e(RO,bDo),e(J5,vDo),e(O,FDo),e(O,Y5),e(Y5,gge),e(gge,TDo),e(Y5,MDo),e(Y5,BO),e(BO,EDo),e(Y5,CDo),e(O,wDo),e(O,K5),e(K5,hge),e(hge,ADo),e(K5,yDo),e(K5,PO),e(PO,LDo),e(K5,xDo),e(O,$Do),e(O,Z5),e(Z5,pge),e(pge,kDo),e(Z5,SDo),e(Z5,IO),e(IO,RDo),e(Z5,BDo),e(O,PDo),e(O,ev),e(ev,uge),e(uge,IDo),e(ev,qDo),e(ev,qO),e(qO,NDo),e(ev,jDo),e(O,DDo),e(O,ov),e(ov,_ge),e(_ge,GDo),e(ov,ODo),e(ov,NO),e(NO,VDo),e(ov,XDo),e(O,zDo),e(O,rv),e(rv,bge),e(bge,QDo),e(rv,WDo),e(rv,jO),e(jO,HDo),e(rv,UDo),e(O,JDo),e(O,tv),e(tv,vge),e(vge,YDo),e(tv,KDo),e(tv,DO),e(DO,ZDo),e(tv,eGo),e(O,oGo),e(O,av),e(av,Fge),e(Fge,rGo),e(av,tGo),e(av,GO),e(GO,aGo),e(av,nGo),e(O,sGo),e(O,nv),e(nv,Tge),e(Tge,lGo),e(nv,iGo),e(nv,OO),e(OO,dGo),e(nv,cGo),e(O,fGo),e(O,sv),e(sv,Mge),e(Mge,mGo),e(sv,gGo),e(sv,VO),e(VO,hGo),e(sv,pGo),e(O,uGo),e(O,lv),e(lv,Ege),e(Ege,_Go),e(lv,bGo),e(lv,XO),e(XO,vGo),e(lv,FGo),e(O,TGo),e(O,iv),e(iv,Cge),e(Cge,MGo),e(iv,EGo),e(iv,zO),e(zO,CGo),e(iv,wGo),e(O,AGo),e(O,dv),e(dv,wge),e(wge,yGo),e(dv,LGo),e(dv,QO),e(QO,xGo),e(dv,$Go),e(O,kGo),e(O,cv),e(cv,Age),e(Age,SGo),e(cv,RGo),e(cv,WO),e(WO,BGo),e(cv,PGo),e(O,IGo),e(O,fv),e(fv,yge),e(yge,qGo),e(fv,NGo),e(fv,HO),e(HO,jGo),e(fv,DGo),e(O,GGo),e(O,mv),e(mv,Lge),e(Lge,OGo),e(mv,VGo),e(mv,UO),e(UO,XGo),e(mv,zGo),e(O,QGo),e(O,gv),e(gv,xge),e(xge,WGo),e(gv,HGo),e(gv,JO),e(JO,UGo),e(gv,JGo),e(O,YGo),e(O,hv),e(hv,$ge),e($ge,KGo),e(hv,ZGo),e(hv,YO),e(YO,eOo),e(hv,oOo),e(O,rOo),e(O,pv),e(pv,kge),e(kge,tOo),e(pv,aOo),e(pv,KO),e(KO,nOo),e(pv,sOo),e(O,lOo),e(O,uv),e(uv,Sge),e(Sge,iOo),e(uv,dOo),e(uv,ZO),e(ZO,cOo),e(uv,fOo),e(O,mOo),e(O,_v),e(_v,Rge),e(Rge,gOo),e(_v,hOo),e(_v,eV),e(eV,pOo),e(_v,uOo),e(O,_Oo),e(O,bv),e(bv,Bge),e(Bge,bOo),e(bv,vOo),e(bv,oV),e(oV,FOo),e(bv,TOo),e(O,MOo),e(O,vv),e(vv,Pge),e(Pge,EOo),e(vv,COo),e(vv,rV),e(rV,wOo),e(vv,AOo),e(O,yOo),e(O,Fv),e(Fv,Ige),e(Ige,LOo),e(Fv,xOo),e(Fv,tV),e(tV,$Oo),e(Fv,kOo),e(O,SOo),e(O,Tv),e(Tv,qge),e(qge,ROo),e(Tv,BOo),e(Tv,aV),e(aV,POo),e(Tv,IOo),e(O,qOo),e(O,Mv),e(Mv,Nge),e(Nge,NOo),e(Mv,jOo),e(Mv,nV),e(nV,DOo),e(Mv,GOo),e(O,OOo),e(O,Ev),e(Ev,jge),e(jge,VOo),e(Ev,XOo),e(Ev,sV),e(sV,zOo),e(Ev,QOo),e(O,WOo),e(O,Cv),e(Cv,Dge),e(Dge,HOo),e(Cv,UOo),e(Cv,lV),e(lV,JOo),e(Cv,YOo),e(to,KOo),e(to,wv),e(wv,ZOo),e(wv,Gge),e(Gge,eVo),e(wv,oVo),e(wv,Oge),e(Oge,rVo),e(to,tVo),M(Av,to,null),b(f,cIe,_),b(f,Yi,_),e(Yi,yv),e(yv,Vge),M(uy,Vge,null),e(Yi,aVo),e(Yi,Xge),e(Xge,nVo),b(f,fIe,_),b(f,No,_),M(_y,No,null),e(No,sVo),e(No,Ki),e(Ki,lVo),e(Ki,iV),e(iV,iVo),e(Ki,dVo),e(Ki,dV),e(dV,cVo),e(Ki,fVo),e(No,mVo),e(No,by),e(by,gVo),e(by,zge),e(zge,hVo),e(by,pVo),e(No,uVo),e(No,ft),M(vy,ft,null),e(ft,_Vo),e(ft,Qge),e(Qge,bVo),e(ft,vVo),e(ft,Zi),e(Zi,FVo),e(Zi,Wge),e(Wge,TVo),e(Zi,MVo),e(Zi,cV),e(cV,EVo),e(Zi,CVo),e(ft,wVo),M(Lv,ft,null),e(No,AVo),e(No,ao),M(Fy,ao,null),e(ao,yVo),e(ao,Hge),e(Hge,LVo),e(ao,xVo),e(ao,Ia),e(Ia,$Vo),e(Ia,Uge),e(Uge,kVo),e(Ia,SVo),e(Ia,Jge),e(Jge,RVo),e(Ia,BVo),e(Ia,Yge),e(Yge,PVo),e(Ia,IVo),e(ao,qVo),e(ao,Kge),e(Kge,xv),e(xv,Zge),e(Zge,NVo),e(xv,jVo),e(xv,fV),e(fV,DVo),e(xv,GVo),e(ao,OVo),e(ao,$v),e($v,VVo),e($v,ehe),e(ehe,XVo),e($v,zVo),e($v,ohe),e(ohe,QVo),e(ao,WVo),M(kv,ao,null),b(f,mIe,_),b(f,ed,_),e(ed,Sv),e(Sv,rhe),M(Ty,rhe,null),e(ed,HVo),e(ed,the),e(the,UVo),b(f,gIe,_),b(f,jo,_),M(My,jo,null),e(jo,JVo),e(jo,od),e(od,YVo),e(od,mV),e(mV,KVo),e(od,ZVo),e(od,gV),e(gV,eXo),e(od,oXo),e(jo,rXo),e(jo,Ey),e(Ey,tXo),e(Ey,ahe),e(ahe,aXo),e(Ey,nXo),e(jo,sXo),e(jo,mt),M(Cy,mt,null),e(mt,lXo),e(mt,nhe),e(nhe,iXo),e(mt,dXo),e(mt,rd),e(rd,cXo),e(rd,she),e(she,fXo),e(rd,mXo),e(rd,hV),e(hV,gXo),e(rd,hXo),e(mt,pXo),M(Rv,mt,null),e(jo,uXo),e(jo,no),M(wy,no,null),e(no,_Xo),e(no,lhe),e(lhe,bXo),e(no,vXo),e(no,qa),e(qa,FXo),e(qa,ihe),e(ihe,TXo),e(qa,MXo),e(qa,dhe),e(dhe,EXo),e(qa,CXo),e(qa,che),e(che,wXo),e(qa,AXo),e(no,yXo),e(no,Fe),e(Fe,Bv),e(Bv,fhe),e(fhe,LXo),e(Bv,xXo),e(Bv,pV),e(pV,$Xo),e(Bv,kXo),e(Fe,SXo),e(Fe,Pv),e(Pv,mhe),e(mhe,RXo),e(Pv,BXo),e(Pv,uV),e(uV,PXo),e(Pv,IXo),e(Fe,qXo),e(Fe,Iv),e(Iv,ghe),e(ghe,NXo),e(Iv,jXo),e(Iv,_V),e(_V,DXo),e(Iv,GXo),e(Fe,OXo),e(Fe,Rs),e(Rs,hhe),e(hhe,VXo),e(Rs,XXo),e(Rs,bV),e(bV,zXo),e(Rs,QXo),e(Rs,vV),e(vV,WXo),e(Rs,HXo),e(Fe,UXo),e(Fe,qv),e(qv,phe),e(phe,JXo),e(qv,YXo),e(qv,FV),e(FV,KXo),e(qv,ZXo),e(Fe,ezo),e(Fe,gt),e(gt,uhe),e(uhe,ozo),e(gt,rzo),e(gt,TV),e(TV,tzo),e(gt,azo),e(gt,MV),e(MV,nzo),e(gt,szo),e(gt,EV),e(EV,lzo),e(gt,izo),e(Fe,dzo),e(Fe,Nv),e(Nv,_he),e(_he,czo),e(Nv,fzo),e(Nv,CV),e(CV,mzo),e(Nv,gzo),e(Fe,hzo),e(Fe,jv),e(jv,bhe),e(bhe,pzo),e(jv,uzo),e(jv,wV),e(wV,_zo),e(jv,bzo),e(Fe,vzo),e(Fe,Dv),e(Dv,vhe),e(vhe,Fzo),e(Dv,Tzo),e(Dv,AV),e(AV,Mzo),e(Dv,Ezo),e(Fe,Czo),e(Fe,Gv),e(Gv,Fhe),e(Fhe,wzo),e(Gv,Azo),e(Gv,yV),e(yV,yzo),e(Gv,Lzo),e(Fe,xzo),e(Fe,Ov),e(Ov,The),e(The,$zo),e(Ov,kzo),e(Ov,LV),e(LV,Szo),e(Ov,Rzo),e(Fe,Bzo),e(Fe,Vv),e(Vv,Mhe),e(Mhe,Pzo),e(Vv,Izo),e(Vv,xV),e(xV,qzo),e(Vv,Nzo),e(Fe,jzo),e(Fe,Xv),e(Xv,Ehe),e(Ehe,Dzo),e(Xv,Gzo),e(Xv,$V),e($V,Ozo),e(Xv,Vzo),e(no,Xzo),e(no,zv),e(zv,zzo),e(zv,Che),e(Che,Qzo),e(zv,Wzo),e(zv,whe),e(whe,Hzo),e(no,Uzo),M(Qv,no,null),b(f,hIe,_),b(f,td,_),e(td,Wv),e(Wv,Ahe),M(Ay,Ahe,null),e(td,Jzo),e(td,yhe),e(yhe,Yzo),b(f,pIe,_),b(f,Do,_),M(yy,Do,null),e(Do,Kzo),e(Do,ad),e(ad,Zzo),e(ad,kV),e(kV,eQo),e(ad,oQo),e(ad,SV),e(SV,rQo),e(ad,tQo),e(Do,aQo),e(Do,Ly),e(Ly,nQo),e(Ly,Lhe),e(Lhe,sQo),e(Ly,lQo),e(Do,iQo),e(Do,ht),M(xy,ht,null),e(ht,dQo),e(ht,xhe),e(xhe,cQo),e(ht,fQo),e(ht,nd),e(nd,mQo),e(nd,$he),e($he,gQo),e(nd,hQo),e(nd,RV),e(RV,pQo),e(nd,uQo),e(ht,_Qo),M(Hv,ht,null),e(Do,bQo),e(Do,so),M($y,so,null),e(so,vQo),e(so,khe),e(khe,FQo),e(so,TQo),e(so,Na),e(Na,MQo),e(Na,She),e(She,EQo),e(Na,CQo),e(Na,Rhe),e(Rhe,wQo),e(Na,AQo),e(Na,Bhe),e(Bhe,yQo),e(Na,LQo),e(so,xQo),e(so,Phe),e(Phe,Uv),e(Uv,Ihe),e(Ihe,$Qo),e(Uv,kQo),e(Uv,BV),e(BV,SQo),e(Uv,RQo),e(so,BQo),e(so,Jv),e(Jv,PQo),e(Jv,qhe),e(qhe,IQo),e(Jv,qQo),e(Jv,Nhe),e(Nhe,NQo),e(so,jQo),M(Yv,so,null),b(f,uIe,_),b(f,sd,_),e(sd,Kv),e(Kv,jhe),M(ky,jhe,null),e(sd,DQo),e(sd,Dhe),e(Dhe,GQo),b(f,_Ie,_),b(f,Go,_),M(Sy,Go,null),e(Go,OQo),e(Go,ld),e(ld,VQo),e(ld,PV),e(PV,XQo),e(ld,zQo),e(ld,IV),e(IV,QQo),e(ld,WQo),e(Go,HQo),e(Go,Ry),e(Ry,UQo),e(Ry,Ghe),e(Ghe,JQo),e(Ry,YQo),e(Go,KQo),e(Go,pt),M(By,pt,null),e(pt,ZQo),e(pt,Ohe),e(Ohe,eWo),e(pt,oWo),e(pt,id),e(id,rWo),e(id,Vhe),e(Vhe,tWo),e(id,aWo),e(id,qV),e(qV,nWo),e(id,sWo),e(pt,lWo),M(Zv,pt,null),e(Go,iWo),e(Go,lo),M(Py,lo,null),e(lo,dWo),e(lo,Xhe),e(Xhe,cWo),e(lo,fWo),e(lo,ja),e(ja,mWo),e(ja,zhe),e(zhe,gWo),e(ja,hWo),e(ja,Qhe),e(Qhe,pWo),e(ja,uWo),e(ja,Whe),e(Whe,_Wo),e(ja,bWo),e(lo,vWo),e(lo,Ne),e(Ne,eF),e(eF,Hhe),e(Hhe,FWo),e(eF,TWo),e(eF,NV),e(NV,MWo),e(eF,EWo),e(Ne,CWo),e(Ne,oF),e(oF,Uhe),e(Uhe,wWo),e(oF,AWo),e(oF,jV),e(jV,yWo),e(oF,LWo),e(Ne,xWo),e(Ne,rF),e(rF,Jhe),e(Jhe,$Wo),e(rF,kWo),e(rF,DV),e(DV,SWo),e(rF,RWo),e(Ne,BWo),e(Ne,tF),e(tF,Yhe),e(Yhe,PWo),e(tF,IWo),e(tF,GV),e(GV,qWo),e(tF,NWo),e(Ne,jWo),e(Ne,aF),e(aF,Khe),e(Khe,DWo),e(aF,GWo),e(aF,OV),e(OV,OWo),e(aF,VWo),e(Ne,XWo),e(Ne,nF),e(nF,Zhe),e(Zhe,zWo),e(nF,QWo),e(nF,VV),e(VV,WWo),e(nF,HWo),e(Ne,UWo),e(Ne,sF),e(sF,epe),e(epe,JWo),e(sF,YWo),e(sF,XV),e(XV,KWo),e(sF,ZWo),e(Ne,eHo),e(Ne,lF),e(lF,ope),e(ope,oHo),e(lF,rHo),e(lF,zV),e(zV,tHo),e(lF,aHo),e(lo,nHo),e(lo,iF),e(iF,sHo),e(iF,rpe),e(rpe,lHo),e(iF,iHo),e(iF,tpe),e(tpe,dHo),e(lo,cHo),M(dF,lo,null),b(f,bIe,_),b(f,dd,_),e(dd,cF),e(cF,ape),M(Iy,ape,null),e(dd,fHo),e(dd,npe),e(npe,mHo),b(f,vIe,_),b(f,Oo,_),M(qy,Oo,null),e(Oo,gHo),e(Oo,cd),e(cd,hHo),e(cd,QV),e(QV,pHo),e(cd,uHo),e(cd,WV),e(WV,_Ho),e(cd,bHo),e(Oo,vHo),e(Oo,Ny),e(Ny,FHo),e(Ny,spe),e(spe,THo),e(Ny,MHo),e(Oo,EHo),e(Oo,ut),M(jy,ut,null),e(ut,CHo),e(ut,lpe),e(lpe,wHo),e(ut,AHo),e(ut,fd),e(fd,yHo),e(fd,ipe),e(ipe,LHo),e(fd,xHo),e(fd,HV),e(HV,$Ho),e(fd,kHo),e(ut,SHo),M(fF,ut,null),e(Oo,RHo),e(Oo,io),M(Dy,io,null),e(io,BHo),e(io,dpe),e(dpe,PHo),e(io,IHo),e(io,Da),e(Da,qHo),e(Da,cpe),e(cpe,NHo),e(Da,jHo),e(Da,fpe),e(fpe,DHo),e(Da,GHo),e(Da,mpe),e(mpe,OHo),e(Da,VHo),e(io,XHo),e(io,Ga),e(Ga,mF),e(mF,gpe),e(gpe,zHo),e(mF,QHo),e(mF,UV),e(UV,WHo),e(mF,HHo),e(Ga,UHo),e(Ga,gF),e(gF,hpe),e(hpe,JHo),e(gF,YHo),e(gF,JV),e(JV,KHo),e(gF,ZHo),e(Ga,eUo),e(Ga,hF),e(hF,ppe),e(ppe,oUo),e(hF,rUo),e(hF,YV),e(YV,tUo),e(hF,aUo),e(Ga,nUo),e(Ga,pF),e(pF,upe),e(upe,sUo),e(pF,lUo),e(pF,KV),e(KV,iUo),e(pF,dUo),e(io,cUo),e(io,uF),e(uF,fUo),e(uF,_pe),e(_pe,mUo),e(uF,gUo),e(uF,bpe),e(bpe,hUo),e(io,pUo),M(_F,io,null),b(f,FIe,_),b(f,md,_),e(md,bF),e(bF,vpe),M(Gy,vpe,null),e(md,uUo),e(md,Fpe),e(Fpe,_Uo),b(f,TIe,_),b(f,Vo,_),M(Oy,Vo,null),e(Vo,bUo),e(Vo,gd),e(gd,vUo),e(gd,ZV),e(ZV,FUo),e(gd,TUo),e(gd,eX),e(eX,MUo),e(gd,EUo),e(Vo,CUo),e(Vo,Vy),e(Vy,wUo),e(Vy,Tpe),e(Tpe,AUo),e(Vy,yUo),e(Vo,LUo),e(Vo,_t),M(Xy,_t,null),e(_t,xUo),e(_t,Mpe),e(Mpe,$Uo),e(_t,kUo),e(_t,hd),e(hd,SUo),e(hd,Epe),e(Epe,RUo),e(hd,BUo),e(hd,oX),e(oX,PUo),e(hd,IUo),e(_t,qUo),M(vF,_t,null),e(Vo,NUo),e(Vo,co),M(zy,co,null),e(co,jUo),e(co,Cpe),e(Cpe,DUo),e(co,GUo),e(co,Oa),e(Oa,OUo),e(Oa,wpe),e(wpe,VUo),e(Oa,XUo),e(Oa,Ape),e(Ape,zUo),e(Oa,QUo),e(Oa,ype),e(ype,WUo),e(Oa,HUo),e(co,UUo),e(co,je),e(je,FF),e(FF,Lpe),e(Lpe,JUo),e(FF,YUo),e(FF,rX),e(rX,KUo),e(FF,ZUo),e(je,eJo),e(je,TF),e(TF,xpe),e(xpe,oJo),e(TF,rJo),e(TF,tX),e(tX,tJo),e(TF,aJo),e(je,nJo),e(je,MF),e(MF,$pe),e($pe,sJo),e(MF,lJo),e(MF,aX),e(aX,iJo),e(MF,dJo),e(je,cJo),e(je,EF),e(EF,kpe),e(kpe,fJo),e(EF,mJo),e(EF,nX),e(nX,gJo),e(EF,hJo),e(je,pJo),e(je,CF),e(CF,Spe),e(Spe,uJo),e(CF,_Jo),e(CF,sX),e(sX,bJo),e(CF,vJo),e(je,FJo),e(je,wF),e(wF,Rpe),e(Rpe,TJo),e(wF,MJo),e(wF,lX),e(lX,EJo),e(wF,CJo),e(je,wJo),e(je,AF),e(AF,Bpe),e(Bpe,AJo),e(AF,yJo),e(AF,iX),e(iX,LJo),e(AF,xJo),e(je,$Jo),e(je,yF),e(yF,Ppe),e(Ppe,kJo),e(yF,SJo),e(yF,dX),e(dX,RJo),e(yF,BJo),e(co,PJo),e(co,LF),e(LF,IJo),e(LF,Ipe),e(Ipe,qJo),e(LF,NJo),e(LF,qpe),e(qpe,jJo),e(co,DJo),M(xF,co,null),b(f,MIe,_),b(f,pd,_),e(pd,$F),e($F,Npe),M(Qy,Npe,null),e(pd,GJo),e(pd,jpe),e(jpe,OJo),b(f,EIe,_),b(f,Xo,_),M(Wy,Xo,null),e(Xo,VJo),e(Xo,ud),e(ud,XJo),e(ud,cX),e(cX,zJo),e(ud,QJo),e(ud,fX),e(fX,WJo),e(ud,HJo),e(Xo,UJo),e(Xo,Hy),e(Hy,JJo),e(Hy,Dpe),e(Dpe,YJo),e(Hy,KJo),e(Xo,ZJo),e(Xo,bt),M(Uy,bt,null),e(bt,eYo),e(bt,Gpe),e(Gpe,oYo),e(bt,rYo),e(bt,_d),e(_d,tYo),e(_d,Ope),e(Ope,aYo),e(_d,nYo),e(_d,mX),e(mX,sYo),e(_d,lYo),e(bt,iYo),M(kF,bt,null),e(Xo,dYo),e(Xo,fo),M(Jy,fo,null),e(fo,cYo),e(fo,Vpe),e(Vpe,fYo),e(fo,mYo),e(fo,Va),e(Va,gYo),e(Va,Xpe),e(Xpe,hYo),e(Va,pYo),e(Va,zpe),e(zpe,uYo),e(Va,_Yo),e(Va,Qpe),e(Qpe,bYo),e(Va,vYo),e(fo,FYo),e(fo,Yy),e(Yy,SF),e(SF,Wpe),e(Wpe,TYo),e(SF,MYo),e(SF,gX),e(gX,EYo),e(SF,CYo),e(Yy,wYo),e(Yy,RF),e(RF,Hpe),e(Hpe,AYo),e(RF,yYo),e(RF,hX),e(hX,LYo),e(RF,xYo),e(fo,$Yo),e(fo,BF),e(BF,kYo),e(BF,Upe),e(Upe,SYo),e(BF,RYo),e(BF,Jpe),e(Jpe,BYo),e(fo,PYo),M(PF,fo,null),b(f,CIe,_),b(f,bd,_),e(bd,IF),e(IF,Ype),M(Ky,Ype,null),e(bd,IYo),e(bd,Kpe),e(Kpe,qYo),b(f,wIe,_),b(f,zo,_),M(Zy,zo,null),e(zo,NYo),e(zo,vd),e(vd,jYo),e(vd,pX),e(pX,DYo),e(vd,GYo),e(vd,uX),e(uX,OYo),e(vd,VYo),e(zo,XYo),e(zo,eL),e(eL,zYo),e(eL,Zpe),e(Zpe,QYo),e(eL,WYo),e(zo,HYo),e(zo,vt),M(oL,vt,null),e(vt,UYo),e(vt,eue),e(eue,JYo),e(vt,YYo),e(vt,Fd),e(Fd,KYo),e(Fd,oue),e(oue,ZYo),e(Fd,eKo),e(Fd,_X),e(_X,oKo),e(Fd,rKo),e(vt,tKo),M(qF,vt,null),e(zo,aKo),e(zo,mo),M(rL,mo,null),e(mo,nKo),e(mo,rue),e(rue,sKo),e(mo,lKo),e(mo,Xa),e(Xa,iKo),e(Xa,tue),e(tue,dKo),e(Xa,cKo),e(Xa,aue),e(aue,fKo),e(Xa,mKo),e(Xa,nue),e(nue,gKo),e(Xa,hKo),e(mo,pKo),e(mo,za),e(za,NF),e(NF,sue),e(sue,uKo),e(NF,_Ko),e(NF,bX),e(bX,bKo),e(NF,vKo),e(za,FKo),e(za,jF),e(jF,lue),e(lue,TKo),e(jF,MKo),e(jF,vX),e(vX,EKo),e(jF,CKo),e(za,wKo),e(za,DF),e(DF,iue),e(iue,AKo),e(DF,yKo),e(DF,FX),e(FX,LKo),e(DF,xKo),e(za,$Ko),e(za,GF),e(GF,due),e(due,kKo),e(GF,SKo),e(GF,TX),e(TX,RKo),e(GF,BKo),e(mo,PKo),e(mo,OF),e(OF,IKo),e(OF,cue),e(cue,qKo),e(OF,NKo),e(OF,fue),e(fue,jKo),e(mo,DKo),M(VF,mo,null),b(f,AIe,_),b(f,Td,_),e(Td,XF),e(XF,mue),M(tL,mue,null),e(Td,GKo),e(Td,gue),e(gue,OKo),b(f,yIe,_),b(f,Qo,_),M(aL,Qo,null),e(Qo,VKo),e(Qo,Md),e(Md,XKo),e(Md,MX),e(MX,zKo),e(Md,QKo),e(Md,EX),e(EX,WKo),e(Md,HKo),e(Qo,UKo),e(Qo,nL),e(nL,JKo),e(nL,hue),e(hue,YKo),e(nL,KKo),e(Qo,ZKo),e(Qo,Ft),M(sL,Ft,null),e(Ft,eZo),e(Ft,pue),e(pue,oZo),e(Ft,rZo),e(Ft,Ed),e(Ed,tZo),e(Ed,uue),e(uue,aZo),e(Ed,nZo),e(Ed,CX),e(CX,sZo),e(Ed,lZo),e(Ft,iZo),M(zF,Ft,null),e(Qo,dZo),e(Qo,go),M(lL,go,null),e(go,cZo),e(go,_ue),e(_ue,fZo),e(go,mZo),e(go,Qa),e(Qa,gZo),e(Qa,bue),e(bue,hZo),e(Qa,pZo),e(Qa,vue),e(vue,uZo),e(Qa,_Zo),e(Qa,Fue),e(Fue,bZo),e(Qa,vZo),e(go,FZo),e(go,Cd),e(Cd,QF),e(QF,Tue),e(Tue,TZo),e(QF,MZo),e(QF,wX),e(wX,EZo),e(QF,CZo),e(Cd,wZo),e(Cd,WF),e(WF,Mue),e(Mue,AZo),e(WF,yZo),e(WF,AX),e(AX,LZo),e(WF,xZo),e(Cd,$Zo),e(Cd,HF),e(HF,Eue),e(Eue,kZo),e(HF,SZo),e(HF,yX),e(yX,RZo),e(HF,BZo),e(go,PZo),e(go,UF),e(UF,IZo),e(UF,Cue),e(Cue,qZo),e(UF,NZo),e(UF,wue),e(wue,jZo),e(go,DZo),M(JF,go,null),b(f,LIe,_),b(f,wd,_),e(wd,YF),e(YF,Aue),M(iL,Aue,null),e(wd,GZo),e(wd,yue),e(yue,OZo),b(f,xIe,_),b(f,Wo,_),M(dL,Wo,null),e(Wo,VZo),e(Wo,Ad),e(Ad,XZo),e(Ad,LX),e(LX,zZo),e(Ad,QZo),e(Ad,xX),e(xX,WZo),e(Ad,HZo),e(Wo,UZo),e(Wo,cL),e(cL,JZo),e(cL,Lue),e(Lue,YZo),e(cL,KZo),e(Wo,ZZo),e(Wo,Tt),M(fL,Tt,null),e(Tt,eer),e(Tt,xue),e(xue,oer),e(Tt,rer),e(Tt,yd),e(yd,ter),e(yd,$ue),e($ue,aer),e(yd,ner),e(yd,$X),e($X,ser),e(yd,ler),e(Tt,ier),M(KF,Tt,null),e(Wo,der),e(Wo,ho),M(mL,ho,null),e(ho,cer),e(ho,kue),e(kue,fer),e(ho,mer),e(ho,Wa),e(Wa,ger),e(Wa,Sue),e(Sue,her),e(Wa,per),e(Wa,Rue),e(Rue,uer),e(Wa,_er),e(Wa,Bue),e(Bue,ber),e(Wa,ver),e(ho,Fer),e(ho,gL),e(gL,ZF),e(ZF,Pue),e(Pue,Ter),e(ZF,Mer),e(ZF,kX),e(kX,Eer),e(ZF,Cer),e(gL,wer),e(gL,e0),e(e0,Iue),e(Iue,Aer),e(e0,yer),e(e0,SX),e(SX,Ler),e(e0,xer),e(ho,$er),e(ho,o0),e(o0,ker),e(o0,que),e(que,Ser),e(o0,Rer),e(o0,Nue),e(Nue,Ber),e(ho,Per),M(r0,ho,null),b(f,$Ie,_),b(f,Ld,_),e(Ld,t0),e(t0,jue),M(hL,jue,null),e(Ld,Ier),e(Ld,Due),e(Due,qer),b(f,kIe,_),b(f,Ho,_),M(pL,Ho,null),e(Ho,Ner),e(Ho,xd),e(xd,jer),e(xd,RX),e(RX,Der),e(xd,Ger),e(xd,BX),e(BX,Oer),e(xd,Ver),e(Ho,Xer),e(Ho,uL),e(uL,zer),e(uL,Gue),e(Gue,Qer),e(uL,Wer),e(Ho,Her),e(Ho,Mt),M(_L,Mt,null),e(Mt,Uer),e(Mt,Oue),e(Oue,Jer),e(Mt,Yer),e(Mt,$d),e($d,Ker),e($d,Vue),e(Vue,Zer),e($d,eor),e($d,PX),e(PX,oor),e($d,ror),e(Mt,tor),M(a0,Mt,null),e(Ho,aor),e(Ho,po),M(bL,po,null),e(po,nor),e(po,Xue),e(Xue,sor),e(po,lor),e(po,Ha),e(Ha,ior),e(Ha,zue),e(zue,dor),e(Ha,cor),e(Ha,Que),e(Que,mor),e(Ha,gor),e(Ha,Wue),e(Wue,hor),e(Ha,por),e(po,uor),e(po,Hue),e(Hue,n0),e(n0,Uue),e(Uue,_or),e(n0,bor),e(n0,IX),e(IX,vor),e(n0,For),e(po,Tor),e(po,s0),e(s0,Mor),e(s0,Jue),e(Jue,Eor),e(s0,Cor),e(s0,Yue),e(Yue,wor),e(po,Aor),M(l0,po,null),b(f,SIe,_),b(f,kd,_),e(kd,i0),e(i0,Kue),M(vL,Kue,null),e(kd,yor),e(kd,Zue),e(Zue,Lor),b(f,RIe,_),b(f,Uo,_),M(FL,Uo,null),e(Uo,xor),e(Uo,Sd),e(Sd,$or),e(Sd,qX),e(qX,kor),e(Sd,Sor),e(Sd,NX),e(NX,Ror),e(Sd,Bor),e(Uo,Por),e(Uo,TL),e(TL,Ior),e(TL,e_e),e(e_e,qor),e(TL,Nor),e(Uo,jor),e(Uo,Et),M(ML,Et,null),e(Et,Dor),e(Et,o_e),e(o_e,Gor),e(Et,Oor),e(Et,Rd),e(Rd,Vor),e(Rd,r_e),e(r_e,Xor),e(Rd,zor),e(Rd,jX),e(jX,Qor),e(Rd,Wor),e(Et,Hor),M(d0,Et,null),e(Uo,Uor),e(Uo,uo),M(EL,uo,null),e(uo,Jor),e(uo,t_e),e(t_e,Yor),e(uo,Kor),e(uo,Ua),e(Ua,Zor),e(Ua,a_e),e(a_e,err),e(Ua,orr),e(Ua,n_e),e(n_e,rrr),e(Ua,trr),e(Ua,s_e),e(s_e,arr),e(Ua,nrr),e(uo,srr),e(uo,Ja),e(Ja,c0),e(c0,l_e),e(l_e,lrr),e(c0,irr),e(c0,DX),e(DX,drr),e(c0,crr),e(Ja,frr),e(Ja,f0),e(f0,i_e),e(i_e,mrr),e(f0,grr),e(f0,GX),e(GX,hrr),e(f0,prr),e(Ja,urr),e(Ja,m0),e(m0,d_e),e(d_e,_rr),e(m0,brr),e(m0,OX),e(OX,vrr),e(m0,Frr),e(Ja,Trr),e(Ja,g0),e(g0,c_e),e(c_e,Mrr),e(g0,Err),e(g0,VX),e(VX,Crr),e(g0,wrr),e(uo,Arr),e(uo,h0),e(h0,yrr),e(h0,f_e),e(f_e,Lrr),e(h0,xrr),e(h0,m_e),e(m_e,$rr),e(uo,krr),M(p0,uo,null),b(f,BIe,_),b(f,Bd,_),e(Bd,u0),e(u0,g_e),M(CL,g_e,null),e(Bd,Srr),e(Bd,h_e),e(h_e,Rrr),b(f,PIe,_),b(f,Jo,_),M(wL,Jo,null),e(Jo,Brr),e(Jo,Pd),e(Pd,Prr),e(Pd,XX),e(XX,Irr),e(Pd,qrr),e(Pd,zX),e(zX,Nrr),e(Pd,jrr),e(Jo,Drr),e(Jo,AL),e(AL,Grr),e(AL,p_e),e(p_e,Orr),e(AL,Vrr),e(Jo,Xrr),e(Jo,Ct),M(yL,Ct,null),e(Ct,zrr),e(Ct,u_e),e(u_e,Qrr),e(Ct,Wrr),e(Ct,Id),e(Id,Hrr),e(Id,__e),e(__e,Urr),e(Id,Jrr),e(Id,QX),e(QX,Yrr),e(Id,Krr),e(Ct,Zrr),M(_0,Ct,null),e(Jo,etr),e(Jo,_o),M(LL,_o,null),e(_o,otr),e(_o,b_e),e(b_e,rtr),e(_o,ttr),e(_o,Ya),e(Ya,atr),e(Ya,v_e),e(v_e,ntr),e(Ya,str),e(Ya,F_e),e(F_e,ltr),e(Ya,itr),e(Ya,T_e),e(T_e,dtr),e(Ya,ctr),e(_o,ftr),e(_o,M_e),e(M_e,b0),e(b0,E_e),e(E_e,mtr),e(b0,gtr),e(b0,WX),e(WX,htr),e(b0,ptr),e(_o,utr),e(_o,v0),e(v0,_tr),e(v0,C_e),e(C_e,btr),e(v0,vtr),e(v0,w_e),e(w_e,Ftr),e(_o,Ttr),M(F0,_o,null),b(f,IIe,_),b(f,qd,_),e(qd,T0),e(T0,A_e),M(xL,A_e,null),e(qd,Mtr),e(qd,y_e),e(y_e,Etr),b(f,qIe,_),b(f,Yo,_),M($L,Yo,null),e(Yo,Ctr),e(Yo,Nd),e(Nd,wtr),e(Nd,HX),e(HX,Atr),e(Nd,ytr),e(Nd,UX),e(UX,Ltr),e(Nd,xtr),e(Yo,$tr),e(Yo,kL),e(kL,ktr),e(kL,L_e),e(L_e,Str),e(kL,Rtr),e(Yo,Btr),e(Yo,wt),M(SL,wt,null),e(wt,Ptr),e(wt,x_e),e(x_e,Itr),e(wt,qtr),e(wt,jd),e(jd,Ntr),e(jd,$_e),e($_e,jtr),e(jd,Dtr),e(jd,JX),e(JX,Gtr),e(jd,Otr),e(wt,Vtr),M(M0,wt,null),e(Yo,Xtr),e(Yo,wr),M(RL,wr,null),e(wr,ztr),e(wr,k_e),e(k_e,Qtr),e(wr,Wtr),e(wr,Ka),e(Ka,Htr),e(Ka,S_e),e(S_e,Utr),e(Ka,Jtr),e(Ka,R_e),e(R_e,Ytr),e(Ka,Ktr),e(Ka,B_e),e(B_e,Ztr),e(Ka,ear),e(wr,oar),e(wr,N),e(N,E0),e(E0,P_e),e(P_e,rar),e(E0,tar),e(E0,YX),e(YX,aar),e(E0,nar),e(N,sar),e(N,C0),e(C0,I_e),e(I_e,lar),e(C0,iar),e(C0,KX),e(KX,dar),e(C0,car),e(N,far),e(N,w0),e(w0,q_e),e(q_e,mar),e(w0,gar),e(w0,ZX),e(ZX,har),e(w0,par),e(N,uar),e(N,A0),e(A0,N_e),e(N_e,_ar),e(A0,bar),e(A0,ez),e(ez,Far),e(A0,Tar),e(N,Mar),e(N,y0),e(y0,j_e),e(j_e,Ear),e(y0,Car),e(y0,oz),e(oz,war),e(y0,Aar),e(N,yar),e(N,L0),e(L0,D_e),e(D_e,Lar),e(L0,xar),e(L0,rz),e(rz,$ar),e(L0,kar),e(N,Sar),e(N,x0),e(x0,G_e),e(G_e,Rar),e(x0,Bar),e(x0,tz),e(tz,Par),e(x0,Iar),e(N,qar),e(N,$0),e($0,O_e),e(O_e,Nar),e($0,jar),e($0,az),e(az,Dar),e($0,Gar),e(N,Oar),e(N,k0),e(k0,V_e),e(V_e,Var),e(k0,Xar),e(k0,nz),e(nz,zar),e(k0,Qar),e(N,War),e(N,S0),e(S0,X_e),e(X_e,Har),e(S0,Uar),e(S0,sz),e(sz,Jar),e(S0,Yar),e(N,Kar),e(N,R0),e(R0,z_e),e(z_e,Zar),e(R0,enr),e(R0,lz),e(lz,onr),e(R0,rnr),e(N,tnr),e(N,B0),e(B0,Q_e),e(Q_e,anr),e(B0,nnr),e(B0,iz),e(iz,snr),e(B0,lnr),e(N,inr),e(N,P0),e(P0,W_e),e(W_e,dnr),e(P0,cnr),e(P0,dz),e(dz,fnr),e(P0,mnr),e(N,gnr),e(N,I0),e(I0,H_e),e(H_e,hnr),e(I0,pnr),e(I0,cz),e(cz,unr),e(I0,_nr),e(N,bnr),e(N,q0),e(q0,U_e),e(U_e,vnr),e(q0,Fnr),e(q0,fz),e(fz,Tnr),e(q0,Mnr),e(N,Enr),e(N,N0),e(N0,J_e),e(J_e,Cnr),e(N0,wnr),e(N0,mz),e(mz,Anr),e(N0,ynr),e(N,Lnr),e(N,j0),e(j0,Y_e),e(Y_e,xnr),e(j0,$nr),e(j0,gz),e(gz,knr),e(j0,Snr),e(N,Rnr),e(N,Bs),e(Bs,K_e),e(K_e,Bnr),e(Bs,Pnr),e(Bs,hz),e(hz,Inr),e(Bs,qnr),e(Bs,pz),e(pz,Nnr),e(Bs,jnr),e(N,Dnr),e(N,D0),e(D0,Z_e),e(Z_e,Gnr),e(D0,Onr),e(D0,uz),e(uz,Vnr),e(D0,Xnr),e(N,znr),e(N,G0),e(G0,e2e),e(e2e,Qnr),e(G0,Wnr),e(G0,_z),e(_z,Hnr),e(G0,Unr),e(N,Jnr),e(N,O0),e(O0,o2e),e(o2e,Ynr),e(O0,Knr),e(O0,bz),e(bz,Znr),e(O0,esr),e(N,osr),e(N,V0),e(V0,r2e),e(r2e,rsr),e(V0,tsr),e(V0,vz),e(vz,asr),e(V0,nsr),e(N,ssr),e(N,X0),e(X0,t2e),e(t2e,lsr),e(X0,isr),e(X0,Fz),e(Fz,dsr),e(X0,csr),e(N,fsr),e(N,z0),e(z0,a2e),e(a2e,msr),e(z0,gsr),e(z0,Tz),e(Tz,hsr),e(z0,psr),e(N,usr),e(N,Q0),e(Q0,n2e),e(n2e,_sr),e(Q0,bsr),e(Q0,Mz),e(Mz,vsr),e(Q0,Fsr),e(N,Tsr),e(N,W0),e(W0,s2e),e(s2e,Msr),e(W0,Esr),e(W0,Ez),e(Ez,Csr),e(W0,wsr),e(N,Asr),e(N,H0),e(H0,l2e),e(l2e,ysr),e(H0,Lsr),e(H0,Cz),e(Cz,xsr),e(H0,$sr),e(N,ksr),e(N,U0),e(U0,i2e),e(i2e,Ssr),e(U0,Rsr),e(U0,wz),e(wz,Bsr),e(U0,Psr),e(N,Isr),e(N,J0),e(J0,d2e),e(d2e,qsr),e(J0,Nsr),e(J0,Az),e(Az,jsr),e(J0,Dsr),e(N,Gsr),e(N,Y0),e(Y0,c2e),e(c2e,Osr),e(Y0,Vsr),e(Y0,yz),e(yz,Xsr),e(Y0,zsr),e(N,Qsr),e(N,K0),e(K0,f2e),e(f2e,Wsr),e(K0,Hsr),e(K0,Lz),e(Lz,Usr),e(K0,Jsr),e(N,Ysr),e(N,Z0),e(Z0,m2e),e(m2e,Ksr),e(Z0,Zsr),e(Z0,xz),e(xz,elr),e(Z0,olr),e(N,rlr),e(N,eT),e(eT,g2e),e(g2e,tlr),e(eT,alr),e(eT,$z),e($z,nlr),e(eT,slr),e(N,llr),e(N,oT),e(oT,h2e),e(h2e,ilr),e(oT,dlr),e(oT,kz),e(kz,clr),e(oT,flr),e(N,mlr),e(N,rT),e(rT,p2e),e(p2e,glr),e(rT,hlr),e(rT,Sz),e(Sz,plr),e(rT,ulr),e(N,_lr),e(N,tT),e(tT,u2e),e(u2e,blr),e(tT,vlr),e(tT,Rz),e(Rz,Flr),e(tT,Tlr),e(N,Mlr),e(N,aT),e(aT,_2e),e(_2e,Elr),e(aT,Clr),e(aT,Bz),e(Bz,wlr),e(aT,Alr),e(N,ylr),e(N,nT),e(nT,b2e),e(b2e,Llr),e(nT,xlr),e(nT,Pz),e(Pz,$lr),e(nT,klr),e(N,Slr),e(N,sT),e(sT,v2e),e(v2e,Rlr),e(sT,Blr),e(sT,Iz),e(Iz,Plr),e(sT,Ilr),e(N,qlr),e(N,lT),e(lT,F2e),e(F2e,Nlr),e(lT,jlr),e(lT,qz),e(qz,Dlr),e(lT,Glr),e(N,Olr),e(N,iT),e(iT,T2e),e(T2e,Vlr),e(iT,Xlr),e(iT,Nz),e(Nz,zlr),e(iT,Qlr),e(N,Wlr),e(N,dT),e(dT,M2e),e(M2e,Hlr),e(dT,Ulr),e(dT,jz),e(jz,Jlr),e(dT,Ylr),e(N,Klr),e(N,cT),e(cT,E2e),e(E2e,Zlr),e(cT,eir),e(cT,Dz),e(Dz,oir),e(cT,rir),e(N,tir),e(N,fT),e(fT,C2e),e(C2e,air),e(fT,nir),e(fT,Gz),e(Gz,sir),e(fT,lir),e(N,iir),e(N,mT),e(mT,w2e),e(w2e,dir),e(mT,cir),e(mT,Oz),e(Oz,fir),e(mT,mir),e(wr,gir),M(gT,wr,null),b(f,NIe,_),b(f,Dd,_),e(Dd,hT),e(hT,A2e),M(BL,A2e,null),e(Dd,hir),e(Dd,y2e),e(y2e,pir),b(f,jIe,_),b(f,Ko,_),M(PL,Ko,null),e(Ko,uir),e(Ko,Gd),e(Gd,_ir),e(Gd,Vz),e(Vz,bir),e(Gd,vir),e(Gd,Xz),e(Xz,Fir),e(Gd,Tir),e(Ko,Mir),e(Ko,IL),e(IL,Eir),e(IL,L2e),e(L2e,Cir),e(IL,wir),e(Ko,Air),e(Ko,At),M(qL,At,null),e(At,yir),e(At,x2e),e(x2e,Lir),e(At,xir),e(At,Od),e(Od,$ir),e(Od,$2e),e($2e,kir),e(Od,Sir),e(Od,zz),e(zz,Rir),e(Od,Bir),e(At,Pir),M(pT,At,null),e(Ko,Iir),e(Ko,Ar),M(NL,Ar,null),e(Ar,qir),e(Ar,k2e),e(k2e,Nir),e(Ar,jir),e(Ar,Za),e(Za,Dir),e(Za,S2e),e(S2e,Gir),e(Za,Oir),e(Za,R2e),e(R2e,Vir),e(Za,Xir),e(Za,B2e),e(B2e,zir),e(Za,Qir),e(Ar,Wir),e(Ar,se),e(se,uT),e(uT,P2e),e(P2e,Hir),e(uT,Uir),e(uT,Qz),e(Qz,Jir),e(uT,Yir),e(se,Kir),e(se,_T),e(_T,I2e),e(I2e,Zir),e(_T,edr),e(_T,Wz),e(Wz,odr),e(_T,rdr),e(se,tdr),e(se,bT),e(bT,q2e),e(q2e,adr),e(bT,ndr),e(bT,Hz),e(Hz,sdr),e(bT,ldr),e(se,idr),e(se,vT),e(vT,N2e),e(N2e,ddr),e(vT,cdr),e(vT,Uz),e(Uz,fdr),e(vT,mdr),e(se,gdr),e(se,FT),e(FT,j2e),e(j2e,hdr),e(FT,pdr),e(FT,Jz),e(Jz,udr),e(FT,_dr),e(se,bdr),e(se,TT),e(TT,D2e),e(D2e,vdr),e(TT,Fdr),e(TT,Yz),e(Yz,Tdr),e(TT,Mdr),e(se,Edr),e(se,MT),e(MT,G2e),e(G2e,Cdr),e(MT,wdr),e(MT,Kz),e(Kz,Adr),e(MT,ydr),e(se,Ldr),e(se,ET),e(ET,O2e),e(O2e,xdr),e(ET,$dr),e(ET,Zz),e(Zz,kdr),e(ET,Sdr),e(se,Rdr),e(se,CT),e(CT,V2e),e(V2e,Bdr),e(CT,Pdr),e(CT,eQ),e(eQ,Idr),e(CT,qdr),e(se,Ndr),e(se,wT),e(wT,X2e),e(X2e,jdr),e(wT,Ddr),e(wT,oQ),e(oQ,Gdr),e(wT,Odr),e(se,Vdr),e(se,AT),e(AT,z2e),e(z2e,Xdr),e(AT,zdr),e(AT,rQ),e(rQ,Qdr),e(AT,Wdr),e(se,Hdr),e(se,yT),e(yT,Q2e),e(Q2e,Udr),e(yT,Jdr),e(yT,tQ),e(tQ,Ydr),e(yT,Kdr),e(se,Zdr),e(se,LT),e(LT,W2e),e(W2e,ecr),e(LT,ocr),e(LT,aQ),e(aQ,rcr),e(LT,tcr),e(se,acr),e(se,xT),e(xT,H2e),e(H2e,ncr),e(xT,scr),e(xT,nQ),e(nQ,lcr),e(xT,icr),e(se,dcr),e(se,$T),e($T,U2e),e(U2e,ccr),e($T,fcr),e($T,sQ),e(sQ,mcr),e($T,gcr),e(se,hcr),e(se,kT),e(kT,J2e),e(J2e,pcr),e(kT,ucr),e(kT,lQ),e(lQ,_cr),e(kT,bcr),e(se,vcr),e(se,ST),e(ST,Y2e),e(Y2e,Fcr),e(ST,Tcr),e(ST,iQ),e(iQ,Mcr),e(ST,Ecr),e(se,Ccr),e(se,RT),e(RT,K2e),e(K2e,wcr),e(RT,Acr),e(RT,dQ),e(dQ,ycr),e(RT,Lcr),e(se,xcr),e(se,BT),e(BT,Z2e),e(Z2e,$cr),e(BT,kcr),e(BT,cQ),e(cQ,Scr),e(BT,Rcr),e(se,Bcr),e(se,PT),e(PT,e1e),e(e1e,Pcr),e(PT,Icr),e(PT,fQ),e(fQ,qcr),e(PT,Ncr),e(se,jcr),e(se,IT),e(IT,o1e),e(o1e,Dcr),e(IT,Gcr),e(IT,mQ),e(mQ,Ocr),e(IT,Vcr),e(se,Xcr),e(se,qT),e(qT,r1e),e(r1e,zcr),e(qT,Qcr),e(qT,gQ),e(gQ,Wcr),e(qT,Hcr),e(se,Ucr),e(se,NT),e(NT,t1e),e(t1e,Jcr),e(NT,Ycr),e(NT,hQ),e(hQ,Kcr),e(NT,Zcr),e(Ar,efr),M(jT,Ar,null),b(f,DIe,_),b(f,Vd,_),e(Vd,DT),e(DT,a1e),M(jL,a1e,null),e(Vd,ofr),e(Vd,n1e),e(n1e,rfr),b(f,GIe,_),b(f,Zo,_),M(DL,Zo,null),e(Zo,tfr),e(Zo,Xd),e(Xd,afr),e(Xd,pQ),e(pQ,nfr),e(Xd,sfr),e(Xd,uQ),e(uQ,lfr),e(Xd,ifr),e(Zo,dfr),e(Zo,GL),e(GL,cfr),e(GL,s1e),e(s1e,ffr),e(GL,mfr),e(Zo,gfr),e(Zo,yt),M(OL,yt,null),e(yt,hfr),e(yt,l1e),e(l1e,pfr),e(yt,ufr),e(yt,zd),e(zd,_fr),e(zd,i1e),e(i1e,bfr),e(zd,vfr),e(zd,_Q),e(_Q,Ffr),e(zd,Tfr),e(yt,Mfr),M(GT,yt,null),e(Zo,Efr),e(Zo,yr),M(VL,yr,null),e(yr,Cfr),e(yr,d1e),e(d1e,wfr),e(yr,Afr),e(yr,en),e(en,yfr),e(en,c1e),e(c1e,Lfr),e(en,xfr),e(en,f1e),e(f1e,$fr),e(en,kfr),e(en,m1e),e(m1e,Sfr),e(en,Rfr),e(yr,Bfr),e(yr,Te),e(Te,OT),e(OT,g1e),e(g1e,Pfr),e(OT,Ifr),e(OT,bQ),e(bQ,qfr),e(OT,Nfr),e(Te,jfr),e(Te,VT),e(VT,h1e),e(h1e,Dfr),e(VT,Gfr),e(VT,vQ),e(vQ,Ofr),e(VT,Vfr),e(Te,Xfr),e(Te,XT),e(XT,p1e),e(p1e,zfr),e(XT,Qfr),e(XT,FQ),e(FQ,Wfr),e(XT,Hfr),e(Te,Ufr),e(Te,zT),e(zT,u1e),e(u1e,Jfr),e(zT,Yfr),e(zT,TQ),e(TQ,Kfr),e(zT,Zfr),e(Te,emr),e(Te,QT),e(QT,_1e),e(_1e,omr),e(QT,rmr),e(QT,MQ),e(MQ,tmr),e(QT,amr),e(Te,nmr),e(Te,WT),e(WT,b1e),e(b1e,smr),e(WT,lmr),e(WT,EQ),e(EQ,imr),e(WT,dmr),e(Te,cmr),e(Te,HT),e(HT,v1e),e(v1e,fmr),e(HT,mmr),e(HT,CQ),e(CQ,gmr),e(HT,hmr),e(Te,pmr),e(Te,UT),e(UT,F1e),e(F1e,umr),e(UT,_mr),e(UT,wQ),e(wQ,bmr),e(UT,vmr),e(Te,Fmr),e(Te,JT),e(JT,T1e),e(T1e,Tmr),e(JT,Mmr),e(JT,AQ),e(AQ,Emr),e(JT,Cmr),e(Te,wmr),e(Te,YT),e(YT,M1e),e(M1e,Amr),e(YT,ymr),e(YT,yQ),e(yQ,Lmr),e(YT,xmr),e(Te,$mr),e(Te,KT),e(KT,E1e),e(E1e,kmr),e(KT,Smr),e(KT,LQ),e(LQ,Rmr),e(KT,Bmr),e(Te,Pmr),e(Te,ZT),e(ZT,C1e),e(C1e,Imr),e(ZT,qmr),e(ZT,xQ),e(xQ,Nmr),e(ZT,jmr),e(yr,Dmr),M(e7,yr,null),b(f,OIe,_),b(f,Qd,_),e(Qd,o7),e(o7,w1e),M(XL,w1e,null),e(Qd,Gmr),e(Qd,A1e),e(A1e,Omr),b(f,VIe,_),b(f,er,_),M(zL,er,null),e(er,Vmr),e(er,Wd),e(Wd,Xmr),e(Wd,$Q),e($Q,zmr),e(Wd,Qmr),e(Wd,kQ),e(kQ,Wmr),e(Wd,Hmr),e(er,Umr),e(er,QL),e(QL,Jmr),e(QL,y1e),e(y1e,Ymr),e(QL,Kmr),e(er,Zmr),e(er,Lt),M(WL,Lt,null),e(Lt,egr),e(Lt,L1e),e(L1e,ogr),e(Lt,rgr),e(Lt,Hd),e(Hd,tgr),e(Hd,x1e),e(x1e,agr),e(Hd,ngr),e(Hd,SQ),e(SQ,sgr),e(Hd,lgr),e(Lt,igr),M(r7,Lt,null),e(er,dgr),e(er,Lr),M(HL,Lr,null),e(Lr,cgr),e(Lr,$1e),e($1e,fgr),e(Lr,mgr),e(Lr,on),e(on,ggr),e(on,k1e),e(k1e,hgr),e(on,pgr),e(on,S1e),e(S1e,ugr),e(on,_gr),e(on,R1e),e(R1e,bgr),e(on,vgr),e(Lr,Fgr),e(Lr,Ud),e(Ud,t7),e(t7,B1e),e(B1e,Tgr),e(t7,Mgr),e(t7,RQ),e(RQ,Egr),e(t7,Cgr),e(Ud,wgr),e(Ud,a7),e(a7,P1e),e(P1e,Agr),e(a7,ygr),e(a7,BQ),e(BQ,Lgr),e(a7,xgr),e(Ud,$gr),e(Ud,n7),e(n7,I1e),e(I1e,kgr),e(n7,Sgr),e(n7,PQ),e(PQ,Rgr),e(n7,Bgr),e(Lr,Pgr),M(s7,Lr,null),b(f,XIe,_),b(f,Jd,_),e(Jd,l7),e(l7,q1e),M(UL,q1e,null),e(Jd,Igr),e(Jd,N1e),e(N1e,qgr),b(f,zIe,_),b(f,or,_),M(JL,or,null),e(or,Ngr),e(or,Yd),e(Yd,jgr),e(Yd,IQ),e(IQ,Dgr),e(Yd,Ggr),e(Yd,qQ),e(qQ,Ogr),e(Yd,Vgr),e(or,Xgr),e(or,YL),e(YL,zgr),e(YL,j1e),e(j1e,Qgr),e(YL,Wgr),e(or,Hgr),e(or,xt),M(KL,xt,null),e(xt,Ugr),e(xt,D1e),e(D1e,Jgr),e(xt,Ygr),e(xt,Kd),e(Kd,Kgr),e(Kd,G1e),e(G1e,Zgr),e(Kd,ehr),e(Kd,NQ),e(NQ,ohr),e(Kd,rhr),e(xt,thr),M(i7,xt,null),e(or,ahr),e(or,xr),M(ZL,xr,null),e(xr,nhr),e(xr,O1e),e(O1e,shr),e(xr,lhr),e(xr,rn),e(rn,ihr),e(rn,V1e),e(V1e,dhr),e(rn,chr),e(rn,X1e),e(X1e,fhr),e(rn,mhr),e(rn,z1e),e(z1e,ghr),e(rn,hhr),e(xr,phr),e(xr,ie),e(ie,d7),e(d7,Q1e),e(Q1e,uhr),e(d7,_hr),e(d7,jQ),e(jQ,bhr),e(d7,vhr),e(ie,Fhr),e(ie,c7),e(c7,W1e),e(W1e,Thr),e(c7,Mhr),e(c7,DQ),e(DQ,Ehr),e(c7,Chr),e(ie,whr),e(ie,f7),e(f7,H1e),e(H1e,Ahr),e(f7,yhr),e(f7,GQ),e(GQ,Lhr),e(f7,xhr),e(ie,$hr),e(ie,m7),e(m7,U1e),e(U1e,khr),e(m7,Shr),e(m7,OQ),e(OQ,Rhr),e(m7,Bhr),e(ie,Phr),e(ie,g7),e(g7,J1e),e(J1e,Ihr),e(g7,qhr),e(g7,VQ),e(VQ,Nhr),e(g7,jhr),e(ie,Dhr),e(ie,h7),e(h7,Y1e),e(Y1e,Ghr),e(h7,Ohr),e(h7,XQ),e(XQ,Vhr),e(h7,Xhr),e(ie,zhr),e(ie,p7),e(p7,K1e),e(K1e,Qhr),e(p7,Whr),e(p7,zQ),e(zQ,Hhr),e(p7,Uhr),e(ie,Jhr),e(ie,u7),e(u7,Z1e),e(Z1e,Yhr),e(u7,Khr),e(u7,QQ),e(QQ,Zhr),e(u7,epr),e(ie,opr),e(ie,_7),e(_7,ebe),e(ebe,rpr),e(_7,tpr),e(_7,WQ),e(WQ,apr),e(_7,npr),e(ie,spr),e(ie,b7),e(b7,obe),e(obe,lpr),e(b7,ipr),e(b7,HQ),e(HQ,dpr),e(b7,cpr),e(ie,fpr),e(ie,v7),e(v7,rbe),e(rbe,mpr),e(v7,gpr),e(v7,UQ),e(UQ,hpr),e(v7,ppr),e(ie,upr),e(ie,F7),e(F7,tbe),e(tbe,_pr),e(F7,bpr),e(F7,JQ),e(JQ,vpr),e(F7,Fpr),e(ie,Tpr),e(ie,T7),e(T7,abe),e(abe,Mpr),e(T7,Epr),e(T7,YQ),e(YQ,Cpr),e(T7,wpr),e(ie,Apr),e(ie,M7),e(M7,nbe),e(nbe,ypr),e(M7,Lpr),e(M7,KQ),e(KQ,xpr),e(M7,$pr),e(ie,kpr),e(ie,E7),e(E7,sbe),e(sbe,Spr),e(E7,Rpr),e(E7,ZQ),e(ZQ,Bpr),e(E7,Ppr),e(ie,Ipr),e(ie,C7),e(C7,lbe),e(lbe,qpr),e(C7,Npr),e(C7,eW),e(eW,jpr),e(C7,Dpr),e(ie,Gpr),e(ie,w7),e(w7,ibe),e(ibe,Opr),e(w7,Vpr),e(w7,oW),e(oW,Xpr),e(w7,zpr),e(ie,Qpr),e(ie,A7),e(A7,dbe),e(dbe,Wpr),e(A7,Hpr),e(A7,rW),e(rW,Upr),e(A7,Jpr),e(ie,Ypr),e(ie,y7),e(y7,cbe),e(cbe,Kpr),e(y7,Zpr),e(y7,tW),e(tW,eur),e(y7,our),e(ie,rur),e(ie,L7),e(L7,fbe),e(fbe,tur),e(L7,aur),e(L7,aW),e(aW,nur),e(L7,sur),e(xr,lur),M(x7,xr,null),b(f,QIe,_),b(f,Zd,_),e(Zd,$7),e($7,mbe),M(e8,mbe,null),e(Zd,iur),e(Zd,gbe),e(gbe,dur),b(f,WIe,_),b(f,rr,_),M(o8,rr,null),e(rr,cur),e(rr,ec),e(ec,fur),e(ec,nW),e(nW,mur),e(ec,gur),e(ec,sW),e(sW,hur),e(ec,pur),e(rr,uur),e(rr,r8),e(r8,_ur),e(r8,hbe),e(hbe,bur),e(r8,vur),e(rr,Fur),e(rr,$t),M(t8,$t,null),e($t,Tur),e($t,pbe),e(pbe,Mur),e($t,Eur),e($t,oc),e(oc,Cur),e(oc,ube),e(ube,wur),e(oc,Aur),e(oc,lW),e(lW,yur),e(oc,Lur),e($t,xur),M(k7,$t,null),e(rr,$ur),e(rr,$r),M(a8,$r,null),e($r,kur),e($r,_be),e(_be,Sur),e($r,Rur),e($r,tn),e(tn,Bur),e(tn,bbe),e(bbe,Pur),e(tn,Iur),e(tn,vbe),e(vbe,qur),e(tn,Nur),e(tn,Fbe),e(Fbe,jur),e(tn,Dur),e($r,Gur),e($r,ye),e(ye,S7),e(S7,Tbe),e(Tbe,Our),e(S7,Vur),e(S7,iW),e(iW,Xur),e(S7,zur),e(ye,Qur),e(ye,R7),e(R7,Mbe),e(Mbe,Wur),e(R7,Hur),e(R7,dW),e(dW,Uur),e(R7,Jur),e(ye,Yur),e(ye,B7),e(B7,Ebe),e(Ebe,Kur),e(B7,Zur),e(B7,cW),e(cW,e_r),e(B7,o_r),e(ye,r_r),e(ye,P7),e(P7,Cbe),e(Cbe,t_r),e(P7,a_r),e(P7,fW),e(fW,n_r),e(P7,s_r),e(ye,l_r),e(ye,I7),e(I7,wbe),e(wbe,i_r),e(I7,d_r),e(I7,mW),e(mW,c_r),e(I7,f_r),e(ye,m_r),e(ye,q7),e(q7,Abe),e(Abe,g_r),e(q7,h_r),e(q7,gW),e(gW,p_r),e(q7,u_r),e(ye,__r),e(ye,N7),e(N7,ybe),e(ybe,b_r),e(N7,v_r),e(N7,hW),e(hW,F_r),e(N7,T_r),e(ye,M_r),e(ye,j7),e(j7,Lbe),e(Lbe,E_r),e(j7,C_r),e(j7,pW),e(pW,w_r),e(j7,A_r),e(ye,y_r),e(ye,D7),e(D7,xbe),e(xbe,L_r),e(D7,x_r),e(D7,uW),e(uW,$_r),e(D7,k_r),e(ye,S_r),e(ye,G7),e(G7,$be),e($be,R_r),e(G7,B_r),e(G7,_W),e(_W,P_r),e(G7,I_r),e($r,q_r),M(O7,$r,null),b(f,HIe,_),b(f,rc,_),e(rc,V7),e(V7,kbe),M(n8,kbe,null),e(rc,N_r),e(rc,Sbe),e(Sbe,j_r),b(f,UIe,_),b(f,tr,_),M(s8,tr,null),e(tr,D_r),e(tr,tc),e(tc,G_r),e(tc,bW),e(bW,O_r),e(tc,V_r),e(tc,vW),e(vW,X_r),e(tc,z_r),e(tr,Q_r),e(tr,l8),e(l8,W_r),e(l8,Rbe),e(Rbe,H_r),e(l8,U_r),e(tr,J_r),e(tr,kt),M(i8,kt,null),e(kt,Y_r),e(kt,Bbe),e(Bbe,K_r),e(kt,Z_r),e(kt,ac),e(ac,e2r),e(ac,Pbe),e(Pbe,o2r),e(ac,r2r),e(ac,FW),e(FW,t2r),e(ac,a2r),e(kt,n2r),M(X7,kt,null),e(tr,s2r),e(tr,kr),M(d8,kr,null),e(kr,l2r),e(kr,Ibe),e(Ibe,i2r),e(kr,d2r),e(kr,an),e(an,c2r),e(an,qbe),e(qbe,f2r),e(an,m2r),e(an,Nbe),e(Nbe,g2r),e(an,h2r),e(an,jbe),e(jbe,p2r),e(an,u2r),e(kr,_2r),e(kr,Z),e(Z,z7),e(z7,Dbe),e(Dbe,b2r),e(z7,v2r),e(z7,TW),e(TW,F2r),e(z7,T2r),e(Z,M2r),e(Z,Q7),e(Q7,Gbe),e(Gbe,E2r),e(Q7,C2r),e(Q7,MW),e(MW,w2r),e(Q7,A2r),e(Z,y2r),e(Z,W7),e(W7,Obe),e(Obe,L2r),e(W7,x2r),e(W7,EW),e(EW,$2r),e(W7,k2r),e(Z,S2r),e(Z,H7),e(H7,Vbe),e(Vbe,R2r),e(H7,B2r),e(H7,CW),e(CW,P2r),e(H7,I2r),e(Z,q2r),e(Z,U7),e(U7,Xbe),e(Xbe,N2r),e(U7,j2r),e(U7,wW),e(wW,D2r),e(U7,G2r),e(Z,O2r),e(Z,J7),e(J7,zbe),e(zbe,V2r),e(J7,X2r),e(J7,AW),e(AW,z2r),e(J7,Q2r),e(Z,W2r),e(Z,Y7),e(Y7,Qbe),e(Qbe,H2r),e(Y7,U2r),e(Y7,yW),e(yW,J2r),e(Y7,Y2r),e(Z,K2r),e(Z,K7),e(K7,Wbe),e(Wbe,Z2r),e(K7,e1r),e(K7,LW),e(LW,o1r),e(K7,r1r),e(Z,t1r),e(Z,Z7),e(Z7,Hbe),e(Hbe,a1r),e(Z7,n1r),e(Z7,xW),e(xW,s1r),e(Z7,l1r),e(Z,i1r),e(Z,eM),e(eM,Ube),e(Ube,d1r),e(eM,c1r),e(eM,$W),e($W,f1r),e(eM,m1r),e(Z,g1r),e(Z,oM),e(oM,Jbe),e(Jbe,h1r),e(oM,p1r),e(oM,kW),e(kW,u1r),e(oM,_1r),e(Z,b1r),e(Z,rM),e(rM,Ybe),e(Ybe,v1r),e(rM,F1r),e(rM,SW),e(SW,T1r),e(rM,M1r),e(Z,E1r),e(Z,tM),e(tM,Kbe),e(Kbe,C1r),e(tM,w1r),e(tM,RW),e(RW,A1r),e(tM,y1r),e(Z,L1r),e(Z,aM),e(aM,Zbe),e(Zbe,x1r),e(aM,$1r),e(aM,BW),e(BW,k1r),e(aM,S1r),e(Z,R1r),e(Z,nM),e(nM,e5e),e(e5e,B1r),e(nM,P1r),e(nM,PW),e(PW,I1r),e(nM,q1r),e(Z,N1r),e(Z,sM),e(sM,o5e),e(o5e,j1r),e(sM,D1r),e(sM,IW),e(IW,G1r),e(sM,O1r),e(Z,V1r),e(Z,lM),e(lM,r5e),e(r5e,X1r),e(lM,z1r),e(lM,qW),e(qW,Q1r),e(lM,W1r),e(Z,H1r),e(Z,iM),e(iM,t5e),e(t5e,U1r),e(iM,J1r),e(iM,NW),e(NW,Y1r),e(iM,K1r),e(Z,Z1r),e(Z,dM),e(dM,a5e),e(a5e,ebr),e(dM,obr),e(dM,jW),e(jW,rbr),e(dM,tbr),e(Z,abr),e(Z,cM),e(cM,n5e),e(n5e,nbr),e(cM,sbr),e(cM,DW),e(DW,lbr),e(cM,ibr),e(Z,dbr),e(Z,fM),e(fM,s5e),e(s5e,cbr),e(fM,fbr),e(fM,GW),e(GW,mbr),e(fM,gbr),e(Z,hbr),e(Z,mM),e(mM,l5e),e(l5e,pbr),e(mM,ubr),e(mM,OW),e(OW,_br),e(mM,bbr),e(Z,vbr),e(Z,gM),e(gM,i5e),e(i5e,Fbr),e(gM,Tbr),e(gM,VW),e(VW,Mbr),e(gM,Ebr),e(Z,Cbr),e(Z,hM),e(hM,d5e),e(d5e,wbr),e(hM,Abr),e(hM,XW),e(XW,ybr),e(hM,Lbr),e(Z,xbr),e(Z,pM),e(pM,c5e),e(c5e,$br),e(pM,kbr),e(pM,zW),e(zW,Sbr),e(pM,Rbr),e(Z,Bbr),e(Z,uM),e(uM,f5e),e(f5e,Pbr),e(uM,Ibr),e(uM,QW),e(QW,qbr),e(uM,Nbr),e(kr,jbr),M(_M,kr,null),b(f,JIe,_),b(f,nc,_),e(nc,bM),e(bM,m5e),M(c8,m5e,null),e(nc,Dbr),e(nc,g5e),e(g5e,Gbr),b(f,YIe,_),b(f,ar,_),M(f8,ar,null),e(ar,Obr),e(ar,sc),e(sc,Vbr),e(sc,WW),e(WW,Xbr),e(sc,zbr),e(sc,HW),e(HW,Qbr),e(sc,Wbr),e(ar,Hbr),e(ar,m8),e(m8,Ubr),e(m8,h5e),e(h5e,Jbr),e(m8,Ybr),e(ar,Kbr),e(ar,St),M(g8,St,null),e(St,Zbr),e(St,p5e),e(p5e,e5r),e(St,o5r),e(St,lc),e(lc,r5r),e(lc,u5e),e(u5e,t5r),e(lc,a5r),e(lc,UW),e(UW,n5r),e(lc,s5r),e(St,l5r),M(vM,St,null),e(ar,i5r),e(ar,Sr),M(h8,Sr,null),e(Sr,d5r),e(Sr,_5e),e(_5e,c5r),e(Sr,f5r),e(Sr,nn),e(nn,m5r),e(nn,b5e),e(b5e,g5r),e(nn,h5r),e(nn,v5e),e(v5e,p5r),e(nn,u5r),e(nn,F5e),e(F5e,_5r),e(nn,b5r),e(Sr,v5r),e(Sr,he),e(he,FM),e(FM,T5e),e(T5e,F5r),e(FM,T5r),e(FM,JW),e(JW,M5r),e(FM,E5r),e(he,C5r),e(he,TM),e(TM,M5e),e(M5e,w5r),e(TM,A5r),e(TM,YW),e(YW,y5r),e(TM,L5r),e(he,x5r),e(he,MM),e(MM,E5e),e(E5e,$5r),e(MM,k5r),e(MM,KW),e(KW,S5r),e(MM,R5r),e(he,B5r),e(he,EM),e(EM,C5e),e(C5e,P5r),e(EM,I5r),e(EM,ZW),e(ZW,q5r),e(EM,N5r),e(he,j5r),e(he,CM),e(CM,w5e),e(w5e,D5r),e(CM,G5r),e(CM,eH),e(eH,O5r),e(CM,V5r),e(he,X5r),e(he,wM),e(wM,A5e),e(A5e,z5r),e(wM,Q5r),e(wM,oH),e(oH,W5r),e(wM,H5r),e(he,U5r),e(he,AM),e(AM,y5e),e(y5e,J5r),e(AM,Y5r),e(AM,rH),e(rH,K5r),e(AM,Z5r),e(he,evr),e(he,yM),e(yM,L5e),e(L5e,ovr),e(yM,rvr),e(yM,tH),e(tH,tvr),e(yM,avr),e(he,nvr),e(he,LM),e(LM,x5e),e(x5e,svr),e(LM,lvr),e(LM,aH),e(aH,ivr),e(LM,dvr),e(he,cvr),e(he,xM),e(xM,$5e),e($5e,fvr),e(xM,mvr),e(xM,nH),e(nH,gvr),e(xM,hvr),e(he,pvr),e(he,$M),e($M,k5e),e(k5e,uvr),e($M,_vr),e($M,sH),e(sH,bvr),e($M,vvr),e(he,Fvr),e(he,kM),e(kM,S5e),e(S5e,Tvr),e(kM,Mvr),e(kM,lH),e(lH,Evr),e(kM,Cvr),e(he,wvr),e(he,SM),e(SM,R5e),e(R5e,Avr),e(SM,yvr),e(SM,iH),e(iH,Lvr),e(SM,xvr),e(he,$vr),e(he,RM),e(RM,B5e),e(B5e,kvr),e(RM,Svr),e(RM,dH),e(dH,Rvr),e(RM,Bvr),e(he,Pvr),e(he,BM),e(BM,P5e),e(P5e,Ivr),e(BM,qvr),e(BM,cH),e(cH,Nvr),e(BM,jvr),e(he,Dvr),e(he,PM),e(PM,I5e),e(I5e,Gvr),e(PM,Ovr),e(PM,fH),e(fH,Vvr),e(PM,Xvr),e(he,zvr),e(he,IM),e(IM,q5e),e(q5e,Qvr),e(IM,Wvr),e(IM,mH),e(mH,Hvr),e(IM,Uvr),e(Sr,Jvr),M(qM,Sr,null),b(f,KIe,_),b(f,ic,_),e(ic,NM),e(NM,N5e),M(p8,N5e,null),e(ic,Yvr),e(ic,j5e),e(j5e,Kvr),b(f,ZIe,_),b(f,nr,_),M(u8,nr,null),e(nr,Zvr),e(nr,dc),e(dc,eFr),e(dc,gH),e(gH,oFr),e(dc,rFr),e(dc,hH),e(hH,tFr),e(dc,aFr),e(nr,nFr),e(nr,_8),e(_8,sFr),e(_8,D5e),e(D5e,lFr),e(_8,iFr),e(nr,dFr),e(nr,Rt),M(b8,Rt,null),e(Rt,cFr),e(Rt,G5e),e(G5e,fFr),e(Rt,mFr),e(Rt,cc),e(cc,gFr),e(cc,O5e),e(O5e,hFr),e(cc,pFr),e(cc,pH),e(pH,uFr),e(cc,_Fr),e(Rt,bFr),M(jM,Rt,null),e(nr,vFr),e(nr,Rr),M(v8,Rr,null),e(Rr,FFr),e(Rr,V5e),e(V5e,TFr),e(Rr,MFr),e(Rr,sn),e(sn,EFr),e(sn,X5e),e(X5e,CFr),e(sn,wFr),e(sn,z5e),e(z5e,AFr),e(sn,yFr),e(sn,Q5e),e(Q5e,LFr),e(sn,xFr),e(Rr,$Fr),e(Rr,F8),e(F8,DM),e(DM,W5e),e(W5e,kFr),e(DM,SFr),e(DM,uH),e(uH,RFr),e(DM,BFr),e(F8,PFr),e(F8,GM),e(GM,H5e),e(H5e,IFr),e(GM,qFr),e(GM,_H),e(_H,NFr),e(GM,jFr),e(Rr,DFr),M(OM,Rr,null),b(f,eqe,_),b(f,fc,_),e(fc,VM),e(VM,U5e),M(T8,U5e,null),e(fc,GFr),e(fc,J5e),e(J5e,OFr),b(f,oqe,_),b(f,sr,_),M(M8,sr,null),e(sr,VFr),e(sr,mc),e(mc,XFr),e(mc,bH),e(bH,zFr),e(mc,QFr),e(mc,vH),e(vH,WFr),e(mc,HFr),e(sr,UFr),e(sr,E8),e(E8,JFr),e(E8,Y5e),e(Y5e,YFr),e(E8,KFr),e(sr,ZFr),e(sr,Bt),M(C8,Bt,null),e(Bt,e0r),e(Bt,K5e),e(K5e,o0r),e(Bt,r0r),e(Bt,gc),e(gc,t0r),e(gc,Z5e),e(Z5e,a0r),e(gc,n0r),e(gc,FH),e(FH,s0r),e(gc,l0r),e(Bt,i0r),M(XM,Bt,null),e(sr,d0r),e(sr,Br),M(w8,Br,null),e(Br,c0r),e(Br,eve),e(eve,f0r),e(Br,m0r),e(Br,ln),e(ln,g0r),e(ln,ove),e(ove,h0r),e(ln,p0r),e(ln,rve),e(rve,u0r),e(ln,_0r),e(ln,tve),e(tve,b0r),e(ln,v0r),e(Br,F0r),e(Br,ave),e(ave,zM),e(zM,nve),e(nve,T0r),e(zM,M0r),e(zM,TH),e(TH,E0r),e(zM,C0r),e(Br,w0r),M(QM,Br,null),b(f,rqe,_),b(f,hc,_),e(hc,WM),e(WM,sve),M(A8,sve,null),e(hc,A0r),e(hc,lve),e(lve,y0r),b(f,tqe,_),b(f,lr,_),M(y8,lr,null),e(lr,L0r),e(lr,pc),e(pc,x0r),e(pc,MH),e(MH,$0r),e(pc,k0r),e(pc,EH),e(EH,S0r),e(pc,R0r),e(lr,B0r),e(lr,L8),e(L8,P0r),e(L8,ive),e(ive,I0r),e(L8,q0r),e(lr,N0r),e(lr,Pt),M(x8,Pt,null),e(Pt,j0r),e(Pt,dve),e(dve,D0r),e(Pt,G0r),e(Pt,uc),e(uc,O0r),e(uc,cve),e(cve,V0r),e(uc,X0r),e(uc,CH),e(CH,z0r),e(uc,Q0r),e(Pt,W0r),M(HM,Pt,null),e(lr,H0r),e(lr,Pr),M($8,Pr,null),e(Pr,U0r),e(Pr,fve),e(fve,J0r),e(Pr,Y0r),e(Pr,dn),e(dn,K0r),e(dn,mve),e(mve,Z0r),e(dn,eTr),e(dn,gve),e(gve,oTr),e(dn,rTr),e(dn,hve),e(hve,tTr),e(dn,aTr),e(Pr,nTr),e(Pr,de),e(de,UM),e(UM,pve),e(pve,sTr),e(UM,lTr),e(UM,wH),e(wH,iTr),e(UM,dTr),e(de,cTr),e(de,JM),e(JM,uve),e(uve,fTr),e(JM,mTr),e(JM,AH),e(AH,gTr),e(JM,hTr),e(de,pTr),e(de,YM),e(YM,_ve),e(_ve,uTr),e(YM,_Tr),e(YM,yH),e(yH,bTr),e(YM,vTr),e(de,FTr),e(de,KM),e(KM,bve),e(bve,TTr),e(KM,MTr),e(KM,LH),e(LH,ETr),e(KM,CTr),e(de,wTr),e(de,ZM),e(ZM,vve),e(vve,ATr),e(ZM,yTr),e(ZM,xH),e(xH,LTr),e(ZM,xTr),e(de,$Tr),e(de,e4),e(e4,Fve),e(Fve,kTr),e(e4,STr),e(e4,$H),e($H,RTr),e(e4,BTr),e(de,PTr),e(de,o4),e(o4,Tve),e(Tve,ITr),e(o4,qTr),e(o4,kH),e(kH,NTr),e(o4,jTr),e(de,DTr),e(de,r4),e(r4,Mve),e(Mve,GTr),e(r4,OTr),e(r4,SH),e(SH,VTr),e(r4,XTr),e(de,zTr),e(de,t4),e(t4,Eve),e(Eve,QTr),e(t4,WTr),e(t4,RH),e(RH,HTr),e(t4,UTr),e(de,JTr),e(de,a4),e(a4,Cve),e(Cve,YTr),e(a4,KTr),e(a4,BH),e(BH,ZTr),e(a4,e7r),e(de,o7r),e(de,n4),e(n4,wve),e(wve,r7r),e(n4,t7r),e(n4,PH),e(PH,a7r),e(n4,n7r),e(de,s7r),e(de,s4),e(s4,Ave),e(Ave,l7r),e(s4,i7r),e(s4,IH),e(IH,d7r),e(s4,c7r),e(de,f7r),e(de,l4),e(l4,yve),e(yve,m7r),e(l4,g7r),e(l4,qH),e(qH,h7r),e(l4,p7r),e(de,u7r),e(de,i4),e(i4,Lve),e(Lve,_7r),e(i4,b7r),e(i4,NH),e(NH,v7r),e(i4,F7r),e(de,T7r),e(de,d4),e(d4,xve),e(xve,M7r),e(d4,E7r),e(d4,jH),e(jH,C7r),e(d4,w7r),e(de,A7r),e(de,c4),e(c4,$ve),e($ve,y7r),e(c4,L7r),e(c4,DH),e(DH,x7r),e(c4,$7r),e(de,k7r),e(de,f4),e(f4,kve),e(kve,S7r),e(f4,R7r),e(f4,GH),e(GH,B7r),e(f4,P7r),e(de,I7r),e(de,m4),e(m4,Sve),e(Sve,q7r),e(m4,N7r),e(m4,OH),e(OH,j7r),e(m4,D7r),e(de,G7r),e(de,g4),e(g4,Rve),e(Rve,O7r),e(g4,V7r),e(g4,VH),e(VH,X7r),e(g4,z7r),e(de,Q7r),e(de,h4),e(h4,Bve),e(Bve,W7r),e(h4,H7r),e(h4,XH),e(XH,U7r),e(h4,J7r),e(Pr,Y7r),M(p4,Pr,null),b(f,aqe,_),b(f,_c,_),e(_c,u4),e(u4,Pve),M(k8,Pve,null),e(_c,K7r),e(_c,Ive),e(Ive,Z7r),b(f,nqe,_),b(f,ir,_),M(S8,ir,null),e(ir,eMr),e(ir,bc),e(bc,oMr),e(bc,zH),e(zH,rMr),e(bc,tMr),e(bc,QH),e(QH,aMr),e(bc,nMr),e(ir,sMr),e(ir,R8),e(R8,lMr),e(R8,qve),e(qve,iMr),e(R8,dMr),e(ir,cMr),e(ir,It),M(B8,It,null),e(It,fMr),e(It,Nve),e(Nve,mMr),e(It,gMr),e(It,vc),e(vc,hMr),e(vc,jve),e(jve,pMr),e(vc,uMr),e(vc,WH),e(WH,_Mr),e(vc,bMr),e(It,vMr),M(_4,It,null),e(ir,FMr),e(ir,Ir),M(P8,Ir,null),e(Ir,TMr),e(Ir,Dve),e(Dve,MMr),e(Ir,EMr),e(Ir,cn),e(cn,CMr),e(cn,Gve),e(Gve,wMr),e(cn,AMr),e(cn,Ove),e(Ove,yMr),e(cn,LMr),e(cn,Vve),e(Vve,xMr),e(cn,$Mr),e(Ir,kMr),e(Ir,ce),e(ce,b4),e(b4,Xve),e(Xve,SMr),e(b4,RMr),e(b4,HH),e(HH,BMr),e(b4,PMr),e(ce,IMr),e(ce,v4),e(v4,zve),e(zve,qMr),e(v4,NMr),e(v4,UH),e(UH,jMr),e(v4,DMr),e(ce,GMr),e(ce,F4),e(F4,Qve),e(Qve,OMr),e(F4,VMr),e(F4,JH),e(JH,XMr),e(F4,zMr),e(ce,QMr),e(ce,T4),e(T4,Wve),e(Wve,WMr),e(T4,HMr),e(T4,YH),e(YH,UMr),e(T4,JMr),e(ce,YMr),e(ce,M4),e(M4,Hve),e(Hve,KMr),e(M4,ZMr),e(M4,KH),e(KH,e4r),e(M4,o4r),e(ce,r4r),e(ce,E4),e(E4,Uve),e(Uve,t4r),e(E4,a4r),e(E4,ZH),e(ZH,n4r),e(E4,s4r),e(ce,l4r),e(ce,C4),e(C4,Jve),e(Jve,i4r),e(C4,d4r),e(C4,eU),e(eU,c4r),e(C4,f4r),e(ce,m4r),e(ce,w4),e(w4,Yve),e(Yve,g4r),e(w4,h4r),e(w4,oU),e(oU,p4r),e(w4,u4r),e(ce,_4r),e(ce,A4),e(A4,Kve),e(Kve,b4r),e(A4,v4r),e(A4,rU),e(rU,F4r),e(A4,T4r),e(ce,M4r),e(ce,y4),e(y4,Zve),e(Zve,E4r),e(y4,C4r),e(y4,tU),e(tU,w4r),e(y4,A4r),e(ce,y4r),e(ce,L4),e(L4,eFe),e(eFe,L4r),e(L4,x4r),e(L4,aU),e(aU,$4r),e(L4,k4r),e(ce,S4r),e(ce,x4),e(x4,oFe),e(oFe,R4r),e(x4,B4r),e(x4,nU),e(nU,P4r),e(x4,I4r),e(ce,q4r),e(ce,$4),e($4,rFe),e(rFe,N4r),e($4,j4r),e($4,sU),e(sU,D4r),e($4,G4r),e(ce,O4r),e(ce,k4),e(k4,tFe),e(tFe,V4r),e(k4,X4r),e(k4,lU),e(lU,z4r),e(k4,Q4r),e(ce,W4r),e(ce,S4),e(S4,aFe),e(aFe,H4r),e(S4,U4r),e(S4,iU),e(iU,J4r),e(S4,Y4r),e(ce,K4r),e(ce,R4),e(R4,nFe),e(nFe,Z4r),e(R4,eEr),e(R4,dU),e(dU,oEr),e(R4,rEr),e(ce,tEr),e(ce,B4),e(B4,sFe),e(sFe,aEr),e(B4,nEr),e(B4,cU),e(cU,sEr),e(B4,lEr),e(ce,iEr),e(ce,P4),e(P4,lFe),e(lFe,dEr),e(P4,cEr),e(P4,fU),e(fU,fEr),e(P4,mEr),e(ce,gEr),e(ce,I4),e(I4,iFe),e(iFe,hEr),e(I4,pEr),e(I4,mU),e(mU,uEr),e(I4,_Er),e(ce,bEr),e(ce,q4),e(q4,dFe),e(dFe,vEr),e(q4,FEr),e(q4,gU),e(gU,TEr),e(q4,MEr),e(Ir,EEr),M(N4,Ir,null),b(f,sqe,_),b(f,Fc,_),e(Fc,j4),e(j4,cFe),M(I8,cFe,null),e(Fc,CEr),e(Fc,fFe),e(fFe,wEr),b(f,lqe,_),b(f,dr,_),M(q8,dr,null),e(dr,AEr),e(dr,Tc),e(Tc,yEr),e(Tc,hU),e(hU,LEr),e(Tc,xEr),e(Tc,pU),e(pU,$Er),e(Tc,kEr),e(dr,SEr),e(dr,N8),e(N8,REr),e(N8,mFe),e(mFe,BEr),e(N8,PEr),e(dr,IEr),e(dr,qt),M(j8,qt,null),e(qt,qEr),e(qt,gFe),e(gFe,NEr),e(qt,jEr),e(qt,Mc),e(Mc,DEr),e(Mc,hFe),e(hFe,GEr),e(Mc,OEr),e(Mc,uU),e(uU,VEr),e(Mc,XEr),e(qt,zEr),M(D4,qt,null),e(dr,QEr),e(dr,qr),M(D8,qr,null),e(qr,WEr),e(qr,pFe),e(pFe,HEr),e(qr,UEr),e(qr,fn),e(fn,JEr),e(fn,uFe),e(uFe,YEr),e(fn,KEr),e(fn,_Fe),e(_Fe,ZEr),e(fn,eCr),e(fn,bFe),e(bFe,oCr),e(fn,rCr),e(qr,tCr),e(qr,vFe),e(vFe,G4),e(G4,FFe),e(FFe,aCr),e(G4,nCr),e(G4,_U),e(_U,sCr),e(G4,lCr),e(qr,iCr),M(O4,qr,null),b(f,iqe,_),b(f,Ec,_),e(Ec,V4),e(V4,TFe),M(G8,TFe,null),e(Ec,dCr),e(Ec,MFe),e(MFe,cCr),b(f,dqe,_),b(f,cr,_),M(O8,cr,null),e(cr,fCr),e(cr,Cc),e(Cc,mCr),e(Cc,bU),e(bU,gCr),e(Cc,hCr),e(Cc,vU),e(vU,pCr),e(Cc,uCr),e(cr,_Cr),e(cr,V8),e(V8,bCr),e(V8,EFe),e(EFe,vCr),e(V8,FCr),e(cr,TCr),e(cr,Nt),M(X8,Nt,null),e(Nt,MCr),e(Nt,CFe),e(CFe,ECr),e(Nt,CCr),e(Nt,wc),e(wc,wCr),e(wc,wFe),e(wFe,ACr),e(wc,yCr),e(wc,FU),e(FU,LCr),e(wc,xCr),e(Nt,$Cr),M(X4,Nt,null),e(cr,kCr),e(cr,Nr),M(z8,Nr,null),e(Nr,SCr),e(Nr,AFe),e(AFe,RCr),e(Nr,BCr),e(Nr,mn),e(mn,PCr),e(mn,yFe),e(yFe,ICr),e(mn,qCr),e(mn,LFe),e(LFe,NCr),e(mn,jCr),e(mn,xFe),e(xFe,DCr),e(mn,GCr),e(Nr,OCr),e(Nr,$Fe),e($Fe,z4),e(z4,kFe),e(kFe,VCr),e(z4,XCr),e(z4,TU),e(TU,zCr),e(z4,QCr),e(Nr,WCr),M(Q4,Nr,null),b(f,cqe,_),b(f,Ac,_),e(Ac,W4),e(W4,SFe),M(Q8,SFe,null),e(Ac,HCr),e(Ac,RFe),e(RFe,UCr),b(f,fqe,_),b(f,fr,_),M(W8,fr,null),e(fr,JCr),e(fr,yc),e(yc,YCr),e(yc,MU),e(MU,KCr),e(yc,ZCr),e(yc,EU),e(EU,e3r),e(yc,o3r),e(fr,r3r),e(fr,H8),e(H8,t3r),e(H8,BFe),e(BFe,a3r),e(H8,n3r),e(fr,s3r),e(fr,jt),M(U8,jt,null),e(jt,l3r),e(jt,PFe),e(PFe,i3r),e(jt,d3r),e(jt,Lc),e(Lc,c3r),e(Lc,IFe),e(IFe,f3r),e(Lc,m3r),e(Lc,CU),e(CU,g3r),e(Lc,h3r),e(jt,p3r),M(H4,jt,null),e(fr,u3r),e(fr,jr),M(J8,jr,null),e(jr,_3r),e(jr,qFe),e(qFe,b3r),e(jr,v3r),e(jr,gn),e(gn,F3r),e(gn,NFe),e(NFe,T3r),e(gn,M3r),e(gn,jFe),e(jFe,E3r),e(gn,C3r),e(gn,DFe),e(DFe,w3r),e(gn,A3r),e(jr,y3r),e(jr,re),e(re,U4),e(U4,GFe),e(GFe,L3r),e(U4,x3r),e(U4,wU),e(wU,$3r),e(U4,k3r),e(re,S3r),e(re,J4),e(J4,OFe),e(OFe,R3r),e(J4,B3r),e(J4,AU),e(AU,P3r),e(J4,I3r),e(re,q3r),e(re,Y4),e(Y4,VFe),e(VFe,N3r),e(Y4,j3r),e(Y4,yU),e(yU,D3r),e(Y4,G3r),e(re,O3r),e(re,K4),e(K4,XFe),e(XFe,V3r),e(K4,X3r),e(K4,LU),e(LU,z3r),e(K4,Q3r),e(re,W3r),e(re,Z4),e(Z4,zFe),e(zFe,H3r),e(Z4,U3r),e(Z4,xU),e(xU,J3r),e(Z4,Y3r),e(re,K3r),e(re,eE),e(eE,QFe),e(QFe,Z3r),e(eE,ewr),e(eE,$U),e($U,owr),e(eE,rwr),e(re,twr),e(re,oE),e(oE,WFe),e(WFe,awr),e(oE,nwr),e(oE,kU),e(kU,swr),e(oE,lwr),e(re,iwr),e(re,rE),e(rE,HFe),e(HFe,dwr),e(rE,cwr),e(rE,SU),e(SU,fwr),e(rE,mwr),e(re,gwr),e(re,tE),e(tE,UFe),e(UFe,hwr),e(tE,pwr),e(tE,RU),e(RU,uwr),e(tE,_wr),e(re,bwr),e(re,aE),e(aE,JFe),e(JFe,vwr),e(aE,Fwr),e(aE,BU),e(BU,Twr),e(aE,Mwr),e(re,Ewr),e(re,nE),e(nE,YFe),e(YFe,Cwr),e(nE,wwr),e(nE,PU),e(PU,Awr),e(nE,ywr),e(re,Lwr),e(re,sE),e(sE,KFe),e(KFe,xwr),e(sE,$wr),e(sE,IU),e(IU,kwr),e(sE,Swr),e(re,Rwr),e(re,lE),e(lE,ZFe),e(ZFe,Bwr),e(lE,Pwr),e(lE,qU),e(qU,Iwr),e(lE,qwr),e(re,Nwr),e(re,iE),e(iE,e0e),e(e0e,jwr),e(iE,Dwr),e(iE,NU),e(NU,Gwr),e(iE,Owr),e(re,Vwr),e(re,dE),e(dE,o0e),e(o0e,Xwr),e(dE,zwr),e(dE,jU),e(jU,Qwr),e(dE,Wwr),e(re,Hwr),e(re,cE),e(cE,r0e),e(r0e,Uwr),e(cE,Jwr),e(cE,DU),e(DU,Ywr),e(cE,Kwr),e(re,Zwr),e(re,fE),e(fE,t0e),e(t0e,eAr),e(fE,oAr),e(fE,GU),e(GU,rAr),e(fE,tAr),e(re,aAr),e(re,mE),e(mE,a0e),e(a0e,nAr),e(mE,sAr),e(mE,OU),e(OU,lAr),e(mE,iAr),e(re,dAr),e(re,gE),e(gE,n0e),e(n0e,cAr),e(gE,fAr),e(gE,VU),e(VU,mAr),e(gE,gAr),e(re,hAr),e(re,hE),e(hE,s0e),e(s0e,pAr),e(hE,uAr),e(hE,XU),e(XU,_Ar),e(hE,bAr),e(re,vAr),e(re,pE),e(pE,l0e),e(l0e,FAr),e(pE,TAr),e(pE,zU),e(zU,MAr),e(pE,EAr),e(re,CAr),e(re,uE),e(uE,i0e),e(i0e,wAr),e(uE,AAr),e(uE,QU),e(QU,yAr),e(uE,LAr),e(re,xAr),e(re,_E),e(_E,d0e),e(d0e,$Ar),e(_E,kAr),e(_E,WU),e(WU,SAr),e(_E,RAr),e(re,BAr),e(re,bE),e(bE,c0e),e(c0e,PAr),e(bE,IAr),e(bE,HU),e(HU,qAr),e(bE,NAr),e(re,jAr),e(re,vE),e(vE,f0e),e(f0e,DAr),e(vE,GAr),e(vE,UU),e(UU,OAr),e(vE,VAr),e(jr,XAr),M(FE,jr,null),b(f,mqe,_),b(f,xc,_),e(xc,TE),e(TE,m0e),M(Y8,m0e,null),e(xc,zAr),e(xc,g0e),e(g0e,QAr),b(f,gqe,_),b(f,mr,_),M(K8,mr,null),e(mr,WAr),e(mr,$c),e($c,HAr),e($c,JU),e(JU,UAr),e($c,JAr),e($c,YU),e(YU,YAr),e($c,KAr),e(mr,ZAr),e(mr,Z8),e(Z8,e6r),e(Z8,h0e),e(h0e,o6r),e(Z8,r6r),e(mr,t6r),e(mr,Dt),M(ex,Dt,null),e(Dt,a6r),e(Dt,p0e),e(p0e,n6r),e(Dt,s6r),e(Dt,kc),e(kc,l6r),e(kc,u0e),e(u0e,i6r),e(kc,d6r),e(kc,KU),e(KU,c6r),e(kc,f6r),e(Dt,m6r),M(ME,Dt,null),e(mr,g6r),e(mr,Dr),M(ox,Dr,null),e(Dr,h6r),e(Dr,_0e),e(_0e,p6r),e(Dr,u6r),e(Dr,hn),e(hn,_6r),e(hn,b0e),e(b0e,b6r),e(hn,v6r),e(hn,v0e),e(v0e,F6r),e(hn,T6r),e(hn,F0e),e(F0e,M6r),e(hn,E6r),e(Dr,C6r),e(Dr,ke),e(ke,EE),e(EE,T0e),e(T0e,w6r),e(EE,A6r),e(EE,ZU),e(ZU,y6r),e(EE,L6r),e(ke,x6r),e(ke,CE),e(CE,M0e),e(M0e,$6r),e(CE,k6r),e(CE,eJ),e(eJ,S6r),e(CE,R6r),e(ke,B6r),e(ke,wE),e(wE,E0e),e(E0e,P6r),e(wE,I6r),e(wE,oJ),e(oJ,q6r),e(wE,N6r),e(ke,j6r),e(ke,AE),e(AE,C0e),e(C0e,D6r),e(AE,G6r),e(AE,rJ),e(rJ,O6r),e(AE,V6r),e(ke,X6r),e(ke,yE),e(yE,w0e),e(w0e,z6r),e(yE,Q6r),e(yE,tJ),e(tJ,W6r),e(yE,H6r),e(ke,U6r),e(ke,LE),e(LE,A0e),e(A0e,J6r),e(LE,Y6r),e(LE,aJ),e(aJ,K6r),e(LE,Z6r),e(ke,eyr),e(ke,xE),e(xE,y0e),e(y0e,oyr),e(xE,ryr),e(xE,nJ),e(nJ,tyr),e(xE,ayr),e(ke,nyr),e(ke,$E),e($E,L0e),e(L0e,syr),e($E,lyr),e($E,sJ),e(sJ,iyr),e($E,dyr),e(ke,cyr),e(ke,kE),e(kE,x0e),e(x0e,fyr),e(kE,myr),e(kE,lJ),e(lJ,gyr),e(kE,hyr),e(Dr,pyr),M(SE,Dr,null),b(f,hqe,_),b(f,Sc,_),e(Sc,RE),e(RE,$0e),M(rx,$0e,null),e(Sc,uyr),e(Sc,k0e),e(k0e,_yr),b(f,pqe,_),b(f,gr,_),M(tx,gr,null),e(gr,byr),e(gr,Rc),e(Rc,vyr),e(Rc,iJ),e(iJ,Fyr),e(Rc,Tyr),e(Rc,dJ),e(dJ,Myr),e(Rc,Eyr),e(gr,Cyr),e(gr,ax),e(ax,wyr),e(ax,S0e),e(S0e,Ayr),e(ax,yyr),e(gr,Lyr),e(gr,Gt),M(nx,Gt,null),e(Gt,xyr),e(Gt,R0e),e(R0e,$yr),e(Gt,kyr),e(Gt,Bc),e(Bc,Syr),e(Bc,B0e),e(B0e,Ryr),e(Bc,Byr),e(Bc,cJ),e(cJ,Pyr),e(Bc,Iyr),e(Gt,qyr),M(BE,Gt,null),e(gr,Nyr),e(gr,Gr),M(sx,Gr,null),e(Gr,jyr),e(Gr,P0e),e(P0e,Dyr),e(Gr,Gyr),e(Gr,pn),e(pn,Oyr),e(pn,I0e),e(I0e,Vyr),e(pn,Xyr),e(pn,q0e),e(q0e,zyr),e(pn,Qyr),e(pn,N0e),e(N0e,Wyr),e(pn,Hyr),e(Gr,Uyr),e(Gr,Me),e(Me,PE),e(PE,j0e),e(j0e,Jyr),e(PE,Yyr),e(PE,fJ),e(fJ,Kyr),e(PE,Zyr),e(Me,eLr),e(Me,IE),e(IE,D0e),e(D0e,oLr),e(IE,rLr),e(IE,mJ),e(mJ,tLr),e(IE,aLr),e(Me,nLr),e(Me,qE),e(qE,G0e),e(G0e,sLr),e(qE,lLr),e(qE,gJ),e(gJ,iLr),e(qE,dLr),e(Me,cLr),e(Me,NE),e(NE,O0e),e(O0e,fLr),e(NE,mLr),e(NE,hJ),e(hJ,gLr),e(NE,hLr),e(Me,pLr),e(Me,jE),e(jE,V0e),e(V0e,uLr),e(jE,_Lr),e(jE,pJ),e(pJ,bLr),e(jE,vLr),e(Me,FLr),e(Me,DE),e(DE,X0e),e(X0e,TLr),e(DE,MLr),e(DE,uJ),e(uJ,ELr),e(DE,CLr),e(Me,wLr),e(Me,GE),e(GE,z0e),e(z0e,ALr),e(GE,yLr),e(GE,_J),e(_J,LLr),e(GE,xLr),e(Me,$Lr),e(Me,OE),e(OE,Q0e),e(Q0e,kLr),e(OE,SLr),e(OE,bJ),e(bJ,RLr),e(OE,BLr),e(Me,PLr),e(Me,VE),e(VE,W0e),e(W0e,ILr),e(VE,qLr),e(VE,vJ),e(vJ,NLr),e(VE,jLr),e(Me,DLr),e(Me,XE),e(XE,H0e),e(H0e,GLr),e(XE,OLr),e(XE,FJ),e(FJ,VLr),e(XE,XLr),e(Me,zLr),e(Me,zE),e(zE,U0e),e(U0e,QLr),e(zE,WLr),e(zE,TJ),e(TJ,HLr),e(zE,ULr),e(Me,JLr),e(Me,QE),e(QE,J0e),e(J0e,YLr),e(QE,KLr),e(QE,MJ),e(MJ,ZLr),e(QE,e8r),e(Gr,o8r),M(WE,Gr,null),b(f,uqe,_),b(f,Pc,_),e(Pc,HE),e(HE,Y0e),M(lx,Y0e,null),e(Pc,r8r),e(Pc,K0e),e(K0e,t8r),b(f,_qe,_),b(f,hr,_),M(ix,hr,null),e(hr,a8r),e(hr,Ic),e(Ic,n8r),e(Ic,EJ),e(EJ,s8r),e(Ic,l8r),e(Ic,CJ),e(CJ,i8r),e(Ic,d8r),e(hr,c8r),e(hr,dx),e(dx,f8r),e(dx,Z0e),e(Z0e,m8r),e(dx,g8r),e(hr,h8r),e(hr,Ot),M(cx,Ot,null),e(Ot,p8r),e(Ot,eTe),e(eTe,u8r),e(Ot,_8r),e(Ot,qc),e(qc,b8r),e(qc,oTe),e(oTe,v8r),e(qc,F8r),e(qc,wJ),e(wJ,T8r),e(qc,M8r),e(Ot,E8r),M(UE,Ot,null),e(hr,C8r),e(hr,Or),M(fx,Or,null),e(Or,w8r),e(Or,rTe),e(rTe,A8r),e(Or,y8r),e(Or,un),e(un,L8r),e(un,tTe),e(tTe,x8r),e(un,$8r),e(un,aTe),e(aTe,k8r),e(un,S8r),e(un,nTe),e(nTe,R8r),e(un,B8r),e(Or,P8r),e(Or,Le),e(Le,JE),e(JE,sTe),e(sTe,I8r),e(JE,q8r),e(JE,AJ),e(AJ,N8r),e(JE,j8r),e(Le,D8r),e(Le,YE),e(YE,lTe),e(lTe,G8r),e(YE,O8r),e(YE,yJ),e(yJ,V8r),e(YE,X8r),e(Le,z8r),e(Le,KE),e(KE,iTe),e(iTe,Q8r),e(KE,W8r),e(KE,LJ),e(LJ,H8r),e(KE,U8r),e(Le,J8r),e(Le,ZE),e(ZE,dTe),e(dTe,Y8r),e(ZE,K8r),e(ZE,xJ),e(xJ,Z8r),e(ZE,exr),e(Le,oxr),e(Le,eC),e(eC,cTe),e(cTe,rxr),e(eC,txr),e(eC,$J),e($J,axr),e(eC,nxr),e(Le,sxr),e(Le,oC),e(oC,fTe),e(fTe,lxr),e(oC,ixr),e(oC,kJ),e(kJ,dxr),e(oC,cxr),e(Le,fxr),e(Le,rC),e(rC,mTe),e(mTe,mxr),e(rC,gxr),e(rC,SJ),e(SJ,hxr),e(rC,pxr),e(Le,uxr),e(Le,tC),e(tC,gTe),e(gTe,_xr),e(tC,bxr),e(tC,RJ),e(RJ,vxr),e(tC,Fxr),e(Le,Txr),e(Le,aC),e(aC,hTe),e(hTe,Mxr),e(aC,Exr),e(aC,BJ),e(BJ,Cxr),e(aC,wxr),e(Le,Axr),e(Le,nC),e(nC,pTe),e(pTe,yxr),e(nC,Lxr),e(nC,PJ),e(PJ,xxr),e(nC,$xr),e(Or,kxr),M(sC,Or,null),b(f,bqe,_),b(f,Nc,_),e(Nc,lC),e(lC,uTe),M(mx,uTe,null),e(Nc,Sxr),e(Nc,_Te),e(_Te,Rxr),b(f,vqe,_),b(f,pr,_),M(gx,pr,null),e(pr,Bxr),e(pr,jc),e(jc,Pxr),e(jc,IJ),e(IJ,Ixr),e(jc,qxr),e(jc,qJ),e(qJ,Nxr),e(jc,jxr),e(pr,Dxr),e(pr,hx),e(hx,Gxr),e(hx,bTe),e(bTe,Oxr),e(hx,Vxr),e(pr,Xxr),e(pr,Vt),M(px,Vt,null),e(Vt,zxr),e(Vt,vTe),e(vTe,Qxr),e(Vt,Wxr),e(Vt,Dc),e(Dc,Hxr),e(Dc,FTe),e(FTe,Uxr),e(Dc,Jxr),e(Dc,NJ),e(NJ,Yxr),e(Dc,Kxr),e(Vt,Zxr),M(iC,Vt,null),e(pr,e9r),e(pr,Vr),M(ux,Vr,null),e(Vr,o9r),e(Vr,TTe),e(TTe,r9r),e(Vr,t9r),e(Vr,_n),e(_n,a9r),e(_n,MTe),e(MTe,n9r),e(_n,s9r),e(_n,ETe),e(ETe,l9r),e(_n,i9r),e(_n,CTe),e(CTe,d9r),e(_n,c9r),e(Vr,f9r),e(Vr,Se),e(Se,dC),e(dC,wTe),e(wTe,m9r),e(dC,g9r),e(dC,jJ),e(jJ,h9r),e(dC,p9r),e(Se,u9r),e(Se,cC),e(cC,ATe),e(ATe,_9r),e(cC,b9r),e(cC,DJ),e(DJ,v9r),e(cC,F9r),e(Se,T9r),e(Se,fC),e(fC,yTe),e(yTe,M9r),e(fC,E9r),e(fC,GJ),e(GJ,C9r),e(fC,w9r),e(Se,A9r),e(Se,mC),e(mC,LTe),e(LTe,y9r),e(mC,L9r),e(mC,OJ),e(OJ,x9r),e(mC,$9r),e(Se,k9r),e(Se,gC),e(gC,xTe),e(xTe,S9r),e(gC,R9r),e(gC,VJ),e(VJ,B9r),e(gC,P9r),e(Se,I9r),e(Se,hC),e(hC,$Te),e($Te,q9r),e(hC,N9r),e(hC,XJ),e(XJ,j9r),e(hC,D9r),e(Se,G9r),e(Se,pC),e(pC,kTe),e(kTe,O9r),e(pC,V9r),e(pC,zJ),e(zJ,X9r),e(pC,z9r),e(Se,Q9r),e(Se,uC),e(uC,STe),e(STe,W9r),e(uC,H9r),e(uC,QJ),e(QJ,U9r),e(uC,J9r),e(Se,Y9r),e(Se,_C),e(_C,RTe),e(RTe,K9r),e(_C,Z9r),e(_C,WJ),e(WJ,e$r),e(_C,o$r),e(Vr,r$r),M(bC,Vr,null),b(f,Fqe,_),b(f,Gc,_),e(Gc,vC),e(vC,BTe),M(_x,BTe,null),e(Gc,t$r),e(Gc,PTe),e(PTe,a$r),b(f,Tqe,_),b(f,ur,_),M(bx,ur,null),e(ur,n$r),e(ur,Oc),e(Oc,s$r),e(Oc,HJ),e(HJ,l$r),e(Oc,i$r),e(Oc,UJ),e(UJ,d$r),e(Oc,c$r),e(ur,f$r),e(ur,vx),e(vx,m$r),e(vx,ITe),e(ITe,g$r),e(vx,h$r),e(ur,p$r),e(ur,Xt),M(Fx,Xt,null),e(Xt,u$r),e(Xt,qTe),e(qTe,_$r),e(Xt,b$r),e(Xt,Vc),e(Vc,v$r),e(Vc,NTe),e(NTe,F$r),e(Vc,T$r),e(Vc,JJ),e(JJ,M$r),e(Vc,E$r),e(Xt,C$r),M(FC,Xt,null),e(ur,w$r),e(ur,Xr),M(Tx,Xr,null),e(Xr,A$r),e(Xr,jTe),e(jTe,y$r),e(Xr,L$r),e(Xr,bn),e(bn,x$r),e(bn,DTe),e(DTe,$$r),e(bn,k$r),e(bn,GTe),e(GTe,S$r),e(bn,R$r),e(bn,OTe),e(OTe,B$r),e(bn,P$r),e(Xr,I$r),e(Xr,xe),e(xe,TC),e(TC,VTe),e(VTe,q$r),e(TC,N$r),e(TC,YJ),e(YJ,j$r),e(TC,D$r),e(xe,G$r),e(xe,MC),e(MC,XTe),e(XTe,O$r),e(MC,V$r),e(MC,KJ),e(KJ,X$r),e(MC,z$r),e(xe,Q$r),e(xe,EC),e(EC,zTe),e(zTe,W$r),e(EC,H$r),e(EC,ZJ),e(ZJ,U$r),e(EC,J$r),e(xe,Y$r),e(xe,CC),e(CC,QTe),e(QTe,K$r),e(CC,Z$r),e(CC,eY),e(eY,ekr),e(CC,okr),e(xe,rkr),e(xe,wC),e(wC,WTe),e(WTe,tkr),e(wC,akr),e(wC,oY),e(oY,nkr),e(wC,skr),e(xe,lkr),e(xe,AC),e(AC,HTe),e(HTe,ikr),e(AC,dkr),e(AC,rY),e(rY,ckr),e(AC,fkr),e(xe,mkr),e(xe,yC),e(yC,UTe),e(UTe,gkr),e(yC,hkr),e(yC,tY),e(tY,pkr),e(yC,ukr),e(xe,_kr),e(xe,LC),e(LC,JTe),e(JTe,bkr),e(LC,vkr),e(LC,aY),e(aY,Fkr),e(LC,Tkr),e(xe,Mkr),e(xe,xC),e(xC,YTe),e(YTe,Ekr),e(xC,Ckr),e(xC,nY),e(nY,wkr),e(xC,Akr),e(xe,ykr),e(xe,$C),e($C,KTe),e(KTe,Lkr),e($C,xkr),e($C,sY),e(sY,$kr),e($C,kkr),e(Xr,Skr),M(kC,Xr,null),b(f,Mqe,_),b(f,Xc,_),e(Xc,SC),e(SC,ZTe),M(Mx,ZTe,null),e(Xc,Rkr),e(Xc,e7e),e(e7e,Bkr),b(f,Eqe,_),b(f,_r,_),M(Ex,_r,null),e(_r,Pkr),e(_r,zc),e(zc,Ikr),e(zc,lY),e(lY,qkr),e(zc,Nkr),e(zc,iY),e(iY,jkr),e(zc,Dkr),e(_r,Gkr),e(_r,Cx),e(Cx,Okr),e(Cx,o7e),e(o7e,Vkr),e(Cx,Xkr),e(_r,zkr),e(_r,zt),M(wx,zt,null),e(zt,Qkr),e(zt,r7e),e(r7e,Wkr),e(zt,Hkr),e(zt,Qc),e(Qc,Ukr),e(Qc,t7e),e(t7e,Jkr),e(Qc,Ykr),e(Qc,dY),e(dY,Kkr),e(Qc,Zkr),e(zt,eSr),M(RC,zt,null),e(_r,oSr),e(_r,zr),M(Ax,zr,null),e(zr,rSr),e(zr,a7e),e(a7e,tSr),e(zr,aSr),e(zr,vn),e(vn,nSr),e(vn,n7e),e(n7e,sSr),e(vn,lSr),e(vn,s7e),e(s7e,iSr),e(vn,dSr),e(vn,l7e),e(l7e,cSr),e(vn,fSr),e(zr,mSr),e(zr,$e),e($e,BC),e(BC,i7e),e(i7e,gSr),e(BC,hSr),e(BC,cY),e(cY,pSr),e(BC,uSr),e($e,_Sr),e($e,PC),e(PC,d7e),e(d7e,bSr),e(PC,vSr),e(PC,fY),e(fY,FSr),e(PC,TSr),e($e,MSr),e($e,IC),e(IC,c7e),e(c7e,ESr),e(IC,CSr),e(IC,mY),e(mY,wSr),e(IC,ASr),e($e,ySr),e($e,qC),e(qC,f7e),e(f7e,LSr),e(qC,xSr),e(qC,gY),e(gY,$Sr),e(qC,kSr),e($e,SSr),e($e,NC),e(NC,m7e),e(m7e,RSr),e(NC,BSr),e(NC,hY),e(hY,PSr),e(NC,ISr),e($e,qSr),e($e,jC),e(jC,g7e),e(g7e,NSr),e(jC,jSr),e(jC,pY),e(pY,DSr),e(jC,GSr),e($e,OSr),e($e,DC),e(DC,h7e),e(h7e,VSr),e(DC,XSr),e(DC,uY),e(uY,zSr),e(DC,QSr),e($e,WSr),e($e,GC),e(GC,p7e),e(p7e,HSr),e(GC,USr),e(GC,_Y),e(_Y,JSr),e(GC,YSr),e($e,KSr),e($e,OC),e(OC,u7e),e(u7e,ZSr),e(OC,eRr),e(OC,bY),e(bY,oRr),e(OC,rRr),e($e,tRr),e($e,VC),e(VC,_7e),e(_7e,aRr),e(VC,nRr),e(VC,vY),e(vY,sRr),e(VC,lRr),e(zr,iRr),M(XC,zr,null),b(f,Cqe,_),b(f,Wc,_),e(Wc,zC),e(zC,b7e),M(yx,b7e,null),e(Wc,dRr),e(Wc,v7e),e(v7e,cRr),b(f,wqe,_),b(f,br,_),M(Lx,br,null),e(br,fRr),e(br,Hc),e(Hc,mRr),e(Hc,FY),e(FY,gRr),e(Hc,hRr),e(Hc,TY),e(TY,pRr),e(Hc,uRr),e(br,_Rr),e(br,xx),e(xx,bRr),e(xx,F7e),e(F7e,vRr),e(xx,FRr),e(br,TRr),e(br,Qt),M($x,Qt,null),e(Qt,MRr),e(Qt,T7e),e(T7e,ERr),e(Qt,CRr),e(Qt,Uc),e(Uc,wRr),e(Uc,M7e),e(M7e,ARr),e(Uc,yRr),e(Uc,MY),e(MY,LRr),e(Uc,xRr),e(Qt,$Rr),M(QC,Qt,null),e(br,kRr),e(br,Qr),M(kx,Qr,null),e(Qr,SRr),e(Qr,E7e),e(E7e,RRr),e(Qr,BRr),e(Qr,Fn),e(Fn,PRr),e(Fn,C7e),e(C7e,IRr),e(Fn,qRr),e(Fn,w7e),e(w7e,NRr),e(Fn,jRr),e(Fn,A7e),e(A7e,DRr),e(Fn,GRr),e(Qr,ORr),e(Qr,De),e(De,WC),e(WC,y7e),e(y7e,VRr),e(WC,XRr),e(WC,EY),e(EY,zRr),e(WC,QRr),e(De,WRr),e(De,HC),e(HC,L7e),e(L7e,HRr),e(HC,URr),e(HC,CY),e(CY,JRr),e(HC,YRr),e(De,KRr),e(De,UC),e(UC,x7e),e(x7e,ZRr),e(UC,eBr),e(UC,wY),e(wY,oBr),e(UC,rBr),e(De,tBr),e(De,JC),e(JC,$7e),e($7e,aBr),e(JC,nBr),e(JC,AY),e(AY,sBr),e(JC,lBr),e(De,iBr),e(De,YC),e(YC,k7e),e(k7e,dBr),e(YC,cBr),e(YC,yY),e(yY,fBr),e(YC,mBr),e(De,gBr),e(De,KC),e(KC,S7e),e(S7e,hBr),e(KC,pBr),e(KC,LY),e(LY,uBr),e(KC,_Br),e(De,bBr),e(De,ZC),e(ZC,R7e),e(R7e,vBr),e(ZC,FBr),e(ZC,xY),e(xY,TBr),e(ZC,MBr),e(De,EBr),e(De,e3),e(e3,B7e),e(B7e,CBr),e(e3,wBr),e(e3,$Y),e($Y,ABr),e(e3,yBr),e(Qr,LBr),M(o3,Qr,null),b(f,Aqe,_),b(f,Jc,_),e(Jc,r3),e(r3,P7e),M(Sx,P7e,null),e(Jc,xBr),e(Jc,I7e),e(I7e,$Br),b(f,yqe,_),b(f,vr,_),M(Rx,vr,null),e(vr,kBr),e(vr,Yc),e(Yc,SBr),e(Yc,kY),e(kY,RBr),e(Yc,BBr),e(Yc,SY),e(SY,PBr),e(Yc,IBr),e(vr,qBr),e(vr,Bx),e(Bx,NBr),e(Bx,q7e),e(q7e,jBr),e(Bx,DBr),e(vr,GBr),e(vr,Wt),M(Px,Wt,null),e(Wt,OBr),e(Wt,N7e),e(N7e,VBr),e(Wt,XBr),e(Wt,Kc),e(Kc,zBr),e(Kc,j7e),e(j7e,QBr),e(Kc,WBr),e(Kc,RY),e(RY,HBr),e(Kc,UBr),e(Wt,JBr),M(t3,Wt,null),e(vr,YBr),e(vr,Wr),M(Ix,Wr,null),e(Wr,KBr),e(Wr,D7e),e(D7e,ZBr),e(Wr,ePr),e(Wr,Tn),e(Tn,oPr),e(Tn,G7e),e(G7e,rPr),e(Tn,tPr),e(Tn,O7e),e(O7e,aPr),e(Tn,nPr),e(Tn,V7e),e(V7e,sPr),e(Tn,lPr),e(Wr,iPr),e(Wr,Ge),e(Ge,a3),e(a3,X7e),e(X7e,dPr),e(a3,cPr),e(a3,BY),e(BY,fPr),e(a3,mPr),e(Ge,gPr),e(Ge,n3),e(n3,z7e),e(z7e,hPr),e(n3,pPr),e(n3,PY),e(PY,uPr),e(n3,_Pr),e(Ge,bPr),e(Ge,s3),e(s3,Q7e),e(Q7e,vPr),e(s3,FPr),e(s3,IY),e(IY,TPr),e(s3,MPr),e(Ge,EPr),e(Ge,l3),e(l3,W7e),e(W7e,CPr),e(l3,wPr),e(l3,qY),e(qY,APr),e(l3,yPr),e(Ge,LPr),e(Ge,i3),e(i3,H7e),e(H7e,xPr),e(i3,$Pr),e(i3,NY),e(NY,kPr),e(i3,SPr),e(Ge,RPr),e(Ge,d3),e(d3,U7e),e(U7e,BPr),e(d3,PPr),e(d3,jY),e(jY,IPr),e(d3,qPr),e(Ge,NPr),e(Ge,c3),e(c3,J7e),e(J7e,jPr),e(c3,DPr),e(c3,DY),e(DY,GPr),e(c3,OPr),e(Ge,VPr),e(Ge,f3),e(f3,Y7e),e(Y7e,XPr),e(f3,zPr),e(f3,GY),e(GY,QPr),e(f3,WPr),e(Wr,HPr),M(m3,Wr,null),b(f,Lqe,_),b(f,Zc,_),e(Zc,g3),e(g3,K7e),M(qx,K7e,null),e(Zc,UPr),e(Zc,Z7e),e(Z7e,JPr),b(f,xqe,_),b(f,Fr,_),M(Nx,Fr,null),e(Fr,YPr),e(Fr,ef),e(ef,KPr),e(ef,OY),e(OY,ZPr),e(ef,eIr),e(ef,VY),e(VY,oIr),e(ef,rIr),e(Fr,tIr),e(Fr,jx),e(jx,aIr),e(jx,eMe),e(eMe,nIr),e(jx,sIr),e(Fr,lIr),e(Fr,Ht),M(Dx,Ht,null),e(Ht,iIr),e(Ht,oMe),e(oMe,dIr),e(Ht,cIr),e(Ht,of),e(of,fIr),e(of,rMe),e(rMe,mIr),e(of,gIr),e(of,XY),e(XY,hIr),e(of,pIr),e(Ht,uIr),M(h3,Ht,null),e(Fr,_Ir),e(Fr,Hr),M(Gx,Hr,null),e(Hr,bIr),e(Hr,tMe),e(tMe,vIr),e(Hr,FIr),e(Hr,Mn),e(Mn,TIr),e(Mn,aMe),e(aMe,MIr),e(Mn,EIr),e(Mn,nMe),e(nMe,CIr),e(Mn,wIr),e(Mn,sMe),e(sMe,AIr),e(Mn,yIr),e(Hr,LIr),e(Hr,lMe),e(lMe,p3),e(p3,iMe),e(iMe,xIr),e(p3,$Ir),e(p3,zY),e(zY,kIr),e(p3,SIr),e(Hr,RIr),M(u3,Hr,null),b(f,$qe,_),b(f,rf,_),e(rf,_3),e(_3,dMe),M(Ox,dMe,null),e(rf,BIr),e(rf,cMe),e(cMe,PIr),b(f,kqe,_),b(f,Tr,_),M(Vx,Tr,null),e(Tr,IIr),e(Tr,tf),e(tf,qIr),e(tf,QY),e(QY,NIr),e(tf,jIr),e(tf,WY),e(WY,DIr),e(tf,GIr),e(Tr,OIr),e(Tr,Xx),e(Xx,VIr),e(Xx,fMe),e(fMe,XIr),e(Xx,zIr),e(Tr,QIr),e(Tr,Ut),M(zx,Ut,null),e(Ut,WIr),e(Ut,mMe),e(mMe,HIr),e(Ut,UIr),e(Ut,af),e(af,JIr),e(af,gMe),e(gMe,YIr),e(af,KIr),e(af,HY),e(HY,ZIr),e(af,eqr),e(Ut,oqr),M(b3,Ut,null),e(Tr,rqr),e(Tr,Ur),M(Qx,Ur,null),e(Ur,tqr),e(Ur,hMe),e(hMe,aqr),e(Ur,nqr),e(Ur,En),e(En,sqr),e(En,pMe),e(pMe,lqr),e(En,iqr),e(En,uMe),e(uMe,dqr),e(En,cqr),e(En,_Me),e(_Me,fqr),e(En,mqr),e(Ur,gqr),e(Ur,Wx),e(Wx,v3),e(v3,bMe),e(bMe,hqr),e(v3,pqr),e(v3,UY),e(UY,uqr),e(v3,_qr),e(Wx,bqr),e(Wx,F3),e(F3,vMe),e(vMe,vqr),e(F3,Fqr),e(F3,JY),e(JY,Tqr),e(F3,Mqr),e(Ur,Eqr),M(T3,Ur,null),b(f,Sqe,_),b(f,nf,_),e(nf,M3),e(M3,FMe),M(Hx,FMe,null),e(nf,Cqr),e(nf,TMe),e(TMe,wqr),b(f,Rqe,_),b(f,Mr,_),M(Ux,Mr,null),e(Mr,Aqr),e(Mr,sf),e(sf,yqr),e(sf,YY),e(YY,Lqr),e(sf,xqr),e(sf,KY),e(KY,$qr),e(sf,kqr),e(Mr,Sqr),e(Mr,Jx),e(Jx,Rqr),e(Jx,MMe),e(MMe,Bqr),e(Jx,Pqr),e(Mr,Iqr),e(Mr,Jt),M(Yx,Jt,null),e(Jt,qqr),e(Jt,EMe),e(EMe,Nqr),e(Jt,jqr),e(Jt,lf),e(lf,Dqr),e(lf,CMe),e(CMe,Gqr),e(lf,Oqr),e(lf,ZY),e(ZY,Vqr),e(lf,Xqr),e(Jt,zqr),M(E3,Jt,null),e(Mr,Qqr),e(Mr,Jr),M(Kx,Jr,null),e(Jr,Wqr),e(Jr,wMe),e(wMe,Hqr),e(Jr,Uqr),e(Jr,Cn),e(Cn,Jqr),e(Cn,AMe),e(AMe,Yqr),e(Cn,Kqr),e(Cn,yMe),e(yMe,Zqr),e(Cn,eNr),e(Cn,LMe),e(LMe,oNr),e(Cn,rNr),e(Jr,tNr),e(Jr,xMe),e(xMe,C3),e(C3,$Me),e($Me,aNr),e(C3,nNr),e(C3,eK),e(eK,sNr),e(C3,lNr),e(Jr,iNr),M(w3,Jr,null),Bqe=!0},p(f,[_]){const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),_f.$set(Zx);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),pg.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),Hg.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),Mh.$set(RMe);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),Eh.$set(e9);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),Gh.$set(BMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Oh.$set(wn);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),zh.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),Pu.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),qu.$set(qMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),w_.$set(o9);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),y_.$set(NMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),f2.$set(r9);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),g2.$set(jMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),J2.$set(t9);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),K2.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),u1.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),b1.$set(OMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),mb.$set(df);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),hb.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),zb.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Wb.$set(zMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),e5.$set(a9);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),r5.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),q5.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),j5.$set(HMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Av.$set(Kr);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),Lv.$set(n9);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),kv.$set(UMe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),Rv.$set(s9);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),Qv.$set(JMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Hv.$set(Zr);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),Yv.$set(YMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Zv.$set(cf);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),dF.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),fF.$set(ZMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),_F.$set(L);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),vF.$set(A3);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),xF.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),kF.$set(o4e);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),PF.$set(y3);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),qF.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),VF.$set(t4e);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),zF.$set(L3);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),JF.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),KF.$set(n4e);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),r0.$set(x3);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),a0.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),l0.$set(l4e);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),d0.$set($3);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),p0.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),_0.$set(d4e);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),F0.$set(k3);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),M0.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),gT.$set(f4e);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),pT.$set(S3);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),jT.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),GT.$set(g4e);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),e7.$set(R3);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),r7.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),s7.$set(p4e);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),i7.$set(B3);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),x7.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),k7.$set(_4e);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),O7.$set(P3);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),X7.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),_M.$set(v4e);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),vM.$set(I3);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),qM.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),jM.$set(T4e);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),OM.$set(q3);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),XM.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),QM.$set(E4e);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),HM.$set(N3);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),p4.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),_4.$set(w4e);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),N4.$set(j3);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),D4.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),O4.$set(y4e);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),X4.$set(D3);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),Q4.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),H4.$set(x4e);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),FE.$set(G3);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),ME.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),SE.$set(k4e);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),BE.$set(O3);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),WE.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),UE.$set(R4e);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),sC.$set(V3);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),iC.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),bC.$set(P4e);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),FC.$set(X3);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),kC.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),RC.$set(q4e);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),XC.$set(z3);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),QC.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),o3.$set(j4e);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),t3.$set(Q3);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),m3.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),h3.$set(G4e);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),u3.$set(W3);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),b3.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),T3.$set(V4e);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),E3.$set(H3);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),w3.$set(X4e)},i(f){Bqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(_f.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(e6.$$.fragment,f),E(pg.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(s6.$$.fragment,f),E(Hg.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(m6.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(b6.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(E6.$$.fragment,f),E(zh.$$.fragment,f),E(C6.$$.fragment,f),E(Pu.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(qu.$$.fragment,f),E(x6.$$.fragment,f),E(w_.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(R6.$$.fragment,f),E(y_.$$.fragment,f),E(B6.$$.fragment,f),E(f2.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(g2.$$.fragment,f),E(j6.$$.fragment,f),E(J2.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(K2.$$.fragment,f),E(X6.$$.fragment,f),E(u1.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(b1.$$.fragment,f),E(U6.$$.fragment,f),E(mb.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(hb.$$.fragment,f),E(ey.$$.fragment,f),E(zb.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(Wb.$$.fragment,f),E(ny.$$.fragment,f),E(e5.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(r5.$$.fragment,f),E(cy.$$.fragment,f),E(q5.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(j5.$$.fragment,f),E(py.$$.fragment,f),E(Av.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(Lv.$$.fragment,f),E(Fy.$$.fragment,f),E(kv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Rv.$$.fragment,f),E(wy.$$.fragment,f),E(Qv.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(Hv.$$.fragment,f),E($y.$$.fragment,f),E(Yv.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Zv.$$.fragment,f),E(Py.$$.fragment,f),E(dF.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(fF.$$.fragment,f),E(Dy.$$.fragment,f),E(_F.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(vF.$$.fragment,f),E(zy.$$.fragment,f),E(xF.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(kF.$$.fragment,f),E(Jy.$$.fragment,f),E(PF.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(qF.$$.fragment,f),E(rL.$$.fragment,f),E(VF.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(zF.$$.fragment,f),E(lL.$$.fragment,f),E(JF.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(KF.$$.fragment,f),E(mL.$$.fragment,f),E(r0.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(a0.$$.fragment,f),E(bL.$$.fragment,f),E(l0.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(d0.$$.fragment,f),E(EL.$$.fragment,f),E(p0.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(_0.$$.fragment,f),E(LL.$$.fragment,f),E(F0.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(M0.$$.fragment,f),E(RL.$$.fragment,f),E(gT.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(pT.$$.fragment,f),E(NL.$$.fragment,f),E(jT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(GT.$$.fragment,f),E(VL.$$.fragment,f),E(e7.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(r7.$$.fragment,f),E(HL.$$.fragment,f),E(s7.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(i7.$$.fragment,f),E(ZL.$$.fragment,f),E(x7.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(k7.$$.fragment,f),E(a8.$$.fragment,f),E(O7.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(X7.$$.fragment,f),E(d8.$$.fragment,f),E(_M.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(vM.$$.fragment,f),E(h8.$$.fragment,f),E(qM.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(jM.$$.fragment,f),E(v8.$$.fragment,f),E(OM.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(XM.$$.fragment,f),E(w8.$$.fragment,f),E(QM.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(HM.$$.fragment,f),E($8.$$.fragment,f),E(p4.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(B8.$$.fragment,f),E(_4.$$.fragment,f),E(P8.$$.fragment,f),E(N4.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(D4.$$.fragment,f),E(D8.$$.fragment,f),E(O4.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(X4.$$.fragment,f),E(z8.$$.fragment,f),E(Q4.$$.fragment,f),E(Q8.$$.fragment,f),E(W8.$$.fragment,f),E(U8.$$.fragment,f),E(H4.$$.fragment,f),E(J8.$$.fragment,f),E(FE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(ME.$$.fragment,f),E(ox.$$.fragment,f),E(SE.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(BE.$$.fragment,f),E(sx.$$.fragment,f),E(WE.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(UE.$$.fragment,f),E(fx.$$.fragment,f),E(sC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(iC.$$.fragment,f),E(ux.$$.fragment,f),E(bC.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(FC.$$.fragment,f),E(Tx.$$.fragment,f),E(kC.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(RC.$$.fragment,f),E(Ax.$$.fragment,f),E(XC.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(QC.$$.fragment,f),E(kx.$$.fragment,f),E(o3.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(t3.$$.fragment,f),E(Ix.$$.fragment,f),E(m3.$$.fragment,f),E(qx.$$.fragment,f),E(Nx.$$.fragment,f),E(Dx.$$.fragment,f),E(h3.$$.fragment,f),E(Gx.$$.fragment,f),E(u3.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(b3.$$.fragment,f),E(Qx.$$.fragment,f),E(T3.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(E3.$$.fragment,f),E(Kx.$$.fragment,f),E(w3.$$.fragment,f),Bqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(_f.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(e6.$$.fragment,f),C(pg.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(s6.$$.fragment,f),C(Hg.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(m6.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(b6.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(E6.$$.fragment,f),C(zh.$$.fragment,f),C(C6.$$.fragment,f),C(Pu.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(qu.$$.fragment,f),C(x6.$$.fragment,f),C(w_.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(R6.$$.fragment,f),C(y_.$$.fragment,f),C(B6.$$.fragment,f),C(f2.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(g2.$$.fragment,f),C(j6.$$.fragment,f),C(J2.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(K2.$$.fragment,f),C(X6.$$.fragment,f),C(u1.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(b1.$$.fragment,f),C(U6.$$.fragment,f),C(mb.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(hb.$$.fragment,f),C(ey.$$.fragment,f),C(zb.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(Wb.$$.fragment,f),C(ny.$$.fragment,f),C(e5.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(r5.$$.fragment,f),C(cy.$$.fragment,f),C(q5.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(j5.$$.fragment,f),C(py.$$.fragment,f),C(Av.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(Lv.$$.fragment,f),C(Fy.$$.fragment,f),C(kv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Rv.$$.fragment,f),C(wy.$$.fragment,f),C(Qv.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(Hv.$$.fragment,f),C($y.$$.fragment,f),C(Yv.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Zv.$$.fragment,f),C(Py.$$.fragment,f),C(dF.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(fF.$$.fragment,f),C(Dy.$$.fragment,f),C(_F.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(vF.$$.fragment,f),C(zy.$$.fragment,f),C(xF.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(kF.$$.fragment,f),C(Jy.$$.fragment,f),C(PF.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(qF.$$.fragment,f),C(rL.$$.fragment,f),C(VF.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(zF.$$.fragment,f),C(lL.$$.fragment,f),C(JF.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(KF.$$.fragment,f),C(mL.$$.fragment,f),C(r0.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(a0.$$.fragment,f),C(bL.$$.fragment,f),C(l0.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(d0.$$.fragment,f),C(EL.$$.fragment,f),C(p0.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(_0.$$.fragment,f),C(LL.$$.fragment,f),C(F0.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(M0.$$.fragment,f),C(RL.$$.fragment,f),C(gT.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(pT.$$.fragment,f),C(NL.$$.fragment,f),C(jT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(GT.$$.fragment,f),C(VL.$$.fragment,f),C(e7.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(r7.$$.fragment,f),C(HL.$$.fragment,f),C(s7.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(i7.$$.fragment,f),C(ZL.$$.fragment,f),C(x7.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(k7.$$.fragment,f),C(a8.$$.fragment,f),C(O7.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(X7.$$.fragment,f),C(d8.$$.fragment,f),C(_M.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(vM.$$.fragment,f),C(h8.$$.fragment,f),C(qM.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(jM.$$.fragment,f),C(v8.$$.fragment,f),C(OM.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(XM.$$.fragment,f),C(w8.$$.fragment,f),C(QM.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(HM.$$.fragment,f),C($8.$$.fragment,f),C(p4.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(B8.$$.fragment,f),C(_4.$$.fragment,f),C(P8.$$.fragment,f),C(N4.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(D4.$$.fragment,f),C(D8.$$.fragment,f),C(O4.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(X4.$$.fragment,f),C(z8.$$.fragment,f),C(Q4.$$.fragment,f),C(Q8.$$.fragment,f),C(W8.$$.fragment,f),C(U8.$$.fragment,f),C(H4.$$.fragment,f),C(J8.$$.fragment,f),C(FE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(ME.$$.fragment,f),C(ox.$$.fragment,f),C(SE.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(BE.$$.fragment,f),C(sx.$$.fragment,f),C(WE.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(UE.$$.fragment,f),C(fx.$$.fragment,f),C(sC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(iC.$$.fragment,f),C(ux.$$.fragment,f),C(bC.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(FC.$$.fragment,f),C(Tx.$$.fragment,f),C(kC.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(RC.$$.fragment,f),C(Ax.$$.fragment,f),C(XC.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(QC.$$.fragment,f),C(kx.$$.fragment,f),C(o3.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(t3.$$.fragment,f),C(Ix.$$.fragment,f),C(m3.$$.fragment,f),C(qx.$$.fragment,f),C(Nx.$$.fragment,f),C(Dx.$$.fragment,f),C(h3.$$.fragment,f),C(Gx.$$.fragment,f),C(u3.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(b3.$$.fragment,f),C(Qx.$$.fragment,f),C(T3.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(E3.$$.fragment,f),C(Kx.$$.fragment,f),C(w3.$$.fragment,f),Bqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(kPe),f&&t(hi),w(HA),f&&t(SPe),f&&t($n),f&&t(RPe),w(UA,f),f&&t(BPe),f&&t(u$),f&&t(PPe),w(_f,f),f&&t(IPe),f&&t(pi),w(JA),f&&t(qPe),f&&t(Co),w(YA),w(e6),w(pg),w(o6),f&&t(NPe),f&&t(_i),w(r6),f&&t(jPe),f&&t(wo),w(t6),w(s6),w(Hg),w(l6),f&&t(DPe),f&&t(bi),w(i6),f&&t(GPe),f&&t(Ao),w(d6),w(m6),w(Mh),w(Eh),w(g6),f&&t(OPe),f&&t(vi),w(h6),f&&t(VPe),f&&t(yo),w(p6),w(b6),w(Gh),w(Oh),w(v6),f&&t(XPe),f&&t(Ti),w(F6),f&&t(zPe),f&&t(Lo),w(T6),w(E6),w(zh),w(C6),w(Pu),f&&t(QPe),f&&t(Ci),w(w6),f&&t(WPe),f&&t(xo),w(A6),w(L6),w(qu),w(x6),w(w_),f&&t(HPe),f&&t(yi),w($6),f&&t(UPe),f&&t($o),w(k6),w(R6),w(y_),w(B6),w(f2),f&&t(JPe),f&&t($i),w(P6),f&&t(YPe),f&&t(ko),w(I6),w(N6),w(g2),w(j6),w(J2),f&&t(KPe),f&&t(Ri),w(D6),f&&t(ZPe),f&&t(So),w(G6),w(V6),w(K2),w(X6),w(u1),f&&t(eIe),f&&t(Ii),w(z6),f&&t(oIe),f&&t(Ro),w(Q6),w(H6),w(b1),w(U6),w(mb),f&&t(rIe),f&&t(ji),w(J6),f&&t(tIe),f&&t(Bo),w(Y6),w(Z6),w(hb),w(ey),w(zb),f&&t(aIe),f&&t(Oi),w(oy),f&&t(nIe),f&&t(Po),w(ry),w(ay),w(Wb),w(ny),w(e5),f&&t(sIe),f&&t(zi),w(sy),f&&t(lIe),f&&t(Io),w(ly),w(dy),w(r5),w(cy),w(q5),f&&t(iIe),f&&t(Hi),w(fy),f&&t(dIe),f&&t(qo),w(my),w(hy),w(j5),w(py),w(Av),f&&t(cIe),f&&t(Yi),w(uy),f&&t(fIe),f&&t(No),w(_y),w(vy),w(Lv),w(Fy),w(kv),f&&t(mIe),f&&t(ed),w(Ty),f&&t(gIe),f&&t(jo),w(My),w(Cy),w(Rv),w(wy),w(Qv),f&&t(hIe),f&&t(td),w(Ay),f&&t(pIe),f&&t(Do),w(yy),w(xy),w(Hv),w($y),w(Yv),f&&t(uIe),f&&t(sd),w(ky),f&&t(_Ie),f&&t(Go),w(Sy),w(By),w(Zv),w(Py),w(dF),f&&t(bIe),f&&t(dd),w(Iy),f&&t(vIe),f&&t(Oo),w(qy),w(jy),w(fF),w(Dy),w(_F),f&&t(FIe),f&&t(md),w(Gy),f&&t(TIe),f&&t(Vo),w(Oy),w(Xy),w(vF),w(zy),w(xF),f&&t(MIe),f&&t(pd),w(Qy),f&&t(EIe),f&&t(Xo),w(Wy),w(Uy),w(kF),w(Jy),w(PF),f&&t(CIe),f&&t(bd),w(Ky),f&&t(wIe),f&&t(zo),w(Zy),w(oL),w(qF),w(rL),w(VF),f&&t(AIe),f&&t(Td),w(tL),f&&t(yIe),f&&t(Qo),w(aL),w(sL),w(zF),w(lL),w(JF),f&&t(LIe),f&&t(wd),w(iL),f&&t(xIe),f&&t(Wo),w(dL),w(fL),w(KF),w(mL),w(r0),f&&t($Ie),f&&t(Ld),w(hL),f&&t(kIe),f&&t(Ho),w(pL),w(_L),w(a0),w(bL),w(l0),f&&t(SIe),f&&t(kd),w(vL),f&&t(RIe),f&&t(Uo),w(FL),w(ML),w(d0),w(EL),w(p0),f&&t(BIe),f&&t(Bd),w(CL),f&&t(PIe),f&&t(Jo),w(wL),w(yL),w(_0),w(LL),w(F0),f&&t(IIe),f&&t(qd),w(xL),f&&t(qIe),f&&t(Yo),w($L),w(SL),w(M0),w(RL),w(gT),f&&t(NIe),f&&t(Dd),w(BL),f&&t(jIe),f&&t(Ko),w(PL),w(qL),w(pT),w(NL),w(jT),f&&t(DIe),f&&t(Vd),w(jL),f&&t(GIe),f&&t(Zo),w(DL),w(OL),w(GT),w(VL),w(e7),f&&t(OIe),f&&t(Qd),w(XL),f&&t(VIe),f&&t(er),w(zL),w(WL),w(r7),w(HL),w(s7),f&&t(XIe),f&&t(Jd),w(UL),f&&t(zIe),f&&t(or),w(JL),w(KL),w(i7),w(ZL),w(x7),f&&t(QIe),f&&t(Zd),w(e8),f&&t(WIe),f&&t(rr),w(o8),w(t8),w(k7),w(a8),w(O7),f&&t(HIe),f&&t(rc),w(n8),f&&t(UIe),f&&t(tr),w(s8),w(i8),w(X7),w(d8),w(_M),f&&t(JIe),f&&t(nc),w(c8),f&&t(YIe),f&&t(ar),w(f8),w(g8),w(vM),w(h8),w(qM),f&&t(KIe),f&&t(ic),w(p8),f&&t(ZIe),f&&t(nr),w(u8),w(b8),w(jM),w(v8),w(OM),f&&t(eqe),f&&t(fc),w(T8),f&&t(oqe),f&&t(sr),w(M8),w(C8),w(XM),w(w8),w(QM),f&&t(rqe),f&&t(hc),w(A8),f&&t(tqe),f&&t(lr),w(y8),w(x8),w(HM),w($8),w(p4),f&&t(aqe),f&&t(_c),w(k8),f&&t(nqe),f&&t(ir),w(S8),w(B8),w(_4),w(P8),w(N4),f&&t(sqe),f&&t(Fc),w(I8),f&&t(lqe),f&&t(dr),w(q8),w(j8),w(D4),w(D8),w(O4),f&&t(iqe),f&&t(Ec),w(G8),f&&t(dqe),f&&t(cr),w(O8),w(X8),w(X4),w(z8),w(Q4),f&&t(cqe),f&&t(Ac),w(Q8),f&&t(fqe),f&&t(fr),w(W8),w(U8),w(H4),w(J8),w(FE),f&&t(mqe),f&&t(xc),w(Y8),f&&t(gqe),f&&t(mr),w(K8),w(ex),w(ME),w(ox),w(SE),f&&t(hqe),f&&t(Sc),w(rx),f&&t(pqe),f&&t(gr),w(tx),w(nx),w(BE),w(sx),w(WE),f&&t(uqe),f&&t(Pc),w(lx),f&&t(_qe),f&&t(hr),w(ix),w(cx),w(UE),w(fx),w(sC),f&&t(bqe),f&&t(Nc),w(mx),f&&t(vqe),f&&t(pr),w(gx),w(px),w(iC),w(ux),w(bC),f&&t(Fqe),f&&t(Gc),w(_x),f&&t(Tqe),f&&t(ur),w(bx),w(Fx),w(FC),w(Tx),w(kC),f&&t(Mqe),f&&t(Xc),w(Mx),f&&t(Eqe),f&&t(_r),w(Ex),w(wx),w(RC),w(Ax),w(XC),f&&t(Cqe),f&&t(Wc),w(yx),f&&t(wqe),f&&t(br),w(Lx),w($x),w(QC),w(kx),w(o3),f&&t(Aqe),f&&t(Jc),w(Sx),f&&t(yqe),f&&t(vr),w(Rx),w(Px),w(t3),w(Ix),w(m3),f&&t(Lqe),f&&t(Zc),w(qx),f&&t(xqe),f&&t(Fr),w(Nx),w(Dx),w(h3),w(Gx),w(u3),f&&t($qe),f&&t(rf),w(Ox),f&&t(kqe),f&&t(Tr),w(Vx),w(zx),w(b3),w(Qx),w(T3),f&&t(Sqe),f&&t(nf),w(Hx),f&&t(Rqe),f&&t(Mr),w(Ux),w(Yx),w(E3),w(Kx),w(w3)}}}const kyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Syt(A){return SAt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jyt extends LAt{constructor(g){super();xAt(this,g,Syt,$yt,$At,{})}}export{jyt as default,kyt as metadata};
