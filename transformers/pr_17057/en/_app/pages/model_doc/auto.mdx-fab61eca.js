import{S as l6t,i as i6t,s as d6t,e as a,k as l,w as F,t as o,M as c6t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as f6t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as INr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function m6t(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,WA,gf,qe,Xe,ci,An,HA,yn,Ln,UA,fi,xn,JA,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),WA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),HA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),UA=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),JA=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var h$=s(p);m=r(h$,"NewModelConfig"),h$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var p$=s(li);mf=r(p$,"model_type"),p$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var u$=s(ii);di=r(u$,'"new-model"'),u$.forEach(t),WA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),HA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var _$=s(yn);Ln=r(_$,"PreTrainedModel"),_$.forEach(t),UA=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),JA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var b$=s(mi);hf=r(b$,"NewModelConfig"),b$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,WA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,HA),e(qe,yn),e(yn,Ln),e(qe,UA),e(qe,fi),e(fi,xn),e(qe,JA),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function g6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function u6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function b6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z6t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,WA,gf,qe,Xe,ci,An,HA,yn,Ln,UA,fi,xn,JA,mi,hf,Ma,ze,Ae,h$,gi,p$,u$,Eo,Ea,_$,pf,b$,eDe,VPe,hi,uf,eee,YA,oDe,oee,rDe,XPe,$n,tDe,ree,aDe,nDe,tee,sDe,lDe,zPe,KA,QPe,v$,iDe,WPe,_f,HPe,pi,bf,aee,ZA,dDe,nee,cDe,UPe,Co,e6,fDe,o6,mDe,F$,gDe,hDe,pDe,r6,uDe,see,_De,bDe,vDe,Er,t6,FDe,lee,TDe,MDe,ui,EDe,iee,CDe,wDe,dee,ADe,yDe,LDe,A,vf,cee,xDe,$De,T$,kDe,SDe,RDe,Ff,fee,BDe,PDe,M$,IDe,qDe,NDe,Tf,mee,jDe,DDe,E$,GDe,ODe,VDe,Mf,gee,XDe,zDe,C$,QDe,WDe,HDe,Ef,hee,UDe,JDe,w$,YDe,KDe,ZDe,Cf,pee,eGe,oGe,A$,rGe,tGe,aGe,wf,uee,nGe,sGe,y$,lGe,iGe,dGe,Af,_ee,cGe,fGe,L$,mGe,gGe,hGe,yf,bee,pGe,uGe,x$,_Ge,bGe,vGe,Lf,vee,FGe,TGe,$$,MGe,EGe,CGe,xf,Fee,wGe,AGe,k$,yGe,LGe,xGe,$f,Tee,$Ge,kGe,S$,SGe,RGe,BGe,kf,Mee,PGe,IGe,R$,qGe,NGe,jGe,Sf,Eee,DGe,GGe,B$,OGe,VGe,XGe,Rf,Cee,zGe,QGe,P$,WGe,HGe,UGe,Bf,wee,JGe,YGe,I$,KGe,ZGe,eOe,Pf,Aee,oOe,rOe,q$,tOe,aOe,nOe,If,yee,sOe,lOe,N$,iOe,dOe,cOe,qf,Lee,fOe,mOe,j$,gOe,hOe,pOe,Nf,xee,uOe,_Oe,D$,bOe,vOe,FOe,jf,$ee,TOe,MOe,G$,EOe,COe,wOe,Df,kee,AOe,yOe,O$,LOe,xOe,$Oe,Gf,See,kOe,SOe,V$,ROe,BOe,POe,Of,Ree,IOe,qOe,X$,NOe,jOe,DOe,Vf,Bee,GOe,OOe,z$,VOe,XOe,zOe,Xf,Pee,QOe,WOe,Q$,HOe,UOe,JOe,zf,Iee,YOe,KOe,W$,ZOe,eVe,oVe,Qf,qee,rVe,tVe,H$,aVe,nVe,sVe,Wf,Nee,lVe,iVe,U$,dVe,cVe,fVe,Hf,jee,mVe,gVe,J$,hVe,pVe,uVe,Uf,Dee,_Ve,bVe,Y$,vVe,FVe,TVe,Jf,Gee,MVe,EVe,K$,CVe,wVe,AVe,Yf,Oee,yVe,LVe,Z$,xVe,$Ve,kVe,Kf,Vee,SVe,RVe,ek,BVe,PVe,IVe,Zf,Xee,qVe,NVe,ok,jVe,DVe,GVe,em,zee,OVe,VVe,rk,XVe,zVe,QVe,om,Qee,WVe,HVe,tk,UVe,JVe,YVe,rm,Wee,KVe,ZVe,ak,eXe,oXe,rXe,tm,Hee,tXe,aXe,nk,nXe,sXe,lXe,am,Uee,iXe,dXe,sk,cXe,fXe,mXe,nm,Jee,gXe,hXe,lk,pXe,uXe,_Xe,sm,Yee,bXe,vXe,ik,FXe,TXe,MXe,lm,Kee,EXe,CXe,dk,wXe,AXe,yXe,im,Zee,LXe,xXe,ck,$Xe,kXe,SXe,dm,eoe,RXe,BXe,fk,PXe,IXe,qXe,cm,ooe,NXe,jXe,mk,DXe,GXe,OXe,fm,roe,VXe,XXe,gk,zXe,QXe,WXe,mm,toe,HXe,UXe,hk,JXe,YXe,KXe,gm,aoe,ZXe,eze,pk,oze,rze,tze,hm,noe,aze,nze,uk,sze,lze,ize,pm,soe,dze,cze,_k,fze,mze,gze,um,loe,hze,pze,bk,uze,_ze,bze,_m,ioe,vze,Fze,vk,Tze,Mze,Eze,bm,doe,Cze,wze,Fk,Aze,yze,Lze,vm,coe,xze,$ze,Tk,kze,Sze,Rze,Fm,foe,Bze,Pze,Mk,Ize,qze,Nze,Tm,moe,jze,Dze,Ek,Gze,Oze,Vze,Mm,goe,Xze,zze,Ck,Qze,Wze,Hze,Em,hoe,Uze,Jze,wk,Yze,Kze,Zze,Cm,poe,eQe,oQe,Ak,rQe,tQe,aQe,wm,uoe,nQe,sQe,yk,lQe,iQe,dQe,Am,_oe,cQe,fQe,Lk,mQe,gQe,hQe,ym,boe,pQe,uQe,xk,_Qe,bQe,vQe,Lm,voe,FQe,TQe,$k,MQe,EQe,CQe,xm,Foe,wQe,AQe,kk,yQe,LQe,xQe,$m,Toe,$Qe,kQe,Sk,SQe,RQe,BQe,km,Moe,PQe,IQe,Rk,qQe,NQe,jQe,Sm,Eoe,DQe,GQe,Bk,OQe,VQe,XQe,Rm,Coe,zQe,QQe,Pk,WQe,HQe,UQe,Bm,woe,JQe,YQe,Ik,KQe,ZQe,eWe,Pm,Aoe,oWe,rWe,qk,tWe,aWe,nWe,Im,yoe,sWe,lWe,Nk,iWe,dWe,cWe,qm,Loe,fWe,mWe,jk,gWe,hWe,pWe,Nm,xoe,uWe,_We,Dk,bWe,vWe,FWe,jm,$oe,TWe,MWe,Gk,EWe,CWe,wWe,Dm,koe,AWe,yWe,Ok,LWe,xWe,$We,Gm,Soe,kWe,SWe,Vk,RWe,BWe,PWe,Om,Roe,IWe,qWe,Xk,NWe,jWe,DWe,Vm,Boe,GWe,OWe,zk,VWe,XWe,zWe,Xm,Poe,QWe,WWe,Qk,HWe,UWe,JWe,zm,Ioe,YWe,KWe,Wk,ZWe,eHe,oHe,Qm,qoe,rHe,tHe,Hk,aHe,nHe,sHe,Wm,Noe,lHe,iHe,Uk,dHe,cHe,fHe,Hm,joe,mHe,gHe,Jk,hHe,pHe,uHe,Um,Doe,_He,bHe,Yk,vHe,FHe,THe,Jm,Goe,MHe,EHe,Kk,CHe,wHe,AHe,Ym,Ooe,yHe,LHe,Zk,xHe,$He,kHe,Km,Voe,SHe,RHe,eS,BHe,PHe,IHe,Zm,Xoe,qHe,NHe,oS,jHe,DHe,GHe,eg,zoe,OHe,VHe,rS,XHe,zHe,QHe,og,Qoe,WHe,HHe,tS,UHe,JHe,YHe,rg,Woe,KHe,ZHe,aS,eUe,oUe,rUe,tg,Hoe,tUe,aUe,nS,nUe,sUe,lUe,ag,Uoe,iUe,dUe,sS,cUe,fUe,mUe,ng,Joe,gUe,hUe,lS,pUe,uUe,_Ue,sg,Yoe,bUe,vUe,iS,FUe,TUe,MUe,lg,Koe,EUe,CUe,dS,wUe,AUe,yUe,ig,Zoe,LUe,xUe,cS,$Ue,kUe,SUe,dg,ere,RUe,BUe,fS,PUe,IUe,qUe,cg,ore,NUe,jUe,mS,DUe,GUe,OUe,fg,rre,VUe,XUe,gS,zUe,QUe,WUe,mg,tre,HUe,UUe,hS,JUe,YUe,KUe,gg,are,ZUe,eJe,pS,oJe,rJe,tJe,hg,nre,aJe,nJe,uS,sJe,lJe,iJe,pg,sre,dJe,cJe,_S,fJe,mJe,gJe,ug,hJe,_g,a6,pJe,lre,uJe,JPe,_i,bg,ire,n6,_Je,dre,bJe,YPe,wo,s6,vJe,l6,FJe,bS,TJe,MJe,EJe,i6,CJe,cre,wJe,AJe,yJe,Cr,d6,LJe,fre,xJe,$Je,Ca,kJe,mre,SJe,RJe,gre,BJe,PJe,hre,IJe,qJe,NJe,k,kn,pre,jJe,DJe,vS,GJe,OJe,FS,VJe,XJe,zJe,Sn,ure,QJe,WJe,TS,HJe,UJe,MS,JJe,YJe,KJe,Rn,_re,ZJe,eYe,ES,oYe,rYe,CS,tYe,aYe,nYe,vg,bre,sYe,lYe,wS,iYe,dYe,cYe,Bn,vre,fYe,mYe,AS,gYe,hYe,yS,pYe,uYe,_Ye,Fg,Fre,bYe,vYe,LS,FYe,TYe,MYe,Tg,Tre,EYe,CYe,xS,wYe,AYe,yYe,Mg,Mre,LYe,xYe,$S,$Ye,kYe,SYe,Pn,Ere,RYe,BYe,kS,PYe,IYe,SS,qYe,NYe,jYe,In,Cre,DYe,GYe,RS,OYe,VYe,BS,XYe,zYe,QYe,qn,wre,WYe,HYe,PS,UYe,JYe,IS,YYe,KYe,ZYe,Eg,Are,eKe,oKe,qS,rKe,tKe,aKe,Cg,yre,nKe,sKe,NS,lKe,iKe,dKe,Nn,Lre,cKe,fKe,jS,mKe,gKe,DS,hKe,pKe,uKe,wg,xre,_Ke,bKe,GS,vKe,FKe,TKe,jn,$re,MKe,EKe,OS,CKe,wKe,VS,AKe,yKe,LKe,Dn,kre,xKe,$Ke,XS,kKe,SKe,zS,RKe,BKe,PKe,Gn,Sre,IKe,qKe,QS,NKe,jKe,WS,DKe,GKe,OKe,Ag,Rre,VKe,XKe,HS,zKe,QKe,WKe,On,Bre,HKe,UKe,US,JKe,YKe,JS,KKe,ZKe,eZe,Vn,Pre,oZe,rZe,YS,tZe,aZe,KS,nZe,sZe,lZe,Xn,Ire,iZe,dZe,ZS,cZe,fZe,eR,mZe,gZe,hZe,zn,qre,pZe,uZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,Qn,Nre,MZe,EZe,tR,CZe,wZe,aR,AZe,yZe,LZe,Wn,jre,xZe,$Ze,nR,kZe,SZe,sR,RZe,BZe,PZe,yg,Dre,IZe,qZe,lR,NZe,jZe,DZe,Hn,Gre,GZe,OZe,iR,VZe,XZe,dR,zZe,QZe,WZe,Lg,Ore,HZe,UZe,cR,JZe,YZe,KZe,Un,Vre,ZZe,eeo,fR,oeo,reo,mR,teo,aeo,neo,Jn,Xre,seo,leo,gR,ieo,deo,hR,ceo,feo,meo,Yn,zre,geo,heo,pR,peo,ueo,uR,_eo,beo,veo,Kn,Qre,Feo,Teo,_R,Meo,Eeo,bR,Ceo,weo,Aeo,Zn,Wre,yeo,Leo,vR,xeo,$eo,FR,keo,Seo,Reo,xg,Hre,Beo,Peo,TR,Ieo,qeo,Neo,es,Ure,jeo,Deo,MR,Geo,Oeo,ER,Veo,Xeo,zeo,os,Jre,Qeo,Weo,CR,Heo,Ueo,wR,Jeo,Yeo,Keo,rs,Yre,Zeo,eoo,AR,ooo,roo,yR,too,aoo,noo,ts,Kre,soo,loo,LR,ioo,doo,xR,coo,foo,moo,as,Zre,goo,hoo,$R,poo,uoo,kR,_oo,boo,voo,ns,ete,Foo,Too,SR,Moo,Eoo,RR,Coo,woo,Aoo,$g,ote,yoo,Loo,BR,xoo,$oo,koo,ss,rte,Soo,Roo,PR,Boo,Poo,IR,Ioo,qoo,Noo,kg,tte,joo,Doo,qR,Goo,Ooo,Voo,Sg,ate,Xoo,zoo,NR,Qoo,Woo,Hoo,ls,nte,Uoo,Joo,jR,Yoo,Koo,DR,Zoo,ero,oro,is,ste,rro,tro,GR,aro,nro,OR,sro,lro,iro,ds,lte,dro,cro,VR,fro,mro,XR,gro,hro,pro,Rg,ite,uro,_ro,zR,bro,vro,Fro,cs,dte,Tro,Mro,QR,Ero,Cro,WR,wro,Aro,yro,fs,cte,Lro,xro,HR,$ro,kro,UR,Sro,Rro,Bro,ms,fte,Pro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,gs,mte,Oro,Vro,KR,Xro,zro,ZR,Qro,Wro,Hro,hs,gte,Uro,Jro,eB,Yro,Kro,oB,Zro,eto,oto,Bg,hte,rto,tto,rB,ato,nto,sto,ps,pte,lto,ito,tB,dto,cto,aB,fto,mto,gto,Pg,ute,hto,pto,nB,uto,_to,bto,Ig,_te,vto,Fto,sB,Tto,Mto,Eto,qg,bte,Cto,wto,lB,Ato,yto,Lto,Ng,vte,xto,$to,iB,kto,Sto,Rto,us,Fte,Bto,Pto,dB,Ito,qto,cB,Nto,jto,Dto,jg,Tte,Gto,Oto,fB,Vto,Xto,zto,_s,Mte,Qto,Wto,mB,Hto,Uto,gB,Jto,Yto,Kto,bs,Ete,Zto,eao,hB,oao,rao,pB,tao,aao,nao,vs,Cte,sao,lao,uB,iao,dao,_B,cao,fao,mao,Fs,wte,gao,hao,bB,pao,uao,vB,_ao,bao,vao,Ts,Ate,Fao,Tao,FB,Mao,Eao,TB,Cao,wao,Aao,Ms,yte,yao,Lao,MB,xao,$ao,EB,kao,Sao,Rao,Dg,Lte,Bao,Pao,CB,Iao,qao,Nao,Gg,xte,jao,Dao,wB,Gao,Oao,Vao,Es,$te,Xao,zao,AB,Qao,Wao,yB,Hao,Uao,Jao,Cs,kte,Yao,Kao,LB,Zao,eno,xB,ono,rno,tno,ws,Ste,ano,nno,$B,sno,lno,kB,ino,dno,cno,Og,Rte,fno,mno,SB,gno,hno,pno,Vg,Bte,uno,_no,RB,bno,vno,Fno,Xg,Pte,Tno,Mno,BB,Eno,Cno,wno,As,Ite,Ano,yno,PB,Lno,xno,IB,$no,kno,Sno,zg,qte,Rno,Bno,qB,Pno,Ino,qno,Qg,Nte,Nno,jno,NB,Dno,Gno,Ono,ys,jte,Vno,Xno,jB,zno,Qno,DB,Wno,Hno,Uno,Wg,Dte,Jno,Yno,GB,Kno,Zno,eso,Hg,Gte,oso,rso,OB,tso,aso,nso,Ls,Ote,sso,lso,VB,iso,dso,XB,cso,fso,mso,xs,Vte,gso,hso,zB,pso,uso,QB,_so,bso,vso,$s,Xte,Fso,Tso,WB,Mso,Eso,HB,Cso,wso,Aso,ks,zte,yso,Lso,UB,xso,$so,JB,kso,Sso,Rso,Ug,Bso,Jg,c6,Pso,Qte,Iso,KPe,bi,Yg,Wte,f6,qso,Hte,Nso,ZPe,Ao,m6,jso,g6,Dso,YB,Gso,Oso,Vso,h6,Xso,Ute,zso,Qso,Wso,Qe,p6,Hso,Jte,Uso,Jso,wa,Yso,Yte,Kso,Zso,Kte,elo,olo,Zte,rlo,tlo,alo,oe,Kg,eae,nlo,slo,KB,llo,ilo,dlo,Zg,oae,clo,flo,ZB,mlo,glo,hlo,eh,rae,plo,ulo,eP,_lo,blo,vlo,oh,tae,Flo,Tlo,oP,Mlo,Elo,Clo,rh,aae,wlo,Alo,rP,ylo,Llo,xlo,th,nae,$lo,klo,tP,Slo,Rlo,Blo,ah,sae,Plo,Ilo,aP,qlo,Nlo,jlo,nh,lae,Dlo,Glo,nP,Olo,Vlo,Xlo,sh,iae,zlo,Qlo,sP,Wlo,Hlo,Ulo,lh,dae,Jlo,Ylo,lP,Klo,Zlo,eio,ih,cae,oio,rio,iP,tio,aio,nio,dh,fae,sio,lio,dP,iio,dio,cio,ch,mae,fio,mio,cP,gio,hio,pio,fh,gae,uio,_io,fP,bio,vio,Fio,mh,hae,Tio,Mio,mP,Eio,Cio,wio,gh,pae,Aio,yio,gP,Lio,xio,$io,hh,uae,kio,Sio,hP,Rio,Bio,Pio,ph,_ae,Iio,qio,pP,Nio,jio,Dio,uh,bae,Gio,Oio,uP,Vio,Xio,zio,_h,vae,Qio,Wio,_P,Hio,Uio,Jio,bh,Fae,Yio,Kio,bP,Zio,edo,odo,vh,Tae,rdo,tdo,vP,ado,ndo,sdo,Fh,Mae,ldo,ido,FP,ddo,cdo,fdo,Th,Eae,mdo,gdo,TP,hdo,pdo,udo,Mh,Cae,_do,bdo,MP,vdo,Fdo,Tdo,Eh,Mdo,Ch,Edo,wh,u6,Cdo,wae,wdo,eIe,vi,Ah,Aae,_6,Ado,yae,ydo,oIe,yo,b6,Ldo,v6,xdo,EP,$do,kdo,Sdo,F6,Rdo,Lae,Bdo,Pdo,Ido,We,T6,qdo,xae,Ndo,jdo,Fi,Ddo,$ae,Gdo,Odo,kae,Vdo,Xdo,zdo,be,yh,Sae,Qdo,Wdo,CP,Hdo,Udo,Jdo,Lh,Rae,Ydo,Kdo,Bae,Zdo,eco,oco,xh,Pae,rco,tco,wP,aco,nco,sco,$h,Iae,lco,ico,AP,dco,cco,fco,kh,qae,mco,gco,yP,hco,pco,uco,Sh,Nae,_co,bco,LP,vco,Fco,Tco,Rh,jae,Mco,Eco,xP,Cco,wco,Aco,Bh,Dae,yco,Lco,$P,xco,$co,kco,Ph,Gae,Sco,Rco,kP,Bco,Pco,Ico,Ih,Oae,qco,Nco,SP,jco,Dco,Gco,qh,Vae,Oco,Vco,RP,Xco,zco,Qco,Nh,Xae,Wco,Hco,BP,Uco,Jco,Yco,jh,zae,Kco,Zco,PP,efo,ofo,rfo,Dh,Qae,tfo,afo,IP,nfo,sfo,lfo,Gh,Wae,ifo,dfo,qP,cfo,ffo,mfo,Oh,gfo,Vh,hfo,Xh,M6,pfo,Hae,ufo,rIe,Ti,zh,Uae,E6,_fo,Jae,bfo,tIe,Lo,C6,vfo,Mi,Ffo,NP,Tfo,Mfo,jP,Efo,Cfo,wfo,w6,Afo,Yae,yfo,Lfo,xfo,ot,A6,$fo,Kae,kfo,Sfo,Ei,Rfo,Zae,Bfo,Pfo,DP,Ifo,qfo,Nfo,Qh,jfo,He,y6,Dfo,ene,Gfo,Ofo,Aa,Vfo,one,Xfo,zfo,rne,Qfo,Wfo,tne,Hfo,Ufo,Jfo,x,Wh,ane,Yfo,Kfo,GP,Zfo,emo,omo,Hh,nne,rmo,tmo,OP,amo,nmo,smo,Uh,sne,lmo,imo,VP,dmo,cmo,fmo,Jh,lne,mmo,gmo,XP,hmo,pmo,umo,Yh,ine,_mo,bmo,zP,vmo,Fmo,Tmo,Kh,dne,Mmo,Emo,QP,Cmo,wmo,Amo,Zh,cne,ymo,Lmo,WP,xmo,$mo,kmo,ep,fne,Smo,Rmo,HP,Bmo,Pmo,Imo,op,mne,qmo,Nmo,UP,jmo,Dmo,Gmo,rp,gne,Omo,Vmo,JP,Xmo,zmo,Qmo,tp,hne,Wmo,Hmo,YP,Umo,Jmo,Ymo,ap,pne,Kmo,Zmo,KP,ego,ogo,rgo,np,une,tgo,ago,ZP,ngo,sgo,lgo,sp,_ne,igo,dgo,eI,cgo,fgo,mgo,lp,bne,ggo,hgo,oI,pgo,ugo,_go,ip,vne,bgo,vgo,rI,Fgo,Tgo,Mgo,dp,Fne,Ego,Cgo,tI,wgo,Ago,ygo,cp,Tne,Lgo,xgo,aI,$go,kgo,Sgo,fp,Mne,Rgo,Bgo,nI,Pgo,Igo,qgo,mp,Ene,Ngo,jgo,sI,Dgo,Ggo,Ogo,gp,Cne,Vgo,Xgo,lI,zgo,Qgo,Wgo,hp,wne,Hgo,Ugo,iI,Jgo,Ygo,Kgo,pp,Ane,Zgo,eho,dI,oho,rho,tho,up,yne,aho,nho,cI,sho,lho,iho,_p,Lne,dho,cho,fI,fho,mho,gho,bp,xne,hho,pho,mI,uho,_ho,bho,vp,$ne,vho,Fho,gI,Tho,Mho,Eho,Fp,kne,Cho,who,hI,Aho,yho,Lho,Tp,Sne,xho,$ho,pI,kho,Sho,Rho,Mp,Rne,Bho,Pho,uI,Iho,qho,Nho,Ep,Bne,jho,Dho,_I,Gho,Oho,Vho,Ss,Pne,Xho,zho,bI,Qho,Who,vI,Hho,Uho,Jho,Cp,Ine,Yho,Kho,FI,Zho,epo,opo,wp,qne,rpo,tpo,TI,apo,npo,spo,Ap,Nne,lpo,ipo,MI,dpo,cpo,fpo,yp,jne,mpo,gpo,EI,hpo,ppo,upo,Lp,Dne,_po,bpo,CI,vpo,Fpo,Tpo,xp,Gne,Mpo,Epo,wI,Cpo,wpo,Apo,$p,One,ypo,Lpo,AI,xpo,$po,kpo,kp,Vne,Spo,Rpo,yI,Bpo,Ppo,Ipo,Sp,Xne,qpo,Npo,LI,jpo,Dpo,Gpo,Rp,zne,Opo,Vpo,xI,Xpo,zpo,Qpo,Bp,Qne,Wpo,Hpo,$I,Upo,Jpo,Ypo,Pp,Wne,Kpo,Zpo,kI,euo,ouo,ruo,Ip,Hne,tuo,auo,SI,nuo,suo,luo,qp,Une,iuo,duo,RI,cuo,fuo,muo,Np,Jne,guo,huo,BI,puo,uuo,_uo,jp,Yne,buo,vuo,PI,Fuo,Tuo,Muo,Dp,Kne,Euo,Cuo,II,wuo,Auo,yuo,Gp,Zne,Luo,xuo,qI,$uo,kuo,Suo,Op,ese,Ruo,Buo,NI,Puo,Iuo,quo,Vp,ose,Nuo,juo,jI,Duo,Guo,Ouo,Xp,rse,Vuo,Xuo,DI,zuo,Quo,Wuo,zp,tse,Huo,Uuo,GI,Juo,Yuo,Kuo,Qp,ase,Zuo,e_o,OI,o_o,r_o,t_o,Wp,nse,a_o,n_o,VI,s_o,l_o,i_o,Hp,sse,d_o,c_o,XI,f_o,m_o,g_o,Up,lse,h_o,p_o,zI,u_o,__o,b_o,Jp,ise,v_o,F_o,QI,T_o,M_o,E_o,Yp,dse,C_o,w_o,WI,A_o,y_o,L_o,Kp,cse,x_o,$_o,HI,k_o,S_o,R_o,Zp,fse,B_o,P_o,UI,I_o,q_o,N_o,eu,mse,j_o,D_o,JI,G_o,O_o,V_o,ou,gse,X_o,z_o,YI,Q_o,W_o,H_o,ru,hse,U_o,J_o,KI,Y_o,K_o,Z_o,tu,pse,e1o,o1o,ZI,r1o,t1o,a1o,au,use,n1o,s1o,eq,l1o,i1o,d1o,nu,_se,c1o,f1o,oq,m1o,g1o,h1o,su,bse,p1o,u1o,rq,_1o,b1o,v1o,lu,vse,F1o,T1o,tq,M1o,E1o,C1o,iu,Fse,w1o,A1o,aq,y1o,L1o,x1o,du,Tse,$1o,k1o,nq,S1o,R1o,B1o,cu,Mse,P1o,I1o,sq,q1o,N1o,j1o,fu,Ese,D1o,G1o,lq,O1o,V1o,X1o,mu,Cse,z1o,Q1o,iq,W1o,H1o,U1o,gu,wse,J1o,Y1o,dq,K1o,Z1o,e7o,hu,Ase,o7o,r7o,cq,t7o,a7o,n7o,pu,yse,s7o,l7o,fq,i7o,d7o,c7o,uu,Lse,f7o,m7o,mq,g7o,h7o,p7o,_u,xse,u7o,_7o,gq,b7o,v7o,F7o,bu,$se,T7o,M7o,hq,E7o,C7o,w7o,vu,kse,A7o,y7o,pq,L7o,x7o,$7o,Fu,Sse,k7o,S7o,uq,R7o,B7o,P7o,Tu,Rse,I7o,q7o,_q,N7o,j7o,D7o,Mu,Bse,G7o,O7o,bq,V7o,X7o,z7o,Eu,Pse,Q7o,W7o,vq,H7o,U7o,J7o,Cu,Ise,Y7o,K7o,Fq,Z7o,ebo,obo,wu,qse,rbo,tbo,Tq,abo,nbo,sbo,Au,Nse,lbo,ibo,Mq,dbo,cbo,fbo,yu,jse,mbo,gbo,Eq,hbo,pbo,ubo,Lu,Dse,_bo,bbo,Cq,vbo,Fbo,Tbo,xu,Gse,Mbo,Ebo,wq,Cbo,wbo,Abo,$u,Ose,ybo,Lbo,Aq,xbo,$bo,kbo,ku,Vse,Sbo,Rbo,yq,Bbo,Pbo,Ibo,Su,Xse,qbo,Nbo,Lq,jbo,Dbo,Gbo,Ru,zse,Obo,Vbo,xq,Xbo,zbo,Qbo,Bu,Qse,Wbo,Hbo,$q,Ubo,Jbo,Ybo,Pu,Kbo,Wse,Zbo,e2o,Hse,o2o,r2o,Iu,aIe,Ci,qu,Use,L6,t2o,Jse,a2o,nIe,xo,x6,n2o,wi,s2o,kq,l2o,i2o,Sq,d2o,c2o,f2o,$6,m2o,Yse,g2o,h2o,p2o,rt,k6,u2o,Kse,_2o,b2o,Ai,v2o,Zse,F2o,T2o,Rq,M2o,E2o,C2o,Nu,w2o,Ue,S6,A2o,ele,y2o,L2o,ya,x2o,ole,$2o,k2o,rle,S2o,R2o,tle,B2o,P2o,I2o,G,ju,ale,q2o,N2o,Bq,j2o,D2o,G2o,Du,nle,O2o,V2o,Pq,X2o,z2o,Q2o,Gu,sle,W2o,H2o,Iq,U2o,J2o,Y2o,Ou,lle,K2o,Z2o,qq,e5o,o5o,r5o,Vu,ile,t5o,a5o,Nq,n5o,s5o,l5o,Xu,dle,i5o,d5o,jq,c5o,f5o,m5o,zu,cle,g5o,h5o,Dq,p5o,u5o,_5o,Qu,fle,b5o,v5o,Gq,F5o,T5o,M5o,Wu,mle,E5o,C5o,Oq,w5o,A5o,y5o,Hu,gle,L5o,x5o,Vq,$5o,k5o,S5o,Uu,hle,R5o,B5o,Xq,P5o,I5o,q5o,Ju,ple,N5o,j5o,zq,D5o,G5o,O5o,Yu,ule,V5o,X5o,Qq,z5o,Q5o,W5o,Ku,_le,H5o,U5o,Wq,J5o,Y5o,K5o,Zu,ble,Z5o,evo,Hq,ovo,rvo,tvo,e_,vle,avo,nvo,Uq,svo,lvo,ivo,o_,Fle,dvo,cvo,Jq,fvo,mvo,gvo,r_,Tle,hvo,pvo,Yq,uvo,_vo,bvo,t_,Mle,vvo,Fvo,Kq,Tvo,Mvo,Evo,a_,Ele,Cvo,wvo,Zq,Avo,yvo,Lvo,n_,Cle,xvo,$vo,eN,kvo,Svo,Rvo,s_,wle,Bvo,Pvo,oN,Ivo,qvo,Nvo,l_,Ale,jvo,Dvo,rN,Gvo,Ovo,Vvo,i_,yle,Xvo,zvo,tN,Qvo,Wvo,Hvo,d_,Lle,Uvo,Jvo,aN,Yvo,Kvo,Zvo,c_,xle,eFo,oFo,nN,rFo,tFo,aFo,f_,$le,nFo,sFo,sN,lFo,iFo,dFo,m_,kle,cFo,fFo,lN,mFo,gFo,hFo,g_,Sle,pFo,uFo,iN,_Fo,bFo,vFo,h_,Rle,FFo,TFo,dN,MFo,EFo,CFo,p_,Ble,wFo,AFo,cN,yFo,LFo,xFo,u_,Ple,$Fo,kFo,fN,SFo,RFo,BFo,__,Ile,PFo,IFo,mN,qFo,NFo,jFo,b_,qle,DFo,GFo,gN,OFo,VFo,XFo,v_,Nle,zFo,QFo,hN,WFo,HFo,UFo,F_,jle,JFo,YFo,pN,KFo,ZFo,e0o,T_,Dle,o0o,r0o,uN,t0o,a0o,n0o,M_,Gle,s0o,l0o,_N,i0o,d0o,c0o,E_,Ole,f0o,m0o,bN,g0o,h0o,p0o,C_,Vle,u0o,_0o,vN,b0o,v0o,F0o,w_,T0o,Xle,M0o,E0o,zle,C0o,w0o,A_,sIe,yi,y_,Qle,R6,A0o,Wle,y0o,lIe,$o,B6,L0o,Li,x0o,FN,$0o,k0o,TN,S0o,R0o,B0o,P6,P0o,Hle,I0o,q0o,N0o,tt,I6,j0o,Ule,D0o,G0o,xi,O0o,Jle,V0o,X0o,MN,z0o,Q0o,W0o,L_,H0o,Je,q6,U0o,Yle,J0o,Y0o,La,K0o,Kle,Z0o,eTo,Zle,oTo,rTo,eie,tTo,aTo,nTo,z,x_,oie,sTo,lTo,EN,iTo,dTo,cTo,$_,rie,fTo,mTo,CN,gTo,hTo,pTo,k_,tie,uTo,_To,wN,bTo,vTo,FTo,S_,aie,TTo,MTo,AN,ETo,CTo,wTo,R_,nie,ATo,yTo,yN,LTo,xTo,$To,B_,sie,kTo,STo,LN,RTo,BTo,PTo,P_,lie,ITo,qTo,xN,NTo,jTo,DTo,I_,iie,GTo,OTo,$N,VTo,XTo,zTo,q_,die,QTo,WTo,kN,HTo,UTo,JTo,N_,cie,YTo,KTo,SN,ZTo,eMo,oMo,j_,fie,rMo,tMo,RN,aMo,nMo,sMo,D_,mie,lMo,iMo,BN,dMo,cMo,fMo,G_,gie,mMo,gMo,PN,hMo,pMo,uMo,O_,hie,_Mo,bMo,IN,vMo,FMo,TMo,V_,pie,MMo,EMo,qN,CMo,wMo,AMo,X_,uie,yMo,LMo,NN,xMo,$Mo,kMo,z_,_ie,SMo,RMo,jN,BMo,PMo,IMo,Q_,bie,qMo,NMo,DN,jMo,DMo,GMo,W_,vie,OMo,VMo,GN,XMo,zMo,QMo,H_,Fie,WMo,HMo,ON,UMo,JMo,YMo,U_,Tie,KMo,ZMo,VN,e4o,o4o,r4o,J_,Mie,t4o,a4o,XN,n4o,s4o,l4o,Y_,Eie,i4o,d4o,zN,c4o,f4o,m4o,K_,Cie,g4o,h4o,QN,p4o,u4o,_4o,Z_,wie,b4o,v4o,WN,F4o,T4o,M4o,e1,Aie,E4o,C4o,HN,w4o,A4o,y4o,o1,yie,L4o,x4o,UN,$4o,k4o,S4o,r1,Lie,R4o,B4o,JN,P4o,I4o,q4o,t1,xie,N4o,j4o,YN,D4o,G4o,O4o,a1,$ie,V4o,X4o,KN,z4o,Q4o,W4o,n1,kie,H4o,U4o,ZN,J4o,Y4o,K4o,s1,Sie,Z4o,eEo,ej,oEo,rEo,tEo,l1,Rie,aEo,nEo,oj,sEo,lEo,iEo,i1,Bie,dEo,cEo,rj,fEo,mEo,gEo,d1,Pie,hEo,pEo,tj,uEo,_Eo,bEo,c1,Iie,vEo,FEo,aj,TEo,MEo,EEo,f1,CEo,qie,wEo,AEo,Nie,yEo,LEo,m1,iIe,$i,g1,jie,N6,xEo,Die,$Eo,dIe,ko,j6,kEo,ki,SEo,nj,REo,BEo,sj,PEo,IEo,qEo,D6,NEo,Gie,jEo,DEo,GEo,at,G6,OEo,Oie,VEo,XEo,Si,zEo,Vie,QEo,WEo,lj,HEo,UEo,JEo,h1,YEo,Ye,O6,KEo,Xie,ZEo,eCo,xa,oCo,zie,rCo,tCo,Qie,aCo,nCo,Wie,sCo,lCo,iCo,Q,p1,Hie,dCo,cCo,ij,fCo,mCo,gCo,u1,Uie,hCo,pCo,dj,uCo,_Co,bCo,_1,Jie,vCo,FCo,cj,TCo,MCo,ECo,b1,Yie,CCo,wCo,fj,ACo,yCo,LCo,v1,Kie,xCo,$Co,mj,kCo,SCo,RCo,F1,Zie,BCo,PCo,gj,ICo,qCo,NCo,T1,ede,jCo,DCo,hj,GCo,OCo,VCo,M1,ode,XCo,zCo,pj,QCo,WCo,HCo,E1,rde,UCo,JCo,uj,YCo,KCo,ZCo,C1,tde,e3o,o3o,_j,r3o,t3o,a3o,w1,ade,n3o,s3o,bj,l3o,i3o,d3o,A1,nde,c3o,f3o,vj,m3o,g3o,h3o,y1,sde,p3o,u3o,Fj,_3o,b3o,v3o,L1,lde,F3o,T3o,Tj,M3o,E3o,C3o,x1,ide,w3o,A3o,Mj,y3o,L3o,x3o,$1,dde,$3o,k3o,Ej,S3o,R3o,B3o,k1,cde,P3o,I3o,Cj,q3o,N3o,j3o,S1,fde,D3o,G3o,wj,O3o,V3o,X3o,R1,mde,z3o,Q3o,Aj,W3o,H3o,U3o,B1,gde,J3o,Y3o,yj,K3o,Z3o,ewo,P1,hde,owo,rwo,Lj,two,awo,nwo,I1,pde,swo,lwo,xj,iwo,dwo,cwo,q1,ude,fwo,mwo,$j,gwo,hwo,pwo,N1,_de,uwo,_wo,kj,bwo,vwo,Fwo,j1,bde,Two,Mwo,Sj,Ewo,Cwo,wwo,D1,vde,Awo,ywo,Rj,Lwo,xwo,$wo,G1,Fde,kwo,Swo,Bj,Rwo,Bwo,Pwo,O1,Tde,Iwo,qwo,Pj,Nwo,jwo,Dwo,V1,Mde,Gwo,Owo,Ij,Vwo,Xwo,zwo,X1,Ede,Qwo,Wwo,qj,Hwo,Uwo,Jwo,z1,Cde,Ywo,Kwo,wde,Zwo,eAo,oAo,Q1,Ade,rAo,tAo,Nj,aAo,nAo,sAo,W1,yde,lAo,iAo,jj,dAo,cAo,fAo,H1,Lde,mAo,gAo,Dj,hAo,pAo,uAo,U1,xde,_Ao,bAo,Gj,vAo,FAo,TAo,J1,MAo,$de,EAo,CAo,kde,wAo,AAo,Y1,cIe,Ri,K1,Sde,V6,yAo,Rde,LAo,fIe,So,X6,xAo,Bi,$Ao,Oj,kAo,SAo,Vj,RAo,BAo,PAo,z6,IAo,Bde,qAo,NAo,jAo,nt,Q6,DAo,Pde,GAo,OAo,Pi,VAo,Ide,XAo,zAo,Xj,QAo,WAo,HAo,Z1,UAo,Ke,W6,JAo,qde,YAo,KAo,$a,ZAo,Nde,e6o,o6o,jde,r6o,t6o,Dde,a6o,n6o,s6o,he,e7,Gde,l6o,i6o,zj,d6o,c6o,f6o,o7,Ode,m6o,g6o,Qj,h6o,p6o,u6o,r7,Vde,_6o,b6o,Wj,v6o,F6o,T6o,t7,Xde,M6o,E6o,Hj,C6o,w6o,A6o,a7,zde,y6o,L6o,Uj,x6o,$6o,k6o,n7,Qde,S6o,R6o,Jj,B6o,P6o,I6o,s7,Wde,q6o,N6o,Yj,j6o,D6o,G6o,l7,Hde,O6o,V6o,Kj,X6o,z6o,Q6o,i7,Ude,W6o,H6o,Zj,U6o,J6o,Y6o,d7,Jde,K6o,Z6o,eD,eyo,oyo,ryo,c7,Yde,tyo,ayo,oD,nyo,syo,lyo,f7,Kde,iyo,dyo,rD,cyo,fyo,myo,m7,Zde,gyo,hyo,tD,pyo,uyo,_yo,g7,ece,byo,vyo,aD,Fyo,Tyo,Myo,h7,oce,Eyo,Cyo,nD,wyo,Ayo,yyo,p7,rce,Lyo,xyo,sD,$yo,kyo,Syo,u7,tce,Ryo,Byo,lD,Pyo,Iyo,qyo,_7,Nyo,ace,jyo,Dyo,nce,Gyo,Oyo,b7,mIe,Ii,v7,sce,H6,Vyo,lce,Xyo,gIe,Ro,U6,zyo,qi,Qyo,iD,Wyo,Hyo,dD,Uyo,Jyo,Yyo,J6,Kyo,ice,Zyo,eLo,oLo,st,Y6,rLo,dce,tLo,aLo,Ni,nLo,cce,sLo,lLo,cD,iLo,dLo,cLo,F7,fLo,Ze,K6,mLo,fce,gLo,hLo,ka,pLo,mce,uLo,_Lo,gce,bLo,vLo,hce,FLo,TLo,MLo,q,T7,pce,ELo,CLo,fD,wLo,ALo,yLo,M7,uce,LLo,xLo,mD,$Lo,kLo,SLo,E7,_ce,RLo,BLo,gD,PLo,ILo,qLo,C7,bce,NLo,jLo,hD,DLo,GLo,OLo,w7,vce,VLo,XLo,pD,zLo,QLo,WLo,A7,Fce,HLo,ULo,uD,JLo,YLo,KLo,y7,Tce,ZLo,e8o,_D,o8o,r8o,t8o,L7,Mce,a8o,n8o,bD,s8o,l8o,i8o,x7,Ece,d8o,c8o,vD,f8o,m8o,g8o,$7,Cce,h8o,p8o,FD,u8o,_8o,b8o,k7,wce,v8o,F8o,TD,T8o,M8o,E8o,S7,Ace,C8o,w8o,MD,A8o,y8o,L8o,R7,yce,x8o,$8o,ED,k8o,S8o,R8o,B7,Lce,B8o,P8o,CD,I8o,q8o,N8o,P7,xce,j8o,D8o,wD,G8o,O8o,V8o,I7,$ce,X8o,z8o,AD,Q8o,W8o,H8o,q7,kce,U8o,J8o,yD,Y8o,K8o,Z8o,N7,Sce,exo,oxo,LD,rxo,txo,axo,j7,Rce,nxo,sxo,xD,lxo,ixo,dxo,D7,Bce,cxo,fxo,$D,mxo,gxo,hxo,G7,Pce,pxo,uxo,kD,_xo,bxo,vxo,O7,Ice,Fxo,Txo,SD,Mxo,Exo,Cxo,V7,qce,wxo,Axo,RD,yxo,Lxo,xxo,X7,Nce,$xo,kxo,BD,Sxo,Rxo,Bxo,z7,jce,Pxo,Ixo,PD,qxo,Nxo,jxo,Q7,Dce,Dxo,Gxo,ID,Oxo,Vxo,Xxo,W7,Gce,zxo,Qxo,qD,Wxo,Hxo,Uxo,H7,Oce,Jxo,Yxo,ND,Kxo,Zxo,e9o,U7,Vce,o9o,r9o,jD,t9o,a9o,n9o,J7,Xce,s9o,l9o,DD,i9o,d9o,c9o,Y7,zce,f9o,m9o,GD,g9o,h9o,p9o,K7,Qce,u9o,_9o,OD,b9o,v9o,F9o,Z7,Wce,T9o,M9o,VD,E9o,C9o,w9o,eb,Hce,A9o,y9o,XD,L9o,x9o,$9o,ob,Uce,k9o,S9o,zD,R9o,B9o,P9o,rb,Jce,I9o,q9o,QD,N9o,j9o,D9o,tb,Yce,G9o,O9o,WD,V9o,X9o,z9o,ab,Kce,Q9o,W9o,HD,H9o,U9o,J9o,nb,Zce,Y9o,K9o,UD,Z9o,e$o,o$o,sb,efe,r$o,t$o,JD,a$o,n$o,s$o,lb,ofe,l$o,i$o,YD,d$o,c$o,f$o,ib,rfe,m$o,g$o,KD,h$o,p$o,u$o,db,tfe,_$o,b$o,ZD,v$o,F$o,T$o,cb,afe,M$o,E$o,eG,C$o,w$o,A$o,fb,nfe,y$o,L$o,oG,x$o,$$o,k$o,mb,sfe,S$o,R$o,rG,B$o,P$o,I$o,gb,lfe,q$o,N$o,tG,j$o,D$o,G$o,hb,O$o,ife,V$o,X$o,dfe,z$o,Q$o,pb,hIe,ji,ub,cfe,Z6,W$o,ffe,H$o,pIe,Bo,ey,U$o,Di,J$o,aG,Y$o,K$o,nG,Z$o,eko,oko,oy,rko,mfe,tko,ako,nko,lt,ry,sko,gfe,lko,iko,Gi,dko,hfe,cko,fko,sG,mko,gko,hko,_b,pko,eo,ty,uko,pfe,_ko,bko,Sa,vko,ufe,Fko,Tko,_fe,Mko,Eko,bfe,Cko,wko,Ako,Y,bb,vfe,yko,Lko,lG,xko,$ko,kko,vb,Ffe,Sko,Rko,iG,Bko,Pko,Iko,Fb,Tfe,qko,Nko,dG,jko,Dko,Gko,Tb,Mfe,Oko,Vko,cG,Xko,zko,Qko,Mb,Efe,Wko,Hko,fG,Uko,Jko,Yko,Eb,Cfe,Kko,Zko,mG,eSo,oSo,rSo,Cb,wfe,tSo,aSo,gG,nSo,sSo,lSo,wb,Afe,iSo,dSo,hG,cSo,fSo,mSo,Ab,yfe,gSo,hSo,pG,pSo,uSo,_So,yb,Lfe,bSo,vSo,uG,FSo,TSo,MSo,Lb,xfe,ESo,CSo,_G,wSo,ASo,ySo,xb,$fe,LSo,xSo,bG,$So,kSo,SSo,$b,kfe,RSo,BSo,vG,PSo,ISo,qSo,kb,Sfe,NSo,jSo,FG,DSo,GSo,OSo,Sb,Rfe,VSo,XSo,TG,zSo,QSo,WSo,Rb,Bfe,HSo,USo,MG,JSo,YSo,KSo,Bb,Pfe,ZSo,eRo,EG,oRo,rRo,tRo,Pb,Ife,aRo,nRo,CG,sRo,lRo,iRo,Ib,qfe,dRo,cRo,wG,fRo,mRo,gRo,qb,Nfe,hRo,pRo,AG,uRo,_Ro,bRo,Nb,jfe,vRo,FRo,yG,TRo,MRo,ERo,jb,Dfe,CRo,wRo,LG,ARo,yRo,LRo,Db,Gfe,xRo,$Ro,xG,kRo,SRo,RRo,Gb,Ofe,BRo,PRo,$G,IRo,qRo,NRo,Ob,Vfe,jRo,DRo,kG,GRo,ORo,VRo,Vb,Xfe,XRo,zRo,SG,QRo,WRo,HRo,Xb,zfe,URo,JRo,RG,YRo,KRo,ZRo,zb,Qfe,eBo,oBo,BG,rBo,tBo,aBo,Qb,Wfe,nBo,sBo,PG,lBo,iBo,dBo,Wb,cBo,Hfe,fBo,mBo,Ufe,gBo,hBo,Hb,uIe,Oi,Ub,Jfe,ay,pBo,Yfe,uBo,_Ie,Po,ny,_Bo,Vi,bBo,IG,vBo,FBo,qG,TBo,MBo,EBo,sy,CBo,Kfe,wBo,ABo,yBo,it,ly,LBo,Zfe,xBo,$Bo,Xi,kBo,eme,SBo,RBo,NG,BBo,PBo,IBo,Jb,qBo,oo,iy,NBo,ome,jBo,DBo,Ra,GBo,rme,OBo,VBo,tme,XBo,zBo,ame,QBo,WBo,HBo,Yr,Yb,nme,UBo,JBo,jG,YBo,KBo,ZBo,Kb,sme,ePo,oPo,DG,rPo,tPo,aPo,Zb,lme,nPo,sPo,GG,lPo,iPo,dPo,e2,ime,cPo,fPo,OG,mPo,gPo,hPo,o2,dme,pPo,uPo,VG,_Po,bPo,vPo,r2,FPo,cme,TPo,MPo,fme,EPo,CPo,t2,bIe,zi,a2,mme,dy,wPo,gme,APo,vIe,Io,cy,yPo,Qi,LPo,XG,xPo,$Po,zG,kPo,SPo,RPo,fy,BPo,hme,PPo,IPo,qPo,dt,my,NPo,pme,jPo,DPo,Wi,GPo,ume,OPo,VPo,QG,XPo,zPo,QPo,n2,WPo,ro,gy,HPo,_me,UPo,JPo,Ba,YPo,bme,KPo,ZPo,vme,eIo,oIo,Fme,rIo,tIo,aIo,U,s2,Tme,nIo,sIo,WG,lIo,iIo,dIo,l2,Mme,cIo,fIo,HG,mIo,gIo,hIo,i2,Eme,pIo,uIo,UG,_Io,bIo,vIo,d2,Cme,FIo,TIo,JG,MIo,EIo,CIo,c2,wme,wIo,AIo,YG,yIo,LIo,xIo,f2,Ame,$Io,kIo,KG,SIo,RIo,BIo,m2,yme,PIo,IIo,ZG,qIo,NIo,jIo,g2,Lme,DIo,GIo,eO,OIo,VIo,XIo,h2,xme,zIo,QIo,oO,WIo,HIo,UIo,p2,$me,JIo,YIo,rO,KIo,ZIo,eqo,u2,kme,oqo,rqo,tO,tqo,aqo,nqo,_2,Sme,sqo,lqo,aO,iqo,dqo,cqo,b2,Rme,fqo,mqo,nO,gqo,hqo,pqo,v2,Bme,uqo,_qo,sO,bqo,vqo,Fqo,F2,Pme,Tqo,Mqo,lO,Eqo,Cqo,wqo,T2,Ime,Aqo,yqo,iO,Lqo,xqo,$qo,M2,qme,kqo,Sqo,dO,Rqo,Bqo,Pqo,E2,Nme,Iqo,qqo,cO,Nqo,jqo,Dqo,C2,jme,Gqo,Oqo,fO,Vqo,Xqo,zqo,w2,Dme,Qqo,Wqo,mO,Hqo,Uqo,Jqo,A2,Gme,Yqo,Kqo,gO,Zqo,eNo,oNo,y2,Ome,rNo,tNo,hO,aNo,nNo,sNo,L2,Vme,lNo,iNo,pO,dNo,cNo,fNo,x2,Xme,mNo,gNo,uO,hNo,pNo,uNo,$2,zme,_No,bNo,_O,vNo,FNo,TNo,k2,Qme,MNo,ENo,bO,CNo,wNo,ANo,S2,Wme,yNo,LNo,vO,xNo,$No,kNo,R2,Hme,SNo,RNo,FO,BNo,PNo,INo,B2,Ume,qNo,NNo,TO,jNo,DNo,GNo,P2,Jme,ONo,VNo,MO,XNo,zNo,QNo,I2,Yme,WNo,HNo,EO,UNo,JNo,YNo,q2,Kme,KNo,ZNo,CO,ejo,ojo,rjo,N2,Zme,tjo,ajo,wO,njo,sjo,ljo,j2,ijo,ege,djo,cjo,oge,fjo,mjo,D2,FIe,Hi,G2,rge,hy,gjo,tge,hjo,TIe,qo,py,pjo,Ui,ujo,AO,_jo,bjo,yO,vjo,Fjo,Tjo,uy,Mjo,age,Ejo,Cjo,wjo,ct,_y,Ajo,nge,yjo,Ljo,Ji,xjo,sge,$jo,kjo,LO,Sjo,Rjo,Bjo,O2,Pjo,to,by,Ijo,lge,qjo,Njo,Pa,jjo,ige,Djo,Gjo,dge,Ojo,Vjo,cge,Xjo,zjo,Qjo,O,V2,fge,Wjo,Hjo,xO,Ujo,Jjo,Yjo,X2,mge,Kjo,Zjo,$O,eDo,oDo,rDo,z2,gge,tDo,aDo,kO,nDo,sDo,lDo,Q2,hge,iDo,dDo,SO,cDo,fDo,mDo,W2,pge,gDo,hDo,RO,pDo,uDo,_Do,H2,uge,bDo,vDo,BO,FDo,TDo,MDo,U2,_ge,EDo,CDo,PO,wDo,ADo,yDo,J2,bge,LDo,xDo,IO,$Do,kDo,SDo,Y2,vge,RDo,BDo,qO,PDo,IDo,qDo,K2,Fge,NDo,jDo,NO,DDo,GDo,ODo,Z2,Tge,VDo,XDo,jO,zDo,QDo,WDo,e5,Mge,HDo,UDo,DO,JDo,YDo,KDo,o5,Ege,ZDo,eGo,GO,oGo,rGo,tGo,r5,Cge,aGo,nGo,OO,sGo,lGo,iGo,t5,wge,dGo,cGo,VO,fGo,mGo,gGo,a5,Age,hGo,pGo,XO,uGo,_Go,bGo,n5,yge,vGo,FGo,zO,TGo,MGo,EGo,s5,Lge,CGo,wGo,QO,AGo,yGo,LGo,l5,xge,xGo,$Go,WO,kGo,SGo,RGo,i5,$ge,BGo,PGo,HO,IGo,qGo,NGo,d5,kge,jGo,DGo,UO,GGo,OGo,VGo,c5,Sge,XGo,zGo,JO,QGo,WGo,HGo,f5,Rge,UGo,JGo,YO,YGo,KGo,ZGo,m5,Bge,eOo,oOo,KO,rOo,tOo,aOo,g5,Pge,nOo,sOo,ZO,lOo,iOo,dOo,h5,Ige,cOo,fOo,eV,mOo,gOo,hOo,p5,qge,pOo,uOo,oV,_Oo,bOo,vOo,u5,Nge,FOo,TOo,rV,MOo,EOo,COo,_5,jge,wOo,AOo,tV,yOo,LOo,xOo,b5,Dge,$Oo,kOo,aV,SOo,ROo,BOo,v5,Gge,POo,IOo,nV,qOo,NOo,jOo,F5,Oge,DOo,GOo,sV,OOo,VOo,XOo,T5,Vge,zOo,QOo,lV,WOo,HOo,UOo,M5,Xge,JOo,YOo,iV,KOo,ZOo,eVo,E5,zge,oVo,rVo,dV,tVo,aVo,nVo,C5,Qge,sVo,lVo,cV,iVo,dVo,cVo,w5,Wge,fVo,mVo,fV,gVo,hVo,pVo,A5,Hge,uVo,_Vo,mV,bVo,vVo,FVo,y5,Uge,TVo,MVo,gV,EVo,CVo,wVo,L5,AVo,Jge,yVo,LVo,Yge,xVo,$Vo,x5,MIe,Yi,$5,Kge,vy,kVo,Zge,SVo,EIe,No,Fy,RVo,Ki,BVo,hV,PVo,IVo,pV,qVo,NVo,jVo,Ty,DVo,ehe,GVo,OVo,VVo,ft,My,XVo,ohe,zVo,QVo,Zi,WVo,rhe,HVo,UVo,uV,JVo,YVo,KVo,k5,ZVo,ao,Ey,eXo,the,oXo,rXo,Ia,tXo,ahe,aXo,nXo,nhe,sXo,lXo,she,iXo,dXo,cXo,lhe,S5,ihe,fXo,mXo,_V,gXo,hXo,pXo,R5,uXo,dhe,_Xo,bXo,che,vXo,FXo,B5,CIe,ed,P5,fhe,Cy,TXo,mhe,MXo,wIe,jo,wy,EXo,od,CXo,bV,wXo,AXo,vV,yXo,LXo,xXo,Ay,$Xo,ghe,kXo,SXo,RXo,mt,yy,BXo,hhe,PXo,IXo,rd,qXo,phe,NXo,jXo,FV,DXo,GXo,OXo,I5,VXo,no,Ly,XXo,uhe,zXo,QXo,qa,WXo,_he,HXo,UXo,bhe,JXo,YXo,vhe,KXo,ZXo,ezo,Fe,q5,Fhe,ozo,rzo,TV,tzo,azo,nzo,N5,The,szo,lzo,MV,izo,dzo,czo,j5,Mhe,fzo,mzo,EV,gzo,hzo,pzo,Rs,Ehe,uzo,_zo,CV,bzo,vzo,wV,Fzo,Tzo,Mzo,D5,Che,Ezo,Czo,AV,wzo,Azo,yzo,gt,whe,Lzo,xzo,yV,$zo,kzo,LV,Szo,Rzo,xV,Bzo,Pzo,Izo,G5,Ahe,qzo,Nzo,$V,jzo,Dzo,Gzo,O5,yhe,Ozo,Vzo,kV,Xzo,zzo,Qzo,V5,Lhe,Wzo,Hzo,SV,Uzo,Jzo,Yzo,X5,xhe,Kzo,Zzo,RV,eQo,oQo,rQo,z5,$he,tQo,aQo,BV,nQo,sQo,lQo,Q5,khe,iQo,dQo,PV,cQo,fQo,mQo,W5,She,gQo,hQo,IV,pQo,uQo,_Qo,H5,bQo,Rhe,vQo,FQo,Bhe,TQo,MQo,U5,AIe,td,J5,Phe,xy,EQo,Ihe,CQo,yIe,Do,$y,wQo,ad,AQo,qV,yQo,LQo,NV,xQo,$Qo,kQo,ky,SQo,qhe,RQo,BQo,PQo,ht,Sy,IQo,Nhe,qQo,NQo,nd,jQo,jhe,DQo,GQo,jV,OQo,VQo,XQo,Y5,zQo,so,Ry,QQo,Dhe,WQo,HQo,Na,UQo,Ghe,JQo,YQo,Ohe,KQo,ZQo,Vhe,eWo,oWo,rWo,Xhe,K5,zhe,tWo,aWo,DV,nWo,sWo,lWo,Z5,iWo,Qhe,dWo,cWo,Whe,fWo,mWo,ev,LIe,sd,ov,Hhe,By,gWo,Uhe,hWo,xIe,Go,Py,pWo,ld,uWo,GV,_Wo,bWo,OV,vWo,FWo,TWo,Iy,MWo,Jhe,EWo,CWo,wWo,pt,qy,AWo,Yhe,yWo,LWo,id,xWo,Khe,$Wo,kWo,VV,SWo,RWo,BWo,rv,PWo,lo,Ny,IWo,Zhe,qWo,NWo,ja,jWo,epe,DWo,GWo,ope,OWo,VWo,rpe,XWo,zWo,QWo,Ne,tv,tpe,WWo,HWo,XV,UWo,JWo,YWo,av,ape,KWo,ZWo,zV,eHo,oHo,rHo,nv,npe,tHo,aHo,QV,nHo,sHo,lHo,sv,spe,iHo,dHo,WV,cHo,fHo,mHo,lv,lpe,gHo,hHo,HV,pHo,uHo,_Ho,iv,ipe,bHo,vHo,UV,FHo,THo,MHo,dv,dpe,EHo,CHo,JV,wHo,AHo,yHo,cv,cpe,LHo,xHo,YV,$Ho,kHo,SHo,fv,RHo,fpe,BHo,PHo,mpe,IHo,qHo,mv,$Ie,dd,gv,gpe,jy,NHo,hpe,jHo,kIe,Oo,Dy,DHo,cd,GHo,KV,OHo,VHo,ZV,XHo,zHo,QHo,Gy,WHo,ppe,HHo,UHo,JHo,ut,Oy,YHo,upe,KHo,ZHo,fd,eUo,_pe,oUo,rUo,eX,tUo,aUo,nUo,hv,sUo,io,Vy,lUo,bpe,iUo,dUo,Da,cUo,vpe,fUo,mUo,Fpe,gUo,hUo,Tpe,pUo,uUo,_Uo,Ga,pv,Mpe,bUo,vUo,oX,FUo,TUo,MUo,uv,Epe,EUo,CUo,rX,wUo,AUo,yUo,_v,Cpe,LUo,xUo,tX,$Uo,kUo,SUo,bv,wpe,RUo,BUo,aX,PUo,IUo,qUo,vv,NUo,Ape,jUo,DUo,ype,GUo,OUo,Fv,SIe,md,Tv,Lpe,Xy,VUo,xpe,XUo,RIe,Vo,zy,zUo,gd,QUo,nX,WUo,HUo,sX,UUo,JUo,YUo,Qy,KUo,$pe,ZUo,eJo,oJo,_t,Wy,rJo,kpe,tJo,aJo,hd,nJo,Spe,sJo,lJo,lX,iJo,dJo,cJo,Mv,fJo,co,Hy,mJo,Rpe,gJo,hJo,Oa,pJo,Bpe,uJo,_Jo,Ppe,bJo,vJo,Ipe,FJo,TJo,MJo,je,Ev,qpe,EJo,CJo,iX,wJo,AJo,yJo,Cv,Npe,LJo,xJo,dX,$Jo,kJo,SJo,wv,jpe,RJo,BJo,cX,PJo,IJo,qJo,Av,Dpe,NJo,jJo,fX,DJo,GJo,OJo,yv,Gpe,VJo,XJo,mX,zJo,QJo,WJo,Lv,Ope,HJo,UJo,gX,JJo,YJo,KJo,xv,Vpe,ZJo,eYo,hX,oYo,rYo,tYo,$v,Xpe,aYo,nYo,pX,sYo,lYo,iYo,kv,dYo,zpe,cYo,fYo,Qpe,mYo,gYo,Sv,BIe,pd,Rv,Wpe,Uy,hYo,Hpe,pYo,PIe,Xo,Jy,uYo,ud,_Yo,uX,bYo,vYo,_X,FYo,TYo,MYo,Yy,EYo,Upe,CYo,wYo,AYo,bt,Ky,yYo,Jpe,LYo,xYo,_d,$Yo,Ype,kYo,SYo,bX,RYo,BYo,PYo,Bv,IYo,fo,Zy,qYo,Kpe,NYo,jYo,Va,DYo,Zpe,GYo,OYo,eue,VYo,XYo,oue,zYo,QYo,WYo,eL,Pv,rue,HYo,UYo,vX,JYo,YYo,KYo,Iv,tue,ZYo,eKo,FX,oKo,rKo,tKo,qv,aKo,aue,nKo,sKo,nue,lKo,iKo,Nv,IIe,bd,jv,sue,oL,dKo,lue,cKo,qIe,zo,rL,fKo,vd,mKo,TX,gKo,hKo,MX,pKo,uKo,_Ko,tL,bKo,iue,vKo,FKo,TKo,vt,aL,MKo,due,EKo,CKo,Fd,wKo,cue,AKo,yKo,EX,LKo,xKo,$Ko,Dv,kKo,mo,nL,SKo,fue,RKo,BKo,Xa,PKo,mue,IKo,qKo,gue,NKo,jKo,hue,DKo,GKo,OKo,za,Gv,pue,VKo,XKo,CX,zKo,QKo,WKo,Ov,uue,HKo,UKo,wX,JKo,YKo,KKo,Vv,_ue,ZKo,eZo,AX,oZo,rZo,tZo,Xv,bue,aZo,nZo,yX,sZo,lZo,iZo,zv,dZo,vue,cZo,fZo,Fue,mZo,gZo,Qv,NIe,Td,Wv,Tue,sL,hZo,Mue,pZo,jIe,Qo,lL,uZo,Md,_Zo,LX,bZo,vZo,xX,FZo,TZo,MZo,iL,EZo,Eue,CZo,wZo,AZo,Ft,dL,yZo,Cue,LZo,xZo,Ed,$Zo,wue,kZo,SZo,$X,RZo,BZo,PZo,Hv,IZo,go,cL,qZo,Aue,NZo,jZo,Qa,DZo,yue,GZo,OZo,Lue,VZo,XZo,xue,zZo,QZo,WZo,Cd,Uv,$ue,HZo,UZo,kX,JZo,YZo,KZo,Jv,kue,ZZo,eer,SX,oer,rer,ter,Yv,Sue,aer,ner,RX,ser,ler,ier,Kv,der,Rue,cer,fer,Bue,mer,ger,Zv,DIe,wd,eF,Pue,fL,her,Iue,per,GIe,Wo,mL,uer,Ad,_er,BX,ber,ver,PX,Fer,Ter,Mer,gL,Eer,que,Cer,wer,Aer,Tt,hL,yer,Nue,Ler,xer,yd,$er,jue,ker,Ser,IX,Rer,Ber,Per,oF,Ier,ho,pL,qer,Due,Ner,jer,Wa,Der,Gue,Ger,Oer,Oue,Ver,Xer,Vue,zer,Qer,Wer,uL,rF,Xue,Her,Uer,qX,Jer,Yer,Ker,tF,zue,Zer,eor,NX,oor,ror,tor,aF,aor,Que,nor,sor,Wue,lor,ior,nF,OIe,Ld,sF,Hue,_L,dor,Uue,cor,VIe,Ho,bL,mor,xd,gor,jX,hor,por,DX,uor,_or,bor,vL,vor,Jue,For,Tor,Mor,Mt,FL,Eor,Yue,Cor,wor,$d,Aor,Kue,yor,Lor,GX,xor,$or,kor,lF,Sor,po,TL,Ror,Zue,Bor,Por,Ha,Ior,e_e,qor,Nor,o_e,jor,Dor,r_e,Gor,Oor,Vor,t_e,iF,a_e,Xor,zor,OX,Qor,Wor,Hor,dF,Uor,n_e,Jor,Yor,s_e,Kor,Zor,cF,XIe,kd,fF,l_e,ML,err,i_e,orr,zIe,Uo,EL,rrr,Sd,trr,VX,arr,nrr,XX,srr,lrr,irr,CL,drr,d_e,crr,frr,mrr,Et,wL,grr,c_e,hrr,prr,Rd,urr,f_e,_rr,brr,zX,vrr,Frr,Trr,mF,Mrr,uo,AL,Err,m_e,Crr,wrr,Ua,Arr,g_e,yrr,Lrr,h_e,xrr,$rr,p_e,krr,Srr,Rrr,Ja,gF,u_e,Brr,Prr,QX,Irr,qrr,Nrr,hF,__e,jrr,Drr,WX,Grr,Orr,Vrr,pF,b_e,Xrr,zrr,HX,Qrr,Wrr,Hrr,uF,v_e,Urr,Jrr,UX,Yrr,Krr,Zrr,_F,etr,F_e,otr,rtr,T_e,ttr,atr,bF,QIe,Bd,vF,M_e,yL,ntr,E_e,str,WIe,Jo,LL,ltr,Pd,itr,JX,dtr,ctr,YX,ftr,mtr,gtr,xL,htr,C_e,ptr,utr,_tr,Ct,$L,btr,w_e,vtr,Ftr,Id,Ttr,A_e,Mtr,Etr,KX,Ctr,wtr,Atr,FF,ytr,_o,kL,Ltr,y_e,xtr,$tr,Ya,ktr,L_e,Str,Rtr,x_e,Btr,Ptr,$_e,Itr,qtr,Ntr,k_e,TF,S_e,jtr,Dtr,ZX,Gtr,Otr,Vtr,MF,Xtr,R_e,ztr,Qtr,B_e,Wtr,Htr,EF,HIe,qd,CF,P_e,SL,Utr,I_e,Jtr,UIe,Yo,RL,Ytr,Nd,Ktr,ez,Ztr,ear,oz,oar,rar,tar,BL,aar,q_e,nar,sar,lar,wt,PL,iar,N_e,dar,car,jd,far,j_e,mar,gar,rz,har,par,uar,wF,_ar,wr,IL,bar,D_e,Far,Tar,Ka,Mar,G_e,Ear,Car,O_e,war,Aar,V_e,yar,Lar,xar,j,AF,X_e,$ar,kar,tz,Sar,Rar,Bar,yF,z_e,Par,Iar,az,qar,Nar,jar,LF,Q_e,Dar,Gar,nz,Oar,Var,Xar,xF,W_e,zar,Qar,sz,War,Har,Uar,$F,H_e,Jar,Yar,lz,Kar,Zar,enr,kF,U_e,onr,rnr,iz,tnr,anr,nnr,SF,J_e,snr,lnr,dz,inr,dnr,cnr,RF,Y_e,fnr,mnr,cz,gnr,hnr,pnr,BF,K_e,unr,_nr,fz,bnr,vnr,Fnr,PF,Z_e,Tnr,Mnr,mz,Enr,Cnr,wnr,IF,e1e,Anr,ynr,gz,Lnr,xnr,$nr,qF,o1e,knr,Snr,hz,Rnr,Bnr,Pnr,NF,r1e,Inr,qnr,pz,Nnr,jnr,Dnr,jF,t1e,Gnr,Onr,uz,Vnr,Xnr,znr,DF,a1e,Qnr,Wnr,_z,Hnr,Unr,Jnr,GF,n1e,Ynr,Knr,bz,Znr,esr,osr,OF,s1e,rsr,tsr,vz,asr,nsr,ssr,Bs,l1e,lsr,isr,Fz,dsr,csr,Tz,fsr,msr,gsr,VF,i1e,hsr,psr,Mz,usr,_sr,bsr,XF,d1e,vsr,Fsr,Ez,Tsr,Msr,Esr,zF,c1e,Csr,wsr,Cz,Asr,ysr,Lsr,QF,f1e,xsr,$sr,wz,ksr,Ssr,Rsr,WF,m1e,Bsr,Psr,Az,Isr,qsr,Nsr,HF,g1e,jsr,Dsr,yz,Gsr,Osr,Vsr,UF,h1e,Xsr,zsr,Lz,Qsr,Wsr,Hsr,JF,p1e,Usr,Jsr,xz,Ysr,Ksr,Zsr,YF,u1e,elr,olr,$z,rlr,tlr,alr,KF,_1e,nlr,slr,kz,llr,ilr,dlr,ZF,b1e,clr,flr,Sz,mlr,glr,hlr,e0,v1e,plr,ulr,Rz,_lr,blr,vlr,o0,F1e,Flr,Tlr,Bz,Mlr,Elr,Clr,r0,T1e,wlr,Alr,Pz,ylr,Llr,xlr,t0,M1e,$lr,klr,Iz,Slr,Rlr,Blr,a0,E1e,Plr,Ilr,qz,qlr,Nlr,jlr,n0,C1e,Dlr,Glr,Nz,Olr,Vlr,Xlr,s0,w1e,zlr,Qlr,jz,Wlr,Hlr,Ulr,l0,A1e,Jlr,Ylr,Dz,Klr,Zlr,eir,i0,y1e,oir,rir,Gz,tir,air,nir,d0,L1e,sir,lir,Oz,iir,dir,cir,c0,x1e,fir,mir,Vz,gir,hir,pir,f0,$1e,uir,_ir,Xz,bir,vir,Fir,m0,k1e,Tir,Mir,zz,Eir,Cir,wir,g0,S1e,Air,yir,Qz,Lir,xir,$ir,h0,R1e,kir,Sir,Wz,Rir,Bir,Pir,p0,B1e,Iir,qir,Hz,Nir,jir,Dir,u0,JIe,Dd,_0,P1e,qL,Gir,I1e,Oir,YIe,Ko,NL,Vir,Gd,Xir,Uz,zir,Qir,Jz,Wir,Hir,Uir,jL,Jir,q1e,Yir,Kir,Zir,At,DL,edr,N1e,odr,rdr,Od,tdr,j1e,adr,ndr,Yz,sdr,ldr,idr,b0,ddr,Ar,GL,cdr,D1e,fdr,mdr,Za,gdr,G1e,hdr,pdr,O1e,udr,_dr,V1e,bdr,vdr,Fdr,se,v0,X1e,Tdr,Mdr,Kz,Edr,Cdr,wdr,F0,z1e,Adr,ydr,Zz,Ldr,xdr,$dr,T0,Q1e,kdr,Sdr,eQ,Rdr,Bdr,Pdr,M0,W1e,Idr,qdr,oQ,Ndr,jdr,Ddr,E0,H1e,Gdr,Odr,rQ,Vdr,Xdr,zdr,C0,U1e,Qdr,Wdr,tQ,Hdr,Udr,Jdr,w0,J1e,Ydr,Kdr,aQ,Zdr,ecr,ocr,A0,Y1e,rcr,tcr,nQ,acr,ncr,scr,y0,K1e,lcr,icr,sQ,dcr,ccr,fcr,L0,Z1e,mcr,gcr,lQ,hcr,pcr,ucr,x0,e7e,_cr,bcr,iQ,vcr,Fcr,Tcr,$0,o7e,Mcr,Ecr,dQ,Ccr,wcr,Acr,k0,r7e,ycr,Lcr,cQ,xcr,$cr,kcr,S0,t7e,Scr,Rcr,fQ,Bcr,Pcr,Icr,R0,a7e,qcr,Ncr,mQ,jcr,Dcr,Gcr,B0,n7e,Ocr,Vcr,gQ,Xcr,zcr,Qcr,P0,s7e,Wcr,Hcr,hQ,Ucr,Jcr,Ycr,I0,l7e,Kcr,Zcr,pQ,efr,ofr,rfr,q0,i7e,tfr,afr,uQ,nfr,sfr,lfr,N0,d7e,ifr,dfr,_Q,cfr,ffr,mfr,j0,c7e,gfr,hfr,bQ,pfr,ufr,_fr,D0,f7e,bfr,vfr,vQ,Ffr,Tfr,Mfr,G0,m7e,Efr,Cfr,FQ,wfr,Afr,yfr,O0,KIe,Vd,V0,g7e,OL,Lfr,h7e,xfr,ZIe,Zo,VL,$fr,Xd,kfr,TQ,Sfr,Rfr,MQ,Bfr,Pfr,Ifr,XL,qfr,p7e,Nfr,jfr,Dfr,yt,zL,Gfr,u7e,Ofr,Vfr,zd,Xfr,_7e,zfr,Qfr,EQ,Wfr,Hfr,Ufr,X0,Jfr,yr,QL,Yfr,b7e,Kfr,Zfr,en,emr,v7e,omr,rmr,F7e,tmr,amr,T7e,nmr,smr,lmr,Te,z0,M7e,imr,dmr,CQ,cmr,fmr,mmr,Q0,E7e,gmr,hmr,wQ,pmr,umr,_mr,W0,C7e,bmr,vmr,AQ,Fmr,Tmr,Mmr,H0,w7e,Emr,Cmr,yQ,wmr,Amr,ymr,U0,A7e,Lmr,xmr,LQ,$mr,kmr,Smr,J0,y7e,Rmr,Bmr,xQ,Pmr,Imr,qmr,Y0,L7e,Nmr,jmr,$Q,Dmr,Gmr,Omr,K0,x7e,Vmr,Xmr,kQ,zmr,Qmr,Wmr,Z0,$7e,Hmr,Umr,SQ,Jmr,Ymr,Kmr,eT,k7e,Zmr,egr,RQ,ogr,rgr,tgr,oT,S7e,agr,ngr,BQ,sgr,lgr,igr,rT,R7e,dgr,cgr,PQ,fgr,mgr,ggr,tT,eqe,Qd,aT,B7e,WL,hgr,P7e,pgr,oqe,er,HL,ugr,Wd,_gr,IQ,bgr,vgr,qQ,Fgr,Tgr,Mgr,UL,Egr,I7e,Cgr,wgr,Agr,Lt,JL,ygr,q7e,Lgr,xgr,Hd,$gr,N7e,kgr,Sgr,NQ,Rgr,Bgr,Pgr,nT,Igr,Lr,YL,qgr,j7e,Ngr,jgr,on,Dgr,D7e,Ggr,Ogr,G7e,Vgr,Xgr,O7e,zgr,Qgr,Wgr,Ud,sT,V7e,Hgr,Ugr,jQ,Jgr,Ygr,Kgr,lT,X7e,Zgr,ehr,DQ,ohr,rhr,thr,iT,z7e,ahr,nhr,GQ,shr,lhr,ihr,dT,rqe,Jd,cT,Q7e,KL,dhr,W7e,chr,tqe,or,ZL,fhr,Yd,mhr,OQ,ghr,hhr,VQ,phr,uhr,_hr,e8,bhr,H7e,vhr,Fhr,Thr,xt,o8,Mhr,U7e,Ehr,Chr,Kd,whr,J7e,Ahr,yhr,XQ,Lhr,xhr,$hr,fT,khr,xr,r8,Shr,Y7e,Rhr,Bhr,rn,Phr,K7e,Ihr,qhr,Z7e,Nhr,jhr,ebe,Dhr,Ghr,Ohr,ie,mT,obe,Vhr,Xhr,zQ,zhr,Qhr,Whr,gT,rbe,Hhr,Uhr,QQ,Jhr,Yhr,Khr,hT,tbe,Zhr,epr,WQ,opr,rpr,tpr,pT,abe,apr,npr,HQ,spr,lpr,ipr,uT,nbe,dpr,cpr,UQ,fpr,mpr,gpr,_T,sbe,hpr,ppr,JQ,upr,_pr,bpr,bT,lbe,vpr,Fpr,YQ,Tpr,Mpr,Epr,vT,ibe,Cpr,wpr,KQ,Apr,ypr,Lpr,FT,dbe,xpr,$pr,ZQ,kpr,Spr,Rpr,TT,cbe,Bpr,Ppr,eW,Ipr,qpr,Npr,MT,fbe,jpr,Dpr,oW,Gpr,Opr,Vpr,ET,mbe,Xpr,zpr,rW,Qpr,Wpr,Hpr,CT,gbe,Upr,Jpr,tW,Ypr,Kpr,Zpr,wT,hbe,eur,our,aW,rur,tur,aur,AT,pbe,nur,sur,nW,lur,iur,dur,yT,ube,cur,fur,sW,mur,gur,hur,LT,_be,pur,uur,lW,_ur,bur,vur,xT,bbe,Fur,Tur,iW,Mur,Eur,Cur,$T,vbe,wur,Aur,dW,yur,Lur,xur,kT,Fbe,$ur,kur,cW,Sur,Rur,Bur,ST,aqe,Zd,RT,Tbe,t8,Pur,Mbe,Iur,nqe,rr,a8,qur,ec,Nur,fW,jur,Dur,mW,Gur,Our,Vur,n8,Xur,Ebe,zur,Qur,Wur,$t,s8,Hur,Cbe,Uur,Jur,oc,Yur,wbe,Kur,Zur,gW,e_r,o_r,r_r,BT,t_r,$r,l8,a_r,Abe,n_r,s_r,tn,l_r,ybe,i_r,d_r,Lbe,c_r,f_r,xbe,m_r,g_r,h_r,ye,PT,$be,p_r,u_r,hW,__r,b_r,v_r,IT,kbe,F_r,T_r,pW,M_r,E_r,C_r,qT,Sbe,w_r,A_r,uW,y_r,L_r,x_r,NT,Rbe,$_r,k_r,_W,S_r,R_r,B_r,jT,Bbe,P_r,I_r,bW,q_r,N_r,j_r,DT,Pbe,D_r,G_r,vW,O_r,V_r,X_r,GT,Ibe,z_r,Q_r,FW,W_r,H_r,U_r,OT,qbe,J_r,Y_r,TW,K_r,Z_r,e1r,VT,Nbe,o1r,r1r,MW,t1r,a1r,n1r,XT,jbe,s1r,l1r,EW,i1r,d1r,c1r,zT,sqe,rc,QT,Dbe,i8,f1r,Gbe,m1r,lqe,tr,d8,g1r,tc,h1r,CW,p1r,u1r,wW,_1r,b1r,v1r,c8,F1r,Obe,T1r,M1r,E1r,kt,f8,C1r,Vbe,w1r,A1r,ac,y1r,Xbe,L1r,x1r,AW,$1r,k1r,S1r,WT,R1r,kr,m8,B1r,zbe,P1r,I1r,an,q1r,Qbe,N1r,j1r,Wbe,D1r,G1r,Hbe,O1r,V1r,X1r,Z,HT,Ube,z1r,Q1r,yW,W1r,H1r,U1r,UT,Jbe,J1r,Y1r,LW,K1r,Z1r,e7r,JT,Ybe,o7r,r7r,xW,t7r,a7r,n7r,YT,Kbe,s7r,l7r,$W,i7r,d7r,c7r,KT,Zbe,f7r,m7r,kW,g7r,h7r,p7r,ZT,e2e,u7r,_7r,SW,b7r,v7r,F7r,eM,o2e,T7r,M7r,RW,E7r,C7r,w7r,oM,r2e,A7r,y7r,BW,L7r,x7r,$7r,rM,t2e,k7r,S7r,PW,R7r,B7r,P7r,tM,a2e,I7r,q7r,IW,N7r,j7r,D7r,aM,n2e,G7r,O7r,qW,V7r,X7r,z7r,nM,s2e,Q7r,W7r,NW,H7r,U7r,J7r,sM,l2e,Y7r,K7r,jW,Z7r,ebr,obr,lM,i2e,rbr,tbr,DW,abr,nbr,sbr,iM,d2e,lbr,ibr,GW,dbr,cbr,fbr,dM,c2e,mbr,gbr,OW,hbr,pbr,ubr,cM,f2e,_br,bbr,VW,vbr,Fbr,Tbr,fM,m2e,Mbr,Ebr,XW,Cbr,wbr,Abr,mM,g2e,ybr,Lbr,zW,xbr,$br,kbr,gM,h2e,Sbr,Rbr,QW,Bbr,Pbr,Ibr,hM,p2e,qbr,Nbr,WW,jbr,Dbr,Gbr,pM,u2e,Obr,Vbr,HW,Xbr,zbr,Qbr,uM,_2e,Wbr,Hbr,UW,Ubr,Jbr,Ybr,_M,b2e,Kbr,Zbr,JW,e2r,o2r,r2r,bM,v2e,t2r,a2r,YW,n2r,s2r,l2r,vM,F2e,i2r,d2r,KW,c2r,f2r,m2r,FM,iqe,nc,TM,T2e,g8,g2r,M2e,h2r,dqe,ar,h8,p2r,sc,u2r,ZW,_2r,b2r,eH,v2r,F2r,T2r,p8,M2r,E2e,E2r,C2r,w2r,St,u8,A2r,C2e,y2r,L2r,lc,x2r,w2e,$2r,k2r,oH,S2r,R2r,B2r,MM,P2r,Sr,_8,I2r,A2e,q2r,N2r,nn,j2r,y2e,D2r,G2r,L2e,O2r,V2r,x2e,X2r,z2r,Q2r,pe,EM,$2e,W2r,H2r,rH,U2r,J2r,Y2r,CM,k2e,K2r,Z2r,tH,e5r,o5r,r5r,wM,S2e,t5r,a5r,aH,n5r,s5r,l5r,AM,R2e,i5r,d5r,nH,c5r,f5r,m5r,yM,B2e,g5r,h5r,sH,p5r,u5r,_5r,LM,P2e,b5r,v5r,lH,F5r,T5r,M5r,xM,I2e,E5r,C5r,iH,w5r,A5r,y5r,$M,q2e,L5r,x5r,dH,$5r,k5r,S5r,kM,N2e,R5r,B5r,cH,P5r,I5r,q5r,SM,j2e,N5r,j5r,fH,D5r,G5r,O5r,RM,D2e,V5r,X5r,mH,z5r,Q5r,W5r,BM,G2e,H5r,U5r,gH,J5r,Y5r,K5r,PM,O2e,Z5r,evr,hH,ovr,rvr,tvr,IM,V2e,avr,nvr,pH,svr,lvr,ivr,qM,X2e,dvr,cvr,uH,fvr,mvr,gvr,NM,z2e,hvr,pvr,_H,uvr,_vr,bvr,jM,Q2e,vvr,Fvr,bH,Tvr,Mvr,Evr,DM,cqe,ic,GM,W2e,b8,Cvr,H2e,wvr,fqe,nr,v8,Avr,dc,yvr,vH,Lvr,xvr,FH,$vr,kvr,Svr,F8,Rvr,U2e,Bvr,Pvr,Ivr,Rt,T8,qvr,J2e,Nvr,jvr,cc,Dvr,Y2e,Gvr,Ovr,TH,Vvr,Xvr,zvr,OM,Qvr,Rr,M8,Wvr,K2e,Hvr,Uvr,sn,Jvr,Z2e,Yvr,Kvr,e5e,Zvr,eFr,o5e,oFr,rFr,tFr,E8,VM,r5e,aFr,nFr,MH,sFr,lFr,iFr,XM,t5e,dFr,cFr,EH,fFr,mFr,gFr,zM,mqe,fc,QM,a5e,C8,hFr,n5e,pFr,gqe,sr,w8,uFr,mc,_Fr,CH,bFr,vFr,wH,FFr,TFr,MFr,A8,EFr,s5e,CFr,wFr,AFr,Bt,y8,yFr,l5e,LFr,xFr,gc,$Fr,i5e,kFr,SFr,AH,RFr,BFr,PFr,WM,IFr,Br,L8,qFr,d5e,NFr,jFr,ln,DFr,c5e,GFr,OFr,f5e,VFr,XFr,m5e,zFr,QFr,WFr,g5e,HM,h5e,HFr,UFr,yH,JFr,YFr,KFr,UM,hqe,hc,JM,p5e,x8,ZFr,u5e,e0r,pqe,lr,$8,o0r,pc,r0r,LH,t0r,a0r,xH,n0r,s0r,l0r,k8,i0r,_5e,d0r,c0r,f0r,Pt,S8,m0r,b5e,g0r,h0r,uc,p0r,v5e,u0r,_0r,$H,b0r,v0r,F0r,YM,T0r,Pr,R8,M0r,F5e,E0r,C0r,dn,w0r,T5e,A0r,y0r,M5e,L0r,x0r,E5e,$0r,k0r,S0r,de,KM,C5e,R0r,B0r,kH,P0r,I0r,q0r,ZM,w5e,N0r,j0r,SH,D0r,G0r,O0r,e4,A5e,V0r,X0r,RH,z0r,Q0r,W0r,o4,y5e,H0r,U0r,BH,J0r,Y0r,K0r,r4,L5e,Z0r,eTr,PH,oTr,rTr,tTr,t4,x5e,aTr,nTr,IH,sTr,lTr,iTr,a4,$5e,dTr,cTr,qH,fTr,mTr,gTr,n4,k5e,hTr,pTr,NH,uTr,_Tr,bTr,s4,S5e,vTr,FTr,jH,TTr,MTr,ETr,l4,R5e,CTr,wTr,DH,ATr,yTr,LTr,i4,B5e,xTr,$Tr,GH,kTr,STr,RTr,d4,P5e,BTr,PTr,OH,ITr,qTr,NTr,c4,I5e,jTr,DTr,VH,GTr,OTr,VTr,f4,q5e,XTr,zTr,XH,QTr,WTr,HTr,m4,N5e,UTr,JTr,zH,YTr,KTr,ZTr,g4,j5e,eMr,oMr,QH,rMr,tMr,aMr,h4,D5e,nMr,sMr,WH,lMr,iMr,dMr,p4,G5e,cMr,fMr,HH,mMr,gMr,hMr,u4,O5e,pMr,uMr,UH,_Mr,bMr,vMr,_4,V5e,FMr,TMr,JH,MMr,EMr,CMr,b4,uqe,_c,v4,X5e,B8,wMr,z5e,AMr,_qe,ir,P8,yMr,bc,LMr,YH,xMr,$Mr,KH,kMr,SMr,RMr,I8,BMr,Q5e,PMr,IMr,qMr,It,q8,NMr,W5e,jMr,DMr,vc,GMr,H5e,OMr,VMr,ZH,XMr,zMr,QMr,F4,WMr,Ir,N8,HMr,U5e,UMr,JMr,cn,YMr,J5e,KMr,ZMr,Y5e,e4r,o4r,K5e,r4r,t4r,a4r,ce,T4,Z5e,n4r,s4r,eU,l4r,i4r,d4r,M4,eve,c4r,f4r,oU,m4r,g4r,h4r,E4,ove,p4r,u4r,rU,_4r,b4r,v4r,C4,rve,F4r,T4r,tU,M4r,E4r,C4r,w4,tve,w4r,A4r,aU,y4r,L4r,x4r,A4,ave,$4r,k4r,nU,S4r,R4r,B4r,y4,nve,P4r,I4r,sU,q4r,N4r,j4r,L4,sve,D4r,G4r,lU,O4r,V4r,X4r,x4,lve,z4r,Q4r,iU,W4r,H4r,U4r,$4,ive,J4r,Y4r,dU,K4r,Z4r,eEr,k4,dve,oEr,rEr,cU,tEr,aEr,nEr,S4,cve,sEr,lEr,fU,iEr,dEr,cEr,R4,fve,fEr,mEr,mU,gEr,hEr,pEr,B4,mve,uEr,_Er,gU,bEr,vEr,FEr,P4,gve,TEr,MEr,hU,EEr,CEr,wEr,I4,hve,AEr,yEr,pU,LEr,xEr,$Er,q4,pve,kEr,SEr,uU,REr,BEr,PEr,N4,uve,IEr,qEr,_U,NEr,jEr,DEr,j4,_ve,GEr,OEr,bU,VEr,XEr,zEr,D4,bve,QEr,WEr,vU,HEr,UEr,JEr,G4,bqe,Fc,O4,vve,j8,YEr,Fve,KEr,vqe,dr,D8,ZEr,Tc,eCr,FU,oCr,rCr,TU,tCr,aCr,nCr,G8,sCr,Tve,lCr,iCr,dCr,qt,O8,cCr,Mve,fCr,mCr,Mc,gCr,Eve,hCr,pCr,MU,uCr,_Cr,bCr,V4,vCr,qr,V8,FCr,Cve,TCr,MCr,fn,ECr,wve,CCr,wCr,Ave,ACr,yCr,yve,LCr,xCr,$Cr,Lve,X4,xve,kCr,SCr,EU,RCr,BCr,PCr,z4,Fqe,Ec,Q4,$ve,X8,ICr,kve,qCr,Tqe,cr,z8,NCr,Cc,jCr,CU,DCr,GCr,wU,OCr,VCr,XCr,Q8,zCr,Sve,QCr,WCr,HCr,Nt,W8,UCr,Rve,JCr,YCr,wc,KCr,Bve,ZCr,e3r,AU,o3r,r3r,t3r,W4,a3r,Nr,H8,n3r,Pve,s3r,l3r,mn,i3r,Ive,d3r,c3r,qve,f3r,m3r,Nve,g3r,h3r,p3r,jve,H4,Dve,u3r,_3r,yU,b3r,v3r,F3r,U4,Mqe,Ac,J4,Gve,U8,T3r,Ove,M3r,Eqe,fr,J8,E3r,yc,C3r,LU,w3r,A3r,xU,y3r,L3r,x3r,Y8,$3r,Vve,k3r,S3r,R3r,jt,K8,B3r,Xve,P3r,I3r,Lc,q3r,zve,N3r,j3r,$U,D3r,G3r,O3r,Y4,V3r,jr,Z8,X3r,Qve,z3r,Q3r,gn,W3r,Wve,H3r,U3r,Hve,J3r,Y3r,Uve,K3r,Z3r,ewr,re,K4,Jve,owr,rwr,kU,twr,awr,nwr,Z4,Yve,swr,lwr,SU,iwr,dwr,cwr,eE,Kve,fwr,mwr,RU,gwr,hwr,pwr,oE,Zve,uwr,_wr,BU,bwr,vwr,Fwr,rE,eFe,Twr,Mwr,PU,Ewr,Cwr,wwr,tE,oFe,Awr,ywr,IU,Lwr,xwr,$wr,aE,rFe,kwr,Swr,qU,Rwr,Bwr,Pwr,nE,tFe,Iwr,qwr,NU,Nwr,jwr,Dwr,sE,aFe,Gwr,Owr,jU,Vwr,Xwr,zwr,lE,nFe,Qwr,Wwr,DU,Hwr,Uwr,Jwr,iE,sFe,Ywr,Kwr,GU,Zwr,eAr,oAr,dE,lFe,rAr,tAr,OU,aAr,nAr,sAr,cE,iFe,lAr,iAr,VU,dAr,cAr,fAr,fE,dFe,mAr,gAr,XU,hAr,pAr,uAr,mE,cFe,_Ar,bAr,zU,vAr,FAr,TAr,gE,fFe,MAr,EAr,QU,CAr,wAr,AAr,hE,mFe,yAr,LAr,WU,xAr,$Ar,kAr,pE,gFe,SAr,RAr,HU,BAr,PAr,IAr,uE,hFe,qAr,NAr,UU,jAr,DAr,GAr,_E,pFe,OAr,VAr,JU,XAr,zAr,QAr,bE,uFe,WAr,HAr,YU,UAr,JAr,YAr,vE,_Fe,KAr,ZAr,KU,e6r,o6r,r6r,FE,bFe,t6r,a6r,ZU,n6r,s6r,l6r,TE,vFe,i6r,d6r,eJ,c6r,f6r,m6r,ME,FFe,g6r,h6r,oJ,p6r,u6r,_6r,EE,Cqe,xc,CE,TFe,ex,b6r,MFe,v6r,wqe,mr,ox,F6r,$c,T6r,rJ,M6r,E6r,tJ,C6r,w6r,A6r,rx,y6r,EFe,L6r,x6r,$6r,Dt,tx,k6r,CFe,S6r,R6r,kc,B6r,wFe,P6r,I6r,aJ,q6r,N6r,j6r,wE,D6r,Dr,ax,G6r,AFe,O6r,V6r,hn,X6r,yFe,z6r,Q6r,LFe,W6r,H6r,xFe,U6r,J6r,Y6r,ke,AE,$Fe,K6r,Z6r,nJ,eyr,oyr,ryr,yE,kFe,tyr,ayr,sJ,nyr,syr,lyr,LE,SFe,iyr,dyr,lJ,cyr,fyr,myr,xE,RFe,gyr,hyr,iJ,pyr,uyr,_yr,$E,BFe,byr,vyr,dJ,Fyr,Tyr,Myr,kE,PFe,Eyr,Cyr,cJ,wyr,Ayr,yyr,SE,IFe,Lyr,xyr,fJ,$yr,kyr,Syr,RE,qFe,Ryr,Byr,mJ,Pyr,Iyr,qyr,BE,NFe,Nyr,jyr,gJ,Dyr,Gyr,Oyr,PE,Aqe,Sc,IE,jFe,nx,Vyr,DFe,Xyr,yqe,gr,sx,zyr,Rc,Qyr,hJ,Wyr,Hyr,pJ,Uyr,Jyr,Yyr,lx,Kyr,GFe,Zyr,eLr,oLr,Gt,ix,rLr,OFe,tLr,aLr,Bc,nLr,VFe,sLr,lLr,uJ,iLr,dLr,cLr,qE,fLr,Gr,dx,mLr,XFe,gLr,hLr,pn,pLr,zFe,uLr,_Lr,QFe,bLr,vLr,WFe,FLr,TLr,MLr,Me,NE,HFe,ELr,CLr,_J,wLr,ALr,yLr,jE,UFe,LLr,xLr,bJ,$Lr,kLr,SLr,DE,JFe,RLr,BLr,vJ,PLr,ILr,qLr,GE,YFe,NLr,jLr,FJ,DLr,GLr,OLr,OE,KFe,VLr,XLr,TJ,zLr,QLr,WLr,VE,ZFe,HLr,ULr,MJ,JLr,YLr,KLr,XE,e0e,ZLr,e8r,EJ,o8r,r8r,t8r,zE,o0e,a8r,n8r,CJ,s8r,l8r,i8r,QE,r0e,d8r,c8r,wJ,f8r,m8r,g8r,WE,t0e,h8r,p8r,AJ,u8r,_8r,b8r,HE,a0e,v8r,F8r,yJ,T8r,M8r,E8r,UE,n0e,C8r,w8r,LJ,A8r,y8r,L8r,JE,Lqe,Pc,YE,s0e,cx,x8r,l0e,$8r,xqe,hr,fx,k8r,Ic,S8r,xJ,R8r,B8r,$J,P8r,I8r,q8r,mx,N8r,i0e,j8r,D8r,G8r,Ot,gx,O8r,d0e,V8r,X8r,qc,z8r,c0e,Q8r,W8r,kJ,H8r,U8r,J8r,KE,Y8r,Or,hx,K8r,f0e,Z8r,exr,un,oxr,m0e,rxr,txr,g0e,axr,nxr,h0e,sxr,lxr,ixr,Le,ZE,p0e,dxr,cxr,SJ,fxr,mxr,gxr,eC,u0e,hxr,pxr,RJ,uxr,_xr,bxr,oC,_0e,vxr,Fxr,BJ,Txr,Mxr,Exr,rC,b0e,Cxr,wxr,PJ,Axr,yxr,Lxr,tC,v0e,xxr,$xr,IJ,kxr,Sxr,Rxr,aC,F0e,Bxr,Pxr,qJ,Ixr,qxr,Nxr,nC,T0e,jxr,Dxr,NJ,Gxr,Oxr,Vxr,sC,M0e,Xxr,zxr,jJ,Qxr,Wxr,Hxr,lC,E0e,Uxr,Jxr,DJ,Yxr,Kxr,Zxr,iC,C0e,e9r,o9r,GJ,r9r,t9r,a9r,dC,$qe,Nc,cC,w0e,px,n9r,A0e,s9r,kqe,pr,ux,l9r,jc,i9r,OJ,d9r,c9r,VJ,f9r,m9r,g9r,_x,h9r,y0e,p9r,u9r,_9r,Vt,bx,b9r,L0e,v9r,F9r,Dc,T9r,x0e,M9r,E9r,XJ,C9r,w9r,A9r,fC,y9r,Vr,vx,L9r,$0e,x9r,$9r,_n,k9r,k0e,S9r,R9r,S0e,B9r,P9r,R0e,I9r,q9r,N9r,Se,mC,B0e,j9r,D9r,zJ,G9r,O9r,V9r,gC,P0e,X9r,z9r,QJ,Q9r,W9r,H9r,hC,I0e,U9r,J9r,WJ,Y9r,K9r,Z9r,pC,q0e,e$r,o$r,HJ,r$r,t$r,a$r,uC,N0e,n$r,s$r,UJ,l$r,i$r,d$r,_C,j0e,c$r,f$r,JJ,m$r,g$r,h$r,bC,D0e,p$r,u$r,YJ,_$r,b$r,v$r,vC,G0e,F$r,T$r,KJ,M$r,E$r,C$r,FC,O0e,w$r,A$r,ZJ,y$r,L$r,x$r,TC,Sqe,Gc,MC,V0e,Fx,$$r,X0e,k$r,Rqe,ur,Tx,S$r,Oc,R$r,eY,B$r,P$r,oY,I$r,q$r,N$r,Mx,j$r,z0e,D$r,G$r,O$r,Xt,Ex,V$r,Q0e,X$r,z$r,Vc,Q$r,W0e,W$r,H$r,rY,U$r,J$r,Y$r,EC,K$r,Xr,Cx,Z$r,H0e,ekr,okr,bn,rkr,U0e,tkr,akr,J0e,nkr,skr,Y0e,lkr,ikr,dkr,xe,CC,K0e,ckr,fkr,tY,mkr,gkr,hkr,wC,Z0e,pkr,ukr,aY,_kr,bkr,vkr,AC,eTe,Fkr,Tkr,nY,Mkr,Ekr,Ckr,yC,oTe,wkr,Akr,sY,ykr,Lkr,xkr,LC,rTe,$kr,kkr,lY,Skr,Rkr,Bkr,xC,tTe,Pkr,Ikr,iY,qkr,Nkr,jkr,$C,aTe,Dkr,Gkr,dY,Okr,Vkr,Xkr,kC,nTe,zkr,Qkr,cY,Wkr,Hkr,Ukr,SC,sTe,Jkr,Ykr,fY,Kkr,Zkr,eSr,RC,lTe,oSr,rSr,mY,tSr,aSr,nSr,BC,Bqe,Xc,PC,iTe,wx,sSr,dTe,lSr,Pqe,_r,Ax,iSr,zc,dSr,gY,cSr,fSr,hY,mSr,gSr,hSr,yx,pSr,cTe,uSr,_Sr,bSr,zt,Lx,vSr,fTe,FSr,TSr,Qc,MSr,mTe,ESr,CSr,pY,wSr,ASr,ySr,IC,LSr,zr,xx,xSr,gTe,$Sr,kSr,vn,SSr,hTe,RSr,BSr,pTe,PSr,ISr,uTe,qSr,NSr,jSr,$e,qC,_Te,DSr,GSr,uY,OSr,VSr,XSr,NC,bTe,zSr,QSr,_Y,WSr,HSr,USr,jC,vTe,JSr,YSr,bY,KSr,ZSr,eRr,DC,FTe,oRr,rRr,vY,tRr,aRr,nRr,GC,TTe,sRr,lRr,FY,iRr,dRr,cRr,OC,MTe,fRr,mRr,TY,gRr,hRr,pRr,VC,ETe,uRr,_Rr,MY,bRr,vRr,FRr,XC,CTe,TRr,MRr,EY,ERr,CRr,wRr,zC,wTe,ARr,yRr,CY,LRr,xRr,$Rr,QC,ATe,kRr,SRr,wY,RRr,BRr,PRr,WC,Iqe,Wc,HC,yTe,$x,IRr,LTe,qRr,qqe,br,kx,NRr,Hc,jRr,AY,DRr,GRr,yY,ORr,VRr,XRr,Sx,zRr,xTe,QRr,WRr,HRr,Qt,Rx,URr,$Te,JRr,YRr,Uc,KRr,kTe,ZRr,eBr,LY,oBr,rBr,tBr,UC,aBr,Qr,Bx,nBr,STe,sBr,lBr,Fn,iBr,RTe,dBr,cBr,BTe,fBr,mBr,PTe,gBr,hBr,pBr,De,JC,ITe,uBr,_Br,xY,bBr,vBr,FBr,YC,qTe,TBr,MBr,$Y,EBr,CBr,wBr,KC,NTe,ABr,yBr,kY,LBr,xBr,$Br,ZC,jTe,kBr,SBr,SY,RBr,BBr,PBr,e3,DTe,IBr,qBr,RY,NBr,jBr,DBr,o3,GTe,GBr,OBr,BY,VBr,XBr,zBr,r3,OTe,QBr,WBr,PY,HBr,UBr,JBr,t3,VTe,YBr,KBr,IY,ZBr,ePr,oPr,a3,Nqe,Jc,n3,XTe,Px,rPr,zTe,tPr,jqe,vr,Ix,aPr,Yc,nPr,qY,sPr,lPr,NY,iPr,dPr,cPr,qx,fPr,QTe,mPr,gPr,hPr,Wt,Nx,pPr,WTe,uPr,_Pr,Kc,bPr,HTe,vPr,FPr,jY,TPr,MPr,EPr,s3,CPr,Wr,jx,wPr,UTe,APr,yPr,Tn,LPr,JTe,xPr,$Pr,YTe,kPr,SPr,KTe,RPr,BPr,PPr,Ge,l3,ZTe,IPr,qPr,DY,NPr,jPr,DPr,i3,eMe,GPr,OPr,GY,VPr,XPr,zPr,d3,oMe,QPr,WPr,OY,HPr,UPr,JPr,c3,rMe,YPr,KPr,VY,ZPr,eIr,oIr,f3,tMe,rIr,tIr,XY,aIr,nIr,sIr,m3,aMe,lIr,iIr,zY,dIr,cIr,fIr,g3,nMe,mIr,gIr,QY,hIr,pIr,uIr,h3,sMe,_Ir,bIr,WY,vIr,FIr,TIr,p3,Dqe,Zc,u3,lMe,Dx,MIr,iMe,EIr,Gqe,Fr,Gx,CIr,ef,wIr,HY,AIr,yIr,UY,LIr,xIr,$Ir,Ox,kIr,dMe,SIr,RIr,BIr,Ht,Vx,PIr,cMe,IIr,qIr,of,NIr,fMe,jIr,DIr,JY,GIr,OIr,VIr,_3,XIr,Hr,Xx,zIr,mMe,QIr,WIr,Mn,HIr,gMe,UIr,JIr,hMe,YIr,KIr,pMe,ZIr,eqr,oqr,uMe,b3,_Me,rqr,tqr,YY,aqr,nqr,sqr,v3,Oqe,rf,F3,bMe,zx,lqr,vMe,iqr,Vqe,Tr,Qx,dqr,tf,cqr,KY,fqr,mqr,ZY,gqr,hqr,pqr,Wx,uqr,FMe,_qr,bqr,vqr,Ut,Hx,Fqr,TMe,Tqr,Mqr,af,Eqr,MMe,Cqr,wqr,eK,Aqr,yqr,Lqr,T3,xqr,Ur,Ux,$qr,EMe,kqr,Sqr,En,Rqr,CMe,Bqr,Pqr,wMe,Iqr,qqr,AMe,Nqr,jqr,Dqr,Jx,M3,yMe,Gqr,Oqr,oK,Vqr,Xqr,zqr,E3,LMe,Qqr,Wqr,rK,Hqr,Uqr,Jqr,C3,Xqe,nf,w3,xMe,Yx,Yqr,$Me,Kqr,zqe,Mr,Kx,Zqr,sf,eNr,tK,oNr,rNr,aK,tNr,aNr,nNr,Zx,sNr,kMe,lNr,iNr,dNr,Jt,e9,cNr,SMe,fNr,mNr,lf,gNr,RMe,hNr,pNr,nK,uNr,_Nr,bNr,A3,vNr,Jr,o9,FNr,BMe,TNr,MNr,Cn,ENr,PMe,CNr,wNr,IMe,ANr,yNr,qMe,LNr,xNr,$Nr,NMe,y3,jMe,kNr,SNr,sK,RNr,BNr,PNr,L3,Qqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),YA=new ee({}),KA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new INr({props:{warning:!0,$$slots:{default:[m6t]},$$scope:{ctx:L}}}),ZA=new ee({}),e6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/configuration_auto.py#L571"}}),t6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/configuration_auto.py#L594"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[g6t]},$$scope:{ctx:L}}}),a6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/configuration_auto.py#L716"}}),n6=new ee({}),s6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/tokenization_auto.py#L378"}}),d6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17057/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/tokenization_auto.py#L392"}}),Ug=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[h6t]},$$scope:{ctx:L}}}),c6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/tokenization_auto.py#L588"}}),f6=new ee({}),m6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),p6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17057/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Eh=new INr({props:{$$slots:{default:[p6t]},$$scope:{ctx:L}}}),Ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[u6t]},$$scope:{ctx:L}}}),u6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),_6=new ee({}),b6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/processing_auto.py#L77"}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/processing_auto.py#L91"}}),Oh=new INr({props:{$$slots:{default:[_6t]},$$scope:{ctx:L}}}),Vh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[b6t]},$$scope:{ctx:L}}}),M6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/processing_auto.py#L244"}}),E6=new ee({}),C6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L721"}}),A6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Qh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[v6t]},$$scope:{ctx:L}}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[F6t]},$$scope:{ctx:L}}}),L6=new ee({}),x6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L728"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[T6t]},$$scope:{ctx:L}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[M6t]},$$scope:{ctx:L}}}),R6=new ee({}),B6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L743"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),L_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[E6t]},$$scope:{ctx:L}}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[C6t]},$$scope:{ctx:L}}}),N6=new ee({}),j6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L750"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[w6t]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[A6t]},$$scope:{ctx:L}}}),V6=new ee({}),X6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L757"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[y6t]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[L6t]},$$scope:{ctx:L}}}),H6=new ee({}),U6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L766"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[x6t]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),pb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$6t]},$$scope:{ctx:L}}}),Z6=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L800"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[k6t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[S6t]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L807"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[R6t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[B6t]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L793"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[P6t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[I6t]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L775"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[q6t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[N6t]},$$scope:{ctx:L}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L782"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[j6t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[D6t]},$$scope:{ctx:L}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L816"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[G6t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[O6t]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L855"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[V6t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[X6t]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L862"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[z6t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Q6t]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L885"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[W6t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[H6t]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L869"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[U6t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Sv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[J6t]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L876"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Y6t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[K6t]},$$scope:{ctx:L}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L894"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Z6t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L901"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L848"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L823"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L830"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_auto.py#L839"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),b8=new ee({}),v8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),zx=new ee({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),Yx=new ee({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17057/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17057/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17057/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),WA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),HA=o("AutoConfig"),yn=o(", "),Ln=a("a"),UA=o("AutoModel"),fi=o(`, and
`),xn=a("a"),JA=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),h$=o("will create a model that is an instance of "),gi=a("a"),p$=o("BertModel"),u$=o("."),Eo=l(),Ea=a("p"),_$=o("There is one class of "),pf=a("code"),b$=o("AutoModel"),eDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VPe=l(),hi=a("h2"),uf=a("a"),eee=a("span"),F(YA.$$.fragment),oDe=l(),oee=a("span"),rDe=o("Extending the Auto Classes"),XPe=l(),$n=a("p"),tDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ree=a("code"),aDe=o("NewModel"),nDe=o(", make sure you have a "),tee=a("code"),sDe=o("NewModelConfig"),lDe=o(` then you can add those to the auto
classes like this:`),zPe=l(),F(KA.$$.fragment),QPe=l(),v$=a("p"),iDe=o("You will then be able to use the auto classes like you would usually do!"),WPe=l(),F(_f.$$.fragment),HPe=l(),pi=a("h2"),bf=a("a"),aee=a("span"),F(ZA.$$.fragment),dDe=l(),nee=a("span"),cDe=o("AutoConfig"),UPe=l(),Co=a("div"),F(e6.$$.fragment),fDe=l(),o6=a("p"),mDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=a("a"),gDe=o("from_pretrained()"),hDe=o(" class method."),pDe=l(),r6=a("p"),uDe=o("This class cannot be instantiated directly using "),see=a("code"),_De=o("__init__()"),bDe=o(" (throws an error)."),vDe=l(),Er=a("div"),F(t6.$$.fragment),FDe=l(),lee=a("p"),TDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MDe=l(),ui=a("p"),EDe=o("The configuration class to instantiate is selected based on the "),iee=a("code"),CDe=o("model_type"),wDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dee=a("code"),ADe=o("pretrained_model_name_or_path"),yDe=o(":"),LDe=l(),A=a("ul"),vf=a("li"),cee=a("strong"),xDe=o("albert"),$De=o(" \u2014 "),T$=a("a"),kDe=o("AlbertConfig"),SDe=o(" (ALBERT model)"),RDe=l(),Ff=a("li"),fee=a("strong"),BDe=o("bart"),PDe=o(" \u2014 "),M$=a("a"),IDe=o("BartConfig"),qDe=o(" (BART model)"),NDe=l(),Tf=a("li"),mee=a("strong"),jDe=o("beit"),DDe=o(" \u2014 "),E$=a("a"),GDe=o("BeitConfig"),ODe=o(" (BEiT model)"),VDe=l(),Mf=a("li"),gee=a("strong"),XDe=o("bert"),zDe=o(" \u2014 "),C$=a("a"),QDe=o("BertConfig"),WDe=o(" (BERT model)"),HDe=l(),Ef=a("li"),hee=a("strong"),UDe=o("bert-generation"),JDe=o(" \u2014 "),w$=a("a"),YDe=o("BertGenerationConfig"),KDe=o(" (Bert Generation model)"),ZDe=l(),Cf=a("li"),pee=a("strong"),eGe=o("big_bird"),oGe=o(" \u2014 "),A$=a("a"),rGe=o("BigBirdConfig"),tGe=o(" (BigBird model)"),aGe=l(),wf=a("li"),uee=a("strong"),nGe=o("bigbird_pegasus"),sGe=o(" \u2014 "),y$=a("a"),lGe=o("BigBirdPegasusConfig"),iGe=o(" (BigBirdPegasus model)"),dGe=l(),Af=a("li"),_ee=a("strong"),cGe=o("blenderbot"),fGe=o(" \u2014 "),L$=a("a"),mGe=o("BlenderbotConfig"),gGe=o(" (Blenderbot model)"),hGe=l(),yf=a("li"),bee=a("strong"),pGe=o("blenderbot-small"),uGe=o(" \u2014 "),x$=a("a"),_Ge=o("BlenderbotSmallConfig"),bGe=o(" (BlenderbotSmall model)"),vGe=l(),Lf=a("li"),vee=a("strong"),FGe=o("camembert"),TGe=o(" \u2014 "),$$=a("a"),MGe=o("CamembertConfig"),EGe=o(" (CamemBERT model)"),CGe=l(),xf=a("li"),Fee=a("strong"),wGe=o("canine"),AGe=o(" \u2014 "),k$=a("a"),yGe=o("CanineConfig"),LGe=o(" (Canine model)"),xGe=l(),$f=a("li"),Tee=a("strong"),$Ge=o("clip"),kGe=o(" \u2014 "),S$=a("a"),SGe=o("CLIPConfig"),RGe=o(" (CLIP model)"),BGe=l(),kf=a("li"),Mee=a("strong"),PGe=o("convbert"),IGe=o(" \u2014 "),R$=a("a"),qGe=o("ConvBertConfig"),NGe=o(" (ConvBERT model)"),jGe=l(),Sf=a("li"),Eee=a("strong"),DGe=o("convnext"),GGe=o(" \u2014 "),B$=a("a"),OGe=o("ConvNextConfig"),VGe=o(" (ConvNext model)"),XGe=l(),Rf=a("li"),Cee=a("strong"),zGe=o("ctrl"),QGe=o(" \u2014 "),P$=a("a"),WGe=o("CTRLConfig"),HGe=o(" (CTRL model)"),UGe=l(),Bf=a("li"),wee=a("strong"),JGe=o("data2vec-audio"),YGe=o(" \u2014 "),I$=a("a"),KGe=o("Data2VecAudioConfig"),ZGe=o(" (Data2VecAudio model)"),eOe=l(),Pf=a("li"),Aee=a("strong"),oOe=o("data2vec-text"),rOe=o(" \u2014 "),q$=a("a"),tOe=o("Data2VecTextConfig"),aOe=o(" (Data2VecText model)"),nOe=l(),If=a("li"),yee=a("strong"),sOe=o("data2vec-vision"),lOe=o(" \u2014 "),N$=a("a"),iOe=o("Data2VecVisionConfig"),dOe=o(" (Data2VecVision model)"),cOe=l(),qf=a("li"),Lee=a("strong"),fOe=o("deberta"),mOe=o(" \u2014 "),j$=a("a"),gOe=o("DebertaConfig"),hOe=o(" (DeBERTa model)"),pOe=l(),Nf=a("li"),xee=a("strong"),uOe=o("deberta-v2"),_Oe=o(" \u2014 "),D$=a("a"),bOe=o("DebertaV2Config"),vOe=o(" (DeBERTa-v2 model)"),FOe=l(),jf=a("li"),$ee=a("strong"),TOe=o("decision_transformer"),MOe=o(" \u2014 "),G$=a("a"),EOe=o("DecisionTransformerConfig"),COe=o(" (Decision Transformer model)"),wOe=l(),Df=a("li"),kee=a("strong"),AOe=o("deit"),yOe=o(" \u2014 "),O$=a("a"),LOe=o("DeiTConfig"),xOe=o(" (DeiT model)"),$Oe=l(),Gf=a("li"),See=a("strong"),kOe=o("detr"),SOe=o(" \u2014 "),V$=a("a"),ROe=o("DetrConfig"),BOe=o(" (DETR model)"),POe=l(),Of=a("li"),Ree=a("strong"),IOe=o("distilbert"),qOe=o(" \u2014 "),X$=a("a"),NOe=o("DistilBertConfig"),jOe=o(" (DistilBERT model)"),DOe=l(),Vf=a("li"),Bee=a("strong"),GOe=o("dpr"),OOe=o(" \u2014 "),z$=a("a"),VOe=o("DPRConfig"),XOe=o(" (DPR model)"),zOe=l(),Xf=a("li"),Pee=a("strong"),QOe=o("dpt"),WOe=o(" \u2014 "),Q$=a("a"),HOe=o("DPTConfig"),UOe=o(" (DPT model)"),JOe=l(),zf=a("li"),Iee=a("strong"),YOe=o("electra"),KOe=o(" \u2014 "),W$=a("a"),ZOe=o("ElectraConfig"),eVe=o(" (ELECTRA model)"),oVe=l(),Qf=a("li"),qee=a("strong"),rVe=o("encoder-decoder"),tVe=o(" \u2014 "),H$=a("a"),aVe=o("EncoderDecoderConfig"),nVe=o(" (Encoder decoder model)"),sVe=l(),Wf=a("li"),Nee=a("strong"),lVe=o("flaubert"),iVe=o(" \u2014 "),U$=a("a"),dVe=o("FlaubertConfig"),cVe=o(" (FlauBERT model)"),fVe=l(),Hf=a("li"),jee=a("strong"),mVe=o("flava"),gVe=o(" \u2014 "),J$=a("a"),hVe=o("FlavaConfig"),pVe=o(" (Flava model)"),uVe=l(),Uf=a("li"),Dee=a("strong"),_Ve=o("fnet"),bVe=o(" \u2014 "),Y$=a("a"),vVe=o("FNetConfig"),FVe=o(" (FNet model)"),TVe=l(),Jf=a("li"),Gee=a("strong"),MVe=o("fsmt"),EVe=o(" \u2014 "),K$=a("a"),CVe=o("FSMTConfig"),wVe=o(" (FairSeq Machine-Translation model)"),AVe=l(),Yf=a("li"),Oee=a("strong"),yVe=o("funnel"),LVe=o(" \u2014 "),Z$=a("a"),xVe=o("FunnelConfig"),$Ve=o(" (Funnel Transformer model)"),kVe=l(),Kf=a("li"),Vee=a("strong"),SVe=o("glpn"),RVe=o(" \u2014 "),ek=a("a"),BVe=o("GLPNConfig"),PVe=o(" (GLPN model)"),IVe=l(),Zf=a("li"),Xee=a("strong"),qVe=o("gpt2"),NVe=o(" \u2014 "),ok=a("a"),jVe=o("GPT2Config"),DVe=o(" (OpenAI GPT-2 model)"),GVe=l(),em=a("li"),zee=a("strong"),OVe=o("gpt_neo"),VVe=o(" \u2014 "),rk=a("a"),XVe=o("GPTNeoConfig"),zVe=o(" (GPT Neo model)"),QVe=l(),om=a("li"),Qee=a("strong"),WVe=o("gptj"),HVe=o(" \u2014 "),tk=a("a"),UVe=o("GPTJConfig"),JVe=o(" (GPT-J model)"),YVe=l(),rm=a("li"),Wee=a("strong"),KVe=o("hubert"),ZVe=o(" \u2014 "),ak=a("a"),eXe=o("HubertConfig"),oXe=o(" (Hubert model)"),rXe=l(),tm=a("li"),Hee=a("strong"),tXe=o("ibert"),aXe=o(" \u2014 "),nk=a("a"),nXe=o("IBertConfig"),sXe=o(" (I-BERT model)"),lXe=l(),am=a("li"),Uee=a("strong"),iXe=o("imagegpt"),dXe=o(" \u2014 "),sk=a("a"),cXe=o("ImageGPTConfig"),fXe=o(" (ImageGPT model)"),mXe=l(),nm=a("li"),Jee=a("strong"),gXe=o("layoutlm"),hXe=o(" \u2014 "),lk=a("a"),pXe=o("LayoutLMConfig"),uXe=o(" (LayoutLM model)"),_Xe=l(),sm=a("li"),Yee=a("strong"),bXe=o("layoutlmv2"),vXe=o(" \u2014 "),ik=a("a"),FXe=o("LayoutLMv2Config"),TXe=o(" (LayoutLMv2 model)"),MXe=l(),lm=a("li"),Kee=a("strong"),EXe=o("led"),CXe=o(" \u2014 "),dk=a("a"),wXe=o("LEDConfig"),AXe=o(" (LED model)"),yXe=l(),im=a("li"),Zee=a("strong"),LXe=o("longformer"),xXe=o(" \u2014 "),ck=a("a"),$Xe=o("LongformerConfig"),kXe=o(" (Longformer model)"),SXe=l(),dm=a("li"),eoe=a("strong"),RXe=o("luke"),BXe=o(" \u2014 "),fk=a("a"),PXe=o("LukeConfig"),IXe=o(" (LUKE model)"),qXe=l(),cm=a("li"),ooe=a("strong"),NXe=o("lxmert"),jXe=o(" \u2014 "),mk=a("a"),DXe=o("LxmertConfig"),GXe=o(" (LXMERT model)"),OXe=l(),fm=a("li"),roe=a("strong"),VXe=o("m2m_100"),XXe=o(" \u2014 "),gk=a("a"),zXe=o("M2M100Config"),QXe=o(" (M2M100 model)"),WXe=l(),mm=a("li"),toe=a("strong"),HXe=o("marian"),UXe=o(" \u2014 "),hk=a("a"),JXe=o("MarianConfig"),YXe=o(" (Marian model)"),KXe=l(),gm=a("li"),aoe=a("strong"),ZXe=o("maskformer"),eze=o(" \u2014 "),pk=a("a"),oze=o("MaskFormerConfig"),rze=o(" (MaskFormer model)"),tze=l(),hm=a("li"),noe=a("strong"),aze=o("mbart"),nze=o(" \u2014 "),uk=a("a"),sze=o("MBartConfig"),lze=o(" (mBART model)"),ize=l(),pm=a("li"),soe=a("strong"),dze=o("megatron-bert"),cze=o(" \u2014 "),_k=a("a"),fze=o("MegatronBertConfig"),mze=o(" (MegatronBert model)"),gze=l(),um=a("li"),loe=a("strong"),hze=o("mobilebert"),pze=o(" \u2014 "),bk=a("a"),uze=o("MobileBertConfig"),_ze=o(" (MobileBERT model)"),bze=l(),_m=a("li"),ioe=a("strong"),vze=o("mpnet"),Fze=o(" \u2014 "),vk=a("a"),Tze=o("MPNetConfig"),Mze=o(" (MPNet model)"),Eze=l(),bm=a("li"),doe=a("strong"),Cze=o("mt5"),wze=o(" \u2014 "),Fk=a("a"),Aze=o("MT5Config"),yze=o(" (mT5 model)"),Lze=l(),vm=a("li"),coe=a("strong"),xze=o("nystromformer"),$ze=o(" \u2014 "),Tk=a("a"),kze=o("NystromformerConfig"),Sze=o(" (Nystromformer model)"),Rze=l(),Fm=a("li"),foe=a("strong"),Bze=o("openai-gpt"),Pze=o(" \u2014 "),Mk=a("a"),Ize=o("OpenAIGPTConfig"),qze=o(" (OpenAI GPT model)"),Nze=l(),Tm=a("li"),moe=a("strong"),jze=o("opt"),Dze=o(" \u2014 "),Ek=a("a"),Gze=o("OPTConfig"),Oze=o(" (OPT model)"),Vze=l(),Mm=a("li"),goe=a("strong"),Xze=o("pegasus"),zze=o(" \u2014 "),Ck=a("a"),Qze=o("PegasusConfig"),Wze=o(" (Pegasus model)"),Hze=l(),Em=a("li"),hoe=a("strong"),Uze=o("perceiver"),Jze=o(" \u2014 "),wk=a("a"),Yze=o("PerceiverConfig"),Kze=o(" (Perceiver model)"),Zze=l(),Cm=a("li"),poe=a("strong"),eQe=o("plbart"),oQe=o(" \u2014 "),Ak=a("a"),rQe=o("PLBartConfig"),tQe=o(" (PLBart model)"),aQe=l(),wm=a("li"),uoe=a("strong"),nQe=o("poolformer"),sQe=o(" \u2014 "),yk=a("a"),lQe=o("PoolFormerConfig"),iQe=o(" (PoolFormer model)"),dQe=l(),Am=a("li"),_oe=a("strong"),cQe=o("prophetnet"),fQe=o(" \u2014 "),Lk=a("a"),mQe=o("ProphetNetConfig"),gQe=o(" (ProphetNet model)"),hQe=l(),ym=a("li"),boe=a("strong"),pQe=o("qdqbert"),uQe=o(" \u2014 "),xk=a("a"),_Qe=o("QDQBertConfig"),bQe=o(" (QDQBert model)"),vQe=l(),Lm=a("li"),voe=a("strong"),FQe=o("rag"),TQe=o(" \u2014 "),$k=a("a"),MQe=o("RagConfig"),EQe=o(" (RAG model)"),CQe=l(),xm=a("li"),Foe=a("strong"),wQe=o("realm"),AQe=o(" \u2014 "),kk=a("a"),yQe=o("RealmConfig"),LQe=o(" (Realm model)"),xQe=l(),$m=a("li"),Toe=a("strong"),$Qe=o("reformer"),kQe=o(" \u2014 "),Sk=a("a"),SQe=o("ReformerConfig"),RQe=o(" (Reformer model)"),BQe=l(),km=a("li"),Moe=a("strong"),PQe=o("regnet"),IQe=o(" \u2014 "),Rk=a("a"),qQe=o("RegNetConfig"),NQe=o(" (RegNet model)"),jQe=l(),Sm=a("li"),Eoe=a("strong"),DQe=o("rembert"),GQe=o(" \u2014 "),Bk=a("a"),OQe=o("RemBertConfig"),VQe=o(" (RemBERT model)"),XQe=l(),Rm=a("li"),Coe=a("strong"),zQe=o("resnet"),QQe=o(" \u2014 "),Pk=a("a"),WQe=o("ResNetConfig"),HQe=o(" (ResNet model)"),UQe=l(),Bm=a("li"),woe=a("strong"),JQe=o("retribert"),YQe=o(" \u2014 "),Ik=a("a"),KQe=o("RetriBertConfig"),ZQe=o(" (RetriBERT model)"),eWe=l(),Pm=a("li"),Aoe=a("strong"),oWe=o("roberta"),rWe=o(" \u2014 "),qk=a("a"),tWe=o("RobertaConfig"),aWe=o(" (RoBERTa model)"),nWe=l(),Im=a("li"),yoe=a("strong"),sWe=o("roformer"),lWe=o(" \u2014 "),Nk=a("a"),iWe=o("RoFormerConfig"),dWe=o(" (RoFormer model)"),cWe=l(),qm=a("li"),Loe=a("strong"),fWe=o("segformer"),mWe=o(" \u2014 "),jk=a("a"),gWe=o("SegformerConfig"),hWe=o(" (SegFormer model)"),pWe=l(),Nm=a("li"),xoe=a("strong"),uWe=o("sew"),_We=o(" \u2014 "),Dk=a("a"),bWe=o("SEWConfig"),vWe=o(" (SEW model)"),FWe=l(),jm=a("li"),$oe=a("strong"),TWe=o("sew-d"),MWe=o(" \u2014 "),Gk=a("a"),EWe=o("SEWDConfig"),CWe=o(" (SEW-D model)"),wWe=l(),Dm=a("li"),koe=a("strong"),AWe=o("speech-encoder-decoder"),yWe=o(" \u2014 "),Ok=a("a"),LWe=o("SpeechEncoderDecoderConfig"),xWe=o(" (Speech Encoder decoder model)"),$We=l(),Gm=a("li"),Soe=a("strong"),kWe=o("speech_to_text"),SWe=o(" \u2014 "),Vk=a("a"),RWe=o("Speech2TextConfig"),BWe=o(" (Speech2Text model)"),PWe=l(),Om=a("li"),Roe=a("strong"),IWe=o("speech_to_text_2"),qWe=o(" \u2014 "),Xk=a("a"),NWe=o("Speech2Text2Config"),jWe=o(" (Speech2Text2 model)"),DWe=l(),Vm=a("li"),Boe=a("strong"),GWe=o("splinter"),OWe=o(" \u2014 "),zk=a("a"),VWe=o("SplinterConfig"),XWe=o(" (Splinter model)"),zWe=l(),Xm=a("li"),Poe=a("strong"),QWe=o("squeezebert"),WWe=o(" \u2014 "),Qk=a("a"),HWe=o("SqueezeBertConfig"),UWe=o(" (SqueezeBERT model)"),JWe=l(),zm=a("li"),Ioe=a("strong"),YWe=o("swin"),KWe=o(" \u2014 "),Wk=a("a"),ZWe=o("SwinConfig"),eHe=o(" (Swin model)"),oHe=l(),Qm=a("li"),qoe=a("strong"),rHe=o("t5"),tHe=o(" \u2014 "),Hk=a("a"),aHe=o("T5Config"),nHe=o(" (T5 model)"),sHe=l(),Wm=a("li"),Noe=a("strong"),lHe=o("tapas"),iHe=o(" \u2014 "),Uk=a("a"),dHe=o("TapasConfig"),cHe=o(" (TAPAS model)"),fHe=l(),Hm=a("li"),joe=a("strong"),mHe=o("tapex"),gHe=o(" \u2014 "),Jk=a("a"),hHe=o("BartConfig"),pHe=o(" (TAPEX model)"),uHe=l(),Um=a("li"),Doe=a("strong"),_He=o("transfo-xl"),bHe=o(" \u2014 "),Yk=a("a"),vHe=o("TransfoXLConfig"),FHe=o(" (Transformer-XL model)"),THe=l(),Jm=a("li"),Goe=a("strong"),MHe=o("trocr"),EHe=o(" \u2014 "),Kk=a("a"),CHe=o("TrOCRConfig"),wHe=o(" (TrOCR model)"),AHe=l(),Ym=a("li"),Ooe=a("strong"),yHe=o("unispeech"),LHe=o(" \u2014 "),Zk=a("a"),xHe=o("UniSpeechConfig"),$He=o(" (UniSpeech model)"),kHe=l(),Km=a("li"),Voe=a("strong"),SHe=o("unispeech-sat"),RHe=o(" \u2014 "),eS=a("a"),BHe=o("UniSpeechSatConfig"),PHe=o(" (UniSpeechSat model)"),IHe=l(),Zm=a("li"),Xoe=a("strong"),qHe=o("van"),NHe=o(" \u2014 "),oS=a("a"),jHe=o("VanConfig"),DHe=o(" (VAN model)"),GHe=l(),eg=a("li"),zoe=a("strong"),OHe=o("vilt"),VHe=o(" \u2014 "),rS=a("a"),XHe=o("ViltConfig"),zHe=o(" (ViLT model)"),QHe=l(),og=a("li"),Qoe=a("strong"),WHe=o("vision-encoder-decoder"),HHe=o(" \u2014 "),tS=a("a"),UHe=o("VisionEncoderDecoderConfig"),JHe=o(" (Vision Encoder decoder model)"),YHe=l(),rg=a("li"),Woe=a("strong"),KHe=o("vision-text-dual-encoder"),ZHe=o(" \u2014 "),aS=a("a"),eUe=o("VisionTextDualEncoderConfig"),oUe=o(" (VisionTextDualEncoder model)"),rUe=l(),tg=a("li"),Hoe=a("strong"),tUe=o("visual_bert"),aUe=o(" \u2014 "),nS=a("a"),nUe=o("VisualBertConfig"),sUe=o(" (VisualBert model)"),lUe=l(),ag=a("li"),Uoe=a("strong"),iUe=o("vit"),dUe=o(" \u2014 "),sS=a("a"),cUe=o("ViTConfig"),fUe=o(" (ViT model)"),mUe=l(),ng=a("li"),Joe=a("strong"),gUe=o("vit_mae"),hUe=o(" \u2014 "),lS=a("a"),pUe=o("ViTMAEConfig"),uUe=o(" (ViTMAE model)"),_Ue=l(),sg=a("li"),Yoe=a("strong"),bUe=o("wav2vec2"),vUe=o(" \u2014 "),iS=a("a"),FUe=o("Wav2Vec2Config"),TUe=o(" (Wav2Vec2 model)"),MUe=l(),lg=a("li"),Koe=a("strong"),EUe=o("wavlm"),CUe=o(" \u2014 "),dS=a("a"),wUe=o("WavLMConfig"),AUe=o(" (WavLM model)"),yUe=l(),ig=a("li"),Zoe=a("strong"),LUe=o("xglm"),xUe=o(" \u2014 "),cS=a("a"),$Ue=o("XGLMConfig"),kUe=o(" (XGLM model)"),SUe=l(),dg=a("li"),ere=a("strong"),RUe=o("xlm"),BUe=o(" \u2014 "),fS=a("a"),PUe=o("XLMConfig"),IUe=o(" (XLM model)"),qUe=l(),cg=a("li"),ore=a("strong"),NUe=o("xlm-prophetnet"),jUe=o(" \u2014 "),mS=a("a"),DUe=o("XLMProphetNetConfig"),GUe=o(" (XLMProphetNet model)"),OUe=l(),fg=a("li"),rre=a("strong"),VUe=o("xlm-roberta"),XUe=o(" \u2014 "),gS=a("a"),zUe=o("XLMRobertaConfig"),QUe=o(" (XLM-RoBERTa model)"),WUe=l(),mg=a("li"),tre=a("strong"),HUe=o("xlm-roberta-xl"),UUe=o(" \u2014 "),hS=a("a"),JUe=o("XLMRobertaXLConfig"),YUe=o(" (XLM-RoBERTa-XL model)"),KUe=l(),gg=a("li"),are=a("strong"),ZUe=o("xlnet"),eJe=o(" \u2014 "),pS=a("a"),oJe=o("XLNetConfig"),rJe=o(" (XLNet model)"),tJe=l(),hg=a("li"),nre=a("strong"),aJe=o("yolos"),nJe=o(" \u2014 "),uS=a("a"),sJe=o("YolosConfig"),lJe=o(" (YOLOS model)"),iJe=l(),pg=a("li"),sre=a("strong"),dJe=o("yoso"),cJe=o(" \u2014 "),_S=a("a"),fJe=o("YosoConfig"),mJe=o(" (YOSO model)"),gJe=l(),F(ug.$$.fragment),hJe=l(),_g=a("div"),F(a6.$$.fragment),pJe=l(),lre=a("p"),uJe=o("Register a new configuration for this class."),JPe=l(),_i=a("h2"),bg=a("a"),ire=a("span"),F(n6.$$.fragment),_Je=l(),dre=a("span"),bJe=o("AutoTokenizer"),YPe=l(),wo=a("div"),F(s6.$$.fragment),vJe=l(),l6=a("p"),FJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bS=a("a"),TJe=o("AutoTokenizer.from_pretrained()"),MJe=o(" class method."),EJe=l(),i6=a("p"),CJe=o("This class cannot be instantiated directly using "),cre=a("code"),wJe=o("__init__()"),AJe=o(" (throws an error)."),yJe=l(),Cr=a("div"),F(d6.$$.fragment),LJe=l(),fre=a("p"),xJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Je=l(),Ca=a("p"),kJe=o("The tokenizer class to instantiate is selected based on the "),mre=a("code"),SJe=o("model_type"),RJe=o(` property of the config object (either
passed as an argument or loaded from `),gre=a("code"),BJe=o("pretrained_model_name_or_path"),PJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=a("code"),IJe=o("pretrained_model_name_or_path"),qJe=o(":"),NJe=l(),k=a("ul"),kn=a("li"),pre=a("strong"),jJe=o("albert"),DJe=o(" \u2014 "),vS=a("a"),GJe=o("AlbertTokenizer"),OJe=o(" or "),FS=a("a"),VJe=o("AlbertTokenizerFast"),XJe=o(" (ALBERT model)"),zJe=l(),Sn=a("li"),ure=a("strong"),QJe=o("bart"),WJe=o(" \u2014 "),TS=a("a"),HJe=o("BartTokenizer"),UJe=o(" or "),MS=a("a"),JJe=o("BartTokenizerFast"),YJe=o(" (BART model)"),KJe=l(),Rn=a("li"),_re=a("strong"),ZJe=o("barthez"),eYe=o(" \u2014 "),ES=a("a"),oYe=o("BarthezTokenizer"),rYe=o(" or "),CS=a("a"),tYe=o("BarthezTokenizerFast"),aYe=o(" (BARThez model)"),nYe=l(),vg=a("li"),bre=a("strong"),sYe=o("bartpho"),lYe=o(" \u2014 "),wS=a("a"),iYe=o("BartphoTokenizer"),dYe=o(" (BARTpho model)"),cYe=l(),Bn=a("li"),vre=a("strong"),fYe=o("bert"),mYe=o(" \u2014 "),AS=a("a"),gYe=o("BertTokenizer"),hYe=o(" or "),yS=a("a"),pYe=o("BertTokenizerFast"),uYe=o(" (BERT model)"),_Ye=l(),Fg=a("li"),Fre=a("strong"),bYe=o("bert-generation"),vYe=o(" \u2014 "),LS=a("a"),FYe=o("BertGenerationTokenizer"),TYe=o(" (Bert Generation model)"),MYe=l(),Tg=a("li"),Tre=a("strong"),EYe=o("bert-japanese"),CYe=o(" \u2014 "),xS=a("a"),wYe=o("BertJapaneseTokenizer"),AYe=o(" (BertJapanese model)"),yYe=l(),Mg=a("li"),Mre=a("strong"),LYe=o("bertweet"),xYe=o(" \u2014 "),$S=a("a"),$Ye=o("BertweetTokenizer"),kYe=o(" (Bertweet model)"),SYe=l(),Pn=a("li"),Ere=a("strong"),RYe=o("big_bird"),BYe=o(" \u2014 "),kS=a("a"),PYe=o("BigBirdTokenizer"),IYe=o(" or "),SS=a("a"),qYe=o("BigBirdTokenizerFast"),NYe=o(" (BigBird model)"),jYe=l(),In=a("li"),Cre=a("strong"),DYe=o("bigbird_pegasus"),GYe=o(" \u2014 "),RS=a("a"),OYe=o("PegasusTokenizer"),VYe=o(" or "),BS=a("a"),XYe=o("PegasusTokenizerFast"),zYe=o(" (BigBirdPegasus model)"),QYe=l(),qn=a("li"),wre=a("strong"),WYe=o("blenderbot"),HYe=o(" \u2014 "),PS=a("a"),UYe=o("BlenderbotTokenizer"),JYe=o(" or "),IS=a("a"),YYe=o("BlenderbotTokenizerFast"),KYe=o(" (Blenderbot model)"),ZYe=l(),Eg=a("li"),Are=a("strong"),eKe=o("blenderbot-small"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("BlenderbotSmallTokenizer"),tKe=o(" (BlenderbotSmall model)"),aKe=l(),Cg=a("li"),yre=a("strong"),nKe=o("byt5"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("ByT5Tokenizer"),iKe=o(" (ByT5 model)"),dKe=l(),Nn=a("li"),Lre=a("strong"),cKe=o("camembert"),fKe=o(" \u2014 "),jS=a("a"),mKe=o("CamembertTokenizer"),gKe=o(" or "),DS=a("a"),hKe=o("CamembertTokenizerFast"),pKe=o(" (CamemBERT model)"),uKe=l(),wg=a("li"),xre=a("strong"),_Ke=o("canine"),bKe=o(" \u2014 "),GS=a("a"),vKe=o("CanineTokenizer"),FKe=o(" (Canine model)"),TKe=l(),jn=a("li"),$re=a("strong"),MKe=o("clip"),EKe=o(" \u2014 "),OS=a("a"),CKe=o("CLIPTokenizer"),wKe=o(" or "),VS=a("a"),AKe=o("CLIPTokenizerFast"),yKe=o(" (CLIP model)"),LKe=l(),Dn=a("li"),kre=a("strong"),xKe=o("convbert"),$Ke=o(" \u2014 "),XS=a("a"),kKe=o("ConvBertTokenizer"),SKe=o(" or "),zS=a("a"),RKe=o("ConvBertTokenizerFast"),BKe=o(" (ConvBERT model)"),PKe=l(),Gn=a("li"),Sre=a("strong"),IKe=o("cpm"),qKe=o(" \u2014 "),QS=a("a"),NKe=o("CpmTokenizer"),jKe=o(" or "),WS=a("a"),DKe=o("CpmTokenizerFast"),GKe=o(" (CPM model)"),OKe=l(),Ag=a("li"),Rre=a("strong"),VKe=o("ctrl"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("CTRLTokenizer"),QKe=o(" (CTRL model)"),WKe=l(),On=a("li"),Bre=a("strong"),HKe=o("data2vec-text"),UKe=o(" \u2014 "),US=a("a"),JKe=o("RobertaTokenizer"),YKe=o(" or "),JS=a("a"),KKe=o("RobertaTokenizerFast"),ZKe=o(" (Data2VecText model)"),eZe=l(),Vn=a("li"),Pre=a("strong"),oZe=o("deberta"),rZe=o(" \u2014 "),YS=a("a"),tZe=o("DebertaTokenizer"),aZe=o(" or "),KS=a("a"),nZe=o("DebertaTokenizerFast"),sZe=o(" (DeBERTa model)"),lZe=l(),Xn=a("li"),Ire=a("strong"),iZe=o("deberta-v2"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("DebertaV2Tokenizer"),fZe=o(" or "),eR=a("a"),mZe=o("DebertaV2TokenizerFast"),gZe=o(" (DeBERTa-v2 model)"),hZe=l(),zn=a("li"),qre=a("strong"),pZe=o("distilbert"),uZe=o(" \u2014 "),oR=a("a"),_Ze=o("DistilBertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("DistilBertTokenizerFast"),FZe=o(" (DistilBERT model)"),TZe=l(),Qn=a("li"),Nre=a("strong"),MZe=o("dpr"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("DPRQuestionEncoderTokenizer"),wZe=o(" or "),aR=a("a"),AZe=o("DPRQuestionEncoderTokenizerFast"),yZe=o(" (DPR model)"),LZe=l(),Wn=a("li"),jre=a("strong"),xZe=o("electra"),$Ze=o(" \u2014 "),nR=a("a"),kZe=o("ElectraTokenizer"),SZe=o(" or "),sR=a("a"),RZe=o("ElectraTokenizerFast"),BZe=o(" (ELECTRA model)"),PZe=l(),yg=a("li"),Dre=a("strong"),IZe=o("flaubert"),qZe=o(" \u2014 "),lR=a("a"),NZe=o("FlaubertTokenizer"),jZe=o(" (FlauBERT model)"),DZe=l(),Hn=a("li"),Gre=a("strong"),GZe=o("fnet"),OZe=o(" \u2014 "),iR=a("a"),VZe=o("FNetTokenizer"),XZe=o(" or "),dR=a("a"),zZe=o("FNetTokenizerFast"),QZe=o(" (FNet model)"),WZe=l(),Lg=a("li"),Ore=a("strong"),HZe=o("fsmt"),UZe=o(" \u2014 "),cR=a("a"),JZe=o("FSMTTokenizer"),YZe=o(" (FairSeq Machine-Translation model)"),KZe=l(),Un=a("li"),Vre=a("strong"),ZZe=o("funnel"),eeo=o(" \u2014 "),fR=a("a"),oeo=o("FunnelTokenizer"),reo=o(" or "),mR=a("a"),teo=o("FunnelTokenizerFast"),aeo=o(" (Funnel Transformer model)"),neo=l(),Jn=a("li"),Xre=a("strong"),seo=o("gpt2"),leo=o(" \u2014 "),gR=a("a"),ieo=o("GPT2Tokenizer"),deo=o(" or "),hR=a("a"),ceo=o("GPT2TokenizerFast"),feo=o(" (OpenAI GPT-2 model)"),meo=l(),Yn=a("li"),zre=a("strong"),geo=o("gpt_neo"),heo=o(" \u2014 "),pR=a("a"),peo=o("GPT2Tokenizer"),ueo=o(" or "),uR=a("a"),_eo=o("GPT2TokenizerFast"),beo=o(" (GPT Neo model)"),veo=l(),Kn=a("li"),Qre=a("strong"),Feo=o("gptj"),Teo=o(" \u2014 "),_R=a("a"),Meo=o("GPT2Tokenizer"),Eeo=o(" or "),bR=a("a"),Ceo=o("GPT2TokenizerFast"),weo=o(" (GPT-J model)"),Aeo=l(),Zn=a("li"),Wre=a("strong"),yeo=o("herbert"),Leo=o(" \u2014 "),vR=a("a"),xeo=o("HerbertTokenizer"),$eo=o(" or "),FR=a("a"),keo=o("HerbertTokenizerFast"),Seo=o(" (HerBERT model)"),Reo=l(),xg=a("li"),Hre=a("strong"),Beo=o("hubert"),Peo=o(" \u2014 "),TR=a("a"),Ieo=o("Wav2Vec2CTCTokenizer"),qeo=o(" (Hubert model)"),Neo=l(),es=a("li"),Ure=a("strong"),jeo=o("ibert"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("RobertaTokenizer"),Oeo=o(" or "),ER=a("a"),Veo=o("RobertaTokenizerFast"),Xeo=o(" (I-BERT model)"),zeo=l(),os=a("li"),Jre=a("strong"),Qeo=o("layoutlm"),Weo=o(" \u2014 "),CR=a("a"),Heo=o("LayoutLMTokenizer"),Ueo=o(" or "),wR=a("a"),Jeo=o("LayoutLMTokenizerFast"),Yeo=o(" (LayoutLM model)"),Keo=l(),rs=a("li"),Yre=a("strong"),Zeo=o("layoutlmv2"),eoo=o(" \u2014 "),AR=a("a"),ooo=o("LayoutLMv2Tokenizer"),roo=o(" or "),yR=a("a"),too=o("LayoutLMv2TokenizerFast"),aoo=o(" (LayoutLMv2 model)"),noo=l(),ts=a("li"),Kre=a("strong"),soo=o("layoutxlm"),loo=o(" \u2014 "),LR=a("a"),ioo=o("LayoutXLMTokenizer"),doo=o(" or "),xR=a("a"),coo=o("LayoutXLMTokenizerFast"),foo=o(" (LayoutXLM model)"),moo=l(),as=a("li"),Zre=a("strong"),goo=o("led"),hoo=o(" \u2014 "),$R=a("a"),poo=o("LEDTokenizer"),uoo=o(" or "),kR=a("a"),_oo=o("LEDTokenizerFast"),boo=o(" (LED model)"),voo=l(),ns=a("li"),ete=a("strong"),Foo=o("longformer"),Too=o(" \u2014 "),SR=a("a"),Moo=o("LongformerTokenizer"),Eoo=o(" or "),RR=a("a"),Coo=o("LongformerTokenizerFast"),woo=o(" (Longformer model)"),Aoo=l(),$g=a("li"),ote=a("strong"),yoo=o("luke"),Loo=o(" \u2014 "),BR=a("a"),xoo=o("LukeTokenizer"),$oo=o(" (LUKE model)"),koo=l(),ss=a("li"),rte=a("strong"),Soo=o("lxmert"),Roo=o(" \u2014 "),PR=a("a"),Boo=o("LxmertTokenizer"),Poo=o(" or "),IR=a("a"),Ioo=o("LxmertTokenizerFast"),qoo=o(" (LXMERT model)"),Noo=l(),kg=a("li"),tte=a("strong"),joo=o("m2m_100"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("M2M100Tokenizer"),Ooo=o(" (M2M100 model)"),Voo=l(),Sg=a("li"),ate=a("strong"),Xoo=o("marian"),zoo=o(" \u2014 "),NR=a("a"),Qoo=o("MarianTokenizer"),Woo=o(" (Marian model)"),Hoo=l(),ls=a("li"),nte=a("strong"),Uoo=o("mbart"),Joo=o(" \u2014 "),jR=a("a"),Yoo=o("MBartTokenizer"),Koo=o(" or "),DR=a("a"),Zoo=o("MBartTokenizerFast"),ero=o(" (mBART model)"),oro=l(),is=a("li"),ste=a("strong"),rro=o("mbart50"),tro=o(" \u2014 "),GR=a("a"),aro=o("MBart50Tokenizer"),nro=o(" or "),OR=a("a"),sro=o("MBart50TokenizerFast"),lro=o(" (mBART-50 model)"),iro=l(),ds=a("li"),lte=a("strong"),dro=o("megatron-bert"),cro=o(" \u2014 "),VR=a("a"),fro=o("BertTokenizer"),mro=o(" or "),XR=a("a"),gro=o("BertTokenizerFast"),hro=o(" (MegatronBert model)"),pro=l(),Rg=a("li"),ite=a("strong"),uro=o("mluke"),_ro=o(" \u2014 "),zR=a("a"),bro=o("MLukeTokenizer"),vro=o(" (mLUKE model)"),Fro=l(),cs=a("li"),dte=a("strong"),Tro=o("mobilebert"),Mro=o(" \u2014 "),QR=a("a"),Ero=o("MobileBertTokenizer"),Cro=o(" or "),WR=a("a"),wro=o("MobileBertTokenizerFast"),Aro=o(" (MobileBERT model)"),yro=l(),fs=a("li"),cte=a("strong"),Lro=o("mpnet"),xro=o(" \u2014 "),HR=a("a"),$ro=o("MPNetTokenizer"),kro=o(" or "),UR=a("a"),Sro=o("MPNetTokenizerFast"),Rro=o(" (MPNet model)"),Bro=l(),ms=a("li"),fte=a("strong"),Pro=o("mt5"),Iro=o(" \u2014 "),JR=a("a"),qro=o("MT5Tokenizer"),Nro=o(" or "),YR=a("a"),jro=o("MT5TokenizerFast"),Dro=o(" (mT5 model)"),Gro=l(),gs=a("li"),mte=a("strong"),Oro=o("nystromformer"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("AlbertTokenizer"),zro=o(" or "),ZR=a("a"),Qro=o("AlbertTokenizerFast"),Wro=o(" (Nystromformer model)"),Hro=l(),hs=a("li"),gte=a("strong"),Uro=o("openai-gpt"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("OpenAIGPTTokenizer"),Kro=o(" or "),oB=a("a"),Zro=o("OpenAIGPTTokenizerFast"),eto=o(" (OpenAI GPT model)"),oto=l(),Bg=a("li"),hte=a("strong"),rto=o("opt"),tto=o(" \u2014 "),rB=a("a"),ato=o("GPT2Tokenizer"),nto=o(" (OPT model)"),sto=l(),ps=a("li"),pte=a("strong"),lto=o("pegasus"),ito=o(" \u2014 "),tB=a("a"),dto=o("PegasusTokenizer"),cto=o(" or "),aB=a("a"),fto=o("PegasusTokenizerFast"),mto=o(" (Pegasus model)"),gto=l(),Pg=a("li"),ute=a("strong"),hto=o("perceiver"),pto=o(" \u2014 "),nB=a("a"),uto=o("PerceiverTokenizer"),_to=o(" (Perceiver model)"),bto=l(),Ig=a("li"),_te=a("strong"),vto=o("phobert"),Fto=o(" \u2014 "),sB=a("a"),Tto=o("PhobertTokenizer"),Mto=o(" (PhoBERT model)"),Eto=l(),qg=a("li"),bte=a("strong"),Cto=o("plbart"),wto=o(" \u2014 "),lB=a("a"),Ato=o("PLBartTokenizer"),yto=o(" (PLBart model)"),Lto=l(),Ng=a("li"),vte=a("strong"),xto=o("prophetnet"),$to=o(" \u2014 "),iB=a("a"),kto=o("ProphetNetTokenizer"),Sto=o(" (ProphetNet model)"),Rto=l(),us=a("li"),Fte=a("strong"),Bto=o("qdqbert"),Pto=o(" \u2014 "),dB=a("a"),Ito=o("BertTokenizer"),qto=o(" or "),cB=a("a"),Nto=o("BertTokenizerFast"),jto=o(" (QDQBert model)"),Dto=l(),jg=a("li"),Tte=a("strong"),Gto=o("rag"),Oto=o(" \u2014 "),fB=a("a"),Vto=o("RagTokenizer"),Xto=o(" (RAG model)"),zto=l(),_s=a("li"),Mte=a("strong"),Qto=o("realm"),Wto=o(" \u2014 "),mB=a("a"),Hto=o("RealmTokenizer"),Uto=o(" or "),gB=a("a"),Jto=o("RealmTokenizerFast"),Yto=o(" (Realm model)"),Kto=l(),bs=a("li"),Ete=a("strong"),Zto=o("reformer"),eao=o(" \u2014 "),hB=a("a"),oao=o("ReformerTokenizer"),rao=o(" or "),pB=a("a"),tao=o("ReformerTokenizerFast"),aao=o(" (Reformer model)"),nao=l(),vs=a("li"),Cte=a("strong"),sao=o("rembert"),lao=o(" \u2014 "),uB=a("a"),iao=o("RemBertTokenizer"),dao=o(" or "),_B=a("a"),cao=o("RemBertTokenizerFast"),fao=o(" (RemBERT model)"),mao=l(),Fs=a("li"),wte=a("strong"),gao=o("retribert"),hao=o(" \u2014 "),bB=a("a"),pao=o("RetriBertTokenizer"),uao=o(" or "),vB=a("a"),_ao=o("RetriBertTokenizerFast"),bao=o(" (RetriBERT model)"),vao=l(),Ts=a("li"),Ate=a("strong"),Fao=o("roberta"),Tao=o(" \u2014 "),FB=a("a"),Mao=o("RobertaTokenizer"),Eao=o(" or "),TB=a("a"),Cao=o("RobertaTokenizerFast"),wao=o(" (RoBERTa model)"),Aao=l(),Ms=a("li"),yte=a("strong"),yao=o("roformer"),Lao=o(" \u2014 "),MB=a("a"),xao=o("RoFormerTokenizer"),$ao=o(" or "),EB=a("a"),kao=o("RoFormerTokenizerFast"),Sao=o(" (RoFormer model)"),Rao=l(),Dg=a("li"),Lte=a("strong"),Bao=o("speech_to_text"),Pao=o(" \u2014 "),CB=a("a"),Iao=o("Speech2TextTokenizer"),qao=o(" (Speech2Text model)"),Nao=l(),Gg=a("li"),xte=a("strong"),jao=o("speech_to_text_2"),Dao=o(" \u2014 "),wB=a("a"),Gao=o("Speech2Text2Tokenizer"),Oao=o(" (Speech2Text2 model)"),Vao=l(),Es=a("li"),$te=a("strong"),Xao=o("splinter"),zao=o(" \u2014 "),AB=a("a"),Qao=o("SplinterTokenizer"),Wao=o(" or "),yB=a("a"),Hao=o("SplinterTokenizerFast"),Uao=o(" (Splinter model)"),Jao=l(),Cs=a("li"),kte=a("strong"),Yao=o("squeezebert"),Kao=o(" \u2014 "),LB=a("a"),Zao=o("SqueezeBertTokenizer"),eno=o(" or "),xB=a("a"),ono=o("SqueezeBertTokenizerFast"),rno=o(" (SqueezeBERT model)"),tno=l(),ws=a("li"),Ste=a("strong"),ano=o("t5"),nno=o(" \u2014 "),$B=a("a"),sno=o("T5Tokenizer"),lno=o(" or "),kB=a("a"),ino=o("T5TokenizerFast"),dno=o(" (T5 model)"),cno=l(),Og=a("li"),Rte=a("strong"),fno=o("tapas"),mno=o(" \u2014 "),SB=a("a"),gno=o("TapasTokenizer"),hno=o(" (TAPAS model)"),pno=l(),Vg=a("li"),Bte=a("strong"),uno=o("tapex"),_no=o(" \u2014 "),RB=a("a"),bno=o("TapexTokenizer"),vno=o(" (TAPEX model)"),Fno=l(),Xg=a("li"),Pte=a("strong"),Tno=o("transfo-xl"),Mno=o(" \u2014 "),BB=a("a"),Eno=o("TransfoXLTokenizer"),Cno=o(" (Transformer-XL model)"),wno=l(),As=a("li"),Ite=a("strong"),Ano=o("visual_bert"),yno=o(" \u2014 "),PB=a("a"),Lno=o("BertTokenizer"),xno=o(" or "),IB=a("a"),$no=o("BertTokenizerFast"),kno=o(" (VisualBert model)"),Sno=l(),zg=a("li"),qte=a("strong"),Rno=o("wav2vec2"),Bno=o(" \u2014 "),qB=a("a"),Pno=o("Wav2Vec2CTCTokenizer"),Ino=o(" (Wav2Vec2 model)"),qno=l(),Qg=a("li"),Nte=a("strong"),Nno=o("wav2vec2_phoneme"),jno=o(" \u2014 "),NB=a("a"),Dno=o("Wav2Vec2PhonemeCTCTokenizer"),Gno=o(" (Wav2Vec2Phoneme model)"),Ono=l(),ys=a("li"),jte=a("strong"),Vno=o("xglm"),Xno=o(" \u2014 "),jB=a("a"),zno=o("XGLMTokenizer"),Qno=o(" or "),DB=a("a"),Wno=o("XGLMTokenizerFast"),Hno=o(" (XGLM model)"),Uno=l(),Wg=a("li"),Dte=a("strong"),Jno=o("xlm"),Yno=o(" \u2014 "),GB=a("a"),Kno=o("XLMTokenizer"),Zno=o(" (XLM model)"),eso=l(),Hg=a("li"),Gte=a("strong"),oso=o("xlm-prophetnet"),rso=o(" \u2014 "),OB=a("a"),tso=o("XLMProphetNetTokenizer"),aso=o(" (XLMProphetNet model)"),nso=l(),Ls=a("li"),Ote=a("strong"),sso=o("xlm-roberta"),lso=o(" \u2014 "),VB=a("a"),iso=o("XLMRobertaTokenizer"),dso=o(" or "),XB=a("a"),cso=o("XLMRobertaTokenizerFast"),fso=o(" (XLM-RoBERTa model)"),mso=l(),xs=a("li"),Vte=a("strong"),gso=o("xlm-roberta-xl"),hso=o(" \u2014 "),zB=a("a"),pso=o("RobertaTokenizer"),uso=o(" or "),QB=a("a"),_so=o("RobertaTokenizerFast"),bso=o(" (XLM-RoBERTa-XL model)"),vso=l(),$s=a("li"),Xte=a("strong"),Fso=o("xlnet"),Tso=o(" \u2014 "),WB=a("a"),Mso=o("XLNetTokenizer"),Eso=o(" or "),HB=a("a"),Cso=o("XLNetTokenizerFast"),wso=o(" (XLNet model)"),Aso=l(),ks=a("li"),zte=a("strong"),yso=o("yoso"),Lso=o(" \u2014 "),UB=a("a"),xso=o("AlbertTokenizer"),$so=o(" or "),JB=a("a"),kso=o("AlbertTokenizerFast"),Sso=o(" (YOSO model)"),Rso=l(),F(Ug.$$.fragment),Bso=l(),Jg=a("div"),F(c6.$$.fragment),Pso=l(),Qte=a("p"),Iso=o("Register a new tokenizer in this mapping."),KPe=l(),bi=a("h2"),Yg=a("a"),Wte=a("span"),F(f6.$$.fragment),qso=l(),Hte=a("span"),Nso=o("AutoFeatureExtractor"),ZPe=l(),Ao=a("div"),F(m6.$$.fragment),jso=l(),g6=a("p"),Dso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YB=a("a"),Gso=o("AutoFeatureExtractor.from_pretrained()"),Oso=o(" class method."),Vso=l(),h6=a("p"),Xso=o("This class cannot be instantiated directly using "),Ute=a("code"),zso=o("__init__()"),Qso=o(" (throws an error)."),Wso=l(),Qe=a("div"),F(p6.$$.fragment),Hso=l(),Jte=a("p"),Uso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jso=l(),wa=a("p"),Yso=o("The feature extractor class to instantiate is selected based on the "),Yte=a("code"),Kso=o("model_type"),Zso=o(` property of the config object
(either passed as an argument or loaded from `),Kte=a("code"),elo=o("pretrained_model_name_or_path"),olo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zte=a("code"),rlo=o("pretrained_model_name_or_path"),tlo=o(":"),alo=l(),oe=a("ul"),Kg=a("li"),eae=a("strong"),nlo=o("beit"),slo=o(" \u2014 "),KB=a("a"),llo=o("BeitFeatureExtractor"),ilo=o(" (BEiT model)"),dlo=l(),Zg=a("li"),oae=a("strong"),clo=o("clip"),flo=o(" \u2014 "),ZB=a("a"),mlo=o("CLIPFeatureExtractor"),glo=o(" (CLIP model)"),hlo=l(),eh=a("li"),rae=a("strong"),plo=o("convnext"),ulo=o(" \u2014 "),eP=a("a"),_lo=o("ConvNextFeatureExtractor"),blo=o(" (ConvNext model)"),vlo=l(),oh=a("li"),tae=a("strong"),Flo=o("data2vec-audio"),Tlo=o(" \u2014 "),oP=a("a"),Mlo=o("Wav2Vec2FeatureExtractor"),Elo=o(" (Data2VecAudio model)"),Clo=l(),rh=a("li"),aae=a("strong"),wlo=o("data2vec-vision"),Alo=o(" \u2014 "),rP=a("a"),ylo=o("BeitFeatureExtractor"),Llo=o(" (Data2VecVision model)"),xlo=l(),th=a("li"),nae=a("strong"),$lo=o("deit"),klo=o(" \u2014 "),tP=a("a"),Slo=o("DeiTFeatureExtractor"),Rlo=o(" (DeiT model)"),Blo=l(),ah=a("li"),sae=a("strong"),Plo=o("detr"),Ilo=o(" \u2014 "),aP=a("a"),qlo=o("DetrFeatureExtractor"),Nlo=o(" (DETR model)"),jlo=l(),nh=a("li"),lae=a("strong"),Dlo=o("dpt"),Glo=o(" \u2014 "),nP=a("a"),Olo=o("DPTFeatureExtractor"),Vlo=o(" (DPT model)"),Xlo=l(),sh=a("li"),iae=a("strong"),zlo=o("flava"),Qlo=o(" \u2014 "),sP=a("a"),Wlo=o("FlavaFeatureExtractor"),Hlo=o(" (Flava model)"),Ulo=l(),lh=a("li"),dae=a("strong"),Jlo=o("glpn"),Ylo=o(" \u2014 "),lP=a("a"),Klo=o("GLPNFeatureExtractor"),Zlo=o(" (GLPN model)"),eio=l(),ih=a("li"),cae=a("strong"),oio=o("hubert"),rio=o(" \u2014 "),iP=a("a"),tio=o("Wav2Vec2FeatureExtractor"),aio=o(" (Hubert model)"),nio=l(),dh=a("li"),fae=a("strong"),sio=o("layoutlmv2"),lio=o(" \u2014 "),dP=a("a"),iio=o("LayoutLMv2FeatureExtractor"),dio=o(" (LayoutLMv2 model)"),cio=l(),ch=a("li"),mae=a("strong"),fio=o("maskformer"),mio=o(" \u2014 "),cP=a("a"),gio=o("MaskFormerFeatureExtractor"),hio=o(" (MaskFormer model)"),pio=l(),fh=a("li"),gae=a("strong"),uio=o("perceiver"),_io=o(" \u2014 "),fP=a("a"),bio=o("PerceiverFeatureExtractor"),vio=o(" (Perceiver model)"),Fio=l(),mh=a("li"),hae=a("strong"),Tio=o("poolformer"),Mio=o(" \u2014 "),mP=a("a"),Eio=o("PoolFormerFeatureExtractor"),Cio=o(" (PoolFormer model)"),wio=l(),gh=a("li"),pae=a("strong"),Aio=o("regnet"),yio=o(" \u2014 "),gP=a("a"),Lio=o("ConvNextFeatureExtractor"),xio=o(" (RegNet model)"),$io=l(),hh=a("li"),uae=a("strong"),kio=o("resnet"),Sio=o(" \u2014 "),hP=a("a"),Rio=o("ConvNextFeatureExtractor"),Bio=o(" (ResNet model)"),Pio=l(),ph=a("li"),_ae=a("strong"),Iio=o("segformer"),qio=o(" \u2014 "),pP=a("a"),Nio=o("SegformerFeatureExtractor"),jio=o(" (SegFormer model)"),Dio=l(),uh=a("li"),bae=a("strong"),Gio=o("speech_to_text"),Oio=o(" \u2014 "),uP=a("a"),Vio=o("Speech2TextFeatureExtractor"),Xio=o(" (Speech2Text model)"),zio=l(),_h=a("li"),vae=a("strong"),Qio=o("swin"),Wio=o(" \u2014 "),_P=a("a"),Hio=o("ViTFeatureExtractor"),Uio=o(" (Swin model)"),Jio=l(),bh=a("li"),Fae=a("strong"),Yio=o("van"),Kio=o(" \u2014 "),bP=a("a"),Zio=o("ConvNextFeatureExtractor"),edo=o(" (VAN model)"),odo=l(),vh=a("li"),Tae=a("strong"),rdo=o("vit"),tdo=o(" \u2014 "),vP=a("a"),ado=o("ViTFeatureExtractor"),ndo=o(" (ViT model)"),sdo=l(),Fh=a("li"),Mae=a("strong"),ldo=o("vit_mae"),ido=o(" \u2014 "),FP=a("a"),ddo=o("ViTFeatureExtractor"),cdo=o(" (ViTMAE model)"),fdo=l(),Th=a("li"),Eae=a("strong"),mdo=o("wav2vec2"),gdo=o(" \u2014 "),TP=a("a"),hdo=o("Wav2Vec2FeatureExtractor"),pdo=o(" (Wav2Vec2 model)"),udo=l(),Mh=a("li"),Cae=a("strong"),_do=o("yolos"),bdo=o(" \u2014 "),MP=a("a"),vdo=o("YolosFeatureExtractor"),Fdo=o(" (YOLOS model)"),Tdo=l(),F(Eh.$$.fragment),Mdo=l(),F(Ch.$$.fragment),Edo=l(),wh=a("div"),F(u6.$$.fragment),Cdo=l(),wae=a("p"),wdo=o("Register a new feature extractor for this class."),eIe=l(),vi=a("h2"),Ah=a("a"),Aae=a("span"),F(_6.$$.fragment),Ado=l(),yae=a("span"),ydo=o("AutoProcessor"),oIe=l(),yo=a("div"),F(b6.$$.fragment),Ldo=l(),v6=a("p"),xdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EP=a("a"),$do=o("AutoProcessor.from_pretrained()"),kdo=o(" class method."),Sdo=l(),F6=a("p"),Rdo=o("This class cannot be instantiated directly using "),Lae=a("code"),Bdo=o("__init__()"),Pdo=o(" (throws an error)."),Ido=l(),We=a("div"),F(T6.$$.fragment),qdo=l(),xae=a("p"),Ndo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jdo=l(),Fi=a("p"),Ddo=o("The processor class to instantiate is selected based on the "),$ae=a("code"),Gdo=o("model_type"),Odo=o(` property of the config object (either
passed as an argument or loaded from `),kae=a("code"),Vdo=o("pretrained_model_name_or_path"),Xdo=o(" if possible):"),zdo=l(),be=a("ul"),yh=a("li"),Sae=a("strong"),Qdo=o("clip"),Wdo=o(" \u2014 "),CP=a("a"),Hdo=o("CLIPProcessor"),Udo=o(" (CLIP model)"),Jdo=l(),Lh=a("li"),Rae=a("strong"),Ydo=o("flava"),Kdo=o(" \u2014 "),Bae=a("code"),Zdo=o("FLAVAProcessor"),eco=o(" (Flava model)"),oco=l(),xh=a("li"),Pae=a("strong"),rco=o("layoutlmv2"),tco=o(" \u2014 "),wP=a("a"),aco=o("LayoutLMv2Processor"),nco=o(" (LayoutLMv2 model)"),sco=l(),$h=a("li"),Iae=a("strong"),lco=o("layoutxlm"),ico=o(" \u2014 "),AP=a("a"),dco=o("LayoutXLMProcessor"),cco=o(" (LayoutXLM model)"),fco=l(),kh=a("li"),qae=a("strong"),mco=o("sew"),gco=o(" \u2014 "),yP=a("a"),hco=o("Wav2Vec2Processor"),pco=o(" (SEW model)"),uco=l(),Sh=a("li"),Nae=a("strong"),_co=o("sew-d"),bco=o(" \u2014 "),LP=a("a"),vco=o("Wav2Vec2Processor"),Fco=o(" (SEW-D model)"),Tco=l(),Rh=a("li"),jae=a("strong"),Mco=o("speech_to_text"),Eco=o(" \u2014 "),xP=a("a"),Cco=o("Speech2TextProcessor"),wco=o(" (Speech2Text model)"),Aco=l(),Bh=a("li"),Dae=a("strong"),yco=o("speech_to_text_2"),Lco=o(" \u2014 "),$P=a("a"),xco=o("Speech2Text2Processor"),$co=o(" (Speech2Text2 model)"),kco=l(),Ph=a("li"),Gae=a("strong"),Sco=o("trocr"),Rco=o(" \u2014 "),kP=a("a"),Bco=o("TrOCRProcessor"),Pco=o(" (TrOCR model)"),Ico=l(),Ih=a("li"),Oae=a("strong"),qco=o("unispeech"),Nco=o(" \u2014 "),SP=a("a"),jco=o("Wav2Vec2Processor"),Dco=o(" (UniSpeech model)"),Gco=l(),qh=a("li"),Vae=a("strong"),Oco=o("unispeech-sat"),Vco=o(" \u2014 "),RP=a("a"),Xco=o("Wav2Vec2Processor"),zco=o(" (UniSpeechSat model)"),Qco=l(),Nh=a("li"),Xae=a("strong"),Wco=o("vilt"),Hco=o(" \u2014 "),BP=a("a"),Uco=o("ViltProcessor"),Jco=o(" (ViLT model)"),Yco=l(),jh=a("li"),zae=a("strong"),Kco=o("vision-text-dual-encoder"),Zco=o(" \u2014 "),PP=a("a"),efo=o("VisionTextDualEncoderProcessor"),ofo=o(" (VisionTextDualEncoder model)"),rfo=l(),Dh=a("li"),Qae=a("strong"),tfo=o("wav2vec2"),afo=o(" \u2014 "),IP=a("a"),nfo=o("Wav2Vec2Processor"),sfo=o(" (Wav2Vec2 model)"),lfo=l(),Gh=a("li"),Wae=a("strong"),ifo=o("wavlm"),dfo=o(" \u2014 "),qP=a("a"),cfo=o("Wav2Vec2Processor"),ffo=o(" (WavLM model)"),mfo=l(),F(Oh.$$.fragment),gfo=l(),F(Vh.$$.fragment),hfo=l(),Xh=a("div"),F(M6.$$.fragment),pfo=l(),Hae=a("p"),ufo=o("Register a new processor for this class."),rIe=l(),Ti=a("h2"),zh=a("a"),Uae=a("span"),F(E6.$$.fragment),_fo=l(),Jae=a("span"),bfo=o("AutoModel"),tIe=l(),Lo=a("div"),F(C6.$$.fragment),vfo=l(),Mi=a("p"),Ffo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NP=a("a"),Tfo=o("from_pretrained()"),Mfo=o(" class method or the "),jP=a("a"),Efo=o("from_config()"),Cfo=o(` class
method.`),wfo=l(),w6=a("p"),Afo=o("This class cannot be instantiated directly using "),Yae=a("code"),yfo=o("__init__()"),Lfo=o(" (throws an error)."),xfo=l(),ot=a("div"),F(A6.$$.fragment),$fo=l(),Kae=a("p"),kfo=o("Instantiates one of the base model classes of the library from a configuration."),Sfo=l(),Ei=a("p"),Rfo=o(`Note:
Loading a model from its configuration file does `),Zae=a("strong"),Bfo=o("not"),Pfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=a("a"),Ifo=o("from_pretrained()"),qfo=o(" to load the model weights."),Nfo=l(),F(Qh.$$.fragment),jfo=l(),He=a("div"),F(y6.$$.fragment),Dfo=l(),ene=a("p"),Gfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ofo=l(),Aa=a("p"),Vfo=o("The model class to instantiate is selected based on the "),one=a("code"),Xfo=o("model_type"),zfo=o(` property of the config object (either
passed as an argument or loaded from `),rne=a("code"),Qfo=o("pretrained_model_name_or_path"),Wfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=a("code"),Hfo=o("pretrained_model_name_or_path"),Ufo=o(":"),Jfo=l(),x=a("ul"),Wh=a("li"),ane=a("strong"),Yfo=o("albert"),Kfo=o(" \u2014 "),GP=a("a"),Zfo=o("AlbertModel"),emo=o(" (ALBERT model)"),omo=l(),Hh=a("li"),nne=a("strong"),rmo=o("bart"),tmo=o(" \u2014 "),OP=a("a"),amo=o("BartModel"),nmo=o(" (BART model)"),smo=l(),Uh=a("li"),sne=a("strong"),lmo=o("beit"),imo=o(" \u2014 "),VP=a("a"),dmo=o("BeitModel"),cmo=o(" (BEiT model)"),fmo=l(),Jh=a("li"),lne=a("strong"),mmo=o("bert"),gmo=o(" \u2014 "),XP=a("a"),hmo=o("BertModel"),pmo=o(" (BERT model)"),umo=l(),Yh=a("li"),ine=a("strong"),_mo=o("bert-generation"),bmo=o(" \u2014 "),zP=a("a"),vmo=o("BertGenerationEncoder"),Fmo=o(" (Bert Generation model)"),Tmo=l(),Kh=a("li"),dne=a("strong"),Mmo=o("big_bird"),Emo=o(" \u2014 "),QP=a("a"),Cmo=o("BigBirdModel"),wmo=o(" (BigBird model)"),Amo=l(),Zh=a("li"),cne=a("strong"),ymo=o("bigbird_pegasus"),Lmo=o(" \u2014 "),WP=a("a"),xmo=o("BigBirdPegasusModel"),$mo=o(" (BigBirdPegasus model)"),kmo=l(),ep=a("li"),fne=a("strong"),Smo=o("blenderbot"),Rmo=o(" \u2014 "),HP=a("a"),Bmo=o("BlenderbotModel"),Pmo=o(" (Blenderbot model)"),Imo=l(),op=a("li"),mne=a("strong"),qmo=o("blenderbot-small"),Nmo=o(" \u2014 "),UP=a("a"),jmo=o("BlenderbotSmallModel"),Dmo=o(" (BlenderbotSmall model)"),Gmo=l(),rp=a("li"),gne=a("strong"),Omo=o("camembert"),Vmo=o(" \u2014 "),JP=a("a"),Xmo=o("CamembertModel"),zmo=o(" (CamemBERT model)"),Qmo=l(),tp=a("li"),hne=a("strong"),Wmo=o("canine"),Hmo=o(" \u2014 "),YP=a("a"),Umo=o("CanineModel"),Jmo=o(" (Canine model)"),Ymo=l(),ap=a("li"),pne=a("strong"),Kmo=o("clip"),Zmo=o(" \u2014 "),KP=a("a"),ego=o("CLIPModel"),ogo=o(" (CLIP model)"),rgo=l(),np=a("li"),une=a("strong"),tgo=o("convbert"),ago=o(" \u2014 "),ZP=a("a"),ngo=o("ConvBertModel"),sgo=o(" (ConvBERT model)"),lgo=l(),sp=a("li"),_ne=a("strong"),igo=o("convnext"),dgo=o(" \u2014 "),eI=a("a"),cgo=o("ConvNextModel"),fgo=o(" (ConvNext model)"),mgo=l(),lp=a("li"),bne=a("strong"),ggo=o("ctrl"),hgo=o(" \u2014 "),oI=a("a"),pgo=o("CTRLModel"),ugo=o(" (CTRL model)"),_go=l(),ip=a("li"),vne=a("strong"),bgo=o("data2vec-audio"),vgo=o(" \u2014 "),rI=a("a"),Fgo=o("Data2VecAudioModel"),Tgo=o(" (Data2VecAudio model)"),Mgo=l(),dp=a("li"),Fne=a("strong"),Ego=o("data2vec-text"),Cgo=o(" \u2014 "),tI=a("a"),wgo=o("Data2VecTextModel"),Ago=o(" (Data2VecText model)"),ygo=l(),cp=a("li"),Tne=a("strong"),Lgo=o("data2vec-vision"),xgo=o(" \u2014 "),aI=a("a"),$go=o("Data2VecVisionModel"),kgo=o(" (Data2VecVision model)"),Sgo=l(),fp=a("li"),Mne=a("strong"),Rgo=o("deberta"),Bgo=o(" \u2014 "),nI=a("a"),Pgo=o("DebertaModel"),Igo=o(" (DeBERTa model)"),qgo=l(),mp=a("li"),Ene=a("strong"),Ngo=o("deberta-v2"),jgo=o(" \u2014 "),sI=a("a"),Dgo=o("DebertaV2Model"),Ggo=o(" (DeBERTa-v2 model)"),Ogo=l(),gp=a("li"),Cne=a("strong"),Vgo=o("decision_transformer"),Xgo=o(" \u2014 "),lI=a("a"),zgo=o("DecisionTransformerModel"),Qgo=o(" (Decision Transformer model)"),Wgo=l(),hp=a("li"),wne=a("strong"),Hgo=o("deit"),Ugo=o(" \u2014 "),iI=a("a"),Jgo=o("DeiTModel"),Ygo=o(" (DeiT model)"),Kgo=l(),pp=a("li"),Ane=a("strong"),Zgo=o("detr"),eho=o(" \u2014 "),dI=a("a"),oho=o("DetrModel"),rho=o(" (DETR model)"),tho=l(),up=a("li"),yne=a("strong"),aho=o("distilbert"),nho=o(" \u2014 "),cI=a("a"),sho=o("DistilBertModel"),lho=o(" (DistilBERT model)"),iho=l(),_p=a("li"),Lne=a("strong"),dho=o("dpr"),cho=o(" \u2014 "),fI=a("a"),fho=o("DPRQuestionEncoder"),mho=o(" (DPR model)"),gho=l(),bp=a("li"),xne=a("strong"),hho=o("dpt"),pho=o(" \u2014 "),mI=a("a"),uho=o("DPTModel"),_ho=o(" (DPT model)"),bho=l(),vp=a("li"),$ne=a("strong"),vho=o("electra"),Fho=o(" \u2014 "),gI=a("a"),Tho=o("ElectraModel"),Mho=o(" (ELECTRA model)"),Eho=l(),Fp=a("li"),kne=a("strong"),Cho=o("flaubert"),who=o(" \u2014 "),hI=a("a"),Aho=o("FlaubertModel"),yho=o(" (FlauBERT model)"),Lho=l(),Tp=a("li"),Sne=a("strong"),xho=o("flava"),$ho=o(" \u2014 "),pI=a("a"),kho=o("FlavaModel"),Sho=o(" (Flava model)"),Rho=l(),Mp=a("li"),Rne=a("strong"),Bho=o("fnet"),Pho=o(" \u2014 "),uI=a("a"),Iho=o("FNetModel"),qho=o(" (FNet model)"),Nho=l(),Ep=a("li"),Bne=a("strong"),jho=o("fsmt"),Dho=o(" \u2014 "),_I=a("a"),Gho=o("FSMTModel"),Oho=o(" (FairSeq Machine-Translation model)"),Vho=l(),Ss=a("li"),Pne=a("strong"),Xho=o("funnel"),zho=o(" \u2014 "),bI=a("a"),Qho=o("FunnelModel"),Who=o(" or "),vI=a("a"),Hho=o("FunnelBaseModel"),Uho=o(" (Funnel Transformer model)"),Jho=l(),Cp=a("li"),Ine=a("strong"),Yho=o("glpn"),Kho=o(" \u2014 "),FI=a("a"),Zho=o("GLPNModel"),epo=o(" (GLPN model)"),opo=l(),wp=a("li"),qne=a("strong"),rpo=o("gpt2"),tpo=o(" \u2014 "),TI=a("a"),apo=o("GPT2Model"),npo=o(" (OpenAI GPT-2 model)"),spo=l(),Ap=a("li"),Nne=a("strong"),lpo=o("gpt_neo"),ipo=o(" \u2014 "),MI=a("a"),dpo=o("GPTNeoModel"),cpo=o(" (GPT Neo model)"),fpo=l(),yp=a("li"),jne=a("strong"),mpo=o("gptj"),gpo=o(" \u2014 "),EI=a("a"),hpo=o("GPTJModel"),ppo=o(" (GPT-J model)"),upo=l(),Lp=a("li"),Dne=a("strong"),_po=o("hubert"),bpo=o(" \u2014 "),CI=a("a"),vpo=o("HubertModel"),Fpo=o(" (Hubert model)"),Tpo=l(),xp=a("li"),Gne=a("strong"),Mpo=o("ibert"),Epo=o(" \u2014 "),wI=a("a"),Cpo=o("IBertModel"),wpo=o(" (I-BERT model)"),Apo=l(),$p=a("li"),One=a("strong"),ypo=o("imagegpt"),Lpo=o(" \u2014 "),AI=a("a"),xpo=o("ImageGPTModel"),$po=o(" (ImageGPT model)"),kpo=l(),kp=a("li"),Vne=a("strong"),Spo=o("layoutlm"),Rpo=o(" \u2014 "),yI=a("a"),Bpo=o("LayoutLMModel"),Ppo=o(" (LayoutLM model)"),Ipo=l(),Sp=a("li"),Xne=a("strong"),qpo=o("layoutlmv2"),Npo=o(" \u2014 "),LI=a("a"),jpo=o("LayoutLMv2Model"),Dpo=o(" (LayoutLMv2 model)"),Gpo=l(),Rp=a("li"),zne=a("strong"),Opo=o("led"),Vpo=o(" \u2014 "),xI=a("a"),Xpo=o("LEDModel"),zpo=o(" (LED model)"),Qpo=l(),Bp=a("li"),Qne=a("strong"),Wpo=o("longformer"),Hpo=o(" \u2014 "),$I=a("a"),Upo=o("LongformerModel"),Jpo=o(" (Longformer model)"),Ypo=l(),Pp=a("li"),Wne=a("strong"),Kpo=o("luke"),Zpo=o(" \u2014 "),kI=a("a"),euo=o("LukeModel"),ouo=o(" (LUKE model)"),ruo=l(),Ip=a("li"),Hne=a("strong"),tuo=o("lxmert"),auo=o(" \u2014 "),SI=a("a"),nuo=o("LxmertModel"),suo=o(" (LXMERT model)"),luo=l(),qp=a("li"),Une=a("strong"),iuo=o("m2m_100"),duo=o(" \u2014 "),RI=a("a"),cuo=o("M2M100Model"),fuo=o(" (M2M100 model)"),muo=l(),Np=a("li"),Jne=a("strong"),guo=o("marian"),huo=o(" \u2014 "),BI=a("a"),puo=o("MarianModel"),uuo=o(" (Marian model)"),_uo=l(),jp=a("li"),Yne=a("strong"),buo=o("maskformer"),vuo=o(" \u2014 "),PI=a("a"),Fuo=o("MaskFormerModel"),Tuo=o(" (MaskFormer model)"),Muo=l(),Dp=a("li"),Kne=a("strong"),Euo=o("mbart"),Cuo=o(" \u2014 "),II=a("a"),wuo=o("MBartModel"),Auo=o(" (mBART model)"),yuo=l(),Gp=a("li"),Zne=a("strong"),Luo=o("megatron-bert"),xuo=o(" \u2014 "),qI=a("a"),$uo=o("MegatronBertModel"),kuo=o(" (MegatronBert model)"),Suo=l(),Op=a("li"),ese=a("strong"),Ruo=o("mobilebert"),Buo=o(" \u2014 "),NI=a("a"),Puo=o("MobileBertModel"),Iuo=o(" (MobileBERT model)"),quo=l(),Vp=a("li"),ose=a("strong"),Nuo=o("mpnet"),juo=o(" \u2014 "),jI=a("a"),Duo=o("MPNetModel"),Guo=o(" (MPNet model)"),Ouo=l(),Xp=a("li"),rse=a("strong"),Vuo=o("mt5"),Xuo=o(" \u2014 "),DI=a("a"),zuo=o("MT5Model"),Quo=o(" (mT5 model)"),Wuo=l(),zp=a("li"),tse=a("strong"),Huo=o("nystromformer"),Uuo=o(" \u2014 "),GI=a("a"),Juo=o("NystromformerModel"),Yuo=o(" (Nystromformer model)"),Kuo=l(),Qp=a("li"),ase=a("strong"),Zuo=o("openai-gpt"),e_o=o(" \u2014 "),OI=a("a"),o_o=o("OpenAIGPTModel"),r_o=o(" (OpenAI GPT model)"),t_o=l(),Wp=a("li"),nse=a("strong"),a_o=o("opt"),n_o=o(" \u2014 "),VI=a("a"),s_o=o("OPTModel"),l_o=o(" (OPT model)"),i_o=l(),Hp=a("li"),sse=a("strong"),d_o=o("pegasus"),c_o=o(" \u2014 "),XI=a("a"),f_o=o("PegasusModel"),m_o=o(" (Pegasus model)"),g_o=l(),Up=a("li"),lse=a("strong"),h_o=o("perceiver"),p_o=o(" \u2014 "),zI=a("a"),u_o=o("PerceiverModel"),__o=o(" (Perceiver model)"),b_o=l(),Jp=a("li"),ise=a("strong"),v_o=o("plbart"),F_o=o(" \u2014 "),QI=a("a"),T_o=o("PLBartModel"),M_o=o(" (PLBart model)"),E_o=l(),Yp=a("li"),dse=a("strong"),C_o=o("poolformer"),w_o=o(" \u2014 "),WI=a("a"),A_o=o("PoolFormerModel"),y_o=o(" (PoolFormer model)"),L_o=l(),Kp=a("li"),cse=a("strong"),x_o=o("prophetnet"),$_o=o(" \u2014 "),HI=a("a"),k_o=o("ProphetNetModel"),S_o=o(" (ProphetNet model)"),R_o=l(),Zp=a("li"),fse=a("strong"),B_o=o("qdqbert"),P_o=o(" \u2014 "),UI=a("a"),I_o=o("QDQBertModel"),q_o=o(" (QDQBert model)"),N_o=l(),eu=a("li"),mse=a("strong"),j_o=o("reformer"),D_o=o(" \u2014 "),JI=a("a"),G_o=o("ReformerModel"),O_o=o(" (Reformer model)"),V_o=l(),ou=a("li"),gse=a("strong"),X_o=o("regnet"),z_o=o(" \u2014 "),YI=a("a"),Q_o=o("RegNetModel"),W_o=o(" (RegNet model)"),H_o=l(),ru=a("li"),hse=a("strong"),U_o=o("rembert"),J_o=o(" \u2014 "),KI=a("a"),Y_o=o("RemBertModel"),K_o=o(" (RemBERT model)"),Z_o=l(),tu=a("li"),pse=a("strong"),e1o=o("resnet"),o1o=o(" \u2014 "),ZI=a("a"),r1o=o("ResNetModel"),t1o=o(" (ResNet model)"),a1o=l(),au=a("li"),use=a("strong"),n1o=o("retribert"),s1o=o(" \u2014 "),eq=a("a"),l1o=o("RetriBertModel"),i1o=o(" (RetriBERT model)"),d1o=l(),nu=a("li"),_se=a("strong"),c1o=o("roberta"),f1o=o(" \u2014 "),oq=a("a"),m1o=o("RobertaModel"),g1o=o(" (RoBERTa model)"),h1o=l(),su=a("li"),bse=a("strong"),p1o=o("roformer"),u1o=o(" \u2014 "),rq=a("a"),_1o=o("RoFormerModel"),b1o=o(" (RoFormer model)"),v1o=l(),lu=a("li"),vse=a("strong"),F1o=o("segformer"),T1o=o(" \u2014 "),tq=a("a"),M1o=o("SegformerModel"),E1o=o(" (SegFormer model)"),C1o=l(),iu=a("li"),Fse=a("strong"),w1o=o("sew"),A1o=o(" \u2014 "),aq=a("a"),y1o=o("SEWModel"),L1o=o(" (SEW model)"),x1o=l(),du=a("li"),Tse=a("strong"),$1o=o("sew-d"),k1o=o(" \u2014 "),nq=a("a"),S1o=o("SEWDModel"),R1o=o(" (SEW-D model)"),B1o=l(),cu=a("li"),Mse=a("strong"),P1o=o("speech_to_text"),I1o=o(" \u2014 "),sq=a("a"),q1o=o("Speech2TextModel"),N1o=o(" (Speech2Text model)"),j1o=l(),fu=a("li"),Ese=a("strong"),D1o=o("splinter"),G1o=o(" \u2014 "),lq=a("a"),O1o=o("SplinterModel"),V1o=o(" (Splinter model)"),X1o=l(),mu=a("li"),Cse=a("strong"),z1o=o("squeezebert"),Q1o=o(" \u2014 "),iq=a("a"),W1o=o("SqueezeBertModel"),H1o=o(" (SqueezeBERT model)"),U1o=l(),gu=a("li"),wse=a("strong"),J1o=o("swin"),Y1o=o(" \u2014 "),dq=a("a"),K1o=o("SwinModel"),Z1o=o(" (Swin model)"),e7o=l(),hu=a("li"),Ase=a("strong"),o7o=o("t5"),r7o=o(" \u2014 "),cq=a("a"),t7o=o("T5Model"),a7o=o(" (T5 model)"),n7o=l(),pu=a("li"),yse=a("strong"),s7o=o("tapas"),l7o=o(" \u2014 "),fq=a("a"),i7o=o("TapasModel"),d7o=o(" (TAPAS model)"),c7o=l(),uu=a("li"),Lse=a("strong"),f7o=o("transfo-xl"),m7o=o(" \u2014 "),mq=a("a"),g7o=o("TransfoXLModel"),h7o=o(" (Transformer-XL model)"),p7o=l(),_u=a("li"),xse=a("strong"),u7o=o("unispeech"),_7o=o(" \u2014 "),gq=a("a"),b7o=o("UniSpeechModel"),v7o=o(" (UniSpeech model)"),F7o=l(),bu=a("li"),$se=a("strong"),T7o=o("unispeech-sat"),M7o=o(" \u2014 "),hq=a("a"),E7o=o("UniSpeechSatModel"),C7o=o(" (UniSpeechSat model)"),w7o=l(),vu=a("li"),kse=a("strong"),A7o=o("van"),y7o=o(" \u2014 "),pq=a("a"),L7o=o("VanModel"),x7o=o(" (VAN model)"),$7o=l(),Fu=a("li"),Sse=a("strong"),k7o=o("vilt"),S7o=o(" \u2014 "),uq=a("a"),R7o=o("ViltModel"),B7o=o(" (ViLT model)"),P7o=l(),Tu=a("li"),Rse=a("strong"),I7o=o("vision-text-dual-encoder"),q7o=o(" \u2014 "),_q=a("a"),N7o=o("VisionTextDualEncoderModel"),j7o=o(" (VisionTextDualEncoder model)"),D7o=l(),Mu=a("li"),Bse=a("strong"),G7o=o("visual_bert"),O7o=o(" \u2014 "),bq=a("a"),V7o=o("VisualBertModel"),X7o=o(" (VisualBert model)"),z7o=l(),Eu=a("li"),Pse=a("strong"),Q7o=o("vit"),W7o=o(" \u2014 "),vq=a("a"),H7o=o("ViTModel"),U7o=o(" (ViT model)"),J7o=l(),Cu=a("li"),Ise=a("strong"),Y7o=o("vit_mae"),K7o=o(" \u2014 "),Fq=a("a"),Z7o=o("ViTMAEModel"),ebo=o(" (ViTMAE model)"),obo=l(),wu=a("li"),qse=a("strong"),rbo=o("wav2vec2"),tbo=o(" \u2014 "),Tq=a("a"),abo=o("Wav2Vec2Model"),nbo=o(" (Wav2Vec2 model)"),sbo=l(),Au=a("li"),Nse=a("strong"),lbo=o("wavlm"),ibo=o(" \u2014 "),Mq=a("a"),dbo=o("WavLMModel"),cbo=o(" (WavLM model)"),fbo=l(),yu=a("li"),jse=a("strong"),mbo=o("xglm"),gbo=o(" \u2014 "),Eq=a("a"),hbo=o("XGLMModel"),pbo=o(" (XGLM model)"),ubo=l(),Lu=a("li"),Dse=a("strong"),_bo=o("xlm"),bbo=o(" \u2014 "),Cq=a("a"),vbo=o("XLMModel"),Fbo=o(" (XLM model)"),Tbo=l(),xu=a("li"),Gse=a("strong"),Mbo=o("xlm-prophetnet"),Ebo=o(" \u2014 "),wq=a("a"),Cbo=o("XLMProphetNetModel"),wbo=o(" (XLMProphetNet model)"),Abo=l(),$u=a("li"),Ose=a("strong"),ybo=o("xlm-roberta"),Lbo=o(" \u2014 "),Aq=a("a"),xbo=o("XLMRobertaModel"),$bo=o(" (XLM-RoBERTa model)"),kbo=l(),ku=a("li"),Vse=a("strong"),Sbo=o("xlm-roberta-xl"),Rbo=o(" \u2014 "),yq=a("a"),Bbo=o("XLMRobertaXLModel"),Pbo=o(" (XLM-RoBERTa-XL model)"),Ibo=l(),Su=a("li"),Xse=a("strong"),qbo=o("xlnet"),Nbo=o(" \u2014 "),Lq=a("a"),jbo=o("XLNetModel"),Dbo=o(" (XLNet model)"),Gbo=l(),Ru=a("li"),zse=a("strong"),Obo=o("yolos"),Vbo=o(" \u2014 "),xq=a("a"),Xbo=o("YolosModel"),zbo=o(" (YOLOS model)"),Qbo=l(),Bu=a("li"),Qse=a("strong"),Wbo=o("yoso"),Hbo=o(" \u2014 "),$q=a("a"),Ubo=o("YosoModel"),Jbo=o(" (YOSO model)"),Ybo=l(),Pu=a("p"),Kbo=o("The model is set in evaluation mode by default using "),Wse=a("code"),Zbo=o("model.eval()"),e2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hse=a("code"),o2o=o("model.train()"),r2o=l(),F(Iu.$$.fragment),aIe=l(),Ci=a("h2"),qu=a("a"),Use=a("span"),F(L6.$$.fragment),t2o=l(),Jse=a("span"),a2o=o("AutoModelForPreTraining"),nIe=l(),xo=a("div"),F(x6.$$.fragment),n2o=l(),wi=a("p"),s2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=a("a"),l2o=o("from_pretrained()"),i2o=o(" class method or the "),Sq=a("a"),d2o=o("from_config()"),c2o=o(` class
method.`),f2o=l(),$6=a("p"),m2o=o("This class cannot be instantiated directly using "),Yse=a("code"),g2o=o("__init__()"),h2o=o(" (throws an error)."),p2o=l(),rt=a("div"),F(k6.$$.fragment),u2o=l(),Kse=a("p"),_2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b2o=l(),Ai=a("p"),v2o=o(`Note:
Loading a model from its configuration file does `),Zse=a("strong"),F2o=o("not"),T2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),M2o=o("from_pretrained()"),E2o=o(" to load the model weights."),C2o=l(),F(Nu.$$.fragment),w2o=l(),Ue=a("div"),F(S6.$$.fragment),A2o=l(),ele=a("p"),y2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L2o=l(),ya=a("p"),x2o=o("The model class to instantiate is selected based on the "),ole=a("code"),$2o=o("model_type"),k2o=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),S2o=o("pretrained_model_name_or_path"),R2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),B2o=o("pretrained_model_name_or_path"),P2o=o(":"),I2o=l(),G=a("ul"),ju=a("li"),ale=a("strong"),q2o=o("albert"),N2o=o(" \u2014 "),Bq=a("a"),j2o=o("AlbertForPreTraining"),D2o=o(" (ALBERT model)"),G2o=l(),Du=a("li"),nle=a("strong"),O2o=o("bart"),V2o=o(" \u2014 "),Pq=a("a"),X2o=o("BartForConditionalGeneration"),z2o=o(" (BART model)"),Q2o=l(),Gu=a("li"),sle=a("strong"),W2o=o("bert"),H2o=o(" \u2014 "),Iq=a("a"),U2o=o("BertForPreTraining"),J2o=o(" (BERT model)"),Y2o=l(),Ou=a("li"),lle=a("strong"),K2o=o("big_bird"),Z2o=o(" \u2014 "),qq=a("a"),e5o=o("BigBirdForPreTraining"),o5o=o(" (BigBird model)"),r5o=l(),Vu=a("li"),ile=a("strong"),t5o=o("camembert"),a5o=o(" \u2014 "),Nq=a("a"),n5o=o("CamembertForMaskedLM"),s5o=o(" (CamemBERT model)"),l5o=l(),Xu=a("li"),dle=a("strong"),i5o=o("ctrl"),d5o=o(" \u2014 "),jq=a("a"),c5o=o("CTRLLMHeadModel"),f5o=o(" (CTRL model)"),m5o=l(),zu=a("li"),cle=a("strong"),g5o=o("data2vec-text"),h5o=o(" \u2014 "),Dq=a("a"),p5o=o("Data2VecTextForMaskedLM"),u5o=o(" (Data2VecText model)"),_5o=l(),Qu=a("li"),fle=a("strong"),b5o=o("deberta"),v5o=o(" \u2014 "),Gq=a("a"),F5o=o("DebertaForMaskedLM"),T5o=o(" (DeBERTa model)"),M5o=l(),Wu=a("li"),mle=a("strong"),E5o=o("deberta-v2"),C5o=o(" \u2014 "),Oq=a("a"),w5o=o("DebertaV2ForMaskedLM"),A5o=o(" (DeBERTa-v2 model)"),y5o=l(),Hu=a("li"),gle=a("strong"),L5o=o("distilbert"),x5o=o(" \u2014 "),Vq=a("a"),$5o=o("DistilBertForMaskedLM"),k5o=o(" (DistilBERT model)"),S5o=l(),Uu=a("li"),hle=a("strong"),R5o=o("electra"),B5o=o(" \u2014 "),Xq=a("a"),P5o=o("ElectraForPreTraining"),I5o=o(" (ELECTRA model)"),q5o=l(),Ju=a("li"),ple=a("strong"),N5o=o("flaubert"),j5o=o(" \u2014 "),zq=a("a"),D5o=o("FlaubertWithLMHeadModel"),G5o=o(" (FlauBERT model)"),O5o=l(),Yu=a("li"),ule=a("strong"),V5o=o("flava"),X5o=o(" \u2014 "),Qq=a("a"),z5o=o("FlavaForPreTraining"),Q5o=o(" (Flava model)"),W5o=l(),Ku=a("li"),_le=a("strong"),H5o=o("fnet"),U5o=o(" \u2014 "),Wq=a("a"),J5o=o("FNetForPreTraining"),Y5o=o(" (FNet model)"),K5o=l(),Zu=a("li"),ble=a("strong"),Z5o=o("fsmt"),evo=o(" \u2014 "),Hq=a("a"),ovo=o("FSMTForConditionalGeneration"),rvo=o(" (FairSeq Machine-Translation model)"),tvo=l(),e_=a("li"),vle=a("strong"),avo=o("funnel"),nvo=o(" \u2014 "),Uq=a("a"),svo=o("FunnelForPreTraining"),lvo=o(" (Funnel Transformer model)"),ivo=l(),o_=a("li"),Fle=a("strong"),dvo=o("gpt2"),cvo=o(" \u2014 "),Jq=a("a"),fvo=o("GPT2LMHeadModel"),mvo=o(" (OpenAI GPT-2 model)"),gvo=l(),r_=a("li"),Tle=a("strong"),hvo=o("ibert"),pvo=o(" \u2014 "),Yq=a("a"),uvo=o("IBertForMaskedLM"),_vo=o(" (I-BERT model)"),bvo=l(),t_=a("li"),Mle=a("strong"),vvo=o("layoutlm"),Fvo=o(" \u2014 "),Kq=a("a"),Tvo=o("LayoutLMForMaskedLM"),Mvo=o(" (LayoutLM model)"),Evo=l(),a_=a("li"),Ele=a("strong"),Cvo=o("longformer"),wvo=o(" \u2014 "),Zq=a("a"),Avo=o("LongformerForMaskedLM"),yvo=o(" (Longformer model)"),Lvo=l(),n_=a("li"),Cle=a("strong"),xvo=o("lxmert"),$vo=o(" \u2014 "),eN=a("a"),kvo=o("LxmertForPreTraining"),Svo=o(" (LXMERT model)"),Rvo=l(),s_=a("li"),wle=a("strong"),Bvo=o("megatron-bert"),Pvo=o(" \u2014 "),oN=a("a"),Ivo=o("MegatronBertForPreTraining"),qvo=o(" (MegatronBert model)"),Nvo=l(),l_=a("li"),Ale=a("strong"),jvo=o("mobilebert"),Dvo=o(" \u2014 "),rN=a("a"),Gvo=o("MobileBertForPreTraining"),Ovo=o(" (MobileBERT model)"),Vvo=l(),i_=a("li"),yle=a("strong"),Xvo=o("mpnet"),zvo=o(" \u2014 "),tN=a("a"),Qvo=o("MPNetForMaskedLM"),Wvo=o(" (MPNet model)"),Hvo=l(),d_=a("li"),Lle=a("strong"),Uvo=o("openai-gpt"),Jvo=o(" \u2014 "),aN=a("a"),Yvo=o("OpenAIGPTLMHeadModel"),Kvo=o(" (OpenAI GPT model)"),Zvo=l(),c_=a("li"),xle=a("strong"),eFo=o("retribert"),oFo=o(" \u2014 "),nN=a("a"),rFo=o("RetriBertModel"),tFo=o(" (RetriBERT model)"),aFo=l(),f_=a("li"),$le=a("strong"),nFo=o("roberta"),sFo=o(" \u2014 "),sN=a("a"),lFo=o("RobertaForMaskedLM"),iFo=o(" (RoBERTa model)"),dFo=l(),m_=a("li"),kle=a("strong"),cFo=o("squeezebert"),fFo=o(" \u2014 "),lN=a("a"),mFo=o("SqueezeBertForMaskedLM"),gFo=o(" (SqueezeBERT model)"),hFo=l(),g_=a("li"),Sle=a("strong"),pFo=o("t5"),uFo=o(" \u2014 "),iN=a("a"),_Fo=o("T5ForConditionalGeneration"),bFo=o(" (T5 model)"),vFo=l(),h_=a("li"),Rle=a("strong"),FFo=o("tapas"),TFo=o(" \u2014 "),dN=a("a"),MFo=o("TapasForMaskedLM"),EFo=o(" (TAPAS model)"),CFo=l(),p_=a("li"),Ble=a("strong"),wFo=o("transfo-xl"),AFo=o(" \u2014 "),cN=a("a"),yFo=o("TransfoXLLMHeadModel"),LFo=o(" (Transformer-XL model)"),xFo=l(),u_=a("li"),Ple=a("strong"),$Fo=o("unispeech"),kFo=o(" \u2014 "),fN=a("a"),SFo=o("UniSpeechForPreTraining"),RFo=o(" (UniSpeech model)"),BFo=l(),__=a("li"),Ile=a("strong"),PFo=o("unispeech-sat"),IFo=o(" \u2014 "),mN=a("a"),qFo=o("UniSpeechSatForPreTraining"),NFo=o(" (UniSpeechSat model)"),jFo=l(),b_=a("li"),qle=a("strong"),DFo=o("visual_bert"),GFo=o(" \u2014 "),gN=a("a"),OFo=o("VisualBertForPreTraining"),VFo=o(" (VisualBert model)"),XFo=l(),v_=a("li"),Nle=a("strong"),zFo=o("vit_mae"),QFo=o(" \u2014 "),hN=a("a"),WFo=o("ViTMAEForPreTraining"),HFo=o(" (ViTMAE model)"),UFo=l(),F_=a("li"),jle=a("strong"),JFo=o("wav2vec2"),YFo=o(" \u2014 "),pN=a("a"),KFo=o("Wav2Vec2ForPreTraining"),ZFo=o(" (Wav2Vec2 model)"),e0o=l(),T_=a("li"),Dle=a("strong"),o0o=o("xlm"),r0o=o(" \u2014 "),uN=a("a"),t0o=o("XLMWithLMHeadModel"),a0o=o(" (XLM model)"),n0o=l(),M_=a("li"),Gle=a("strong"),s0o=o("xlm-roberta"),l0o=o(" \u2014 "),_N=a("a"),i0o=o("XLMRobertaForMaskedLM"),d0o=o(" (XLM-RoBERTa model)"),c0o=l(),E_=a("li"),Ole=a("strong"),f0o=o("xlm-roberta-xl"),m0o=o(" \u2014 "),bN=a("a"),g0o=o("XLMRobertaXLForMaskedLM"),h0o=o(" (XLM-RoBERTa-XL model)"),p0o=l(),C_=a("li"),Vle=a("strong"),u0o=o("xlnet"),_0o=o(" \u2014 "),vN=a("a"),b0o=o("XLNetLMHeadModel"),v0o=o(" (XLNet model)"),F0o=l(),w_=a("p"),T0o=o("The model is set in evaluation mode by default using "),Xle=a("code"),M0o=o("model.eval()"),E0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=a("code"),C0o=o("model.train()"),w0o=l(),F(A_.$$.fragment),sIe=l(),yi=a("h2"),y_=a("a"),Qle=a("span"),F(R6.$$.fragment),A0o=l(),Wle=a("span"),y0o=o("AutoModelForCausalLM"),lIe=l(),$o=a("div"),F(B6.$$.fragment),L0o=l(),Li=a("p"),x0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FN=a("a"),$0o=o("from_pretrained()"),k0o=o(" class method or the "),TN=a("a"),S0o=o("from_config()"),R0o=o(` class
method.`),B0o=l(),P6=a("p"),P0o=o("This class cannot be instantiated directly using "),Hle=a("code"),I0o=o("__init__()"),q0o=o(" (throws an error)."),N0o=l(),tt=a("div"),F(I6.$$.fragment),j0o=l(),Ule=a("p"),D0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G0o=l(),xi=a("p"),O0o=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),V0o=o("not"),X0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),z0o=o("from_pretrained()"),Q0o=o(" to load the model weights."),W0o=l(),F(L_.$$.fragment),H0o=l(),Je=a("div"),F(q6.$$.fragment),U0o=l(),Yle=a("p"),J0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Y0o=l(),La=a("p"),K0o=o("The model class to instantiate is selected based on the "),Kle=a("code"),Z0o=o("model_type"),eTo=o(` property of the config object (either
passed as an argument or loaded from `),Zle=a("code"),oTo=o("pretrained_model_name_or_path"),rTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=a("code"),tTo=o("pretrained_model_name_or_path"),aTo=o(":"),nTo=l(),z=a("ul"),x_=a("li"),oie=a("strong"),sTo=o("bart"),lTo=o(" \u2014 "),EN=a("a"),iTo=o("BartForCausalLM"),dTo=o(" (BART model)"),cTo=l(),$_=a("li"),rie=a("strong"),fTo=o("bert"),mTo=o(" \u2014 "),CN=a("a"),gTo=o("BertLMHeadModel"),hTo=o(" (BERT model)"),pTo=l(),k_=a("li"),tie=a("strong"),uTo=o("bert-generation"),_To=o(" \u2014 "),wN=a("a"),bTo=o("BertGenerationDecoder"),vTo=o(" (Bert Generation model)"),FTo=l(),S_=a("li"),aie=a("strong"),TTo=o("big_bird"),MTo=o(" \u2014 "),AN=a("a"),ETo=o("BigBirdForCausalLM"),CTo=o(" (BigBird model)"),wTo=l(),R_=a("li"),nie=a("strong"),ATo=o("bigbird_pegasus"),yTo=o(" \u2014 "),yN=a("a"),LTo=o("BigBirdPegasusForCausalLM"),xTo=o(" (BigBirdPegasus model)"),$To=l(),B_=a("li"),sie=a("strong"),kTo=o("blenderbot"),STo=o(" \u2014 "),LN=a("a"),RTo=o("BlenderbotForCausalLM"),BTo=o(" (Blenderbot model)"),PTo=l(),P_=a("li"),lie=a("strong"),ITo=o("blenderbot-small"),qTo=o(" \u2014 "),xN=a("a"),NTo=o("BlenderbotSmallForCausalLM"),jTo=o(" (BlenderbotSmall model)"),DTo=l(),I_=a("li"),iie=a("strong"),GTo=o("camembert"),OTo=o(" \u2014 "),$N=a("a"),VTo=o("CamembertForCausalLM"),XTo=o(" (CamemBERT model)"),zTo=l(),q_=a("li"),die=a("strong"),QTo=o("ctrl"),WTo=o(" \u2014 "),kN=a("a"),HTo=o("CTRLLMHeadModel"),UTo=o(" (CTRL model)"),JTo=l(),N_=a("li"),cie=a("strong"),YTo=o("data2vec-text"),KTo=o(" \u2014 "),SN=a("a"),ZTo=o("Data2VecTextForCausalLM"),eMo=o(" (Data2VecText model)"),oMo=l(),j_=a("li"),fie=a("strong"),rMo=o("electra"),tMo=o(" \u2014 "),RN=a("a"),aMo=o("ElectraForCausalLM"),nMo=o(" (ELECTRA model)"),sMo=l(),D_=a("li"),mie=a("strong"),lMo=o("gpt2"),iMo=o(" \u2014 "),BN=a("a"),dMo=o("GPT2LMHeadModel"),cMo=o(" (OpenAI GPT-2 model)"),fMo=l(),G_=a("li"),gie=a("strong"),mMo=o("gpt_neo"),gMo=o(" \u2014 "),PN=a("a"),hMo=o("GPTNeoForCausalLM"),pMo=o(" (GPT Neo model)"),uMo=l(),O_=a("li"),hie=a("strong"),_Mo=o("gptj"),bMo=o(" \u2014 "),IN=a("a"),vMo=o("GPTJForCausalLM"),FMo=o(" (GPT-J model)"),TMo=l(),V_=a("li"),pie=a("strong"),MMo=o("marian"),EMo=o(" \u2014 "),qN=a("a"),CMo=o("MarianForCausalLM"),wMo=o(" (Marian model)"),AMo=l(),X_=a("li"),uie=a("strong"),yMo=o("mbart"),LMo=o(" \u2014 "),NN=a("a"),xMo=o("MBartForCausalLM"),$Mo=o(" (mBART model)"),kMo=l(),z_=a("li"),_ie=a("strong"),SMo=o("megatron-bert"),RMo=o(" \u2014 "),jN=a("a"),BMo=o("MegatronBertForCausalLM"),PMo=o(" (MegatronBert model)"),IMo=l(),Q_=a("li"),bie=a("strong"),qMo=o("openai-gpt"),NMo=o(" \u2014 "),DN=a("a"),jMo=o("OpenAIGPTLMHeadModel"),DMo=o(" (OpenAI GPT model)"),GMo=l(),W_=a("li"),vie=a("strong"),OMo=o("opt"),VMo=o(" \u2014 "),GN=a("a"),XMo=o("OPTForCausalLM"),zMo=o(" (OPT model)"),QMo=l(),H_=a("li"),Fie=a("strong"),WMo=o("pegasus"),HMo=o(" \u2014 "),ON=a("a"),UMo=o("PegasusForCausalLM"),JMo=o(" (Pegasus model)"),YMo=l(),U_=a("li"),Tie=a("strong"),KMo=o("plbart"),ZMo=o(" \u2014 "),VN=a("a"),e4o=o("PLBartForCausalLM"),o4o=o(" (PLBart model)"),r4o=l(),J_=a("li"),Mie=a("strong"),t4o=o("prophetnet"),a4o=o(" \u2014 "),XN=a("a"),n4o=o("ProphetNetForCausalLM"),s4o=o(" (ProphetNet model)"),l4o=l(),Y_=a("li"),Eie=a("strong"),i4o=o("qdqbert"),d4o=o(" \u2014 "),zN=a("a"),c4o=o("QDQBertLMHeadModel"),f4o=o(" (QDQBert model)"),m4o=l(),K_=a("li"),Cie=a("strong"),g4o=o("reformer"),h4o=o(" \u2014 "),QN=a("a"),p4o=o("ReformerModelWithLMHead"),u4o=o(" (Reformer model)"),_4o=l(),Z_=a("li"),wie=a("strong"),b4o=o("rembert"),v4o=o(" \u2014 "),WN=a("a"),F4o=o("RemBertForCausalLM"),T4o=o(" (RemBERT model)"),M4o=l(),e1=a("li"),Aie=a("strong"),E4o=o("roberta"),C4o=o(" \u2014 "),HN=a("a"),w4o=o("RobertaForCausalLM"),A4o=o(" (RoBERTa model)"),y4o=l(),o1=a("li"),yie=a("strong"),L4o=o("roformer"),x4o=o(" \u2014 "),UN=a("a"),$4o=o("RoFormerForCausalLM"),k4o=o(" (RoFormer model)"),S4o=l(),r1=a("li"),Lie=a("strong"),R4o=o("speech_to_text_2"),B4o=o(" \u2014 "),JN=a("a"),P4o=o("Speech2Text2ForCausalLM"),I4o=o(" (Speech2Text2 model)"),q4o=l(),t1=a("li"),xie=a("strong"),N4o=o("transfo-xl"),j4o=o(" \u2014 "),YN=a("a"),D4o=o("TransfoXLLMHeadModel"),G4o=o(" (Transformer-XL model)"),O4o=l(),a1=a("li"),$ie=a("strong"),V4o=o("trocr"),X4o=o(" \u2014 "),KN=a("a"),z4o=o("TrOCRForCausalLM"),Q4o=o(" (TrOCR model)"),W4o=l(),n1=a("li"),kie=a("strong"),H4o=o("xglm"),U4o=o(" \u2014 "),ZN=a("a"),J4o=o("XGLMForCausalLM"),Y4o=o(" (XGLM model)"),K4o=l(),s1=a("li"),Sie=a("strong"),Z4o=o("xlm"),eEo=o(" \u2014 "),ej=a("a"),oEo=o("XLMWithLMHeadModel"),rEo=o(" (XLM model)"),tEo=l(),l1=a("li"),Rie=a("strong"),aEo=o("xlm-prophetnet"),nEo=o(" \u2014 "),oj=a("a"),sEo=o("XLMProphetNetForCausalLM"),lEo=o(" (XLMProphetNet model)"),iEo=l(),i1=a("li"),Bie=a("strong"),dEo=o("xlm-roberta"),cEo=o(" \u2014 "),rj=a("a"),fEo=o("XLMRobertaForCausalLM"),mEo=o(" (XLM-RoBERTa model)"),gEo=l(),d1=a("li"),Pie=a("strong"),hEo=o("xlm-roberta-xl"),pEo=o(" \u2014 "),tj=a("a"),uEo=o("XLMRobertaXLForCausalLM"),_Eo=o(" (XLM-RoBERTa-XL model)"),bEo=l(),c1=a("li"),Iie=a("strong"),vEo=o("xlnet"),FEo=o(" \u2014 "),aj=a("a"),TEo=o("XLNetLMHeadModel"),MEo=o(" (XLNet model)"),EEo=l(),f1=a("p"),CEo=o("The model is set in evaluation mode by default using "),qie=a("code"),wEo=o("model.eval()"),AEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=a("code"),yEo=o("model.train()"),LEo=l(),F(m1.$$.fragment),iIe=l(),$i=a("h2"),g1=a("a"),jie=a("span"),F(N6.$$.fragment),xEo=l(),Die=a("span"),$Eo=o("AutoModelForMaskedLM"),dIe=l(),ko=a("div"),F(j6.$$.fragment),kEo=l(),ki=a("p"),SEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nj=a("a"),REo=o("from_pretrained()"),BEo=o(" class method or the "),sj=a("a"),PEo=o("from_config()"),IEo=o(` class
method.`),qEo=l(),D6=a("p"),NEo=o("This class cannot be instantiated directly using "),Gie=a("code"),jEo=o("__init__()"),DEo=o(" (throws an error)."),GEo=l(),at=a("div"),F(G6.$$.fragment),OEo=l(),Oie=a("p"),VEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XEo=l(),Si=a("p"),zEo=o(`Note:
Loading a model from its configuration file does `),Vie=a("strong"),QEo=o("not"),WEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),HEo=o("from_pretrained()"),UEo=o(" to load the model weights."),JEo=l(),F(h1.$$.fragment),YEo=l(),Ye=a("div"),F(O6.$$.fragment),KEo=l(),Xie=a("p"),ZEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eCo=l(),xa=a("p"),oCo=o("The model class to instantiate is selected based on the "),zie=a("code"),rCo=o("model_type"),tCo=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),aCo=o("pretrained_model_name_or_path"),nCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),sCo=o("pretrained_model_name_or_path"),lCo=o(":"),iCo=l(),Q=a("ul"),p1=a("li"),Hie=a("strong"),dCo=o("albert"),cCo=o(" \u2014 "),ij=a("a"),fCo=o("AlbertForMaskedLM"),mCo=o(" (ALBERT model)"),gCo=l(),u1=a("li"),Uie=a("strong"),hCo=o("bart"),pCo=o(" \u2014 "),dj=a("a"),uCo=o("BartForConditionalGeneration"),_Co=o(" (BART model)"),bCo=l(),_1=a("li"),Jie=a("strong"),vCo=o("bert"),FCo=o(" \u2014 "),cj=a("a"),TCo=o("BertForMaskedLM"),MCo=o(" (BERT model)"),ECo=l(),b1=a("li"),Yie=a("strong"),CCo=o("big_bird"),wCo=o(" \u2014 "),fj=a("a"),ACo=o("BigBirdForMaskedLM"),yCo=o(" (BigBird model)"),LCo=l(),v1=a("li"),Kie=a("strong"),xCo=o("camembert"),$Co=o(" \u2014 "),mj=a("a"),kCo=o("CamembertForMaskedLM"),SCo=o(" (CamemBERT model)"),RCo=l(),F1=a("li"),Zie=a("strong"),BCo=o("convbert"),PCo=o(" \u2014 "),gj=a("a"),ICo=o("ConvBertForMaskedLM"),qCo=o(" (ConvBERT model)"),NCo=l(),T1=a("li"),ede=a("strong"),jCo=o("data2vec-text"),DCo=o(" \u2014 "),hj=a("a"),GCo=o("Data2VecTextForMaskedLM"),OCo=o(" (Data2VecText model)"),VCo=l(),M1=a("li"),ode=a("strong"),XCo=o("deberta"),zCo=o(" \u2014 "),pj=a("a"),QCo=o("DebertaForMaskedLM"),WCo=o(" (DeBERTa model)"),HCo=l(),E1=a("li"),rde=a("strong"),UCo=o("deberta-v2"),JCo=o(" \u2014 "),uj=a("a"),YCo=o("DebertaV2ForMaskedLM"),KCo=o(" (DeBERTa-v2 model)"),ZCo=l(),C1=a("li"),tde=a("strong"),e3o=o("distilbert"),o3o=o(" \u2014 "),_j=a("a"),r3o=o("DistilBertForMaskedLM"),t3o=o(" (DistilBERT model)"),a3o=l(),w1=a("li"),ade=a("strong"),n3o=o("electra"),s3o=o(" \u2014 "),bj=a("a"),l3o=o("ElectraForMaskedLM"),i3o=o(" (ELECTRA model)"),d3o=l(),A1=a("li"),nde=a("strong"),c3o=o("flaubert"),f3o=o(" \u2014 "),vj=a("a"),m3o=o("FlaubertWithLMHeadModel"),g3o=o(" (FlauBERT model)"),h3o=l(),y1=a("li"),sde=a("strong"),p3o=o("fnet"),u3o=o(" \u2014 "),Fj=a("a"),_3o=o("FNetForMaskedLM"),b3o=o(" (FNet model)"),v3o=l(),L1=a("li"),lde=a("strong"),F3o=o("funnel"),T3o=o(" \u2014 "),Tj=a("a"),M3o=o("FunnelForMaskedLM"),E3o=o(" (Funnel Transformer model)"),C3o=l(),x1=a("li"),ide=a("strong"),w3o=o("ibert"),A3o=o(" \u2014 "),Mj=a("a"),y3o=o("IBertForMaskedLM"),L3o=o(" (I-BERT model)"),x3o=l(),$1=a("li"),dde=a("strong"),$3o=o("layoutlm"),k3o=o(" \u2014 "),Ej=a("a"),S3o=o("LayoutLMForMaskedLM"),R3o=o(" (LayoutLM model)"),B3o=l(),k1=a("li"),cde=a("strong"),P3o=o("longformer"),I3o=o(" \u2014 "),Cj=a("a"),q3o=o("LongformerForMaskedLM"),N3o=o(" (Longformer model)"),j3o=l(),S1=a("li"),fde=a("strong"),D3o=o("mbart"),G3o=o(" \u2014 "),wj=a("a"),O3o=o("MBartForConditionalGeneration"),V3o=o(" (mBART model)"),X3o=l(),R1=a("li"),mde=a("strong"),z3o=o("megatron-bert"),Q3o=o(" \u2014 "),Aj=a("a"),W3o=o("MegatronBertForMaskedLM"),H3o=o(" (MegatronBert model)"),U3o=l(),B1=a("li"),gde=a("strong"),J3o=o("mobilebert"),Y3o=o(" \u2014 "),yj=a("a"),K3o=o("MobileBertForMaskedLM"),Z3o=o(" (MobileBERT model)"),ewo=l(),P1=a("li"),hde=a("strong"),owo=o("mpnet"),rwo=o(" \u2014 "),Lj=a("a"),two=o("MPNetForMaskedLM"),awo=o(" (MPNet model)"),nwo=l(),I1=a("li"),pde=a("strong"),swo=o("nystromformer"),lwo=o(" \u2014 "),xj=a("a"),iwo=o("NystromformerForMaskedLM"),dwo=o(" (Nystromformer model)"),cwo=l(),q1=a("li"),ude=a("strong"),fwo=o("perceiver"),mwo=o(" \u2014 "),$j=a("a"),gwo=o("PerceiverForMaskedLM"),hwo=o(" (Perceiver model)"),pwo=l(),N1=a("li"),_de=a("strong"),uwo=o("qdqbert"),_wo=o(" \u2014 "),kj=a("a"),bwo=o("QDQBertForMaskedLM"),vwo=o(" (QDQBert model)"),Fwo=l(),j1=a("li"),bde=a("strong"),Two=o("reformer"),Mwo=o(" \u2014 "),Sj=a("a"),Ewo=o("ReformerForMaskedLM"),Cwo=o(" (Reformer model)"),wwo=l(),D1=a("li"),vde=a("strong"),Awo=o("rembert"),ywo=o(" \u2014 "),Rj=a("a"),Lwo=o("RemBertForMaskedLM"),xwo=o(" (RemBERT model)"),$wo=l(),G1=a("li"),Fde=a("strong"),kwo=o("roberta"),Swo=o(" \u2014 "),Bj=a("a"),Rwo=o("RobertaForMaskedLM"),Bwo=o(" (RoBERTa model)"),Pwo=l(),O1=a("li"),Tde=a("strong"),Iwo=o("roformer"),qwo=o(" \u2014 "),Pj=a("a"),Nwo=o("RoFormerForMaskedLM"),jwo=o(" (RoFormer model)"),Dwo=l(),V1=a("li"),Mde=a("strong"),Gwo=o("squeezebert"),Owo=o(" \u2014 "),Ij=a("a"),Vwo=o("SqueezeBertForMaskedLM"),Xwo=o(" (SqueezeBERT model)"),zwo=l(),X1=a("li"),Ede=a("strong"),Qwo=o("tapas"),Wwo=o(" \u2014 "),qj=a("a"),Hwo=o("TapasForMaskedLM"),Uwo=o(" (TAPAS model)"),Jwo=l(),z1=a("li"),Cde=a("strong"),Ywo=o("wav2vec2"),Kwo=o(" \u2014 "),wde=a("code"),Zwo=o("Wav2Vec2ForMaskedLM"),eAo=o(" (Wav2Vec2 model)"),oAo=l(),Q1=a("li"),Ade=a("strong"),rAo=o("xlm"),tAo=o(" \u2014 "),Nj=a("a"),aAo=o("XLMWithLMHeadModel"),nAo=o(" (XLM model)"),sAo=l(),W1=a("li"),yde=a("strong"),lAo=o("xlm-roberta"),iAo=o(" \u2014 "),jj=a("a"),dAo=o("XLMRobertaForMaskedLM"),cAo=o(" (XLM-RoBERTa model)"),fAo=l(),H1=a("li"),Lde=a("strong"),mAo=o("xlm-roberta-xl"),gAo=o(" \u2014 "),Dj=a("a"),hAo=o("XLMRobertaXLForMaskedLM"),pAo=o(" (XLM-RoBERTa-XL model)"),uAo=l(),U1=a("li"),xde=a("strong"),_Ao=o("yoso"),bAo=o(" \u2014 "),Gj=a("a"),vAo=o("YosoForMaskedLM"),FAo=o(" (YOSO model)"),TAo=l(),J1=a("p"),MAo=o("The model is set in evaluation mode by default using "),$de=a("code"),EAo=o("model.eval()"),CAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),wAo=o("model.train()"),AAo=l(),F(Y1.$$.fragment),cIe=l(),Ri=a("h2"),K1=a("a"),Sde=a("span"),F(V6.$$.fragment),yAo=l(),Rde=a("span"),LAo=o("AutoModelForSeq2SeqLM"),fIe=l(),So=a("div"),F(X6.$$.fragment),xAo=l(),Bi=a("p"),$Ao=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Oj=a("a"),kAo=o("from_pretrained()"),SAo=o(" class method or the "),Vj=a("a"),RAo=o("from_config()"),BAo=o(` class
method.`),PAo=l(),z6=a("p"),IAo=o("This class cannot be instantiated directly using "),Bde=a("code"),qAo=o("__init__()"),NAo=o(" (throws an error)."),jAo=l(),nt=a("div"),F(Q6.$$.fragment),DAo=l(),Pde=a("p"),GAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OAo=l(),Pi=a("p"),VAo=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),XAo=o("not"),zAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xj=a("a"),QAo=o("from_pretrained()"),WAo=o(" to load the model weights."),HAo=l(),F(Z1.$$.fragment),UAo=l(),Ke=a("div"),F(W6.$$.fragment),JAo=l(),qde=a("p"),YAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KAo=l(),$a=a("p"),ZAo=o("The model class to instantiate is selected based on the "),Nde=a("code"),e6o=o("model_type"),o6o=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),r6o=o("pretrained_model_name_or_path"),t6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),a6o=o("pretrained_model_name_or_path"),n6o=o(":"),s6o=l(),he=a("ul"),e7=a("li"),Gde=a("strong"),l6o=o("bart"),i6o=o(" \u2014 "),zj=a("a"),d6o=o("BartForConditionalGeneration"),c6o=o(" (BART model)"),f6o=l(),o7=a("li"),Ode=a("strong"),m6o=o("bigbird_pegasus"),g6o=o(" \u2014 "),Qj=a("a"),h6o=o("BigBirdPegasusForConditionalGeneration"),p6o=o(" (BigBirdPegasus model)"),u6o=l(),r7=a("li"),Vde=a("strong"),_6o=o("blenderbot"),b6o=o(" \u2014 "),Wj=a("a"),v6o=o("BlenderbotForConditionalGeneration"),F6o=o(" (Blenderbot model)"),T6o=l(),t7=a("li"),Xde=a("strong"),M6o=o("blenderbot-small"),E6o=o(" \u2014 "),Hj=a("a"),C6o=o("BlenderbotSmallForConditionalGeneration"),w6o=o(" (BlenderbotSmall model)"),A6o=l(),a7=a("li"),zde=a("strong"),y6o=o("encoder-decoder"),L6o=o(" \u2014 "),Uj=a("a"),x6o=o("EncoderDecoderModel"),$6o=o(" (Encoder decoder model)"),k6o=l(),n7=a("li"),Qde=a("strong"),S6o=o("fsmt"),R6o=o(" \u2014 "),Jj=a("a"),B6o=o("FSMTForConditionalGeneration"),P6o=o(" (FairSeq Machine-Translation model)"),I6o=l(),s7=a("li"),Wde=a("strong"),q6o=o("led"),N6o=o(" \u2014 "),Yj=a("a"),j6o=o("LEDForConditionalGeneration"),D6o=o(" (LED model)"),G6o=l(),l7=a("li"),Hde=a("strong"),O6o=o("m2m_100"),V6o=o(" \u2014 "),Kj=a("a"),X6o=o("M2M100ForConditionalGeneration"),z6o=o(" (M2M100 model)"),Q6o=l(),i7=a("li"),Ude=a("strong"),W6o=o("marian"),H6o=o(" \u2014 "),Zj=a("a"),U6o=o("MarianMTModel"),J6o=o(" (Marian model)"),Y6o=l(),d7=a("li"),Jde=a("strong"),K6o=o("mbart"),Z6o=o(" \u2014 "),eD=a("a"),eyo=o("MBartForConditionalGeneration"),oyo=o(" (mBART model)"),ryo=l(),c7=a("li"),Yde=a("strong"),tyo=o("mt5"),ayo=o(" \u2014 "),oD=a("a"),nyo=o("MT5ForConditionalGeneration"),syo=o(" (mT5 model)"),lyo=l(),f7=a("li"),Kde=a("strong"),iyo=o("pegasus"),dyo=o(" \u2014 "),rD=a("a"),cyo=o("PegasusForConditionalGeneration"),fyo=o(" (Pegasus model)"),myo=l(),m7=a("li"),Zde=a("strong"),gyo=o("plbart"),hyo=o(" \u2014 "),tD=a("a"),pyo=o("PLBartForConditionalGeneration"),uyo=o(" (PLBart model)"),_yo=l(),g7=a("li"),ece=a("strong"),byo=o("prophetnet"),vyo=o(" \u2014 "),aD=a("a"),Fyo=o("ProphetNetForConditionalGeneration"),Tyo=o(" (ProphetNet model)"),Myo=l(),h7=a("li"),oce=a("strong"),Eyo=o("t5"),Cyo=o(" \u2014 "),nD=a("a"),wyo=o("T5ForConditionalGeneration"),Ayo=o(" (T5 model)"),yyo=l(),p7=a("li"),rce=a("strong"),Lyo=o("tapex"),xyo=o(" \u2014 "),sD=a("a"),$yo=o("BartForConditionalGeneration"),kyo=o(" (TAPEX model)"),Syo=l(),u7=a("li"),tce=a("strong"),Ryo=o("xlm-prophetnet"),Byo=o(" \u2014 "),lD=a("a"),Pyo=o("XLMProphetNetForConditionalGeneration"),Iyo=o(" (XLMProphetNet model)"),qyo=l(),_7=a("p"),Nyo=o("The model is set in evaluation mode by default using "),ace=a("code"),jyo=o("model.eval()"),Dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),Gyo=o("model.train()"),Oyo=l(),F(b7.$$.fragment),mIe=l(),Ii=a("h2"),v7=a("a"),sce=a("span"),F(H6.$$.fragment),Vyo=l(),lce=a("span"),Xyo=o("AutoModelForSequenceClassification"),gIe=l(),Ro=a("div"),F(U6.$$.fragment),zyo=l(),qi=a("p"),Qyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iD=a("a"),Wyo=o("from_pretrained()"),Hyo=o(" class method or the "),dD=a("a"),Uyo=o("from_config()"),Jyo=o(` class
method.`),Yyo=l(),J6=a("p"),Kyo=o("This class cannot be instantiated directly using "),ice=a("code"),Zyo=o("__init__()"),eLo=o(" (throws an error)."),oLo=l(),st=a("div"),F(Y6.$$.fragment),rLo=l(),dce=a("p"),tLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aLo=l(),Ni=a("p"),nLo=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),sLo=o("not"),lLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),iLo=o("from_pretrained()"),dLo=o(" to load the model weights."),cLo=l(),F(F7.$$.fragment),fLo=l(),Ze=a("div"),F(K6.$$.fragment),mLo=l(),fce=a("p"),gLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hLo=l(),ka=a("p"),pLo=o("The model class to instantiate is selected based on the "),mce=a("code"),uLo=o("model_type"),_Lo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),bLo=o("pretrained_model_name_or_path"),vLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),FLo=o("pretrained_model_name_or_path"),TLo=o(":"),MLo=l(),q=a("ul"),T7=a("li"),pce=a("strong"),ELo=o("albert"),CLo=o(" \u2014 "),fD=a("a"),wLo=o("AlbertForSequenceClassification"),ALo=o(" (ALBERT model)"),yLo=l(),M7=a("li"),uce=a("strong"),LLo=o("bart"),xLo=o(" \u2014 "),mD=a("a"),$Lo=o("BartForSequenceClassification"),kLo=o(" (BART model)"),SLo=l(),E7=a("li"),_ce=a("strong"),RLo=o("bert"),BLo=o(" \u2014 "),gD=a("a"),PLo=o("BertForSequenceClassification"),ILo=o(" (BERT model)"),qLo=l(),C7=a("li"),bce=a("strong"),NLo=o("big_bird"),jLo=o(" \u2014 "),hD=a("a"),DLo=o("BigBirdForSequenceClassification"),GLo=o(" (BigBird model)"),OLo=l(),w7=a("li"),vce=a("strong"),VLo=o("bigbird_pegasus"),XLo=o(" \u2014 "),pD=a("a"),zLo=o("BigBirdPegasusForSequenceClassification"),QLo=o(" (BigBirdPegasus model)"),WLo=l(),A7=a("li"),Fce=a("strong"),HLo=o("camembert"),ULo=o(" \u2014 "),uD=a("a"),JLo=o("CamembertForSequenceClassification"),YLo=o(" (CamemBERT model)"),KLo=l(),y7=a("li"),Tce=a("strong"),ZLo=o("canine"),e8o=o(" \u2014 "),_D=a("a"),o8o=o("CanineForSequenceClassification"),r8o=o(" (Canine model)"),t8o=l(),L7=a("li"),Mce=a("strong"),a8o=o("convbert"),n8o=o(" \u2014 "),bD=a("a"),s8o=o("ConvBertForSequenceClassification"),l8o=o(" (ConvBERT model)"),i8o=l(),x7=a("li"),Ece=a("strong"),d8o=o("ctrl"),c8o=o(" \u2014 "),vD=a("a"),f8o=o("CTRLForSequenceClassification"),m8o=o(" (CTRL model)"),g8o=l(),$7=a("li"),Cce=a("strong"),h8o=o("data2vec-text"),p8o=o(" \u2014 "),FD=a("a"),u8o=o("Data2VecTextForSequenceClassification"),_8o=o(" (Data2VecText model)"),b8o=l(),k7=a("li"),wce=a("strong"),v8o=o("deberta"),F8o=o(" \u2014 "),TD=a("a"),T8o=o("DebertaForSequenceClassification"),M8o=o(" (DeBERTa model)"),E8o=l(),S7=a("li"),Ace=a("strong"),C8o=o("deberta-v2"),w8o=o(" \u2014 "),MD=a("a"),A8o=o("DebertaV2ForSequenceClassification"),y8o=o(" (DeBERTa-v2 model)"),L8o=l(),R7=a("li"),yce=a("strong"),x8o=o("distilbert"),$8o=o(" \u2014 "),ED=a("a"),k8o=o("DistilBertForSequenceClassification"),S8o=o(" (DistilBERT model)"),R8o=l(),B7=a("li"),Lce=a("strong"),B8o=o("electra"),P8o=o(" \u2014 "),CD=a("a"),I8o=o("ElectraForSequenceClassification"),q8o=o(" (ELECTRA model)"),N8o=l(),P7=a("li"),xce=a("strong"),j8o=o("flaubert"),D8o=o(" \u2014 "),wD=a("a"),G8o=o("FlaubertForSequenceClassification"),O8o=o(" (FlauBERT model)"),V8o=l(),I7=a("li"),$ce=a("strong"),X8o=o("fnet"),z8o=o(" \u2014 "),AD=a("a"),Q8o=o("FNetForSequenceClassification"),W8o=o(" (FNet model)"),H8o=l(),q7=a("li"),kce=a("strong"),U8o=o("funnel"),J8o=o(" \u2014 "),yD=a("a"),Y8o=o("FunnelForSequenceClassification"),K8o=o(" (Funnel Transformer model)"),Z8o=l(),N7=a("li"),Sce=a("strong"),exo=o("gpt2"),oxo=o(" \u2014 "),LD=a("a"),rxo=o("GPT2ForSequenceClassification"),txo=o(" (OpenAI GPT-2 model)"),axo=l(),j7=a("li"),Rce=a("strong"),nxo=o("gpt_neo"),sxo=o(" \u2014 "),xD=a("a"),lxo=o("GPTNeoForSequenceClassification"),ixo=o(" (GPT Neo model)"),dxo=l(),D7=a("li"),Bce=a("strong"),cxo=o("gptj"),fxo=o(" \u2014 "),$D=a("a"),mxo=o("GPTJForSequenceClassification"),gxo=o(" (GPT-J model)"),hxo=l(),G7=a("li"),Pce=a("strong"),pxo=o("ibert"),uxo=o(" \u2014 "),kD=a("a"),_xo=o("IBertForSequenceClassification"),bxo=o(" (I-BERT model)"),vxo=l(),O7=a("li"),Ice=a("strong"),Fxo=o("layoutlm"),Txo=o(" \u2014 "),SD=a("a"),Mxo=o("LayoutLMForSequenceClassification"),Exo=o(" (LayoutLM model)"),Cxo=l(),V7=a("li"),qce=a("strong"),wxo=o("layoutlmv2"),Axo=o(" \u2014 "),RD=a("a"),yxo=o("LayoutLMv2ForSequenceClassification"),Lxo=o(" (LayoutLMv2 model)"),xxo=l(),X7=a("li"),Nce=a("strong"),$xo=o("led"),kxo=o(" \u2014 "),BD=a("a"),Sxo=o("LEDForSequenceClassification"),Rxo=o(" (LED model)"),Bxo=l(),z7=a("li"),jce=a("strong"),Pxo=o("longformer"),Ixo=o(" \u2014 "),PD=a("a"),qxo=o("LongformerForSequenceClassification"),Nxo=o(" (Longformer model)"),jxo=l(),Q7=a("li"),Dce=a("strong"),Dxo=o("mbart"),Gxo=o(" \u2014 "),ID=a("a"),Oxo=o("MBartForSequenceClassification"),Vxo=o(" (mBART model)"),Xxo=l(),W7=a("li"),Gce=a("strong"),zxo=o("megatron-bert"),Qxo=o(" \u2014 "),qD=a("a"),Wxo=o("MegatronBertForSequenceClassification"),Hxo=o(" (MegatronBert model)"),Uxo=l(),H7=a("li"),Oce=a("strong"),Jxo=o("mobilebert"),Yxo=o(" \u2014 "),ND=a("a"),Kxo=o("MobileBertForSequenceClassification"),Zxo=o(" (MobileBERT model)"),e9o=l(),U7=a("li"),Vce=a("strong"),o9o=o("mpnet"),r9o=o(" \u2014 "),jD=a("a"),t9o=o("MPNetForSequenceClassification"),a9o=o(" (MPNet model)"),n9o=l(),J7=a("li"),Xce=a("strong"),s9o=o("nystromformer"),l9o=o(" \u2014 "),DD=a("a"),i9o=o("NystromformerForSequenceClassification"),d9o=o(" (Nystromformer model)"),c9o=l(),Y7=a("li"),zce=a("strong"),f9o=o("openai-gpt"),m9o=o(" \u2014 "),GD=a("a"),g9o=o("OpenAIGPTForSequenceClassification"),h9o=o(" (OpenAI GPT model)"),p9o=l(),K7=a("li"),Qce=a("strong"),u9o=o("perceiver"),_9o=o(" \u2014 "),OD=a("a"),b9o=o("PerceiverForSequenceClassification"),v9o=o(" (Perceiver model)"),F9o=l(),Z7=a("li"),Wce=a("strong"),T9o=o("plbart"),M9o=o(" \u2014 "),VD=a("a"),E9o=o("PLBartForSequenceClassification"),C9o=o(" (PLBart model)"),w9o=l(),eb=a("li"),Hce=a("strong"),A9o=o("qdqbert"),y9o=o(" \u2014 "),XD=a("a"),L9o=o("QDQBertForSequenceClassification"),x9o=o(" (QDQBert model)"),$9o=l(),ob=a("li"),Uce=a("strong"),k9o=o("reformer"),S9o=o(" \u2014 "),zD=a("a"),R9o=o("ReformerForSequenceClassification"),B9o=o(" (Reformer model)"),P9o=l(),rb=a("li"),Jce=a("strong"),I9o=o("rembert"),q9o=o(" \u2014 "),QD=a("a"),N9o=o("RemBertForSequenceClassification"),j9o=o(" (RemBERT model)"),D9o=l(),tb=a("li"),Yce=a("strong"),G9o=o("roberta"),O9o=o(" \u2014 "),WD=a("a"),V9o=o("RobertaForSequenceClassification"),X9o=o(" (RoBERTa model)"),z9o=l(),ab=a("li"),Kce=a("strong"),Q9o=o("roformer"),W9o=o(" \u2014 "),HD=a("a"),H9o=o("RoFormerForSequenceClassification"),U9o=o(" (RoFormer model)"),J9o=l(),nb=a("li"),Zce=a("strong"),Y9o=o("squeezebert"),K9o=o(" \u2014 "),UD=a("a"),Z9o=o("SqueezeBertForSequenceClassification"),e$o=o(" (SqueezeBERT model)"),o$o=l(),sb=a("li"),efe=a("strong"),r$o=o("tapas"),t$o=o(" \u2014 "),JD=a("a"),a$o=o("TapasForSequenceClassification"),n$o=o(" (TAPAS model)"),s$o=l(),lb=a("li"),ofe=a("strong"),l$o=o("tapex"),i$o=o(" \u2014 "),YD=a("a"),d$o=o("BartForSequenceClassification"),c$o=o(" (TAPEX model)"),f$o=l(),ib=a("li"),rfe=a("strong"),m$o=o("transfo-xl"),g$o=o(" \u2014 "),KD=a("a"),h$o=o("TransfoXLForSequenceClassification"),p$o=o(" (Transformer-XL model)"),u$o=l(),db=a("li"),tfe=a("strong"),_$o=o("xlm"),b$o=o(" \u2014 "),ZD=a("a"),v$o=o("XLMForSequenceClassification"),F$o=o(" (XLM model)"),T$o=l(),cb=a("li"),afe=a("strong"),M$o=o("xlm-roberta"),E$o=o(" \u2014 "),eG=a("a"),C$o=o("XLMRobertaForSequenceClassification"),w$o=o(" (XLM-RoBERTa model)"),A$o=l(),fb=a("li"),nfe=a("strong"),y$o=o("xlm-roberta-xl"),L$o=o(" \u2014 "),oG=a("a"),x$o=o("XLMRobertaXLForSequenceClassification"),$$o=o(" (XLM-RoBERTa-XL model)"),k$o=l(),mb=a("li"),sfe=a("strong"),S$o=o("xlnet"),R$o=o(" \u2014 "),rG=a("a"),B$o=o("XLNetForSequenceClassification"),P$o=o(" (XLNet model)"),I$o=l(),gb=a("li"),lfe=a("strong"),q$o=o("yoso"),N$o=o(" \u2014 "),tG=a("a"),j$o=o("YosoForSequenceClassification"),D$o=o(" (YOSO model)"),G$o=l(),hb=a("p"),O$o=o("The model is set in evaluation mode by default using "),ife=a("code"),V$o=o("model.eval()"),X$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),z$o=o("model.train()"),Q$o=l(),F(pb.$$.fragment),hIe=l(),ji=a("h2"),ub=a("a"),cfe=a("span"),F(Z6.$$.fragment),W$o=l(),ffe=a("span"),H$o=o("AutoModelForMultipleChoice"),pIe=l(),Bo=a("div"),F(ey.$$.fragment),U$o=l(),Di=a("p"),J$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aG=a("a"),Y$o=o("from_pretrained()"),K$o=o(" class method or the "),nG=a("a"),Z$o=o("from_config()"),eko=o(` class
method.`),oko=l(),oy=a("p"),rko=o("This class cannot be instantiated directly using "),mfe=a("code"),tko=o("__init__()"),ako=o(" (throws an error)."),nko=l(),lt=a("div"),F(ry.$$.fragment),sko=l(),gfe=a("p"),lko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iko=l(),Gi=a("p"),dko=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),cko=o("not"),fko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),mko=o("from_pretrained()"),gko=o(" to load the model weights."),hko=l(),F(_b.$$.fragment),pko=l(),eo=a("div"),F(ty.$$.fragment),uko=l(),pfe=a("p"),_ko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bko=l(),Sa=a("p"),vko=o("The model class to instantiate is selected based on the "),ufe=a("code"),Fko=o("model_type"),Tko=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),Mko=o("pretrained_model_name_or_path"),Eko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),Cko=o("pretrained_model_name_or_path"),wko=o(":"),Ako=l(),Y=a("ul"),bb=a("li"),vfe=a("strong"),yko=o("albert"),Lko=o(" \u2014 "),lG=a("a"),xko=o("AlbertForMultipleChoice"),$ko=o(" (ALBERT model)"),kko=l(),vb=a("li"),Ffe=a("strong"),Sko=o("bert"),Rko=o(" \u2014 "),iG=a("a"),Bko=o("BertForMultipleChoice"),Pko=o(" (BERT model)"),Iko=l(),Fb=a("li"),Tfe=a("strong"),qko=o("big_bird"),Nko=o(" \u2014 "),dG=a("a"),jko=o("BigBirdForMultipleChoice"),Dko=o(" (BigBird model)"),Gko=l(),Tb=a("li"),Mfe=a("strong"),Oko=o("camembert"),Vko=o(" \u2014 "),cG=a("a"),Xko=o("CamembertForMultipleChoice"),zko=o(" (CamemBERT model)"),Qko=l(),Mb=a("li"),Efe=a("strong"),Wko=o("canine"),Hko=o(" \u2014 "),fG=a("a"),Uko=o("CanineForMultipleChoice"),Jko=o(" (Canine model)"),Yko=l(),Eb=a("li"),Cfe=a("strong"),Kko=o("convbert"),Zko=o(" \u2014 "),mG=a("a"),eSo=o("ConvBertForMultipleChoice"),oSo=o(" (ConvBERT model)"),rSo=l(),Cb=a("li"),wfe=a("strong"),tSo=o("data2vec-text"),aSo=o(" \u2014 "),gG=a("a"),nSo=o("Data2VecTextForMultipleChoice"),sSo=o(" (Data2VecText model)"),lSo=l(),wb=a("li"),Afe=a("strong"),iSo=o("deberta-v2"),dSo=o(" \u2014 "),hG=a("a"),cSo=o("DebertaV2ForMultipleChoice"),fSo=o(" (DeBERTa-v2 model)"),mSo=l(),Ab=a("li"),yfe=a("strong"),gSo=o("distilbert"),hSo=o(" \u2014 "),pG=a("a"),pSo=o("DistilBertForMultipleChoice"),uSo=o(" (DistilBERT model)"),_So=l(),yb=a("li"),Lfe=a("strong"),bSo=o("electra"),vSo=o(" \u2014 "),uG=a("a"),FSo=o("ElectraForMultipleChoice"),TSo=o(" (ELECTRA model)"),MSo=l(),Lb=a("li"),xfe=a("strong"),ESo=o("flaubert"),CSo=o(" \u2014 "),_G=a("a"),wSo=o("FlaubertForMultipleChoice"),ASo=o(" (FlauBERT model)"),ySo=l(),xb=a("li"),$fe=a("strong"),LSo=o("fnet"),xSo=o(" \u2014 "),bG=a("a"),$So=o("FNetForMultipleChoice"),kSo=o(" (FNet model)"),SSo=l(),$b=a("li"),kfe=a("strong"),RSo=o("funnel"),BSo=o(" \u2014 "),vG=a("a"),PSo=o("FunnelForMultipleChoice"),ISo=o(" (Funnel Transformer model)"),qSo=l(),kb=a("li"),Sfe=a("strong"),NSo=o("ibert"),jSo=o(" \u2014 "),FG=a("a"),DSo=o("IBertForMultipleChoice"),GSo=o(" (I-BERT model)"),OSo=l(),Sb=a("li"),Rfe=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),TG=a("a"),zSo=o("LongformerForMultipleChoice"),QSo=o(" (Longformer model)"),WSo=l(),Rb=a("li"),Bfe=a("strong"),HSo=o("megatron-bert"),USo=o(" \u2014 "),MG=a("a"),JSo=o("MegatronBertForMultipleChoice"),YSo=o(" (MegatronBert model)"),KSo=l(),Bb=a("li"),Pfe=a("strong"),ZSo=o("mobilebert"),eRo=o(" \u2014 "),EG=a("a"),oRo=o("MobileBertForMultipleChoice"),rRo=o(" (MobileBERT model)"),tRo=l(),Pb=a("li"),Ife=a("strong"),aRo=o("mpnet"),nRo=o(" \u2014 "),CG=a("a"),sRo=o("MPNetForMultipleChoice"),lRo=o(" (MPNet model)"),iRo=l(),Ib=a("li"),qfe=a("strong"),dRo=o("nystromformer"),cRo=o(" \u2014 "),wG=a("a"),fRo=o("NystromformerForMultipleChoice"),mRo=o(" (Nystromformer model)"),gRo=l(),qb=a("li"),Nfe=a("strong"),hRo=o("qdqbert"),pRo=o(" \u2014 "),AG=a("a"),uRo=o("QDQBertForMultipleChoice"),_Ro=o(" (QDQBert model)"),bRo=l(),Nb=a("li"),jfe=a("strong"),vRo=o("rembert"),FRo=o(" \u2014 "),yG=a("a"),TRo=o("RemBertForMultipleChoice"),MRo=o(" (RemBERT model)"),ERo=l(),jb=a("li"),Dfe=a("strong"),CRo=o("roberta"),wRo=o(" \u2014 "),LG=a("a"),ARo=o("RobertaForMultipleChoice"),yRo=o(" (RoBERTa model)"),LRo=l(),Db=a("li"),Gfe=a("strong"),xRo=o("roformer"),$Ro=o(" \u2014 "),xG=a("a"),kRo=o("RoFormerForMultipleChoice"),SRo=o(" (RoFormer model)"),RRo=l(),Gb=a("li"),Ofe=a("strong"),BRo=o("squeezebert"),PRo=o(" \u2014 "),$G=a("a"),IRo=o("SqueezeBertForMultipleChoice"),qRo=o(" (SqueezeBERT model)"),NRo=l(),Ob=a("li"),Vfe=a("strong"),jRo=o("xlm"),DRo=o(" \u2014 "),kG=a("a"),GRo=o("XLMForMultipleChoice"),ORo=o(" (XLM model)"),VRo=l(),Vb=a("li"),Xfe=a("strong"),XRo=o("xlm-roberta"),zRo=o(" \u2014 "),SG=a("a"),QRo=o("XLMRobertaForMultipleChoice"),WRo=o(" (XLM-RoBERTa model)"),HRo=l(),Xb=a("li"),zfe=a("strong"),URo=o("xlm-roberta-xl"),JRo=o(" \u2014 "),RG=a("a"),YRo=o("XLMRobertaXLForMultipleChoice"),KRo=o(" (XLM-RoBERTa-XL model)"),ZRo=l(),zb=a("li"),Qfe=a("strong"),eBo=o("xlnet"),oBo=o(" \u2014 "),BG=a("a"),rBo=o("XLNetForMultipleChoice"),tBo=o(" (XLNet model)"),aBo=l(),Qb=a("li"),Wfe=a("strong"),nBo=o("yoso"),sBo=o(" \u2014 "),PG=a("a"),lBo=o("YosoForMultipleChoice"),iBo=o(" (YOSO model)"),dBo=l(),Wb=a("p"),cBo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),fBo=o("model.eval()"),mBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),gBo=o("model.train()"),hBo=l(),F(Hb.$$.fragment),uIe=l(),Oi=a("h2"),Ub=a("a"),Jfe=a("span"),F(ay.$$.fragment),pBo=l(),Yfe=a("span"),uBo=o("AutoModelForNextSentencePrediction"),_Ie=l(),Po=a("div"),F(ny.$$.fragment),_Bo=l(),Vi=a("p"),bBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IG=a("a"),vBo=o("from_pretrained()"),FBo=o(" class method or the "),qG=a("a"),TBo=o("from_config()"),MBo=o(` class
method.`),EBo=l(),sy=a("p"),CBo=o("This class cannot be instantiated directly using "),Kfe=a("code"),wBo=o("__init__()"),ABo=o(" (throws an error)."),yBo=l(),it=a("div"),F(ly.$$.fragment),LBo=l(),Zfe=a("p"),xBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Bo=l(),Xi=a("p"),kBo=o(`Note:
Loading a model from its configuration file does `),eme=a("strong"),SBo=o("not"),RBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),BBo=o("from_pretrained()"),PBo=o(" to load the model weights."),IBo=l(),F(Jb.$$.fragment),qBo=l(),oo=a("div"),F(iy.$$.fragment),NBo=l(),ome=a("p"),jBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DBo=l(),Ra=a("p"),GBo=o("The model class to instantiate is selected based on the "),rme=a("code"),OBo=o("model_type"),VBo=o(` property of the config object (either
passed as an argument or loaded from `),tme=a("code"),XBo=o("pretrained_model_name_or_path"),zBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=a("code"),QBo=o("pretrained_model_name_or_path"),WBo=o(":"),HBo=l(),Yr=a("ul"),Yb=a("li"),nme=a("strong"),UBo=o("bert"),JBo=o(" \u2014 "),jG=a("a"),YBo=o("BertForNextSentencePrediction"),KBo=o(" (BERT model)"),ZBo=l(),Kb=a("li"),sme=a("strong"),ePo=o("fnet"),oPo=o(" \u2014 "),DG=a("a"),rPo=o("FNetForNextSentencePrediction"),tPo=o(" (FNet model)"),aPo=l(),Zb=a("li"),lme=a("strong"),nPo=o("megatron-bert"),sPo=o(" \u2014 "),GG=a("a"),lPo=o("MegatronBertForNextSentencePrediction"),iPo=o(" (MegatronBert model)"),dPo=l(),e2=a("li"),ime=a("strong"),cPo=o("mobilebert"),fPo=o(" \u2014 "),OG=a("a"),mPo=o("MobileBertForNextSentencePrediction"),gPo=o(" (MobileBERT model)"),hPo=l(),o2=a("li"),dme=a("strong"),pPo=o("qdqbert"),uPo=o(" \u2014 "),VG=a("a"),_Po=o("QDQBertForNextSentencePrediction"),bPo=o(" (QDQBert model)"),vPo=l(),r2=a("p"),FPo=o("The model is set in evaluation mode by default using "),cme=a("code"),TPo=o("model.eval()"),MPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),EPo=o("model.train()"),CPo=l(),F(t2.$$.fragment),bIe=l(),zi=a("h2"),a2=a("a"),mme=a("span"),F(dy.$$.fragment),wPo=l(),gme=a("span"),APo=o("AutoModelForTokenClassification"),vIe=l(),Io=a("div"),F(cy.$$.fragment),yPo=l(),Qi=a("p"),LPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XG=a("a"),xPo=o("from_pretrained()"),$Po=o(" class method or the "),zG=a("a"),kPo=o("from_config()"),SPo=o(` class
method.`),RPo=l(),fy=a("p"),BPo=o("This class cannot be instantiated directly using "),hme=a("code"),PPo=o("__init__()"),IPo=o(" (throws an error)."),qPo=l(),dt=a("div"),F(my.$$.fragment),NPo=l(),pme=a("p"),jPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DPo=l(),Wi=a("p"),GPo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),OPo=o("not"),VPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),XPo=o("from_pretrained()"),zPo=o(" to load the model weights."),QPo=l(),F(n2.$$.fragment),WPo=l(),ro=a("div"),F(gy.$$.fragment),HPo=l(),_me=a("p"),UPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JPo=l(),Ba=a("p"),YPo=o("The model class to instantiate is selected based on the "),bme=a("code"),KPo=o("model_type"),ZPo=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),rIo=o("pretrained_model_name_or_path"),tIo=o(":"),aIo=l(),U=a("ul"),s2=a("li"),Tme=a("strong"),nIo=o("albert"),sIo=o(" \u2014 "),WG=a("a"),lIo=o("AlbertForTokenClassification"),iIo=o(" (ALBERT model)"),dIo=l(),l2=a("li"),Mme=a("strong"),cIo=o("bert"),fIo=o(" \u2014 "),HG=a("a"),mIo=o("BertForTokenClassification"),gIo=o(" (BERT model)"),hIo=l(),i2=a("li"),Eme=a("strong"),pIo=o("big_bird"),uIo=o(" \u2014 "),UG=a("a"),_Io=o("BigBirdForTokenClassification"),bIo=o(" (BigBird model)"),vIo=l(),d2=a("li"),Cme=a("strong"),FIo=o("camembert"),TIo=o(" \u2014 "),JG=a("a"),MIo=o("CamembertForTokenClassification"),EIo=o(" (CamemBERT model)"),CIo=l(),c2=a("li"),wme=a("strong"),wIo=o("canine"),AIo=o(" \u2014 "),YG=a("a"),yIo=o("CanineForTokenClassification"),LIo=o(" (Canine model)"),xIo=l(),f2=a("li"),Ame=a("strong"),$Io=o("convbert"),kIo=o(" \u2014 "),KG=a("a"),SIo=o("ConvBertForTokenClassification"),RIo=o(" (ConvBERT model)"),BIo=l(),m2=a("li"),yme=a("strong"),PIo=o("data2vec-text"),IIo=o(" \u2014 "),ZG=a("a"),qIo=o("Data2VecTextForTokenClassification"),NIo=o(" (Data2VecText model)"),jIo=l(),g2=a("li"),Lme=a("strong"),DIo=o("deberta"),GIo=o(" \u2014 "),eO=a("a"),OIo=o("DebertaForTokenClassification"),VIo=o(" (DeBERTa model)"),XIo=l(),h2=a("li"),xme=a("strong"),zIo=o("deberta-v2"),QIo=o(" \u2014 "),oO=a("a"),WIo=o("DebertaV2ForTokenClassification"),HIo=o(" (DeBERTa-v2 model)"),UIo=l(),p2=a("li"),$me=a("strong"),JIo=o("distilbert"),YIo=o(" \u2014 "),rO=a("a"),KIo=o("DistilBertForTokenClassification"),ZIo=o(" (DistilBERT model)"),eqo=l(),u2=a("li"),kme=a("strong"),oqo=o("electra"),rqo=o(" \u2014 "),tO=a("a"),tqo=o("ElectraForTokenClassification"),aqo=o(" (ELECTRA model)"),nqo=l(),_2=a("li"),Sme=a("strong"),sqo=o("flaubert"),lqo=o(" \u2014 "),aO=a("a"),iqo=o("FlaubertForTokenClassification"),dqo=o(" (FlauBERT model)"),cqo=l(),b2=a("li"),Rme=a("strong"),fqo=o("fnet"),mqo=o(" \u2014 "),nO=a("a"),gqo=o("FNetForTokenClassification"),hqo=o(" (FNet model)"),pqo=l(),v2=a("li"),Bme=a("strong"),uqo=o("funnel"),_qo=o(" \u2014 "),sO=a("a"),bqo=o("FunnelForTokenClassification"),vqo=o(" (Funnel Transformer model)"),Fqo=l(),F2=a("li"),Pme=a("strong"),Tqo=o("gpt2"),Mqo=o(" \u2014 "),lO=a("a"),Eqo=o("GPT2ForTokenClassification"),Cqo=o(" (OpenAI GPT-2 model)"),wqo=l(),T2=a("li"),Ime=a("strong"),Aqo=o("ibert"),yqo=o(" \u2014 "),iO=a("a"),Lqo=o("IBertForTokenClassification"),xqo=o(" (I-BERT model)"),$qo=l(),M2=a("li"),qme=a("strong"),kqo=o("layoutlm"),Sqo=o(" \u2014 "),dO=a("a"),Rqo=o("LayoutLMForTokenClassification"),Bqo=o(" (LayoutLM model)"),Pqo=l(),E2=a("li"),Nme=a("strong"),Iqo=o("layoutlmv2"),qqo=o(" \u2014 "),cO=a("a"),Nqo=o("LayoutLMv2ForTokenClassification"),jqo=o(" (LayoutLMv2 model)"),Dqo=l(),C2=a("li"),jme=a("strong"),Gqo=o("longformer"),Oqo=o(" \u2014 "),fO=a("a"),Vqo=o("LongformerForTokenClassification"),Xqo=o(" (Longformer model)"),zqo=l(),w2=a("li"),Dme=a("strong"),Qqo=o("megatron-bert"),Wqo=o(" \u2014 "),mO=a("a"),Hqo=o("MegatronBertForTokenClassification"),Uqo=o(" (MegatronBert model)"),Jqo=l(),A2=a("li"),Gme=a("strong"),Yqo=o("mobilebert"),Kqo=o(" \u2014 "),gO=a("a"),Zqo=o("MobileBertForTokenClassification"),eNo=o(" (MobileBERT model)"),oNo=l(),y2=a("li"),Ome=a("strong"),rNo=o("mpnet"),tNo=o(" \u2014 "),hO=a("a"),aNo=o("MPNetForTokenClassification"),nNo=o(" (MPNet model)"),sNo=l(),L2=a("li"),Vme=a("strong"),lNo=o("nystromformer"),iNo=o(" \u2014 "),pO=a("a"),dNo=o("NystromformerForTokenClassification"),cNo=o(" (Nystromformer model)"),fNo=l(),x2=a("li"),Xme=a("strong"),mNo=o("qdqbert"),gNo=o(" \u2014 "),uO=a("a"),hNo=o("QDQBertForTokenClassification"),pNo=o(" (QDQBert model)"),uNo=l(),$2=a("li"),zme=a("strong"),_No=o("rembert"),bNo=o(" \u2014 "),_O=a("a"),vNo=o("RemBertForTokenClassification"),FNo=o(" (RemBERT model)"),TNo=l(),k2=a("li"),Qme=a("strong"),MNo=o("roberta"),ENo=o(" \u2014 "),bO=a("a"),CNo=o("RobertaForTokenClassification"),wNo=o(" (RoBERTa model)"),ANo=l(),S2=a("li"),Wme=a("strong"),yNo=o("roformer"),LNo=o(" \u2014 "),vO=a("a"),xNo=o("RoFormerForTokenClassification"),$No=o(" (RoFormer model)"),kNo=l(),R2=a("li"),Hme=a("strong"),SNo=o("squeezebert"),RNo=o(" \u2014 "),FO=a("a"),BNo=o("SqueezeBertForTokenClassification"),PNo=o(" (SqueezeBERT model)"),INo=l(),B2=a("li"),Ume=a("strong"),qNo=o("xlm"),NNo=o(" \u2014 "),TO=a("a"),jNo=o("XLMForTokenClassification"),DNo=o(" (XLM model)"),GNo=l(),P2=a("li"),Jme=a("strong"),ONo=o("xlm-roberta"),VNo=o(" \u2014 "),MO=a("a"),XNo=o("XLMRobertaForTokenClassification"),zNo=o(" (XLM-RoBERTa model)"),QNo=l(),I2=a("li"),Yme=a("strong"),WNo=o("xlm-roberta-xl"),HNo=o(" \u2014 "),EO=a("a"),UNo=o("XLMRobertaXLForTokenClassification"),JNo=o(" (XLM-RoBERTa-XL model)"),YNo=l(),q2=a("li"),Kme=a("strong"),KNo=o("xlnet"),ZNo=o(" \u2014 "),CO=a("a"),ejo=o("XLNetForTokenClassification"),ojo=o(" (XLNet model)"),rjo=l(),N2=a("li"),Zme=a("strong"),tjo=o("yoso"),ajo=o(" \u2014 "),wO=a("a"),njo=o("YosoForTokenClassification"),sjo=o(" (YOSO model)"),ljo=l(),j2=a("p"),ijo=o("The model is set in evaluation mode by default using "),ege=a("code"),djo=o("model.eval()"),cjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),fjo=o("model.train()"),mjo=l(),F(D2.$$.fragment),FIe=l(),Hi=a("h2"),G2=a("a"),rge=a("span"),F(hy.$$.fragment),gjo=l(),tge=a("span"),hjo=o("AutoModelForQuestionAnswering"),TIe=l(),qo=a("div"),F(py.$$.fragment),pjo=l(),Ui=a("p"),ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AO=a("a"),_jo=o("from_pretrained()"),bjo=o(" class method or the "),yO=a("a"),vjo=o("from_config()"),Fjo=o(` class
method.`),Tjo=l(),uy=a("p"),Mjo=o("This class cannot be instantiated directly using "),age=a("code"),Ejo=o("__init__()"),Cjo=o(" (throws an error)."),wjo=l(),ct=a("div"),F(_y.$$.fragment),Ajo=l(),nge=a("p"),yjo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ljo=l(),Ji=a("p"),xjo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),$jo=o("not"),kjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),Sjo=o("from_pretrained()"),Rjo=o(" to load the model weights."),Bjo=l(),F(O2.$$.fragment),Pjo=l(),to=a("div"),F(by.$$.fragment),Ijo=l(),lge=a("p"),qjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Njo=l(),Pa=a("p"),jjo=o("The model class to instantiate is selected based on the "),ige=a("code"),Djo=o("model_type"),Gjo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),Ojo=o("pretrained_model_name_or_path"),Vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),Xjo=o("pretrained_model_name_or_path"),zjo=o(":"),Qjo=l(),O=a("ul"),V2=a("li"),fge=a("strong"),Wjo=o("albert"),Hjo=o(" \u2014 "),xO=a("a"),Ujo=o("AlbertForQuestionAnswering"),Jjo=o(" (ALBERT model)"),Yjo=l(),X2=a("li"),mge=a("strong"),Kjo=o("bart"),Zjo=o(" \u2014 "),$O=a("a"),eDo=o("BartForQuestionAnswering"),oDo=o(" (BART model)"),rDo=l(),z2=a("li"),gge=a("strong"),tDo=o("bert"),aDo=o(" \u2014 "),kO=a("a"),nDo=o("BertForQuestionAnswering"),sDo=o(" (BERT model)"),lDo=l(),Q2=a("li"),hge=a("strong"),iDo=o("big_bird"),dDo=o(" \u2014 "),SO=a("a"),cDo=o("BigBirdForQuestionAnswering"),fDo=o(" (BigBird model)"),mDo=l(),W2=a("li"),pge=a("strong"),gDo=o("bigbird_pegasus"),hDo=o(" \u2014 "),RO=a("a"),pDo=o("BigBirdPegasusForQuestionAnswering"),uDo=o(" (BigBirdPegasus model)"),_Do=l(),H2=a("li"),uge=a("strong"),bDo=o("camembert"),vDo=o(" \u2014 "),BO=a("a"),FDo=o("CamembertForQuestionAnswering"),TDo=o(" (CamemBERT model)"),MDo=l(),U2=a("li"),_ge=a("strong"),EDo=o("canine"),CDo=o(" \u2014 "),PO=a("a"),wDo=o("CanineForQuestionAnswering"),ADo=o(" (Canine model)"),yDo=l(),J2=a("li"),bge=a("strong"),LDo=o("convbert"),xDo=o(" \u2014 "),IO=a("a"),$Do=o("ConvBertForQuestionAnswering"),kDo=o(" (ConvBERT model)"),SDo=l(),Y2=a("li"),vge=a("strong"),RDo=o("data2vec-text"),BDo=o(" \u2014 "),qO=a("a"),PDo=o("Data2VecTextForQuestionAnswering"),IDo=o(" (Data2VecText model)"),qDo=l(),K2=a("li"),Fge=a("strong"),NDo=o("deberta"),jDo=o(" \u2014 "),NO=a("a"),DDo=o("DebertaForQuestionAnswering"),GDo=o(" (DeBERTa model)"),ODo=l(),Z2=a("li"),Tge=a("strong"),VDo=o("deberta-v2"),XDo=o(" \u2014 "),jO=a("a"),zDo=o("DebertaV2ForQuestionAnswering"),QDo=o(" (DeBERTa-v2 model)"),WDo=l(),e5=a("li"),Mge=a("strong"),HDo=o("distilbert"),UDo=o(" \u2014 "),DO=a("a"),JDo=o("DistilBertForQuestionAnswering"),YDo=o(" (DistilBERT model)"),KDo=l(),o5=a("li"),Ege=a("strong"),ZDo=o("electra"),eGo=o(" \u2014 "),GO=a("a"),oGo=o("ElectraForQuestionAnswering"),rGo=o(" (ELECTRA model)"),tGo=l(),r5=a("li"),Cge=a("strong"),aGo=o("flaubert"),nGo=o(" \u2014 "),OO=a("a"),sGo=o("FlaubertForQuestionAnsweringSimple"),lGo=o(" (FlauBERT model)"),iGo=l(),t5=a("li"),wge=a("strong"),dGo=o("fnet"),cGo=o(" \u2014 "),VO=a("a"),fGo=o("FNetForQuestionAnswering"),mGo=o(" (FNet model)"),gGo=l(),a5=a("li"),Age=a("strong"),hGo=o("funnel"),pGo=o(" \u2014 "),XO=a("a"),uGo=o("FunnelForQuestionAnswering"),_Go=o(" (Funnel Transformer model)"),bGo=l(),n5=a("li"),yge=a("strong"),vGo=o("gptj"),FGo=o(" \u2014 "),zO=a("a"),TGo=o("GPTJForQuestionAnswering"),MGo=o(" (GPT-J model)"),EGo=l(),s5=a("li"),Lge=a("strong"),CGo=o("ibert"),wGo=o(" \u2014 "),QO=a("a"),AGo=o("IBertForQuestionAnswering"),yGo=o(" (I-BERT model)"),LGo=l(),l5=a("li"),xge=a("strong"),xGo=o("layoutlmv2"),$Go=o(" \u2014 "),WO=a("a"),kGo=o("LayoutLMv2ForQuestionAnswering"),SGo=o(" (LayoutLMv2 model)"),RGo=l(),i5=a("li"),$ge=a("strong"),BGo=o("led"),PGo=o(" \u2014 "),HO=a("a"),IGo=o("LEDForQuestionAnswering"),qGo=o(" (LED model)"),NGo=l(),d5=a("li"),kge=a("strong"),jGo=o("longformer"),DGo=o(" \u2014 "),UO=a("a"),GGo=o("LongformerForQuestionAnswering"),OGo=o(" (Longformer model)"),VGo=l(),c5=a("li"),Sge=a("strong"),XGo=o("lxmert"),zGo=o(" \u2014 "),JO=a("a"),QGo=o("LxmertForQuestionAnswering"),WGo=o(" (LXMERT model)"),HGo=l(),f5=a("li"),Rge=a("strong"),UGo=o("mbart"),JGo=o(" \u2014 "),YO=a("a"),YGo=o("MBartForQuestionAnswering"),KGo=o(" (mBART model)"),ZGo=l(),m5=a("li"),Bge=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),KO=a("a"),rOo=o("MegatronBertForQuestionAnswering"),tOo=o(" (MegatronBert model)"),aOo=l(),g5=a("li"),Pge=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),ZO=a("a"),lOo=o("MobileBertForQuestionAnswering"),iOo=o(" (MobileBERT model)"),dOo=l(),h5=a("li"),Ige=a("strong"),cOo=o("mpnet"),fOo=o(" \u2014 "),eV=a("a"),mOo=o("MPNetForQuestionAnswering"),gOo=o(" (MPNet model)"),hOo=l(),p5=a("li"),qge=a("strong"),pOo=o("nystromformer"),uOo=o(" \u2014 "),oV=a("a"),_Oo=o("NystromformerForQuestionAnswering"),bOo=o(" (Nystromformer model)"),vOo=l(),u5=a("li"),Nge=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),rV=a("a"),MOo=o("QDQBertForQuestionAnswering"),EOo=o(" (QDQBert model)"),COo=l(),_5=a("li"),jge=a("strong"),wOo=o("reformer"),AOo=o(" \u2014 "),tV=a("a"),yOo=o("ReformerForQuestionAnswering"),LOo=o(" (Reformer model)"),xOo=l(),b5=a("li"),Dge=a("strong"),$Oo=o("rembert"),kOo=o(" \u2014 "),aV=a("a"),SOo=o("RemBertForQuestionAnswering"),ROo=o(" (RemBERT model)"),BOo=l(),v5=a("li"),Gge=a("strong"),POo=o("roberta"),IOo=o(" \u2014 "),nV=a("a"),qOo=o("RobertaForQuestionAnswering"),NOo=o(" (RoBERTa model)"),jOo=l(),F5=a("li"),Oge=a("strong"),DOo=o("roformer"),GOo=o(" \u2014 "),sV=a("a"),OOo=o("RoFormerForQuestionAnswering"),VOo=o(" (RoFormer model)"),XOo=l(),T5=a("li"),Vge=a("strong"),zOo=o("splinter"),QOo=o(" \u2014 "),lV=a("a"),WOo=o("SplinterForQuestionAnswering"),HOo=o(" (Splinter model)"),UOo=l(),M5=a("li"),Xge=a("strong"),JOo=o("squeezebert"),YOo=o(" \u2014 "),iV=a("a"),KOo=o("SqueezeBertForQuestionAnswering"),ZOo=o(" (SqueezeBERT model)"),eVo=l(),E5=a("li"),zge=a("strong"),oVo=o("xlm"),rVo=o(" \u2014 "),dV=a("a"),tVo=o("XLMForQuestionAnsweringSimple"),aVo=o(" (XLM model)"),nVo=l(),C5=a("li"),Qge=a("strong"),sVo=o("xlm-roberta"),lVo=o(" \u2014 "),cV=a("a"),iVo=o("XLMRobertaForQuestionAnswering"),dVo=o(" (XLM-RoBERTa model)"),cVo=l(),w5=a("li"),Wge=a("strong"),fVo=o("xlm-roberta-xl"),mVo=o(" \u2014 "),fV=a("a"),gVo=o("XLMRobertaXLForQuestionAnswering"),hVo=o(" (XLM-RoBERTa-XL model)"),pVo=l(),A5=a("li"),Hge=a("strong"),uVo=o("xlnet"),_Vo=o(" \u2014 "),mV=a("a"),bVo=o("XLNetForQuestionAnsweringSimple"),vVo=o(" (XLNet model)"),FVo=l(),y5=a("li"),Uge=a("strong"),TVo=o("yoso"),MVo=o(" \u2014 "),gV=a("a"),EVo=o("YosoForQuestionAnswering"),CVo=o(" (YOSO model)"),wVo=l(),L5=a("p"),AVo=o("The model is set in evaluation mode by default using "),Jge=a("code"),yVo=o("model.eval()"),LVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),xVo=o("model.train()"),$Vo=l(),F(x5.$$.fragment),MIe=l(),Yi=a("h2"),$5=a("a"),Kge=a("span"),F(vy.$$.fragment),kVo=l(),Zge=a("span"),SVo=o("AutoModelForTableQuestionAnswering"),EIe=l(),No=a("div"),F(Fy.$$.fragment),RVo=l(),Ki=a("p"),BVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hV=a("a"),PVo=o("from_pretrained()"),IVo=o(" class method or the "),pV=a("a"),qVo=o("from_config()"),NVo=o(` class
method.`),jVo=l(),Ty=a("p"),DVo=o("This class cannot be instantiated directly using "),ehe=a("code"),GVo=o("__init__()"),OVo=o(" (throws an error)."),VVo=l(),ft=a("div"),F(My.$$.fragment),XVo=l(),ohe=a("p"),zVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QVo=l(),Zi=a("p"),WVo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),HVo=o("not"),UVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),JVo=o("from_pretrained()"),YVo=o(" to load the model weights."),KVo=l(),F(k5.$$.fragment),ZVo=l(),ao=a("div"),F(Ey.$$.fragment),eXo=l(),the=a("p"),oXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rXo=l(),Ia=a("p"),tXo=o("The model class to instantiate is selected based on the "),ahe=a("code"),aXo=o("model_type"),nXo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),sXo=o("pretrained_model_name_or_path"),lXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),iXo=o("pretrained_model_name_or_path"),dXo=o(":"),cXo=l(),lhe=a("ul"),S5=a("li"),ihe=a("strong"),fXo=o("tapas"),mXo=o(" \u2014 "),_V=a("a"),gXo=o("TapasForQuestionAnswering"),hXo=o(" (TAPAS model)"),pXo=l(),R5=a("p"),uXo=o("The model is set in evaluation mode by default using "),dhe=a("code"),_Xo=o("model.eval()"),bXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),vXo=o("model.train()"),FXo=l(),F(B5.$$.fragment),CIe=l(),ed=a("h2"),P5=a("a"),fhe=a("span"),F(Cy.$$.fragment),TXo=l(),mhe=a("span"),MXo=o("AutoModelForImageClassification"),wIe=l(),jo=a("div"),F(wy.$$.fragment),EXo=l(),od=a("p"),CXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bV=a("a"),wXo=o("from_pretrained()"),AXo=o(" class method or the "),vV=a("a"),yXo=o("from_config()"),LXo=o(` class
method.`),xXo=l(),Ay=a("p"),$Xo=o("This class cannot be instantiated directly using "),ghe=a("code"),kXo=o("__init__()"),SXo=o(" (throws an error)."),RXo=l(),mt=a("div"),F(yy.$$.fragment),BXo=l(),hhe=a("p"),PXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IXo=l(),rd=a("p"),qXo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),NXo=o("not"),jXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),DXo=o("from_pretrained()"),GXo=o(" to load the model weights."),OXo=l(),F(I5.$$.fragment),VXo=l(),no=a("div"),F(Ly.$$.fragment),XXo=l(),uhe=a("p"),zXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QXo=l(),qa=a("p"),WXo=o("The model class to instantiate is selected based on the "),_he=a("code"),HXo=o("model_type"),UXo=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),JXo=o("pretrained_model_name_or_path"),YXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(":"),ezo=l(),Fe=a("ul"),q5=a("li"),Fhe=a("strong"),ozo=o("beit"),rzo=o(" \u2014 "),TV=a("a"),tzo=o("BeitForImageClassification"),azo=o(" (BEiT model)"),nzo=l(),N5=a("li"),The=a("strong"),szo=o("convnext"),lzo=o(" \u2014 "),MV=a("a"),izo=o("ConvNextForImageClassification"),dzo=o(" (ConvNext model)"),czo=l(),j5=a("li"),Mhe=a("strong"),fzo=o("data2vec-vision"),mzo=o(" \u2014 "),EV=a("a"),gzo=o("Data2VecVisionForImageClassification"),hzo=o(" (Data2VecVision model)"),pzo=l(),Rs=a("li"),Ehe=a("strong"),uzo=o("deit"),_zo=o(" \u2014 "),CV=a("a"),bzo=o("DeiTForImageClassification"),vzo=o(" or "),wV=a("a"),Fzo=o("DeiTForImageClassificationWithTeacher"),Tzo=o(" (DeiT model)"),Mzo=l(),D5=a("li"),Che=a("strong"),Ezo=o("imagegpt"),Czo=o(" \u2014 "),AV=a("a"),wzo=o("ImageGPTForImageClassification"),Azo=o(" (ImageGPT model)"),yzo=l(),gt=a("li"),whe=a("strong"),Lzo=o("perceiver"),xzo=o(" \u2014 "),yV=a("a"),$zo=o("PerceiverForImageClassificationLearned"),kzo=o(" or "),LV=a("a"),Szo=o("PerceiverForImageClassificationFourier"),Rzo=o(" or "),xV=a("a"),Bzo=o("PerceiverForImageClassificationConvProcessing"),Pzo=o(" (Perceiver model)"),Izo=l(),G5=a("li"),Ahe=a("strong"),qzo=o("poolformer"),Nzo=o(" \u2014 "),$V=a("a"),jzo=o("PoolFormerForImageClassification"),Dzo=o(" (PoolFormer model)"),Gzo=l(),O5=a("li"),yhe=a("strong"),Ozo=o("regnet"),Vzo=o(" \u2014 "),kV=a("a"),Xzo=o("RegNetForImageClassification"),zzo=o(" (RegNet model)"),Qzo=l(),V5=a("li"),Lhe=a("strong"),Wzo=o("resnet"),Hzo=o(" \u2014 "),SV=a("a"),Uzo=o("ResNetForImageClassification"),Jzo=o(" (ResNet model)"),Yzo=l(),X5=a("li"),xhe=a("strong"),Kzo=o("segformer"),Zzo=o(" \u2014 "),RV=a("a"),eQo=o("SegformerForImageClassification"),oQo=o(" (SegFormer model)"),rQo=l(),z5=a("li"),$he=a("strong"),tQo=o("swin"),aQo=o(" \u2014 "),BV=a("a"),nQo=o("SwinForImageClassification"),sQo=o(" (Swin model)"),lQo=l(),Q5=a("li"),khe=a("strong"),iQo=o("van"),dQo=o(" \u2014 "),PV=a("a"),cQo=o("VanForImageClassification"),fQo=o(" (VAN model)"),mQo=l(),W5=a("li"),She=a("strong"),gQo=o("vit"),hQo=o(" \u2014 "),IV=a("a"),pQo=o("ViTForImageClassification"),uQo=o(" (ViT model)"),_Qo=l(),H5=a("p"),bQo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),vQo=o("model.eval()"),FQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=a("code"),TQo=o("model.train()"),MQo=l(),F(U5.$$.fragment),AIe=l(),td=a("h2"),J5=a("a"),Phe=a("span"),F(xy.$$.fragment),EQo=l(),Ihe=a("span"),CQo=o("AutoModelForVision2Seq"),yIe=l(),Do=a("div"),F($y.$$.fragment),wQo=l(),ad=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qV=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),NV=a("a"),xQo=o("from_config()"),$Qo=o(` class
method.`),kQo=l(),ky=a("p"),SQo=o("This class cannot be instantiated directly using "),qhe=a("code"),RQo=o("__init__()"),BQo=o(" (throws an error)."),PQo=l(),ht=a("div"),F(Sy.$$.fragment),IQo=l(),Nhe=a("p"),qQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NQo=l(),nd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),F(Y5.$$.fragment),zQo=l(),so=a("div"),F(Ry.$$.fragment),QQo=l(),Dhe=a("p"),WQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HQo=l(),Na=a("p"),UQo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),JQo=o("model_type"),YQo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),Xhe=a("ul"),K5=a("li"),zhe=a("strong"),tWo=o("vision-encoder-decoder"),aWo=o(" \u2014 "),DV=a("a"),nWo=o("VisionEncoderDecoderModel"),sWo=o(" (Vision Encoder decoder model)"),lWo=l(),Z5=a("p"),iWo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),fWo=o("model.train()"),mWo=l(),F(ev.$$.fragment),LIe=l(),sd=a("h2"),ov=a("a"),Hhe=a("span"),F(By.$$.fragment),gWo=l(),Uhe=a("span"),hWo=o("AutoModelForAudioClassification"),xIe=l(),Go=a("div"),F(Py.$$.fragment),pWo=l(),ld=a("p"),uWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GV=a("a"),_Wo=o("from_pretrained()"),bWo=o(" class method or the "),OV=a("a"),vWo=o("from_config()"),FWo=o(` class
method.`),TWo=l(),Iy=a("p"),MWo=o("This class cannot be instantiated directly using "),Jhe=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),pt=a("div"),F(qy.$$.fragment),AWo=l(),Yhe=a("p"),yWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LWo=l(),id=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),$Wo=o("not"),kWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),SWo=o("from_pretrained()"),RWo=o(" to load the model weights."),BWo=l(),F(rv.$$.fragment),PWo=l(),lo=a("div"),F(Ny.$$.fragment),IWo=l(),Zhe=a("p"),qWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NWo=l(),ja=a("p"),jWo=o("The model class to instantiate is selected based on the "),epe=a("code"),DWo=o("model_type"),GWo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(":"),QWo=l(),Ne=a("ul"),tv=a("li"),tpe=a("strong"),WWo=o("data2vec-audio"),HWo=o(" \u2014 "),XV=a("a"),UWo=o("Data2VecAudioForSequenceClassification"),JWo=o(" (Data2VecAudio model)"),YWo=l(),av=a("li"),ape=a("strong"),KWo=o("hubert"),ZWo=o(" \u2014 "),zV=a("a"),eHo=o("HubertForSequenceClassification"),oHo=o(" (Hubert model)"),rHo=l(),nv=a("li"),npe=a("strong"),tHo=o("sew"),aHo=o(" \u2014 "),QV=a("a"),nHo=o("SEWForSequenceClassification"),sHo=o(" (SEW model)"),lHo=l(),sv=a("li"),spe=a("strong"),iHo=o("sew-d"),dHo=o(" \u2014 "),WV=a("a"),cHo=o("SEWDForSequenceClassification"),fHo=o(" (SEW-D model)"),mHo=l(),lv=a("li"),lpe=a("strong"),gHo=o("unispeech"),hHo=o(" \u2014 "),HV=a("a"),pHo=o("UniSpeechForSequenceClassification"),uHo=o(" (UniSpeech model)"),_Ho=l(),iv=a("li"),ipe=a("strong"),bHo=o("unispeech-sat"),vHo=o(" \u2014 "),UV=a("a"),FHo=o("UniSpeechSatForSequenceClassification"),THo=o(" (UniSpeechSat model)"),MHo=l(),dv=a("li"),dpe=a("strong"),EHo=o("wav2vec2"),CHo=o(" \u2014 "),JV=a("a"),wHo=o("Wav2Vec2ForSequenceClassification"),AHo=o(" (Wav2Vec2 model)"),yHo=l(),cv=a("li"),cpe=a("strong"),LHo=o("wavlm"),xHo=o(" \u2014 "),YV=a("a"),$Ho=o("WavLMForSequenceClassification"),kHo=o(" (WavLM model)"),SHo=l(),fv=a("p"),RHo=o("The model is set in evaluation mode by default using "),fpe=a("code"),BHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),IHo=o("model.train()"),qHo=l(),F(mv.$$.fragment),$Ie=l(),dd=a("h2"),gv=a("a"),gpe=a("span"),F(jy.$$.fragment),NHo=l(),hpe=a("span"),jHo=o("AutoModelForAudioFrameClassification"),kIe=l(),Oo=a("div"),F(Dy.$$.fragment),DHo=l(),cd=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KV=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),ZV=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),Gy=a("p"),WHo=o("This class cannot be instantiated directly using "),ppe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),ut=a("div"),F(Oy.$$.fragment),YHo=l(),upe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZHo=l(),fd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(hv.$$.fragment),sUo=l(),io=a("div"),F(Vy.$$.fragment),lUo=l(),bpe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dUo=l(),Da=a("p"),cUo=o("The model class to instantiate is selected based on the "),vpe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),pUo=o("pretrained_model_name_or_path"),uUo=o(":"),_Uo=l(),Ga=a("ul"),pv=a("li"),Mpe=a("strong"),bUo=o("data2vec-audio"),vUo=o(" \u2014 "),oX=a("a"),FUo=o("Data2VecAudioForAudioFrameClassification"),TUo=o(" (Data2VecAudio model)"),MUo=l(),uv=a("li"),Epe=a("strong"),EUo=o("unispeech-sat"),CUo=o(" \u2014 "),rX=a("a"),wUo=o("UniSpeechSatForAudioFrameClassification"),AUo=o(" (UniSpeechSat model)"),yUo=l(),_v=a("li"),Cpe=a("strong"),LUo=o("wav2vec2"),xUo=o(" \u2014 "),tX=a("a"),$Uo=o("Wav2Vec2ForAudioFrameClassification"),kUo=o(" (Wav2Vec2 model)"),SUo=l(),bv=a("li"),wpe=a("strong"),RUo=o("wavlm"),BUo=o(" \u2014 "),aX=a("a"),PUo=o("WavLMForAudioFrameClassification"),IUo=o(" (WavLM model)"),qUo=l(),vv=a("p"),NUo=o("The model is set in evaluation mode by default using "),Ape=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),GUo=o("model.train()"),OUo=l(),F(Fv.$$.fragment),SIe=l(),md=a("h2"),Tv=a("a"),Lpe=a("span"),F(Xy.$$.fragment),VUo=l(),xpe=a("span"),XUo=o("AutoModelForCTC"),RIe=l(),Vo=a("div"),F(zy.$$.fragment),zUo=l(),gd=a("p"),QUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nX=a("a"),WUo=o("from_pretrained()"),HUo=o(" class method or the "),sX=a("a"),UUo=o("from_config()"),JUo=o(` class
method.`),YUo=l(),Qy=a("p"),KUo=o("This class cannot be instantiated directly using "),$pe=a("code"),ZUo=o("__init__()"),eJo=o(" (throws an error)."),oJo=l(),_t=a("div"),F(Wy.$$.fragment),rJo=l(),kpe=a("p"),tJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aJo=l(),hd=a("p"),nJo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),sJo=o("not"),lJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),iJo=o("from_pretrained()"),dJo=o(" to load the model weights."),cJo=l(),F(Mv.$$.fragment),fJo=l(),co=a("div"),F(Hy.$$.fragment),mJo=l(),Rpe=a("p"),gJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hJo=l(),Oa=a("p"),pJo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),uJo=o("model_type"),_Jo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(":"),MJo=l(),je=a("ul"),Ev=a("li"),qpe=a("strong"),EJo=o("data2vec-audio"),CJo=o(" \u2014 "),iX=a("a"),wJo=o("Data2VecAudioForCTC"),AJo=o(" (Data2VecAudio model)"),yJo=l(),Cv=a("li"),Npe=a("strong"),LJo=o("hubert"),xJo=o(" \u2014 "),dX=a("a"),$Jo=o("HubertForCTC"),kJo=o(" (Hubert model)"),SJo=l(),wv=a("li"),jpe=a("strong"),RJo=o("sew"),BJo=o(" \u2014 "),cX=a("a"),PJo=o("SEWForCTC"),IJo=o(" (SEW model)"),qJo=l(),Av=a("li"),Dpe=a("strong"),NJo=o("sew-d"),jJo=o(" \u2014 "),fX=a("a"),DJo=o("SEWDForCTC"),GJo=o(" (SEW-D model)"),OJo=l(),yv=a("li"),Gpe=a("strong"),VJo=o("unispeech"),XJo=o(" \u2014 "),mX=a("a"),zJo=o("UniSpeechForCTC"),QJo=o(" (UniSpeech model)"),WJo=l(),Lv=a("li"),Ope=a("strong"),HJo=o("unispeech-sat"),UJo=o(" \u2014 "),gX=a("a"),JJo=o("UniSpeechSatForCTC"),YJo=o(" (UniSpeechSat model)"),KJo=l(),xv=a("li"),Vpe=a("strong"),ZJo=o("wav2vec2"),eYo=o(" \u2014 "),hX=a("a"),oYo=o("Wav2Vec2ForCTC"),rYo=o(" (Wav2Vec2 model)"),tYo=l(),$v=a("li"),Xpe=a("strong"),aYo=o("wavlm"),nYo=o(" \u2014 "),pX=a("a"),sYo=o("WavLMForCTC"),lYo=o(" (WavLM model)"),iYo=l(),kv=a("p"),dYo=o("The model is set in evaluation mode by default using "),zpe=a("code"),cYo=o("model.eval()"),fYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),mYo=o("model.train()"),gYo=l(),F(Sv.$$.fragment),BIe=l(),pd=a("h2"),Rv=a("a"),Wpe=a("span"),F(Uy.$$.fragment),hYo=l(),Hpe=a("span"),pYo=o("AutoModelForSpeechSeq2Seq"),PIe=l(),Xo=a("div"),F(Jy.$$.fragment),uYo=l(),ud=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uX=a("a"),bYo=o("from_pretrained()"),vYo=o(" class method or the "),_X=a("a"),FYo=o("from_config()"),TYo=o(` class
method.`),MYo=l(),Yy=a("p"),EYo=o("This class cannot be instantiated directly using "),Upe=a("code"),CYo=o("__init__()"),wYo=o(" (throws an error)."),AYo=l(),bt=a("div"),F(Ky.$$.fragment),yYo=l(),Jpe=a("p"),LYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xYo=l(),_d=a("p"),$Yo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),F(Bv.$$.fragment),IYo=l(),fo=a("div"),F(Zy.$$.fragment),qYo=l(),Kpe=a("p"),NYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jYo=l(),Va=a("p"),DYo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),GYo=o("model_type"),OYo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),zYo=o("pretrained_model_name_or_path"),QYo=o(":"),WYo=l(),eL=a("ul"),Pv=a("li"),rue=a("strong"),HYo=o("speech-encoder-decoder"),UYo=o(" \u2014 "),vX=a("a"),JYo=o("SpeechEncoderDecoderModel"),YYo=o(" (Speech Encoder decoder model)"),KYo=l(),Iv=a("li"),tue=a("strong"),ZYo=o("speech_to_text"),eKo=o(" \u2014 "),FX=a("a"),oKo=o("Speech2TextForConditionalGeneration"),rKo=o(" (Speech2Text model)"),tKo=l(),qv=a("p"),aKo=o("The model is set in evaluation mode by default using "),aue=a("code"),nKo=o("model.eval()"),sKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=a("code"),lKo=o("model.train()"),iKo=l(),F(Nv.$$.fragment),IIe=l(),bd=a("h2"),jv=a("a"),sue=a("span"),F(oL.$$.fragment),dKo=l(),lue=a("span"),cKo=o("AutoModelForAudioXVector"),qIe=l(),zo=a("div"),F(rL.$$.fragment),fKo=l(),vd=a("p"),mKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TX=a("a"),gKo=o("from_pretrained()"),hKo=o(" class method or the "),MX=a("a"),pKo=o("from_config()"),uKo=o(` class
method.`),_Ko=l(),tL=a("p"),bKo=o("This class cannot be instantiated directly using "),iue=a("code"),vKo=o("__init__()"),FKo=o(" (throws an error)."),TKo=l(),vt=a("div"),F(aL.$$.fragment),MKo=l(),due=a("p"),EKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CKo=l(),Fd=a("p"),wKo=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),AKo=o("not"),yKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),LKo=o("from_pretrained()"),xKo=o(" to load the model weights."),$Ko=l(),F(Dv.$$.fragment),kKo=l(),mo=a("div"),F(nL.$$.fragment),SKo=l(),fue=a("p"),RKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),BKo=l(),Xa=a("p"),PKo=o("The model class to instantiate is selected based on the "),mue=a("code"),IKo=o("model_type"),qKo=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),NKo=o("pretrained_model_name_or_path"),jKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(":"),OKo=l(),za=a("ul"),Gv=a("li"),pue=a("strong"),VKo=o("data2vec-audio"),XKo=o(" \u2014 "),CX=a("a"),zKo=o("Data2VecAudioForXVector"),QKo=o(" (Data2VecAudio model)"),WKo=l(),Ov=a("li"),uue=a("strong"),HKo=o("unispeech-sat"),UKo=o(" \u2014 "),wX=a("a"),JKo=o("UniSpeechSatForXVector"),YKo=o(" (UniSpeechSat model)"),KKo=l(),Vv=a("li"),_ue=a("strong"),ZKo=o("wav2vec2"),eZo=o(" \u2014 "),AX=a("a"),oZo=o("Wav2Vec2ForXVector"),rZo=o(" (Wav2Vec2 model)"),tZo=l(),Xv=a("li"),bue=a("strong"),aZo=o("wavlm"),nZo=o(" \u2014 "),yX=a("a"),sZo=o("WavLMForXVector"),lZo=o(" (WavLM model)"),iZo=l(),zv=a("p"),dZo=o("The model is set in evaluation mode by default using "),vue=a("code"),cZo=o("model.eval()"),fZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),mZo=o("model.train()"),gZo=l(),F(Qv.$$.fragment),NIe=l(),Td=a("h2"),Wv=a("a"),Tue=a("span"),F(sL.$$.fragment),hZo=l(),Mue=a("span"),pZo=o("AutoModelForMaskedImageModeling"),jIe=l(),Qo=a("div"),F(lL.$$.fragment),uZo=l(),Md=a("p"),_Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LX=a("a"),bZo=o("from_pretrained()"),vZo=o(" class method or the "),xX=a("a"),FZo=o("from_config()"),TZo=o(` class
method.`),MZo=l(),iL=a("p"),EZo=o("This class cannot be instantiated directly using "),Eue=a("code"),CZo=o("__init__()"),wZo=o(" (throws an error)."),AZo=l(),Ft=a("div"),F(dL.$$.fragment),yZo=l(),Cue=a("p"),LZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xZo=l(),Ed=a("p"),$Zo=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),kZo=o("not"),SZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),RZo=o("from_pretrained()"),BZo=o(" to load the model weights."),PZo=l(),F(Hv.$$.fragment),IZo=l(),go=a("div"),F(cL.$$.fragment),qZo=l(),Aue=a("p"),NZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jZo=l(),Qa=a("p"),DZo=o("The model class to instantiate is selected based on the "),yue=a("code"),GZo=o("model_type"),OZo=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),VZo=o("pretrained_model_name_or_path"),XZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),zZo=o("pretrained_model_name_or_path"),QZo=o(":"),WZo=l(),Cd=a("ul"),Uv=a("li"),$ue=a("strong"),HZo=o("deit"),UZo=o(" \u2014 "),kX=a("a"),JZo=o("DeiTForMaskedImageModeling"),YZo=o(" (DeiT model)"),KZo=l(),Jv=a("li"),kue=a("strong"),ZZo=o("swin"),eer=o(" \u2014 "),SX=a("a"),oer=o("SwinForMaskedImageModeling"),rer=o(" (Swin model)"),ter=l(),Yv=a("li"),Sue=a("strong"),aer=o("vit"),ner=o(" \u2014 "),RX=a("a"),ser=o("ViTForMaskedImageModeling"),ler=o(" (ViT model)"),ier=l(),Kv=a("p"),der=o("The model is set in evaluation mode by default using "),Rue=a("code"),cer=o("model.eval()"),fer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),mer=o("model.train()"),ger=l(),F(Zv.$$.fragment),DIe=l(),wd=a("h2"),eF=a("a"),Pue=a("span"),F(fL.$$.fragment),her=l(),Iue=a("span"),per=o("AutoModelForObjectDetection"),GIe=l(),Wo=a("div"),F(mL.$$.fragment),uer=l(),Ad=a("p"),_er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BX=a("a"),ber=o("from_pretrained()"),ver=o(" class method or the "),PX=a("a"),Fer=o("from_config()"),Ter=o(` class
method.`),Mer=l(),gL=a("p"),Eer=o("This class cannot be instantiated directly using "),que=a("code"),Cer=o("__init__()"),wer=o(" (throws an error)."),Aer=l(),Tt=a("div"),F(hL.$$.fragment),yer=l(),Nue=a("p"),Ler=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xer=l(),yd=a("p"),$er=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),ker=o("not"),Ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),Rer=o("from_pretrained()"),Ber=o(" to load the model weights."),Per=l(),F(oF.$$.fragment),Ier=l(),ho=a("div"),F(pL.$$.fragment),qer=l(),Due=a("p"),Ner=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jer=l(),Wa=a("p"),Der=o("The model class to instantiate is selected based on the "),Gue=a("code"),Ger=o("model_type"),Oer=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),zer=o("pretrained_model_name_or_path"),Qer=o(":"),Wer=l(),uL=a("ul"),rF=a("li"),Xue=a("strong"),Her=o("detr"),Uer=o(" \u2014 "),qX=a("a"),Jer=o("DetrForObjectDetection"),Yer=o(" (DETR model)"),Ker=l(),tF=a("li"),zue=a("strong"),Zer=o("yolos"),eor=o(" \u2014 "),NX=a("a"),oor=o("YolosForObjectDetection"),ror=o(" (YOLOS model)"),tor=l(),aF=a("p"),aor=o("The model is set in evaluation mode by default using "),Que=a("code"),nor=o("model.eval()"),sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),lor=o("model.train()"),ior=l(),F(nF.$$.fragment),OIe=l(),Ld=a("h2"),sF=a("a"),Hue=a("span"),F(_L.$$.fragment),dor=l(),Uue=a("span"),cor=o("AutoModelForImageSegmentation"),VIe=l(),Ho=a("div"),F(bL.$$.fragment),mor=l(),xd=a("p"),gor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jX=a("a"),hor=o("from_pretrained()"),por=o(" class method or the "),DX=a("a"),uor=o("from_config()"),_or=o(` class
method.`),bor=l(),vL=a("p"),vor=o("This class cannot be instantiated directly using "),Jue=a("code"),For=o("__init__()"),Tor=o(" (throws an error)."),Mor=l(),Mt=a("div"),F(FL.$$.fragment),Eor=l(),Yue=a("p"),Cor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),wor=l(),$d=a("p"),Aor=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),yor=o("not"),Lor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),xor=o("from_pretrained()"),$or=o(" to load the model weights."),kor=l(),F(lF.$$.fragment),Sor=l(),po=a("div"),F(TL.$$.fragment),Ror=l(),Zue=a("p"),Bor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Por=l(),Ha=a("p"),Ior=o("The model class to instantiate is selected based on the "),e_e=a("code"),qor=o("model_type"),Nor=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),jor=o("pretrained_model_name_or_path"),Dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(":"),Vor=l(),t_e=a("ul"),iF=a("li"),a_e=a("strong"),Xor=o("detr"),zor=o(" \u2014 "),OX=a("a"),Qor=o("DetrForSegmentation"),Wor=o(" (DETR model)"),Hor=l(),dF=a("p"),Uor=o("The model is set in evaluation mode by default using "),n_e=a("code"),Jor=o("model.eval()"),Yor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),Kor=o("model.train()"),Zor=l(),F(cF.$$.fragment),XIe=l(),kd=a("h2"),fF=a("a"),l_e=a("span"),F(ML.$$.fragment),err=l(),i_e=a("span"),orr=o("AutoModelForSemanticSegmentation"),zIe=l(),Uo=a("div"),F(EL.$$.fragment),rrr=l(),Sd=a("p"),trr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VX=a("a"),arr=o("from_pretrained()"),nrr=o(" class method or the "),XX=a("a"),srr=o("from_config()"),lrr=o(` class
method.`),irr=l(),CL=a("p"),drr=o("This class cannot be instantiated directly using "),d_e=a("code"),crr=o("__init__()"),frr=o(" (throws an error)."),mrr=l(),Et=a("div"),F(wL.$$.fragment),grr=l(),c_e=a("p"),hrr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),prr=l(),Rd=a("p"),urr=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),_rr=o("not"),brr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),vrr=o("from_pretrained()"),Frr=o(" to load the model weights."),Trr=l(),F(mF.$$.fragment),Mrr=l(),uo=a("div"),F(AL.$$.fragment),Err=l(),m_e=a("p"),Crr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wrr=l(),Ua=a("p"),Arr=o("The model class to instantiate is selected based on the "),g_e=a("code"),yrr=o("model_type"),Lrr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),xrr=o("pretrained_model_name_or_path"),$rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(":"),Rrr=l(),Ja=a("ul"),gF=a("li"),u_e=a("strong"),Brr=o("beit"),Prr=o(" \u2014 "),QX=a("a"),Irr=o("BeitForSemanticSegmentation"),qrr=o(" (BEiT model)"),Nrr=l(),hF=a("li"),__e=a("strong"),jrr=o("data2vec-vision"),Drr=o(" \u2014 "),WX=a("a"),Grr=o("Data2VecVisionForSemanticSegmentation"),Orr=o(" (Data2VecVision model)"),Vrr=l(),pF=a("li"),b_e=a("strong"),Xrr=o("dpt"),zrr=o(" \u2014 "),HX=a("a"),Qrr=o("DPTForSemanticSegmentation"),Wrr=o(" (DPT model)"),Hrr=l(),uF=a("li"),v_e=a("strong"),Urr=o("segformer"),Jrr=o(" \u2014 "),UX=a("a"),Yrr=o("SegformerForSemanticSegmentation"),Krr=o(" (SegFormer model)"),Zrr=l(),_F=a("p"),etr=o("The model is set in evaluation mode by default using "),F_e=a("code"),otr=o("model.eval()"),rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),ttr=o("model.train()"),atr=l(),F(bF.$$.fragment),QIe=l(),Bd=a("h2"),vF=a("a"),M_e=a("span"),F(yL.$$.fragment),ntr=l(),E_e=a("span"),str=o("AutoModelForInstanceSegmentation"),WIe=l(),Jo=a("div"),F(LL.$$.fragment),ltr=l(),Pd=a("p"),itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JX=a("a"),dtr=o("from_pretrained()"),ctr=o(" class method or the "),YX=a("a"),ftr=o("from_config()"),mtr=o(` class
method.`),gtr=l(),xL=a("p"),htr=o("This class cannot be instantiated directly using "),C_e=a("code"),ptr=o("__init__()"),utr=o(" (throws an error)."),_tr=l(),Ct=a("div"),F($L.$$.fragment),btr=l(),w_e=a("p"),vtr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ftr=l(),Id=a("p"),Ttr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),Mtr=o("not"),Etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),Ctr=o("from_pretrained()"),wtr=o(" to load the model weights."),Atr=l(),F(FF.$$.fragment),ytr=l(),_o=a("div"),F(kL.$$.fragment),Ltr=l(),y_e=a("p"),xtr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$tr=l(),Ya=a("p"),ktr=o("The model class to instantiate is selected based on the "),L_e=a("code"),Str=o("model_type"),Rtr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),Btr=o("pretrained_model_name_or_path"),Ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),Itr=o("pretrained_model_name_or_path"),qtr=o(":"),Ntr=l(),k_e=a("ul"),TF=a("li"),S_e=a("strong"),jtr=o("maskformer"),Dtr=o(" \u2014 "),ZX=a("a"),Gtr=o("MaskFormerForInstanceSegmentation"),Otr=o(" (MaskFormer model)"),Vtr=l(),MF=a("p"),Xtr=o("The model is set in evaluation mode by default using "),R_e=a("code"),ztr=o("model.eval()"),Qtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=a("code"),Wtr=o("model.train()"),Htr=l(),F(EF.$$.fragment),HIe=l(),qd=a("h2"),CF=a("a"),P_e=a("span"),F(SL.$$.fragment),Utr=l(),I_e=a("span"),Jtr=o("TFAutoModel"),UIe=l(),Yo=a("div"),F(RL.$$.fragment),Ytr=l(),Nd=a("p"),Ktr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ez=a("a"),Ztr=o("from_pretrained()"),ear=o(" class method or the "),oz=a("a"),oar=o("from_config()"),rar=o(` class
method.`),tar=l(),BL=a("p"),aar=o("This class cannot be instantiated directly using "),q_e=a("code"),nar=o("__init__()"),sar=o(" (throws an error)."),lar=l(),wt=a("div"),F(PL.$$.fragment),iar=l(),N_e=a("p"),dar=o("Instantiates one of the base model classes of the library from a configuration."),car=l(),jd=a("p"),far=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),mar=o("not"),gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),har=o("from_pretrained()"),par=o(" to load the model weights."),uar=l(),F(wF.$$.fragment),_ar=l(),wr=a("div"),F(IL.$$.fragment),bar=l(),D_e=a("p"),Far=o("Instantiate one of the base model classes of the library from a pretrained model."),Tar=l(),Ka=a("p"),Mar=o("The model class to instantiate is selected based on the "),G_e=a("code"),Ear=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),yar=o("pretrained_model_name_or_path"),Lar=o(":"),xar=l(),j=a("ul"),AF=a("li"),X_e=a("strong"),$ar=o("albert"),kar=o(" \u2014 "),tz=a("a"),Sar=o("TFAlbertModel"),Rar=o(" (ALBERT model)"),Bar=l(),yF=a("li"),z_e=a("strong"),Par=o("bart"),Iar=o(" \u2014 "),az=a("a"),qar=o("TFBartModel"),Nar=o(" (BART model)"),jar=l(),LF=a("li"),Q_e=a("strong"),Dar=o("bert"),Gar=o(" \u2014 "),nz=a("a"),Oar=o("TFBertModel"),Var=o(" (BERT model)"),Xar=l(),xF=a("li"),W_e=a("strong"),zar=o("blenderbot"),Qar=o(" \u2014 "),sz=a("a"),War=o("TFBlenderbotModel"),Har=o(" (Blenderbot model)"),Uar=l(),$F=a("li"),H_e=a("strong"),Jar=o("blenderbot-small"),Yar=o(" \u2014 "),lz=a("a"),Kar=o("TFBlenderbotSmallModel"),Zar=o(" (BlenderbotSmall model)"),enr=l(),kF=a("li"),U_e=a("strong"),onr=o("camembert"),rnr=o(" \u2014 "),iz=a("a"),tnr=o("TFCamembertModel"),anr=o(" (CamemBERT model)"),nnr=l(),SF=a("li"),J_e=a("strong"),snr=o("clip"),lnr=o(" \u2014 "),dz=a("a"),inr=o("TFCLIPModel"),dnr=o(" (CLIP model)"),cnr=l(),RF=a("li"),Y_e=a("strong"),fnr=o("convbert"),mnr=o(" \u2014 "),cz=a("a"),gnr=o("TFConvBertModel"),hnr=o(" (ConvBERT model)"),pnr=l(),BF=a("li"),K_e=a("strong"),unr=o("convnext"),_nr=o(" \u2014 "),fz=a("a"),bnr=o("TFConvNextModel"),vnr=o(" (ConvNext model)"),Fnr=l(),PF=a("li"),Z_e=a("strong"),Tnr=o("ctrl"),Mnr=o(" \u2014 "),mz=a("a"),Enr=o("TFCTRLModel"),Cnr=o(" (CTRL model)"),wnr=l(),IF=a("li"),e1e=a("strong"),Anr=o("data2vec-vision"),ynr=o(" \u2014 "),gz=a("a"),Lnr=o("TFData2VecVisionModel"),xnr=o(" (Data2VecVision model)"),$nr=l(),qF=a("li"),o1e=a("strong"),knr=o("deberta"),Snr=o(" \u2014 "),hz=a("a"),Rnr=o("TFDebertaModel"),Bnr=o(" (DeBERTa model)"),Pnr=l(),NF=a("li"),r1e=a("strong"),Inr=o("deberta-v2"),qnr=o(" \u2014 "),pz=a("a"),Nnr=o("TFDebertaV2Model"),jnr=o(" (DeBERTa-v2 model)"),Dnr=l(),jF=a("li"),t1e=a("strong"),Gnr=o("distilbert"),Onr=o(" \u2014 "),uz=a("a"),Vnr=o("TFDistilBertModel"),Xnr=o(" (DistilBERT model)"),znr=l(),DF=a("li"),a1e=a("strong"),Qnr=o("dpr"),Wnr=o(" \u2014 "),_z=a("a"),Hnr=o("TFDPRQuestionEncoder"),Unr=o(" (DPR model)"),Jnr=l(),GF=a("li"),n1e=a("strong"),Ynr=o("electra"),Knr=o(" \u2014 "),bz=a("a"),Znr=o("TFElectraModel"),esr=o(" (ELECTRA model)"),osr=l(),OF=a("li"),s1e=a("strong"),rsr=o("flaubert"),tsr=o(" \u2014 "),vz=a("a"),asr=o("TFFlaubertModel"),nsr=o(" (FlauBERT model)"),ssr=l(),Bs=a("li"),l1e=a("strong"),lsr=o("funnel"),isr=o(" \u2014 "),Fz=a("a"),dsr=o("TFFunnelModel"),csr=o(" or "),Tz=a("a"),fsr=o("TFFunnelBaseModel"),msr=o(" (Funnel Transformer model)"),gsr=l(),VF=a("li"),i1e=a("strong"),hsr=o("gpt2"),psr=o(" \u2014 "),Mz=a("a"),usr=o("TFGPT2Model"),_sr=o(" (OpenAI GPT-2 model)"),bsr=l(),XF=a("li"),d1e=a("strong"),vsr=o("gptj"),Fsr=o(" \u2014 "),Ez=a("a"),Tsr=o("TFGPTJModel"),Msr=o(" (GPT-J model)"),Esr=l(),zF=a("li"),c1e=a("strong"),Csr=o("hubert"),wsr=o(" \u2014 "),Cz=a("a"),Asr=o("TFHubertModel"),ysr=o(" (Hubert model)"),Lsr=l(),QF=a("li"),f1e=a("strong"),xsr=o("layoutlm"),$sr=o(" \u2014 "),wz=a("a"),ksr=o("TFLayoutLMModel"),Ssr=o(" (LayoutLM model)"),Rsr=l(),WF=a("li"),m1e=a("strong"),Bsr=o("led"),Psr=o(" \u2014 "),Az=a("a"),Isr=o("TFLEDModel"),qsr=o(" (LED model)"),Nsr=l(),HF=a("li"),g1e=a("strong"),jsr=o("longformer"),Dsr=o(" \u2014 "),yz=a("a"),Gsr=o("TFLongformerModel"),Osr=o(" (Longformer model)"),Vsr=l(),UF=a("li"),h1e=a("strong"),Xsr=o("lxmert"),zsr=o(" \u2014 "),Lz=a("a"),Qsr=o("TFLxmertModel"),Wsr=o(" (LXMERT model)"),Hsr=l(),JF=a("li"),p1e=a("strong"),Usr=o("marian"),Jsr=o(" \u2014 "),xz=a("a"),Ysr=o("TFMarianModel"),Ksr=o(" (Marian model)"),Zsr=l(),YF=a("li"),u1e=a("strong"),elr=o("mbart"),olr=o(" \u2014 "),$z=a("a"),rlr=o("TFMBartModel"),tlr=o(" (mBART model)"),alr=l(),KF=a("li"),_1e=a("strong"),nlr=o("mobilebert"),slr=o(" \u2014 "),kz=a("a"),llr=o("TFMobileBertModel"),ilr=o(" (MobileBERT model)"),dlr=l(),ZF=a("li"),b1e=a("strong"),clr=o("mpnet"),flr=o(" \u2014 "),Sz=a("a"),mlr=o("TFMPNetModel"),glr=o(" (MPNet model)"),hlr=l(),e0=a("li"),v1e=a("strong"),plr=o("mt5"),ulr=o(" \u2014 "),Rz=a("a"),_lr=o("TFMT5Model"),blr=o(" (mT5 model)"),vlr=l(),o0=a("li"),F1e=a("strong"),Flr=o("openai-gpt"),Tlr=o(" \u2014 "),Bz=a("a"),Mlr=o("TFOpenAIGPTModel"),Elr=o(" (OpenAI GPT model)"),Clr=l(),r0=a("li"),T1e=a("strong"),wlr=o("pegasus"),Alr=o(" \u2014 "),Pz=a("a"),ylr=o("TFPegasusModel"),Llr=o(" (Pegasus model)"),xlr=l(),t0=a("li"),M1e=a("strong"),$lr=o("rembert"),klr=o(" \u2014 "),Iz=a("a"),Slr=o("TFRemBertModel"),Rlr=o(" (RemBERT model)"),Blr=l(),a0=a("li"),E1e=a("strong"),Plr=o("roberta"),Ilr=o(" \u2014 "),qz=a("a"),qlr=o("TFRobertaModel"),Nlr=o(" (RoBERTa model)"),jlr=l(),n0=a("li"),C1e=a("strong"),Dlr=o("roformer"),Glr=o(" \u2014 "),Nz=a("a"),Olr=o("TFRoFormerModel"),Vlr=o(" (RoFormer model)"),Xlr=l(),s0=a("li"),w1e=a("strong"),zlr=o("speech_to_text"),Qlr=o(" \u2014 "),jz=a("a"),Wlr=o("TFSpeech2TextModel"),Hlr=o(" (Speech2Text model)"),Ulr=l(),l0=a("li"),A1e=a("strong"),Jlr=o("t5"),Ylr=o(" \u2014 "),Dz=a("a"),Klr=o("TFT5Model"),Zlr=o(" (T5 model)"),eir=l(),i0=a("li"),y1e=a("strong"),oir=o("tapas"),rir=o(" \u2014 "),Gz=a("a"),tir=o("TFTapasModel"),air=o(" (TAPAS model)"),nir=l(),d0=a("li"),L1e=a("strong"),sir=o("transfo-xl"),lir=o(" \u2014 "),Oz=a("a"),iir=o("TFTransfoXLModel"),dir=o(" (Transformer-XL model)"),cir=l(),c0=a("li"),x1e=a("strong"),fir=o("vit"),mir=o(" \u2014 "),Vz=a("a"),gir=o("TFViTModel"),hir=o(" (ViT model)"),pir=l(),f0=a("li"),$1e=a("strong"),uir=o("vit_mae"),_ir=o(" \u2014 "),Xz=a("a"),bir=o("TFViTMAEModel"),vir=o(" (ViTMAE model)"),Fir=l(),m0=a("li"),k1e=a("strong"),Tir=o("wav2vec2"),Mir=o(" \u2014 "),zz=a("a"),Eir=o("TFWav2Vec2Model"),Cir=o(" (Wav2Vec2 model)"),wir=l(),g0=a("li"),S1e=a("strong"),Air=o("xlm"),yir=o(" \u2014 "),Qz=a("a"),Lir=o("TFXLMModel"),xir=o(" (XLM model)"),$ir=l(),h0=a("li"),R1e=a("strong"),kir=o("xlm-roberta"),Sir=o(" \u2014 "),Wz=a("a"),Rir=o("TFXLMRobertaModel"),Bir=o(" (XLM-RoBERTa model)"),Pir=l(),p0=a("li"),B1e=a("strong"),Iir=o("xlnet"),qir=o(" \u2014 "),Hz=a("a"),Nir=o("TFXLNetModel"),jir=o(" (XLNet model)"),Dir=l(),F(u0.$$.fragment),JIe=l(),Dd=a("h2"),_0=a("a"),P1e=a("span"),F(qL.$$.fragment),Gir=l(),I1e=a("span"),Oir=o("TFAutoModelForPreTraining"),YIe=l(),Ko=a("div"),F(NL.$$.fragment),Vir=l(),Gd=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uz=a("a"),zir=o("from_pretrained()"),Qir=o(" class method or the "),Jz=a("a"),Wir=o("from_config()"),Hir=o(` class
method.`),Uir=l(),jL=a("p"),Jir=o("This class cannot be instantiated directly using "),q1e=a("code"),Yir=o("__init__()"),Kir=o(" (throws an error)."),Zir=l(),At=a("div"),F(DL.$$.fragment),edr=l(),N1e=a("p"),odr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rdr=l(),Od=a("p"),tdr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),adr=o("not"),ndr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),sdr=o("from_pretrained()"),ldr=o(" to load the model weights."),idr=l(),F(b0.$$.fragment),ddr=l(),Ar=a("div"),F(GL.$$.fragment),cdr=l(),D1e=a("p"),fdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mdr=l(),Za=a("p"),gdr=o("The model class to instantiate is selected based on the "),G1e=a("code"),hdr=o("model_type"),pdr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),udr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),bdr=o("pretrained_model_name_or_path"),vdr=o(":"),Fdr=l(),se=a("ul"),v0=a("li"),X1e=a("strong"),Tdr=o("albert"),Mdr=o(" \u2014 "),Kz=a("a"),Edr=o("TFAlbertForPreTraining"),Cdr=o(" (ALBERT model)"),wdr=l(),F0=a("li"),z1e=a("strong"),Adr=o("bart"),ydr=o(" \u2014 "),Zz=a("a"),Ldr=o("TFBartForConditionalGeneration"),xdr=o(" (BART model)"),$dr=l(),T0=a("li"),Q1e=a("strong"),kdr=o("bert"),Sdr=o(" \u2014 "),eQ=a("a"),Rdr=o("TFBertForPreTraining"),Bdr=o(" (BERT model)"),Pdr=l(),M0=a("li"),W1e=a("strong"),Idr=o("camembert"),qdr=o(" \u2014 "),oQ=a("a"),Ndr=o("TFCamembertForMaskedLM"),jdr=o(" (CamemBERT model)"),Ddr=l(),E0=a("li"),H1e=a("strong"),Gdr=o("ctrl"),Odr=o(" \u2014 "),rQ=a("a"),Vdr=o("TFCTRLLMHeadModel"),Xdr=o(" (CTRL model)"),zdr=l(),C0=a("li"),U1e=a("strong"),Qdr=o("distilbert"),Wdr=o(" \u2014 "),tQ=a("a"),Hdr=o("TFDistilBertForMaskedLM"),Udr=o(" (DistilBERT model)"),Jdr=l(),w0=a("li"),J1e=a("strong"),Ydr=o("electra"),Kdr=o(" \u2014 "),aQ=a("a"),Zdr=o("TFElectraForPreTraining"),ecr=o(" (ELECTRA model)"),ocr=l(),A0=a("li"),Y1e=a("strong"),rcr=o("flaubert"),tcr=o(" \u2014 "),nQ=a("a"),acr=o("TFFlaubertWithLMHeadModel"),ncr=o(" (FlauBERT model)"),scr=l(),y0=a("li"),K1e=a("strong"),lcr=o("funnel"),icr=o(" \u2014 "),sQ=a("a"),dcr=o("TFFunnelForPreTraining"),ccr=o(" (Funnel Transformer model)"),fcr=l(),L0=a("li"),Z1e=a("strong"),mcr=o("gpt2"),gcr=o(" \u2014 "),lQ=a("a"),hcr=o("TFGPT2LMHeadModel"),pcr=o(" (OpenAI GPT-2 model)"),ucr=l(),x0=a("li"),e7e=a("strong"),_cr=o("layoutlm"),bcr=o(" \u2014 "),iQ=a("a"),vcr=o("TFLayoutLMForMaskedLM"),Fcr=o(" (LayoutLM model)"),Tcr=l(),$0=a("li"),o7e=a("strong"),Mcr=o("lxmert"),Ecr=o(" \u2014 "),dQ=a("a"),Ccr=o("TFLxmertForPreTraining"),wcr=o(" (LXMERT model)"),Acr=l(),k0=a("li"),r7e=a("strong"),ycr=o("mobilebert"),Lcr=o(" \u2014 "),cQ=a("a"),xcr=o("TFMobileBertForPreTraining"),$cr=o(" (MobileBERT model)"),kcr=l(),S0=a("li"),t7e=a("strong"),Scr=o("mpnet"),Rcr=o(" \u2014 "),fQ=a("a"),Bcr=o("TFMPNetForMaskedLM"),Pcr=o(" (MPNet model)"),Icr=l(),R0=a("li"),a7e=a("strong"),qcr=o("openai-gpt"),Ncr=o(" \u2014 "),mQ=a("a"),jcr=o("TFOpenAIGPTLMHeadModel"),Dcr=o(" (OpenAI GPT model)"),Gcr=l(),B0=a("li"),n7e=a("strong"),Ocr=o("roberta"),Vcr=o(" \u2014 "),gQ=a("a"),Xcr=o("TFRobertaForMaskedLM"),zcr=o(" (RoBERTa model)"),Qcr=l(),P0=a("li"),s7e=a("strong"),Wcr=o("t5"),Hcr=o(" \u2014 "),hQ=a("a"),Ucr=o("TFT5ForConditionalGeneration"),Jcr=o(" (T5 model)"),Ycr=l(),I0=a("li"),l7e=a("strong"),Kcr=o("tapas"),Zcr=o(" \u2014 "),pQ=a("a"),efr=o("TFTapasForMaskedLM"),ofr=o(" (TAPAS model)"),rfr=l(),q0=a("li"),i7e=a("strong"),tfr=o("transfo-xl"),afr=o(" \u2014 "),uQ=a("a"),nfr=o("TFTransfoXLLMHeadModel"),sfr=o(" (Transformer-XL model)"),lfr=l(),N0=a("li"),d7e=a("strong"),ifr=o("vit_mae"),dfr=o(" \u2014 "),_Q=a("a"),cfr=o("TFViTMAEForPreTraining"),ffr=o(" (ViTMAE model)"),mfr=l(),j0=a("li"),c7e=a("strong"),gfr=o("xlm"),hfr=o(" \u2014 "),bQ=a("a"),pfr=o("TFXLMWithLMHeadModel"),ufr=o(" (XLM model)"),_fr=l(),D0=a("li"),f7e=a("strong"),bfr=o("xlm-roberta"),vfr=o(" \u2014 "),vQ=a("a"),Ffr=o("TFXLMRobertaForMaskedLM"),Tfr=o(" (XLM-RoBERTa model)"),Mfr=l(),G0=a("li"),m7e=a("strong"),Efr=o("xlnet"),Cfr=o(" \u2014 "),FQ=a("a"),wfr=o("TFXLNetLMHeadModel"),Afr=o(" (XLNet model)"),yfr=l(),F(O0.$$.fragment),KIe=l(),Vd=a("h2"),V0=a("a"),g7e=a("span"),F(OL.$$.fragment),Lfr=l(),h7e=a("span"),xfr=o("TFAutoModelForCausalLM"),ZIe=l(),Zo=a("div"),F(VL.$$.fragment),$fr=l(),Xd=a("p"),kfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TQ=a("a"),Sfr=o("from_pretrained()"),Rfr=o(" class method or the "),MQ=a("a"),Bfr=o("from_config()"),Pfr=o(` class
method.`),Ifr=l(),XL=a("p"),qfr=o("This class cannot be instantiated directly using "),p7e=a("code"),Nfr=o("__init__()"),jfr=o(" (throws an error)."),Dfr=l(),yt=a("div"),F(zL.$$.fragment),Gfr=l(),u7e=a("p"),Ofr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vfr=l(),zd=a("p"),Xfr=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),zfr=o("not"),Qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),Wfr=o("from_pretrained()"),Hfr=o(" to load the model weights."),Ufr=l(),F(X0.$$.fragment),Jfr=l(),yr=a("div"),F(QL.$$.fragment),Yfr=l(),b7e=a("p"),Kfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zfr=l(),en=a("p"),emr=o("The model class to instantiate is selected based on the "),v7e=a("code"),omr=o("model_type"),rmr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),tmr=o("pretrained_model_name_or_path"),amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(":"),lmr=l(),Te=a("ul"),z0=a("li"),M7e=a("strong"),imr=o("bert"),dmr=o(" \u2014 "),CQ=a("a"),cmr=o("TFBertLMHeadModel"),fmr=o(" (BERT model)"),mmr=l(),Q0=a("li"),E7e=a("strong"),gmr=o("camembert"),hmr=o(" \u2014 "),wQ=a("a"),pmr=o("TFCamembertForCausalLM"),umr=o(" (CamemBERT model)"),_mr=l(),W0=a("li"),C7e=a("strong"),bmr=o("ctrl"),vmr=o(" \u2014 "),AQ=a("a"),Fmr=o("TFCTRLLMHeadModel"),Tmr=o(" (CTRL model)"),Mmr=l(),H0=a("li"),w7e=a("strong"),Emr=o("gpt2"),Cmr=o(" \u2014 "),yQ=a("a"),wmr=o("TFGPT2LMHeadModel"),Amr=o(" (OpenAI GPT-2 model)"),ymr=l(),U0=a("li"),A7e=a("strong"),Lmr=o("gptj"),xmr=o(" \u2014 "),LQ=a("a"),$mr=o("TFGPTJForCausalLM"),kmr=o(" (GPT-J model)"),Smr=l(),J0=a("li"),y7e=a("strong"),Rmr=o("openai-gpt"),Bmr=o(" \u2014 "),xQ=a("a"),Pmr=o("TFOpenAIGPTLMHeadModel"),Imr=o(" (OpenAI GPT model)"),qmr=l(),Y0=a("li"),L7e=a("strong"),Nmr=o("rembert"),jmr=o(" \u2014 "),$Q=a("a"),Dmr=o("TFRemBertForCausalLM"),Gmr=o(" (RemBERT model)"),Omr=l(),K0=a("li"),x7e=a("strong"),Vmr=o("roberta"),Xmr=o(" \u2014 "),kQ=a("a"),zmr=o("TFRobertaForCausalLM"),Qmr=o(" (RoBERTa model)"),Wmr=l(),Z0=a("li"),$7e=a("strong"),Hmr=o("roformer"),Umr=o(" \u2014 "),SQ=a("a"),Jmr=o("TFRoFormerForCausalLM"),Ymr=o(" (RoFormer model)"),Kmr=l(),eT=a("li"),k7e=a("strong"),Zmr=o("transfo-xl"),egr=o(" \u2014 "),RQ=a("a"),ogr=o("TFTransfoXLLMHeadModel"),rgr=o(" (Transformer-XL model)"),tgr=l(),oT=a("li"),S7e=a("strong"),agr=o("xlm"),ngr=o(" \u2014 "),BQ=a("a"),sgr=o("TFXLMWithLMHeadModel"),lgr=o(" (XLM model)"),igr=l(),rT=a("li"),R7e=a("strong"),dgr=o("xlnet"),cgr=o(" \u2014 "),PQ=a("a"),fgr=o("TFXLNetLMHeadModel"),mgr=o(" (XLNet model)"),ggr=l(),F(tT.$$.fragment),eqe=l(),Qd=a("h2"),aT=a("a"),B7e=a("span"),F(WL.$$.fragment),hgr=l(),P7e=a("span"),pgr=o("TFAutoModelForImageClassification"),oqe=l(),er=a("div"),F(HL.$$.fragment),ugr=l(),Wd=a("p"),_gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=a("a"),bgr=o("from_pretrained()"),vgr=o(" class method or the "),qQ=a("a"),Fgr=o("from_config()"),Tgr=o(` class
method.`),Mgr=l(),UL=a("p"),Egr=o("This class cannot be instantiated directly using "),I7e=a("code"),Cgr=o("__init__()"),wgr=o(" (throws an error)."),Agr=l(),Lt=a("div"),F(JL.$$.fragment),ygr=l(),q7e=a("p"),Lgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xgr=l(),Hd=a("p"),$gr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),kgr=o("not"),Sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),Rgr=o("from_pretrained()"),Bgr=o(" to load the model weights."),Pgr=l(),F(nT.$$.fragment),Igr=l(),Lr=a("div"),F(YL.$$.fragment),qgr=l(),j7e=a("p"),Ngr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jgr=l(),on=a("p"),Dgr=o("The model class to instantiate is selected based on the "),D7e=a("code"),Ggr=o("model_type"),Ogr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),zgr=o("pretrained_model_name_or_path"),Qgr=o(":"),Wgr=l(),Ud=a("ul"),sT=a("li"),V7e=a("strong"),Hgr=o("convnext"),Ugr=o(" \u2014 "),jQ=a("a"),Jgr=o("TFConvNextForImageClassification"),Ygr=o(" (ConvNext model)"),Kgr=l(),lT=a("li"),X7e=a("strong"),Zgr=o("data2vec-vision"),ehr=o(" \u2014 "),DQ=a("a"),ohr=o("TFData2VecVisionForImageClassification"),rhr=o(" (Data2VecVision model)"),thr=l(),iT=a("li"),z7e=a("strong"),ahr=o("vit"),nhr=o(" \u2014 "),GQ=a("a"),shr=o("TFViTForImageClassification"),lhr=o(" (ViT model)"),ihr=l(),F(dT.$$.fragment),rqe=l(),Jd=a("h2"),cT=a("a"),Q7e=a("span"),F(KL.$$.fragment),dhr=l(),W7e=a("span"),chr=o("TFAutoModelForMaskedLM"),tqe=l(),or=a("div"),F(ZL.$$.fragment),fhr=l(),Yd=a("p"),mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OQ=a("a"),ghr=o("from_pretrained()"),hhr=o(" class method or the "),VQ=a("a"),phr=o("from_config()"),uhr=o(` class
method.`),_hr=l(),e8=a("p"),bhr=o("This class cannot be instantiated directly using "),H7e=a("code"),vhr=o("__init__()"),Fhr=o(" (throws an error)."),Thr=l(),xt=a("div"),F(o8.$$.fragment),Mhr=l(),U7e=a("p"),Ehr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Chr=l(),Kd=a("p"),whr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),Ahr=o("not"),yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Lhr=o("from_pretrained()"),xhr=o(" to load the model weights."),$hr=l(),F(fT.$$.fragment),khr=l(),xr=a("div"),F(r8.$$.fragment),Shr=l(),Y7e=a("p"),Rhr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bhr=l(),rn=a("p"),Phr=o("The model class to instantiate is selected based on the "),K7e=a("code"),Ihr=o("model_type"),qhr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),Nhr=o("pretrained_model_name_or_path"),jhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),Dhr=o("pretrained_model_name_or_path"),Ghr=o(":"),Ohr=l(),ie=a("ul"),mT=a("li"),obe=a("strong"),Vhr=o("albert"),Xhr=o(" \u2014 "),zQ=a("a"),zhr=o("TFAlbertForMaskedLM"),Qhr=o(" (ALBERT model)"),Whr=l(),gT=a("li"),rbe=a("strong"),Hhr=o("bert"),Uhr=o(" \u2014 "),QQ=a("a"),Jhr=o("TFBertForMaskedLM"),Yhr=o(" (BERT model)"),Khr=l(),hT=a("li"),tbe=a("strong"),Zhr=o("camembert"),epr=o(" \u2014 "),WQ=a("a"),opr=o("TFCamembertForMaskedLM"),rpr=o(" (CamemBERT model)"),tpr=l(),pT=a("li"),abe=a("strong"),apr=o("convbert"),npr=o(" \u2014 "),HQ=a("a"),spr=o("TFConvBertForMaskedLM"),lpr=o(" (ConvBERT model)"),ipr=l(),uT=a("li"),nbe=a("strong"),dpr=o("deberta"),cpr=o(" \u2014 "),UQ=a("a"),fpr=o("TFDebertaForMaskedLM"),mpr=o(" (DeBERTa model)"),gpr=l(),_T=a("li"),sbe=a("strong"),hpr=o("deberta-v2"),ppr=o(" \u2014 "),JQ=a("a"),upr=o("TFDebertaV2ForMaskedLM"),_pr=o(" (DeBERTa-v2 model)"),bpr=l(),bT=a("li"),lbe=a("strong"),vpr=o("distilbert"),Fpr=o(" \u2014 "),YQ=a("a"),Tpr=o("TFDistilBertForMaskedLM"),Mpr=o(" (DistilBERT model)"),Epr=l(),vT=a("li"),ibe=a("strong"),Cpr=o("electra"),wpr=o(" \u2014 "),KQ=a("a"),Apr=o("TFElectraForMaskedLM"),ypr=o(" (ELECTRA model)"),Lpr=l(),FT=a("li"),dbe=a("strong"),xpr=o("flaubert"),$pr=o(" \u2014 "),ZQ=a("a"),kpr=o("TFFlaubertWithLMHeadModel"),Spr=o(" (FlauBERT model)"),Rpr=l(),TT=a("li"),cbe=a("strong"),Bpr=o("funnel"),Ppr=o(" \u2014 "),eW=a("a"),Ipr=o("TFFunnelForMaskedLM"),qpr=o(" (Funnel Transformer model)"),Npr=l(),MT=a("li"),fbe=a("strong"),jpr=o("layoutlm"),Dpr=o(" \u2014 "),oW=a("a"),Gpr=o("TFLayoutLMForMaskedLM"),Opr=o(" (LayoutLM model)"),Vpr=l(),ET=a("li"),mbe=a("strong"),Xpr=o("longformer"),zpr=o(" \u2014 "),rW=a("a"),Qpr=o("TFLongformerForMaskedLM"),Wpr=o(" (Longformer model)"),Hpr=l(),CT=a("li"),gbe=a("strong"),Upr=o("mobilebert"),Jpr=o(" \u2014 "),tW=a("a"),Ypr=o("TFMobileBertForMaskedLM"),Kpr=o(" (MobileBERT model)"),Zpr=l(),wT=a("li"),hbe=a("strong"),eur=o("mpnet"),our=o(" \u2014 "),aW=a("a"),rur=o("TFMPNetForMaskedLM"),tur=o(" (MPNet model)"),aur=l(),AT=a("li"),pbe=a("strong"),nur=o("rembert"),sur=o(" \u2014 "),nW=a("a"),lur=o("TFRemBertForMaskedLM"),iur=o(" (RemBERT model)"),dur=l(),yT=a("li"),ube=a("strong"),cur=o("roberta"),fur=o(" \u2014 "),sW=a("a"),mur=o("TFRobertaForMaskedLM"),gur=o(" (RoBERTa model)"),hur=l(),LT=a("li"),_be=a("strong"),pur=o("roformer"),uur=o(" \u2014 "),lW=a("a"),_ur=o("TFRoFormerForMaskedLM"),bur=o(" (RoFormer model)"),vur=l(),xT=a("li"),bbe=a("strong"),Fur=o("tapas"),Tur=o(" \u2014 "),iW=a("a"),Mur=o("TFTapasForMaskedLM"),Eur=o(" (TAPAS model)"),Cur=l(),$T=a("li"),vbe=a("strong"),wur=o("xlm"),Aur=o(" \u2014 "),dW=a("a"),yur=o("TFXLMWithLMHeadModel"),Lur=o(" (XLM model)"),xur=l(),kT=a("li"),Fbe=a("strong"),$ur=o("xlm-roberta"),kur=o(" \u2014 "),cW=a("a"),Sur=o("TFXLMRobertaForMaskedLM"),Rur=o(" (XLM-RoBERTa model)"),Bur=l(),F(ST.$$.fragment),aqe=l(),Zd=a("h2"),RT=a("a"),Tbe=a("span"),F(t8.$$.fragment),Pur=l(),Mbe=a("span"),Iur=o("TFAutoModelForSeq2SeqLM"),nqe=l(),rr=a("div"),F(a8.$$.fragment),qur=l(),ec=a("p"),Nur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fW=a("a"),jur=o("from_pretrained()"),Dur=o(" class method or the "),mW=a("a"),Gur=o("from_config()"),Our=o(` class
method.`),Vur=l(),n8=a("p"),Xur=o("This class cannot be instantiated directly using "),Ebe=a("code"),zur=o("__init__()"),Qur=o(" (throws an error)."),Wur=l(),$t=a("div"),F(s8.$$.fragment),Hur=l(),Cbe=a("p"),Uur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jur=l(),oc=a("p"),Yur=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),Kur=o("not"),Zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),F(BT.$$.fragment),t_r=l(),$r=a("div"),F(l8.$$.fragment),a_r=l(),Abe=a("p"),n_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s_r=l(),tn=a("p"),l_r=o("The model class to instantiate is selected based on the "),ybe=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),ye=a("ul"),PT=a("li"),$be=a("strong"),p_r=o("bart"),u_r=o(" \u2014 "),hW=a("a"),__r=o("TFBartForConditionalGeneration"),b_r=o(" (BART model)"),v_r=l(),IT=a("li"),kbe=a("strong"),F_r=o("blenderbot"),T_r=o(" \u2014 "),pW=a("a"),M_r=o("TFBlenderbotForConditionalGeneration"),E_r=o(" (Blenderbot model)"),C_r=l(),qT=a("li"),Sbe=a("strong"),w_r=o("blenderbot-small"),A_r=o(" \u2014 "),uW=a("a"),y_r=o("TFBlenderbotSmallForConditionalGeneration"),L_r=o(" (BlenderbotSmall model)"),x_r=l(),NT=a("li"),Rbe=a("strong"),$_r=o("encoder-decoder"),k_r=o(" \u2014 "),_W=a("a"),S_r=o("TFEncoderDecoderModel"),R_r=o(" (Encoder decoder model)"),B_r=l(),jT=a("li"),Bbe=a("strong"),P_r=o("led"),I_r=o(" \u2014 "),bW=a("a"),q_r=o("TFLEDForConditionalGeneration"),N_r=o(" (LED model)"),j_r=l(),DT=a("li"),Pbe=a("strong"),D_r=o("marian"),G_r=o(" \u2014 "),vW=a("a"),O_r=o("TFMarianMTModel"),V_r=o(" (Marian model)"),X_r=l(),GT=a("li"),Ibe=a("strong"),z_r=o("mbart"),Q_r=o(" \u2014 "),FW=a("a"),W_r=o("TFMBartForConditionalGeneration"),H_r=o(" (mBART model)"),U_r=l(),OT=a("li"),qbe=a("strong"),J_r=o("mt5"),Y_r=o(" \u2014 "),TW=a("a"),K_r=o("TFMT5ForConditionalGeneration"),Z_r=o(" (mT5 model)"),e1r=l(),VT=a("li"),Nbe=a("strong"),o1r=o("pegasus"),r1r=o(" \u2014 "),MW=a("a"),t1r=o("TFPegasusForConditionalGeneration"),a1r=o(" (Pegasus model)"),n1r=l(),XT=a("li"),jbe=a("strong"),s1r=o("t5"),l1r=o(" \u2014 "),EW=a("a"),i1r=o("TFT5ForConditionalGeneration"),d1r=o(" (T5 model)"),c1r=l(),F(zT.$$.fragment),sqe=l(),rc=a("h2"),QT=a("a"),Dbe=a("span"),F(i8.$$.fragment),f1r=l(),Gbe=a("span"),m1r=o("TFAutoModelForSequenceClassification"),lqe=l(),tr=a("div"),F(d8.$$.fragment),g1r=l(),tc=a("p"),h1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CW=a("a"),p1r=o("from_pretrained()"),u1r=o(" class method or the "),wW=a("a"),_1r=o("from_config()"),b1r=o(` class
method.`),v1r=l(),c8=a("p"),F1r=o("This class cannot be instantiated directly using "),Obe=a("code"),T1r=o("__init__()"),M1r=o(" (throws an error)."),E1r=l(),kt=a("div"),F(f8.$$.fragment),C1r=l(),Vbe=a("p"),w1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A1r=l(),ac=a("p"),y1r=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),L1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),$1r=o("from_pretrained()"),k1r=o(" to load the model weights."),S1r=l(),F(WT.$$.fragment),R1r=l(),kr=a("div"),F(m8.$$.fragment),B1r=l(),zbe=a("p"),P1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I1r=l(),an=a("p"),q1r=o("The model class to instantiate is selected based on the "),Qbe=a("code"),N1r=o("model_type"),j1r=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),D1r=o("pretrained_model_name_or_path"),G1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(":"),X1r=l(),Z=a("ul"),HT=a("li"),Ube=a("strong"),z1r=o("albert"),Q1r=o(" \u2014 "),yW=a("a"),W1r=o("TFAlbertForSequenceClassification"),H1r=o(" (ALBERT model)"),U1r=l(),UT=a("li"),Jbe=a("strong"),J1r=o("bert"),Y1r=o(" \u2014 "),LW=a("a"),K1r=o("TFBertForSequenceClassification"),Z1r=o(" (BERT model)"),e7r=l(),JT=a("li"),Ybe=a("strong"),o7r=o("camembert"),r7r=o(" \u2014 "),xW=a("a"),t7r=o("TFCamembertForSequenceClassification"),a7r=o(" (CamemBERT model)"),n7r=l(),YT=a("li"),Kbe=a("strong"),s7r=o("convbert"),l7r=o(" \u2014 "),$W=a("a"),i7r=o("TFConvBertForSequenceClassification"),d7r=o(" (ConvBERT model)"),c7r=l(),KT=a("li"),Zbe=a("strong"),f7r=o("ctrl"),m7r=o(" \u2014 "),kW=a("a"),g7r=o("TFCTRLForSequenceClassification"),h7r=o(" (CTRL model)"),p7r=l(),ZT=a("li"),e2e=a("strong"),u7r=o("deberta"),_7r=o(" \u2014 "),SW=a("a"),b7r=o("TFDebertaForSequenceClassification"),v7r=o(" (DeBERTa model)"),F7r=l(),eM=a("li"),o2e=a("strong"),T7r=o("deberta-v2"),M7r=o(" \u2014 "),RW=a("a"),E7r=o("TFDebertaV2ForSequenceClassification"),C7r=o(" (DeBERTa-v2 model)"),w7r=l(),oM=a("li"),r2e=a("strong"),A7r=o("distilbert"),y7r=o(" \u2014 "),BW=a("a"),L7r=o("TFDistilBertForSequenceClassification"),x7r=o(" (DistilBERT model)"),$7r=l(),rM=a("li"),t2e=a("strong"),k7r=o("electra"),S7r=o(" \u2014 "),PW=a("a"),R7r=o("TFElectraForSequenceClassification"),B7r=o(" (ELECTRA model)"),P7r=l(),tM=a("li"),a2e=a("strong"),I7r=o("flaubert"),q7r=o(" \u2014 "),IW=a("a"),N7r=o("TFFlaubertForSequenceClassification"),j7r=o(" (FlauBERT model)"),D7r=l(),aM=a("li"),n2e=a("strong"),G7r=o("funnel"),O7r=o(" \u2014 "),qW=a("a"),V7r=o("TFFunnelForSequenceClassification"),X7r=o(" (Funnel Transformer model)"),z7r=l(),nM=a("li"),s2e=a("strong"),Q7r=o("gpt2"),W7r=o(" \u2014 "),NW=a("a"),H7r=o("TFGPT2ForSequenceClassification"),U7r=o(" (OpenAI GPT-2 model)"),J7r=l(),sM=a("li"),l2e=a("strong"),Y7r=o("gptj"),K7r=o(" \u2014 "),jW=a("a"),Z7r=o("TFGPTJForSequenceClassification"),ebr=o(" (GPT-J model)"),obr=l(),lM=a("li"),i2e=a("strong"),rbr=o("layoutlm"),tbr=o(" \u2014 "),DW=a("a"),abr=o("TFLayoutLMForSequenceClassification"),nbr=o(" (LayoutLM model)"),sbr=l(),iM=a("li"),d2e=a("strong"),lbr=o("longformer"),ibr=o(" \u2014 "),GW=a("a"),dbr=o("TFLongformerForSequenceClassification"),cbr=o(" (Longformer model)"),fbr=l(),dM=a("li"),c2e=a("strong"),mbr=o("mobilebert"),gbr=o(" \u2014 "),OW=a("a"),hbr=o("TFMobileBertForSequenceClassification"),pbr=o(" (MobileBERT model)"),ubr=l(),cM=a("li"),f2e=a("strong"),_br=o("mpnet"),bbr=o(" \u2014 "),VW=a("a"),vbr=o("TFMPNetForSequenceClassification"),Fbr=o(" (MPNet model)"),Tbr=l(),fM=a("li"),m2e=a("strong"),Mbr=o("openai-gpt"),Ebr=o(" \u2014 "),XW=a("a"),Cbr=o("TFOpenAIGPTForSequenceClassification"),wbr=o(" (OpenAI GPT model)"),Abr=l(),mM=a("li"),g2e=a("strong"),ybr=o("rembert"),Lbr=o(" \u2014 "),zW=a("a"),xbr=o("TFRemBertForSequenceClassification"),$br=o(" (RemBERT model)"),kbr=l(),gM=a("li"),h2e=a("strong"),Sbr=o("roberta"),Rbr=o(" \u2014 "),QW=a("a"),Bbr=o("TFRobertaForSequenceClassification"),Pbr=o(" (RoBERTa model)"),Ibr=l(),hM=a("li"),p2e=a("strong"),qbr=o("roformer"),Nbr=o(" \u2014 "),WW=a("a"),jbr=o("TFRoFormerForSequenceClassification"),Dbr=o(" (RoFormer model)"),Gbr=l(),pM=a("li"),u2e=a("strong"),Obr=o("tapas"),Vbr=o(" \u2014 "),HW=a("a"),Xbr=o("TFTapasForSequenceClassification"),zbr=o(" (TAPAS model)"),Qbr=l(),uM=a("li"),_2e=a("strong"),Wbr=o("transfo-xl"),Hbr=o(" \u2014 "),UW=a("a"),Ubr=o("TFTransfoXLForSequenceClassification"),Jbr=o(" (Transformer-XL model)"),Ybr=l(),_M=a("li"),b2e=a("strong"),Kbr=o("xlm"),Zbr=o(" \u2014 "),JW=a("a"),e2r=o("TFXLMForSequenceClassification"),o2r=o(" (XLM model)"),r2r=l(),bM=a("li"),v2e=a("strong"),t2r=o("xlm-roberta"),a2r=o(" \u2014 "),YW=a("a"),n2r=o("TFXLMRobertaForSequenceClassification"),s2r=o(" (XLM-RoBERTa model)"),l2r=l(),vM=a("li"),F2e=a("strong"),i2r=o("xlnet"),d2r=o(" \u2014 "),KW=a("a"),c2r=o("TFXLNetForSequenceClassification"),f2r=o(" (XLNet model)"),m2r=l(),F(FM.$$.fragment),iqe=l(),nc=a("h2"),TM=a("a"),T2e=a("span"),F(g8.$$.fragment),g2r=l(),M2e=a("span"),h2r=o("TFAutoModelForMultipleChoice"),dqe=l(),ar=a("div"),F(h8.$$.fragment),p2r=l(),sc=a("p"),u2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZW=a("a"),_2r=o("from_pretrained()"),b2r=o(" class method or the "),eH=a("a"),v2r=o("from_config()"),F2r=o(` class
method.`),T2r=l(),p8=a("p"),M2r=o("This class cannot be instantiated directly using "),E2e=a("code"),E2r=o("__init__()"),C2r=o(" (throws an error)."),w2r=l(),St=a("div"),F(u8.$$.fragment),A2r=l(),C2e=a("p"),y2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L2r=l(),lc=a("p"),x2r=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),$2r=o("not"),k2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),S2r=o("from_pretrained()"),R2r=o(" to load the model weights."),B2r=l(),F(MM.$$.fragment),P2r=l(),Sr=a("div"),F(_8.$$.fragment),I2r=l(),A2e=a("p"),q2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),N2r=l(),nn=a("p"),j2r=o("The model class to instantiate is selected based on the "),y2e=a("code"),D2r=o("model_type"),G2r=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),O2r=o("pretrained_model_name_or_path"),V2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),X2r=o("pretrained_model_name_or_path"),z2r=o(":"),Q2r=l(),pe=a("ul"),EM=a("li"),$2e=a("strong"),W2r=o("albert"),H2r=o(" \u2014 "),rH=a("a"),U2r=o("TFAlbertForMultipleChoice"),J2r=o(" (ALBERT model)"),Y2r=l(),CM=a("li"),k2e=a("strong"),K2r=o("bert"),Z2r=o(" \u2014 "),tH=a("a"),e5r=o("TFBertForMultipleChoice"),o5r=o(" (BERT model)"),r5r=l(),wM=a("li"),S2e=a("strong"),t5r=o("camembert"),a5r=o(" \u2014 "),aH=a("a"),n5r=o("TFCamembertForMultipleChoice"),s5r=o(" (CamemBERT model)"),l5r=l(),AM=a("li"),R2e=a("strong"),i5r=o("convbert"),d5r=o(" \u2014 "),nH=a("a"),c5r=o("TFConvBertForMultipleChoice"),f5r=o(" (ConvBERT model)"),m5r=l(),yM=a("li"),B2e=a("strong"),g5r=o("distilbert"),h5r=o(" \u2014 "),sH=a("a"),p5r=o("TFDistilBertForMultipleChoice"),u5r=o(" (DistilBERT model)"),_5r=l(),LM=a("li"),P2e=a("strong"),b5r=o("electra"),v5r=o(" \u2014 "),lH=a("a"),F5r=o("TFElectraForMultipleChoice"),T5r=o(" (ELECTRA model)"),M5r=l(),xM=a("li"),I2e=a("strong"),E5r=o("flaubert"),C5r=o(" \u2014 "),iH=a("a"),w5r=o("TFFlaubertForMultipleChoice"),A5r=o(" (FlauBERT model)"),y5r=l(),$M=a("li"),q2e=a("strong"),L5r=o("funnel"),x5r=o(" \u2014 "),dH=a("a"),$5r=o("TFFunnelForMultipleChoice"),k5r=o(" (Funnel Transformer model)"),S5r=l(),kM=a("li"),N2e=a("strong"),R5r=o("longformer"),B5r=o(" \u2014 "),cH=a("a"),P5r=o("TFLongformerForMultipleChoice"),I5r=o(" (Longformer model)"),q5r=l(),SM=a("li"),j2e=a("strong"),N5r=o("mobilebert"),j5r=o(" \u2014 "),fH=a("a"),D5r=o("TFMobileBertForMultipleChoice"),G5r=o(" (MobileBERT model)"),O5r=l(),RM=a("li"),D2e=a("strong"),V5r=o("mpnet"),X5r=o(" \u2014 "),mH=a("a"),z5r=o("TFMPNetForMultipleChoice"),Q5r=o(" (MPNet model)"),W5r=l(),BM=a("li"),G2e=a("strong"),H5r=o("rembert"),U5r=o(" \u2014 "),gH=a("a"),J5r=o("TFRemBertForMultipleChoice"),Y5r=o(" (RemBERT model)"),K5r=l(),PM=a("li"),O2e=a("strong"),Z5r=o("roberta"),evr=o(" \u2014 "),hH=a("a"),ovr=o("TFRobertaForMultipleChoice"),rvr=o(" (RoBERTa model)"),tvr=l(),IM=a("li"),V2e=a("strong"),avr=o("roformer"),nvr=o(" \u2014 "),pH=a("a"),svr=o("TFRoFormerForMultipleChoice"),lvr=o(" (RoFormer model)"),ivr=l(),qM=a("li"),X2e=a("strong"),dvr=o("xlm"),cvr=o(" \u2014 "),uH=a("a"),fvr=o("TFXLMForMultipleChoice"),mvr=o(" (XLM model)"),gvr=l(),NM=a("li"),z2e=a("strong"),hvr=o("xlm-roberta"),pvr=o(" \u2014 "),_H=a("a"),uvr=o("TFXLMRobertaForMultipleChoice"),_vr=o(" (XLM-RoBERTa model)"),bvr=l(),jM=a("li"),Q2e=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),bH=a("a"),Tvr=o("TFXLNetForMultipleChoice"),Mvr=o(" (XLNet model)"),Evr=l(),F(DM.$$.fragment),cqe=l(),ic=a("h2"),GM=a("a"),W2e=a("span"),F(b8.$$.fragment),Cvr=l(),H2e=a("span"),wvr=o("TFAutoModelForNextSentencePrediction"),fqe=l(),nr=a("div"),F(v8.$$.fragment),Avr=l(),dc=a("p"),yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vH=a("a"),Lvr=o("from_pretrained()"),xvr=o(" class method or the "),FH=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),F8=a("p"),Rvr=o("This class cannot be instantiated directly using "),U2e=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),Ivr=l(),Rt=a("div"),F(T8.$$.fragment),qvr=l(),J2e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jvr=l(),cc=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(OM.$$.fragment),Qvr=l(),Rr=a("div"),F(M8.$$.fragment),Wvr=l(),K2e=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Uvr=l(),sn=a("p"),Jvr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),e5e=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),E8=a("ul"),VM=a("li"),r5e=a("strong"),aFr=o("bert"),nFr=o(" \u2014 "),MH=a("a"),sFr=o("TFBertForNextSentencePrediction"),lFr=o(" (BERT model)"),iFr=l(),XM=a("li"),t5e=a("strong"),dFr=o("mobilebert"),cFr=o(" \u2014 "),EH=a("a"),fFr=o("TFMobileBertForNextSentencePrediction"),mFr=o(" (MobileBERT model)"),gFr=l(),F(zM.$$.fragment),mqe=l(),fc=a("h2"),QM=a("a"),a5e=a("span"),F(C8.$$.fragment),hFr=l(),n5e=a("span"),pFr=o("TFAutoModelForTableQuestionAnswering"),gqe=l(),sr=a("div"),F(w8.$$.fragment),uFr=l(),mc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CH=a("a"),bFr=o("from_pretrained()"),vFr=o(" class method or the "),wH=a("a"),FFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),A8=a("p"),EFr=o("This class cannot be instantiated directly using "),s5e=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),Bt=a("div"),F(y8.$$.fragment),yFr=l(),l5e=a("p"),LFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xFr=l(),gc=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),kFr=o("not"),SFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),RFr=o("from_pretrained()"),BFr=o(" to load the model weights."),PFr=l(),F(WM.$$.fragment),IFr=l(),Br=a("div"),F(L8.$$.fragment),qFr=l(),d5e=a("p"),NFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jFr=l(),ln=a("p"),DFr=o("The model class to instantiate is selected based on the "),c5e=a("code"),GFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),VFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(":"),WFr=l(),g5e=a("ul"),HM=a("li"),h5e=a("strong"),HFr=o("tapas"),UFr=o(" \u2014 "),yH=a("a"),JFr=o("TFTapasForQuestionAnswering"),YFr=o(" (TAPAS model)"),KFr=l(),F(UM.$$.fragment),hqe=l(),hc=a("h2"),JM=a("a"),p5e=a("span"),F(x8.$$.fragment),ZFr=l(),u5e=a("span"),e0r=o("TFAutoModelForTokenClassification"),pqe=l(),lr=a("div"),F($8.$$.fragment),o0r=l(),pc=a("p"),r0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LH=a("a"),t0r=o("from_pretrained()"),a0r=o(" class method or the "),xH=a("a"),n0r=o("from_config()"),s0r=o(` class
method.`),l0r=l(),k8=a("p"),i0r=o("This class cannot be instantiated directly using "),_5e=a("code"),d0r=o("__init__()"),c0r=o(" (throws an error)."),f0r=l(),Pt=a("div"),F(S8.$$.fragment),m0r=l(),b5e=a("p"),g0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h0r=l(),uc=a("p"),p0r=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),u0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),b0r=o("from_pretrained()"),v0r=o(" to load the model weights."),F0r=l(),F(YM.$$.fragment),T0r=l(),Pr=a("div"),F(R8.$$.fragment),M0r=l(),F5e=a("p"),E0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C0r=l(),dn=a("p"),w0r=o("The model class to instantiate is selected based on the "),T5e=a("code"),A0r=o("model_type"),y0r=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),$0r=o("pretrained_model_name_or_path"),k0r=o(":"),S0r=l(),de=a("ul"),KM=a("li"),C5e=a("strong"),R0r=o("albert"),B0r=o(" \u2014 "),kH=a("a"),P0r=o("TFAlbertForTokenClassification"),I0r=o(" (ALBERT model)"),q0r=l(),ZM=a("li"),w5e=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),SH=a("a"),D0r=o("TFBertForTokenClassification"),G0r=o(" (BERT model)"),O0r=l(),e4=a("li"),A5e=a("strong"),V0r=o("camembert"),X0r=o(" \u2014 "),RH=a("a"),z0r=o("TFCamembertForTokenClassification"),Q0r=o(" (CamemBERT model)"),W0r=l(),o4=a("li"),y5e=a("strong"),H0r=o("convbert"),U0r=o(" \u2014 "),BH=a("a"),J0r=o("TFConvBertForTokenClassification"),Y0r=o(" (ConvBERT model)"),K0r=l(),r4=a("li"),L5e=a("strong"),Z0r=o("deberta"),eTr=o(" \u2014 "),PH=a("a"),oTr=o("TFDebertaForTokenClassification"),rTr=o(" (DeBERTa model)"),tTr=l(),t4=a("li"),x5e=a("strong"),aTr=o("deberta-v2"),nTr=o(" \u2014 "),IH=a("a"),sTr=o("TFDebertaV2ForTokenClassification"),lTr=o(" (DeBERTa-v2 model)"),iTr=l(),a4=a("li"),$5e=a("strong"),dTr=o("distilbert"),cTr=o(" \u2014 "),qH=a("a"),fTr=o("TFDistilBertForTokenClassification"),mTr=o(" (DistilBERT model)"),gTr=l(),n4=a("li"),k5e=a("strong"),hTr=o("electra"),pTr=o(" \u2014 "),NH=a("a"),uTr=o("TFElectraForTokenClassification"),_Tr=o(" (ELECTRA model)"),bTr=l(),s4=a("li"),S5e=a("strong"),vTr=o("flaubert"),FTr=o(" \u2014 "),jH=a("a"),TTr=o("TFFlaubertForTokenClassification"),MTr=o(" (FlauBERT model)"),ETr=l(),l4=a("li"),R5e=a("strong"),CTr=o("funnel"),wTr=o(" \u2014 "),DH=a("a"),ATr=o("TFFunnelForTokenClassification"),yTr=o(" (Funnel Transformer model)"),LTr=l(),i4=a("li"),B5e=a("strong"),xTr=o("layoutlm"),$Tr=o(" \u2014 "),GH=a("a"),kTr=o("TFLayoutLMForTokenClassification"),STr=o(" (LayoutLM model)"),RTr=l(),d4=a("li"),P5e=a("strong"),BTr=o("longformer"),PTr=o(" \u2014 "),OH=a("a"),ITr=o("TFLongformerForTokenClassification"),qTr=o(" (Longformer model)"),NTr=l(),c4=a("li"),I5e=a("strong"),jTr=o("mobilebert"),DTr=o(" \u2014 "),VH=a("a"),GTr=o("TFMobileBertForTokenClassification"),OTr=o(" (MobileBERT model)"),VTr=l(),f4=a("li"),q5e=a("strong"),XTr=o("mpnet"),zTr=o(" \u2014 "),XH=a("a"),QTr=o("TFMPNetForTokenClassification"),WTr=o(" (MPNet model)"),HTr=l(),m4=a("li"),N5e=a("strong"),UTr=o("rembert"),JTr=o(" \u2014 "),zH=a("a"),YTr=o("TFRemBertForTokenClassification"),KTr=o(" (RemBERT model)"),ZTr=l(),g4=a("li"),j5e=a("strong"),eMr=o("roberta"),oMr=o(" \u2014 "),QH=a("a"),rMr=o("TFRobertaForTokenClassification"),tMr=o(" (RoBERTa model)"),aMr=l(),h4=a("li"),D5e=a("strong"),nMr=o("roformer"),sMr=o(" \u2014 "),WH=a("a"),lMr=o("TFRoFormerForTokenClassification"),iMr=o(" (RoFormer model)"),dMr=l(),p4=a("li"),G5e=a("strong"),cMr=o("xlm"),fMr=o(" \u2014 "),HH=a("a"),mMr=o("TFXLMForTokenClassification"),gMr=o(" (XLM model)"),hMr=l(),u4=a("li"),O5e=a("strong"),pMr=o("xlm-roberta"),uMr=o(" \u2014 "),UH=a("a"),_Mr=o("TFXLMRobertaForTokenClassification"),bMr=o(" (XLM-RoBERTa model)"),vMr=l(),_4=a("li"),V5e=a("strong"),FMr=o("xlnet"),TMr=o(" \u2014 "),JH=a("a"),MMr=o("TFXLNetForTokenClassification"),EMr=o(" (XLNet model)"),CMr=l(),F(b4.$$.fragment),uqe=l(),_c=a("h2"),v4=a("a"),X5e=a("span"),F(B8.$$.fragment),wMr=l(),z5e=a("span"),AMr=o("TFAutoModelForQuestionAnswering"),_qe=l(),ir=a("div"),F(P8.$$.fragment),yMr=l(),bc=a("p"),LMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YH=a("a"),xMr=o("from_pretrained()"),$Mr=o(" class method or the "),KH=a("a"),kMr=o("from_config()"),SMr=o(` class
method.`),RMr=l(),I8=a("p"),BMr=o("This class cannot be instantiated directly using "),Q5e=a("code"),PMr=o("__init__()"),IMr=o(" (throws an error)."),qMr=l(),It=a("div"),F(q8.$$.fragment),NMr=l(),W5e=a("p"),jMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DMr=l(),vc=a("p"),GMr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),OMr=o("not"),VMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),XMr=o("from_pretrained()"),zMr=o(" to load the model weights."),QMr=l(),F(F4.$$.fragment),WMr=l(),Ir=a("div"),F(N8.$$.fragment),HMr=l(),U5e=a("p"),UMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JMr=l(),cn=a("p"),YMr=o("The model class to instantiate is selected based on the "),J5e=a("code"),KMr=o("model_type"),ZMr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(":"),a4r=l(),ce=a("ul"),T4=a("li"),Z5e=a("strong"),n4r=o("albert"),s4r=o(" \u2014 "),eU=a("a"),l4r=o("TFAlbertForQuestionAnswering"),i4r=o(" (ALBERT model)"),d4r=l(),M4=a("li"),eve=a("strong"),c4r=o("bert"),f4r=o(" \u2014 "),oU=a("a"),m4r=o("TFBertForQuestionAnswering"),g4r=o(" (BERT model)"),h4r=l(),E4=a("li"),ove=a("strong"),p4r=o("camembert"),u4r=o(" \u2014 "),rU=a("a"),_4r=o("TFCamembertForQuestionAnswering"),b4r=o(" (CamemBERT model)"),v4r=l(),C4=a("li"),rve=a("strong"),F4r=o("convbert"),T4r=o(" \u2014 "),tU=a("a"),M4r=o("TFConvBertForQuestionAnswering"),E4r=o(" (ConvBERT model)"),C4r=l(),w4=a("li"),tve=a("strong"),w4r=o("deberta"),A4r=o(" \u2014 "),aU=a("a"),y4r=o("TFDebertaForQuestionAnswering"),L4r=o(" (DeBERTa model)"),x4r=l(),A4=a("li"),ave=a("strong"),$4r=o("deberta-v2"),k4r=o(" \u2014 "),nU=a("a"),S4r=o("TFDebertaV2ForQuestionAnswering"),R4r=o(" (DeBERTa-v2 model)"),B4r=l(),y4=a("li"),nve=a("strong"),P4r=o("distilbert"),I4r=o(" \u2014 "),sU=a("a"),q4r=o("TFDistilBertForQuestionAnswering"),N4r=o(" (DistilBERT model)"),j4r=l(),L4=a("li"),sve=a("strong"),D4r=o("electra"),G4r=o(" \u2014 "),lU=a("a"),O4r=o("TFElectraForQuestionAnswering"),V4r=o(" (ELECTRA model)"),X4r=l(),x4=a("li"),lve=a("strong"),z4r=o("flaubert"),Q4r=o(" \u2014 "),iU=a("a"),W4r=o("TFFlaubertForQuestionAnsweringSimple"),H4r=o(" (FlauBERT model)"),U4r=l(),$4=a("li"),ive=a("strong"),J4r=o("funnel"),Y4r=o(" \u2014 "),dU=a("a"),K4r=o("TFFunnelForQuestionAnswering"),Z4r=o(" (Funnel Transformer model)"),eEr=l(),k4=a("li"),dve=a("strong"),oEr=o("gptj"),rEr=o(" \u2014 "),cU=a("a"),tEr=o("TFGPTJForQuestionAnswering"),aEr=o(" (GPT-J model)"),nEr=l(),S4=a("li"),cve=a("strong"),sEr=o("longformer"),lEr=o(" \u2014 "),fU=a("a"),iEr=o("TFLongformerForQuestionAnswering"),dEr=o(" (Longformer model)"),cEr=l(),R4=a("li"),fve=a("strong"),fEr=o("mobilebert"),mEr=o(" \u2014 "),mU=a("a"),gEr=o("TFMobileBertForQuestionAnswering"),hEr=o(" (MobileBERT model)"),pEr=l(),B4=a("li"),mve=a("strong"),uEr=o("mpnet"),_Er=o(" \u2014 "),gU=a("a"),bEr=o("TFMPNetForQuestionAnswering"),vEr=o(" (MPNet model)"),FEr=l(),P4=a("li"),gve=a("strong"),TEr=o("rembert"),MEr=o(" \u2014 "),hU=a("a"),EEr=o("TFRemBertForQuestionAnswering"),CEr=o(" (RemBERT model)"),wEr=l(),I4=a("li"),hve=a("strong"),AEr=o("roberta"),yEr=o(" \u2014 "),pU=a("a"),LEr=o("TFRobertaForQuestionAnswering"),xEr=o(" (RoBERTa model)"),$Er=l(),q4=a("li"),pve=a("strong"),kEr=o("roformer"),SEr=o(" \u2014 "),uU=a("a"),REr=o("TFRoFormerForQuestionAnswering"),BEr=o(" (RoFormer model)"),PEr=l(),N4=a("li"),uve=a("strong"),IEr=o("xlm"),qEr=o(" \u2014 "),_U=a("a"),NEr=o("TFXLMForQuestionAnsweringSimple"),jEr=o(" (XLM model)"),DEr=l(),j4=a("li"),_ve=a("strong"),GEr=o("xlm-roberta"),OEr=o(" \u2014 "),bU=a("a"),VEr=o("TFXLMRobertaForQuestionAnswering"),XEr=o(" (XLM-RoBERTa model)"),zEr=l(),D4=a("li"),bve=a("strong"),QEr=o("xlnet"),WEr=o(" \u2014 "),vU=a("a"),HEr=o("TFXLNetForQuestionAnsweringSimple"),UEr=o(" (XLNet model)"),JEr=l(),F(G4.$$.fragment),bqe=l(),Fc=a("h2"),O4=a("a"),vve=a("span"),F(j8.$$.fragment),YEr=l(),Fve=a("span"),KEr=o("TFAutoModelForVision2Seq"),vqe=l(),dr=a("div"),F(D8.$$.fragment),ZEr=l(),Tc=a("p"),eCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FU=a("a"),oCr=o("from_pretrained()"),rCr=o(" class method or the "),TU=a("a"),tCr=o("from_config()"),aCr=o(` class
method.`),nCr=l(),G8=a("p"),sCr=o("This class cannot be instantiated directly using "),Tve=a("code"),lCr=o("__init__()"),iCr=o(" (throws an error)."),dCr=l(),qt=a("div"),F(O8.$$.fragment),cCr=l(),Mve=a("p"),fCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mCr=l(),Mc=a("p"),gCr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),hCr=o("not"),pCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),uCr=o("from_pretrained()"),_Cr=o(" to load the model weights."),bCr=l(),F(V4.$$.fragment),vCr=l(),qr=a("div"),F(V8.$$.fragment),FCr=l(),Cve=a("p"),TCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MCr=l(),fn=a("p"),ECr=o("The model class to instantiate is selected based on the "),wve=a("code"),CCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),LCr=o("pretrained_model_name_or_path"),xCr=o(":"),$Cr=l(),Lve=a("ul"),X4=a("li"),xve=a("strong"),kCr=o("vision-encoder-decoder"),SCr=o(" \u2014 "),EU=a("a"),RCr=o("TFVisionEncoderDecoderModel"),BCr=o(" (Vision Encoder decoder model)"),PCr=l(),F(z4.$$.fragment),Fqe=l(),Ec=a("h2"),Q4=a("a"),$ve=a("span"),F(X8.$$.fragment),ICr=l(),kve=a("span"),qCr=o("TFAutoModelForSpeechSeq2Seq"),Tqe=l(),cr=a("div"),F(z8.$$.fragment),NCr=l(),Cc=a("p"),jCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CU=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),wU=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),Q8=a("p"),zCr=o("This class cannot be instantiated directly using "),Sve=a("code"),QCr=o("__init__()"),WCr=o(" (throws an error)."),HCr=l(),Nt=a("div"),F(W8.$$.fragment),UCr=l(),Rve=a("p"),JCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YCr=l(),wc=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),ZCr=o("not"),e3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),o3r=o("from_pretrained()"),r3r=o(" to load the model weights."),t3r=l(),F(W4.$$.fragment),a3r=l(),Nr=a("div"),F(H8.$$.fragment),n3r=l(),Pve=a("p"),s3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l3r=l(),mn=a("p"),i3r=o("The model class to instantiate is selected based on the "),Ive=a("code"),d3r=o("model_type"),c3r=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),f3r=o("pretrained_model_name_or_path"),m3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(":"),p3r=l(),jve=a("ul"),H4=a("li"),Dve=a("strong"),u3r=o("speech_to_text"),_3r=o(" \u2014 "),yU=a("a"),b3r=o("TFSpeech2TextForConditionalGeneration"),v3r=o(" (Speech2Text model)"),F3r=l(),F(U4.$$.fragment),Mqe=l(),Ac=a("h2"),J4=a("a"),Gve=a("span"),F(U8.$$.fragment),T3r=l(),Ove=a("span"),M3r=o("FlaxAutoModel"),Eqe=l(),fr=a("div"),F(J8.$$.fragment),E3r=l(),yc=a("p"),C3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LU=a("a"),w3r=o("from_pretrained()"),A3r=o(" class method or the "),xU=a("a"),y3r=o("from_config()"),L3r=o(` class
method.`),x3r=l(),Y8=a("p"),$3r=o("This class cannot be instantiated directly using "),Vve=a("code"),k3r=o("__init__()"),S3r=o(" (throws an error)."),R3r=l(),jt=a("div"),F(K8.$$.fragment),B3r=l(),Xve=a("p"),P3r=o("Instantiates one of the base model classes of the library from a configuration."),I3r=l(),Lc=a("p"),q3r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),N3r=o("not"),j3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),D3r=o("from_pretrained()"),G3r=o(" to load the model weights."),O3r=l(),F(Y4.$$.fragment),V3r=l(),jr=a("div"),F(Z8.$$.fragment),X3r=l(),Qve=a("p"),z3r=o("Instantiate one of the base model classes of the library from a pretrained model."),Q3r=l(),gn=a("p"),W3r=o("The model class to instantiate is selected based on the "),Wve=a("code"),H3r=o("model_type"),U3r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),K3r=o("pretrained_model_name_or_path"),Z3r=o(":"),ewr=l(),re=a("ul"),K4=a("li"),Jve=a("strong"),owr=o("albert"),rwr=o(" \u2014 "),kU=a("a"),twr=o("FlaxAlbertModel"),awr=o(" (ALBERT model)"),nwr=l(),Z4=a("li"),Yve=a("strong"),swr=o("bart"),lwr=o(" \u2014 "),SU=a("a"),iwr=o("FlaxBartModel"),dwr=o(" (BART model)"),cwr=l(),eE=a("li"),Kve=a("strong"),fwr=o("beit"),mwr=o(" \u2014 "),RU=a("a"),gwr=o("FlaxBeitModel"),hwr=o(" (BEiT model)"),pwr=l(),oE=a("li"),Zve=a("strong"),uwr=o("bert"),_wr=o(" \u2014 "),BU=a("a"),bwr=o("FlaxBertModel"),vwr=o(" (BERT model)"),Fwr=l(),rE=a("li"),eFe=a("strong"),Twr=o("big_bird"),Mwr=o(" \u2014 "),PU=a("a"),Ewr=o("FlaxBigBirdModel"),Cwr=o(" (BigBird model)"),wwr=l(),tE=a("li"),oFe=a("strong"),Awr=o("blenderbot"),ywr=o(" \u2014 "),IU=a("a"),Lwr=o("FlaxBlenderbotModel"),xwr=o(" (Blenderbot model)"),$wr=l(),aE=a("li"),rFe=a("strong"),kwr=o("blenderbot-small"),Swr=o(" \u2014 "),qU=a("a"),Rwr=o("FlaxBlenderbotSmallModel"),Bwr=o(" (BlenderbotSmall model)"),Pwr=l(),nE=a("li"),tFe=a("strong"),Iwr=o("clip"),qwr=o(" \u2014 "),NU=a("a"),Nwr=o("FlaxCLIPModel"),jwr=o(" (CLIP model)"),Dwr=l(),sE=a("li"),aFe=a("strong"),Gwr=o("distilbert"),Owr=o(" \u2014 "),jU=a("a"),Vwr=o("FlaxDistilBertModel"),Xwr=o(" (DistilBERT model)"),zwr=l(),lE=a("li"),nFe=a("strong"),Qwr=o("electra"),Wwr=o(" \u2014 "),DU=a("a"),Hwr=o("FlaxElectraModel"),Uwr=o(" (ELECTRA model)"),Jwr=l(),iE=a("li"),sFe=a("strong"),Ywr=o("gpt2"),Kwr=o(" \u2014 "),GU=a("a"),Zwr=o("FlaxGPT2Model"),eAr=o(" (OpenAI GPT-2 model)"),oAr=l(),dE=a("li"),lFe=a("strong"),rAr=o("gpt_neo"),tAr=o(" \u2014 "),OU=a("a"),aAr=o("FlaxGPTNeoModel"),nAr=o(" (GPT Neo model)"),sAr=l(),cE=a("li"),iFe=a("strong"),lAr=o("gptj"),iAr=o(" \u2014 "),VU=a("a"),dAr=o("FlaxGPTJModel"),cAr=o(" (GPT-J model)"),fAr=l(),fE=a("li"),dFe=a("strong"),mAr=o("marian"),gAr=o(" \u2014 "),XU=a("a"),hAr=o("FlaxMarianModel"),pAr=o(" (Marian model)"),uAr=l(),mE=a("li"),cFe=a("strong"),_Ar=o("mbart"),bAr=o(" \u2014 "),zU=a("a"),vAr=o("FlaxMBartModel"),FAr=o(" (mBART model)"),TAr=l(),gE=a("li"),fFe=a("strong"),MAr=o("mt5"),EAr=o(" \u2014 "),QU=a("a"),CAr=o("FlaxMT5Model"),wAr=o(" (mT5 model)"),AAr=l(),hE=a("li"),mFe=a("strong"),yAr=o("pegasus"),LAr=o(" \u2014 "),WU=a("a"),xAr=o("FlaxPegasusModel"),$Ar=o(" (Pegasus model)"),kAr=l(),pE=a("li"),gFe=a("strong"),SAr=o("roberta"),RAr=o(" \u2014 "),HU=a("a"),BAr=o("FlaxRobertaModel"),PAr=o(" (RoBERTa model)"),IAr=l(),uE=a("li"),hFe=a("strong"),qAr=o("roformer"),NAr=o(" \u2014 "),UU=a("a"),jAr=o("FlaxRoFormerModel"),DAr=o(" (RoFormer model)"),GAr=l(),_E=a("li"),pFe=a("strong"),OAr=o("t5"),VAr=o(" \u2014 "),JU=a("a"),XAr=o("FlaxT5Model"),zAr=o(" (T5 model)"),QAr=l(),bE=a("li"),uFe=a("strong"),WAr=o("vision-text-dual-encoder"),HAr=o(" \u2014 "),YU=a("a"),UAr=o("FlaxVisionTextDualEncoderModel"),JAr=o(" (VisionTextDualEncoder model)"),YAr=l(),vE=a("li"),_Fe=a("strong"),KAr=o("vit"),ZAr=o(" \u2014 "),KU=a("a"),e6r=o("FlaxViTModel"),o6r=o(" (ViT model)"),r6r=l(),FE=a("li"),bFe=a("strong"),t6r=o("wav2vec2"),a6r=o(" \u2014 "),ZU=a("a"),n6r=o("FlaxWav2Vec2Model"),s6r=o(" (Wav2Vec2 model)"),l6r=l(),TE=a("li"),vFe=a("strong"),i6r=o("xglm"),d6r=o(" \u2014 "),eJ=a("a"),c6r=o("FlaxXGLMModel"),f6r=o(" (XGLM model)"),m6r=l(),ME=a("li"),FFe=a("strong"),g6r=o("xlm-roberta"),h6r=o(" \u2014 "),oJ=a("a"),p6r=o("FlaxXLMRobertaModel"),u6r=o(" (XLM-RoBERTa model)"),_6r=l(),F(EE.$$.fragment),Cqe=l(),xc=a("h2"),CE=a("a"),TFe=a("span"),F(ex.$$.fragment),b6r=l(),MFe=a("span"),v6r=o("FlaxAutoModelForCausalLM"),wqe=l(),mr=a("div"),F(ox.$$.fragment),F6r=l(),$c=a("p"),T6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rJ=a("a"),M6r=o("from_pretrained()"),E6r=o(" class method or the "),tJ=a("a"),C6r=o("from_config()"),w6r=o(` class
method.`),A6r=l(),rx=a("p"),y6r=o("This class cannot be instantiated directly using "),EFe=a("code"),L6r=o("__init__()"),x6r=o(" (throws an error)."),$6r=l(),Dt=a("div"),F(tx.$$.fragment),k6r=l(),CFe=a("p"),S6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R6r=l(),kc=a("p"),B6r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),P6r=o("not"),I6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),q6r=o("from_pretrained()"),N6r=o(" to load the model weights."),j6r=l(),F(wE.$$.fragment),D6r=l(),Dr=a("div"),F(ax.$$.fragment),G6r=l(),AFe=a("p"),O6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V6r=l(),hn=a("p"),X6r=o("The model class to instantiate is selected based on the "),yFe=a("code"),z6r=o("model_type"),Q6r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),W6r=o("pretrained_model_name_or_path"),H6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),U6r=o("pretrained_model_name_or_path"),J6r=o(":"),Y6r=l(),ke=a("ul"),AE=a("li"),$Fe=a("strong"),K6r=o("bart"),Z6r=o(" \u2014 "),nJ=a("a"),eyr=o("FlaxBartForCausalLM"),oyr=o(" (BART model)"),ryr=l(),yE=a("li"),kFe=a("strong"),tyr=o("bert"),ayr=o(" \u2014 "),sJ=a("a"),nyr=o("FlaxBertForCausalLM"),syr=o(" (BERT model)"),lyr=l(),LE=a("li"),SFe=a("strong"),iyr=o("big_bird"),dyr=o(" \u2014 "),lJ=a("a"),cyr=o("FlaxBigBirdForCausalLM"),fyr=o(" (BigBird model)"),myr=l(),xE=a("li"),RFe=a("strong"),gyr=o("electra"),hyr=o(" \u2014 "),iJ=a("a"),pyr=o("FlaxElectraForCausalLM"),uyr=o(" (ELECTRA model)"),_yr=l(),$E=a("li"),BFe=a("strong"),byr=o("gpt2"),vyr=o(" \u2014 "),dJ=a("a"),Fyr=o("FlaxGPT2LMHeadModel"),Tyr=o(" (OpenAI GPT-2 model)"),Myr=l(),kE=a("li"),PFe=a("strong"),Eyr=o("gpt_neo"),Cyr=o(" \u2014 "),cJ=a("a"),wyr=o("FlaxGPTNeoForCausalLM"),Ayr=o(" (GPT Neo model)"),yyr=l(),SE=a("li"),IFe=a("strong"),Lyr=o("gptj"),xyr=o(" \u2014 "),fJ=a("a"),$yr=o("FlaxGPTJForCausalLM"),kyr=o(" (GPT-J model)"),Syr=l(),RE=a("li"),qFe=a("strong"),Ryr=o("roberta"),Byr=o(" \u2014 "),mJ=a("a"),Pyr=o("FlaxRobertaForCausalLM"),Iyr=o(" (RoBERTa model)"),qyr=l(),BE=a("li"),NFe=a("strong"),Nyr=o("xglm"),jyr=o(" \u2014 "),gJ=a("a"),Dyr=o("FlaxXGLMForCausalLM"),Gyr=o(" (XGLM model)"),Oyr=l(),F(PE.$$.fragment),Aqe=l(),Sc=a("h2"),IE=a("a"),jFe=a("span"),F(nx.$$.fragment),Vyr=l(),DFe=a("span"),Xyr=o("FlaxAutoModelForPreTraining"),yqe=l(),gr=a("div"),F(sx.$$.fragment),zyr=l(),Rc=a("p"),Qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hJ=a("a"),Wyr=o("from_pretrained()"),Hyr=o(" class method or the "),pJ=a("a"),Uyr=o("from_config()"),Jyr=o(` class
method.`),Yyr=l(),lx=a("p"),Kyr=o("This class cannot be instantiated directly using "),GFe=a("code"),Zyr=o("__init__()"),eLr=o(" (throws an error)."),oLr=l(),Gt=a("div"),F(ix.$$.fragment),rLr=l(),OFe=a("p"),tLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aLr=l(),Bc=a("p"),nLr=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),sLr=o("not"),lLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),iLr=o("from_pretrained()"),dLr=o(" to load the model weights."),cLr=l(),F(qE.$$.fragment),fLr=l(),Gr=a("div"),F(dx.$$.fragment),mLr=l(),XFe=a("p"),gLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hLr=l(),pn=a("p"),pLr=o("The model class to instantiate is selected based on the "),zFe=a("code"),uLr=o("model_type"),_Lr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(":"),MLr=l(),Me=a("ul"),NE=a("li"),HFe=a("strong"),ELr=o("albert"),CLr=o(" \u2014 "),_J=a("a"),wLr=o("FlaxAlbertForPreTraining"),ALr=o(" (ALBERT model)"),yLr=l(),jE=a("li"),UFe=a("strong"),LLr=o("bart"),xLr=o(" \u2014 "),bJ=a("a"),$Lr=o("FlaxBartForConditionalGeneration"),kLr=o(" (BART model)"),SLr=l(),DE=a("li"),JFe=a("strong"),RLr=o("bert"),BLr=o(" \u2014 "),vJ=a("a"),PLr=o("FlaxBertForPreTraining"),ILr=o(" (BERT model)"),qLr=l(),GE=a("li"),YFe=a("strong"),NLr=o("big_bird"),jLr=o(" \u2014 "),FJ=a("a"),DLr=o("FlaxBigBirdForPreTraining"),GLr=o(" (BigBird model)"),OLr=l(),OE=a("li"),KFe=a("strong"),VLr=o("electra"),XLr=o(" \u2014 "),TJ=a("a"),zLr=o("FlaxElectraForPreTraining"),QLr=o(" (ELECTRA model)"),WLr=l(),VE=a("li"),ZFe=a("strong"),HLr=o("mbart"),ULr=o(" \u2014 "),MJ=a("a"),JLr=o("FlaxMBartForConditionalGeneration"),YLr=o(" (mBART model)"),KLr=l(),XE=a("li"),e0e=a("strong"),ZLr=o("mt5"),e8r=o(" \u2014 "),EJ=a("a"),o8r=o("FlaxMT5ForConditionalGeneration"),r8r=o(" (mT5 model)"),t8r=l(),zE=a("li"),o0e=a("strong"),a8r=o("roberta"),n8r=o(" \u2014 "),CJ=a("a"),s8r=o("FlaxRobertaForMaskedLM"),l8r=o(" (RoBERTa model)"),i8r=l(),QE=a("li"),r0e=a("strong"),d8r=o("roformer"),c8r=o(" \u2014 "),wJ=a("a"),f8r=o("FlaxRoFormerForMaskedLM"),m8r=o(" (RoFormer model)"),g8r=l(),WE=a("li"),t0e=a("strong"),h8r=o("t5"),p8r=o(" \u2014 "),AJ=a("a"),u8r=o("FlaxT5ForConditionalGeneration"),_8r=o(" (T5 model)"),b8r=l(),HE=a("li"),a0e=a("strong"),v8r=o("wav2vec2"),F8r=o(" \u2014 "),yJ=a("a"),T8r=o("FlaxWav2Vec2ForPreTraining"),M8r=o(" (Wav2Vec2 model)"),E8r=l(),UE=a("li"),n0e=a("strong"),C8r=o("xlm-roberta"),w8r=o(" \u2014 "),LJ=a("a"),A8r=o("FlaxXLMRobertaForMaskedLM"),y8r=o(" (XLM-RoBERTa model)"),L8r=l(),F(JE.$$.fragment),Lqe=l(),Pc=a("h2"),YE=a("a"),s0e=a("span"),F(cx.$$.fragment),x8r=l(),l0e=a("span"),$8r=o("FlaxAutoModelForMaskedLM"),xqe=l(),hr=a("div"),F(fx.$$.fragment),k8r=l(),Ic=a("p"),S8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xJ=a("a"),R8r=o("from_pretrained()"),B8r=o(" class method or the "),$J=a("a"),P8r=o("from_config()"),I8r=o(` class
method.`),q8r=l(),mx=a("p"),N8r=o("This class cannot be instantiated directly using "),i0e=a("code"),j8r=o("__init__()"),D8r=o(" (throws an error)."),G8r=l(),Ot=a("div"),F(gx.$$.fragment),O8r=l(),d0e=a("p"),V8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X8r=l(),qc=a("p"),z8r=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),Q8r=o("not"),W8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),H8r=o("from_pretrained()"),U8r=o(" to load the model weights."),J8r=l(),F(KE.$$.fragment),Y8r=l(),Or=a("div"),F(hx.$$.fragment),K8r=l(),f0e=a("p"),Z8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),exr=l(),un=a("p"),oxr=o("The model class to instantiate is selected based on the "),m0e=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),Le=a("ul"),ZE=a("li"),p0e=a("strong"),dxr=o("albert"),cxr=o(" \u2014 "),SJ=a("a"),fxr=o("FlaxAlbertForMaskedLM"),mxr=o(" (ALBERT model)"),gxr=l(),eC=a("li"),u0e=a("strong"),hxr=o("bart"),pxr=o(" \u2014 "),RJ=a("a"),uxr=o("FlaxBartForConditionalGeneration"),_xr=o(" (BART model)"),bxr=l(),oC=a("li"),_0e=a("strong"),vxr=o("bert"),Fxr=o(" \u2014 "),BJ=a("a"),Txr=o("FlaxBertForMaskedLM"),Mxr=o(" (BERT model)"),Exr=l(),rC=a("li"),b0e=a("strong"),Cxr=o("big_bird"),wxr=o(" \u2014 "),PJ=a("a"),Axr=o("FlaxBigBirdForMaskedLM"),yxr=o(" (BigBird model)"),Lxr=l(),tC=a("li"),v0e=a("strong"),xxr=o("distilbert"),$xr=o(" \u2014 "),IJ=a("a"),kxr=o("FlaxDistilBertForMaskedLM"),Sxr=o(" (DistilBERT model)"),Rxr=l(),aC=a("li"),F0e=a("strong"),Bxr=o("electra"),Pxr=o(" \u2014 "),qJ=a("a"),Ixr=o("FlaxElectraForMaskedLM"),qxr=o(" (ELECTRA model)"),Nxr=l(),nC=a("li"),T0e=a("strong"),jxr=o("mbart"),Dxr=o(" \u2014 "),NJ=a("a"),Gxr=o("FlaxMBartForConditionalGeneration"),Oxr=o(" (mBART model)"),Vxr=l(),sC=a("li"),M0e=a("strong"),Xxr=o("roberta"),zxr=o(" \u2014 "),jJ=a("a"),Qxr=o("FlaxRobertaForMaskedLM"),Wxr=o(" (RoBERTa model)"),Hxr=l(),lC=a("li"),E0e=a("strong"),Uxr=o("roformer"),Jxr=o(" \u2014 "),DJ=a("a"),Yxr=o("FlaxRoFormerForMaskedLM"),Kxr=o(" (RoFormer model)"),Zxr=l(),iC=a("li"),C0e=a("strong"),e9r=o("xlm-roberta"),o9r=o(" \u2014 "),GJ=a("a"),r9r=o("FlaxXLMRobertaForMaskedLM"),t9r=o(" (XLM-RoBERTa model)"),a9r=l(),F(dC.$$.fragment),$qe=l(),Nc=a("h2"),cC=a("a"),w0e=a("span"),F(px.$$.fragment),n9r=l(),A0e=a("span"),s9r=o("FlaxAutoModelForSeq2SeqLM"),kqe=l(),pr=a("div"),F(ux.$$.fragment),l9r=l(),jc=a("p"),i9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OJ=a("a"),d9r=o("from_pretrained()"),c9r=o(" class method or the "),VJ=a("a"),f9r=o("from_config()"),m9r=o(` class
method.`),g9r=l(),_x=a("p"),h9r=o("This class cannot be instantiated directly using "),y0e=a("code"),p9r=o("__init__()"),u9r=o(" (throws an error)."),_9r=l(),Vt=a("div"),F(bx.$$.fragment),b9r=l(),L0e=a("p"),v9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F9r=l(),Dc=a("p"),T9r=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),M9r=o("not"),E9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),C9r=o("from_pretrained()"),w9r=o(" to load the model weights."),A9r=l(),F(fC.$$.fragment),y9r=l(),Vr=a("div"),F(vx.$$.fragment),L9r=l(),$0e=a("p"),x9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$9r=l(),_n=a("p"),k9r=o("The model class to instantiate is selected based on the "),k0e=a("code"),S9r=o("model_type"),R9r=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),B9r=o("pretrained_model_name_or_path"),P9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(":"),N9r=l(),Se=a("ul"),mC=a("li"),B0e=a("strong"),j9r=o("bart"),D9r=o(" \u2014 "),zJ=a("a"),G9r=o("FlaxBartForConditionalGeneration"),O9r=o(" (BART model)"),V9r=l(),gC=a("li"),P0e=a("strong"),X9r=o("blenderbot"),z9r=o(" \u2014 "),QJ=a("a"),Q9r=o("FlaxBlenderbotForConditionalGeneration"),W9r=o(" (Blenderbot model)"),H9r=l(),hC=a("li"),I0e=a("strong"),U9r=o("blenderbot-small"),J9r=o(" \u2014 "),WJ=a("a"),Y9r=o("FlaxBlenderbotSmallForConditionalGeneration"),K9r=o(" (BlenderbotSmall model)"),Z9r=l(),pC=a("li"),q0e=a("strong"),e$r=o("encoder-decoder"),o$r=o(" \u2014 "),HJ=a("a"),r$r=o("FlaxEncoderDecoderModel"),t$r=o(" (Encoder decoder model)"),a$r=l(),uC=a("li"),N0e=a("strong"),n$r=o("marian"),s$r=o(" \u2014 "),UJ=a("a"),l$r=o("FlaxMarianMTModel"),i$r=o(" (Marian model)"),d$r=l(),_C=a("li"),j0e=a("strong"),c$r=o("mbart"),f$r=o(" \u2014 "),JJ=a("a"),m$r=o("FlaxMBartForConditionalGeneration"),g$r=o(" (mBART model)"),h$r=l(),bC=a("li"),D0e=a("strong"),p$r=o("mt5"),u$r=o(" \u2014 "),YJ=a("a"),_$r=o("FlaxMT5ForConditionalGeneration"),b$r=o(" (mT5 model)"),v$r=l(),vC=a("li"),G0e=a("strong"),F$r=o("pegasus"),T$r=o(" \u2014 "),KJ=a("a"),M$r=o("FlaxPegasusForConditionalGeneration"),E$r=o(" (Pegasus model)"),C$r=l(),FC=a("li"),O0e=a("strong"),w$r=o("t5"),A$r=o(" \u2014 "),ZJ=a("a"),y$r=o("FlaxT5ForConditionalGeneration"),L$r=o(" (T5 model)"),x$r=l(),F(TC.$$.fragment),Sqe=l(),Gc=a("h2"),MC=a("a"),V0e=a("span"),F(Fx.$$.fragment),$$r=l(),X0e=a("span"),k$r=o("FlaxAutoModelForSequenceClassification"),Rqe=l(),ur=a("div"),F(Tx.$$.fragment),S$r=l(),Oc=a("p"),R$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eY=a("a"),B$r=o("from_pretrained()"),P$r=o(" class method or the "),oY=a("a"),I$r=o("from_config()"),q$r=o(` class
method.`),N$r=l(),Mx=a("p"),j$r=o("This class cannot be instantiated directly using "),z0e=a("code"),D$r=o("__init__()"),G$r=o(" (throws an error)."),O$r=l(),Xt=a("div"),F(Ex.$$.fragment),V$r=l(),Q0e=a("p"),X$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z$r=l(),Vc=a("p"),Q$r=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),W$r=o("not"),H$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),U$r=o("from_pretrained()"),J$r=o(" to load the model weights."),Y$r=l(),F(EC.$$.fragment),K$r=l(),Xr=a("div"),F(Cx.$$.fragment),Z$r=l(),H0e=a("p"),ekr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),okr=l(),bn=a("p"),rkr=o("The model class to instantiate is selected based on the "),U0e=a("code"),tkr=o("model_type"),akr=o(` property of the config object (either
passed as an argument or loaded from `),J0e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(":"),dkr=l(),xe=a("ul"),CC=a("li"),K0e=a("strong"),ckr=o("albert"),fkr=o(" \u2014 "),tY=a("a"),mkr=o("FlaxAlbertForSequenceClassification"),gkr=o(" (ALBERT model)"),hkr=l(),wC=a("li"),Z0e=a("strong"),pkr=o("bart"),ukr=o(" \u2014 "),aY=a("a"),_kr=o("FlaxBartForSequenceClassification"),bkr=o(" (BART model)"),vkr=l(),AC=a("li"),eTe=a("strong"),Fkr=o("bert"),Tkr=o(" \u2014 "),nY=a("a"),Mkr=o("FlaxBertForSequenceClassification"),Ekr=o(" (BERT model)"),Ckr=l(),yC=a("li"),oTe=a("strong"),wkr=o("big_bird"),Akr=o(" \u2014 "),sY=a("a"),ykr=o("FlaxBigBirdForSequenceClassification"),Lkr=o(" (BigBird model)"),xkr=l(),LC=a("li"),rTe=a("strong"),$kr=o("distilbert"),kkr=o(" \u2014 "),lY=a("a"),Skr=o("FlaxDistilBertForSequenceClassification"),Rkr=o(" (DistilBERT model)"),Bkr=l(),xC=a("li"),tTe=a("strong"),Pkr=o("electra"),Ikr=o(" \u2014 "),iY=a("a"),qkr=o("FlaxElectraForSequenceClassification"),Nkr=o(" (ELECTRA model)"),jkr=l(),$C=a("li"),aTe=a("strong"),Dkr=o("mbart"),Gkr=o(" \u2014 "),dY=a("a"),Okr=o("FlaxMBartForSequenceClassification"),Vkr=o(" (mBART model)"),Xkr=l(),kC=a("li"),nTe=a("strong"),zkr=o("roberta"),Qkr=o(" \u2014 "),cY=a("a"),Wkr=o("FlaxRobertaForSequenceClassification"),Hkr=o(" (RoBERTa model)"),Ukr=l(),SC=a("li"),sTe=a("strong"),Jkr=o("roformer"),Ykr=o(" \u2014 "),fY=a("a"),Kkr=o("FlaxRoFormerForSequenceClassification"),Zkr=o(" (RoFormer model)"),eSr=l(),RC=a("li"),lTe=a("strong"),oSr=o("xlm-roberta"),rSr=o(" \u2014 "),mY=a("a"),tSr=o("FlaxXLMRobertaForSequenceClassification"),aSr=o(" (XLM-RoBERTa model)"),nSr=l(),F(BC.$$.fragment),Bqe=l(),Xc=a("h2"),PC=a("a"),iTe=a("span"),F(wx.$$.fragment),sSr=l(),dTe=a("span"),lSr=o("FlaxAutoModelForQuestionAnswering"),Pqe=l(),_r=a("div"),F(Ax.$$.fragment),iSr=l(),zc=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gY=a("a"),cSr=o("from_pretrained()"),fSr=o(" class method or the "),hY=a("a"),mSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),yx=a("p"),pSr=o("This class cannot be instantiated directly using "),cTe=a("code"),uSr=o("__init__()"),_Sr=o(" (throws an error)."),bSr=l(),zt=a("div"),F(Lx.$$.fragment),vSr=l(),fTe=a("p"),FSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TSr=l(),Qc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),ySr=l(),F(IC.$$.fragment),LSr=l(),zr=a("div"),F(xx.$$.fragment),xSr=l(),gTe=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kSr=l(),vn=a("p"),SSr=o("The model class to instantiate is selected based on the "),hTe=a("code"),RSr=o("model_type"),BSr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),PSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),qSr=o("pretrained_model_name_or_path"),NSr=o(":"),jSr=l(),$e=a("ul"),qC=a("li"),_Te=a("strong"),DSr=o("albert"),GSr=o(" \u2014 "),uY=a("a"),OSr=o("FlaxAlbertForQuestionAnswering"),VSr=o(" (ALBERT model)"),XSr=l(),NC=a("li"),bTe=a("strong"),zSr=o("bart"),QSr=o(" \u2014 "),_Y=a("a"),WSr=o("FlaxBartForQuestionAnswering"),HSr=o(" (BART model)"),USr=l(),jC=a("li"),vTe=a("strong"),JSr=o("bert"),YSr=o(" \u2014 "),bY=a("a"),KSr=o("FlaxBertForQuestionAnswering"),ZSr=o(" (BERT model)"),eRr=l(),DC=a("li"),FTe=a("strong"),oRr=o("big_bird"),rRr=o(" \u2014 "),vY=a("a"),tRr=o("FlaxBigBirdForQuestionAnswering"),aRr=o(" (BigBird model)"),nRr=l(),GC=a("li"),TTe=a("strong"),sRr=o("distilbert"),lRr=o(" \u2014 "),FY=a("a"),iRr=o("FlaxDistilBertForQuestionAnswering"),dRr=o(" (DistilBERT model)"),cRr=l(),OC=a("li"),MTe=a("strong"),fRr=o("electra"),mRr=o(" \u2014 "),TY=a("a"),gRr=o("FlaxElectraForQuestionAnswering"),hRr=o(" (ELECTRA model)"),pRr=l(),VC=a("li"),ETe=a("strong"),uRr=o("mbart"),_Rr=o(" \u2014 "),MY=a("a"),bRr=o("FlaxMBartForQuestionAnswering"),vRr=o(" (mBART model)"),FRr=l(),XC=a("li"),CTe=a("strong"),TRr=o("roberta"),MRr=o(" \u2014 "),EY=a("a"),ERr=o("FlaxRobertaForQuestionAnswering"),CRr=o(" (RoBERTa model)"),wRr=l(),zC=a("li"),wTe=a("strong"),ARr=o("roformer"),yRr=o(" \u2014 "),CY=a("a"),LRr=o("FlaxRoFormerForQuestionAnswering"),xRr=o(" (RoFormer model)"),$Rr=l(),QC=a("li"),ATe=a("strong"),kRr=o("xlm-roberta"),SRr=o(" \u2014 "),wY=a("a"),RRr=o("FlaxXLMRobertaForQuestionAnswering"),BRr=o(" (XLM-RoBERTa model)"),PRr=l(),F(WC.$$.fragment),Iqe=l(),Wc=a("h2"),HC=a("a"),yTe=a("span"),F($x.$$.fragment),IRr=l(),LTe=a("span"),qRr=o("FlaxAutoModelForTokenClassification"),qqe=l(),br=a("div"),F(kx.$$.fragment),NRr=l(),Hc=a("p"),jRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AY=a("a"),DRr=o("from_pretrained()"),GRr=o(" class method or the "),yY=a("a"),ORr=o("from_config()"),VRr=o(` class
method.`),XRr=l(),Sx=a("p"),zRr=o("This class cannot be instantiated directly using "),xTe=a("code"),QRr=o("__init__()"),WRr=o(" (throws an error)."),HRr=l(),Qt=a("div"),F(Rx.$$.fragment),URr=l(),$Te=a("p"),JRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YRr=l(),Uc=a("p"),KRr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),ZRr=o("not"),eBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),oBr=o("from_pretrained()"),rBr=o(" to load the model weights."),tBr=l(),F(UC.$$.fragment),aBr=l(),Qr=a("div"),F(Bx.$$.fragment),nBr=l(),STe=a("p"),sBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lBr=l(),Fn=a("p"),iBr=o("The model class to instantiate is selected based on the "),RTe=a("code"),dBr=o("model_type"),cBr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),fBr=o("pretrained_model_name_or_path"),mBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(":"),pBr=l(),De=a("ul"),JC=a("li"),ITe=a("strong"),uBr=o("albert"),_Br=o(" \u2014 "),xY=a("a"),bBr=o("FlaxAlbertForTokenClassification"),vBr=o(" (ALBERT model)"),FBr=l(),YC=a("li"),qTe=a("strong"),TBr=o("bert"),MBr=o(" \u2014 "),$Y=a("a"),EBr=o("FlaxBertForTokenClassification"),CBr=o(" (BERT model)"),wBr=l(),KC=a("li"),NTe=a("strong"),ABr=o("big_bird"),yBr=o(" \u2014 "),kY=a("a"),LBr=o("FlaxBigBirdForTokenClassification"),xBr=o(" (BigBird model)"),$Br=l(),ZC=a("li"),jTe=a("strong"),kBr=o("distilbert"),SBr=o(" \u2014 "),SY=a("a"),RBr=o("FlaxDistilBertForTokenClassification"),BBr=o(" (DistilBERT model)"),PBr=l(),e3=a("li"),DTe=a("strong"),IBr=o("electra"),qBr=o(" \u2014 "),RY=a("a"),NBr=o("FlaxElectraForTokenClassification"),jBr=o(" (ELECTRA model)"),DBr=l(),o3=a("li"),GTe=a("strong"),GBr=o("roberta"),OBr=o(" \u2014 "),BY=a("a"),VBr=o("FlaxRobertaForTokenClassification"),XBr=o(" (RoBERTa model)"),zBr=l(),r3=a("li"),OTe=a("strong"),QBr=o("roformer"),WBr=o(" \u2014 "),PY=a("a"),HBr=o("FlaxRoFormerForTokenClassification"),UBr=o(" (RoFormer model)"),JBr=l(),t3=a("li"),VTe=a("strong"),YBr=o("xlm-roberta"),KBr=o(" \u2014 "),IY=a("a"),ZBr=o("FlaxXLMRobertaForTokenClassification"),ePr=o(" (XLM-RoBERTa model)"),oPr=l(),F(a3.$$.fragment),Nqe=l(),Jc=a("h2"),n3=a("a"),XTe=a("span"),F(Px.$$.fragment),rPr=l(),zTe=a("span"),tPr=o("FlaxAutoModelForMultipleChoice"),jqe=l(),vr=a("div"),F(Ix.$$.fragment),aPr=l(),Yc=a("p"),nPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qY=a("a"),sPr=o("from_pretrained()"),lPr=o(" class method or the "),NY=a("a"),iPr=o("from_config()"),dPr=o(` class
method.`),cPr=l(),qx=a("p"),fPr=o("This class cannot be instantiated directly using "),QTe=a("code"),mPr=o("__init__()"),gPr=o(" (throws an error)."),hPr=l(),Wt=a("div"),F(Nx.$$.fragment),pPr=l(),WTe=a("p"),uPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Pr=l(),Kc=a("p"),bPr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),vPr=o("not"),FPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),TPr=o("from_pretrained()"),MPr=o(" to load the model weights."),EPr=l(),F(s3.$$.fragment),CPr=l(),Wr=a("div"),F(jx.$$.fragment),wPr=l(),UTe=a("p"),APr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yPr=l(),Tn=a("p"),LPr=o("The model class to instantiate is selected based on the "),JTe=a("code"),xPr=o("model_type"),$Pr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),kPr=o("pretrained_model_name_or_path"),SPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),RPr=o("pretrained_model_name_or_path"),BPr=o(":"),PPr=l(),Ge=a("ul"),l3=a("li"),ZTe=a("strong"),IPr=o("albert"),qPr=o(" \u2014 "),DY=a("a"),NPr=o("FlaxAlbertForMultipleChoice"),jPr=o(" (ALBERT model)"),DPr=l(),i3=a("li"),eMe=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),GY=a("a"),VPr=o("FlaxBertForMultipleChoice"),XPr=o(" (BERT model)"),zPr=l(),d3=a("li"),oMe=a("strong"),QPr=o("big_bird"),WPr=o(" \u2014 "),OY=a("a"),HPr=o("FlaxBigBirdForMultipleChoice"),UPr=o(" (BigBird model)"),JPr=l(),c3=a("li"),rMe=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),VY=a("a"),ZPr=o("FlaxDistilBertForMultipleChoice"),eIr=o(" (DistilBERT model)"),oIr=l(),f3=a("li"),tMe=a("strong"),rIr=o("electra"),tIr=o(" \u2014 "),XY=a("a"),aIr=o("FlaxElectraForMultipleChoice"),nIr=o(" (ELECTRA model)"),sIr=l(),m3=a("li"),aMe=a("strong"),lIr=o("roberta"),iIr=o(" \u2014 "),zY=a("a"),dIr=o("FlaxRobertaForMultipleChoice"),cIr=o(" (RoBERTa model)"),fIr=l(),g3=a("li"),nMe=a("strong"),mIr=o("roformer"),gIr=o(" \u2014 "),QY=a("a"),hIr=o("FlaxRoFormerForMultipleChoice"),pIr=o(" (RoFormer model)"),uIr=l(),h3=a("li"),sMe=a("strong"),_Ir=o("xlm-roberta"),bIr=o(" \u2014 "),WY=a("a"),vIr=o("FlaxXLMRobertaForMultipleChoice"),FIr=o(" (XLM-RoBERTa model)"),TIr=l(),F(p3.$$.fragment),Dqe=l(),Zc=a("h2"),u3=a("a"),lMe=a("span"),F(Dx.$$.fragment),MIr=l(),iMe=a("span"),EIr=o("FlaxAutoModelForNextSentencePrediction"),Gqe=l(),Fr=a("div"),F(Gx.$$.fragment),CIr=l(),ef=a("p"),wIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HY=a("a"),AIr=o("from_pretrained()"),yIr=o(" class method or the "),UY=a("a"),LIr=o("from_config()"),xIr=o(` class
method.`),$Ir=l(),Ox=a("p"),kIr=o("This class cannot be instantiated directly using "),dMe=a("code"),SIr=o("__init__()"),RIr=o(" (throws an error)."),BIr=l(),Ht=a("div"),F(Vx.$$.fragment),PIr=l(),cMe=a("p"),IIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qIr=l(),of=a("p"),NIr=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),jIr=o("not"),DIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),GIr=o("from_pretrained()"),OIr=o(" to load the model weights."),VIr=l(),F(_3.$$.fragment),XIr=l(),Hr=a("div"),F(Xx.$$.fragment),zIr=l(),mMe=a("p"),QIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WIr=l(),Mn=a("p"),HIr=o("The model class to instantiate is selected based on the "),gMe=a("code"),UIr=o("model_type"),JIr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),YIr=o("pretrained_model_name_or_path"),KIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(":"),oqr=l(),uMe=a("ul"),b3=a("li"),_Me=a("strong"),rqr=o("bert"),tqr=o(" \u2014 "),YY=a("a"),aqr=o("FlaxBertForNextSentencePrediction"),nqr=o(" (BERT model)"),sqr=l(),F(v3.$$.fragment),Oqe=l(),rf=a("h2"),F3=a("a"),bMe=a("span"),F(zx.$$.fragment),lqr=l(),vMe=a("span"),iqr=o("FlaxAutoModelForImageClassification"),Vqe=l(),Tr=a("div"),F(Qx.$$.fragment),dqr=l(),tf=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KY=a("a"),fqr=o("from_pretrained()"),mqr=o(" class method or the "),ZY=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),pqr=l(),Wx=a("p"),uqr=o("This class cannot be instantiated directly using "),FMe=a("code"),_qr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),Ut=a("div"),F(Hx.$$.fragment),Fqr=l(),TMe=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mqr=l(),af=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),Aqr=o("from_pretrained()"),yqr=o(" to load the model weights."),Lqr=l(),F(T3.$$.fragment),xqr=l(),Ur=a("div"),F(Ux.$$.fragment),$qr=l(),EMe=a("p"),kqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Sqr=l(),En=a("p"),Rqr=o("The model class to instantiate is selected based on the "),CMe=a("code"),Bqr=o("model_type"),Pqr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),Iqr=o("pretrained_model_name_or_path"),qqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),Jx=a("ul"),M3=a("li"),yMe=a("strong"),Gqr=o("beit"),Oqr=o(" \u2014 "),oK=a("a"),Vqr=o("FlaxBeitForImageClassification"),Xqr=o(" (BEiT model)"),zqr=l(),E3=a("li"),LMe=a("strong"),Qqr=o("vit"),Wqr=o(" \u2014 "),rK=a("a"),Hqr=o("FlaxViTForImageClassification"),Uqr=o(" (ViT model)"),Jqr=l(),F(C3.$$.fragment),Xqe=l(),nf=a("h2"),w3=a("a"),xMe=a("span"),F(Yx.$$.fragment),Yqr=l(),$Me=a("span"),Kqr=o("FlaxAutoModelForVision2Seq"),zqe=l(),Mr=a("div"),F(Kx.$$.fragment),Zqr=l(),sf=a("p"),eNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tK=a("a"),oNr=o("from_pretrained()"),rNr=o(" class method or the "),aK=a("a"),tNr=o("from_config()"),aNr=o(` class
method.`),nNr=l(),Zx=a("p"),sNr=o("This class cannot be instantiated directly using "),kMe=a("code"),lNr=o("__init__()"),iNr=o(" (throws an error)."),dNr=l(),Jt=a("div"),F(e9.$$.fragment),cNr=l(),SMe=a("p"),fNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mNr=l(),lf=a("p"),gNr=o(`Note:
Loading a model from its configuration file does `),RMe=a("strong"),hNr=o("not"),pNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),uNr=o("from_pretrained()"),_Nr=o(" to load the model weights."),bNr=l(),F(A3.$$.fragment),vNr=l(),Jr=a("div"),F(o9.$$.fragment),FNr=l(),BMe=a("p"),TNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MNr=l(),Cn=a("p"),ENr=o("The model class to instantiate is selected based on the "),PMe=a("code"),CNr=o("model_type"),wNr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),LNr=o("pretrained_model_name_or_path"),xNr=o(":"),$Nr=l(),NMe=a("ul"),y3=a("li"),jMe=a("strong"),kNr=o("vision-encoder-decoder"),SNr=o(" \u2014 "),sK=a("a"),RNr=o("FlaxVisionEncoderDecoderModel"),BNr=o(" (Vision Encoder decoder model)"),PNr=l(),F(L3.$$.fragment),this.h()},l(f){const _=c6t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var r9=s(p);m=n(r9,"A",{id:!0,class:!0,href:!0});var DMe=s(m);u=n(DMe,"SPAN",{});var GMe=s(u);T(d.$$.fragment,GMe),GMe.forEach(t),DMe.forEach(t),h=i(r9),Mo=n(r9,"SPAN",{});var OMe=s(Mo);li=r(OMe,"Auto Classes"),OMe.forEach(t),r9.forEach(t),mf=i(f),et=n(f,"P",{});var t9=s(et);ii=r(t9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(t9,"CODE",{});var VMe=s(di);WA=r(VMe,"from_pretrained()"),VMe.forEach(t),gf=r(t9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),t9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var XMe=s(An);HA=r(XMe,"AutoConfig"),XMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var zMe=s(Ln);UA=r(zMe,"AutoModel"),zMe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var QMe=s(xn);JA=r(QMe,"AutoTokenizer"),QMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var a9=s(Ae);h$=r(a9,"will create a model that is an instance of "),gi=n(a9,"A",{href:!0});var WMe=s(gi);p$=r(WMe,"BertModel"),WMe.forEach(t),u$=r(a9,"."),a9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var n9=s(Ea);_$=r(n9,"There is one class of "),pf=n(n9,"CODE",{});var HMe=s(pf);b$=r(HMe,"AutoModel"),HMe.forEach(t),eDe=r(n9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),n9.forEach(t),VPe=i(f),hi=n(f,"H2",{class:!0});var s9=s(hi);uf=n(s9,"A",{id:!0,class:!0,href:!0});var UMe=s(uf);eee=n(UMe,"SPAN",{});var JMe=s(eee);T(YA.$$.fragment,JMe),JMe.forEach(t),UMe.forEach(t),oDe=i(s9),oee=n(s9,"SPAN",{});var YMe=s(oee);rDe=r(YMe,"Extending the Auto Classes"),YMe.forEach(t),s9.forEach(t),XPe=i(f),$n=n(f,"P",{});var df=s($n);tDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ree=n(df,"CODE",{});var KMe=s(ree);aDe=r(KMe,"NewModel"),KMe.forEach(t),nDe=r(df,", make sure you have a "),tee=n(df,"CODE",{});var ZMe=s(tee);sDe=r(ZMe,"NewModelConfig"),ZMe.forEach(t),lDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),zPe=i(f),T(KA.$$.fragment,f),QPe=i(f),v$=n(f,"P",{});var e4e=s(v$);iDe=r(e4e,"You will then be able to use the auto classes like you would usually do!"),e4e.forEach(t),WPe=i(f),T(_f.$$.fragment,f),HPe=i(f),pi=n(f,"H2",{class:!0});var l9=s(pi);bf=n(l9,"A",{id:!0,class:!0,href:!0});var o4e=s(bf);aee=n(o4e,"SPAN",{});var r4e=s(aee);T(ZA.$$.fragment,r4e),r4e.forEach(t),o4e.forEach(t),dDe=i(l9),nee=n(l9,"SPAN",{});var t4e=s(nee);cDe=r(t4e,"AutoConfig"),t4e.forEach(t),l9.forEach(t),UPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(e6.$$.fragment,Kr),fDe=i(Kr),o6=n(Kr,"P",{});var i9=s(o6);mDe=r(i9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=n(i9,"A",{href:!0});var a4e=s(F$);gDe=r(a4e,"from_pretrained()"),a4e.forEach(t),hDe=r(i9," class method."),i9.forEach(t),pDe=i(Kr),r6=n(Kr,"P",{});var d9=s(r6);uDe=r(d9,"This class cannot be instantiated directly using "),see=n(d9,"CODE",{});var n4e=s(see);_De=r(n4e,"__init__()"),n4e.forEach(t),bDe=r(d9," (throws an error)."),d9.forEach(t),vDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(t6.$$.fragment,Zr),FDe=i(Zr),lee=n(Zr,"P",{});var s4e=s(lee);TDe=r(s4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),s4e.forEach(t),MDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);EDe=r(cf,"The configuration class to instantiate is selected based on the "),iee=n(cf,"CODE",{});var l4e=s(iee);CDe=r(l4e,"model_type"),l4e.forEach(t),wDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dee=n(cf,"CODE",{});var i4e=s(dee);ADe=r(i4e,"pretrained_model_name_or_path"),i4e.forEach(t),yDe=r(cf,":"),cf.forEach(t),LDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var x3=s(vf);cee=n(x3,"STRONG",{});var d4e=s(cee);xDe=r(d4e,"albert"),d4e.forEach(t),$De=r(x3," \u2014 "),T$=n(x3,"A",{href:!0});var c4e=s(T$);kDe=r(c4e,"AlbertConfig"),c4e.forEach(t),SDe=r(x3," (ALBERT model)"),x3.forEach(t),RDe=i(y),Ff=n(y,"LI",{});var $3=s(Ff);fee=n($3,"STRONG",{});var f4e=s(fee);BDe=r(f4e,"bart"),f4e.forEach(t),PDe=r($3," \u2014 "),M$=n($3,"A",{href:!0});var m4e=s(M$);IDe=r(m4e,"BartConfig"),m4e.forEach(t),qDe=r($3," (BART model)"),$3.forEach(t),NDe=i(y),Tf=n(y,"LI",{});var k3=s(Tf);mee=n(k3,"STRONG",{});var g4e=s(mee);jDe=r(g4e,"beit"),g4e.forEach(t),DDe=r(k3," \u2014 "),E$=n(k3,"A",{href:!0});var h4e=s(E$);GDe=r(h4e,"BeitConfig"),h4e.forEach(t),ODe=r(k3," (BEiT model)"),k3.forEach(t),VDe=i(y),Mf=n(y,"LI",{});var S3=s(Mf);gee=n(S3,"STRONG",{});var p4e=s(gee);XDe=r(p4e,"bert"),p4e.forEach(t),zDe=r(S3," \u2014 "),C$=n(S3,"A",{href:!0});var u4e=s(C$);QDe=r(u4e,"BertConfig"),u4e.forEach(t),WDe=r(S3," (BERT model)"),S3.forEach(t),HDe=i(y),Ef=n(y,"LI",{});var R3=s(Ef);hee=n(R3,"STRONG",{});var _4e=s(hee);UDe=r(_4e,"bert-generation"),_4e.forEach(t),JDe=r(R3," \u2014 "),w$=n(R3,"A",{href:!0});var b4e=s(w$);YDe=r(b4e,"BertGenerationConfig"),b4e.forEach(t),KDe=r(R3," (Bert Generation model)"),R3.forEach(t),ZDe=i(y),Cf=n(y,"LI",{});var B3=s(Cf);pee=n(B3,"STRONG",{});var v4e=s(pee);eGe=r(v4e,"big_bird"),v4e.forEach(t),oGe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var F4e=s(A$);rGe=r(F4e,"BigBirdConfig"),F4e.forEach(t),tGe=r(B3," (BigBird model)"),B3.forEach(t),aGe=i(y),wf=n(y,"LI",{});var P3=s(wf);uee=n(P3,"STRONG",{});var T4e=s(uee);nGe=r(T4e,"bigbird_pegasus"),T4e.forEach(t),sGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var M4e=s(y$);lGe=r(M4e,"BigBirdPegasusConfig"),M4e.forEach(t),iGe=r(P3," (BigBirdPegasus model)"),P3.forEach(t),dGe=i(y),Af=n(y,"LI",{});var I3=s(Af);_ee=n(I3,"STRONG",{});var E4e=s(_ee);cGe=r(E4e,"blenderbot"),E4e.forEach(t),fGe=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var C4e=s(L$);mGe=r(C4e,"BlenderbotConfig"),C4e.forEach(t),gGe=r(I3," (Blenderbot model)"),I3.forEach(t),hGe=i(y),yf=n(y,"LI",{});var q3=s(yf);bee=n(q3,"STRONG",{});var w4e=s(bee);pGe=r(w4e,"blenderbot-small"),w4e.forEach(t),uGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var A4e=s(x$);_Ge=r(A4e,"BlenderbotSmallConfig"),A4e.forEach(t),bGe=r(q3," (BlenderbotSmall model)"),q3.forEach(t),vGe=i(y),Lf=n(y,"LI",{});var N3=s(Lf);vee=n(N3,"STRONG",{});var y4e=s(vee);FGe=r(y4e,"camembert"),y4e.forEach(t),TGe=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var L4e=s($$);MGe=r(L4e,"CamembertConfig"),L4e.forEach(t),EGe=r(N3," (CamemBERT model)"),N3.forEach(t),CGe=i(y),xf=n(y,"LI",{});var j3=s(xf);Fee=n(j3,"STRONG",{});var x4e=s(Fee);wGe=r(x4e,"canine"),x4e.forEach(t),AGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var $4e=s(k$);yGe=r($4e,"CanineConfig"),$4e.forEach(t),LGe=r(j3," (Canine model)"),j3.forEach(t),xGe=i(y),$f=n(y,"LI",{});var D3=s($f);Tee=n(D3,"STRONG",{});var k4e=s(Tee);$Ge=r(k4e,"clip"),k4e.forEach(t),kGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var S4e=s(S$);SGe=r(S4e,"CLIPConfig"),S4e.forEach(t),RGe=r(D3," (CLIP model)"),D3.forEach(t),BGe=i(y),kf=n(y,"LI",{});var G3=s(kf);Mee=n(G3,"STRONG",{});var R4e=s(Mee);PGe=r(R4e,"convbert"),R4e.forEach(t),IGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var B4e=s(R$);qGe=r(B4e,"ConvBertConfig"),B4e.forEach(t),NGe=r(G3," (ConvBERT model)"),G3.forEach(t),jGe=i(y),Sf=n(y,"LI",{});var O3=s(Sf);Eee=n(O3,"STRONG",{});var P4e=s(Eee);DGe=r(P4e,"convnext"),P4e.forEach(t),GGe=r(O3," \u2014 "),B$=n(O3,"A",{href:!0});var I4e=s(B$);OGe=r(I4e,"ConvNextConfig"),I4e.forEach(t),VGe=r(O3," (ConvNext model)"),O3.forEach(t),XGe=i(y),Rf=n(y,"LI",{});var V3=s(Rf);Cee=n(V3,"STRONG",{});var q4e=s(Cee);zGe=r(q4e,"ctrl"),q4e.forEach(t),QGe=r(V3," \u2014 "),P$=n(V3,"A",{href:!0});var N4e=s(P$);WGe=r(N4e,"CTRLConfig"),N4e.forEach(t),HGe=r(V3," (CTRL model)"),V3.forEach(t),UGe=i(y),Bf=n(y,"LI",{});var X3=s(Bf);wee=n(X3,"STRONG",{});var j4e=s(wee);JGe=r(j4e,"data2vec-audio"),j4e.forEach(t),YGe=r(X3," \u2014 "),I$=n(X3,"A",{href:!0});var D4e=s(I$);KGe=r(D4e,"Data2VecAudioConfig"),D4e.forEach(t),ZGe=r(X3," (Data2VecAudio model)"),X3.forEach(t),eOe=i(y),Pf=n(y,"LI",{});var z3=s(Pf);Aee=n(z3,"STRONG",{});var G4e=s(Aee);oOe=r(G4e,"data2vec-text"),G4e.forEach(t),rOe=r(z3," \u2014 "),q$=n(z3,"A",{href:!0});var O4e=s(q$);tOe=r(O4e,"Data2VecTextConfig"),O4e.forEach(t),aOe=r(z3," (Data2VecText model)"),z3.forEach(t),nOe=i(y),If=n(y,"LI",{});var Q3=s(If);yee=n(Q3,"STRONG",{});var V4e=s(yee);sOe=r(V4e,"data2vec-vision"),V4e.forEach(t),lOe=r(Q3," \u2014 "),N$=n(Q3,"A",{href:!0});var X4e=s(N$);iOe=r(X4e,"Data2VecVisionConfig"),X4e.forEach(t),dOe=r(Q3," (Data2VecVision model)"),Q3.forEach(t),cOe=i(y),qf=n(y,"LI",{});var W3=s(qf);Lee=n(W3,"STRONG",{});var z4e=s(Lee);fOe=r(z4e,"deberta"),z4e.forEach(t),mOe=r(W3," \u2014 "),j$=n(W3,"A",{href:!0});var Q4e=s(j$);gOe=r(Q4e,"DebertaConfig"),Q4e.forEach(t),hOe=r(W3," (DeBERTa model)"),W3.forEach(t),pOe=i(y),Nf=n(y,"LI",{});var H3=s(Nf);xee=n(H3,"STRONG",{});var W4e=s(xee);uOe=r(W4e,"deberta-v2"),W4e.forEach(t),_Oe=r(H3," \u2014 "),D$=n(H3,"A",{href:!0});var H4e=s(D$);bOe=r(H4e,"DebertaV2Config"),H4e.forEach(t),vOe=r(H3," (DeBERTa-v2 model)"),H3.forEach(t),FOe=i(y),jf=n(y,"LI",{});var U3=s(jf);$ee=n(U3,"STRONG",{});var U4e=s($ee);TOe=r(U4e,"decision_transformer"),U4e.forEach(t),MOe=r(U3," \u2014 "),G$=n(U3,"A",{href:!0});var J4e=s(G$);EOe=r(J4e,"DecisionTransformerConfig"),J4e.forEach(t),COe=r(U3," (Decision Transformer model)"),U3.forEach(t),wOe=i(y),Df=n(y,"LI",{});var J3=s(Df);kee=n(J3,"STRONG",{});var Y4e=s(kee);AOe=r(Y4e,"deit"),Y4e.forEach(t),yOe=r(J3," \u2014 "),O$=n(J3,"A",{href:!0});var K4e=s(O$);LOe=r(K4e,"DeiTConfig"),K4e.forEach(t),xOe=r(J3," (DeiT model)"),J3.forEach(t),$Oe=i(y),Gf=n(y,"LI",{});var Y3=s(Gf);See=n(Y3,"STRONG",{});var Z4e=s(See);kOe=r(Z4e,"detr"),Z4e.forEach(t),SOe=r(Y3," \u2014 "),V$=n(Y3,"A",{href:!0});var qNr=s(V$);ROe=r(qNr,"DetrConfig"),qNr.forEach(t),BOe=r(Y3," (DETR model)"),Y3.forEach(t),POe=i(y),Of=n(y,"LI",{});var eEe=s(Of);Ree=n(eEe,"STRONG",{});var NNr=s(Ree);IOe=r(NNr,"distilbert"),NNr.forEach(t),qOe=r(eEe," \u2014 "),X$=n(eEe,"A",{href:!0});var jNr=s(X$);NOe=r(jNr,"DistilBertConfig"),jNr.forEach(t),jOe=r(eEe," (DistilBERT model)"),eEe.forEach(t),DOe=i(y),Vf=n(y,"LI",{});var oEe=s(Vf);Bee=n(oEe,"STRONG",{});var DNr=s(Bee);GOe=r(DNr,"dpr"),DNr.forEach(t),OOe=r(oEe," \u2014 "),z$=n(oEe,"A",{href:!0});var GNr=s(z$);VOe=r(GNr,"DPRConfig"),GNr.forEach(t),XOe=r(oEe," (DPR model)"),oEe.forEach(t),zOe=i(y),Xf=n(y,"LI",{});var rEe=s(Xf);Pee=n(rEe,"STRONG",{});var ONr=s(Pee);QOe=r(ONr,"dpt"),ONr.forEach(t),WOe=r(rEe," \u2014 "),Q$=n(rEe,"A",{href:!0});var VNr=s(Q$);HOe=r(VNr,"DPTConfig"),VNr.forEach(t),UOe=r(rEe," (DPT model)"),rEe.forEach(t),JOe=i(y),zf=n(y,"LI",{});var tEe=s(zf);Iee=n(tEe,"STRONG",{});var XNr=s(Iee);YOe=r(XNr,"electra"),XNr.forEach(t),KOe=r(tEe," \u2014 "),W$=n(tEe,"A",{href:!0});var zNr=s(W$);ZOe=r(zNr,"ElectraConfig"),zNr.forEach(t),eVe=r(tEe," (ELECTRA model)"),tEe.forEach(t),oVe=i(y),Qf=n(y,"LI",{});var aEe=s(Qf);qee=n(aEe,"STRONG",{});var QNr=s(qee);rVe=r(QNr,"encoder-decoder"),QNr.forEach(t),tVe=r(aEe," \u2014 "),H$=n(aEe,"A",{href:!0});var WNr=s(H$);aVe=r(WNr,"EncoderDecoderConfig"),WNr.forEach(t),nVe=r(aEe," (Encoder decoder model)"),aEe.forEach(t),sVe=i(y),Wf=n(y,"LI",{});var nEe=s(Wf);Nee=n(nEe,"STRONG",{});var HNr=s(Nee);lVe=r(HNr,"flaubert"),HNr.forEach(t),iVe=r(nEe," \u2014 "),U$=n(nEe,"A",{href:!0});var UNr=s(U$);dVe=r(UNr,"FlaubertConfig"),UNr.forEach(t),cVe=r(nEe," (FlauBERT model)"),nEe.forEach(t),fVe=i(y),Hf=n(y,"LI",{});var sEe=s(Hf);jee=n(sEe,"STRONG",{});var JNr=s(jee);mVe=r(JNr,"flava"),JNr.forEach(t),gVe=r(sEe," \u2014 "),J$=n(sEe,"A",{href:!0});var YNr=s(J$);hVe=r(YNr,"FlavaConfig"),YNr.forEach(t),pVe=r(sEe," (Flava model)"),sEe.forEach(t),uVe=i(y),Uf=n(y,"LI",{});var lEe=s(Uf);Dee=n(lEe,"STRONG",{});var KNr=s(Dee);_Ve=r(KNr,"fnet"),KNr.forEach(t),bVe=r(lEe," \u2014 "),Y$=n(lEe,"A",{href:!0});var ZNr=s(Y$);vVe=r(ZNr,"FNetConfig"),ZNr.forEach(t),FVe=r(lEe," (FNet model)"),lEe.forEach(t),TVe=i(y),Jf=n(y,"LI",{});var iEe=s(Jf);Gee=n(iEe,"STRONG",{});var ejr=s(Gee);MVe=r(ejr,"fsmt"),ejr.forEach(t),EVe=r(iEe," \u2014 "),K$=n(iEe,"A",{href:!0});var ojr=s(K$);CVe=r(ojr,"FSMTConfig"),ojr.forEach(t),wVe=r(iEe," (FairSeq Machine-Translation model)"),iEe.forEach(t),AVe=i(y),Yf=n(y,"LI",{});var dEe=s(Yf);Oee=n(dEe,"STRONG",{});var rjr=s(Oee);yVe=r(rjr,"funnel"),rjr.forEach(t),LVe=r(dEe," \u2014 "),Z$=n(dEe,"A",{href:!0});var tjr=s(Z$);xVe=r(tjr,"FunnelConfig"),tjr.forEach(t),$Ve=r(dEe," (Funnel Transformer model)"),dEe.forEach(t),kVe=i(y),Kf=n(y,"LI",{});var cEe=s(Kf);Vee=n(cEe,"STRONG",{});var ajr=s(Vee);SVe=r(ajr,"glpn"),ajr.forEach(t),RVe=r(cEe," \u2014 "),ek=n(cEe,"A",{href:!0});var njr=s(ek);BVe=r(njr,"GLPNConfig"),njr.forEach(t),PVe=r(cEe," (GLPN model)"),cEe.forEach(t),IVe=i(y),Zf=n(y,"LI",{});var fEe=s(Zf);Xee=n(fEe,"STRONG",{});var sjr=s(Xee);qVe=r(sjr,"gpt2"),sjr.forEach(t),NVe=r(fEe," \u2014 "),ok=n(fEe,"A",{href:!0});var ljr=s(ok);jVe=r(ljr,"GPT2Config"),ljr.forEach(t),DVe=r(fEe," (OpenAI GPT-2 model)"),fEe.forEach(t),GVe=i(y),em=n(y,"LI",{});var mEe=s(em);zee=n(mEe,"STRONG",{});var ijr=s(zee);OVe=r(ijr,"gpt_neo"),ijr.forEach(t),VVe=r(mEe," \u2014 "),rk=n(mEe,"A",{href:!0});var djr=s(rk);XVe=r(djr,"GPTNeoConfig"),djr.forEach(t),zVe=r(mEe," (GPT Neo model)"),mEe.forEach(t),QVe=i(y),om=n(y,"LI",{});var gEe=s(om);Qee=n(gEe,"STRONG",{});var cjr=s(Qee);WVe=r(cjr,"gptj"),cjr.forEach(t),HVe=r(gEe," \u2014 "),tk=n(gEe,"A",{href:!0});var fjr=s(tk);UVe=r(fjr,"GPTJConfig"),fjr.forEach(t),JVe=r(gEe," (GPT-J model)"),gEe.forEach(t),YVe=i(y),rm=n(y,"LI",{});var hEe=s(rm);Wee=n(hEe,"STRONG",{});var mjr=s(Wee);KVe=r(mjr,"hubert"),mjr.forEach(t),ZVe=r(hEe," \u2014 "),ak=n(hEe,"A",{href:!0});var gjr=s(ak);eXe=r(gjr,"HubertConfig"),gjr.forEach(t),oXe=r(hEe," (Hubert model)"),hEe.forEach(t),rXe=i(y),tm=n(y,"LI",{});var pEe=s(tm);Hee=n(pEe,"STRONG",{});var hjr=s(Hee);tXe=r(hjr,"ibert"),hjr.forEach(t),aXe=r(pEe," \u2014 "),nk=n(pEe,"A",{href:!0});var pjr=s(nk);nXe=r(pjr,"IBertConfig"),pjr.forEach(t),sXe=r(pEe," (I-BERT model)"),pEe.forEach(t),lXe=i(y),am=n(y,"LI",{});var uEe=s(am);Uee=n(uEe,"STRONG",{});var ujr=s(Uee);iXe=r(ujr,"imagegpt"),ujr.forEach(t),dXe=r(uEe," \u2014 "),sk=n(uEe,"A",{href:!0});var _jr=s(sk);cXe=r(_jr,"ImageGPTConfig"),_jr.forEach(t),fXe=r(uEe," (ImageGPT model)"),uEe.forEach(t),mXe=i(y),nm=n(y,"LI",{});var _Ee=s(nm);Jee=n(_Ee,"STRONG",{});var bjr=s(Jee);gXe=r(bjr,"layoutlm"),bjr.forEach(t),hXe=r(_Ee," \u2014 "),lk=n(_Ee,"A",{href:!0});var vjr=s(lk);pXe=r(vjr,"LayoutLMConfig"),vjr.forEach(t),uXe=r(_Ee," (LayoutLM model)"),_Ee.forEach(t),_Xe=i(y),sm=n(y,"LI",{});var bEe=s(sm);Yee=n(bEe,"STRONG",{});var Fjr=s(Yee);bXe=r(Fjr,"layoutlmv2"),Fjr.forEach(t),vXe=r(bEe," \u2014 "),ik=n(bEe,"A",{href:!0});var Tjr=s(ik);FXe=r(Tjr,"LayoutLMv2Config"),Tjr.forEach(t),TXe=r(bEe," (LayoutLMv2 model)"),bEe.forEach(t),MXe=i(y),lm=n(y,"LI",{});var vEe=s(lm);Kee=n(vEe,"STRONG",{});var Mjr=s(Kee);EXe=r(Mjr,"led"),Mjr.forEach(t),CXe=r(vEe," \u2014 "),dk=n(vEe,"A",{href:!0});var Ejr=s(dk);wXe=r(Ejr,"LEDConfig"),Ejr.forEach(t),AXe=r(vEe," (LED model)"),vEe.forEach(t),yXe=i(y),im=n(y,"LI",{});var FEe=s(im);Zee=n(FEe,"STRONG",{});var Cjr=s(Zee);LXe=r(Cjr,"longformer"),Cjr.forEach(t),xXe=r(FEe," \u2014 "),ck=n(FEe,"A",{href:!0});var wjr=s(ck);$Xe=r(wjr,"LongformerConfig"),wjr.forEach(t),kXe=r(FEe," (Longformer model)"),FEe.forEach(t),SXe=i(y),dm=n(y,"LI",{});var TEe=s(dm);eoe=n(TEe,"STRONG",{});var Ajr=s(eoe);RXe=r(Ajr,"luke"),Ajr.forEach(t),BXe=r(TEe," \u2014 "),fk=n(TEe,"A",{href:!0});var yjr=s(fk);PXe=r(yjr,"LukeConfig"),yjr.forEach(t),IXe=r(TEe," (LUKE model)"),TEe.forEach(t),qXe=i(y),cm=n(y,"LI",{});var MEe=s(cm);ooe=n(MEe,"STRONG",{});var Ljr=s(ooe);NXe=r(Ljr,"lxmert"),Ljr.forEach(t),jXe=r(MEe," \u2014 "),mk=n(MEe,"A",{href:!0});var xjr=s(mk);DXe=r(xjr,"LxmertConfig"),xjr.forEach(t),GXe=r(MEe," (LXMERT model)"),MEe.forEach(t),OXe=i(y),fm=n(y,"LI",{});var EEe=s(fm);roe=n(EEe,"STRONG",{});var $jr=s(roe);VXe=r($jr,"m2m_100"),$jr.forEach(t),XXe=r(EEe," \u2014 "),gk=n(EEe,"A",{href:!0});var kjr=s(gk);zXe=r(kjr,"M2M100Config"),kjr.forEach(t),QXe=r(EEe," (M2M100 model)"),EEe.forEach(t),WXe=i(y),mm=n(y,"LI",{});var CEe=s(mm);toe=n(CEe,"STRONG",{});var Sjr=s(toe);HXe=r(Sjr,"marian"),Sjr.forEach(t),UXe=r(CEe," \u2014 "),hk=n(CEe,"A",{href:!0});var Rjr=s(hk);JXe=r(Rjr,"MarianConfig"),Rjr.forEach(t),YXe=r(CEe," (Marian model)"),CEe.forEach(t),KXe=i(y),gm=n(y,"LI",{});var wEe=s(gm);aoe=n(wEe,"STRONG",{});var Bjr=s(aoe);ZXe=r(Bjr,"maskformer"),Bjr.forEach(t),eze=r(wEe," \u2014 "),pk=n(wEe,"A",{href:!0});var Pjr=s(pk);oze=r(Pjr,"MaskFormerConfig"),Pjr.forEach(t),rze=r(wEe," (MaskFormer model)"),wEe.forEach(t),tze=i(y),hm=n(y,"LI",{});var AEe=s(hm);noe=n(AEe,"STRONG",{});var Ijr=s(noe);aze=r(Ijr,"mbart"),Ijr.forEach(t),nze=r(AEe," \u2014 "),uk=n(AEe,"A",{href:!0});var qjr=s(uk);sze=r(qjr,"MBartConfig"),qjr.forEach(t),lze=r(AEe," (mBART model)"),AEe.forEach(t),ize=i(y),pm=n(y,"LI",{});var yEe=s(pm);soe=n(yEe,"STRONG",{});var Njr=s(soe);dze=r(Njr,"megatron-bert"),Njr.forEach(t),cze=r(yEe," \u2014 "),_k=n(yEe,"A",{href:!0});var jjr=s(_k);fze=r(jjr,"MegatronBertConfig"),jjr.forEach(t),mze=r(yEe," (MegatronBert model)"),yEe.forEach(t),gze=i(y),um=n(y,"LI",{});var LEe=s(um);loe=n(LEe,"STRONG",{});var Djr=s(loe);hze=r(Djr,"mobilebert"),Djr.forEach(t),pze=r(LEe," \u2014 "),bk=n(LEe,"A",{href:!0});var Gjr=s(bk);uze=r(Gjr,"MobileBertConfig"),Gjr.forEach(t),_ze=r(LEe," (MobileBERT model)"),LEe.forEach(t),bze=i(y),_m=n(y,"LI",{});var xEe=s(_m);ioe=n(xEe,"STRONG",{});var Ojr=s(ioe);vze=r(Ojr,"mpnet"),Ojr.forEach(t),Fze=r(xEe," \u2014 "),vk=n(xEe,"A",{href:!0});var Vjr=s(vk);Tze=r(Vjr,"MPNetConfig"),Vjr.forEach(t),Mze=r(xEe," (MPNet model)"),xEe.forEach(t),Eze=i(y),bm=n(y,"LI",{});var $Ee=s(bm);doe=n($Ee,"STRONG",{});var Xjr=s(doe);Cze=r(Xjr,"mt5"),Xjr.forEach(t),wze=r($Ee," \u2014 "),Fk=n($Ee,"A",{href:!0});var zjr=s(Fk);Aze=r(zjr,"MT5Config"),zjr.forEach(t),yze=r($Ee," (mT5 model)"),$Ee.forEach(t),Lze=i(y),vm=n(y,"LI",{});var kEe=s(vm);coe=n(kEe,"STRONG",{});var Qjr=s(coe);xze=r(Qjr,"nystromformer"),Qjr.forEach(t),$ze=r(kEe," \u2014 "),Tk=n(kEe,"A",{href:!0});var Wjr=s(Tk);kze=r(Wjr,"NystromformerConfig"),Wjr.forEach(t),Sze=r(kEe," (Nystromformer model)"),kEe.forEach(t),Rze=i(y),Fm=n(y,"LI",{});var SEe=s(Fm);foe=n(SEe,"STRONG",{});var Hjr=s(foe);Bze=r(Hjr,"openai-gpt"),Hjr.forEach(t),Pze=r(SEe," \u2014 "),Mk=n(SEe,"A",{href:!0});var Ujr=s(Mk);Ize=r(Ujr,"OpenAIGPTConfig"),Ujr.forEach(t),qze=r(SEe," (OpenAI GPT model)"),SEe.forEach(t),Nze=i(y),Tm=n(y,"LI",{});var REe=s(Tm);moe=n(REe,"STRONG",{});var Jjr=s(moe);jze=r(Jjr,"opt"),Jjr.forEach(t),Dze=r(REe," \u2014 "),Ek=n(REe,"A",{href:!0});var Yjr=s(Ek);Gze=r(Yjr,"OPTConfig"),Yjr.forEach(t),Oze=r(REe," (OPT model)"),REe.forEach(t),Vze=i(y),Mm=n(y,"LI",{});var BEe=s(Mm);goe=n(BEe,"STRONG",{});var Kjr=s(goe);Xze=r(Kjr,"pegasus"),Kjr.forEach(t),zze=r(BEe," \u2014 "),Ck=n(BEe,"A",{href:!0});var Zjr=s(Ck);Qze=r(Zjr,"PegasusConfig"),Zjr.forEach(t),Wze=r(BEe," (Pegasus model)"),BEe.forEach(t),Hze=i(y),Em=n(y,"LI",{});var PEe=s(Em);hoe=n(PEe,"STRONG",{});var eDr=s(hoe);Uze=r(eDr,"perceiver"),eDr.forEach(t),Jze=r(PEe," \u2014 "),wk=n(PEe,"A",{href:!0});var oDr=s(wk);Yze=r(oDr,"PerceiverConfig"),oDr.forEach(t),Kze=r(PEe," (Perceiver model)"),PEe.forEach(t),Zze=i(y),Cm=n(y,"LI",{});var IEe=s(Cm);poe=n(IEe,"STRONG",{});var rDr=s(poe);eQe=r(rDr,"plbart"),rDr.forEach(t),oQe=r(IEe," \u2014 "),Ak=n(IEe,"A",{href:!0});var tDr=s(Ak);rQe=r(tDr,"PLBartConfig"),tDr.forEach(t),tQe=r(IEe," (PLBart model)"),IEe.forEach(t),aQe=i(y),wm=n(y,"LI",{});var qEe=s(wm);uoe=n(qEe,"STRONG",{});var aDr=s(uoe);nQe=r(aDr,"poolformer"),aDr.forEach(t),sQe=r(qEe," \u2014 "),yk=n(qEe,"A",{href:!0});var nDr=s(yk);lQe=r(nDr,"PoolFormerConfig"),nDr.forEach(t),iQe=r(qEe," (PoolFormer model)"),qEe.forEach(t),dQe=i(y),Am=n(y,"LI",{});var NEe=s(Am);_oe=n(NEe,"STRONG",{});var sDr=s(_oe);cQe=r(sDr,"prophetnet"),sDr.forEach(t),fQe=r(NEe," \u2014 "),Lk=n(NEe,"A",{href:!0});var lDr=s(Lk);mQe=r(lDr,"ProphetNetConfig"),lDr.forEach(t),gQe=r(NEe," (ProphetNet model)"),NEe.forEach(t),hQe=i(y),ym=n(y,"LI",{});var jEe=s(ym);boe=n(jEe,"STRONG",{});var iDr=s(boe);pQe=r(iDr,"qdqbert"),iDr.forEach(t),uQe=r(jEe," \u2014 "),xk=n(jEe,"A",{href:!0});var dDr=s(xk);_Qe=r(dDr,"QDQBertConfig"),dDr.forEach(t),bQe=r(jEe," (QDQBert model)"),jEe.forEach(t),vQe=i(y),Lm=n(y,"LI",{});var DEe=s(Lm);voe=n(DEe,"STRONG",{});var cDr=s(voe);FQe=r(cDr,"rag"),cDr.forEach(t),TQe=r(DEe," \u2014 "),$k=n(DEe,"A",{href:!0});var fDr=s($k);MQe=r(fDr,"RagConfig"),fDr.forEach(t),EQe=r(DEe," (RAG model)"),DEe.forEach(t),CQe=i(y),xm=n(y,"LI",{});var GEe=s(xm);Foe=n(GEe,"STRONG",{});var mDr=s(Foe);wQe=r(mDr,"realm"),mDr.forEach(t),AQe=r(GEe," \u2014 "),kk=n(GEe,"A",{href:!0});var gDr=s(kk);yQe=r(gDr,"RealmConfig"),gDr.forEach(t),LQe=r(GEe," (Realm model)"),GEe.forEach(t),xQe=i(y),$m=n(y,"LI",{});var OEe=s($m);Toe=n(OEe,"STRONG",{});var hDr=s(Toe);$Qe=r(hDr,"reformer"),hDr.forEach(t),kQe=r(OEe," \u2014 "),Sk=n(OEe,"A",{href:!0});var pDr=s(Sk);SQe=r(pDr,"ReformerConfig"),pDr.forEach(t),RQe=r(OEe," (Reformer model)"),OEe.forEach(t),BQe=i(y),km=n(y,"LI",{});var VEe=s(km);Moe=n(VEe,"STRONG",{});var uDr=s(Moe);PQe=r(uDr,"regnet"),uDr.forEach(t),IQe=r(VEe," \u2014 "),Rk=n(VEe,"A",{href:!0});var _Dr=s(Rk);qQe=r(_Dr,"RegNetConfig"),_Dr.forEach(t),NQe=r(VEe," (RegNet model)"),VEe.forEach(t),jQe=i(y),Sm=n(y,"LI",{});var XEe=s(Sm);Eoe=n(XEe,"STRONG",{});var bDr=s(Eoe);DQe=r(bDr,"rembert"),bDr.forEach(t),GQe=r(XEe," \u2014 "),Bk=n(XEe,"A",{href:!0});var vDr=s(Bk);OQe=r(vDr,"RemBertConfig"),vDr.forEach(t),VQe=r(XEe," (RemBERT model)"),XEe.forEach(t),XQe=i(y),Rm=n(y,"LI",{});var zEe=s(Rm);Coe=n(zEe,"STRONG",{});var FDr=s(Coe);zQe=r(FDr,"resnet"),FDr.forEach(t),QQe=r(zEe," \u2014 "),Pk=n(zEe,"A",{href:!0});var TDr=s(Pk);WQe=r(TDr,"ResNetConfig"),TDr.forEach(t),HQe=r(zEe," (ResNet model)"),zEe.forEach(t),UQe=i(y),Bm=n(y,"LI",{});var QEe=s(Bm);woe=n(QEe,"STRONG",{});var MDr=s(woe);JQe=r(MDr,"retribert"),MDr.forEach(t),YQe=r(QEe," \u2014 "),Ik=n(QEe,"A",{href:!0});var EDr=s(Ik);KQe=r(EDr,"RetriBertConfig"),EDr.forEach(t),ZQe=r(QEe," (RetriBERT model)"),QEe.forEach(t),eWe=i(y),Pm=n(y,"LI",{});var WEe=s(Pm);Aoe=n(WEe,"STRONG",{});var CDr=s(Aoe);oWe=r(CDr,"roberta"),CDr.forEach(t),rWe=r(WEe," \u2014 "),qk=n(WEe,"A",{href:!0});var wDr=s(qk);tWe=r(wDr,"RobertaConfig"),wDr.forEach(t),aWe=r(WEe," (RoBERTa model)"),WEe.forEach(t),nWe=i(y),Im=n(y,"LI",{});var HEe=s(Im);yoe=n(HEe,"STRONG",{});var ADr=s(yoe);sWe=r(ADr,"roformer"),ADr.forEach(t),lWe=r(HEe," \u2014 "),Nk=n(HEe,"A",{href:!0});var yDr=s(Nk);iWe=r(yDr,"RoFormerConfig"),yDr.forEach(t),dWe=r(HEe," (RoFormer model)"),HEe.forEach(t),cWe=i(y),qm=n(y,"LI",{});var UEe=s(qm);Loe=n(UEe,"STRONG",{});var LDr=s(Loe);fWe=r(LDr,"segformer"),LDr.forEach(t),mWe=r(UEe," \u2014 "),jk=n(UEe,"A",{href:!0});var xDr=s(jk);gWe=r(xDr,"SegformerConfig"),xDr.forEach(t),hWe=r(UEe," (SegFormer model)"),UEe.forEach(t),pWe=i(y),Nm=n(y,"LI",{});var JEe=s(Nm);xoe=n(JEe,"STRONG",{});var $Dr=s(xoe);uWe=r($Dr,"sew"),$Dr.forEach(t),_We=r(JEe," \u2014 "),Dk=n(JEe,"A",{href:!0});var kDr=s(Dk);bWe=r(kDr,"SEWConfig"),kDr.forEach(t),vWe=r(JEe," (SEW model)"),JEe.forEach(t),FWe=i(y),jm=n(y,"LI",{});var YEe=s(jm);$oe=n(YEe,"STRONG",{});var SDr=s($oe);TWe=r(SDr,"sew-d"),SDr.forEach(t),MWe=r(YEe," \u2014 "),Gk=n(YEe,"A",{href:!0});var RDr=s(Gk);EWe=r(RDr,"SEWDConfig"),RDr.forEach(t),CWe=r(YEe," (SEW-D model)"),YEe.forEach(t),wWe=i(y),Dm=n(y,"LI",{});var KEe=s(Dm);koe=n(KEe,"STRONG",{});var BDr=s(koe);AWe=r(BDr,"speech-encoder-decoder"),BDr.forEach(t),yWe=r(KEe," \u2014 "),Ok=n(KEe,"A",{href:!0});var PDr=s(Ok);LWe=r(PDr,"SpeechEncoderDecoderConfig"),PDr.forEach(t),xWe=r(KEe," (Speech Encoder decoder model)"),KEe.forEach(t),$We=i(y),Gm=n(y,"LI",{});var ZEe=s(Gm);Soe=n(ZEe,"STRONG",{});var IDr=s(Soe);kWe=r(IDr,"speech_to_text"),IDr.forEach(t),SWe=r(ZEe," \u2014 "),Vk=n(ZEe,"A",{href:!0});var qDr=s(Vk);RWe=r(qDr,"Speech2TextConfig"),qDr.forEach(t),BWe=r(ZEe," (Speech2Text model)"),ZEe.forEach(t),PWe=i(y),Om=n(y,"LI",{});var eCe=s(Om);Roe=n(eCe,"STRONG",{});var NDr=s(Roe);IWe=r(NDr,"speech_to_text_2"),NDr.forEach(t),qWe=r(eCe," \u2014 "),Xk=n(eCe,"A",{href:!0});var jDr=s(Xk);NWe=r(jDr,"Speech2Text2Config"),jDr.forEach(t),jWe=r(eCe," (Speech2Text2 model)"),eCe.forEach(t),DWe=i(y),Vm=n(y,"LI",{});var oCe=s(Vm);Boe=n(oCe,"STRONG",{});var DDr=s(Boe);GWe=r(DDr,"splinter"),DDr.forEach(t),OWe=r(oCe," \u2014 "),zk=n(oCe,"A",{href:!0});var GDr=s(zk);VWe=r(GDr,"SplinterConfig"),GDr.forEach(t),XWe=r(oCe," (Splinter model)"),oCe.forEach(t),zWe=i(y),Xm=n(y,"LI",{});var rCe=s(Xm);Poe=n(rCe,"STRONG",{});var ODr=s(Poe);QWe=r(ODr,"squeezebert"),ODr.forEach(t),WWe=r(rCe," \u2014 "),Qk=n(rCe,"A",{href:!0});var VDr=s(Qk);HWe=r(VDr,"SqueezeBertConfig"),VDr.forEach(t),UWe=r(rCe," (SqueezeBERT model)"),rCe.forEach(t),JWe=i(y),zm=n(y,"LI",{});var tCe=s(zm);Ioe=n(tCe,"STRONG",{});var XDr=s(Ioe);YWe=r(XDr,"swin"),XDr.forEach(t),KWe=r(tCe," \u2014 "),Wk=n(tCe,"A",{href:!0});var zDr=s(Wk);ZWe=r(zDr,"SwinConfig"),zDr.forEach(t),eHe=r(tCe," (Swin model)"),tCe.forEach(t),oHe=i(y),Qm=n(y,"LI",{});var aCe=s(Qm);qoe=n(aCe,"STRONG",{});var QDr=s(qoe);rHe=r(QDr,"t5"),QDr.forEach(t),tHe=r(aCe," \u2014 "),Hk=n(aCe,"A",{href:!0});var WDr=s(Hk);aHe=r(WDr,"T5Config"),WDr.forEach(t),nHe=r(aCe," (T5 model)"),aCe.forEach(t),sHe=i(y),Wm=n(y,"LI",{});var nCe=s(Wm);Noe=n(nCe,"STRONG",{});var HDr=s(Noe);lHe=r(HDr,"tapas"),HDr.forEach(t),iHe=r(nCe," \u2014 "),Uk=n(nCe,"A",{href:!0});var UDr=s(Uk);dHe=r(UDr,"TapasConfig"),UDr.forEach(t),cHe=r(nCe," (TAPAS model)"),nCe.forEach(t),fHe=i(y),Hm=n(y,"LI",{});var sCe=s(Hm);joe=n(sCe,"STRONG",{});var JDr=s(joe);mHe=r(JDr,"tapex"),JDr.forEach(t),gHe=r(sCe," \u2014 "),Jk=n(sCe,"A",{href:!0});var YDr=s(Jk);hHe=r(YDr,"BartConfig"),YDr.forEach(t),pHe=r(sCe," (TAPEX model)"),sCe.forEach(t),uHe=i(y),Um=n(y,"LI",{});var lCe=s(Um);Doe=n(lCe,"STRONG",{});var KDr=s(Doe);_He=r(KDr,"transfo-xl"),KDr.forEach(t),bHe=r(lCe," \u2014 "),Yk=n(lCe,"A",{href:!0});var ZDr=s(Yk);vHe=r(ZDr,"TransfoXLConfig"),ZDr.forEach(t),FHe=r(lCe," (Transformer-XL model)"),lCe.forEach(t),THe=i(y),Jm=n(y,"LI",{});var iCe=s(Jm);Goe=n(iCe,"STRONG",{});var eGr=s(Goe);MHe=r(eGr,"trocr"),eGr.forEach(t),EHe=r(iCe," \u2014 "),Kk=n(iCe,"A",{href:!0});var oGr=s(Kk);CHe=r(oGr,"TrOCRConfig"),oGr.forEach(t),wHe=r(iCe," (TrOCR model)"),iCe.forEach(t),AHe=i(y),Ym=n(y,"LI",{});var dCe=s(Ym);Ooe=n(dCe,"STRONG",{});var rGr=s(Ooe);yHe=r(rGr,"unispeech"),rGr.forEach(t),LHe=r(dCe," \u2014 "),Zk=n(dCe,"A",{href:!0});var tGr=s(Zk);xHe=r(tGr,"UniSpeechConfig"),tGr.forEach(t),$He=r(dCe," (UniSpeech model)"),dCe.forEach(t),kHe=i(y),Km=n(y,"LI",{});var cCe=s(Km);Voe=n(cCe,"STRONG",{});var aGr=s(Voe);SHe=r(aGr,"unispeech-sat"),aGr.forEach(t),RHe=r(cCe," \u2014 "),eS=n(cCe,"A",{href:!0});var nGr=s(eS);BHe=r(nGr,"UniSpeechSatConfig"),nGr.forEach(t),PHe=r(cCe," (UniSpeechSat model)"),cCe.forEach(t),IHe=i(y),Zm=n(y,"LI",{});var fCe=s(Zm);Xoe=n(fCe,"STRONG",{});var sGr=s(Xoe);qHe=r(sGr,"van"),sGr.forEach(t),NHe=r(fCe," \u2014 "),oS=n(fCe,"A",{href:!0});var lGr=s(oS);jHe=r(lGr,"VanConfig"),lGr.forEach(t),DHe=r(fCe," (VAN model)"),fCe.forEach(t),GHe=i(y),eg=n(y,"LI",{});var mCe=s(eg);zoe=n(mCe,"STRONG",{});var iGr=s(zoe);OHe=r(iGr,"vilt"),iGr.forEach(t),VHe=r(mCe," \u2014 "),rS=n(mCe,"A",{href:!0});var dGr=s(rS);XHe=r(dGr,"ViltConfig"),dGr.forEach(t),zHe=r(mCe," (ViLT model)"),mCe.forEach(t),QHe=i(y),og=n(y,"LI",{});var gCe=s(og);Qoe=n(gCe,"STRONG",{});var cGr=s(Qoe);WHe=r(cGr,"vision-encoder-decoder"),cGr.forEach(t),HHe=r(gCe," \u2014 "),tS=n(gCe,"A",{href:!0});var fGr=s(tS);UHe=r(fGr,"VisionEncoderDecoderConfig"),fGr.forEach(t),JHe=r(gCe," (Vision Encoder decoder model)"),gCe.forEach(t),YHe=i(y),rg=n(y,"LI",{});var hCe=s(rg);Woe=n(hCe,"STRONG",{});var mGr=s(Woe);KHe=r(mGr,"vision-text-dual-encoder"),mGr.forEach(t),ZHe=r(hCe," \u2014 "),aS=n(hCe,"A",{href:!0});var gGr=s(aS);eUe=r(gGr,"VisionTextDualEncoderConfig"),gGr.forEach(t),oUe=r(hCe," (VisionTextDualEncoder model)"),hCe.forEach(t),rUe=i(y),tg=n(y,"LI",{});var pCe=s(tg);Hoe=n(pCe,"STRONG",{});var hGr=s(Hoe);tUe=r(hGr,"visual_bert"),hGr.forEach(t),aUe=r(pCe," \u2014 "),nS=n(pCe,"A",{href:!0});var pGr=s(nS);nUe=r(pGr,"VisualBertConfig"),pGr.forEach(t),sUe=r(pCe," (VisualBert model)"),pCe.forEach(t),lUe=i(y),ag=n(y,"LI",{});var uCe=s(ag);Uoe=n(uCe,"STRONG",{});var uGr=s(Uoe);iUe=r(uGr,"vit"),uGr.forEach(t),dUe=r(uCe," \u2014 "),sS=n(uCe,"A",{href:!0});var _Gr=s(sS);cUe=r(_Gr,"ViTConfig"),_Gr.forEach(t),fUe=r(uCe," (ViT model)"),uCe.forEach(t),mUe=i(y),ng=n(y,"LI",{});var _Ce=s(ng);Joe=n(_Ce,"STRONG",{});var bGr=s(Joe);gUe=r(bGr,"vit_mae"),bGr.forEach(t),hUe=r(_Ce," \u2014 "),lS=n(_Ce,"A",{href:!0});var vGr=s(lS);pUe=r(vGr,"ViTMAEConfig"),vGr.forEach(t),uUe=r(_Ce," (ViTMAE model)"),_Ce.forEach(t),_Ue=i(y),sg=n(y,"LI",{});var bCe=s(sg);Yoe=n(bCe,"STRONG",{});var FGr=s(Yoe);bUe=r(FGr,"wav2vec2"),FGr.forEach(t),vUe=r(bCe," \u2014 "),iS=n(bCe,"A",{href:!0});var TGr=s(iS);FUe=r(TGr,"Wav2Vec2Config"),TGr.forEach(t),TUe=r(bCe," (Wav2Vec2 model)"),bCe.forEach(t),MUe=i(y),lg=n(y,"LI",{});var vCe=s(lg);Koe=n(vCe,"STRONG",{});var MGr=s(Koe);EUe=r(MGr,"wavlm"),MGr.forEach(t),CUe=r(vCe," \u2014 "),dS=n(vCe,"A",{href:!0});var EGr=s(dS);wUe=r(EGr,"WavLMConfig"),EGr.forEach(t),AUe=r(vCe," (WavLM model)"),vCe.forEach(t),yUe=i(y),ig=n(y,"LI",{});var FCe=s(ig);Zoe=n(FCe,"STRONG",{});var CGr=s(Zoe);LUe=r(CGr,"xglm"),CGr.forEach(t),xUe=r(FCe," \u2014 "),cS=n(FCe,"A",{href:!0});var wGr=s(cS);$Ue=r(wGr,"XGLMConfig"),wGr.forEach(t),kUe=r(FCe," (XGLM model)"),FCe.forEach(t),SUe=i(y),dg=n(y,"LI",{});var TCe=s(dg);ere=n(TCe,"STRONG",{});var AGr=s(ere);RUe=r(AGr,"xlm"),AGr.forEach(t),BUe=r(TCe," \u2014 "),fS=n(TCe,"A",{href:!0});var yGr=s(fS);PUe=r(yGr,"XLMConfig"),yGr.forEach(t),IUe=r(TCe," (XLM model)"),TCe.forEach(t),qUe=i(y),cg=n(y,"LI",{});var MCe=s(cg);ore=n(MCe,"STRONG",{});var LGr=s(ore);NUe=r(LGr,"xlm-prophetnet"),LGr.forEach(t),jUe=r(MCe," \u2014 "),mS=n(MCe,"A",{href:!0});var xGr=s(mS);DUe=r(xGr,"XLMProphetNetConfig"),xGr.forEach(t),GUe=r(MCe," (XLMProphetNet model)"),MCe.forEach(t),OUe=i(y),fg=n(y,"LI",{});var ECe=s(fg);rre=n(ECe,"STRONG",{});var $Gr=s(rre);VUe=r($Gr,"xlm-roberta"),$Gr.forEach(t),XUe=r(ECe," \u2014 "),gS=n(ECe,"A",{href:!0});var kGr=s(gS);zUe=r(kGr,"XLMRobertaConfig"),kGr.forEach(t),QUe=r(ECe," (XLM-RoBERTa model)"),ECe.forEach(t),WUe=i(y),mg=n(y,"LI",{});var CCe=s(mg);tre=n(CCe,"STRONG",{});var SGr=s(tre);HUe=r(SGr,"xlm-roberta-xl"),SGr.forEach(t),UUe=r(CCe," \u2014 "),hS=n(CCe,"A",{href:!0});var RGr=s(hS);JUe=r(RGr,"XLMRobertaXLConfig"),RGr.forEach(t),YUe=r(CCe," (XLM-RoBERTa-XL model)"),CCe.forEach(t),KUe=i(y),gg=n(y,"LI",{});var wCe=s(gg);are=n(wCe,"STRONG",{});var BGr=s(are);ZUe=r(BGr,"xlnet"),BGr.forEach(t),eJe=r(wCe," \u2014 "),pS=n(wCe,"A",{href:!0});var PGr=s(pS);oJe=r(PGr,"XLNetConfig"),PGr.forEach(t),rJe=r(wCe," (XLNet model)"),wCe.forEach(t),tJe=i(y),hg=n(y,"LI",{});var ACe=s(hg);nre=n(ACe,"STRONG",{});var IGr=s(nre);aJe=r(IGr,"yolos"),IGr.forEach(t),nJe=r(ACe," \u2014 "),uS=n(ACe,"A",{href:!0});var qGr=s(uS);sJe=r(qGr,"YolosConfig"),qGr.forEach(t),lJe=r(ACe," (YOLOS model)"),ACe.forEach(t),iJe=i(y),pg=n(y,"LI",{});var yCe=s(pg);sre=n(yCe,"STRONG",{});var NGr=s(sre);dJe=r(NGr,"yoso"),NGr.forEach(t),cJe=r(yCe," \u2014 "),_S=n(yCe,"A",{href:!0});var jGr=s(_S);fJe=r(jGr,"YosoConfig"),jGr.forEach(t),mJe=r(yCe," (YOSO model)"),yCe.forEach(t),y.forEach(t),gJe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),hJe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Wqe=s(_g);T(a6.$$.fragment,Wqe),pJe=i(Wqe),lre=n(Wqe,"P",{});var DGr=s(lre);uJe=r(DGr,"Register a new configuration for this class."),DGr.forEach(t),Wqe.forEach(t),Kr.forEach(t),JPe=i(f),_i=n(f,"H2",{class:!0});var Hqe=s(_i);bg=n(Hqe,"A",{id:!0,class:!0,href:!0});var GGr=s(bg);ire=n(GGr,"SPAN",{});var OGr=s(ire);T(n6.$$.fragment,OGr),OGr.forEach(t),GGr.forEach(t),_Je=i(Hqe),dre=n(Hqe,"SPAN",{});var VGr=s(dre);bJe=r(VGr,"AutoTokenizer"),VGr.forEach(t),Hqe.forEach(t),YPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(s6.$$.fragment,Ps),vJe=i(Ps),l6=n(Ps,"P",{});var Uqe=s(l6);FJe=r(Uqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bS=n(Uqe,"A",{href:!0});var XGr=s(bS);TJe=r(XGr,"AutoTokenizer.from_pretrained()"),XGr.forEach(t),MJe=r(Uqe," class method."),Uqe.forEach(t),EJe=i(Ps),i6=n(Ps,"P",{});var Jqe=s(i6);CJe=r(Jqe,"This class cannot be instantiated directly using "),cre=n(Jqe,"CODE",{});var zGr=s(cre);wJe=r(zGr,"__init__()"),zGr.forEach(t),AJe=r(Jqe," (throws an error)."),Jqe.forEach(t),yJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(d6.$$.fragment,Is),LJe=i(Is),fre=n(Is,"P",{});var QGr=s(fre);xJe=r(QGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QGr.forEach(t),$Je=i(Is),Ca=n(Is,"P",{});var K3=s(Ca);kJe=r(K3,"The tokenizer class to instantiate is selected based on the "),mre=n(K3,"CODE",{});var WGr=s(mre);SJe=r(WGr,"model_type"),WGr.forEach(t),RJe=r(K3,` property of the config object (either
passed as an argument or loaded from `),gre=n(K3,"CODE",{});var HGr=s(gre);BJe=r(HGr,"pretrained_model_name_or_path"),HGr.forEach(t),PJe=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=n(K3,"CODE",{});var UGr=s(hre);IJe=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),qJe=r(K3,":"),K3.forEach(t),NJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var c9=s(kn);pre=n(c9,"STRONG",{});var JGr=s(pre);jJe=r(JGr,"albert"),JGr.forEach(t),DJe=r(c9," \u2014 "),vS=n(c9,"A",{href:!0});var YGr=s(vS);GJe=r(YGr,"AlbertTokenizer"),YGr.forEach(t),OJe=r(c9," or "),FS=n(c9,"A",{href:!0});var KGr=s(FS);VJe=r(KGr,"AlbertTokenizerFast"),KGr.forEach(t),XJe=r(c9," (ALBERT model)"),c9.forEach(t),zJe=i(S),Sn=n(S,"LI",{});var f9=s(Sn);ure=n(f9,"STRONG",{});var ZGr=s(ure);QJe=r(ZGr,"bart"),ZGr.forEach(t),WJe=r(f9," \u2014 "),TS=n(f9,"A",{href:!0});var eOr=s(TS);HJe=r(eOr,"BartTokenizer"),eOr.forEach(t),UJe=r(f9," or "),MS=n(f9,"A",{href:!0});var oOr=s(MS);JJe=r(oOr,"BartTokenizerFast"),oOr.forEach(t),YJe=r(f9," (BART model)"),f9.forEach(t),KJe=i(S),Rn=n(S,"LI",{});var m9=s(Rn);_re=n(m9,"STRONG",{});var rOr=s(_re);ZJe=r(rOr,"barthez"),rOr.forEach(t),eYe=r(m9," \u2014 "),ES=n(m9,"A",{href:!0});var tOr=s(ES);oYe=r(tOr,"BarthezTokenizer"),tOr.forEach(t),rYe=r(m9," or "),CS=n(m9,"A",{href:!0});var aOr=s(CS);tYe=r(aOr,"BarthezTokenizerFast"),aOr.forEach(t),aYe=r(m9," (BARThez model)"),m9.forEach(t),nYe=i(S),vg=n(S,"LI",{});var LCe=s(vg);bre=n(LCe,"STRONG",{});var nOr=s(bre);sYe=r(nOr,"bartpho"),nOr.forEach(t),lYe=r(LCe," \u2014 "),wS=n(LCe,"A",{href:!0});var sOr=s(wS);iYe=r(sOr,"BartphoTokenizer"),sOr.forEach(t),dYe=r(LCe," (BARTpho model)"),LCe.forEach(t),cYe=i(S),Bn=n(S,"LI",{});var g9=s(Bn);vre=n(g9,"STRONG",{});var lOr=s(vre);fYe=r(lOr,"bert"),lOr.forEach(t),mYe=r(g9," \u2014 "),AS=n(g9,"A",{href:!0});var iOr=s(AS);gYe=r(iOr,"BertTokenizer"),iOr.forEach(t),hYe=r(g9," or "),yS=n(g9,"A",{href:!0});var dOr=s(yS);pYe=r(dOr,"BertTokenizerFast"),dOr.forEach(t),uYe=r(g9," (BERT model)"),g9.forEach(t),_Ye=i(S),Fg=n(S,"LI",{});var xCe=s(Fg);Fre=n(xCe,"STRONG",{});var cOr=s(Fre);bYe=r(cOr,"bert-generation"),cOr.forEach(t),vYe=r(xCe," \u2014 "),LS=n(xCe,"A",{href:!0});var fOr=s(LS);FYe=r(fOr,"BertGenerationTokenizer"),fOr.forEach(t),TYe=r(xCe," (Bert Generation model)"),xCe.forEach(t),MYe=i(S),Tg=n(S,"LI",{});var $Ce=s(Tg);Tre=n($Ce,"STRONG",{});var mOr=s(Tre);EYe=r(mOr,"bert-japanese"),mOr.forEach(t),CYe=r($Ce," \u2014 "),xS=n($Ce,"A",{href:!0});var gOr=s(xS);wYe=r(gOr,"BertJapaneseTokenizer"),gOr.forEach(t),AYe=r($Ce," (BertJapanese model)"),$Ce.forEach(t),yYe=i(S),Mg=n(S,"LI",{});var kCe=s(Mg);Mre=n(kCe,"STRONG",{});var hOr=s(Mre);LYe=r(hOr,"bertweet"),hOr.forEach(t),xYe=r(kCe," \u2014 "),$S=n(kCe,"A",{href:!0});var pOr=s($S);$Ye=r(pOr,"BertweetTokenizer"),pOr.forEach(t),kYe=r(kCe," (Bertweet model)"),kCe.forEach(t),SYe=i(S),Pn=n(S,"LI",{});var h9=s(Pn);Ere=n(h9,"STRONG",{});var uOr=s(Ere);RYe=r(uOr,"big_bird"),uOr.forEach(t),BYe=r(h9," \u2014 "),kS=n(h9,"A",{href:!0});var _Or=s(kS);PYe=r(_Or,"BigBirdTokenizer"),_Or.forEach(t),IYe=r(h9," or "),SS=n(h9,"A",{href:!0});var bOr=s(SS);qYe=r(bOr,"BigBirdTokenizerFast"),bOr.forEach(t),NYe=r(h9," (BigBird model)"),h9.forEach(t),jYe=i(S),In=n(S,"LI",{});var p9=s(In);Cre=n(p9,"STRONG",{});var vOr=s(Cre);DYe=r(vOr,"bigbird_pegasus"),vOr.forEach(t),GYe=r(p9," \u2014 "),RS=n(p9,"A",{href:!0});var FOr=s(RS);OYe=r(FOr,"PegasusTokenizer"),FOr.forEach(t),VYe=r(p9," or "),BS=n(p9,"A",{href:!0});var TOr=s(BS);XYe=r(TOr,"PegasusTokenizerFast"),TOr.forEach(t),zYe=r(p9," (BigBirdPegasus model)"),p9.forEach(t),QYe=i(S),qn=n(S,"LI",{});var u9=s(qn);wre=n(u9,"STRONG",{});var MOr=s(wre);WYe=r(MOr,"blenderbot"),MOr.forEach(t),HYe=r(u9," \u2014 "),PS=n(u9,"A",{href:!0});var EOr=s(PS);UYe=r(EOr,"BlenderbotTokenizer"),EOr.forEach(t),JYe=r(u9," or "),IS=n(u9,"A",{href:!0});var COr=s(IS);YYe=r(COr,"BlenderbotTokenizerFast"),COr.forEach(t),KYe=r(u9," (Blenderbot model)"),u9.forEach(t),ZYe=i(S),Eg=n(S,"LI",{});var SCe=s(Eg);Are=n(SCe,"STRONG",{});var wOr=s(Are);eKe=r(wOr,"blenderbot-small"),wOr.forEach(t),oKe=r(SCe," \u2014 "),qS=n(SCe,"A",{href:!0});var AOr=s(qS);rKe=r(AOr,"BlenderbotSmallTokenizer"),AOr.forEach(t),tKe=r(SCe," (BlenderbotSmall model)"),SCe.forEach(t),aKe=i(S),Cg=n(S,"LI",{});var RCe=s(Cg);yre=n(RCe,"STRONG",{});var yOr=s(yre);nKe=r(yOr,"byt5"),yOr.forEach(t),sKe=r(RCe," \u2014 "),NS=n(RCe,"A",{href:!0});var LOr=s(NS);lKe=r(LOr,"ByT5Tokenizer"),LOr.forEach(t),iKe=r(RCe," (ByT5 model)"),RCe.forEach(t),dKe=i(S),Nn=n(S,"LI",{});var _9=s(Nn);Lre=n(_9,"STRONG",{});var xOr=s(Lre);cKe=r(xOr,"camembert"),xOr.forEach(t),fKe=r(_9," \u2014 "),jS=n(_9,"A",{href:!0});var $Or=s(jS);mKe=r($Or,"CamembertTokenizer"),$Or.forEach(t),gKe=r(_9," or "),DS=n(_9,"A",{href:!0});var kOr=s(DS);hKe=r(kOr,"CamembertTokenizerFast"),kOr.forEach(t),pKe=r(_9," (CamemBERT model)"),_9.forEach(t),uKe=i(S),wg=n(S,"LI",{});var BCe=s(wg);xre=n(BCe,"STRONG",{});var SOr=s(xre);_Ke=r(SOr,"canine"),SOr.forEach(t),bKe=r(BCe," \u2014 "),GS=n(BCe,"A",{href:!0});var ROr=s(GS);vKe=r(ROr,"CanineTokenizer"),ROr.forEach(t),FKe=r(BCe," (Canine model)"),BCe.forEach(t),TKe=i(S),jn=n(S,"LI",{});var b9=s(jn);$re=n(b9,"STRONG",{});var BOr=s($re);MKe=r(BOr,"clip"),BOr.forEach(t),EKe=r(b9," \u2014 "),OS=n(b9,"A",{href:!0});var POr=s(OS);CKe=r(POr,"CLIPTokenizer"),POr.forEach(t),wKe=r(b9," or "),VS=n(b9,"A",{href:!0});var IOr=s(VS);AKe=r(IOr,"CLIPTokenizerFast"),IOr.forEach(t),yKe=r(b9," (CLIP model)"),b9.forEach(t),LKe=i(S),Dn=n(S,"LI",{});var v9=s(Dn);kre=n(v9,"STRONG",{});var qOr=s(kre);xKe=r(qOr,"convbert"),qOr.forEach(t),$Ke=r(v9," \u2014 "),XS=n(v9,"A",{href:!0});var NOr=s(XS);kKe=r(NOr,"ConvBertTokenizer"),NOr.forEach(t),SKe=r(v9," or "),zS=n(v9,"A",{href:!0});var jOr=s(zS);RKe=r(jOr,"ConvBertTokenizerFast"),jOr.forEach(t),BKe=r(v9," (ConvBERT model)"),v9.forEach(t),PKe=i(S),Gn=n(S,"LI",{});var F9=s(Gn);Sre=n(F9,"STRONG",{});var DOr=s(Sre);IKe=r(DOr,"cpm"),DOr.forEach(t),qKe=r(F9," \u2014 "),QS=n(F9,"A",{href:!0});var GOr=s(QS);NKe=r(GOr,"CpmTokenizer"),GOr.forEach(t),jKe=r(F9," or "),WS=n(F9,"A",{href:!0});var OOr=s(WS);DKe=r(OOr,"CpmTokenizerFast"),OOr.forEach(t),GKe=r(F9," (CPM model)"),F9.forEach(t),OKe=i(S),Ag=n(S,"LI",{});var PCe=s(Ag);Rre=n(PCe,"STRONG",{});var VOr=s(Rre);VKe=r(VOr,"ctrl"),VOr.forEach(t),XKe=r(PCe," \u2014 "),HS=n(PCe,"A",{href:!0});var XOr=s(HS);zKe=r(XOr,"CTRLTokenizer"),XOr.forEach(t),QKe=r(PCe," (CTRL model)"),PCe.forEach(t),WKe=i(S),On=n(S,"LI",{});var T9=s(On);Bre=n(T9,"STRONG",{});var zOr=s(Bre);HKe=r(zOr,"data2vec-text"),zOr.forEach(t),UKe=r(T9," \u2014 "),US=n(T9,"A",{href:!0});var QOr=s(US);JKe=r(QOr,"RobertaTokenizer"),QOr.forEach(t),YKe=r(T9," or "),JS=n(T9,"A",{href:!0});var WOr=s(JS);KKe=r(WOr,"RobertaTokenizerFast"),WOr.forEach(t),ZKe=r(T9," (Data2VecText model)"),T9.forEach(t),eZe=i(S),Vn=n(S,"LI",{});var M9=s(Vn);Pre=n(M9,"STRONG",{});var HOr=s(Pre);oZe=r(HOr,"deberta"),HOr.forEach(t),rZe=r(M9," \u2014 "),YS=n(M9,"A",{href:!0});var UOr=s(YS);tZe=r(UOr,"DebertaTokenizer"),UOr.forEach(t),aZe=r(M9," or "),KS=n(M9,"A",{href:!0});var JOr=s(KS);nZe=r(JOr,"DebertaTokenizerFast"),JOr.forEach(t),sZe=r(M9," (DeBERTa model)"),M9.forEach(t),lZe=i(S),Xn=n(S,"LI",{});var E9=s(Xn);Ire=n(E9,"STRONG",{});var YOr=s(Ire);iZe=r(YOr,"deberta-v2"),YOr.forEach(t),dZe=r(E9," \u2014 "),ZS=n(E9,"A",{href:!0});var KOr=s(ZS);cZe=r(KOr,"DebertaV2Tokenizer"),KOr.forEach(t),fZe=r(E9," or "),eR=n(E9,"A",{href:!0});var ZOr=s(eR);mZe=r(ZOr,"DebertaV2TokenizerFast"),ZOr.forEach(t),gZe=r(E9," (DeBERTa-v2 model)"),E9.forEach(t),hZe=i(S),zn=n(S,"LI",{});var C9=s(zn);qre=n(C9,"STRONG",{});var eVr=s(qre);pZe=r(eVr,"distilbert"),eVr.forEach(t),uZe=r(C9," \u2014 "),oR=n(C9,"A",{href:!0});var oVr=s(oR);_Ze=r(oVr,"DistilBertTokenizer"),oVr.forEach(t),bZe=r(C9," or "),rR=n(C9,"A",{href:!0});var rVr=s(rR);vZe=r(rVr,"DistilBertTokenizerFast"),rVr.forEach(t),FZe=r(C9," (DistilBERT model)"),C9.forEach(t),TZe=i(S),Qn=n(S,"LI",{});var w9=s(Qn);Nre=n(w9,"STRONG",{});var tVr=s(Nre);MZe=r(tVr,"dpr"),tVr.forEach(t),EZe=r(w9," \u2014 "),tR=n(w9,"A",{href:!0});var aVr=s(tR);CZe=r(aVr,"DPRQuestionEncoderTokenizer"),aVr.forEach(t),wZe=r(w9," or "),aR=n(w9,"A",{href:!0});var nVr=s(aR);AZe=r(nVr,"DPRQuestionEncoderTokenizerFast"),nVr.forEach(t),yZe=r(w9," (DPR model)"),w9.forEach(t),LZe=i(S),Wn=n(S,"LI",{});var A9=s(Wn);jre=n(A9,"STRONG",{});var sVr=s(jre);xZe=r(sVr,"electra"),sVr.forEach(t),$Ze=r(A9," \u2014 "),nR=n(A9,"A",{href:!0});var lVr=s(nR);kZe=r(lVr,"ElectraTokenizer"),lVr.forEach(t),SZe=r(A9," or "),sR=n(A9,"A",{href:!0});var iVr=s(sR);RZe=r(iVr,"ElectraTokenizerFast"),iVr.forEach(t),BZe=r(A9," (ELECTRA model)"),A9.forEach(t),PZe=i(S),yg=n(S,"LI",{});var ICe=s(yg);Dre=n(ICe,"STRONG",{});var dVr=s(Dre);IZe=r(dVr,"flaubert"),dVr.forEach(t),qZe=r(ICe," \u2014 "),lR=n(ICe,"A",{href:!0});var cVr=s(lR);NZe=r(cVr,"FlaubertTokenizer"),cVr.forEach(t),jZe=r(ICe," (FlauBERT model)"),ICe.forEach(t),DZe=i(S),Hn=n(S,"LI",{});var y9=s(Hn);Gre=n(y9,"STRONG",{});var fVr=s(Gre);GZe=r(fVr,"fnet"),fVr.forEach(t),OZe=r(y9," \u2014 "),iR=n(y9,"A",{href:!0});var mVr=s(iR);VZe=r(mVr,"FNetTokenizer"),mVr.forEach(t),XZe=r(y9," or "),dR=n(y9,"A",{href:!0});var gVr=s(dR);zZe=r(gVr,"FNetTokenizerFast"),gVr.forEach(t),QZe=r(y9," (FNet model)"),y9.forEach(t),WZe=i(S),Lg=n(S,"LI",{});var qCe=s(Lg);Ore=n(qCe,"STRONG",{});var hVr=s(Ore);HZe=r(hVr,"fsmt"),hVr.forEach(t),UZe=r(qCe," \u2014 "),cR=n(qCe,"A",{href:!0});var pVr=s(cR);JZe=r(pVr,"FSMTTokenizer"),pVr.forEach(t),YZe=r(qCe," (FairSeq Machine-Translation model)"),qCe.forEach(t),KZe=i(S),Un=n(S,"LI",{});var L9=s(Un);Vre=n(L9,"STRONG",{});var uVr=s(Vre);ZZe=r(uVr,"funnel"),uVr.forEach(t),eeo=r(L9," \u2014 "),fR=n(L9,"A",{href:!0});var _Vr=s(fR);oeo=r(_Vr,"FunnelTokenizer"),_Vr.forEach(t),reo=r(L9," or "),mR=n(L9,"A",{href:!0});var bVr=s(mR);teo=r(bVr,"FunnelTokenizerFast"),bVr.forEach(t),aeo=r(L9," (Funnel Transformer model)"),L9.forEach(t),neo=i(S),Jn=n(S,"LI",{});var x9=s(Jn);Xre=n(x9,"STRONG",{});var vVr=s(Xre);seo=r(vVr,"gpt2"),vVr.forEach(t),leo=r(x9," \u2014 "),gR=n(x9,"A",{href:!0});var FVr=s(gR);ieo=r(FVr,"GPT2Tokenizer"),FVr.forEach(t),deo=r(x9," or "),hR=n(x9,"A",{href:!0});var TVr=s(hR);ceo=r(TVr,"GPT2TokenizerFast"),TVr.forEach(t),feo=r(x9," (OpenAI GPT-2 model)"),x9.forEach(t),meo=i(S),Yn=n(S,"LI",{});var $9=s(Yn);zre=n($9,"STRONG",{});var MVr=s(zre);geo=r(MVr,"gpt_neo"),MVr.forEach(t),heo=r($9," \u2014 "),pR=n($9,"A",{href:!0});var EVr=s(pR);peo=r(EVr,"GPT2Tokenizer"),EVr.forEach(t),ueo=r($9," or "),uR=n($9,"A",{href:!0});var CVr=s(uR);_eo=r(CVr,"GPT2TokenizerFast"),CVr.forEach(t),beo=r($9," (GPT Neo model)"),$9.forEach(t),veo=i(S),Kn=n(S,"LI",{});var k9=s(Kn);Qre=n(k9,"STRONG",{});var wVr=s(Qre);Feo=r(wVr,"gptj"),wVr.forEach(t),Teo=r(k9," \u2014 "),_R=n(k9,"A",{href:!0});var AVr=s(_R);Meo=r(AVr,"GPT2Tokenizer"),AVr.forEach(t),Eeo=r(k9," or "),bR=n(k9,"A",{href:!0});var yVr=s(bR);Ceo=r(yVr,"GPT2TokenizerFast"),yVr.forEach(t),weo=r(k9," (GPT-J model)"),k9.forEach(t),Aeo=i(S),Zn=n(S,"LI",{});var S9=s(Zn);Wre=n(S9,"STRONG",{});var LVr=s(Wre);yeo=r(LVr,"herbert"),LVr.forEach(t),Leo=r(S9," \u2014 "),vR=n(S9,"A",{href:!0});var xVr=s(vR);xeo=r(xVr,"HerbertTokenizer"),xVr.forEach(t),$eo=r(S9," or "),FR=n(S9,"A",{href:!0});var $Vr=s(FR);keo=r($Vr,"HerbertTokenizerFast"),$Vr.forEach(t),Seo=r(S9," (HerBERT model)"),S9.forEach(t),Reo=i(S),xg=n(S,"LI",{});var NCe=s(xg);Hre=n(NCe,"STRONG",{});var kVr=s(Hre);Beo=r(kVr,"hubert"),kVr.forEach(t),Peo=r(NCe," \u2014 "),TR=n(NCe,"A",{href:!0});var SVr=s(TR);Ieo=r(SVr,"Wav2Vec2CTCTokenizer"),SVr.forEach(t),qeo=r(NCe," (Hubert model)"),NCe.forEach(t),Neo=i(S),es=n(S,"LI",{});var R9=s(es);Ure=n(R9,"STRONG",{});var RVr=s(Ure);jeo=r(RVr,"ibert"),RVr.forEach(t),Deo=r(R9," \u2014 "),MR=n(R9,"A",{href:!0});var BVr=s(MR);Geo=r(BVr,"RobertaTokenizer"),BVr.forEach(t),Oeo=r(R9," or "),ER=n(R9,"A",{href:!0});var PVr=s(ER);Veo=r(PVr,"RobertaTokenizerFast"),PVr.forEach(t),Xeo=r(R9," (I-BERT model)"),R9.forEach(t),zeo=i(S),os=n(S,"LI",{});var B9=s(os);Jre=n(B9,"STRONG",{});var IVr=s(Jre);Qeo=r(IVr,"layoutlm"),IVr.forEach(t),Weo=r(B9," \u2014 "),CR=n(B9,"A",{href:!0});var qVr=s(CR);Heo=r(qVr,"LayoutLMTokenizer"),qVr.forEach(t),Ueo=r(B9," or "),wR=n(B9,"A",{href:!0});var NVr=s(wR);Jeo=r(NVr,"LayoutLMTokenizerFast"),NVr.forEach(t),Yeo=r(B9," (LayoutLM model)"),B9.forEach(t),Keo=i(S),rs=n(S,"LI",{});var P9=s(rs);Yre=n(P9,"STRONG",{});var jVr=s(Yre);Zeo=r(jVr,"layoutlmv2"),jVr.forEach(t),eoo=r(P9," \u2014 "),AR=n(P9,"A",{href:!0});var DVr=s(AR);ooo=r(DVr,"LayoutLMv2Tokenizer"),DVr.forEach(t),roo=r(P9," or "),yR=n(P9,"A",{href:!0});var GVr=s(yR);too=r(GVr,"LayoutLMv2TokenizerFast"),GVr.forEach(t),aoo=r(P9," (LayoutLMv2 model)"),P9.forEach(t),noo=i(S),ts=n(S,"LI",{});var I9=s(ts);Kre=n(I9,"STRONG",{});var OVr=s(Kre);soo=r(OVr,"layoutxlm"),OVr.forEach(t),loo=r(I9," \u2014 "),LR=n(I9,"A",{href:!0});var VVr=s(LR);ioo=r(VVr,"LayoutXLMTokenizer"),VVr.forEach(t),doo=r(I9," or "),xR=n(I9,"A",{href:!0});var XVr=s(xR);coo=r(XVr,"LayoutXLMTokenizerFast"),XVr.forEach(t),foo=r(I9," (LayoutXLM model)"),I9.forEach(t),moo=i(S),as=n(S,"LI",{});var q9=s(as);Zre=n(q9,"STRONG",{});var zVr=s(Zre);goo=r(zVr,"led"),zVr.forEach(t),hoo=r(q9," \u2014 "),$R=n(q9,"A",{href:!0});var QVr=s($R);poo=r(QVr,"LEDTokenizer"),QVr.forEach(t),uoo=r(q9," or "),kR=n(q9,"A",{href:!0});var WVr=s(kR);_oo=r(WVr,"LEDTokenizerFast"),WVr.forEach(t),boo=r(q9," (LED model)"),q9.forEach(t),voo=i(S),ns=n(S,"LI",{});var N9=s(ns);ete=n(N9,"STRONG",{});var HVr=s(ete);Foo=r(HVr,"longformer"),HVr.forEach(t),Too=r(N9," \u2014 "),SR=n(N9,"A",{href:!0});var UVr=s(SR);Moo=r(UVr,"LongformerTokenizer"),UVr.forEach(t),Eoo=r(N9," or "),RR=n(N9,"A",{href:!0});var JVr=s(RR);Coo=r(JVr,"LongformerTokenizerFast"),JVr.forEach(t),woo=r(N9," (Longformer model)"),N9.forEach(t),Aoo=i(S),$g=n(S,"LI",{});var jCe=s($g);ote=n(jCe,"STRONG",{});var YVr=s(ote);yoo=r(YVr,"luke"),YVr.forEach(t),Loo=r(jCe," \u2014 "),BR=n(jCe,"A",{href:!0});var KVr=s(BR);xoo=r(KVr,"LukeTokenizer"),KVr.forEach(t),$oo=r(jCe," (LUKE model)"),jCe.forEach(t),koo=i(S),ss=n(S,"LI",{});var j9=s(ss);rte=n(j9,"STRONG",{});var ZVr=s(rte);Soo=r(ZVr,"lxmert"),ZVr.forEach(t),Roo=r(j9," \u2014 "),PR=n(j9,"A",{href:!0});var eXr=s(PR);Boo=r(eXr,"LxmertTokenizer"),eXr.forEach(t),Poo=r(j9," or "),IR=n(j9,"A",{href:!0});var oXr=s(IR);Ioo=r(oXr,"LxmertTokenizerFast"),oXr.forEach(t),qoo=r(j9," (LXMERT model)"),j9.forEach(t),Noo=i(S),kg=n(S,"LI",{});var DCe=s(kg);tte=n(DCe,"STRONG",{});var rXr=s(tte);joo=r(rXr,"m2m_100"),rXr.forEach(t),Doo=r(DCe," \u2014 "),qR=n(DCe,"A",{href:!0});var tXr=s(qR);Goo=r(tXr,"M2M100Tokenizer"),tXr.forEach(t),Ooo=r(DCe," (M2M100 model)"),DCe.forEach(t),Voo=i(S),Sg=n(S,"LI",{});var GCe=s(Sg);ate=n(GCe,"STRONG",{});var aXr=s(ate);Xoo=r(aXr,"marian"),aXr.forEach(t),zoo=r(GCe," \u2014 "),NR=n(GCe,"A",{href:!0});var nXr=s(NR);Qoo=r(nXr,"MarianTokenizer"),nXr.forEach(t),Woo=r(GCe," (Marian model)"),GCe.forEach(t),Hoo=i(S),ls=n(S,"LI",{});var D9=s(ls);nte=n(D9,"STRONG",{});var sXr=s(nte);Uoo=r(sXr,"mbart"),sXr.forEach(t),Joo=r(D9," \u2014 "),jR=n(D9,"A",{href:!0});var lXr=s(jR);Yoo=r(lXr,"MBartTokenizer"),lXr.forEach(t),Koo=r(D9," or "),DR=n(D9,"A",{href:!0});var iXr=s(DR);Zoo=r(iXr,"MBartTokenizerFast"),iXr.forEach(t),ero=r(D9," (mBART model)"),D9.forEach(t),oro=i(S),is=n(S,"LI",{});var G9=s(is);ste=n(G9,"STRONG",{});var dXr=s(ste);rro=r(dXr,"mbart50"),dXr.forEach(t),tro=r(G9," \u2014 "),GR=n(G9,"A",{href:!0});var cXr=s(GR);aro=r(cXr,"MBart50Tokenizer"),cXr.forEach(t),nro=r(G9," or "),OR=n(G9,"A",{href:!0});var fXr=s(OR);sro=r(fXr,"MBart50TokenizerFast"),fXr.forEach(t),lro=r(G9," (mBART-50 model)"),G9.forEach(t),iro=i(S),ds=n(S,"LI",{});var O9=s(ds);lte=n(O9,"STRONG",{});var mXr=s(lte);dro=r(mXr,"megatron-bert"),mXr.forEach(t),cro=r(O9," \u2014 "),VR=n(O9,"A",{href:!0});var gXr=s(VR);fro=r(gXr,"BertTokenizer"),gXr.forEach(t),mro=r(O9," or "),XR=n(O9,"A",{href:!0});var hXr=s(XR);gro=r(hXr,"BertTokenizerFast"),hXr.forEach(t),hro=r(O9," (MegatronBert model)"),O9.forEach(t),pro=i(S),Rg=n(S,"LI",{});var OCe=s(Rg);ite=n(OCe,"STRONG",{});var pXr=s(ite);uro=r(pXr,"mluke"),pXr.forEach(t),_ro=r(OCe," \u2014 "),zR=n(OCe,"A",{href:!0});var uXr=s(zR);bro=r(uXr,"MLukeTokenizer"),uXr.forEach(t),vro=r(OCe," (mLUKE model)"),OCe.forEach(t),Fro=i(S),cs=n(S,"LI",{});var V9=s(cs);dte=n(V9,"STRONG",{});var _Xr=s(dte);Tro=r(_Xr,"mobilebert"),_Xr.forEach(t),Mro=r(V9," \u2014 "),QR=n(V9,"A",{href:!0});var bXr=s(QR);Ero=r(bXr,"MobileBertTokenizer"),bXr.forEach(t),Cro=r(V9," or "),WR=n(V9,"A",{href:!0});var vXr=s(WR);wro=r(vXr,"MobileBertTokenizerFast"),vXr.forEach(t),Aro=r(V9," (MobileBERT model)"),V9.forEach(t),yro=i(S),fs=n(S,"LI",{});var X9=s(fs);cte=n(X9,"STRONG",{});var FXr=s(cte);Lro=r(FXr,"mpnet"),FXr.forEach(t),xro=r(X9," \u2014 "),HR=n(X9,"A",{href:!0});var TXr=s(HR);$ro=r(TXr,"MPNetTokenizer"),TXr.forEach(t),kro=r(X9," or "),UR=n(X9,"A",{href:!0});var MXr=s(UR);Sro=r(MXr,"MPNetTokenizerFast"),MXr.forEach(t),Rro=r(X9," (MPNet model)"),X9.forEach(t),Bro=i(S),ms=n(S,"LI",{});var z9=s(ms);fte=n(z9,"STRONG",{});var EXr=s(fte);Pro=r(EXr,"mt5"),EXr.forEach(t),Iro=r(z9," \u2014 "),JR=n(z9,"A",{href:!0});var CXr=s(JR);qro=r(CXr,"MT5Tokenizer"),CXr.forEach(t),Nro=r(z9," or "),YR=n(z9,"A",{href:!0});var wXr=s(YR);jro=r(wXr,"MT5TokenizerFast"),wXr.forEach(t),Dro=r(z9," (mT5 model)"),z9.forEach(t),Gro=i(S),gs=n(S,"LI",{});var Q9=s(gs);mte=n(Q9,"STRONG",{});var AXr=s(mte);Oro=r(AXr,"nystromformer"),AXr.forEach(t),Vro=r(Q9," \u2014 "),KR=n(Q9,"A",{href:!0});var yXr=s(KR);Xro=r(yXr,"AlbertTokenizer"),yXr.forEach(t),zro=r(Q9," or "),ZR=n(Q9,"A",{href:!0});var LXr=s(ZR);Qro=r(LXr,"AlbertTokenizerFast"),LXr.forEach(t),Wro=r(Q9," (Nystromformer model)"),Q9.forEach(t),Hro=i(S),hs=n(S,"LI",{});var W9=s(hs);gte=n(W9,"STRONG",{});var xXr=s(gte);Uro=r(xXr,"openai-gpt"),xXr.forEach(t),Jro=r(W9," \u2014 "),eB=n(W9,"A",{href:!0});var $Xr=s(eB);Yro=r($Xr,"OpenAIGPTTokenizer"),$Xr.forEach(t),Kro=r(W9," or "),oB=n(W9,"A",{href:!0});var kXr=s(oB);Zro=r(kXr,"OpenAIGPTTokenizerFast"),kXr.forEach(t),eto=r(W9," (OpenAI GPT model)"),W9.forEach(t),oto=i(S),Bg=n(S,"LI",{});var VCe=s(Bg);hte=n(VCe,"STRONG",{});var SXr=s(hte);rto=r(SXr,"opt"),SXr.forEach(t),tto=r(VCe," \u2014 "),rB=n(VCe,"A",{href:!0});var RXr=s(rB);ato=r(RXr,"GPT2Tokenizer"),RXr.forEach(t),nto=r(VCe," (OPT model)"),VCe.forEach(t),sto=i(S),ps=n(S,"LI",{});var H9=s(ps);pte=n(H9,"STRONG",{});var BXr=s(pte);lto=r(BXr,"pegasus"),BXr.forEach(t),ito=r(H9," \u2014 "),tB=n(H9,"A",{href:!0});var PXr=s(tB);dto=r(PXr,"PegasusTokenizer"),PXr.forEach(t),cto=r(H9," or "),aB=n(H9,"A",{href:!0});var IXr=s(aB);fto=r(IXr,"PegasusTokenizerFast"),IXr.forEach(t),mto=r(H9," (Pegasus model)"),H9.forEach(t),gto=i(S),Pg=n(S,"LI",{});var XCe=s(Pg);ute=n(XCe,"STRONG",{});var qXr=s(ute);hto=r(qXr,"perceiver"),qXr.forEach(t),pto=r(XCe," \u2014 "),nB=n(XCe,"A",{href:!0});var NXr=s(nB);uto=r(NXr,"PerceiverTokenizer"),NXr.forEach(t),_to=r(XCe," (Perceiver model)"),XCe.forEach(t),bto=i(S),Ig=n(S,"LI",{});var zCe=s(Ig);_te=n(zCe,"STRONG",{});var jXr=s(_te);vto=r(jXr,"phobert"),jXr.forEach(t),Fto=r(zCe," \u2014 "),sB=n(zCe,"A",{href:!0});var DXr=s(sB);Tto=r(DXr,"PhobertTokenizer"),DXr.forEach(t),Mto=r(zCe," (PhoBERT model)"),zCe.forEach(t),Eto=i(S),qg=n(S,"LI",{});var QCe=s(qg);bte=n(QCe,"STRONG",{});var GXr=s(bte);Cto=r(GXr,"plbart"),GXr.forEach(t),wto=r(QCe," \u2014 "),lB=n(QCe,"A",{href:!0});var OXr=s(lB);Ato=r(OXr,"PLBartTokenizer"),OXr.forEach(t),yto=r(QCe," (PLBart model)"),QCe.forEach(t),Lto=i(S),Ng=n(S,"LI",{});var WCe=s(Ng);vte=n(WCe,"STRONG",{});var VXr=s(vte);xto=r(VXr,"prophetnet"),VXr.forEach(t),$to=r(WCe," \u2014 "),iB=n(WCe,"A",{href:!0});var XXr=s(iB);kto=r(XXr,"ProphetNetTokenizer"),XXr.forEach(t),Sto=r(WCe," (ProphetNet model)"),WCe.forEach(t),Rto=i(S),us=n(S,"LI",{});var U9=s(us);Fte=n(U9,"STRONG",{});var zXr=s(Fte);Bto=r(zXr,"qdqbert"),zXr.forEach(t),Pto=r(U9," \u2014 "),dB=n(U9,"A",{href:!0});var QXr=s(dB);Ito=r(QXr,"BertTokenizer"),QXr.forEach(t),qto=r(U9," or "),cB=n(U9,"A",{href:!0});var WXr=s(cB);Nto=r(WXr,"BertTokenizerFast"),WXr.forEach(t),jto=r(U9," (QDQBert model)"),U9.forEach(t),Dto=i(S),jg=n(S,"LI",{});var HCe=s(jg);Tte=n(HCe,"STRONG",{});var HXr=s(Tte);Gto=r(HXr,"rag"),HXr.forEach(t),Oto=r(HCe," \u2014 "),fB=n(HCe,"A",{href:!0});var UXr=s(fB);Vto=r(UXr,"RagTokenizer"),UXr.forEach(t),Xto=r(HCe," (RAG model)"),HCe.forEach(t),zto=i(S),_s=n(S,"LI",{});var J9=s(_s);Mte=n(J9,"STRONG",{});var JXr=s(Mte);Qto=r(JXr,"realm"),JXr.forEach(t),Wto=r(J9," \u2014 "),mB=n(J9,"A",{href:!0});var YXr=s(mB);Hto=r(YXr,"RealmTokenizer"),YXr.forEach(t),Uto=r(J9," or "),gB=n(J9,"A",{href:!0});var KXr=s(gB);Jto=r(KXr,"RealmTokenizerFast"),KXr.forEach(t),Yto=r(J9," (Realm model)"),J9.forEach(t),Kto=i(S),bs=n(S,"LI",{});var Y9=s(bs);Ete=n(Y9,"STRONG",{});var ZXr=s(Ete);Zto=r(ZXr,"reformer"),ZXr.forEach(t),eao=r(Y9," \u2014 "),hB=n(Y9,"A",{href:!0});var ezr=s(hB);oao=r(ezr,"ReformerTokenizer"),ezr.forEach(t),rao=r(Y9," or "),pB=n(Y9,"A",{href:!0});var ozr=s(pB);tao=r(ozr,"ReformerTokenizerFast"),ozr.forEach(t),aao=r(Y9," (Reformer model)"),Y9.forEach(t),nao=i(S),vs=n(S,"LI",{});var K9=s(vs);Cte=n(K9,"STRONG",{});var rzr=s(Cte);sao=r(rzr,"rembert"),rzr.forEach(t),lao=r(K9," \u2014 "),uB=n(K9,"A",{href:!0});var tzr=s(uB);iao=r(tzr,"RemBertTokenizer"),tzr.forEach(t),dao=r(K9," or "),_B=n(K9,"A",{href:!0});var azr=s(_B);cao=r(azr,"RemBertTokenizerFast"),azr.forEach(t),fao=r(K9," (RemBERT model)"),K9.forEach(t),mao=i(S),Fs=n(S,"LI",{});var Z9=s(Fs);wte=n(Z9,"STRONG",{});var nzr=s(wte);gao=r(nzr,"retribert"),nzr.forEach(t),hao=r(Z9," \u2014 "),bB=n(Z9,"A",{href:!0});var szr=s(bB);pao=r(szr,"RetriBertTokenizer"),szr.forEach(t),uao=r(Z9," or "),vB=n(Z9,"A",{href:!0});var lzr=s(vB);_ao=r(lzr,"RetriBertTokenizerFast"),lzr.forEach(t),bao=r(Z9," (RetriBERT model)"),Z9.forEach(t),vao=i(S),Ts=n(S,"LI",{});var e$=s(Ts);Ate=n(e$,"STRONG",{});var izr=s(Ate);Fao=r(izr,"roberta"),izr.forEach(t),Tao=r(e$," \u2014 "),FB=n(e$,"A",{href:!0});var dzr=s(FB);Mao=r(dzr,"RobertaTokenizer"),dzr.forEach(t),Eao=r(e$," or "),TB=n(e$,"A",{href:!0});var czr=s(TB);Cao=r(czr,"RobertaTokenizerFast"),czr.forEach(t),wao=r(e$," (RoBERTa model)"),e$.forEach(t),Aao=i(S),Ms=n(S,"LI",{});var o$=s(Ms);yte=n(o$,"STRONG",{});var fzr=s(yte);yao=r(fzr,"roformer"),fzr.forEach(t),Lao=r(o$," \u2014 "),MB=n(o$,"A",{href:!0});var mzr=s(MB);xao=r(mzr,"RoFormerTokenizer"),mzr.forEach(t),$ao=r(o$," or "),EB=n(o$,"A",{href:!0});var gzr=s(EB);kao=r(gzr,"RoFormerTokenizerFast"),gzr.forEach(t),Sao=r(o$," (RoFormer model)"),o$.forEach(t),Rao=i(S),Dg=n(S,"LI",{});var UCe=s(Dg);Lte=n(UCe,"STRONG",{});var hzr=s(Lte);Bao=r(hzr,"speech_to_text"),hzr.forEach(t),Pao=r(UCe," \u2014 "),CB=n(UCe,"A",{href:!0});var pzr=s(CB);Iao=r(pzr,"Speech2TextTokenizer"),pzr.forEach(t),qao=r(UCe," (Speech2Text model)"),UCe.forEach(t),Nao=i(S),Gg=n(S,"LI",{});var JCe=s(Gg);xte=n(JCe,"STRONG",{});var uzr=s(xte);jao=r(uzr,"speech_to_text_2"),uzr.forEach(t),Dao=r(JCe," \u2014 "),wB=n(JCe,"A",{href:!0});var _zr=s(wB);Gao=r(_zr,"Speech2Text2Tokenizer"),_zr.forEach(t),Oao=r(JCe," (Speech2Text2 model)"),JCe.forEach(t),Vao=i(S),Es=n(S,"LI",{});var r$=s(Es);$te=n(r$,"STRONG",{});var bzr=s($te);Xao=r(bzr,"splinter"),bzr.forEach(t),zao=r(r$," \u2014 "),AB=n(r$,"A",{href:!0});var vzr=s(AB);Qao=r(vzr,"SplinterTokenizer"),vzr.forEach(t),Wao=r(r$," or "),yB=n(r$,"A",{href:!0});var Fzr=s(yB);Hao=r(Fzr,"SplinterTokenizerFast"),Fzr.forEach(t),Uao=r(r$," (Splinter model)"),r$.forEach(t),Jao=i(S),Cs=n(S,"LI",{});var t$=s(Cs);kte=n(t$,"STRONG",{});var Tzr=s(kte);Yao=r(Tzr,"squeezebert"),Tzr.forEach(t),Kao=r(t$," \u2014 "),LB=n(t$,"A",{href:!0});var Mzr=s(LB);Zao=r(Mzr,"SqueezeBertTokenizer"),Mzr.forEach(t),eno=r(t$," or "),xB=n(t$,"A",{href:!0});var Ezr=s(xB);ono=r(Ezr,"SqueezeBertTokenizerFast"),Ezr.forEach(t),rno=r(t$," (SqueezeBERT model)"),t$.forEach(t),tno=i(S),ws=n(S,"LI",{});var a$=s(ws);Ste=n(a$,"STRONG",{});var Czr=s(Ste);ano=r(Czr,"t5"),Czr.forEach(t),nno=r(a$," \u2014 "),$B=n(a$,"A",{href:!0});var wzr=s($B);sno=r(wzr,"T5Tokenizer"),wzr.forEach(t),lno=r(a$," or "),kB=n(a$,"A",{href:!0});var Azr=s(kB);ino=r(Azr,"T5TokenizerFast"),Azr.forEach(t),dno=r(a$," (T5 model)"),a$.forEach(t),cno=i(S),Og=n(S,"LI",{});var YCe=s(Og);Rte=n(YCe,"STRONG",{});var yzr=s(Rte);fno=r(yzr,"tapas"),yzr.forEach(t),mno=r(YCe," \u2014 "),SB=n(YCe,"A",{href:!0});var Lzr=s(SB);gno=r(Lzr,"TapasTokenizer"),Lzr.forEach(t),hno=r(YCe," (TAPAS model)"),YCe.forEach(t),pno=i(S),Vg=n(S,"LI",{});var KCe=s(Vg);Bte=n(KCe,"STRONG",{});var xzr=s(Bte);uno=r(xzr,"tapex"),xzr.forEach(t),_no=r(KCe," \u2014 "),RB=n(KCe,"A",{href:!0});var $zr=s(RB);bno=r($zr,"TapexTokenizer"),$zr.forEach(t),vno=r(KCe," (TAPEX model)"),KCe.forEach(t),Fno=i(S),Xg=n(S,"LI",{});var ZCe=s(Xg);Pte=n(ZCe,"STRONG",{});var kzr=s(Pte);Tno=r(kzr,"transfo-xl"),kzr.forEach(t),Mno=r(ZCe," \u2014 "),BB=n(ZCe,"A",{href:!0});var Szr=s(BB);Eno=r(Szr,"TransfoXLTokenizer"),Szr.forEach(t),Cno=r(ZCe," (Transformer-XL model)"),ZCe.forEach(t),wno=i(S),As=n(S,"LI",{});var n$=s(As);Ite=n(n$,"STRONG",{});var Rzr=s(Ite);Ano=r(Rzr,"visual_bert"),Rzr.forEach(t),yno=r(n$," \u2014 "),PB=n(n$,"A",{href:!0});var Bzr=s(PB);Lno=r(Bzr,"BertTokenizer"),Bzr.forEach(t),xno=r(n$," or "),IB=n(n$,"A",{href:!0});var Pzr=s(IB);$no=r(Pzr,"BertTokenizerFast"),Pzr.forEach(t),kno=r(n$," (VisualBert model)"),n$.forEach(t),Sno=i(S),zg=n(S,"LI",{});var e3e=s(zg);qte=n(e3e,"STRONG",{});var Izr=s(qte);Rno=r(Izr,"wav2vec2"),Izr.forEach(t),Bno=r(e3e," \u2014 "),qB=n(e3e,"A",{href:!0});var qzr=s(qB);Pno=r(qzr,"Wav2Vec2CTCTokenizer"),qzr.forEach(t),Ino=r(e3e," (Wav2Vec2 model)"),e3e.forEach(t),qno=i(S),Qg=n(S,"LI",{});var o3e=s(Qg);Nte=n(o3e,"STRONG",{});var Nzr=s(Nte);Nno=r(Nzr,"wav2vec2_phoneme"),Nzr.forEach(t),jno=r(o3e," \u2014 "),NB=n(o3e,"A",{href:!0});var jzr=s(NB);Dno=r(jzr,"Wav2Vec2PhonemeCTCTokenizer"),jzr.forEach(t),Gno=r(o3e," (Wav2Vec2Phoneme model)"),o3e.forEach(t),Ono=i(S),ys=n(S,"LI",{});var s$=s(ys);jte=n(s$,"STRONG",{});var Dzr=s(jte);Vno=r(Dzr,"xglm"),Dzr.forEach(t),Xno=r(s$," \u2014 "),jB=n(s$,"A",{href:!0});var Gzr=s(jB);zno=r(Gzr,"XGLMTokenizer"),Gzr.forEach(t),Qno=r(s$," or "),DB=n(s$,"A",{href:!0});var Ozr=s(DB);Wno=r(Ozr,"XGLMTokenizerFast"),Ozr.forEach(t),Hno=r(s$," (XGLM model)"),s$.forEach(t),Uno=i(S),Wg=n(S,"LI",{});var r3e=s(Wg);Dte=n(r3e,"STRONG",{});var Vzr=s(Dte);Jno=r(Vzr,"xlm"),Vzr.forEach(t),Yno=r(r3e," \u2014 "),GB=n(r3e,"A",{href:!0});var Xzr=s(GB);Kno=r(Xzr,"XLMTokenizer"),Xzr.forEach(t),Zno=r(r3e," (XLM model)"),r3e.forEach(t),eso=i(S),Hg=n(S,"LI",{});var t3e=s(Hg);Gte=n(t3e,"STRONG",{});var zzr=s(Gte);oso=r(zzr,"xlm-prophetnet"),zzr.forEach(t),rso=r(t3e," \u2014 "),OB=n(t3e,"A",{href:!0});var Qzr=s(OB);tso=r(Qzr,"XLMProphetNetTokenizer"),Qzr.forEach(t),aso=r(t3e," (XLMProphetNet model)"),t3e.forEach(t),nso=i(S),Ls=n(S,"LI",{});var l$=s(Ls);Ote=n(l$,"STRONG",{});var Wzr=s(Ote);sso=r(Wzr,"xlm-roberta"),Wzr.forEach(t),lso=r(l$," \u2014 "),VB=n(l$,"A",{href:!0});var Hzr=s(VB);iso=r(Hzr,"XLMRobertaTokenizer"),Hzr.forEach(t),dso=r(l$," or "),XB=n(l$,"A",{href:!0});var Uzr=s(XB);cso=r(Uzr,"XLMRobertaTokenizerFast"),Uzr.forEach(t),fso=r(l$," (XLM-RoBERTa model)"),l$.forEach(t),mso=i(S),xs=n(S,"LI",{});var i$=s(xs);Vte=n(i$,"STRONG",{});var Jzr=s(Vte);gso=r(Jzr,"xlm-roberta-xl"),Jzr.forEach(t),hso=r(i$," \u2014 "),zB=n(i$,"A",{href:!0});var Yzr=s(zB);pso=r(Yzr,"RobertaTokenizer"),Yzr.forEach(t),uso=r(i$," or "),QB=n(i$,"A",{href:!0});var Kzr=s(QB);_so=r(Kzr,"RobertaTokenizerFast"),Kzr.forEach(t),bso=r(i$," (XLM-RoBERTa-XL model)"),i$.forEach(t),vso=i(S),$s=n(S,"LI",{});var d$=s($s);Xte=n(d$,"STRONG",{});var Zzr=s(Xte);Fso=r(Zzr,"xlnet"),Zzr.forEach(t),Tso=r(d$," \u2014 "),WB=n(d$,"A",{href:!0});var eQr=s(WB);Mso=r(eQr,"XLNetTokenizer"),eQr.forEach(t),Eso=r(d$," or "),HB=n(d$,"A",{href:!0});var oQr=s(HB);Cso=r(oQr,"XLNetTokenizerFast"),oQr.forEach(t),wso=r(d$," (XLNet model)"),d$.forEach(t),Aso=i(S),ks=n(S,"LI",{});var c$=s(ks);zte=n(c$,"STRONG",{});var rQr=s(zte);yso=r(rQr,"yoso"),rQr.forEach(t),Lso=r(c$," \u2014 "),UB=n(c$,"A",{href:!0});var tQr=s(UB);xso=r(tQr,"AlbertTokenizer"),tQr.forEach(t),$so=r(c$," or "),JB=n(c$,"A",{href:!0});var aQr=s(JB);kso=r(aQr,"AlbertTokenizerFast"),aQr.forEach(t),Sso=r(c$," (YOSO model)"),c$.forEach(t),S.forEach(t),Rso=i(Is),T(Ug.$$.fragment,Is),Is.forEach(t),Bso=i(Ps),Jg=n(Ps,"DIV",{class:!0});var Yqe=s(Jg);T(c6.$$.fragment,Yqe),Pso=i(Yqe),Qte=n(Yqe,"P",{});var nQr=s(Qte);Iso=r(nQr,"Register a new tokenizer in this mapping."),nQr.forEach(t),Yqe.forEach(t),Ps.forEach(t),KPe=i(f),bi=n(f,"H2",{class:!0});var Kqe=s(bi);Yg=n(Kqe,"A",{id:!0,class:!0,href:!0});var sQr=s(Yg);Wte=n(sQr,"SPAN",{});var lQr=s(Wte);T(f6.$$.fragment,lQr),lQr.forEach(t),sQr.forEach(t),qso=i(Kqe),Hte=n(Kqe,"SPAN",{});var iQr=s(Hte);Nso=r(iQr,"AutoFeatureExtractor"),iQr.forEach(t),Kqe.forEach(t),ZPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(m6.$$.fragment,qs),jso=i(qs),g6=n(qs,"P",{});var Zqe=s(g6);Dso=r(Zqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YB=n(Zqe,"A",{href:!0});var dQr=s(YB);Gso=r(dQr,"AutoFeatureExtractor.from_pretrained()"),dQr.forEach(t),Oso=r(Zqe," class method."),Zqe.forEach(t),Vso=i(qs),h6=n(qs,"P",{});var eNe=s(h6);Xso=r(eNe,"This class cannot be instantiated directly using "),Ute=n(eNe,"CODE",{});var cQr=s(Ute);zso=r(cQr,"__init__()"),cQr.forEach(t),Qso=r(eNe," (throws an error)."),eNe.forEach(t),Wso=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(p6.$$.fragment,Yt),Hso=i(Yt),Jte=n(Yt,"P",{});var fQr=s(Jte);Uso=r(fQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fQr.forEach(t),Jso=i(Yt),wa=n(Yt,"P",{});var Z3=s(wa);Yso=r(Z3,"The feature extractor class to instantiate is selected based on the "),Yte=n(Z3,"CODE",{});var mQr=s(Yte);Kso=r(mQr,"model_type"),mQr.forEach(t),Zso=r(Z3,` property of the config object
(either passed as an argument or loaded from `),Kte=n(Z3,"CODE",{});var gQr=s(Kte);elo=r(gQr,"pretrained_model_name_or_path"),gQr.forEach(t),olo=r(Z3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zte=n(Z3,"CODE",{});var hQr=s(Zte);rlo=r(hQr,"pretrained_model_name_or_path"),hQr.forEach(t),tlo=r(Z3,":"),Z3.forEach(t),alo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Kg=n(ae,"LI",{});var a3e=s(Kg);eae=n(a3e,"STRONG",{});var pQr=s(eae);nlo=r(pQr,"beit"),pQr.forEach(t),slo=r(a3e," \u2014 "),KB=n(a3e,"A",{href:!0});var uQr=s(KB);llo=r(uQr,"BeitFeatureExtractor"),uQr.forEach(t),ilo=r(a3e," (BEiT model)"),a3e.forEach(t),dlo=i(ae),Zg=n(ae,"LI",{});var n3e=s(Zg);oae=n(n3e,"STRONG",{});var _Qr=s(oae);clo=r(_Qr,"clip"),_Qr.forEach(t),flo=r(n3e," \u2014 "),ZB=n(n3e,"A",{href:!0});var bQr=s(ZB);mlo=r(bQr,"CLIPFeatureExtractor"),bQr.forEach(t),glo=r(n3e," (CLIP model)"),n3e.forEach(t),hlo=i(ae),eh=n(ae,"LI",{});var s3e=s(eh);rae=n(s3e,"STRONG",{});var vQr=s(rae);plo=r(vQr,"convnext"),vQr.forEach(t),ulo=r(s3e," \u2014 "),eP=n(s3e,"A",{href:!0});var FQr=s(eP);_lo=r(FQr,"ConvNextFeatureExtractor"),FQr.forEach(t),blo=r(s3e," (ConvNext model)"),s3e.forEach(t),vlo=i(ae),oh=n(ae,"LI",{});var l3e=s(oh);tae=n(l3e,"STRONG",{});var TQr=s(tae);Flo=r(TQr,"data2vec-audio"),TQr.forEach(t),Tlo=r(l3e," \u2014 "),oP=n(l3e,"A",{href:!0});var MQr=s(oP);Mlo=r(MQr,"Wav2Vec2FeatureExtractor"),MQr.forEach(t),Elo=r(l3e," (Data2VecAudio model)"),l3e.forEach(t),Clo=i(ae),rh=n(ae,"LI",{});var i3e=s(rh);aae=n(i3e,"STRONG",{});var EQr=s(aae);wlo=r(EQr,"data2vec-vision"),EQr.forEach(t),Alo=r(i3e," \u2014 "),rP=n(i3e,"A",{href:!0});var CQr=s(rP);ylo=r(CQr,"BeitFeatureExtractor"),CQr.forEach(t),Llo=r(i3e," (Data2VecVision model)"),i3e.forEach(t),xlo=i(ae),th=n(ae,"LI",{});var d3e=s(th);nae=n(d3e,"STRONG",{});var wQr=s(nae);$lo=r(wQr,"deit"),wQr.forEach(t),klo=r(d3e," \u2014 "),tP=n(d3e,"A",{href:!0});var AQr=s(tP);Slo=r(AQr,"DeiTFeatureExtractor"),AQr.forEach(t),Rlo=r(d3e," (DeiT model)"),d3e.forEach(t),Blo=i(ae),ah=n(ae,"LI",{});var c3e=s(ah);sae=n(c3e,"STRONG",{});var yQr=s(sae);Plo=r(yQr,"detr"),yQr.forEach(t),Ilo=r(c3e," \u2014 "),aP=n(c3e,"A",{href:!0});var LQr=s(aP);qlo=r(LQr,"DetrFeatureExtractor"),LQr.forEach(t),Nlo=r(c3e," (DETR model)"),c3e.forEach(t),jlo=i(ae),nh=n(ae,"LI",{});var f3e=s(nh);lae=n(f3e,"STRONG",{});var xQr=s(lae);Dlo=r(xQr,"dpt"),xQr.forEach(t),Glo=r(f3e," \u2014 "),nP=n(f3e,"A",{href:!0});var $Qr=s(nP);Olo=r($Qr,"DPTFeatureExtractor"),$Qr.forEach(t),Vlo=r(f3e," (DPT model)"),f3e.forEach(t),Xlo=i(ae),sh=n(ae,"LI",{});var m3e=s(sh);iae=n(m3e,"STRONG",{});var kQr=s(iae);zlo=r(kQr,"flava"),kQr.forEach(t),Qlo=r(m3e," \u2014 "),sP=n(m3e,"A",{href:!0});var SQr=s(sP);Wlo=r(SQr,"FlavaFeatureExtractor"),SQr.forEach(t),Hlo=r(m3e," (Flava model)"),m3e.forEach(t),Ulo=i(ae),lh=n(ae,"LI",{});var g3e=s(lh);dae=n(g3e,"STRONG",{});var RQr=s(dae);Jlo=r(RQr,"glpn"),RQr.forEach(t),Ylo=r(g3e," \u2014 "),lP=n(g3e,"A",{href:!0});var BQr=s(lP);Klo=r(BQr,"GLPNFeatureExtractor"),BQr.forEach(t),Zlo=r(g3e," (GLPN model)"),g3e.forEach(t),eio=i(ae),ih=n(ae,"LI",{});var h3e=s(ih);cae=n(h3e,"STRONG",{});var PQr=s(cae);oio=r(PQr,"hubert"),PQr.forEach(t),rio=r(h3e," \u2014 "),iP=n(h3e,"A",{href:!0});var IQr=s(iP);tio=r(IQr,"Wav2Vec2FeatureExtractor"),IQr.forEach(t),aio=r(h3e," (Hubert model)"),h3e.forEach(t),nio=i(ae),dh=n(ae,"LI",{});var p3e=s(dh);fae=n(p3e,"STRONG",{});var qQr=s(fae);sio=r(qQr,"layoutlmv2"),qQr.forEach(t),lio=r(p3e," \u2014 "),dP=n(p3e,"A",{href:!0});var NQr=s(dP);iio=r(NQr,"LayoutLMv2FeatureExtractor"),NQr.forEach(t),dio=r(p3e," (LayoutLMv2 model)"),p3e.forEach(t),cio=i(ae),ch=n(ae,"LI",{});var u3e=s(ch);mae=n(u3e,"STRONG",{});var jQr=s(mae);fio=r(jQr,"maskformer"),jQr.forEach(t),mio=r(u3e," \u2014 "),cP=n(u3e,"A",{href:!0});var DQr=s(cP);gio=r(DQr,"MaskFormerFeatureExtractor"),DQr.forEach(t),hio=r(u3e," (MaskFormer model)"),u3e.forEach(t),pio=i(ae),fh=n(ae,"LI",{});var _3e=s(fh);gae=n(_3e,"STRONG",{});var GQr=s(gae);uio=r(GQr,"perceiver"),GQr.forEach(t),_io=r(_3e," \u2014 "),fP=n(_3e,"A",{href:!0});var OQr=s(fP);bio=r(OQr,"PerceiverFeatureExtractor"),OQr.forEach(t),vio=r(_3e," (Perceiver model)"),_3e.forEach(t),Fio=i(ae),mh=n(ae,"LI",{});var b3e=s(mh);hae=n(b3e,"STRONG",{});var VQr=s(hae);Tio=r(VQr,"poolformer"),VQr.forEach(t),Mio=r(b3e," \u2014 "),mP=n(b3e,"A",{href:!0});var XQr=s(mP);Eio=r(XQr,"PoolFormerFeatureExtractor"),XQr.forEach(t),Cio=r(b3e," (PoolFormer model)"),b3e.forEach(t),wio=i(ae),gh=n(ae,"LI",{});var v3e=s(gh);pae=n(v3e,"STRONG",{});var zQr=s(pae);Aio=r(zQr,"regnet"),zQr.forEach(t),yio=r(v3e," \u2014 "),gP=n(v3e,"A",{href:!0});var QQr=s(gP);Lio=r(QQr,"ConvNextFeatureExtractor"),QQr.forEach(t),xio=r(v3e," (RegNet model)"),v3e.forEach(t),$io=i(ae),hh=n(ae,"LI",{});var F3e=s(hh);uae=n(F3e,"STRONG",{});var WQr=s(uae);kio=r(WQr,"resnet"),WQr.forEach(t),Sio=r(F3e," \u2014 "),hP=n(F3e,"A",{href:!0});var HQr=s(hP);Rio=r(HQr,"ConvNextFeatureExtractor"),HQr.forEach(t),Bio=r(F3e," (ResNet model)"),F3e.forEach(t),Pio=i(ae),ph=n(ae,"LI",{});var T3e=s(ph);_ae=n(T3e,"STRONG",{});var UQr=s(_ae);Iio=r(UQr,"segformer"),UQr.forEach(t),qio=r(T3e," \u2014 "),pP=n(T3e,"A",{href:!0});var JQr=s(pP);Nio=r(JQr,"SegformerFeatureExtractor"),JQr.forEach(t),jio=r(T3e," (SegFormer model)"),T3e.forEach(t),Dio=i(ae),uh=n(ae,"LI",{});var M3e=s(uh);bae=n(M3e,"STRONG",{});var YQr=s(bae);Gio=r(YQr,"speech_to_text"),YQr.forEach(t),Oio=r(M3e," \u2014 "),uP=n(M3e,"A",{href:!0});var KQr=s(uP);Vio=r(KQr,"Speech2TextFeatureExtractor"),KQr.forEach(t),Xio=r(M3e," (Speech2Text model)"),M3e.forEach(t),zio=i(ae),_h=n(ae,"LI",{});var E3e=s(_h);vae=n(E3e,"STRONG",{});var ZQr=s(vae);Qio=r(ZQr,"swin"),ZQr.forEach(t),Wio=r(E3e," \u2014 "),_P=n(E3e,"A",{href:!0});var eWr=s(_P);Hio=r(eWr,"ViTFeatureExtractor"),eWr.forEach(t),Uio=r(E3e," (Swin model)"),E3e.forEach(t),Jio=i(ae),bh=n(ae,"LI",{});var C3e=s(bh);Fae=n(C3e,"STRONG",{});var oWr=s(Fae);Yio=r(oWr,"van"),oWr.forEach(t),Kio=r(C3e," \u2014 "),bP=n(C3e,"A",{href:!0});var rWr=s(bP);Zio=r(rWr,"ConvNextFeatureExtractor"),rWr.forEach(t),edo=r(C3e," (VAN model)"),C3e.forEach(t),odo=i(ae),vh=n(ae,"LI",{});var w3e=s(vh);Tae=n(w3e,"STRONG",{});var tWr=s(Tae);rdo=r(tWr,"vit"),tWr.forEach(t),tdo=r(w3e," \u2014 "),vP=n(w3e,"A",{href:!0});var aWr=s(vP);ado=r(aWr,"ViTFeatureExtractor"),aWr.forEach(t),ndo=r(w3e," (ViT model)"),w3e.forEach(t),sdo=i(ae),Fh=n(ae,"LI",{});var A3e=s(Fh);Mae=n(A3e,"STRONG",{});var nWr=s(Mae);ldo=r(nWr,"vit_mae"),nWr.forEach(t),ido=r(A3e," \u2014 "),FP=n(A3e,"A",{href:!0});var sWr=s(FP);ddo=r(sWr,"ViTFeatureExtractor"),sWr.forEach(t),cdo=r(A3e," (ViTMAE model)"),A3e.forEach(t),fdo=i(ae),Th=n(ae,"LI",{});var y3e=s(Th);Eae=n(y3e,"STRONG",{});var lWr=s(Eae);mdo=r(lWr,"wav2vec2"),lWr.forEach(t),gdo=r(y3e," \u2014 "),TP=n(y3e,"A",{href:!0});var iWr=s(TP);hdo=r(iWr,"Wav2Vec2FeatureExtractor"),iWr.forEach(t),pdo=r(y3e," (Wav2Vec2 model)"),y3e.forEach(t),udo=i(ae),Mh=n(ae,"LI",{});var L3e=s(Mh);Cae=n(L3e,"STRONG",{});var dWr=s(Cae);_do=r(dWr,"yolos"),dWr.forEach(t),bdo=r(L3e," \u2014 "),MP=n(L3e,"A",{href:!0});var cWr=s(MP);vdo=r(cWr,"YolosFeatureExtractor"),cWr.forEach(t),Fdo=r(L3e," (YOLOS model)"),L3e.forEach(t),ae.forEach(t),Tdo=i(Yt),T(Eh.$$.fragment,Yt),Mdo=i(Yt),T(Ch.$$.fragment,Yt),Yt.forEach(t),Edo=i(qs),wh=n(qs,"DIV",{class:!0});var oNe=s(wh);T(u6.$$.fragment,oNe),Cdo=i(oNe),wae=n(oNe,"P",{});var fWr=s(wae);wdo=r(fWr,"Register a new feature extractor for this class."),fWr.forEach(t),oNe.forEach(t),qs.forEach(t),eIe=i(f),vi=n(f,"H2",{class:!0});var rNe=s(vi);Ah=n(rNe,"A",{id:!0,class:!0,href:!0});var mWr=s(Ah);Aae=n(mWr,"SPAN",{});var gWr=s(Aae);T(_6.$$.fragment,gWr),gWr.forEach(t),mWr.forEach(t),Ado=i(rNe),yae=n(rNe,"SPAN",{});var hWr=s(yae);ydo=r(hWr,"AutoProcessor"),hWr.forEach(t),rNe.forEach(t),oIe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(b6.$$.fragment,Ns),Ldo=i(Ns),v6=n(Ns,"P",{});var tNe=s(v6);xdo=r(tNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EP=n(tNe,"A",{href:!0});var pWr=s(EP);$do=r(pWr,"AutoProcessor.from_pretrained()"),pWr.forEach(t),kdo=r(tNe," class method."),tNe.forEach(t),Sdo=i(Ns),F6=n(Ns,"P",{});var aNe=s(F6);Rdo=r(aNe,"This class cannot be instantiated directly using "),Lae=n(aNe,"CODE",{});var uWr=s(Lae);Bdo=r(uWr,"__init__()"),uWr.forEach(t),Pdo=r(aNe," (throws an error)."),aNe.forEach(t),Ido=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(T6.$$.fragment,Kt),qdo=i(Kt),xae=n(Kt,"P",{});var _Wr=s(xae);Ndo=r(_Wr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_Wr.forEach(t),jdo=i(Kt),Fi=n(Kt,"P",{});var lK=s(Fi);Ddo=r(lK,"The processor class to instantiate is selected based on the "),$ae=n(lK,"CODE",{});var bWr=s($ae);Gdo=r(bWr,"model_type"),bWr.forEach(t),Odo=r(lK,` property of the config object (either
passed as an argument or loaded from `),kae=n(lK,"CODE",{});var vWr=s(kae);Vdo=r(vWr,"pretrained_model_name_or_path"),vWr.forEach(t),Xdo=r(lK," if possible):"),lK.forEach(t),zdo=i(Kt),be=n(Kt,"UL",{});var ve=s(be);yh=n(ve,"LI",{});var x3e=s(yh);Sae=n(x3e,"STRONG",{});var FWr=s(Sae);Qdo=r(FWr,"clip"),FWr.forEach(t),Wdo=r(x3e," \u2014 "),CP=n(x3e,"A",{href:!0});var TWr=s(CP);Hdo=r(TWr,"CLIPProcessor"),TWr.forEach(t),Udo=r(x3e," (CLIP model)"),x3e.forEach(t),Jdo=i(ve),Lh=n(ve,"LI",{});var $3e=s(Lh);Rae=n($3e,"STRONG",{});var MWr=s(Rae);Ydo=r(MWr,"flava"),MWr.forEach(t),Kdo=r($3e," \u2014 "),Bae=n($3e,"CODE",{});var EWr=s(Bae);Zdo=r(EWr,"FLAVAProcessor"),EWr.forEach(t),eco=r($3e," (Flava model)"),$3e.forEach(t),oco=i(ve),xh=n(ve,"LI",{});var k3e=s(xh);Pae=n(k3e,"STRONG",{});var CWr=s(Pae);rco=r(CWr,"layoutlmv2"),CWr.forEach(t),tco=r(k3e," \u2014 "),wP=n(k3e,"A",{href:!0});var wWr=s(wP);aco=r(wWr,"LayoutLMv2Processor"),wWr.forEach(t),nco=r(k3e," (LayoutLMv2 model)"),k3e.forEach(t),sco=i(ve),$h=n(ve,"LI",{});var S3e=s($h);Iae=n(S3e,"STRONG",{});var AWr=s(Iae);lco=r(AWr,"layoutxlm"),AWr.forEach(t),ico=r(S3e," \u2014 "),AP=n(S3e,"A",{href:!0});var yWr=s(AP);dco=r(yWr,"LayoutXLMProcessor"),yWr.forEach(t),cco=r(S3e," (LayoutXLM model)"),S3e.forEach(t),fco=i(ve),kh=n(ve,"LI",{});var R3e=s(kh);qae=n(R3e,"STRONG",{});var LWr=s(qae);mco=r(LWr,"sew"),LWr.forEach(t),gco=r(R3e," \u2014 "),yP=n(R3e,"A",{href:!0});var xWr=s(yP);hco=r(xWr,"Wav2Vec2Processor"),xWr.forEach(t),pco=r(R3e," (SEW model)"),R3e.forEach(t),uco=i(ve),Sh=n(ve,"LI",{});var B3e=s(Sh);Nae=n(B3e,"STRONG",{});var $Wr=s(Nae);_co=r($Wr,"sew-d"),$Wr.forEach(t),bco=r(B3e," \u2014 "),LP=n(B3e,"A",{href:!0});var kWr=s(LP);vco=r(kWr,"Wav2Vec2Processor"),kWr.forEach(t),Fco=r(B3e," (SEW-D model)"),B3e.forEach(t),Tco=i(ve),Rh=n(ve,"LI",{});var P3e=s(Rh);jae=n(P3e,"STRONG",{});var SWr=s(jae);Mco=r(SWr,"speech_to_text"),SWr.forEach(t),Eco=r(P3e," \u2014 "),xP=n(P3e,"A",{href:!0});var RWr=s(xP);Cco=r(RWr,"Speech2TextProcessor"),RWr.forEach(t),wco=r(P3e," (Speech2Text model)"),P3e.forEach(t),Aco=i(ve),Bh=n(ve,"LI",{});var I3e=s(Bh);Dae=n(I3e,"STRONG",{});var BWr=s(Dae);yco=r(BWr,"speech_to_text_2"),BWr.forEach(t),Lco=r(I3e," \u2014 "),$P=n(I3e,"A",{href:!0});var PWr=s($P);xco=r(PWr,"Speech2Text2Processor"),PWr.forEach(t),$co=r(I3e," (Speech2Text2 model)"),I3e.forEach(t),kco=i(ve),Ph=n(ve,"LI",{});var q3e=s(Ph);Gae=n(q3e,"STRONG",{});var IWr=s(Gae);Sco=r(IWr,"trocr"),IWr.forEach(t),Rco=r(q3e," \u2014 "),kP=n(q3e,"A",{href:!0});var qWr=s(kP);Bco=r(qWr,"TrOCRProcessor"),qWr.forEach(t),Pco=r(q3e," (TrOCR model)"),q3e.forEach(t),Ico=i(ve),Ih=n(ve,"LI",{});var N3e=s(Ih);Oae=n(N3e,"STRONG",{});var NWr=s(Oae);qco=r(NWr,"unispeech"),NWr.forEach(t),Nco=r(N3e," \u2014 "),SP=n(N3e,"A",{href:!0});var jWr=s(SP);jco=r(jWr,"Wav2Vec2Processor"),jWr.forEach(t),Dco=r(N3e," (UniSpeech model)"),N3e.forEach(t),Gco=i(ve),qh=n(ve,"LI",{});var j3e=s(qh);Vae=n(j3e,"STRONG",{});var DWr=s(Vae);Oco=r(DWr,"unispeech-sat"),DWr.forEach(t),Vco=r(j3e," \u2014 "),RP=n(j3e,"A",{href:!0});var GWr=s(RP);Xco=r(GWr,"Wav2Vec2Processor"),GWr.forEach(t),zco=r(j3e," (UniSpeechSat model)"),j3e.forEach(t),Qco=i(ve),Nh=n(ve,"LI",{});var D3e=s(Nh);Xae=n(D3e,"STRONG",{});var OWr=s(Xae);Wco=r(OWr,"vilt"),OWr.forEach(t),Hco=r(D3e," \u2014 "),BP=n(D3e,"A",{href:!0});var VWr=s(BP);Uco=r(VWr,"ViltProcessor"),VWr.forEach(t),Jco=r(D3e," (ViLT model)"),D3e.forEach(t),Yco=i(ve),jh=n(ve,"LI",{});var G3e=s(jh);zae=n(G3e,"STRONG",{});var XWr=s(zae);Kco=r(XWr,"vision-text-dual-encoder"),XWr.forEach(t),Zco=r(G3e," \u2014 "),PP=n(G3e,"A",{href:!0});var zWr=s(PP);efo=r(zWr,"VisionTextDualEncoderProcessor"),zWr.forEach(t),ofo=r(G3e," (VisionTextDualEncoder model)"),G3e.forEach(t),rfo=i(ve),Dh=n(ve,"LI",{});var O3e=s(Dh);Qae=n(O3e,"STRONG",{});var QWr=s(Qae);tfo=r(QWr,"wav2vec2"),QWr.forEach(t),afo=r(O3e," \u2014 "),IP=n(O3e,"A",{href:!0});var WWr=s(IP);nfo=r(WWr,"Wav2Vec2Processor"),WWr.forEach(t),sfo=r(O3e," (Wav2Vec2 model)"),O3e.forEach(t),lfo=i(ve),Gh=n(ve,"LI",{});var V3e=s(Gh);Wae=n(V3e,"STRONG",{});var HWr=s(Wae);ifo=r(HWr,"wavlm"),HWr.forEach(t),dfo=r(V3e," \u2014 "),qP=n(V3e,"A",{href:!0});var UWr=s(qP);cfo=r(UWr,"Wav2Vec2Processor"),UWr.forEach(t),ffo=r(V3e," (WavLM model)"),V3e.forEach(t),ve.forEach(t),mfo=i(Kt),T(Oh.$$.fragment,Kt),gfo=i(Kt),T(Vh.$$.fragment,Kt),Kt.forEach(t),hfo=i(Ns),Xh=n(Ns,"DIV",{class:!0});var nNe=s(Xh);T(M6.$$.fragment,nNe),pfo=i(nNe),Hae=n(nNe,"P",{});var JWr=s(Hae);ufo=r(JWr,"Register a new processor for this class."),JWr.forEach(t),nNe.forEach(t),Ns.forEach(t),rIe=i(f),Ti=n(f,"H2",{class:!0});var sNe=s(Ti);zh=n(sNe,"A",{id:!0,class:!0,href:!0});var YWr=s(zh);Uae=n(YWr,"SPAN",{});var KWr=s(Uae);T(E6.$$.fragment,KWr),KWr.forEach(t),YWr.forEach(t),_fo=i(sNe),Jae=n(sNe,"SPAN",{});var ZWr=s(Jae);bfo=r(ZWr,"AutoModel"),ZWr.forEach(t),sNe.forEach(t),tIe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(C6.$$.fragment,js),vfo=i(js),Mi=n(js,"P",{});var iK=s(Mi);Ffo=r(iK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NP=n(iK,"A",{href:!0});var eHr=s(NP);Tfo=r(eHr,"from_pretrained()"),eHr.forEach(t),Mfo=r(iK," class method or the "),jP=n(iK,"A",{href:!0});var oHr=s(jP);Efo=r(oHr,"from_config()"),oHr.forEach(t),Cfo=r(iK,` class
method.`),iK.forEach(t),wfo=i(js),w6=n(js,"P",{});var lNe=s(w6);Afo=r(lNe,"This class cannot be instantiated directly using "),Yae=n(lNe,"CODE",{});var rHr=s(Yae);yfo=r(rHr,"__init__()"),rHr.forEach(t),Lfo=r(lNe," (throws an error)."),lNe.forEach(t),xfo=i(js),ot=n(js,"DIV",{class:!0});var ew=s(ot);T(A6.$$.fragment,ew),$fo=i(ew),Kae=n(ew,"P",{});var tHr=s(Kae);kfo=r(tHr,"Instantiates one of the base model classes of the library from a configuration."),tHr.forEach(t),Sfo=i(ew),Ei=n(ew,"P",{});var dK=s(Ei);Rfo=r(dK,`Note:
Loading a model from its configuration file does `),Zae=n(dK,"STRONG",{});var aHr=s(Zae);Bfo=r(aHr,"not"),aHr.forEach(t),Pfo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=n(dK,"A",{href:!0});var nHr=s(DP);Ifo=r(nHr,"from_pretrained()"),nHr.forEach(t),qfo=r(dK," to load the model weights."),dK.forEach(t),Nfo=i(ew),T(Qh.$$.fragment,ew),ew.forEach(t),jfo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(y6.$$.fragment,Zt),Dfo=i(Zt),ene=n(Zt,"P",{});var sHr=s(ene);Gfo=r(sHr,"Instantiate one of the base model classes of the library from a pretrained model."),sHr.forEach(t),Ofo=i(Zt),Aa=n(Zt,"P",{});var ow=s(Aa);Vfo=r(ow,"The model class to instantiate is selected based on the "),one=n(ow,"CODE",{});var lHr=s(one);Xfo=r(lHr,"model_type"),lHr.forEach(t),zfo=r(ow,` property of the config object (either
passed as an argument or loaded from `),rne=n(ow,"CODE",{});var iHr=s(rne);Qfo=r(iHr,"pretrained_model_name_or_path"),iHr.forEach(t),Wfo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=n(ow,"CODE",{});var dHr=s(tne);Hfo=r(dHr,"pretrained_model_name_or_path"),dHr.forEach(t),Ufo=r(ow,":"),ow.forEach(t),Jfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Wh=n($,"LI",{});var X3e=s(Wh);ane=n(X3e,"STRONG",{});var cHr=s(ane);Yfo=r(cHr,"albert"),cHr.forEach(t),Kfo=r(X3e," \u2014 "),GP=n(X3e,"A",{href:!0});var fHr=s(GP);Zfo=r(fHr,"AlbertModel"),fHr.forEach(t),emo=r(X3e," (ALBERT model)"),X3e.forEach(t),omo=i($),Hh=n($,"LI",{});var z3e=s(Hh);nne=n(z3e,"STRONG",{});var mHr=s(nne);rmo=r(mHr,"bart"),mHr.forEach(t),tmo=r(z3e," \u2014 "),OP=n(z3e,"A",{href:!0});var gHr=s(OP);amo=r(gHr,"BartModel"),gHr.forEach(t),nmo=r(z3e," (BART model)"),z3e.forEach(t),smo=i($),Uh=n($,"LI",{});var Q3e=s(Uh);sne=n(Q3e,"STRONG",{});var hHr=s(sne);lmo=r(hHr,"beit"),hHr.forEach(t),imo=r(Q3e," \u2014 "),VP=n(Q3e,"A",{href:!0});var pHr=s(VP);dmo=r(pHr,"BeitModel"),pHr.forEach(t),cmo=r(Q3e," (BEiT model)"),Q3e.forEach(t),fmo=i($),Jh=n($,"LI",{});var W3e=s(Jh);lne=n(W3e,"STRONG",{});var uHr=s(lne);mmo=r(uHr,"bert"),uHr.forEach(t),gmo=r(W3e," \u2014 "),XP=n(W3e,"A",{href:!0});var _Hr=s(XP);hmo=r(_Hr,"BertModel"),_Hr.forEach(t),pmo=r(W3e," (BERT model)"),W3e.forEach(t),umo=i($),Yh=n($,"LI",{});var H3e=s(Yh);ine=n(H3e,"STRONG",{});var bHr=s(ine);_mo=r(bHr,"bert-generation"),bHr.forEach(t),bmo=r(H3e," \u2014 "),zP=n(H3e,"A",{href:!0});var vHr=s(zP);vmo=r(vHr,"BertGenerationEncoder"),vHr.forEach(t),Fmo=r(H3e," (Bert Generation model)"),H3e.forEach(t),Tmo=i($),Kh=n($,"LI",{});var U3e=s(Kh);dne=n(U3e,"STRONG",{});var FHr=s(dne);Mmo=r(FHr,"big_bird"),FHr.forEach(t),Emo=r(U3e," \u2014 "),QP=n(U3e,"A",{href:!0});var THr=s(QP);Cmo=r(THr,"BigBirdModel"),THr.forEach(t),wmo=r(U3e," (BigBird model)"),U3e.forEach(t),Amo=i($),Zh=n($,"LI",{});var J3e=s(Zh);cne=n(J3e,"STRONG",{});var MHr=s(cne);ymo=r(MHr,"bigbird_pegasus"),MHr.forEach(t),Lmo=r(J3e," \u2014 "),WP=n(J3e,"A",{href:!0});var EHr=s(WP);xmo=r(EHr,"BigBirdPegasusModel"),EHr.forEach(t),$mo=r(J3e," (BigBirdPegasus model)"),J3e.forEach(t),kmo=i($),ep=n($,"LI",{});var Y3e=s(ep);fne=n(Y3e,"STRONG",{});var CHr=s(fne);Smo=r(CHr,"blenderbot"),CHr.forEach(t),Rmo=r(Y3e," \u2014 "),HP=n(Y3e,"A",{href:!0});var wHr=s(HP);Bmo=r(wHr,"BlenderbotModel"),wHr.forEach(t),Pmo=r(Y3e," (Blenderbot model)"),Y3e.forEach(t),Imo=i($),op=n($,"LI",{});var K3e=s(op);mne=n(K3e,"STRONG",{});var AHr=s(mne);qmo=r(AHr,"blenderbot-small"),AHr.forEach(t),Nmo=r(K3e," \u2014 "),UP=n(K3e,"A",{href:!0});var yHr=s(UP);jmo=r(yHr,"BlenderbotSmallModel"),yHr.forEach(t),Dmo=r(K3e," (BlenderbotSmall model)"),K3e.forEach(t),Gmo=i($),rp=n($,"LI",{});var Z3e=s(rp);gne=n(Z3e,"STRONG",{});var LHr=s(gne);Omo=r(LHr,"camembert"),LHr.forEach(t),Vmo=r(Z3e," \u2014 "),JP=n(Z3e,"A",{href:!0});var xHr=s(JP);Xmo=r(xHr,"CamembertModel"),xHr.forEach(t),zmo=r(Z3e," (CamemBERT model)"),Z3e.forEach(t),Qmo=i($),tp=n($,"LI",{});var ewe=s(tp);hne=n(ewe,"STRONG",{});var $Hr=s(hne);Wmo=r($Hr,"canine"),$Hr.forEach(t),Hmo=r(ewe," \u2014 "),YP=n(ewe,"A",{href:!0});var kHr=s(YP);Umo=r(kHr,"CanineModel"),kHr.forEach(t),Jmo=r(ewe," (Canine model)"),ewe.forEach(t),Ymo=i($),ap=n($,"LI",{});var owe=s(ap);pne=n(owe,"STRONG",{});var SHr=s(pne);Kmo=r(SHr,"clip"),SHr.forEach(t),Zmo=r(owe," \u2014 "),KP=n(owe,"A",{href:!0});var RHr=s(KP);ego=r(RHr,"CLIPModel"),RHr.forEach(t),ogo=r(owe," (CLIP model)"),owe.forEach(t),rgo=i($),np=n($,"LI",{});var rwe=s(np);une=n(rwe,"STRONG",{});var BHr=s(une);tgo=r(BHr,"convbert"),BHr.forEach(t),ago=r(rwe," \u2014 "),ZP=n(rwe,"A",{href:!0});var PHr=s(ZP);ngo=r(PHr,"ConvBertModel"),PHr.forEach(t),sgo=r(rwe," (ConvBERT model)"),rwe.forEach(t),lgo=i($),sp=n($,"LI",{});var twe=s(sp);_ne=n(twe,"STRONG",{});var IHr=s(_ne);igo=r(IHr,"convnext"),IHr.forEach(t),dgo=r(twe," \u2014 "),eI=n(twe,"A",{href:!0});var qHr=s(eI);cgo=r(qHr,"ConvNextModel"),qHr.forEach(t),fgo=r(twe," (ConvNext model)"),twe.forEach(t),mgo=i($),lp=n($,"LI",{});var awe=s(lp);bne=n(awe,"STRONG",{});var NHr=s(bne);ggo=r(NHr,"ctrl"),NHr.forEach(t),hgo=r(awe," \u2014 "),oI=n(awe,"A",{href:!0});var jHr=s(oI);pgo=r(jHr,"CTRLModel"),jHr.forEach(t),ugo=r(awe," (CTRL model)"),awe.forEach(t),_go=i($),ip=n($,"LI",{});var nwe=s(ip);vne=n(nwe,"STRONG",{});var DHr=s(vne);bgo=r(DHr,"data2vec-audio"),DHr.forEach(t),vgo=r(nwe," \u2014 "),rI=n(nwe,"A",{href:!0});var GHr=s(rI);Fgo=r(GHr,"Data2VecAudioModel"),GHr.forEach(t),Tgo=r(nwe," (Data2VecAudio model)"),nwe.forEach(t),Mgo=i($),dp=n($,"LI",{});var swe=s(dp);Fne=n(swe,"STRONG",{});var OHr=s(Fne);Ego=r(OHr,"data2vec-text"),OHr.forEach(t),Cgo=r(swe," \u2014 "),tI=n(swe,"A",{href:!0});var VHr=s(tI);wgo=r(VHr,"Data2VecTextModel"),VHr.forEach(t),Ago=r(swe," (Data2VecText model)"),swe.forEach(t),ygo=i($),cp=n($,"LI",{});var lwe=s(cp);Tne=n(lwe,"STRONG",{});var XHr=s(Tne);Lgo=r(XHr,"data2vec-vision"),XHr.forEach(t),xgo=r(lwe," \u2014 "),aI=n(lwe,"A",{href:!0});var zHr=s(aI);$go=r(zHr,"Data2VecVisionModel"),zHr.forEach(t),kgo=r(lwe," (Data2VecVision model)"),lwe.forEach(t),Sgo=i($),fp=n($,"LI",{});var iwe=s(fp);Mne=n(iwe,"STRONG",{});var QHr=s(Mne);Rgo=r(QHr,"deberta"),QHr.forEach(t),Bgo=r(iwe," \u2014 "),nI=n(iwe,"A",{href:!0});var WHr=s(nI);Pgo=r(WHr,"DebertaModel"),WHr.forEach(t),Igo=r(iwe," (DeBERTa model)"),iwe.forEach(t),qgo=i($),mp=n($,"LI",{});var dwe=s(mp);Ene=n(dwe,"STRONG",{});var HHr=s(Ene);Ngo=r(HHr,"deberta-v2"),HHr.forEach(t),jgo=r(dwe," \u2014 "),sI=n(dwe,"A",{href:!0});var UHr=s(sI);Dgo=r(UHr,"DebertaV2Model"),UHr.forEach(t),Ggo=r(dwe," (DeBERTa-v2 model)"),dwe.forEach(t),Ogo=i($),gp=n($,"LI",{});var cwe=s(gp);Cne=n(cwe,"STRONG",{});var JHr=s(Cne);Vgo=r(JHr,"decision_transformer"),JHr.forEach(t),Xgo=r(cwe," \u2014 "),lI=n(cwe,"A",{href:!0});var YHr=s(lI);zgo=r(YHr,"DecisionTransformerModel"),YHr.forEach(t),Qgo=r(cwe," (Decision Transformer model)"),cwe.forEach(t),Wgo=i($),hp=n($,"LI",{});var fwe=s(hp);wne=n(fwe,"STRONG",{});var KHr=s(wne);Hgo=r(KHr,"deit"),KHr.forEach(t),Ugo=r(fwe," \u2014 "),iI=n(fwe,"A",{href:!0});var ZHr=s(iI);Jgo=r(ZHr,"DeiTModel"),ZHr.forEach(t),Ygo=r(fwe," (DeiT model)"),fwe.forEach(t),Kgo=i($),pp=n($,"LI",{});var mwe=s(pp);Ane=n(mwe,"STRONG",{});var eUr=s(Ane);Zgo=r(eUr,"detr"),eUr.forEach(t),eho=r(mwe," \u2014 "),dI=n(mwe,"A",{href:!0});var oUr=s(dI);oho=r(oUr,"DetrModel"),oUr.forEach(t),rho=r(mwe," (DETR model)"),mwe.forEach(t),tho=i($),up=n($,"LI",{});var gwe=s(up);yne=n(gwe,"STRONG",{});var rUr=s(yne);aho=r(rUr,"distilbert"),rUr.forEach(t),nho=r(gwe," \u2014 "),cI=n(gwe,"A",{href:!0});var tUr=s(cI);sho=r(tUr,"DistilBertModel"),tUr.forEach(t),lho=r(gwe," (DistilBERT model)"),gwe.forEach(t),iho=i($),_p=n($,"LI",{});var hwe=s(_p);Lne=n(hwe,"STRONG",{});var aUr=s(Lne);dho=r(aUr,"dpr"),aUr.forEach(t),cho=r(hwe," \u2014 "),fI=n(hwe,"A",{href:!0});var nUr=s(fI);fho=r(nUr,"DPRQuestionEncoder"),nUr.forEach(t),mho=r(hwe," (DPR model)"),hwe.forEach(t),gho=i($),bp=n($,"LI",{});var pwe=s(bp);xne=n(pwe,"STRONG",{});var sUr=s(xne);hho=r(sUr,"dpt"),sUr.forEach(t),pho=r(pwe," \u2014 "),mI=n(pwe,"A",{href:!0});var lUr=s(mI);uho=r(lUr,"DPTModel"),lUr.forEach(t),_ho=r(pwe," (DPT model)"),pwe.forEach(t),bho=i($),vp=n($,"LI",{});var uwe=s(vp);$ne=n(uwe,"STRONG",{});var iUr=s($ne);vho=r(iUr,"electra"),iUr.forEach(t),Fho=r(uwe," \u2014 "),gI=n(uwe,"A",{href:!0});var dUr=s(gI);Tho=r(dUr,"ElectraModel"),dUr.forEach(t),Mho=r(uwe," (ELECTRA model)"),uwe.forEach(t),Eho=i($),Fp=n($,"LI",{});var _we=s(Fp);kne=n(_we,"STRONG",{});var cUr=s(kne);Cho=r(cUr,"flaubert"),cUr.forEach(t),who=r(_we," \u2014 "),hI=n(_we,"A",{href:!0});var fUr=s(hI);Aho=r(fUr,"FlaubertModel"),fUr.forEach(t),yho=r(_we," (FlauBERT model)"),_we.forEach(t),Lho=i($),Tp=n($,"LI",{});var bwe=s(Tp);Sne=n(bwe,"STRONG",{});var mUr=s(Sne);xho=r(mUr,"flava"),mUr.forEach(t),$ho=r(bwe," \u2014 "),pI=n(bwe,"A",{href:!0});var gUr=s(pI);kho=r(gUr,"FlavaModel"),gUr.forEach(t),Sho=r(bwe," (Flava model)"),bwe.forEach(t),Rho=i($),Mp=n($,"LI",{});var vwe=s(Mp);Rne=n(vwe,"STRONG",{});var hUr=s(Rne);Bho=r(hUr,"fnet"),hUr.forEach(t),Pho=r(vwe," \u2014 "),uI=n(vwe,"A",{href:!0});var pUr=s(uI);Iho=r(pUr,"FNetModel"),pUr.forEach(t),qho=r(vwe," (FNet model)"),vwe.forEach(t),Nho=i($),Ep=n($,"LI",{});var Fwe=s(Ep);Bne=n(Fwe,"STRONG",{});var uUr=s(Bne);jho=r(uUr,"fsmt"),uUr.forEach(t),Dho=r(Fwe," \u2014 "),_I=n(Fwe,"A",{href:!0});var _Ur=s(_I);Gho=r(_Ur,"FSMTModel"),_Ur.forEach(t),Oho=r(Fwe," (FairSeq Machine-Translation model)"),Fwe.forEach(t),Vho=i($),Ss=n($,"LI",{});var f$=s(Ss);Pne=n(f$,"STRONG",{});var bUr=s(Pne);Xho=r(bUr,"funnel"),bUr.forEach(t),zho=r(f$," \u2014 "),bI=n(f$,"A",{href:!0});var vUr=s(bI);Qho=r(vUr,"FunnelModel"),vUr.forEach(t),Who=r(f$," or "),vI=n(f$,"A",{href:!0});var FUr=s(vI);Hho=r(FUr,"FunnelBaseModel"),FUr.forEach(t),Uho=r(f$," (Funnel Transformer model)"),f$.forEach(t),Jho=i($),Cp=n($,"LI",{});var Twe=s(Cp);Ine=n(Twe,"STRONG",{});var TUr=s(Ine);Yho=r(TUr,"glpn"),TUr.forEach(t),Kho=r(Twe," \u2014 "),FI=n(Twe,"A",{href:!0});var MUr=s(FI);Zho=r(MUr,"GLPNModel"),MUr.forEach(t),epo=r(Twe," (GLPN model)"),Twe.forEach(t),opo=i($),wp=n($,"LI",{});var Mwe=s(wp);qne=n(Mwe,"STRONG",{});var EUr=s(qne);rpo=r(EUr,"gpt2"),EUr.forEach(t),tpo=r(Mwe," \u2014 "),TI=n(Mwe,"A",{href:!0});var CUr=s(TI);apo=r(CUr,"GPT2Model"),CUr.forEach(t),npo=r(Mwe," (OpenAI GPT-2 model)"),Mwe.forEach(t),spo=i($),Ap=n($,"LI",{});var Ewe=s(Ap);Nne=n(Ewe,"STRONG",{});var wUr=s(Nne);lpo=r(wUr,"gpt_neo"),wUr.forEach(t),ipo=r(Ewe," \u2014 "),MI=n(Ewe,"A",{href:!0});var AUr=s(MI);dpo=r(AUr,"GPTNeoModel"),AUr.forEach(t),cpo=r(Ewe," (GPT Neo model)"),Ewe.forEach(t),fpo=i($),yp=n($,"LI",{});var Cwe=s(yp);jne=n(Cwe,"STRONG",{});var yUr=s(jne);mpo=r(yUr,"gptj"),yUr.forEach(t),gpo=r(Cwe," \u2014 "),EI=n(Cwe,"A",{href:!0});var LUr=s(EI);hpo=r(LUr,"GPTJModel"),LUr.forEach(t),ppo=r(Cwe," (GPT-J model)"),Cwe.forEach(t),upo=i($),Lp=n($,"LI",{});var wwe=s(Lp);Dne=n(wwe,"STRONG",{});var xUr=s(Dne);_po=r(xUr,"hubert"),xUr.forEach(t),bpo=r(wwe," \u2014 "),CI=n(wwe,"A",{href:!0});var $Ur=s(CI);vpo=r($Ur,"HubertModel"),$Ur.forEach(t),Fpo=r(wwe," (Hubert model)"),wwe.forEach(t),Tpo=i($),xp=n($,"LI",{});var Awe=s(xp);Gne=n(Awe,"STRONG",{});var kUr=s(Gne);Mpo=r(kUr,"ibert"),kUr.forEach(t),Epo=r(Awe," \u2014 "),wI=n(Awe,"A",{href:!0});var SUr=s(wI);Cpo=r(SUr,"IBertModel"),SUr.forEach(t),wpo=r(Awe," (I-BERT model)"),Awe.forEach(t),Apo=i($),$p=n($,"LI",{});var ywe=s($p);One=n(ywe,"STRONG",{});var RUr=s(One);ypo=r(RUr,"imagegpt"),RUr.forEach(t),Lpo=r(ywe," \u2014 "),AI=n(ywe,"A",{href:!0});var BUr=s(AI);xpo=r(BUr,"ImageGPTModel"),BUr.forEach(t),$po=r(ywe," (ImageGPT model)"),ywe.forEach(t),kpo=i($),kp=n($,"LI",{});var Lwe=s(kp);Vne=n(Lwe,"STRONG",{});var PUr=s(Vne);Spo=r(PUr,"layoutlm"),PUr.forEach(t),Rpo=r(Lwe," \u2014 "),yI=n(Lwe,"A",{href:!0});var IUr=s(yI);Bpo=r(IUr,"LayoutLMModel"),IUr.forEach(t),Ppo=r(Lwe," (LayoutLM model)"),Lwe.forEach(t),Ipo=i($),Sp=n($,"LI",{});var xwe=s(Sp);Xne=n(xwe,"STRONG",{});var qUr=s(Xne);qpo=r(qUr,"layoutlmv2"),qUr.forEach(t),Npo=r(xwe," \u2014 "),LI=n(xwe,"A",{href:!0});var NUr=s(LI);jpo=r(NUr,"LayoutLMv2Model"),NUr.forEach(t),Dpo=r(xwe," (LayoutLMv2 model)"),xwe.forEach(t),Gpo=i($),Rp=n($,"LI",{});var $we=s(Rp);zne=n($we,"STRONG",{});var jUr=s(zne);Opo=r(jUr,"led"),jUr.forEach(t),Vpo=r($we," \u2014 "),xI=n($we,"A",{href:!0});var DUr=s(xI);Xpo=r(DUr,"LEDModel"),DUr.forEach(t),zpo=r($we," (LED model)"),$we.forEach(t),Qpo=i($),Bp=n($,"LI",{});var kwe=s(Bp);Qne=n(kwe,"STRONG",{});var GUr=s(Qne);Wpo=r(GUr,"longformer"),GUr.forEach(t),Hpo=r(kwe," \u2014 "),$I=n(kwe,"A",{href:!0});var OUr=s($I);Upo=r(OUr,"LongformerModel"),OUr.forEach(t),Jpo=r(kwe," (Longformer model)"),kwe.forEach(t),Ypo=i($),Pp=n($,"LI",{});var Swe=s(Pp);Wne=n(Swe,"STRONG",{});var VUr=s(Wne);Kpo=r(VUr,"luke"),VUr.forEach(t),Zpo=r(Swe," \u2014 "),kI=n(Swe,"A",{href:!0});var XUr=s(kI);euo=r(XUr,"LukeModel"),XUr.forEach(t),ouo=r(Swe," (LUKE model)"),Swe.forEach(t),ruo=i($),Ip=n($,"LI",{});var Rwe=s(Ip);Hne=n(Rwe,"STRONG",{});var zUr=s(Hne);tuo=r(zUr,"lxmert"),zUr.forEach(t),auo=r(Rwe," \u2014 "),SI=n(Rwe,"A",{href:!0});var QUr=s(SI);nuo=r(QUr,"LxmertModel"),QUr.forEach(t),suo=r(Rwe," (LXMERT model)"),Rwe.forEach(t),luo=i($),qp=n($,"LI",{});var Bwe=s(qp);Une=n(Bwe,"STRONG",{});var WUr=s(Une);iuo=r(WUr,"m2m_100"),WUr.forEach(t),duo=r(Bwe," \u2014 "),RI=n(Bwe,"A",{href:!0});var HUr=s(RI);cuo=r(HUr,"M2M100Model"),HUr.forEach(t),fuo=r(Bwe," (M2M100 model)"),Bwe.forEach(t),muo=i($),Np=n($,"LI",{});var Pwe=s(Np);Jne=n(Pwe,"STRONG",{});var UUr=s(Jne);guo=r(UUr,"marian"),UUr.forEach(t),huo=r(Pwe," \u2014 "),BI=n(Pwe,"A",{href:!0});var JUr=s(BI);puo=r(JUr,"MarianModel"),JUr.forEach(t),uuo=r(Pwe," (Marian model)"),Pwe.forEach(t),_uo=i($),jp=n($,"LI",{});var Iwe=s(jp);Yne=n(Iwe,"STRONG",{});var YUr=s(Yne);buo=r(YUr,"maskformer"),YUr.forEach(t),vuo=r(Iwe," \u2014 "),PI=n(Iwe,"A",{href:!0});var KUr=s(PI);Fuo=r(KUr,"MaskFormerModel"),KUr.forEach(t),Tuo=r(Iwe," (MaskFormer model)"),Iwe.forEach(t),Muo=i($),Dp=n($,"LI",{});var qwe=s(Dp);Kne=n(qwe,"STRONG",{});var ZUr=s(Kne);Euo=r(ZUr,"mbart"),ZUr.forEach(t),Cuo=r(qwe," \u2014 "),II=n(qwe,"A",{href:!0});var eJr=s(II);wuo=r(eJr,"MBartModel"),eJr.forEach(t),Auo=r(qwe," (mBART model)"),qwe.forEach(t),yuo=i($),Gp=n($,"LI",{});var Nwe=s(Gp);Zne=n(Nwe,"STRONG",{});var oJr=s(Zne);Luo=r(oJr,"megatron-bert"),oJr.forEach(t),xuo=r(Nwe," \u2014 "),qI=n(Nwe,"A",{href:!0});var rJr=s(qI);$uo=r(rJr,"MegatronBertModel"),rJr.forEach(t),kuo=r(Nwe," (MegatronBert model)"),Nwe.forEach(t),Suo=i($),Op=n($,"LI",{});var jwe=s(Op);ese=n(jwe,"STRONG",{});var tJr=s(ese);Ruo=r(tJr,"mobilebert"),tJr.forEach(t),Buo=r(jwe," \u2014 "),NI=n(jwe,"A",{href:!0});var aJr=s(NI);Puo=r(aJr,"MobileBertModel"),aJr.forEach(t),Iuo=r(jwe," (MobileBERT model)"),jwe.forEach(t),quo=i($),Vp=n($,"LI",{});var Dwe=s(Vp);ose=n(Dwe,"STRONG",{});var nJr=s(ose);Nuo=r(nJr,"mpnet"),nJr.forEach(t),juo=r(Dwe," \u2014 "),jI=n(Dwe,"A",{href:!0});var sJr=s(jI);Duo=r(sJr,"MPNetModel"),sJr.forEach(t),Guo=r(Dwe," (MPNet model)"),Dwe.forEach(t),Ouo=i($),Xp=n($,"LI",{});var Gwe=s(Xp);rse=n(Gwe,"STRONG",{});var lJr=s(rse);Vuo=r(lJr,"mt5"),lJr.forEach(t),Xuo=r(Gwe," \u2014 "),DI=n(Gwe,"A",{href:!0});var iJr=s(DI);zuo=r(iJr,"MT5Model"),iJr.forEach(t),Quo=r(Gwe," (mT5 model)"),Gwe.forEach(t),Wuo=i($),zp=n($,"LI",{});var Owe=s(zp);tse=n(Owe,"STRONG",{});var dJr=s(tse);Huo=r(dJr,"nystromformer"),dJr.forEach(t),Uuo=r(Owe," \u2014 "),GI=n(Owe,"A",{href:!0});var cJr=s(GI);Juo=r(cJr,"NystromformerModel"),cJr.forEach(t),Yuo=r(Owe," (Nystromformer model)"),Owe.forEach(t),Kuo=i($),Qp=n($,"LI",{});var Vwe=s(Qp);ase=n(Vwe,"STRONG",{});var fJr=s(ase);Zuo=r(fJr,"openai-gpt"),fJr.forEach(t),e_o=r(Vwe," \u2014 "),OI=n(Vwe,"A",{href:!0});var mJr=s(OI);o_o=r(mJr,"OpenAIGPTModel"),mJr.forEach(t),r_o=r(Vwe," (OpenAI GPT model)"),Vwe.forEach(t),t_o=i($),Wp=n($,"LI",{});var Xwe=s(Wp);nse=n(Xwe,"STRONG",{});var gJr=s(nse);a_o=r(gJr,"opt"),gJr.forEach(t),n_o=r(Xwe," \u2014 "),VI=n(Xwe,"A",{href:!0});var hJr=s(VI);s_o=r(hJr,"OPTModel"),hJr.forEach(t),l_o=r(Xwe," (OPT model)"),Xwe.forEach(t),i_o=i($),Hp=n($,"LI",{});var zwe=s(Hp);sse=n(zwe,"STRONG",{});var pJr=s(sse);d_o=r(pJr,"pegasus"),pJr.forEach(t),c_o=r(zwe," \u2014 "),XI=n(zwe,"A",{href:!0});var uJr=s(XI);f_o=r(uJr,"PegasusModel"),uJr.forEach(t),m_o=r(zwe," (Pegasus model)"),zwe.forEach(t),g_o=i($),Up=n($,"LI",{});var Qwe=s(Up);lse=n(Qwe,"STRONG",{});var _Jr=s(lse);h_o=r(_Jr,"perceiver"),_Jr.forEach(t),p_o=r(Qwe," \u2014 "),zI=n(Qwe,"A",{href:!0});var bJr=s(zI);u_o=r(bJr,"PerceiverModel"),bJr.forEach(t),__o=r(Qwe," (Perceiver model)"),Qwe.forEach(t),b_o=i($),Jp=n($,"LI",{});var Wwe=s(Jp);ise=n(Wwe,"STRONG",{});var vJr=s(ise);v_o=r(vJr,"plbart"),vJr.forEach(t),F_o=r(Wwe," \u2014 "),QI=n(Wwe,"A",{href:!0});var FJr=s(QI);T_o=r(FJr,"PLBartModel"),FJr.forEach(t),M_o=r(Wwe," (PLBart model)"),Wwe.forEach(t),E_o=i($),Yp=n($,"LI",{});var Hwe=s(Yp);dse=n(Hwe,"STRONG",{});var TJr=s(dse);C_o=r(TJr,"poolformer"),TJr.forEach(t),w_o=r(Hwe," \u2014 "),WI=n(Hwe,"A",{href:!0});var MJr=s(WI);A_o=r(MJr,"PoolFormerModel"),MJr.forEach(t),y_o=r(Hwe," (PoolFormer model)"),Hwe.forEach(t),L_o=i($),Kp=n($,"LI",{});var Uwe=s(Kp);cse=n(Uwe,"STRONG",{});var EJr=s(cse);x_o=r(EJr,"prophetnet"),EJr.forEach(t),$_o=r(Uwe," \u2014 "),HI=n(Uwe,"A",{href:!0});var CJr=s(HI);k_o=r(CJr,"ProphetNetModel"),CJr.forEach(t),S_o=r(Uwe," (ProphetNet model)"),Uwe.forEach(t),R_o=i($),Zp=n($,"LI",{});var Jwe=s(Zp);fse=n(Jwe,"STRONG",{});var wJr=s(fse);B_o=r(wJr,"qdqbert"),wJr.forEach(t),P_o=r(Jwe," \u2014 "),UI=n(Jwe,"A",{href:!0});var AJr=s(UI);I_o=r(AJr,"QDQBertModel"),AJr.forEach(t),q_o=r(Jwe," (QDQBert model)"),Jwe.forEach(t),N_o=i($),eu=n($,"LI",{});var Ywe=s(eu);mse=n(Ywe,"STRONG",{});var yJr=s(mse);j_o=r(yJr,"reformer"),yJr.forEach(t),D_o=r(Ywe," \u2014 "),JI=n(Ywe,"A",{href:!0});var LJr=s(JI);G_o=r(LJr,"ReformerModel"),LJr.forEach(t),O_o=r(Ywe," (Reformer model)"),Ywe.forEach(t),V_o=i($),ou=n($,"LI",{});var Kwe=s(ou);gse=n(Kwe,"STRONG",{});var xJr=s(gse);X_o=r(xJr,"regnet"),xJr.forEach(t),z_o=r(Kwe," \u2014 "),YI=n(Kwe,"A",{href:!0});var $Jr=s(YI);Q_o=r($Jr,"RegNetModel"),$Jr.forEach(t),W_o=r(Kwe," (RegNet model)"),Kwe.forEach(t),H_o=i($),ru=n($,"LI",{});var Zwe=s(ru);hse=n(Zwe,"STRONG",{});var kJr=s(hse);U_o=r(kJr,"rembert"),kJr.forEach(t),J_o=r(Zwe," \u2014 "),KI=n(Zwe,"A",{href:!0});var SJr=s(KI);Y_o=r(SJr,"RemBertModel"),SJr.forEach(t),K_o=r(Zwe," (RemBERT model)"),Zwe.forEach(t),Z_o=i($),tu=n($,"LI",{});var eAe=s(tu);pse=n(eAe,"STRONG",{});var RJr=s(pse);e1o=r(RJr,"resnet"),RJr.forEach(t),o1o=r(eAe," \u2014 "),ZI=n(eAe,"A",{href:!0});var BJr=s(ZI);r1o=r(BJr,"ResNetModel"),BJr.forEach(t),t1o=r(eAe," (ResNet model)"),eAe.forEach(t),a1o=i($),au=n($,"LI",{});var oAe=s(au);use=n(oAe,"STRONG",{});var PJr=s(use);n1o=r(PJr,"retribert"),PJr.forEach(t),s1o=r(oAe," \u2014 "),eq=n(oAe,"A",{href:!0});var IJr=s(eq);l1o=r(IJr,"RetriBertModel"),IJr.forEach(t),i1o=r(oAe," (RetriBERT model)"),oAe.forEach(t),d1o=i($),nu=n($,"LI",{});var rAe=s(nu);_se=n(rAe,"STRONG",{});var qJr=s(_se);c1o=r(qJr,"roberta"),qJr.forEach(t),f1o=r(rAe," \u2014 "),oq=n(rAe,"A",{href:!0});var NJr=s(oq);m1o=r(NJr,"RobertaModel"),NJr.forEach(t),g1o=r(rAe," (RoBERTa model)"),rAe.forEach(t),h1o=i($),su=n($,"LI",{});var tAe=s(su);bse=n(tAe,"STRONG",{});var jJr=s(bse);p1o=r(jJr,"roformer"),jJr.forEach(t),u1o=r(tAe," \u2014 "),rq=n(tAe,"A",{href:!0});var DJr=s(rq);_1o=r(DJr,"RoFormerModel"),DJr.forEach(t),b1o=r(tAe," (RoFormer model)"),tAe.forEach(t),v1o=i($),lu=n($,"LI",{});var aAe=s(lu);vse=n(aAe,"STRONG",{});var GJr=s(vse);F1o=r(GJr,"segformer"),GJr.forEach(t),T1o=r(aAe," \u2014 "),tq=n(aAe,"A",{href:!0});var OJr=s(tq);M1o=r(OJr,"SegformerModel"),OJr.forEach(t),E1o=r(aAe," (SegFormer model)"),aAe.forEach(t),C1o=i($),iu=n($,"LI",{});var nAe=s(iu);Fse=n(nAe,"STRONG",{});var VJr=s(Fse);w1o=r(VJr,"sew"),VJr.forEach(t),A1o=r(nAe," \u2014 "),aq=n(nAe,"A",{href:!0});var XJr=s(aq);y1o=r(XJr,"SEWModel"),XJr.forEach(t),L1o=r(nAe," (SEW model)"),nAe.forEach(t),x1o=i($),du=n($,"LI",{});var sAe=s(du);Tse=n(sAe,"STRONG",{});var zJr=s(Tse);$1o=r(zJr,"sew-d"),zJr.forEach(t),k1o=r(sAe," \u2014 "),nq=n(sAe,"A",{href:!0});var QJr=s(nq);S1o=r(QJr,"SEWDModel"),QJr.forEach(t),R1o=r(sAe," (SEW-D model)"),sAe.forEach(t),B1o=i($),cu=n($,"LI",{});var lAe=s(cu);Mse=n(lAe,"STRONG",{});var WJr=s(Mse);P1o=r(WJr,"speech_to_text"),WJr.forEach(t),I1o=r(lAe," \u2014 "),sq=n(lAe,"A",{href:!0});var HJr=s(sq);q1o=r(HJr,"Speech2TextModel"),HJr.forEach(t),N1o=r(lAe," (Speech2Text model)"),lAe.forEach(t),j1o=i($),fu=n($,"LI",{});var iAe=s(fu);Ese=n(iAe,"STRONG",{});var UJr=s(Ese);D1o=r(UJr,"splinter"),UJr.forEach(t),G1o=r(iAe," \u2014 "),lq=n(iAe,"A",{href:!0});var JJr=s(lq);O1o=r(JJr,"SplinterModel"),JJr.forEach(t),V1o=r(iAe," (Splinter model)"),iAe.forEach(t),X1o=i($),mu=n($,"LI",{});var dAe=s(mu);Cse=n(dAe,"STRONG",{});var YJr=s(Cse);z1o=r(YJr,"squeezebert"),YJr.forEach(t),Q1o=r(dAe," \u2014 "),iq=n(dAe,"A",{href:!0});var KJr=s(iq);W1o=r(KJr,"SqueezeBertModel"),KJr.forEach(t),H1o=r(dAe," (SqueezeBERT model)"),dAe.forEach(t),U1o=i($),gu=n($,"LI",{});var cAe=s(gu);wse=n(cAe,"STRONG",{});var ZJr=s(wse);J1o=r(ZJr,"swin"),ZJr.forEach(t),Y1o=r(cAe," \u2014 "),dq=n(cAe,"A",{href:!0});var eYr=s(dq);K1o=r(eYr,"SwinModel"),eYr.forEach(t),Z1o=r(cAe," (Swin model)"),cAe.forEach(t),e7o=i($),hu=n($,"LI",{});var fAe=s(hu);Ase=n(fAe,"STRONG",{});var oYr=s(Ase);o7o=r(oYr,"t5"),oYr.forEach(t),r7o=r(fAe," \u2014 "),cq=n(fAe,"A",{href:!0});var rYr=s(cq);t7o=r(rYr,"T5Model"),rYr.forEach(t),a7o=r(fAe," (T5 model)"),fAe.forEach(t),n7o=i($),pu=n($,"LI",{});var mAe=s(pu);yse=n(mAe,"STRONG",{});var tYr=s(yse);s7o=r(tYr,"tapas"),tYr.forEach(t),l7o=r(mAe," \u2014 "),fq=n(mAe,"A",{href:!0});var aYr=s(fq);i7o=r(aYr,"TapasModel"),aYr.forEach(t),d7o=r(mAe," (TAPAS model)"),mAe.forEach(t),c7o=i($),uu=n($,"LI",{});var gAe=s(uu);Lse=n(gAe,"STRONG",{});var nYr=s(Lse);f7o=r(nYr,"transfo-xl"),nYr.forEach(t),m7o=r(gAe," \u2014 "),mq=n(gAe,"A",{href:!0});var sYr=s(mq);g7o=r(sYr,"TransfoXLModel"),sYr.forEach(t),h7o=r(gAe," (Transformer-XL model)"),gAe.forEach(t),p7o=i($),_u=n($,"LI",{});var hAe=s(_u);xse=n(hAe,"STRONG",{});var lYr=s(xse);u7o=r(lYr,"unispeech"),lYr.forEach(t),_7o=r(hAe," \u2014 "),gq=n(hAe,"A",{href:!0});var iYr=s(gq);b7o=r(iYr,"UniSpeechModel"),iYr.forEach(t),v7o=r(hAe," (UniSpeech model)"),hAe.forEach(t),F7o=i($),bu=n($,"LI",{});var pAe=s(bu);$se=n(pAe,"STRONG",{});var dYr=s($se);T7o=r(dYr,"unispeech-sat"),dYr.forEach(t),M7o=r(pAe," \u2014 "),hq=n(pAe,"A",{href:!0});var cYr=s(hq);E7o=r(cYr,"UniSpeechSatModel"),cYr.forEach(t),C7o=r(pAe," (UniSpeechSat model)"),pAe.forEach(t),w7o=i($),vu=n($,"LI",{});var uAe=s(vu);kse=n(uAe,"STRONG",{});var fYr=s(kse);A7o=r(fYr,"van"),fYr.forEach(t),y7o=r(uAe," \u2014 "),pq=n(uAe,"A",{href:!0});var mYr=s(pq);L7o=r(mYr,"VanModel"),mYr.forEach(t),x7o=r(uAe," (VAN model)"),uAe.forEach(t),$7o=i($),Fu=n($,"LI",{});var _Ae=s(Fu);Sse=n(_Ae,"STRONG",{});var gYr=s(Sse);k7o=r(gYr,"vilt"),gYr.forEach(t),S7o=r(_Ae," \u2014 "),uq=n(_Ae,"A",{href:!0});var hYr=s(uq);R7o=r(hYr,"ViltModel"),hYr.forEach(t),B7o=r(_Ae," (ViLT model)"),_Ae.forEach(t),P7o=i($),Tu=n($,"LI",{});var bAe=s(Tu);Rse=n(bAe,"STRONG",{});var pYr=s(Rse);I7o=r(pYr,"vision-text-dual-encoder"),pYr.forEach(t),q7o=r(bAe," \u2014 "),_q=n(bAe,"A",{href:!0});var uYr=s(_q);N7o=r(uYr,"VisionTextDualEncoderModel"),uYr.forEach(t),j7o=r(bAe," (VisionTextDualEncoder model)"),bAe.forEach(t),D7o=i($),Mu=n($,"LI",{});var vAe=s(Mu);Bse=n(vAe,"STRONG",{});var _Yr=s(Bse);G7o=r(_Yr,"visual_bert"),_Yr.forEach(t),O7o=r(vAe," \u2014 "),bq=n(vAe,"A",{href:!0});var bYr=s(bq);V7o=r(bYr,"VisualBertModel"),bYr.forEach(t),X7o=r(vAe," (VisualBert model)"),vAe.forEach(t),z7o=i($),Eu=n($,"LI",{});var FAe=s(Eu);Pse=n(FAe,"STRONG",{});var vYr=s(Pse);Q7o=r(vYr,"vit"),vYr.forEach(t),W7o=r(FAe," \u2014 "),vq=n(FAe,"A",{href:!0});var FYr=s(vq);H7o=r(FYr,"ViTModel"),FYr.forEach(t),U7o=r(FAe," (ViT model)"),FAe.forEach(t),J7o=i($),Cu=n($,"LI",{});var TAe=s(Cu);Ise=n(TAe,"STRONG",{});var TYr=s(Ise);Y7o=r(TYr,"vit_mae"),TYr.forEach(t),K7o=r(TAe," \u2014 "),Fq=n(TAe,"A",{href:!0});var MYr=s(Fq);Z7o=r(MYr,"ViTMAEModel"),MYr.forEach(t),ebo=r(TAe," (ViTMAE model)"),TAe.forEach(t),obo=i($),wu=n($,"LI",{});var MAe=s(wu);qse=n(MAe,"STRONG",{});var EYr=s(qse);rbo=r(EYr,"wav2vec2"),EYr.forEach(t),tbo=r(MAe," \u2014 "),Tq=n(MAe,"A",{href:!0});var CYr=s(Tq);abo=r(CYr,"Wav2Vec2Model"),CYr.forEach(t),nbo=r(MAe," (Wav2Vec2 model)"),MAe.forEach(t),sbo=i($),Au=n($,"LI",{});var EAe=s(Au);Nse=n(EAe,"STRONG",{});var wYr=s(Nse);lbo=r(wYr,"wavlm"),wYr.forEach(t),ibo=r(EAe," \u2014 "),Mq=n(EAe,"A",{href:!0});var AYr=s(Mq);dbo=r(AYr,"WavLMModel"),AYr.forEach(t),cbo=r(EAe," (WavLM model)"),EAe.forEach(t),fbo=i($),yu=n($,"LI",{});var CAe=s(yu);jse=n(CAe,"STRONG",{});var yYr=s(jse);mbo=r(yYr,"xglm"),yYr.forEach(t),gbo=r(CAe," \u2014 "),Eq=n(CAe,"A",{href:!0});var LYr=s(Eq);hbo=r(LYr,"XGLMModel"),LYr.forEach(t),pbo=r(CAe," (XGLM model)"),CAe.forEach(t),ubo=i($),Lu=n($,"LI",{});var wAe=s(Lu);Dse=n(wAe,"STRONG",{});var xYr=s(Dse);_bo=r(xYr,"xlm"),xYr.forEach(t),bbo=r(wAe," \u2014 "),Cq=n(wAe,"A",{href:!0});var $Yr=s(Cq);vbo=r($Yr,"XLMModel"),$Yr.forEach(t),Fbo=r(wAe," (XLM model)"),wAe.forEach(t),Tbo=i($),xu=n($,"LI",{});var AAe=s(xu);Gse=n(AAe,"STRONG",{});var kYr=s(Gse);Mbo=r(kYr,"xlm-prophetnet"),kYr.forEach(t),Ebo=r(AAe," \u2014 "),wq=n(AAe,"A",{href:!0});var SYr=s(wq);Cbo=r(SYr,"XLMProphetNetModel"),SYr.forEach(t),wbo=r(AAe," (XLMProphetNet model)"),AAe.forEach(t),Abo=i($),$u=n($,"LI",{});var yAe=s($u);Ose=n(yAe,"STRONG",{});var RYr=s(Ose);ybo=r(RYr,"xlm-roberta"),RYr.forEach(t),Lbo=r(yAe," \u2014 "),Aq=n(yAe,"A",{href:!0});var BYr=s(Aq);xbo=r(BYr,"XLMRobertaModel"),BYr.forEach(t),$bo=r(yAe," (XLM-RoBERTa model)"),yAe.forEach(t),kbo=i($),ku=n($,"LI",{});var LAe=s(ku);Vse=n(LAe,"STRONG",{});var PYr=s(Vse);Sbo=r(PYr,"xlm-roberta-xl"),PYr.forEach(t),Rbo=r(LAe," \u2014 "),yq=n(LAe,"A",{href:!0});var IYr=s(yq);Bbo=r(IYr,"XLMRobertaXLModel"),IYr.forEach(t),Pbo=r(LAe," (XLM-RoBERTa-XL model)"),LAe.forEach(t),Ibo=i($),Su=n($,"LI",{});var xAe=s(Su);Xse=n(xAe,"STRONG",{});var qYr=s(Xse);qbo=r(qYr,"xlnet"),qYr.forEach(t),Nbo=r(xAe," \u2014 "),Lq=n(xAe,"A",{href:!0});var NYr=s(Lq);jbo=r(NYr,"XLNetModel"),NYr.forEach(t),Dbo=r(xAe," (XLNet model)"),xAe.forEach(t),Gbo=i($),Ru=n($,"LI",{});var $Ae=s(Ru);zse=n($Ae,"STRONG",{});var jYr=s(zse);Obo=r(jYr,"yolos"),jYr.forEach(t),Vbo=r($Ae," \u2014 "),xq=n($Ae,"A",{href:!0});var DYr=s(xq);Xbo=r(DYr,"YolosModel"),DYr.forEach(t),zbo=r($Ae," (YOLOS model)"),$Ae.forEach(t),Qbo=i($),Bu=n($,"LI",{});var kAe=s(Bu);Qse=n(kAe,"STRONG",{});var GYr=s(Qse);Wbo=r(GYr,"yoso"),GYr.forEach(t),Hbo=r(kAe," \u2014 "),$q=n(kAe,"A",{href:!0});var OYr=s($q);Ubo=r(OYr,"YosoModel"),OYr.forEach(t),Jbo=r(kAe," (YOSO model)"),kAe.forEach(t),$.forEach(t),Ybo=i(Zt),Pu=n(Zt,"P",{});var SAe=s(Pu);Kbo=r(SAe,"The model is set in evaluation mode by default using "),Wse=n(SAe,"CODE",{});var VYr=s(Wse);Zbo=r(VYr,"model.eval()"),VYr.forEach(t),e2o=r(SAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hse=n(SAe,"CODE",{});var XYr=s(Hse);o2o=r(XYr,"model.train()"),XYr.forEach(t),SAe.forEach(t),r2o=i(Zt),T(Iu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),aIe=i(f),Ci=n(f,"H2",{class:!0});var iNe=s(Ci);qu=n(iNe,"A",{id:!0,class:!0,href:!0});var zYr=s(qu);Use=n(zYr,"SPAN",{});var QYr=s(Use);T(L6.$$.fragment,QYr),QYr.forEach(t),zYr.forEach(t),t2o=i(iNe),Jse=n(iNe,"SPAN",{});var WYr=s(Jse);a2o=r(WYr,"AutoModelForPreTraining"),WYr.forEach(t),iNe.forEach(t),nIe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(x6.$$.fragment,Ds),n2o=i(Ds),wi=n(Ds,"P",{});var cK=s(wi);s2o=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=n(cK,"A",{href:!0});var HYr=s(kq);l2o=r(HYr,"from_pretrained()"),HYr.forEach(t),i2o=r(cK," class method or the "),Sq=n(cK,"A",{href:!0});var UYr=s(Sq);d2o=r(UYr,"from_config()"),UYr.forEach(t),c2o=r(cK,` class
method.`),cK.forEach(t),f2o=i(Ds),$6=n(Ds,"P",{});var dNe=s($6);m2o=r(dNe,"This class cannot be instantiated directly using "),Yse=n(dNe,"CODE",{});var JYr=s(Yse);g2o=r(JYr,"__init__()"),JYr.forEach(t),h2o=r(dNe," (throws an error)."),dNe.forEach(t),p2o=i(Ds),rt=n(Ds,"DIV",{class:!0});var rw=s(rt);T(k6.$$.fragment,rw),u2o=i(rw),Kse=n(rw,"P",{});var YYr=s(Kse);_2o=r(YYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YYr.forEach(t),b2o=i(rw),Ai=n(rw,"P",{});var fK=s(Ai);v2o=r(fK,`Note:
Loading a model from its configuration file does `),Zse=n(fK,"STRONG",{});var KYr=s(Zse);F2o=r(KYr,"not"),KYr.forEach(t),T2o=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(fK,"A",{href:!0});var ZYr=s(Rq);M2o=r(ZYr,"from_pretrained()"),ZYr.forEach(t),E2o=r(fK," to load the model weights."),fK.forEach(t),C2o=i(rw),T(Nu.$$.fragment,rw),rw.forEach(t),w2o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(S6.$$.fragment,ea),A2o=i(ea),ele=n(ea,"P",{});var eKr=s(ele);y2o=r(eKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eKr.forEach(t),L2o=i(ea),ya=n(ea,"P",{});var tw=s(ya);x2o=r(tw,"The model class to instantiate is selected based on the "),ole=n(tw,"CODE",{});var oKr=s(ole);$2o=r(oKr,"model_type"),oKr.forEach(t),k2o=r(tw,` property of the config object (either
passed as an argument or loaded from `),rle=n(tw,"CODE",{});var rKr=s(rle);S2o=r(rKr,"pretrained_model_name_or_path"),rKr.forEach(t),R2o=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(tw,"CODE",{});var tKr=s(tle);B2o=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),P2o=r(tw,":"),tw.forEach(t),I2o=i(ea),G=n(ea,"UL",{});var V=s(G);ju=n(V,"LI",{});var RAe=s(ju);ale=n(RAe,"STRONG",{});var aKr=s(ale);q2o=r(aKr,"albert"),aKr.forEach(t),N2o=r(RAe," \u2014 "),Bq=n(RAe,"A",{href:!0});var nKr=s(Bq);j2o=r(nKr,"AlbertForPreTraining"),nKr.forEach(t),D2o=r(RAe," (ALBERT model)"),RAe.forEach(t),G2o=i(V),Du=n(V,"LI",{});var BAe=s(Du);nle=n(BAe,"STRONG",{});var sKr=s(nle);O2o=r(sKr,"bart"),sKr.forEach(t),V2o=r(BAe," \u2014 "),Pq=n(BAe,"A",{href:!0});var lKr=s(Pq);X2o=r(lKr,"BartForConditionalGeneration"),lKr.forEach(t),z2o=r(BAe," (BART model)"),BAe.forEach(t),Q2o=i(V),Gu=n(V,"LI",{});var PAe=s(Gu);sle=n(PAe,"STRONG",{});var iKr=s(sle);W2o=r(iKr,"bert"),iKr.forEach(t),H2o=r(PAe," \u2014 "),Iq=n(PAe,"A",{href:!0});var dKr=s(Iq);U2o=r(dKr,"BertForPreTraining"),dKr.forEach(t),J2o=r(PAe," (BERT model)"),PAe.forEach(t),Y2o=i(V),Ou=n(V,"LI",{});var IAe=s(Ou);lle=n(IAe,"STRONG",{});var cKr=s(lle);K2o=r(cKr,"big_bird"),cKr.forEach(t),Z2o=r(IAe," \u2014 "),qq=n(IAe,"A",{href:!0});var fKr=s(qq);e5o=r(fKr,"BigBirdForPreTraining"),fKr.forEach(t),o5o=r(IAe," (BigBird model)"),IAe.forEach(t),r5o=i(V),Vu=n(V,"LI",{});var qAe=s(Vu);ile=n(qAe,"STRONG",{});var mKr=s(ile);t5o=r(mKr,"camembert"),mKr.forEach(t),a5o=r(qAe," \u2014 "),Nq=n(qAe,"A",{href:!0});var gKr=s(Nq);n5o=r(gKr,"CamembertForMaskedLM"),gKr.forEach(t),s5o=r(qAe," (CamemBERT model)"),qAe.forEach(t),l5o=i(V),Xu=n(V,"LI",{});var NAe=s(Xu);dle=n(NAe,"STRONG",{});var hKr=s(dle);i5o=r(hKr,"ctrl"),hKr.forEach(t),d5o=r(NAe," \u2014 "),jq=n(NAe,"A",{href:!0});var pKr=s(jq);c5o=r(pKr,"CTRLLMHeadModel"),pKr.forEach(t),f5o=r(NAe," (CTRL model)"),NAe.forEach(t),m5o=i(V),zu=n(V,"LI",{});var jAe=s(zu);cle=n(jAe,"STRONG",{});var uKr=s(cle);g5o=r(uKr,"data2vec-text"),uKr.forEach(t),h5o=r(jAe," \u2014 "),Dq=n(jAe,"A",{href:!0});var _Kr=s(Dq);p5o=r(_Kr,"Data2VecTextForMaskedLM"),_Kr.forEach(t),u5o=r(jAe," (Data2VecText model)"),jAe.forEach(t),_5o=i(V),Qu=n(V,"LI",{});var DAe=s(Qu);fle=n(DAe,"STRONG",{});var bKr=s(fle);b5o=r(bKr,"deberta"),bKr.forEach(t),v5o=r(DAe," \u2014 "),Gq=n(DAe,"A",{href:!0});var vKr=s(Gq);F5o=r(vKr,"DebertaForMaskedLM"),vKr.forEach(t),T5o=r(DAe," (DeBERTa model)"),DAe.forEach(t),M5o=i(V),Wu=n(V,"LI",{});var GAe=s(Wu);mle=n(GAe,"STRONG",{});var FKr=s(mle);E5o=r(FKr,"deberta-v2"),FKr.forEach(t),C5o=r(GAe," \u2014 "),Oq=n(GAe,"A",{href:!0});var TKr=s(Oq);w5o=r(TKr,"DebertaV2ForMaskedLM"),TKr.forEach(t),A5o=r(GAe," (DeBERTa-v2 model)"),GAe.forEach(t),y5o=i(V),Hu=n(V,"LI",{});var OAe=s(Hu);gle=n(OAe,"STRONG",{});var MKr=s(gle);L5o=r(MKr,"distilbert"),MKr.forEach(t),x5o=r(OAe," \u2014 "),Vq=n(OAe,"A",{href:!0});var EKr=s(Vq);$5o=r(EKr,"DistilBertForMaskedLM"),EKr.forEach(t),k5o=r(OAe," (DistilBERT model)"),OAe.forEach(t),S5o=i(V),Uu=n(V,"LI",{});var VAe=s(Uu);hle=n(VAe,"STRONG",{});var CKr=s(hle);R5o=r(CKr,"electra"),CKr.forEach(t),B5o=r(VAe," \u2014 "),Xq=n(VAe,"A",{href:!0});var wKr=s(Xq);P5o=r(wKr,"ElectraForPreTraining"),wKr.forEach(t),I5o=r(VAe," (ELECTRA model)"),VAe.forEach(t),q5o=i(V),Ju=n(V,"LI",{});var XAe=s(Ju);ple=n(XAe,"STRONG",{});var AKr=s(ple);N5o=r(AKr,"flaubert"),AKr.forEach(t),j5o=r(XAe," \u2014 "),zq=n(XAe,"A",{href:!0});var yKr=s(zq);D5o=r(yKr,"FlaubertWithLMHeadModel"),yKr.forEach(t),G5o=r(XAe," (FlauBERT model)"),XAe.forEach(t),O5o=i(V),Yu=n(V,"LI",{});var zAe=s(Yu);ule=n(zAe,"STRONG",{});var LKr=s(ule);V5o=r(LKr,"flava"),LKr.forEach(t),X5o=r(zAe," \u2014 "),Qq=n(zAe,"A",{href:!0});var xKr=s(Qq);z5o=r(xKr,"FlavaForPreTraining"),xKr.forEach(t),Q5o=r(zAe," (Flava model)"),zAe.forEach(t),W5o=i(V),Ku=n(V,"LI",{});var QAe=s(Ku);_le=n(QAe,"STRONG",{});var $Kr=s(_le);H5o=r($Kr,"fnet"),$Kr.forEach(t),U5o=r(QAe," \u2014 "),Wq=n(QAe,"A",{href:!0});var kKr=s(Wq);J5o=r(kKr,"FNetForPreTraining"),kKr.forEach(t),Y5o=r(QAe," (FNet model)"),QAe.forEach(t),K5o=i(V),Zu=n(V,"LI",{});var WAe=s(Zu);ble=n(WAe,"STRONG",{});var SKr=s(ble);Z5o=r(SKr,"fsmt"),SKr.forEach(t),evo=r(WAe," \u2014 "),Hq=n(WAe,"A",{href:!0});var RKr=s(Hq);ovo=r(RKr,"FSMTForConditionalGeneration"),RKr.forEach(t),rvo=r(WAe," (FairSeq Machine-Translation model)"),WAe.forEach(t),tvo=i(V),e_=n(V,"LI",{});var HAe=s(e_);vle=n(HAe,"STRONG",{});var BKr=s(vle);avo=r(BKr,"funnel"),BKr.forEach(t),nvo=r(HAe," \u2014 "),Uq=n(HAe,"A",{href:!0});var PKr=s(Uq);svo=r(PKr,"FunnelForPreTraining"),PKr.forEach(t),lvo=r(HAe," (Funnel Transformer model)"),HAe.forEach(t),ivo=i(V),o_=n(V,"LI",{});var UAe=s(o_);Fle=n(UAe,"STRONG",{});var IKr=s(Fle);dvo=r(IKr,"gpt2"),IKr.forEach(t),cvo=r(UAe," \u2014 "),Jq=n(UAe,"A",{href:!0});var qKr=s(Jq);fvo=r(qKr,"GPT2LMHeadModel"),qKr.forEach(t),mvo=r(UAe," (OpenAI GPT-2 model)"),UAe.forEach(t),gvo=i(V),r_=n(V,"LI",{});var JAe=s(r_);Tle=n(JAe,"STRONG",{});var NKr=s(Tle);hvo=r(NKr,"ibert"),NKr.forEach(t),pvo=r(JAe," \u2014 "),Yq=n(JAe,"A",{href:!0});var jKr=s(Yq);uvo=r(jKr,"IBertForMaskedLM"),jKr.forEach(t),_vo=r(JAe," (I-BERT model)"),JAe.forEach(t),bvo=i(V),t_=n(V,"LI",{});var YAe=s(t_);Mle=n(YAe,"STRONG",{});var DKr=s(Mle);vvo=r(DKr,"layoutlm"),DKr.forEach(t),Fvo=r(YAe," \u2014 "),Kq=n(YAe,"A",{href:!0});var GKr=s(Kq);Tvo=r(GKr,"LayoutLMForMaskedLM"),GKr.forEach(t),Mvo=r(YAe," (LayoutLM model)"),YAe.forEach(t),Evo=i(V),a_=n(V,"LI",{});var KAe=s(a_);Ele=n(KAe,"STRONG",{});var OKr=s(Ele);Cvo=r(OKr,"longformer"),OKr.forEach(t),wvo=r(KAe," \u2014 "),Zq=n(KAe,"A",{href:!0});var VKr=s(Zq);Avo=r(VKr,"LongformerForMaskedLM"),VKr.forEach(t),yvo=r(KAe," (Longformer model)"),KAe.forEach(t),Lvo=i(V),n_=n(V,"LI",{});var ZAe=s(n_);Cle=n(ZAe,"STRONG",{});var XKr=s(Cle);xvo=r(XKr,"lxmert"),XKr.forEach(t),$vo=r(ZAe," \u2014 "),eN=n(ZAe,"A",{href:!0});var zKr=s(eN);kvo=r(zKr,"LxmertForPreTraining"),zKr.forEach(t),Svo=r(ZAe," (LXMERT model)"),ZAe.forEach(t),Rvo=i(V),s_=n(V,"LI",{});var e6e=s(s_);wle=n(e6e,"STRONG",{});var QKr=s(wle);Bvo=r(QKr,"megatron-bert"),QKr.forEach(t),Pvo=r(e6e," \u2014 "),oN=n(e6e,"A",{href:!0});var WKr=s(oN);Ivo=r(WKr,"MegatronBertForPreTraining"),WKr.forEach(t),qvo=r(e6e," (MegatronBert model)"),e6e.forEach(t),Nvo=i(V),l_=n(V,"LI",{});var o6e=s(l_);Ale=n(o6e,"STRONG",{});var HKr=s(Ale);jvo=r(HKr,"mobilebert"),HKr.forEach(t),Dvo=r(o6e," \u2014 "),rN=n(o6e,"A",{href:!0});var UKr=s(rN);Gvo=r(UKr,"MobileBertForPreTraining"),UKr.forEach(t),Ovo=r(o6e," (MobileBERT model)"),o6e.forEach(t),Vvo=i(V),i_=n(V,"LI",{});var r6e=s(i_);yle=n(r6e,"STRONG",{});var JKr=s(yle);Xvo=r(JKr,"mpnet"),JKr.forEach(t),zvo=r(r6e," \u2014 "),tN=n(r6e,"A",{href:!0});var YKr=s(tN);Qvo=r(YKr,"MPNetForMaskedLM"),YKr.forEach(t),Wvo=r(r6e," (MPNet model)"),r6e.forEach(t),Hvo=i(V),d_=n(V,"LI",{});var t6e=s(d_);Lle=n(t6e,"STRONG",{});var KKr=s(Lle);Uvo=r(KKr,"openai-gpt"),KKr.forEach(t),Jvo=r(t6e," \u2014 "),aN=n(t6e,"A",{href:!0});var ZKr=s(aN);Yvo=r(ZKr,"OpenAIGPTLMHeadModel"),ZKr.forEach(t),Kvo=r(t6e," (OpenAI GPT model)"),t6e.forEach(t),Zvo=i(V),c_=n(V,"LI",{});var a6e=s(c_);xle=n(a6e,"STRONG",{});var eZr=s(xle);eFo=r(eZr,"retribert"),eZr.forEach(t),oFo=r(a6e," \u2014 "),nN=n(a6e,"A",{href:!0});var oZr=s(nN);rFo=r(oZr,"RetriBertModel"),oZr.forEach(t),tFo=r(a6e," (RetriBERT model)"),a6e.forEach(t),aFo=i(V),f_=n(V,"LI",{});var n6e=s(f_);$le=n(n6e,"STRONG",{});var rZr=s($le);nFo=r(rZr,"roberta"),rZr.forEach(t),sFo=r(n6e," \u2014 "),sN=n(n6e,"A",{href:!0});var tZr=s(sN);lFo=r(tZr,"RobertaForMaskedLM"),tZr.forEach(t),iFo=r(n6e," (RoBERTa model)"),n6e.forEach(t),dFo=i(V),m_=n(V,"LI",{});var s6e=s(m_);kle=n(s6e,"STRONG",{});var aZr=s(kle);cFo=r(aZr,"squeezebert"),aZr.forEach(t),fFo=r(s6e," \u2014 "),lN=n(s6e,"A",{href:!0});var nZr=s(lN);mFo=r(nZr,"SqueezeBertForMaskedLM"),nZr.forEach(t),gFo=r(s6e," (SqueezeBERT model)"),s6e.forEach(t),hFo=i(V),g_=n(V,"LI",{});var l6e=s(g_);Sle=n(l6e,"STRONG",{});var sZr=s(Sle);pFo=r(sZr,"t5"),sZr.forEach(t),uFo=r(l6e," \u2014 "),iN=n(l6e,"A",{href:!0});var lZr=s(iN);_Fo=r(lZr,"T5ForConditionalGeneration"),lZr.forEach(t),bFo=r(l6e," (T5 model)"),l6e.forEach(t),vFo=i(V),h_=n(V,"LI",{});var i6e=s(h_);Rle=n(i6e,"STRONG",{});var iZr=s(Rle);FFo=r(iZr,"tapas"),iZr.forEach(t),TFo=r(i6e," \u2014 "),dN=n(i6e,"A",{href:!0});var dZr=s(dN);MFo=r(dZr,"TapasForMaskedLM"),dZr.forEach(t),EFo=r(i6e," (TAPAS model)"),i6e.forEach(t),CFo=i(V),p_=n(V,"LI",{});var d6e=s(p_);Ble=n(d6e,"STRONG",{});var cZr=s(Ble);wFo=r(cZr,"transfo-xl"),cZr.forEach(t),AFo=r(d6e," \u2014 "),cN=n(d6e,"A",{href:!0});var fZr=s(cN);yFo=r(fZr,"TransfoXLLMHeadModel"),fZr.forEach(t),LFo=r(d6e," (Transformer-XL model)"),d6e.forEach(t),xFo=i(V),u_=n(V,"LI",{});var c6e=s(u_);Ple=n(c6e,"STRONG",{});var mZr=s(Ple);$Fo=r(mZr,"unispeech"),mZr.forEach(t),kFo=r(c6e," \u2014 "),fN=n(c6e,"A",{href:!0});var gZr=s(fN);SFo=r(gZr,"UniSpeechForPreTraining"),gZr.forEach(t),RFo=r(c6e," (UniSpeech model)"),c6e.forEach(t),BFo=i(V),__=n(V,"LI",{});var f6e=s(__);Ile=n(f6e,"STRONG",{});var hZr=s(Ile);PFo=r(hZr,"unispeech-sat"),hZr.forEach(t),IFo=r(f6e," \u2014 "),mN=n(f6e,"A",{href:!0});var pZr=s(mN);qFo=r(pZr,"UniSpeechSatForPreTraining"),pZr.forEach(t),NFo=r(f6e," (UniSpeechSat model)"),f6e.forEach(t),jFo=i(V),b_=n(V,"LI",{});var m6e=s(b_);qle=n(m6e,"STRONG",{});var uZr=s(qle);DFo=r(uZr,"visual_bert"),uZr.forEach(t),GFo=r(m6e," \u2014 "),gN=n(m6e,"A",{href:!0});var _Zr=s(gN);OFo=r(_Zr,"VisualBertForPreTraining"),_Zr.forEach(t),VFo=r(m6e," (VisualBert model)"),m6e.forEach(t),XFo=i(V),v_=n(V,"LI",{});var g6e=s(v_);Nle=n(g6e,"STRONG",{});var bZr=s(Nle);zFo=r(bZr,"vit_mae"),bZr.forEach(t),QFo=r(g6e," \u2014 "),hN=n(g6e,"A",{href:!0});var vZr=s(hN);WFo=r(vZr,"ViTMAEForPreTraining"),vZr.forEach(t),HFo=r(g6e," (ViTMAE model)"),g6e.forEach(t),UFo=i(V),F_=n(V,"LI",{});var h6e=s(F_);jle=n(h6e,"STRONG",{});var FZr=s(jle);JFo=r(FZr,"wav2vec2"),FZr.forEach(t),YFo=r(h6e," \u2014 "),pN=n(h6e,"A",{href:!0});var TZr=s(pN);KFo=r(TZr,"Wav2Vec2ForPreTraining"),TZr.forEach(t),ZFo=r(h6e," (Wav2Vec2 model)"),h6e.forEach(t),e0o=i(V),T_=n(V,"LI",{});var p6e=s(T_);Dle=n(p6e,"STRONG",{});var MZr=s(Dle);o0o=r(MZr,"xlm"),MZr.forEach(t),r0o=r(p6e," \u2014 "),uN=n(p6e,"A",{href:!0});var EZr=s(uN);t0o=r(EZr,"XLMWithLMHeadModel"),EZr.forEach(t),a0o=r(p6e," (XLM model)"),p6e.forEach(t),n0o=i(V),M_=n(V,"LI",{});var u6e=s(M_);Gle=n(u6e,"STRONG",{});var CZr=s(Gle);s0o=r(CZr,"xlm-roberta"),CZr.forEach(t),l0o=r(u6e," \u2014 "),_N=n(u6e,"A",{href:!0});var wZr=s(_N);i0o=r(wZr,"XLMRobertaForMaskedLM"),wZr.forEach(t),d0o=r(u6e," (XLM-RoBERTa model)"),u6e.forEach(t),c0o=i(V),E_=n(V,"LI",{});var _6e=s(E_);Ole=n(_6e,"STRONG",{});var AZr=s(Ole);f0o=r(AZr,"xlm-roberta-xl"),AZr.forEach(t),m0o=r(_6e," \u2014 "),bN=n(_6e,"A",{href:!0});var yZr=s(bN);g0o=r(yZr,"XLMRobertaXLForMaskedLM"),yZr.forEach(t),h0o=r(_6e," (XLM-RoBERTa-XL model)"),_6e.forEach(t),p0o=i(V),C_=n(V,"LI",{});var b6e=s(C_);Vle=n(b6e,"STRONG",{});var LZr=s(Vle);u0o=r(LZr,"xlnet"),LZr.forEach(t),_0o=r(b6e," \u2014 "),vN=n(b6e,"A",{href:!0});var xZr=s(vN);b0o=r(xZr,"XLNetLMHeadModel"),xZr.forEach(t),v0o=r(b6e," (XLNet model)"),b6e.forEach(t),V.forEach(t),F0o=i(ea),w_=n(ea,"P",{});var v6e=s(w_);T0o=r(v6e,"The model is set in evaluation mode by default using "),Xle=n(v6e,"CODE",{});var $Zr=s(Xle);M0o=r($Zr,"model.eval()"),$Zr.forEach(t),E0o=r(v6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=n(v6e,"CODE",{});var kZr=s(zle);C0o=r(kZr,"model.train()"),kZr.forEach(t),v6e.forEach(t),w0o=i(ea),T(A_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),sIe=i(f),yi=n(f,"H2",{class:!0});var cNe=s(yi);y_=n(cNe,"A",{id:!0,class:!0,href:!0});var SZr=s(y_);Qle=n(SZr,"SPAN",{});var RZr=s(Qle);T(R6.$$.fragment,RZr),RZr.forEach(t),SZr.forEach(t),A0o=i(cNe),Wle=n(cNe,"SPAN",{});var BZr=s(Wle);y0o=r(BZr,"AutoModelForCausalLM"),BZr.forEach(t),cNe.forEach(t),lIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(B6.$$.fragment,Gs),L0o=i(Gs),Li=n(Gs,"P",{});var mK=s(Li);x0o=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FN=n(mK,"A",{href:!0});var PZr=s(FN);$0o=r(PZr,"from_pretrained()"),PZr.forEach(t),k0o=r(mK," class method or the "),TN=n(mK,"A",{href:!0});var IZr=s(TN);S0o=r(IZr,"from_config()"),IZr.forEach(t),R0o=r(mK,` class
method.`),mK.forEach(t),B0o=i(Gs),P6=n(Gs,"P",{});var fNe=s(P6);P0o=r(fNe,"This class cannot be instantiated directly using "),Hle=n(fNe,"CODE",{});var qZr=s(Hle);I0o=r(qZr,"__init__()"),qZr.forEach(t),q0o=r(fNe," (throws an error)."),fNe.forEach(t),N0o=i(Gs),tt=n(Gs,"DIV",{class:!0});var aw=s(tt);T(I6.$$.fragment,aw),j0o=i(aw),Ule=n(aw,"P",{});var NZr=s(Ule);D0o=r(NZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NZr.forEach(t),G0o=i(aw),xi=n(aw,"P",{});var gK=s(xi);O0o=r(gK,`Note:
Loading a model from its configuration file does `),Jle=n(gK,"STRONG",{});var jZr=s(Jle);V0o=r(jZr,"not"),jZr.forEach(t),X0o=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(gK,"A",{href:!0});var DZr=s(MN);z0o=r(DZr,"from_pretrained()"),DZr.forEach(t),Q0o=r(gK," to load the model weights."),gK.forEach(t),W0o=i(aw),T(L_.$$.fragment,aw),aw.forEach(t),H0o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(q6.$$.fragment,oa),U0o=i(oa),Yle=n(oa,"P",{});var GZr=s(Yle);J0o=r(GZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GZr.forEach(t),Y0o=i(oa),La=n(oa,"P",{});var nw=s(La);K0o=r(nw,"The model class to instantiate is selected based on the "),Kle=n(nw,"CODE",{});var OZr=s(Kle);Z0o=r(OZr,"model_type"),OZr.forEach(t),eTo=r(nw,` property of the config object (either
passed as an argument or loaded from `),Zle=n(nw,"CODE",{});var VZr=s(Zle);oTo=r(VZr,"pretrained_model_name_or_path"),VZr.forEach(t),rTo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=n(nw,"CODE",{});var XZr=s(eie);tTo=r(XZr,"pretrained_model_name_or_path"),XZr.forEach(t),aTo=r(nw,":"),nw.forEach(t),nTo=i(oa),z=n(oa,"UL",{});var W=s(z);x_=n(W,"LI",{});var F6e=s(x_);oie=n(F6e,"STRONG",{});var zZr=s(oie);sTo=r(zZr,"bart"),zZr.forEach(t),lTo=r(F6e," \u2014 "),EN=n(F6e,"A",{href:!0});var QZr=s(EN);iTo=r(QZr,"BartForCausalLM"),QZr.forEach(t),dTo=r(F6e," (BART model)"),F6e.forEach(t),cTo=i(W),$_=n(W,"LI",{});var T6e=s($_);rie=n(T6e,"STRONG",{});var WZr=s(rie);fTo=r(WZr,"bert"),WZr.forEach(t),mTo=r(T6e," \u2014 "),CN=n(T6e,"A",{href:!0});var HZr=s(CN);gTo=r(HZr,"BertLMHeadModel"),HZr.forEach(t),hTo=r(T6e," (BERT model)"),T6e.forEach(t),pTo=i(W),k_=n(W,"LI",{});var M6e=s(k_);tie=n(M6e,"STRONG",{});var UZr=s(tie);uTo=r(UZr,"bert-generation"),UZr.forEach(t),_To=r(M6e," \u2014 "),wN=n(M6e,"A",{href:!0});var JZr=s(wN);bTo=r(JZr,"BertGenerationDecoder"),JZr.forEach(t),vTo=r(M6e," (Bert Generation model)"),M6e.forEach(t),FTo=i(W),S_=n(W,"LI",{});var E6e=s(S_);aie=n(E6e,"STRONG",{});var YZr=s(aie);TTo=r(YZr,"big_bird"),YZr.forEach(t),MTo=r(E6e," \u2014 "),AN=n(E6e,"A",{href:!0});var KZr=s(AN);ETo=r(KZr,"BigBirdForCausalLM"),KZr.forEach(t),CTo=r(E6e," (BigBird model)"),E6e.forEach(t),wTo=i(W),R_=n(W,"LI",{});var C6e=s(R_);nie=n(C6e,"STRONG",{});var ZZr=s(nie);ATo=r(ZZr,"bigbird_pegasus"),ZZr.forEach(t),yTo=r(C6e," \u2014 "),yN=n(C6e,"A",{href:!0});var eet=s(yN);LTo=r(eet,"BigBirdPegasusForCausalLM"),eet.forEach(t),xTo=r(C6e," (BigBirdPegasus model)"),C6e.forEach(t),$To=i(W),B_=n(W,"LI",{});var w6e=s(B_);sie=n(w6e,"STRONG",{});var oet=s(sie);kTo=r(oet,"blenderbot"),oet.forEach(t),STo=r(w6e," \u2014 "),LN=n(w6e,"A",{href:!0});var ret=s(LN);RTo=r(ret,"BlenderbotForCausalLM"),ret.forEach(t),BTo=r(w6e," (Blenderbot model)"),w6e.forEach(t),PTo=i(W),P_=n(W,"LI",{});var A6e=s(P_);lie=n(A6e,"STRONG",{});var tet=s(lie);ITo=r(tet,"blenderbot-small"),tet.forEach(t),qTo=r(A6e," \u2014 "),xN=n(A6e,"A",{href:!0});var aet=s(xN);NTo=r(aet,"BlenderbotSmallForCausalLM"),aet.forEach(t),jTo=r(A6e," (BlenderbotSmall model)"),A6e.forEach(t),DTo=i(W),I_=n(W,"LI",{});var y6e=s(I_);iie=n(y6e,"STRONG",{});var net=s(iie);GTo=r(net,"camembert"),net.forEach(t),OTo=r(y6e," \u2014 "),$N=n(y6e,"A",{href:!0});var set=s($N);VTo=r(set,"CamembertForCausalLM"),set.forEach(t),XTo=r(y6e," (CamemBERT model)"),y6e.forEach(t),zTo=i(W),q_=n(W,"LI",{});var L6e=s(q_);die=n(L6e,"STRONG",{});var iet=s(die);QTo=r(iet,"ctrl"),iet.forEach(t),WTo=r(L6e," \u2014 "),kN=n(L6e,"A",{href:!0});var det=s(kN);HTo=r(det,"CTRLLMHeadModel"),det.forEach(t),UTo=r(L6e," (CTRL model)"),L6e.forEach(t),JTo=i(W),N_=n(W,"LI",{});var x6e=s(N_);cie=n(x6e,"STRONG",{});var cet=s(cie);YTo=r(cet,"data2vec-text"),cet.forEach(t),KTo=r(x6e," \u2014 "),SN=n(x6e,"A",{href:!0});var fet=s(SN);ZTo=r(fet,"Data2VecTextForCausalLM"),fet.forEach(t),eMo=r(x6e," (Data2VecText model)"),x6e.forEach(t),oMo=i(W),j_=n(W,"LI",{});var $6e=s(j_);fie=n($6e,"STRONG",{});var met=s(fie);rMo=r(met,"electra"),met.forEach(t),tMo=r($6e," \u2014 "),RN=n($6e,"A",{href:!0});var get=s(RN);aMo=r(get,"ElectraForCausalLM"),get.forEach(t),nMo=r($6e," (ELECTRA model)"),$6e.forEach(t),sMo=i(W),D_=n(W,"LI",{});var k6e=s(D_);mie=n(k6e,"STRONG",{});var het=s(mie);lMo=r(het,"gpt2"),het.forEach(t),iMo=r(k6e," \u2014 "),BN=n(k6e,"A",{href:!0});var pet=s(BN);dMo=r(pet,"GPT2LMHeadModel"),pet.forEach(t),cMo=r(k6e," (OpenAI GPT-2 model)"),k6e.forEach(t),fMo=i(W),G_=n(W,"LI",{});var S6e=s(G_);gie=n(S6e,"STRONG",{});var uet=s(gie);mMo=r(uet,"gpt_neo"),uet.forEach(t),gMo=r(S6e," \u2014 "),PN=n(S6e,"A",{href:!0});var _et=s(PN);hMo=r(_et,"GPTNeoForCausalLM"),_et.forEach(t),pMo=r(S6e," (GPT Neo model)"),S6e.forEach(t),uMo=i(W),O_=n(W,"LI",{});var R6e=s(O_);hie=n(R6e,"STRONG",{});var bet=s(hie);_Mo=r(bet,"gptj"),bet.forEach(t),bMo=r(R6e," \u2014 "),IN=n(R6e,"A",{href:!0});var vet=s(IN);vMo=r(vet,"GPTJForCausalLM"),vet.forEach(t),FMo=r(R6e," (GPT-J model)"),R6e.forEach(t),TMo=i(W),V_=n(W,"LI",{});var B6e=s(V_);pie=n(B6e,"STRONG",{});var Fet=s(pie);MMo=r(Fet,"marian"),Fet.forEach(t),EMo=r(B6e," \u2014 "),qN=n(B6e,"A",{href:!0});var Tet=s(qN);CMo=r(Tet,"MarianForCausalLM"),Tet.forEach(t),wMo=r(B6e," (Marian model)"),B6e.forEach(t),AMo=i(W),X_=n(W,"LI",{});var P6e=s(X_);uie=n(P6e,"STRONG",{});var Met=s(uie);yMo=r(Met,"mbart"),Met.forEach(t),LMo=r(P6e," \u2014 "),NN=n(P6e,"A",{href:!0});var Eet=s(NN);xMo=r(Eet,"MBartForCausalLM"),Eet.forEach(t),$Mo=r(P6e," (mBART model)"),P6e.forEach(t),kMo=i(W),z_=n(W,"LI",{});var I6e=s(z_);_ie=n(I6e,"STRONG",{});var Cet=s(_ie);SMo=r(Cet,"megatron-bert"),Cet.forEach(t),RMo=r(I6e," \u2014 "),jN=n(I6e,"A",{href:!0});var wet=s(jN);BMo=r(wet,"MegatronBertForCausalLM"),wet.forEach(t),PMo=r(I6e," (MegatronBert model)"),I6e.forEach(t),IMo=i(W),Q_=n(W,"LI",{});var q6e=s(Q_);bie=n(q6e,"STRONG",{});var Aet=s(bie);qMo=r(Aet,"openai-gpt"),Aet.forEach(t),NMo=r(q6e," \u2014 "),DN=n(q6e,"A",{href:!0});var yet=s(DN);jMo=r(yet,"OpenAIGPTLMHeadModel"),yet.forEach(t),DMo=r(q6e," (OpenAI GPT model)"),q6e.forEach(t),GMo=i(W),W_=n(W,"LI",{});var N6e=s(W_);vie=n(N6e,"STRONG",{});var Let=s(vie);OMo=r(Let,"opt"),Let.forEach(t),VMo=r(N6e," \u2014 "),GN=n(N6e,"A",{href:!0});var xet=s(GN);XMo=r(xet,"OPTForCausalLM"),xet.forEach(t),zMo=r(N6e," (OPT model)"),N6e.forEach(t),QMo=i(W),H_=n(W,"LI",{});var j6e=s(H_);Fie=n(j6e,"STRONG",{});var $et=s(Fie);WMo=r($et,"pegasus"),$et.forEach(t),HMo=r(j6e," \u2014 "),ON=n(j6e,"A",{href:!0});var ket=s(ON);UMo=r(ket,"PegasusForCausalLM"),ket.forEach(t),JMo=r(j6e," (Pegasus model)"),j6e.forEach(t),YMo=i(W),U_=n(W,"LI",{});var D6e=s(U_);Tie=n(D6e,"STRONG",{});var Set=s(Tie);KMo=r(Set,"plbart"),Set.forEach(t),ZMo=r(D6e," \u2014 "),VN=n(D6e,"A",{href:!0});var Ret=s(VN);e4o=r(Ret,"PLBartForCausalLM"),Ret.forEach(t),o4o=r(D6e," (PLBart model)"),D6e.forEach(t),r4o=i(W),J_=n(W,"LI",{});var G6e=s(J_);Mie=n(G6e,"STRONG",{});var Bet=s(Mie);t4o=r(Bet,"prophetnet"),Bet.forEach(t),a4o=r(G6e," \u2014 "),XN=n(G6e,"A",{href:!0});var Pet=s(XN);n4o=r(Pet,"ProphetNetForCausalLM"),Pet.forEach(t),s4o=r(G6e," (ProphetNet model)"),G6e.forEach(t),l4o=i(W),Y_=n(W,"LI",{});var O6e=s(Y_);Eie=n(O6e,"STRONG",{});var Iet=s(Eie);i4o=r(Iet,"qdqbert"),Iet.forEach(t),d4o=r(O6e," \u2014 "),zN=n(O6e,"A",{href:!0});var qet=s(zN);c4o=r(qet,"QDQBertLMHeadModel"),qet.forEach(t),f4o=r(O6e," (QDQBert model)"),O6e.forEach(t),m4o=i(W),K_=n(W,"LI",{});var V6e=s(K_);Cie=n(V6e,"STRONG",{});var Net=s(Cie);g4o=r(Net,"reformer"),Net.forEach(t),h4o=r(V6e," \u2014 "),QN=n(V6e,"A",{href:!0});var jet=s(QN);p4o=r(jet,"ReformerModelWithLMHead"),jet.forEach(t),u4o=r(V6e," (Reformer model)"),V6e.forEach(t),_4o=i(W),Z_=n(W,"LI",{});var X6e=s(Z_);wie=n(X6e,"STRONG",{});var Det=s(wie);b4o=r(Det,"rembert"),Det.forEach(t),v4o=r(X6e," \u2014 "),WN=n(X6e,"A",{href:!0});var Get=s(WN);F4o=r(Get,"RemBertForCausalLM"),Get.forEach(t),T4o=r(X6e," (RemBERT model)"),X6e.forEach(t),M4o=i(W),e1=n(W,"LI",{});var z6e=s(e1);Aie=n(z6e,"STRONG",{});var Oet=s(Aie);E4o=r(Oet,"roberta"),Oet.forEach(t),C4o=r(z6e," \u2014 "),HN=n(z6e,"A",{href:!0});var Vet=s(HN);w4o=r(Vet,"RobertaForCausalLM"),Vet.forEach(t),A4o=r(z6e," (RoBERTa model)"),z6e.forEach(t),y4o=i(W),o1=n(W,"LI",{});var Q6e=s(o1);yie=n(Q6e,"STRONG",{});var Xet=s(yie);L4o=r(Xet,"roformer"),Xet.forEach(t),x4o=r(Q6e," \u2014 "),UN=n(Q6e,"A",{href:!0});var zet=s(UN);$4o=r(zet,"RoFormerForCausalLM"),zet.forEach(t),k4o=r(Q6e," (RoFormer model)"),Q6e.forEach(t),S4o=i(W),r1=n(W,"LI",{});var W6e=s(r1);Lie=n(W6e,"STRONG",{});var Qet=s(Lie);R4o=r(Qet,"speech_to_text_2"),Qet.forEach(t),B4o=r(W6e," \u2014 "),JN=n(W6e,"A",{href:!0});var Wet=s(JN);P4o=r(Wet,"Speech2Text2ForCausalLM"),Wet.forEach(t),I4o=r(W6e," (Speech2Text2 model)"),W6e.forEach(t),q4o=i(W),t1=n(W,"LI",{});var H6e=s(t1);xie=n(H6e,"STRONG",{});var Het=s(xie);N4o=r(Het,"transfo-xl"),Het.forEach(t),j4o=r(H6e," \u2014 "),YN=n(H6e,"A",{href:!0});var Uet=s(YN);D4o=r(Uet,"TransfoXLLMHeadModel"),Uet.forEach(t),G4o=r(H6e," (Transformer-XL model)"),H6e.forEach(t),O4o=i(W),a1=n(W,"LI",{});var U6e=s(a1);$ie=n(U6e,"STRONG",{});var Jet=s($ie);V4o=r(Jet,"trocr"),Jet.forEach(t),X4o=r(U6e," \u2014 "),KN=n(U6e,"A",{href:!0});var Yet=s(KN);z4o=r(Yet,"TrOCRForCausalLM"),Yet.forEach(t),Q4o=r(U6e," (TrOCR model)"),U6e.forEach(t),W4o=i(W),n1=n(W,"LI",{});var J6e=s(n1);kie=n(J6e,"STRONG",{});var Ket=s(kie);H4o=r(Ket,"xglm"),Ket.forEach(t),U4o=r(J6e," \u2014 "),ZN=n(J6e,"A",{href:!0});var Zet=s(ZN);J4o=r(Zet,"XGLMForCausalLM"),Zet.forEach(t),Y4o=r(J6e," (XGLM model)"),J6e.forEach(t),K4o=i(W),s1=n(W,"LI",{});var Y6e=s(s1);Sie=n(Y6e,"STRONG",{});var eot=s(Sie);Z4o=r(eot,"xlm"),eot.forEach(t),eEo=r(Y6e," \u2014 "),ej=n(Y6e,"A",{href:!0});var oot=s(ej);oEo=r(oot,"XLMWithLMHeadModel"),oot.forEach(t),rEo=r(Y6e," (XLM model)"),Y6e.forEach(t),tEo=i(W),l1=n(W,"LI",{});var K6e=s(l1);Rie=n(K6e,"STRONG",{});var rot=s(Rie);aEo=r(rot,"xlm-prophetnet"),rot.forEach(t),nEo=r(K6e," \u2014 "),oj=n(K6e,"A",{href:!0});var tot=s(oj);sEo=r(tot,"XLMProphetNetForCausalLM"),tot.forEach(t),lEo=r(K6e," (XLMProphetNet model)"),K6e.forEach(t),iEo=i(W),i1=n(W,"LI",{});var Z6e=s(i1);Bie=n(Z6e,"STRONG",{});var aot=s(Bie);dEo=r(aot,"xlm-roberta"),aot.forEach(t),cEo=r(Z6e," \u2014 "),rj=n(Z6e,"A",{href:!0});var not=s(rj);fEo=r(not,"XLMRobertaForCausalLM"),not.forEach(t),mEo=r(Z6e," (XLM-RoBERTa model)"),Z6e.forEach(t),gEo=i(W),d1=n(W,"LI",{});var eye=s(d1);Pie=n(eye,"STRONG",{});var sot=s(Pie);hEo=r(sot,"xlm-roberta-xl"),sot.forEach(t),pEo=r(eye," \u2014 "),tj=n(eye,"A",{href:!0});var lot=s(tj);uEo=r(lot,"XLMRobertaXLForCausalLM"),lot.forEach(t),_Eo=r(eye," (XLM-RoBERTa-XL model)"),eye.forEach(t),bEo=i(W),c1=n(W,"LI",{});var oye=s(c1);Iie=n(oye,"STRONG",{});var iot=s(Iie);vEo=r(iot,"xlnet"),iot.forEach(t),FEo=r(oye," \u2014 "),aj=n(oye,"A",{href:!0});var dot=s(aj);TEo=r(dot,"XLNetLMHeadModel"),dot.forEach(t),MEo=r(oye," (XLNet model)"),oye.forEach(t),W.forEach(t),EEo=i(oa),f1=n(oa,"P",{});var rye=s(f1);CEo=r(rye,"The model is set in evaluation mode by default using "),qie=n(rye,"CODE",{});var cot=s(qie);wEo=r(cot,"model.eval()"),cot.forEach(t),AEo=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=n(rye,"CODE",{});var fot=s(Nie);yEo=r(fot,"model.train()"),fot.forEach(t),rye.forEach(t),LEo=i(oa),T(m1.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),iIe=i(f),$i=n(f,"H2",{class:!0});var mNe=s($i);g1=n(mNe,"A",{id:!0,class:!0,href:!0});var mot=s(g1);jie=n(mot,"SPAN",{});var got=s(jie);T(N6.$$.fragment,got),got.forEach(t),mot.forEach(t),xEo=i(mNe),Die=n(mNe,"SPAN",{});var hot=s(Die);$Eo=r(hot,"AutoModelForMaskedLM"),hot.forEach(t),mNe.forEach(t),dIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(j6.$$.fragment,Os),kEo=i(Os),ki=n(Os,"P",{});var hK=s(ki);SEo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nj=n(hK,"A",{href:!0});var pot=s(nj);REo=r(pot,"from_pretrained()"),pot.forEach(t),BEo=r(hK," class method or the "),sj=n(hK,"A",{href:!0});var uot=s(sj);PEo=r(uot,"from_config()"),uot.forEach(t),IEo=r(hK,` class
method.`),hK.forEach(t),qEo=i(Os),D6=n(Os,"P",{});var gNe=s(D6);NEo=r(gNe,"This class cannot be instantiated directly using "),Gie=n(gNe,"CODE",{});var _ot=s(Gie);jEo=r(_ot,"__init__()"),_ot.forEach(t),DEo=r(gNe," (throws an error)."),gNe.forEach(t),GEo=i(Os),at=n(Os,"DIV",{class:!0});var sw=s(at);T(G6.$$.fragment,sw),OEo=i(sw),Oie=n(sw,"P",{});var bot=s(Oie);VEo=r(bot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bot.forEach(t),XEo=i(sw),Si=n(sw,"P",{});var pK=s(Si);zEo=r(pK,`Note:
Loading a model from its configuration file does `),Vie=n(pK,"STRONG",{});var vot=s(Vie);QEo=r(vot,"not"),vot.forEach(t),WEo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(pK,"A",{href:!0});var Fot=s(lj);HEo=r(Fot,"from_pretrained()"),Fot.forEach(t),UEo=r(pK," to load the model weights."),pK.forEach(t),JEo=i(sw),T(h1.$$.fragment,sw),sw.forEach(t),YEo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(O6.$$.fragment,ra),KEo=i(ra),Xie=n(ra,"P",{});var Tot=s(Xie);ZEo=r(Tot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tot.forEach(t),eCo=i(ra),xa=n(ra,"P",{});var lw=s(xa);oCo=r(lw,"The model class to instantiate is selected based on the "),zie=n(lw,"CODE",{});var Mot=s(zie);rCo=r(Mot,"model_type"),Mot.forEach(t),tCo=r(lw,` property of the config object (either
passed as an argument or loaded from `),Qie=n(lw,"CODE",{});var Eot=s(Qie);aCo=r(Eot,"pretrained_model_name_or_path"),Eot.forEach(t),nCo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(lw,"CODE",{});var Cot=s(Wie);sCo=r(Cot,"pretrained_model_name_or_path"),Cot.forEach(t),lCo=r(lw,":"),lw.forEach(t),iCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);p1=n(H,"LI",{});var tye=s(p1);Hie=n(tye,"STRONG",{});var wot=s(Hie);dCo=r(wot,"albert"),wot.forEach(t),cCo=r(tye," \u2014 "),ij=n(tye,"A",{href:!0});var Aot=s(ij);fCo=r(Aot,"AlbertForMaskedLM"),Aot.forEach(t),mCo=r(tye," (ALBERT model)"),tye.forEach(t),gCo=i(H),u1=n(H,"LI",{});var aye=s(u1);Uie=n(aye,"STRONG",{});var yot=s(Uie);hCo=r(yot,"bart"),yot.forEach(t),pCo=r(aye," \u2014 "),dj=n(aye,"A",{href:!0});var Lot=s(dj);uCo=r(Lot,"BartForConditionalGeneration"),Lot.forEach(t),_Co=r(aye," (BART model)"),aye.forEach(t),bCo=i(H),_1=n(H,"LI",{});var nye=s(_1);Jie=n(nye,"STRONG",{});var xot=s(Jie);vCo=r(xot,"bert"),xot.forEach(t),FCo=r(nye," \u2014 "),cj=n(nye,"A",{href:!0});var $ot=s(cj);TCo=r($ot,"BertForMaskedLM"),$ot.forEach(t),MCo=r(nye," (BERT model)"),nye.forEach(t),ECo=i(H),b1=n(H,"LI",{});var sye=s(b1);Yie=n(sye,"STRONG",{});var kot=s(Yie);CCo=r(kot,"big_bird"),kot.forEach(t),wCo=r(sye," \u2014 "),fj=n(sye,"A",{href:!0});var Sot=s(fj);ACo=r(Sot,"BigBirdForMaskedLM"),Sot.forEach(t),yCo=r(sye," (BigBird model)"),sye.forEach(t),LCo=i(H),v1=n(H,"LI",{});var lye=s(v1);Kie=n(lye,"STRONG",{});var Rot=s(Kie);xCo=r(Rot,"camembert"),Rot.forEach(t),$Co=r(lye," \u2014 "),mj=n(lye,"A",{href:!0});var Bot=s(mj);kCo=r(Bot,"CamembertForMaskedLM"),Bot.forEach(t),SCo=r(lye," (CamemBERT model)"),lye.forEach(t),RCo=i(H),F1=n(H,"LI",{});var iye=s(F1);Zie=n(iye,"STRONG",{});var Pot=s(Zie);BCo=r(Pot,"convbert"),Pot.forEach(t),PCo=r(iye," \u2014 "),gj=n(iye,"A",{href:!0});var Iot=s(gj);ICo=r(Iot,"ConvBertForMaskedLM"),Iot.forEach(t),qCo=r(iye," (ConvBERT model)"),iye.forEach(t),NCo=i(H),T1=n(H,"LI",{});var dye=s(T1);ede=n(dye,"STRONG",{});var qot=s(ede);jCo=r(qot,"data2vec-text"),qot.forEach(t),DCo=r(dye," \u2014 "),hj=n(dye,"A",{href:!0});var Not=s(hj);GCo=r(Not,"Data2VecTextForMaskedLM"),Not.forEach(t),OCo=r(dye," (Data2VecText model)"),dye.forEach(t),VCo=i(H),M1=n(H,"LI",{});var cye=s(M1);ode=n(cye,"STRONG",{});var jot=s(ode);XCo=r(jot,"deberta"),jot.forEach(t),zCo=r(cye," \u2014 "),pj=n(cye,"A",{href:!0});var Dot=s(pj);QCo=r(Dot,"DebertaForMaskedLM"),Dot.forEach(t),WCo=r(cye," (DeBERTa model)"),cye.forEach(t),HCo=i(H),E1=n(H,"LI",{});var fye=s(E1);rde=n(fye,"STRONG",{});var Got=s(rde);UCo=r(Got,"deberta-v2"),Got.forEach(t),JCo=r(fye," \u2014 "),uj=n(fye,"A",{href:!0});var Oot=s(uj);YCo=r(Oot,"DebertaV2ForMaskedLM"),Oot.forEach(t),KCo=r(fye," (DeBERTa-v2 model)"),fye.forEach(t),ZCo=i(H),C1=n(H,"LI",{});var mye=s(C1);tde=n(mye,"STRONG",{});var Vot=s(tde);e3o=r(Vot,"distilbert"),Vot.forEach(t),o3o=r(mye," \u2014 "),_j=n(mye,"A",{href:!0});var Xot=s(_j);r3o=r(Xot,"DistilBertForMaskedLM"),Xot.forEach(t),t3o=r(mye," (DistilBERT model)"),mye.forEach(t),a3o=i(H),w1=n(H,"LI",{});var gye=s(w1);ade=n(gye,"STRONG",{});var zot=s(ade);n3o=r(zot,"electra"),zot.forEach(t),s3o=r(gye," \u2014 "),bj=n(gye,"A",{href:!0});var Qot=s(bj);l3o=r(Qot,"ElectraForMaskedLM"),Qot.forEach(t),i3o=r(gye," (ELECTRA model)"),gye.forEach(t),d3o=i(H),A1=n(H,"LI",{});var hye=s(A1);nde=n(hye,"STRONG",{});var Wot=s(nde);c3o=r(Wot,"flaubert"),Wot.forEach(t),f3o=r(hye," \u2014 "),vj=n(hye,"A",{href:!0});var Hot=s(vj);m3o=r(Hot,"FlaubertWithLMHeadModel"),Hot.forEach(t),g3o=r(hye," (FlauBERT model)"),hye.forEach(t),h3o=i(H),y1=n(H,"LI",{});var pye=s(y1);sde=n(pye,"STRONG",{});var Uot=s(sde);p3o=r(Uot,"fnet"),Uot.forEach(t),u3o=r(pye," \u2014 "),Fj=n(pye,"A",{href:!0});var Jot=s(Fj);_3o=r(Jot,"FNetForMaskedLM"),Jot.forEach(t),b3o=r(pye," (FNet model)"),pye.forEach(t),v3o=i(H),L1=n(H,"LI",{});var uye=s(L1);lde=n(uye,"STRONG",{});var Yot=s(lde);F3o=r(Yot,"funnel"),Yot.forEach(t),T3o=r(uye," \u2014 "),Tj=n(uye,"A",{href:!0});var Kot=s(Tj);M3o=r(Kot,"FunnelForMaskedLM"),Kot.forEach(t),E3o=r(uye," (Funnel Transformer model)"),uye.forEach(t),C3o=i(H),x1=n(H,"LI",{});var _ye=s(x1);ide=n(_ye,"STRONG",{});var Zot=s(ide);w3o=r(Zot,"ibert"),Zot.forEach(t),A3o=r(_ye," \u2014 "),Mj=n(_ye,"A",{href:!0});var ert=s(Mj);y3o=r(ert,"IBertForMaskedLM"),ert.forEach(t),L3o=r(_ye," (I-BERT model)"),_ye.forEach(t),x3o=i(H),$1=n(H,"LI",{});var bye=s($1);dde=n(bye,"STRONG",{});var ort=s(dde);$3o=r(ort,"layoutlm"),ort.forEach(t),k3o=r(bye," \u2014 "),Ej=n(bye,"A",{href:!0});var rrt=s(Ej);S3o=r(rrt,"LayoutLMForMaskedLM"),rrt.forEach(t),R3o=r(bye," (LayoutLM model)"),bye.forEach(t),B3o=i(H),k1=n(H,"LI",{});var vye=s(k1);cde=n(vye,"STRONG",{});var trt=s(cde);P3o=r(trt,"longformer"),trt.forEach(t),I3o=r(vye," \u2014 "),Cj=n(vye,"A",{href:!0});var art=s(Cj);q3o=r(art,"LongformerForMaskedLM"),art.forEach(t),N3o=r(vye," (Longformer model)"),vye.forEach(t),j3o=i(H),S1=n(H,"LI",{});var Fye=s(S1);fde=n(Fye,"STRONG",{});var nrt=s(fde);D3o=r(nrt,"mbart"),nrt.forEach(t),G3o=r(Fye," \u2014 "),wj=n(Fye,"A",{href:!0});var srt=s(wj);O3o=r(srt,"MBartForConditionalGeneration"),srt.forEach(t),V3o=r(Fye," (mBART model)"),Fye.forEach(t),X3o=i(H),R1=n(H,"LI",{});var Tye=s(R1);mde=n(Tye,"STRONG",{});var lrt=s(mde);z3o=r(lrt,"megatron-bert"),lrt.forEach(t),Q3o=r(Tye," \u2014 "),Aj=n(Tye,"A",{href:!0});var irt=s(Aj);W3o=r(irt,"MegatronBertForMaskedLM"),irt.forEach(t),H3o=r(Tye," (MegatronBert model)"),Tye.forEach(t),U3o=i(H),B1=n(H,"LI",{});var Mye=s(B1);gde=n(Mye,"STRONG",{});var drt=s(gde);J3o=r(drt,"mobilebert"),drt.forEach(t),Y3o=r(Mye," \u2014 "),yj=n(Mye,"A",{href:!0});var crt=s(yj);K3o=r(crt,"MobileBertForMaskedLM"),crt.forEach(t),Z3o=r(Mye," (MobileBERT model)"),Mye.forEach(t),ewo=i(H),P1=n(H,"LI",{});var Eye=s(P1);hde=n(Eye,"STRONG",{});var frt=s(hde);owo=r(frt,"mpnet"),frt.forEach(t),rwo=r(Eye," \u2014 "),Lj=n(Eye,"A",{href:!0});var mrt=s(Lj);two=r(mrt,"MPNetForMaskedLM"),mrt.forEach(t),awo=r(Eye," (MPNet model)"),Eye.forEach(t),nwo=i(H),I1=n(H,"LI",{});var Cye=s(I1);pde=n(Cye,"STRONG",{});var grt=s(pde);swo=r(grt,"nystromformer"),grt.forEach(t),lwo=r(Cye," \u2014 "),xj=n(Cye,"A",{href:!0});var hrt=s(xj);iwo=r(hrt,"NystromformerForMaskedLM"),hrt.forEach(t),dwo=r(Cye," (Nystromformer model)"),Cye.forEach(t),cwo=i(H),q1=n(H,"LI",{});var wye=s(q1);ude=n(wye,"STRONG",{});var prt=s(ude);fwo=r(prt,"perceiver"),prt.forEach(t),mwo=r(wye," \u2014 "),$j=n(wye,"A",{href:!0});var urt=s($j);gwo=r(urt,"PerceiverForMaskedLM"),urt.forEach(t),hwo=r(wye," (Perceiver model)"),wye.forEach(t),pwo=i(H),N1=n(H,"LI",{});var Aye=s(N1);_de=n(Aye,"STRONG",{});var _rt=s(_de);uwo=r(_rt,"qdqbert"),_rt.forEach(t),_wo=r(Aye," \u2014 "),kj=n(Aye,"A",{href:!0});var brt=s(kj);bwo=r(brt,"QDQBertForMaskedLM"),brt.forEach(t),vwo=r(Aye," (QDQBert model)"),Aye.forEach(t),Fwo=i(H),j1=n(H,"LI",{});var yye=s(j1);bde=n(yye,"STRONG",{});var vrt=s(bde);Two=r(vrt,"reformer"),vrt.forEach(t),Mwo=r(yye," \u2014 "),Sj=n(yye,"A",{href:!0});var Frt=s(Sj);Ewo=r(Frt,"ReformerForMaskedLM"),Frt.forEach(t),Cwo=r(yye," (Reformer model)"),yye.forEach(t),wwo=i(H),D1=n(H,"LI",{});var Lye=s(D1);vde=n(Lye,"STRONG",{});var Trt=s(vde);Awo=r(Trt,"rembert"),Trt.forEach(t),ywo=r(Lye," \u2014 "),Rj=n(Lye,"A",{href:!0});var Mrt=s(Rj);Lwo=r(Mrt,"RemBertForMaskedLM"),Mrt.forEach(t),xwo=r(Lye," (RemBERT model)"),Lye.forEach(t),$wo=i(H),G1=n(H,"LI",{});var xye=s(G1);Fde=n(xye,"STRONG",{});var Ert=s(Fde);kwo=r(Ert,"roberta"),Ert.forEach(t),Swo=r(xye," \u2014 "),Bj=n(xye,"A",{href:!0});var Crt=s(Bj);Rwo=r(Crt,"RobertaForMaskedLM"),Crt.forEach(t),Bwo=r(xye," (RoBERTa model)"),xye.forEach(t),Pwo=i(H),O1=n(H,"LI",{});var $ye=s(O1);Tde=n($ye,"STRONG",{});var wrt=s(Tde);Iwo=r(wrt,"roformer"),wrt.forEach(t),qwo=r($ye," \u2014 "),Pj=n($ye,"A",{href:!0});var Art=s(Pj);Nwo=r(Art,"RoFormerForMaskedLM"),Art.forEach(t),jwo=r($ye," (RoFormer model)"),$ye.forEach(t),Dwo=i(H),V1=n(H,"LI",{});var kye=s(V1);Mde=n(kye,"STRONG",{});var yrt=s(Mde);Gwo=r(yrt,"squeezebert"),yrt.forEach(t),Owo=r(kye," \u2014 "),Ij=n(kye,"A",{href:!0});var Lrt=s(Ij);Vwo=r(Lrt,"SqueezeBertForMaskedLM"),Lrt.forEach(t),Xwo=r(kye," (SqueezeBERT model)"),kye.forEach(t),zwo=i(H),X1=n(H,"LI",{});var Sye=s(X1);Ede=n(Sye,"STRONG",{});var xrt=s(Ede);Qwo=r(xrt,"tapas"),xrt.forEach(t),Wwo=r(Sye," \u2014 "),qj=n(Sye,"A",{href:!0});var $rt=s(qj);Hwo=r($rt,"TapasForMaskedLM"),$rt.forEach(t),Uwo=r(Sye," (TAPAS model)"),Sye.forEach(t),Jwo=i(H),z1=n(H,"LI",{});var Rye=s(z1);Cde=n(Rye,"STRONG",{});var krt=s(Cde);Ywo=r(krt,"wav2vec2"),krt.forEach(t),Kwo=r(Rye," \u2014 "),wde=n(Rye,"CODE",{});var Srt=s(wde);Zwo=r(Srt,"Wav2Vec2ForMaskedLM"),Srt.forEach(t),eAo=r(Rye," (Wav2Vec2 model)"),Rye.forEach(t),oAo=i(H),Q1=n(H,"LI",{});var Bye=s(Q1);Ade=n(Bye,"STRONG",{});var Rrt=s(Ade);rAo=r(Rrt,"xlm"),Rrt.forEach(t),tAo=r(Bye," \u2014 "),Nj=n(Bye,"A",{href:!0});var Brt=s(Nj);aAo=r(Brt,"XLMWithLMHeadModel"),Brt.forEach(t),nAo=r(Bye," (XLM model)"),Bye.forEach(t),sAo=i(H),W1=n(H,"LI",{});var Pye=s(W1);yde=n(Pye,"STRONG",{});var Prt=s(yde);lAo=r(Prt,"xlm-roberta"),Prt.forEach(t),iAo=r(Pye," \u2014 "),jj=n(Pye,"A",{href:!0});var Irt=s(jj);dAo=r(Irt,"XLMRobertaForMaskedLM"),Irt.forEach(t),cAo=r(Pye," (XLM-RoBERTa model)"),Pye.forEach(t),fAo=i(H),H1=n(H,"LI",{});var Iye=s(H1);Lde=n(Iye,"STRONG",{});var qrt=s(Lde);mAo=r(qrt,"xlm-roberta-xl"),qrt.forEach(t),gAo=r(Iye," \u2014 "),Dj=n(Iye,"A",{href:!0});var Nrt=s(Dj);hAo=r(Nrt,"XLMRobertaXLForMaskedLM"),Nrt.forEach(t),pAo=r(Iye," (XLM-RoBERTa-XL model)"),Iye.forEach(t),uAo=i(H),U1=n(H,"LI",{});var qye=s(U1);xde=n(qye,"STRONG",{});var jrt=s(xde);_Ao=r(jrt,"yoso"),jrt.forEach(t),bAo=r(qye," \u2014 "),Gj=n(qye,"A",{href:!0});var Drt=s(Gj);vAo=r(Drt,"YosoForMaskedLM"),Drt.forEach(t),FAo=r(qye," (YOSO model)"),qye.forEach(t),H.forEach(t),TAo=i(ra),J1=n(ra,"P",{});var Nye=s(J1);MAo=r(Nye,"The model is set in evaluation mode by default using "),$de=n(Nye,"CODE",{});var Grt=s($de);EAo=r(Grt,"model.eval()"),Grt.forEach(t),CAo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(Nye,"CODE",{});var Ort=s(kde);wAo=r(Ort,"model.train()"),Ort.forEach(t),Nye.forEach(t),AAo=i(ra),T(Y1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),cIe=i(f),Ri=n(f,"H2",{class:!0});var hNe=s(Ri);K1=n(hNe,"A",{id:!0,class:!0,href:!0});var Vrt=s(K1);Sde=n(Vrt,"SPAN",{});var Xrt=s(Sde);T(V6.$$.fragment,Xrt),Xrt.forEach(t),Vrt.forEach(t),yAo=i(hNe),Rde=n(hNe,"SPAN",{});var zrt=s(Rde);LAo=r(zrt,"AutoModelForSeq2SeqLM"),zrt.forEach(t),hNe.forEach(t),fIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(X6.$$.fragment,Vs),xAo=i(Vs),Bi=n(Vs,"P",{});var uK=s(Bi);$Ao=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Oj=n(uK,"A",{href:!0});var Qrt=s(Oj);kAo=r(Qrt,"from_pretrained()"),Qrt.forEach(t),SAo=r(uK," class method or the "),Vj=n(uK,"A",{href:!0});var Wrt=s(Vj);RAo=r(Wrt,"from_config()"),Wrt.forEach(t),BAo=r(uK,` class
method.`),uK.forEach(t),PAo=i(Vs),z6=n(Vs,"P",{});var pNe=s(z6);IAo=r(pNe,"This class cannot be instantiated directly using "),Bde=n(pNe,"CODE",{});var Hrt=s(Bde);qAo=r(Hrt,"__init__()"),Hrt.forEach(t),NAo=r(pNe," (throws an error)."),pNe.forEach(t),jAo=i(Vs),nt=n(Vs,"DIV",{class:!0});var iw=s(nt);T(Q6.$$.fragment,iw),DAo=i(iw),Pde=n(iw,"P",{});var Urt=s(Pde);GAo=r(Urt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Urt.forEach(t),OAo=i(iw),Pi=n(iw,"P",{});var _K=s(Pi);VAo=r(_K,`Note:
Loading a model from its configuration file does `),Ide=n(_K,"STRONG",{});var Jrt=s(Ide);XAo=r(Jrt,"not"),Jrt.forEach(t),zAo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xj=n(_K,"A",{href:!0});var Yrt=s(Xj);QAo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),WAo=r(_K," to load the model weights."),_K.forEach(t),HAo=i(iw),T(Z1.$$.fragment,iw),iw.forEach(t),UAo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(W6.$$.fragment,ta),JAo=i(ta),qde=n(ta,"P",{});var Krt=s(qde);YAo=r(Krt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Krt.forEach(t),KAo=i(ta),$a=n(ta,"P",{});var dw=s($a);ZAo=r(dw,"The model class to instantiate is selected based on the "),Nde=n(dw,"CODE",{});var Zrt=s(Nde);e6o=r(Zrt,"model_type"),Zrt.forEach(t),o6o=r(dw,` property of the config object (either
passed as an argument or loaded from `),jde=n(dw,"CODE",{});var ett=s(jde);r6o=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),t6o=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(dw,"CODE",{});var ott=s(Dde);a6o=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),n6o=r(dw,":"),dw.forEach(t),s6o=i(ta),he=n(ta,"UL",{});var ue=s(he);e7=n(ue,"LI",{});var jye=s(e7);Gde=n(jye,"STRONG",{});var rtt=s(Gde);l6o=r(rtt,"bart"),rtt.forEach(t),i6o=r(jye," \u2014 "),zj=n(jye,"A",{href:!0});var ttt=s(zj);d6o=r(ttt,"BartForConditionalGeneration"),ttt.forEach(t),c6o=r(jye," (BART model)"),jye.forEach(t),f6o=i(ue),o7=n(ue,"LI",{});var Dye=s(o7);Ode=n(Dye,"STRONG",{});var att=s(Ode);m6o=r(att,"bigbird_pegasus"),att.forEach(t),g6o=r(Dye," \u2014 "),Qj=n(Dye,"A",{href:!0});var ntt=s(Qj);h6o=r(ntt,"BigBirdPegasusForConditionalGeneration"),ntt.forEach(t),p6o=r(Dye," (BigBirdPegasus model)"),Dye.forEach(t),u6o=i(ue),r7=n(ue,"LI",{});var Gye=s(r7);Vde=n(Gye,"STRONG",{});var stt=s(Vde);_6o=r(stt,"blenderbot"),stt.forEach(t),b6o=r(Gye," \u2014 "),Wj=n(Gye,"A",{href:!0});var ltt=s(Wj);v6o=r(ltt,"BlenderbotForConditionalGeneration"),ltt.forEach(t),F6o=r(Gye," (Blenderbot model)"),Gye.forEach(t),T6o=i(ue),t7=n(ue,"LI",{});var Oye=s(t7);Xde=n(Oye,"STRONG",{});var itt=s(Xde);M6o=r(itt,"blenderbot-small"),itt.forEach(t),E6o=r(Oye," \u2014 "),Hj=n(Oye,"A",{href:!0});var dtt=s(Hj);C6o=r(dtt,"BlenderbotSmallForConditionalGeneration"),dtt.forEach(t),w6o=r(Oye," (BlenderbotSmall model)"),Oye.forEach(t),A6o=i(ue),a7=n(ue,"LI",{});var Vye=s(a7);zde=n(Vye,"STRONG",{});var ctt=s(zde);y6o=r(ctt,"encoder-decoder"),ctt.forEach(t),L6o=r(Vye," \u2014 "),Uj=n(Vye,"A",{href:!0});var ftt=s(Uj);x6o=r(ftt,"EncoderDecoderModel"),ftt.forEach(t),$6o=r(Vye," (Encoder decoder model)"),Vye.forEach(t),k6o=i(ue),n7=n(ue,"LI",{});var Xye=s(n7);Qde=n(Xye,"STRONG",{});var mtt=s(Qde);S6o=r(mtt,"fsmt"),mtt.forEach(t),R6o=r(Xye," \u2014 "),Jj=n(Xye,"A",{href:!0});var gtt=s(Jj);B6o=r(gtt,"FSMTForConditionalGeneration"),gtt.forEach(t),P6o=r(Xye," (FairSeq Machine-Translation model)"),Xye.forEach(t),I6o=i(ue),s7=n(ue,"LI",{});var zye=s(s7);Wde=n(zye,"STRONG",{});var htt=s(Wde);q6o=r(htt,"led"),htt.forEach(t),N6o=r(zye," \u2014 "),Yj=n(zye,"A",{href:!0});var ptt=s(Yj);j6o=r(ptt,"LEDForConditionalGeneration"),ptt.forEach(t),D6o=r(zye," (LED model)"),zye.forEach(t),G6o=i(ue),l7=n(ue,"LI",{});var Qye=s(l7);Hde=n(Qye,"STRONG",{});var utt=s(Hde);O6o=r(utt,"m2m_100"),utt.forEach(t),V6o=r(Qye," \u2014 "),Kj=n(Qye,"A",{href:!0});var _tt=s(Kj);X6o=r(_tt,"M2M100ForConditionalGeneration"),_tt.forEach(t),z6o=r(Qye," (M2M100 model)"),Qye.forEach(t),Q6o=i(ue),i7=n(ue,"LI",{});var Wye=s(i7);Ude=n(Wye,"STRONG",{});var btt=s(Ude);W6o=r(btt,"marian"),btt.forEach(t),H6o=r(Wye," \u2014 "),Zj=n(Wye,"A",{href:!0});var vtt=s(Zj);U6o=r(vtt,"MarianMTModel"),vtt.forEach(t),J6o=r(Wye," (Marian model)"),Wye.forEach(t),Y6o=i(ue),d7=n(ue,"LI",{});var Hye=s(d7);Jde=n(Hye,"STRONG",{});var Ftt=s(Jde);K6o=r(Ftt,"mbart"),Ftt.forEach(t),Z6o=r(Hye," \u2014 "),eD=n(Hye,"A",{href:!0});var Ttt=s(eD);eyo=r(Ttt,"MBartForConditionalGeneration"),Ttt.forEach(t),oyo=r(Hye," (mBART model)"),Hye.forEach(t),ryo=i(ue),c7=n(ue,"LI",{});var Uye=s(c7);Yde=n(Uye,"STRONG",{});var Mtt=s(Yde);tyo=r(Mtt,"mt5"),Mtt.forEach(t),ayo=r(Uye," \u2014 "),oD=n(Uye,"A",{href:!0});var Ett=s(oD);nyo=r(Ett,"MT5ForConditionalGeneration"),Ett.forEach(t),syo=r(Uye," (mT5 model)"),Uye.forEach(t),lyo=i(ue),f7=n(ue,"LI",{});var Jye=s(f7);Kde=n(Jye,"STRONG",{});var Ctt=s(Kde);iyo=r(Ctt,"pegasus"),Ctt.forEach(t),dyo=r(Jye," \u2014 "),rD=n(Jye,"A",{href:!0});var wtt=s(rD);cyo=r(wtt,"PegasusForConditionalGeneration"),wtt.forEach(t),fyo=r(Jye," (Pegasus model)"),Jye.forEach(t),myo=i(ue),m7=n(ue,"LI",{});var Yye=s(m7);Zde=n(Yye,"STRONG",{});var Att=s(Zde);gyo=r(Att,"plbart"),Att.forEach(t),hyo=r(Yye," \u2014 "),tD=n(Yye,"A",{href:!0});var ytt=s(tD);pyo=r(ytt,"PLBartForConditionalGeneration"),ytt.forEach(t),uyo=r(Yye," (PLBart model)"),Yye.forEach(t),_yo=i(ue),g7=n(ue,"LI",{});var Kye=s(g7);ece=n(Kye,"STRONG",{});var Ltt=s(ece);byo=r(Ltt,"prophetnet"),Ltt.forEach(t),vyo=r(Kye," \u2014 "),aD=n(Kye,"A",{href:!0});var xtt=s(aD);Fyo=r(xtt,"ProphetNetForConditionalGeneration"),xtt.forEach(t),Tyo=r(Kye," (ProphetNet model)"),Kye.forEach(t),Myo=i(ue),h7=n(ue,"LI",{});var Zye=s(h7);oce=n(Zye,"STRONG",{});var $tt=s(oce);Eyo=r($tt,"t5"),$tt.forEach(t),Cyo=r(Zye," \u2014 "),nD=n(Zye,"A",{href:!0});var ktt=s(nD);wyo=r(ktt,"T5ForConditionalGeneration"),ktt.forEach(t),Ayo=r(Zye," (T5 model)"),Zye.forEach(t),yyo=i(ue),p7=n(ue,"LI",{});var eLe=s(p7);rce=n(eLe,"STRONG",{});var Stt=s(rce);Lyo=r(Stt,"tapex"),Stt.forEach(t),xyo=r(eLe," \u2014 "),sD=n(eLe,"A",{href:!0});var Rtt=s(sD);$yo=r(Rtt,"BartForConditionalGeneration"),Rtt.forEach(t),kyo=r(eLe," (TAPEX model)"),eLe.forEach(t),Syo=i(ue),u7=n(ue,"LI",{});var oLe=s(u7);tce=n(oLe,"STRONG",{});var Btt=s(tce);Ryo=r(Btt,"xlm-prophetnet"),Btt.forEach(t),Byo=r(oLe," \u2014 "),lD=n(oLe,"A",{href:!0});var Ptt=s(lD);Pyo=r(Ptt,"XLMProphetNetForConditionalGeneration"),Ptt.forEach(t),Iyo=r(oLe," (XLMProphetNet model)"),oLe.forEach(t),ue.forEach(t),qyo=i(ta),_7=n(ta,"P",{});var rLe=s(_7);Nyo=r(rLe,"The model is set in evaluation mode by default using "),ace=n(rLe,"CODE",{});var Itt=s(ace);jyo=r(Itt,"model.eval()"),Itt.forEach(t),Dyo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(rLe,"CODE",{});var qtt=s(nce);Gyo=r(qtt,"model.train()"),qtt.forEach(t),rLe.forEach(t),Oyo=i(ta),T(b7.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),mIe=i(f),Ii=n(f,"H2",{class:!0});var uNe=s(Ii);v7=n(uNe,"A",{id:!0,class:!0,href:!0});var Ntt=s(v7);sce=n(Ntt,"SPAN",{});var jtt=s(sce);T(H6.$$.fragment,jtt),jtt.forEach(t),Ntt.forEach(t),Vyo=i(uNe),lce=n(uNe,"SPAN",{});var Dtt=s(lce);Xyo=r(Dtt,"AutoModelForSequenceClassification"),Dtt.forEach(t),uNe.forEach(t),gIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(U6.$$.fragment,Xs),zyo=i(Xs),qi=n(Xs,"P",{});var bK=s(qi);Qyo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iD=n(bK,"A",{href:!0});var Gtt=s(iD);Wyo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),Hyo=r(bK," class method or the "),dD=n(bK,"A",{href:!0});var Ott=s(dD);Uyo=r(Ott,"from_config()"),Ott.forEach(t),Jyo=r(bK,` class
method.`),bK.forEach(t),Yyo=i(Xs),J6=n(Xs,"P",{});var _Ne=s(J6);Kyo=r(_Ne,"This class cannot be instantiated directly using "),ice=n(_Ne,"CODE",{});var Vtt=s(ice);Zyo=r(Vtt,"__init__()"),Vtt.forEach(t),eLo=r(_Ne," (throws an error)."),_Ne.forEach(t),oLo=i(Xs),st=n(Xs,"DIV",{class:!0});var cw=s(st);T(Y6.$$.fragment,cw),rLo=i(cw),dce=n(cw,"P",{});var Xtt=s(dce);tLo=r(Xtt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xtt.forEach(t),aLo=i(cw),Ni=n(cw,"P",{});var vK=s(Ni);nLo=r(vK,`Note:
Loading a model from its configuration file does `),cce=n(vK,"STRONG",{});var ztt=s(cce);sLo=r(ztt,"not"),ztt.forEach(t),lLo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n(vK,"A",{href:!0});var Qtt=s(cD);iLo=r(Qtt,"from_pretrained()"),Qtt.forEach(t),dLo=r(vK," to load the model weights."),vK.forEach(t),cLo=i(cw),T(F7.$$.fragment,cw),cw.forEach(t),fLo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(K6.$$.fragment,aa),mLo=i(aa),fce=n(aa,"P",{});var Wtt=s(fce);gLo=r(Wtt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wtt.forEach(t),hLo=i(aa),ka=n(aa,"P",{});var fw=s(ka);pLo=r(fw,"The model class to instantiate is selected based on the "),mce=n(fw,"CODE",{});var Htt=s(mce);uLo=r(Htt,"model_type"),Htt.forEach(t),_Lo=r(fw,` property of the config object (either
passed as an argument or loaded from `),gce=n(fw,"CODE",{});var Utt=s(gce);bLo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),vLo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(fw,"CODE",{});var Jtt=s(hce);FLo=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),TLo=r(fw,":"),fw.forEach(t),MLo=i(aa),q=n(aa,"UL",{});var N=s(q);T7=n(N,"LI",{});var tLe=s(T7);pce=n(tLe,"STRONG",{});var Ytt=s(pce);ELo=r(Ytt,"albert"),Ytt.forEach(t),CLo=r(tLe," \u2014 "),fD=n(tLe,"A",{href:!0});var Ktt=s(fD);wLo=r(Ktt,"AlbertForSequenceClassification"),Ktt.forEach(t),ALo=r(tLe," (ALBERT model)"),tLe.forEach(t),yLo=i(N),M7=n(N,"LI",{});var aLe=s(M7);uce=n(aLe,"STRONG",{});var Ztt=s(uce);LLo=r(Ztt,"bart"),Ztt.forEach(t),xLo=r(aLe," \u2014 "),mD=n(aLe,"A",{href:!0});var eat=s(mD);$Lo=r(eat,"BartForSequenceClassification"),eat.forEach(t),kLo=r(aLe," (BART model)"),aLe.forEach(t),SLo=i(N),E7=n(N,"LI",{});var nLe=s(E7);_ce=n(nLe,"STRONG",{});var oat=s(_ce);RLo=r(oat,"bert"),oat.forEach(t),BLo=r(nLe," \u2014 "),gD=n(nLe,"A",{href:!0});var rat=s(gD);PLo=r(rat,"BertForSequenceClassification"),rat.forEach(t),ILo=r(nLe," (BERT model)"),nLe.forEach(t),qLo=i(N),C7=n(N,"LI",{});var sLe=s(C7);bce=n(sLe,"STRONG",{});var tat=s(bce);NLo=r(tat,"big_bird"),tat.forEach(t),jLo=r(sLe," \u2014 "),hD=n(sLe,"A",{href:!0});var aat=s(hD);DLo=r(aat,"BigBirdForSequenceClassification"),aat.forEach(t),GLo=r(sLe," (BigBird model)"),sLe.forEach(t),OLo=i(N),w7=n(N,"LI",{});var lLe=s(w7);vce=n(lLe,"STRONG",{});var nat=s(vce);VLo=r(nat,"bigbird_pegasus"),nat.forEach(t),XLo=r(lLe," \u2014 "),pD=n(lLe,"A",{href:!0});var sat=s(pD);zLo=r(sat,"BigBirdPegasusForSequenceClassification"),sat.forEach(t),QLo=r(lLe," (BigBirdPegasus model)"),lLe.forEach(t),WLo=i(N),A7=n(N,"LI",{});var iLe=s(A7);Fce=n(iLe,"STRONG",{});var lat=s(Fce);HLo=r(lat,"camembert"),lat.forEach(t),ULo=r(iLe," \u2014 "),uD=n(iLe,"A",{href:!0});var iat=s(uD);JLo=r(iat,"CamembertForSequenceClassification"),iat.forEach(t),YLo=r(iLe," (CamemBERT model)"),iLe.forEach(t),KLo=i(N),y7=n(N,"LI",{});var dLe=s(y7);Tce=n(dLe,"STRONG",{});var dat=s(Tce);ZLo=r(dat,"canine"),dat.forEach(t),e8o=r(dLe," \u2014 "),_D=n(dLe,"A",{href:!0});var cat=s(_D);o8o=r(cat,"CanineForSequenceClassification"),cat.forEach(t),r8o=r(dLe," (Canine model)"),dLe.forEach(t),t8o=i(N),L7=n(N,"LI",{});var cLe=s(L7);Mce=n(cLe,"STRONG",{});var fat=s(Mce);a8o=r(fat,"convbert"),fat.forEach(t),n8o=r(cLe," \u2014 "),bD=n(cLe,"A",{href:!0});var mat=s(bD);s8o=r(mat,"ConvBertForSequenceClassification"),mat.forEach(t),l8o=r(cLe," (ConvBERT model)"),cLe.forEach(t),i8o=i(N),x7=n(N,"LI",{});var fLe=s(x7);Ece=n(fLe,"STRONG",{});var gat=s(Ece);d8o=r(gat,"ctrl"),gat.forEach(t),c8o=r(fLe," \u2014 "),vD=n(fLe,"A",{href:!0});var hat=s(vD);f8o=r(hat,"CTRLForSequenceClassification"),hat.forEach(t),m8o=r(fLe," (CTRL model)"),fLe.forEach(t),g8o=i(N),$7=n(N,"LI",{});var mLe=s($7);Cce=n(mLe,"STRONG",{});var pat=s(Cce);h8o=r(pat,"data2vec-text"),pat.forEach(t),p8o=r(mLe," \u2014 "),FD=n(mLe,"A",{href:!0});var uat=s(FD);u8o=r(uat,"Data2VecTextForSequenceClassification"),uat.forEach(t),_8o=r(mLe," (Data2VecText model)"),mLe.forEach(t),b8o=i(N),k7=n(N,"LI",{});var gLe=s(k7);wce=n(gLe,"STRONG",{});var _at=s(wce);v8o=r(_at,"deberta"),_at.forEach(t),F8o=r(gLe," \u2014 "),TD=n(gLe,"A",{href:!0});var bat=s(TD);T8o=r(bat,"DebertaForSequenceClassification"),bat.forEach(t),M8o=r(gLe," (DeBERTa model)"),gLe.forEach(t),E8o=i(N),S7=n(N,"LI",{});var hLe=s(S7);Ace=n(hLe,"STRONG",{});var vat=s(Ace);C8o=r(vat,"deberta-v2"),vat.forEach(t),w8o=r(hLe," \u2014 "),MD=n(hLe,"A",{href:!0});var Fat=s(MD);A8o=r(Fat,"DebertaV2ForSequenceClassification"),Fat.forEach(t),y8o=r(hLe," (DeBERTa-v2 model)"),hLe.forEach(t),L8o=i(N),R7=n(N,"LI",{});var pLe=s(R7);yce=n(pLe,"STRONG",{});var Tat=s(yce);x8o=r(Tat,"distilbert"),Tat.forEach(t),$8o=r(pLe," \u2014 "),ED=n(pLe,"A",{href:!0});var Mat=s(ED);k8o=r(Mat,"DistilBertForSequenceClassification"),Mat.forEach(t),S8o=r(pLe," (DistilBERT model)"),pLe.forEach(t),R8o=i(N),B7=n(N,"LI",{});var uLe=s(B7);Lce=n(uLe,"STRONG",{});var Eat=s(Lce);B8o=r(Eat,"electra"),Eat.forEach(t),P8o=r(uLe," \u2014 "),CD=n(uLe,"A",{href:!0});var Cat=s(CD);I8o=r(Cat,"ElectraForSequenceClassification"),Cat.forEach(t),q8o=r(uLe," (ELECTRA model)"),uLe.forEach(t),N8o=i(N),P7=n(N,"LI",{});var _Le=s(P7);xce=n(_Le,"STRONG",{});var wat=s(xce);j8o=r(wat,"flaubert"),wat.forEach(t),D8o=r(_Le," \u2014 "),wD=n(_Le,"A",{href:!0});var Aat=s(wD);G8o=r(Aat,"FlaubertForSequenceClassification"),Aat.forEach(t),O8o=r(_Le," (FlauBERT model)"),_Le.forEach(t),V8o=i(N),I7=n(N,"LI",{});var bLe=s(I7);$ce=n(bLe,"STRONG",{});var yat=s($ce);X8o=r(yat,"fnet"),yat.forEach(t),z8o=r(bLe," \u2014 "),AD=n(bLe,"A",{href:!0});var Lat=s(AD);Q8o=r(Lat,"FNetForSequenceClassification"),Lat.forEach(t),W8o=r(bLe," (FNet model)"),bLe.forEach(t),H8o=i(N),q7=n(N,"LI",{});var vLe=s(q7);kce=n(vLe,"STRONG",{});var xat=s(kce);U8o=r(xat,"funnel"),xat.forEach(t),J8o=r(vLe," \u2014 "),yD=n(vLe,"A",{href:!0});var $at=s(yD);Y8o=r($at,"FunnelForSequenceClassification"),$at.forEach(t),K8o=r(vLe," (Funnel Transformer model)"),vLe.forEach(t),Z8o=i(N),N7=n(N,"LI",{});var FLe=s(N7);Sce=n(FLe,"STRONG",{});var kat=s(Sce);exo=r(kat,"gpt2"),kat.forEach(t),oxo=r(FLe," \u2014 "),LD=n(FLe,"A",{href:!0});var Sat=s(LD);rxo=r(Sat,"GPT2ForSequenceClassification"),Sat.forEach(t),txo=r(FLe," (OpenAI GPT-2 model)"),FLe.forEach(t),axo=i(N),j7=n(N,"LI",{});var TLe=s(j7);Rce=n(TLe,"STRONG",{});var Rat=s(Rce);nxo=r(Rat,"gpt_neo"),Rat.forEach(t),sxo=r(TLe," \u2014 "),xD=n(TLe,"A",{href:!0});var Bat=s(xD);lxo=r(Bat,"GPTNeoForSequenceClassification"),Bat.forEach(t),ixo=r(TLe," (GPT Neo model)"),TLe.forEach(t),dxo=i(N),D7=n(N,"LI",{});var MLe=s(D7);Bce=n(MLe,"STRONG",{});var Pat=s(Bce);cxo=r(Pat,"gptj"),Pat.forEach(t),fxo=r(MLe," \u2014 "),$D=n(MLe,"A",{href:!0});var Iat=s($D);mxo=r(Iat,"GPTJForSequenceClassification"),Iat.forEach(t),gxo=r(MLe," (GPT-J model)"),MLe.forEach(t),hxo=i(N),G7=n(N,"LI",{});var ELe=s(G7);Pce=n(ELe,"STRONG",{});var qat=s(Pce);pxo=r(qat,"ibert"),qat.forEach(t),uxo=r(ELe," \u2014 "),kD=n(ELe,"A",{href:!0});var Nat=s(kD);_xo=r(Nat,"IBertForSequenceClassification"),Nat.forEach(t),bxo=r(ELe," (I-BERT model)"),ELe.forEach(t),vxo=i(N),O7=n(N,"LI",{});var CLe=s(O7);Ice=n(CLe,"STRONG",{});var jat=s(Ice);Fxo=r(jat,"layoutlm"),jat.forEach(t),Txo=r(CLe," \u2014 "),SD=n(CLe,"A",{href:!0});var Dat=s(SD);Mxo=r(Dat,"LayoutLMForSequenceClassification"),Dat.forEach(t),Exo=r(CLe," (LayoutLM model)"),CLe.forEach(t),Cxo=i(N),V7=n(N,"LI",{});var wLe=s(V7);qce=n(wLe,"STRONG",{});var Gat=s(qce);wxo=r(Gat,"layoutlmv2"),Gat.forEach(t),Axo=r(wLe," \u2014 "),RD=n(wLe,"A",{href:!0});var Oat=s(RD);yxo=r(Oat,"LayoutLMv2ForSequenceClassification"),Oat.forEach(t),Lxo=r(wLe," (LayoutLMv2 model)"),wLe.forEach(t),xxo=i(N),X7=n(N,"LI",{});var ALe=s(X7);Nce=n(ALe,"STRONG",{});var Vat=s(Nce);$xo=r(Vat,"led"),Vat.forEach(t),kxo=r(ALe," \u2014 "),BD=n(ALe,"A",{href:!0});var Xat=s(BD);Sxo=r(Xat,"LEDForSequenceClassification"),Xat.forEach(t),Rxo=r(ALe," (LED model)"),ALe.forEach(t),Bxo=i(N),z7=n(N,"LI",{});var yLe=s(z7);jce=n(yLe,"STRONG",{});var zat=s(jce);Pxo=r(zat,"longformer"),zat.forEach(t),Ixo=r(yLe," \u2014 "),PD=n(yLe,"A",{href:!0});var Qat=s(PD);qxo=r(Qat,"LongformerForSequenceClassification"),Qat.forEach(t),Nxo=r(yLe," (Longformer model)"),yLe.forEach(t),jxo=i(N),Q7=n(N,"LI",{});var LLe=s(Q7);Dce=n(LLe,"STRONG",{});var Wat=s(Dce);Dxo=r(Wat,"mbart"),Wat.forEach(t),Gxo=r(LLe," \u2014 "),ID=n(LLe,"A",{href:!0});var Hat=s(ID);Oxo=r(Hat,"MBartForSequenceClassification"),Hat.forEach(t),Vxo=r(LLe," (mBART model)"),LLe.forEach(t),Xxo=i(N),W7=n(N,"LI",{});var xLe=s(W7);Gce=n(xLe,"STRONG",{});var Uat=s(Gce);zxo=r(Uat,"megatron-bert"),Uat.forEach(t),Qxo=r(xLe," \u2014 "),qD=n(xLe,"A",{href:!0});var Jat=s(qD);Wxo=r(Jat,"MegatronBertForSequenceClassification"),Jat.forEach(t),Hxo=r(xLe," (MegatronBert model)"),xLe.forEach(t),Uxo=i(N),H7=n(N,"LI",{});var $Le=s(H7);Oce=n($Le,"STRONG",{});var Yat=s(Oce);Jxo=r(Yat,"mobilebert"),Yat.forEach(t),Yxo=r($Le," \u2014 "),ND=n($Le,"A",{href:!0});var Kat=s(ND);Kxo=r(Kat,"MobileBertForSequenceClassification"),Kat.forEach(t),Zxo=r($Le," (MobileBERT model)"),$Le.forEach(t),e9o=i(N),U7=n(N,"LI",{});var kLe=s(U7);Vce=n(kLe,"STRONG",{});var Zat=s(Vce);o9o=r(Zat,"mpnet"),Zat.forEach(t),r9o=r(kLe," \u2014 "),jD=n(kLe,"A",{href:!0});var ent=s(jD);t9o=r(ent,"MPNetForSequenceClassification"),ent.forEach(t),a9o=r(kLe," (MPNet model)"),kLe.forEach(t),n9o=i(N),J7=n(N,"LI",{});var SLe=s(J7);Xce=n(SLe,"STRONG",{});var ont=s(Xce);s9o=r(ont,"nystromformer"),ont.forEach(t),l9o=r(SLe," \u2014 "),DD=n(SLe,"A",{href:!0});var rnt=s(DD);i9o=r(rnt,"NystromformerForSequenceClassification"),rnt.forEach(t),d9o=r(SLe," (Nystromformer model)"),SLe.forEach(t),c9o=i(N),Y7=n(N,"LI",{});var RLe=s(Y7);zce=n(RLe,"STRONG",{});var tnt=s(zce);f9o=r(tnt,"openai-gpt"),tnt.forEach(t),m9o=r(RLe," \u2014 "),GD=n(RLe,"A",{href:!0});var ant=s(GD);g9o=r(ant,"OpenAIGPTForSequenceClassification"),ant.forEach(t),h9o=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),p9o=i(N),K7=n(N,"LI",{});var BLe=s(K7);Qce=n(BLe,"STRONG",{});var nnt=s(Qce);u9o=r(nnt,"perceiver"),nnt.forEach(t),_9o=r(BLe," \u2014 "),OD=n(BLe,"A",{href:!0});var snt=s(OD);b9o=r(snt,"PerceiverForSequenceClassification"),snt.forEach(t),v9o=r(BLe," (Perceiver model)"),BLe.forEach(t),F9o=i(N),Z7=n(N,"LI",{});var PLe=s(Z7);Wce=n(PLe,"STRONG",{});var lnt=s(Wce);T9o=r(lnt,"plbart"),lnt.forEach(t),M9o=r(PLe," \u2014 "),VD=n(PLe,"A",{href:!0});var int=s(VD);E9o=r(int,"PLBartForSequenceClassification"),int.forEach(t),C9o=r(PLe," (PLBart model)"),PLe.forEach(t),w9o=i(N),eb=n(N,"LI",{});var ILe=s(eb);Hce=n(ILe,"STRONG",{});var dnt=s(Hce);A9o=r(dnt,"qdqbert"),dnt.forEach(t),y9o=r(ILe," \u2014 "),XD=n(ILe,"A",{href:!0});var cnt=s(XD);L9o=r(cnt,"QDQBertForSequenceClassification"),cnt.forEach(t),x9o=r(ILe," (QDQBert model)"),ILe.forEach(t),$9o=i(N),ob=n(N,"LI",{});var qLe=s(ob);Uce=n(qLe,"STRONG",{});var fnt=s(Uce);k9o=r(fnt,"reformer"),fnt.forEach(t),S9o=r(qLe," \u2014 "),zD=n(qLe,"A",{href:!0});var mnt=s(zD);R9o=r(mnt,"ReformerForSequenceClassification"),mnt.forEach(t),B9o=r(qLe," (Reformer model)"),qLe.forEach(t),P9o=i(N),rb=n(N,"LI",{});var NLe=s(rb);Jce=n(NLe,"STRONG",{});var gnt=s(Jce);I9o=r(gnt,"rembert"),gnt.forEach(t),q9o=r(NLe," \u2014 "),QD=n(NLe,"A",{href:!0});var hnt=s(QD);N9o=r(hnt,"RemBertForSequenceClassification"),hnt.forEach(t),j9o=r(NLe," (RemBERT model)"),NLe.forEach(t),D9o=i(N),tb=n(N,"LI",{});var jLe=s(tb);Yce=n(jLe,"STRONG",{});var pnt=s(Yce);G9o=r(pnt,"roberta"),pnt.forEach(t),O9o=r(jLe," \u2014 "),WD=n(jLe,"A",{href:!0});var unt=s(WD);V9o=r(unt,"RobertaForSequenceClassification"),unt.forEach(t),X9o=r(jLe," (RoBERTa model)"),jLe.forEach(t),z9o=i(N),ab=n(N,"LI",{});var DLe=s(ab);Kce=n(DLe,"STRONG",{});var _nt=s(Kce);Q9o=r(_nt,"roformer"),_nt.forEach(t),W9o=r(DLe," \u2014 "),HD=n(DLe,"A",{href:!0});var bnt=s(HD);H9o=r(bnt,"RoFormerForSequenceClassification"),bnt.forEach(t),U9o=r(DLe," (RoFormer model)"),DLe.forEach(t),J9o=i(N),nb=n(N,"LI",{});var GLe=s(nb);Zce=n(GLe,"STRONG",{});var vnt=s(Zce);Y9o=r(vnt,"squeezebert"),vnt.forEach(t),K9o=r(GLe," \u2014 "),UD=n(GLe,"A",{href:!0});var Fnt=s(UD);Z9o=r(Fnt,"SqueezeBertForSequenceClassification"),Fnt.forEach(t),e$o=r(GLe," (SqueezeBERT model)"),GLe.forEach(t),o$o=i(N),sb=n(N,"LI",{});var OLe=s(sb);efe=n(OLe,"STRONG",{});var Tnt=s(efe);r$o=r(Tnt,"tapas"),Tnt.forEach(t),t$o=r(OLe," \u2014 "),JD=n(OLe,"A",{href:!0});var Mnt=s(JD);a$o=r(Mnt,"TapasForSequenceClassification"),Mnt.forEach(t),n$o=r(OLe," (TAPAS model)"),OLe.forEach(t),s$o=i(N),lb=n(N,"LI",{});var VLe=s(lb);ofe=n(VLe,"STRONG",{});var Ent=s(ofe);l$o=r(Ent,"tapex"),Ent.forEach(t),i$o=r(VLe," \u2014 "),YD=n(VLe,"A",{href:!0});var Cnt=s(YD);d$o=r(Cnt,"BartForSequenceClassification"),Cnt.forEach(t),c$o=r(VLe," (TAPEX model)"),VLe.forEach(t),f$o=i(N),ib=n(N,"LI",{});var XLe=s(ib);rfe=n(XLe,"STRONG",{});var wnt=s(rfe);m$o=r(wnt,"transfo-xl"),wnt.forEach(t),g$o=r(XLe," \u2014 "),KD=n(XLe,"A",{href:!0});var Ant=s(KD);h$o=r(Ant,"TransfoXLForSequenceClassification"),Ant.forEach(t),p$o=r(XLe," (Transformer-XL model)"),XLe.forEach(t),u$o=i(N),db=n(N,"LI",{});var zLe=s(db);tfe=n(zLe,"STRONG",{});var ynt=s(tfe);_$o=r(ynt,"xlm"),ynt.forEach(t),b$o=r(zLe," \u2014 "),ZD=n(zLe,"A",{href:!0});var Lnt=s(ZD);v$o=r(Lnt,"XLMForSequenceClassification"),Lnt.forEach(t),F$o=r(zLe," (XLM model)"),zLe.forEach(t),T$o=i(N),cb=n(N,"LI",{});var QLe=s(cb);afe=n(QLe,"STRONG",{});var xnt=s(afe);M$o=r(xnt,"xlm-roberta"),xnt.forEach(t),E$o=r(QLe," \u2014 "),eG=n(QLe,"A",{href:!0});var $nt=s(eG);C$o=r($nt,"XLMRobertaForSequenceClassification"),$nt.forEach(t),w$o=r(QLe," (XLM-RoBERTa model)"),QLe.forEach(t),A$o=i(N),fb=n(N,"LI",{});var WLe=s(fb);nfe=n(WLe,"STRONG",{});var knt=s(nfe);y$o=r(knt,"xlm-roberta-xl"),knt.forEach(t),L$o=r(WLe," \u2014 "),oG=n(WLe,"A",{href:!0});var Snt=s(oG);x$o=r(Snt,"XLMRobertaXLForSequenceClassification"),Snt.forEach(t),$$o=r(WLe," (XLM-RoBERTa-XL model)"),WLe.forEach(t),k$o=i(N),mb=n(N,"LI",{});var HLe=s(mb);sfe=n(HLe,"STRONG",{});var Rnt=s(sfe);S$o=r(Rnt,"xlnet"),Rnt.forEach(t),R$o=r(HLe," \u2014 "),rG=n(HLe,"A",{href:!0});var Bnt=s(rG);B$o=r(Bnt,"XLNetForSequenceClassification"),Bnt.forEach(t),P$o=r(HLe," (XLNet model)"),HLe.forEach(t),I$o=i(N),gb=n(N,"LI",{});var ULe=s(gb);lfe=n(ULe,"STRONG",{});var Pnt=s(lfe);q$o=r(Pnt,"yoso"),Pnt.forEach(t),N$o=r(ULe," \u2014 "),tG=n(ULe,"A",{href:!0});var Int=s(tG);j$o=r(Int,"YosoForSequenceClassification"),Int.forEach(t),D$o=r(ULe," (YOSO model)"),ULe.forEach(t),N.forEach(t),G$o=i(aa),hb=n(aa,"P",{});var JLe=s(hb);O$o=r(JLe,"The model is set in evaluation mode by default using "),ife=n(JLe,"CODE",{});var qnt=s(ife);V$o=r(qnt,"model.eval()"),qnt.forEach(t),X$o=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(JLe,"CODE",{});var Nnt=s(dfe);z$o=r(Nnt,"model.train()"),Nnt.forEach(t),JLe.forEach(t),Q$o=i(aa),T(pb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),hIe=i(f),ji=n(f,"H2",{class:!0});var bNe=s(ji);ub=n(bNe,"A",{id:!0,class:!0,href:!0});var jnt=s(ub);cfe=n(jnt,"SPAN",{});var Dnt=s(cfe);T(Z6.$$.fragment,Dnt),Dnt.forEach(t),jnt.forEach(t),W$o=i(bNe),ffe=n(bNe,"SPAN",{});var Gnt=s(ffe);H$o=r(Gnt,"AutoModelForMultipleChoice"),Gnt.forEach(t),bNe.forEach(t),pIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(ey.$$.fragment,zs),U$o=i(zs),Di=n(zs,"P",{});var FK=s(Di);J$o=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aG=n(FK,"A",{href:!0});var Ont=s(aG);Y$o=r(Ont,"from_pretrained()"),Ont.forEach(t),K$o=r(FK," class method or the "),nG=n(FK,"A",{href:!0});var Vnt=s(nG);Z$o=r(Vnt,"from_config()"),Vnt.forEach(t),eko=r(FK,` class
method.`),FK.forEach(t),oko=i(zs),oy=n(zs,"P",{});var vNe=s(oy);rko=r(vNe,"This class cannot be instantiated directly using "),mfe=n(vNe,"CODE",{});var Xnt=s(mfe);tko=r(Xnt,"__init__()"),Xnt.forEach(t),ako=r(vNe," (throws an error)."),vNe.forEach(t),nko=i(zs),lt=n(zs,"DIV",{class:!0});var mw=s(lt);T(ry.$$.fragment,mw),sko=i(mw),gfe=n(mw,"P",{});var znt=s(gfe);lko=r(znt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),znt.forEach(t),iko=i(mw),Gi=n(mw,"P",{});var TK=s(Gi);dko=r(TK,`Note:
Loading a model from its configuration file does `),hfe=n(TK,"STRONG",{});var Qnt=s(hfe);cko=r(Qnt,"not"),Qnt.forEach(t),fko=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(TK,"A",{href:!0});var Wnt=s(sG);mko=r(Wnt,"from_pretrained()"),Wnt.forEach(t),gko=r(TK," to load the model weights."),TK.forEach(t),hko=i(mw),T(_b.$$.fragment,mw),mw.forEach(t),pko=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ty.$$.fragment,na),uko=i(na),pfe=n(na,"P",{});var Hnt=s(pfe);_ko=r(Hnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hnt.forEach(t),bko=i(na),Sa=n(na,"P",{});var gw=s(Sa);vko=r(gw,"The model class to instantiate is selected based on the "),ufe=n(gw,"CODE",{});var Unt=s(ufe);Fko=r(Unt,"model_type"),Unt.forEach(t),Tko=r(gw,` property of the config object (either
passed as an argument or loaded from `),_fe=n(gw,"CODE",{});var Jnt=s(_fe);Mko=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),Eko=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(gw,"CODE",{});var Ynt=s(bfe);Cko=r(Ynt,"pretrained_model_name_or_path"),Ynt.forEach(t),wko=r(gw,":"),gw.forEach(t),Ako=i(na),Y=n(na,"UL",{});var K=s(Y);bb=n(K,"LI",{});var YLe=s(bb);vfe=n(YLe,"STRONG",{});var Knt=s(vfe);yko=r(Knt,"albert"),Knt.forEach(t),Lko=r(YLe," \u2014 "),lG=n(YLe,"A",{href:!0});var Znt=s(lG);xko=r(Znt,"AlbertForMultipleChoice"),Znt.forEach(t),$ko=r(YLe," (ALBERT model)"),YLe.forEach(t),kko=i(K),vb=n(K,"LI",{});var KLe=s(vb);Ffe=n(KLe,"STRONG",{});var est=s(Ffe);Sko=r(est,"bert"),est.forEach(t),Rko=r(KLe," \u2014 "),iG=n(KLe,"A",{href:!0});var ost=s(iG);Bko=r(ost,"BertForMultipleChoice"),ost.forEach(t),Pko=r(KLe," (BERT model)"),KLe.forEach(t),Iko=i(K),Fb=n(K,"LI",{});var ZLe=s(Fb);Tfe=n(ZLe,"STRONG",{});var rst=s(Tfe);qko=r(rst,"big_bird"),rst.forEach(t),Nko=r(ZLe," \u2014 "),dG=n(ZLe,"A",{href:!0});var tst=s(dG);jko=r(tst,"BigBirdForMultipleChoice"),tst.forEach(t),Dko=r(ZLe," (BigBird model)"),ZLe.forEach(t),Gko=i(K),Tb=n(K,"LI",{});var e8e=s(Tb);Mfe=n(e8e,"STRONG",{});var ast=s(Mfe);Oko=r(ast,"camembert"),ast.forEach(t),Vko=r(e8e," \u2014 "),cG=n(e8e,"A",{href:!0});var nst=s(cG);Xko=r(nst,"CamembertForMultipleChoice"),nst.forEach(t),zko=r(e8e," (CamemBERT model)"),e8e.forEach(t),Qko=i(K),Mb=n(K,"LI",{});var o8e=s(Mb);Efe=n(o8e,"STRONG",{});var sst=s(Efe);Wko=r(sst,"canine"),sst.forEach(t),Hko=r(o8e," \u2014 "),fG=n(o8e,"A",{href:!0});var lst=s(fG);Uko=r(lst,"CanineForMultipleChoice"),lst.forEach(t),Jko=r(o8e," (Canine model)"),o8e.forEach(t),Yko=i(K),Eb=n(K,"LI",{});var r8e=s(Eb);Cfe=n(r8e,"STRONG",{});var ist=s(Cfe);Kko=r(ist,"convbert"),ist.forEach(t),Zko=r(r8e," \u2014 "),mG=n(r8e,"A",{href:!0});var dst=s(mG);eSo=r(dst,"ConvBertForMultipleChoice"),dst.forEach(t),oSo=r(r8e," (ConvBERT model)"),r8e.forEach(t),rSo=i(K),Cb=n(K,"LI",{});var t8e=s(Cb);wfe=n(t8e,"STRONG",{});var cst=s(wfe);tSo=r(cst,"data2vec-text"),cst.forEach(t),aSo=r(t8e," \u2014 "),gG=n(t8e,"A",{href:!0});var fst=s(gG);nSo=r(fst,"Data2VecTextForMultipleChoice"),fst.forEach(t),sSo=r(t8e," (Data2VecText model)"),t8e.forEach(t),lSo=i(K),wb=n(K,"LI",{});var a8e=s(wb);Afe=n(a8e,"STRONG",{});var mst=s(Afe);iSo=r(mst,"deberta-v2"),mst.forEach(t),dSo=r(a8e," \u2014 "),hG=n(a8e,"A",{href:!0});var gst=s(hG);cSo=r(gst,"DebertaV2ForMultipleChoice"),gst.forEach(t),fSo=r(a8e," (DeBERTa-v2 model)"),a8e.forEach(t),mSo=i(K),Ab=n(K,"LI",{});var n8e=s(Ab);yfe=n(n8e,"STRONG",{});var hst=s(yfe);gSo=r(hst,"distilbert"),hst.forEach(t),hSo=r(n8e," \u2014 "),pG=n(n8e,"A",{href:!0});var pst=s(pG);pSo=r(pst,"DistilBertForMultipleChoice"),pst.forEach(t),uSo=r(n8e," (DistilBERT model)"),n8e.forEach(t),_So=i(K),yb=n(K,"LI",{});var s8e=s(yb);Lfe=n(s8e,"STRONG",{});var ust=s(Lfe);bSo=r(ust,"electra"),ust.forEach(t),vSo=r(s8e," \u2014 "),uG=n(s8e,"A",{href:!0});var _st=s(uG);FSo=r(_st,"ElectraForMultipleChoice"),_st.forEach(t),TSo=r(s8e," (ELECTRA model)"),s8e.forEach(t),MSo=i(K),Lb=n(K,"LI",{});var l8e=s(Lb);xfe=n(l8e,"STRONG",{});var bst=s(xfe);ESo=r(bst,"flaubert"),bst.forEach(t),CSo=r(l8e," \u2014 "),_G=n(l8e,"A",{href:!0});var vst=s(_G);wSo=r(vst,"FlaubertForMultipleChoice"),vst.forEach(t),ASo=r(l8e," (FlauBERT model)"),l8e.forEach(t),ySo=i(K),xb=n(K,"LI",{});var i8e=s(xb);$fe=n(i8e,"STRONG",{});var Fst=s($fe);LSo=r(Fst,"fnet"),Fst.forEach(t),xSo=r(i8e," \u2014 "),bG=n(i8e,"A",{href:!0});var Tst=s(bG);$So=r(Tst,"FNetForMultipleChoice"),Tst.forEach(t),kSo=r(i8e," (FNet model)"),i8e.forEach(t),SSo=i(K),$b=n(K,"LI",{});var d8e=s($b);kfe=n(d8e,"STRONG",{});var Mst=s(kfe);RSo=r(Mst,"funnel"),Mst.forEach(t),BSo=r(d8e," \u2014 "),vG=n(d8e,"A",{href:!0});var Est=s(vG);PSo=r(Est,"FunnelForMultipleChoice"),Est.forEach(t),ISo=r(d8e," (Funnel Transformer model)"),d8e.forEach(t),qSo=i(K),kb=n(K,"LI",{});var c8e=s(kb);Sfe=n(c8e,"STRONG",{});var Cst=s(Sfe);NSo=r(Cst,"ibert"),Cst.forEach(t),jSo=r(c8e," \u2014 "),FG=n(c8e,"A",{href:!0});var wst=s(FG);DSo=r(wst,"IBertForMultipleChoice"),wst.forEach(t),GSo=r(c8e," (I-BERT model)"),c8e.forEach(t),OSo=i(K),Sb=n(K,"LI",{});var f8e=s(Sb);Rfe=n(f8e,"STRONG",{});var Ast=s(Rfe);VSo=r(Ast,"longformer"),Ast.forEach(t),XSo=r(f8e," \u2014 "),TG=n(f8e,"A",{href:!0});var yst=s(TG);zSo=r(yst,"LongformerForMultipleChoice"),yst.forEach(t),QSo=r(f8e," (Longformer model)"),f8e.forEach(t),WSo=i(K),Rb=n(K,"LI",{});var m8e=s(Rb);Bfe=n(m8e,"STRONG",{});var Lst=s(Bfe);HSo=r(Lst,"megatron-bert"),Lst.forEach(t),USo=r(m8e," \u2014 "),MG=n(m8e,"A",{href:!0});var xst=s(MG);JSo=r(xst,"MegatronBertForMultipleChoice"),xst.forEach(t),YSo=r(m8e," (MegatronBert model)"),m8e.forEach(t),KSo=i(K),Bb=n(K,"LI",{});var g8e=s(Bb);Pfe=n(g8e,"STRONG",{});var $st=s(Pfe);ZSo=r($st,"mobilebert"),$st.forEach(t),eRo=r(g8e," \u2014 "),EG=n(g8e,"A",{href:!0});var kst=s(EG);oRo=r(kst,"MobileBertForMultipleChoice"),kst.forEach(t),rRo=r(g8e," (MobileBERT model)"),g8e.forEach(t),tRo=i(K),Pb=n(K,"LI",{});var h8e=s(Pb);Ife=n(h8e,"STRONG",{});var Sst=s(Ife);aRo=r(Sst,"mpnet"),Sst.forEach(t),nRo=r(h8e," \u2014 "),CG=n(h8e,"A",{href:!0});var Rst=s(CG);sRo=r(Rst,"MPNetForMultipleChoice"),Rst.forEach(t),lRo=r(h8e," (MPNet model)"),h8e.forEach(t),iRo=i(K),Ib=n(K,"LI",{});var p8e=s(Ib);qfe=n(p8e,"STRONG",{});var Bst=s(qfe);dRo=r(Bst,"nystromformer"),Bst.forEach(t),cRo=r(p8e," \u2014 "),wG=n(p8e,"A",{href:!0});var Pst=s(wG);fRo=r(Pst,"NystromformerForMultipleChoice"),Pst.forEach(t),mRo=r(p8e," (Nystromformer model)"),p8e.forEach(t),gRo=i(K),qb=n(K,"LI",{});var u8e=s(qb);Nfe=n(u8e,"STRONG",{});var Ist=s(Nfe);hRo=r(Ist,"qdqbert"),Ist.forEach(t),pRo=r(u8e," \u2014 "),AG=n(u8e,"A",{href:!0});var qst=s(AG);uRo=r(qst,"QDQBertForMultipleChoice"),qst.forEach(t),_Ro=r(u8e," (QDQBert model)"),u8e.forEach(t),bRo=i(K),Nb=n(K,"LI",{});var _8e=s(Nb);jfe=n(_8e,"STRONG",{});var Nst=s(jfe);vRo=r(Nst,"rembert"),Nst.forEach(t),FRo=r(_8e," \u2014 "),yG=n(_8e,"A",{href:!0});var jst=s(yG);TRo=r(jst,"RemBertForMultipleChoice"),jst.forEach(t),MRo=r(_8e," (RemBERT model)"),_8e.forEach(t),ERo=i(K),jb=n(K,"LI",{});var b8e=s(jb);Dfe=n(b8e,"STRONG",{});var Dst=s(Dfe);CRo=r(Dst,"roberta"),Dst.forEach(t),wRo=r(b8e," \u2014 "),LG=n(b8e,"A",{href:!0});var Gst=s(LG);ARo=r(Gst,"RobertaForMultipleChoice"),Gst.forEach(t),yRo=r(b8e," (RoBERTa model)"),b8e.forEach(t),LRo=i(K),Db=n(K,"LI",{});var v8e=s(Db);Gfe=n(v8e,"STRONG",{});var Ost=s(Gfe);xRo=r(Ost,"roformer"),Ost.forEach(t),$Ro=r(v8e," \u2014 "),xG=n(v8e,"A",{href:!0});var Vst=s(xG);kRo=r(Vst,"RoFormerForMultipleChoice"),Vst.forEach(t),SRo=r(v8e," (RoFormer model)"),v8e.forEach(t),RRo=i(K),Gb=n(K,"LI",{});var F8e=s(Gb);Ofe=n(F8e,"STRONG",{});var Xst=s(Ofe);BRo=r(Xst,"squeezebert"),Xst.forEach(t),PRo=r(F8e," \u2014 "),$G=n(F8e,"A",{href:!0});var zst=s($G);IRo=r(zst,"SqueezeBertForMultipleChoice"),zst.forEach(t),qRo=r(F8e," (SqueezeBERT model)"),F8e.forEach(t),NRo=i(K),Ob=n(K,"LI",{});var T8e=s(Ob);Vfe=n(T8e,"STRONG",{});var Qst=s(Vfe);jRo=r(Qst,"xlm"),Qst.forEach(t),DRo=r(T8e," \u2014 "),kG=n(T8e,"A",{href:!0});var Wst=s(kG);GRo=r(Wst,"XLMForMultipleChoice"),Wst.forEach(t),ORo=r(T8e," (XLM model)"),T8e.forEach(t),VRo=i(K),Vb=n(K,"LI",{});var M8e=s(Vb);Xfe=n(M8e,"STRONG",{});var Hst=s(Xfe);XRo=r(Hst,"xlm-roberta"),Hst.forEach(t),zRo=r(M8e," \u2014 "),SG=n(M8e,"A",{href:!0});var Ust=s(SG);QRo=r(Ust,"XLMRobertaForMultipleChoice"),Ust.forEach(t),WRo=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),HRo=i(K),Xb=n(K,"LI",{});var E8e=s(Xb);zfe=n(E8e,"STRONG",{});var Jst=s(zfe);URo=r(Jst,"xlm-roberta-xl"),Jst.forEach(t),JRo=r(E8e," \u2014 "),RG=n(E8e,"A",{href:!0});var Yst=s(RG);YRo=r(Yst,"XLMRobertaXLForMultipleChoice"),Yst.forEach(t),KRo=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),ZRo=i(K),zb=n(K,"LI",{});var C8e=s(zb);Qfe=n(C8e,"STRONG",{});var Kst=s(Qfe);eBo=r(Kst,"xlnet"),Kst.forEach(t),oBo=r(C8e," \u2014 "),BG=n(C8e,"A",{href:!0});var Zst=s(BG);rBo=r(Zst,"XLNetForMultipleChoice"),Zst.forEach(t),tBo=r(C8e," (XLNet model)"),C8e.forEach(t),aBo=i(K),Qb=n(K,"LI",{});var w8e=s(Qb);Wfe=n(w8e,"STRONG",{});var elt=s(Wfe);nBo=r(elt,"yoso"),elt.forEach(t),sBo=r(w8e," \u2014 "),PG=n(w8e,"A",{href:!0});var olt=s(PG);lBo=r(olt,"YosoForMultipleChoice"),olt.forEach(t),iBo=r(w8e," (YOSO model)"),w8e.forEach(t),K.forEach(t),dBo=i(na),Wb=n(na,"P",{});var A8e=s(Wb);cBo=r(A8e,"The model is set in evaluation mode by default using "),Hfe=n(A8e,"CODE",{});var rlt=s(Hfe);fBo=r(rlt,"model.eval()"),rlt.forEach(t),mBo=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(A8e,"CODE",{});var tlt=s(Ufe);gBo=r(tlt,"model.train()"),tlt.forEach(t),A8e.forEach(t),hBo=i(na),T(Hb.$$.fragment,na),na.forEach(t),zs.forEach(t),uIe=i(f),Oi=n(f,"H2",{class:!0});var FNe=s(Oi);Ub=n(FNe,"A",{id:!0,class:!0,href:!0});var alt=s(Ub);Jfe=n(alt,"SPAN",{});var nlt=s(Jfe);T(ay.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),pBo=i(FNe),Yfe=n(FNe,"SPAN",{});var slt=s(Yfe);uBo=r(slt,"AutoModelForNextSentencePrediction"),slt.forEach(t),FNe.forEach(t),_Ie=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(ny.$$.fragment,Qs),_Bo=i(Qs),Vi=n(Qs,"P",{});var MK=s(Vi);bBo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IG=n(MK,"A",{href:!0});var llt=s(IG);vBo=r(llt,"from_pretrained()"),llt.forEach(t),FBo=r(MK," class method or the "),qG=n(MK,"A",{href:!0});var ilt=s(qG);TBo=r(ilt,"from_config()"),ilt.forEach(t),MBo=r(MK,` class
method.`),MK.forEach(t),EBo=i(Qs),sy=n(Qs,"P",{});var TNe=s(sy);CBo=r(TNe,"This class cannot be instantiated directly using "),Kfe=n(TNe,"CODE",{});var dlt=s(Kfe);wBo=r(dlt,"__init__()"),dlt.forEach(t),ABo=r(TNe," (throws an error)."),TNe.forEach(t),yBo=i(Qs),it=n(Qs,"DIV",{class:!0});var hw=s(it);T(ly.$$.fragment,hw),LBo=i(hw),Zfe=n(hw,"P",{});var clt=s(Zfe);xBo=r(clt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),clt.forEach(t),$Bo=i(hw),Xi=n(hw,"P",{});var EK=s(Xi);kBo=r(EK,`Note:
Loading a model from its configuration file does `),eme=n(EK,"STRONG",{});var flt=s(eme);SBo=r(flt,"not"),flt.forEach(t),RBo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(EK,"A",{href:!0});var mlt=s(NG);BBo=r(mlt,"from_pretrained()"),mlt.forEach(t),PBo=r(EK," to load the model weights."),EK.forEach(t),IBo=i(hw),T(Jb.$$.fragment,hw),hw.forEach(t),qBo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(iy.$$.fragment,sa),NBo=i(sa),ome=n(sa,"P",{});var glt=s(ome);jBo=r(glt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),glt.forEach(t),DBo=i(sa),Ra=n(sa,"P",{});var pw=s(Ra);GBo=r(pw,"The model class to instantiate is selected based on the "),rme=n(pw,"CODE",{});var hlt=s(rme);OBo=r(hlt,"model_type"),hlt.forEach(t),VBo=r(pw,` property of the config object (either
passed as an argument or loaded from `),tme=n(pw,"CODE",{});var plt=s(tme);XBo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),zBo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=n(pw,"CODE",{});var ult=s(ame);QBo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),WBo=r(pw,":"),pw.forEach(t),HBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Yb=n(Ws,"LI",{});var y8e=s(Yb);nme=n(y8e,"STRONG",{});var _lt=s(nme);UBo=r(_lt,"bert"),_lt.forEach(t),JBo=r(y8e," \u2014 "),jG=n(y8e,"A",{href:!0});var blt=s(jG);YBo=r(blt,"BertForNextSentencePrediction"),blt.forEach(t),KBo=r(y8e," (BERT model)"),y8e.forEach(t),ZBo=i(Ws),Kb=n(Ws,"LI",{});var L8e=s(Kb);sme=n(L8e,"STRONG",{});var vlt=s(sme);ePo=r(vlt,"fnet"),vlt.forEach(t),oPo=r(L8e," \u2014 "),DG=n(L8e,"A",{href:!0});var Flt=s(DG);rPo=r(Flt,"FNetForNextSentencePrediction"),Flt.forEach(t),tPo=r(L8e," (FNet model)"),L8e.forEach(t),aPo=i(Ws),Zb=n(Ws,"LI",{});var x8e=s(Zb);lme=n(x8e,"STRONG",{});var Tlt=s(lme);nPo=r(Tlt,"megatron-bert"),Tlt.forEach(t),sPo=r(x8e," \u2014 "),GG=n(x8e,"A",{href:!0});var Mlt=s(GG);lPo=r(Mlt,"MegatronBertForNextSentencePrediction"),Mlt.forEach(t),iPo=r(x8e," (MegatronBert model)"),x8e.forEach(t),dPo=i(Ws),e2=n(Ws,"LI",{});var $8e=s(e2);ime=n($8e,"STRONG",{});var Elt=s(ime);cPo=r(Elt,"mobilebert"),Elt.forEach(t),fPo=r($8e," \u2014 "),OG=n($8e,"A",{href:!0});var Clt=s(OG);mPo=r(Clt,"MobileBertForNextSentencePrediction"),Clt.forEach(t),gPo=r($8e," (MobileBERT model)"),$8e.forEach(t),hPo=i(Ws),o2=n(Ws,"LI",{});var k8e=s(o2);dme=n(k8e,"STRONG",{});var wlt=s(dme);pPo=r(wlt,"qdqbert"),wlt.forEach(t),uPo=r(k8e," \u2014 "),VG=n(k8e,"A",{href:!0});var Alt=s(VG);_Po=r(Alt,"QDQBertForNextSentencePrediction"),Alt.forEach(t),bPo=r(k8e," (QDQBert model)"),k8e.forEach(t),Ws.forEach(t),vPo=i(sa),r2=n(sa,"P",{});var S8e=s(r2);FPo=r(S8e,"The model is set in evaluation mode by default using "),cme=n(S8e,"CODE",{});var ylt=s(cme);TPo=r(ylt,"model.eval()"),ylt.forEach(t),MPo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(S8e,"CODE",{});var Llt=s(fme);EPo=r(Llt,"model.train()"),Llt.forEach(t),S8e.forEach(t),CPo=i(sa),T(t2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),bIe=i(f),zi=n(f,"H2",{class:!0});var MNe=s(zi);a2=n(MNe,"A",{id:!0,class:!0,href:!0});var xlt=s(a2);mme=n(xlt,"SPAN",{});var $lt=s(mme);T(dy.$$.fragment,$lt),$lt.forEach(t),xlt.forEach(t),wPo=i(MNe),gme=n(MNe,"SPAN",{});var klt=s(gme);APo=r(klt,"AutoModelForTokenClassification"),klt.forEach(t),MNe.forEach(t),vIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(cy.$$.fragment,Hs),yPo=i(Hs),Qi=n(Hs,"P",{});var CK=s(Qi);LPo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XG=n(CK,"A",{href:!0});var Slt=s(XG);xPo=r(Slt,"from_pretrained()"),Slt.forEach(t),$Po=r(CK," class method or the "),zG=n(CK,"A",{href:!0});var Rlt=s(zG);kPo=r(Rlt,"from_config()"),Rlt.forEach(t),SPo=r(CK,` class
method.`),CK.forEach(t),RPo=i(Hs),fy=n(Hs,"P",{});var ENe=s(fy);BPo=r(ENe,"This class cannot be instantiated directly using "),hme=n(ENe,"CODE",{});var Blt=s(hme);PPo=r(Blt,"__init__()"),Blt.forEach(t),IPo=r(ENe," (throws an error)."),ENe.forEach(t),qPo=i(Hs),dt=n(Hs,"DIV",{class:!0});var uw=s(dt);T(my.$$.fragment,uw),NPo=i(uw),pme=n(uw,"P",{});var Plt=s(pme);jPo=r(Plt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Plt.forEach(t),DPo=i(uw),Wi=n(uw,"P",{});var wK=s(Wi);GPo=r(wK,`Note:
Loading a model from its configuration file does `),ume=n(wK,"STRONG",{});var Ilt=s(ume);OPo=r(Ilt,"not"),Ilt.forEach(t),VPo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(wK,"A",{href:!0});var qlt=s(QG);XPo=r(qlt,"from_pretrained()"),qlt.forEach(t),zPo=r(wK," to load the model weights."),wK.forEach(t),QPo=i(uw),T(n2.$$.fragment,uw),uw.forEach(t),WPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(gy.$$.fragment,la),HPo=i(la),_me=n(la,"P",{});var Nlt=s(_me);UPo=r(Nlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nlt.forEach(t),JPo=i(la),Ba=n(la,"P",{});var _w=s(Ba);YPo=r(_w,"The model class to instantiate is selected based on the "),bme=n(_w,"CODE",{});var jlt=s(bme);KPo=r(jlt,"model_type"),jlt.forEach(t),ZPo=r(_w,` property of the config object (either
passed as an argument or loaded from `),vme=n(_w,"CODE",{});var Dlt=s(vme);eIo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),oIo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(_w,"CODE",{});var Glt=s(Fme);rIo=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),tIo=r(_w,":"),_w.forEach(t),aIo=i(la),U=n(la,"UL",{});var J=s(U);s2=n(J,"LI",{});var R8e=s(s2);Tme=n(R8e,"STRONG",{});var Olt=s(Tme);nIo=r(Olt,"albert"),Olt.forEach(t),sIo=r(R8e," \u2014 "),WG=n(R8e,"A",{href:!0});var Vlt=s(WG);lIo=r(Vlt,"AlbertForTokenClassification"),Vlt.forEach(t),iIo=r(R8e," (ALBERT model)"),R8e.forEach(t),dIo=i(J),l2=n(J,"LI",{});var B8e=s(l2);Mme=n(B8e,"STRONG",{});var Xlt=s(Mme);cIo=r(Xlt,"bert"),Xlt.forEach(t),fIo=r(B8e," \u2014 "),HG=n(B8e,"A",{href:!0});var zlt=s(HG);mIo=r(zlt,"BertForTokenClassification"),zlt.forEach(t),gIo=r(B8e," (BERT model)"),B8e.forEach(t),hIo=i(J),i2=n(J,"LI",{});var P8e=s(i2);Eme=n(P8e,"STRONG",{});var Qlt=s(Eme);pIo=r(Qlt,"big_bird"),Qlt.forEach(t),uIo=r(P8e," \u2014 "),UG=n(P8e,"A",{href:!0});var Wlt=s(UG);_Io=r(Wlt,"BigBirdForTokenClassification"),Wlt.forEach(t),bIo=r(P8e," (BigBird model)"),P8e.forEach(t),vIo=i(J),d2=n(J,"LI",{});var I8e=s(d2);Cme=n(I8e,"STRONG",{});var Hlt=s(Cme);FIo=r(Hlt,"camembert"),Hlt.forEach(t),TIo=r(I8e," \u2014 "),JG=n(I8e,"A",{href:!0});var Ult=s(JG);MIo=r(Ult,"CamembertForTokenClassification"),Ult.forEach(t),EIo=r(I8e," (CamemBERT model)"),I8e.forEach(t),CIo=i(J),c2=n(J,"LI",{});var q8e=s(c2);wme=n(q8e,"STRONG",{});var Jlt=s(wme);wIo=r(Jlt,"canine"),Jlt.forEach(t),AIo=r(q8e," \u2014 "),YG=n(q8e,"A",{href:!0});var Ylt=s(YG);yIo=r(Ylt,"CanineForTokenClassification"),Ylt.forEach(t),LIo=r(q8e," (Canine model)"),q8e.forEach(t),xIo=i(J),f2=n(J,"LI",{});var N8e=s(f2);Ame=n(N8e,"STRONG",{});var Klt=s(Ame);$Io=r(Klt,"convbert"),Klt.forEach(t),kIo=r(N8e," \u2014 "),KG=n(N8e,"A",{href:!0});var Zlt=s(KG);SIo=r(Zlt,"ConvBertForTokenClassification"),Zlt.forEach(t),RIo=r(N8e," (ConvBERT model)"),N8e.forEach(t),BIo=i(J),m2=n(J,"LI",{});var j8e=s(m2);yme=n(j8e,"STRONG",{});var eit=s(yme);PIo=r(eit,"data2vec-text"),eit.forEach(t),IIo=r(j8e," \u2014 "),ZG=n(j8e,"A",{href:!0});var oit=s(ZG);qIo=r(oit,"Data2VecTextForTokenClassification"),oit.forEach(t),NIo=r(j8e," (Data2VecText model)"),j8e.forEach(t),jIo=i(J),g2=n(J,"LI",{});var D8e=s(g2);Lme=n(D8e,"STRONG",{});var rit=s(Lme);DIo=r(rit,"deberta"),rit.forEach(t),GIo=r(D8e," \u2014 "),eO=n(D8e,"A",{href:!0});var tit=s(eO);OIo=r(tit,"DebertaForTokenClassification"),tit.forEach(t),VIo=r(D8e," (DeBERTa model)"),D8e.forEach(t),XIo=i(J),h2=n(J,"LI",{});var G8e=s(h2);xme=n(G8e,"STRONG",{});var ait=s(xme);zIo=r(ait,"deberta-v2"),ait.forEach(t),QIo=r(G8e," \u2014 "),oO=n(G8e,"A",{href:!0});var nit=s(oO);WIo=r(nit,"DebertaV2ForTokenClassification"),nit.forEach(t),HIo=r(G8e," (DeBERTa-v2 model)"),G8e.forEach(t),UIo=i(J),p2=n(J,"LI",{});var O8e=s(p2);$me=n(O8e,"STRONG",{});var sit=s($me);JIo=r(sit,"distilbert"),sit.forEach(t),YIo=r(O8e," \u2014 "),rO=n(O8e,"A",{href:!0});var lit=s(rO);KIo=r(lit,"DistilBertForTokenClassification"),lit.forEach(t),ZIo=r(O8e," (DistilBERT model)"),O8e.forEach(t),eqo=i(J),u2=n(J,"LI",{});var V8e=s(u2);kme=n(V8e,"STRONG",{});var iit=s(kme);oqo=r(iit,"electra"),iit.forEach(t),rqo=r(V8e," \u2014 "),tO=n(V8e,"A",{href:!0});var dit=s(tO);tqo=r(dit,"ElectraForTokenClassification"),dit.forEach(t),aqo=r(V8e," (ELECTRA model)"),V8e.forEach(t),nqo=i(J),_2=n(J,"LI",{});var X8e=s(_2);Sme=n(X8e,"STRONG",{});var cit=s(Sme);sqo=r(cit,"flaubert"),cit.forEach(t),lqo=r(X8e," \u2014 "),aO=n(X8e,"A",{href:!0});var fit=s(aO);iqo=r(fit,"FlaubertForTokenClassification"),fit.forEach(t),dqo=r(X8e," (FlauBERT model)"),X8e.forEach(t),cqo=i(J),b2=n(J,"LI",{});var z8e=s(b2);Rme=n(z8e,"STRONG",{});var mit=s(Rme);fqo=r(mit,"fnet"),mit.forEach(t),mqo=r(z8e," \u2014 "),nO=n(z8e,"A",{href:!0});var git=s(nO);gqo=r(git,"FNetForTokenClassification"),git.forEach(t),hqo=r(z8e," (FNet model)"),z8e.forEach(t),pqo=i(J),v2=n(J,"LI",{});var Q8e=s(v2);Bme=n(Q8e,"STRONG",{});var hit=s(Bme);uqo=r(hit,"funnel"),hit.forEach(t),_qo=r(Q8e," \u2014 "),sO=n(Q8e,"A",{href:!0});var pit=s(sO);bqo=r(pit,"FunnelForTokenClassification"),pit.forEach(t),vqo=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),Fqo=i(J),F2=n(J,"LI",{});var W8e=s(F2);Pme=n(W8e,"STRONG",{});var uit=s(Pme);Tqo=r(uit,"gpt2"),uit.forEach(t),Mqo=r(W8e," \u2014 "),lO=n(W8e,"A",{href:!0});var _it=s(lO);Eqo=r(_it,"GPT2ForTokenClassification"),_it.forEach(t),Cqo=r(W8e," (OpenAI GPT-2 model)"),W8e.forEach(t),wqo=i(J),T2=n(J,"LI",{});var H8e=s(T2);Ime=n(H8e,"STRONG",{});var bit=s(Ime);Aqo=r(bit,"ibert"),bit.forEach(t),yqo=r(H8e," \u2014 "),iO=n(H8e,"A",{href:!0});var vit=s(iO);Lqo=r(vit,"IBertForTokenClassification"),vit.forEach(t),xqo=r(H8e," (I-BERT model)"),H8e.forEach(t),$qo=i(J),M2=n(J,"LI",{});var U8e=s(M2);qme=n(U8e,"STRONG",{});var Fit=s(qme);kqo=r(Fit,"layoutlm"),Fit.forEach(t),Sqo=r(U8e," \u2014 "),dO=n(U8e,"A",{href:!0});var Tit=s(dO);Rqo=r(Tit,"LayoutLMForTokenClassification"),Tit.forEach(t),Bqo=r(U8e," (LayoutLM model)"),U8e.forEach(t),Pqo=i(J),E2=n(J,"LI",{});var J8e=s(E2);Nme=n(J8e,"STRONG",{});var Mit=s(Nme);Iqo=r(Mit,"layoutlmv2"),Mit.forEach(t),qqo=r(J8e," \u2014 "),cO=n(J8e,"A",{href:!0});var Eit=s(cO);Nqo=r(Eit,"LayoutLMv2ForTokenClassification"),Eit.forEach(t),jqo=r(J8e," (LayoutLMv2 model)"),J8e.forEach(t),Dqo=i(J),C2=n(J,"LI",{});var Y8e=s(C2);jme=n(Y8e,"STRONG",{});var Cit=s(jme);Gqo=r(Cit,"longformer"),Cit.forEach(t),Oqo=r(Y8e," \u2014 "),fO=n(Y8e,"A",{href:!0});var wit=s(fO);Vqo=r(wit,"LongformerForTokenClassification"),wit.forEach(t),Xqo=r(Y8e," (Longformer model)"),Y8e.forEach(t),zqo=i(J),w2=n(J,"LI",{});var K8e=s(w2);Dme=n(K8e,"STRONG",{});var Ait=s(Dme);Qqo=r(Ait,"megatron-bert"),Ait.forEach(t),Wqo=r(K8e," \u2014 "),mO=n(K8e,"A",{href:!0});var yit=s(mO);Hqo=r(yit,"MegatronBertForTokenClassification"),yit.forEach(t),Uqo=r(K8e," (MegatronBert model)"),K8e.forEach(t),Jqo=i(J),A2=n(J,"LI",{});var Z8e=s(A2);Gme=n(Z8e,"STRONG",{});var Lit=s(Gme);Yqo=r(Lit,"mobilebert"),Lit.forEach(t),Kqo=r(Z8e," \u2014 "),gO=n(Z8e,"A",{href:!0});var xit=s(gO);Zqo=r(xit,"MobileBertForTokenClassification"),xit.forEach(t),eNo=r(Z8e," (MobileBERT model)"),Z8e.forEach(t),oNo=i(J),y2=n(J,"LI",{});var exe=s(y2);Ome=n(exe,"STRONG",{});var $it=s(Ome);rNo=r($it,"mpnet"),$it.forEach(t),tNo=r(exe," \u2014 "),hO=n(exe,"A",{href:!0});var kit=s(hO);aNo=r(kit,"MPNetForTokenClassification"),kit.forEach(t),nNo=r(exe," (MPNet model)"),exe.forEach(t),sNo=i(J),L2=n(J,"LI",{});var oxe=s(L2);Vme=n(oxe,"STRONG",{});var Sit=s(Vme);lNo=r(Sit,"nystromformer"),Sit.forEach(t),iNo=r(oxe," \u2014 "),pO=n(oxe,"A",{href:!0});var Rit=s(pO);dNo=r(Rit,"NystromformerForTokenClassification"),Rit.forEach(t),cNo=r(oxe," (Nystromformer model)"),oxe.forEach(t),fNo=i(J),x2=n(J,"LI",{});var rxe=s(x2);Xme=n(rxe,"STRONG",{});var Bit=s(Xme);mNo=r(Bit,"qdqbert"),Bit.forEach(t),gNo=r(rxe," \u2014 "),uO=n(rxe,"A",{href:!0});var Pit=s(uO);hNo=r(Pit,"QDQBertForTokenClassification"),Pit.forEach(t),pNo=r(rxe," (QDQBert model)"),rxe.forEach(t),uNo=i(J),$2=n(J,"LI",{});var txe=s($2);zme=n(txe,"STRONG",{});var Iit=s(zme);_No=r(Iit,"rembert"),Iit.forEach(t),bNo=r(txe," \u2014 "),_O=n(txe,"A",{href:!0});var qit=s(_O);vNo=r(qit,"RemBertForTokenClassification"),qit.forEach(t),FNo=r(txe," (RemBERT model)"),txe.forEach(t),TNo=i(J),k2=n(J,"LI",{});var axe=s(k2);Qme=n(axe,"STRONG",{});var Nit=s(Qme);MNo=r(Nit,"roberta"),Nit.forEach(t),ENo=r(axe," \u2014 "),bO=n(axe,"A",{href:!0});var jit=s(bO);CNo=r(jit,"RobertaForTokenClassification"),jit.forEach(t),wNo=r(axe," (RoBERTa model)"),axe.forEach(t),ANo=i(J),S2=n(J,"LI",{});var nxe=s(S2);Wme=n(nxe,"STRONG",{});var Dit=s(Wme);yNo=r(Dit,"roformer"),Dit.forEach(t),LNo=r(nxe," \u2014 "),vO=n(nxe,"A",{href:!0});var Git=s(vO);xNo=r(Git,"RoFormerForTokenClassification"),Git.forEach(t),$No=r(nxe," (RoFormer model)"),nxe.forEach(t),kNo=i(J),R2=n(J,"LI",{});var sxe=s(R2);Hme=n(sxe,"STRONG",{});var Oit=s(Hme);SNo=r(Oit,"squeezebert"),Oit.forEach(t),RNo=r(sxe," \u2014 "),FO=n(sxe,"A",{href:!0});var Vit=s(FO);BNo=r(Vit,"SqueezeBertForTokenClassification"),Vit.forEach(t),PNo=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),INo=i(J),B2=n(J,"LI",{});var lxe=s(B2);Ume=n(lxe,"STRONG",{});var Xit=s(Ume);qNo=r(Xit,"xlm"),Xit.forEach(t),NNo=r(lxe," \u2014 "),TO=n(lxe,"A",{href:!0});var zit=s(TO);jNo=r(zit,"XLMForTokenClassification"),zit.forEach(t),DNo=r(lxe," (XLM model)"),lxe.forEach(t),GNo=i(J),P2=n(J,"LI",{});var ixe=s(P2);Jme=n(ixe,"STRONG",{});var Qit=s(Jme);ONo=r(Qit,"xlm-roberta"),Qit.forEach(t),VNo=r(ixe," \u2014 "),MO=n(ixe,"A",{href:!0});var Wit=s(MO);XNo=r(Wit,"XLMRobertaForTokenClassification"),Wit.forEach(t),zNo=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),QNo=i(J),I2=n(J,"LI",{});var dxe=s(I2);Yme=n(dxe,"STRONG",{});var Hit=s(Yme);WNo=r(Hit,"xlm-roberta-xl"),Hit.forEach(t),HNo=r(dxe," \u2014 "),EO=n(dxe,"A",{href:!0});var Uit=s(EO);UNo=r(Uit,"XLMRobertaXLForTokenClassification"),Uit.forEach(t),JNo=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),YNo=i(J),q2=n(J,"LI",{});var cxe=s(q2);Kme=n(cxe,"STRONG",{});var Jit=s(Kme);KNo=r(Jit,"xlnet"),Jit.forEach(t),ZNo=r(cxe," \u2014 "),CO=n(cxe,"A",{href:!0});var Yit=s(CO);ejo=r(Yit,"XLNetForTokenClassification"),Yit.forEach(t),ojo=r(cxe," (XLNet model)"),cxe.forEach(t),rjo=i(J),N2=n(J,"LI",{});var fxe=s(N2);Zme=n(fxe,"STRONG",{});var Kit=s(Zme);tjo=r(Kit,"yoso"),Kit.forEach(t),ajo=r(fxe," \u2014 "),wO=n(fxe,"A",{href:!0});var Zit=s(wO);njo=r(Zit,"YosoForTokenClassification"),Zit.forEach(t),sjo=r(fxe," (YOSO model)"),fxe.forEach(t),J.forEach(t),ljo=i(la),j2=n(la,"P",{});var mxe=s(j2);ijo=r(mxe,"The model is set in evaluation mode by default using "),ege=n(mxe,"CODE",{});var edt=s(ege);djo=r(edt,"model.eval()"),edt.forEach(t),cjo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(mxe,"CODE",{});var odt=s(oge);fjo=r(odt,"model.train()"),odt.forEach(t),mxe.forEach(t),mjo=i(la),T(D2.$$.fragment,la),la.forEach(t),Hs.forEach(t),FIe=i(f),Hi=n(f,"H2",{class:!0});var CNe=s(Hi);G2=n(CNe,"A",{id:!0,class:!0,href:!0});var rdt=s(G2);rge=n(rdt,"SPAN",{});var tdt=s(rge);T(hy.$$.fragment,tdt),tdt.forEach(t),rdt.forEach(t),gjo=i(CNe),tge=n(CNe,"SPAN",{});var adt=s(tge);hjo=r(adt,"AutoModelForQuestionAnswering"),adt.forEach(t),CNe.forEach(t),TIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(py.$$.fragment,Us),pjo=i(Us),Ui=n(Us,"P",{});var AK=s(Ui);ujo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AO=n(AK,"A",{href:!0});var ndt=s(AO);_jo=r(ndt,"from_pretrained()"),ndt.forEach(t),bjo=r(AK," class method or the "),yO=n(AK,"A",{href:!0});var sdt=s(yO);vjo=r(sdt,"from_config()"),sdt.forEach(t),Fjo=r(AK,` class
method.`),AK.forEach(t),Tjo=i(Us),uy=n(Us,"P",{});var wNe=s(uy);Mjo=r(wNe,"This class cannot be instantiated directly using "),age=n(wNe,"CODE",{});var ldt=s(age);Ejo=r(ldt,"__init__()"),ldt.forEach(t),Cjo=r(wNe," (throws an error)."),wNe.forEach(t),wjo=i(Us),ct=n(Us,"DIV",{class:!0});var bw=s(ct);T(_y.$$.fragment,bw),Ajo=i(bw),nge=n(bw,"P",{});var idt=s(nge);yjo=r(idt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),idt.forEach(t),Ljo=i(bw),Ji=n(bw,"P",{});var yK=s(Ji);xjo=r(yK,`Note:
Loading a model from its configuration file does `),sge=n(yK,"STRONG",{});var ddt=s(sge);$jo=r(ddt,"not"),ddt.forEach(t),kjo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(yK,"A",{href:!0});var cdt=s(LO);Sjo=r(cdt,"from_pretrained()"),cdt.forEach(t),Rjo=r(yK," to load the model weights."),yK.forEach(t),Bjo=i(bw),T(O2.$$.fragment,bw),bw.forEach(t),Pjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(by.$$.fragment,ia),Ijo=i(ia),lge=n(ia,"P",{});var fdt=s(lge);qjo=r(fdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fdt.forEach(t),Njo=i(ia),Pa=n(ia,"P",{});var vw=s(Pa);jjo=r(vw,"The model class to instantiate is selected based on the "),ige=n(vw,"CODE",{});var mdt=s(ige);Djo=r(mdt,"model_type"),mdt.forEach(t),Gjo=r(vw,` property of the config object (either
passed as an argument or loaded from `),dge=n(vw,"CODE",{});var gdt=s(dge);Ojo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),Vjo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(vw,"CODE",{});var hdt=s(cge);Xjo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),zjo=r(vw,":"),vw.forEach(t),Qjo=i(ia),O=n(ia,"UL",{});var X=s(O);V2=n(X,"LI",{});var gxe=s(V2);fge=n(gxe,"STRONG",{});var pdt=s(fge);Wjo=r(pdt,"albert"),pdt.forEach(t),Hjo=r(gxe," \u2014 "),xO=n(gxe,"A",{href:!0});var udt=s(xO);Ujo=r(udt,"AlbertForQuestionAnswering"),udt.forEach(t),Jjo=r(gxe," (ALBERT model)"),gxe.forEach(t),Yjo=i(X),X2=n(X,"LI",{});var hxe=s(X2);mge=n(hxe,"STRONG",{});var _dt=s(mge);Kjo=r(_dt,"bart"),_dt.forEach(t),Zjo=r(hxe," \u2014 "),$O=n(hxe,"A",{href:!0});var bdt=s($O);eDo=r(bdt,"BartForQuestionAnswering"),bdt.forEach(t),oDo=r(hxe," (BART model)"),hxe.forEach(t),rDo=i(X),z2=n(X,"LI",{});var pxe=s(z2);gge=n(pxe,"STRONG",{});var vdt=s(gge);tDo=r(vdt,"bert"),vdt.forEach(t),aDo=r(pxe," \u2014 "),kO=n(pxe,"A",{href:!0});var Fdt=s(kO);nDo=r(Fdt,"BertForQuestionAnswering"),Fdt.forEach(t),sDo=r(pxe," (BERT model)"),pxe.forEach(t),lDo=i(X),Q2=n(X,"LI",{});var uxe=s(Q2);hge=n(uxe,"STRONG",{});var Tdt=s(hge);iDo=r(Tdt,"big_bird"),Tdt.forEach(t),dDo=r(uxe," \u2014 "),SO=n(uxe,"A",{href:!0});var Mdt=s(SO);cDo=r(Mdt,"BigBirdForQuestionAnswering"),Mdt.forEach(t),fDo=r(uxe," (BigBird model)"),uxe.forEach(t),mDo=i(X),W2=n(X,"LI",{});var _xe=s(W2);pge=n(_xe,"STRONG",{});var Edt=s(pge);gDo=r(Edt,"bigbird_pegasus"),Edt.forEach(t),hDo=r(_xe," \u2014 "),RO=n(_xe,"A",{href:!0});var Cdt=s(RO);pDo=r(Cdt,"BigBirdPegasusForQuestionAnswering"),Cdt.forEach(t),uDo=r(_xe," (BigBirdPegasus model)"),_xe.forEach(t),_Do=i(X),H2=n(X,"LI",{});var bxe=s(H2);uge=n(bxe,"STRONG",{});var wdt=s(uge);bDo=r(wdt,"camembert"),wdt.forEach(t),vDo=r(bxe," \u2014 "),BO=n(bxe,"A",{href:!0});var Adt=s(BO);FDo=r(Adt,"CamembertForQuestionAnswering"),Adt.forEach(t),TDo=r(bxe," (CamemBERT model)"),bxe.forEach(t),MDo=i(X),U2=n(X,"LI",{});var vxe=s(U2);_ge=n(vxe,"STRONG",{});var ydt=s(_ge);EDo=r(ydt,"canine"),ydt.forEach(t),CDo=r(vxe," \u2014 "),PO=n(vxe,"A",{href:!0});var Ldt=s(PO);wDo=r(Ldt,"CanineForQuestionAnswering"),Ldt.forEach(t),ADo=r(vxe," (Canine model)"),vxe.forEach(t),yDo=i(X),J2=n(X,"LI",{});var Fxe=s(J2);bge=n(Fxe,"STRONG",{});var xdt=s(bge);LDo=r(xdt,"convbert"),xdt.forEach(t),xDo=r(Fxe," \u2014 "),IO=n(Fxe,"A",{href:!0});var $dt=s(IO);$Do=r($dt,"ConvBertForQuestionAnswering"),$dt.forEach(t),kDo=r(Fxe," (ConvBERT model)"),Fxe.forEach(t),SDo=i(X),Y2=n(X,"LI",{});var Txe=s(Y2);vge=n(Txe,"STRONG",{});var kdt=s(vge);RDo=r(kdt,"data2vec-text"),kdt.forEach(t),BDo=r(Txe," \u2014 "),qO=n(Txe,"A",{href:!0});var Sdt=s(qO);PDo=r(Sdt,"Data2VecTextForQuestionAnswering"),Sdt.forEach(t),IDo=r(Txe," (Data2VecText model)"),Txe.forEach(t),qDo=i(X),K2=n(X,"LI",{});var Mxe=s(K2);Fge=n(Mxe,"STRONG",{});var Rdt=s(Fge);NDo=r(Rdt,"deberta"),Rdt.forEach(t),jDo=r(Mxe," \u2014 "),NO=n(Mxe,"A",{href:!0});var Bdt=s(NO);DDo=r(Bdt,"DebertaForQuestionAnswering"),Bdt.forEach(t),GDo=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),ODo=i(X),Z2=n(X,"LI",{});var Exe=s(Z2);Tge=n(Exe,"STRONG",{});var Pdt=s(Tge);VDo=r(Pdt,"deberta-v2"),Pdt.forEach(t),XDo=r(Exe," \u2014 "),jO=n(Exe,"A",{href:!0});var Idt=s(jO);zDo=r(Idt,"DebertaV2ForQuestionAnswering"),Idt.forEach(t),QDo=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),WDo=i(X),e5=n(X,"LI",{});var Cxe=s(e5);Mge=n(Cxe,"STRONG",{});var qdt=s(Mge);HDo=r(qdt,"distilbert"),qdt.forEach(t),UDo=r(Cxe," \u2014 "),DO=n(Cxe,"A",{href:!0});var Ndt=s(DO);JDo=r(Ndt,"DistilBertForQuestionAnswering"),Ndt.forEach(t),YDo=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),KDo=i(X),o5=n(X,"LI",{});var wxe=s(o5);Ege=n(wxe,"STRONG",{});var jdt=s(Ege);ZDo=r(jdt,"electra"),jdt.forEach(t),eGo=r(wxe," \u2014 "),GO=n(wxe,"A",{href:!0});var Ddt=s(GO);oGo=r(Ddt,"ElectraForQuestionAnswering"),Ddt.forEach(t),rGo=r(wxe," (ELECTRA model)"),wxe.forEach(t),tGo=i(X),r5=n(X,"LI",{});var Axe=s(r5);Cge=n(Axe,"STRONG",{});var Gdt=s(Cge);aGo=r(Gdt,"flaubert"),Gdt.forEach(t),nGo=r(Axe," \u2014 "),OO=n(Axe,"A",{href:!0});var Odt=s(OO);sGo=r(Odt,"FlaubertForQuestionAnsweringSimple"),Odt.forEach(t),lGo=r(Axe," (FlauBERT model)"),Axe.forEach(t),iGo=i(X),t5=n(X,"LI",{});var yxe=s(t5);wge=n(yxe,"STRONG",{});var Vdt=s(wge);dGo=r(Vdt,"fnet"),Vdt.forEach(t),cGo=r(yxe," \u2014 "),VO=n(yxe,"A",{href:!0});var Xdt=s(VO);fGo=r(Xdt,"FNetForQuestionAnswering"),Xdt.forEach(t),mGo=r(yxe," (FNet model)"),yxe.forEach(t),gGo=i(X),a5=n(X,"LI",{});var Lxe=s(a5);Age=n(Lxe,"STRONG",{});var zdt=s(Age);hGo=r(zdt,"funnel"),zdt.forEach(t),pGo=r(Lxe," \u2014 "),XO=n(Lxe,"A",{href:!0});var Qdt=s(XO);uGo=r(Qdt,"FunnelForQuestionAnswering"),Qdt.forEach(t),_Go=r(Lxe," (Funnel Transformer model)"),Lxe.forEach(t),bGo=i(X),n5=n(X,"LI",{});var xxe=s(n5);yge=n(xxe,"STRONG",{});var Wdt=s(yge);vGo=r(Wdt,"gptj"),Wdt.forEach(t),FGo=r(xxe," \u2014 "),zO=n(xxe,"A",{href:!0});var Hdt=s(zO);TGo=r(Hdt,"GPTJForQuestionAnswering"),Hdt.forEach(t),MGo=r(xxe," (GPT-J model)"),xxe.forEach(t),EGo=i(X),s5=n(X,"LI",{});var $xe=s(s5);Lge=n($xe,"STRONG",{});var Udt=s(Lge);CGo=r(Udt,"ibert"),Udt.forEach(t),wGo=r($xe," \u2014 "),QO=n($xe,"A",{href:!0});var Jdt=s(QO);AGo=r(Jdt,"IBertForQuestionAnswering"),Jdt.forEach(t),yGo=r($xe," (I-BERT model)"),$xe.forEach(t),LGo=i(X),l5=n(X,"LI",{});var kxe=s(l5);xge=n(kxe,"STRONG",{});var Ydt=s(xge);xGo=r(Ydt,"layoutlmv2"),Ydt.forEach(t),$Go=r(kxe," \u2014 "),WO=n(kxe,"A",{href:!0});var Kdt=s(WO);kGo=r(Kdt,"LayoutLMv2ForQuestionAnswering"),Kdt.forEach(t),SGo=r(kxe," (LayoutLMv2 model)"),kxe.forEach(t),RGo=i(X),i5=n(X,"LI",{});var Sxe=s(i5);$ge=n(Sxe,"STRONG",{});var Zdt=s($ge);BGo=r(Zdt,"led"),Zdt.forEach(t),PGo=r(Sxe," \u2014 "),HO=n(Sxe,"A",{href:!0});var ect=s(HO);IGo=r(ect,"LEDForQuestionAnswering"),ect.forEach(t),qGo=r(Sxe," (LED model)"),Sxe.forEach(t),NGo=i(X),d5=n(X,"LI",{});var Rxe=s(d5);kge=n(Rxe,"STRONG",{});var oct=s(kge);jGo=r(oct,"longformer"),oct.forEach(t),DGo=r(Rxe," \u2014 "),UO=n(Rxe,"A",{href:!0});var rct=s(UO);GGo=r(rct,"LongformerForQuestionAnswering"),rct.forEach(t),OGo=r(Rxe," (Longformer model)"),Rxe.forEach(t),VGo=i(X),c5=n(X,"LI",{});var Bxe=s(c5);Sge=n(Bxe,"STRONG",{});var tct=s(Sge);XGo=r(tct,"lxmert"),tct.forEach(t),zGo=r(Bxe," \u2014 "),JO=n(Bxe,"A",{href:!0});var act=s(JO);QGo=r(act,"LxmertForQuestionAnswering"),act.forEach(t),WGo=r(Bxe," (LXMERT model)"),Bxe.forEach(t),HGo=i(X),f5=n(X,"LI",{});var Pxe=s(f5);Rge=n(Pxe,"STRONG",{});var nct=s(Rge);UGo=r(nct,"mbart"),nct.forEach(t),JGo=r(Pxe," \u2014 "),YO=n(Pxe,"A",{href:!0});var sct=s(YO);YGo=r(sct,"MBartForQuestionAnswering"),sct.forEach(t),KGo=r(Pxe," (mBART model)"),Pxe.forEach(t),ZGo=i(X),m5=n(X,"LI",{});var Ixe=s(m5);Bge=n(Ixe,"STRONG",{});var lct=s(Bge);eOo=r(lct,"megatron-bert"),lct.forEach(t),oOo=r(Ixe," \u2014 "),KO=n(Ixe,"A",{href:!0});var ict=s(KO);rOo=r(ict,"MegatronBertForQuestionAnswering"),ict.forEach(t),tOo=r(Ixe," (MegatronBert model)"),Ixe.forEach(t),aOo=i(X),g5=n(X,"LI",{});var qxe=s(g5);Pge=n(qxe,"STRONG",{});var dct=s(Pge);nOo=r(dct,"mobilebert"),dct.forEach(t),sOo=r(qxe," \u2014 "),ZO=n(qxe,"A",{href:!0});var cct=s(ZO);lOo=r(cct,"MobileBertForQuestionAnswering"),cct.forEach(t),iOo=r(qxe," (MobileBERT model)"),qxe.forEach(t),dOo=i(X),h5=n(X,"LI",{});var Nxe=s(h5);Ige=n(Nxe,"STRONG",{});var fct=s(Ige);cOo=r(fct,"mpnet"),fct.forEach(t),fOo=r(Nxe," \u2014 "),eV=n(Nxe,"A",{href:!0});var mct=s(eV);mOo=r(mct,"MPNetForQuestionAnswering"),mct.forEach(t),gOo=r(Nxe," (MPNet model)"),Nxe.forEach(t),hOo=i(X),p5=n(X,"LI",{});var jxe=s(p5);qge=n(jxe,"STRONG",{});var gct=s(qge);pOo=r(gct,"nystromformer"),gct.forEach(t),uOo=r(jxe," \u2014 "),oV=n(jxe,"A",{href:!0});var hct=s(oV);_Oo=r(hct,"NystromformerForQuestionAnswering"),hct.forEach(t),bOo=r(jxe," (Nystromformer model)"),jxe.forEach(t),vOo=i(X),u5=n(X,"LI",{});var Dxe=s(u5);Nge=n(Dxe,"STRONG",{});var pct=s(Nge);FOo=r(pct,"qdqbert"),pct.forEach(t),TOo=r(Dxe," \u2014 "),rV=n(Dxe,"A",{href:!0});var uct=s(rV);MOo=r(uct,"QDQBertForQuestionAnswering"),uct.forEach(t),EOo=r(Dxe," (QDQBert model)"),Dxe.forEach(t),COo=i(X),_5=n(X,"LI",{});var Gxe=s(_5);jge=n(Gxe,"STRONG",{});var _ct=s(jge);wOo=r(_ct,"reformer"),_ct.forEach(t),AOo=r(Gxe," \u2014 "),tV=n(Gxe,"A",{href:!0});var bct=s(tV);yOo=r(bct,"ReformerForQuestionAnswering"),bct.forEach(t),LOo=r(Gxe," (Reformer model)"),Gxe.forEach(t),xOo=i(X),b5=n(X,"LI",{});var Oxe=s(b5);Dge=n(Oxe,"STRONG",{});var vct=s(Dge);$Oo=r(vct,"rembert"),vct.forEach(t),kOo=r(Oxe," \u2014 "),aV=n(Oxe,"A",{href:!0});var Fct=s(aV);SOo=r(Fct,"RemBertForQuestionAnswering"),Fct.forEach(t),ROo=r(Oxe," (RemBERT model)"),Oxe.forEach(t),BOo=i(X),v5=n(X,"LI",{});var Vxe=s(v5);Gge=n(Vxe,"STRONG",{});var Tct=s(Gge);POo=r(Tct,"roberta"),Tct.forEach(t),IOo=r(Vxe," \u2014 "),nV=n(Vxe,"A",{href:!0});var Mct=s(nV);qOo=r(Mct,"RobertaForQuestionAnswering"),Mct.forEach(t),NOo=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),jOo=i(X),F5=n(X,"LI",{});var Xxe=s(F5);Oge=n(Xxe,"STRONG",{});var Ect=s(Oge);DOo=r(Ect,"roformer"),Ect.forEach(t),GOo=r(Xxe," \u2014 "),sV=n(Xxe,"A",{href:!0});var Cct=s(sV);OOo=r(Cct,"RoFormerForQuestionAnswering"),Cct.forEach(t),VOo=r(Xxe," (RoFormer model)"),Xxe.forEach(t),XOo=i(X),T5=n(X,"LI",{});var zxe=s(T5);Vge=n(zxe,"STRONG",{});var wct=s(Vge);zOo=r(wct,"splinter"),wct.forEach(t),QOo=r(zxe," \u2014 "),lV=n(zxe,"A",{href:!0});var Act=s(lV);WOo=r(Act,"SplinterForQuestionAnswering"),Act.forEach(t),HOo=r(zxe," (Splinter model)"),zxe.forEach(t),UOo=i(X),M5=n(X,"LI",{});var Qxe=s(M5);Xge=n(Qxe,"STRONG",{});var yct=s(Xge);JOo=r(yct,"squeezebert"),yct.forEach(t),YOo=r(Qxe," \u2014 "),iV=n(Qxe,"A",{href:!0});var Lct=s(iV);KOo=r(Lct,"SqueezeBertForQuestionAnswering"),Lct.forEach(t),ZOo=r(Qxe," (SqueezeBERT model)"),Qxe.forEach(t),eVo=i(X),E5=n(X,"LI",{});var Wxe=s(E5);zge=n(Wxe,"STRONG",{});var xct=s(zge);oVo=r(xct,"xlm"),xct.forEach(t),rVo=r(Wxe," \u2014 "),dV=n(Wxe,"A",{href:!0});var $ct=s(dV);tVo=r($ct,"XLMForQuestionAnsweringSimple"),$ct.forEach(t),aVo=r(Wxe," (XLM model)"),Wxe.forEach(t),nVo=i(X),C5=n(X,"LI",{});var Hxe=s(C5);Qge=n(Hxe,"STRONG",{});var kct=s(Qge);sVo=r(kct,"xlm-roberta"),kct.forEach(t),lVo=r(Hxe," \u2014 "),cV=n(Hxe,"A",{href:!0});var Sct=s(cV);iVo=r(Sct,"XLMRobertaForQuestionAnswering"),Sct.forEach(t),dVo=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),cVo=i(X),w5=n(X,"LI",{});var Uxe=s(w5);Wge=n(Uxe,"STRONG",{});var Rct=s(Wge);fVo=r(Rct,"xlm-roberta-xl"),Rct.forEach(t),mVo=r(Uxe," \u2014 "),fV=n(Uxe,"A",{href:!0});var Bct=s(fV);gVo=r(Bct,"XLMRobertaXLForQuestionAnswering"),Bct.forEach(t),hVo=r(Uxe," (XLM-RoBERTa-XL model)"),Uxe.forEach(t),pVo=i(X),A5=n(X,"LI",{});var Jxe=s(A5);Hge=n(Jxe,"STRONG",{});var Pct=s(Hge);uVo=r(Pct,"xlnet"),Pct.forEach(t),_Vo=r(Jxe," \u2014 "),mV=n(Jxe,"A",{href:!0});var Ict=s(mV);bVo=r(Ict,"XLNetForQuestionAnsweringSimple"),Ict.forEach(t),vVo=r(Jxe," (XLNet model)"),Jxe.forEach(t),FVo=i(X),y5=n(X,"LI",{});var Yxe=s(y5);Uge=n(Yxe,"STRONG",{});var qct=s(Uge);TVo=r(qct,"yoso"),qct.forEach(t),MVo=r(Yxe," \u2014 "),gV=n(Yxe,"A",{href:!0});var Nct=s(gV);EVo=r(Nct,"YosoForQuestionAnswering"),Nct.forEach(t),CVo=r(Yxe," (YOSO model)"),Yxe.forEach(t),X.forEach(t),wVo=i(ia),L5=n(ia,"P",{});var Kxe=s(L5);AVo=r(Kxe,"The model is set in evaluation mode by default using "),Jge=n(Kxe,"CODE",{});var jct=s(Jge);yVo=r(jct,"model.eval()"),jct.forEach(t),LVo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(Kxe,"CODE",{});var Dct=s(Yge);xVo=r(Dct,"model.train()"),Dct.forEach(t),Kxe.forEach(t),$Vo=i(ia),T(x5.$$.fragment,ia),ia.forEach(t),Us.forEach(t),MIe=i(f),Yi=n(f,"H2",{class:!0});var ANe=s(Yi);$5=n(ANe,"A",{id:!0,class:!0,href:!0});var Gct=s($5);Kge=n(Gct,"SPAN",{});var Oct=s(Kge);T(vy.$$.fragment,Oct),Oct.forEach(t),Gct.forEach(t),kVo=i(ANe),Zge=n(ANe,"SPAN",{});var Vct=s(Zge);SVo=r(Vct,"AutoModelForTableQuestionAnswering"),Vct.forEach(t),ANe.forEach(t),EIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(Fy.$$.fragment,Js),RVo=i(Js),Ki=n(Js,"P",{});var LK=s(Ki);BVo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hV=n(LK,"A",{href:!0});var Xct=s(hV);PVo=r(Xct,"from_pretrained()"),Xct.forEach(t),IVo=r(LK," class method or the "),pV=n(LK,"A",{href:!0});var zct=s(pV);qVo=r(zct,"from_config()"),zct.forEach(t),NVo=r(LK,` class
method.`),LK.forEach(t),jVo=i(Js),Ty=n(Js,"P",{});var yNe=s(Ty);DVo=r(yNe,"This class cannot be instantiated directly using "),ehe=n(yNe,"CODE",{});var Qct=s(ehe);GVo=r(Qct,"__init__()"),Qct.forEach(t),OVo=r(yNe," (throws an error)."),yNe.forEach(t),VVo=i(Js),ft=n(Js,"DIV",{class:!0});var Fw=s(ft);T(My.$$.fragment,Fw),XVo=i(Fw),ohe=n(Fw,"P",{});var Wct=s(ohe);zVo=r(Wct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Wct.forEach(t),QVo=i(Fw),Zi=n(Fw,"P",{});var xK=s(Zi);WVo=r(xK,`Note:
Loading a model from its configuration file does `),rhe=n(xK,"STRONG",{});var Hct=s(rhe);HVo=r(Hct,"not"),Hct.forEach(t),UVo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(xK,"A",{href:!0});var Uct=s(uV);JVo=r(Uct,"from_pretrained()"),Uct.forEach(t),YVo=r(xK," to load the model weights."),xK.forEach(t),KVo=i(Fw),T(k5.$$.fragment,Fw),Fw.forEach(t),ZVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ey.$$.fragment,da),eXo=i(da),the=n(da,"P",{});var Jct=s(the);oXo=r(Jct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jct.forEach(t),rXo=i(da),Ia=n(da,"P",{});var Tw=s(Ia);tXo=r(Tw,"The model class to instantiate is selected based on the "),ahe=n(Tw,"CODE",{});var Yct=s(ahe);aXo=r(Yct,"model_type"),Yct.forEach(t),nXo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),nhe=n(Tw,"CODE",{});var Kct=s(nhe);sXo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),lXo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(Tw,"CODE",{});var Zct=s(she);iXo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),dXo=r(Tw,":"),Tw.forEach(t),cXo=i(da),lhe=n(da,"UL",{});var eft=s(lhe);S5=n(eft,"LI",{});var Zxe=s(S5);ihe=n(Zxe,"STRONG",{});var oft=s(ihe);fXo=r(oft,"tapas"),oft.forEach(t),mXo=r(Zxe," \u2014 "),_V=n(Zxe,"A",{href:!0});var rft=s(_V);gXo=r(rft,"TapasForQuestionAnswering"),rft.forEach(t),hXo=r(Zxe," (TAPAS model)"),Zxe.forEach(t),eft.forEach(t),pXo=i(da),R5=n(da,"P",{});var e9e=s(R5);uXo=r(e9e,"The model is set in evaluation mode by default using "),dhe=n(e9e,"CODE",{});var tft=s(dhe);_Xo=r(tft,"model.eval()"),tft.forEach(t),bXo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(e9e,"CODE",{});var aft=s(che);vXo=r(aft,"model.train()"),aft.forEach(t),e9e.forEach(t),FXo=i(da),T(B5.$$.fragment,da),da.forEach(t),Js.forEach(t),CIe=i(f),ed=n(f,"H2",{class:!0});var LNe=s(ed);P5=n(LNe,"A",{id:!0,class:!0,href:!0});var nft=s(P5);fhe=n(nft,"SPAN",{});var sft=s(fhe);T(Cy.$$.fragment,sft),sft.forEach(t),nft.forEach(t),TXo=i(LNe),mhe=n(LNe,"SPAN",{});var lft=s(mhe);MXo=r(lft,"AutoModelForImageClassification"),lft.forEach(t),LNe.forEach(t),wIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(wy.$$.fragment,Ys),EXo=i(Ys),od=n(Ys,"P",{});var $K=s(od);CXo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bV=n($K,"A",{href:!0});var ift=s(bV);wXo=r(ift,"from_pretrained()"),ift.forEach(t),AXo=r($K," class method or the "),vV=n($K,"A",{href:!0});var dft=s(vV);yXo=r(dft,"from_config()"),dft.forEach(t),LXo=r($K,` class
method.`),$K.forEach(t),xXo=i(Ys),Ay=n(Ys,"P",{});var xNe=s(Ay);$Xo=r(xNe,"This class cannot be instantiated directly using "),ghe=n(xNe,"CODE",{});var cft=s(ghe);kXo=r(cft,"__init__()"),cft.forEach(t),SXo=r(xNe," (throws an error)."),xNe.forEach(t),RXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Mw=s(mt);T(yy.$$.fragment,Mw),BXo=i(Mw),hhe=n(Mw,"P",{});var fft=s(hhe);PXo=r(fft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fft.forEach(t),IXo=i(Mw),rd=n(Mw,"P",{});var kK=s(rd);qXo=r(kK,`Note:
Loading a model from its configuration file does `),phe=n(kK,"STRONG",{});var mft=s(phe);NXo=r(mft,"not"),mft.forEach(t),jXo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(kK,"A",{href:!0});var gft=s(FV);DXo=r(gft,"from_pretrained()"),gft.forEach(t),GXo=r(kK," to load the model weights."),kK.forEach(t),OXo=i(Mw),T(I5.$$.fragment,Mw),Mw.forEach(t),VXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Ly.$$.fragment,ca),XXo=i(ca),uhe=n(ca,"P",{});var hft=s(uhe);zXo=r(hft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hft.forEach(t),QXo=i(ca),qa=n(ca,"P",{});var Ew=s(qa);WXo=r(Ew,"The model class to instantiate is selected based on the "),_he=n(Ew,"CODE",{});var pft=s(_he);HXo=r(pft,"model_type"),pft.forEach(t),UXo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),bhe=n(Ew,"CODE",{});var uft=s(bhe);JXo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),YXo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(Ew,"CODE",{});var _ft=s(vhe);KXo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),ZXo=r(Ew,":"),Ew.forEach(t),ezo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);q5=n(Ee,"LI",{});var o9e=s(q5);Fhe=n(o9e,"STRONG",{});var bft=s(Fhe);ozo=r(bft,"beit"),bft.forEach(t),rzo=r(o9e," \u2014 "),TV=n(o9e,"A",{href:!0});var vft=s(TV);tzo=r(vft,"BeitForImageClassification"),vft.forEach(t),azo=r(o9e," (BEiT model)"),o9e.forEach(t),nzo=i(Ee),N5=n(Ee,"LI",{});var r9e=s(N5);The=n(r9e,"STRONG",{});var Fft=s(The);szo=r(Fft,"convnext"),Fft.forEach(t),lzo=r(r9e," \u2014 "),MV=n(r9e,"A",{href:!0});var Tft=s(MV);izo=r(Tft,"ConvNextForImageClassification"),Tft.forEach(t),dzo=r(r9e," (ConvNext model)"),r9e.forEach(t),czo=i(Ee),j5=n(Ee,"LI",{});var t9e=s(j5);Mhe=n(t9e,"STRONG",{});var Mft=s(Mhe);fzo=r(Mft,"data2vec-vision"),Mft.forEach(t),mzo=r(t9e," \u2014 "),EV=n(t9e,"A",{href:!0});var Eft=s(EV);gzo=r(Eft,"Data2VecVisionForImageClassification"),Eft.forEach(t),hzo=r(t9e," (Data2VecVision model)"),t9e.forEach(t),pzo=i(Ee),Rs=n(Ee,"LI",{});var m$=s(Rs);Ehe=n(m$,"STRONG",{});var Cft=s(Ehe);uzo=r(Cft,"deit"),Cft.forEach(t),_zo=r(m$," \u2014 "),CV=n(m$,"A",{href:!0});var wft=s(CV);bzo=r(wft,"DeiTForImageClassification"),wft.forEach(t),vzo=r(m$," or "),wV=n(m$,"A",{href:!0});var Aft=s(wV);Fzo=r(Aft,"DeiTForImageClassificationWithTeacher"),Aft.forEach(t),Tzo=r(m$," (DeiT model)"),m$.forEach(t),Mzo=i(Ee),D5=n(Ee,"LI",{});var a9e=s(D5);Che=n(a9e,"STRONG",{});var yft=s(Che);Ezo=r(yft,"imagegpt"),yft.forEach(t),Czo=r(a9e," \u2014 "),AV=n(a9e,"A",{href:!0});var Lft=s(AV);wzo=r(Lft,"ImageGPTForImageClassification"),Lft.forEach(t),Azo=r(a9e," (ImageGPT model)"),a9e.forEach(t),yzo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);whe=n(ff,"STRONG",{});var xft=s(whe);Lzo=r(xft,"perceiver"),xft.forEach(t),xzo=r(ff," \u2014 "),yV=n(ff,"A",{href:!0});var $ft=s(yV);$zo=r($ft,"PerceiverForImageClassificationLearned"),$ft.forEach(t),kzo=r(ff," or "),LV=n(ff,"A",{href:!0});var kft=s(LV);Szo=r(kft,"PerceiverForImageClassificationFourier"),kft.forEach(t),Rzo=r(ff," or "),xV=n(ff,"A",{href:!0});var Sft=s(xV);Bzo=r(Sft,"PerceiverForImageClassificationConvProcessing"),Sft.forEach(t),Pzo=r(ff," (Perceiver model)"),ff.forEach(t),Izo=i(Ee),G5=n(Ee,"LI",{});var n9e=s(G5);Ahe=n(n9e,"STRONG",{});var Rft=s(Ahe);qzo=r(Rft,"poolformer"),Rft.forEach(t),Nzo=r(n9e," \u2014 "),$V=n(n9e,"A",{href:!0});var Bft=s($V);jzo=r(Bft,"PoolFormerForImageClassification"),Bft.forEach(t),Dzo=r(n9e," (PoolFormer model)"),n9e.forEach(t),Gzo=i(Ee),O5=n(Ee,"LI",{});var s9e=s(O5);yhe=n(s9e,"STRONG",{});var Pft=s(yhe);Ozo=r(Pft,"regnet"),Pft.forEach(t),Vzo=r(s9e," \u2014 "),kV=n(s9e,"A",{href:!0});var Ift=s(kV);Xzo=r(Ift,"RegNetForImageClassification"),Ift.forEach(t),zzo=r(s9e," (RegNet model)"),s9e.forEach(t),Qzo=i(Ee),V5=n(Ee,"LI",{});var l9e=s(V5);Lhe=n(l9e,"STRONG",{});var qft=s(Lhe);Wzo=r(qft,"resnet"),qft.forEach(t),Hzo=r(l9e," \u2014 "),SV=n(l9e,"A",{href:!0});var Nft=s(SV);Uzo=r(Nft,"ResNetForImageClassification"),Nft.forEach(t),Jzo=r(l9e," (ResNet model)"),l9e.forEach(t),Yzo=i(Ee),X5=n(Ee,"LI",{});var i9e=s(X5);xhe=n(i9e,"STRONG",{});var jft=s(xhe);Kzo=r(jft,"segformer"),jft.forEach(t),Zzo=r(i9e," \u2014 "),RV=n(i9e,"A",{href:!0});var Dft=s(RV);eQo=r(Dft,"SegformerForImageClassification"),Dft.forEach(t),oQo=r(i9e," (SegFormer model)"),i9e.forEach(t),rQo=i(Ee),z5=n(Ee,"LI",{});var d9e=s(z5);$he=n(d9e,"STRONG",{});var Gft=s($he);tQo=r(Gft,"swin"),Gft.forEach(t),aQo=r(d9e," \u2014 "),BV=n(d9e,"A",{href:!0});var Oft=s(BV);nQo=r(Oft,"SwinForImageClassification"),Oft.forEach(t),sQo=r(d9e," (Swin model)"),d9e.forEach(t),lQo=i(Ee),Q5=n(Ee,"LI",{});var c9e=s(Q5);khe=n(c9e,"STRONG",{});var Vft=s(khe);iQo=r(Vft,"van"),Vft.forEach(t),dQo=r(c9e," \u2014 "),PV=n(c9e,"A",{href:!0});var Xft=s(PV);cQo=r(Xft,"VanForImageClassification"),Xft.forEach(t),fQo=r(c9e," (VAN model)"),c9e.forEach(t),mQo=i(Ee),W5=n(Ee,"LI",{});var f9e=s(W5);She=n(f9e,"STRONG",{});var zft=s(She);gQo=r(zft,"vit"),zft.forEach(t),hQo=r(f9e," \u2014 "),IV=n(f9e,"A",{href:!0});var Qft=s(IV);pQo=r(Qft,"ViTForImageClassification"),Qft.forEach(t),uQo=r(f9e," (ViT model)"),f9e.forEach(t),Ee.forEach(t),_Qo=i(ca),H5=n(ca,"P",{});var m9e=s(H5);bQo=r(m9e,"The model is set in evaluation mode by default using "),Rhe=n(m9e,"CODE",{});var Wft=s(Rhe);vQo=r(Wft,"model.eval()"),Wft.forEach(t),FQo=r(m9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=n(m9e,"CODE",{});var Hft=s(Bhe);TQo=r(Hft,"model.train()"),Hft.forEach(t),m9e.forEach(t),MQo=i(ca),T(U5.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),AIe=i(f),td=n(f,"H2",{class:!0});var $Ne=s(td);J5=n($Ne,"A",{id:!0,class:!0,href:!0});var Uft=s(J5);Phe=n(Uft,"SPAN",{});var Jft=s(Phe);T(xy.$$.fragment,Jft),Jft.forEach(t),Uft.forEach(t),EQo=i($Ne),Ihe=n($Ne,"SPAN",{});var Yft=s(Ihe);CQo=r(Yft,"AutoModelForVision2Seq"),Yft.forEach(t),$Ne.forEach(t),yIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T($y.$$.fragment,Ks),wQo=i(Ks),ad=n(Ks,"P",{});var SK=s(ad);AQo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qV=n(SK,"A",{href:!0});var Kft=s(qV);yQo=r(Kft,"from_pretrained()"),Kft.forEach(t),LQo=r(SK," class method or the "),NV=n(SK,"A",{href:!0});var Zft=s(NV);xQo=r(Zft,"from_config()"),Zft.forEach(t),$Qo=r(SK,` class
method.`),SK.forEach(t),kQo=i(Ks),ky=n(Ks,"P",{});var kNe=s(ky);SQo=r(kNe,"This class cannot be instantiated directly using "),qhe=n(kNe,"CODE",{});var emt=s(qhe);RQo=r(emt,"__init__()"),emt.forEach(t),BQo=r(kNe," (throws an error)."),kNe.forEach(t),PQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Cw=s(ht);T(Sy.$$.fragment,Cw),IQo=i(Cw),Nhe=n(Cw,"P",{});var omt=s(Nhe);qQo=r(omt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),omt.forEach(t),NQo=i(Cw),nd=n(Cw,"P",{});var RK=s(nd);jQo=r(RK,`Note:
Loading a model from its configuration file does `),jhe=n(RK,"STRONG",{});var rmt=s(jhe);DQo=r(rmt,"not"),rmt.forEach(t),GQo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(RK,"A",{href:!0});var tmt=s(jV);OQo=r(tmt,"from_pretrained()"),tmt.forEach(t),VQo=r(RK," to load the model weights."),RK.forEach(t),XQo=i(Cw),T(Y5.$$.fragment,Cw),Cw.forEach(t),zQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Ry.$$.fragment,fa),QQo=i(fa),Dhe=n(fa,"P",{});var amt=s(Dhe);WQo=r(amt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),amt.forEach(t),HQo=i(fa),Na=n(fa,"P",{});var ww=s(Na);UQo=r(ww,"The model class to instantiate is selected based on the "),Ghe=n(ww,"CODE",{});var nmt=s(Ghe);JQo=r(nmt,"model_type"),nmt.forEach(t),YQo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(ww,"CODE",{});var smt=s(Ohe);KQo=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),ZQo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(ww,"CODE",{});var lmt=s(Vhe);eWo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),oWo=r(ww,":"),ww.forEach(t),rWo=i(fa),Xhe=n(fa,"UL",{});var imt=s(Xhe);K5=n(imt,"LI",{});var g9e=s(K5);zhe=n(g9e,"STRONG",{});var dmt=s(zhe);tWo=r(dmt,"vision-encoder-decoder"),dmt.forEach(t),aWo=r(g9e," \u2014 "),DV=n(g9e,"A",{href:!0});var cmt=s(DV);nWo=r(cmt,"VisionEncoderDecoderModel"),cmt.forEach(t),sWo=r(g9e," (Vision Encoder decoder model)"),g9e.forEach(t),imt.forEach(t),lWo=i(fa),Z5=n(fa,"P",{});var h9e=s(Z5);iWo=r(h9e,"The model is set in evaluation mode by default using "),Qhe=n(h9e,"CODE",{});var fmt=s(Qhe);dWo=r(fmt,"model.eval()"),fmt.forEach(t),cWo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(h9e,"CODE",{});var mmt=s(Whe);fWo=r(mmt,"model.train()"),mmt.forEach(t),h9e.forEach(t),mWo=i(fa),T(ev.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),LIe=i(f),sd=n(f,"H2",{class:!0});var SNe=s(sd);ov=n(SNe,"A",{id:!0,class:!0,href:!0});var gmt=s(ov);Hhe=n(gmt,"SPAN",{});var hmt=s(Hhe);T(By.$$.fragment,hmt),hmt.forEach(t),gmt.forEach(t),gWo=i(SNe),Uhe=n(SNe,"SPAN",{});var pmt=s(Uhe);hWo=r(pmt,"AutoModelForAudioClassification"),pmt.forEach(t),SNe.forEach(t),xIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Py.$$.fragment,Zs),pWo=i(Zs),ld=n(Zs,"P",{});var BK=s(ld);uWo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GV=n(BK,"A",{href:!0});var umt=s(GV);_Wo=r(umt,"from_pretrained()"),umt.forEach(t),bWo=r(BK," class method or the "),OV=n(BK,"A",{href:!0});var _mt=s(OV);vWo=r(_mt,"from_config()"),_mt.forEach(t),FWo=r(BK,` class
method.`),BK.forEach(t),TWo=i(Zs),Iy=n(Zs,"P",{});var RNe=s(Iy);MWo=r(RNe,"This class cannot be instantiated directly using "),Jhe=n(RNe,"CODE",{});var bmt=s(Jhe);EWo=r(bmt,"__init__()"),bmt.forEach(t),CWo=r(RNe," (throws an error)."),RNe.forEach(t),wWo=i(Zs),pt=n(Zs,"DIV",{class:!0});var Aw=s(pt);T(qy.$$.fragment,Aw),AWo=i(Aw),Yhe=n(Aw,"P",{});var vmt=s(Yhe);yWo=r(vmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vmt.forEach(t),LWo=i(Aw),id=n(Aw,"P",{});var PK=s(id);xWo=r(PK,`Note:
Loading a model from its configuration file does `),Khe=n(PK,"STRONG",{});var Fmt=s(Khe);$Wo=r(Fmt,"not"),Fmt.forEach(t),kWo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(PK,"A",{href:!0});var Tmt=s(VV);SWo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),RWo=r(PK," to load the model weights."),PK.forEach(t),BWo=i(Aw),T(rv.$$.fragment,Aw),Aw.forEach(t),PWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Ny.$$.fragment,ma),IWo=i(ma),Zhe=n(ma,"P",{});var Mmt=s(Zhe);qWo=r(Mmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Mmt.forEach(t),NWo=i(ma),ja=n(ma,"P",{});var yw=s(ja);jWo=r(yw,"The model class to instantiate is selected based on the "),epe=n(yw,"CODE",{});var Emt=s(epe);DWo=r(Emt,"model_type"),Emt.forEach(t),GWo=r(yw,` property of the config object (either
passed as an argument or loaded from `),ope=n(yw,"CODE",{});var Cmt=s(ope);OWo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),VWo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(yw,"CODE",{});var wmt=s(rpe);XWo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),zWo=r(yw,":"),yw.forEach(t),QWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);tv=n(bo,"LI",{});var p9e=s(tv);tpe=n(p9e,"STRONG",{});var Amt=s(tpe);WWo=r(Amt,"data2vec-audio"),Amt.forEach(t),HWo=r(p9e," \u2014 "),XV=n(p9e,"A",{href:!0});var ymt=s(XV);UWo=r(ymt,"Data2VecAudioForSequenceClassification"),ymt.forEach(t),JWo=r(p9e," (Data2VecAudio model)"),p9e.forEach(t),YWo=i(bo),av=n(bo,"LI",{});var u9e=s(av);ape=n(u9e,"STRONG",{});var Lmt=s(ape);KWo=r(Lmt,"hubert"),Lmt.forEach(t),ZWo=r(u9e," \u2014 "),zV=n(u9e,"A",{href:!0});var xmt=s(zV);eHo=r(xmt,"HubertForSequenceClassification"),xmt.forEach(t),oHo=r(u9e," (Hubert model)"),u9e.forEach(t),rHo=i(bo),nv=n(bo,"LI",{});var _9e=s(nv);npe=n(_9e,"STRONG",{});var $mt=s(npe);tHo=r($mt,"sew"),$mt.forEach(t),aHo=r(_9e," \u2014 "),QV=n(_9e,"A",{href:!0});var kmt=s(QV);nHo=r(kmt,"SEWForSequenceClassification"),kmt.forEach(t),sHo=r(_9e," (SEW model)"),_9e.forEach(t),lHo=i(bo),sv=n(bo,"LI",{});var b9e=s(sv);spe=n(b9e,"STRONG",{});var Smt=s(spe);iHo=r(Smt,"sew-d"),Smt.forEach(t),dHo=r(b9e," \u2014 "),WV=n(b9e,"A",{href:!0});var Rmt=s(WV);cHo=r(Rmt,"SEWDForSequenceClassification"),Rmt.forEach(t),fHo=r(b9e," (SEW-D model)"),b9e.forEach(t),mHo=i(bo),lv=n(bo,"LI",{});var v9e=s(lv);lpe=n(v9e,"STRONG",{});var Bmt=s(lpe);gHo=r(Bmt,"unispeech"),Bmt.forEach(t),hHo=r(v9e," \u2014 "),HV=n(v9e,"A",{href:!0});var Pmt=s(HV);pHo=r(Pmt,"UniSpeechForSequenceClassification"),Pmt.forEach(t),uHo=r(v9e," (UniSpeech model)"),v9e.forEach(t),_Ho=i(bo),iv=n(bo,"LI",{});var F9e=s(iv);ipe=n(F9e,"STRONG",{});var Imt=s(ipe);bHo=r(Imt,"unispeech-sat"),Imt.forEach(t),vHo=r(F9e," \u2014 "),UV=n(F9e,"A",{href:!0});var qmt=s(UV);FHo=r(qmt,"UniSpeechSatForSequenceClassification"),qmt.forEach(t),THo=r(F9e," (UniSpeechSat model)"),F9e.forEach(t),MHo=i(bo),dv=n(bo,"LI",{});var T9e=s(dv);dpe=n(T9e,"STRONG",{});var Nmt=s(dpe);EHo=r(Nmt,"wav2vec2"),Nmt.forEach(t),CHo=r(T9e," \u2014 "),JV=n(T9e,"A",{href:!0});var jmt=s(JV);wHo=r(jmt,"Wav2Vec2ForSequenceClassification"),jmt.forEach(t),AHo=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),yHo=i(bo),cv=n(bo,"LI",{});var M9e=s(cv);cpe=n(M9e,"STRONG",{});var Dmt=s(cpe);LHo=r(Dmt,"wavlm"),Dmt.forEach(t),xHo=r(M9e," \u2014 "),YV=n(M9e,"A",{href:!0});var Gmt=s(YV);$Ho=r(Gmt,"WavLMForSequenceClassification"),Gmt.forEach(t),kHo=r(M9e," (WavLM model)"),M9e.forEach(t),bo.forEach(t),SHo=i(ma),fv=n(ma,"P",{});var E9e=s(fv);RHo=r(E9e,"The model is set in evaluation mode by default using "),fpe=n(E9e,"CODE",{});var Omt=s(fpe);BHo=r(Omt,"model.eval()"),Omt.forEach(t),PHo=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(E9e,"CODE",{});var Vmt=s(mpe);IHo=r(Vmt,"model.train()"),Vmt.forEach(t),E9e.forEach(t),qHo=i(ma),T(mv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),$Ie=i(f),dd=n(f,"H2",{class:!0});var BNe=s(dd);gv=n(BNe,"A",{id:!0,class:!0,href:!0});var Xmt=s(gv);gpe=n(Xmt,"SPAN",{});var zmt=s(gpe);T(jy.$$.fragment,zmt),zmt.forEach(t),Xmt.forEach(t),NHo=i(BNe),hpe=n(BNe,"SPAN",{});var Qmt=s(hpe);jHo=r(Qmt,"AutoModelForAudioFrameClassification"),Qmt.forEach(t),BNe.forEach(t),kIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Dy.$$.fragment,el),DHo=i(el),cd=n(el,"P",{});var IK=s(cd);GHo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KV=n(IK,"A",{href:!0});var Wmt=s(KV);OHo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),VHo=r(IK," class method or the "),ZV=n(IK,"A",{href:!0});var Hmt=s(ZV);XHo=r(Hmt,"from_config()"),Hmt.forEach(t),zHo=r(IK,` class
method.`),IK.forEach(t),QHo=i(el),Gy=n(el,"P",{});var PNe=s(Gy);WHo=r(PNe,"This class cannot be instantiated directly using "),ppe=n(PNe,"CODE",{});var Umt=s(ppe);HHo=r(Umt,"__init__()"),Umt.forEach(t),UHo=r(PNe," (throws an error)."),PNe.forEach(t),JHo=i(el),ut=n(el,"DIV",{class:!0});var Lw=s(ut);T(Oy.$$.fragment,Lw),YHo=i(Lw),upe=n(Lw,"P",{});var Jmt=s(upe);KHo=r(Jmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Jmt.forEach(t),ZHo=i(Lw),fd=n(Lw,"P",{});var qK=s(fd);eUo=r(qK,`Note:
Loading a model from its configuration file does `),_pe=n(qK,"STRONG",{});var Ymt=s(_pe);oUo=r(Ymt,"not"),Ymt.forEach(t),rUo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(qK,"A",{href:!0});var Kmt=s(eX);tUo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),aUo=r(qK," to load the model weights."),qK.forEach(t),nUo=i(Lw),T(hv.$$.fragment,Lw),Lw.forEach(t),sUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Vy.$$.fragment,ga),lUo=i(ga),bpe=n(ga,"P",{});var Zmt=s(bpe);iUo=r(Zmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Zmt.forEach(t),dUo=i(ga),Da=n(ga,"P",{});var xw=s(Da);cUo=r(xw,"The model class to instantiate is selected based on the "),vpe=n(xw,"CODE",{});var egt=s(vpe);fUo=r(egt,"model_type"),egt.forEach(t),mUo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(xw,"CODE",{});var ogt=s(Fpe);gUo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),hUo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(xw,"CODE",{});var rgt=s(Tpe);pUo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),uUo=r(xw,":"),xw.forEach(t),_Uo=i(ga),Ga=n(ga,"UL",{});var $w=s(Ga);pv=n($w,"LI",{});var C9e=s(pv);Mpe=n(C9e,"STRONG",{});var tgt=s(Mpe);bUo=r(tgt,"data2vec-audio"),tgt.forEach(t),vUo=r(C9e," \u2014 "),oX=n(C9e,"A",{href:!0});var agt=s(oX);FUo=r(agt,"Data2VecAudioForAudioFrameClassification"),agt.forEach(t),TUo=r(C9e," (Data2VecAudio model)"),C9e.forEach(t),MUo=i($w),uv=n($w,"LI",{});var w9e=s(uv);Epe=n(w9e,"STRONG",{});var ngt=s(Epe);EUo=r(ngt,"unispeech-sat"),ngt.forEach(t),CUo=r(w9e," \u2014 "),rX=n(w9e,"A",{href:!0});var sgt=s(rX);wUo=r(sgt,"UniSpeechSatForAudioFrameClassification"),sgt.forEach(t),AUo=r(w9e," (UniSpeechSat model)"),w9e.forEach(t),yUo=i($w),_v=n($w,"LI",{});var A9e=s(_v);Cpe=n(A9e,"STRONG",{});var lgt=s(Cpe);LUo=r(lgt,"wav2vec2"),lgt.forEach(t),xUo=r(A9e," \u2014 "),tX=n(A9e,"A",{href:!0});var igt=s(tX);$Uo=r(igt,"Wav2Vec2ForAudioFrameClassification"),igt.forEach(t),kUo=r(A9e," (Wav2Vec2 model)"),A9e.forEach(t),SUo=i($w),bv=n($w,"LI",{});var y9e=s(bv);wpe=n(y9e,"STRONG",{});var dgt=s(wpe);RUo=r(dgt,"wavlm"),dgt.forEach(t),BUo=r(y9e," \u2014 "),aX=n(y9e,"A",{href:!0});var cgt=s(aX);PUo=r(cgt,"WavLMForAudioFrameClassification"),cgt.forEach(t),IUo=r(y9e," (WavLM model)"),y9e.forEach(t),$w.forEach(t),qUo=i(ga),vv=n(ga,"P",{});var L9e=s(vv);NUo=r(L9e,"The model is set in evaluation mode by default using "),Ape=n(L9e,"CODE",{});var fgt=s(Ape);jUo=r(fgt,"model.eval()"),fgt.forEach(t),DUo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(L9e,"CODE",{});var mgt=s(ype);GUo=r(mgt,"model.train()"),mgt.forEach(t),L9e.forEach(t),OUo=i(ga),T(Fv.$$.fragment,ga),ga.forEach(t),el.forEach(t),SIe=i(f),md=n(f,"H2",{class:!0});var INe=s(md);Tv=n(INe,"A",{id:!0,class:!0,href:!0});var ggt=s(Tv);Lpe=n(ggt,"SPAN",{});var hgt=s(Lpe);T(Xy.$$.fragment,hgt),hgt.forEach(t),ggt.forEach(t),VUo=i(INe),xpe=n(INe,"SPAN",{});var pgt=s(xpe);XUo=r(pgt,"AutoModelForCTC"),pgt.forEach(t),INe.forEach(t),RIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(zy.$$.fragment,ol),zUo=i(ol),gd=n(ol,"P",{});var NK=s(gd);QUo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nX=n(NK,"A",{href:!0});var ugt=s(nX);WUo=r(ugt,"from_pretrained()"),ugt.forEach(t),HUo=r(NK," class method or the "),sX=n(NK,"A",{href:!0});var _gt=s(sX);UUo=r(_gt,"from_config()"),_gt.forEach(t),JUo=r(NK,` class
method.`),NK.forEach(t),YUo=i(ol),Qy=n(ol,"P",{});var qNe=s(Qy);KUo=r(qNe,"This class cannot be instantiated directly using "),$pe=n(qNe,"CODE",{});var bgt=s($pe);ZUo=r(bgt,"__init__()"),bgt.forEach(t),eJo=r(qNe," (throws an error)."),qNe.forEach(t),oJo=i(ol),_t=n(ol,"DIV",{class:!0});var kw=s(_t);T(Wy.$$.fragment,kw),rJo=i(kw),kpe=n(kw,"P",{});var vgt=s(kpe);tJo=r(vgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vgt.forEach(t),aJo=i(kw),hd=n(kw,"P",{});var jK=s(hd);nJo=r(jK,`Note:
Loading a model from its configuration file does `),Spe=n(jK,"STRONG",{});var Fgt=s(Spe);sJo=r(Fgt,"not"),Fgt.forEach(t),lJo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(jK,"A",{href:!0});var Tgt=s(lX);iJo=r(Tgt,"from_pretrained()"),Tgt.forEach(t),dJo=r(jK," to load the model weights."),jK.forEach(t),cJo=i(kw),T(Mv.$$.fragment,kw),kw.forEach(t),fJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Hy.$$.fragment,ha),mJo=i(ha),Rpe=n(ha,"P",{});var Mgt=s(Rpe);gJo=r(Mgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mgt.forEach(t),hJo=i(ha),Oa=n(ha,"P",{});var Sw=s(Oa);pJo=r(Sw,"The model class to instantiate is selected based on the "),Bpe=n(Sw,"CODE",{});var Egt=s(Bpe);uJo=r(Egt,"model_type"),Egt.forEach(t),_Jo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(Sw,"CODE",{});var Cgt=s(Ppe);bJo=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),vJo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(Sw,"CODE",{});var wgt=s(Ipe);FJo=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),TJo=r(Sw,":"),Sw.forEach(t),MJo=i(ha),je=n(ha,"UL",{});var vo=s(je);Ev=n(vo,"LI",{});var x9e=s(Ev);qpe=n(x9e,"STRONG",{});var Agt=s(qpe);EJo=r(Agt,"data2vec-audio"),Agt.forEach(t),CJo=r(x9e," \u2014 "),iX=n(x9e,"A",{href:!0});var ygt=s(iX);wJo=r(ygt,"Data2VecAudioForCTC"),ygt.forEach(t),AJo=r(x9e," (Data2VecAudio model)"),x9e.forEach(t),yJo=i(vo),Cv=n(vo,"LI",{});var $9e=s(Cv);Npe=n($9e,"STRONG",{});var Lgt=s(Npe);LJo=r(Lgt,"hubert"),Lgt.forEach(t),xJo=r($9e," \u2014 "),dX=n($9e,"A",{href:!0});var xgt=s(dX);$Jo=r(xgt,"HubertForCTC"),xgt.forEach(t),kJo=r($9e," (Hubert model)"),$9e.forEach(t),SJo=i(vo),wv=n(vo,"LI",{});var k9e=s(wv);jpe=n(k9e,"STRONG",{});var $gt=s(jpe);RJo=r($gt,"sew"),$gt.forEach(t),BJo=r(k9e," \u2014 "),cX=n(k9e,"A",{href:!0});var kgt=s(cX);PJo=r(kgt,"SEWForCTC"),kgt.forEach(t),IJo=r(k9e," (SEW model)"),k9e.forEach(t),qJo=i(vo),Av=n(vo,"LI",{});var S9e=s(Av);Dpe=n(S9e,"STRONG",{});var Sgt=s(Dpe);NJo=r(Sgt,"sew-d"),Sgt.forEach(t),jJo=r(S9e," \u2014 "),fX=n(S9e,"A",{href:!0});var Rgt=s(fX);DJo=r(Rgt,"SEWDForCTC"),Rgt.forEach(t),GJo=r(S9e," (SEW-D model)"),S9e.forEach(t),OJo=i(vo),yv=n(vo,"LI",{});var R9e=s(yv);Gpe=n(R9e,"STRONG",{});var Bgt=s(Gpe);VJo=r(Bgt,"unispeech"),Bgt.forEach(t),XJo=r(R9e," \u2014 "),mX=n(R9e,"A",{href:!0});var Pgt=s(mX);zJo=r(Pgt,"UniSpeechForCTC"),Pgt.forEach(t),QJo=r(R9e," (UniSpeech model)"),R9e.forEach(t),WJo=i(vo),Lv=n(vo,"LI",{});var B9e=s(Lv);Ope=n(B9e,"STRONG",{});var Igt=s(Ope);HJo=r(Igt,"unispeech-sat"),Igt.forEach(t),UJo=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var qgt=s(gX);JJo=r(qgt,"UniSpeechSatForCTC"),qgt.forEach(t),YJo=r(B9e," (UniSpeechSat model)"),B9e.forEach(t),KJo=i(vo),xv=n(vo,"LI",{});var P9e=s(xv);Vpe=n(P9e,"STRONG",{});var Ngt=s(Vpe);ZJo=r(Ngt,"wav2vec2"),Ngt.forEach(t),eYo=r(P9e," \u2014 "),hX=n(P9e,"A",{href:!0});var jgt=s(hX);oYo=r(jgt,"Wav2Vec2ForCTC"),jgt.forEach(t),rYo=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),tYo=i(vo),$v=n(vo,"LI",{});var I9e=s($v);Xpe=n(I9e,"STRONG",{});var Dgt=s(Xpe);aYo=r(Dgt,"wavlm"),Dgt.forEach(t),nYo=r(I9e," \u2014 "),pX=n(I9e,"A",{href:!0});var Ggt=s(pX);sYo=r(Ggt,"WavLMForCTC"),Ggt.forEach(t),lYo=r(I9e," (WavLM model)"),I9e.forEach(t),vo.forEach(t),iYo=i(ha),kv=n(ha,"P",{});var q9e=s(kv);dYo=r(q9e,"The model is set in evaluation mode by default using "),zpe=n(q9e,"CODE",{});var Ogt=s(zpe);cYo=r(Ogt,"model.eval()"),Ogt.forEach(t),fYo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(q9e,"CODE",{});var Vgt=s(Qpe);mYo=r(Vgt,"model.train()"),Vgt.forEach(t),q9e.forEach(t),gYo=i(ha),T(Sv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),BIe=i(f),pd=n(f,"H2",{class:!0});var NNe=s(pd);Rv=n(NNe,"A",{id:!0,class:!0,href:!0});var Xgt=s(Rv);Wpe=n(Xgt,"SPAN",{});var zgt=s(Wpe);T(Uy.$$.fragment,zgt),zgt.forEach(t),Xgt.forEach(t),hYo=i(NNe),Hpe=n(NNe,"SPAN",{});var Qgt=s(Hpe);pYo=r(Qgt,"AutoModelForSpeechSeq2Seq"),Qgt.forEach(t),NNe.forEach(t),PIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Jy.$$.fragment,rl),uYo=i(rl),ud=n(rl,"P",{});var DK=s(ud);_Yo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uX=n(DK,"A",{href:!0});var Wgt=s(uX);bYo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),vYo=r(DK," class method or the "),_X=n(DK,"A",{href:!0});var Hgt=s(_X);FYo=r(Hgt,"from_config()"),Hgt.forEach(t),TYo=r(DK,` class
method.`),DK.forEach(t),MYo=i(rl),Yy=n(rl,"P",{});var jNe=s(Yy);EYo=r(jNe,"This class cannot be instantiated directly using "),Upe=n(jNe,"CODE",{});var Ugt=s(Upe);CYo=r(Ugt,"__init__()"),Ugt.forEach(t),wYo=r(jNe," (throws an error)."),jNe.forEach(t),AYo=i(rl),bt=n(rl,"DIV",{class:!0});var Rw=s(bt);T(Ky.$$.fragment,Rw),yYo=i(Rw),Jpe=n(Rw,"P",{});var Jgt=s(Jpe);LYo=r(Jgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jgt.forEach(t),xYo=i(Rw),_d=n(Rw,"P",{});var GK=s(_d);$Yo=r(GK,`Note:
Loading a model from its configuration file does `),Ype=n(GK,"STRONG",{});var Ygt=s(Ype);kYo=r(Ygt,"not"),Ygt.forEach(t),SYo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(GK,"A",{href:!0});var Kgt=s(bX);RYo=r(Kgt,"from_pretrained()"),Kgt.forEach(t),BYo=r(GK," to load the model weights."),GK.forEach(t),PYo=i(Rw),T(Bv.$$.fragment,Rw),Rw.forEach(t),IYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Zy.$$.fragment,pa),qYo=i(pa),Kpe=n(pa,"P",{});var Zgt=s(Kpe);NYo=r(Zgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Zgt.forEach(t),jYo=i(pa),Va=n(pa,"P",{});var Bw=s(Va);DYo=r(Bw,"The model class to instantiate is selected based on the "),Zpe=n(Bw,"CODE",{});var eht=s(Zpe);GYo=r(eht,"model_type"),eht.forEach(t),OYo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),eue=n(Bw,"CODE",{});var oht=s(eue);VYo=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),XYo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(Bw,"CODE",{});var rht=s(oue);zYo=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),QYo=r(Bw,":"),Bw.forEach(t),WYo=i(pa),eL=n(pa,"UL",{});var DNe=s(eL);Pv=n(DNe,"LI",{});var N9e=s(Pv);rue=n(N9e,"STRONG",{});var tht=s(rue);HYo=r(tht,"speech-encoder-decoder"),tht.forEach(t),UYo=r(N9e," \u2014 "),vX=n(N9e,"A",{href:!0});var aht=s(vX);JYo=r(aht,"SpeechEncoderDecoderModel"),aht.forEach(t),YYo=r(N9e," (Speech Encoder decoder model)"),N9e.forEach(t),KYo=i(DNe),Iv=n(DNe,"LI",{});var j9e=s(Iv);tue=n(j9e,"STRONG",{});var nht=s(tue);ZYo=r(nht,"speech_to_text"),nht.forEach(t),eKo=r(j9e," \u2014 "),FX=n(j9e,"A",{href:!0});var sht=s(FX);oKo=r(sht,"Speech2TextForConditionalGeneration"),sht.forEach(t),rKo=r(j9e," (Speech2Text model)"),j9e.forEach(t),DNe.forEach(t),tKo=i(pa),qv=n(pa,"P",{});var D9e=s(qv);aKo=r(D9e,"The model is set in evaluation mode by default using "),aue=n(D9e,"CODE",{});var lht=s(aue);nKo=r(lht,"model.eval()"),lht.forEach(t),sKo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=n(D9e,"CODE",{});var iht=s(nue);lKo=r(iht,"model.train()"),iht.forEach(t),D9e.forEach(t),iKo=i(pa),T(Nv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),IIe=i(f),bd=n(f,"H2",{class:!0});var GNe=s(bd);jv=n(GNe,"A",{id:!0,class:!0,href:!0});var dht=s(jv);sue=n(dht,"SPAN",{});var cht=s(sue);T(oL.$$.fragment,cht),cht.forEach(t),dht.forEach(t),dKo=i(GNe),lue=n(GNe,"SPAN",{});var fht=s(lue);cKo=r(fht,"AutoModelForAudioXVector"),fht.forEach(t),GNe.forEach(t),qIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(rL.$$.fragment,tl),fKo=i(tl),vd=n(tl,"P",{});var OK=s(vd);mKo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TX=n(OK,"A",{href:!0});var mht=s(TX);gKo=r(mht,"from_pretrained()"),mht.forEach(t),hKo=r(OK," class method or the "),MX=n(OK,"A",{href:!0});var ght=s(MX);pKo=r(ght,"from_config()"),ght.forEach(t),uKo=r(OK,` class
method.`),OK.forEach(t),_Ko=i(tl),tL=n(tl,"P",{});var ONe=s(tL);bKo=r(ONe,"This class cannot be instantiated directly using "),iue=n(ONe,"CODE",{});var hht=s(iue);vKo=r(hht,"__init__()"),hht.forEach(t),FKo=r(ONe," (throws an error)."),ONe.forEach(t),TKo=i(tl),vt=n(tl,"DIV",{class:!0});var Pw=s(vt);T(aL.$$.fragment,Pw),MKo=i(Pw),due=n(Pw,"P",{});var pht=s(due);EKo=r(pht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pht.forEach(t),CKo=i(Pw),Fd=n(Pw,"P",{});var VK=s(Fd);wKo=r(VK,`Note:
Loading a model from its configuration file does `),cue=n(VK,"STRONG",{});var uht=s(cue);AKo=r(uht,"not"),uht.forEach(t),yKo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(VK,"A",{href:!0});var _ht=s(EX);LKo=r(_ht,"from_pretrained()"),_ht.forEach(t),xKo=r(VK," to load the model weights."),VK.forEach(t),$Ko=i(Pw),T(Dv.$$.fragment,Pw),Pw.forEach(t),kKo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(nL.$$.fragment,ua),SKo=i(ua),fue=n(ua,"P",{});var bht=s(fue);RKo=r(bht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bht.forEach(t),BKo=i(ua),Xa=n(ua,"P",{});var Iw=s(Xa);PKo=r(Iw,"The model class to instantiate is selected based on the "),mue=n(Iw,"CODE",{});var vht=s(mue);IKo=r(vht,"model_type"),vht.forEach(t),qKo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),gue=n(Iw,"CODE",{});var Fht=s(gue);NKo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),jKo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(Iw,"CODE",{});var Tht=s(hue);DKo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),GKo=r(Iw,":"),Iw.forEach(t),OKo=i(ua),za=n(ua,"UL",{});var qw=s(za);Gv=n(qw,"LI",{});var G9e=s(Gv);pue=n(G9e,"STRONG",{});var Mht=s(pue);VKo=r(Mht,"data2vec-audio"),Mht.forEach(t),XKo=r(G9e," \u2014 "),CX=n(G9e,"A",{href:!0});var Eht=s(CX);zKo=r(Eht,"Data2VecAudioForXVector"),Eht.forEach(t),QKo=r(G9e," (Data2VecAudio model)"),G9e.forEach(t),WKo=i(qw),Ov=n(qw,"LI",{});var O9e=s(Ov);uue=n(O9e,"STRONG",{});var Cht=s(uue);HKo=r(Cht,"unispeech-sat"),Cht.forEach(t),UKo=r(O9e," \u2014 "),wX=n(O9e,"A",{href:!0});var wht=s(wX);JKo=r(wht,"UniSpeechSatForXVector"),wht.forEach(t),YKo=r(O9e," (UniSpeechSat model)"),O9e.forEach(t),KKo=i(qw),Vv=n(qw,"LI",{});var V9e=s(Vv);_ue=n(V9e,"STRONG",{});var Aht=s(_ue);ZKo=r(Aht,"wav2vec2"),Aht.forEach(t),eZo=r(V9e," \u2014 "),AX=n(V9e,"A",{href:!0});var yht=s(AX);oZo=r(yht,"Wav2Vec2ForXVector"),yht.forEach(t),rZo=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),tZo=i(qw),Xv=n(qw,"LI",{});var X9e=s(Xv);bue=n(X9e,"STRONG",{});var Lht=s(bue);aZo=r(Lht,"wavlm"),Lht.forEach(t),nZo=r(X9e," \u2014 "),yX=n(X9e,"A",{href:!0});var xht=s(yX);sZo=r(xht,"WavLMForXVector"),xht.forEach(t),lZo=r(X9e," (WavLM model)"),X9e.forEach(t),qw.forEach(t),iZo=i(ua),zv=n(ua,"P",{});var z9e=s(zv);dZo=r(z9e,"The model is set in evaluation mode by default using "),vue=n(z9e,"CODE",{});var $ht=s(vue);cZo=r($ht,"model.eval()"),$ht.forEach(t),fZo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(z9e,"CODE",{});var kht=s(Fue);mZo=r(kht,"model.train()"),kht.forEach(t),z9e.forEach(t),gZo=i(ua),T(Qv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),NIe=i(f),Td=n(f,"H2",{class:!0});var VNe=s(Td);Wv=n(VNe,"A",{id:!0,class:!0,href:!0});var Sht=s(Wv);Tue=n(Sht,"SPAN",{});var Rht=s(Tue);T(sL.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),hZo=i(VNe),Mue=n(VNe,"SPAN",{});var Bht=s(Mue);pZo=r(Bht,"AutoModelForMaskedImageModeling"),Bht.forEach(t),VNe.forEach(t),jIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(lL.$$.fragment,al),uZo=i(al),Md=n(al,"P",{});var XK=s(Md);_Zo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LX=n(XK,"A",{href:!0});var Pht=s(LX);bZo=r(Pht,"from_pretrained()"),Pht.forEach(t),vZo=r(XK," class method or the "),xX=n(XK,"A",{href:!0});var Iht=s(xX);FZo=r(Iht,"from_config()"),Iht.forEach(t),TZo=r(XK,` class
method.`),XK.forEach(t),MZo=i(al),iL=n(al,"P",{});var XNe=s(iL);EZo=r(XNe,"This class cannot be instantiated directly using "),Eue=n(XNe,"CODE",{});var qht=s(Eue);CZo=r(qht,"__init__()"),qht.forEach(t),wZo=r(XNe," (throws an error)."),XNe.forEach(t),AZo=i(al),Ft=n(al,"DIV",{class:!0});var Nw=s(Ft);T(dL.$$.fragment,Nw),yZo=i(Nw),Cue=n(Nw,"P",{});var Nht=s(Cue);LZo=r(Nht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Nht.forEach(t),xZo=i(Nw),Ed=n(Nw,"P",{});var zK=s(Ed);$Zo=r(zK,`Note:
Loading a model from its configuration file does `),wue=n(zK,"STRONG",{});var jht=s(wue);kZo=r(jht,"not"),jht.forEach(t),SZo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(zK,"A",{href:!0});var Dht=s($X);RZo=r(Dht,"from_pretrained()"),Dht.forEach(t),BZo=r(zK," to load the model weights."),zK.forEach(t),PZo=i(Nw),T(Hv.$$.fragment,Nw),Nw.forEach(t),IZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(cL.$$.fragment,_a),qZo=i(_a),Aue=n(_a,"P",{});var Ght=s(Aue);NZo=r(Ght,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ght.forEach(t),jZo=i(_a),Qa=n(_a,"P",{});var jw=s(Qa);DZo=r(jw,"The model class to instantiate is selected based on the "),yue=n(jw,"CODE",{});var Oht=s(yue);GZo=r(Oht,"model_type"),Oht.forEach(t),OZo=r(jw,` property of the config object (either
passed as an argument or loaded from `),Lue=n(jw,"CODE",{});var Vht=s(Lue);VZo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),XZo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(jw,"CODE",{});var Xht=s(xue);zZo=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),QZo=r(jw,":"),jw.forEach(t),WZo=i(_a),Cd=n(_a,"UL",{});var QK=s(Cd);Uv=n(QK,"LI",{});var Q9e=s(Uv);$ue=n(Q9e,"STRONG",{});var zht=s($ue);HZo=r(zht,"deit"),zht.forEach(t),UZo=r(Q9e," \u2014 "),kX=n(Q9e,"A",{href:!0});var Qht=s(kX);JZo=r(Qht,"DeiTForMaskedImageModeling"),Qht.forEach(t),YZo=r(Q9e," (DeiT model)"),Q9e.forEach(t),KZo=i(QK),Jv=n(QK,"LI",{});var W9e=s(Jv);kue=n(W9e,"STRONG",{});var Wht=s(kue);ZZo=r(Wht,"swin"),Wht.forEach(t),eer=r(W9e," \u2014 "),SX=n(W9e,"A",{href:!0});var Hht=s(SX);oer=r(Hht,"SwinForMaskedImageModeling"),Hht.forEach(t),rer=r(W9e," (Swin model)"),W9e.forEach(t),ter=i(QK),Yv=n(QK,"LI",{});var H9e=s(Yv);Sue=n(H9e,"STRONG",{});var Uht=s(Sue);aer=r(Uht,"vit"),Uht.forEach(t),ner=r(H9e," \u2014 "),RX=n(H9e,"A",{href:!0});var Jht=s(RX);ser=r(Jht,"ViTForMaskedImageModeling"),Jht.forEach(t),ler=r(H9e," (ViT model)"),H9e.forEach(t),QK.forEach(t),ier=i(_a),Kv=n(_a,"P",{});var U9e=s(Kv);der=r(U9e,"The model is set in evaluation mode by default using "),Rue=n(U9e,"CODE",{});var Yht=s(Rue);cer=r(Yht,"model.eval()"),Yht.forEach(t),fer=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(U9e,"CODE",{});var Kht=s(Bue);mer=r(Kht,"model.train()"),Kht.forEach(t),U9e.forEach(t),ger=i(_a),T(Zv.$$.fragment,_a),_a.forEach(t),al.forEach(t),DIe=i(f),wd=n(f,"H2",{class:!0});var zNe=s(wd);eF=n(zNe,"A",{id:!0,class:!0,href:!0});var Zht=s(eF);Pue=n(Zht,"SPAN",{});var ept=s(Pue);T(fL.$$.fragment,ept),ept.forEach(t),Zht.forEach(t),her=i(zNe),Iue=n(zNe,"SPAN",{});var opt=s(Iue);per=r(opt,"AutoModelForObjectDetection"),opt.forEach(t),zNe.forEach(t),GIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(mL.$$.fragment,nl),uer=i(nl),Ad=n(nl,"P",{});var WK=s(Ad);_er=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BX=n(WK,"A",{href:!0});var rpt=s(BX);ber=r(rpt,"from_pretrained()"),rpt.forEach(t),ver=r(WK," class method or the "),PX=n(WK,"A",{href:!0});var tpt=s(PX);Fer=r(tpt,"from_config()"),tpt.forEach(t),Ter=r(WK,` class
method.`),WK.forEach(t),Mer=i(nl),gL=n(nl,"P",{});var QNe=s(gL);Eer=r(QNe,"This class cannot be instantiated directly using "),que=n(QNe,"CODE",{});var apt=s(que);Cer=r(apt,"__init__()"),apt.forEach(t),wer=r(QNe," (throws an error)."),QNe.forEach(t),Aer=i(nl),Tt=n(nl,"DIV",{class:!0});var Dw=s(Tt);T(hL.$$.fragment,Dw),yer=i(Dw),Nue=n(Dw,"P",{});var npt=s(Nue);Ler=r(npt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),npt.forEach(t),xer=i(Dw),yd=n(Dw,"P",{});var HK=s(yd);$er=r(HK,`Note:
Loading a model from its configuration file does `),jue=n(HK,"STRONG",{});var spt=s(jue);ker=r(spt,"not"),spt.forEach(t),Ser=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(HK,"A",{href:!0});var lpt=s(IX);Rer=r(lpt,"from_pretrained()"),lpt.forEach(t),Ber=r(HK," to load the model weights."),HK.forEach(t),Per=i(Dw),T(oF.$$.fragment,Dw),Dw.forEach(t),Ier=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(pL.$$.fragment,ba),qer=i(ba),Due=n(ba,"P",{});var ipt=s(Due);Ner=r(ipt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ipt.forEach(t),jer=i(ba),Wa=n(ba,"P",{});var Gw=s(Wa);Der=r(Gw,"The model class to instantiate is selected based on the "),Gue=n(Gw,"CODE",{});var dpt=s(Gue);Ger=r(dpt,"model_type"),dpt.forEach(t),Oer=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Oue=n(Gw,"CODE",{});var cpt=s(Oue);Ver=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),Xer=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(Gw,"CODE",{});var fpt=s(Vue);zer=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),Qer=r(Gw,":"),Gw.forEach(t),Wer=i(ba),uL=n(ba,"UL",{});var WNe=s(uL);rF=n(WNe,"LI",{});var J9e=s(rF);Xue=n(J9e,"STRONG",{});var mpt=s(Xue);Her=r(mpt,"detr"),mpt.forEach(t),Uer=r(J9e," \u2014 "),qX=n(J9e,"A",{href:!0});var gpt=s(qX);Jer=r(gpt,"DetrForObjectDetection"),gpt.forEach(t),Yer=r(J9e," (DETR model)"),J9e.forEach(t),Ker=i(WNe),tF=n(WNe,"LI",{});var Y9e=s(tF);zue=n(Y9e,"STRONG",{});var hpt=s(zue);Zer=r(hpt,"yolos"),hpt.forEach(t),eor=r(Y9e," \u2014 "),NX=n(Y9e,"A",{href:!0});var ppt=s(NX);oor=r(ppt,"YolosForObjectDetection"),ppt.forEach(t),ror=r(Y9e," (YOLOS model)"),Y9e.forEach(t),WNe.forEach(t),tor=i(ba),aF=n(ba,"P",{});var K9e=s(aF);aor=r(K9e,"The model is set in evaluation mode by default using "),Que=n(K9e,"CODE",{});var upt=s(Que);nor=r(upt,"model.eval()"),upt.forEach(t),sor=r(K9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(K9e,"CODE",{});var _pt=s(Wue);lor=r(_pt,"model.train()"),_pt.forEach(t),K9e.forEach(t),ior=i(ba),T(nF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),OIe=i(f),Ld=n(f,"H2",{class:!0});var HNe=s(Ld);sF=n(HNe,"A",{id:!0,class:!0,href:!0});var bpt=s(sF);Hue=n(bpt,"SPAN",{});var vpt=s(Hue);T(_L.$$.fragment,vpt),vpt.forEach(t),bpt.forEach(t),dor=i(HNe),Uue=n(HNe,"SPAN",{});var Fpt=s(Uue);cor=r(Fpt,"AutoModelForImageSegmentation"),Fpt.forEach(t),HNe.forEach(t),VIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(bL.$$.fragment,sl),mor=i(sl),xd=n(sl,"P",{});var UK=s(xd);gor=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jX=n(UK,"A",{href:!0});var Tpt=s(jX);hor=r(Tpt,"from_pretrained()"),Tpt.forEach(t),por=r(UK," class method or the "),DX=n(UK,"A",{href:!0});var Mpt=s(DX);uor=r(Mpt,"from_config()"),Mpt.forEach(t),_or=r(UK,` class
method.`),UK.forEach(t),bor=i(sl),vL=n(sl,"P",{});var UNe=s(vL);vor=r(UNe,"This class cannot be instantiated directly using "),Jue=n(UNe,"CODE",{});var Ept=s(Jue);For=r(Ept,"__init__()"),Ept.forEach(t),Tor=r(UNe," (throws an error)."),UNe.forEach(t),Mor=i(sl),Mt=n(sl,"DIV",{class:!0});var Ow=s(Mt);T(FL.$$.fragment,Ow),Eor=i(Ow),Yue=n(Ow,"P",{});var Cpt=s(Yue);Cor=r(Cpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cpt.forEach(t),wor=i(Ow),$d=n(Ow,"P",{});var JK=s($d);Aor=r(JK,`Note:
Loading a model from its configuration file does `),Kue=n(JK,"STRONG",{});var wpt=s(Kue);yor=r(wpt,"not"),wpt.forEach(t),Lor=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(JK,"A",{href:!0});var Apt=s(GX);xor=r(Apt,"from_pretrained()"),Apt.forEach(t),$or=r(JK," to load the model weights."),JK.forEach(t),kor=i(Ow),T(lF.$$.fragment,Ow),Ow.forEach(t),Sor=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(TL.$$.fragment,va),Ror=i(va),Zue=n(va,"P",{});var ypt=s(Zue);Bor=r(ypt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ypt.forEach(t),Por=i(va),Ha=n(va,"P",{});var Vw=s(Ha);Ior=r(Vw,"The model class to instantiate is selected based on the "),e_e=n(Vw,"CODE",{});var Lpt=s(e_e);qor=r(Lpt,"model_type"),Lpt.forEach(t),Nor=r(Vw,` property of the config object (either
passed as an argument or loaded from `),o_e=n(Vw,"CODE",{});var xpt=s(o_e);jor=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),Dor=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(Vw,"CODE",{});var $pt=s(r_e);Gor=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),Oor=r(Vw,":"),Vw.forEach(t),Vor=i(va),t_e=n(va,"UL",{});var kpt=s(t_e);iF=n(kpt,"LI",{});var Z9e=s(iF);a_e=n(Z9e,"STRONG",{});var Spt=s(a_e);Xor=r(Spt,"detr"),Spt.forEach(t),zor=r(Z9e," \u2014 "),OX=n(Z9e,"A",{href:!0});var Rpt=s(OX);Qor=r(Rpt,"DetrForSegmentation"),Rpt.forEach(t),Wor=r(Z9e," (DETR model)"),Z9e.forEach(t),kpt.forEach(t),Hor=i(va),dF=n(va,"P",{});var e$e=s(dF);Uor=r(e$e,"The model is set in evaluation mode by default using "),n_e=n(e$e,"CODE",{});var Bpt=s(n_e);Jor=r(Bpt,"model.eval()"),Bpt.forEach(t),Yor=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(e$e,"CODE",{});var Ppt=s(s_e);Kor=r(Ppt,"model.train()"),Ppt.forEach(t),e$e.forEach(t),Zor=i(va),T(cF.$$.fragment,va),va.forEach(t),sl.forEach(t),XIe=i(f),kd=n(f,"H2",{class:!0});var JNe=s(kd);fF=n(JNe,"A",{id:!0,class:!0,href:!0});var Ipt=s(fF);l_e=n(Ipt,"SPAN",{});var qpt=s(l_e);T(ML.$$.fragment,qpt),qpt.forEach(t),Ipt.forEach(t),err=i(JNe),i_e=n(JNe,"SPAN",{});var Npt=s(i_e);orr=r(Npt,"AutoModelForSemanticSegmentation"),Npt.forEach(t),JNe.forEach(t),zIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(EL.$$.fragment,ll),rrr=i(ll),Sd=n(ll,"P",{});var YK=s(Sd);trr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VX=n(YK,"A",{href:!0});var jpt=s(VX);arr=r(jpt,"from_pretrained()"),jpt.forEach(t),nrr=r(YK," class method or the "),XX=n(YK,"A",{href:!0});var Dpt=s(XX);srr=r(Dpt,"from_config()"),Dpt.forEach(t),lrr=r(YK,` class
method.`),YK.forEach(t),irr=i(ll),CL=n(ll,"P",{});var YNe=s(CL);drr=r(YNe,"This class cannot be instantiated directly using "),d_e=n(YNe,"CODE",{});var Gpt=s(d_e);crr=r(Gpt,"__init__()"),Gpt.forEach(t),frr=r(YNe," (throws an error)."),YNe.forEach(t),mrr=i(ll),Et=n(ll,"DIV",{class:!0});var Xw=s(Et);T(wL.$$.fragment,Xw),grr=i(Xw),c_e=n(Xw,"P",{});var Opt=s(c_e);hrr=r(Opt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Opt.forEach(t),prr=i(Xw),Rd=n(Xw,"P",{});var KK=s(Rd);urr=r(KK,`Note:
Loading a model from its configuration file does `),f_e=n(KK,"STRONG",{});var Vpt=s(f_e);_rr=r(Vpt,"not"),Vpt.forEach(t),brr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(KK,"A",{href:!0});var Xpt=s(zX);vrr=r(Xpt,"from_pretrained()"),Xpt.forEach(t),Frr=r(KK," to load the model weights."),KK.forEach(t),Trr=i(Xw),T(mF.$$.fragment,Xw),Xw.forEach(t),Mrr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(AL.$$.fragment,Fa),Err=i(Fa),m_e=n(Fa,"P",{});var zpt=s(m_e);Crr=r(zpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zpt.forEach(t),wrr=i(Fa),Ua=n(Fa,"P",{});var zw=s(Ua);Arr=r(zw,"The model class to instantiate is selected based on the "),g_e=n(zw,"CODE",{});var Qpt=s(g_e);yrr=r(Qpt,"model_type"),Qpt.forEach(t),Lrr=r(zw,` property of the config object (either
passed as an argument or loaded from `),h_e=n(zw,"CODE",{});var Wpt=s(h_e);xrr=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),$rr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(zw,"CODE",{});var Hpt=s(p_e);krr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Srr=r(zw,":"),zw.forEach(t),Rrr=i(Fa),Ja=n(Fa,"UL",{});var Qw=s(Ja);gF=n(Qw,"LI",{});var o$e=s(gF);u_e=n(o$e,"STRONG",{});var Upt=s(u_e);Brr=r(Upt,"beit"),Upt.forEach(t),Prr=r(o$e," \u2014 "),QX=n(o$e,"A",{href:!0});var Jpt=s(QX);Irr=r(Jpt,"BeitForSemanticSegmentation"),Jpt.forEach(t),qrr=r(o$e," (BEiT model)"),o$e.forEach(t),Nrr=i(Qw),hF=n(Qw,"LI",{});var r$e=s(hF);__e=n(r$e,"STRONG",{});var Ypt=s(__e);jrr=r(Ypt,"data2vec-vision"),Ypt.forEach(t),Drr=r(r$e," \u2014 "),WX=n(r$e,"A",{href:!0});var Kpt=s(WX);Grr=r(Kpt,"Data2VecVisionForSemanticSegmentation"),Kpt.forEach(t),Orr=r(r$e," (Data2VecVision model)"),r$e.forEach(t),Vrr=i(Qw),pF=n(Qw,"LI",{});var t$e=s(pF);b_e=n(t$e,"STRONG",{});var Zpt=s(b_e);Xrr=r(Zpt,"dpt"),Zpt.forEach(t),zrr=r(t$e," \u2014 "),HX=n(t$e,"A",{href:!0});var eut=s(HX);Qrr=r(eut,"DPTForSemanticSegmentation"),eut.forEach(t),Wrr=r(t$e," (DPT model)"),t$e.forEach(t),Hrr=i(Qw),uF=n(Qw,"LI",{});var a$e=s(uF);v_e=n(a$e,"STRONG",{});var out=s(v_e);Urr=r(out,"segformer"),out.forEach(t),Jrr=r(a$e," \u2014 "),UX=n(a$e,"A",{href:!0});var rut=s(UX);Yrr=r(rut,"SegformerForSemanticSegmentation"),rut.forEach(t),Krr=r(a$e," (SegFormer model)"),a$e.forEach(t),Qw.forEach(t),Zrr=i(Fa),_F=n(Fa,"P",{});var n$e=s(_F);etr=r(n$e,"The model is set in evaluation mode by default using "),F_e=n(n$e,"CODE",{});var tut=s(F_e);otr=r(tut,"model.eval()"),tut.forEach(t),rtr=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(n$e,"CODE",{});var aut=s(T_e);ttr=r(aut,"model.train()"),aut.forEach(t),n$e.forEach(t),atr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),QIe=i(f),Bd=n(f,"H2",{class:!0});var KNe=s(Bd);vF=n(KNe,"A",{id:!0,class:!0,href:!0});var nut=s(vF);M_e=n(nut,"SPAN",{});var sut=s(M_e);T(yL.$$.fragment,sut),sut.forEach(t),nut.forEach(t),ntr=i(KNe),E_e=n(KNe,"SPAN",{});var lut=s(E_e);str=r(lut,"AutoModelForInstanceSegmentation"),lut.forEach(t),KNe.forEach(t),WIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(LL.$$.fragment,il),ltr=i(il),Pd=n(il,"P",{});var ZK=s(Pd);itr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JX=n(ZK,"A",{href:!0});var iut=s(JX);dtr=r(iut,"from_pretrained()"),iut.forEach(t),ctr=r(ZK," class method or the "),YX=n(ZK,"A",{href:!0});var dut=s(YX);ftr=r(dut,"from_config()"),dut.forEach(t),mtr=r(ZK,` class
method.`),ZK.forEach(t),gtr=i(il),xL=n(il,"P",{});var ZNe=s(xL);htr=r(ZNe,"This class cannot be instantiated directly using "),C_e=n(ZNe,"CODE",{});var cut=s(C_e);ptr=r(cut,"__init__()"),cut.forEach(t),utr=r(ZNe," (throws an error)."),ZNe.forEach(t),_tr=i(il),Ct=n(il,"DIV",{class:!0});var Ww=s(Ct);T($L.$$.fragment,Ww),btr=i(Ww),w_e=n(Ww,"P",{});var fut=s(w_e);vtr=r(fut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fut.forEach(t),Ftr=i(Ww),Id=n(Ww,"P",{});var eZ=s(Id);Ttr=r(eZ,`Note:
Loading a model from its configuration file does `),A_e=n(eZ,"STRONG",{});var mut=s(A_e);Mtr=r(mut,"not"),mut.forEach(t),Etr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(eZ,"A",{href:!0});var gut=s(KX);Ctr=r(gut,"from_pretrained()"),gut.forEach(t),wtr=r(eZ," to load the model weights."),eZ.forEach(t),Atr=i(Ww),T(FF.$$.fragment,Ww),Ww.forEach(t),ytr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(kL.$$.fragment,Ta),Ltr=i(Ta),y_e=n(Ta,"P",{});var hut=s(y_e);xtr=r(hut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hut.forEach(t),$tr=i(Ta),Ya=n(Ta,"P",{});var Hw=s(Ya);ktr=r(Hw,"The model class to instantiate is selected based on the "),L_e=n(Hw,"CODE",{});var put=s(L_e);Str=r(put,"model_type"),put.forEach(t),Rtr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),x_e=n(Hw,"CODE",{});var uut=s(x_e);Btr=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),Ptr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(Hw,"CODE",{});var _ut=s($_e);Itr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),qtr=r(Hw,":"),Hw.forEach(t),Ntr=i(Ta),k_e=n(Ta,"UL",{});var but=s(k_e);TF=n(but,"LI",{});var s$e=s(TF);S_e=n(s$e,"STRONG",{});var vut=s(S_e);jtr=r(vut,"maskformer"),vut.forEach(t),Dtr=r(s$e," \u2014 "),ZX=n(s$e,"A",{href:!0});var Fut=s(ZX);Gtr=r(Fut,"MaskFormerForInstanceSegmentation"),Fut.forEach(t),Otr=r(s$e," (MaskFormer model)"),s$e.forEach(t),but.forEach(t),Vtr=i(Ta),MF=n(Ta,"P",{});var l$e=s(MF);Xtr=r(l$e,"The model is set in evaluation mode by default using "),R_e=n(l$e,"CODE",{});var Tut=s(R_e);ztr=r(Tut,"model.eval()"),Tut.forEach(t),Qtr=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=n(l$e,"CODE",{});var Mut=s(B_e);Wtr=r(Mut,"model.train()"),Mut.forEach(t),l$e.forEach(t),Htr=i(Ta),T(EF.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),HIe=i(f),qd=n(f,"H2",{class:!0});var eje=s(qd);CF=n(eje,"A",{id:!0,class:!0,href:!0});var Eut=s(CF);P_e=n(Eut,"SPAN",{});var Cut=s(P_e);T(SL.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),Utr=i(eje),I_e=n(eje,"SPAN",{});var wut=s(I_e);Jtr=r(wut,"TFAutoModel"),wut.forEach(t),eje.forEach(t),UIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(RL.$$.fragment,dl),Ytr=i(dl),Nd=n(dl,"P",{});var oZ=s(Nd);Ktr=r(oZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ez=n(oZ,"A",{href:!0});var Aut=s(ez);Ztr=r(Aut,"from_pretrained()"),Aut.forEach(t),ear=r(oZ," class method or the "),oz=n(oZ,"A",{href:!0});var yut=s(oz);oar=r(yut,"from_config()"),yut.forEach(t),rar=r(oZ,` class
method.`),oZ.forEach(t),tar=i(dl),BL=n(dl,"P",{});var oje=s(BL);aar=r(oje,"This class cannot be instantiated directly using "),q_e=n(oje,"CODE",{});var Lut=s(q_e);nar=r(Lut,"__init__()"),Lut.forEach(t),sar=r(oje," (throws an error)."),oje.forEach(t),lar=i(dl),wt=n(dl,"DIV",{class:!0});var Uw=s(wt);T(PL.$$.fragment,Uw),iar=i(Uw),N_e=n(Uw,"P",{});var xut=s(N_e);dar=r(xut,"Instantiates one of the base model classes of the library from a configuration."),xut.forEach(t),car=i(Uw),jd=n(Uw,"P",{});var rZ=s(jd);far=r(rZ,`Note:
Loading a model from its configuration file does `),j_e=n(rZ,"STRONG",{});var $ut=s(j_e);mar=r($ut,"not"),$ut.forEach(t),gar=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(rZ,"A",{href:!0});var kut=s(rz);har=r(kut,"from_pretrained()"),kut.forEach(t),par=r(rZ," to load the model weights."),rZ.forEach(t),uar=i(Uw),T(wF.$$.fragment,Uw),Uw.forEach(t),_ar=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(IL.$$.fragment,cl),bar=i(cl),D_e=n(cl,"P",{});var Sut=s(D_e);Far=r(Sut,"Instantiate one of the base model classes of the library from a pretrained model."),Sut.forEach(t),Tar=i(cl),Ka=n(cl,"P",{});var Jw=s(Ka);Mar=r(Jw,"The model class to instantiate is selected based on the "),G_e=n(Jw,"CODE",{});var Rut=s(G_e);Ear=r(Rut,"model_type"),Rut.forEach(t),Car=r(Jw,` property of the config object (either
passed as an argument or loaded from `),O_e=n(Jw,"CODE",{});var But=s(O_e);war=r(But,"pretrained_model_name_or_path"),But.forEach(t),Aar=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(Jw,"CODE",{});var Put=s(V_e);yar=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),Lar=r(Jw,":"),Jw.forEach(t),xar=i(cl),j=n(cl,"UL",{});var D=s(j);AF=n(D,"LI",{});var i$e=s(AF);X_e=n(i$e,"STRONG",{});var Iut=s(X_e);$ar=r(Iut,"albert"),Iut.forEach(t),kar=r(i$e," \u2014 "),tz=n(i$e,"A",{href:!0});var qut=s(tz);Sar=r(qut,"TFAlbertModel"),qut.forEach(t),Rar=r(i$e," (ALBERT model)"),i$e.forEach(t),Bar=i(D),yF=n(D,"LI",{});var d$e=s(yF);z_e=n(d$e,"STRONG",{});var Nut=s(z_e);Par=r(Nut,"bart"),Nut.forEach(t),Iar=r(d$e," \u2014 "),az=n(d$e,"A",{href:!0});var jut=s(az);qar=r(jut,"TFBartModel"),jut.forEach(t),Nar=r(d$e," (BART model)"),d$e.forEach(t),jar=i(D),LF=n(D,"LI",{});var c$e=s(LF);Q_e=n(c$e,"STRONG",{});var Dut=s(Q_e);Dar=r(Dut,"bert"),Dut.forEach(t),Gar=r(c$e," \u2014 "),nz=n(c$e,"A",{href:!0});var Gut=s(nz);Oar=r(Gut,"TFBertModel"),Gut.forEach(t),Var=r(c$e," (BERT model)"),c$e.forEach(t),Xar=i(D),xF=n(D,"LI",{});var f$e=s(xF);W_e=n(f$e,"STRONG",{});var Out=s(W_e);zar=r(Out,"blenderbot"),Out.forEach(t),Qar=r(f$e," \u2014 "),sz=n(f$e,"A",{href:!0});var Vut=s(sz);War=r(Vut,"TFBlenderbotModel"),Vut.forEach(t),Har=r(f$e," (Blenderbot model)"),f$e.forEach(t),Uar=i(D),$F=n(D,"LI",{});var m$e=s($F);H_e=n(m$e,"STRONG",{});var Xut=s(H_e);Jar=r(Xut,"blenderbot-small"),Xut.forEach(t),Yar=r(m$e," \u2014 "),lz=n(m$e,"A",{href:!0});var zut=s(lz);Kar=r(zut,"TFBlenderbotSmallModel"),zut.forEach(t),Zar=r(m$e," (BlenderbotSmall model)"),m$e.forEach(t),enr=i(D),kF=n(D,"LI",{});var g$e=s(kF);U_e=n(g$e,"STRONG",{});var Qut=s(U_e);onr=r(Qut,"camembert"),Qut.forEach(t),rnr=r(g$e," \u2014 "),iz=n(g$e,"A",{href:!0});var Wut=s(iz);tnr=r(Wut,"TFCamembertModel"),Wut.forEach(t),anr=r(g$e," (CamemBERT model)"),g$e.forEach(t),nnr=i(D),SF=n(D,"LI",{});var h$e=s(SF);J_e=n(h$e,"STRONG",{});var Hut=s(J_e);snr=r(Hut,"clip"),Hut.forEach(t),lnr=r(h$e," \u2014 "),dz=n(h$e,"A",{href:!0});var Uut=s(dz);inr=r(Uut,"TFCLIPModel"),Uut.forEach(t),dnr=r(h$e," (CLIP model)"),h$e.forEach(t),cnr=i(D),RF=n(D,"LI",{});var p$e=s(RF);Y_e=n(p$e,"STRONG",{});var Jut=s(Y_e);fnr=r(Jut,"convbert"),Jut.forEach(t),mnr=r(p$e," \u2014 "),cz=n(p$e,"A",{href:!0});var Yut=s(cz);gnr=r(Yut,"TFConvBertModel"),Yut.forEach(t),hnr=r(p$e," (ConvBERT model)"),p$e.forEach(t),pnr=i(D),BF=n(D,"LI",{});var u$e=s(BF);K_e=n(u$e,"STRONG",{});var Kut=s(K_e);unr=r(Kut,"convnext"),Kut.forEach(t),_nr=r(u$e," \u2014 "),fz=n(u$e,"A",{href:!0});var Zut=s(fz);bnr=r(Zut,"TFConvNextModel"),Zut.forEach(t),vnr=r(u$e," (ConvNext model)"),u$e.forEach(t),Fnr=i(D),PF=n(D,"LI",{});var _$e=s(PF);Z_e=n(_$e,"STRONG",{});var e_t=s(Z_e);Tnr=r(e_t,"ctrl"),e_t.forEach(t),Mnr=r(_$e," \u2014 "),mz=n(_$e,"A",{href:!0});var o_t=s(mz);Enr=r(o_t,"TFCTRLModel"),o_t.forEach(t),Cnr=r(_$e," (CTRL model)"),_$e.forEach(t),wnr=i(D),IF=n(D,"LI",{});var b$e=s(IF);e1e=n(b$e,"STRONG",{});var r_t=s(e1e);Anr=r(r_t,"data2vec-vision"),r_t.forEach(t),ynr=r(b$e," \u2014 "),gz=n(b$e,"A",{href:!0});var t_t=s(gz);Lnr=r(t_t,"TFData2VecVisionModel"),t_t.forEach(t),xnr=r(b$e," (Data2VecVision model)"),b$e.forEach(t),$nr=i(D),qF=n(D,"LI",{});var v$e=s(qF);o1e=n(v$e,"STRONG",{});var a_t=s(o1e);knr=r(a_t,"deberta"),a_t.forEach(t),Snr=r(v$e," \u2014 "),hz=n(v$e,"A",{href:!0});var n_t=s(hz);Rnr=r(n_t,"TFDebertaModel"),n_t.forEach(t),Bnr=r(v$e," (DeBERTa model)"),v$e.forEach(t),Pnr=i(D),NF=n(D,"LI",{});var F$e=s(NF);r1e=n(F$e,"STRONG",{});var s_t=s(r1e);Inr=r(s_t,"deberta-v2"),s_t.forEach(t),qnr=r(F$e," \u2014 "),pz=n(F$e,"A",{href:!0});var l_t=s(pz);Nnr=r(l_t,"TFDebertaV2Model"),l_t.forEach(t),jnr=r(F$e," (DeBERTa-v2 model)"),F$e.forEach(t),Dnr=i(D),jF=n(D,"LI",{});var T$e=s(jF);t1e=n(T$e,"STRONG",{});var i_t=s(t1e);Gnr=r(i_t,"distilbert"),i_t.forEach(t),Onr=r(T$e," \u2014 "),uz=n(T$e,"A",{href:!0});var d_t=s(uz);Vnr=r(d_t,"TFDistilBertModel"),d_t.forEach(t),Xnr=r(T$e," (DistilBERT model)"),T$e.forEach(t),znr=i(D),DF=n(D,"LI",{});var M$e=s(DF);a1e=n(M$e,"STRONG",{});var c_t=s(a1e);Qnr=r(c_t,"dpr"),c_t.forEach(t),Wnr=r(M$e," \u2014 "),_z=n(M$e,"A",{href:!0});var f_t=s(_z);Hnr=r(f_t,"TFDPRQuestionEncoder"),f_t.forEach(t),Unr=r(M$e," (DPR model)"),M$e.forEach(t),Jnr=i(D),GF=n(D,"LI",{});var E$e=s(GF);n1e=n(E$e,"STRONG",{});var m_t=s(n1e);Ynr=r(m_t,"electra"),m_t.forEach(t),Knr=r(E$e," \u2014 "),bz=n(E$e,"A",{href:!0});var g_t=s(bz);Znr=r(g_t,"TFElectraModel"),g_t.forEach(t),esr=r(E$e," (ELECTRA model)"),E$e.forEach(t),osr=i(D),OF=n(D,"LI",{});var C$e=s(OF);s1e=n(C$e,"STRONG",{});var h_t=s(s1e);rsr=r(h_t,"flaubert"),h_t.forEach(t),tsr=r(C$e," \u2014 "),vz=n(C$e,"A",{href:!0});var p_t=s(vz);asr=r(p_t,"TFFlaubertModel"),p_t.forEach(t),nsr=r(C$e," (FlauBERT model)"),C$e.forEach(t),ssr=i(D),Bs=n(D,"LI",{});var g$=s(Bs);l1e=n(g$,"STRONG",{});var u_t=s(l1e);lsr=r(u_t,"funnel"),u_t.forEach(t),isr=r(g$," \u2014 "),Fz=n(g$,"A",{href:!0});var __t=s(Fz);dsr=r(__t,"TFFunnelModel"),__t.forEach(t),csr=r(g$," or "),Tz=n(g$,"A",{href:!0});var b_t=s(Tz);fsr=r(b_t,"TFFunnelBaseModel"),b_t.forEach(t),msr=r(g$," (Funnel Transformer model)"),g$.forEach(t),gsr=i(D),VF=n(D,"LI",{});var w$e=s(VF);i1e=n(w$e,"STRONG",{});var v_t=s(i1e);hsr=r(v_t,"gpt2"),v_t.forEach(t),psr=r(w$e," \u2014 "),Mz=n(w$e,"A",{href:!0});var F_t=s(Mz);usr=r(F_t,"TFGPT2Model"),F_t.forEach(t),_sr=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),bsr=i(D),XF=n(D,"LI",{});var A$e=s(XF);d1e=n(A$e,"STRONG",{});var T_t=s(d1e);vsr=r(T_t,"gptj"),T_t.forEach(t),Fsr=r(A$e," \u2014 "),Ez=n(A$e,"A",{href:!0});var M_t=s(Ez);Tsr=r(M_t,"TFGPTJModel"),M_t.forEach(t),Msr=r(A$e," (GPT-J model)"),A$e.forEach(t),Esr=i(D),zF=n(D,"LI",{});var y$e=s(zF);c1e=n(y$e,"STRONG",{});var E_t=s(c1e);Csr=r(E_t,"hubert"),E_t.forEach(t),wsr=r(y$e," \u2014 "),Cz=n(y$e,"A",{href:!0});var C_t=s(Cz);Asr=r(C_t,"TFHubertModel"),C_t.forEach(t),ysr=r(y$e," (Hubert model)"),y$e.forEach(t),Lsr=i(D),QF=n(D,"LI",{});var L$e=s(QF);f1e=n(L$e,"STRONG",{});var w_t=s(f1e);xsr=r(w_t,"layoutlm"),w_t.forEach(t),$sr=r(L$e," \u2014 "),wz=n(L$e,"A",{href:!0});var A_t=s(wz);ksr=r(A_t,"TFLayoutLMModel"),A_t.forEach(t),Ssr=r(L$e," (LayoutLM model)"),L$e.forEach(t),Rsr=i(D),WF=n(D,"LI",{});var x$e=s(WF);m1e=n(x$e,"STRONG",{});var y_t=s(m1e);Bsr=r(y_t,"led"),y_t.forEach(t),Psr=r(x$e," \u2014 "),Az=n(x$e,"A",{href:!0});var L_t=s(Az);Isr=r(L_t,"TFLEDModel"),L_t.forEach(t),qsr=r(x$e," (LED model)"),x$e.forEach(t),Nsr=i(D),HF=n(D,"LI",{});var $$e=s(HF);g1e=n($$e,"STRONG",{});var x_t=s(g1e);jsr=r(x_t,"longformer"),x_t.forEach(t),Dsr=r($$e," \u2014 "),yz=n($$e,"A",{href:!0});var $_t=s(yz);Gsr=r($_t,"TFLongformerModel"),$_t.forEach(t),Osr=r($$e," (Longformer model)"),$$e.forEach(t),Vsr=i(D),UF=n(D,"LI",{});var k$e=s(UF);h1e=n(k$e,"STRONG",{});var k_t=s(h1e);Xsr=r(k_t,"lxmert"),k_t.forEach(t),zsr=r(k$e," \u2014 "),Lz=n(k$e,"A",{href:!0});var S_t=s(Lz);Qsr=r(S_t,"TFLxmertModel"),S_t.forEach(t),Wsr=r(k$e," (LXMERT model)"),k$e.forEach(t),Hsr=i(D),JF=n(D,"LI",{});var S$e=s(JF);p1e=n(S$e,"STRONG",{});var R_t=s(p1e);Usr=r(R_t,"marian"),R_t.forEach(t),Jsr=r(S$e," \u2014 "),xz=n(S$e,"A",{href:!0});var B_t=s(xz);Ysr=r(B_t,"TFMarianModel"),B_t.forEach(t),Ksr=r(S$e," (Marian model)"),S$e.forEach(t),Zsr=i(D),YF=n(D,"LI",{});var R$e=s(YF);u1e=n(R$e,"STRONG",{});var P_t=s(u1e);elr=r(P_t,"mbart"),P_t.forEach(t),olr=r(R$e," \u2014 "),$z=n(R$e,"A",{href:!0});var I_t=s($z);rlr=r(I_t,"TFMBartModel"),I_t.forEach(t),tlr=r(R$e," (mBART model)"),R$e.forEach(t),alr=i(D),KF=n(D,"LI",{});var B$e=s(KF);_1e=n(B$e,"STRONG",{});var q_t=s(_1e);nlr=r(q_t,"mobilebert"),q_t.forEach(t),slr=r(B$e," \u2014 "),kz=n(B$e,"A",{href:!0});var N_t=s(kz);llr=r(N_t,"TFMobileBertModel"),N_t.forEach(t),ilr=r(B$e," (MobileBERT model)"),B$e.forEach(t),dlr=i(D),ZF=n(D,"LI",{});var P$e=s(ZF);b1e=n(P$e,"STRONG",{});var j_t=s(b1e);clr=r(j_t,"mpnet"),j_t.forEach(t),flr=r(P$e," \u2014 "),Sz=n(P$e,"A",{href:!0});var D_t=s(Sz);mlr=r(D_t,"TFMPNetModel"),D_t.forEach(t),glr=r(P$e," (MPNet model)"),P$e.forEach(t),hlr=i(D),e0=n(D,"LI",{});var I$e=s(e0);v1e=n(I$e,"STRONG",{});var G_t=s(v1e);plr=r(G_t,"mt5"),G_t.forEach(t),ulr=r(I$e," \u2014 "),Rz=n(I$e,"A",{href:!0});var O_t=s(Rz);_lr=r(O_t,"TFMT5Model"),O_t.forEach(t),blr=r(I$e," (mT5 model)"),I$e.forEach(t),vlr=i(D),o0=n(D,"LI",{});var q$e=s(o0);F1e=n(q$e,"STRONG",{});var V_t=s(F1e);Flr=r(V_t,"openai-gpt"),V_t.forEach(t),Tlr=r(q$e," \u2014 "),Bz=n(q$e,"A",{href:!0});var X_t=s(Bz);Mlr=r(X_t,"TFOpenAIGPTModel"),X_t.forEach(t),Elr=r(q$e," (OpenAI GPT model)"),q$e.forEach(t),Clr=i(D),r0=n(D,"LI",{});var N$e=s(r0);T1e=n(N$e,"STRONG",{});var z_t=s(T1e);wlr=r(z_t,"pegasus"),z_t.forEach(t),Alr=r(N$e," \u2014 "),Pz=n(N$e,"A",{href:!0});var Q_t=s(Pz);ylr=r(Q_t,"TFPegasusModel"),Q_t.forEach(t),Llr=r(N$e," (Pegasus model)"),N$e.forEach(t),xlr=i(D),t0=n(D,"LI",{});var j$e=s(t0);M1e=n(j$e,"STRONG",{});var W_t=s(M1e);$lr=r(W_t,"rembert"),W_t.forEach(t),klr=r(j$e," \u2014 "),Iz=n(j$e,"A",{href:!0});var H_t=s(Iz);Slr=r(H_t,"TFRemBertModel"),H_t.forEach(t),Rlr=r(j$e," (RemBERT model)"),j$e.forEach(t),Blr=i(D),a0=n(D,"LI",{});var D$e=s(a0);E1e=n(D$e,"STRONG",{});var U_t=s(E1e);Plr=r(U_t,"roberta"),U_t.forEach(t),Ilr=r(D$e," \u2014 "),qz=n(D$e,"A",{href:!0});var J_t=s(qz);qlr=r(J_t,"TFRobertaModel"),J_t.forEach(t),Nlr=r(D$e," (RoBERTa model)"),D$e.forEach(t),jlr=i(D),n0=n(D,"LI",{});var G$e=s(n0);C1e=n(G$e,"STRONG",{});var Y_t=s(C1e);Dlr=r(Y_t,"roformer"),Y_t.forEach(t),Glr=r(G$e," \u2014 "),Nz=n(G$e,"A",{href:!0});var K_t=s(Nz);Olr=r(K_t,"TFRoFormerModel"),K_t.forEach(t),Vlr=r(G$e," (RoFormer model)"),G$e.forEach(t),Xlr=i(D),s0=n(D,"LI",{});var O$e=s(s0);w1e=n(O$e,"STRONG",{});var Z_t=s(w1e);zlr=r(Z_t,"speech_to_text"),Z_t.forEach(t),Qlr=r(O$e," \u2014 "),jz=n(O$e,"A",{href:!0});var e1t=s(jz);Wlr=r(e1t,"TFSpeech2TextModel"),e1t.forEach(t),Hlr=r(O$e," (Speech2Text model)"),O$e.forEach(t),Ulr=i(D),l0=n(D,"LI",{});var V$e=s(l0);A1e=n(V$e,"STRONG",{});var o1t=s(A1e);Jlr=r(o1t,"t5"),o1t.forEach(t),Ylr=r(V$e," \u2014 "),Dz=n(V$e,"A",{href:!0});var r1t=s(Dz);Klr=r(r1t,"TFT5Model"),r1t.forEach(t),Zlr=r(V$e," (T5 model)"),V$e.forEach(t),eir=i(D),i0=n(D,"LI",{});var X$e=s(i0);y1e=n(X$e,"STRONG",{});var t1t=s(y1e);oir=r(t1t,"tapas"),t1t.forEach(t),rir=r(X$e," \u2014 "),Gz=n(X$e,"A",{href:!0});var a1t=s(Gz);tir=r(a1t,"TFTapasModel"),a1t.forEach(t),air=r(X$e," (TAPAS model)"),X$e.forEach(t),nir=i(D),d0=n(D,"LI",{});var z$e=s(d0);L1e=n(z$e,"STRONG",{});var n1t=s(L1e);sir=r(n1t,"transfo-xl"),n1t.forEach(t),lir=r(z$e," \u2014 "),Oz=n(z$e,"A",{href:!0});var s1t=s(Oz);iir=r(s1t,"TFTransfoXLModel"),s1t.forEach(t),dir=r(z$e," (Transformer-XL model)"),z$e.forEach(t),cir=i(D),c0=n(D,"LI",{});var Q$e=s(c0);x1e=n(Q$e,"STRONG",{});var l1t=s(x1e);fir=r(l1t,"vit"),l1t.forEach(t),mir=r(Q$e," \u2014 "),Vz=n(Q$e,"A",{href:!0});var i1t=s(Vz);gir=r(i1t,"TFViTModel"),i1t.forEach(t),hir=r(Q$e," (ViT model)"),Q$e.forEach(t),pir=i(D),f0=n(D,"LI",{});var W$e=s(f0);$1e=n(W$e,"STRONG",{});var d1t=s($1e);uir=r(d1t,"vit_mae"),d1t.forEach(t),_ir=r(W$e," \u2014 "),Xz=n(W$e,"A",{href:!0});var c1t=s(Xz);bir=r(c1t,"TFViTMAEModel"),c1t.forEach(t),vir=r(W$e," (ViTMAE model)"),W$e.forEach(t),Fir=i(D),m0=n(D,"LI",{});var H$e=s(m0);k1e=n(H$e,"STRONG",{});var f1t=s(k1e);Tir=r(f1t,"wav2vec2"),f1t.forEach(t),Mir=r(H$e," \u2014 "),zz=n(H$e,"A",{href:!0});var m1t=s(zz);Eir=r(m1t,"TFWav2Vec2Model"),m1t.forEach(t),Cir=r(H$e," (Wav2Vec2 model)"),H$e.forEach(t),wir=i(D),g0=n(D,"LI",{});var U$e=s(g0);S1e=n(U$e,"STRONG",{});var g1t=s(S1e);Air=r(g1t,"xlm"),g1t.forEach(t),yir=r(U$e," \u2014 "),Qz=n(U$e,"A",{href:!0});var h1t=s(Qz);Lir=r(h1t,"TFXLMModel"),h1t.forEach(t),xir=r(U$e," (XLM model)"),U$e.forEach(t),$ir=i(D),h0=n(D,"LI",{});var J$e=s(h0);R1e=n(J$e,"STRONG",{});var p1t=s(R1e);kir=r(p1t,"xlm-roberta"),p1t.forEach(t),Sir=r(J$e," \u2014 "),Wz=n(J$e,"A",{href:!0});var u1t=s(Wz);Rir=r(u1t,"TFXLMRobertaModel"),u1t.forEach(t),Bir=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),Pir=i(D),p0=n(D,"LI",{});var Y$e=s(p0);B1e=n(Y$e,"STRONG",{});var _1t=s(B1e);Iir=r(_1t,"xlnet"),_1t.forEach(t),qir=r(Y$e," \u2014 "),Hz=n(Y$e,"A",{href:!0});var b1t=s(Hz);Nir=r(b1t,"TFXLNetModel"),b1t.forEach(t),jir=r(Y$e," (XLNet model)"),Y$e.forEach(t),D.forEach(t),Dir=i(cl),T(u0.$$.fragment,cl),cl.forEach(t),dl.forEach(t),JIe=i(f),Dd=n(f,"H2",{class:!0});var rje=s(Dd);_0=n(rje,"A",{id:!0,class:!0,href:!0});var v1t=s(_0);P1e=n(v1t,"SPAN",{});var F1t=s(P1e);T(qL.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),Gir=i(rje),I1e=n(rje,"SPAN",{});var T1t=s(I1e);Oir=r(T1t,"TFAutoModelForPreTraining"),T1t.forEach(t),rje.forEach(t),YIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(NL.$$.fragment,fl),Vir=i(fl),Gd=n(fl,"P",{});var tZ=s(Gd);Xir=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uz=n(tZ,"A",{href:!0});var M1t=s(Uz);zir=r(M1t,"from_pretrained()"),M1t.forEach(t),Qir=r(tZ," class method or the "),Jz=n(tZ,"A",{href:!0});var E1t=s(Jz);Wir=r(E1t,"from_config()"),E1t.forEach(t),Hir=r(tZ,` class
method.`),tZ.forEach(t),Uir=i(fl),jL=n(fl,"P",{});var tje=s(jL);Jir=r(tje,"This class cannot be instantiated directly using "),q1e=n(tje,"CODE",{});var C1t=s(q1e);Yir=r(C1t,"__init__()"),C1t.forEach(t),Kir=r(tje," (throws an error)."),tje.forEach(t),Zir=i(fl),At=n(fl,"DIV",{class:!0});var Yw=s(At);T(DL.$$.fragment,Yw),edr=i(Yw),N1e=n(Yw,"P",{});var w1t=s(N1e);odr=r(w1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w1t.forEach(t),rdr=i(Yw),Od=n(Yw,"P",{});var aZ=s(Od);tdr=r(aZ,`Note:
Loading a model from its configuration file does `),j1e=n(aZ,"STRONG",{});var A1t=s(j1e);adr=r(A1t,"not"),A1t.forEach(t),ndr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(aZ,"A",{href:!0});var y1t=s(Yz);sdr=r(y1t,"from_pretrained()"),y1t.forEach(t),ldr=r(aZ," to load the model weights."),aZ.forEach(t),idr=i(Yw),T(b0.$$.fragment,Yw),Yw.forEach(t),ddr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(GL.$$.fragment,ml),cdr=i(ml),D1e=n(ml,"P",{});var L1t=s(D1e);fdr=r(L1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L1t.forEach(t),mdr=i(ml),Za=n(ml,"P",{});var Kw=s(Za);gdr=r(Kw,"The model class to instantiate is selected based on the "),G1e=n(Kw,"CODE",{});var x1t=s(G1e);hdr=r(x1t,"model_type"),x1t.forEach(t),pdr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),O1e=n(Kw,"CODE",{});var $1t=s(O1e);udr=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),_dr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(Kw,"CODE",{});var k1t=s(V1e);bdr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),vdr=r(Kw,":"),Kw.forEach(t),Fdr=i(ml),se=n(ml,"UL",{});var le=s(se);v0=n(le,"LI",{});var K$e=s(v0);X1e=n(K$e,"STRONG",{});var S1t=s(X1e);Tdr=r(S1t,"albert"),S1t.forEach(t),Mdr=r(K$e," \u2014 "),Kz=n(K$e,"A",{href:!0});var R1t=s(Kz);Edr=r(R1t,"TFAlbertForPreTraining"),R1t.forEach(t),Cdr=r(K$e," (ALBERT model)"),K$e.forEach(t),wdr=i(le),F0=n(le,"LI",{});var Z$e=s(F0);z1e=n(Z$e,"STRONG",{});var B1t=s(z1e);Adr=r(B1t,"bart"),B1t.forEach(t),ydr=r(Z$e," \u2014 "),Zz=n(Z$e,"A",{href:!0});var P1t=s(Zz);Ldr=r(P1t,"TFBartForConditionalGeneration"),P1t.forEach(t),xdr=r(Z$e," (BART model)"),Z$e.forEach(t),$dr=i(le),T0=n(le,"LI",{});var eke=s(T0);Q1e=n(eke,"STRONG",{});var I1t=s(Q1e);kdr=r(I1t,"bert"),I1t.forEach(t),Sdr=r(eke," \u2014 "),eQ=n(eke,"A",{href:!0});var q1t=s(eQ);Rdr=r(q1t,"TFBertForPreTraining"),q1t.forEach(t),Bdr=r(eke," (BERT model)"),eke.forEach(t),Pdr=i(le),M0=n(le,"LI",{});var oke=s(M0);W1e=n(oke,"STRONG",{});var N1t=s(W1e);Idr=r(N1t,"camembert"),N1t.forEach(t),qdr=r(oke," \u2014 "),oQ=n(oke,"A",{href:!0});var j1t=s(oQ);Ndr=r(j1t,"TFCamembertForMaskedLM"),j1t.forEach(t),jdr=r(oke," (CamemBERT model)"),oke.forEach(t),Ddr=i(le),E0=n(le,"LI",{});var rke=s(E0);H1e=n(rke,"STRONG",{});var D1t=s(H1e);Gdr=r(D1t,"ctrl"),D1t.forEach(t),Odr=r(rke," \u2014 "),rQ=n(rke,"A",{href:!0});var G1t=s(rQ);Vdr=r(G1t,"TFCTRLLMHeadModel"),G1t.forEach(t),Xdr=r(rke," (CTRL model)"),rke.forEach(t),zdr=i(le),C0=n(le,"LI",{});var tke=s(C0);U1e=n(tke,"STRONG",{});var O1t=s(U1e);Qdr=r(O1t,"distilbert"),O1t.forEach(t),Wdr=r(tke," \u2014 "),tQ=n(tke,"A",{href:!0});var V1t=s(tQ);Hdr=r(V1t,"TFDistilBertForMaskedLM"),V1t.forEach(t),Udr=r(tke," (DistilBERT model)"),tke.forEach(t),Jdr=i(le),w0=n(le,"LI",{});var ake=s(w0);J1e=n(ake,"STRONG",{});var X1t=s(J1e);Ydr=r(X1t,"electra"),X1t.forEach(t),Kdr=r(ake," \u2014 "),aQ=n(ake,"A",{href:!0});var z1t=s(aQ);Zdr=r(z1t,"TFElectraForPreTraining"),z1t.forEach(t),ecr=r(ake," (ELECTRA model)"),ake.forEach(t),ocr=i(le),A0=n(le,"LI",{});var nke=s(A0);Y1e=n(nke,"STRONG",{});var Q1t=s(Y1e);rcr=r(Q1t,"flaubert"),Q1t.forEach(t),tcr=r(nke," \u2014 "),nQ=n(nke,"A",{href:!0});var W1t=s(nQ);acr=r(W1t,"TFFlaubertWithLMHeadModel"),W1t.forEach(t),ncr=r(nke," (FlauBERT model)"),nke.forEach(t),scr=i(le),y0=n(le,"LI",{});var ske=s(y0);K1e=n(ske,"STRONG",{});var H1t=s(K1e);lcr=r(H1t,"funnel"),H1t.forEach(t),icr=r(ske," \u2014 "),sQ=n(ske,"A",{href:!0});var U1t=s(sQ);dcr=r(U1t,"TFFunnelForPreTraining"),U1t.forEach(t),ccr=r(ske," (Funnel Transformer model)"),ske.forEach(t),fcr=i(le),L0=n(le,"LI",{});var lke=s(L0);Z1e=n(lke,"STRONG",{});var J1t=s(Z1e);mcr=r(J1t,"gpt2"),J1t.forEach(t),gcr=r(lke," \u2014 "),lQ=n(lke,"A",{href:!0});var Y1t=s(lQ);hcr=r(Y1t,"TFGPT2LMHeadModel"),Y1t.forEach(t),pcr=r(lke," (OpenAI GPT-2 model)"),lke.forEach(t),ucr=i(le),x0=n(le,"LI",{});var ike=s(x0);e7e=n(ike,"STRONG",{});var K1t=s(e7e);_cr=r(K1t,"layoutlm"),K1t.forEach(t),bcr=r(ike," \u2014 "),iQ=n(ike,"A",{href:!0});var Z1t=s(iQ);vcr=r(Z1t,"TFLayoutLMForMaskedLM"),Z1t.forEach(t),Fcr=r(ike," (LayoutLM model)"),ike.forEach(t),Tcr=i(le),$0=n(le,"LI",{});var dke=s($0);o7e=n(dke,"STRONG",{});var e7t=s(o7e);Mcr=r(e7t,"lxmert"),e7t.forEach(t),Ecr=r(dke," \u2014 "),dQ=n(dke,"A",{href:!0});var o7t=s(dQ);Ccr=r(o7t,"TFLxmertForPreTraining"),o7t.forEach(t),wcr=r(dke," (LXMERT model)"),dke.forEach(t),Acr=i(le),k0=n(le,"LI",{});var cke=s(k0);r7e=n(cke,"STRONG",{});var r7t=s(r7e);ycr=r(r7t,"mobilebert"),r7t.forEach(t),Lcr=r(cke," \u2014 "),cQ=n(cke,"A",{href:!0});var t7t=s(cQ);xcr=r(t7t,"TFMobileBertForPreTraining"),t7t.forEach(t),$cr=r(cke," (MobileBERT model)"),cke.forEach(t),kcr=i(le),S0=n(le,"LI",{});var fke=s(S0);t7e=n(fke,"STRONG",{});var a7t=s(t7e);Scr=r(a7t,"mpnet"),a7t.forEach(t),Rcr=r(fke," \u2014 "),fQ=n(fke,"A",{href:!0});var n7t=s(fQ);Bcr=r(n7t,"TFMPNetForMaskedLM"),n7t.forEach(t),Pcr=r(fke," (MPNet model)"),fke.forEach(t),Icr=i(le),R0=n(le,"LI",{});var mke=s(R0);a7e=n(mke,"STRONG",{});var s7t=s(a7e);qcr=r(s7t,"openai-gpt"),s7t.forEach(t),Ncr=r(mke," \u2014 "),mQ=n(mke,"A",{href:!0});var l7t=s(mQ);jcr=r(l7t,"TFOpenAIGPTLMHeadModel"),l7t.forEach(t),Dcr=r(mke," (OpenAI GPT model)"),mke.forEach(t),Gcr=i(le),B0=n(le,"LI",{});var gke=s(B0);n7e=n(gke,"STRONG",{});var i7t=s(n7e);Ocr=r(i7t,"roberta"),i7t.forEach(t),Vcr=r(gke," \u2014 "),gQ=n(gke,"A",{href:!0});var d7t=s(gQ);Xcr=r(d7t,"TFRobertaForMaskedLM"),d7t.forEach(t),zcr=r(gke," (RoBERTa model)"),gke.forEach(t),Qcr=i(le),P0=n(le,"LI",{});var hke=s(P0);s7e=n(hke,"STRONG",{});var c7t=s(s7e);Wcr=r(c7t,"t5"),c7t.forEach(t),Hcr=r(hke," \u2014 "),hQ=n(hke,"A",{href:!0});var f7t=s(hQ);Ucr=r(f7t,"TFT5ForConditionalGeneration"),f7t.forEach(t),Jcr=r(hke," (T5 model)"),hke.forEach(t),Ycr=i(le),I0=n(le,"LI",{});var pke=s(I0);l7e=n(pke,"STRONG",{});var m7t=s(l7e);Kcr=r(m7t,"tapas"),m7t.forEach(t),Zcr=r(pke," \u2014 "),pQ=n(pke,"A",{href:!0});var g7t=s(pQ);efr=r(g7t,"TFTapasForMaskedLM"),g7t.forEach(t),ofr=r(pke," (TAPAS model)"),pke.forEach(t),rfr=i(le),q0=n(le,"LI",{});var uke=s(q0);i7e=n(uke,"STRONG",{});var h7t=s(i7e);tfr=r(h7t,"transfo-xl"),h7t.forEach(t),afr=r(uke," \u2014 "),uQ=n(uke,"A",{href:!0});var p7t=s(uQ);nfr=r(p7t,"TFTransfoXLLMHeadModel"),p7t.forEach(t),sfr=r(uke," (Transformer-XL model)"),uke.forEach(t),lfr=i(le),N0=n(le,"LI",{});var _ke=s(N0);d7e=n(_ke,"STRONG",{});var u7t=s(d7e);ifr=r(u7t,"vit_mae"),u7t.forEach(t),dfr=r(_ke," \u2014 "),_Q=n(_ke,"A",{href:!0});var _7t=s(_Q);cfr=r(_7t,"TFViTMAEForPreTraining"),_7t.forEach(t),ffr=r(_ke," (ViTMAE model)"),_ke.forEach(t),mfr=i(le),j0=n(le,"LI",{});var bke=s(j0);c7e=n(bke,"STRONG",{});var b7t=s(c7e);gfr=r(b7t,"xlm"),b7t.forEach(t),hfr=r(bke," \u2014 "),bQ=n(bke,"A",{href:!0});var v7t=s(bQ);pfr=r(v7t,"TFXLMWithLMHeadModel"),v7t.forEach(t),ufr=r(bke," (XLM model)"),bke.forEach(t),_fr=i(le),D0=n(le,"LI",{});var vke=s(D0);f7e=n(vke,"STRONG",{});var F7t=s(f7e);bfr=r(F7t,"xlm-roberta"),F7t.forEach(t),vfr=r(vke," \u2014 "),vQ=n(vke,"A",{href:!0});var T7t=s(vQ);Ffr=r(T7t,"TFXLMRobertaForMaskedLM"),T7t.forEach(t),Tfr=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),Mfr=i(le),G0=n(le,"LI",{});var Fke=s(G0);m7e=n(Fke,"STRONG",{});var M7t=s(m7e);Efr=r(M7t,"xlnet"),M7t.forEach(t),Cfr=r(Fke," \u2014 "),FQ=n(Fke,"A",{href:!0});var E7t=s(FQ);wfr=r(E7t,"TFXLNetLMHeadModel"),E7t.forEach(t),Afr=r(Fke," (XLNet model)"),Fke.forEach(t),le.forEach(t),yfr=i(ml),T(O0.$$.fragment,ml),ml.forEach(t),fl.forEach(t),KIe=i(f),Vd=n(f,"H2",{class:!0});var aje=s(Vd);V0=n(aje,"A",{id:!0,class:!0,href:!0});var C7t=s(V0);g7e=n(C7t,"SPAN",{});var w7t=s(g7e);T(OL.$$.fragment,w7t),w7t.forEach(t),C7t.forEach(t),Lfr=i(aje),h7e=n(aje,"SPAN",{});var A7t=s(h7e);xfr=r(A7t,"TFAutoModelForCausalLM"),A7t.forEach(t),aje.forEach(t),ZIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(VL.$$.fragment,gl),$fr=i(gl),Xd=n(gl,"P",{});var nZ=s(Xd);kfr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TQ=n(nZ,"A",{href:!0});var y7t=s(TQ);Sfr=r(y7t,"from_pretrained()"),y7t.forEach(t),Rfr=r(nZ," class method or the "),MQ=n(nZ,"A",{href:!0});var L7t=s(MQ);Bfr=r(L7t,"from_config()"),L7t.forEach(t),Pfr=r(nZ,` class
method.`),nZ.forEach(t),Ifr=i(gl),XL=n(gl,"P",{});var nje=s(XL);qfr=r(nje,"This class cannot be instantiated directly using "),p7e=n(nje,"CODE",{});var x7t=s(p7e);Nfr=r(x7t,"__init__()"),x7t.forEach(t),jfr=r(nje," (throws an error)."),nje.forEach(t),Dfr=i(gl),yt=n(gl,"DIV",{class:!0});var Zw=s(yt);T(zL.$$.fragment,Zw),Gfr=i(Zw),u7e=n(Zw,"P",{});var $7t=s(u7e);Ofr=r($7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$7t.forEach(t),Vfr=i(Zw),zd=n(Zw,"P",{});var sZ=s(zd);Xfr=r(sZ,`Note:
Loading a model from its configuration file does `),_7e=n(sZ,"STRONG",{});var k7t=s(_7e);zfr=r(k7t,"not"),k7t.forEach(t),Qfr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(sZ,"A",{href:!0});var S7t=s(EQ);Wfr=r(S7t,"from_pretrained()"),S7t.forEach(t),Hfr=r(sZ," to load the model weights."),sZ.forEach(t),Ufr=i(Zw),T(X0.$$.fragment,Zw),Zw.forEach(t),Jfr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(QL.$$.fragment,hl),Yfr=i(hl),b7e=n(hl,"P",{});var R7t=s(b7e);Kfr=r(R7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R7t.forEach(t),Zfr=i(hl),en=n(hl,"P",{});var eA=s(en);emr=r(eA,"The model class to instantiate is selected based on the "),v7e=n(eA,"CODE",{});var B7t=s(v7e);omr=r(B7t,"model_type"),B7t.forEach(t),rmr=r(eA,` property of the config object (either
passed as an argument or loaded from `),F7e=n(eA,"CODE",{});var P7t=s(F7e);tmr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),amr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(eA,"CODE",{});var I7t=s(T7e);nmr=r(I7t,"pretrained_model_name_or_path"),I7t.forEach(t),smr=r(eA,":"),eA.forEach(t),lmr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);z0=n(Ce,"LI",{});var Tke=s(z0);M7e=n(Tke,"STRONG",{});var q7t=s(M7e);imr=r(q7t,"bert"),q7t.forEach(t),dmr=r(Tke," \u2014 "),CQ=n(Tke,"A",{href:!0});var N7t=s(CQ);cmr=r(N7t,"TFBertLMHeadModel"),N7t.forEach(t),fmr=r(Tke," (BERT model)"),Tke.forEach(t),mmr=i(Ce),Q0=n(Ce,"LI",{});var Mke=s(Q0);E7e=n(Mke,"STRONG",{});var j7t=s(E7e);gmr=r(j7t,"camembert"),j7t.forEach(t),hmr=r(Mke," \u2014 "),wQ=n(Mke,"A",{href:!0});var D7t=s(wQ);pmr=r(D7t,"TFCamembertForCausalLM"),D7t.forEach(t),umr=r(Mke," (CamemBERT model)"),Mke.forEach(t),_mr=i(Ce),W0=n(Ce,"LI",{});var Eke=s(W0);C7e=n(Eke,"STRONG",{});var G7t=s(C7e);bmr=r(G7t,"ctrl"),G7t.forEach(t),vmr=r(Eke," \u2014 "),AQ=n(Eke,"A",{href:!0});var O7t=s(AQ);Fmr=r(O7t,"TFCTRLLMHeadModel"),O7t.forEach(t),Tmr=r(Eke," (CTRL model)"),Eke.forEach(t),Mmr=i(Ce),H0=n(Ce,"LI",{});var Cke=s(H0);w7e=n(Cke,"STRONG",{});var V7t=s(w7e);Emr=r(V7t,"gpt2"),V7t.forEach(t),Cmr=r(Cke," \u2014 "),yQ=n(Cke,"A",{href:!0});var X7t=s(yQ);wmr=r(X7t,"TFGPT2LMHeadModel"),X7t.forEach(t),Amr=r(Cke," (OpenAI GPT-2 model)"),Cke.forEach(t),ymr=i(Ce),U0=n(Ce,"LI",{});var wke=s(U0);A7e=n(wke,"STRONG",{});var z7t=s(A7e);Lmr=r(z7t,"gptj"),z7t.forEach(t),xmr=r(wke," \u2014 "),LQ=n(wke,"A",{href:!0});var Q7t=s(LQ);$mr=r(Q7t,"TFGPTJForCausalLM"),Q7t.forEach(t),kmr=r(wke," (GPT-J model)"),wke.forEach(t),Smr=i(Ce),J0=n(Ce,"LI",{});var Ake=s(J0);y7e=n(Ake,"STRONG",{});var W7t=s(y7e);Rmr=r(W7t,"openai-gpt"),W7t.forEach(t),Bmr=r(Ake," \u2014 "),xQ=n(Ake,"A",{href:!0});var H7t=s(xQ);Pmr=r(H7t,"TFOpenAIGPTLMHeadModel"),H7t.forEach(t),Imr=r(Ake," (OpenAI GPT model)"),Ake.forEach(t),qmr=i(Ce),Y0=n(Ce,"LI",{});var yke=s(Y0);L7e=n(yke,"STRONG",{});var U7t=s(L7e);Nmr=r(U7t,"rembert"),U7t.forEach(t),jmr=r(yke," \u2014 "),$Q=n(yke,"A",{href:!0});var J7t=s($Q);Dmr=r(J7t,"TFRemBertForCausalLM"),J7t.forEach(t),Gmr=r(yke," (RemBERT model)"),yke.forEach(t),Omr=i(Ce),K0=n(Ce,"LI",{});var Lke=s(K0);x7e=n(Lke,"STRONG",{});var Y7t=s(x7e);Vmr=r(Y7t,"roberta"),Y7t.forEach(t),Xmr=r(Lke," \u2014 "),kQ=n(Lke,"A",{href:!0});var K7t=s(kQ);zmr=r(K7t,"TFRobertaForCausalLM"),K7t.forEach(t),Qmr=r(Lke," (RoBERTa model)"),Lke.forEach(t),Wmr=i(Ce),Z0=n(Ce,"LI",{});var xke=s(Z0);$7e=n(xke,"STRONG",{});var Z7t=s($7e);Hmr=r(Z7t,"roformer"),Z7t.forEach(t),Umr=r(xke," \u2014 "),SQ=n(xke,"A",{href:!0});var ebt=s(SQ);Jmr=r(ebt,"TFRoFormerForCausalLM"),ebt.forEach(t),Ymr=r(xke," (RoFormer model)"),xke.forEach(t),Kmr=i(Ce),eT=n(Ce,"LI",{});var $ke=s(eT);k7e=n($ke,"STRONG",{});var obt=s(k7e);Zmr=r(obt,"transfo-xl"),obt.forEach(t),egr=r($ke," \u2014 "),RQ=n($ke,"A",{href:!0});var rbt=s(RQ);ogr=r(rbt,"TFTransfoXLLMHeadModel"),rbt.forEach(t),rgr=r($ke," (Transformer-XL model)"),$ke.forEach(t),tgr=i(Ce),oT=n(Ce,"LI",{});var kke=s(oT);S7e=n(kke,"STRONG",{});var tbt=s(S7e);agr=r(tbt,"xlm"),tbt.forEach(t),ngr=r(kke," \u2014 "),BQ=n(kke,"A",{href:!0});var abt=s(BQ);sgr=r(abt,"TFXLMWithLMHeadModel"),abt.forEach(t),lgr=r(kke," (XLM model)"),kke.forEach(t),igr=i(Ce),rT=n(Ce,"LI",{});var Ske=s(rT);R7e=n(Ske,"STRONG",{});var nbt=s(R7e);dgr=r(nbt,"xlnet"),nbt.forEach(t),cgr=r(Ske," \u2014 "),PQ=n(Ske,"A",{href:!0});var sbt=s(PQ);fgr=r(sbt,"TFXLNetLMHeadModel"),sbt.forEach(t),mgr=r(Ske," (XLNet model)"),Ske.forEach(t),Ce.forEach(t),ggr=i(hl),T(tT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),eqe=i(f),Qd=n(f,"H2",{class:!0});var sje=s(Qd);aT=n(sje,"A",{id:!0,class:!0,href:!0});var lbt=s(aT);B7e=n(lbt,"SPAN",{});var ibt=s(B7e);T(WL.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),hgr=i(sje),P7e=n(sje,"SPAN",{});var dbt=s(P7e);pgr=r(dbt,"TFAutoModelForImageClassification"),dbt.forEach(t),sje.forEach(t),oqe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(HL.$$.fragment,pl),ugr=i(pl),Wd=n(pl,"P",{});var lZ=s(Wd);_gr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=n(lZ,"A",{href:!0});var cbt=s(IQ);bgr=r(cbt,"from_pretrained()"),cbt.forEach(t),vgr=r(lZ," class method or the "),qQ=n(lZ,"A",{href:!0});var fbt=s(qQ);Fgr=r(fbt,"from_config()"),fbt.forEach(t),Tgr=r(lZ,` class
method.`),lZ.forEach(t),Mgr=i(pl),UL=n(pl,"P",{});var lje=s(UL);Egr=r(lje,"This class cannot be instantiated directly using "),I7e=n(lje,"CODE",{});var mbt=s(I7e);Cgr=r(mbt,"__init__()"),mbt.forEach(t),wgr=r(lje," (throws an error)."),lje.forEach(t),Agr=i(pl),Lt=n(pl,"DIV",{class:!0});var oA=s(Lt);T(JL.$$.fragment,oA),ygr=i(oA),q7e=n(oA,"P",{});var gbt=s(q7e);Lgr=r(gbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gbt.forEach(t),xgr=i(oA),Hd=n(oA,"P",{});var iZ=s(Hd);$gr=r(iZ,`Note:
Loading a model from its configuration file does `),N7e=n(iZ,"STRONG",{});var hbt=s(N7e);kgr=r(hbt,"not"),hbt.forEach(t),Sgr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(iZ,"A",{href:!0});var pbt=s(NQ);Rgr=r(pbt,"from_pretrained()"),pbt.forEach(t),Bgr=r(iZ," to load the model weights."),iZ.forEach(t),Pgr=i(oA),T(nT.$$.fragment,oA),oA.forEach(t),Igr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(YL.$$.fragment,ul),qgr=i(ul),j7e=n(ul,"P",{});var ubt=s(j7e);Ngr=r(ubt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ubt.forEach(t),jgr=i(ul),on=n(ul,"P",{});var rA=s(on);Dgr=r(rA,"The model class to instantiate is selected based on the "),D7e=n(rA,"CODE",{});var _bt=s(D7e);Ggr=r(_bt,"model_type"),_bt.forEach(t),Ogr=r(rA,` property of the config object (either
passed as an argument or loaded from `),G7e=n(rA,"CODE",{});var bbt=s(G7e);Vgr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Xgr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(rA,"CODE",{});var vbt=s(O7e);zgr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),Qgr=r(rA,":"),rA.forEach(t),Wgr=i(ul),Ud=n(ul,"UL",{});var dZ=s(Ud);sT=n(dZ,"LI",{});var Rke=s(sT);V7e=n(Rke,"STRONG",{});var Fbt=s(V7e);Hgr=r(Fbt,"convnext"),Fbt.forEach(t),Ugr=r(Rke," \u2014 "),jQ=n(Rke,"A",{href:!0});var Tbt=s(jQ);Jgr=r(Tbt,"TFConvNextForImageClassification"),Tbt.forEach(t),Ygr=r(Rke," (ConvNext model)"),Rke.forEach(t),Kgr=i(dZ),lT=n(dZ,"LI",{});var Bke=s(lT);X7e=n(Bke,"STRONG",{});var Mbt=s(X7e);Zgr=r(Mbt,"data2vec-vision"),Mbt.forEach(t),ehr=r(Bke," \u2014 "),DQ=n(Bke,"A",{href:!0});var Ebt=s(DQ);ohr=r(Ebt,"TFData2VecVisionForImageClassification"),Ebt.forEach(t),rhr=r(Bke," (Data2VecVision model)"),Bke.forEach(t),thr=i(dZ),iT=n(dZ,"LI",{});var Pke=s(iT);z7e=n(Pke,"STRONG",{});var Cbt=s(z7e);ahr=r(Cbt,"vit"),Cbt.forEach(t),nhr=r(Pke," \u2014 "),GQ=n(Pke,"A",{href:!0});var wbt=s(GQ);shr=r(wbt,"TFViTForImageClassification"),wbt.forEach(t),lhr=r(Pke," (ViT model)"),Pke.forEach(t),dZ.forEach(t),ihr=i(ul),T(dT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),rqe=i(f),Jd=n(f,"H2",{class:!0});var ije=s(Jd);cT=n(ije,"A",{id:!0,class:!0,href:!0});var Abt=s(cT);Q7e=n(Abt,"SPAN",{});var ybt=s(Q7e);T(KL.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),dhr=i(ije),W7e=n(ije,"SPAN",{});var Lbt=s(W7e);chr=r(Lbt,"TFAutoModelForMaskedLM"),Lbt.forEach(t),ije.forEach(t),tqe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(ZL.$$.fragment,_l),fhr=i(_l),Yd=n(_l,"P",{});var cZ=s(Yd);mhr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OQ=n(cZ,"A",{href:!0});var xbt=s(OQ);ghr=r(xbt,"from_pretrained()"),xbt.forEach(t),hhr=r(cZ," class method or the "),VQ=n(cZ,"A",{href:!0});var $bt=s(VQ);phr=r($bt,"from_config()"),$bt.forEach(t),uhr=r(cZ,` class
method.`),cZ.forEach(t),_hr=i(_l),e8=n(_l,"P",{});var dje=s(e8);bhr=r(dje,"This class cannot be instantiated directly using "),H7e=n(dje,"CODE",{});var kbt=s(H7e);vhr=r(kbt,"__init__()"),kbt.forEach(t),Fhr=r(dje," (throws an error)."),dje.forEach(t),Thr=i(_l),xt=n(_l,"DIV",{class:!0});var tA=s(xt);T(o8.$$.fragment,tA),Mhr=i(tA),U7e=n(tA,"P",{});var Sbt=s(U7e);Ehr=r(Sbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Sbt.forEach(t),Chr=i(tA),Kd=n(tA,"P",{});var fZ=s(Kd);whr=r(fZ,`Note:
Loading a model from its configuration file does `),J7e=n(fZ,"STRONG",{});var Rbt=s(J7e);Ahr=r(Rbt,"not"),Rbt.forEach(t),yhr=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(fZ,"A",{href:!0});var Bbt=s(XQ);Lhr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),xhr=r(fZ," to load the model weights."),fZ.forEach(t),$hr=i(tA),T(fT.$$.fragment,tA),tA.forEach(t),khr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(r8.$$.fragment,bl),Shr=i(bl),Y7e=n(bl,"P",{});var Pbt=s(Y7e);Rhr=r(Pbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pbt.forEach(t),Bhr=i(bl),rn=n(bl,"P",{});var aA=s(rn);Phr=r(aA,"The model class to instantiate is selected based on the "),K7e=n(aA,"CODE",{});var Ibt=s(K7e);Ihr=r(Ibt,"model_type"),Ibt.forEach(t),qhr=r(aA,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(aA,"CODE",{});var qbt=s(Z7e);Nhr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),jhr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(aA,"CODE",{});var Nbt=s(ebe);Dhr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),Ghr=r(aA,":"),aA.forEach(t),Ohr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);mT=n(fe,"LI",{});var Ike=s(mT);obe=n(Ike,"STRONG",{});var jbt=s(obe);Vhr=r(jbt,"albert"),jbt.forEach(t),Xhr=r(Ike," \u2014 "),zQ=n(Ike,"A",{href:!0});var Dbt=s(zQ);zhr=r(Dbt,"TFAlbertForMaskedLM"),Dbt.forEach(t),Qhr=r(Ike," (ALBERT model)"),Ike.forEach(t),Whr=i(fe),gT=n(fe,"LI",{});var qke=s(gT);rbe=n(qke,"STRONG",{});var Gbt=s(rbe);Hhr=r(Gbt,"bert"),Gbt.forEach(t),Uhr=r(qke," \u2014 "),QQ=n(qke,"A",{href:!0});var Obt=s(QQ);Jhr=r(Obt,"TFBertForMaskedLM"),Obt.forEach(t),Yhr=r(qke," (BERT model)"),qke.forEach(t),Khr=i(fe),hT=n(fe,"LI",{});var Nke=s(hT);tbe=n(Nke,"STRONG",{});var Vbt=s(tbe);Zhr=r(Vbt,"camembert"),Vbt.forEach(t),epr=r(Nke," \u2014 "),WQ=n(Nke,"A",{href:!0});var Xbt=s(WQ);opr=r(Xbt,"TFCamembertForMaskedLM"),Xbt.forEach(t),rpr=r(Nke," (CamemBERT model)"),Nke.forEach(t),tpr=i(fe),pT=n(fe,"LI",{});var jke=s(pT);abe=n(jke,"STRONG",{});var zbt=s(abe);apr=r(zbt,"convbert"),zbt.forEach(t),npr=r(jke," \u2014 "),HQ=n(jke,"A",{href:!0});var Qbt=s(HQ);spr=r(Qbt,"TFConvBertForMaskedLM"),Qbt.forEach(t),lpr=r(jke," (ConvBERT model)"),jke.forEach(t),ipr=i(fe),uT=n(fe,"LI",{});var Dke=s(uT);nbe=n(Dke,"STRONG",{});var Wbt=s(nbe);dpr=r(Wbt,"deberta"),Wbt.forEach(t),cpr=r(Dke," \u2014 "),UQ=n(Dke,"A",{href:!0});var Hbt=s(UQ);fpr=r(Hbt,"TFDebertaForMaskedLM"),Hbt.forEach(t),mpr=r(Dke," (DeBERTa model)"),Dke.forEach(t),gpr=i(fe),_T=n(fe,"LI",{});var Gke=s(_T);sbe=n(Gke,"STRONG",{});var Ubt=s(sbe);hpr=r(Ubt,"deberta-v2"),Ubt.forEach(t),ppr=r(Gke," \u2014 "),JQ=n(Gke,"A",{href:!0});var Jbt=s(JQ);upr=r(Jbt,"TFDebertaV2ForMaskedLM"),Jbt.forEach(t),_pr=r(Gke," (DeBERTa-v2 model)"),Gke.forEach(t),bpr=i(fe),bT=n(fe,"LI",{});var Oke=s(bT);lbe=n(Oke,"STRONG",{});var Ybt=s(lbe);vpr=r(Ybt,"distilbert"),Ybt.forEach(t),Fpr=r(Oke," \u2014 "),YQ=n(Oke,"A",{href:!0});var Kbt=s(YQ);Tpr=r(Kbt,"TFDistilBertForMaskedLM"),Kbt.forEach(t),Mpr=r(Oke," (DistilBERT model)"),Oke.forEach(t),Epr=i(fe),vT=n(fe,"LI",{});var Vke=s(vT);ibe=n(Vke,"STRONG",{});var Zbt=s(ibe);Cpr=r(Zbt,"electra"),Zbt.forEach(t),wpr=r(Vke," \u2014 "),KQ=n(Vke,"A",{href:!0});var e2t=s(KQ);Apr=r(e2t,"TFElectraForMaskedLM"),e2t.forEach(t),ypr=r(Vke," (ELECTRA model)"),Vke.forEach(t),Lpr=i(fe),FT=n(fe,"LI",{});var Xke=s(FT);dbe=n(Xke,"STRONG",{});var o2t=s(dbe);xpr=r(o2t,"flaubert"),o2t.forEach(t),$pr=r(Xke," \u2014 "),ZQ=n(Xke,"A",{href:!0});var r2t=s(ZQ);kpr=r(r2t,"TFFlaubertWithLMHeadModel"),r2t.forEach(t),Spr=r(Xke," (FlauBERT model)"),Xke.forEach(t),Rpr=i(fe),TT=n(fe,"LI",{});var zke=s(TT);cbe=n(zke,"STRONG",{});var t2t=s(cbe);Bpr=r(t2t,"funnel"),t2t.forEach(t),Ppr=r(zke," \u2014 "),eW=n(zke,"A",{href:!0});var a2t=s(eW);Ipr=r(a2t,"TFFunnelForMaskedLM"),a2t.forEach(t),qpr=r(zke," (Funnel Transformer model)"),zke.forEach(t),Npr=i(fe),MT=n(fe,"LI",{});var Qke=s(MT);fbe=n(Qke,"STRONG",{});var n2t=s(fbe);jpr=r(n2t,"layoutlm"),n2t.forEach(t),Dpr=r(Qke," \u2014 "),oW=n(Qke,"A",{href:!0});var s2t=s(oW);Gpr=r(s2t,"TFLayoutLMForMaskedLM"),s2t.forEach(t),Opr=r(Qke," (LayoutLM model)"),Qke.forEach(t),Vpr=i(fe),ET=n(fe,"LI",{});var Wke=s(ET);mbe=n(Wke,"STRONG",{});var l2t=s(mbe);Xpr=r(l2t,"longformer"),l2t.forEach(t),zpr=r(Wke," \u2014 "),rW=n(Wke,"A",{href:!0});var i2t=s(rW);Qpr=r(i2t,"TFLongformerForMaskedLM"),i2t.forEach(t),Wpr=r(Wke," (Longformer model)"),Wke.forEach(t),Hpr=i(fe),CT=n(fe,"LI",{});var Hke=s(CT);gbe=n(Hke,"STRONG",{});var d2t=s(gbe);Upr=r(d2t,"mobilebert"),d2t.forEach(t),Jpr=r(Hke," \u2014 "),tW=n(Hke,"A",{href:!0});var c2t=s(tW);Ypr=r(c2t,"TFMobileBertForMaskedLM"),c2t.forEach(t),Kpr=r(Hke," (MobileBERT model)"),Hke.forEach(t),Zpr=i(fe),wT=n(fe,"LI",{});var Uke=s(wT);hbe=n(Uke,"STRONG",{});var f2t=s(hbe);eur=r(f2t,"mpnet"),f2t.forEach(t),our=r(Uke," \u2014 "),aW=n(Uke,"A",{href:!0});var m2t=s(aW);rur=r(m2t,"TFMPNetForMaskedLM"),m2t.forEach(t),tur=r(Uke," (MPNet model)"),Uke.forEach(t),aur=i(fe),AT=n(fe,"LI",{});var Jke=s(AT);pbe=n(Jke,"STRONG",{});var g2t=s(pbe);nur=r(g2t,"rembert"),g2t.forEach(t),sur=r(Jke," \u2014 "),nW=n(Jke,"A",{href:!0});var h2t=s(nW);lur=r(h2t,"TFRemBertForMaskedLM"),h2t.forEach(t),iur=r(Jke," (RemBERT model)"),Jke.forEach(t),dur=i(fe),yT=n(fe,"LI",{});var Yke=s(yT);ube=n(Yke,"STRONG",{});var p2t=s(ube);cur=r(p2t,"roberta"),p2t.forEach(t),fur=r(Yke," \u2014 "),sW=n(Yke,"A",{href:!0});var u2t=s(sW);mur=r(u2t,"TFRobertaForMaskedLM"),u2t.forEach(t),gur=r(Yke," (RoBERTa model)"),Yke.forEach(t),hur=i(fe),LT=n(fe,"LI",{});var Kke=s(LT);_be=n(Kke,"STRONG",{});var _2t=s(_be);pur=r(_2t,"roformer"),_2t.forEach(t),uur=r(Kke," \u2014 "),lW=n(Kke,"A",{href:!0});var b2t=s(lW);_ur=r(b2t,"TFRoFormerForMaskedLM"),b2t.forEach(t),bur=r(Kke," (RoFormer model)"),Kke.forEach(t),vur=i(fe),xT=n(fe,"LI",{});var Zke=s(xT);bbe=n(Zke,"STRONG",{});var v2t=s(bbe);Fur=r(v2t,"tapas"),v2t.forEach(t),Tur=r(Zke," \u2014 "),iW=n(Zke,"A",{href:!0});var F2t=s(iW);Mur=r(F2t,"TFTapasForMaskedLM"),F2t.forEach(t),Eur=r(Zke," (TAPAS model)"),Zke.forEach(t),Cur=i(fe),$T=n(fe,"LI",{});var eSe=s($T);vbe=n(eSe,"STRONG",{});var T2t=s(vbe);wur=r(T2t,"xlm"),T2t.forEach(t),Aur=r(eSe," \u2014 "),dW=n(eSe,"A",{href:!0});var M2t=s(dW);yur=r(M2t,"TFXLMWithLMHeadModel"),M2t.forEach(t),Lur=r(eSe," (XLM model)"),eSe.forEach(t),xur=i(fe),kT=n(fe,"LI",{});var oSe=s(kT);Fbe=n(oSe,"STRONG",{});var E2t=s(Fbe);$ur=r(E2t,"xlm-roberta"),E2t.forEach(t),kur=r(oSe," \u2014 "),cW=n(oSe,"A",{href:!0});var C2t=s(cW);Sur=r(C2t,"TFXLMRobertaForMaskedLM"),C2t.forEach(t),Rur=r(oSe," (XLM-RoBERTa model)"),oSe.forEach(t),fe.forEach(t),Bur=i(bl),T(ST.$$.fragment,bl),bl.forEach(t),_l.forEach(t),aqe=i(f),Zd=n(f,"H2",{class:!0});var cje=s(Zd);RT=n(cje,"A",{id:!0,class:!0,href:!0});var w2t=s(RT);Tbe=n(w2t,"SPAN",{});var A2t=s(Tbe);T(t8.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),Pur=i(cje),Mbe=n(cje,"SPAN",{});var y2t=s(Mbe);Iur=r(y2t,"TFAutoModelForSeq2SeqLM"),y2t.forEach(t),cje.forEach(t),nqe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(a8.$$.fragment,vl),qur=i(vl),ec=n(vl,"P",{});var mZ=s(ec);Nur=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fW=n(mZ,"A",{href:!0});var L2t=s(fW);jur=r(L2t,"from_pretrained()"),L2t.forEach(t),Dur=r(mZ," class method or the "),mW=n(mZ,"A",{href:!0});var x2t=s(mW);Gur=r(x2t,"from_config()"),x2t.forEach(t),Our=r(mZ,` class
method.`),mZ.forEach(t),Vur=i(vl),n8=n(vl,"P",{});var fje=s(n8);Xur=r(fje,"This class cannot be instantiated directly using "),Ebe=n(fje,"CODE",{});var $2t=s(Ebe);zur=r($2t,"__init__()"),$2t.forEach(t),Qur=r(fje," (throws an error)."),fje.forEach(t),Wur=i(vl),$t=n(vl,"DIV",{class:!0});var nA=s($t);T(s8.$$.fragment,nA),Hur=i(nA),Cbe=n(nA,"P",{});var k2t=s(Cbe);Uur=r(k2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k2t.forEach(t),Jur=i(nA),oc=n(nA,"P",{});var gZ=s(oc);Yur=r(gZ,`Note:
Loading a model from its configuration file does `),wbe=n(gZ,"STRONG",{});var S2t=s(wbe);Kur=r(S2t,"not"),S2t.forEach(t),Zur=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(gZ,"A",{href:!0});var R2t=s(gW);e_r=r(R2t,"from_pretrained()"),R2t.forEach(t),o_r=r(gZ," to load the model weights."),gZ.forEach(t),r_r=i(nA),T(BT.$$.fragment,nA),nA.forEach(t),t_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(l8.$$.fragment,Fl),a_r=i(Fl),Abe=n(Fl,"P",{});var B2t=s(Abe);n_r=r(B2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B2t.forEach(t),s_r=i(Fl),tn=n(Fl,"P",{});var sA=s(tn);l_r=r(sA,"The model class to instantiate is selected based on the "),ybe=n(sA,"CODE",{});var P2t=s(ybe);i_r=r(P2t,"model_type"),P2t.forEach(t),d_r=r(sA,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(sA,"CODE",{});var I2t=s(Lbe);c_r=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),f_r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(sA,"CODE",{});var q2t=s(xbe);m_r=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),g_r=r(sA,":"),sA.forEach(t),h_r=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);PT=n(Re,"LI",{});var rSe=s(PT);$be=n(rSe,"STRONG",{});var N2t=s($be);p_r=r(N2t,"bart"),N2t.forEach(t),u_r=r(rSe," \u2014 "),hW=n(rSe,"A",{href:!0});var j2t=s(hW);__r=r(j2t,"TFBartForConditionalGeneration"),j2t.forEach(t),b_r=r(rSe," (BART model)"),rSe.forEach(t),v_r=i(Re),IT=n(Re,"LI",{});var tSe=s(IT);kbe=n(tSe,"STRONG",{});var D2t=s(kbe);F_r=r(D2t,"blenderbot"),D2t.forEach(t),T_r=r(tSe," \u2014 "),pW=n(tSe,"A",{href:!0});var G2t=s(pW);M_r=r(G2t,"TFBlenderbotForConditionalGeneration"),G2t.forEach(t),E_r=r(tSe," (Blenderbot model)"),tSe.forEach(t),C_r=i(Re),qT=n(Re,"LI",{});var aSe=s(qT);Sbe=n(aSe,"STRONG",{});var O2t=s(Sbe);w_r=r(O2t,"blenderbot-small"),O2t.forEach(t),A_r=r(aSe," \u2014 "),uW=n(aSe,"A",{href:!0});var V2t=s(uW);y_r=r(V2t,"TFBlenderbotSmallForConditionalGeneration"),V2t.forEach(t),L_r=r(aSe," (BlenderbotSmall model)"),aSe.forEach(t),x_r=i(Re),NT=n(Re,"LI",{});var nSe=s(NT);Rbe=n(nSe,"STRONG",{});var X2t=s(Rbe);$_r=r(X2t,"encoder-decoder"),X2t.forEach(t),k_r=r(nSe," \u2014 "),_W=n(nSe,"A",{href:!0});var z2t=s(_W);S_r=r(z2t,"TFEncoderDecoderModel"),z2t.forEach(t),R_r=r(nSe," (Encoder decoder model)"),nSe.forEach(t),B_r=i(Re),jT=n(Re,"LI",{});var sSe=s(jT);Bbe=n(sSe,"STRONG",{});var Q2t=s(Bbe);P_r=r(Q2t,"led"),Q2t.forEach(t),I_r=r(sSe," \u2014 "),bW=n(sSe,"A",{href:!0});var W2t=s(bW);q_r=r(W2t,"TFLEDForConditionalGeneration"),W2t.forEach(t),N_r=r(sSe," (LED model)"),sSe.forEach(t),j_r=i(Re),DT=n(Re,"LI",{});var lSe=s(DT);Pbe=n(lSe,"STRONG",{});var H2t=s(Pbe);D_r=r(H2t,"marian"),H2t.forEach(t),G_r=r(lSe," \u2014 "),vW=n(lSe,"A",{href:!0});var U2t=s(vW);O_r=r(U2t,"TFMarianMTModel"),U2t.forEach(t),V_r=r(lSe," (Marian model)"),lSe.forEach(t),X_r=i(Re),GT=n(Re,"LI",{});var iSe=s(GT);Ibe=n(iSe,"STRONG",{});var J2t=s(Ibe);z_r=r(J2t,"mbart"),J2t.forEach(t),Q_r=r(iSe," \u2014 "),FW=n(iSe,"A",{href:!0});var Y2t=s(FW);W_r=r(Y2t,"TFMBartForConditionalGeneration"),Y2t.forEach(t),H_r=r(iSe," (mBART model)"),iSe.forEach(t),U_r=i(Re),OT=n(Re,"LI",{});var dSe=s(OT);qbe=n(dSe,"STRONG",{});var K2t=s(qbe);J_r=r(K2t,"mt5"),K2t.forEach(t),Y_r=r(dSe," \u2014 "),TW=n(dSe,"A",{href:!0});var Z2t=s(TW);K_r=r(Z2t,"TFMT5ForConditionalGeneration"),Z2t.forEach(t),Z_r=r(dSe," (mT5 model)"),dSe.forEach(t),e1r=i(Re),VT=n(Re,"LI",{});var cSe=s(VT);Nbe=n(cSe,"STRONG",{});var e5t=s(Nbe);o1r=r(e5t,"pegasus"),e5t.forEach(t),r1r=r(cSe," \u2014 "),MW=n(cSe,"A",{href:!0});var o5t=s(MW);t1r=r(o5t,"TFPegasusForConditionalGeneration"),o5t.forEach(t),a1r=r(cSe," (Pegasus model)"),cSe.forEach(t),n1r=i(Re),XT=n(Re,"LI",{});var fSe=s(XT);jbe=n(fSe,"STRONG",{});var r5t=s(jbe);s1r=r(r5t,"t5"),r5t.forEach(t),l1r=r(fSe," \u2014 "),EW=n(fSe,"A",{href:!0});var t5t=s(EW);i1r=r(t5t,"TFT5ForConditionalGeneration"),t5t.forEach(t),d1r=r(fSe," (T5 model)"),fSe.forEach(t),Re.forEach(t),c1r=i(Fl),T(zT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),sqe=i(f),rc=n(f,"H2",{class:!0});var mje=s(rc);QT=n(mje,"A",{id:!0,class:!0,href:!0});var a5t=s(QT);Dbe=n(a5t,"SPAN",{});var n5t=s(Dbe);T(i8.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),f1r=i(mje),Gbe=n(mje,"SPAN",{});var s5t=s(Gbe);m1r=r(s5t,"TFAutoModelForSequenceClassification"),s5t.forEach(t),mje.forEach(t),lqe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(d8.$$.fragment,Tl),g1r=i(Tl),tc=n(Tl,"P",{});var hZ=s(tc);h1r=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CW=n(hZ,"A",{href:!0});var l5t=s(CW);p1r=r(l5t,"from_pretrained()"),l5t.forEach(t),u1r=r(hZ," class method or the "),wW=n(hZ,"A",{href:!0});var i5t=s(wW);_1r=r(i5t,"from_config()"),i5t.forEach(t),b1r=r(hZ,` class
method.`),hZ.forEach(t),v1r=i(Tl),c8=n(Tl,"P",{});var gje=s(c8);F1r=r(gje,"This class cannot be instantiated directly using "),Obe=n(gje,"CODE",{});var d5t=s(Obe);T1r=r(d5t,"__init__()"),d5t.forEach(t),M1r=r(gje," (throws an error)."),gje.forEach(t),E1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var lA=s(kt);T(f8.$$.fragment,lA),C1r=i(lA),Vbe=n(lA,"P",{});var c5t=s(Vbe);w1r=r(c5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c5t.forEach(t),A1r=i(lA),ac=n(lA,"P",{});var pZ=s(ac);y1r=r(pZ,`Note:
Loading a model from its configuration file does `),Xbe=n(pZ,"STRONG",{});var f5t=s(Xbe);L1r=r(f5t,"not"),f5t.forEach(t),x1r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(pZ,"A",{href:!0});var m5t=s(AW);$1r=r(m5t,"from_pretrained()"),m5t.forEach(t),k1r=r(pZ," to load the model weights."),pZ.forEach(t),S1r=i(lA),T(WT.$$.fragment,lA),lA.forEach(t),R1r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(m8.$$.fragment,Ml),B1r=i(Ml),zbe=n(Ml,"P",{});var g5t=s(zbe);P1r=r(g5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g5t.forEach(t),I1r=i(Ml),an=n(Ml,"P",{});var iA=s(an);q1r=r(iA,"The model class to instantiate is selected based on the "),Qbe=n(iA,"CODE",{});var h5t=s(Qbe);N1r=r(h5t,"model_type"),h5t.forEach(t),j1r=r(iA,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(iA,"CODE",{});var p5t=s(Wbe);D1r=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),G1r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(iA,"CODE",{});var u5t=s(Hbe);O1r=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),V1r=r(iA,":"),iA.forEach(t),X1r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);HT=n(te,"LI",{});var mSe=s(HT);Ube=n(mSe,"STRONG",{});var _5t=s(Ube);z1r=r(_5t,"albert"),_5t.forEach(t),Q1r=r(mSe," \u2014 "),yW=n(mSe,"A",{href:!0});var b5t=s(yW);W1r=r(b5t,"TFAlbertForSequenceClassification"),b5t.forEach(t),H1r=r(mSe," (ALBERT model)"),mSe.forEach(t),U1r=i(te),UT=n(te,"LI",{});var gSe=s(UT);Jbe=n(gSe,"STRONG",{});var v5t=s(Jbe);J1r=r(v5t,"bert"),v5t.forEach(t),Y1r=r(gSe," \u2014 "),LW=n(gSe,"A",{href:!0});var F5t=s(LW);K1r=r(F5t,"TFBertForSequenceClassification"),F5t.forEach(t),Z1r=r(gSe," (BERT model)"),gSe.forEach(t),e7r=i(te),JT=n(te,"LI",{});var hSe=s(JT);Ybe=n(hSe,"STRONG",{});var T5t=s(Ybe);o7r=r(T5t,"camembert"),T5t.forEach(t),r7r=r(hSe," \u2014 "),xW=n(hSe,"A",{href:!0});var M5t=s(xW);t7r=r(M5t,"TFCamembertForSequenceClassification"),M5t.forEach(t),a7r=r(hSe," (CamemBERT model)"),hSe.forEach(t),n7r=i(te),YT=n(te,"LI",{});var pSe=s(YT);Kbe=n(pSe,"STRONG",{});var E5t=s(Kbe);s7r=r(E5t,"convbert"),E5t.forEach(t),l7r=r(pSe," \u2014 "),$W=n(pSe,"A",{href:!0});var C5t=s($W);i7r=r(C5t,"TFConvBertForSequenceClassification"),C5t.forEach(t),d7r=r(pSe," (ConvBERT model)"),pSe.forEach(t),c7r=i(te),KT=n(te,"LI",{});var uSe=s(KT);Zbe=n(uSe,"STRONG",{});var w5t=s(Zbe);f7r=r(w5t,"ctrl"),w5t.forEach(t),m7r=r(uSe," \u2014 "),kW=n(uSe,"A",{href:!0});var A5t=s(kW);g7r=r(A5t,"TFCTRLForSequenceClassification"),A5t.forEach(t),h7r=r(uSe," (CTRL model)"),uSe.forEach(t),p7r=i(te),ZT=n(te,"LI",{});var _Se=s(ZT);e2e=n(_Se,"STRONG",{});var y5t=s(e2e);u7r=r(y5t,"deberta"),y5t.forEach(t),_7r=r(_Se," \u2014 "),SW=n(_Se,"A",{href:!0});var L5t=s(SW);b7r=r(L5t,"TFDebertaForSequenceClassification"),L5t.forEach(t),v7r=r(_Se," (DeBERTa model)"),_Se.forEach(t),F7r=i(te),eM=n(te,"LI",{});var bSe=s(eM);o2e=n(bSe,"STRONG",{});var x5t=s(o2e);T7r=r(x5t,"deberta-v2"),x5t.forEach(t),M7r=r(bSe," \u2014 "),RW=n(bSe,"A",{href:!0});var $5t=s(RW);E7r=r($5t,"TFDebertaV2ForSequenceClassification"),$5t.forEach(t),C7r=r(bSe," (DeBERTa-v2 model)"),bSe.forEach(t),w7r=i(te),oM=n(te,"LI",{});var vSe=s(oM);r2e=n(vSe,"STRONG",{});var k5t=s(r2e);A7r=r(k5t,"distilbert"),k5t.forEach(t),y7r=r(vSe," \u2014 "),BW=n(vSe,"A",{href:!0});var S5t=s(BW);L7r=r(S5t,"TFDistilBertForSequenceClassification"),S5t.forEach(t),x7r=r(vSe," (DistilBERT model)"),vSe.forEach(t),$7r=i(te),rM=n(te,"LI",{});var FSe=s(rM);t2e=n(FSe,"STRONG",{});var R5t=s(t2e);k7r=r(R5t,"electra"),R5t.forEach(t),S7r=r(FSe," \u2014 "),PW=n(FSe,"A",{href:!0});var B5t=s(PW);R7r=r(B5t,"TFElectraForSequenceClassification"),B5t.forEach(t),B7r=r(FSe," (ELECTRA model)"),FSe.forEach(t),P7r=i(te),tM=n(te,"LI",{});var TSe=s(tM);a2e=n(TSe,"STRONG",{});var P5t=s(a2e);I7r=r(P5t,"flaubert"),P5t.forEach(t),q7r=r(TSe," \u2014 "),IW=n(TSe,"A",{href:!0});var I5t=s(IW);N7r=r(I5t,"TFFlaubertForSequenceClassification"),I5t.forEach(t),j7r=r(TSe," (FlauBERT model)"),TSe.forEach(t),D7r=i(te),aM=n(te,"LI",{});var MSe=s(aM);n2e=n(MSe,"STRONG",{});var q5t=s(n2e);G7r=r(q5t,"funnel"),q5t.forEach(t),O7r=r(MSe," \u2014 "),qW=n(MSe,"A",{href:!0});var N5t=s(qW);V7r=r(N5t,"TFFunnelForSequenceClassification"),N5t.forEach(t),X7r=r(MSe," (Funnel Transformer model)"),MSe.forEach(t),z7r=i(te),nM=n(te,"LI",{});var ESe=s(nM);s2e=n(ESe,"STRONG",{});var j5t=s(s2e);Q7r=r(j5t,"gpt2"),j5t.forEach(t),W7r=r(ESe," \u2014 "),NW=n(ESe,"A",{href:!0});var D5t=s(NW);H7r=r(D5t,"TFGPT2ForSequenceClassification"),D5t.forEach(t),U7r=r(ESe," (OpenAI GPT-2 model)"),ESe.forEach(t),J7r=i(te),sM=n(te,"LI",{});var CSe=s(sM);l2e=n(CSe,"STRONG",{});var G5t=s(l2e);Y7r=r(G5t,"gptj"),G5t.forEach(t),K7r=r(CSe," \u2014 "),jW=n(CSe,"A",{href:!0});var O5t=s(jW);Z7r=r(O5t,"TFGPTJForSequenceClassification"),O5t.forEach(t),ebr=r(CSe," (GPT-J model)"),CSe.forEach(t),obr=i(te),lM=n(te,"LI",{});var wSe=s(lM);i2e=n(wSe,"STRONG",{});var V5t=s(i2e);rbr=r(V5t,"layoutlm"),V5t.forEach(t),tbr=r(wSe," \u2014 "),DW=n(wSe,"A",{href:!0});var X5t=s(DW);abr=r(X5t,"TFLayoutLMForSequenceClassification"),X5t.forEach(t),nbr=r(wSe," (LayoutLM model)"),wSe.forEach(t),sbr=i(te),iM=n(te,"LI",{});var ASe=s(iM);d2e=n(ASe,"STRONG",{});var z5t=s(d2e);lbr=r(z5t,"longformer"),z5t.forEach(t),ibr=r(ASe," \u2014 "),GW=n(ASe,"A",{href:!0});var Q5t=s(GW);dbr=r(Q5t,"TFLongformerForSequenceClassification"),Q5t.forEach(t),cbr=r(ASe," (Longformer model)"),ASe.forEach(t),fbr=i(te),dM=n(te,"LI",{});var ySe=s(dM);c2e=n(ySe,"STRONG",{});var W5t=s(c2e);mbr=r(W5t,"mobilebert"),W5t.forEach(t),gbr=r(ySe," \u2014 "),OW=n(ySe,"A",{href:!0});var H5t=s(OW);hbr=r(H5t,"TFMobileBertForSequenceClassification"),H5t.forEach(t),pbr=r(ySe," (MobileBERT model)"),ySe.forEach(t),ubr=i(te),cM=n(te,"LI",{});var LSe=s(cM);f2e=n(LSe,"STRONG",{});var U5t=s(f2e);_br=r(U5t,"mpnet"),U5t.forEach(t),bbr=r(LSe," \u2014 "),VW=n(LSe,"A",{href:!0});var J5t=s(VW);vbr=r(J5t,"TFMPNetForSequenceClassification"),J5t.forEach(t),Fbr=r(LSe," (MPNet model)"),LSe.forEach(t),Tbr=i(te),fM=n(te,"LI",{});var xSe=s(fM);m2e=n(xSe,"STRONG",{});var Y5t=s(m2e);Mbr=r(Y5t,"openai-gpt"),Y5t.forEach(t),Ebr=r(xSe," \u2014 "),XW=n(xSe,"A",{href:!0});var K5t=s(XW);Cbr=r(K5t,"TFOpenAIGPTForSequenceClassification"),K5t.forEach(t),wbr=r(xSe," (OpenAI GPT model)"),xSe.forEach(t),Abr=i(te),mM=n(te,"LI",{});var $Se=s(mM);g2e=n($Se,"STRONG",{});var Z5t=s(g2e);ybr=r(Z5t,"rembert"),Z5t.forEach(t),Lbr=r($Se," \u2014 "),zW=n($Se,"A",{href:!0});var evt=s(zW);xbr=r(evt,"TFRemBertForSequenceClassification"),evt.forEach(t),$br=r($Se," (RemBERT model)"),$Se.forEach(t),kbr=i(te),gM=n(te,"LI",{});var kSe=s(gM);h2e=n(kSe,"STRONG",{});var ovt=s(h2e);Sbr=r(ovt,"roberta"),ovt.forEach(t),Rbr=r(kSe," \u2014 "),QW=n(kSe,"A",{href:!0});var rvt=s(QW);Bbr=r(rvt,"TFRobertaForSequenceClassification"),rvt.forEach(t),Pbr=r(kSe," (RoBERTa model)"),kSe.forEach(t),Ibr=i(te),hM=n(te,"LI",{});var SSe=s(hM);p2e=n(SSe,"STRONG",{});var tvt=s(p2e);qbr=r(tvt,"roformer"),tvt.forEach(t),Nbr=r(SSe," \u2014 "),WW=n(SSe,"A",{href:!0});var avt=s(WW);jbr=r(avt,"TFRoFormerForSequenceClassification"),avt.forEach(t),Dbr=r(SSe," (RoFormer model)"),SSe.forEach(t),Gbr=i(te),pM=n(te,"LI",{});var RSe=s(pM);u2e=n(RSe,"STRONG",{});var nvt=s(u2e);Obr=r(nvt,"tapas"),nvt.forEach(t),Vbr=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var svt=s(HW);Xbr=r(svt,"TFTapasForSequenceClassification"),svt.forEach(t),zbr=r(RSe," (TAPAS model)"),RSe.forEach(t),Qbr=i(te),uM=n(te,"LI",{});var BSe=s(uM);_2e=n(BSe,"STRONG",{});var lvt=s(_2e);Wbr=r(lvt,"transfo-xl"),lvt.forEach(t),Hbr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var ivt=s(UW);Ubr=r(ivt,"TFTransfoXLForSequenceClassification"),ivt.forEach(t),Jbr=r(BSe," (Transformer-XL model)"),BSe.forEach(t),Ybr=i(te),_M=n(te,"LI",{});var PSe=s(_M);b2e=n(PSe,"STRONG",{});var dvt=s(b2e);Kbr=r(dvt,"xlm"),dvt.forEach(t),Zbr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var cvt=s(JW);e2r=r(cvt,"TFXLMForSequenceClassification"),cvt.forEach(t),o2r=r(PSe," (XLM model)"),PSe.forEach(t),r2r=i(te),bM=n(te,"LI",{});var ISe=s(bM);v2e=n(ISe,"STRONG",{});var fvt=s(v2e);t2r=r(fvt,"xlm-roberta"),fvt.forEach(t),a2r=r(ISe," \u2014 "),YW=n(ISe,"A",{href:!0});var mvt=s(YW);n2r=r(mvt,"TFXLMRobertaForSequenceClassification"),mvt.forEach(t),s2r=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),l2r=i(te),vM=n(te,"LI",{});var qSe=s(vM);F2e=n(qSe,"STRONG",{});var gvt=s(F2e);i2r=r(gvt,"xlnet"),gvt.forEach(t),d2r=r(qSe," \u2014 "),KW=n(qSe,"A",{href:!0});var hvt=s(KW);c2r=r(hvt,"TFXLNetForSequenceClassification"),hvt.forEach(t),f2r=r(qSe," (XLNet model)"),qSe.forEach(t),te.forEach(t),m2r=i(Ml),T(FM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),iqe=i(f),nc=n(f,"H2",{class:!0});var hje=s(nc);TM=n(hje,"A",{id:!0,class:!0,href:!0});var pvt=s(TM);T2e=n(pvt,"SPAN",{});var uvt=s(T2e);T(g8.$$.fragment,uvt),uvt.forEach(t),pvt.forEach(t),g2r=i(hje),M2e=n(hje,"SPAN",{});var _vt=s(M2e);h2r=r(_vt,"TFAutoModelForMultipleChoice"),_vt.forEach(t),hje.forEach(t),dqe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(h8.$$.fragment,El),p2r=i(El),sc=n(El,"P",{});var uZ=s(sc);u2r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZW=n(uZ,"A",{href:!0});var bvt=s(ZW);_2r=r(bvt,"from_pretrained()"),bvt.forEach(t),b2r=r(uZ," class method or the "),eH=n(uZ,"A",{href:!0});var vvt=s(eH);v2r=r(vvt,"from_config()"),vvt.forEach(t),F2r=r(uZ,` class
method.`),uZ.forEach(t),T2r=i(El),p8=n(El,"P",{});var pje=s(p8);M2r=r(pje,"This class cannot be instantiated directly using "),E2e=n(pje,"CODE",{});var Fvt=s(E2e);E2r=r(Fvt,"__init__()"),Fvt.forEach(t),C2r=r(pje," (throws an error)."),pje.forEach(t),w2r=i(El),St=n(El,"DIV",{class:!0});var dA=s(St);T(u8.$$.fragment,dA),A2r=i(dA),C2e=n(dA,"P",{});var Tvt=s(C2e);y2r=r(Tvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tvt.forEach(t),L2r=i(dA),lc=n(dA,"P",{});var _Z=s(lc);x2r=r(_Z,`Note:
Loading a model from its configuration file does `),w2e=n(_Z,"STRONG",{});var Mvt=s(w2e);$2r=r(Mvt,"not"),Mvt.forEach(t),k2r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(_Z,"A",{href:!0});var Evt=s(oH);S2r=r(Evt,"from_pretrained()"),Evt.forEach(t),R2r=r(_Z," to load the model weights."),_Z.forEach(t),B2r=i(dA),T(MM.$$.fragment,dA),dA.forEach(t),P2r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(_8.$$.fragment,Cl),I2r=i(Cl),A2e=n(Cl,"P",{});var Cvt=s(A2e);q2r=r(Cvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cvt.forEach(t),N2r=i(Cl),nn=n(Cl,"P",{});var cA=s(nn);j2r=r(cA,"The model class to instantiate is selected based on the "),y2e=n(cA,"CODE",{});var wvt=s(y2e);D2r=r(wvt,"model_type"),wvt.forEach(t),G2r=r(cA,` property of the config object (either
passed as an argument or loaded from `),L2e=n(cA,"CODE",{});var Avt=s(L2e);O2r=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),V2r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(cA,"CODE",{});var yvt=s(x2e);X2r=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),z2r=r(cA,":"),cA.forEach(t),Q2r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);EM=n(_e,"LI",{});var NSe=s(EM);$2e=n(NSe,"STRONG",{});var Lvt=s($2e);W2r=r(Lvt,"albert"),Lvt.forEach(t),H2r=r(NSe," \u2014 "),rH=n(NSe,"A",{href:!0});var xvt=s(rH);U2r=r(xvt,"TFAlbertForMultipleChoice"),xvt.forEach(t),J2r=r(NSe," (ALBERT model)"),NSe.forEach(t),Y2r=i(_e),CM=n(_e,"LI",{});var jSe=s(CM);k2e=n(jSe,"STRONG",{});var $vt=s(k2e);K2r=r($vt,"bert"),$vt.forEach(t),Z2r=r(jSe," \u2014 "),tH=n(jSe,"A",{href:!0});var kvt=s(tH);e5r=r(kvt,"TFBertForMultipleChoice"),kvt.forEach(t),o5r=r(jSe," (BERT model)"),jSe.forEach(t),r5r=i(_e),wM=n(_e,"LI",{});var DSe=s(wM);S2e=n(DSe,"STRONG",{});var Svt=s(S2e);t5r=r(Svt,"camembert"),Svt.forEach(t),a5r=r(DSe," \u2014 "),aH=n(DSe,"A",{href:!0});var Rvt=s(aH);n5r=r(Rvt,"TFCamembertForMultipleChoice"),Rvt.forEach(t),s5r=r(DSe," (CamemBERT model)"),DSe.forEach(t),l5r=i(_e),AM=n(_e,"LI",{});var GSe=s(AM);R2e=n(GSe,"STRONG",{});var Bvt=s(R2e);i5r=r(Bvt,"convbert"),Bvt.forEach(t),d5r=r(GSe," \u2014 "),nH=n(GSe,"A",{href:!0});var Pvt=s(nH);c5r=r(Pvt,"TFConvBertForMultipleChoice"),Pvt.forEach(t),f5r=r(GSe," (ConvBERT model)"),GSe.forEach(t),m5r=i(_e),yM=n(_e,"LI",{});var OSe=s(yM);B2e=n(OSe,"STRONG",{});var Ivt=s(B2e);g5r=r(Ivt,"distilbert"),Ivt.forEach(t),h5r=r(OSe," \u2014 "),sH=n(OSe,"A",{href:!0});var qvt=s(sH);p5r=r(qvt,"TFDistilBertForMultipleChoice"),qvt.forEach(t),u5r=r(OSe," (DistilBERT model)"),OSe.forEach(t),_5r=i(_e),LM=n(_e,"LI",{});var VSe=s(LM);P2e=n(VSe,"STRONG",{});var Nvt=s(P2e);b5r=r(Nvt,"electra"),Nvt.forEach(t),v5r=r(VSe," \u2014 "),lH=n(VSe,"A",{href:!0});var jvt=s(lH);F5r=r(jvt,"TFElectraForMultipleChoice"),jvt.forEach(t),T5r=r(VSe," (ELECTRA model)"),VSe.forEach(t),M5r=i(_e),xM=n(_e,"LI",{});var XSe=s(xM);I2e=n(XSe,"STRONG",{});var Dvt=s(I2e);E5r=r(Dvt,"flaubert"),Dvt.forEach(t),C5r=r(XSe," \u2014 "),iH=n(XSe,"A",{href:!0});var Gvt=s(iH);w5r=r(Gvt,"TFFlaubertForMultipleChoice"),Gvt.forEach(t),A5r=r(XSe," (FlauBERT model)"),XSe.forEach(t),y5r=i(_e),$M=n(_e,"LI",{});var zSe=s($M);q2e=n(zSe,"STRONG",{});var Ovt=s(q2e);L5r=r(Ovt,"funnel"),Ovt.forEach(t),x5r=r(zSe," \u2014 "),dH=n(zSe,"A",{href:!0});var Vvt=s(dH);$5r=r(Vvt,"TFFunnelForMultipleChoice"),Vvt.forEach(t),k5r=r(zSe," (Funnel Transformer model)"),zSe.forEach(t),S5r=i(_e),kM=n(_e,"LI",{});var QSe=s(kM);N2e=n(QSe,"STRONG",{});var Xvt=s(N2e);R5r=r(Xvt,"longformer"),Xvt.forEach(t),B5r=r(QSe," \u2014 "),cH=n(QSe,"A",{href:!0});var zvt=s(cH);P5r=r(zvt,"TFLongformerForMultipleChoice"),zvt.forEach(t),I5r=r(QSe," (Longformer model)"),QSe.forEach(t),q5r=i(_e),SM=n(_e,"LI",{});var WSe=s(SM);j2e=n(WSe,"STRONG",{});var Qvt=s(j2e);N5r=r(Qvt,"mobilebert"),Qvt.forEach(t),j5r=r(WSe," \u2014 "),fH=n(WSe,"A",{href:!0});var Wvt=s(fH);D5r=r(Wvt,"TFMobileBertForMultipleChoice"),Wvt.forEach(t),G5r=r(WSe," (MobileBERT model)"),WSe.forEach(t),O5r=i(_e),RM=n(_e,"LI",{});var HSe=s(RM);D2e=n(HSe,"STRONG",{});var Hvt=s(D2e);V5r=r(Hvt,"mpnet"),Hvt.forEach(t),X5r=r(HSe," \u2014 "),mH=n(HSe,"A",{href:!0});var Uvt=s(mH);z5r=r(Uvt,"TFMPNetForMultipleChoice"),Uvt.forEach(t),Q5r=r(HSe," (MPNet model)"),HSe.forEach(t),W5r=i(_e),BM=n(_e,"LI",{});var USe=s(BM);G2e=n(USe,"STRONG",{});var Jvt=s(G2e);H5r=r(Jvt,"rembert"),Jvt.forEach(t),U5r=r(USe," \u2014 "),gH=n(USe,"A",{href:!0});var Yvt=s(gH);J5r=r(Yvt,"TFRemBertForMultipleChoice"),Yvt.forEach(t),Y5r=r(USe," (RemBERT model)"),USe.forEach(t),K5r=i(_e),PM=n(_e,"LI",{});var JSe=s(PM);O2e=n(JSe,"STRONG",{});var Kvt=s(O2e);Z5r=r(Kvt,"roberta"),Kvt.forEach(t),evr=r(JSe," \u2014 "),hH=n(JSe,"A",{href:!0});var Zvt=s(hH);ovr=r(Zvt,"TFRobertaForMultipleChoice"),Zvt.forEach(t),rvr=r(JSe," (RoBERTa model)"),JSe.forEach(t),tvr=i(_e),IM=n(_e,"LI",{});var YSe=s(IM);V2e=n(YSe,"STRONG",{});var eFt=s(V2e);avr=r(eFt,"roformer"),eFt.forEach(t),nvr=r(YSe," \u2014 "),pH=n(YSe,"A",{href:!0});var oFt=s(pH);svr=r(oFt,"TFRoFormerForMultipleChoice"),oFt.forEach(t),lvr=r(YSe," (RoFormer model)"),YSe.forEach(t),ivr=i(_e),qM=n(_e,"LI",{});var KSe=s(qM);X2e=n(KSe,"STRONG",{});var rFt=s(X2e);dvr=r(rFt,"xlm"),rFt.forEach(t),cvr=r(KSe," \u2014 "),uH=n(KSe,"A",{href:!0});var tFt=s(uH);fvr=r(tFt,"TFXLMForMultipleChoice"),tFt.forEach(t),mvr=r(KSe," (XLM model)"),KSe.forEach(t),gvr=i(_e),NM=n(_e,"LI",{});var ZSe=s(NM);z2e=n(ZSe,"STRONG",{});var aFt=s(z2e);hvr=r(aFt,"xlm-roberta"),aFt.forEach(t),pvr=r(ZSe," \u2014 "),_H=n(ZSe,"A",{href:!0});var nFt=s(_H);uvr=r(nFt,"TFXLMRobertaForMultipleChoice"),nFt.forEach(t),_vr=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),bvr=i(_e),jM=n(_e,"LI",{});var eRe=s(jM);Q2e=n(eRe,"STRONG",{});var sFt=s(Q2e);vvr=r(sFt,"xlnet"),sFt.forEach(t),Fvr=r(eRe," \u2014 "),bH=n(eRe,"A",{href:!0});var lFt=s(bH);Tvr=r(lFt,"TFXLNetForMultipleChoice"),lFt.forEach(t),Mvr=r(eRe," (XLNet model)"),eRe.forEach(t),_e.forEach(t),Evr=i(Cl),T(DM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),cqe=i(f),ic=n(f,"H2",{class:!0});var uje=s(ic);GM=n(uje,"A",{id:!0,class:!0,href:!0});var iFt=s(GM);W2e=n(iFt,"SPAN",{});var dFt=s(W2e);T(b8.$$.fragment,dFt),dFt.forEach(t),iFt.forEach(t),Cvr=i(uje),H2e=n(uje,"SPAN",{});var cFt=s(H2e);wvr=r(cFt,"TFAutoModelForNextSentencePrediction"),cFt.forEach(t),uje.forEach(t),fqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(v8.$$.fragment,wl),Avr=i(wl),dc=n(wl,"P",{});var bZ=s(dc);yvr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vH=n(bZ,"A",{href:!0});var fFt=s(vH);Lvr=r(fFt,"from_pretrained()"),fFt.forEach(t),xvr=r(bZ," class method or the "),FH=n(bZ,"A",{href:!0});var mFt=s(FH);$vr=r(mFt,"from_config()"),mFt.forEach(t),kvr=r(bZ,` class
method.`),bZ.forEach(t),Svr=i(wl),F8=n(wl,"P",{});var _je=s(F8);Rvr=r(_je,"This class cannot be instantiated directly using "),U2e=n(_je,"CODE",{});var gFt=s(U2e);Bvr=r(gFt,"__init__()"),gFt.forEach(t),Pvr=r(_je," (throws an error)."),_je.forEach(t),Ivr=i(wl),Rt=n(wl,"DIV",{class:!0});var fA=s(Rt);T(T8.$$.fragment,fA),qvr=i(fA),J2e=n(fA,"P",{});var hFt=s(J2e);Nvr=r(hFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hFt.forEach(t),jvr=i(fA),cc=n(fA,"P",{});var vZ=s(cc);Dvr=r(vZ,`Note:
Loading a model from its configuration file does `),Y2e=n(vZ,"STRONG",{});var pFt=s(Y2e);Gvr=r(pFt,"not"),pFt.forEach(t),Ovr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(vZ,"A",{href:!0});var uFt=s(TH);Vvr=r(uFt,"from_pretrained()"),uFt.forEach(t),Xvr=r(vZ," to load the model weights."),vZ.forEach(t),zvr=i(fA),T(OM.$$.fragment,fA),fA.forEach(t),Qvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(M8.$$.fragment,Al),Wvr=i(Al),K2e=n(Al,"P",{});var _Ft=s(K2e);Hvr=r(_Ft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Ft.forEach(t),Uvr=i(Al),sn=n(Al,"P",{});var mA=s(sn);Jvr=r(mA,"The model class to instantiate is selected based on the "),Z2e=n(mA,"CODE",{});var bFt=s(Z2e);Yvr=r(bFt,"model_type"),bFt.forEach(t),Kvr=r(mA,` property of the config object (either
passed as an argument or loaded from `),e5e=n(mA,"CODE",{});var vFt=s(e5e);Zvr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),eFr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=n(mA,"CODE",{});var FFt=s(o5e);oFr=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),rFr=r(mA,":"),mA.forEach(t),tFr=i(Al),E8=n(Al,"UL",{});var bje=s(E8);VM=n(bje,"LI",{});var oRe=s(VM);r5e=n(oRe,"STRONG",{});var TFt=s(r5e);aFr=r(TFt,"bert"),TFt.forEach(t),nFr=r(oRe," \u2014 "),MH=n(oRe,"A",{href:!0});var MFt=s(MH);sFr=r(MFt,"TFBertForNextSentencePrediction"),MFt.forEach(t),lFr=r(oRe," (BERT model)"),oRe.forEach(t),iFr=i(bje),XM=n(bje,"LI",{});var rRe=s(XM);t5e=n(rRe,"STRONG",{});var EFt=s(t5e);dFr=r(EFt,"mobilebert"),EFt.forEach(t),cFr=r(rRe," \u2014 "),EH=n(rRe,"A",{href:!0});var CFt=s(EH);fFr=r(CFt,"TFMobileBertForNextSentencePrediction"),CFt.forEach(t),mFr=r(rRe," (MobileBERT model)"),rRe.forEach(t),bje.forEach(t),gFr=i(Al),T(zM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),mqe=i(f),fc=n(f,"H2",{class:!0});var vje=s(fc);QM=n(vje,"A",{id:!0,class:!0,href:!0});var wFt=s(QM);a5e=n(wFt,"SPAN",{});var AFt=s(a5e);T(C8.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),hFr=i(vje),n5e=n(vje,"SPAN",{});var yFt=s(n5e);pFr=r(yFt,"TFAutoModelForTableQuestionAnswering"),yFt.forEach(t),vje.forEach(t),gqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(w8.$$.fragment,yl),uFr=i(yl),mc=n(yl,"P",{});var FZ=s(mc);_Fr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CH=n(FZ,"A",{href:!0});var LFt=s(CH);bFr=r(LFt,"from_pretrained()"),LFt.forEach(t),vFr=r(FZ," class method or the "),wH=n(FZ,"A",{href:!0});var xFt=s(wH);FFr=r(xFt,"from_config()"),xFt.forEach(t),TFr=r(FZ,` class
method.`),FZ.forEach(t),MFr=i(yl),A8=n(yl,"P",{});var Fje=s(A8);EFr=r(Fje,"This class cannot be instantiated directly using "),s5e=n(Fje,"CODE",{});var $Ft=s(s5e);CFr=r($Ft,"__init__()"),$Ft.forEach(t),wFr=r(Fje," (throws an error)."),Fje.forEach(t),AFr=i(yl),Bt=n(yl,"DIV",{class:!0});var gA=s(Bt);T(y8.$$.fragment,gA),yFr=i(gA),l5e=n(gA,"P",{});var kFt=s(l5e);LFr=r(kFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kFt.forEach(t),xFr=i(gA),gc=n(gA,"P",{});var TZ=s(gc);$Fr=r(TZ,`Note:
Loading a model from its configuration file does `),i5e=n(TZ,"STRONG",{});var SFt=s(i5e);kFr=r(SFt,"not"),SFt.forEach(t),SFr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(TZ,"A",{href:!0});var RFt=s(AH);RFr=r(RFt,"from_pretrained()"),RFt.forEach(t),BFr=r(TZ," to load the model weights."),TZ.forEach(t),PFr=i(gA),T(WM.$$.fragment,gA),gA.forEach(t),IFr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(L8.$$.fragment,Ll),qFr=i(Ll),d5e=n(Ll,"P",{});var BFt=s(d5e);NFr=r(BFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BFt.forEach(t),jFr=i(Ll),ln=n(Ll,"P",{});var hA=s(ln);DFr=r(hA,"The model class to instantiate is selected based on the "),c5e=n(hA,"CODE",{});var PFt=s(c5e);GFr=r(PFt,"model_type"),PFt.forEach(t),OFr=r(hA,` property of the config object (either
passed as an argument or loaded from `),f5e=n(hA,"CODE",{});var IFt=s(f5e);VFr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),XFr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(hA,"CODE",{});var qFt=s(m5e);zFr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),QFr=r(hA,":"),hA.forEach(t),WFr=i(Ll),g5e=n(Ll,"UL",{});var NFt=s(g5e);HM=n(NFt,"LI",{});var tRe=s(HM);h5e=n(tRe,"STRONG",{});var jFt=s(h5e);HFr=r(jFt,"tapas"),jFt.forEach(t),UFr=r(tRe," \u2014 "),yH=n(tRe,"A",{href:!0});var DFt=s(yH);JFr=r(DFt,"TFTapasForQuestionAnswering"),DFt.forEach(t),YFr=r(tRe," (TAPAS model)"),tRe.forEach(t),NFt.forEach(t),KFr=i(Ll),T(UM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),hqe=i(f),hc=n(f,"H2",{class:!0});var Tje=s(hc);JM=n(Tje,"A",{id:!0,class:!0,href:!0});var GFt=s(JM);p5e=n(GFt,"SPAN",{});var OFt=s(p5e);T(x8.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),ZFr=i(Tje),u5e=n(Tje,"SPAN",{});var VFt=s(u5e);e0r=r(VFt,"TFAutoModelForTokenClassification"),VFt.forEach(t),Tje.forEach(t),pqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T($8.$$.fragment,xl),o0r=i(xl),pc=n(xl,"P",{});var MZ=s(pc);r0r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LH=n(MZ,"A",{href:!0});var XFt=s(LH);t0r=r(XFt,"from_pretrained()"),XFt.forEach(t),a0r=r(MZ," class method or the "),xH=n(MZ,"A",{href:!0});var zFt=s(xH);n0r=r(zFt,"from_config()"),zFt.forEach(t),s0r=r(MZ,` class
method.`),MZ.forEach(t),l0r=i(xl),k8=n(xl,"P",{});var Mje=s(k8);i0r=r(Mje,"This class cannot be instantiated directly using "),_5e=n(Mje,"CODE",{});var QFt=s(_5e);d0r=r(QFt,"__init__()"),QFt.forEach(t),c0r=r(Mje," (throws an error)."),Mje.forEach(t),f0r=i(xl),Pt=n(xl,"DIV",{class:!0});var pA=s(Pt);T(S8.$$.fragment,pA),m0r=i(pA),b5e=n(pA,"P",{});var WFt=s(b5e);g0r=r(WFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WFt.forEach(t),h0r=i(pA),uc=n(pA,"P",{});var EZ=s(uc);p0r=r(EZ,`Note:
Loading a model from its configuration file does `),v5e=n(EZ,"STRONG",{});var HFt=s(v5e);u0r=r(HFt,"not"),HFt.forEach(t),_0r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(EZ,"A",{href:!0});var UFt=s($H);b0r=r(UFt,"from_pretrained()"),UFt.forEach(t),v0r=r(EZ," to load the model weights."),EZ.forEach(t),F0r=i(pA),T(YM.$$.fragment,pA),pA.forEach(t),T0r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(R8.$$.fragment,$l),M0r=i($l),F5e=n($l,"P",{});var JFt=s(F5e);E0r=r(JFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JFt.forEach(t),C0r=i($l),dn=n($l,"P",{});var uA=s(dn);w0r=r(uA,"The model class to instantiate is selected based on the "),T5e=n(uA,"CODE",{});var YFt=s(T5e);A0r=r(YFt,"model_type"),YFt.forEach(t),y0r=r(uA,` property of the config object (either
passed as an argument or loaded from `),M5e=n(uA,"CODE",{});var KFt=s(M5e);L0r=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),x0r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(uA,"CODE",{});var ZFt=s(E5e);$0r=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),k0r=r(uA,":"),uA.forEach(t),S0r=i($l),de=n($l,"UL",{});var me=s(de);KM=n(me,"LI",{});var aRe=s(KM);C5e=n(aRe,"STRONG",{});var e0t=s(C5e);R0r=r(e0t,"albert"),e0t.forEach(t),B0r=r(aRe," \u2014 "),kH=n(aRe,"A",{href:!0});var o0t=s(kH);P0r=r(o0t,"TFAlbertForTokenClassification"),o0t.forEach(t),I0r=r(aRe," (ALBERT model)"),aRe.forEach(t),q0r=i(me),ZM=n(me,"LI",{});var nRe=s(ZM);w5e=n(nRe,"STRONG",{});var r0t=s(w5e);N0r=r(r0t,"bert"),r0t.forEach(t),j0r=r(nRe," \u2014 "),SH=n(nRe,"A",{href:!0});var t0t=s(SH);D0r=r(t0t,"TFBertForTokenClassification"),t0t.forEach(t),G0r=r(nRe," (BERT model)"),nRe.forEach(t),O0r=i(me),e4=n(me,"LI",{});var sRe=s(e4);A5e=n(sRe,"STRONG",{});var a0t=s(A5e);V0r=r(a0t,"camembert"),a0t.forEach(t),X0r=r(sRe," \u2014 "),RH=n(sRe,"A",{href:!0});var n0t=s(RH);z0r=r(n0t,"TFCamembertForTokenClassification"),n0t.forEach(t),Q0r=r(sRe," (CamemBERT model)"),sRe.forEach(t),W0r=i(me),o4=n(me,"LI",{});var lRe=s(o4);y5e=n(lRe,"STRONG",{});var s0t=s(y5e);H0r=r(s0t,"convbert"),s0t.forEach(t),U0r=r(lRe," \u2014 "),BH=n(lRe,"A",{href:!0});var l0t=s(BH);J0r=r(l0t,"TFConvBertForTokenClassification"),l0t.forEach(t),Y0r=r(lRe," (ConvBERT model)"),lRe.forEach(t),K0r=i(me),r4=n(me,"LI",{});var iRe=s(r4);L5e=n(iRe,"STRONG",{});var i0t=s(L5e);Z0r=r(i0t,"deberta"),i0t.forEach(t),eTr=r(iRe," \u2014 "),PH=n(iRe,"A",{href:!0});var d0t=s(PH);oTr=r(d0t,"TFDebertaForTokenClassification"),d0t.forEach(t),rTr=r(iRe," (DeBERTa model)"),iRe.forEach(t),tTr=i(me),t4=n(me,"LI",{});var dRe=s(t4);x5e=n(dRe,"STRONG",{});var c0t=s(x5e);aTr=r(c0t,"deberta-v2"),c0t.forEach(t),nTr=r(dRe," \u2014 "),IH=n(dRe,"A",{href:!0});var f0t=s(IH);sTr=r(f0t,"TFDebertaV2ForTokenClassification"),f0t.forEach(t),lTr=r(dRe," (DeBERTa-v2 model)"),dRe.forEach(t),iTr=i(me),a4=n(me,"LI",{});var cRe=s(a4);$5e=n(cRe,"STRONG",{});var m0t=s($5e);dTr=r(m0t,"distilbert"),m0t.forEach(t),cTr=r(cRe," \u2014 "),qH=n(cRe,"A",{href:!0});var g0t=s(qH);fTr=r(g0t,"TFDistilBertForTokenClassification"),g0t.forEach(t),mTr=r(cRe," (DistilBERT model)"),cRe.forEach(t),gTr=i(me),n4=n(me,"LI",{});var fRe=s(n4);k5e=n(fRe,"STRONG",{});var h0t=s(k5e);hTr=r(h0t,"electra"),h0t.forEach(t),pTr=r(fRe," \u2014 "),NH=n(fRe,"A",{href:!0});var p0t=s(NH);uTr=r(p0t,"TFElectraForTokenClassification"),p0t.forEach(t),_Tr=r(fRe," (ELECTRA model)"),fRe.forEach(t),bTr=i(me),s4=n(me,"LI",{});var mRe=s(s4);S5e=n(mRe,"STRONG",{});var u0t=s(S5e);vTr=r(u0t,"flaubert"),u0t.forEach(t),FTr=r(mRe," \u2014 "),jH=n(mRe,"A",{href:!0});var _0t=s(jH);TTr=r(_0t,"TFFlaubertForTokenClassification"),_0t.forEach(t),MTr=r(mRe," (FlauBERT model)"),mRe.forEach(t),ETr=i(me),l4=n(me,"LI",{});var gRe=s(l4);R5e=n(gRe,"STRONG",{});var b0t=s(R5e);CTr=r(b0t,"funnel"),b0t.forEach(t),wTr=r(gRe," \u2014 "),DH=n(gRe,"A",{href:!0});var v0t=s(DH);ATr=r(v0t,"TFFunnelForTokenClassification"),v0t.forEach(t),yTr=r(gRe," (Funnel Transformer model)"),gRe.forEach(t),LTr=i(me),i4=n(me,"LI",{});var hRe=s(i4);B5e=n(hRe,"STRONG",{});var F0t=s(B5e);xTr=r(F0t,"layoutlm"),F0t.forEach(t),$Tr=r(hRe," \u2014 "),GH=n(hRe,"A",{href:!0});var T0t=s(GH);kTr=r(T0t,"TFLayoutLMForTokenClassification"),T0t.forEach(t),STr=r(hRe," (LayoutLM model)"),hRe.forEach(t),RTr=i(me),d4=n(me,"LI",{});var pRe=s(d4);P5e=n(pRe,"STRONG",{});var M0t=s(P5e);BTr=r(M0t,"longformer"),M0t.forEach(t),PTr=r(pRe," \u2014 "),OH=n(pRe,"A",{href:!0});var E0t=s(OH);ITr=r(E0t,"TFLongformerForTokenClassification"),E0t.forEach(t),qTr=r(pRe," (Longformer model)"),pRe.forEach(t),NTr=i(me),c4=n(me,"LI",{});var uRe=s(c4);I5e=n(uRe,"STRONG",{});var C0t=s(I5e);jTr=r(C0t,"mobilebert"),C0t.forEach(t),DTr=r(uRe," \u2014 "),VH=n(uRe,"A",{href:!0});var w0t=s(VH);GTr=r(w0t,"TFMobileBertForTokenClassification"),w0t.forEach(t),OTr=r(uRe," (MobileBERT model)"),uRe.forEach(t),VTr=i(me),f4=n(me,"LI",{});var _Re=s(f4);q5e=n(_Re,"STRONG",{});var A0t=s(q5e);XTr=r(A0t,"mpnet"),A0t.forEach(t),zTr=r(_Re," \u2014 "),XH=n(_Re,"A",{href:!0});var y0t=s(XH);QTr=r(y0t,"TFMPNetForTokenClassification"),y0t.forEach(t),WTr=r(_Re," (MPNet model)"),_Re.forEach(t),HTr=i(me),m4=n(me,"LI",{});var bRe=s(m4);N5e=n(bRe,"STRONG",{});var L0t=s(N5e);UTr=r(L0t,"rembert"),L0t.forEach(t),JTr=r(bRe," \u2014 "),zH=n(bRe,"A",{href:!0});var x0t=s(zH);YTr=r(x0t,"TFRemBertForTokenClassification"),x0t.forEach(t),KTr=r(bRe," (RemBERT model)"),bRe.forEach(t),ZTr=i(me),g4=n(me,"LI",{});var vRe=s(g4);j5e=n(vRe,"STRONG",{});var $0t=s(j5e);eMr=r($0t,"roberta"),$0t.forEach(t),oMr=r(vRe," \u2014 "),QH=n(vRe,"A",{href:!0});var k0t=s(QH);rMr=r(k0t,"TFRobertaForTokenClassification"),k0t.forEach(t),tMr=r(vRe," (RoBERTa model)"),vRe.forEach(t),aMr=i(me),h4=n(me,"LI",{});var FRe=s(h4);D5e=n(FRe,"STRONG",{});var S0t=s(D5e);nMr=r(S0t,"roformer"),S0t.forEach(t),sMr=r(FRe," \u2014 "),WH=n(FRe,"A",{href:!0});var R0t=s(WH);lMr=r(R0t,"TFRoFormerForTokenClassification"),R0t.forEach(t),iMr=r(FRe," (RoFormer model)"),FRe.forEach(t),dMr=i(me),p4=n(me,"LI",{});var TRe=s(p4);G5e=n(TRe,"STRONG",{});var B0t=s(G5e);cMr=r(B0t,"xlm"),B0t.forEach(t),fMr=r(TRe," \u2014 "),HH=n(TRe,"A",{href:!0});var P0t=s(HH);mMr=r(P0t,"TFXLMForTokenClassification"),P0t.forEach(t),gMr=r(TRe," (XLM model)"),TRe.forEach(t),hMr=i(me),u4=n(me,"LI",{});var MRe=s(u4);O5e=n(MRe,"STRONG",{});var I0t=s(O5e);pMr=r(I0t,"xlm-roberta"),I0t.forEach(t),uMr=r(MRe," \u2014 "),UH=n(MRe,"A",{href:!0});var q0t=s(UH);_Mr=r(q0t,"TFXLMRobertaForTokenClassification"),q0t.forEach(t),bMr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),vMr=i(me),_4=n(me,"LI",{});var ERe=s(_4);V5e=n(ERe,"STRONG",{});var N0t=s(V5e);FMr=r(N0t,"xlnet"),N0t.forEach(t),TMr=r(ERe," \u2014 "),JH=n(ERe,"A",{href:!0});var j0t=s(JH);MMr=r(j0t,"TFXLNetForTokenClassification"),j0t.forEach(t),EMr=r(ERe," (XLNet model)"),ERe.forEach(t),me.forEach(t),CMr=i($l),T(b4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),uqe=i(f),_c=n(f,"H2",{class:!0});var Eje=s(_c);v4=n(Eje,"A",{id:!0,class:!0,href:!0});var D0t=s(v4);X5e=n(D0t,"SPAN",{});var G0t=s(X5e);T(B8.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),wMr=i(Eje),z5e=n(Eje,"SPAN",{});var O0t=s(z5e);AMr=r(O0t,"TFAutoModelForQuestionAnswering"),O0t.forEach(t),Eje.forEach(t),_qe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(P8.$$.fragment,kl),yMr=i(kl),bc=n(kl,"P",{});var CZ=s(bc);LMr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YH=n(CZ,"A",{href:!0});var V0t=s(YH);xMr=r(V0t,"from_pretrained()"),V0t.forEach(t),$Mr=r(CZ," class method or the "),KH=n(CZ,"A",{href:!0});var X0t=s(KH);kMr=r(X0t,"from_config()"),X0t.forEach(t),SMr=r(CZ,` class
method.`),CZ.forEach(t),RMr=i(kl),I8=n(kl,"P",{});var Cje=s(I8);BMr=r(Cje,"This class cannot be instantiated directly using "),Q5e=n(Cje,"CODE",{});var z0t=s(Q5e);PMr=r(z0t,"__init__()"),z0t.forEach(t),IMr=r(Cje," (throws an error)."),Cje.forEach(t),qMr=i(kl),It=n(kl,"DIV",{class:!0});var _A=s(It);T(q8.$$.fragment,_A),NMr=i(_A),W5e=n(_A,"P",{});var Q0t=s(W5e);jMr=r(Q0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q0t.forEach(t),DMr=i(_A),vc=n(_A,"P",{});var wZ=s(vc);GMr=r(wZ,`Note:
Loading a model from its configuration file does `),H5e=n(wZ,"STRONG",{});var W0t=s(H5e);OMr=r(W0t,"not"),W0t.forEach(t),VMr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(wZ,"A",{href:!0});var H0t=s(ZH);XMr=r(H0t,"from_pretrained()"),H0t.forEach(t),zMr=r(wZ," to load the model weights."),wZ.forEach(t),QMr=i(_A),T(F4.$$.fragment,_A),_A.forEach(t),WMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(N8.$$.fragment,Sl),HMr=i(Sl),U5e=n(Sl,"P",{});var U0t=s(U5e);UMr=r(U0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U0t.forEach(t),JMr=i(Sl),cn=n(Sl,"P",{});var bA=s(cn);YMr=r(bA,"The model class to instantiate is selected based on the "),J5e=n(bA,"CODE",{});var J0t=s(J5e);KMr=r(J0t,"model_type"),J0t.forEach(t),ZMr=r(bA,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(bA,"CODE",{});var Y0t=s(Y5e);e4r=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),o4r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(bA,"CODE",{});var K0t=s(K5e);r4r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),t4r=r(bA,":"),bA.forEach(t),a4r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);T4=n(ge,"LI",{});var CRe=s(T4);Z5e=n(CRe,"STRONG",{});var Z0t=s(Z5e);n4r=r(Z0t,"albert"),Z0t.forEach(t),s4r=r(CRe," \u2014 "),eU=n(CRe,"A",{href:!0});var eTt=s(eU);l4r=r(eTt,"TFAlbertForQuestionAnswering"),eTt.forEach(t),i4r=r(CRe," (ALBERT model)"),CRe.forEach(t),d4r=i(ge),M4=n(ge,"LI",{});var wRe=s(M4);eve=n(wRe,"STRONG",{});var oTt=s(eve);c4r=r(oTt,"bert"),oTt.forEach(t),f4r=r(wRe," \u2014 "),oU=n(wRe,"A",{href:!0});var rTt=s(oU);m4r=r(rTt,"TFBertForQuestionAnswering"),rTt.forEach(t),g4r=r(wRe," (BERT model)"),wRe.forEach(t),h4r=i(ge),E4=n(ge,"LI",{});var ARe=s(E4);ove=n(ARe,"STRONG",{});var tTt=s(ove);p4r=r(tTt,"camembert"),tTt.forEach(t),u4r=r(ARe," \u2014 "),rU=n(ARe,"A",{href:!0});var aTt=s(rU);_4r=r(aTt,"TFCamembertForQuestionAnswering"),aTt.forEach(t),b4r=r(ARe," (CamemBERT model)"),ARe.forEach(t),v4r=i(ge),C4=n(ge,"LI",{});var yRe=s(C4);rve=n(yRe,"STRONG",{});var nTt=s(rve);F4r=r(nTt,"convbert"),nTt.forEach(t),T4r=r(yRe," \u2014 "),tU=n(yRe,"A",{href:!0});var sTt=s(tU);M4r=r(sTt,"TFConvBertForQuestionAnswering"),sTt.forEach(t),E4r=r(yRe," (ConvBERT model)"),yRe.forEach(t),C4r=i(ge),w4=n(ge,"LI",{});var LRe=s(w4);tve=n(LRe,"STRONG",{});var lTt=s(tve);w4r=r(lTt,"deberta"),lTt.forEach(t),A4r=r(LRe," \u2014 "),aU=n(LRe,"A",{href:!0});var iTt=s(aU);y4r=r(iTt,"TFDebertaForQuestionAnswering"),iTt.forEach(t),L4r=r(LRe," (DeBERTa model)"),LRe.forEach(t),x4r=i(ge),A4=n(ge,"LI",{});var xRe=s(A4);ave=n(xRe,"STRONG",{});var dTt=s(ave);$4r=r(dTt,"deberta-v2"),dTt.forEach(t),k4r=r(xRe," \u2014 "),nU=n(xRe,"A",{href:!0});var cTt=s(nU);S4r=r(cTt,"TFDebertaV2ForQuestionAnswering"),cTt.forEach(t),R4r=r(xRe," (DeBERTa-v2 model)"),xRe.forEach(t),B4r=i(ge),y4=n(ge,"LI",{});var $Re=s(y4);nve=n($Re,"STRONG",{});var fTt=s(nve);P4r=r(fTt,"distilbert"),fTt.forEach(t),I4r=r($Re," \u2014 "),sU=n($Re,"A",{href:!0});var mTt=s(sU);q4r=r(mTt,"TFDistilBertForQuestionAnswering"),mTt.forEach(t),N4r=r($Re," (DistilBERT model)"),$Re.forEach(t),j4r=i(ge),L4=n(ge,"LI",{});var kRe=s(L4);sve=n(kRe,"STRONG",{});var gTt=s(sve);D4r=r(gTt,"electra"),gTt.forEach(t),G4r=r(kRe," \u2014 "),lU=n(kRe,"A",{href:!0});var hTt=s(lU);O4r=r(hTt,"TFElectraForQuestionAnswering"),hTt.forEach(t),V4r=r(kRe," (ELECTRA model)"),kRe.forEach(t),X4r=i(ge),x4=n(ge,"LI",{});var SRe=s(x4);lve=n(SRe,"STRONG",{});var pTt=s(lve);z4r=r(pTt,"flaubert"),pTt.forEach(t),Q4r=r(SRe," \u2014 "),iU=n(SRe,"A",{href:!0});var uTt=s(iU);W4r=r(uTt,"TFFlaubertForQuestionAnsweringSimple"),uTt.forEach(t),H4r=r(SRe," (FlauBERT model)"),SRe.forEach(t),U4r=i(ge),$4=n(ge,"LI",{});var RRe=s($4);ive=n(RRe,"STRONG",{});var _Tt=s(ive);J4r=r(_Tt,"funnel"),_Tt.forEach(t),Y4r=r(RRe," \u2014 "),dU=n(RRe,"A",{href:!0});var bTt=s(dU);K4r=r(bTt,"TFFunnelForQuestionAnswering"),bTt.forEach(t),Z4r=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),eEr=i(ge),k4=n(ge,"LI",{});var BRe=s(k4);dve=n(BRe,"STRONG",{});var vTt=s(dve);oEr=r(vTt,"gptj"),vTt.forEach(t),rEr=r(BRe," \u2014 "),cU=n(BRe,"A",{href:!0});var FTt=s(cU);tEr=r(FTt,"TFGPTJForQuestionAnswering"),FTt.forEach(t),aEr=r(BRe," (GPT-J model)"),BRe.forEach(t),nEr=i(ge),S4=n(ge,"LI",{});var PRe=s(S4);cve=n(PRe,"STRONG",{});var TTt=s(cve);sEr=r(TTt,"longformer"),TTt.forEach(t),lEr=r(PRe," \u2014 "),fU=n(PRe,"A",{href:!0});var MTt=s(fU);iEr=r(MTt,"TFLongformerForQuestionAnswering"),MTt.forEach(t),dEr=r(PRe," (Longformer model)"),PRe.forEach(t),cEr=i(ge),R4=n(ge,"LI",{});var IRe=s(R4);fve=n(IRe,"STRONG",{});var ETt=s(fve);fEr=r(ETt,"mobilebert"),ETt.forEach(t),mEr=r(IRe," \u2014 "),mU=n(IRe,"A",{href:!0});var CTt=s(mU);gEr=r(CTt,"TFMobileBertForQuestionAnswering"),CTt.forEach(t),hEr=r(IRe," (MobileBERT model)"),IRe.forEach(t),pEr=i(ge),B4=n(ge,"LI",{});var qRe=s(B4);mve=n(qRe,"STRONG",{});var wTt=s(mve);uEr=r(wTt,"mpnet"),wTt.forEach(t),_Er=r(qRe," \u2014 "),gU=n(qRe,"A",{href:!0});var ATt=s(gU);bEr=r(ATt,"TFMPNetForQuestionAnswering"),ATt.forEach(t),vEr=r(qRe," (MPNet model)"),qRe.forEach(t),FEr=i(ge),P4=n(ge,"LI",{});var NRe=s(P4);gve=n(NRe,"STRONG",{});var yTt=s(gve);TEr=r(yTt,"rembert"),yTt.forEach(t),MEr=r(NRe," \u2014 "),hU=n(NRe,"A",{href:!0});var LTt=s(hU);EEr=r(LTt,"TFRemBertForQuestionAnswering"),LTt.forEach(t),CEr=r(NRe," (RemBERT model)"),NRe.forEach(t),wEr=i(ge),I4=n(ge,"LI",{});var jRe=s(I4);hve=n(jRe,"STRONG",{});var xTt=s(hve);AEr=r(xTt,"roberta"),xTt.forEach(t),yEr=r(jRe," \u2014 "),pU=n(jRe,"A",{href:!0});var $Tt=s(pU);LEr=r($Tt,"TFRobertaForQuestionAnswering"),$Tt.forEach(t),xEr=r(jRe," (RoBERTa model)"),jRe.forEach(t),$Er=i(ge),q4=n(ge,"LI",{});var DRe=s(q4);pve=n(DRe,"STRONG",{});var kTt=s(pve);kEr=r(kTt,"roformer"),kTt.forEach(t),SEr=r(DRe," \u2014 "),uU=n(DRe,"A",{href:!0});var STt=s(uU);REr=r(STt,"TFRoFormerForQuestionAnswering"),STt.forEach(t),BEr=r(DRe," (RoFormer model)"),DRe.forEach(t),PEr=i(ge),N4=n(ge,"LI",{});var GRe=s(N4);uve=n(GRe,"STRONG",{});var RTt=s(uve);IEr=r(RTt,"xlm"),RTt.forEach(t),qEr=r(GRe," \u2014 "),_U=n(GRe,"A",{href:!0});var BTt=s(_U);NEr=r(BTt,"TFXLMForQuestionAnsweringSimple"),BTt.forEach(t),jEr=r(GRe," (XLM model)"),GRe.forEach(t),DEr=i(ge),j4=n(ge,"LI",{});var ORe=s(j4);_ve=n(ORe,"STRONG",{});var PTt=s(_ve);GEr=r(PTt,"xlm-roberta"),PTt.forEach(t),OEr=r(ORe," \u2014 "),bU=n(ORe,"A",{href:!0});var ITt=s(bU);VEr=r(ITt,"TFXLMRobertaForQuestionAnswering"),ITt.forEach(t),XEr=r(ORe," (XLM-RoBERTa model)"),ORe.forEach(t),zEr=i(ge),D4=n(ge,"LI",{});var VRe=s(D4);bve=n(VRe,"STRONG",{});var qTt=s(bve);QEr=r(qTt,"xlnet"),qTt.forEach(t),WEr=r(VRe," \u2014 "),vU=n(VRe,"A",{href:!0});var NTt=s(vU);HEr=r(NTt,"TFXLNetForQuestionAnsweringSimple"),NTt.forEach(t),UEr=r(VRe," (XLNet model)"),VRe.forEach(t),ge.forEach(t),JEr=i(Sl),T(G4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),bqe=i(f),Fc=n(f,"H2",{class:!0});var wje=s(Fc);O4=n(wje,"A",{id:!0,class:!0,href:!0});var jTt=s(O4);vve=n(jTt,"SPAN",{});var DTt=s(vve);T(j8.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),YEr=i(wje),Fve=n(wje,"SPAN",{});var GTt=s(Fve);KEr=r(GTt,"TFAutoModelForVision2Seq"),GTt.forEach(t),wje.forEach(t),vqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(D8.$$.fragment,Rl),ZEr=i(Rl),Tc=n(Rl,"P",{});var AZ=s(Tc);eCr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FU=n(AZ,"A",{href:!0});var OTt=s(FU);oCr=r(OTt,"from_pretrained()"),OTt.forEach(t),rCr=r(AZ," class method or the "),TU=n(AZ,"A",{href:!0});var VTt=s(TU);tCr=r(VTt,"from_config()"),VTt.forEach(t),aCr=r(AZ,` class
method.`),AZ.forEach(t),nCr=i(Rl),G8=n(Rl,"P",{});var Aje=s(G8);sCr=r(Aje,"This class cannot be instantiated directly using "),Tve=n(Aje,"CODE",{});var XTt=s(Tve);lCr=r(XTt,"__init__()"),XTt.forEach(t),iCr=r(Aje," (throws an error)."),Aje.forEach(t),dCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var vA=s(qt);T(O8.$$.fragment,vA),cCr=i(vA),Mve=n(vA,"P",{});var zTt=s(Mve);fCr=r(zTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zTt.forEach(t),mCr=i(vA),Mc=n(vA,"P",{});var yZ=s(Mc);gCr=r(yZ,`Note:
Loading a model from its configuration file does `),Eve=n(yZ,"STRONG",{});var QTt=s(Eve);hCr=r(QTt,"not"),QTt.forEach(t),pCr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(yZ,"A",{href:!0});var WTt=s(MU);uCr=r(WTt,"from_pretrained()"),WTt.forEach(t),_Cr=r(yZ," to load the model weights."),yZ.forEach(t),bCr=i(vA),T(V4.$$.fragment,vA),vA.forEach(t),vCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(V8.$$.fragment,Bl),FCr=i(Bl),Cve=n(Bl,"P",{});var HTt=s(Cve);TCr=r(HTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HTt.forEach(t),MCr=i(Bl),fn=n(Bl,"P",{});var FA=s(fn);ECr=r(FA,"The model class to instantiate is selected based on the "),wve=n(FA,"CODE",{});var UTt=s(wve);CCr=r(UTt,"model_type"),UTt.forEach(t),wCr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Ave=n(FA,"CODE",{});var JTt=s(Ave);ACr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),yCr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(FA,"CODE",{});var YTt=s(yve);LCr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),xCr=r(FA,":"),FA.forEach(t),$Cr=i(Bl),Lve=n(Bl,"UL",{});var KTt=s(Lve);X4=n(KTt,"LI",{});var XRe=s(X4);xve=n(XRe,"STRONG",{});var ZTt=s(xve);kCr=r(ZTt,"vision-encoder-decoder"),ZTt.forEach(t),SCr=r(XRe," \u2014 "),EU=n(XRe,"A",{href:!0});var eMt=s(EU);RCr=r(eMt,"TFVisionEncoderDecoderModel"),eMt.forEach(t),BCr=r(XRe," (Vision Encoder decoder model)"),XRe.forEach(t),KTt.forEach(t),PCr=i(Bl),T(z4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),Fqe=i(f),Ec=n(f,"H2",{class:!0});var yje=s(Ec);Q4=n(yje,"A",{id:!0,class:!0,href:!0});var oMt=s(Q4);$ve=n(oMt,"SPAN",{});var rMt=s($ve);T(X8.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),ICr=i(yje),kve=n(yje,"SPAN",{});var tMt=s(kve);qCr=r(tMt,"TFAutoModelForSpeechSeq2Seq"),tMt.forEach(t),yje.forEach(t),Tqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(z8.$$.fragment,Pl),NCr=i(Pl),Cc=n(Pl,"P",{});var LZ=s(Cc);jCr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CU=n(LZ,"A",{href:!0});var aMt=s(CU);DCr=r(aMt,"from_pretrained()"),aMt.forEach(t),GCr=r(LZ," class method or the "),wU=n(LZ,"A",{href:!0});var nMt=s(wU);OCr=r(nMt,"from_config()"),nMt.forEach(t),VCr=r(LZ,` class
method.`),LZ.forEach(t),XCr=i(Pl),Q8=n(Pl,"P",{});var Lje=s(Q8);zCr=r(Lje,"This class cannot be instantiated directly using "),Sve=n(Lje,"CODE",{});var sMt=s(Sve);QCr=r(sMt,"__init__()"),sMt.forEach(t),WCr=r(Lje," (throws an error)."),Lje.forEach(t),HCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var TA=s(Nt);T(W8.$$.fragment,TA),UCr=i(TA),Rve=n(TA,"P",{});var lMt=s(Rve);JCr=r(lMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lMt.forEach(t),YCr=i(TA),wc=n(TA,"P",{});var xZ=s(wc);KCr=r(xZ,`Note:
Loading a model from its configuration file does `),Bve=n(xZ,"STRONG",{});var iMt=s(Bve);ZCr=r(iMt,"not"),iMt.forEach(t),e3r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(xZ,"A",{href:!0});var dMt=s(AU);o3r=r(dMt,"from_pretrained()"),dMt.forEach(t),r3r=r(xZ," to load the model weights."),xZ.forEach(t),t3r=i(TA),T(W4.$$.fragment,TA),TA.forEach(t),a3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(H8.$$.fragment,Il),n3r=i(Il),Pve=n(Il,"P",{});var cMt=s(Pve);s3r=r(cMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cMt.forEach(t),l3r=i(Il),mn=n(Il,"P",{});var MA=s(mn);i3r=r(MA,"The model class to instantiate is selected based on the "),Ive=n(MA,"CODE",{});var fMt=s(Ive);d3r=r(fMt,"model_type"),fMt.forEach(t),c3r=r(MA,` property of the config object (either
passed as an argument or loaded from `),qve=n(MA,"CODE",{});var mMt=s(qve);f3r=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),m3r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(MA,"CODE",{});var gMt=s(Nve);g3r=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),h3r=r(MA,":"),MA.forEach(t),p3r=i(Il),jve=n(Il,"UL",{});var hMt=s(jve);H4=n(hMt,"LI",{});var zRe=s(H4);Dve=n(zRe,"STRONG",{});var pMt=s(Dve);u3r=r(pMt,"speech_to_text"),pMt.forEach(t),_3r=r(zRe," \u2014 "),yU=n(zRe,"A",{href:!0});var uMt=s(yU);b3r=r(uMt,"TFSpeech2TextForConditionalGeneration"),uMt.forEach(t),v3r=r(zRe," (Speech2Text model)"),zRe.forEach(t),hMt.forEach(t),F3r=i(Il),T(U4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),Mqe=i(f),Ac=n(f,"H2",{class:!0});var xje=s(Ac);J4=n(xje,"A",{id:!0,class:!0,href:!0});var _Mt=s(J4);Gve=n(_Mt,"SPAN",{});var bMt=s(Gve);T(U8.$$.fragment,bMt),bMt.forEach(t),_Mt.forEach(t),T3r=i(xje),Ove=n(xje,"SPAN",{});var vMt=s(Ove);M3r=r(vMt,"FlaxAutoModel"),vMt.forEach(t),xje.forEach(t),Eqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(J8.$$.fragment,ql),E3r=i(ql),yc=n(ql,"P",{});var $Z=s(yc);C3r=r($Z,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LU=n($Z,"A",{href:!0});var FMt=s(LU);w3r=r(FMt,"from_pretrained()"),FMt.forEach(t),A3r=r($Z," class method or the "),xU=n($Z,"A",{href:!0});var TMt=s(xU);y3r=r(TMt,"from_config()"),TMt.forEach(t),L3r=r($Z,` class
method.`),$Z.forEach(t),x3r=i(ql),Y8=n(ql,"P",{});var $je=s(Y8);$3r=r($je,"This class cannot be instantiated directly using "),Vve=n($je,"CODE",{});var MMt=s(Vve);k3r=r(MMt,"__init__()"),MMt.forEach(t),S3r=r($je," (throws an error)."),$je.forEach(t),R3r=i(ql),jt=n(ql,"DIV",{class:!0});var EA=s(jt);T(K8.$$.fragment,EA),B3r=i(EA),Xve=n(EA,"P",{});var EMt=s(Xve);P3r=r(EMt,"Instantiates one of the base model classes of the library from a configuration."),EMt.forEach(t),I3r=i(EA),Lc=n(EA,"P",{});var kZ=s(Lc);q3r=r(kZ,`Note:
Loading a model from its configuration file does `),zve=n(kZ,"STRONG",{});var CMt=s(zve);N3r=r(CMt,"not"),CMt.forEach(t),j3r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(kZ,"A",{href:!0});var wMt=s($U);D3r=r(wMt,"from_pretrained()"),wMt.forEach(t),G3r=r(kZ," to load the model weights."),kZ.forEach(t),O3r=i(EA),T(Y4.$$.fragment,EA),EA.forEach(t),V3r=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Z8.$$.fragment,Nl),X3r=i(Nl),Qve=n(Nl,"P",{});var AMt=s(Qve);z3r=r(AMt,"Instantiate one of the base model classes of the library from a pretrained model."),AMt.forEach(t),Q3r=i(Nl),gn=n(Nl,"P",{});var CA=s(gn);W3r=r(CA,"The model class to instantiate is selected based on the "),Wve=n(CA,"CODE",{});var yMt=s(Wve);H3r=r(yMt,"model_type"),yMt.forEach(t),U3r=r(CA,` property of the config object (either
passed as an argument or loaded from `),Hve=n(CA,"CODE",{});var LMt=s(Hve);J3r=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),Y3r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(CA,"CODE",{});var xMt=s(Uve);K3r=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),Z3r=r(CA,":"),CA.forEach(t),ewr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);K4=n(ne,"LI",{});var QRe=s(K4);Jve=n(QRe,"STRONG",{});var $Mt=s(Jve);owr=r($Mt,"albert"),$Mt.forEach(t),rwr=r(QRe," \u2014 "),kU=n(QRe,"A",{href:!0});var kMt=s(kU);twr=r(kMt,"FlaxAlbertModel"),kMt.forEach(t),awr=r(QRe," (ALBERT model)"),QRe.forEach(t),nwr=i(ne),Z4=n(ne,"LI",{});var WRe=s(Z4);Yve=n(WRe,"STRONG",{});var SMt=s(Yve);swr=r(SMt,"bart"),SMt.forEach(t),lwr=r(WRe," \u2014 "),SU=n(WRe,"A",{href:!0});var RMt=s(SU);iwr=r(RMt,"FlaxBartModel"),RMt.forEach(t),dwr=r(WRe," (BART model)"),WRe.forEach(t),cwr=i(ne),eE=n(ne,"LI",{});var HRe=s(eE);Kve=n(HRe,"STRONG",{});var BMt=s(Kve);fwr=r(BMt,"beit"),BMt.forEach(t),mwr=r(HRe," \u2014 "),RU=n(HRe,"A",{href:!0});var PMt=s(RU);gwr=r(PMt,"FlaxBeitModel"),PMt.forEach(t),hwr=r(HRe," (BEiT model)"),HRe.forEach(t),pwr=i(ne),oE=n(ne,"LI",{});var URe=s(oE);Zve=n(URe,"STRONG",{});var IMt=s(Zve);uwr=r(IMt,"bert"),IMt.forEach(t),_wr=r(URe," \u2014 "),BU=n(URe,"A",{href:!0});var qMt=s(BU);bwr=r(qMt,"FlaxBertModel"),qMt.forEach(t),vwr=r(URe," (BERT model)"),URe.forEach(t),Fwr=i(ne),rE=n(ne,"LI",{});var JRe=s(rE);eFe=n(JRe,"STRONG",{});var NMt=s(eFe);Twr=r(NMt,"big_bird"),NMt.forEach(t),Mwr=r(JRe," \u2014 "),PU=n(JRe,"A",{href:!0});var jMt=s(PU);Ewr=r(jMt,"FlaxBigBirdModel"),jMt.forEach(t),Cwr=r(JRe," (BigBird model)"),JRe.forEach(t),wwr=i(ne),tE=n(ne,"LI",{});var YRe=s(tE);oFe=n(YRe,"STRONG",{});var DMt=s(oFe);Awr=r(DMt,"blenderbot"),DMt.forEach(t),ywr=r(YRe," \u2014 "),IU=n(YRe,"A",{href:!0});var GMt=s(IU);Lwr=r(GMt,"FlaxBlenderbotModel"),GMt.forEach(t),xwr=r(YRe," (Blenderbot model)"),YRe.forEach(t),$wr=i(ne),aE=n(ne,"LI",{});var KRe=s(aE);rFe=n(KRe,"STRONG",{});var OMt=s(rFe);kwr=r(OMt,"blenderbot-small"),OMt.forEach(t),Swr=r(KRe," \u2014 "),qU=n(KRe,"A",{href:!0});var VMt=s(qU);Rwr=r(VMt,"FlaxBlenderbotSmallModel"),VMt.forEach(t),Bwr=r(KRe," (BlenderbotSmall model)"),KRe.forEach(t),Pwr=i(ne),nE=n(ne,"LI",{});var ZRe=s(nE);tFe=n(ZRe,"STRONG",{});var XMt=s(tFe);Iwr=r(XMt,"clip"),XMt.forEach(t),qwr=r(ZRe," \u2014 "),NU=n(ZRe,"A",{href:!0});var zMt=s(NU);Nwr=r(zMt,"FlaxCLIPModel"),zMt.forEach(t),jwr=r(ZRe," (CLIP model)"),ZRe.forEach(t),Dwr=i(ne),sE=n(ne,"LI",{});var eBe=s(sE);aFe=n(eBe,"STRONG",{});var QMt=s(aFe);Gwr=r(QMt,"distilbert"),QMt.forEach(t),Owr=r(eBe," \u2014 "),jU=n(eBe,"A",{href:!0});var WMt=s(jU);Vwr=r(WMt,"FlaxDistilBertModel"),WMt.forEach(t),Xwr=r(eBe," (DistilBERT model)"),eBe.forEach(t),zwr=i(ne),lE=n(ne,"LI",{});var oBe=s(lE);nFe=n(oBe,"STRONG",{});var HMt=s(nFe);Qwr=r(HMt,"electra"),HMt.forEach(t),Wwr=r(oBe," \u2014 "),DU=n(oBe,"A",{href:!0});var UMt=s(DU);Hwr=r(UMt,"FlaxElectraModel"),UMt.forEach(t),Uwr=r(oBe," (ELECTRA model)"),oBe.forEach(t),Jwr=i(ne),iE=n(ne,"LI",{});var rBe=s(iE);sFe=n(rBe,"STRONG",{});var JMt=s(sFe);Ywr=r(JMt,"gpt2"),JMt.forEach(t),Kwr=r(rBe," \u2014 "),GU=n(rBe,"A",{href:!0});var YMt=s(GU);Zwr=r(YMt,"FlaxGPT2Model"),YMt.forEach(t),eAr=r(rBe," (OpenAI GPT-2 model)"),rBe.forEach(t),oAr=i(ne),dE=n(ne,"LI",{});var tBe=s(dE);lFe=n(tBe,"STRONG",{});var KMt=s(lFe);rAr=r(KMt,"gpt_neo"),KMt.forEach(t),tAr=r(tBe," \u2014 "),OU=n(tBe,"A",{href:!0});var ZMt=s(OU);aAr=r(ZMt,"FlaxGPTNeoModel"),ZMt.forEach(t),nAr=r(tBe," (GPT Neo model)"),tBe.forEach(t),sAr=i(ne),cE=n(ne,"LI",{});var aBe=s(cE);iFe=n(aBe,"STRONG",{});var e4t=s(iFe);lAr=r(e4t,"gptj"),e4t.forEach(t),iAr=r(aBe," \u2014 "),VU=n(aBe,"A",{href:!0});var o4t=s(VU);dAr=r(o4t,"FlaxGPTJModel"),o4t.forEach(t),cAr=r(aBe," (GPT-J model)"),aBe.forEach(t),fAr=i(ne),fE=n(ne,"LI",{});var nBe=s(fE);dFe=n(nBe,"STRONG",{});var r4t=s(dFe);mAr=r(r4t,"marian"),r4t.forEach(t),gAr=r(nBe," \u2014 "),XU=n(nBe,"A",{href:!0});var t4t=s(XU);hAr=r(t4t,"FlaxMarianModel"),t4t.forEach(t),pAr=r(nBe," (Marian model)"),nBe.forEach(t),uAr=i(ne),mE=n(ne,"LI",{});var sBe=s(mE);cFe=n(sBe,"STRONG",{});var a4t=s(cFe);_Ar=r(a4t,"mbart"),a4t.forEach(t),bAr=r(sBe," \u2014 "),zU=n(sBe,"A",{href:!0});var n4t=s(zU);vAr=r(n4t,"FlaxMBartModel"),n4t.forEach(t),FAr=r(sBe," (mBART model)"),sBe.forEach(t),TAr=i(ne),gE=n(ne,"LI",{});var lBe=s(gE);fFe=n(lBe,"STRONG",{});var s4t=s(fFe);MAr=r(s4t,"mt5"),s4t.forEach(t),EAr=r(lBe," \u2014 "),QU=n(lBe,"A",{href:!0});var l4t=s(QU);CAr=r(l4t,"FlaxMT5Model"),l4t.forEach(t),wAr=r(lBe," (mT5 model)"),lBe.forEach(t),AAr=i(ne),hE=n(ne,"LI",{});var iBe=s(hE);mFe=n(iBe,"STRONG",{});var i4t=s(mFe);yAr=r(i4t,"pegasus"),i4t.forEach(t),LAr=r(iBe," \u2014 "),WU=n(iBe,"A",{href:!0});var d4t=s(WU);xAr=r(d4t,"FlaxPegasusModel"),d4t.forEach(t),$Ar=r(iBe," (Pegasus model)"),iBe.forEach(t),kAr=i(ne),pE=n(ne,"LI",{});var dBe=s(pE);gFe=n(dBe,"STRONG",{});var c4t=s(gFe);SAr=r(c4t,"roberta"),c4t.forEach(t),RAr=r(dBe," \u2014 "),HU=n(dBe,"A",{href:!0});var f4t=s(HU);BAr=r(f4t,"FlaxRobertaModel"),f4t.forEach(t),PAr=r(dBe," (RoBERTa model)"),dBe.forEach(t),IAr=i(ne),uE=n(ne,"LI",{});var cBe=s(uE);hFe=n(cBe,"STRONG",{});var m4t=s(hFe);qAr=r(m4t,"roformer"),m4t.forEach(t),NAr=r(cBe," \u2014 "),UU=n(cBe,"A",{href:!0});var g4t=s(UU);jAr=r(g4t,"FlaxRoFormerModel"),g4t.forEach(t),DAr=r(cBe," (RoFormer model)"),cBe.forEach(t),GAr=i(ne),_E=n(ne,"LI",{});var fBe=s(_E);pFe=n(fBe,"STRONG",{});var h4t=s(pFe);OAr=r(h4t,"t5"),h4t.forEach(t),VAr=r(fBe," \u2014 "),JU=n(fBe,"A",{href:!0});var p4t=s(JU);XAr=r(p4t,"FlaxT5Model"),p4t.forEach(t),zAr=r(fBe," (T5 model)"),fBe.forEach(t),QAr=i(ne),bE=n(ne,"LI",{});var mBe=s(bE);uFe=n(mBe,"STRONG",{});var u4t=s(uFe);WAr=r(u4t,"vision-text-dual-encoder"),u4t.forEach(t),HAr=r(mBe," \u2014 "),YU=n(mBe,"A",{href:!0});var _4t=s(YU);UAr=r(_4t,"FlaxVisionTextDualEncoderModel"),_4t.forEach(t),JAr=r(mBe," (VisionTextDualEncoder model)"),mBe.forEach(t),YAr=i(ne),vE=n(ne,"LI",{});var gBe=s(vE);_Fe=n(gBe,"STRONG",{});var b4t=s(_Fe);KAr=r(b4t,"vit"),b4t.forEach(t),ZAr=r(gBe," \u2014 "),KU=n(gBe,"A",{href:!0});var v4t=s(KU);e6r=r(v4t,"FlaxViTModel"),v4t.forEach(t),o6r=r(gBe," (ViT model)"),gBe.forEach(t),r6r=i(ne),FE=n(ne,"LI",{});var hBe=s(FE);bFe=n(hBe,"STRONG",{});var F4t=s(bFe);t6r=r(F4t,"wav2vec2"),F4t.forEach(t),a6r=r(hBe," \u2014 "),ZU=n(hBe,"A",{href:!0});var T4t=s(ZU);n6r=r(T4t,"FlaxWav2Vec2Model"),T4t.forEach(t),s6r=r(hBe," (Wav2Vec2 model)"),hBe.forEach(t),l6r=i(ne),TE=n(ne,"LI",{});var pBe=s(TE);vFe=n(pBe,"STRONG",{});var M4t=s(vFe);i6r=r(M4t,"xglm"),M4t.forEach(t),d6r=r(pBe," \u2014 "),eJ=n(pBe,"A",{href:!0});var E4t=s(eJ);c6r=r(E4t,"FlaxXGLMModel"),E4t.forEach(t),f6r=r(pBe," (XGLM model)"),pBe.forEach(t),m6r=i(ne),ME=n(ne,"LI",{});var uBe=s(ME);FFe=n(uBe,"STRONG",{});var C4t=s(FFe);g6r=r(C4t,"xlm-roberta"),C4t.forEach(t),h6r=r(uBe," \u2014 "),oJ=n(uBe,"A",{href:!0});var w4t=s(oJ);p6r=r(w4t,"FlaxXLMRobertaModel"),w4t.forEach(t),u6r=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),ne.forEach(t),_6r=i(Nl),T(EE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Cqe=i(f),xc=n(f,"H2",{class:!0});var kje=s(xc);CE=n(kje,"A",{id:!0,class:!0,href:!0});var A4t=s(CE);TFe=n(A4t,"SPAN",{});var y4t=s(TFe);T(ex.$$.fragment,y4t),y4t.forEach(t),A4t.forEach(t),b6r=i(kje),MFe=n(kje,"SPAN",{});var L4t=s(MFe);v6r=r(L4t,"FlaxAutoModelForCausalLM"),L4t.forEach(t),kje.forEach(t),wqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(ox.$$.fragment,jl),F6r=i(jl),$c=n(jl,"P",{});var SZ=s($c);T6r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rJ=n(SZ,"A",{href:!0});var x4t=s(rJ);M6r=r(x4t,"from_pretrained()"),x4t.forEach(t),E6r=r(SZ," class method or the "),tJ=n(SZ,"A",{href:!0});var $4t=s(tJ);C6r=r($4t,"from_config()"),$4t.forEach(t),w6r=r(SZ,` class
method.`),SZ.forEach(t),A6r=i(jl),rx=n(jl,"P",{});var Sje=s(rx);y6r=r(Sje,"This class cannot be instantiated directly using "),EFe=n(Sje,"CODE",{});var k4t=s(EFe);L6r=r(k4t,"__init__()"),k4t.forEach(t),x6r=r(Sje," (throws an error)."),Sje.forEach(t),$6r=i(jl),Dt=n(jl,"DIV",{class:!0});var wA=s(Dt);T(tx.$$.fragment,wA),k6r=i(wA),CFe=n(wA,"P",{});var S4t=s(CFe);S6r=r(S4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S4t.forEach(t),R6r=i(wA),kc=n(wA,"P",{});var RZ=s(kc);B6r=r(RZ,`Note:
Loading a model from its configuration file does `),wFe=n(RZ,"STRONG",{});var R4t=s(wFe);P6r=r(R4t,"not"),R4t.forEach(t),I6r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(RZ,"A",{href:!0});var B4t=s(aJ);q6r=r(B4t,"from_pretrained()"),B4t.forEach(t),N6r=r(RZ," to load the model weights."),RZ.forEach(t),j6r=i(wA),T(wE.$$.fragment,wA),wA.forEach(t),D6r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(ax.$$.fragment,Dl),G6r=i(Dl),AFe=n(Dl,"P",{});var P4t=s(AFe);O6r=r(P4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P4t.forEach(t),V6r=i(Dl),hn=n(Dl,"P",{});var AA=s(hn);X6r=r(AA,"The model class to instantiate is selected based on the "),yFe=n(AA,"CODE",{});var I4t=s(yFe);z6r=r(I4t,"model_type"),I4t.forEach(t),Q6r=r(AA,` property of the config object (either
passed as an argument or loaded from `),LFe=n(AA,"CODE",{});var q4t=s(LFe);W6r=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),H6r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(AA,"CODE",{});var N4t=s(xFe);U6r=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),J6r=r(AA,":"),AA.forEach(t),Y6r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);AE=n(Oe,"LI",{});var _Be=s(AE);$Fe=n(_Be,"STRONG",{});var j4t=s($Fe);K6r=r(j4t,"bart"),j4t.forEach(t),Z6r=r(_Be," \u2014 "),nJ=n(_Be,"A",{href:!0});var D4t=s(nJ);eyr=r(D4t,"FlaxBartForCausalLM"),D4t.forEach(t),oyr=r(_Be," (BART model)"),_Be.forEach(t),ryr=i(Oe),yE=n(Oe,"LI",{});var bBe=s(yE);kFe=n(bBe,"STRONG",{});var G4t=s(kFe);tyr=r(G4t,"bert"),G4t.forEach(t),ayr=r(bBe," \u2014 "),sJ=n(bBe,"A",{href:!0});var O4t=s(sJ);nyr=r(O4t,"FlaxBertForCausalLM"),O4t.forEach(t),syr=r(bBe," (BERT model)"),bBe.forEach(t),lyr=i(Oe),LE=n(Oe,"LI",{});var vBe=s(LE);SFe=n(vBe,"STRONG",{});var V4t=s(SFe);iyr=r(V4t,"big_bird"),V4t.forEach(t),dyr=r(vBe," \u2014 "),lJ=n(vBe,"A",{href:!0});var X4t=s(lJ);cyr=r(X4t,"FlaxBigBirdForCausalLM"),X4t.forEach(t),fyr=r(vBe," (BigBird model)"),vBe.forEach(t),myr=i(Oe),xE=n(Oe,"LI",{});var FBe=s(xE);RFe=n(FBe,"STRONG",{});var z4t=s(RFe);gyr=r(z4t,"electra"),z4t.forEach(t),hyr=r(FBe," \u2014 "),iJ=n(FBe,"A",{href:!0});var Q4t=s(iJ);pyr=r(Q4t,"FlaxElectraForCausalLM"),Q4t.forEach(t),uyr=r(FBe," (ELECTRA model)"),FBe.forEach(t),_yr=i(Oe),$E=n(Oe,"LI",{});var TBe=s($E);BFe=n(TBe,"STRONG",{});var W4t=s(BFe);byr=r(W4t,"gpt2"),W4t.forEach(t),vyr=r(TBe," \u2014 "),dJ=n(TBe,"A",{href:!0});var H4t=s(dJ);Fyr=r(H4t,"FlaxGPT2LMHeadModel"),H4t.forEach(t),Tyr=r(TBe," (OpenAI GPT-2 model)"),TBe.forEach(t),Myr=i(Oe),kE=n(Oe,"LI",{});var MBe=s(kE);PFe=n(MBe,"STRONG",{});var U4t=s(PFe);Eyr=r(U4t,"gpt_neo"),U4t.forEach(t),Cyr=r(MBe," \u2014 "),cJ=n(MBe,"A",{href:!0});var J4t=s(cJ);wyr=r(J4t,"FlaxGPTNeoForCausalLM"),J4t.forEach(t),Ayr=r(MBe," (GPT Neo model)"),MBe.forEach(t),yyr=i(Oe),SE=n(Oe,"LI",{});var EBe=s(SE);IFe=n(EBe,"STRONG",{});var Y4t=s(IFe);Lyr=r(Y4t,"gptj"),Y4t.forEach(t),xyr=r(EBe," \u2014 "),fJ=n(EBe,"A",{href:!0});var K4t=s(fJ);$yr=r(K4t,"FlaxGPTJForCausalLM"),K4t.forEach(t),kyr=r(EBe," (GPT-J model)"),EBe.forEach(t),Syr=i(Oe),RE=n(Oe,"LI",{});var CBe=s(RE);qFe=n(CBe,"STRONG",{});var Z4t=s(qFe);Ryr=r(Z4t,"roberta"),Z4t.forEach(t),Byr=r(CBe," \u2014 "),mJ=n(CBe,"A",{href:!0});var eEt=s(mJ);Pyr=r(eEt,"FlaxRobertaForCausalLM"),eEt.forEach(t),Iyr=r(CBe," (RoBERTa model)"),CBe.forEach(t),qyr=i(Oe),BE=n(Oe,"LI",{});var wBe=s(BE);NFe=n(wBe,"STRONG",{});var oEt=s(NFe);Nyr=r(oEt,"xglm"),oEt.forEach(t),jyr=r(wBe," \u2014 "),gJ=n(wBe,"A",{href:!0});var rEt=s(gJ);Dyr=r(rEt,"FlaxXGLMForCausalLM"),rEt.forEach(t),Gyr=r(wBe," (XGLM model)"),wBe.forEach(t),Oe.forEach(t),Oyr=i(Dl),T(PE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Aqe=i(f),Sc=n(f,"H2",{class:!0});var Rje=s(Sc);IE=n(Rje,"A",{id:!0,class:!0,href:!0});var tEt=s(IE);jFe=n(tEt,"SPAN",{});var aEt=s(jFe);T(nx.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),Vyr=i(Rje),DFe=n(Rje,"SPAN",{});var nEt=s(DFe);Xyr=r(nEt,"FlaxAutoModelForPreTraining"),nEt.forEach(t),Rje.forEach(t),yqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(sx.$$.fragment,Gl),zyr=i(Gl),Rc=n(Gl,"P",{});var BZ=s(Rc);Qyr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hJ=n(BZ,"A",{href:!0});var sEt=s(hJ);Wyr=r(sEt,"from_pretrained()"),sEt.forEach(t),Hyr=r(BZ," class method or the "),pJ=n(BZ,"A",{href:!0});var lEt=s(pJ);Uyr=r(lEt,"from_config()"),lEt.forEach(t),Jyr=r(BZ,` class
method.`),BZ.forEach(t),Yyr=i(Gl),lx=n(Gl,"P",{});var Bje=s(lx);Kyr=r(Bje,"This class cannot be instantiated directly using "),GFe=n(Bje,"CODE",{});var iEt=s(GFe);Zyr=r(iEt,"__init__()"),iEt.forEach(t),eLr=r(Bje," (throws an error)."),Bje.forEach(t),oLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var yA=s(Gt);T(ix.$$.fragment,yA),rLr=i(yA),OFe=n(yA,"P",{});var dEt=s(OFe);tLr=r(dEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dEt.forEach(t),aLr=i(yA),Bc=n(yA,"P",{});var PZ=s(Bc);nLr=r(PZ,`Note:
Loading a model from its configuration file does `),VFe=n(PZ,"STRONG",{});var cEt=s(VFe);sLr=r(cEt,"not"),cEt.forEach(t),lLr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(PZ,"A",{href:!0});var fEt=s(uJ);iLr=r(fEt,"from_pretrained()"),fEt.forEach(t),dLr=r(PZ," to load the model weights."),PZ.forEach(t),cLr=i(yA),T(qE.$$.fragment,yA),yA.forEach(t),fLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(dx.$$.fragment,Ol),mLr=i(Ol),XFe=n(Ol,"P",{});var mEt=s(XFe);gLr=r(mEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mEt.forEach(t),hLr=i(Ol),pn=n(Ol,"P",{});var LA=s(pn);pLr=r(LA,"The model class to instantiate is selected based on the "),zFe=n(LA,"CODE",{});var gEt=s(zFe);uLr=r(gEt,"model_type"),gEt.forEach(t),_Lr=r(LA,` property of the config object (either
passed as an argument or loaded from `),QFe=n(LA,"CODE",{});var hEt=s(QFe);bLr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),vLr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(LA,"CODE",{});var pEt=s(WFe);FLr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),TLr=r(LA,":"),LA.forEach(t),MLr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);NE=n(we,"LI",{});var ABe=s(NE);HFe=n(ABe,"STRONG",{});var uEt=s(HFe);ELr=r(uEt,"albert"),uEt.forEach(t),CLr=r(ABe," \u2014 "),_J=n(ABe,"A",{href:!0});var _Et=s(_J);wLr=r(_Et,"FlaxAlbertForPreTraining"),_Et.forEach(t),ALr=r(ABe," (ALBERT model)"),ABe.forEach(t),yLr=i(we),jE=n(we,"LI",{});var yBe=s(jE);UFe=n(yBe,"STRONG",{});var bEt=s(UFe);LLr=r(bEt,"bart"),bEt.forEach(t),xLr=r(yBe," \u2014 "),bJ=n(yBe,"A",{href:!0});var vEt=s(bJ);$Lr=r(vEt,"FlaxBartForConditionalGeneration"),vEt.forEach(t),kLr=r(yBe," (BART model)"),yBe.forEach(t),SLr=i(we),DE=n(we,"LI",{});var LBe=s(DE);JFe=n(LBe,"STRONG",{});var FEt=s(JFe);RLr=r(FEt,"bert"),FEt.forEach(t),BLr=r(LBe," \u2014 "),vJ=n(LBe,"A",{href:!0});var TEt=s(vJ);PLr=r(TEt,"FlaxBertForPreTraining"),TEt.forEach(t),ILr=r(LBe," (BERT model)"),LBe.forEach(t),qLr=i(we),GE=n(we,"LI",{});var xBe=s(GE);YFe=n(xBe,"STRONG",{});var MEt=s(YFe);NLr=r(MEt,"big_bird"),MEt.forEach(t),jLr=r(xBe," \u2014 "),FJ=n(xBe,"A",{href:!0});var EEt=s(FJ);DLr=r(EEt,"FlaxBigBirdForPreTraining"),EEt.forEach(t),GLr=r(xBe," (BigBird model)"),xBe.forEach(t),OLr=i(we),OE=n(we,"LI",{});var $Be=s(OE);KFe=n($Be,"STRONG",{});var CEt=s(KFe);VLr=r(CEt,"electra"),CEt.forEach(t),XLr=r($Be," \u2014 "),TJ=n($Be,"A",{href:!0});var wEt=s(TJ);zLr=r(wEt,"FlaxElectraForPreTraining"),wEt.forEach(t),QLr=r($Be," (ELECTRA model)"),$Be.forEach(t),WLr=i(we),VE=n(we,"LI",{});var kBe=s(VE);ZFe=n(kBe,"STRONG",{});var AEt=s(ZFe);HLr=r(AEt,"mbart"),AEt.forEach(t),ULr=r(kBe," \u2014 "),MJ=n(kBe,"A",{href:!0});var yEt=s(MJ);JLr=r(yEt,"FlaxMBartForConditionalGeneration"),yEt.forEach(t),YLr=r(kBe," (mBART model)"),kBe.forEach(t),KLr=i(we),XE=n(we,"LI",{});var SBe=s(XE);e0e=n(SBe,"STRONG",{});var LEt=s(e0e);ZLr=r(LEt,"mt5"),LEt.forEach(t),e8r=r(SBe," \u2014 "),EJ=n(SBe,"A",{href:!0});var xEt=s(EJ);o8r=r(xEt,"FlaxMT5ForConditionalGeneration"),xEt.forEach(t),r8r=r(SBe," (mT5 model)"),SBe.forEach(t),t8r=i(we),zE=n(we,"LI",{});var RBe=s(zE);o0e=n(RBe,"STRONG",{});var $Et=s(o0e);a8r=r($Et,"roberta"),$Et.forEach(t),n8r=r(RBe," \u2014 "),CJ=n(RBe,"A",{href:!0});var kEt=s(CJ);s8r=r(kEt,"FlaxRobertaForMaskedLM"),kEt.forEach(t),l8r=r(RBe," (RoBERTa model)"),RBe.forEach(t),i8r=i(we),QE=n(we,"LI",{});var BBe=s(QE);r0e=n(BBe,"STRONG",{});var SEt=s(r0e);d8r=r(SEt,"roformer"),SEt.forEach(t),c8r=r(BBe," \u2014 "),wJ=n(BBe,"A",{href:!0});var REt=s(wJ);f8r=r(REt,"FlaxRoFormerForMaskedLM"),REt.forEach(t),m8r=r(BBe," (RoFormer model)"),BBe.forEach(t),g8r=i(we),WE=n(we,"LI",{});var PBe=s(WE);t0e=n(PBe,"STRONG",{});var BEt=s(t0e);h8r=r(BEt,"t5"),BEt.forEach(t),p8r=r(PBe," \u2014 "),AJ=n(PBe,"A",{href:!0});var PEt=s(AJ);u8r=r(PEt,"FlaxT5ForConditionalGeneration"),PEt.forEach(t),_8r=r(PBe," (T5 model)"),PBe.forEach(t),b8r=i(we),HE=n(we,"LI",{});var IBe=s(HE);a0e=n(IBe,"STRONG",{});var IEt=s(a0e);v8r=r(IEt,"wav2vec2"),IEt.forEach(t),F8r=r(IBe," \u2014 "),yJ=n(IBe,"A",{href:!0});var qEt=s(yJ);T8r=r(qEt,"FlaxWav2Vec2ForPreTraining"),qEt.forEach(t),M8r=r(IBe," (Wav2Vec2 model)"),IBe.forEach(t),E8r=i(we),UE=n(we,"LI",{});var qBe=s(UE);n0e=n(qBe,"STRONG",{});var NEt=s(n0e);C8r=r(NEt,"xlm-roberta"),NEt.forEach(t),w8r=r(qBe," \u2014 "),LJ=n(qBe,"A",{href:!0});var jEt=s(LJ);A8r=r(jEt,"FlaxXLMRobertaForMaskedLM"),jEt.forEach(t),y8r=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),we.forEach(t),L8r=i(Ol),T(JE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Lqe=i(f),Pc=n(f,"H2",{class:!0});var Pje=s(Pc);YE=n(Pje,"A",{id:!0,class:!0,href:!0});var DEt=s(YE);s0e=n(DEt,"SPAN",{});var GEt=s(s0e);T(cx.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),x8r=i(Pje),l0e=n(Pje,"SPAN",{});var OEt=s(l0e);$8r=r(OEt,"FlaxAutoModelForMaskedLM"),OEt.forEach(t),Pje.forEach(t),xqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(fx.$$.fragment,Vl),k8r=i(Vl),Ic=n(Vl,"P",{});var IZ=s(Ic);S8r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xJ=n(IZ,"A",{href:!0});var VEt=s(xJ);R8r=r(VEt,"from_pretrained()"),VEt.forEach(t),B8r=r(IZ," class method or the "),$J=n(IZ,"A",{href:!0});var XEt=s($J);P8r=r(XEt,"from_config()"),XEt.forEach(t),I8r=r(IZ,` class
method.`),IZ.forEach(t),q8r=i(Vl),mx=n(Vl,"P",{});var Ije=s(mx);N8r=r(Ije,"This class cannot be instantiated directly using "),i0e=n(Ije,"CODE",{});var zEt=s(i0e);j8r=r(zEt,"__init__()"),zEt.forEach(t),D8r=r(Ije," (throws an error)."),Ije.forEach(t),G8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var xA=s(Ot);T(gx.$$.fragment,xA),O8r=i(xA),d0e=n(xA,"P",{});var QEt=s(d0e);V8r=r(QEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QEt.forEach(t),X8r=i(xA),qc=n(xA,"P",{});var qZ=s(qc);z8r=r(qZ,`Note:
Loading a model from its configuration file does `),c0e=n(qZ,"STRONG",{});var WEt=s(c0e);Q8r=r(WEt,"not"),WEt.forEach(t),W8r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(qZ,"A",{href:!0});var HEt=s(kJ);H8r=r(HEt,"from_pretrained()"),HEt.forEach(t),U8r=r(qZ," to load the model weights."),qZ.forEach(t),J8r=i(xA),T(KE.$$.fragment,xA),xA.forEach(t),Y8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(hx.$$.fragment,Xl),K8r=i(Xl),f0e=n(Xl,"P",{});var UEt=s(f0e);Z8r=r(UEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UEt.forEach(t),exr=i(Xl),un=n(Xl,"P",{});var $A=s(un);oxr=r($A,"The model class to instantiate is selected based on the "),m0e=n($A,"CODE",{});var JEt=s(m0e);rxr=r(JEt,"model_type"),JEt.forEach(t),txr=r($A,` property of the config object (either
passed as an argument or loaded from `),g0e=n($A,"CODE",{});var YEt=s(g0e);axr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),nxr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n($A,"CODE",{});var KEt=s(h0e);sxr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),lxr=r($A,":"),$A.forEach(t),ixr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);ZE=n(Be,"LI",{});var NBe=s(ZE);p0e=n(NBe,"STRONG",{});var ZEt=s(p0e);dxr=r(ZEt,"albert"),ZEt.forEach(t),cxr=r(NBe," \u2014 "),SJ=n(NBe,"A",{href:!0});var eCt=s(SJ);fxr=r(eCt,"FlaxAlbertForMaskedLM"),eCt.forEach(t),mxr=r(NBe," (ALBERT model)"),NBe.forEach(t),gxr=i(Be),eC=n(Be,"LI",{});var jBe=s(eC);u0e=n(jBe,"STRONG",{});var oCt=s(u0e);hxr=r(oCt,"bart"),oCt.forEach(t),pxr=r(jBe," \u2014 "),RJ=n(jBe,"A",{href:!0});var rCt=s(RJ);uxr=r(rCt,"FlaxBartForConditionalGeneration"),rCt.forEach(t),_xr=r(jBe," (BART model)"),jBe.forEach(t),bxr=i(Be),oC=n(Be,"LI",{});var DBe=s(oC);_0e=n(DBe,"STRONG",{});var tCt=s(_0e);vxr=r(tCt,"bert"),tCt.forEach(t),Fxr=r(DBe," \u2014 "),BJ=n(DBe,"A",{href:!0});var aCt=s(BJ);Txr=r(aCt,"FlaxBertForMaskedLM"),aCt.forEach(t),Mxr=r(DBe," (BERT model)"),DBe.forEach(t),Exr=i(Be),rC=n(Be,"LI",{});var GBe=s(rC);b0e=n(GBe,"STRONG",{});var nCt=s(b0e);Cxr=r(nCt,"big_bird"),nCt.forEach(t),wxr=r(GBe," \u2014 "),PJ=n(GBe,"A",{href:!0});var sCt=s(PJ);Axr=r(sCt,"FlaxBigBirdForMaskedLM"),sCt.forEach(t),yxr=r(GBe," (BigBird model)"),GBe.forEach(t),Lxr=i(Be),tC=n(Be,"LI",{});var OBe=s(tC);v0e=n(OBe,"STRONG",{});var lCt=s(v0e);xxr=r(lCt,"distilbert"),lCt.forEach(t),$xr=r(OBe," \u2014 "),IJ=n(OBe,"A",{href:!0});var iCt=s(IJ);kxr=r(iCt,"FlaxDistilBertForMaskedLM"),iCt.forEach(t),Sxr=r(OBe," (DistilBERT model)"),OBe.forEach(t),Rxr=i(Be),aC=n(Be,"LI",{});var VBe=s(aC);F0e=n(VBe,"STRONG",{});var dCt=s(F0e);Bxr=r(dCt,"electra"),dCt.forEach(t),Pxr=r(VBe," \u2014 "),qJ=n(VBe,"A",{href:!0});var cCt=s(qJ);Ixr=r(cCt,"FlaxElectraForMaskedLM"),cCt.forEach(t),qxr=r(VBe," (ELECTRA model)"),VBe.forEach(t),Nxr=i(Be),nC=n(Be,"LI",{});var XBe=s(nC);T0e=n(XBe,"STRONG",{});var fCt=s(T0e);jxr=r(fCt,"mbart"),fCt.forEach(t),Dxr=r(XBe," \u2014 "),NJ=n(XBe,"A",{href:!0});var mCt=s(NJ);Gxr=r(mCt,"FlaxMBartForConditionalGeneration"),mCt.forEach(t),Oxr=r(XBe," (mBART model)"),XBe.forEach(t),Vxr=i(Be),sC=n(Be,"LI",{});var zBe=s(sC);M0e=n(zBe,"STRONG",{});var gCt=s(M0e);Xxr=r(gCt,"roberta"),gCt.forEach(t),zxr=r(zBe," \u2014 "),jJ=n(zBe,"A",{href:!0});var hCt=s(jJ);Qxr=r(hCt,"FlaxRobertaForMaskedLM"),hCt.forEach(t),Wxr=r(zBe," (RoBERTa model)"),zBe.forEach(t),Hxr=i(Be),lC=n(Be,"LI",{});var QBe=s(lC);E0e=n(QBe,"STRONG",{});var pCt=s(E0e);Uxr=r(pCt,"roformer"),pCt.forEach(t),Jxr=r(QBe," \u2014 "),DJ=n(QBe,"A",{href:!0});var uCt=s(DJ);Yxr=r(uCt,"FlaxRoFormerForMaskedLM"),uCt.forEach(t),Kxr=r(QBe," (RoFormer model)"),QBe.forEach(t),Zxr=i(Be),iC=n(Be,"LI",{});var WBe=s(iC);C0e=n(WBe,"STRONG",{});var _Ct=s(C0e);e9r=r(_Ct,"xlm-roberta"),_Ct.forEach(t),o9r=r(WBe," \u2014 "),GJ=n(WBe,"A",{href:!0});var bCt=s(GJ);r9r=r(bCt,"FlaxXLMRobertaForMaskedLM"),bCt.forEach(t),t9r=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),Be.forEach(t),a9r=i(Xl),T(dC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),$qe=i(f),Nc=n(f,"H2",{class:!0});var qje=s(Nc);cC=n(qje,"A",{id:!0,class:!0,href:!0});var vCt=s(cC);w0e=n(vCt,"SPAN",{});var FCt=s(w0e);T(px.$$.fragment,FCt),FCt.forEach(t),vCt.forEach(t),n9r=i(qje),A0e=n(qje,"SPAN",{});var TCt=s(A0e);s9r=r(TCt,"FlaxAutoModelForSeq2SeqLM"),TCt.forEach(t),qje.forEach(t),kqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(ux.$$.fragment,zl),l9r=i(zl),jc=n(zl,"P",{});var NZ=s(jc);i9r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OJ=n(NZ,"A",{href:!0});var MCt=s(OJ);d9r=r(MCt,"from_pretrained()"),MCt.forEach(t),c9r=r(NZ," class method or the "),VJ=n(NZ,"A",{href:!0});var ECt=s(VJ);f9r=r(ECt,"from_config()"),ECt.forEach(t),m9r=r(NZ,` class
method.`),NZ.forEach(t),g9r=i(zl),_x=n(zl,"P",{});var Nje=s(_x);h9r=r(Nje,"This class cannot be instantiated directly using "),y0e=n(Nje,"CODE",{});var CCt=s(y0e);p9r=r(CCt,"__init__()"),CCt.forEach(t),u9r=r(Nje," (throws an error)."),Nje.forEach(t),_9r=i(zl),Vt=n(zl,"DIV",{class:!0});var kA=s(Vt);T(bx.$$.fragment,kA),b9r=i(kA),L0e=n(kA,"P",{});var wCt=s(L0e);v9r=r(wCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wCt.forEach(t),F9r=i(kA),Dc=n(kA,"P",{});var jZ=s(Dc);T9r=r(jZ,`Note:
Loading a model from its configuration file does `),x0e=n(jZ,"STRONG",{});var ACt=s(x0e);M9r=r(ACt,"not"),ACt.forEach(t),E9r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(jZ,"A",{href:!0});var yCt=s(XJ);C9r=r(yCt,"from_pretrained()"),yCt.forEach(t),w9r=r(jZ," to load the model weights."),jZ.forEach(t),A9r=i(kA),T(fC.$$.fragment,kA),kA.forEach(t),y9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(vx.$$.fragment,Ql),L9r=i(Ql),$0e=n(Ql,"P",{});var LCt=s($0e);x9r=r(LCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LCt.forEach(t),$9r=i(Ql),_n=n(Ql,"P",{});var SA=s(_n);k9r=r(SA,"The model class to instantiate is selected based on the "),k0e=n(SA,"CODE",{});var xCt=s(k0e);S9r=r(xCt,"model_type"),xCt.forEach(t),R9r=r(SA,` property of the config object (either
passed as an argument or loaded from `),S0e=n(SA,"CODE",{});var $Ct=s(S0e);B9r=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),P9r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(SA,"CODE",{});var kCt=s(R0e);I9r=r(kCt,"pretrained_model_name_or_path"),kCt.forEach(t),q9r=r(SA,":"),SA.forEach(t),N9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);mC=n(Ve,"LI",{});var HBe=s(mC);B0e=n(HBe,"STRONG",{});var SCt=s(B0e);j9r=r(SCt,"bart"),SCt.forEach(t),D9r=r(HBe," \u2014 "),zJ=n(HBe,"A",{href:!0});var RCt=s(zJ);G9r=r(RCt,"FlaxBartForConditionalGeneration"),RCt.forEach(t),O9r=r(HBe," (BART model)"),HBe.forEach(t),V9r=i(Ve),gC=n(Ve,"LI",{});var UBe=s(gC);P0e=n(UBe,"STRONG",{});var BCt=s(P0e);X9r=r(BCt,"blenderbot"),BCt.forEach(t),z9r=r(UBe," \u2014 "),QJ=n(UBe,"A",{href:!0});var PCt=s(QJ);Q9r=r(PCt,"FlaxBlenderbotForConditionalGeneration"),PCt.forEach(t),W9r=r(UBe," (Blenderbot model)"),UBe.forEach(t),H9r=i(Ve),hC=n(Ve,"LI",{});var JBe=s(hC);I0e=n(JBe,"STRONG",{});var ICt=s(I0e);U9r=r(ICt,"blenderbot-small"),ICt.forEach(t),J9r=r(JBe," \u2014 "),WJ=n(JBe,"A",{href:!0});var qCt=s(WJ);Y9r=r(qCt,"FlaxBlenderbotSmallForConditionalGeneration"),qCt.forEach(t),K9r=r(JBe," (BlenderbotSmall model)"),JBe.forEach(t),Z9r=i(Ve),pC=n(Ve,"LI",{});var YBe=s(pC);q0e=n(YBe,"STRONG",{});var NCt=s(q0e);e$r=r(NCt,"encoder-decoder"),NCt.forEach(t),o$r=r(YBe," \u2014 "),HJ=n(YBe,"A",{href:!0});var jCt=s(HJ);r$r=r(jCt,"FlaxEncoderDecoderModel"),jCt.forEach(t),t$r=r(YBe," (Encoder decoder model)"),YBe.forEach(t),a$r=i(Ve),uC=n(Ve,"LI",{});var KBe=s(uC);N0e=n(KBe,"STRONG",{});var DCt=s(N0e);n$r=r(DCt,"marian"),DCt.forEach(t),s$r=r(KBe," \u2014 "),UJ=n(KBe,"A",{href:!0});var GCt=s(UJ);l$r=r(GCt,"FlaxMarianMTModel"),GCt.forEach(t),i$r=r(KBe," (Marian model)"),KBe.forEach(t),d$r=i(Ve),_C=n(Ve,"LI",{});var ZBe=s(_C);j0e=n(ZBe,"STRONG",{});var OCt=s(j0e);c$r=r(OCt,"mbart"),OCt.forEach(t),f$r=r(ZBe," \u2014 "),JJ=n(ZBe,"A",{href:!0});var VCt=s(JJ);m$r=r(VCt,"FlaxMBartForConditionalGeneration"),VCt.forEach(t),g$r=r(ZBe," (mBART model)"),ZBe.forEach(t),h$r=i(Ve),bC=n(Ve,"LI",{});var ePe=s(bC);D0e=n(ePe,"STRONG",{});var XCt=s(D0e);p$r=r(XCt,"mt5"),XCt.forEach(t),u$r=r(ePe," \u2014 "),YJ=n(ePe,"A",{href:!0});var zCt=s(YJ);_$r=r(zCt,"FlaxMT5ForConditionalGeneration"),zCt.forEach(t),b$r=r(ePe," (mT5 model)"),ePe.forEach(t),v$r=i(Ve),vC=n(Ve,"LI",{});var oPe=s(vC);G0e=n(oPe,"STRONG",{});var QCt=s(G0e);F$r=r(QCt,"pegasus"),QCt.forEach(t),T$r=r(oPe," \u2014 "),KJ=n(oPe,"A",{href:!0});var WCt=s(KJ);M$r=r(WCt,"FlaxPegasusForConditionalGeneration"),WCt.forEach(t),E$r=r(oPe," (Pegasus model)"),oPe.forEach(t),C$r=i(Ve),FC=n(Ve,"LI",{});var rPe=s(FC);O0e=n(rPe,"STRONG",{});var HCt=s(O0e);w$r=r(HCt,"t5"),HCt.forEach(t),A$r=r(rPe," \u2014 "),ZJ=n(rPe,"A",{href:!0});var UCt=s(ZJ);y$r=r(UCt,"FlaxT5ForConditionalGeneration"),UCt.forEach(t),L$r=r(rPe," (T5 model)"),rPe.forEach(t),Ve.forEach(t),x$r=i(Ql),T(TC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Sqe=i(f),Gc=n(f,"H2",{class:!0});var jje=s(Gc);MC=n(jje,"A",{id:!0,class:!0,href:!0});var JCt=s(MC);V0e=n(JCt,"SPAN",{});var YCt=s(V0e);T(Fx.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),$$r=i(jje),X0e=n(jje,"SPAN",{});var KCt=s(X0e);k$r=r(KCt,"FlaxAutoModelForSequenceClassification"),KCt.forEach(t),jje.forEach(t),Rqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(Tx.$$.fragment,Wl),S$r=i(Wl),Oc=n(Wl,"P",{});var DZ=s(Oc);R$r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eY=n(DZ,"A",{href:!0});var ZCt=s(eY);B$r=r(ZCt,"from_pretrained()"),ZCt.forEach(t),P$r=r(DZ," class method or the "),oY=n(DZ,"A",{href:!0});var e3t=s(oY);I$r=r(e3t,"from_config()"),e3t.forEach(t),q$r=r(DZ,` class
method.`),DZ.forEach(t),N$r=i(Wl),Mx=n(Wl,"P",{});var Dje=s(Mx);j$r=r(Dje,"This class cannot be instantiated directly using "),z0e=n(Dje,"CODE",{});var o3t=s(z0e);D$r=r(o3t,"__init__()"),o3t.forEach(t),G$r=r(Dje," (throws an error)."),Dje.forEach(t),O$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var RA=s(Xt);T(Ex.$$.fragment,RA),V$r=i(RA),Q0e=n(RA,"P",{});var r3t=s(Q0e);X$r=r(r3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r3t.forEach(t),z$r=i(RA),Vc=n(RA,"P",{});var GZ=s(Vc);Q$r=r(GZ,`Note:
Loading a model from its configuration file does `),W0e=n(GZ,"STRONG",{});var t3t=s(W0e);W$r=r(t3t,"not"),t3t.forEach(t),H$r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(GZ,"A",{href:!0});var a3t=s(rY);U$r=r(a3t,"from_pretrained()"),a3t.forEach(t),J$r=r(GZ," to load the model weights."),GZ.forEach(t),Y$r=i(RA),T(EC.$$.fragment,RA),RA.forEach(t),K$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Cx.$$.fragment,Hl),Z$r=i(Hl),H0e=n(Hl,"P",{});var n3t=s(H0e);ekr=r(n3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n3t.forEach(t),okr=i(Hl),bn=n(Hl,"P",{});var BA=s(bn);rkr=r(BA,"The model class to instantiate is selected based on the "),U0e=n(BA,"CODE",{});var s3t=s(U0e);tkr=r(s3t,"model_type"),s3t.forEach(t),akr=r(BA,` property of the config object (either
passed as an argument or loaded from `),J0e=n(BA,"CODE",{});var l3t=s(J0e);nkr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),skr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=n(BA,"CODE",{});var i3t=s(Y0e);lkr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),ikr=r(BA,":"),BA.forEach(t),dkr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);CC=n(Pe,"LI",{});var tPe=s(CC);K0e=n(tPe,"STRONG",{});var d3t=s(K0e);ckr=r(d3t,"albert"),d3t.forEach(t),fkr=r(tPe," \u2014 "),tY=n(tPe,"A",{href:!0});var c3t=s(tY);mkr=r(c3t,"FlaxAlbertForSequenceClassification"),c3t.forEach(t),gkr=r(tPe," (ALBERT model)"),tPe.forEach(t),hkr=i(Pe),wC=n(Pe,"LI",{});var aPe=s(wC);Z0e=n(aPe,"STRONG",{});var f3t=s(Z0e);pkr=r(f3t,"bart"),f3t.forEach(t),ukr=r(aPe," \u2014 "),aY=n(aPe,"A",{href:!0});var m3t=s(aY);_kr=r(m3t,"FlaxBartForSequenceClassification"),m3t.forEach(t),bkr=r(aPe," (BART model)"),aPe.forEach(t),vkr=i(Pe),AC=n(Pe,"LI",{});var nPe=s(AC);eTe=n(nPe,"STRONG",{});var g3t=s(eTe);Fkr=r(g3t,"bert"),g3t.forEach(t),Tkr=r(nPe," \u2014 "),nY=n(nPe,"A",{href:!0});var h3t=s(nY);Mkr=r(h3t,"FlaxBertForSequenceClassification"),h3t.forEach(t),Ekr=r(nPe," (BERT model)"),nPe.forEach(t),Ckr=i(Pe),yC=n(Pe,"LI",{});var sPe=s(yC);oTe=n(sPe,"STRONG",{});var p3t=s(oTe);wkr=r(p3t,"big_bird"),p3t.forEach(t),Akr=r(sPe," \u2014 "),sY=n(sPe,"A",{href:!0});var u3t=s(sY);ykr=r(u3t,"FlaxBigBirdForSequenceClassification"),u3t.forEach(t),Lkr=r(sPe," (BigBird model)"),sPe.forEach(t),xkr=i(Pe),LC=n(Pe,"LI",{});var lPe=s(LC);rTe=n(lPe,"STRONG",{});var _3t=s(rTe);$kr=r(_3t,"distilbert"),_3t.forEach(t),kkr=r(lPe," \u2014 "),lY=n(lPe,"A",{href:!0});var b3t=s(lY);Skr=r(b3t,"FlaxDistilBertForSequenceClassification"),b3t.forEach(t),Rkr=r(lPe," (DistilBERT model)"),lPe.forEach(t),Bkr=i(Pe),xC=n(Pe,"LI",{});var iPe=s(xC);tTe=n(iPe,"STRONG",{});var v3t=s(tTe);Pkr=r(v3t,"electra"),v3t.forEach(t),Ikr=r(iPe," \u2014 "),iY=n(iPe,"A",{href:!0});var F3t=s(iY);qkr=r(F3t,"FlaxElectraForSequenceClassification"),F3t.forEach(t),Nkr=r(iPe," (ELECTRA model)"),iPe.forEach(t),jkr=i(Pe),$C=n(Pe,"LI",{});var dPe=s($C);aTe=n(dPe,"STRONG",{});var T3t=s(aTe);Dkr=r(T3t,"mbart"),T3t.forEach(t),Gkr=r(dPe," \u2014 "),dY=n(dPe,"A",{href:!0});var M3t=s(dY);Okr=r(M3t,"FlaxMBartForSequenceClassification"),M3t.forEach(t),Vkr=r(dPe," (mBART model)"),dPe.forEach(t),Xkr=i(Pe),kC=n(Pe,"LI",{});var cPe=s(kC);nTe=n(cPe,"STRONG",{});var E3t=s(nTe);zkr=r(E3t,"roberta"),E3t.forEach(t),Qkr=r(cPe," \u2014 "),cY=n(cPe,"A",{href:!0});var C3t=s(cY);Wkr=r(C3t,"FlaxRobertaForSequenceClassification"),C3t.forEach(t),Hkr=r(cPe," (RoBERTa model)"),cPe.forEach(t),Ukr=i(Pe),SC=n(Pe,"LI",{});var fPe=s(SC);sTe=n(fPe,"STRONG",{});var w3t=s(sTe);Jkr=r(w3t,"roformer"),w3t.forEach(t),Ykr=r(fPe," \u2014 "),fY=n(fPe,"A",{href:!0});var A3t=s(fY);Kkr=r(A3t,"FlaxRoFormerForSequenceClassification"),A3t.forEach(t),Zkr=r(fPe," (RoFormer model)"),fPe.forEach(t),eSr=i(Pe),RC=n(Pe,"LI",{});var mPe=s(RC);lTe=n(mPe,"STRONG",{});var y3t=s(lTe);oSr=r(y3t,"xlm-roberta"),y3t.forEach(t),rSr=r(mPe," \u2014 "),mY=n(mPe,"A",{href:!0});var L3t=s(mY);tSr=r(L3t,"FlaxXLMRobertaForSequenceClassification"),L3t.forEach(t),aSr=r(mPe," (XLM-RoBERTa model)"),mPe.forEach(t),Pe.forEach(t),nSr=i(Hl),T(BC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Bqe=i(f),Xc=n(f,"H2",{class:!0});var Gje=s(Xc);PC=n(Gje,"A",{id:!0,class:!0,href:!0});var x3t=s(PC);iTe=n(x3t,"SPAN",{});var $3t=s(iTe);T(wx.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),sSr=i(Gje),dTe=n(Gje,"SPAN",{});var k3t=s(dTe);lSr=r(k3t,"FlaxAutoModelForQuestionAnswering"),k3t.forEach(t),Gje.forEach(t),Pqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(Ax.$$.fragment,Ul),iSr=i(Ul),zc=n(Ul,"P",{});var OZ=s(zc);dSr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gY=n(OZ,"A",{href:!0});var S3t=s(gY);cSr=r(S3t,"from_pretrained()"),S3t.forEach(t),fSr=r(OZ," class method or the "),hY=n(OZ,"A",{href:!0});var R3t=s(hY);mSr=r(R3t,"from_config()"),R3t.forEach(t),gSr=r(OZ,` class
method.`),OZ.forEach(t),hSr=i(Ul),yx=n(Ul,"P",{});var Oje=s(yx);pSr=r(Oje,"This class cannot be instantiated directly using "),cTe=n(Oje,"CODE",{});var B3t=s(cTe);uSr=r(B3t,"__init__()"),B3t.forEach(t),_Sr=r(Oje," (throws an error)."),Oje.forEach(t),bSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var PA=s(zt);T(Lx.$$.fragment,PA),vSr=i(PA),fTe=n(PA,"P",{});var P3t=s(fTe);FSr=r(P3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P3t.forEach(t),TSr=i(PA),Qc=n(PA,"P",{});var VZ=s(Qc);MSr=r(VZ,`Note:
Loading a model from its configuration file does `),mTe=n(VZ,"STRONG",{});var I3t=s(mTe);ESr=r(I3t,"not"),I3t.forEach(t),CSr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(VZ,"A",{href:!0});var q3t=s(pY);wSr=r(q3t,"from_pretrained()"),q3t.forEach(t),ASr=r(VZ," to load the model weights."),VZ.forEach(t),ySr=i(PA),T(IC.$$.fragment,PA),PA.forEach(t),LSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(xx.$$.fragment,Jl),xSr=i(Jl),gTe=n(Jl,"P",{});var N3t=s(gTe);$Sr=r(N3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N3t.forEach(t),kSr=i(Jl),vn=n(Jl,"P",{});var IA=s(vn);SSr=r(IA,"The model class to instantiate is selected based on the "),hTe=n(IA,"CODE",{});var j3t=s(hTe);RSr=r(j3t,"model_type"),j3t.forEach(t),BSr=r(IA,` property of the config object (either
passed as an argument or loaded from `),pTe=n(IA,"CODE",{});var D3t=s(pTe);PSr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),ISr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(IA,"CODE",{});var G3t=s(uTe);qSr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),NSr=r(IA,":"),IA.forEach(t),jSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);qC=n(Ie,"LI",{});var gPe=s(qC);_Te=n(gPe,"STRONG",{});var O3t=s(_Te);DSr=r(O3t,"albert"),O3t.forEach(t),GSr=r(gPe," \u2014 "),uY=n(gPe,"A",{href:!0});var V3t=s(uY);OSr=r(V3t,"FlaxAlbertForQuestionAnswering"),V3t.forEach(t),VSr=r(gPe," (ALBERT model)"),gPe.forEach(t),XSr=i(Ie),NC=n(Ie,"LI",{});var hPe=s(NC);bTe=n(hPe,"STRONG",{});var X3t=s(bTe);zSr=r(X3t,"bart"),X3t.forEach(t),QSr=r(hPe," \u2014 "),_Y=n(hPe,"A",{href:!0});var z3t=s(_Y);WSr=r(z3t,"FlaxBartForQuestionAnswering"),z3t.forEach(t),HSr=r(hPe," (BART model)"),hPe.forEach(t),USr=i(Ie),jC=n(Ie,"LI",{});var pPe=s(jC);vTe=n(pPe,"STRONG",{});var Q3t=s(vTe);JSr=r(Q3t,"bert"),Q3t.forEach(t),YSr=r(pPe," \u2014 "),bY=n(pPe,"A",{href:!0});var W3t=s(bY);KSr=r(W3t,"FlaxBertForQuestionAnswering"),W3t.forEach(t),ZSr=r(pPe," (BERT model)"),pPe.forEach(t),eRr=i(Ie),DC=n(Ie,"LI",{});var uPe=s(DC);FTe=n(uPe,"STRONG",{});var H3t=s(FTe);oRr=r(H3t,"big_bird"),H3t.forEach(t),rRr=r(uPe," \u2014 "),vY=n(uPe,"A",{href:!0});var U3t=s(vY);tRr=r(U3t,"FlaxBigBirdForQuestionAnswering"),U3t.forEach(t),aRr=r(uPe," (BigBird model)"),uPe.forEach(t),nRr=i(Ie),GC=n(Ie,"LI",{});var _Pe=s(GC);TTe=n(_Pe,"STRONG",{});var J3t=s(TTe);sRr=r(J3t,"distilbert"),J3t.forEach(t),lRr=r(_Pe," \u2014 "),FY=n(_Pe,"A",{href:!0});var Y3t=s(FY);iRr=r(Y3t,"FlaxDistilBertForQuestionAnswering"),Y3t.forEach(t),dRr=r(_Pe," (DistilBERT model)"),_Pe.forEach(t),cRr=i(Ie),OC=n(Ie,"LI",{});var bPe=s(OC);MTe=n(bPe,"STRONG",{});var K3t=s(MTe);fRr=r(K3t,"electra"),K3t.forEach(t),mRr=r(bPe," \u2014 "),TY=n(bPe,"A",{href:!0});var Z3t=s(TY);gRr=r(Z3t,"FlaxElectraForQuestionAnswering"),Z3t.forEach(t),hRr=r(bPe," (ELECTRA model)"),bPe.forEach(t),pRr=i(Ie),VC=n(Ie,"LI",{});var vPe=s(VC);ETe=n(vPe,"STRONG",{});var ewt=s(ETe);uRr=r(ewt,"mbart"),ewt.forEach(t),_Rr=r(vPe," \u2014 "),MY=n(vPe,"A",{href:!0});var owt=s(MY);bRr=r(owt,"FlaxMBartForQuestionAnswering"),owt.forEach(t),vRr=r(vPe," (mBART model)"),vPe.forEach(t),FRr=i(Ie),XC=n(Ie,"LI",{});var FPe=s(XC);CTe=n(FPe,"STRONG",{});var rwt=s(CTe);TRr=r(rwt,"roberta"),rwt.forEach(t),MRr=r(FPe," \u2014 "),EY=n(FPe,"A",{href:!0});var twt=s(EY);ERr=r(twt,"FlaxRobertaForQuestionAnswering"),twt.forEach(t),CRr=r(FPe," (RoBERTa model)"),FPe.forEach(t),wRr=i(Ie),zC=n(Ie,"LI",{});var TPe=s(zC);wTe=n(TPe,"STRONG",{});var awt=s(wTe);ARr=r(awt,"roformer"),awt.forEach(t),yRr=r(TPe," \u2014 "),CY=n(TPe,"A",{href:!0});var nwt=s(CY);LRr=r(nwt,"FlaxRoFormerForQuestionAnswering"),nwt.forEach(t),xRr=r(TPe," (RoFormer model)"),TPe.forEach(t),$Rr=i(Ie),QC=n(Ie,"LI",{});var MPe=s(QC);ATe=n(MPe,"STRONG",{});var swt=s(ATe);kRr=r(swt,"xlm-roberta"),swt.forEach(t),SRr=r(MPe," \u2014 "),wY=n(MPe,"A",{href:!0});var lwt=s(wY);RRr=r(lwt,"FlaxXLMRobertaForQuestionAnswering"),lwt.forEach(t),BRr=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),Ie.forEach(t),PRr=i(Jl),T(WC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Iqe=i(f),Wc=n(f,"H2",{class:!0});var Vje=s(Wc);HC=n(Vje,"A",{id:!0,class:!0,href:!0});var iwt=s(HC);yTe=n(iwt,"SPAN",{});var dwt=s(yTe);T($x.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),IRr=i(Vje),LTe=n(Vje,"SPAN",{});var cwt=s(LTe);qRr=r(cwt,"FlaxAutoModelForTokenClassification"),cwt.forEach(t),Vje.forEach(t),qqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(kx.$$.fragment,Yl),NRr=i(Yl),Hc=n(Yl,"P",{});var XZ=s(Hc);jRr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AY=n(XZ,"A",{href:!0});var fwt=s(AY);DRr=r(fwt,"from_pretrained()"),fwt.forEach(t),GRr=r(XZ," class method or the "),yY=n(XZ,"A",{href:!0});var mwt=s(yY);ORr=r(mwt,"from_config()"),mwt.forEach(t),VRr=r(XZ,` class
method.`),XZ.forEach(t),XRr=i(Yl),Sx=n(Yl,"P",{});var Xje=s(Sx);zRr=r(Xje,"This class cannot be instantiated directly using "),xTe=n(Xje,"CODE",{});var gwt=s(xTe);QRr=r(gwt,"__init__()"),gwt.forEach(t),WRr=r(Xje," (throws an error)."),Xje.forEach(t),HRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var qA=s(Qt);T(Rx.$$.fragment,qA),URr=i(qA),$Te=n(qA,"P",{});var hwt=s($Te);JRr=r(hwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hwt.forEach(t),YRr=i(qA),Uc=n(qA,"P",{});var zZ=s(Uc);KRr=r(zZ,`Note:
Loading a model from its configuration file does `),kTe=n(zZ,"STRONG",{});var pwt=s(kTe);ZRr=r(pwt,"not"),pwt.forEach(t),eBr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(zZ,"A",{href:!0});var uwt=s(LY);oBr=r(uwt,"from_pretrained()"),uwt.forEach(t),rBr=r(zZ," to load the model weights."),zZ.forEach(t),tBr=i(qA),T(UC.$$.fragment,qA),qA.forEach(t),aBr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(Bx.$$.fragment,Kl),nBr=i(Kl),STe=n(Kl,"P",{});var _wt=s(STe);sBr=r(_wt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_wt.forEach(t),lBr=i(Kl),Fn=n(Kl,"P",{});var NA=s(Fn);iBr=r(NA,"The model class to instantiate is selected based on the "),RTe=n(NA,"CODE",{});var bwt=s(RTe);dBr=r(bwt,"model_type"),bwt.forEach(t),cBr=r(NA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(NA,"CODE",{});var vwt=s(BTe);fBr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),mBr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(NA,"CODE",{});var Fwt=s(PTe);gBr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),hBr=r(NA,":"),NA.forEach(t),pBr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);JC=n(Fo,"LI",{});var EPe=s(JC);ITe=n(EPe,"STRONG",{});var Twt=s(ITe);uBr=r(Twt,"albert"),Twt.forEach(t),_Br=r(EPe," \u2014 "),xY=n(EPe,"A",{href:!0});var Mwt=s(xY);bBr=r(Mwt,"FlaxAlbertForTokenClassification"),Mwt.forEach(t),vBr=r(EPe," (ALBERT model)"),EPe.forEach(t),FBr=i(Fo),YC=n(Fo,"LI",{});var CPe=s(YC);qTe=n(CPe,"STRONG",{});var Ewt=s(qTe);TBr=r(Ewt,"bert"),Ewt.forEach(t),MBr=r(CPe," \u2014 "),$Y=n(CPe,"A",{href:!0});var Cwt=s($Y);EBr=r(Cwt,"FlaxBertForTokenClassification"),Cwt.forEach(t),CBr=r(CPe," (BERT model)"),CPe.forEach(t),wBr=i(Fo),KC=n(Fo,"LI",{});var wPe=s(KC);NTe=n(wPe,"STRONG",{});var wwt=s(NTe);ABr=r(wwt,"big_bird"),wwt.forEach(t),yBr=r(wPe," \u2014 "),kY=n(wPe,"A",{href:!0});var Awt=s(kY);LBr=r(Awt,"FlaxBigBirdForTokenClassification"),Awt.forEach(t),xBr=r(wPe," (BigBird model)"),wPe.forEach(t),$Br=i(Fo),ZC=n(Fo,"LI",{});var APe=s(ZC);jTe=n(APe,"STRONG",{});var ywt=s(jTe);kBr=r(ywt,"distilbert"),ywt.forEach(t),SBr=r(APe," \u2014 "),SY=n(APe,"A",{href:!0});var Lwt=s(SY);RBr=r(Lwt,"FlaxDistilBertForTokenClassification"),Lwt.forEach(t),BBr=r(APe," (DistilBERT model)"),APe.forEach(t),PBr=i(Fo),e3=n(Fo,"LI",{});var yPe=s(e3);DTe=n(yPe,"STRONG",{});var xwt=s(DTe);IBr=r(xwt,"electra"),xwt.forEach(t),qBr=r(yPe," \u2014 "),RY=n(yPe,"A",{href:!0});var $wt=s(RY);NBr=r($wt,"FlaxElectraForTokenClassification"),$wt.forEach(t),jBr=r(yPe," (ELECTRA model)"),yPe.forEach(t),DBr=i(Fo),o3=n(Fo,"LI",{});var LPe=s(o3);GTe=n(LPe,"STRONG",{});var kwt=s(GTe);GBr=r(kwt,"roberta"),kwt.forEach(t),OBr=r(LPe," \u2014 "),BY=n(LPe,"A",{href:!0});var Swt=s(BY);VBr=r(Swt,"FlaxRobertaForTokenClassification"),Swt.forEach(t),XBr=r(LPe," (RoBERTa model)"),LPe.forEach(t),zBr=i(Fo),r3=n(Fo,"LI",{});var xPe=s(r3);OTe=n(xPe,"STRONG",{});var Rwt=s(OTe);QBr=r(Rwt,"roformer"),Rwt.forEach(t),WBr=r(xPe," \u2014 "),PY=n(xPe,"A",{href:!0});var Bwt=s(PY);HBr=r(Bwt,"FlaxRoFormerForTokenClassification"),Bwt.forEach(t),UBr=r(xPe," (RoFormer model)"),xPe.forEach(t),JBr=i(Fo),t3=n(Fo,"LI",{});var $Pe=s(t3);VTe=n($Pe,"STRONG",{});var Pwt=s(VTe);YBr=r(Pwt,"xlm-roberta"),Pwt.forEach(t),KBr=r($Pe," \u2014 "),IY=n($Pe,"A",{href:!0});var Iwt=s(IY);ZBr=r(Iwt,"FlaxXLMRobertaForTokenClassification"),Iwt.forEach(t),ePr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),Fo.forEach(t),oPr=i(Kl),T(a3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Nqe=i(f),Jc=n(f,"H2",{class:!0});var zje=s(Jc);n3=n(zje,"A",{id:!0,class:!0,href:!0});var qwt=s(n3);XTe=n(qwt,"SPAN",{});var Nwt=s(XTe);T(Px.$$.fragment,Nwt),Nwt.forEach(t),qwt.forEach(t),rPr=i(zje),zTe=n(zje,"SPAN",{});var jwt=s(zTe);tPr=r(jwt,"FlaxAutoModelForMultipleChoice"),jwt.forEach(t),zje.forEach(t),jqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Ix.$$.fragment,Zl),aPr=i(Zl),Yc=n(Zl,"P",{});var QZ=s(Yc);nPr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qY=n(QZ,"A",{href:!0});var Dwt=s(qY);sPr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),lPr=r(QZ," class method or the "),NY=n(QZ,"A",{href:!0});var Gwt=s(NY);iPr=r(Gwt,"from_config()"),Gwt.forEach(t),dPr=r(QZ,` class
method.`),QZ.forEach(t),cPr=i(Zl),qx=n(Zl,"P",{});var Qje=s(qx);fPr=r(Qje,"This class cannot be instantiated directly using "),QTe=n(Qje,"CODE",{});var Owt=s(QTe);mPr=r(Owt,"__init__()"),Owt.forEach(t),gPr=r(Qje," (throws an error)."),Qje.forEach(t),hPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var jA=s(Wt);T(Nx.$$.fragment,jA),pPr=i(jA),WTe=n(jA,"P",{});var Vwt=s(WTe);uPr=r(Vwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vwt.forEach(t),_Pr=i(jA),Kc=n(jA,"P",{});var WZ=s(Kc);bPr=r(WZ,`Note:
Loading a model from its configuration file does `),HTe=n(WZ,"STRONG",{});var Xwt=s(HTe);vPr=r(Xwt,"not"),Xwt.forEach(t),FPr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(WZ,"A",{href:!0});var zwt=s(jY);TPr=r(zwt,"from_pretrained()"),zwt.forEach(t),MPr=r(WZ," to load the model weights."),WZ.forEach(t),EPr=i(jA),T(s3.$$.fragment,jA),jA.forEach(t),CPr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(jx.$$.fragment,ei),wPr=i(ei),UTe=n(ei,"P",{});var Qwt=s(UTe);APr=r(Qwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qwt.forEach(t),yPr=i(ei),Tn=n(ei,"P",{});var DA=s(Tn);LPr=r(DA,"The model class to instantiate is selected based on the "),JTe=n(DA,"CODE",{});var Wwt=s(JTe);xPr=r(Wwt,"model_type"),Wwt.forEach(t),$Pr=r(DA,` property of the config object (either
passed as an argument or loaded from `),YTe=n(DA,"CODE",{});var Hwt=s(YTe);kPr=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),SPr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(DA,"CODE",{});var Uwt=s(KTe);RPr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),BPr=r(DA,":"),DA.forEach(t),PPr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);l3=n(To,"LI",{});var kPe=s(l3);ZTe=n(kPe,"STRONG",{});var Jwt=s(ZTe);IPr=r(Jwt,"albert"),Jwt.forEach(t),qPr=r(kPe," \u2014 "),DY=n(kPe,"A",{href:!0});var Ywt=s(DY);NPr=r(Ywt,"FlaxAlbertForMultipleChoice"),Ywt.forEach(t),jPr=r(kPe," (ALBERT model)"),kPe.forEach(t),DPr=i(To),i3=n(To,"LI",{});var SPe=s(i3);eMe=n(SPe,"STRONG",{});var Kwt=s(eMe);GPr=r(Kwt,"bert"),Kwt.forEach(t),OPr=r(SPe," \u2014 "),GY=n(SPe,"A",{href:!0});var Zwt=s(GY);VPr=r(Zwt,"FlaxBertForMultipleChoice"),Zwt.forEach(t),XPr=r(SPe," (BERT model)"),SPe.forEach(t),zPr=i(To),d3=n(To,"LI",{});var RPe=s(d3);oMe=n(RPe,"STRONG",{});var eAt=s(oMe);QPr=r(eAt,"big_bird"),eAt.forEach(t),WPr=r(RPe," \u2014 "),OY=n(RPe,"A",{href:!0});var oAt=s(OY);HPr=r(oAt,"FlaxBigBirdForMultipleChoice"),oAt.forEach(t),UPr=r(RPe," (BigBird model)"),RPe.forEach(t),JPr=i(To),c3=n(To,"LI",{});var BPe=s(c3);rMe=n(BPe,"STRONG",{});var rAt=s(rMe);YPr=r(rAt,"distilbert"),rAt.forEach(t),KPr=r(BPe," \u2014 "),VY=n(BPe,"A",{href:!0});var tAt=s(VY);ZPr=r(tAt,"FlaxDistilBertForMultipleChoice"),tAt.forEach(t),eIr=r(BPe," (DistilBERT model)"),BPe.forEach(t),oIr=i(To),f3=n(To,"LI",{});var PPe=s(f3);tMe=n(PPe,"STRONG",{});var aAt=s(tMe);rIr=r(aAt,"electra"),aAt.forEach(t),tIr=r(PPe," \u2014 "),XY=n(PPe,"A",{href:!0});var nAt=s(XY);aIr=r(nAt,"FlaxElectraForMultipleChoice"),nAt.forEach(t),nIr=r(PPe," (ELECTRA model)"),PPe.forEach(t),sIr=i(To),m3=n(To,"LI",{});var IPe=s(m3);aMe=n(IPe,"STRONG",{});var sAt=s(aMe);lIr=r(sAt,"roberta"),sAt.forEach(t),iIr=r(IPe," \u2014 "),zY=n(IPe,"A",{href:!0});var lAt=s(zY);dIr=r(lAt,"FlaxRobertaForMultipleChoice"),lAt.forEach(t),cIr=r(IPe," (RoBERTa model)"),IPe.forEach(t),fIr=i(To),g3=n(To,"LI",{});var qPe=s(g3);nMe=n(qPe,"STRONG",{});var iAt=s(nMe);mIr=r(iAt,"roformer"),iAt.forEach(t),gIr=r(qPe," \u2014 "),QY=n(qPe,"A",{href:!0});var dAt=s(QY);hIr=r(dAt,"FlaxRoFormerForMultipleChoice"),dAt.forEach(t),pIr=r(qPe," (RoFormer model)"),qPe.forEach(t),uIr=i(To),h3=n(To,"LI",{});var NPe=s(h3);sMe=n(NPe,"STRONG",{});var cAt=s(sMe);_Ir=r(cAt,"xlm-roberta"),cAt.forEach(t),bIr=r(NPe," \u2014 "),WY=n(NPe,"A",{href:!0});var fAt=s(WY);vIr=r(fAt,"FlaxXLMRobertaForMultipleChoice"),fAt.forEach(t),FIr=r(NPe," (XLM-RoBERTa model)"),NPe.forEach(t),To.forEach(t),TIr=i(ei),T(p3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Dqe=i(f),Zc=n(f,"H2",{class:!0});var Wje=s(Zc);u3=n(Wje,"A",{id:!0,class:!0,href:!0});var mAt=s(u3);lMe=n(mAt,"SPAN",{});var gAt=s(lMe);T(Dx.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),MIr=i(Wje),iMe=n(Wje,"SPAN",{});var hAt=s(iMe);EIr=r(hAt,"FlaxAutoModelForNextSentencePrediction"),hAt.forEach(t),Wje.forEach(t),Gqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Gx.$$.fragment,oi),CIr=i(oi),ef=n(oi,"P",{});var HZ=s(ef);wIr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HY=n(HZ,"A",{href:!0});var pAt=s(HY);AIr=r(pAt,"from_pretrained()"),pAt.forEach(t),yIr=r(HZ," class method or the "),UY=n(HZ,"A",{href:!0});var uAt=s(UY);LIr=r(uAt,"from_config()"),uAt.forEach(t),xIr=r(HZ,` class
method.`),HZ.forEach(t),$Ir=i(oi),Ox=n(oi,"P",{});var Hje=s(Ox);kIr=r(Hje,"This class cannot be instantiated directly using "),dMe=n(Hje,"CODE",{});var _At=s(dMe);SIr=r(_At,"__init__()"),_At.forEach(t),RIr=r(Hje," (throws an error)."),Hje.forEach(t),BIr=i(oi),Ht=n(oi,"DIV",{class:!0});var GA=s(Ht);T(Vx.$$.fragment,GA),PIr=i(GA),cMe=n(GA,"P",{});var bAt=s(cMe);IIr=r(bAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bAt.forEach(t),qIr=i(GA),of=n(GA,"P",{});var UZ=s(of);NIr=r(UZ,`Note:
Loading a model from its configuration file does `),fMe=n(UZ,"STRONG",{});var vAt=s(fMe);jIr=r(vAt,"not"),vAt.forEach(t),DIr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(UZ,"A",{href:!0});var FAt=s(JY);GIr=r(FAt,"from_pretrained()"),FAt.forEach(t),OIr=r(UZ," to load the model weights."),UZ.forEach(t),VIr=i(GA),T(_3.$$.fragment,GA),GA.forEach(t),XIr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Xx.$$.fragment,ri),zIr=i(ri),mMe=n(ri,"P",{});var TAt=s(mMe);QIr=r(TAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TAt.forEach(t),WIr=i(ri),Mn=n(ri,"P",{});var OA=s(Mn);HIr=r(OA,"The model class to instantiate is selected based on the "),gMe=n(OA,"CODE",{});var MAt=s(gMe);UIr=r(MAt,"model_type"),MAt.forEach(t),JIr=r(OA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(OA,"CODE",{});var EAt=s(hMe);YIr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),KIr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(OA,"CODE",{});var CAt=s(pMe);ZIr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),eqr=r(OA,":"),OA.forEach(t),oqr=i(ri),uMe=n(ri,"UL",{});var wAt=s(uMe);b3=n(wAt,"LI",{});var jPe=s(b3);_Me=n(jPe,"STRONG",{});var AAt=s(_Me);rqr=r(AAt,"bert"),AAt.forEach(t),tqr=r(jPe," \u2014 "),YY=n(jPe,"A",{href:!0});var yAt=s(YY);aqr=r(yAt,"FlaxBertForNextSentencePrediction"),yAt.forEach(t),nqr=r(jPe," (BERT model)"),jPe.forEach(t),wAt.forEach(t),sqr=i(ri),T(v3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Oqe=i(f),rf=n(f,"H2",{class:!0});var Uje=s(rf);F3=n(Uje,"A",{id:!0,class:!0,href:!0});var LAt=s(F3);bMe=n(LAt,"SPAN",{});var xAt=s(bMe);T(zx.$$.fragment,xAt),xAt.forEach(t),LAt.forEach(t),lqr=i(Uje),vMe=n(Uje,"SPAN",{});var $At=s(vMe);iqr=r($At,"FlaxAutoModelForImageClassification"),$At.forEach(t),Uje.forEach(t),Vqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Qx.$$.fragment,ti),dqr=i(ti),tf=n(ti,"P",{});var JZ=s(tf);cqr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KY=n(JZ,"A",{href:!0});var kAt=s(KY);fqr=r(kAt,"from_pretrained()"),kAt.forEach(t),mqr=r(JZ," class method or the "),ZY=n(JZ,"A",{href:!0});var SAt=s(ZY);gqr=r(SAt,"from_config()"),SAt.forEach(t),hqr=r(JZ,` class
method.`),JZ.forEach(t),pqr=i(ti),Wx=n(ti,"P",{});var Jje=s(Wx);uqr=r(Jje,"This class cannot be instantiated directly using "),FMe=n(Jje,"CODE",{});var RAt=s(FMe);_qr=r(RAt,"__init__()"),RAt.forEach(t),bqr=r(Jje," (throws an error)."),Jje.forEach(t),vqr=i(ti),Ut=n(ti,"DIV",{class:!0});var VA=s(Ut);T(Hx.$$.fragment,VA),Fqr=i(VA),TMe=n(VA,"P",{});var BAt=s(TMe);Tqr=r(BAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BAt.forEach(t),Mqr=i(VA),af=n(VA,"P",{});var YZ=s(af);Eqr=r(YZ,`Note:
Loading a model from its configuration file does `),MMe=n(YZ,"STRONG",{});var PAt=s(MMe);Cqr=r(PAt,"not"),PAt.forEach(t),wqr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(YZ,"A",{href:!0});var IAt=s(eK);Aqr=r(IAt,"from_pretrained()"),IAt.forEach(t),yqr=r(YZ," to load the model weights."),YZ.forEach(t),Lqr=i(VA),T(T3.$$.fragment,VA),VA.forEach(t),xqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Ux.$$.fragment,ai),$qr=i(ai),EMe=n(ai,"P",{});var qAt=s(EMe);kqr=r(qAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qAt.forEach(t),Sqr=i(ai),En=n(ai,"P",{});var XA=s(En);Rqr=r(XA,"The model class to instantiate is selected based on the "),CMe=n(XA,"CODE",{});var NAt=s(CMe);Bqr=r(NAt,"model_type"),NAt.forEach(t),Pqr=r(XA,` property of the config object (either
passed as an argument or loaded from `),wMe=n(XA,"CODE",{});var jAt=s(wMe);Iqr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),qqr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(XA,"CODE",{});var DAt=s(AMe);Nqr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),jqr=r(XA,":"),XA.forEach(t),Dqr=i(ai),Jx=n(ai,"UL",{});var Yje=s(Jx);M3=n(Yje,"LI",{});var DPe=s(M3);yMe=n(DPe,"STRONG",{});var GAt=s(yMe);Gqr=r(GAt,"beit"),GAt.forEach(t),Oqr=r(DPe," \u2014 "),oK=n(DPe,"A",{href:!0});var OAt=s(oK);Vqr=r(OAt,"FlaxBeitForImageClassification"),OAt.forEach(t),Xqr=r(DPe," (BEiT model)"),DPe.forEach(t),zqr=i(Yje),E3=n(Yje,"LI",{});var GPe=s(E3);LMe=n(GPe,"STRONG",{});var VAt=s(LMe);Qqr=r(VAt,"vit"),VAt.forEach(t),Wqr=r(GPe," \u2014 "),rK=n(GPe,"A",{href:!0});var XAt=s(rK);Hqr=r(XAt,"FlaxViTForImageClassification"),XAt.forEach(t),Uqr=r(GPe," (ViT model)"),GPe.forEach(t),Yje.forEach(t),Jqr=i(ai),T(C3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Xqe=i(f),nf=n(f,"H2",{class:!0});var Kje=s(nf);w3=n(Kje,"A",{id:!0,class:!0,href:!0});var zAt=s(w3);xMe=n(zAt,"SPAN",{});var QAt=s(xMe);T(Yx.$$.fragment,QAt),QAt.forEach(t),zAt.forEach(t),Yqr=i(Kje),$Me=n(Kje,"SPAN",{});var WAt=s($Me);Kqr=r(WAt,"FlaxAutoModelForVision2Seq"),WAt.forEach(t),Kje.forEach(t),zqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Kx.$$.fragment,ni),Zqr=i(ni),sf=n(ni,"P",{});var KZ=s(sf);eNr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tK=n(KZ,"A",{href:!0});var HAt=s(tK);oNr=r(HAt,"from_pretrained()"),HAt.forEach(t),rNr=r(KZ," class method or the "),aK=n(KZ,"A",{href:!0});var UAt=s(aK);tNr=r(UAt,"from_config()"),UAt.forEach(t),aNr=r(KZ,` class
method.`),KZ.forEach(t),nNr=i(ni),Zx=n(ni,"P",{});var Zje=s(Zx);sNr=r(Zje,"This class cannot be instantiated directly using "),kMe=n(Zje,"CODE",{});var JAt=s(kMe);lNr=r(JAt,"__init__()"),JAt.forEach(t),iNr=r(Zje," (throws an error)."),Zje.forEach(t),dNr=i(ni),Jt=n(ni,"DIV",{class:!0});var zA=s(Jt);T(e9.$$.fragment,zA),cNr=i(zA),SMe=n(zA,"P",{});var YAt=s(SMe);fNr=r(YAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YAt.forEach(t),mNr=i(zA),lf=n(zA,"P",{});var ZZ=s(lf);gNr=r(ZZ,`Note:
Loading a model from its configuration file does `),RMe=n(ZZ,"STRONG",{});var KAt=s(RMe);hNr=r(KAt,"not"),KAt.forEach(t),pNr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(ZZ,"A",{href:!0});var ZAt=s(nK);uNr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),_Nr=r(ZZ," to load the model weights."),ZZ.forEach(t),bNr=i(zA),T(A3.$$.fragment,zA),zA.forEach(t),vNr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(o9.$$.fragment,si),FNr=i(si),BMe=n(si,"P",{});var e6t=s(BMe);TNr=r(e6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e6t.forEach(t),MNr=i(si),Cn=n(si,"P",{});var QA=s(Cn);ENr=r(QA,"The model class to instantiate is selected based on the "),PMe=n(QA,"CODE",{});var o6t=s(PMe);CNr=r(o6t,"model_type"),o6t.forEach(t),wNr=r(QA,` property of the config object (either
passed as an argument or loaded from `),IMe=n(QA,"CODE",{});var r6t=s(IMe);ANr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),yNr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(QA,"CODE",{});var t6t=s(qMe);LNr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),xNr=r(QA,":"),QA.forEach(t),$Nr=i(si),NMe=n(si,"UL",{});var a6t=s(NMe);y3=n(a6t,"LI",{});var OPe=s(y3);jMe=n(OPe,"STRONG",{});var n6t=s(jMe);kNr=r(n6t,"vision-encoder-decoder"),n6t.forEach(t),SNr=r(OPe," \u2014 "),sK=n(OPe,"A",{href:!0});var s6t=s(sK);RNr=r(s6t,"FlaxVisionEncoderDecoderModel"),s6t.forEach(t),BNr=r(OPe," (Vision Encoder decoder model)"),OPe.forEach(t),a6t.forEach(t),PNr=i(si),T(L3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(F$,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(T$,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertConfig"),c(M$,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig"),c(E$,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitConfig"),c(C$,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertConfig"),c(w$,"href","/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(A$,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdConfig"),c(y$,"href","/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L$,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(x$,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c($$,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertConfig"),c(k$,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineConfig"),c(S$,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPConfig"),c(R$,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertConfig"),c(B$,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLConfig"),c(I$,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(q$,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(N$,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(j$,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaConfig"),c(D$,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(G$,"href","/docs/transformers/pr_17057/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(O$,"href","/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTConfig"),c(V$,"href","/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrConfig"),c(X$,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z$,"href","/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRConfig"),c(Q$,"href","/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTConfig"),c(W$,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraConfig"),c(H$,"href","/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(U$,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertConfig"),c(J$,"href","/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaConfig"),c(Y$,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetConfig"),c(K$,"href","/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTConfig"),c(Z$,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelConfig"),c(ek,"href","/docs/transformers/pr_17057/en/model_doc/glpn#transformers.GLPNConfig"),c(ok,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Config"),c(rk,"href","/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tk,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJConfig"),c(ak,"href","/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertConfig"),c(nk,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertConfig"),c(sk,"href","/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lk,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ik,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dk,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerConfig"),c(fk,"href","/docs/transformers/pr_17057/en/model_doc/luke#transformers.LukeConfig"),c(mk,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianConfig"),c(pk,"href","/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uk,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vk,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetConfig"),c(Fk,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTConfig"),c(Ck,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusConfig"),c(wk,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ak,"href","/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartConfig"),c(yk,"href","/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Lk,"href","/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(xk,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertConfig"),c($k,"href","/docs/transformers/pr_17057/en/model_doc/rag#transformers.RagConfig"),c(kk,"href","/docs/transformers/pr_17057/en/model_doc/realm#transformers.RealmConfig"),c(Sk,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerConfig"),c(Rk,"href","/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetConfig"),c(Bk,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertConfig"),c(Pk,"href","/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetConfig"),c(Ik,"href","/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertConfig"),c(qk,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaConfig"),c(Nk,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerConfig"),c(jk,"href","/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerConfig"),c(Dk,"href","/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWConfig"),c(Gk,"href","/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ok,"href","/docs/transformers/pr_17057/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Vk,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Xk,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(zk,"href","/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterConfig"),c(Qk,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Wk,"href","/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinConfig"),c(Hk,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Config"),c(Uk,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasConfig"),c(Jk,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartConfig"),c(Yk,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Kk,"href","/docs/transformers/pr_17057/en/model_doc/trocr#transformers.TrOCRConfig"),c(Zk,"href","/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(eS,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(oS,"href","/docs/transformers/pr_17057/en/model_doc/van#transformers.VanConfig"),c(rS,"href","/docs/transformers/pr_17057/en/model_doc/vilt#transformers.ViltConfig"),c(tS,"href","/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(aS,"href","/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(nS,"href","/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(sS,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTConfig"),c(lS,"href","/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(iS,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(dS,"href","/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMConfig"),c(cS,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMConfig"),c(fS,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMConfig"),c(mS,"href","/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(gS,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(hS,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(pS,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetConfig"),c(uS,"href","/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosConfig"),c(_S,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(bS,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(vS,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertTokenizer"),c(FS,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(TS,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartTokenizer"),c(MS,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartTokenizerFast"),c(ES,"href","/docs/transformers/pr_17057/en/model_doc/barthez#transformers.BarthezTokenizer"),c(CS,"href","/docs/transformers/pr_17057/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(wS,"href","/docs/transformers/pr_17057/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(AS,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizer"),c(yS,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizerFast"),c(LS,"href","/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(xS,"href","/docs/transformers/pr_17057/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c($S,"href","/docs/transformers/pr_17057/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(kS,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(SS,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(RS,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BS,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(PS,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(IS,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(qS,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(NS,"href","/docs/transformers/pr_17057/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(jS,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertTokenizer"),c(DS,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineTokenizer"),c(OS,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPTokenizer"),c(VS,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(XS,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(zS,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(QS,"href","/docs/transformers/pr_17057/en/model_doc/cpm#transformers.CpmTokenizer"),c(WS,"href","/docs/transformers/pr_17057/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(HS,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(US,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JS,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YS,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaTokenizer"),c(KS,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(eR,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(oR,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(rR,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(tR,"href","/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(aR,"href","/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(nR,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraTokenizer"),c(sR,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(lR,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(iR,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetTokenizer"),c(dR,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(cR,"href","/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(fR,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelTokenizer"),c(mR,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(gR,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hR,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pR,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uR,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_R,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bR,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vR,"href","/docs/transformers/pr_17057/en/model_doc/herbert#transformers.HerbertTokenizer"),c(FR,"href","/docs/transformers/pr_17057/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(TR,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MR,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ER,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CR,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(wR,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(AR,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(yR,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(LR,"href","/docs/transformers/pr_17057/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(xR,"href","/docs/transformers/pr_17057/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($R,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDTokenizer"),c(kR,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDTokenizerFast"),c(SR,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerTokenizer"),c(RR,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(BR,"href","/docs/transformers/pr_17057/en/model_doc/luke#transformers.LukeTokenizer"),c(PR,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(IR,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(NR,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianTokenizer"),c(jR,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartTokenizer"),c(DR,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(GR,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(OR,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(VR,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizer"),c(XR,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17057/en/model_doc/mluke#transformers.MLukeTokenizer"),c(QR,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(WR,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(UR,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(JR,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.T5Tokenizer"),c(YR,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.T5TokenizerFast"),c(KR,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZR,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oB,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rB,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aB,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nB,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sB,"href","/docs/transformers/pr_17057/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lB,"href","/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iB,"href","/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dB,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizer"),c(cB,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17057/en/model_doc/rag#transformers.RagTokenizer"),c(mB,"href","/docs/transformers/pr_17057/en/model_doc/realm#transformers.RealmTokenizer"),c(gB,"href","/docs/transformers/pr_17057/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hB,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pB,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(uB,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertTokenizer"),c(_B,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vB,"href","/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EB,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CB,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wB,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AB,"href","/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yB,"href","/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(LB,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xB,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($B,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.T5Tokenizer"),c(kB,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SB,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasTokenizer"),c(RB,"href","/docs/transformers/pr_17057/en/model_doc/tapex#transformers.TapexTokenizer"),c(BB,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(PB,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizer"),c(IB,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NB,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jB,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMTokenizer"),c(DB,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(GB,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMTokenizer"),c(OB,"href","/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(VB,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(XB,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(zB,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QB,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WB,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(HB,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertTokenizer"),c(JB,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"id","transformers.AutoFeatureExtractor"),c(Yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(YB,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(KB,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rP,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17057/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(cP,"href","/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MP,"href","/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"id","transformers.AutoProcessor"),c(Ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ah,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(EP,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CP,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPProcessor"),c(wP,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AP,"href","/docs/transformers/pr_17057/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(yP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c($P,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(kP,"href","/docs/transformers/pr_17057/en/model_doc/trocr#transformers.TrOCRProcessor"),c(SP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BP,"href","/docs/transformers/pr_17057/en/model_doc/vilt#transformers.ViltProcessor"),c(PP,"href","/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(IP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"id","transformers.AutoModel"),c(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(NP,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jP,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DP,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GP,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertModel"),c(OP,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartModel"),c(VP,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitModel"),c(XP,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertModel"),c(zP,"href","/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(QP,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdModel"),c(WP,"href","/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(HP,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(UP,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(JP,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertModel"),c(YP,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineModel"),c(KP,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.CLIPModel"),c(ZP,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertModel"),c(eI,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextModel"),c(oI,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLModel"),c(rI,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(tI,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(aI,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(nI,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaModel"),c(sI,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(lI,"href","/docs/transformers/pr_17057/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(iI,"href","/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTModel"),c(dI,"href","/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrModel"),c(cI,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertModel"),c(fI,"href","/docs/transformers/pr_17057/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mI,"href","/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTModel"),c(gI,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraModel"),c(hI,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertModel"),c(pI,"href","/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaModel"),c(uI,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetModel"),c(_I,"href","/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTModel"),c(bI,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelModel"),c(vI,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FI,"href","/docs/transformers/pr_17057/en/model_doc/glpn#transformers.GLPNModel"),c(TI,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2Model"),c(MI,"href","/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EI,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJModel"),c(CI,"href","/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertModel"),c(wI,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertModel"),c(AI,"href","/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(yI,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(LI,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xI,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDModel"),c($I,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerModel"),c(kI,"href","/docs/transformers/pr_17057/en/model_doc/luke#transformers.LukeModel"),c(SI,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertModel"),c(RI,"href","/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100Model"),c(BI,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianModel"),c(PI,"href","/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerModel"),c(II,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartModel"),c(qI,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(NI,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertModel"),c(jI,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetModel"),c(DI,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5Model"),c(GI,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerModel"),c(OI,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(VI,"href","/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTModel"),c(XI,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusModel"),c(zI,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverModel"),c(QI,"href","/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartModel"),c(WI,"href","/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerModel"),c(HI,"href","/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(UI,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertModel"),c(JI,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerModel"),c(YI,"href","/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetModel"),c(KI,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertModel"),c(ZI,"href","/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetModel"),c(eq,"href","/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertModel"),c(oq,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaModel"),c(rq,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerModel"),c(tq,"href","/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerModel"),c(aq,"href","/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWModel"),c(nq,"href","/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDModel"),c(sq,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(lq,"href","/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterModel"),c(iq,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(dq,"href","/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinModel"),c(cq,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5Model"),c(fq,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasModel"),c(mq,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(gq,"href","/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechModel"),c(hq,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(pq,"href","/docs/transformers/pr_17057/en/model_doc/van#transformers.VanModel"),c(uq,"href","/docs/transformers/pr_17057/en/model_doc/vilt#transformers.ViltModel"),c(_q,"href","/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(bq,"href","/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertModel"),c(vq,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTModel"),c(Fq,"href","/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Tq,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Mq,"href","/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMModel"),c(Eq,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMModel"),c(Cq,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMModel"),c(wq,"href","/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aq,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yq,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lq,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetModel"),c(xq,"href","/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosModel"),c($q,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForPreTraining"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(kq,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sq,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rq,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bq,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Pq,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Iq,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForPreTraining"),c(qq,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Nq,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jq,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zq,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Qq,"href","/docs/transformers/pr_17057/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Wq,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Hq,"href","/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uq,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Jq,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Yq,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eN,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oN,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rN,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tN,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aN,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nN,"href","/docs/transformers/pr_17057/en/model_doc/retribert#transformers.RetriBertModel"),c(sN,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lN,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iN,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dN,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cN,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fN,"href","/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(mN,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(gN,"href","/docs/transformers/pr_17057/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(hN,"href","/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(pN,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uN,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_N,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bN,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vN,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y_,"id","transformers.AutoModelForCausalLM"),c(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(FN,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TN,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MN,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EN,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForCausalLM"),c(CN,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertLMHeadModel"),c(wN,"href","/docs/transformers/pr_17057/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(AN,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yN,"href","/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(LN,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xN,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($N,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(kN,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(SN,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(RN,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForCausalLM"),c(BN,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(PN,"href","/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(IN,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qN,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianForCausalLM"),c(NN,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForCausalLM"),c(jN,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(DN,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(GN,"href","/docs/transformers/pr_17057/en/model_doc/opt#transformers.OPTForCausalLM"),c(ON,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(VN,"href","/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(XN,"href","/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(zN,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(QN,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(WN,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(HN,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(UN,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(JN,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(YN,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(KN,"href","/docs/transformers/pr_17057/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ZN,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(ej,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(rj,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(tj,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(aj,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForMaskedLM"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(nj,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sj,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lj,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ij,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mj,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pj,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uj,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_j,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(vj,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wj,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xj,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c($j,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kj,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qj,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jj,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForSeq2SeqLM"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Oj,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vj,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xj,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zj,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Jj,"href","/docs/transformers/pr_17057/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17057/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.MarianMTModel"),c(eD,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17057/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17057/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.AutoModelForSequenceClassification"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(iD,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dD,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cD,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fD,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($D,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17057/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ub,"id","transformers.AutoModelForMultipleChoice"),c(ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ub,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(aG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lG,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($G,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForNextSentencePrediction"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(IG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DG,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GG,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OG,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VG,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForTokenClassification"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(XG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QG,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WG,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HG,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForTokenClassification"),c(UG,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JG,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KG,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eO,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oO,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rO,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tO,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aO,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sO,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lO,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iO,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cO,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fO,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mO,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(pO,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uO,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vO,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FO,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MO,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EO,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CO,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wO,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForQuestionAnswering"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(AO,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17057/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17057/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VO,"href","/docs/transformers/pr_17057/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17057/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17057/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17057/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17057/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17057/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17057/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17057/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17057/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cV,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gV,"href","/docs/transformers/pr_17057/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.AutoModelForTableQuestionAnswering"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(hV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.AutoModelForImageClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(bV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitForImageClassification"),c(MV,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EV,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(CV,"href","/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTForImageClassification"),c(wV,"href","/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(AV,"href","/docs/transformers/pr_17057/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(yV,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LV,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(xV,"href","/docs/transformers/pr_17057/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c($V,"href","/docs/transformers/pr_17057/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(kV,"href","/docs/transformers/pr_17057/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(SV,"href","/docs/transformers/pr_17057/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(RV,"href","/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BV,"href","/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinForImageClassification"),c(PV,"href","/docs/transformers/pr_17057/en/model_doc/van#transformers.VanForImageClassification"),c(IV,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.AutoModelForVision2Seq"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(qV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForAudioClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(GV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForAudioFrameClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(KV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(rX,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(tX,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(aX,"href","/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForCTC"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(nX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(dX,"href","/docs/transformers/pr_17057/en/model_doc/hubert#transformers.HubertForCTC"),c(cX,"href","/docs/transformers/pr_17057/en/model_doc/sew#transformers.SEWForCTC"),c(fX,"href","/docs/transformers/pr_17057/en/model_doc/sew-d#transformers.SEWDForCTC"),c(mX,"href","/docs/transformers/pr_17057/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(gX,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(hX,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(pX,"href","/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(uX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17057/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(FX,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioXVector"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(TX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CX,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(wX,"href","/docs/transformers/pr_17057/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(AX,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(yX,"href","/docs/transformers/pr_17057/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForMaskedImageModeling"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(LX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17057/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(SX,"href","/docs/transformers/pr_17057/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(RX,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForObjectDetection"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(BX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrForObjectDetection"),c(NX,"href","/docs/transformers/pr_17057/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForImageSegmentation"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(jX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17057/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForSemanticSegmentation"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(VX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(WX,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(HX,"href","/docs/transformers/pr_17057/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(UX,"href","/docs/transformers/pr_17057/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForInstanceSegmentation"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(JX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17057/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.TFAutoModel"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(ez,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertModel"),c(az,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.TFBartModel"),c(nz,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertModel"),c(sz,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(lz,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(iz,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertModel"),c(dz,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.TFCLIPModel"),c(cz,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertModel"),c(fz,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.TFConvNextModel"),c(mz,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLModel"),c(gz,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(hz,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaModel"),c(pz,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(uz,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(_z,"href","/docs/transformers/pr_17057/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(bz,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraModel"),c(vz,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Fz,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelModel"),c(Tz,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Mz,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Ez,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJModel"),c(Cz,"href","/docs/transformers/pr_17057/en/model_doc/hubert#transformers.TFHubertModel"),c(wz,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Az,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.TFLEDModel"),c(yz,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerModel"),c(Lz,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.TFLxmertModel"),c(xz,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.TFMarianModel"),c($z,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.TFMBartModel"),c(kz,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Sz,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Rz,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.TFMT5Model"),c(Bz,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Pz,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Iz,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertModel"),c(qz,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaModel"),c(Nz,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerModel"),c(jz,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Dz,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.TFT5Model"),c(Gz,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasModel"),c(Oz,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Vz,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.TFViTModel"),c(Xz,"href","/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(zz,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Qz,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMModel"),c(Wz,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Hz,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.TFAutoModelForPreTraining"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Zz,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eQ,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForPreTraining"),c(oQ,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(nQ,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(lQ,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iQ,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17057/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(cQ,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(pQ,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17057/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(bQ,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.TFAutoModelForCausalLM"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(AQ,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LQ,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(xQ,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($Q,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(kQ,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(SQ,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(RQ,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModelForImageClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17057/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(DQ,"href","/docs/transformers/pr_17057/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(GQ,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.TFAutoModelForMaskedLM"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(eW,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(oW,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(rW,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(tW,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(aW,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(nW,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(sW,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(lW,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(iW,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(dW,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cW,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(bW,"href","/docs/transformers/pr_17057/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.TFMarianMTModel"),c(FW,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(EW,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModelForSequenceClassification"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(CW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17057/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17057/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17057/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForMultipleChoice"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(vH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(EH,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(CH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17057/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForTokenClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(SH,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(RH,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(PH,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(IH,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(qH,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(NH,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(jH,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(DH,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(GH,"href","/docs/transformers/pr_17057/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(OH,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(VH,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(zH,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(QH,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(WH,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(HH,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(UH,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(JH,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForQuestionAnswering"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(YH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17057/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17057/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17057/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17057/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17057/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(dU,"href","/docs/transformers/pr_17057/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17057/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17057/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17057/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17057/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17057/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(bU,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_17057/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForVision2Seq"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(FU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(CU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17057/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.FlaxAutoModel"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(LU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertModel"),c(SU,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartModel"),c(RU,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.FlaxBeitModel"),c(BU,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertModel"),c(PU,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(IU,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(qU,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(NU,"href","/docs/transformers/pr_17057/en/model_doc/clip#transformers.FlaxCLIPModel"),c(jU,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(DU,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraModel"),c(GU,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(OU,"href","/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(VU,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(XU,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.FlaxMarianModel"),c(zU,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartModel"),c(QU,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.FlaxMT5Model"),c(WU,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(HU,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(UU,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(JU,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.FlaxT5Model"),c(YU,"href","/docs/transformers/pr_17057/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(KU,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.FlaxViTModel"),c(ZU,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(eJ,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(oJ,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.FlaxAutoModelForCausalLM"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(rJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(sJ,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(lJ,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(iJ,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(dJ,"href","/docs/transformers/pr_17057/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(cJ,"href","/docs/transformers/pr_17057/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(fJ,"href","/docs/transformers/pr_17057/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mJ,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(gJ,"href","/docs/transformers/pr_17057/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.FlaxAutoModelForPreTraining"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(bJ,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(FJ,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(TJ,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(MJ,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_17057/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(LJ,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.FlaxAutoModelForMaskedLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17057/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17057/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(UJ,"href","/docs/transformers/pr_17057/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(JJ,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17057/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17057/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17057/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(eY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17057/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17057/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.FlaxAutoModelForTokenClassification"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(kY,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SY,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(RY,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(BY,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(PY,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(IY,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(qY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_17057/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17057/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17057/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17057/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17057/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17057/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17057/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17057/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.FlaxAutoModelForImageClassification"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(KY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_17057/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(rK,"href","/docs/transformers/pr_17057/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForVision2Seq"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(tK,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/pr_17057/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/pr_17057/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,WA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,HA),e(Xe,yn),e(Xe,Ln),e(Ln,UA),e(Xe,fi),e(Xe,xn),e(xn,JA),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,h$),e(Ae,gi),e(gi,p$),e(Ae,u$),b(f,Eo,_),b(f,Ea,_),e(Ea,_$),e(Ea,pf),e(pf,b$),e(Ea,eDe),b(f,VPe,_),b(f,hi,_),e(hi,uf),e(uf,eee),M(YA,eee,null),e(hi,oDe),e(hi,oee),e(oee,rDe),b(f,XPe,_),b(f,$n,_),e($n,tDe),e($n,ree),e(ree,aDe),e($n,nDe),e($n,tee),e(tee,sDe),e($n,lDe),b(f,zPe,_),M(KA,f,_),b(f,QPe,_),b(f,v$,_),e(v$,iDe),b(f,WPe,_),M(_f,f,_),b(f,HPe,_),b(f,pi,_),e(pi,bf),e(bf,aee),M(ZA,aee,null),e(pi,dDe),e(pi,nee),e(nee,cDe),b(f,UPe,_),b(f,Co,_),M(e6,Co,null),e(Co,fDe),e(Co,o6),e(o6,mDe),e(o6,F$),e(F$,gDe),e(o6,hDe),e(Co,pDe),e(Co,r6),e(r6,uDe),e(r6,see),e(see,_De),e(r6,bDe),e(Co,vDe),e(Co,Er),M(t6,Er,null),e(Er,FDe),e(Er,lee),e(lee,TDe),e(Er,MDe),e(Er,ui),e(ui,EDe),e(ui,iee),e(iee,CDe),e(ui,wDe),e(ui,dee),e(dee,ADe),e(ui,yDe),e(Er,LDe),e(Er,A),e(A,vf),e(vf,cee),e(cee,xDe),e(vf,$De),e(vf,T$),e(T$,kDe),e(vf,SDe),e(A,RDe),e(A,Ff),e(Ff,fee),e(fee,BDe),e(Ff,PDe),e(Ff,M$),e(M$,IDe),e(Ff,qDe),e(A,NDe),e(A,Tf),e(Tf,mee),e(mee,jDe),e(Tf,DDe),e(Tf,E$),e(E$,GDe),e(Tf,ODe),e(A,VDe),e(A,Mf),e(Mf,gee),e(gee,XDe),e(Mf,zDe),e(Mf,C$),e(C$,QDe),e(Mf,WDe),e(A,HDe),e(A,Ef),e(Ef,hee),e(hee,UDe),e(Ef,JDe),e(Ef,w$),e(w$,YDe),e(Ef,KDe),e(A,ZDe),e(A,Cf),e(Cf,pee),e(pee,eGe),e(Cf,oGe),e(Cf,A$),e(A$,rGe),e(Cf,tGe),e(A,aGe),e(A,wf),e(wf,uee),e(uee,nGe),e(wf,sGe),e(wf,y$),e(y$,lGe),e(wf,iGe),e(A,dGe),e(A,Af),e(Af,_ee),e(_ee,cGe),e(Af,fGe),e(Af,L$),e(L$,mGe),e(Af,gGe),e(A,hGe),e(A,yf),e(yf,bee),e(bee,pGe),e(yf,uGe),e(yf,x$),e(x$,_Ge),e(yf,bGe),e(A,vGe),e(A,Lf),e(Lf,vee),e(vee,FGe),e(Lf,TGe),e(Lf,$$),e($$,MGe),e(Lf,EGe),e(A,CGe),e(A,xf),e(xf,Fee),e(Fee,wGe),e(xf,AGe),e(xf,k$),e(k$,yGe),e(xf,LGe),e(A,xGe),e(A,$f),e($f,Tee),e(Tee,$Ge),e($f,kGe),e($f,S$),e(S$,SGe),e($f,RGe),e(A,BGe),e(A,kf),e(kf,Mee),e(Mee,PGe),e(kf,IGe),e(kf,R$),e(R$,qGe),e(kf,NGe),e(A,jGe),e(A,Sf),e(Sf,Eee),e(Eee,DGe),e(Sf,GGe),e(Sf,B$),e(B$,OGe),e(Sf,VGe),e(A,XGe),e(A,Rf),e(Rf,Cee),e(Cee,zGe),e(Rf,QGe),e(Rf,P$),e(P$,WGe),e(Rf,HGe),e(A,UGe),e(A,Bf),e(Bf,wee),e(wee,JGe),e(Bf,YGe),e(Bf,I$),e(I$,KGe),e(Bf,ZGe),e(A,eOe),e(A,Pf),e(Pf,Aee),e(Aee,oOe),e(Pf,rOe),e(Pf,q$),e(q$,tOe),e(Pf,aOe),e(A,nOe),e(A,If),e(If,yee),e(yee,sOe),e(If,lOe),e(If,N$),e(N$,iOe),e(If,dOe),e(A,cOe),e(A,qf),e(qf,Lee),e(Lee,fOe),e(qf,mOe),e(qf,j$),e(j$,gOe),e(qf,hOe),e(A,pOe),e(A,Nf),e(Nf,xee),e(xee,uOe),e(Nf,_Oe),e(Nf,D$),e(D$,bOe),e(Nf,vOe),e(A,FOe),e(A,jf),e(jf,$ee),e($ee,TOe),e(jf,MOe),e(jf,G$),e(G$,EOe),e(jf,COe),e(A,wOe),e(A,Df),e(Df,kee),e(kee,AOe),e(Df,yOe),e(Df,O$),e(O$,LOe),e(Df,xOe),e(A,$Oe),e(A,Gf),e(Gf,See),e(See,kOe),e(Gf,SOe),e(Gf,V$),e(V$,ROe),e(Gf,BOe),e(A,POe),e(A,Of),e(Of,Ree),e(Ree,IOe),e(Of,qOe),e(Of,X$),e(X$,NOe),e(Of,jOe),e(A,DOe),e(A,Vf),e(Vf,Bee),e(Bee,GOe),e(Vf,OOe),e(Vf,z$),e(z$,VOe),e(Vf,XOe),e(A,zOe),e(A,Xf),e(Xf,Pee),e(Pee,QOe),e(Xf,WOe),e(Xf,Q$),e(Q$,HOe),e(Xf,UOe),e(A,JOe),e(A,zf),e(zf,Iee),e(Iee,YOe),e(zf,KOe),e(zf,W$),e(W$,ZOe),e(zf,eVe),e(A,oVe),e(A,Qf),e(Qf,qee),e(qee,rVe),e(Qf,tVe),e(Qf,H$),e(H$,aVe),e(Qf,nVe),e(A,sVe),e(A,Wf),e(Wf,Nee),e(Nee,lVe),e(Wf,iVe),e(Wf,U$),e(U$,dVe),e(Wf,cVe),e(A,fVe),e(A,Hf),e(Hf,jee),e(jee,mVe),e(Hf,gVe),e(Hf,J$),e(J$,hVe),e(Hf,pVe),e(A,uVe),e(A,Uf),e(Uf,Dee),e(Dee,_Ve),e(Uf,bVe),e(Uf,Y$),e(Y$,vVe),e(Uf,FVe),e(A,TVe),e(A,Jf),e(Jf,Gee),e(Gee,MVe),e(Jf,EVe),e(Jf,K$),e(K$,CVe),e(Jf,wVe),e(A,AVe),e(A,Yf),e(Yf,Oee),e(Oee,yVe),e(Yf,LVe),e(Yf,Z$),e(Z$,xVe),e(Yf,$Ve),e(A,kVe),e(A,Kf),e(Kf,Vee),e(Vee,SVe),e(Kf,RVe),e(Kf,ek),e(ek,BVe),e(Kf,PVe),e(A,IVe),e(A,Zf),e(Zf,Xee),e(Xee,qVe),e(Zf,NVe),e(Zf,ok),e(ok,jVe),e(Zf,DVe),e(A,GVe),e(A,em),e(em,zee),e(zee,OVe),e(em,VVe),e(em,rk),e(rk,XVe),e(em,zVe),e(A,QVe),e(A,om),e(om,Qee),e(Qee,WVe),e(om,HVe),e(om,tk),e(tk,UVe),e(om,JVe),e(A,YVe),e(A,rm),e(rm,Wee),e(Wee,KVe),e(rm,ZVe),e(rm,ak),e(ak,eXe),e(rm,oXe),e(A,rXe),e(A,tm),e(tm,Hee),e(Hee,tXe),e(tm,aXe),e(tm,nk),e(nk,nXe),e(tm,sXe),e(A,lXe),e(A,am),e(am,Uee),e(Uee,iXe),e(am,dXe),e(am,sk),e(sk,cXe),e(am,fXe),e(A,mXe),e(A,nm),e(nm,Jee),e(Jee,gXe),e(nm,hXe),e(nm,lk),e(lk,pXe),e(nm,uXe),e(A,_Xe),e(A,sm),e(sm,Yee),e(Yee,bXe),e(sm,vXe),e(sm,ik),e(ik,FXe),e(sm,TXe),e(A,MXe),e(A,lm),e(lm,Kee),e(Kee,EXe),e(lm,CXe),e(lm,dk),e(dk,wXe),e(lm,AXe),e(A,yXe),e(A,im),e(im,Zee),e(Zee,LXe),e(im,xXe),e(im,ck),e(ck,$Xe),e(im,kXe),e(A,SXe),e(A,dm),e(dm,eoe),e(eoe,RXe),e(dm,BXe),e(dm,fk),e(fk,PXe),e(dm,IXe),e(A,qXe),e(A,cm),e(cm,ooe),e(ooe,NXe),e(cm,jXe),e(cm,mk),e(mk,DXe),e(cm,GXe),e(A,OXe),e(A,fm),e(fm,roe),e(roe,VXe),e(fm,XXe),e(fm,gk),e(gk,zXe),e(fm,QXe),e(A,WXe),e(A,mm),e(mm,toe),e(toe,HXe),e(mm,UXe),e(mm,hk),e(hk,JXe),e(mm,YXe),e(A,KXe),e(A,gm),e(gm,aoe),e(aoe,ZXe),e(gm,eze),e(gm,pk),e(pk,oze),e(gm,rze),e(A,tze),e(A,hm),e(hm,noe),e(noe,aze),e(hm,nze),e(hm,uk),e(uk,sze),e(hm,lze),e(A,ize),e(A,pm),e(pm,soe),e(soe,dze),e(pm,cze),e(pm,_k),e(_k,fze),e(pm,mze),e(A,gze),e(A,um),e(um,loe),e(loe,hze),e(um,pze),e(um,bk),e(bk,uze),e(um,_ze),e(A,bze),e(A,_m),e(_m,ioe),e(ioe,vze),e(_m,Fze),e(_m,vk),e(vk,Tze),e(_m,Mze),e(A,Eze),e(A,bm),e(bm,doe),e(doe,Cze),e(bm,wze),e(bm,Fk),e(Fk,Aze),e(bm,yze),e(A,Lze),e(A,vm),e(vm,coe),e(coe,xze),e(vm,$ze),e(vm,Tk),e(Tk,kze),e(vm,Sze),e(A,Rze),e(A,Fm),e(Fm,foe),e(foe,Bze),e(Fm,Pze),e(Fm,Mk),e(Mk,Ize),e(Fm,qze),e(A,Nze),e(A,Tm),e(Tm,moe),e(moe,jze),e(Tm,Dze),e(Tm,Ek),e(Ek,Gze),e(Tm,Oze),e(A,Vze),e(A,Mm),e(Mm,goe),e(goe,Xze),e(Mm,zze),e(Mm,Ck),e(Ck,Qze),e(Mm,Wze),e(A,Hze),e(A,Em),e(Em,hoe),e(hoe,Uze),e(Em,Jze),e(Em,wk),e(wk,Yze),e(Em,Kze),e(A,Zze),e(A,Cm),e(Cm,poe),e(poe,eQe),e(Cm,oQe),e(Cm,Ak),e(Ak,rQe),e(Cm,tQe),e(A,aQe),e(A,wm),e(wm,uoe),e(uoe,nQe),e(wm,sQe),e(wm,yk),e(yk,lQe),e(wm,iQe),e(A,dQe),e(A,Am),e(Am,_oe),e(_oe,cQe),e(Am,fQe),e(Am,Lk),e(Lk,mQe),e(Am,gQe),e(A,hQe),e(A,ym),e(ym,boe),e(boe,pQe),e(ym,uQe),e(ym,xk),e(xk,_Qe),e(ym,bQe),e(A,vQe),e(A,Lm),e(Lm,voe),e(voe,FQe),e(Lm,TQe),e(Lm,$k),e($k,MQe),e(Lm,EQe),e(A,CQe),e(A,xm),e(xm,Foe),e(Foe,wQe),e(xm,AQe),e(xm,kk),e(kk,yQe),e(xm,LQe),e(A,xQe),e(A,$m),e($m,Toe),e(Toe,$Qe),e($m,kQe),e($m,Sk),e(Sk,SQe),e($m,RQe),e(A,BQe),e(A,km),e(km,Moe),e(Moe,PQe),e(km,IQe),e(km,Rk),e(Rk,qQe),e(km,NQe),e(A,jQe),e(A,Sm),e(Sm,Eoe),e(Eoe,DQe),e(Sm,GQe),e(Sm,Bk),e(Bk,OQe),e(Sm,VQe),e(A,XQe),e(A,Rm),e(Rm,Coe),e(Coe,zQe),e(Rm,QQe),e(Rm,Pk),e(Pk,WQe),e(Rm,HQe),e(A,UQe),e(A,Bm),e(Bm,woe),e(woe,JQe),e(Bm,YQe),e(Bm,Ik),e(Ik,KQe),e(Bm,ZQe),e(A,eWe),e(A,Pm),e(Pm,Aoe),e(Aoe,oWe),e(Pm,rWe),e(Pm,qk),e(qk,tWe),e(Pm,aWe),e(A,nWe),e(A,Im),e(Im,yoe),e(yoe,sWe),e(Im,lWe),e(Im,Nk),e(Nk,iWe),e(Im,dWe),e(A,cWe),e(A,qm),e(qm,Loe),e(Loe,fWe),e(qm,mWe),e(qm,jk),e(jk,gWe),e(qm,hWe),e(A,pWe),e(A,Nm),e(Nm,xoe),e(xoe,uWe),e(Nm,_We),e(Nm,Dk),e(Dk,bWe),e(Nm,vWe),e(A,FWe),e(A,jm),e(jm,$oe),e($oe,TWe),e(jm,MWe),e(jm,Gk),e(Gk,EWe),e(jm,CWe),e(A,wWe),e(A,Dm),e(Dm,koe),e(koe,AWe),e(Dm,yWe),e(Dm,Ok),e(Ok,LWe),e(Dm,xWe),e(A,$We),e(A,Gm),e(Gm,Soe),e(Soe,kWe),e(Gm,SWe),e(Gm,Vk),e(Vk,RWe),e(Gm,BWe),e(A,PWe),e(A,Om),e(Om,Roe),e(Roe,IWe),e(Om,qWe),e(Om,Xk),e(Xk,NWe),e(Om,jWe),e(A,DWe),e(A,Vm),e(Vm,Boe),e(Boe,GWe),e(Vm,OWe),e(Vm,zk),e(zk,VWe),e(Vm,XWe),e(A,zWe),e(A,Xm),e(Xm,Poe),e(Poe,QWe),e(Xm,WWe),e(Xm,Qk),e(Qk,HWe),e(Xm,UWe),e(A,JWe),e(A,zm),e(zm,Ioe),e(Ioe,YWe),e(zm,KWe),e(zm,Wk),e(Wk,ZWe),e(zm,eHe),e(A,oHe),e(A,Qm),e(Qm,qoe),e(qoe,rHe),e(Qm,tHe),e(Qm,Hk),e(Hk,aHe),e(Qm,nHe),e(A,sHe),e(A,Wm),e(Wm,Noe),e(Noe,lHe),e(Wm,iHe),e(Wm,Uk),e(Uk,dHe),e(Wm,cHe),e(A,fHe),e(A,Hm),e(Hm,joe),e(joe,mHe),e(Hm,gHe),e(Hm,Jk),e(Jk,hHe),e(Hm,pHe),e(A,uHe),e(A,Um),e(Um,Doe),e(Doe,_He),e(Um,bHe),e(Um,Yk),e(Yk,vHe),e(Um,FHe),e(A,THe),e(A,Jm),e(Jm,Goe),e(Goe,MHe),e(Jm,EHe),e(Jm,Kk),e(Kk,CHe),e(Jm,wHe),e(A,AHe),e(A,Ym),e(Ym,Ooe),e(Ooe,yHe),e(Ym,LHe),e(Ym,Zk),e(Zk,xHe),e(Ym,$He),e(A,kHe),e(A,Km),e(Km,Voe),e(Voe,SHe),e(Km,RHe),e(Km,eS),e(eS,BHe),e(Km,PHe),e(A,IHe),e(A,Zm),e(Zm,Xoe),e(Xoe,qHe),e(Zm,NHe),e(Zm,oS),e(oS,jHe),e(Zm,DHe),e(A,GHe),e(A,eg),e(eg,zoe),e(zoe,OHe),e(eg,VHe),e(eg,rS),e(rS,XHe),e(eg,zHe),e(A,QHe),e(A,og),e(og,Qoe),e(Qoe,WHe),e(og,HHe),e(og,tS),e(tS,UHe),e(og,JHe),e(A,YHe),e(A,rg),e(rg,Woe),e(Woe,KHe),e(rg,ZHe),e(rg,aS),e(aS,eUe),e(rg,oUe),e(A,rUe),e(A,tg),e(tg,Hoe),e(Hoe,tUe),e(tg,aUe),e(tg,nS),e(nS,nUe),e(tg,sUe),e(A,lUe),e(A,ag),e(ag,Uoe),e(Uoe,iUe),e(ag,dUe),e(ag,sS),e(sS,cUe),e(ag,fUe),e(A,mUe),e(A,ng),e(ng,Joe),e(Joe,gUe),e(ng,hUe),e(ng,lS),e(lS,pUe),e(ng,uUe),e(A,_Ue),e(A,sg),e(sg,Yoe),e(Yoe,bUe),e(sg,vUe),e(sg,iS),e(iS,FUe),e(sg,TUe),e(A,MUe),e(A,lg),e(lg,Koe),e(Koe,EUe),e(lg,CUe),e(lg,dS),e(dS,wUe),e(lg,AUe),e(A,yUe),e(A,ig),e(ig,Zoe),e(Zoe,LUe),e(ig,xUe),e(ig,cS),e(cS,$Ue),e(ig,kUe),e(A,SUe),e(A,dg),e(dg,ere),e(ere,RUe),e(dg,BUe),e(dg,fS),e(fS,PUe),e(dg,IUe),e(A,qUe),e(A,cg),e(cg,ore),e(ore,NUe),e(cg,jUe),e(cg,mS),e(mS,DUe),e(cg,GUe),e(A,OUe),e(A,fg),e(fg,rre),e(rre,VUe),e(fg,XUe),e(fg,gS),e(gS,zUe),e(fg,QUe),e(A,WUe),e(A,mg),e(mg,tre),e(tre,HUe),e(mg,UUe),e(mg,hS),e(hS,JUe),e(mg,YUe),e(A,KUe),e(A,gg),e(gg,are),e(are,ZUe),e(gg,eJe),e(gg,pS),e(pS,oJe),e(gg,rJe),e(A,tJe),e(A,hg),e(hg,nre),e(nre,aJe),e(hg,nJe),e(hg,uS),e(uS,sJe),e(hg,lJe),e(A,iJe),e(A,pg),e(pg,sre),e(sre,dJe),e(pg,cJe),e(pg,_S),e(_S,fJe),e(pg,mJe),e(Er,gJe),M(ug,Er,null),e(Co,hJe),e(Co,_g),M(a6,_g,null),e(_g,pJe),e(_g,lre),e(lre,uJe),b(f,JPe,_),b(f,_i,_),e(_i,bg),e(bg,ire),M(n6,ire,null),e(_i,_Je),e(_i,dre),e(dre,bJe),b(f,YPe,_),b(f,wo,_),M(s6,wo,null),e(wo,vJe),e(wo,l6),e(l6,FJe),e(l6,bS),e(bS,TJe),e(l6,MJe),e(wo,EJe),e(wo,i6),e(i6,CJe),e(i6,cre),e(cre,wJe),e(i6,AJe),e(wo,yJe),e(wo,Cr),M(d6,Cr,null),e(Cr,LJe),e(Cr,fre),e(fre,xJe),e(Cr,$Je),e(Cr,Ca),e(Ca,kJe),e(Ca,mre),e(mre,SJe),e(Ca,RJe),e(Ca,gre),e(gre,BJe),e(Ca,PJe),e(Ca,hre),e(hre,IJe),e(Ca,qJe),e(Cr,NJe),e(Cr,k),e(k,kn),e(kn,pre),e(pre,jJe),e(kn,DJe),e(kn,vS),e(vS,GJe),e(kn,OJe),e(kn,FS),e(FS,VJe),e(kn,XJe),e(k,zJe),e(k,Sn),e(Sn,ure),e(ure,QJe),e(Sn,WJe),e(Sn,TS),e(TS,HJe),e(Sn,UJe),e(Sn,MS),e(MS,JJe),e(Sn,YJe),e(k,KJe),e(k,Rn),e(Rn,_re),e(_re,ZJe),e(Rn,eYe),e(Rn,ES),e(ES,oYe),e(Rn,rYe),e(Rn,CS),e(CS,tYe),e(Rn,aYe),e(k,nYe),e(k,vg),e(vg,bre),e(bre,sYe),e(vg,lYe),e(vg,wS),e(wS,iYe),e(vg,dYe),e(k,cYe),e(k,Bn),e(Bn,vre),e(vre,fYe),e(Bn,mYe),e(Bn,AS),e(AS,gYe),e(Bn,hYe),e(Bn,yS),e(yS,pYe),e(Bn,uYe),e(k,_Ye),e(k,Fg),e(Fg,Fre),e(Fre,bYe),e(Fg,vYe),e(Fg,LS),e(LS,FYe),e(Fg,TYe),e(k,MYe),e(k,Tg),e(Tg,Tre),e(Tre,EYe),e(Tg,CYe),e(Tg,xS),e(xS,wYe),e(Tg,AYe),e(k,yYe),e(k,Mg),e(Mg,Mre),e(Mre,LYe),e(Mg,xYe),e(Mg,$S),e($S,$Ye),e(Mg,kYe),e(k,SYe),e(k,Pn),e(Pn,Ere),e(Ere,RYe),e(Pn,BYe),e(Pn,kS),e(kS,PYe),e(Pn,IYe),e(Pn,SS),e(SS,qYe),e(Pn,NYe),e(k,jYe),e(k,In),e(In,Cre),e(Cre,DYe),e(In,GYe),e(In,RS),e(RS,OYe),e(In,VYe),e(In,BS),e(BS,XYe),e(In,zYe),e(k,QYe),e(k,qn),e(qn,wre),e(wre,WYe),e(qn,HYe),e(qn,PS),e(PS,UYe),e(qn,JYe),e(qn,IS),e(IS,YYe),e(qn,KYe),e(k,ZYe),e(k,Eg),e(Eg,Are),e(Are,eKe),e(Eg,oKe),e(Eg,qS),e(qS,rKe),e(Eg,tKe),e(k,aKe),e(k,Cg),e(Cg,yre),e(yre,nKe),e(Cg,sKe),e(Cg,NS),e(NS,lKe),e(Cg,iKe),e(k,dKe),e(k,Nn),e(Nn,Lre),e(Lre,cKe),e(Nn,fKe),e(Nn,jS),e(jS,mKe),e(Nn,gKe),e(Nn,DS),e(DS,hKe),e(Nn,pKe),e(k,uKe),e(k,wg),e(wg,xre),e(xre,_Ke),e(wg,bKe),e(wg,GS),e(GS,vKe),e(wg,FKe),e(k,TKe),e(k,jn),e(jn,$re),e($re,MKe),e(jn,EKe),e(jn,OS),e(OS,CKe),e(jn,wKe),e(jn,VS),e(VS,AKe),e(jn,yKe),e(k,LKe),e(k,Dn),e(Dn,kre),e(kre,xKe),e(Dn,$Ke),e(Dn,XS),e(XS,kKe),e(Dn,SKe),e(Dn,zS),e(zS,RKe),e(Dn,BKe),e(k,PKe),e(k,Gn),e(Gn,Sre),e(Sre,IKe),e(Gn,qKe),e(Gn,QS),e(QS,NKe),e(Gn,jKe),e(Gn,WS),e(WS,DKe),e(Gn,GKe),e(k,OKe),e(k,Ag),e(Ag,Rre),e(Rre,VKe),e(Ag,XKe),e(Ag,HS),e(HS,zKe),e(Ag,QKe),e(k,WKe),e(k,On),e(On,Bre),e(Bre,HKe),e(On,UKe),e(On,US),e(US,JKe),e(On,YKe),e(On,JS),e(JS,KKe),e(On,ZKe),e(k,eZe),e(k,Vn),e(Vn,Pre),e(Pre,oZe),e(Vn,rZe),e(Vn,YS),e(YS,tZe),e(Vn,aZe),e(Vn,KS),e(KS,nZe),e(Vn,sZe),e(k,lZe),e(k,Xn),e(Xn,Ire),e(Ire,iZe),e(Xn,dZe),e(Xn,ZS),e(ZS,cZe),e(Xn,fZe),e(Xn,eR),e(eR,mZe),e(Xn,gZe),e(k,hZe),e(k,zn),e(zn,qre),e(qre,pZe),e(zn,uZe),e(zn,oR),e(oR,_Ze),e(zn,bZe),e(zn,rR),e(rR,vZe),e(zn,FZe),e(k,TZe),e(k,Qn),e(Qn,Nre),e(Nre,MZe),e(Qn,EZe),e(Qn,tR),e(tR,CZe),e(Qn,wZe),e(Qn,aR),e(aR,AZe),e(Qn,yZe),e(k,LZe),e(k,Wn),e(Wn,jre),e(jre,xZe),e(Wn,$Ze),e(Wn,nR),e(nR,kZe),e(Wn,SZe),e(Wn,sR),e(sR,RZe),e(Wn,BZe),e(k,PZe),e(k,yg),e(yg,Dre),e(Dre,IZe),e(yg,qZe),e(yg,lR),e(lR,NZe),e(yg,jZe),e(k,DZe),e(k,Hn),e(Hn,Gre),e(Gre,GZe),e(Hn,OZe),e(Hn,iR),e(iR,VZe),e(Hn,XZe),e(Hn,dR),e(dR,zZe),e(Hn,QZe),e(k,WZe),e(k,Lg),e(Lg,Ore),e(Ore,HZe),e(Lg,UZe),e(Lg,cR),e(cR,JZe),e(Lg,YZe),e(k,KZe),e(k,Un),e(Un,Vre),e(Vre,ZZe),e(Un,eeo),e(Un,fR),e(fR,oeo),e(Un,reo),e(Un,mR),e(mR,teo),e(Un,aeo),e(k,neo),e(k,Jn),e(Jn,Xre),e(Xre,seo),e(Jn,leo),e(Jn,gR),e(gR,ieo),e(Jn,deo),e(Jn,hR),e(hR,ceo),e(Jn,feo),e(k,meo),e(k,Yn),e(Yn,zre),e(zre,geo),e(Yn,heo),e(Yn,pR),e(pR,peo),e(Yn,ueo),e(Yn,uR),e(uR,_eo),e(Yn,beo),e(k,veo),e(k,Kn),e(Kn,Qre),e(Qre,Feo),e(Kn,Teo),e(Kn,_R),e(_R,Meo),e(Kn,Eeo),e(Kn,bR),e(bR,Ceo),e(Kn,weo),e(k,Aeo),e(k,Zn),e(Zn,Wre),e(Wre,yeo),e(Zn,Leo),e(Zn,vR),e(vR,xeo),e(Zn,$eo),e(Zn,FR),e(FR,keo),e(Zn,Seo),e(k,Reo),e(k,xg),e(xg,Hre),e(Hre,Beo),e(xg,Peo),e(xg,TR),e(TR,Ieo),e(xg,qeo),e(k,Neo),e(k,es),e(es,Ure),e(Ure,jeo),e(es,Deo),e(es,MR),e(MR,Geo),e(es,Oeo),e(es,ER),e(ER,Veo),e(es,Xeo),e(k,zeo),e(k,os),e(os,Jre),e(Jre,Qeo),e(os,Weo),e(os,CR),e(CR,Heo),e(os,Ueo),e(os,wR),e(wR,Jeo),e(os,Yeo),e(k,Keo),e(k,rs),e(rs,Yre),e(Yre,Zeo),e(rs,eoo),e(rs,AR),e(AR,ooo),e(rs,roo),e(rs,yR),e(yR,too),e(rs,aoo),e(k,noo),e(k,ts),e(ts,Kre),e(Kre,soo),e(ts,loo),e(ts,LR),e(LR,ioo),e(ts,doo),e(ts,xR),e(xR,coo),e(ts,foo),e(k,moo),e(k,as),e(as,Zre),e(Zre,goo),e(as,hoo),e(as,$R),e($R,poo),e(as,uoo),e(as,kR),e(kR,_oo),e(as,boo),e(k,voo),e(k,ns),e(ns,ete),e(ete,Foo),e(ns,Too),e(ns,SR),e(SR,Moo),e(ns,Eoo),e(ns,RR),e(RR,Coo),e(ns,woo),e(k,Aoo),e(k,$g),e($g,ote),e(ote,yoo),e($g,Loo),e($g,BR),e(BR,xoo),e($g,$oo),e(k,koo),e(k,ss),e(ss,rte),e(rte,Soo),e(ss,Roo),e(ss,PR),e(PR,Boo),e(ss,Poo),e(ss,IR),e(IR,Ioo),e(ss,qoo),e(k,Noo),e(k,kg),e(kg,tte),e(tte,joo),e(kg,Doo),e(kg,qR),e(qR,Goo),e(kg,Ooo),e(k,Voo),e(k,Sg),e(Sg,ate),e(ate,Xoo),e(Sg,zoo),e(Sg,NR),e(NR,Qoo),e(Sg,Woo),e(k,Hoo),e(k,ls),e(ls,nte),e(nte,Uoo),e(ls,Joo),e(ls,jR),e(jR,Yoo),e(ls,Koo),e(ls,DR),e(DR,Zoo),e(ls,ero),e(k,oro),e(k,is),e(is,ste),e(ste,rro),e(is,tro),e(is,GR),e(GR,aro),e(is,nro),e(is,OR),e(OR,sro),e(is,lro),e(k,iro),e(k,ds),e(ds,lte),e(lte,dro),e(ds,cro),e(ds,VR),e(VR,fro),e(ds,mro),e(ds,XR),e(XR,gro),e(ds,hro),e(k,pro),e(k,Rg),e(Rg,ite),e(ite,uro),e(Rg,_ro),e(Rg,zR),e(zR,bro),e(Rg,vro),e(k,Fro),e(k,cs),e(cs,dte),e(dte,Tro),e(cs,Mro),e(cs,QR),e(QR,Ero),e(cs,Cro),e(cs,WR),e(WR,wro),e(cs,Aro),e(k,yro),e(k,fs),e(fs,cte),e(cte,Lro),e(fs,xro),e(fs,HR),e(HR,$ro),e(fs,kro),e(fs,UR),e(UR,Sro),e(fs,Rro),e(k,Bro),e(k,ms),e(ms,fte),e(fte,Pro),e(ms,Iro),e(ms,JR),e(JR,qro),e(ms,Nro),e(ms,YR),e(YR,jro),e(ms,Dro),e(k,Gro),e(k,gs),e(gs,mte),e(mte,Oro),e(gs,Vro),e(gs,KR),e(KR,Xro),e(gs,zro),e(gs,ZR),e(ZR,Qro),e(gs,Wro),e(k,Hro),e(k,hs),e(hs,gte),e(gte,Uro),e(hs,Jro),e(hs,eB),e(eB,Yro),e(hs,Kro),e(hs,oB),e(oB,Zro),e(hs,eto),e(k,oto),e(k,Bg),e(Bg,hte),e(hte,rto),e(Bg,tto),e(Bg,rB),e(rB,ato),e(Bg,nto),e(k,sto),e(k,ps),e(ps,pte),e(pte,lto),e(ps,ito),e(ps,tB),e(tB,dto),e(ps,cto),e(ps,aB),e(aB,fto),e(ps,mto),e(k,gto),e(k,Pg),e(Pg,ute),e(ute,hto),e(Pg,pto),e(Pg,nB),e(nB,uto),e(Pg,_to),e(k,bto),e(k,Ig),e(Ig,_te),e(_te,vto),e(Ig,Fto),e(Ig,sB),e(sB,Tto),e(Ig,Mto),e(k,Eto),e(k,qg),e(qg,bte),e(bte,Cto),e(qg,wto),e(qg,lB),e(lB,Ato),e(qg,yto),e(k,Lto),e(k,Ng),e(Ng,vte),e(vte,xto),e(Ng,$to),e(Ng,iB),e(iB,kto),e(Ng,Sto),e(k,Rto),e(k,us),e(us,Fte),e(Fte,Bto),e(us,Pto),e(us,dB),e(dB,Ito),e(us,qto),e(us,cB),e(cB,Nto),e(us,jto),e(k,Dto),e(k,jg),e(jg,Tte),e(Tte,Gto),e(jg,Oto),e(jg,fB),e(fB,Vto),e(jg,Xto),e(k,zto),e(k,_s),e(_s,Mte),e(Mte,Qto),e(_s,Wto),e(_s,mB),e(mB,Hto),e(_s,Uto),e(_s,gB),e(gB,Jto),e(_s,Yto),e(k,Kto),e(k,bs),e(bs,Ete),e(Ete,Zto),e(bs,eao),e(bs,hB),e(hB,oao),e(bs,rao),e(bs,pB),e(pB,tao),e(bs,aao),e(k,nao),e(k,vs),e(vs,Cte),e(Cte,sao),e(vs,lao),e(vs,uB),e(uB,iao),e(vs,dao),e(vs,_B),e(_B,cao),e(vs,fao),e(k,mao),e(k,Fs),e(Fs,wte),e(wte,gao),e(Fs,hao),e(Fs,bB),e(bB,pao),e(Fs,uao),e(Fs,vB),e(vB,_ao),e(Fs,bao),e(k,vao),e(k,Ts),e(Ts,Ate),e(Ate,Fao),e(Ts,Tao),e(Ts,FB),e(FB,Mao),e(Ts,Eao),e(Ts,TB),e(TB,Cao),e(Ts,wao),e(k,Aao),e(k,Ms),e(Ms,yte),e(yte,yao),e(Ms,Lao),e(Ms,MB),e(MB,xao),e(Ms,$ao),e(Ms,EB),e(EB,kao),e(Ms,Sao),e(k,Rao),e(k,Dg),e(Dg,Lte),e(Lte,Bao),e(Dg,Pao),e(Dg,CB),e(CB,Iao),e(Dg,qao),e(k,Nao),e(k,Gg),e(Gg,xte),e(xte,jao),e(Gg,Dao),e(Gg,wB),e(wB,Gao),e(Gg,Oao),e(k,Vao),e(k,Es),e(Es,$te),e($te,Xao),e(Es,zao),e(Es,AB),e(AB,Qao),e(Es,Wao),e(Es,yB),e(yB,Hao),e(Es,Uao),e(k,Jao),e(k,Cs),e(Cs,kte),e(kte,Yao),e(Cs,Kao),e(Cs,LB),e(LB,Zao),e(Cs,eno),e(Cs,xB),e(xB,ono),e(Cs,rno),e(k,tno),e(k,ws),e(ws,Ste),e(Ste,ano),e(ws,nno),e(ws,$B),e($B,sno),e(ws,lno),e(ws,kB),e(kB,ino),e(ws,dno),e(k,cno),e(k,Og),e(Og,Rte),e(Rte,fno),e(Og,mno),e(Og,SB),e(SB,gno),e(Og,hno),e(k,pno),e(k,Vg),e(Vg,Bte),e(Bte,uno),e(Vg,_no),e(Vg,RB),e(RB,bno),e(Vg,vno),e(k,Fno),e(k,Xg),e(Xg,Pte),e(Pte,Tno),e(Xg,Mno),e(Xg,BB),e(BB,Eno),e(Xg,Cno),e(k,wno),e(k,As),e(As,Ite),e(Ite,Ano),e(As,yno),e(As,PB),e(PB,Lno),e(As,xno),e(As,IB),e(IB,$no),e(As,kno),e(k,Sno),e(k,zg),e(zg,qte),e(qte,Rno),e(zg,Bno),e(zg,qB),e(qB,Pno),e(zg,Ino),e(k,qno),e(k,Qg),e(Qg,Nte),e(Nte,Nno),e(Qg,jno),e(Qg,NB),e(NB,Dno),e(Qg,Gno),e(k,Ono),e(k,ys),e(ys,jte),e(jte,Vno),e(ys,Xno),e(ys,jB),e(jB,zno),e(ys,Qno),e(ys,DB),e(DB,Wno),e(ys,Hno),e(k,Uno),e(k,Wg),e(Wg,Dte),e(Dte,Jno),e(Wg,Yno),e(Wg,GB),e(GB,Kno),e(Wg,Zno),e(k,eso),e(k,Hg),e(Hg,Gte),e(Gte,oso),e(Hg,rso),e(Hg,OB),e(OB,tso),e(Hg,aso),e(k,nso),e(k,Ls),e(Ls,Ote),e(Ote,sso),e(Ls,lso),e(Ls,VB),e(VB,iso),e(Ls,dso),e(Ls,XB),e(XB,cso),e(Ls,fso),e(k,mso),e(k,xs),e(xs,Vte),e(Vte,gso),e(xs,hso),e(xs,zB),e(zB,pso),e(xs,uso),e(xs,QB),e(QB,_so),e(xs,bso),e(k,vso),e(k,$s),e($s,Xte),e(Xte,Fso),e($s,Tso),e($s,WB),e(WB,Mso),e($s,Eso),e($s,HB),e(HB,Cso),e($s,wso),e(k,Aso),e(k,ks),e(ks,zte),e(zte,yso),e(ks,Lso),e(ks,UB),e(UB,xso),e(ks,$so),e(ks,JB),e(JB,kso),e(ks,Sso),e(Cr,Rso),M(Ug,Cr,null),e(wo,Bso),e(wo,Jg),M(c6,Jg,null),e(Jg,Pso),e(Jg,Qte),e(Qte,Iso),b(f,KPe,_),b(f,bi,_),e(bi,Yg),e(Yg,Wte),M(f6,Wte,null),e(bi,qso),e(bi,Hte),e(Hte,Nso),b(f,ZPe,_),b(f,Ao,_),M(m6,Ao,null),e(Ao,jso),e(Ao,g6),e(g6,Dso),e(g6,YB),e(YB,Gso),e(g6,Oso),e(Ao,Vso),e(Ao,h6),e(h6,Xso),e(h6,Ute),e(Ute,zso),e(h6,Qso),e(Ao,Wso),e(Ao,Qe),M(p6,Qe,null),e(Qe,Hso),e(Qe,Jte),e(Jte,Uso),e(Qe,Jso),e(Qe,wa),e(wa,Yso),e(wa,Yte),e(Yte,Kso),e(wa,Zso),e(wa,Kte),e(Kte,elo),e(wa,olo),e(wa,Zte),e(Zte,rlo),e(wa,tlo),e(Qe,alo),e(Qe,oe),e(oe,Kg),e(Kg,eae),e(eae,nlo),e(Kg,slo),e(Kg,KB),e(KB,llo),e(Kg,ilo),e(oe,dlo),e(oe,Zg),e(Zg,oae),e(oae,clo),e(Zg,flo),e(Zg,ZB),e(ZB,mlo),e(Zg,glo),e(oe,hlo),e(oe,eh),e(eh,rae),e(rae,plo),e(eh,ulo),e(eh,eP),e(eP,_lo),e(eh,blo),e(oe,vlo),e(oe,oh),e(oh,tae),e(tae,Flo),e(oh,Tlo),e(oh,oP),e(oP,Mlo),e(oh,Elo),e(oe,Clo),e(oe,rh),e(rh,aae),e(aae,wlo),e(rh,Alo),e(rh,rP),e(rP,ylo),e(rh,Llo),e(oe,xlo),e(oe,th),e(th,nae),e(nae,$lo),e(th,klo),e(th,tP),e(tP,Slo),e(th,Rlo),e(oe,Blo),e(oe,ah),e(ah,sae),e(sae,Plo),e(ah,Ilo),e(ah,aP),e(aP,qlo),e(ah,Nlo),e(oe,jlo),e(oe,nh),e(nh,lae),e(lae,Dlo),e(nh,Glo),e(nh,nP),e(nP,Olo),e(nh,Vlo),e(oe,Xlo),e(oe,sh),e(sh,iae),e(iae,zlo),e(sh,Qlo),e(sh,sP),e(sP,Wlo),e(sh,Hlo),e(oe,Ulo),e(oe,lh),e(lh,dae),e(dae,Jlo),e(lh,Ylo),e(lh,lP),e(lP,Klo),e(lh,Zlo),e(oe,eio),e(oe,ih),e(ih,cae),e(cae,oio),e(ih,rio),e(ih,iP),e(iP,tio),e(ih,aio),e(oe,nio),e(oe,dh),e(dh,fae),e(fae,sio),e(dh,lio),e(dh,dP),e(dP,iio),e(dh,dio),e(oe,cio),e(oe,ch),e(ch,mae),e(mae,fio),e(ch,mio),e(ch,cP),e(cP,gio),e(ch,hio),e(oe,pio),e(oe,fh),e(fh,gae),e(gae,uio),e(fh,_io),e(fh,fP),e(fP,bio),e(fh,vio),e(oe,Fio),e(oe,mh),e(mh,hae),e(hae,Tio),e(mh,Mio),e(mh,mP),e(mP,Eio),e(mh,Cio),e(oe,wio),e(oe,gh),e(gh,pae),e(pae,Aio),e(gh,yio),e(gh,gP),e(gP,Lio),e(gh,xio),e(oe,$io),e(oe,hh),e(hh,uae),e(uae,kio),e(hh,Sio),e(hh,hP),e(hP,Rio),e(hh,Bio),e(oe,Pio),e(oe,ph),e(ph,_ae),e(_ae,Iio),e(ph,qio),e(ph,pP),e(pP,Nio),e(ph,jio),e(oe,Dio),e(oe,uh),e(uh,bae),e(bae,Gio),e(uh,Oio),e(uh,uP),e(uP,Vio),e(uh,Xio),e(oe,zio),e(oe,_h),e(_h,vae),e(vae,Qio),e(_h,Wio),e(_h,_P),e(_P,Hio),e(_h,Uio),e(oe,Jio),e(oe,bh),e(bh,Fae),e(Fae,Yio),e(bh,Kio),e(bh,bP),e(bP,Zio),e(bh,edo),e(oe,odo),e(oe,vh),e(vh,Tae),e(Tae,rdo),e(vh,tdo),e(vh,vP),e(vP,ado),e(vh,ndo),e(oe,sdo),e(oe,Fh),e(Fh,Mae),e(Mae,ldo),e(Fh,ido),e(Fh,FP),e(FP,ddo),e(Fh,cdo),e(oe,fdo),e(oe,Th),e(Th,Eae),e(Eae,mdo),e(Th,gdo),e(Th,TP),e(TP,hdo),e(Th,pdo),e(oe,udo),e(oe,Mh),e(Mh,Cae),e(Cae,_do),e(Mh,bdo),e(Mh,MP),e(MP,vdo),e(Mh,Fdo),e(Qe,Tdo),M(Eh,Qe,null),e(Qe,Mdo),M(Ch,Qe,null),e(Ao,Edo),e(Ao,wh),M(u6,wh,null),e(wh,Cdo),e(wh,wae),e(wae,wdo),b(f,eIe,_),b(f,vi,_),e(vi,Ah),e(Ah,Aae),M(_6,Aae,null),e(vi,Ado),e(vi,yae),e(yae,ydo),b(f,oIe,_),b(f,yo,_),M(b6,yo,null),e(yo,Ldo),e(yo,v6),e(v6,xdo),e(v6,EP),e(EP,$do),e(v6,kdo),e(yo,Sdo),e(yo,F6),e(F6,Rdo),e(F6,Lae),e(Lae,Bdo),e(F6,Pdo),e(yo,Ido),e(yo,We),M(T6,We,null),e(We,qdo),e(We,xae),e(xae,Ndo),e(We,jdo),e(We,Fi),e(Fi,Ddo),e(Fi,$ae),e($ae,Gdo),e(Fi,Odo),e(Fi,kae),e(kae,Vdo),e(Fi,Xdo),e(We,zdo),e(We,be),e(be,yh),e(yh,Sae),e(Sae,Qdo),e(yh,Wdo),e(yh,CP),e(CP,Hdo),e(yh,Udo),e(be,Jdo),e(be,Lh),e(Lh,Rae),e(Rae,Ydo),e(Lh,Kdo),e(Lh,Bae),e(Bae,Zdo),e(Lh,eco),e(be,oco),e(be,xh),e(xh,Pae),e(Pae,rco),e(xh,tco),e(xh,wP),e(wP,aco),e(xh,nco),e(be,sco),e(be,$h),e($h,Iae),e(Iae,lco),e($h,ico),e($h,AP),e(AP,dco),e($h,cco),e(be,fco),e(be,kh),e(kh,qae),e(qae,mco),e(kh,gco),e(kh,yP),e(yP,hco),e(kh,pco),e(be,uco),e(be,Sh),e(Sh,Nae),e(Nae,_co),e(Sh,bco),e(Sh,LP),e(LP,vco),e(Sh,Fco),e(be,Tco),e(be,Rh),e(Rh,jae),e(jae,Mco),e(Rh,Eco),e(Rh,xP),e(xP,Cco),e(Rh,wco),e(be,Aco),e(be,Bh),e(Bh,Dae),e(Dae,yco),e(Bh,Lco),e(Bh,$P),e($P,xco),e(Bh,$co),e(be,kco),e(be,Ph),e(Ph,Gae),e(Gae,Sco),e(Ph,Rco),e(Ph,kP),e(kP,Bco),e(Ph,Pco),e(be,Ico),e(be,Ih),e(Ih,Oae),e(Oae,qco),e(Ih,Nco),e(Ih,SP),e(SP,jco),e(Ih,Dco),e(be,Gco),e(be,qh),e(qh,Vae),e(Vae,Oco),e(qh,Vco),e(qh,RP),e(RP,Xco),e(qh,zco),e(be,Qco),e(be,Nh),e(Nh,Xae),e(Xae,Wco),e(Nh,Hco),e(Nh,BP),e(BP,Uco),e(Nh,Jco),e(be,Yco),e(be,jh),e(jh,zae),e(zae,Kco),e(jh,Zco),e(jh,PP),e(PP,efo),e(jh,ofo),e(be,rfo),e(be,Dh),e(Dh,Qae),e(Qae,tfo),e(Dh,afo),e(Dh,IP),e(IP,nfo),e(Dh,sfo),e(be,lfo),e(be,Gh),e(Gh,Wae),e(Wae,ifo),e(Gh,dfo),e(Gh,qP),e(qP,cfo),e(Gh,ffo),e(We,mfo),M(Oh,We,null),e(We,gfo),M(Vh,We,null),e(yo,hfo),e(yo,Xh),M(M6,Xh,null),e(Xh,pfo),e(Xh,Hae),e(Hae,ufo),b(f,rIe,_),b(f,Ti,_),e(Ti,zh),e(zh,Uae),M(E6,Uae,null),e(Ti,_fo),e(Ti,Jae),e(Jae,bfo),b(f,tIe,_),b(f,Lo,_),M(C6,Lo,null),e(Lo,vfo),e(Lo,Mi),e(Mi,Ffo),e(Mi,NP),e(NP,Tfo),e(Mi,Mfo),e(Mi,jP),e(jP,Efo),e(Mi,Cfo),e(Lo,wfo),e(Lo,w6),e(w6,Afo),e(w6,Yae),e(Yae,yfo),e(w6,Lfo),e(Lo,xfo),e(Lo,ot),M(A6,ot,null),e(ot,$fo),e(ot,Kae),e(Kae,kfo),e(ot,Sfo),e(ot,Ei),e(Ei,Rfo),e(Ei,Zae),e(Zae,Bfo),e(Ei,Pfo),e(Ei,DP),e(DP,Ifo),e(Ei,qfo),e(ot,Nfo),M(Qh,ot,null),e(Lo,jfo),e(Lo,He),M(y6,He,null),e(He,Dfo),e(He,ene),e(ene,Gfo),e(He,Ofo),e(He,Aa),e(Aa,Vfo),e(Aa,one),e(one,Xfo),e(Aa,zfo),e(Aa,rne),e(rne,Qfo),e(Aa,Wfo),e(Aa,tne),e(tne,Hfo),e(Aa,Ufo),e(He,Jfo),e(He,x),e(x,Wh),e(Wh,ane),e(ane,Yfo),e(Wh,Kfo),e(Wh,GP),e(GP,Zfo),e(Wh,emo),e(x,omo),e(x,Hh),e(Hh,nne),e(nne,rmo),e(Hh,tmo),e(Hh,OP),e(OP,amo),e(Hh,nmo),e(x,smo),e(x,Uh),e(Uh,sne),e(sne,lmo),e(Uh,imo),e(Uh,VP),e(VP,dmo),e(Uh,cmo),e(x,fmo),e(x,Jh),e(Jh,lne),e(lne,mmo),e(Jh,gmo),e(Jh,XP),e(XP,hmo),e(Jh,pmo),e(x,umo),e(x,Yh),e(Yh,ine),e(ine,_mo),e(Yh,bmo),e(Yh,zP),e(zP,vmo),e(Yh,Fmo),e(x,Tmo),e(x,Kh),e(Kh,dne),e(dne,Mmo),e(Kh,Emo),e(Kh,QP),e(QP,Cmo),e(Kh,wmo),e(x,Amo),e(x,Zh),e(Zh,cne),e(cne,ymo),e(Zh,Lmo),e(Zh,WP),e(WP,xmo),e(Zh,$mo),e(x,kmo),e(x,ep),e(ep,fne),e(fne,Smo),e(ep,Rmo),e(ep,HP),e(HP,Bmo),e(ep,Pmo),e(x,Imo),e(x,op),e(op,mne),e(mne,qmo),e(op,Nmo),e(op,UP),e(UP,jmo),e(op,Dmo),e(x,Gmo),e(x,rp),e(rp,gne),e(gne,Omo),e(rp,Vmo),e(rp,JP),e(JP,Xmo),e(rp,zmo),e(x,Qmo),e(x,tp),e(tp,hne),e(hne,Wmo),e(tp,Hmo),e(tp,YP),e(YP,Umo),e(tp,Jmo),e(x,Ymo),e(x,ap),e(ap,pne),e(pne,Kmo),e(ap,Zmo),e(ap,KP),e(KP,ego),e(ap,ogo),e(x,rgo),e(x,np),e(np,une),e(une,tgo),e(np,ago),e(np,ZP),e(ZP,ngo),e(np,sgo),e(x,lgo),e(x,sp),e(sp,_ne),e(_ne,igo),e(sp,dgo),e(sp,eI),e(eI,cgo),e(sp,fgo),e(x,mgo),e(x,lp),e(lp,bne),e(bne,ggo),e(lp,hgo),e(lp,oI),e(oI,pgo),e(lp,ugo),e(x,_go),e(x,ip),e(ip,vne),e(vne,bgo),e(ip,vgo),e(ip,rI),e(rI,Fgo),e(ip,Tgo),e(x,Mgo),e(x,dp),e(dp,Fne),e(Fne,Ego),e(dp,Cgo),e(dp,tI),e(tI,wgo),e(dp,Ago),e(x,ygo),e(x,cp),e(cp,Tne),e(Tne,Lgo),e(cp,xgo),e(cp,aI),e(aI,$go),e(cp,kgo),e(x,Sgo),e(x,fp),e(fp,Mne),e(Mne,Rgo),e(fp,Bgo),e(fp,nI),e(nI,Pgo),e(fp,Igo),e(x,qgo),e(x,mp),e(mp,Ene),e(Ene,Ngo),e(mp,jgo),e(mp,sI),e(sI,Dgo),e(mp,Ggo),e(x,Ogo),e(x,gp),e(gp,Cne),e(Cne,Vgo),e(gp,Xgo),e(gp,lI),e(lI,zgo),e(gp,Qgo),e(x,Wgo),e(x,hp),e(hp,wne),e(wne,Hgo),e(hp,Ugo),e(hp,iI),e(iI,Jgo),e(hp,Ygo),e(x,Kgo),e(x,pp),e(pp,Ane),e(Ane,Zgo),e(pp,eho),e(pp,dI),e(dI,oho),e(pp,rho),e(x,tho),e(x,up),e(up,yne),e(yne,aho),e(up,nho),e(up,cI),e(cI,sho),e(up,lho),e(x,iho),e(x,_p),e(_p,Lne),e(Lne,dho),e(_p,cho),e(_p,fI),e(fI,fho),e(_p,mho),e(x,gho),e(x,bp),e(bp,xne),e(xne,hho),e(bp,pho),e(bp,mI),e(mI,uho),e(bp,_ho),e(x,bho),e(x,vp),e(vp,$ne),e($ne,vho),e(vp,Fho),e(vp,gI),e(gI,Tho),e(vp,Mho),e(x,Eho),e(x,Fp),e(Fp,kne),e(kne,Cho),e(Fp,who),e(Fp,hI),e(hI,Aho),e(Fp,yho),e(x,Lho),e(x,Tp),e(Tp,Sne),e(Sne,xho),e(Tp,$ho),e(Tp,pI),e(pI,kho),e(Tp,Sho),e(x,Rho),e(x,Mp),e(Mp,Rne),e(Rne,Bho),e(Mp,Pho),e(Mp,uI),e(uI,Iho),e(Mp,qho),e(x,Nho),e(x,Ep),e(Ep,Bne),e(Bne,jho),e(Ep,Dho),e(Ep,_I),e(_I,Gho),e(Ep,Oho),e(x,Vho),e(x,Ss),e(Ss,Pne),e(Pne,Xho),e(Ss,zho),e(Ss,bI),e(bI,Qho),e(Ss,Who),e(Ss,vI),e(vI,Hho),e(Ss,Uho),e(x,Jho),e(x,Cp),e(Cp,Ine),e(Ine,Yho),e(Cp,Kho),e(Cp,FI),e(FI,Zho),e(Cp,epo),e(x,opo),e(x,wp),e(wp,qne),e(qne,rpo),e(wp,tpo),e(wp,TI),e(TI,apo),e(wp,npo),e(x,spo),e(x,Ap),e(Ap,Nne),e(Nne,lpo),e(Ap,ipo),e(Ap,MI),e(MI,dpo),e(Ap,cpo),e(x,fpo),e(x,yp),e(yp,jne),e(jne,mpo),e(yp,gpo),e(yp,EI),e(EI,hpo),e(yp,ppo),e(x,upo),e(x,Lp),e(Lp,Dne),e(Dne,_po),e(Lp,bpo),e(Lp,CI),e(CI,vpo),e(Lp,Fpo),e(x,Tpo),e(x,xp),e(xp,Gne),e(Gne,Mpo),e(xp,Epo),e(xp,wI),e(wI,Cpo),e(xp,wpo),e(x,Apo),e(x,$p),e($p,One),e(One,ypo),e($p,Lpo),e($p,AI),e(AI,xpo),e($p,$po),e(x,kpo),e(x,kp),e(kp,Vne),e(Vne,Spo),e(kp,Rpo),e(kp,yI),e(yI,Bpo),e(kp,Ppo),e(x,Ipo),e(x,Sp),e(Sp,Xne),e(Xne,qpo),e(Sp,Npo),e(Sp,LI),e(LI,jpo),e(Sp,Dpo),e(x,Gpo),e(x,Rp),e(Rp,zne),e(zne,Opo),e(Rp,Vpo),e(Rp,xI),e(xI,Xpo),e(Rp,zpo),e(x,Qpo),e(x,Bp),e(Bp,Qne),e(Qne,Wpo),e(Bp,Hpo),e(Bp,$I),e($I,Upo),e(Bp,Jpo),e(x,Ypo),e(x,Pp),e(Pp,Wne),e(Wne,Kpo),e(Pp,Zpo),e(Pp,kI),e(kI,euo),e(Pp,ouo),e(x,ruo),e(x,Ip),e(Ip,Hne),e(Hne,tuo),e(Ip,auo),e(Ip,SI),e(SI,nuo),e(Ip,suo),e(x,luo),e(x,qp),e(qp,Une),e(Une,iuo),e(qp,duo),e(qp,RI),e(RI,cuo),e(qp,fuo),e(x,muo),e(x,Np),e(Np,Jne),e(Jne,guo),e(Np,huo),e(Np,BI),e(BI,puo),e(Np,uuo),e(x,_uo),e(x,jp),e(jp,Yne),e(Yne,buo),e(jp,vuo),e(jp,PI),e(PI,Fuo),e(jp,Tuo),e(x,Muo),e(x,Dp),e(Dp,Kne),e(Kne,Euo),e(Dp,Cuo),e(Dp,II),e(II,wuo),e(Dp,Auo),e(x,yuo),e(x,Gp),e(Gp,Zne),e(Zne,Luo),e(Gp,xuo),e(Gp,qI),e(qI,$uo),e(Gp,kuo),e(x,Suo),e(x,Op),e(Op,ese),e(ese,Ruo),e(Op,Buo),e(Op,NI),e(NI,Puo),e(Op,Iuo),e(x,quo),e(x,Vp),e(Vp,ose),e(ose,Nuo),e(Vp,juo),e(Vp,jI),e(jI,Duo),e(Vp,Guo),e(x,Ouo),e(x,Xp),e(Xp,rse),e(rse,Vuo),e(Xp,Xuo),e(Xp,DI),e(DI,zuo),e(Xp,Quo),e(x,Wuo),e(x,zp),e(zp,tse),e(tse,Huo),e(zp,Uuo),e(zp,GI),e(GI,Juo),e(zp,Yuo),e(x,Kuo),e(x,Qp),e(Qp,ase),e(ase,Zuo),e(Qp,e_o),e(Qp,OI),e(OI,o_o),e(Qp,r_o),e(x,t_o),e(x,Wp),e(Wp,nse),e(nse,a_o),e(Wp,n_o),e(Wp,VI),e(VI,s_o),e(Wp,l_o),e(x,i_o),e(x,Hp),e(Hp,sse),e(sse,d_o),e(Hp,c_o),e(Hp,XI),e(XI,f_o),e(Hp,m_o),e(x,g_o),e(x,Up),e(Up,lse),e(lse,h_o),e(Up,p_o),e(Up,zI),e(zI,u_o),e(Up,__o),e(x,b_o),e(x,Jp),e(Jp,ise),e(ise,v_o),e(Jp,F_o),e(Jp,QI),e(QI,T_o),e(Jp,M_o),e(x,E_o),e(x,Yp),e(Yp,dse),e(dse,C_o),e(Yp,w_o),e(Yp,WI),e(WI,A_o),e(Yp,y_o),e(x,L_o),e(x,Kp),e(Kp,cse),e(cse,x_o),e(Kp,$_o),e(Kp,HI),e(HI,k_o),e(Kp,S_o),e(x,R_o),e(x,Zp),e(Zp,fse),e(fse,B_o),e(Zp,P_o),e(Zp,UI),e(UI,I_o),e(Zp,q_o),e(x,N_o),e(x,eu),e(eu,mse),e(mse,j_o),e(eu,D_o),e(eu,JI),e(JI,G_o),e(eu,O_o),e(x,V_o),e(x,ou),e(ou,gse),e(gse,X_o),e(ou,z_o),e(ou,YI),e(YI,Q_o),e(ou,W_o),e(x,H_o),e(x,ru),e(ru,hse),e(hse,U_o),e(ru,J_o),e(ru,KI),e(KI,Y_o),e(ru,K_o),e(x,Z_o),e(x,tu),e(tu,pse),e(pse,e1o),e(tu,o1o),e(tu,ZI),e(ZI,r1o),e(tu,t1o),e(x,a1o),e(x,au),e(au,use),e(use,n1o),e(au,s1o),e(au,eq),e(eq,l1o),e(au,i1o),e(x,d1o),e(x,nu),e(nu,_se),e(_se,c1o),e(nu,f1o),e(nu,oq),e(oq,m1o),e(nu,g1o),e(x,h1o),e(x,su),e(su,bse),e(bse,p1o),e(su,u1o),e(su,rq),e(rq,_1o),e(su,b1o),e(x,v1o),e(x,lu),e(lu,vse),e(vse,F1o),e(lu,T1o),e(lu,tq),e(tq,M1o),e(lu,E1o),e(x,C1o),e(x,iu),e(iu,Fse),e(Fse,w1o),e(iu,A1o),e(iu,aq),e(aq,y1o),e(iu,L1o),e(x,x1o),e(x,du),e(du,Tse),e(Tse,$1o),e(du,k1o),e(du,nq),e(nq,S1o),e(du,R1o),e(x,B1o),e(x,cu),e(cu,Mse),e(Mse,P1o),e(cu,I1o),e(cu,sq),e(sq,q1o),e(cu,N1o),e(x,j1o),e(x,fu),e(fu,Ese),e(Ese,D1o),e(fu,G1o),e(fu,lq),e(lq,O1o),e(fu,V1o),e(x,X1o),e(x,mu),e(mu,Cse),e(Cse,z1o),e(mu,Q1o),e(mu,iq),e(iq,W1o),e(mu,H1o),e(x,U1o),e(x,gu),e(gu,wse),e(wse,J1o),e(gu,Y1o),e(gu,dq),e(dq,K1o),e(gu,Z1o),e(x,e7o),e(x,hu),e(hu,Ase),e(Ase,o7o),e(hu,r7o),e(hu,cq),e(cq,t7o),e(hu,a7o),e(x,n7o),e(x,pu),e(pu,yse),e(yse,s7o),e(pu,l7o),e(pu,fq),e(fq,i7o),e(pu,d7o),e(x,c7o),e(x,uu),e(uu,Lse),e(Lse,f7o),e(uu,m7o),e(uu,mq),e(mq,g7o),e(uu,h7o),e(x,p7o),e(x,_u),e(_u,xse),e(xse,u7o),e(_u,_7o),e(_u,gq),e(gq,b7o),e(_u,v7o),e(x,F7o),e(x,bu),e(bu,$se),e($se,T7o),e(bu,M7o),e(bu,hq),e(hq,E7o),e(bu,C7o),e(x,w7o),e(x,vu),e(vu,kse),e(kse,A7o),e(vu,y7o),e(vu,pq),e(pq,L7o),e(vu,x7o),e(x,$7o),e(x,Fu),e(Fu,Sse),e(Sse,k7o),e(Fu,S7o),e(Fu,uq),e(uq,R7o),e(Fu,B7o),e(x,P7o),e(x,Tu),e(Tu,Rse),e(Rse,I7o),e(Tu,q7o),e(Tu,_q),e(_q,N7o),e(Tu,j7o),e(x,D7o),e(x,Mu),e(Mu,Bse),e(Bse,G7o),e(Mu,O7o),e(Mu,bq),e(bq,V7o),e(Mu,X7o),e(x,z7o),e(x,Eu),e(Eu,Pse),e(Pse,Q7o),e(Eu,W7o),e(Eu,vq),e(vq,H7o),e(Eu,U7o),e(x,J7o),e(x,Cu),e(Cu,Ise),e(Ise,Y7o),e(Cu,K7o),e(Cu,Fq),e(Fq,Z7o),e(Cu,ebo),e(x,obo),e(x,wu),e(wu,qse),e(qse,rbo),e(wu,tbo),e(wu,Tq),e(Tq,abo),e(wu,nbo),e(x,sbo),e(x,Au),e(Au,Nse),e(Nse,lbo),e(Au,ibo),e(Au,Mq),e(Mq,dbo),e(Au,cbo),e(x,fbo),e(x,yu),e(yu,jse),e(jse,mbo),e(yu,gbo),e(yu,Eq),e(Eq,hbo),e(yu,pbo),e(x,ubo),e(x,Lu),e(Lu,Dse),e(Dse,_bo),e(Lu,bbo),e(Lu,Cq),e(Cq,vbo),e(Lu,Fbo),e(x,Tbo),e(x,xu),e(xu,Gse),e(Gse,Mbo),e(xu,Ebo),e(xu,wq),e(wq,Cbo),e(xu,wbo),e(x,Abo),e(x,$u),e($u,Ose),e(Ose,ybo),e($u,Lbo),e($u,Aq),e(Aq,xbo),e($u,$bo),e(x,kbo),e(x,ku),e(ku,Vse),e(Vse,Sbo),e(ku,Rbo),e(ku,yq),e(yq,Bbo),e(ku,Pbo),e(x,Ibo),e(x,Su),e(Su,Xse),e(Xse,qbo),e(Su,Nbo),e(Su,Lq),e(Lq,jbo),e(Su,Dbo),e(x,Gbo),e(x,Ru),e(Ru,zse),e(zse,Obo),e(Ru,Vbo),e(Ru,xq),e(xq,Xbo),e(Ru,zbo),e(x,Qbo),e(x,Bu),e(Bu,Qse),e(Qse,Wbo),e(Bu,Hbo),e(Bu,$q),e($q,Ubo),e(Bu,Jbo),e(He,Ybo),e(He,Pu),e(Pu,Kbo),e(Pu,Wse),e(Wse,Zbo),e(Pu,e2o),e(Pu,Hse),e(Hse,o2o),e(He,r2o),M(Iu,He,null),b(f,aIe,_),b(f,Ci,_),e(Ci,qu),e(qu,Use),M(L6,Use,null),e(Ci,t2o),e(Ci,Jse),e(Jse,a2o),b(f,nIe,_),b(f,xo,_),M(x6,xo,null),e(xo,n2o),e(xo,wi),e(wi,s2o),e(wi,kq),e(kq,l2o),e(wi,i2o),e(wi,Sq),e(Sq,d2o),e(wi,c2o),e(xo,f2o),e(xo,$6),e($6,m2o),e($6,Yse),e(Yse,g2o),e($6,h2o),e(xo,p2o),e(xo,rt),M(k6,rt,null),e(rt,u2o),e(rt,Kse),e(Kse,_2o),e(rt,b2o),e(rt,Ai),e(Ai,v2o),e(Ai,Zse),e(Zse,F2o),e(Ai,T2o),e(Ai,Rq),e(Rq,M2o),e(Ai,E2o),e(rt,C2o),M(Nu,rt,null),e(xo,w2o),e(xo,Ue),M(S6,Ue,null),e(Ue,A2o),e(Ue,ele),e(ele,y2o),e(Ue,L2o),e(Ue,ya),e(ya,x2o),e(ya,ole),e(ole,$2o),e(ya,k2o),e(ya,rle),e(rle,S2o),e(ya,R2o),e(ya,tle),e(tle,B2o),e(ya,P2o),e(Ue,I2o),e(Ue,G),e(G,ju),e(ju,ale),e(ale,q2o),e(ju,N2o),e(ju,Bq),e(Bq,j2o),e(ju,D2o),e(G,G2o),e(G,Du),e(Du,nle),e(nle,O2o),e(Du,V2o),e(Du,Pq),e(Pq,X2o),e(Du,z2o),e(G,Q2o),e(G,Gu),e(Gu,sle),e(sle,W2o),e(Gu,H2o),e(Gu,Iq),e(Iq,U2o),e(Gu,J2o),e(G,Y2o),e(G,Ou),e(Ou,lle),e(lle,K2o),e(Ou,Z2o),e(Ou,qq),e(qq,e5o),e(Ou,o5o),e(G,r5o),e(G,Vu),e(Vu,ile),e(ile,t5o),e(Vu,a5o),e(Vu,Nq),e(Nq,n5o),e(Vu,s5o),e(G,l5o),e(G,Xu),e(Xu,dle),e(dle,i5o),e(Xu,d5o),e(Xu,jq),e(jq,c5o),e(Xu,f5o),e(G,m5o),e(G,zu),e(zu,cle),e(cle,g5o),e(zu,h5o),e(zu,Dq),e(Dq,p5o),e(zu,u5o),e(G,_5o),e(G,Qu),e(Qu,fle),e(fle,b5o),e(Qu,v5o),e(Qu,Gq),e(Gq,F5o),e(Qu,T5o),e(G,M5o),e(G,Wu),e(Wu,mle),e(mle,E5o),e(Wu,C5o),e(Wu,Oq),e(Oq,w5o),e(Wu,A5o),e(G,y5o),e(G,Hu),e(Hu,gle),e(gle,L5o),e(Hu,x5o),e(Hu,Vq),e(Vq,$5o),e(Hu,k5o),e(G,S5o),e(G,Uu),e(Uu,hle),e(hle,R5o),e(Uu,B5o),e(Uu,Xq),e(Xq,P5o),e(Uu,I5o),e(G,q5o),e(G,Ju),e(Ju,ple),e(ple,N5o),e(Ju,j5o),e(Ju,zq),e(zq,D5o),e(Ju,G5o),e(G,O5o),e(G,Yu),e(Yu,ule),e(ule,V5o),e(Yu,X5o),e(Yu,Qq),e(Qq,z5o),e(Yu,Q5o),e(G,W5o),e(G,Ku),e(Ku,_le),e(_le,H5o),e(Ku,U5o),e(Ku,Wq),e(Wq,J5o),e(Ku,Y5o),e(G,K5o),e(G,Zu),e(Zu,ble),e(ble,Z5o),e(Zu,evo),e(Zu,Hq),e(Hq,ovo),e(Zu,rvo),e(G,tvo),e(G,e_),e(e_,vle),e(vle,avo),e(e_,nvo),e(e_,Uq),e(Uq,svo),e(e_,lvo),e(G,ivo),e(G,o_),e(o_,Fle),e(Fle,dvo),e(o_,cvo),e(o_,Jq),e(Jq,fvo),e(o_,mvo),e(G,gvo),e(G,r_),e(r_,Tle),e(Tle,hvo),e(r_,pvo),e(r_,Yq),e(Yq,uvo),e(r_,_vo),e(G,bvo),e(G,t_),e(t_,Mle),e(Mle,vvo),e(t_,Fvo),e(t_,Kq),e(Kq,Tvo),e(t_,Mvo),e(G,Evo),e(G,a_),e(a_,Ele),e(Ele,Cvo),e(a_,wvo),e(a_,Zq),e(Zq,Avo),e(a_,yvo),e(G,Lvo),e(G,n_),e(n_,Cle),e(Cle,xvo),e(n_,$vo),e(n_,eN),e(eN,kvo),e(n_,Svo),e(G,Rvo),e(G,s_),e(s_,wle),e(wle,Bvo),e(s_,Pvo),e(s_,oN),e(oN,Ivo),e(s_,qvo),e(G,Nvo),e(G,l_),e(l_,Ale),e(Ale,jvo),e(l_,Dvo),e(l_,rN),e(rN,Gvo),e(l_,Ovo),e(G,Vvo),e(G,i_),e(i_,yle),e(yle,Xvo),e(i_,zvo),e(i_,tN),e(tN,Qvo),e(i_,Wvo),e(G,Hvo),e(G,d_),e(d_,Lle),e(Lle,Uvo),e(d_,Jvo),e(d_,aN),e(aN,Yvo),e(d_,Kvo),e(G,Zvo),e(G,c_),e(c_,xle),e(xle,eFo),e(c_,oFo),e(c_,nN),e(nN,rFo),e(c_,tFo),e(G,aFo),e(G,f_),e(f_,$le),e($le,nFo),e(f_,sFo),e(f_,sN),e(sN,lFo),e(f_,iFo),e(G,dFo),e(G,m_),e(m_,kle),e(kle,cFo),e(m_,fFo),e(m_,lN),e(lN,mFo),e(m_,gFo),e(G,hFo),e(G,g_),e(g_,Sle),e(Sle,pFo),e(g_,uFo),e(g_,iN),e(iN,_Fo),e(g_,bFo),e(G,vFo),e(G,h_),e(h_,Rle),e(Rle,FFo),e(h_,TFo),e(h_,dN),e(dN,MFo),e(h_,EFo),e(G,CFo),e(G,p_),e(p_,Ble),e(Ble,wFo),e(p_,AFo),e(p_,cN),e(cN,yFo),e(p_,LFo),e(G,xFo),e(G,u_),e(u_,Ple),e(Ple,$Fo),e(u_,kFo),e(u_,fN),e(fN,SFo),e(u_,RFo),e(G,BFo),e(G,__),e(__,Ile),e(Ile,PFo),e(__,IFo),e(__,mN),e(mN,qFo),e(__,NFo),e(G,jFo),e(G,b_),e(b_,qle),e(qle,DFo),e(b_,GFo),e(b_,gN),e(gN,OFo),e(b_,VFo),e(G,XFo),e(G,v_),e(v_,Nle),e(Nle,zFo),e(v_,QFo),e(v_,hN),e(hN,WFo),e(v_,HFo),e(G,UFo),e(G,F_),e(F_,jle),e(jle,JFo),e(F_,YFo),e(F_,pN),e(pN,KFo),e(F_,ZFo),e(G,e0o),e(G,T_),e(T_,Dle),e(Dle,o0o),e(T_,r0o),e(T_,uN),e(uN,t0o),e(T_,a0o),e(G,n0o),e(G,M_),e(M_,Gle),e(Gle,s0o),e(M_,l0o),e(M_,_N),e(_N,i0o),e(M_,d0o),e(G,c0o),e(G,E_),e(E_,Ole),e(Ole,f0o),e(E_,m0o),e(E_,bN),e(bN,g0o),e(E_,h0o),e(G,p0o),e(G,C_),e(C_,Vle),e(Vle,u0o),e(C_,_0o),e(C_,vN),e(vN,b0o),e(C_,v0o),e(Ue,F0o),e(Ue,w_),e(w_,T0o),e(w_,Xle),e(Xle,M0o),e(w_,E0o),e(w_,zle),e(zle,C0o),e(Ue,w0o),M(A_,Ue,null),b(f,sIe,_),b(f,yi,_),e(yi,y_),e(y_,Qle),M(R6,Qle,null),e(yi,A0o),e(yi,Wle),e(Wle,y0o),b(f,lIe,_),b(f,$o,_),M(B6,$o,null),e($o,L0o),e($o,Li),e(Li,x0o),e(Li,FN),e(FN,$0o),e(Li,k0o),e(Li,TN),e(TN,S0o),e(Li,R0o),e($o,B0o),e($o,P6),e(P6,P0o),e(P6,Hle),e(Hle,I0o),e(P6,q0o),e($o,N0o),e($o,tt),M(I6,tt,null),e(tt,j0o),e(tt,Ule),e(Ule,D0o),e(tt,G0o),e(tt,xi),e(xi,O0o),e(xi,Jle),e(Jle,V0o),e(xi,X0o),e(xi,MN),e(MN,z0o),e(xi,Q0o),e(tt,W0o),M(L_,tt,null),e($o,H0o),e($o,Je),M(q6,Je,null),e(Je,U0o),e(Je,Yle),e(Yle,J0o),e(Je,Y0o),e(Je,La),e(La,K0o),e(La,Kle),e(Kle,Z0o),e(La,eTo),e(La,Zle),e(Zle,oTo),e(La,rTo),e(La,eie),e(eie,tTo),e(La,aTo),e(Je,nTo),e(Je,z),e(z,x_),e(x_,oie),e(oie,sTo),e(x_,lTo),e(x_,EN),e(EN,iTo),e(x_,dTo),e(z,cTo),e(z,$_),e($_,rie),e(rie,fTo),e($_,mTo),e($_,CN),e(CN,gTo),e($_,hTo),e(z,pTo),e(z,k_),e(k_,tie),e(tie,uTo),e(k_,_To),e(k_,wN),e(wN,bTo),e(k_,vTo),e(z,FTo),e(z,S_),e(S_,aie),e(aie,TTo),e(S_,MTo),e(S_,AN),e(AN,ETo),e(S_,CTo),e(z,wTo),e(z,R_),e(R_,nie),e(nie,ATo),e(R_,yTo),e(R_,yN),e(yN,LTo),e(R_,xTo),e(z,$To),e(z,B_),e(B_,sie),e(sie,kTo),e(B_,STo),e(B_,LN),e(LN,RTo),e(B_,BTo),e(z,PTo),e(z,P_),e(P_,lie),e(lie,ITo),e(P_,qTo),e(P_,xN),e(xN,NTo),e(P_,jTo),e(z,DTo),e(z,I_),e(I_,iie),e(iie,GTo),e(I_,OTo),e(I_,$N),e($N,VTo),e(I_,XTo),e(z,zTo),e(z,q_),e(q_,die),e(die,QTo),e(q_,WTo),e(q_,kN),e(kN,HTo),e(q_,UTo),e(z,JTo),e(z,N_),e(N_,cie),e(cie,YTo),e(N_,KTo),e(N_,SN),e(SN,ZTo),e(N_,eMo),e(z,oMo),e(z,j_),e(j_,fie),e(fie,rMo),e(j_,tMo),e(j_,RN),e(RN,aMo),e(j_,nMo),e(z,sMo),e(z,D_),e(D_,mie),e(mie,lMo),e(D_,iMo),e(D_,BN),e(BN,dMo),e(D_,cMo),e(z,fMo),e(z,G_),e(G_,gie),e(gie,mMo),e(G_,gMo),e(G_,PN),e(PN,hMo),e(G_,pMo),e(z,uMo),e(z,O_),e(O_,hie),e(hie,_Mo),e(O_,bMo),e(O_,IN),e(IN,vMo),e(O_,FMo),e(z,TMo),e(z,V_),e(V_,pie),e(pie,MMo),e(V_,EMo),e(V_,qN),e(qN,CMo),e(V_,wMo),e(z,AMo),e(z,X_),e(X_,uie),e(uie,yMo),e(X_,LMo),e(X_,NN),e(NN,xMo),e(X_,$Mo),e(z,kMo),e(z,z_),e(z_,_ie),e(_ie,SMo),e(z_,RMo),e(z_,jN),e(jN,BMo),e(z_,PMo),e(z,IMo),e(z,Q_),e(Q_,bie),e(bie,qMo),e(Q_,NMo),e(Q_,DN),e(DN,jMo),e(Q_,DMo),e(z,GMo),e(z,W_),e(W_,vie),e(vie,OMo),e(W_,VMo),e(W_,GN),e(GN,XMo),e(W_,zMo),e(z,QMo),e(z,H_),e(H_,Fie),e(Fie,WMo),e(H_,HMo),e(H_,ON),e(ON,UMo),e(H_,JMo),e(z,YMo),e(z,U_),e(U_,Tie),e(Tie,KMo),e(U_,ZMo),e(U_,VN),e(VN,e4o),e(U_,o4o),e(z,r4o),e(z,J_),e(J_,Mie),e(Mie,t4o),e(J_,a4o),e(J_,XN),e(XN,n4o),e(J_,s4o),e(z,l4o),e(z,Y_),e(Y_,Eie),e(Eie,i4o),e(Y_,d4o),e(Y_,zN),e(zN,c4o),e(Y_,f4o),e(z,m4o),e(z,K_),e(K_,Cie),e(Cie,g4o),e(K_,h4o),e(K_,QN),e(QN,p4o),e(K_,u4o),e(z,_4o),e(z,Z_),e(Z_,wie),e(wie,b4o),e(Z_,v4o),e(Z_,WN),e(WN,F4o),e(Z_,T4o),e(z,M4o),e(z,e1),e(e1,Aie),e(Aie,E4o),e(e1,C4o),e(e1,HN),e(HN,w4o),e(e1,A4o),e(z,y4o),e(z,o1),e(o1,yie),e(yie,L4o),e(o1,x4o),e(o1,UN),e(UN,$4o),e(o1,k4o),e(z,S4o),e(z,r1),e(r1,Lie),e(Lie,R4o),e(r1,B4o),e(r1,JN),e(JN,P4o),e(r1,I4o),e(z,q4o),e(z,t1),e(t1,xie),e(xie,N4o),e(t1,j4o),e(t1,YN),e(YN,D4o),e(t1,G4o),e(z,O4o),e(z,a1),e(a1,$ie),e($ie,V4o),e(a1,X4o),e(a1,KN),e(KN,z4o),e(a1,Q4o),e(z,W4o),e(z,n1),e(n1,kie),e(kie,H4o),e(n1,U4o),e(n1,ZN),e(ZN,J4o),e(n1,Y4o),e(z,K4o),e(z,s1),e(s1,Sie),e(Sie,Z4o),e(s1,eEo),e(s1,ej),e(ej,oEo),e(s1,rEo),e(z,tEo),e(z,l1),e(l1,Rie),e(Rie,aEo),e(l1,nEo),e(l1,oj),e(oj,sEo),e(l1,lEo),e(z,iEo),e(z,i1),e(i1,Bie),e(Bie,dEo),e(i1,cEo),e(i1,rj),e(rj,fEo),e(i1,mEo),e(z,gEo),e(z,d1),e(d1,Pie),e(Pie,hEo),e(d1,pEo),e(d1,tj),e(tj,uEo),e(d1,_Eo),e(z,bEo),e(z,c1),e(c1,Iie),e(Iie,vEo),e(c1,FEo),e(c1,aj),e(aj,TEo),e(c1,MEo),e(Je,EEo),e(Je,f1),e(f1,CEo),e(f1,qie),e(qie,wEo),e(f1,AEo),e(f1,Nie),e(Nie,yEo),e(Je,LEo),M(m1,Je,null),b(f,iIe,_),b(f,$i,_),e($i,g1),e(g1,jie),M(N6,jie,null),e($i,xEo),e($i,Die),e(Die,$Eo),b(f,dIe,_),b(f,ko,_),M(j6,ko,null),e(ko,kEo),e(ko,ki),e(ki,SEo),e(ki,nj),e(nj,REo),e(ki,BEo),e(ki,sj),e(sj,PEo),e(ki,IEo),e(ko,qEo),e(ko,D6),e(D6,NEo),e(D6,Gie),e(Gie,jEo),e(D6,DEo),e(ko,GEo),e(ko,at),M(G6,at,null),e(at,OEo),e(at,Oie),e(Oie,VEo),e(at,XEo),e(at,Si),e(Si,zEo),e(Si,Vie),e(Vie,QEo),e(Si,WEo),e(Si,lj),e(lj,HEo),e(Si,UEo),e(at,JEo),M(h1,at,null),e(ko,YEo),e(ko,Ye),M(O6,Ye,null),e(Ye,KEo),e(Ye,Xie),e(Xie,ZEo),e(Ye,eCo),e(Ye,xa),e(xa,oCo),e(xa,zie),e(zie,rCo),e(xa,tCo),e(xa,Qie),e(Qie,aCo),e(xa,nCo),e(xa,Wie),e(Wie,sCo),e(xa,lCo),e(Ye,iCo),e(Ye,Q),e(Q,p1),e(p1,Hie),e(Hie,dCo),e(p1,cCo),e(p1,ij),e(ij,fCo),e(p1,mCo),e(Q,gCo),e(Q,u1),e(u1,Uie),e(Uie,hCo),e(u1,pCo),e(u1,dj),e(dj,uCo),e(u1,_Co),e(Q,bCo),e(Q,_1),e(_1,Jie),e(Jie,vCo),e(_1,FCo),e(_1,cj),e(cj,TCo),e(_1,MCo),e(Q,ECo),e(Q,b1),e(b1,Yie),e(Yie,CCo),e(b1,wCo),e(b1,fj),e(fj,ACo),e(b1,yCo),e(Q,LCo),e(Q,v1),e(v1,Kie),e(Kie,xCo),e(v1,$Co),e(v1,mj),e(mj,kCo),e(v1,SCo),e(Q,RCo),e(Q,F1),e(F1,Zie),e(Zie,BCo),e(F1,PCo),e(F1,gj),e(gj,ICo),e(F1,qCo),e(Q,NCo),e(Q,T1),e(T1,ede),e(ede,jCo),e(T1,DCo),e(T1,hj),e(hj,GCo),e(T1,OCo),e(Q,VCo),e(Q,M1),e(M1,ode),e(ode,XCo),e(M1,zCo),e(M1,pj),e(pj,QCo),e(M1,WCo),e(Q,HCo),e(Q,E1),e(E1,rde),e(rde,UCo),e(E1,JCo),e(E1,uj),e(uj,YCo),e(E1,KCo),e(Q,ZCo),e(Q,C1),e(C1,tde),e(tde,e3o),e(C1,o3o),e(C1,_j),e(_j,r3o),e(C1,t3o),e(Q,a3o),e(Q,w1),e(w1,ade),e(ade,n3o),e(w1,s3o),e(w1,bj),e(bj,l3o),e(w1,i3o),e(Q,d3o),e(Q,A1),e(A1,nde),e(nde,c3o),e(A1,f3o),e(A1,vj),e(vj,m3o),e(A1,g3o),e(Q,h3o),e(Q,y1),e(y1,sde),e(sde,p3o),e(y1,u3o),e(y1,Fj),e(Fj,_3o),e(y1,b3o),e(Q,v3o),e(Q,L1),e(L1,lde),e(lde,F3o),e(L1,T3o),e(L1,Tj),e(Tj,M3o),e(L1,E3o),e(Q,C3o),e(Q,x1),e(x1,ide),e(ide,w3o),e(x1,A3o),e(x1,Mj),e(Mj,y3o),e(x1,L3o),e(Q,x3o),e(Q,$1),e($1,dde),e(dde,$3o),e($1,k3o),e($1,Ej),e(Ej,S3o),e($1,R3o),e(Q,B3o),e(Q,k1),e(k1,cde),e(cde,P3o),e(k1,I3o),e(k1,Cj),e(Cj,q3o),e(k1,N3o),e(Q,j3o),e(Q,S1),e(S1,fde),e(fde,D3o),e(S1,G3o),e(S1,wj),e(wj,O3o),e(S1,V3o),e(Q,X3o),e(Q,R1),e(R1,mde),e(mde,z3o),e(R1,Q3o),e(R1,Aj),e(Aj,W3o),e(R1,H3o),e(Q,U3o),e(Q,B1),e(B1,gde),e(gde,J3o),e(B1,Y3o),e(B1,yj),e(yj,K3o),e(B1,Z3o),e(Q,ewo),e(Q,P1),e(P1,hde),e(hde,owo),e(P1,rwo),e(P1,Lj),e(Lj,two),e(P1,awo),e(Q,nwo),e(Q,I1),e(I1,pde),e(pde,swo),e(I1,lwo),e(I1,xj),e(xj,iwo),e(I1,dwo),e(Q,cwo),e(Q,q1),e(q1,ude),e(ude,fwo),e(q1,mwo),e(q1,$j),e($j,gwo),e(q1,hwo),e(Q,pwo),e(Q,N1),e(N1,_de),e(_de,uwo),e(N1,_wo),e(N1,kj),e(kj,bwo),e(N1,vwo),e(Q,Fwo),e(Q,j1),e(j1,bde),e(bde,Two),e(j1,Mwo),e(j1,Sj),e(Sj,Ewo),e(j1,Cwo),e(Q,wwo),e(Q,D1),e(D1,vde),e(vde,Awo),e(D1,ywo),e(D1,Rj),e(Rj,Lwo),e(D1,xwo),e(Q,$wo),e(Q,G1),e(G1,Fde),e(Fde,kwo),e(G1,Swo),e(G1,Bj),e(Bj,Rwo),e(G1,Bwo),e(Q,Pwo),e(Q,O1),e(O1,Tde),e(Tde,Iwo),e(O1,qwo),e(O1,Pj),e(Pj,Nwo),e(O1,jwo),e(Q,Dwo),e(Q,V1),e(V1,Mde),e(Mde,Gwo),e(V1,Owo),e(V1,Ij),e(Ij,Vwo),e(V1,Xwo),e(Q,zwo),e(Q,X1),e(X1,Ede),e(Ede,Qwo),e(X1,Wwo),e(X1,qj),e(qj,Hwo),e(X1,Uwo),e(Q,Jwo),e(Q,z1),e(z1,Cde),e(Cde,Ywo),e(z1,Kwo),e(z1,wde),e(wde,Zwo),e(z1,eAo),e(Q,oAo),e(Q,Q1),e(Q1,Ade),e(Ade,rAo),e(Q1,tAo),e(Q1,Nj),e(Nj,aAo),e(Q1,nAo),e(Q,sAo),e(Q,W1),e(W1,yde),e(yde,lAo),e(W1,iAo),e(W1,jj),e(jj,dAo),e(W1,cAo),e(Q,fAo),e(Q,H1),e(H1,Lde),e(Lde,mAo),e(H1,gAo),e(H1,Dj),e(Dj,hAo),e(H1,pAo),e(Q,uAo),e(Q,U1),e(U1,xde),e(xde,_Ao),e(U1,bAo),e(U1,Gj),e(Gj,vAo),e(U1,FAo),e(Ye,TAo),e(Ye,J1),e(J1,MAo),e(J1,$de),e($de,EAo),e(J1,CAo),e(J1,kde),e(kde,wAo),e(Ye,AAo),M(Y1,Ye,null),b(f,cIe,_),b(f,Ri,_),e(Ri,K1),e(K1,Sde),M(V6,Sde,null),e(Ri,yAo),e(Ri,Rde),e(Rde,LAo),b(f,fIe,_),b(f,So,_),M(X6,So,null),e(So,xAo),e(So,Bi),e(Bi,$Ao),e(Bi,Oj),e(Oj,kAo),e(Bi,SAo),e(Bi,Vj),e(Vj,RAo),e(Bi,BAo),e(So,PAo),e(So,z6),e(z6,IAo),e(z6,Bde),e(Bde,qAo),e(z6,NAo),e(So,jAo),e(So,nt),M(Q6,nt,null),e(nt,DAo),e(nt,Pde),e(Pde,GAo),e(nt,OAo),e(nt,Pi),e(Pi,VAo),e(Pi,Ide),e(Ide,XAo),e(Pi,zAo),e(Pi,Xj),e(Xj,QAo),e(Pi,WAo),e(nt,HAo),M(Z1,nt,null),e(So,UAo),e(So,Ke),M(W6,Ke,null),e(Ke,JAo),e(Ke,qde),e(qde,YAo),e(Ke,KAo),e(Ke,$a),e($a,ZAo),e($a,Nde),e(Nde,e6o),e($a,o6o),e($a,jde),e(jde,r6o),e($a,t6o),e($a,Dde),e(Dde,a6o),e($a,n6o),e(Ke,s6o),e(Ke,he),e(he,e7),e(e7,Gde),e(Gde,l6o),e(e7,i6o),e(e7,zj),e(zj,d6o),e(e7,c6o),e(he,f6o),e(he,o7),e(o7,Ode),e(Ode,m6o),e(o7,g6o),e(o7,Qj),e(Qj,h6o),e(o7,p6o),e(he,u6o),e(he,r7),e(r7,Vde),e(Vde,_6o),e(r7,b6o),e(r7,Wj),e(Wj,v6o),e(r7,F6o),e(he,T6o),e(he,t7),e(t7,Xde),e(Xde,M6o),e(t7,E6o),e(t7,Hj),e(Hj,C6o),e(t7,w6o),e(he,A6o),e(he,a7),e(a7,zde),e(zde,y6o),e(a7,L6o),e(a7,Uj),e(Uj,x6o),e(a7,$6o),e(he,k6o),e(he,n7),e(n7,Qde),e(Qde,S6o),e(n7,R6o),e(n7,Jj),e(Jj,B6o),e(n7,P6o),e(he,I6o),e(he,s7),e(s7,Wde),e(Wde,q6o),e(s7,N6o),e(s7,Yj),e(Yj,j6o),e(s7,D6o),e(he,G6o),e(he,l7),e(l7,Hde),e(Hde,O6o),e(l7,V6o),e(l7,Kj),e(Kj,X6o),e(l7,z6o),e(he,Q6o),e(he,i7),e(i7,Ude),e(Ude,W6o),e(i7,H6o),e(i7,Zj),e(Zj,U6o),e(i7,J6o),e(he,Y6o),e(he,d7),e(d7,Jde),e(Jde,K6o),e(d7,Z6o),e(d7,eD),e(eD,eyo),e(d7,oyo),e(he,ryo),e(he,c7),e(c7,Yde),e(Yde,tyo),e(c7,ayo),e(c7,oD),e(oD,nyo),e(c7,syo),e(he,lyo),e(he,f7),e(f7,Kde),e(Kde,iyo),e(f7,dyo),e(f7,rD),e(rD,cyo),e(f7,fyo),e(he,myo),e(he,m7),e(m7,Zde),e(Zde,gyo),e(m7,hyo),e(m7,tD),e(tD,pyo),e(m7,uyo),e(he,_yo),e(he,g7),e(g7,ece),e(ece,byo),e(g7,vyo),e(g7,aD),e(aD,Fyo),e(g7,Tyo),e(he,Myo),e(he,h7),e(h7,oce),e(oce,Eyo),e(h7,Cyo),e(h7,nD),e(nD,wyo),e(h7,Ayo),e(he,yyo),e(he,p7),e(p7,rce),e(rce,Lyo),e(p7,xyo),e(p7,sD),e(sD,$yo),e(p7,kyo),e(he,Syo),e(he,u7),e(u7,tce),e(tce,Ryo),e(u7,Byo),e(u7,lD),e(lD,Pyo),e(u7,Iyo),e(Ke,qyo),e(Ke,_7),e(_7,Nyo),e(_7,ace),e(ace,jyo),e(_7,Dyo),e(_7,nce),e(nce,Gyo),e(Ke,Oyo),M(b7,Ke,null),b(f,mIe,_),b(f,Ii,_),e(Ii,v7),e(v7,sce),M(H6,sce,null),e(Ii,Vyo),e(Ii,lce),e(lce,Xyo),b(f,gIe,_),b(f,Ro,_),M(U6,Ro,null),e(Ro,zyo),e(Ro,qi),e(qi,Qyo),e(qi,iD),e(iD,Wyo),e(qi,Hyo),e(qi,dD),e(dD,Uyo),e(qi,Jyo),e(Ro,Yyo),e(Ro,J6),e(J6,Kyo),e(J6,ice),e(ice,Zyo),e(J6,eLo),e(Ro,oLo),e(Ro,st),M(Y6,st,null),e(st,rLo),e(st,dce),e(dce,tLo),e(st,aLo),e(st,Ni),e(Ni,nLo),e(Ni,cce),e(cce,sLo),e(Ni,lLo),e(Ni,cD),e(cD,iLo),e(Ni,dLo),e(st,cLo),M(F7,st,null),e(Ro,fLo),e(Ro,Ze),M(K6,Ze,null),e(Ze,mLo),e(Ze,fce),e(fce,gLo),e(Ze,hLo),e(Ze,ka),e(ka,pLo),e(ka,mce),e(mce,uLo),e(ka,_Lo),e(ka,gce),e(gce,bLo),e(ka,vLo),e(ka,hce),e(hce,FLo),e(ka,TLo),e(Ze,MLo),e(Ze,q),e(q,T7),e(T7,pce),e(pce,ELo),e(T7,CLo),e(T7,fD),e(fD,wLo),e(T7,ALo),e(q,yLo),e(q,M7),e(M7,uce),e(uce,LLo),e(M7,xLo),e(M7,mD),e(mD,$Lo),e(M7,kLo),e(q,SLo),e(q,E7),e(E7,_ce),e(_ce,RLo),e(E7,BLo),e(E7,gD),e(gD,PLo),e(E7,ILo),e(q,qLo),e(q,C7),e(C7,bce),e(bce,NLo),e(C7,jLo),e(C7,hD),e(hD,DLo),e(C7,GLo),e(q,OLo),e(q,w7),e(w7,vce),e(vce,VLo),e(w7,XLo),e(w7,pD),e(pD,zLo),e(w7,QLo),e(q,WLo),e(q,A7),e(A7,Fce),e(Fce,HLo),e(A7,ULo),e(A7,uD),e(uD,JLo),e(A7,YLo),e(q,KLo),e(q,y7),e(y7,Tce),e(Tce,ZLo),e(y7,e8o),e(y7,_D),e(_D,o8o),e(y7,r8o),e(q,t8o),e(q,L7),e(L7,Mce),e(Mce,a8o),e(L7,n8o),e(L7,bD),e(bD,s8o),e(L7,l8o),e(q,i8o),e(q,x7),e(x7,Ece),e(Ece,d8o),e(x7,c8o),e(x7,vD),e(vD,f8o),e(x7,m8o),e(q,g8o),e(q,$7),e($7,Cce),e(Cce,h8o),e($7,p8o),e($7,FD),e(FD,u8o),e($7,_8o),e(q,b8o),e(q,k7),e(k7,wce),e(wce,v8o),e(k7,F8o),e(k7,TD),e(TD,T8o),e(k7,M8o),e(q,E8o),e(q,S7),e(S7,Ace),e(Ace,C8o),e(S7,w8o),e(S7,MD),e(MD,A8o),e(S7,y8o),e(q,L8o),e(q,R7),e(R7,yce),e(yce,x8o),e(R7,$8o),e(R7,ED),e(ED,k8o),e(R7,S8o),e(q,R8o),e(q,B7),e(B7,Lce),e(Lce,B8o),e(B7,P8o),e(B7,CD),e(CD,I8o),e(B7,q8o),e(q,N8o),e(q,P7),e(P7,xce),e(xce,j8o),e(P7,D8o),e(P7,wD),e(wD,G8o),e(P7,O8o),e(q,V8o),e(q,I7),e(I7,$ce),e($ce,X8o),e(I7,z8o),e(I7,AD),e(AD,Q8o),e(I7,W8o),e(q,H8o),e(q,q7),e(q7,kce),e(kce,U8o),e(q7,J8o),e(q7,yD),e(yD,Y8o),e(q7,K8o),e(q,Z8o),e(q,N7),e(N7,Sce),e(Sce,exo),e(N7,oxo),e(N7,LD),e(LD,rxo),e(N7,txo),e(q,axo),e(q,j7),e(j7,Rce),e(Rce,nxo),e(j7,sxo),e(j7,xD),e(xD,lxo),e(j7,ixo),e(q,dxo),e(q,D7),e(D7,Bce),e(Bce,cxo),e(D7,fxo),e(D7,$D),e($D,mxo),e(D7,gxo),e(q,hxo),e(q,G7),e(G7,Pce),e(Pce,pxo),e(G7,uxo),e(G7,kD),e(kD,_xo),e(G7,bxo),e(q,vxo),e(q,O7),e(O7,Ice),e(Ice,Fxo),e(O7,Txo),e(O7,SD),e(SD,Mxo),e(O7,Exo),e(q,Cxo),e(q,V7),e(V7,qce),e(qce,wxo),e(V7,Axo),e(V7,RD),e(RD,yxo),e(V7,Lxo),e(q,xxo),e(q,X7),e(X7,Nce),e(Nce,$xo),e(X7,kxo),e(X7,BD),e(BD,Sxo),e(X7,Rxo),e(q,Bxo),e(q,z7),e(z7,jce),e(jce,Pxo),e(z7,Ixo),e(z7,PD),e(PD,qxo),e(z7,Nxo),e(q,jxo),e(q,Q7),e(Q7,Dce),e(Dce,Dxo),e(Q7,Gxo),e(Q7,ID),e(ID,Oxo),e(Q7,Vxo),e(q,Xxo),e(q,W7),e(W7,Gce),e(Gce,zxo),e(W7,Qxo),e(W7,qD),e(qD,Wxo),e(W7,Hxo),e(q,Uxo),e(q,H7),e(H7,Oce),e(Oce,Jxo),e(H7,Yxo),e(H7,ND),e(ND,Kxo),e(H7,Zxo),e(q,e9o),e(q,U7),e(U7,Vce),e(Vce,o9o),e(U7,r9o),e(U7,jD),e(jD,t9o),e(U7,a9o),e(q,n9o),e(q,J7),e(J7,Xce),e(Xce,s9o),e(J7,l9o),e(J7,DD),e(DD,i9o),e(J7,d9o),e(q,c9o),e(q,Y7),e(Y7,zce),e(zce,f9o),e(Y7,m9o),e(Y7,GD),e(GD,g9o),e(Y7,h9o),e(q,p9o),e(q,K7),e(K7,Qce),e(Qce,u9o),e(K7,_9o),e(K7,OD),e(OD,b9o),e(K7,v9o),e(q,F9o),e(q,Z7),e(Z7,Wce),e(Wce,T9o),e(Z7,M9o),e(Z7,VD),e(VD,E9o),e(Z7,C9o),e(q,w9o),e(q,eb),e(eb,Hce),e(Hce,A9o),e(eb,y9o),e(eb,XD),e(XD,L9o),e(eb,x9o),e(q,$9o),e(q,ob),e(ob,Uce),e(Uce,k9o),e(ob,S9o),e(ob,zD),e(zD,R9o),e(ob,B9o),e(q,P9o),e(q,rb),e(rb,Jce),e(Jce,I9o),e(rb,q9o),e(rb,QD),e(QD,N9o),e(rb,j9o),e(q,D9o),e(q,tb),e(tb,Yce),e(Yce,G9o),e(tb,O9o),e(tb,WD),e(WD,V9o),e(tb,X9o),e(q,z9o),e(q,ab),e(ab,Kce),e(Kce,Q9o),e(ab,W9o),e(ab,HD),e(HD,H9o),e(ab,U9o),e(q,J9o),e(q,nb),e(nb,Zce),e(Zce,Y9o),e(nb,K9o),e(nb,UD),e(UD,Z9o),e(nb,e$o),e(q,o$o),e(q,sb),e(sb,efe),e(efe,r$o),e(sb,t$o),e(sb,JD),e(JD,a$o),e(sb,n$o),e(q,s$o),e(q,lb),e(lb,ofe),e(ofe,l$o),e(lb,i$o),e(lb,YD),e(YD,d$o),e(lb,c$o),e(q,f$o),e(q,ib),e(ib,rfe),e(rfe,m$o),e(ib,g$o),e(ib,KD),e(KD,h$o),e(ib,p$o),e(q,u$o),e(q,db),e(db,tfe),e(tfe,_$o),e(db,b$o),e(db,ZD),e(ZD,v$o),e(db,F$o),e(q,T$o),e(q,cb),e(cb,afe),e(afe,M$o),e(cb,E$o),e(cb,eG),e(eG,C$o),e(cb,w$o),e(q,A$o),e(q,fb),e(fb,nfe),e(nfe,y$o),e(fb,L$o),e(fb,oG),e(oG,x$o),e(fb,$$o),e(q,k$o),e(q,mb),e(mb,sfe),e(sfe,S$o),e(mb,R$o),e(mb,rG),e(rG,B$o),e(mb,P$o),e(q,I$o),e(q,gb),e(gb,lfe),e(lfe,q$o),e(gb,N$o),e(gb,tG),e(tG,j$o),e(gb,D$o),e(Ze,G$o),e(Ze,hb),e(hb,O$o),e(hb,ife),e(ife,V$o),e(hb,X$o),e(hb,dfe),e(dfe,z$o),e(Ze,Q$o),M(pb,Ze,null),b(f,hIe,_),b(f,ji,_),e(ji,ub),e(ub,cfe),M(Z6,cfe,null),e(ji,W$o),e(ji,ffe),e(ffe,H$o),b(f,pIe,_),b(f,Bo,_),M(ey,Bo,null),e(Bo,U$o),e(Bo,Di),e(Di,J$o),e(Di,aG),e(aG,Y$o),e(Di,K$o),e(Di,nG),e(nG,Z$o),e(Di,eko),e(Bo,oko),e(Bo,oy),e(oy,rko),e(oy,mfe),e(mfe,tko),e(oy,ako),e(Bo,nko),e(Bo,lt),M(ry,lt,null),e(lt,sko),e(lt,gfe),e(gfe,lko),e(lt,iko),e(lt,Gi),e(Gi,dko),e(Gi,hfe),e(hfe,cko),e(Gi,fko),e(Gi,sG),e(sG,mko),e(Gi,gko),e(lt,hko),M(_b,lt,null),e(Bo,pko),e(Bo,eo),M(ty,eo,null),e(eo,uko),e(eo,pfe),e(pfe,_ko),e(eo,bko),e(eo,Sa),e(Sa,vko),e(Sa,ufe),e(ufe,Fko),e(Sa,Tko),e(Sa,_fe),e(_fe,Mko),e(Sa,Eko),e(Sa,bfe),e(bfe,Cko),e(Sa,wko),e(eo,Ako),e(eo,Y),e(Y,bb),e(bb,vfe),e(vfe,yko),e(bb,Lko),e(bb,lG),e(lG,xko),e(bb,$ko),e(Y,kko),e(Y,vb),e(vb,Ffe),e(Ffe,Sko),e(vb,Rko),e(vb,iG),e(iG,Bko),e(vb,Pko),e(Y,Iko),e(Y,Fb),e(Fb,Tfe),e(Tfe,qko),e(Fb,Nko),e(Fb,dG),e(dG,jko),e(Fb,Dko),e(Y,Gko),e(Y,Tb),e(Tb,Mfe),e(Mfe,Oko),e(Tb,Vko),e(Tb,cG),e(cG,Xko),e(Tb,zko),e(Y,Qko),e(Y,Mb),e(Mb,Efe),e(Efe,Wko),e(Mb,Hko),e(Mb,fG),e(fG,Uko),e(Mb,Jko),e(Y,Yko),e(Y,Eb),e(Eb,Cfe),e(Cfe,Kko),e(Eb,Zko),e(Eb,mG),e(mG,eSo),e(Eb,oSo),e(Y,rSo),e(Y,Cb),e(Cb,wfe),e(wfe,tSo),e(Cb,aSo),e(Cb,gG),e(gG,nSo),e(Cb,sSo),e(Y,lSo),e(Y,wb),e(wb,Afe),e(Afe,iSo),e(wb,dSo),e(wb,hG),e(hG,cSo),e(wb,fSo),e(Y,mSo),e(Y,Ab),e(Ab,yfe),e(yfe,gSo),e(Ab,hSo),e(Ab,pG),e(pG,pSo),e(Ab,uSo),e(Y,_So),e(Y,yb),e(yb,Lfe),e(Lfe,bSo),e(yb,vSo),e(yb,uG),e(uG,FSo),e(yb,TSo),e(Y,MSo),e(Y,Lb),e(Lb,xfe),e(xfe,ESo),e(Lb,CSo),e(Lb,_G),e(_G,wSo),e(Lb,ASo),e(Y,ySo),e(Y,xb),e(xb,$fe),e($fe,LSo),e(xb,xSo),e(xb,bG),e(bG,$So),e(xb,kSo),e(Y,SSo),e(Y,$b),e($b,kfe),e(kfe,RSo),e($b,BSo),e($b,vG),e(vG,PSo),e($b,ISo),e(Y,qSo),e(Y,kb),e(kb,Sfe),e(Sfe,NSo),e(kb,jSo),e(kb,FG),e(FG,DSo),e(kb,GSo),e(Y,OSo),e(Y,Sb),e(Sb,Rfe),e(Rfe,VSo),e(Sb,XSo),e(Sb,TG),e(TG,zSo),e(Sb,QSo),e(Y,WSo),e(Y,Rb),e(Rb,Bfe),e(Bfe,HSo),e(Rb,USo),e(Rb,MG),e(MG,JSo),e(Rb,YSo),e(Y,KSo),e(Y,Bb),e(Bb,Pfe),e(Pfe,ZSo),e(Bb,eRo),e(Bb,EG),e(EG,oRo),e(Bb,rRo),e(Y,tRo),e(Y,Pb),e(Pb,Ife),e(Ife,aRo),e(Pb,nRo),e(Pb,CG),e(CG,sRo),e(Pb,lRo),e(Y,iRo),e(Y,Ib),e(Ib,qfe),e(qfe,dRo),e(Ib,cRo),e(Ib,wG),e(wG,fRo),e(Ib,mRo),e(Y,gRo),e(Y,qb),e(qb,Nfe),e(Nfe,hRo),e(qb,pRo),e(qb,AG),e(AG,uRo),e(qb,_Ro),e(Y,bRo),e(Y,Nb),e(Nb,jfe),e(jfe,vRo),e(Nb,FRo),e(Nb,yG),e(yG,TRo),e(Nb,MRo),e(Y,ERo),e(Y,jb),e(jb,Dfe),e(Dfe,CRo),e(jb,wRo),e(jb,LG),e(LG,ARo),e(jb,yRo),e(Y,LRo),e(Y,Db),e(Db,Gfe),e(Gfe,xRo),e(Db,$Ro),e(Db,xG),e(xG,kRo),e(Db,SRo),e(Y,RRo),e(Y,Gb),e(Gb,Ofe),e(Ofe,BRo),e(Gb,PRo),e(Gb,$G),e($G,IRo),e(Gb,qRo),e(Y,NRo),e(Y,Ob),e(Ob,Vfe),e(Vfe,jRo),e(Ob,DRo),e(Ob,kG),e(kG,GRo),e(Ob,ORo),e(Y,VRo),e(Y,Vb),e(Vb,Xfe),e(Xfe,XRo),e(Vb,zRo),e(Vb,SG),e(SG,QRo),e(Vb,WRo),e(Y,HRo),e(Y,Xb),e(Xb,zfe),e(zfe,URo),e(Xb,JRo),e(Xb,RG),e(RG,YRo),e(Xb,KRo),e(Y,ZRo),e(Y,zb),e(zb,Qfe),e(Qfe,eBo),e(zb,oBo),e(zb,BG),e(BG,rBo),e(zb,tBo),e(Y,aBo),e(Y,Qb),e(Qb,Wfe),e(Wfe,nBo),e(Qb,sBo),e(Qb,PG),e(PG,lBo),e(Qb,iBo),e(eo,dBo),e(eo,Wb),e(Wb,cBo),e(Wb,Hfe),e(Hfe,fBo),e(Wb,mBo),e(Wb,Ufe),e(Ufe,gBo),e(eo,hBo),M(Hb,eo,null),b(f,uIe,_),b(f,Oi,_),e(Oi,Ub),e(Ub,Jfe),M(ay,Jfe,null),e(Oi,pBo),e(Oi,Yfe),e(Yfe,uBo),b(f,_Ie,_),b(f,Po,_),M(ny,Po,null),e(Po,_Bo),e(Po,Vi),e(Vi,bBo),e(Vi,IG),e(IG,vBo),e(Vi,FBo),e(Vi,qG),e(qG,TBo),e(Vi,MBo),e(Po,EBo),e(Po,sy),e(sy,CBo),e(sy,Kfe),e(Kfe,wBo),e(sy,ABo),e(Po,yBo),e(Po,it),M(ly,it,null),e(it,LBo),e(it,Zfe),e(Zfe,xBo),e(it,$Bo),e(it,Xi),e(Xi,kBo),e(Xi,eme),e(eme,SBo),e(Xi,RBo),e(Xi,NG),e(NG,BBo),e(Xi,PBo),e(it,IBo),M(Jb,it,null),e(Po,qBo),e(Po,oo),M(iy,oo,null),e(oo,NBo),e(oo,ome),e(ome,jBo),e(oo,DBo),e(oo,Ra),e(Ra,GBo),e(Ra,rme),e(rme,OBo),e(Ra,VBo),e(Ra,tme),e(tme,XBo),e(Ra,zBo),e(Ra,ame),e(ame,QBo),e(Ra,WBo),e(oo,HBo),e(oo,Yr),e(Yr,Yb),e(Yb,nme),e(nme,UBo),e(Yb,JBo),e(Yb,jG),e(jG,YBo),e(Yb,KBo),e(Yr,ZBo),e(Yr,Kb),e(Kb,sme),e(sme,ePo),e(Kb,oPo),e(Kb,DG),e(DG,rPo),e(Kb,tPo),e(Yr,aPo),e(Yr,Zb),e(Zb,lme),e(lme,nPo),e(Zb,sPo),e(Zb,GG),e(GG,lPo),e(Zb,iPo),e(Yr,dPo),e(Yr,e2),e(e2,ime),e(ime,cPo),e(e2,fPo),e(e2,OG),e(OG,mPo),e(e2,gPo),e(Yr,hPo),e(Yr,o2),e(o2,dme),e(dme,pPo),e(o2,uPo),e(o2,VG),e(VG,_Po),e(o2,bPo),e(oo,vPo),e(oo,r2),e(r2,FPo),e(r2,cme),e(cme,TPo),e(r2,MPo),e(r2,fme),e(fme,EPo),e(oo,CPo),M(t2,oo,null),b(f,bIe,_),b(f,zi,_),e(zi,a2),e(a2,mme),M(dy,mme,null),e(zi,wPo),e(zi,gme),e(gme,APo),b(f,vIe,_),b(f,Io,_),M(cy,Io,null),e(Io,yPo),e(Io,Qi),e(Qi,LPo),e(Qi,XG),e(XG,xPo),e(Qi,$Po),e(Qi,zG),e(zG,kPo),e(Qi,SPo),e(Io,RPo),e(Io,fy),e(fy,BPo),e(fy,hme),e(hme,PPo),e(fy,IPo),e(Io,qPo),e(Io,dt),M(my,dt,null),e(dt,NPo),e(dt,pme),e(pme,jPo),e(dt,DPo),e(dt,Wi),e(Wi,GPo),e(Wi,ume),e(ume,OPo),e(Wi,VPo),e(Wi,QG),e(QG,XPo),e(Wi,zPo),e(dt,QPo),M(n2,dt,null),e(Io,WPo),e(Io,ro),M(gy,ro,null),e(ro,HPo),e(ro,_me),e(_me,UPo),e(ro,JPo),e(ro,Ba),e(Ba,YPo),e(Ba,bme),e(bme,KPo),e(Ba,ZPo),e(Ba,vme),e(vme,eIo),e(Ba,oIo),e(Ba,Fme),e(Fme,rIo),e(Ba,tIo),e(ro,aIo),e(ro,U),e(U,s2),e(s2,Tme),e(Tme,nIo),e(s2,sIo),e(s2,WG),e(WG,lIo),e(s2,iIo),e(U,dIo),e(U,l2),e(l2,Mme),e(Mme,cIo),e(l2,fIo),e(l2,HG),e(HG,mIo),e(l2,gIo),e(U,hIo),e(U,i2),e(i2,Eme),e(Eme,pIo),e(i2,uIo),e(i2,UG),e(UG,_Io),e(i2,bIo),e(U,vIo),e(U,d2),e(d2,Cme),e(Cme,FIo),e(d2,TIo),e(d2,JG),e(JG,MIo),e(d2,EIo),e(U,CIo),e(U,c2),e(c2,wme),e(wme,wIo),e(c2,AIo),e(c2,YG),e(YG,yIo),e(c2,LIo),e(U,xIo),e(U,f2),e(f2,Ame),e(Ame,$Io),e(f2,kIo),e(f2,KG),e(KG,SIo),e(f2,RIo),e(U,BIo),e(U,m2),e(m2,yme),e(yme,PIo),e(m2,IIo),e(m2,ZG),e(ZG,qIo),e(m2,NIo),e(U,jIo),e(U,g2),e(g2,Lme),e(Lme,DIo),e(g2,GIo),e(g2,eO),e(eO,OIo),e(g2,VIo),e(U,XIo),e(U,h2),e(h2,xme),e(xme,zIo),e(h2,QIo),e(h2,oO),e(oO,WIo),e(h2,HIo),e(U,UIo),e(U,p2),e(p2,$me),e($me,JIo),e(p2,YIo),e(p2,rO),e(rO,KIo),e(p2,ZIo),e(U,eqo),e(U,u2),e(u2,kme),e(kme,oqo),e(u2,rqo),e(u2,tO),e(tO,tqo),e(u2,aqo),e(U,nqo),e(U,_2),e(_2,Sme),e(Sme,sqo),e(_2,lqo),e(_2,aO),e(aO,iqo),e(_2,dqo),e(U,cqo),e(U,b2),e(b2,Rme),e(Rme,fqo),e(b2,mqo),e(b2,nO),e(nO,gqo),e(b2,hqo),e(U,pqo),e(U,v2),e(v2,Bme),e(Bme,uqo),e(v2,_qo),e(v2,sO),e(sO,bqo),e(v2,vqo),e(U,Fqo),e(U,F2),e(F2,Pme),e(Pme,Tqo),e(F2,Mqo),e(F2,lO),e(lO,Eqo),e(F2,Cqo),e(U,wqo),e(U,T2),e(T2,Ime),e(Ime,Aqo),e(T2,yqo),e(T2,iO),e(iO,Lqo),e(T2,xqo),e(U,$qo),e(U,M2),e(M2,qme),e(qme,kqo),e(M2,Sqo),e(M2,dO),e(dO,Rqo),e(M2,Bqo),e(U,Pqo),e(U,E2),e(E2,Nme),e(Nme,Iqo),e(E2,qqo),e(E2,cO),e(cO,Nqo),e(E2,jqo),e(U,Dqo),e(U,C2),e(C2,jme),e(jme,Gqo),e(C2,Oqo),e(C2,fO),e(fO,Vqo),e(C2,Xqo),e(U,zqo),e(U,w2),e(w2,Dme),e(Dme,Qqo),e(w2,Wqo),e(w2,mO),e(mO,Hqo),e(w2,Uqo),e(U,Jqo),e(U,A2),e(A2,Gme),e(Gme,Yqo),e(A2,Kqo),e(A2,gO),e(gO,Zqo),e(A2,eNo),e(U,oNo),e(U,y2),e(y2,Ome),e(Ome,rNo),e(y2,tNo),e(y2,hO),e(hO,aNo),e(y2,nNo),e(U,sNo),e(U,L2),e(L2,Vme),e(Vme,lNo),e(L2,iNo),e(L2,pO),e(pO,dNo),e(L2,cNo),e(U,fNo),e(U,x2),e(x2,Xme),e(Xme,mNo),e(x2,gNo),e(x2,uO),e(uO,hNo),e(x2,pNo),e(U,uNo),e(U,$2),e($2,zme),e(zme,_No),e($2,bNo),e($2,_O),e(_O,vNo),e($2,FNo),e(U,TNo),e(U,k2),e(k2,Qme),e(Qme,MNo),e(k2,ENo),e(k2,bO),e(bO,CNo),e(k2,wNo),e(U,ANo),e(U,S2),e(S2,Wme),e(Wme,yNo),e(S2,LNo),e(S2,vO),e(vO,xNo),e(S2,$No),e(U,kNo),e(U,R2),e(R2,Hme),e(Hme,SNo),e(R2,RNo),e(R2,FO),e(FO,BNo),e(R2,PNo),e(U,INo),e(U,B2),e(B2,Ume),e(Ume,qNo),e(B2,NNo),e(B2,TO),e(TO,jNo),e(B2,DNo),e(U,GNo),e(U,P2),e(P2,Jme),e(Jme,ONo),e(P2,VNo),e(P2,MO),e(MO,XNo),e(P2,zNo),e(U,QNo),e(U,I2),e(I2,Yme),e(Yme,WNo),e(I2,HNo),e(I2,EO),e(EO,UNo),e(I2,JNo),e(U,YNo),e(U,q2),e(q2,Kme),e(Kme,KNo),e(q2,ZNo),e(q2,CO),e(CO,ejo),e(q2,ojo),e(U,rjo),e(U,N2),e(N2,Zme),e(Zme,tjo),e(N2,ajo),e(N2,wO),e(wO,njo),e(N2,sjo),e(ro,ljo),e(ro,j2),e(j2,ijo),e(j2,ege),e(ege,djo),e(j2,cjo),e(j2,oge),e(oge,fjo),e(ro,mjo),M(D2,ro,null),b(f,FIe,_),b(f,Hi,_),e(Hi,G2),e(G2,rge),M(hy,rge,null),e(Hi,gjo),e(Hi,tge),e(tge,hjo),b(f,TIe,_),b(f,qo,_),M(py,qo,null),e(qo,pjo),e(qo,Ui),e(Ui,ujo),e(Ui,AO),e(AO,_jo),e(Ui,bjo),e(Ui,yO),e(yO,vjo),e(Ui,Fjo),e(qo,Tjo),e(qo,uy),e(uy,Mjo),e(uy,age),e(age,Ejo),e(uy,Cjo),e(qo,wjo),e(qo,ct),M(_y,ct,null),e(ct,Ajo),e(ct,nge),e(nge,yjo),e(ct,Ljo),e(ct,Ji),e(Ji,xjo),e(Ji,sge),e(sge,$jo),e(Ji,kjo),e(Ji,LO),e(LO,Sjo),e(Ji,Rjo),e(ct,Bjo),M(O2,ct,null),e(qo,Pjo),e(qo,to),M(by,to,null),e(to,Ijo),e(to,lge),e(lge,qjo),e(to,Njo),e(to,Pa),e(Pa,jjo),e(Pa,ige),e(ige,Djo),e(Pa,Gjo),e(Pa,dge),e(dge,Ojo),e(Pa,Vjo),e(Pa,cge),e(cge,Xjo),e(Pa,zjo),e(to,Qjo),e(to,O),e(O,V2),e(V2,fge),e(fge,Wjo),e(V2,Hjo),e(V2,xO),e(xO,Ujo),e(V2,Jjo),e(O,Yjo),e(O,X2),e(X2,mge),e(mge,Kjo),e(X2,Zjo),e(X2,$O),e($O,eDo),e(X2,oDo),e(O,rDo),e(O,z2),e(z2,gge),e(gge,tDo),e(z2,aDo),e(z2,kO),e(kO,nDo),e(z2,sDo),e(O,lDo),e(O,Q2),e(Q2,hge),e(hge,iDo),e(Q2,dDo),e(Q2,SO),e(SO,cDo),e(Q2,fDo),e(O,mDo),e(O,W2),e(W2,pge),e(pge,gDo),e(W2,hDo),e(W2,RO),e(RO,pDo),e(W2,uDo),e(O,_Do),e(O,H2),e(H2,uge),e(uge,bDo),e(H2,vDo),e(H2,BO),e(BO,FDo),e(H2,TDo),e(O,MDo),e(O,U2),e(U2,_ge),e(_ge,EDo),e(U2,CDo),e(U2,PO),e(PO,wDo),e(U2,ADo),e(O,yDo),e(O,J2),e(J2,bge),e(bge,LDo),e(J2,xDo),e(J2,IO),e(IO,$Do),e(J2,kDo),e(O,SDo),e(O,Y2),e(Y2,vge),e(vge,RDo),e(Y2,BDo),e(Y2,qO),e(qO,PDo),e(Y2,IDo),e(O,qDo),e(O,K2),e(K2,Fge),e(Fge,NDo),e(K2,jDo),e(K2,NO),e(NO,DDo),e(K2,GDo),e(O,ODo),e(O,Z2),e(Z2,Tge),e(Tge,VDo),e(Z2,XDo),e(Z2,jO),e(jO,zDo),e(Z2,QDo),e(O,WDo),e(O,e5),e(e5,Mge),e(Mge,HDo),e(e5,UDo),e(e5,DO),e(DO,JDo),e(e5,YDo),e(O,KDo),e(O,o5),e(o5,Ege),e(Ege,ZDo),e(o5,eGo),e(o5,GO),e(GO,oGo),e(o5,rGo),e(O,tGo),e(O,r5),e(r5,Cge),e(Cge,aGo),e(r5,nGo),e(r5,OO),e(OO,sGo),e(r5,lGo),e(O,iGo),e(O,t5),e(t5,wge),e(wge,dGo),e(t5,cGo),e(t5,VO),e(VO,fGo),e(t5,mGo),e(O,gGo),e(O,a5),e(a5,Age),e(Age,hGo),e(a5,pGo),e(a5,XO),e(XO,uGo),e(a5,_Go),e(O,bGo),e(O,n5),e(n5,yge),e(yge,vGo),e(n5,FGo),e(n5,zO),e(zO,TGo),e(n5,MGo),e(O,EGo),e(O,s5),e(s5,Lge),e(Lge,CGo),e(s5,wGo),e(s5,QO),e(QO,AGo),e(s5,yGo),e(O,LGo),e(O,l5),e(l5,xge),e(xge,xGo),e(l5,$Go),e(l5,WO),e(WO,kGo),e(l5,SGo),e(O,RGo),e(O,i5),e(i5,$ge),e($ge,BGo),e(i5,PGo),e(i5,HO),e(HO,IGo),e(i5,qGo),e(O,NGo),e(O,d5),e(d5,kge),e(kge,jGo),e(d5,DGo),e(d5,UO),e(UO,GGo),e(d5,OGo),e(O,VGo),e(O,c5),e(c5,Sge),e(Sge,XGo),e(c5,zGo),e(c5,JO),e(JO,QGo),e(c5,WGo),e(O,HGo),e(O,f5),e(f5,Rge),e(Rge,UGo),e(f5,JGo),e(f5,YO),e(YO,YGo),e(f5,KGo),e(O,ZGo),e(O,m5),e(m5,Bge),e(Bge,eOo),e(m5,oOo),e(m5,KO),e(KO,rOo),e(m5,tOo),e(O,aOo),e(O,g5),e(g5,Pge),e(Pge,nOo),e(g5,sOo),e(g5,ZO),e(ZO,lOo),e(g5,iOo),e(O,dOo),e(O,h5),e(h5,Ige),e(Ige,cOo),e(h5,fOo),e(h5,eV),e(eV,mOo),e(h5,gOo),e(O,hOo),e(O,p5),e(p5,qge),e(qge,pOo),e(p5,uOo),e(p5,oV),e(oV,_Oo),e(p5,bOo),e(O,vOo),e(O,u5),e(u5,Nge),e(Nge,FOo),e(u5,TOo),e(u5,rV),e(rV,MOo),e(u5,EOo),e(O,COo),e(O,_5),e(_5,jge),e(jge,wOo),e(_5,AOo),e(_5,tV),e(tV,yOo),e(_5,LOo),e(O,xOo),e(O,b5),e(b5,Dge),e(Dge,$Oo),e(b5,kOo),e(b5,aV),e(aV,SOo),e(b5,ROo),e(O,BOo),e(O,v5),e(v5,Gge),e(Gge,POo),e(v5,IOo),e(v5,nV),e(nV,qOo),e(v5,NOo),e(O,jOo),e(O,F5),e(F5,Oge),e(Oge,DOo),e(F5,GOo),e(F5,sV),e(sV,OOo),e(F5,VOo),e(O,XOo),e(O,T5),e(T5,Vge),e(Vge,zOo),e(T5,QOo),e(T5,lV),e(lV,WOo),e(T5,HOo),e(O,UOo),e(O,M5),e(M5,Xge),e(Xge,JOo),e(M5,YOo),e(M5,iV),e(iV,KOo),e(M5,ZOo),e(O,eVo),e(O,E5),e(E5,zge),e(zge,oVo),e(E5,rVo),e(E5,dV),e(dV,tVo),e(E5,aVo),e(O,nVo),e(O,C5),e(C5,Qge),e(Qge,sVo),e(C5,lVo),e(C5,cV),e(cV,iVo),e(C5,dVo),e(O,cVo),e(O,w5),e(w5,Wge),e(Wge,fVo),e(w5,mVo),e(w5,fV),e(fV,gVo),e(w5,hVo),e(O,pVo),e(O,A5),e(A5,Hge),e(Hge,uVo),e(A5,_Vo),e(A5,mV),e(mV,bVo),e(A5,vVo),e(O,FVo),e(O,y5),e(y5,Uge),e(Uge,TVo),e(y5,MVo),e(y5,gV),e(gV,EVo),e(y5,CVo),e(to,wVo),e(to,L5),e(L5,AVo),e(L5,Jge),e(Jge,yVo),e(L5,LVo),e(L5,Yge),e(Yge,xVo),e(to,$Vo),M(x5,to,null),b(f,MIe,_),b(f,Yi,_),e(Yi,$5),e($5,Kge),M(vy,Kge,null),e(Yi,kVo),e(Yi,Zge),e(Zge,SVo),b(f,EIe,_),b(f,No,_),M(Fy,No,null),e(No,RVo),e(No,Ki),e(Ki,BVo),e(Ki,hV),e(hV,PVo),e(Ki,IVo),e(Ki,pV),e(pV,qVo),e(Ki,NVo),e(No,jVo),e(No,Ty),e(Ty,DVo),e(Ty,ehe),e(ehe,GVo),e(Ty,OVo),e(No,VVo),e(No,ft),M(My,ft,null),e(ft,XVo),e(ft,ohe),e(ohe,zVo),e(ft,QVo),e(ft,Zi),e(Zi,WVo),e(Zi,rhe),e(rhe,HVo),e(Zi,UVo),e(Zi,uV),e(uV,JVo),e(Zi,YVo),e(ft,KVo),M(k5,ft,null),e(No,ZVo),e(No,ao),M(Ey,ao,null),e(ao,eXo),e(ao,the),e(the,oXo),e(ao,rXo),e(ao,Ia),e(Ia,tXo),e(Ia,ahe),e(ahe,aXo),e(Ia,nXo),e(Ia,nhe),e(nhe,sXo),e(Ia,lXo),e(Ia,she),e(she,iXo),e(Ia,dXo),e(ao,cXo),e(ao,lhe),e(lhe,S5),e(S5,ihe),e(ihe,fXo),e(S5,mXo),e(S5,_V),e(_V,gXo),e(S5,hXo),e(ao,pXo),e(ao,R5),e(R5,uXo),e(R5,dhe),e(dhe,_Xo),e(R5,bXo),e(R5,che),e(che,vXo),e(ao,FXo),M(B5,ao,null),b(f,CIe,_),b(f,ed,_),e(ed,P5),e(P5,fhe),M(Cy,fhe,null),e(ed,TXo),e(ed,mhe),e(mhe,MXo),b(f,wIe,_),b(f,jo,_),M(wy,jo,null),e(jo,EXo),e(jo,od),e(od,CXo),e(od,bV),e(bV,wXo),e(od,AXo),e(od,vV),e(vV,yXo),e(od,LXo),e(jo,xXo),e(jo,Ay),e(Ay,$Xo),e(Ay,ghe),e(ghe,kXo),e(Ay,SXo),e(jo,RXo),e(jo,mt),M(yy,mt,null),e(mt,BXo),e(mt,hhe),e(hhe,PXo),e(mt,IXo),e(mt,rd),e(rd,qXo),e(rd,phe),e(phe,NXo),e(rd,jXo),e(rd,FV),e(FV,DXo),e(rd,GXo),e(mt,OXo),M(I5,mt,null),e(jo,VXo),e(jo,no),M(Ly,no,null),e(no,XXo),e(no,uhe),e(uhe,zXo),e(no,QXo),e(no,qa),e(qa,WXo),e(qa,_he),e(_he,HXo),e(qa,UXo),e(qa,bhe),e(bhe,JXo),e(qa,YXo),e(qa,vhe),e(vhe,KXo),e(qa,ZXo),e(no,ezo),e(no,Fe),e(Fe,q5),e(q5,Fhe),e(Fhe,ozo),e(q5,rzo),e(q5,TV),e(TV,tzo),e(q5,azo),e(Fe,nzo),e(Fe,N5),e(N5,The),e(The,szo),e(N5,lzo),e(N5,MV),e(MV,izo),e(N5,dzo),e(Fe,czo),e(Fe,j5),e(j5,Mhe),e(Mhe,fzo),e(j5,mzo),e(j5,EV),e(EV,gzo),e(j5,hzo),e(Fe,pzo),e(Fe,Rs),e(Rs,Ehe),e(Ehe,uzo),e(Rs,_zo),e(Rs,CV),e(CV,bzo),e(Rs,vzo),e(Rs,wV),e(wV,Fzo),e(Rs,Tzo),e(Fe,Mzo),e(Fe,D5),e(D5,Che),e(Che,Ezo),e(D5,Czo),e(D5,AV),e(AV,wzo),e(D5,Azo),e(Fe,yzo),e(Fe,gt),e(gt,whe),e(whe,Lzo),e(gt,xzo),e(gt,yV),e(yV,$zo),e(gt,kzo),e(gt,LV),e(LV,Szo),e(gt,Rzo),e(gt,xV),e(xV,Bzo),e(gt,Pzo),e(Fe,Izo),e(Fe,G5),e(G5,Ahe),e(Ahe,qzo),e(G5,Nzo),e(G5,$V),e($V,jzo),e(G5,Dzo),e(Fe,Gzo),e(Fe,O5),e(O5,yhe),e(yhe,Ozo),e(O5,Vzo),e(O5,kV),e(kV,Xzo),e(O5,zzo),e(Fe,Qzo),e(Fe,V5),e(V5,Lhe),e(Lhe,Wzo),e(V5,Hzo),e(V5,SV),e(SV,Uzo),e(V5,Jzo),e(Fe,Yzo),e(Fe,X5),e(X5,xhe),e(xhe,Kzo),e(X5,Zzo),e(X5,RV),e(RV,eQo),e(X5,oQo),e(Fe,rQo),e(Fe,z5),e(z5,$he),e($he,tQo),e(z5,aQo),e(z5,BV),e(BV,nQo),e(z5,sQo),e(Fe,lQo),e(Fe,Q5),e(Q5,khe),e(khe,iQo),e(Q5,dQo),e(Q5,PV),e(PV,cQo),e(Q5,fQo),e(Fe,mQo),e(Fe,W5),e(W5,She),e(She,gQo),e(W5,hQo),e(W5,IV),e(IV,pQo),e(W5,uQo),e(no,_Qo),e(no,H5),e(H5,bQo),e(H5,Rhe),e(Rhe,vQo),e(H5,FQo),e(H5,Bhe),e(Bhe,TQo),e(no,MQo),M(U5,no,null),b(f,AIe,_),b(f,td,_),e(td,J5),e(J5,Phe),M(xy,Phe,null),e(td,EQo),e(td,Ihe),e(Ihe,CQo),b(f,yIe,_),b(f,Do,_),M($y,Do,null),e(Do,wQo),e(Do,ad),e(ad,AQo),e(ad,qV),e(qV,yQo),e(ad,LQo),e(ad,NV),e(NV,xQo),e(ad,$Qo),e(Do,kQo),e(Do,ky),e(ky,SQo),e(ky,qhe),e(qhe,RQo),e(ky,BQo),e(Do,PQo),e(Do,ht),M(Sy,ht,null),e(ht,IQo),e(ht,Nhe),e(Nhe,qQo),e(ht,NQo),e(ht,nd),e(nd,jQo),e(nd,jhe),e(jhe,DQo),e(nd,GQo),e(nd,jV),e(jV,OQo),e(nd,VQo),e(ht,XQo),M(Y5,ht,null),e(Do,zQo),e(Do,so),M(Ry,so,null),e(so,QQo),e(so,Dhe),e(Dhe,WQo),e(so,HQo),e(so,Na),e(Na,UQo),e(Na,Ghe),e(Ghe,JQo),e(Na,YQo),e(Na,Ohe),e(Ohe,KQo),e(Na,ZQo),e(Na,Vhe),e(Vhe,eWo),e(Na,oWo),e(so,rWo),e(so,Xhe),e(Xhe,K5),e(K5,zhe),e(zhe,tWo),e(K5,aWo),e(K5,DV),e(DV,nWo),e(K5,sWo),e(so,lWo),e(so,Z5),e(Z5,iWo),e(Z5,Qhe),e(Qhe,dWo),e(Z5,cWo),e(Z5,Whe),e(Whe,fWo),e(so,mWo),M(ev,so,null),b(f,LIe,_),b(f,sd,_),e(sd,ov),e(ov,Hhe),M(By,Hhe,null),e(sd,gWo),e(sd,Uhe),e(Uhe,hWo),b(f,xIe,_),b(f,Go,_),M(Py,Go,null),e(Go,pWo),e(Go,ld),e(ld,uWo),e(ld,GV),e(GV,_Wo),e(ld,bWo),e(ld,OV),e(OV,vWo),e(ld,FWo),e(Go,TWo),e(Go,Iy),e(Iy,MWo),e(Iy,Jhe),e(Jhe,EWo),e(Iy,CWo),e(Go,wWo),e(Go,pt),M(qy,pt,null),e(pt,AWo),e(pt,Yhe),e(Yhe,yWo),e(pt,LWo),e(pt,id),e(id,xWo),e(id,Khe),e(Khe,$Wo),e(id,kWo),e(id,VV),e(VV,SWo),e(id,RWo),e(pt,BWo),M(rv,pt,null),e(Go,PWo),e(Go,lo),M(Ny,lo,null),e(lo,IWo),e(lo,Zhe),e(Zhe,qWo),e(lo,NWo),e(lo,ja),e(ja,jWo),e(ja,epe),e(epe,DWo),e(ja,GWo),e(ja,ope),e(ope,OWo),e(ja,VWo),e(ja,rpe),e(rpe,XWo),e(ja,zWo),e(lo,QWo),e(lo,Ne),e(Ne,tv),e(tv,tpe),e(tpe,WWo),e(tv,HWo),e(tv,XV),e(XV,UWo),e(tv,JWo),e(Ne,YWo),e(Ne,av),e(av,ape),e(ape,KWo),e(av,ZWo),e(av,zV),e(zV,eHo),e(av,oHo),e(Ne,rHo),e(Ne,nv),e(nv,npe),e(npe,tHo),e(nv,aHo),e(nv,QV),e(QV,nHo),e(nv,sHo),e(Ne,lHo),e(Ne,sv),e(sv,spe),e(spe,iHo),e(sv,dHo),e(sv,WV),e(WV,cHo),e(sv,fHo),e(Ne,mHo),e(Ne,lv),e(lv,lpe),e(lpe,gHo),e(lv,hHo),e(lv,HV),e(HV,pHo),e(lv,uHo),e(Ne,_Ho),e(Ne,iv),e(iv,ipe),e(ipe,bHo),e(iv,vHo),e(iv,UV),e(UV,FHo),e(iv,THo),e(Ne,MHo),e(Ne,dv),e(dv,dpe),e(dpe,EHo),e(dv,CHo),e(dv,JV),e(JV,wHo),e(dv,AHo),e(Ne,yHo),e(Ne,cv),e(cv,cpe),e(cpe,LHo),e(cv,xHo),e(cv,YV),e(YV,$Ho),e(cv,kHo),e(lo,SHo),e(lo,fv),e(fv,RHo),e(fv,fpe),e(fpe,BHo),e(fv,PHo),e(fv,mpe),e(mpe,IHo),e(lo,qHo),M(mv,lo,null),b(f,$Ie,_),b(f,dd,_),e(dd,gv),e(gv,gpe),M(jy,gpe,null),e(dd,NHo),e(dd,hpe),e(hpe,jHo),b(f,kIe,_),b(f,Oo,_),M(Dy,Oo,null),e(Oo,DHo),e(Oo,cd),e(cd,GHo),e(cd,KV),e(KV,OHo),e(cd,VHo),e(cd,ZV),e(ZV,XHo),e(cd,zHo),e(Oo,QHo),e(Oo,Gy),e(Gy,WHo),e(Gy,ppe),e(ppe,HHo),e(Gy,UHo),e(Oo,JHo),e(Oo,ut),M(Oy,ut,null),e(ut,YHo),e(ut,upe),e(upe,KHo),e(ut,ZHo),e(ut,fd),e(fd,eUo),e(fd,_pe),e(_pe,oUo),e(fd,rUo),e(fd,eX),e(eX,tUo),e(fd,aUo),e(ut,nUo),M(hv,ut,null),e(Oo,sUo),e(Oo,io),M(Vy,io,null),e(io,lUo),e(io,bpe),e(bpe,iUo),e(io,dUo),e(io,Da),e(Da,cUo),e(Da,vpe),e(vpe,fUo),e(Da,mUo),e(Da,Fpe),e(Fpe,gUo),e(Da,hUo),e(Da,Tpe),e(Tpe,pUo),e(Da,uUo),e(io,_Uo),e(io,Ga),e(Ga,pv),e(pv,Mpe),e(Mpe,bUo),e(pv,vUo),e(pv,oX),e(oX,FUo),e(pv,TUo),e(Ga,MUo),e(Ga,uv),e(uv,Epe),e(Epe,EUo),e(uv,CUo),e(uv,rX),e(rX,wUo),e(uv,AUo),e(Ga,yUo),e(Ga,_v),e(_v,Cpe),e(Cpe,LUo),e(_v,xUo),e(_v,tX),e(tX,$Uo),e(_v,kUo),e(Ga,SUo),e(Ga,bv),e(bv,wpe),e(wpe,RUo),e(bv,BUo),e(bv,aX),e(aX,PUo),e(bv,IUo),e(io,qUo),e(io,vv),e(vv,NUo),e(vv,Ape),e(Ape,jUo),e(vv,DUo),e(vv,ype),e(ype,GUo),e(io,OUo),M(Fv,io,null),b(f,SIe,_),b(f,md,_),e(md,Tv),e(Tv,Lpe),M(Xy,Lpe,null),e(md,VUo),e(md,xpe),e(xpe,XUo),b(f,RIe,_),b(f,Vo,_),M(zy,Vo,null),e(Vo,zUo),e(Vo,gd),e(gd,QUo),e(gd,nX),e(nX,WUo),e(gd,HUo),e(gd,sX),e(sX,UUo),e(gd,JUo),e(Vo,YUo),e(Vo,Qy),e(Qy,KUo),e(Qy,$pe),e($pe,ZUo),e(Qy,eJo),e(Vo,oJo),e(Vo,_t),M(Wy,_t,null),e(_t,rJo),e(_t,kpe),e(kpe,tJo),e(_t,aJo),e(_t,hd),e(hd,nJo),e(hd,Spe),e(Spe,sJo),e(hd,lJo),e(hd,lX),e(lX,iJo),e(hd,dJo),e(_t,cJo),M(Mv,_t,null),e(Vo,fJo),e(Vo,co),M(Hy,co,null),e(co,mJo),e(co,Rpe),e(Rpe,gJo),e(co,hJo),e(co,Oa),e(Oa,pJo),e(Oa,Bpe),e(Bpe,uJo),e(Oa,_Jo),e(Oa,Ppe),e(Ppe,bJo),e(Oa,vJo),e(Oa,Ipe),e(Ipe,FJo),e(Oa,TJo),e(co,MJo),e(co,je),e(je,Ev),e(Ev,qpe),e(qpe,EJo),e(Ev,CJo),e(Ev,iX),e(iX,wJo),e(Ev,AJo),e(je,yJo),e(je,Cv),e(Cv,Npe),e(Npe,LJo),e(Cv,xJo),e(Cv,dX),e(dX,$Jo),e(Cv,kJo),e(je,SJo),e(je,wv),e(wv,jpe),e(jpe,RJo),e(wv,BJo),e(wv,cX),e(cX,PJo),e(wv,IJo),e(je,qJo),e(je,Av),e(Av,Dpe),e(Dpe,NJo),e(Av,jJo),e(Av,fX),e(fX,DJo),e(Av,GJo),e(je,OJo),e(je,yv),e(yv,Gpe),e(Gpe,VJo),e(yv,XJo),e(yv,mX),e(mX,zJo),e(yv,QJo),e(je,WJo),e(je,Lv),e(Lv,Ope),e(Ope,HJo),e(Lv,UJo),e(Lv,gX),e(gX,JJo),e(Lv,YJo),e(je,KJo),e(je,xv),e(xv,Vpe),e(Vpe,ZJo),e(xv,eYo),e(xv,hX),e(hX,oYo),e(xv,rYo),e(je,tYo),e(je,$v),e($v,Xpe),e(Xpe,aYo),e($v,nYo),e($v,pX),e(pX,sYo),e($v,lYo),e(co,iYo),e(co,kv),e(kv,dYo),e(kv,zpe),e(zpe,cYo),e(kv,fYo),e(kv,Qpe),e(Qpe,mYo),e(co,gYo),M(Sv,co,null),b(f,BIe,_),b(f,pd,_),e(pd,Rv),e(Rv,Wpe),M(Uy,Wpe,null),e(pd,hYo),e(pd,Hpe),e(Hpe,pYo),b(f,PIe,_),b(f,Xo,_),M(Jy,Xo,null),e(Xo,uYo),e(Xo,ud),e(ud,_Yo),e(ud,uX),e(uX,bYo),e(ud,vYo),e(ud,_X),e(_X,FYo),e(ud,TYo),e(Xo,MYo),e(Xo,Yy),e(Yy,EYo),e(Yy,Upe),e(Upe,CYo),e(Yy,wYo),e(Xo,AYo),e(Xo,bt),M(Ky,bt,null),e(bt,yYo),e(bt,Jpe),e(Jpe,LYo),e(bt,xYo),e(bt,_d),e(_d,$Yo),e(_d,Ype),e(Ype,kYo),e(_d,SYo),e(_d,bX),e(bX,RYo),e(_d,BYo),e(bt,PYo),M(Bv,bt,null),e(Xo,IYo),e(Xo,fo),M(Zy,fo,null),e(fo,qYo),e(fo,Kpe),e(Kpe,NYo),e(fo,jYo),e(fo,Va),e(Va,DYo),e(Va,Zpe),e(Zpe,GYo),e(Va,OYo),e(Va,eue),e(eue,VYo),e(Va,XYo),e(Va,oue),e(oue,zYo),e(Va,QYo),e(fo,WYo),e(fo,eL),e(eL,Pv),e(Pv,rue),e(rue,HYo),e(Pv,UYo),e(Pv,vX),e(vX,JYo),e(Pv,YYo),e(eL,KYo),e(eL,Iv),e(Iv,tue),e(tue,ZYo),e(Iv,eKo),e(Iv,FX),e(FX,oKo),e(Iv,rKo),e(fo,tKo),e(fo,qv),e(qv,aKo),e(qv,aue),e(aue,nKo),e(qv,sKo),e(qv,nue),e(nue,lKo),e(fo,iKo),M(Nv,fo,null),b(f,IIe,_),b(f,bd,_),e(bd,jv),e(jv,sue),M(oL,sue,null),e(bd,dKo),e(bd,lue),e(lue,cKo),b(f,qIe,_),b(f,zo,_),M(rL,zo,null),e(zo,fKo),e(zo,vd),e(vd,mKo),e(vd,TX),e(TX,gKo),e(vd,hKo),e(vd,MX),e(MX,pKo),e(vd,uKo),e(zo,_Ko),e(zo,tL),e(tL,bKo),e(tL,iue),e(iue,vKo),e(tL,FKo),e(zo,TKo),e(zo,vt),M(aL,vt,null),e(vt,MKo),e(vt,due),e(due,EKo),e(vt,CKo),e(vt,Fd),e(Fd,wKo),e(Fd,cue),e(cue,AKo),e(Fd,yKo),e(Fd,EX),e(EX,LKo),e(Fd,xKo),e(vt,$Ko),M(Dv,vt,null),e(zo,kKo),e(zo,mo),M(nL,mo,null),e(mo,SKo),e(mo,fue),e(fue,RKo),e(mo,BKo),e(mo,Xa),e(Xa,PKo),e(Xa,mue),e(mue,IKo),e(Xa,qKo),e(Xa,gue),e(gue,NKo),e(Xa,jKo),e(Xa,hue),e(hue,DKo),e(Xa,GKo),e(mo,OKo),e(mo,za),e(za,Gv),e(Gv,pue),e(pue,VKo),e(Gv,XKo),e(Gv,CX),e(CX,zKo),e(Gv,QKo),e(za,WKo),e(za,Ov),e(Ov,uue),e(uue,HKo),e(Ov,UKo),e(Ov,wX),e(wX,JKo),e(Ov,YKo),e(za,KKo),e(za,Vv),e(Vv,_ue),e(_ue,ZKo),e(Vv,eZo),e(Vv,AX),e(AX,oZo),e(Vv,rZo),e(za,tZo),e(za,Xv),e(Xv,bue),e(bue,aZo),e(Xv,nZo),e(Xv,yX),e(yX,sZo),e(Xv,lZo),e(mo,iZo),e(mo,zv),e(zv,dZo),e(zv,vue),e(vue,cZo),e(zv,fZo),e(zv,Fue),e(Fue,mZo),e(mo,gZo),M(Qv,mo,null),b(f,NIe,_),b(f,Td,_),e(Td,Wv),e(Wv,Tue),M(sL,Tue,null),e(Td,hZo),e(Td,Mue),e(Mue,pZo),b(f,jIe,_),b(f,Qo,_),M(lL,Qo,null),e(Qo,uZo),e(Qo,Md),e(Md,_Zo),e(Md,LX),e(LX,bZo),e(Md,vZo),e(Md,xX),e(xX,FZo),e(Md,TZo),e(Qo,MZo),e(Qo,iL),e(iL,EZo),e(iL,Eue),e(Eue,CZo),e(iL,wZo),e(Qo,AZo),e(Qo,Ft),M(dL,Ft,null),e(Ft,yZo),e(Ft,Cue),e(Cue,LZo),e(Ft,xZo),e(Ft,Ed),e(Ed,$Zo),e(Ed,wue),e(wue,kZo),e(Ed,SZo),e(Ed,$X),e($X,RZo),e(Ed,BZo),e(Ft,PZo),M(Hv,Ft,null),e(Qo,IZo),e(Qo,go),M(cL,go,null),e(go,qZo),e(go,Aue),e(Aue,NZo),e(go,jZo),e(go,Qa),e(Qa,DZo),e(Qa,yue),e(yue,GZo),e(Qa,OZo),e(Qa,Lue),e(Lue,VZo),e(Qa,XZo),e(Qa,xue),e(xue,zZo),e(Qa,QZo),e(go,WZo),e(go,Cd),e(Cd,Uv),e(Uv,$ue),e($ue,HZo),e(Uv,UZo),e(Uv,kX),e(kX,JZo),e(Uv,YZo),e(Cd,KZo),e(Cd,Jv),e(Jv,kue),e(kue,ZZo),e(Jv,eer),e(Jv,SX),e(SX,oer),e(Jv,rer),e(Cd,ter),e(Cd,Yv),e(Yv,Sue),e(Sue,aer),e(Yv,ner),e(Yv,RX),e(RX,ser),e(Yv,ler),e(go,ier),e(go,Kv),e(Kv,der),e(Kv,Rue),e(Rue,cer),e(Kv,fer),e(Kv,Bue),e(Bue,mer),e(go,ger),M(Zv,go,null),b(f,DIe,_),b(f,wd,_),e(wd,eF),e(eF,Pue),M(fL,Pue,null),e(wd,her),e(wd,Iue),e(Iue,per),b(f,GIe,_),b(f,Wo,_),M(mL,Wo,null),e(Wo,uer),e(Wo,Ad),e(Ad,_er),e(Ad,BX),e(BX,ber),e(Ad,ver),e(Ad,PX),e(PX,Fer),e(Ad,Ter),e(Wo,Mer),e(Wo,gL),e(gL,Eer),e(gL,que),e(que,Cer),e(gL,wer),e(Wo,Aer),e(Wo,Tt),M(hL,Tt,null),e(Tt,yer),e(Tt,Nue),e(Nue,Ler),e(Tt,xer),e(Tt,yd),e(yd,$er),e(yd,jue),e(jue,ker),e(yd,Ser),e(yd,IX),e(IX,Rer),e(yd,Ber),e(Tt,Per),M(oF,Tt,null),e(Wo,Ier),e(Wo,ho),M(pL,ho,null),e(ho,qer),e(ho,Due),e(Due,Ner),e(ho,jer),e(ho,Wa),e(Wa,Der),e(Wa,Gue),e(Gue,Ger),e(Wa,Oer),e(Wa,Oue),e(Oue,Ver),e(Wa,Xer),e(Wa,Vue),e(Vue,zer),e(Wa,Qer),e(ho,Wer),e(ho,uL),e(uL,rF),e(rF,Xue),e(Xue,Her),e(rF,Uer),e(rF,qX),e(qX,Jer),e(rF,Yer),e(uL,Ker),e(uL,tF),e(tF,zue),e(zue,Zer),e(tF,eor),e(tF,NX),e(NX,oor),e(tF,ror),e(ho,tor),e(ho,aF),e(aF,aor),e(aF,Que),e(Que,nor),e(aF,sor),e(aF,Wue),e(Wue,lor),e(ho,ior),M(nF,ho,null),b(f,OIe,_),b(f,Ld,_),e(Ld,sF),e(sF,Hue),M(_L,Hue,null),e(Ld,dor),e(Ld,Uue),e(Uue,cor),b(f,VIe,_),b(f,Ho,_),M(bL,Ho,null),e(Ho,mor),e(Ho,xd),e(xd,gor),e(xd,jX),e(jX,hor),e(xd,por),e(xd,DX),e(DX,uor),e(xd,_or),e(Ho,bor),e(Ho,vL),e(vL,vor),e(vL,Jue),e(Jue,For),e(vL,Tor),e(Ho,Mor),e(Ho,Mt),M(FL,Mt,null),e(Mt,Eor),e(Mt,Yue),e(Yue,Cor),e(Mt,wor),e(Mt,$d),e($d,Aor),e($d,Kue),e(Kue,yor),e($d,Lor),e($d,GX),e(GX,xor),e($d,$or),e(Mt,kor),M(lF,Mt,null),e(Ho,Sor),e(Ho,po),M(TL,po,null),e(po,Ror),e(po,Zue),e(Zue,Bor),e(po,Por),e(po,Ha),e(Ha,Ior),e(Ha,e_e),e(e_e,qor),e(Ha,Nor),e(Ha,o_e),e(o_e,jor),e(Ha,Dor),e(Ha,r_e),e(r_e,Gor),e(Ha,Oor),e(po,Vor),e(po,t_e),e(t_e,iF),e(iF,a_e),e(a_e,Xor),e(iF,zor),e(iF,OX),e(OX,Qor),e(iF,Wor),e(po,Hor),e(po,dF),e(dF,Uor),e(dF,n_e),e(n_e,Jor),e(dF,Yor),e(dF,s_e),e(s_e,Kor),e(po,Zor),M(cF,po,null),b(f,XIe,_),b(f,kd,_),e(kd,fF),e(fF,l_e),M(ML,l_e,null),e(kd,err),e(kd,i_e),e(i_e,orr),b(f,zIe,_),b(f,Uo,_),M(EL,Uo,null),e(Uo,rrr),e(Uo,Sd),e(Sd,trr),e(Sd,VX),e(VX,arr),e(Sd,nrr),e(Sd,XX),e(XX,srr),e(Sd,lrr),e(Uo,irr),e(Uo,CL),e(CL,drr),e(CL,d_e),e(d_e,crr),e(CL,frr),e(Uo,mrr),e(Uo,Et),M(wL,Et,null),e(Et,grr),e(Et,c_e),e(c_e,hrr),e(Et,prr),e(Et,Rd),e(Rd,urr),e(Rd,f_e),e(f_e,_rr),e(Rd,brr),e(Rd,zX),e(zX,vrr),e(Rd,Frr),e(Et,Trr),M(mF,Et,null),e(Uo,Mrr),e(Uo,uo),M(AL,uo,null),e(uo,Err),e(uo,m_e),e(m_e,Crr),e(uo,wrr),e(uo,Ua),e(Ua,Arr),e(Ua,g_e),e(g_e,yrr),e(Ua,Lrr),e(Ua,h_e),e(h_e,xrr),e(Ua,$rr),e(Ua,p_e),e(p_e,krr),e(Ua,Srr),e(uo,Rrr),e(uo,Ja),e(Ja,gF),e(gF,u_e),e(u_e,Brr),e(gF,Prr),e(gF,QX),e(QX,Irr),e(gF,qrr),e(Ja,Nrr),e(Ja,hF),e(hF,__e),e(__e,jrr),e(hF,Drr),e(hF,WX),e(WX,Grr),e(hF,Orr),e(Ja,Vrr),e(Ja,pF),e(pF,b_e),e(b_e,Xrr),e(pF,zrr),e(pF,HX),e(HX,Qrr),e(pF,Wrr),e(Ja,Hrr),e(Ja,uF),e(uF,v_e),e(v_e,Urr),e(uF,Jrr),e(uF,UX),e(UX,Yrr),e(uF,Krr),e(uo,Zrr),e(uo,_F),e(_F,etr),e(_F,F_e),e(F_e,otr),e(_F,rtr),e(_F,T_e),e(T_e,ttr),e(uo,atr),M(bF,uo,null),b(f,QIe,_),b(f,Bd,_),e(Bd,vF),e(vF,M_e),M(yL,M_e,null),e(Bd,ntr),e(Bd,E_e),e(E_e,str),b(f,WIe,_),b(f,Jo,_),M(LL,Jo,null),e(Jo,ltr),e(Jo,Pd),e(Pd,itr),e(Pd,JX),e(JX,dtr),e(Pd,ctr),e(Pd,YX),e(YX,ftr),e(Pd,mtr),e(Jo,gtr),e(Jo,xL),e(xL,htr),e(xL,C_e),e(C_e,ptr),e(xL,utr),e(Jo,_tr),e(Jo,Ct),M($L,Ct,null),e(Ct,btr),e(Ct,w_e),e(w_e,vtr),e(Ct,Ftr),e(Ct,Id),e(Id,Ttr),e(Id,A_e),e(A_e,Mtr),e(Id,Etr),e(Id,KX),e(KX,Ctr),e(Id,wtr),e(Ct,Atr),M(FF,Ct,null),e(Jo,ytr),e(Jo,_o),M(kL,_o,null),e(_o,Ltr),e(_o,y_e),e(y_e,xtr),e(_o,$tr),e(_o,Ya),e(Ya,ktr),e(Ya,L_e),e(L_e,Str),e(Ya,Rtr),e(Ya,x_e),e(x_e,Btr),e(Ya,Ptr),e(Ya,$_e),e($_e,Itr),e(Ya,qtr),e(_o,Ntr),e(_o,k_e),e(k_e,TF),e(TF,S_e),e(S_e,jtr),e(TF,Dtr),e(TF,ZX),e(ZX,Gtr),e(TF,Otr),e(_o,Vtr),e(_o,MF),e(MF,Xtr),e(MF,R_e),e(R_e,ztr),e(MF,Qtr),e(MF,B_e),e(B_e,Wtr),e(_o,Htr),M(EF,_o,null),b(f,HIe,_),b(f,qd,_),e(qd,CF),e(CF,P_e),M(SL,P_e,null),e(qd,Utr),e(qd,I_e),e(I_e,Jtr),b(f,UIe,_),b(f,Yo,_),M(RL,Yo,null),e(Yo,Ytr),e(Yo,Nd),e(Nd,Ktr),e(Nd,ez),e(ez,Ztr),e(Nd,ear),e(Nd,oz),e(oz,oar),e(Nd,rar),e(Yo,tar),e(Yo,BL),e(BL,aar),e(BL,q_e),e(q_e,nar),e(BL,sar),e(Yo,lar),e(Yo,wt),M(PL,wt,null),e(wt,iar),e(wt,N_e),e(N_e,dar),e(wt,car),e(wt,jd),e(jd,far),e(jd,j_e),e(j_e,mar),e(jd,gar),e(jd,rz),e(rz,har),e(jd,par),e(wt,uar),M(wF,wt,null),e(Yo,_ar),e(Yo,wr),M(IL,wr,null),e(wr,bar),e(wr,D_e),e(D_e,Far),e(wr,Tar),e(wr,Ka),e(Ka,Mar),e(Ka,G_e),e(G_e,Ear),e(Ka,Car),e(Ka,O_e),e(O_e,war),e(Ka,Aar),e(Ka,V_e),e(V_e,yar),e(Ka,Lar),e(wr,xar),e(wr,j),e(j,AF),e(AF,X_e),e(X_e,$ar),e(AF,kar),e(AF,tz),e(tz,Sar),e(AF,Rar),e(j,Bar),e(j,yF),e(yF,z_e),e(z_e,Par),e(yF,Iar),e(yF,az),e(az,qar),e(yF,Nar),e(j,jar),e(j,LF),e(LF,Q_e),e(Q_e,Dar),e(LF,Gar),e(LF,nz),e(nz,Oar),e(LF,Var),e(j,Xar),e(j,xF),e(xF,W_e),e(W_e,zar),e(xF,Qar),e(xF,sz),e(sz,War),e(xF,Har),e(j,Uar),e(j,$F),e($F,H_e),e(H_e,Jar),e($F,Yar),e($F,lz),e(lz,Kar),e($F,Zar),e(j,enr),e(j,kF),e(kF,U_e),e(U_e,onr),e(kF,rnr),e(kF,iz),e(iz,tnr),e(kF,anr),e(j,nnr),e(j,SF),e(SF,J_e),e(J_e,snr),e(SF,lnr),e(SF,dz),e(dz,inr),e(SF,dnr),e(j,cnr),e(j,RF),e(RF,Y_e),e(Y_e,fnr),e(RF,mnr),e(RF,cz),e(cz,gnr),e(RF,hnr),e(j,pnr),e(j,BF),e(BF,K_e),e(K_e,unr),e(BF,_nr),e(BF,fz),e(fz,bnr),e(BF,vnr),e(j,Fnr),e(j,PF),e(PF,Z_e),e(Z_e,Tnr),e(PF,Mnr),e(PF,mz),e(mz,Enr),e(PF,Cnr),e(j,wnr),e(j,IF),e(IF,e1e),e(e1e,Anr),e(IF,ynr),e(IF,gz),e(gz,Lnr),e(IF,xnr),e(j,$nr),e(j,qF),e(qF,o1e),e(o1e,knr),e(qF,Snr),e(qF,hz),e(hz,Rnr),e(qF,Bnr),e(j,Pnr),e(j,NF),e(NF,r1e),e(r1e,Inr),e(NF,qnr),e(NF,pz),e(pz,Nnr),e(NF,jnr),e(j,Dnr),e(j,jF),e(jF,t1e),e(t1e,Gnr),e(jF,Onr),e(jF,uz),e(uz,Vnr),e(jF,Xnr),e(j,znr),e(j,DF),e(DF,a1e),e(a1e,Qnr),e(DF,Wnr),e(DF,_z),e(_z,Hnr),e(DF,Unr),e(j,Jnr),e(j,GF),e(GF,n1e),e(n1e,Ynr),e(GF,Knr),e(GF,bz),e(bz,Znr),e(GF,esr),e(j,osr),e(j,OF),e(OF,s1e),e(s1e,rsr),e(OF,tsr),e(OF,vz),e(vz,asr),e(OF,nsr),e(j,ssr),e(j,Bs),e(Bs,l1e),e(l1e,lsr),e(Bs,isr),e(Bs,Fz),e(Fz,dsr),e(Bs,csr),e(Bs,Tz),e(Tz,fsr),e(Bs,msr),e(j,gsr),e(j,VF),e(VF,i1e),e(i1e,hsr),e(VF,psr),e(VF,Mz),e(Mz,usr),e(VF,_sr),e(j,bsr),e(j,XF),e(XF,d1e),e(d1e,vsr),e(XF,Fsr),e(XF,Ez),e(Ez,Tsr),e(XF,Msr),e(j,Esr),e(j,zF),e(zF,c1e),e(c1e,Csr),e(zF,wsr),e(zF,Cz),e(Cz,Asr),e(zF,ysr),e(j,Lsr),e(j,QF),e(QF,f1e),e(f1e,xsr),e(QF,$sr),e(QF,wz),e(wz,ksr),e(QF,Ssr),e(j,Rsr),e(j,WF),e(WF,m1e),e(m1e,Bsr),e(WF,Psr),e(WF,Az),e(Az,Isr),e(WF,qsr),e(j,Nsr),e(j,HF),e(HF,g1e),e(g1e,jsr),e(HF,Dsr),e(HF,yz),e(yz,Gsr),e(HF,Osr),e(j,Vsr),e(j,UF),e(UF,h1e),e(h1e,Xsr),e(UF,zsr),e(UF,Lz),e(Lz,Qsr),e(UF,Wsr),e(j,Hsr),e(j,JF),e(JF,p1e),e(p1e,Usr),e(JF,Jsr),e(JF,xz),e(xz,Ysr),e(JF,Ksr),e(j,Zsr),e(j,YF),e(YF,u1e),e(u1e,elr),e(YF,olr),e(YF,$z),e($z,rlr),e(YF,tlr),e(j,alr),e(j,KF),e(KF,_1e),e(_1e,nlr),e(KF,slr),e(KF,kz),e(kz,llr),e(KF,ilr),e(j,dlr),e(j,ZF),e(ZF,b1e),e(b1e,clr),e(ZF,flr),e(ZF,Sz),e(Sz,mlr),e(ZF,glr),e(j,hlr),e(j,e0),e(e0,v1e),e(v1e,plr),e(e0,ulr),e(e0,Rz),e(Rz,_lr),e(e0,blr),e(j,vlr),e(j,o0),e(o0,F1e),e(F1e,Flr),e(o0,Tlr),e(o0,Bz),e(Bz,Mlr),e(o0,Elr),e(j,Clr),e(j,r0),e(r0,T1e),e(T1e,wlr),e(r0,Alr),e(r0,Pz),e(Pz,ylr),e(r0,Llr),e(j,xlr),e(j,t0),e(t0,M1e),e(M1e,$lr),e(t0,klr),e(t0,Iz),e(Iz,Slr),e(t0,Rlr),e(j,Blr),e(j,a0),e(a0,E1e),e(E1e,Plr),e(a0,Ilr),e(a0,qz),e(qz,qlr),e(a0,Nlr),e(j,jlr),e(j,n0),e(n0,C1e),e(C1e,Dlr),e(n0,Glr),e(n0,Nz),e(Nz,Olr),e(n0,Vlr),e(j,Xlr),e(j,s0),e(s0,w1e),e(w1e,zlr),e(s0,Qlr),e(s0,jz),e(jz,Wlr),e(s0,Hlr),e(j,Ulr),e(j,l0),e(l0,A1e),e(A1e,Jlr),e(l0,Ylr),e(l0,Dz),e(Dz,Klr),e(l0,Zlr),e(j,eir),e(j,i0),e(i0,y1e),e(y1e,oir),e(i0,rir),e(i0,Gz),e(Gz,tir),e(i0,air),e(j,nir),e(j,d0),e(d0,L1e),e(L1e,sir),e(d0,lir),e(d0,Oz),e(Oz,iir),e(d0,dir),e(j,cir),e(j,c0),e(c0,x1e),e(x1e,fir),e(c0,mir),e(c0,Vz),e(Vz,gir),e(c0,hir),e(j,pir),e(j,f0),e(f0,$1e),e($1e,uir),e(f0,_ir),e(f0,Xz),e(Xz,bir),e(f0,vir),e(j,Fir),e(j,m0),e(m0,k1e),e(k1e,Tir),e(m0,Mir),e(m0,zz),e(zz,Eir),e(m0,Cir),e(j,wir),e(j,g0),e(g0,S1e),e(S1e,Air),e(g0,yir),e(g0,Qz),e(Qz,Lir),e(g0,xir),e(j,$ir),e(j,h0),e(h0,R1e),e(R1e,kir),e(h0,Sir),e(h0,Wz),e(Wz,Rir),e(h0,Bir),e(j,Pir),e(j,p0),e(p0,B1e),e(B1e,Iir),e(p0,qir),e(p0,Hz),e(Hz,Nir),e(p0,jir),e(wr,Dir),M(u0,wr,null),b(f,JIe,_),b(f,Dd,_),e(Dd,_0),e(_0,P1e),M(qL,P1e,null),e(Dd,Gir),e(Dd,I1e),e(I1e,Oir),b(f,YIe,_),b(f,Ko,_),M(NL,Ko,null),e(Ko,Vir),e(Ko,Gd),e(Gd,Xir),e(Gd,Uz),e(Uz,zir),e(Gd,Qir),e(Gd,Jz),e(Jz,Wir),e(Gd,Hir),e(Ko,Uir),e(Ko,jL),e(jL,Jir),e(jL,q1e),e(q1e,Yir),e(jL,Kir),e(Ko,Zir),e(Ko,At),M(DL,At,null),e(At,edr),e(At,N1e),e(N1e,odr),e(At,rdr),e(At,Od),e(Od,tdr),e(Od,j1e),e(j1e,adr),e(Od,ndr),e(Od,Yz),e(Yz,sdr),e(Od,ldr),e(At,idr),M(b0,At,null),e(Ko,ddr),e(Ko,Ar),M(GL,Ar,null),e(Ar,cdr),e(Ar,D1e),e(D1e,fdr),e(Ar,mdr),e(Ar,Za),e(Za,gdr),e(Za,G1e),e(G1e,hdr),e(Za,pdr),e(Za,O1e),e(O1e,udr),e(Za,_dr),e(Za,V1e),e(V1e,bdr),e(Za,vdr),e(Ar,Fdr),e(Ar,se),e(se,v0),e(v0,X1e),e(X1e,Tdr),e(v0,Mdr),e(v0,Kz),e(Kz,Edr),e(v0,Cdr),e(se,wdr),e(se,F0),e(F0,z1e),e(z1e,Adr),e(F0,ydr),e(F0,Zz),e(Zz,Ldr),e(F0,xdr),e(se,$dr),e(se,T0),e(T0,Q1e),e(Q1e,kdr),e(T0,Sdr),e(T0,eQ),e(eQ,Rdr),e(T0,Bdr),e(se,Pdr),e(se,M0),e(M0,W1e),e(W1e,Idr),e(M0,qdr),e(M0,oQ),e(oQ,Ndr),e(M0,jdr),e(se,Ddr),e(se,E0),e(E0,H1e),e(H1e,Gdr),e(E0,Odr),e(E0,rQ),e(rQ,Vdr),e(E0,Xdr),e(se,zdr),e(se,C0),e(C0,U1e),e(U1e,Qdr),e(C0,Wdr),e(C0,tQ),e(tQ,Hdr),e(C0,Udr),e(se,Jdr),e(se,w0),e(w0,J1e),e(J1e,Ydr),e(w0,Kdr),e(w0,aQ),e(aQ,Zdr),e(w0,ecr),e(se,ocr),e(se,A0),e(A0,Y1e),e(Y1e,rcr),e(A0,tcr),e(A0,nQ),e(nQ,acr),e(A0,ncr),e(se,scr),e(se,y0),e(y0,K1e),e(K1e,lcr),e(y0,icr),e(y0,sQ),e(sQ,dcr),e(y0,ccr),e(se,fcr),e(se,L0),e(L0,Z1e),e(Z1e,mcr),e(L0,gcr),e(L0,lQ),e(lQ,hcr),e(L0,pcr),e(se,ucr),e(se,x0),e(x0,e7e),e(e7e,_cr),e(x0,bcr),e(x0,iQ),e(iQ,vcr),e(x0,Fcr),e(se,Tcr),e(se,$0),e($0,o7e),e(o7e,Mcr),e($0,Ecr),e($0,dQ),e(dQ,Ccr),e($0,wcr),e(se,Acr),e(se,k0),e(k0,r7e),e(r7e,ycr),e(k0,Lcr),e(k0,cQ),e(cQ,xcr),e(k0,$cr),e(se,kcr),e(se,S0),e(S0,t7e),e(t7e,Scr),e(S0,Rcr),e(S0,fQ),e(fQ,Bcr),e(S0,Pcr),e(se,Icr),e(se,R0),e(R0,a7e),e(a7e,qcr),e(R0,Ncr),e(R0,mQ),e(mQ,jcr),e(R0,Dcr),e(se,Gcr),e(se,B0),e(B0,n7e),e(n7e,Ocr),e(B0,Vcr),e(B0,gQ),e(gQ,Xcr),e(B0,zcr),e(se,Qcr),e(se,P0),e(P0,s7e),e(s7e,Wcr),e(P0,Hcr),e(P0,hQ),e(hQ,Ucr),e(P0,Jcr),e(se,Ycr),e(se,I0),e(I0,l7e),e(l7e,Kcr),e(I0,Zcr),e(I0,pQ),e(pQ,efr),e(I0,ofr),e(se,rfr),e(se,q0),e(q0,i7e),e(i7e,tfr),e(q0,afr),e(q0,uQ),e(uQ,nfr),e(q0,sfr),e(se,lfr),e(se,N0),e(N0,d7e),e(d7e,ifr),e(N0,dfr),e(N0,_Q),e(_Q,cfr),e(N0,ffr),e(se,mfr),e(se,j0),e(j0,c7e),e(c7e,gfr),e(j0,hfr),e(j0,bQ),e(bQ,pfr),e(j0,ufr),e(se,_fr),e(se,D0),e(D0,f7e),e(f7e,bfr),e(D0,vfr),e(D0,vQ),e(vQ,Ffr),e(D0,Tfr),e(se,Mfr),e(se,G0),e(G0,m7e),e(m7e,Efr),e(G0,Cfr),e(G0,FQ),e(FQ,wfr),e(G0,Afr),e(Ar,yfr),M(O0,Ar,null),b(f,KIe,_),b(f,Vd,_),e(Vd,V0),e(V0,g7e),M(OL,g7e,null),e(Vd,Lfr),e(Vd,h7e),e(h7e,xfr),b(f,ZIe,_),b(f,Zo,_),M(VL,Zo,null),e(Zo,$fr),e(Zo,Xd),e(Xd,kfr),e(Xd,TQ),e(TQ,Sfr),e(Xd,Rfr),e(Xd,MQ),e(MQ,Bfr),e(Xd,Pfr),e(Zo,Ifr),e(Zo,XL),e(XL,qfr),e(XL,p7e),e(p7e,Nfr),e(XL,jfr),e(Zo,Dfr),e(Zo,yt),M(zL,yt,null),e(yt,Gfr),e(yt,u7e),e(u7e,Ofr),e(yt,Vfr),e(yt,zd),e(zd,Xfr),e(zd,_7e),e(_7e,zfr),e(zd,Qfr),e(zd,EQ),e(EQ,Wfr),e(zd,Hfr),e(yt,Ufr),M(X0,yt,null),e(Zo,Jfr),e(Zo,yr),M(QL,yr,null),e(yr,Yfr),e(yr,b7e),e(b7e,Kfr),e(yr,Zfr),e(yr,en),e(en,emr),e(en,v7e),e(v7e,omr),e(en,rmr),e(en,F7e),e(F7e,tmr),e(en,amr),e(en,T7e),e(T7e,nmr),e(en,smr),e(yr,lmr),e(yr,Te),e(Te,z0),e(z0,M7e),e(M7e,imr),e(z0,dmr),e(z0,CQ),e(CQ,cmr),e(z0,fmr),e(Te,mmr),e(Te,Q0),e(Q0,E7e),e(E7e,gmr),e(Q0,hmr),e(Q0,wQ),e(wQ,pmr),e(Q0,umr),e(Te,_mr),e(Te,W0),e(W0,C7e),e(C7e,bmr),e(W0,vmr),e(W0,AQ),e(AQ,Fmr),e(W0,Tmr),e(Te,Mmr),e(Te,H0),e(H0,w7e),e(w7e,Emr),e(H0,Cmr),e(H0,yQ),e(yQ,wmr),e(H0,Amr),e(Te,ymr),e(Te,U0),e(U0,A7e),e(A7e,Lmr),e(U0,xmr),e(U0,LQ),e(LQ,$mr),e(U0,kmr),e(Te,Smr),e(Te,J0),e(J0,y7e),e(y7e,Rmr),e(J0,Bmr),e(J0,xQ),e(xQ,Pmr),e(J0,Imr),e(Te,qmr),e(Te,Y0),e(Y0,L7e),e(L7e,Nmr),e(Y0,jmr),e(Y0,$Q),e($Q,Dmr),e(Y0,Gmr),e(Te,Omr),e(Te,K0),e(K0,x7e),e(x7e,Vmr),e(K0,Xmr),e(K0,kQ),e(kQ,zmr),e(K0,Qmr),e(Te,Wmr),e(Te,Z0),e(Z0,$7e),e($7e,Hmr),e(Z0,Umr),e(Z0,SQ),e(SQ,Jmr),e(Z0,Ymr),e(Te,Kmr),e(Te,eT),e(eT,k7e),e(k7e,Zmr),e(eT,egr),e(eT,RQ),e(RQ,ogr),e(eT,rgr),e(Te,tgr),e(Te,oT),e(oT,S7e),e(S7e,agr),e(oT,ngr),e(oT,BQ),e(BQ,sgr),e(oT,lgr),e(Te,igr),e(Te,rT),e(rT,R7e),e(R7e,dgr),e(rT,cgr),e(rT,PQ),e(PQ,fgr),e(rT,mgr),e(yr,ggr),M(tT,yr,null),b(f,eqe,_),b(f,Qd,_),e(Qd,aT),e(aT,B7e),M(WL,B7e,null),e(Qd,hgr),e(Qd,P7e),e(P7e,pgr),b(f,oqe,_),b(f,er,_),M(HL,er,null),e(er,ugr),e(er,Wd),e(Wd,_gr),e(Wd,IQ),e(IQ,bgr),e(Wd,vgr),e(Wd,qQ),e(qQ,Fgr),e(Wd,Tgr),e(er,Mgr),e(er,UL),e(UL,Egr),e(UL,I7e),e(I7e,Cgr),e(UL,wgr),e(er,Agr),e(er,Lt),M(JL,Lt,null),e(Lt,ygr),e(Lt,q7e),e(q7e,Lgr),e(Lt,xgr),e(Lt,Hd),e(Hd,$gr),e(Hd,N7e),e(N7e,kgr),e(Hd,Sgr),e(Hd,NQ),e(NQ,Rgr),e(Hd,Bgr),e(Lt,Pgr),M(nT,Lt,null),e(er,Igr),e(er,Lr),M(YL,Lr,null),e(Lr,qgr),e(Lr,j7e),e(j7e,Ngr),e(Lr,jgr),e(Lr,on),e(on,Dgr),e(on,D7e),e(D7e,Ggr),e(on,Ogr),e(on,G7e),e(G7e,Vgr),e(on,Xgr),e(on,O7e),e(O7e,zgr),e(on,Qgr),e(Lr,Wgr),e(Lr,Ud),e(Ud,sT),e(sT,V7e),e(V7e,Hgr),e(sT,Ugr),e(sT,jQ),e(jQ,Jgr),e(sT,Ygr),e(Ud,Kgr),e(Ud,lT),e(lT,X7e),e(X7e,Zgr),e(lT,ehr),e(lT,DQ),e(DQ,ohr),e(lT,rhr),e(Ud,thr),e(Ud,iT),e(iT,z7e),e(z7e,ahr),e(iT,nhr),e(iT,GQ),e(GQ,shr),e(iT,lhr),e(Lr,ihr),M(dT,Lr,null),b(f,rqe,_),b(f,Jd,_),e(Jd,cT),e(cT,Q7e),M(KL,Q7e,null),e(Jd,dhr),e(Jd,W7e),e(W7e,chr),b(f,tqe,_),b(f,or,_),M(ZL,or,null),e(or,fhr),e(or,Yd),e(Yd,mhr),e(Yd,OQ),e(OQ,ghr),e(Yd,hhr),e(Yd,VQ),e(VQ,phr),e(Yd,uhr),e(or,_hr),e(or,e8),e(e8,bhr),e(e8,H7e),e(H7e,vhr),e(e8,Fhr),e(or,Thr),e(or,xt),M(o8,xt,null),e(xt,Mhr),e(xt,U7e),e(U7e,Ehr),e(xt,Chr),e(xt,Kd),e(Kd,whr),e(Kd,J7e),e(J7e,Ahr),e(Kd,yhr),e(Kd,XQ),e(XQ,Lhr),e(Kd,xhr),e(xt,$hr),M(fT,xt,null),e(or,khr),e(or,xr),M(r8,xr,null),e(xr,Shr),e(xr,Y7e),e(Y7e,Rhr),e(xr,Bhr),e(xr,rn),e(rn,Phr),e(rn,K7e),e(K7e,Ihr),e(rn,qhr),e(rn,Z7e),e(Z7e,Nhr),e(rn,jhr),e(rn,ebe),e(ebe,Dhr),e(rn,Ghr),e(xr,Ohr),e(xr,ie),e(ie,mT),e(mT,obe),e(obe,Vhr),e(mT,Xhr),e(mT,zQ),e(zQ,zhr),e(mT,Qhr),e(ie,Whr),e(ie,gT),e(gT,rbe),e(rbe,Hhr),e(gT,Uhr),e(gT,QQ),e(QQ,Jhr),e(gT,Yhr),e(ie,Khr),e(ie,hT),e(hT,tbe),e(tbe,Zhr),e(hT,epr),e(hT,WQ),e(WQ,opr),e(hT,rpr),e(ie,tpr),e(ie,pT),e(pT,abe),e(abe,apr),e(pT,npr),e(pT,HQ),e(HQ,spr),e(pT,lpr),e(ie,ipr),e(ie,uT),e(uT,nbe),e(nbe,dpr),e(uT,cpr),e(uT,UQ),e(UQ,fpr),e(uT,mpr),e(ie,gpr),e(ie,_T),e(_T,sbe),e(sbe,hpr),e(_T,ppr),e(_T,JQ),e(JQ,upr),e(_T,_pr),e(ie,bpr),e(ie,bT),e(bT,lbe),e(lbe,vpr),e(bT,Fpr),e(bT,YQ),e(YQ,Tpr),e(bT,Mpr),e(ie,Epr),e(ie,vT),e(vT,ibe),e(ibe,Cpr),e(vT,wpr),e(vT,KQ),e(KQ,Apr),e(vT,ypr),e(ie,Lpr),e(ie,FT),e(FT,dbe),e(dbe,xpr),e(FT,$pr),e(FT,ZQ),e(ZQ,kpr),e(FT,Spr),e(ie,Rpr),e(ie,TT),e(TT,cbe),e(cbe,Bpr),e(TT,Ppr),e(TT,eW),e(eW,Ipr),e(TT,qpr),e(ie,Npr),e(ie,MT),e(MT,fbe),e(fbe,jpr),e(MT,Dpr),e(MT,oW),e(oW,Gpr),e(MT,Opr),e(ie,Vpr),e(ie,ET),e(ET,mbe),e(mbe,Xpr),e(ET,zpr),e(ET,rW),e(rW,Qpr),e(ET,Wpr),e(ie,Hpr),e(ie,CT),e(CT,gbe),e(gbe,Upr),e(CT,Jpr),e(CT,tW),e(tW,Ypr),e(CT,Kpr),e(ie,Zpr),e(ie,wT),e(wT,hbe),e(hbe,eur),e(wT,our),e(wT,aW),e(aW,rur),e(wT,tur),e(ie,aur),e(ie,AT),e(AT,pbe),e(pbe,nur),e(AT,sur),e(AT,nW),e(nW,lur),e(AT,iur),e(ie,dur),e(ie,yT),e(yT,ube),e(ube,cur),e(yT,fur),e(yT,sW),e(sW,mur),e(yT,gur),e(ie,hur),e(ie,LT),e(LT,_be),e(_be,pur),e(LT,uur),e(LT,lW),e(lW,_ur),e(LT,bur),e(ie,vur),e(ie,xT),e(xT,bbe),e(bbe,Fur),e(xT,Tur),e(xT,iW),e(iW,Mur),e(xT,Eur),e(ie,Cur),e(ie,$T),e($T,vbe),e(vbe,wur),e($T,Aur),e($T,dW),e(dW,yur),e($T,Lur),e(ie,xur),e(ie,kT),e(kT,Fbe),e(Fbe,$ur),e(kT,kur),e(kT,cW),e(cW,Sur),e(kT,Rur),e(xr,Bur),M(ST,xr,null),b(f,aqe,_),b(f,Zd,_),e(Zd,RT),e(RT,Tbe),M(t8,Tbe,null),e(Zd,Pur),e(Zd,Mbe),e(Mbe,Iur),b(f,nqe,_),b(f,rr,_),M(a8,rr,null),e(rr,qur),e(rr,ec),e(ec,Nur),e(ec,fW),e(fW,jur),e(ec,Dur),e(ec,mW),e(mW,Gur),e(ec,Our),e(rr,Vur),e(rr,n8),e(n8,Xur),e(n8,Ebe),e(Ebe,zur),e(n8,Qur),e(rr,Wur),e(rr,$t),M(s8,$t,null),e($t,Hur),e($t,Cbe),e(Cbe,Uur),e($t,Jur),e($t,oc),e(oc,Yur),e(oc,wbe),e(wbe,Kur),e(oc,Zur),e(oc,gW),e(gW,e_r),e(oc,o_r),e($t,r_r),M(BT,$t,null),e(rr,t_r),e(rr,$r),M(l8,$r,null),e($r,a_r),e($r,Abe),e(Abe,n_r),e($r,s_r),e($r,tn),e(tn,l_r),e(tn,ybe),e(ybe,i_r),e(tn,d_r),e(tn,Lbe),e(Lbe,c_r),e(tn,f_r),e(tn,xbe),e(xbe,m_r),e(tn,g_r),e($r,h_r),e($r,ye),e(ye,PT),e(PT,$be),e($be,p_r),e(PT,u_r),e(PT,hW),e(hW,__r),e(PT,b_r),e(ye,v_r),e(ye,IT),e(IT,kbe),e(kbe,F_r),e(IT,T_r),e(IT,pW),e(pW,M_r),e(IT,E_r),e(ye,C_r),e(ye,qT),e(qT,Sbe),e(Sbe,w_r),e(qT,A_r),e(qT,uW),e(uW,y_r),e(qT,L_r),e(ye,x_r),e(ye,NT),e(NT,Rbe),e(Rbe,$_r),e(NT,k_r),e(NT,_W),e(_W,S_r),e(NT,R_r),e(ye,B_r),e(ye,jT),e(jT,Bbe),e(Bbe,P_r),e(jT,I_r),e(jT,bW),e(bW,q_r),e(jT,N_r),e(ye,j_r),e(ye,DT),e(DT,Pbe),e(Pbe,D_r),e(DT,G_r),e(DT,vW),e(vW,O_r),e(DT,V_r),e(ye,X_r),e(ye,GT),e(GT,Ibe),e(Ibe,z_r),e(GT,Q_r),e(GT,FW),e(FW,W_r),e(GT,H_r),e(ye,U_r),e(ye,OT),e(OT,qbe),e(qbe,J_r),e(OT,Y_r),e(OT,TW),e(TW,K_r),e(OT,Z_r),e(ye,e1r),e(ye,VT),e(VT,Nbe),e(Nbe,o1r),e(VT,r1r),e(VT,MW),e(MW,t1r),e(VT,a1r),e(ye,n1r),e(ye,XT),e(XT,jbe),e(jbe,s1r),e(XT,l1r),e(XT,EW),e(EW,i1r),e(XT,d1r),e($r,c1r),M(zT,$r,null),b(f,sqe,_),b(f,rc,_),e(rc,QT),e(QT,Dbe),M(i8,Dbe,null),e(rc,f1r),e(rc,Gbe),e(Gbe,m1r),b(f,lqe,_),b(f,tr,_),M(d8,tr,null),e(tr,g1r),e(tr,tc),e(tc,h1r),e(tc,CW),e(CW,p1r),e(tc,u1r),e(tc,wW),e(wW,_1r),e(tc,b1r),e(tr,v1r),e(tr,c8),e(c8,F1r),e(c8,Obe),e(Obe,T1r),e(c8,M1r),e(tr,E1r),e(tr,kt),M(f8,kt,null),e(kt,C1r),e(kt,Vbe),e(Vbe,w1r),e(kt,A1r),e(kt,ac),e(ac,y1r),e(ac,Xbe),e(Xbe,L1r),e(ac,x1r),e(ac,AW),e(AW,$1r),e(ac,k1r),e(kt,S1r),M(WT,kt,null),e(tr,R1r),e(tr,kr),M(m8,kr,null),e(kr,B1r),e(kr,zbe),e(zbe,P1r),e(kr,I1r),e(kr,an),e(an,q1r),e(an,Qbe),e(Qbe,N1r),e(an,j1r),e(an,Wbe),e(Wbe,D1r),e(an,G1r),e(an,Hbe),e(Hbe,O1r),e(an,V1r),e(kr,X1r),e(kr,Z),e(Z,HT),e(HT,Ube),e(Ube,z1r),e(HT,Q1r),e(HT,yW),e(yW,W1r),e(HT,H1r),e(Z,U1r),e(Z,UT),e(UT,Jbe),e(Jbe,J1r),e(UT,Y1r),e(UT,LW),e(LW,K1r),e(UT,Z1r),e(Z,e7r),e(Z,JT),e(JT,Ybe),e(Ybe,o7r),e(JT,r7r),e(JT,xW),e(xW,t7r),e(JT,a7r),e(Z,n7r),e(Z,YT),e(YT,Kbe),e(Kbe,s7r),e(YT,l7r),e(YT,$W),e($W,i7r),e(YT,d7r),e(Z,c7r),e(Z,KT),e(KT,Zbe),e(Zbe,f7r),e(KT,m7r),e(KT,kW),e(kW,g7r),e(KT,h7r),e(Z,p7r),e(Z,ZT),e(ZT,e2e),e(e2e,u7r),e(ZT,_7r),e(ZT,SW),e(SW,b7r),e(ZT,v7r),e(Z,F7r),e(Z,eM),e(eM,o2e),e(o2e,T7r),e(eM,M7r),e(eM,RW),e(RW,E7r),e(eM,C7r),e(Z,w7r),e(Z,oM),e(oM,r2e),e(r2e,A7r),e(oM,y7r),e(oM,BW),e(BW,L7r),e(oM,x7r),e(Z,$7r),e(Z,rM),e(rM,t2e),e(t2e,k7r),e(rM,S7r),e(rM,PW),e(PW,R7r),e(rM,B7r),e(Z,P7r),e(Z,tM),e(tM,a2e),e(a2e,I7r),e(tM,q7r),e(tM,IW),e(IW,N7r),e(tM,j7r),e(Z,D7r),e(Z,aM),e(aM,n2e),e(n2e,G7r),e(aM,O7r),e(aM,qW),e(qW,V7r),e(aM,X7r),e(Z,z7r),e(Z,nM),e(nM,s2e),e(s2e,Q7r),e(nM,W7r),e(nM,NW),e(NW,H7r),e(nM,U7r),e(Z,J7r),e(Z,sM),e(sM,l2e),e(l2e,Y7r),e(sM,K7r),e(sM,jW),e(jW,Z7r),e(sM,ebr),e(Z,obr),e(Z,lM),e(lM,i2e),e(i2e,rbr),e(lM,tbr),e(lM,DW),e(DW,abr),e(lM,nbr),e(Z,sbr),e(Z,iM),e(iM,d2e),e(d2e,lbr),e(iM,ibr),e(iM,GW),e(GW,dbr),e(iM,cbr),e(Z,fbr),e(Z,dM),e(dM,c2e),e(c2e,mbr),e(dM,gbr),e(dM,OW),e(OW,hbr),e(dM,pbr),e(Z,ubr),e(Z,cM),e(cM,f2e),e(f2e,_br),e(cM,bbr),e(cM,VW),e(VW,vbr),e(cM,Fbr),e(Z,Tbr),e(Z,fM),e(fM,m2e),e(m2e,Mbr),e(fM,Ebr),e(fM,XW),e(XW,Cbr),e(fM,wbr),e(Z,Abr),e(Z,mM),e(mM,g2e),e(g2e,ybr),e(mM,Lbr),e(mM,zW),e(zW,xbr),e(mM,$br),e(Z,kbr),e(Z,gM),e(gM,h2e),e(h2e,Sbr),e(gM,Rbr),e(gM,QW),e(QW,Bbr),e(gM,Pbr),e(Z,Ibr),e(Z,hM),e(hM,p2e),e(p2e,qbr),e(hM,Nbr),e(hM,WW),e(WW,jbr),e(hM,Dbr),e(Z,Gbr),e(Z,pM),e(pM,u2e),e(u2e,Obr),e(pM,Vbr),e(pM,HW),e(HW,Xbr),e(pM,zbr),e(Z,Qbr),e(Z,uM),e(uM,_2e),e(_2e,Wbr),e(uM,Hbr),e(uM,UW),e(UW,Ubr),e(uM,Jbr),e(Z,Ybr),e(Z,_M),e(_M,b2e),e(b2e,Kbr),e(_M,Zbr),e(_M,JW),e(JW,e2r),e(_M,o2r),e(Z,r2r),e(Z,bM),e(bM,v2e),e(v2e,t2r),e(bM,a2r),e(bM,YW),e(YW,n2r),e(bM,s2r),e(Z,l2r),e(Z,vM),e(vM,F2e),e(F2e,i2r),e(vM,d2r),e(vM,KW),e(KW,c2r),e(vM,f2r),e(kr,m2r),M(FM,kr,null),b(f,iqe,_),b(f,nc,_),e(nc,TM),e(TM,T2e),M(g8,T2e,null),e(nc,g2r),e(nc,M2e),e(M2e,h2r),b(f,dqe,_),b(f,ar,_),M(h8,ar,null),e(ar,p2r),e(ar,sc),e(sc,u2r),e(sc,ZW),e(ZW,_2r),e(sc,b2r),e(sc,eH),e(eH,v2r),e(sc,F2r),e(ar,T2r),e(ar,p8),e(p8,M2r),e(p8,E2e),e(E2e,E2r),e(p8,C2r),e(ar,w2r),e(ar,St),M(u8,St,null),e(St,A2r),e(St,C2e),e(C2e,y2r),e(St,L2r),e(St,lc),e(lc,x2r),e(lc,w2e),e(w2e,$2r),e(lc,k2r),e(lc,oH),e(oH,S2r),e(lc,R2r),e(St,B2r),M(MM,St,null),e(ar,P2r),e(ar,Sr),M(_8,Sr,null),e(Sr,I2r),e(Sr,A2e),e(A2e,q2r),e(Sr,N2r),e(Sr,nn),e(nn,j2r),e(nn,y2e),e(y2e,D2r),e(nn,G2r),e(nn,L2e),e(L2e,O2r),e(nn,V2r),e(nn,x2e),e(x2e,X2r),e(nn,z2r),e(Sr,Q2r),e(Sr,pe),e(pe,EM),e(EM,$2e),e($2e,W2r),e(EM,H2r),e(EM,rH),e(rH,U2r),e(EM,J2r),e(pe,Y2r),e(pe,CM),e(CM,k2e),e(k2e,K2r),e(CM,Z2r),e(CM,tH),e(tH,e5r),e(CM,o5r),e(pe,r5r),e(pe,wM),e(wM,S2e),e(S2e,t5r),e(wM,a5r),e(wM,aH),e(aH,n5r),e(wM,s5r),e(pe,l5r),e(pe,AM),e(AM,R2e),e(R2e,i5r),e(AM,d5r),e(AM,nH),e(nH,c5r),e(AM,f5r),e(pe,m5r),e(pe,yM),e(yM,B2e),e(B2e,g5r),e(yM,h5r),e(yM,sH),e(sH,p5r),e(yM,u5r),e(pe,_5r),e(pe,LM),e(LM,P2e),e(P2e,b5r),e(LM,v5r),e(LM,lH),e(lH,F5r),e(LM,T5r),e(pe,M5r),e(pe,xM),e(xM,I2e),e(I2e,E5r),e(xM,C5r),e(xM,iH),e(iH,w5r),e(xM,A5r),e(pe,y5r),e(pe,$M),e($M,q2e),e(q2e,L5r),e($M,x5r),e($M,dH),e(dH,$5r),e($M,k5r),e(pe,S5r),e(pe,kM),e(kM,N2e),e(N2e,R5r),e(kM,B5r),e(kM,cH),e(cH,P5r),e(kM,I5r),e(pe,q5r),e(pe,SM),e(SM,j2e),e(j2e,N5r),e(SM,j5r),e(SM,fH),e(fH,D5r),e(SM,G5r),e(pe,O5r),e(pe,RM),e(RM,D2e),e(D2e,V5r),e(RM,X5r),e(RM,mH),e(mH,z5r),e(RM,Q5r),e(pe,W5r),e(pe,BM),e(BM,G2e),e(G2e,H5r),e(BM,U5r),e(BM,gH),e(gH,J5r),e(BM,Y5r),e(pe,K5r),e(pe,PM),e(PM,O2e),e(O2e,Z5r),e(PM,evr),e(PM,hH),e(hH,ovr),e(PM,rvr),e(pe,tvr),e(pe,IM),e(IM,V2e),e(V2e,avr),e(IM,nvr),e(IM,pH),e(pH,svr),e(IM,lvr),e(pe,ivr),e(pe,qM),e(qM,X2e),e(X2e,dvr),e(qM,cvr),e(qM,uH),e(uH,fvr),e(qM,mvr),e(pe,gvr),e(pe,NM),e(NM,z2e),e(z2e,hvr),e(NM,pvr),e(NM,_H),e(_H,uvr),e(NM,_vr),e(pe,bvr),e(pe,jM),e(jM,Q2e),e(Q2e,vvr),e(jM,Fvr),e(jM,bH),e(bH,Tvr),e(jM,Mvr),e(Sr,Evr),M(DM,Sr,null),b(f,cqe,_),b(f,ic,_),e(ic,GM),e(GM,W2e),M(b8,W2e,null),e(ic,Cvr),e(ic,H2e),e(H2e,wvr),b(f,fqe,_),b(f,nr,_),M(v8,nr,null),e(nr,Avr),e(nr,dc),e(dc,yvr),e(dc,vH),e(vH,Lvr),e(dc,xvr),e(dc,FH),e(FH,$vr),e(dc,kvr),e(nr,Svr),e(nr,F8),e(F8,Rvr),e(F8,U2e),e(U2e,Bvr),e(F8,Pvr),e(nr,Ivr),e(nr,Rt),M(T8,Rt,null),e(Rt,qvr),e(Rt,J2e),e(J2e,Nvr),e(Rt,jvr),e(Rt,cc),e(cc,Dvr),e(cc,Y2e),e(Y2e,Gvr),e(cc,Ovr),e(cc,TH),e(TH,Vvr),e(cc,Xvr),e(Rt,zvr),M(OM,Rt,null),e(nr,Qvr),e(nr,Rr),M(M8,Rr,null),e(Rr,Wvr),e(Rr,K2e),e(K2e,Hvr),e(Rr,Uvr),e(Rr,sn),e(sn,Jvr),e(sn,Z2e),e(Z2e,Yvr),e(sn,Kvr),e(sn,e5e),e(e5e,Zvr),e(sn,eFr),e(sn,o5e),e(o5e,oFr),e(sn,rFr),e(Rr,tFr),e(Rr,E8),e(E8,VM),e(VM,r5e),e(r5e,aFr),e(VM,nFr),e(VM,MH),e(MH,sFr),e(VM,lFr),e(E8,iFr),e(E8,XM),e(XM,t5e),e(t5e,dFr),e(XM,cFr),e(XM,EH),e(EH,fFr),e(XM,mFr),e(Rr,gFr),M(zM,Rr,null),b(f,mqe,_),b(f,fc,_),e(fc,QM),e(QM,a5e),M(C8,a5e,null),e(fc,hFr),e(fc,n5e),e(n5e,pFr),b(f,gqe,_),b(f,sr,_),M(w8,sr,null),e(sr,uFr),e(sr,mc),e(mc,_Fr),e(mc,CH),e(CH,bFr),e(mc,vFr),e(mc,wH),e(wH,FFr),e(mc,TFr),e(sr,MFr),e(sr,A8),e(A8,EFr),e(A8,s5e),e(s5e,CFr),e(A8,wFr),e(sr,AFr),e(sr,Bt),M(y8,Bt,null),e(Bt,yFr),e(Bt,l5e),e(l5e,LFr),e(Bt,xFr),e(Bt,gc),e(gc,$Fr),e(gc,i5e),e(i5e,kFr),e(gc,SFr),e(gc,AH),e(AH,RFr),e(gc,BFr),e(Bt,PFr),M(WM,Bt,null),e(sr,IFr),e(sr,Br),M(L8,Br,null),e(Br,qFr),e(Br,d5e),e(d5e,NFr),e(Br,jFr),e(Br,ln),e(ln,DFr),e(ln,c5e),e(c5e,GFr),e(ln,OFr),e(ln,f5e),e(f5e,VFr),e(ln,XFr),e(ln,m5e),e(m5e,zFr),e(ln,QFr),e(Br,WFr),e(Br,g5e),e(g5e,HM),e(HM,h5e),e(h5e,HFr),e(HM,UFr),e(HM,yH),e(yH,JFr),e(HM,YFr),e(Br,KFr),M(UM,Br,null),b(f,hqe,_),b(f,hc,_),e(hc,JM),e(JM,p5e),M(x8,p5e,null),e(hc,ZFr),e(hc,u5e),e(u5e,e0r),b(f,pqe,_),b(f,lr,_),M($8,lr,null),e(lr,o0r),e(lr,pc),e(pc,r0r),e(pc,LH),e(LH,t0r),e(pc,a0r),e(pc,xH),e(xH,n0r),e(pc,s0r),e(lr,l0r),e(lr,k8),e(k8,i0r),e(k8,_5e),e(_5e,d0r),e(k8,c0r),e(lr,f0r),e(lr,Pt),M(S8,Pt,null),e(Pt,m0r),e(Pt,b5e),e(b5e,g0r),e(Pt,h0r),e(Pt,uc),e(uc,p0r),e(uc,v5e),e(v5e,u0r),e(uc,_0r),e(uc,$H),e($H,b0r),e(uc,v0r),e(Pt,F0r),M(YM,Pt,null),e(lr,T0r),e(lr,Pr),M(R8,Pr,null),e(Pr,M0r),e(Pr,F5e),e(F5e,E0r),e(Pr,C0r),e(Pr,dn),e(dn,w0r),e(dn,T5e),e(T5e,A0r),e(dn,y0r),e(dn,M5e),e(M5e,L0r),e(dn,x0r),e(dn,E5e),e(E5e,$0r),e(dn,k0r),e(Pr,S0r),e(Pr,de),e(de,KM),e(KM,C5e),e(C5e,R0r),e(KM,B0r),e(KM,kH),e(kH,P0r),e(KM,I0r),e(de,q0r),e(de,ZM),e(ZM,w5e),e(w5e,N0r),e(ZM,j0r),e(ZM,SH),e(SH,D0r),e(ZM,G0r),e(de,O0r),e(de,e4),e(e4,A5e),e(A5e,V0r),e(e4,X0r),e(e4,RH),e(RH,z0r),e(e4,Q0r),e(de,W0r),e(de,o4),e(o4,y5e),e(y5e,H0r),e(o4,U0r),e(o4,BH),e(BH,J0r),e(o4,Y0r),e(de,K0r),e(de,r4),e(r4,L5e),e(L5e,Z0r),e(r4,eTr),e(r4,PH),e(PH,oTr),e(r4,rTr),e(de,tTr),e(de,t4),e(t4,x5e),e(x5e,aTr),e(t4,nTr),e(t4,IH),e(IH,sTr),e(t4,lTr),e(de,iTr),e(de,a4),e(a4,$5e),e($5e,dTr),e(a4,cTr),e(a4,qH),e(qH,fTr),e(a4,mTr),e(de,gTr),e(de,n4),e(n4,k5e),e(k5e,hTr),e(n4,pTr),e(n4,NH),e(NH,uTr),e(n4,_Tr),e(de,bTr),e(de,s4),e(s4,S5e),e(S5e,vTr),e(s4,FTr),e(s4,jH),e(jH,TTr),e(s4,MTr),e(de,ETr),e(de,l4),e(l4,R5e),e(R5e,CTr),e(l4,wTr),e(l4,DH),e(DH,ATr),e(l4,yTr),e(de,LTr),e(de,i4),e(i4,B5e),e(B5e,xTr),e(i4,$Tr),e(i4,GH),e(GH,kTr),e(i4,STr),e(de,RTr),e(de,d4),e(d4,P5e),e(P5e,BTr),e(d4,PTr),e(d4,OH),e(OH,ITr),e(d4,qTr),e(de,NTr),e(de,c4),e(c4,I5e),e(I5e,jTr),e(c4,DTr),e(c4,VH),e(VH,GTr),e(c4,OTr),e(de,VTr),e(de,f4),e(f4,q5e),e(q5e,XTr),e(f4,zTr),e(f4,XH),e(XH,QTr),e(f4,WTr),e(de,HTr),e(de,m4),e(m4,N5e),e(N5e,UTr),e(m4,JTr),e(m4,zH),e(zH,YTr),e(m4,KTr),e(de,ZTr),e(de,g4),e(g4,j5e),e(j5e,eMr),e(g4,oMr),e(g4,QH),e(QH,rMr),e(g4,tMr),e(de,aMr),e(de,h4),e(h4,D5e),e(D5e,nMr),e(h4,sMr),e(h4,WH),e(WH,lMr),e(h4,iMr),e(de,dMr),e(de,p4),e(p4,G5e),e(G5e,cMr),e(p4,fMr),e(p4,HH),e(HH,mMr),e(p4,gMr),e(de,hMr),e(de,u4),e(u4,O5e),e(O5e,pMr),e(u4,uMr),e(u4,UH),e(UH,_Mr),e(u4,bMr),e(de,vMr),e(de,_4),e(_4,V5e),e(V5e,FMr),e(_4,TMr),e(_4,JH),e(JH,MMr),e(_4,EMr),e(Pr,CMr),M(b4,Pr,null),b(f,uqe,_),b(f,_c,_),e(_c,v4),e(v4,X5e),M(B8,X5e,null),e(_c,wMr),e(_c,z5e),e(z5e,AMr),b(f,_qe,_),b(f,ir,_),M(P8,ir,null),e(ir,yMr),e(ir,bc),e(bc,LMr),e(bc,YH),e(YH,xMr),e(bc,$Mr),e(bc,KH),e(KH,kMr),e(bc,SMr),e(ir,RMr),e(ir,I8),e(I8,BMr),e(I8,Q5e),e(Q5e,PMr),e(I8,IMr),e(ir,qMr),e(ir,It),M(q8,It,null),e(It,NMr),e(It,W5e),e(W5e,jMr),e(It,DMr),e(It,vc),e(vc,GMr),e(vc,H5e),e(H5e,OMr),e(vc,VMr),e(vc,ZH),e(ZH,XMr),e(vc,zMr),e(It,QMr),M(F4,It,null),e(ir,WMr),e(ir,Ir),M(N8,Ir,null),e(Ir,HMr),e(Ir,U5e),e(U5e,UMr),e(Ir,JMr),e(Ir,cn),e(cn,YMr),e(cn,J5e),e(J5e,KMr),e(cn,ZMr),e(cn,Y5e),e(Y5e,e4r),e(cn,o4r),e(cn,K5e),e(K5e,r4r),e(cn,t4r),e(Ir,a4r),e(Ir,ce),e(ce,T4),e(T4,Z5e),e(Z5e,n4r),e(T4,s4r),e(T4,eU),e(eU,l4r),e(T4,i4r),e(ce,d4r),e(ce,M4),e(M4,eve),e(eve,c4r),e(M4,f4r),e(M4,oU),e(oU,m4r),e(M4,g4r),e(ce,h4r),e(ce,E4),e(E4,ove),e(ove,p4r),e(E4,u4r),e(E4,rU),e(rU,_4r),e(E4,b4r),e(ce,v4r),e(ce,C4),e(C4,rve),e(rve,F4r),e(C4,T4r),e(C4,tU),e(tU,M4r),e(C4,E4r),e(ce,C4r),e(ce,w4),e(w4,tve),e(tve,w4r),e(w4,A4r),e(w4,aU),e(aU,y4r),e(w4,L4r),e(ce,x4r),e(ce,A4),e(A4,ave),e(ave,$4r),e(A4,k4r),e(A4,nU),e(nU,S4r),e(A4,R4r),e(ce,B4r),e(ce,y4),e(y4,nve),e(nve,P4r),e(y4,I4r),e(y4,sU),e(sU,q4r),e(y4,N4r),e(ce,j4r),e(ce,L4),e(L4,sve),e(sve,D4r),e(L4,G4r),e(L4,lU),e(lU,O4r),e(L4,V4r),e(ce,X4r),e(ce,x4),e(x4,lve),e(lve,z4r),e(x4,Q4r),e(x4,iU),e(iU,W4r),e(x4,H4r),e(ce,U4r),e(ce,$4),e($4,ive),e(ive,J4r),e($4,Y4r),e($4,dU),e(dU,K4r),e($4,Z4r),e(ce,eEr),e(ce,k4),e(k4,dve),e(dve,oEr),e(k4,rEr),e(k4,cU),e(cU,tEr),e(k4,aEr),e(ce,nEr),e(ce,S4),e(S4,cve),e(cve,sEr),e(S4,lEr),e(S4,fU),e(fU,iEr),e(S4,dEr),e(ce,cEr),e(ce,R4),e(R4,fve),e(fve,fEr),e(R4,mEr),e(R4,mU),e(mU,gEr),e(R4,hEr),e(ce,pEr),e(ce,B4),e(B4,mve),e(mve,uEr),e(B4,_Er),e(B4,gU),e(gU,bEr),e(B4,vEr),e(ce,FEr),e(ce,P4),e(P4,gve),e(gve,TEr),e(P4,MEr),e(P4,hU),e(hU,EEr),e(P4,CEr),e(ce,wEr),e(ce,I4),e(I4,hve),e(hve,AEr),e(I4,yEr),e(I4,pU),e(pU,LEr),e(I4,xEr),e(ce,$Er),e(ce,q4),e(q4,pve),e(pve,kEr),e(q4,SEr),e(q4,uU),e(uU,REr),e(q4,BEr),e(ce,PEr),e(ce,N4),e(N4,uve),e(uve,IEr),e(N4,qEr),e(N4,_U),e(_U,NEr),e(N4,jEr),e(ce,DEr),e(ce,j4),e(j4,_ve),e(_ve,GEr),e(j4,OEr),e(j4,bU),e(bU,VEr),e(j4,XEr),e(ce,zEr),e(ce,D4),e(D4,bve),e(bve,QEr),e(D4,WEr),e(D4,vU),e(vU,HEr),e(D4,UEr),e(Ir,JEr),M(G4,Ir,null),b(f,bqe,_),b(f,Fc,_),e(Fc,O4),e(O4,vve),M(j8,vve,null),e(Fc,YEr),e(Fc,Fve),e(Fve,KEr),b(f,vqe,_),b(f,dr,_),M(D8,dr,null),e(dr,ZEr),e(dr,Tc),e(Tc,eCr),e(Tc,FU),e(FU,oCr),e(Tc,rCr),e(Tc,TU),e(TU,tCr),e(Tc,aCr),e(dr,nCr),e(dr,G8),e(G8,sCr),e(G8,Tve),e(Tve,lCr),e(G8,iCr),e(dr,dCr),e(dr,qt),M(O8,qt,null),e(qt,cCr),e(qt,Mve),e(Mve,fCr),e(qt,mCr),e(qt,Mc),e(Mc,gCr),e(Mc,Eve),e(Eve,hCr),e(Mc,pCr),e(Mc,MU),e(MU,uCr),e(Mc,_Cr),e(qt,bCr),M(V4,qt,null),e(dr,vCr),e(dr,qr),M(V8,qr,null),e(qr,FCr),e(qr,Cve),e(Cve,TCr),e(qr,MCr),e(qr,fn),e(fn,ECr),e(fn,wve),e(wve,CCr),e(fn,wCr),e(fn,Ave),e(Ave,ACr),e(fn,yCr),e(fn,yve),e(yve,LCr),e(fn,xCr),e(qr,$Cr),e(qr,Lve),e(Lve,X4),e(X4,xve),e(xve,kCr),e(X4,SCr),e(X4,EU),e(EU,RCr),e(X4,BCr),e(qr,PCr),M(z4,qr,null),b(f,Fqe,_),b(f,Ec,_),e(Ec,Q4),e(Q4,$ve),M(X8,$ve,null),e(Ec,ICr),e(Ec,kve),e(kve,qCr),b(f,Tqe,_),b(f,cr,_),M(z8,cr,null),e(cr,NCr),e(cr,Cc),e(Cc,jCr),e(Cc,CU),e(CU,DCr),e(Cc,GCr),e(Cc,wU),e(wU,OCr),e(Cc,VCr),e(cr,XCr),e(cr,Q8),e(Q8,zCr),e(Q8,Sve),e(Sve,QCr),e(Q8,WCr),e(cr,HCr),e(cr,Nt),M(W8,Nt,null),e(Nt,UCr),e(Nt,Rve),e(Rve,JCr),e(Nt,YCr),e(Nt,wc),e(wc,KCr),e(wc,Bve),e(Bve,ZCr),e(wc,e3r),e(wc,AU),e(AU,o3r),e(wc,r3r),e(Nt,t3r),M(W4,Nt,null),e(cr,a3r),e(cr,Nr),M(H8,Nr,null),e(Nr,n3r),e(Nr,Pve),e(Pve,s3r),e(Nr,l3r),e(Nr,mn),e(mn,i3r),e(mn,Ive),e(Ive,d3r),e(mn,c3r),e(mn,qve),e(qve,f3r),e(mn,m3r),e(mn,Nve),e(Nve,g3r),e(mn,h3r),e(Nr,p3r),e(Nr,jve),e(jve,H4),e(H4,Dve),e(Dve,u3r),e(H4,_3r),e(H4,yU),e(yU,b3r),e(H4,v3r),e(Nr,F3r),M(U4,Nr,null),b(f,Mqe,_),b(f,Ac,_),e(Ac,J4),e(J4,Gve),M(U8,Gve,null),e(Ac,T3r),e(Ac,Ove),e(Ove,M3r),b(f,Eqe,_),b(f,fr,_),M(J8,fr,null),e(fr,E3r),e(fr,yc),e(yc,C3r),e(yc,LU),e(LU,w3r),e(yc,A3r),e(yc,xU),e(xU,y3r),e(yc,L3r),e(fr,x3r),e(fr,Y8),e(Y8,$3r),e(Y8,Vve),e(Vve,k3r),e(Y8,S3r),e(fr,R3r),e(fr,jt),M(K8,jt,null),e(jt,B3r),e(jt,Xve),e(Xve,P3r),e(jt,I3r),e(jt,Lc),e(Lc,q3r),e(Lc,zve),e(zve,N3r),e(Lc,j3r),e(Lc,$U),e($U,D3r),e(Lc,G3r),e(jt,O3r),M(Y4,jt,null),e(fr,V3r),e(fr,jr),M(Z8,jr,null),e(jr,X3r),e(jr,Qve),e(Qve,z3r),e(jr,Q3r),e(jr,gn),e(gn,W3r),e(gn,Wve),e(Wve,H3r),e(gn,U3r),e(gn,Hve),e(Hve,J3r),e(gn,Y3r),e(gn,Uve),e(Uve,K3r),e(gn,Z3r),e(jr,ewr),e(jr,re),e(re,K4),e(K4,Jve),e(Jve,owr),e(K4,rwr),e(K4,kU),e(kU,twr),e(K4,awr),e(re,nwr),e(re,Z4),e(Z4,Yve),e(Yve,swr),e(Z4,lwr),e(Z4,SU),e(SU,iwr),e(Z4,dwr),e(re,cwr),e(re,eE),e(eE,Kve),e(Kve,fwr),e(eE,mwr),e(eE,RU),e(RU,gwr),e(eE,hwr),e(re,pwr),e(re,oE),e(oE,Zve),e(Zve,uwr),e(oE,_wr),e(oE,BU),e(BU,bwr),e(oE,vwr),e(re,Fwr),e(re,rE),e(rE,eFe),e(eFe,Twr),e(rE,Mwr),e(rE,PU),e(PU,Ewr),e(rE,Cwr),e(re,wwr),e(re,tE),e(tE,oFe),e(oFe,Awr),e(tE,ywr),e(tE,IU),e(IU,Lwr),e(tE,xwr),e(re,$wr),e(re,aE),e(aE,rFe),e(rFe,kwr),e(aE,Swr),e(aE,qU),e(qU,Rwr),e(aE,Bwr),e(re,Pwr),e(re,nE),e(nE,tFe),e(tFe,Iwr),e(nE,qwr),e(nE,NU),e(NU,Nwr),e(nE,jwr),e(re,Dwr),e(re,sE),e(sE,aFe),e(aFe,Gwr),e(sE,Owr),e(sE,jU),e(jU,Vwr),e(sE,Xwr),e(re,zwr),e(re,lE),e(lE,nFe),e(nFe,Qwr),e(lE,Wwr),e(lE,DU),e(DU,Hwr),e(lE,Uwr),e(re,Jwr),e(re,iE),e(iE,sFe),e(sFe,Ywr),e(iE,Kwr),e(iE,GU),e(GU,Zwr),e(iE,eAr),e(re,oAr),e(re,dE),e(dE,lFe),e(lFe,rAr),e(dE,tAr),e(dE,OU),e(OU,aAr),e(dE,nAr),e(re,sAr),e(re,cE),e(cE,iFe),e(iFe,lAr),e(cE,iAr),e(cE,VU),e(VU,dAr),e(cE,cAr),e(re,fAr),e(re,fE),e(fE,dFe),e(dFe,mAr),e(fE,gAr),e(fE,XU),e(XU,hAr),e(fE,pAr),e(re,uAr),e(re,mE),e(mE,cFe),e(cFe,_Ar),e(mE,bAr),e(mE,zU),e(zU,vAr),e(mE,FAr),e(re,TAr),e(re,gE),e(gE,fFe),e(fFe,MAr),e(gE,EAr),e(gE,QU),e(QU,CAr),e(gE,wAr),e(re,AAr),e(re,hE),e(hE,mFe),e(mFe,yAr),e(hE,LAr),e(hE,WU),e(WU,xAr),e(hE,$Ar),e(re,kAr),e(re,pE),e(pE,gFe),e(gFe,SAr),e(pE,RAr),e(pE,HU),e(HU,BAr),e(pE,PAr),e(re,IAr),e(re,uE),e(uE,hFe),e(hFe,qAr),e(uE,NAr),e(uE,UU),e(UU,jAr),e(uE,DAr),e(re,GAr),e(re,_E),e(_E,pFe),e(pFe,OAr),e(_E,VAr),e(_E,JU),e(JU,XAr),e(_E,zAr),e(re,QAr),e(re,bE),e(bE,uFe),e(uFe,WAr),e(bE,HAr),e(bE,YU),e(YU,UAr),e(bE,JAr),e(re,YAr),e(re,vE),e(vE,_Fe),e(_Fe,KAr),e(vE,ZAr),e(vE,KU),e(KU,e6r),e(vE,o6r),e(re,r6r),e(re,FE),e(FE,bFe),e(bFe,t6r),e(FE,a6r),e(FE,ZU),e(ZU,n6r),e(FE,s6r),e(re,l6r),e(re,TE),e(TE,vFe),e(vFe,i6r),e(TE,d6r),e(TE,eJ),e(eJ,c6r),e(TE,f6r),e(re,m6r),e(re,ME),e(ME,FFe),e(FFe,g6r),e(ME,h6r),e(ME,oJ),e(oJ,p6r),e(ME,u6r),e(jr,_6r),M(EE,jr,null),b(f,Cqe,_),b(f,xc,_),e(xc,CE),e(CE,TFe),M(ex,TFe,null),e(xc,b6r),e(xc,MFe),e(MFe,v6r),b(f,wqe,_),b(f,mr,_),M(ox,mr,null),e(mr,F6r),e(mr,$c),e($c,T6r),e($c,rJ),e(rJ,M6r),e($c,E6r),e($c,tJ),e(tJ,C6r),e($c,w6r),e(mr,A6r),e(mr,rx),e(rx,y6r),e(rx,EFe),e(EFe,L6r),e(rx,x6r),e(mr,$6r),e(mr,Dt),M(tx,Dt,null),e(Dt,k6r),e(Dt,CFe),e(CFe,S6r),e(Dt,R6r),e(Dt,kc),e(kc,B6r),e(kc,wFe),e(wFe,P6r),e(kc,I6r),e(kc,aJ),e(aJ,q6r),e(kc,N6r),e(Dt,j6r),M(wE,Dt,null),e(mr,D6r),e(mr,Dr),M(ax,Dr,null),e(Dr,G6r),e(Dr,AFe),e(AFe,O6r),e(Dr,V6r),e(Dr,hn),e(hn,X6r),e(hn,yFe),e(yFe,z6r),e(hn,Q6r),e(hn,LFe),e(LFe,W6r),e(hn,H6r),e(hn,xFe),e(xFe,U6r),e(hn,J6r),e(Dr,Y6r),e(Dr,ke),e(ke,AE),e(AE,$Fe),e($Fe,K6r),e(AE,Z6r),e(AE,nJ),e(nJ,eyr),e(AE,oyr),e(ke,ryr),e(ke,yE),e(yE,kFe),e(kFe,tyr),e(yE,ayr),e(yE,sJ),e(sJ,nyr),e(yE,syr),e(ke,lyr),e(ke,LE),e(LE,SFe),e(SFe,iyr),e(LE,dyr),e(LE,lJ),e(lJ,cyr),e(LE,fyr),e(ke,myr),e(ke,xE),e(xE,RFe),e(RFe,gyr),e(xE,hyr),e(xE,iJ),e(iJ,pyr),e(xE,uyr),e(ke,_yr),e(ke,$E),e($E,BFe),e(BFe,byr),e($E,vyr),e($E,dJ),e(dJ,Fyr),e($E,Tyr),e(ke,Myr),e(ke,kE),e(kE,PFe),e(PFe,Eyr),e(kE,Cyr),e(kE,cJ),e(cJ,wyr),e(kE,Ayr),e(ke,yyr),e(ke,SE),e(SE,IFe),e(IFe,Lyr),e(SE,xyr),e(SE,fJ),e(fJ,$yr),e(SE,kyr),e(ke,Syr),e(ke,RE),e(RE,qFe),e(qFe,Ryr),e(RE,Byr),e(RE,mJ),e(mJ,Pyr),e(RE,Iyr),e(ke,qyr),e(ke,BE),e(BE,NFe),e(NFe,Nyr),e(BE,jyr),e(BE,gJ),e(gJ,Dyr),e(BE,Gyr),e(Dr,Oyr),M(PE,Dr,null),b(f,Aqe,_),b(f,Sc,_),e(Sc,IE),e(IE,jFe),M(nx,jFe,null),e(Sc,Vyr),e(Sc,DFe),e(DFe,Xyr),b(f,yqe,_),b(f,gr,_),M(sx,gr,null),e(gr,zyr),e(gr,Rc),e(Rc,Qyr),e(Rc,hJ),e(hJ,Wyr),e(Rc,Hyr),e(Rc,pJ),e(pJ,Uyr),e(Rc,Jyr),e(gr,Yyr),e(gr,lx),e(lx,Kyr),e(lx,GFe),e(GFe,Zyr),e(lx,eLr),e(gr,oLr),e(gr,Gt),M(ix,Gt,null),e(Gt,rLr),e(Gt,OFe),e(OFe,tLr),e(Gt,aLr),e(Gt,Bc),e(Bc,nLr),e(Bc,VFe),e(VFe,sLr),e(Bc,lLr),e(Bc,uJ),e(uJ,iLr),e(Bc,dLr),e(Gt,cLr),M(qE,Gt,null),e(gr,fLr),e(gr,Gr),M(dx,Gr,null),e(Gr,mLr),e(Gr,XFe),e(XFe,gLr),e(Gr,hLr),e(Gr,pn),e(pn,pLr),e(pn,zFe),e(zFe,uLr),e(pn,_Lr),e(pn,QFe),e(QFe,bLr),e(pn,vLr),e(pn,WFe),e(WFe,FLr),e(pn,TLr),e(Gr,MLr),e(Gr,Me),e(Me,NE),e(NE,HFe),e(HFe,ELr),e(NE,CLr),e(NE,_J),e(_J,wLr),e(NE,ALr),e(Me,yLr),e(Me,jE),e(jE,UFe),e(UFe,LLr),e(jE,xLr),e(jE,bJ),e(bJ,$Lr),e(jE,kLr),e(Me,SLr),e(Me,DE),e(DE,JFe),e(JFe,RLr),e(DE,BLr),e(DE,vJ),e(vJ,PLr),e(DE,ILr),e(Me,qLr),e(Me,GE),e(GE,YFe),e(YFe,NLr),e(GE,jLr),e(GE,FJ),e(FJ,DLr),e(GE,GLr),e(Me,OLr),e(Me,OE),e(OE,KFe),e(KFe,VLr),e(OE,XLr),e(OE,TJ),e(TJ,zLr),e(OE,QLr),e(Me,WLr),e(Me,VE),e(VE,ZFe),e(ZFe,HLr),e(VE,ULr),e(VE,MJ),e(MJ,JLr),e(VE,YLr),e(Me,KLr),e(Me,XE),e(XE,e0e),e(e0e,ZLr),e(XE,e8r),e(XE,EJ),e(EJ,o8r),e(XE,r8r),e(Me,t8r),e(Me,zE),e(zE,o0e),e(o0e,a8r),e(zE,n8r),e(zE,CJ),e(CJ,s8r),e(zE,l8r),e(Me,i8r),e(Me,QE),e(QE,r0e),e(r0e,d8r),e(QE,c8r),e(QE,wJ),e(wJ,f8r),e(QE,m8r),e(Me,g8r),e(Me,WE),e(WE,t0e),e(t0e,h8r),e(WE,p8r),e(WE,AJ),e(AJ,u8r),e(WE,_8r),e(Me,b8r),e(Me,HE),e(HE,a0e),e(a0e,v8r),e(HE,F8r),e(HE,yJ),e(yJ,T8r),e(HE,M8r),e(Me,E8r),e(Me,UE),e(UE,n0e),e(n0e,C8r),e(UE,w8r),e(UE,LJ),e(LJ,A8r),e(UE,y8r),e(Gr,L8r),M(JE,Gr,null),b(f,Lqe,_),b(f,Pc,_),e(Pc,YE),e(YE,s0e),M(cx,s0e,null),e(Pc,x8r),e(Pc,l0e),e(l0e,$8r),b(f,xqe,_),b(f,hr,_),M(fx,hr,null),e(hr,k8r),e(hr,Ic),e(Ic,S8r),e(Ic,xJ),e(xJ,R8r),e(Ic,B8r),e(Ic,$J),e($J,P8r),e(Ic,I8r),e(hr,q8r),e(hr,mx),e(mx,N8r),e(mx,i0e),e(i0e,j8r),e(mx,D8r),e(hr,G8r),e(hr,Ot),M(gx,Ot,null),e(Ot,O8r),e(Ot,d0e),e(d0e,V8r),e(Ot,X8r),e(Ot,qc),e(qc,z8r),e(qc,c0e),e(c0e,Q8r),e(qc,W8r),e(qc,kJ),e(kJ,H8r),e(qc,U8r),e(Ot,J8r),M(KE,Ot,null),e(hr,Y8r),e(hr,Or),M(hx,Or,null),e(Or,K8r),e(Or,f0e),e(f0e,Z8r),e(Or,exr),e(Or,un),e(un,oxr),e(un,m0e),e(m0e,rxr),e(un,txr),e(un,g0e),e(g0e,axr),e(un,nxr),e(un,h0e),e(h0e,sxr),e(un,lxr),e(Or,ixr),e(Or,Le),e(Le,ZE),e(ZE,p0e),e(p0e,dxr),e(ZE,cxr),e(ZE,SJ),e(SJ,fxr),e(ZE,mxr),e(Le,gxr),e(Le,eC),e(eC,u0e),e(u0e,hxr),e(eC,pxr),e(eC,RJ),e(RJ,uxr),e(eC,_xr),e(Le,bxr),e(Le,oC),e(oC,_0e),e(_0e,vxr),e(oC,Fxr),e(oC,BJ),e(BJ,Txr),e(oC,Mxr),e(Le,Exr),e(Le,rC),e(rC,b0e),e(b0e,Cxr),e(rC,wxr),e(rC,PJ),e(PJ,Axr),e(rC,yxr),e(Le,Lxr),e(Le,tC),e(tC,v0e),e(v0e,xxr),e(tC,$xr),e(tC,IJ),e(IJ,kxr),e(tC,Sxr),e(Le,Rxr),e(Le,aC),e(aC,F0e),e(F0e,Bxr),e(aC,Pxr),e(aC,qJ),e(qJ,Ixr),e(aC,qxr),e(Le,Nxr),e(Le,nC),e(nC,T0e),e(T0e,jxr),e(nC,Dxr),e(nC,NJ),e(NJ,Gxr),e(nC,Oxr),e(Le,Vxr),e(Le,sC),e(sC,M0e),e(M0e,Xxr),e(sC,zxr),e(sC,jJ),e(jJ,Qxr),e(sC,Wxr),e(Le,Hxr),e(Le,lC),e(lC,E0e),e(E0e,Uxr),e(lC,Jxr),e(lC,DJ),e(DJ,Yxr),e(lC,Kxr),e(Le,Zxr),e(Le,iC),e(iC,C0e),e(C0e,e9r),e(iC,o9r),e(iC,GJ),e(GJ,r9r),e(iC,t9r),e(Or,a9r),M(dC,Or,null),b(f,$qe,_),b(f,Nc,_),e(Nc,cC),e(cC,w0e),M(px,w0e,null),e(Nc,n9r),e(Nc,A0e),e(A0e,s9r),b(f,kqe,_),b(f,pr,_),M(ux,pr,null),e(pr,l9r),e(pr,jc),e(jc,i9r),e(jc,OJ),e(OJ,d9r),e(jc,c9r),e(jc,VJ),e(VJ,f9r),e(jc,m9r),e(pr,g9r),e(pr,_x),e(_x,h9r),e(_x,y0e),e(y0e,p9r),e(_x,u9r),e(pr,_9r),e(pr,Vt),M(bx,Vt,null),e(Vt,b9r),e(Vt,L0e),e(L0e,v9r),e(Vt,F9r),e(Vt,Dc),e(Dc,T9r),e(Dc,x0e),e(x0e,M9r),e(Dc,E9r),e(Dc,XJ),e(XJ,C9r),e(Dc,w9r),e(Vt,A9r),M(fC,Vt,null),e(pr,y9r),e(pr,Vr),M(vx,Vr,null),e(Vr,L9r),e(Vr,$0e),e($0e,x9r),e(Vr,$9r),e(Vr,_n),e(_n,k9r),e(_n,k0e),e(k0e,S9r),e(_n,R9r),e(_n,S0e),e(S0e,B9r),e(_n,P9r),e(_n,R0e),e(R0e,I9r),e(_n,q9r),e(Vr,N9r),e(Vr,Se),e(Se,mC),e(mC,B0e),e(B0e,j9r),e(mC,D9r),e(mC,zJ),e(zJ,G9r),e(mC,O9r),e(Se,V9r),e(Se,gC),e(gC,P0e),e(P0e,X9r),e(gC,z9r),e(gC,QJ),e(QJ,Q9r),e(gC,W9r),e(Se,H9r),e(Se,hC),e(hC,I0e),e(I0e,U9r),e(hC,J9r),e(hC,WJ),e(WJ,Y9r),e(hC,K9r),e(Se,Z9r),e(Se,pC),e(pC,q0e),e(q0e,e$r),e(pC,o$r),e(pC,HJ),e(HJ,r$r),e(pC,t$r),e(Se,a$r),e(Se,uC),e(uC,N0e),e(N0e,n$r),e(uC,s$r),e(uC,UJ),e(UJ,l$r),e(uC,i$r),e(Se,d$r),e(Se,_C),e(_C,j0e),e(j0e,c$r),e(_C,f$r),e(_C,JJ),e(JJ,m$r),e(_C,g$r),e(Se,h$r),e(Se,bC),e(bC,D0e),e(D0e,p$r),e(bC,u$r),e(bC,YJ),e(YJ,_$r),e(bC,b$r),e(Se,v$r),e(Se,vC),e(vC,G0e),e(G0e,F$r),e(vC,T$r),e(vC,KJ),e(KJ,M$r),e(vC,E$r),e(Se,C$r),e(Se,FC),e(FC,O0e),e(O0e,w$r),e(FC,A$r),e(FC,ZJ),e(ZJ,y$r),e(FC,L$r),e(Vr,x$r),M(TC,Vr,null),b(f,Sqe,_),b(f,Gc,_),e(Gc,MC),e(MC,V0e),M(Fx,V0e,null),e(Gc,$$r),e(Gc,X0e),e(X0e,k$r),b(f,Rqe,_),b(f,ur,_),M(Tx,ur,null),e(ur,S$r),e(ur,Oc),e(Oc,R$r),e(Oc,eY),e(eY,B$r),e(Oc,P$r),e(Oc,oY),e(oY,I$r),e(Oc,q$r),e(ur,N$r),e(ur,Mx),e(Mx,j$r),e(Mx,z0e),e(z0e,D$r),e(Mx,G$r),e(ur,O$r),e(ur,Xt),M(Ex,Xt,null),e(Xt,V$r),e(Xt,Q0e),e(Q0e,X$r),e(Xt,z$r),e(Xt,Vc),e(Vc,Q$r),e(Vc,W0e),e(W0e,W$r),e(Vc,H$r),e(Vc,rY),e(rY,U$r),e(Vc,J$r),e(Xt,Y$r),M(EC,Xt,null),e(ur,K$r),e(ur,Xr),M(Cx,Xr,null),e(Xr,Z$r),e(Xr,H0e),e(H0e,ekr),e(Xr,okr),e(Xr,bn),e(bn,rkr),e(bn,U0e),e(U0e,tkr),e(bn,akr),e(bn,J0e),e(J0e,nkr),e(bn,skr),e(bn,Y0e),e(Y0e,lkr),e(bn,ikr),e(Xr,dkr),e(Xr,xe),e(xe,CC),e(CC,K0e),e(K0e,ckr),e(CC,fkr),e(CC,tY),e(tY,mkr),e(CC,gkr),e(xe,hkr),e(xe,wC),e(wC,Z0e),e(Z0e,pkr),e(wC,ukr),e(wC,aY),e(aY,_kr),e(wC,bkr),e(xe,vkr),e(xe,AC),e(AC,eTe),e(eTe,Fkr),e(AC,Tkr),e(AC,nY),e(nY,Mkr),e(AC,Ekr),e(xe,Ckr),e(xe,yC),e(yC,oTe),e(oTe,wkr),e(yC,Akr),e(yC,sY),e(sY,ykr),e(yC,Lkr),e(xe,xkr),e(xe,LC),e(LC,rTe),e(rTe,$kr),e(LC,kkr),e(LC,lY),e(lY,Skr),e(LC,Rkr),e(xe,Bkr),e(xe,xC),e(xC,tTe),e(tTe,Pkr),e(xC,Ikr),e(xC,iY),e(iY,qkr),e(xC,Nkr),e(xe,jkr),e(xe,$C),e($C,aTe),e(aTe,Dkr),e($C,Gkr),e($C,dY),e(dY,Okr),e($C,Vkr),e(xe,Xkr),e(xe,kC),e(kC,nTe),e(nTe,zkr),e(kC,Qkr),e(kC,cY),e(cY,Wkr),e(kC,Hkr),e(xe,Ukr),e(xe,SC),e(SC,sTe),e(sTe,Jkr),e(SC,Ykr),e(SC,fY),e(fY,Kkr),e(SC,Zkr),e(xe,eSr),e(xe,RC),e(RC,lTe),e(lTe,oSr),e(RC,rSr),e(RC,mY),e(mY,tSr),e(RC,aSr),e(Xr,nSr),M(BC,Xr,null),b(f,Bqe,_),b(f,Xc,_),e(Xc,PC),e(PC,iTe),M(wx,iTe,null),e(Xc,sSr),e(Xc,dTe),e(dTe,lSr),b(f,Pqe,_),b(f,_r,_),M(Ax,_r,null),e(_r,iSr),e(_r,zc),e(zc,dSr),e(zc,gY),e(gY,cSr),e(zc,fSr),e(zc,hY),e(hY,mSr),e(zc,gSr),e(_r,hSr),e(_r,yx),e(yx,pSr),e(yx,cTe),e(cTe,uSr),e(yx,_Sr),e(_r,bSr),e(_r,zt),M(Lx,zt,null),e(zt,vSr),e(zt,fTe),e(fTe,FSr),e(zt,TSr),e(zt,Qc),e(Qc,MSr),e(Qc,mTe),e(mTe,ESr),e(Qc,CSr),e(Qc,pY),e(pY,wSr),e(Qc,ASr),e(zt,ySr),M(IC,zt,null),e(_r,LSr),e(_r,zr),M(xx,zr,null),e(zr,xSr),e(zr,gTe),e(gTe,$Sr),e(zr,kSr),e(zr,vn),e(vn,SSr),e(vn,hTe),e(hTe,RSr),e(vn,BSr),e(vn,pTe),e(pTe,PSr),e(vn,ISr),e(vn,uTe),e(uTe,qSr),e(vn,NSr),e(zr,jSr),e(zr,$e),e($e,qC),e(qC,_Te),e(_Te,DSr),e(qC,GSr),e(qC,uY),e(uY,OSr),e(qC,VSr),e($e,XSr),e($e,NC),e(NC,bTe),e(bTe,zSr),e(NC,QSr),e(NC,_Y),e(_Y,WSr),e(NC,HSr),e($e,USr),e($e,jC),e(jC,vTe),e(vTe,JSr),e(jC,YSr),e(jC,bY),e(bY,KSr),e(jC,ZSr),e($e,eRr),e($e,DC),e(DC,FTe),e(FTe,oRr),e(DC,rRr),e(DC,vY),e(vY,tRr),e(DC,aRr),e($e,nRr),e($e,GC),e(GC,TTe),e(TTe,sRr),e(GC,lRr),e(GC,FY),e(FY,iRr),e(GC,dRr),e($e,cRr),e($e,OC),e(OC,MTe),e(MTe,fRr),e(OC,mRr),e(OC,TY),e(TY,gRr),e(OC,hRr),e($e,pRr),e($e,VC),e(VC,ETe),e(ETe,uRr),e(VC,_Rr),e(VC,MY),e(MY,bRr),e(VC,vRr),e($e,FRr),e($e,XC),e(XC,CTe),e(CTe,TRr),e(XC,MRr),e(XC,EY),e(EY,ERr),e(XC,CRr),e($e,wRr),e($e,zC),e(zC,wTe),e(wTe,ARr),e(zC,yRr),e(zC,CY),e(CY,LRr),e(zC,xRr),e($e,$Rr),e($e,QC),e(QC,ATe),e(ATe,kRr),e(QC,SRr),e(QC,wY),e(wY,RRr),e(QC,BRr),e(zr,PRr),M(WC,zr,null),b(f,Iqe,_),b(f,Wc,_),e(Wc,HC),e(HC,yTe),M($x,yTe,null),e(Wc,IRr),e(Wc,LTe),e(LTe,qRr),b(f,qqe,_),b(f,br,_),M(kx,br,null),e(br,NRr),e(br,Hc),e(Hc,jRr),e(Hc,AY),e(AY,DRr),e(Hc,GRr),e(Hc,yY),e(yY,ORr),e(Hc,VRr),e(br,XRr),e(br,Sx),e(Sx,zRr),e(Sx,xTe),e(xTe,QRr),e(Sx,WRr),e(br,HRr),e(br,Qt),M(Rx,Qt,null),e(Qt,URr),e(Qt,$Te),e($Te,JRr),e(Qt,YRr),e(Qt,Uc),e(Uc,KRr),e(Uc,kTe),e(kTe,ZRr),e(Uc,eBr),e(Uc,LY),e(LY,oBr),e(Uc,rBr),e(Qt,tBr),M(UC,Qt,null),e(br,aBr),e(br,Qr),M(Bx,Qr,null),e(Qr,nBr),e(Qr,STe),e(STe,sBr),e(Qr,lBr),e(Qr,Fn),e(Fn,iBr),e(Fn,RTe),e(RTe,dBr),e(Fn,cBr),e(Fn,BTe),e(BTe,fBr),e(Fn,mBr),e(Fn,PTe),e(PTe,gBr),e(Fn,hBr),e(Qr,pBr),e(Qr,De),e(De,JC),e(JC,ITe),e(ITe,uBr),e(JC,_Br),e(JC,xY),e(xY,bBr),e(JC,vBr),e(De,FBr),e(De,YC),e(YC,qTe),e(qTe,TBr),e(YC,MBr),e(YC,$Y),e($Y,EBr),e(YC,CBr),e(De,wBr),e(De,KC),e(KC,NTe),e(NTe,ABr),e(KC,yBr),e(KC,kY),e(kY,LBr),e(KC,xBr),e(De,$Br),e(De,ZC),e(ZC,jTe),e(jTe,kBr),e(ZC,SBr),e(ZC,SY),e(SY,RBr),e(ZC,BBr),e(De,PBr),e(De,e3),e(e3,DTe),e(DTe,IBr),e(e3,qBr),e(e3,RY),e(RY,NBr),e(e3,jBr),e(De,DBr),e(De,o3),e(o3,GTe),e(GTe,GBr),e(o3,OBr),e(o3,BY),e(BY,VBr),e(o3,XBr),e(De,zBr),e(De,r3),e(r3,OTe),e(OTe,QBr),e(r3,WBr),e(r3,PY),e(PY,HBr),e(r3,UBr),e(De,JBr),e(De,t3),e(t3,VTe),e(VTe,YBr),e(t3,KBr),e(t3,IY),e(IY,ZBr),e(t3,ePr),e(Qr,oPr),M(a3,Qr,null),b(f,Nqe,_),b(f,Jc,_),e(Jc,n3),e(n3,XTe),M(Px,XTe,null),e(Jc,rPr),e(Jc,zTe),e(zTe,tPr),b(f,jqe,_),b(f,vr,_),M(Ix,vr,null),e(vr,aPr),e(vr,Yc),e(Yc,nPr),e(Yc,qY),e(qY,sPr),e(Yc,lPr),e(Yc,NY),e(NY,iPr),e(Yc,dPr),e(vr,cPr),e(vr,qx),e(qx,fPr),e(qx,QTe),e(QTe,mPr),e(qx,gPr),e(vr,hPr),e(vr,Wt),M(Nx,Wt,null),e(Wt,pPr),e(Wt,WTe),e(WTe,uPr),e(Wt,_Pr),e(Wt,Kc),e(Kc,bPr),e(Kc,HTe),e(HTe,vPr),e(Kc,FPr),e(Kc,jY),e(jY,TPr),e(Kc,MPr),e(Wt,EPr),M(s3,Wt,null),e(vr,CPr),e(vr,Wr),M(jx,Wr,null),e(Wr,wPr),e(Wr,UTe),e(UTe,APr),e(Wr,yPr),e(Wr,Tn),e(Tn,LPr),e(Tn,JTe),e(JTe,xPr),e(Tn,$Pr),e(Tn,YTe),e(YTe,kPr),e(Tn,SPr),e(Tn,KTe),e(KTe,RPr),e(Tn,BPr),e(Wr,PPr),e(Wr,Ge),e(Ge,l3),e(l3,ZTe),e(ZTe,IPr),e(l3,qPr),e(l3,DY),e(DY,NPr),e(l3,jPr),e(Ge,DPr),e(Ge,i3),e(i3,eMe),e(eMe,GPr),e(i3,OPr),e(i3,GY),e(GY,VPr),e(i3,XPr),e(Ge,zPr),e(Ge,d3),e(d3,oMe),e(oMe,QPr),e(d3,WPr),e(d3,OY),e(OY,HPr),e(d3,UPr),e(Ge,JPr),e(Ge,c3),e(c3,rMe),e(rMe,YPr),e(c3,KPr),e(c3,VY),e(VY,ZPr),e(c3,eIr),e(Ge,oIr),e(Ge,f3),e(f3,tMe),e(tMe,rIr),e(f3,tIr),e(f3,XY),e(XY,aIr),e(f3,nIr),e(Ge,sIr),e(Ge,m3),e(m3,aMe),e(aMe,lIr),e(m3,iIr),e(m3,zY),e(zY,dIr),e(m3,cIr),e(Ge,fIr),e(Ge,g3),e(g3,nMe),e(nMe,mIr),e(g3,gIr),e(g3,QY),e(QY,hIr),e(g3,pIr),e(Ge,uIr),e(Ge,h3),e(h3,sMe),e(sMe,_Ir),e(h3,bIr),e(h3,WY),e(WY,vIr),e(h3,FIr),e(Wr,TIr),M(p3,Wr,null),b(f,Dqe,_),b(f,Zc,_),e(Zc,u3),e(u3,lMe),M(Dx,lMe,null),e(Zc,MIr),e(Zc,iMe),e(iMe,EIr),b(f,Gqe,_),b(f,Fr,_),M(Gx,Fr,null),e(Fr,CIr),e(Fr,ef),e(ef,wIr),e(ef,HY),e(HY,AIr),e(ef,yIr),e(ef,UY),e(UY,LIr),e(ef,xIr),e(Fr,$Ir),e(Fr,Ox),e(Ox,kIr),e(Ox,dMe),e(dMe,SIr),e(Ox,RIr),e(Fr,BIr),e(Fr,Ht),M(Vx,Ht,null),e(Ht,PIr),e(Ht,cMe),e(cMe,IIr),e(Ht,qIr),e(Ht,of),e(of,NIr),e(of,fMe),e(fMe,jIr),e(of,DIr),e(of,JY),e(JY,GIr),e(of,OIr),e(Ht,VIr),M(_3,Ht,null),e(Fr,XIr),e(Fr,Hr),M(Xx,Hr,null),e(Hr,zIr),e(Hr,mMe),e(mMe,QIr),e(Hr,WIr),e(Hr,Mn),e(Mn,HIr),e(Mn,gMe),e(gMe,UIr),e(Mn,JIr),e(Mn,hMe),e(hMe,YIr),e(Mn,KIr),e(Mn,pMe),e(pMe,ZIr),e(Mn,eqr),e(Hr,oqr),e(Hr,uMe),e(uMe,b3),e(b3,_Me),e(_Me,rqr),e(b3,tqr),e(b3,YY),e(YY,aqr),e(b3,nqr),e(Hr,sqr),M(v3,Hr,null),b(f,Oqe,_),b(f,rf,_),e(rf,F3),e(F3,bMe),M(zx,bMe,null),e(rf,lqr),e(rf,vMe),e(vMe,iqr),b(f,Vqe,_),b(f,Tr,_),M(Qx,Tr,null),e(Tr,dqr),e(Tr,tf),e(tf,cqr),e(tf,KY),e(KY,fqr),e(tf,mqr),e(tf,ZY),e(ZY,gqr),e(tf,hqr),e(Tr,pqr),e(Tr,Wx),e(Wx,uqr),e(Wx,FMe),e(FMe,_qr),e(Wx,bqr),e(Tr,vqr),e(Tr,Ut),M(Hx,Ut,null),e(Ut,Fqr),e(Ut,TMe),e(TMe,Tqr),e(Ut,Mqr),e(Ut,af),e(af,Eqr),e(af,MMe),e(MMe,Cqr),e(af,wqr),e(af,eK),e(eK,Aqr),e(af,yqr),e(Ut,Lqr),M(T3,Ut,null),e(Tr,xqr),e(Tr,Ur),M(Ux,Ur,null),e(Ur,$qr),e(Ur,EMe),e(EMe,kqr),e(Ur,Sqr),e(Ur,En),e(En,Rqr),e(En,CMe),e(CMe,Bqr),e(En,Pqr),e(En,wMe),e(wMe,Iqr),e(En,qqr),e(En,AMe),e(AMe,Nqr),e(En,jqr),e(Ur,Dqr),e(Ur,Jx),e(Jx,M3),e(M3,yMe),e(yMe,Gqr),e(M3,Oqr),e(M3,oK),e(oK,Vqr),e(M3,Xqr),e(Jx,zqr),e(Jx,E3),e(E3,LMe),e(LMe,Qqr),e(E3,Wqr),e(E3,rK),e(rK,Hqr),e(E3,Uqr),e(Ur,Jqr),M(C3,Ur,null),b(f,Xqe,_),b(f,nf,_),e(nf,w3),e(w3,xMe),M(Yx,xMe,null),e(nf,Yqr),e(nf,$Me),e($Me,Kqr),b(f,zqe,_),b(f,Mr,_),M(Kx,Mr,null),e(Mr,Zqr),e(Mr,sf),e(sf,eNr),e(sf,tK),e(tK,oNr),e(sf,rNr),e(sf,aK),e(aK,tNr),e(sf,aNr),e(Mr,nNr),e(Mr,Zx),e(Zx,sNr),e(Zx,kMe),e(kMe,lNr),e(Zx,iNr),e(Mr,dNr),e(Mr,Jt),M(e9,Jt,null),e(Jt,cNr),e(Jt,SMe),e(SMe,fNr),e(Jt,mNr),e(Jt,lf),e(lf,gNr),e(lf,RMe),e(RMe,hNr),e(lf,pNr),e(lf,nK),e(nK,uNr),e(lf,_Nr),e(Jt,bNr),M(A3,Jt,null),e(Mr,vNr),e(Mr,Jr),M(o9,Jr,null),e(Jr,FNr),e(Jr,BMe),e(BMe,TNr),e(Jr,MNr),e(Jr,Cn),e(Cn,ENr),e(Cn,PMe),e(PMe,CNr),e(Cn,wNr),e(Cn,IMe),e(IMe,ANr),e(Cn,yNr),e(Cn,qMe),e(qMe,LNr),e(Cn,xNr),e(Jr,$Nr),e(Jr,NMe),e(NMe,y3),e(y3,jMe),e(jMe,kNr),e(y3,SNr),e(y3,sK),e(sK,RNr),e(y3,BNr),e(Jr,PNr),M(L3,Jr,null),Qqe=!0},p(f,[_]){const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),_f.$set(r9);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),ug.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),Ug.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Eh.$set(OMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),Ch.$set(t9);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),Oh.$set(VMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Vh.$set(wn);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Qh.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Iu.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),Nu.$set(QMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),A_.$set(a9);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),L_.$set(WMe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),m1.$set(n9);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),h1.$set(HMe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),Y1.$set(s9);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),Z1.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),b7.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),F7.$set(YMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),pb.$set(df);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),_b.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),Hb.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),Jb.$set(e4e);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),t2.$set(l9);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),n2.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),D2.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),O2.$set(t4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),x5.$set(Kr);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),k5.$set(i9);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),B5.$set(a4e);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),I5.$set(d9);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),U5.$set(n4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Y5.$set(Zr);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),ev.$set(s4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),rv.$set(cf);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),mv.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),hv.$set(i4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Fv.$set(y);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),Mv.$set(x3);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),Sv.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),Bv.$set(c4e);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),Nv.$set($3);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),Dv.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),Qv.$set(m4e);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),Hv.$set(k3);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),Zv.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),oF.$set(h4e);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),nF.$set(S3);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),lF.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),cF.$set(u4e);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),mF.$set(R3);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),bF.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),FF.$set(b4e);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),EF.$set(B3);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),wF.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),u0.$set(F4e);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),b0.$set(P3);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),O0.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),X0.$set(M4e);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),tT.$set(I3);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),nT.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),dT.$set(C4e);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),fT.$set(q3);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),ST.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),BT.$set(A4e);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),zT.$set(N3);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),WT.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),FM.$set(L4e);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),MM.$set(j3);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),DM.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),OM.$set($4e);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),zM.$set(D3);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),WM.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),UM.$set(S4e);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),YM.$set(G3);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),b4.$set(R4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),F4.$set(B4e);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),G4.$set(O3);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),V4.$set(P4e);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),z4.$set(I4e);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),W4.$set(V3);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),U4.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),Y4.$set(N4e);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),EE.$set(X3);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),wE.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),PE.$set(D4e);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),qE.$set(z3);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),JE.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),KE.$set(O4e);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),dC.$set(Q3);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),fC.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),TC.$set(X4e);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),EC.$set(W3);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),BC.$set(z4e);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),IC.$set(Q4e);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),WC.$set(H3);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),UC.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),a3.$set(H4e);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),s3.$set(U3);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),p3.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),_3.$set(J4e);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),v3.$set(J3);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),T3.$set(Y4e);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),C3.$set(K4e);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),A3.$set(Y3);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),L3.$set(Z4e)},i(f){Qqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(_f.$$.fragment,f),E(ZA.$$.fragment,f),E(e6.$$.fragment,f),E(t6.$$.fragment,f),E(ug.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(s6.$$.fragment,f),E(d6.$$.fragment,f),E(Ug.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(p6.$$.fragment,f),E(Eh.$$.fragment,f),E(Ch.$$.fragment,f),E(u6.$$.fragment,f),E(_6.$$.fragment,f),E(b6.$$.fragment,f),E(T6.$$.fragment,f),E(Oh.$$.fragment,f),E(Vh.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(A6.$$.fragment,f),E(Qh.$$.fragment,f),E(y6.$$.fragment,f),E(Iu.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E(Nu.$$.fragment,f),E(S6.$$.fragment,f),E(A_.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(L_.$$.fragment,f),E(q6.$$.fragment,f),E(m1.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(h1.$$.fragment,f),E(O6.$$.fragment,f),E(Y1.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(Z1.$$.fragment,f),E(W6.$$.fragment,f),E(b7.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(F7.$$.fragment,f),E(K6.$$.fragment,f),E(pb.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(_b.$$.fragment,f),E(ty.$$.fragment,f),E(Hb.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Jb.$$.fragment,f),E(iy.$$.fragment,f),E(t2.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(n2.$$.fragment,f),E(gy.$$.fragment,f),E(D2.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(O2.$$.fragment,f),E(by.$$.fragment,f),E(x5.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(k5.$$.fragment,f),E(Ey.$$.fragment,f),E(B5.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(I5.$$.fragment,f),E(Ly.$$.fragment,f),E(U5.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Y5.$$.fragment,f),E(Ry.$$.fragment,f),E(ev.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(rv.$$.fragment,f),E(Ny.$$.fragment,f),E(mv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(hv.$$.fragment,f),E(Vy.$$.fragment,f),E(Fv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Mv.$$.fragment,f),E(Hy.$$.fragment,f),E(Sv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(Bv.$$.fragment,f),E(Zy.$$.fragment,f),E(Nv.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(Dv.$$.fragment,f),E(nL.$$.fragment,f),E(Qv.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(Hv.$$.fragment,f),E(cL.$$.fragment,f),E(Zv.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(oF.$$.fragment,f),E(pL.$$.fragment,f),E(nF.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(lF.$$.fragment,f),E(TL.$$.fragment,f),E(cF.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(mF.$$.fragment,f),E(AL.$$.fragment,f),E(bF.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(FF.$$.fragment,f),E(kL.$$.fragment,f),E(EF.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(wF.$$.fragment,f),E(IL.$$.fragment,f),E(u0.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(b0.$$.fragment,f),E(GL.$$.fragment,f),E(O0.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(X0.$$.fragment,f),E(QL.$$.fragment,f),E(tT.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(nT.$$.fragment,f),E(YL.$$.fragment,f),E(dT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(fT.$$.fragment,f),E(r8.$$.fragment,f),E(ST.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(BT.$$.fragment,f),E(l8.$$.fragment,f),E(zT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(WT.$$.fragment,f),E(m8.$$.fragment,f),E(FM.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(MM.$$.fragment,f),E(_8.$$.fragment,f),E(DM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(OM.$$.fragment,f),E(M8.$$.fragment,f),E(zM.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(WM.$$.fragment,f),E(L8.$$.fragment,f),E(UM.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(YM.$$.fragment,f),E(R8.$$.fragment,f),E(b4.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(F4.$$.fragment,f),E(N8.$$.fragment,f),E(G4.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(V4.$$.fragment,f),E(V8.$$.fragment,f),E(z4.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(W4.$$.fragment,f),E(H8.$$.fragment,f),E(U4.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(Y4.$$.fragment,f),E(Z8.$$.fragment,f),E(EE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(wE.$$.fragment,f),E(ax.$$.fragment,f),E(PE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(qE.$$.fragment,f),E(dx.$$.fragment,f),E(JE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(KE.$$.fragment,f),E(hx.$$.fragment,f),E(dC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(fC.$$.fragment,f),E(vx.$$.fragment,f),E(TC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(EC.$$.fragment,f),E(Cx.$$.fragment,f),E(BC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(IC.$$.fragment,f),E(xx.$$.fragment,f),E(WC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(UC.$$.fragment,f),E(Bx.$$.fragment,f),E(a3.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(s3.$$.fragment,f),E(jx.$$.fragment,f),E(p3.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(_3.$$.fragment,f),E(Xx.$$.fragment,f),E(v3.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(T3.$$.fragment,f),E(Ux.$$.fragment,f),E(C3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e9.$$.fragment,f),E(A3.$$.fragment,f),E(o9.$$.fragment,f),E(L3.$$.fragment,f),Qqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(_f.$$.fragment,f),C(ZA.$$.fragment,f),C(e6.$$.fragment,f),C(t6.$$.fragment,f),C(ug.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(s6.$$.fragment,f),C(d6.$$.fragment,f),C(Ug.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(p6.$$.fragment,f),C(Eh.$$.fragment,f),C(Ch.$$.fragment,f),C(u6.$$.fragment,f),C(_6.$$.fragment,f),C(b6.$$.fragment,f),C(T6.$$.fragment,f),C(Oh.$$.fragment,f),C(Vh.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(A6.$$.fragment,f),C(Qh.$$.fragment,f),C(y6.$$.fragment,f),C(Iu.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C(Nu.$$.fragment,f),C(S6.$$.fragment,f),C(A_.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(L_.$$.fragment,f),C(q6.$$.fragment,f),C(m1.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(h1.$$.fragment,f),C(O6.$$.fragment,f),C(Y1.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(Z1.$$.fragment,f),C(W6.$$.fragment,f),C(b7.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(F7.$$.fragment,f),C(K6.$$.fragment,f),C(pb.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(_b.$$.fragment,f),C(ty.$$.fragment,f),C(Hb.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Jb.$$.fragment,f),C(iy.$$.fragment,f),C(t2.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(n2.$$.fragment,f),C(gy.$$.fragment,f),C(D2.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(O2.$$.fragment,f),C(by.$$.fragment,f),C(x5.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(k5.$$.fragment,f),C(Ey.$$.fragment,f),C(B5.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(I5.$$.fragment,f),C(Ly.$$.fragment,f),C(U5.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Y5.$$.fragment,f),C(Ry.$$.fragment,f),C(ev.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(rv.$$.fragment,f),C(Ny.$$.fragment,f),C(mv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(hv.$$.fragment,f),C(Vy.$$.fragment,f),C(Fv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Mv.$$.fragment,f),C(Hy.$$.fragment,f),C(Sv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(Bv.$$.fragment,f),C(Zy.$$.fragment,f),C(Nv.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(Dv.$$.fragment,f),C(nL.$$.fragment,f),C(Qv.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(Hv.$$.fragment,f),C(cL.$$.fragment,f),C(Zv.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(oF.$$.fragment,f),C(pL.$$.fragment,f),C(nF.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(lF.$$.fragment,f),C(TL.$$.fragment,f),C(cF.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(mF.$$.fragment,f),C(AL.$$.fragment,f),C(bF.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(FF.$$.fragment,f),C(kL.$$.fragment,f),C(EF.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(wF.$$.fragment,f),C(IL.$$.fragment,f),C(u0.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(b0.$$.fragment,f),C(GL.$$.fragment,f),C(O0.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(X0.$$.fragment,f),C(QL.$$.fragment,f),C(tT.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(nT.$$.fragment,f),C(YL.$$.fragment,f),C(dT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(fT.$$.fragment,f),C(r8.$$.fragment,f),C(ST.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(BT.$$.fragment,f),C(l8.$$.fragment,f),C(zT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(WT.$$.fragment,f),C(m8.$$.fragment,f),C(FM.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(MM.$$.fragment,f),C(_8.$$.fragment,f),C(DM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(OM.$$.fragment,f),C(M8.$$.fragment,f),C(zM.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(WM.$$.fragment,f),C(L8.$$.fragment,f),C(UM.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(YM.$$.fragment,f),C(R8.$$.fragment,f),C(b4.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(F4.$$.fragment,f),C(N8.$$.fragment,f),C(G4.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(V4.$$.fragment,f),C(V8.$$.fragment,f),C(z4.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(W4.$$.fragment,f),C(H8.$$.fragment,f),C(U4.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(Y4.$$.fragment,f),C(Z8.$$.fragment,f),C(EE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(wE.$$.fragment,f),C(ax.$$.fragment,f),C(PE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(qE.$$.fragment,f),C(dx.$$.fragment,f),C(JE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(KE.$$.fragment,f),C(hx.$$.fragment,f),C(dC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(fC.$$.fragment,f),C(vx.$$.fragment,f),C(TC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(EC.$$.fragment,f),C(Cx.$$.fragment,f),C(BC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(IC.$$.fragment,f),C(xx.$$.fragment,f),C(WC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(UC.$$.fragment,f),C(Bx.$$.fragment,f),C(a3.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(s3.$$.fragment,f),C(jx.$$.fragment,f),C(p3.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(_3.$$.fragment,f),C(Xx.$$.fragment,f),C(v3.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(T3.$$.fragment,f),C(Ux.$$.fragment,f),C(C3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e9.$$.fragment,f),C(A3.$$.fragment,f),C(o9.$$.fragment,f),C(L3.$$.fragment,f),Qqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(VPe),f&&t(hi),w(YA),f&&t(XPe),f&&t($n),f&&t(zPe),w(KA,f),f&&t(QPe),f&&t(v$),f&&t(WPe),w(_f,f),f&&t(HPe),f&&t(pi),w(ZA),f&&t(UPe),f&&t(Co),w(e6),w(t6),w(ug),w(a6),f&&t(JPe),f&&t(_i),w(n6),f&&t(YPe),f&&t(wo),w(s6),w(d6),w(Ug),w(c6),f&&t(KPe),f&&t(bi),w(f6),f&&t(ZPe),f&&t(Ao),w(m6),w(p6),w(Eh),w(Ch),w(u6),f&&t(eIe),f&&t(vi),w(_6),f&&t(oIe),f&&t(yo),w(b6),w(T6),w(Oh),w(Vh),w(M6),f&&t(rIe),f&&t(Ti),w(E6),f&&t(tIe),f&&t(Lo),w(C6),w(A6),w(Qh),w(y6),w(Iu),f&&t(aIe),f&&t(Ci),w(L6),f&&t(nIe),f&&t(xo),w(x6),w(k6),w(Nu),w(S6),w(A_),f&&t(sIe),f&&t(yi),w(R6),f&&t(lIe),f&&t($o),w(B6),w(I6),w(L_),w(q6),w(m1),f&&t(iIe),f&&t($i),w(N6),f&&t(dIe),f&&t(ko),w(j6),w(G6),w(h1),w(O6),w(Y1),f&&t(cIe),f&&t(Ri),w(V6),f&&t(fIe),f&&t(So),w(X6),w(Q6),w(Z1),w(W6),w(b7),f&&t(mIe),f&&t(Ii),w(H6),f&&t(gIe),f&&t(Ro),w(U6),w(Y6),w(F7),w(K6),w(pb),f&&t(hIe),f&&t(ji),w(Z6),f&&t(pIe),f&&t(Bo),w(ey),w(ry),w(_b),w(ty),w(Hb),f&&t(uIe),f&&t(Oi),w(ay),f&&t(_Ie),f&&t(Po),w(ny),w(ly),w(Jb),w(iy),w(t2),f&&t(bIe),f&&t(zi),w(dy),f&&t(vIe),f&&t(Io),w(cy),w(my),w(n2),w(gy),w(D2),f&&t(FIe),f&&t(Hi),w(hy),f&&t(TIe),f&&t(qo),w(py),w(_y),w(O2),w(by),w(x5),f&&t(MIe),f&&t(Yi),w(vy),f&&t(EIe),f&&t(No),w(Fy),w(My),w(k5),w(Ey),w(B5),f&&t(CIe),f&&t(ed),w(Cy),f&&t(wIe),f&&t(jo),w(wy),w(yy),w(I5),w(Ly),w(U5),f&&t(AIe),f&&t(td),w(xy),f&&t(yIe),f&&t(Do),w($y),w(Sy),w(Y5),w(Ry),w(ev),f&&t(LIe),f&&t(sd),w(By),f&&t(xIe),f&&t(Go),w(Py),w(qy),w(rv),w(Ny),w(mv),f&&t($Ie),f&&t(dd),w(jy),f&&t(kIe),f&&t(Oo),w(Dy),w(Oy),w(hv),w(Vy),w(Fv),f&&t(SIe),f&&t(md),w(Xy),f&&t(RIe),f&&t(Vo),w(zy),w(Wy),w(Mv),w(Hy),w(Sv),f&&t(BIe),f&&t(pd),w(Uy),f&&t(PIe),f&&t(Xo),w(Jy),w(Ky),w(Bv),w(Zy),w(Nv),f&&t(IIe),f&&t(bd),w(oL),f&&t(qIe),f&&t(zo),w(rL),w(aL),w(Dv),w(nL),w(Qv),f&&t(NIe),f&&t(Td),w(sL),f&&t(jIe),f&&t(Qo),w(lL),w(dL),w(Hv),w(cL),w(Zv),f&&t(DIe),f&&t(wd),w(fL),f&&t(GIe),f&&t(Wo),w(mL),w(hL),w(oF),w(pL),w(nF),f&&t(OIe),f&&t(Ld),w(_L),f&&t(VIe),f&&t(Ho),w(bL),w(FL),w(lF),w(TL),w(cF),f&&t(XIe),f&&t(kd),w(ML),f&&t(zIe),f&&t(Uo),w(EL),w(wL),w(mF),w(AL),w(bF),f&&t(QIe),f&&t(Bd),w(yL),f&&t(WIe),f&&t(Jo),w(LL),w($L),w(FF),w(kL),w(EF),f&&t(HIe),f&&t(qd),w(SL),f&&t(UIe),f&&t(Yo),w(RL),w(PL),w(wF),w(IL),w(u0),f&&t(JIe),f&&t(Dd),w(qL),f&&t(YIe),f&&t(Ko),w(NL),w(DL),w(b0),w(GL),w(O0),f&&t(KIe),f&&t(Vd),w(OL),f&&t(ZIe),f&&t(Zo),w(VL),w(zL),w(X0),w(QL),w(tT),f&&t(eqe),f&&t(Qd),w(WL),f&&t(oqe),f&&t(er),w(HL),w(JL),w(nT),w(YL),w(dT),f&&t(rqe),f&&t(Jd),w(KL),f&&t(tqe),f&&t(or),w(ZL),w(o8),w(fT),w(r8),w(ST),f&&t(aqe),f&&t(Zd),w(t8),f&&t(nqe),f&&t(rr),w(a8),w(s8),w(BT),w(l8),w(zT),f&&t(sqe),f&&t(rc),w(i8),f&&t(lqe),f&&t(tr),w(d8),w(f8),w(WT),w(m8),w(FM),f&&t(iqe),f&&t(nc),w(g8),f&&t(dqe),f&&t(ar),w(h8),w(u8),w(MM),w(_8),w(DM),f&&t(cqe),f&&t(ic),w(b8),f&&t(fqe),f&&t(nr),w(v8),w(T8),w(OM),w(M8),w(zM),f&&t(mqe),f&&t(fc),w(C8),f&&t(gqe),f&&t(sr),w(w8),w(y8),w(WM),w(L8),w(UM),f&&t(hqe),f&&t(hc),w(x8),f&&t(pqe),f&&t(lr),w($8),w(S8),w(YM),w(R8),w(b4),f&&t(uqe),f&&t(_c),w(B8),f&&t(_qe),f&&t(ir),w(P8),w(q8),w(F4),w(N8),w(G4),f&&t(bqe),f&&t(Fc),w(j8),f&&t(vqe),f&&t(dr),w(D8),w(O8),w(V4),w(V8),w(z4),f&&t(Fqe),f&&t(Ec),w(X8),f&&t(Tqe),f&&t(cr),w(z8),w(W8),w(W4),w(H8),w(U4),f&&t(Mqe),f&&t(Ac),w(U8),f&&t(Eqe),f&&t(fr),w(J8),w(K8),w(Y4),w(Z8),w(EE),f&&t(Cqe),f&&t(xc),w(ex),f&&t(wqe),f&&t(mr),w(ox),w(tx),w(wE),w(ax),w(PE),f&&t(Aqe),f&&t(Sc),w(nx),f&&t(yqe),f&&t(gr),w(sx),w(ix),w(qE),w(dx),w(JE),f&&t(Lqe),f&&t(Pc),w(cx),f&&t(xqe),f&&t(hr),w(fx),w(gx),w(KE),w(hx),w(dC),f&&t($qe),f&&t(Nc),w(px),f&&t(kqe),f&&t(pr),w(ux),w(bx),w(fC),w(vx),w(TC),f&&t(Sqe),f&&t(Gc),w(Fx),f&&t(Rqe),f&&t(ur),w(Tx),w(Ex),w(EC),w(Cx),w(BC),f&&t(Bqe),f&&t(Xc),w(wx),f&&t(Pqe),f&&t(_r),w(Ax),w(Lx),w(IC),w(xx),w(WC),f&&t(Iqe),f&&t(Wc),w($x),f&&t(qqe),f&&t(br),w(kx),w(Rx),w(UC),w(Bx),w(a3),f&&t(Nqe),f&&t(Jc),w(Px),f&&t(jqe),f&&t(vr),w(Ix),w(Nx),w(s3),w(jx),w(p3),f&&t(Dqe),f&&t(Zc),w(Dx),f&&t(Gqe),f&&t(Fr),w(Gx),w(Vx),w(_3),w(Xx),w(v3),f&&t(Oqe),f&&t(rf),w(zx),f&&t(Vqe),f&&t(Tr),w(Qx),w(Hx),w(T3),w(Ux),w(C3),f&&t(Xqe),f&&t(nf),w(Yx),f&&t(zqe),f&&t(Mr),w(Kx),w(e9),w(A3),w(o9),w(L3)}}}const cLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fLt(L){return f6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bLt extends l6t{constructor(g){super();i6t(this,g,fLt,dLt,d6t,{})}}export{bLt as default,cLt as metadata};
