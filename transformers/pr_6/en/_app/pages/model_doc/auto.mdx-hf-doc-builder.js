import{S as oSt,i as rSt,s as tSt,e as a,k as l,w as F,t as o,M as aSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as nSt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as szr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function sSt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,Sy,uf,De,We,pi,yn,Ry,Ln,xn,Py,_i,$n,By,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),Sy=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),Ry=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Py=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),By=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ok=s(p);m=r(ok,"NewModelConfig"),ok.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var rk=s(mi);_f=r(rk,"model_type"),rk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var tk=s(gi);hi=r(tk,'"new-model"'),tk.forEach(t),Sy=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),Ry=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var ak=s(Ln);xn=r(ak,"PreTrainedModel"),ak.forEach(t),Py=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),By=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var nk=s(ui);bf=r(nk,"NewModelConfig"),nk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,Sy),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,Ry),e(De,Ln),e(Ln,xn),e(De,Py),e(De,_i),e(_i,$n),e(De,By),e(De,ui),e(ui,bf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,Sy,uf,De,We,pi,yn,Ry,Ln,xn,Py,_i,$n,By,ui,bf,Ca,Qe,Ae,ok,bi,rk,tk,Eo,wa,ak,vf,nk,WOe,Bqe,vi,Ff,Aoe,Iy,QOe,yoe,HOe,Iqe,kn,UOe,Loe,JOe,YOe,xoe,KOe,ZOe,Nqe,Ny,qqe,sk,eVe,jqe,Tf,Dqe,Fi,Mf,$oe,qy,oVe,koe,rVe,Gqe,Co,jy,tVe,Dy,aVe,lk,nVe,sVe,lVe,Gy,iVe,Soe,dVe,cVe,fVe,Er,Oy,mVe,Roe,gVe,hVe,Ti,pVe,Poe,_Ve,uVe,Boe,bVe,vVe,FVe,A,Ef,Ioe,TVe,MVe,ik,EVe,CVe,wVe,Cf,Noe,AVe,yVe,dk,LVe,xVe,$Ve,wf,qoe,kVe,SVe,ck,RVe,PVe,BVe,Af,joe,IVe,NVe,fk,qVe,jVe,DVe,yf,Doe,GVe,OVe,mk,VVe,XVe,zVe,Lf,Goe,WVe,QVe,gk,HVe,UVe,JVe,xf,Ooe,YVe,KVe,hk,ZVe,eXe,oXe,$f,Voe,rXe,tXe,pk,aXe,nXe,sXe,kf,Xoe,lXe,iXe,_k,dXe,cXe,fXe,Sf,zoe,mXe,gXe,uk,hXe,pXe,_Xe,Rf,Woe,uXe,bXe,bk,vXe,FXe,TXe,Pf,Qoe,MXe,EXe,vk,CXe,wXe,AXe,Bf,Hoe,yXe,LXe,Fk,xXe,$Xe,kXe,If,Uoe,SXe,RXe,Tk,PXe,BXe,IXe,Nf,Joe,NXe,qXe,Mk,jXe,DXe,GXe,qf,Yoe,OXe,VXe,Ek,XXe,zXe,WXe,jf,Koe,QXe,HXe,Ck,UXe,JXe,YXe,Df,Zoe,KXe,ZXe,wk,eze,oze,rze,Gf,ere,tze,aze,Ak,nze,sze,lze,Of,ore,ize,dze,yk,cze,fze,mze,Vf,rre,gze,hze,Lk,pze,_ze,uze,Xf,tre,bze,vze,xk,Fze,Tze,Mze,zf,are,Eze,Cze,$k,wze,Aze,yze,Wf,nre,Lze,xze,kk,$ze,kze,Sze,Qf,sre,Rze,Pze,Sk,Bze,Ize,Nze,Hf,lre,qze,jze,Rk,Dze,Gze,Oze,Uf,ire,Vze,Xze,Pk,zze,Wze,Qze,Jf,dre,Hze,Uze,Bk,Jze,Yze,Kze,Yf,cre,Zze,eWe,Ik,oWe,rWe,tWe,Kf,fre,aWe,nWe,Nk,sWe,lWe,iWe,Zf,mre,dWe,cWe,qk,fWe,mWe,gWe,em,gre,hWe,pWe,jk,_We,uWe,bWe,om,hre,vWe,FWe,Dk,TWe,MWe,EWe,rm,pre,CWe,wWe,Gk,AWe,yWe,LWe,tm,_re,xWe,$We,Ok,kWe,SWe,RWe,am,ure,PWe,BWe,Vk,IWe,NWe,qWe,nm,bre,jWe,DWe,Xk,GWe,OWe,VWe,sm,vre,XWe,zWe,zk,WWe,QWe,HWe,lm,Fre,UWe,JWe,Wk,YWe,KWe,ZWe,im,Tre,eQe,oQe,Qk,rQe,tQe,aQe,dm,Mre,nQe,sQe,Hk,lQe,iQe,dQe,cm,Ere,cQe,fQe,Uk,mQe,gQe,hQe,fm,Cre,pQe,_Qe,Jk,uQe,bQe,vQe,mm,wre,FQe,TQe,Yk,MQe,EQe,CQe,gm,Are,wQe,AQe,Kk,yQe,LQe,xQe,hm,yre,$Qe,kQe,Zk,SQe,RQe,PQe,pm,Lre,BQe,IQe,eS,NQe,qQe,jQe,_m,xre,DQe,GQe,oS,OQe,VQe,XQe,um,$re,zQe,WQe,rS,QQe,HQe,UQe,bm,kre,JQe,YQe,tS,KQe,ZQe,eHe,vm,Sre,oHe,rHe,aS,tHe,aHe,nHe,Fm,Rre,sHe,lHe,nS,iHe,dHe,cHe,Tm,Pre,fHe,mHe,sS,gHe,hHe,pHe,Mm,Bre,_He,uHe,lS,bHe,vHe,FHe,Em,Ire,THe,MHe,iS,EHe,CHe,wHe,Cm,Nre,AHe,yHe,dS,LHe,xHe,$He,wm,qre,kHe,SHe,cS,RHe,PHe,BHe,Am,jre,IHe,NHe,fS,qHe,jHe,DHe,ym,Dre,GHe,OHe,mS,VHe,XHe,zHe,Lm,Gre,WHe,QHe,gS,HHe,UHe,JHe,xm,Ore,YHe,KHe,hS,ZHe,eUe,oUe,$m,Vre,rUe,tUe,pS,aUe,nUe,sUe,km,Xre,lUe,iUe,_S,dUe,cUe,fUe,Sm,zre,mUe,gUe,uS,hUe,pUe,_Ue,Rm,Wre,uUe,bUe,bS,vUe,FUe,TUe,Pm,Qre,MUe,EUe,vS,CUe,wUe,AUe,Bm,Hre,yUe,LUe,FS,xUe,$Ue,kUe,Im,Ure,SUe,RUe,TS,PUe,BUe,IUe,Nm,Jre,NUe,qUe,MS,jUe,DUe,GUe,qm,Yre,OUe,VUe,ES,XUe,zUe,WUe,jm,Kre,QUe,HUe,CS,UUe,JUe,YUe,Dm,Zre,KUe,ZUe,wS,eJe,oJe,rJe,Gm,ete,tJe,aJe,AS,nJe,sJe,lJe,Om,ote,iJe,dJe,yS,cJe,fJe,mJe,Vm,rte,gJe,hJe,LS,pJe,_Je,uJe,Xm,tte,bJe,vJe,xS,FJe,TJe,MJe,zm,ate,EJe,CJe,$S,wJe,AJe,yJe,Wm,nte,LJe,xJe,kS,$Je,kJe,SJe,Qm,ste,RJe,PJe,SS,BJe,IJe,NJe,Hm,lte,qJe,jJe,RS,DJe,GJe,OJe,Um,ite,VJe,XJe,PS,zJe,WJe,QJe,Jm,dte,HJe,UJe,BS,JJe,YJe,KJe,Ym,cte,ZJe,eYe,IS,oYe,rYe,tYe,Km,fte,aYe,nYe,NS,sYe,lYe,iYe,Zm,mte,dYe,cYe,qS,fYe,mYe,gYe,eg,gte,hYe,pYe,jS,_Ye,uYe,bYe,og,hte,vYe,FYe,DS,TYe,MYe,EYe,rg,pte,CYe,wYe,GS,AYe,yYe,LYe,tg,_te,xYe,$Ye,OS,kYe,SYe,RYe,ag,ute,PYe,BYe,VS,IYe,NYe,qYe,ng,bte,jYe,DYe,XS,GYe,OYe,VYe,sg,vte,XYe,zYe,zS,WYe,QYe,HYe,lg,Fte,UYe,JYe,WS,YYe,KYe,ZYe,ig,Tte,eKe,oKe,QS,rKe,tKe,aKe,dg,Mte,nKe,sKe,HS,lKe,iKe,dKe,cg,Ete,cKe,fKe,US,mKe,gKe,hKe,fg,Cte,pKe,_Ke,JS,uKe,bKe,vKe,mg,wte,FKe,TKe,YS,MKe,EKe,CKe,gg,Ate,wKe,AKe,KS,yKe,LKe,xKe,hg,yte,$Ke,kKe,ZS,SKe,RKe,PKe,pg,Lte,BKe,IKe,eR,NKe,qKe,jKe,_g,xte,DKe,GKe,oR,OKe,VKe,XKe,ug,$te,zKe,WKe,rR,QKe,HKe,UKe,bg,kte,JKe,YKe,tR,KKe,ZKe,eZe,vg,Ste,oZe,rZe,aR,tZe,aZe,nZe,Fg,Rte,sZe,lZe,nR,iZe,dZe,cZe,Tg,Pte,fZe,mZe,sR,gZe,hZe,pZe,Mg,Bte,_Ze,uZe,lR,bZe,vZe,FZe,Eg,Ite,TZe,MZe,iR,EZe,CZe,wZe,Cg,Nte,AZe,yZe,dR,LZe,xZe,$Ze,wg,kZe,Ag,Vy,SZe,qte,RZe,Oqe,Mi,yg,jte,Xy,PZe,Dte,BZe,Vqe,wo,zy,IZe,Wy,NZe,cR,qZe,jZe,DZe,Qy,GZe,Gte,OZe,VZe,XZe,Cr,Hy,zZe,Ote,WZe,QZe,Aa,HZe,Vte,UZe,JZe,Xte,YZe,KZe,zte,ZZe,eeo,oeo,k,Sn,Wte,reo,teo,fR,aeo,neo,mR,seo,leo,ieo,Rn,Qte,deo,ceo,gR,feo,meo,hR,geo,heo,peo,Pn,Hte,_eo,ueo,pR,beo,veo,_R,Feo,Teo,Meo,Lg,Ute,Eeo,Ceo,uR,weo,Aeo,yeo,Bn,Jte,Leo,xeo,bR,$eo,keo,vR,Seo,Reo,Peo,xg,Yte,Beo,Ieo,FR,Neo,qeo,jeo,$g,Kte,Deo,Geo,TR,Oeo,Veo,Xeo,kg,Zte,zeo,Weo,MR,Qeo,Heo,Ueo,In,eae,Jeo,Yeo,ER,Keo,Zeo,CR,eoo,ooo,roo,Nn,oae,too,aoo,wR,noo,soo,AR,loo,ioo,doo,qn,rae,coo,foo,yR,moo,goo,LR,hoo,poo,_oo,Sg,tae,uoo,boo,xR,voo,Foo,Too,Rg,aae,Moo,Eoo,$R,Coo,woo,Aoo,jn,nae,yoo,Loo,kR,xoo,$oo,SR,koo,Soo,Roo,Pg,sae,Poo,Boo,RR,Ioo,Noo,qoo,Dn,lae,joo,Doo,PR,Goo,Ooo,BR,Voo,Xoo,zoo,Gn,iae,Woo,Qoo,IR,Hoo,Uoo,NR,Joo,Yoo,Koo,On,dae,Zoo,ero,qR,oro,rro,jR,tro,aro,nro,Bg,cae,sro,lro,DR,iro,dro,cro,Vn,fae,fro,mro,GR,gro,hro,OR,pro,_ro,uro,Xn,mae,bro,vro,VR,Fro,Tro,XR,Mro,Ero,Cro,zn,gae,wro,Aro,zR,yro,Lro,WR,xro,$ro,kro,Wn,hae,Sro,Rro,QR,Pro,Bro,HR,Iro,Nro,qro,Qn,pae,jro,Dro,UR,Gro,Oro,JR,Vro,Xro,zro,Hn,_ae,Wro,Qro,YR,Hro,Uro,KR,Jro,Yro,Kro,Ig,uae,Zro,eto,ZR,oto,rto,tto,Un,bae,ato,nto,eP,sto,lto,oP,ito,dto,cto,Ng,vae,fto,mto,rP,gto,hto,pto,Jn,Fae,_to,uto,tP,bto,vto,aP,Fto,Tto,Mto,Yn,Tae,Eto,Cto,nP,wto,Ato,sP,yto,Lto,xto,Kn,Mae,$to,kto,lP,Sto,Rto,iP,Pto,Bto,Ito,qg,Eae,Nto,qto,dP,jto,Dto,Gto,Zn,Cae,Oto,Vto,cP,Xto,zto,fP,Wto,Qto,Hto,es,wae,Uto,Jto,mP,Yto,Kto,gP,Zto,eao,oao,jg,Aae,rao,tao,hP,aao,nao,sao,os,yae,lao,iao,pP,dao,cao,_P,fao,mao,gao,rs,Lae,hao,pao,uP,_ao,uao,bP,bao,vao,Fao,ts,xae,Tao,Mao,vP,Eao,Cao,FP,wao,Aao,yao,as,$ae,Lao,xao,TP,$ao,kao,MP,Sao,Rao,Pao,ns,kae,Bao,Iao,EP,Nao,qao,CP,jao,Dao,Gao,ss,Sae,Oao,Vao,wP,Xao,zao,AP,Wao,Qao,Hao,ls,Rae,Uao,Jao,yP,Yao,Kao,LP,Zao,eno,ono,Dg,Pae,rno,tno,xP,ano,nno,sno,is,Bae,lno,ino,$P,dno,cno,kP,fno,mno,gno,Gg,Iae,hno,pno,SP,_no,uno,bno,Og,Nae,vno,Fno,RP,Tno,Mno,Eno,ds,qae,Cno,wno,PP,Ano,yno,BP,Lno,xno,$no,cs,jae,kno,Sno,IP,Rno,Pno,NP,Bno,Ino,Nno,fs,Dae,qno,jno,qP,Dno,Gno,jP,Ono,Vno,Xno,Vg,Gae,zno,Wno,DP,Qno,Hno,Uno,ms,Oae,Jno,Yno,GP,Kno,Zno,OP,eso,oso,rso,gs,Vae,tso,aso,VP,nso,sso,XP,lso,iso,dso,hs,Xae,cso,fso,zP,mso,gso,WP,hso,pso,_so,ps,zae,uso,bso,QP,vso,Fso,HP,Tso,Mso,Eso,_s,Wae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Xg,Qae,kso,Sso,YP,Rso,Pso,Bso,us,Hae,Iso,Nso,KP,qso,jso,ZP,Dso,Gso,Oso,zg,Uae,Vso,Xso,eB,zso,Wso,Qso,Wg,Jae,Hso,Uso,oB,Jso,Yso,Kso,Qg,Yae,Zso,elo,rB,olo,rlo,tlo,Hg,Kae,alo,nlo,tB,slo,llo,ilo,bs,Zae,dlo,clo,aB,flo,mlo,nB,glo,hlo,plo,Ug,ene,_lo,ulo,sB,blo,vlo,Flo,vs,one,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,ylo,Fs,rne,Llo,xlo,dB,$lo,klo,cB,Slo,Rlo,Plo,Ts,tne,Blo,Ilo,fB,Nlo,qlo,mB,jlo,Dlo,Glo,Ms,ane,Olo,Vlo,gB,Xlo,zlo,hB,Wlo,Qlo,Hlo,Es,nne,Ulo,Jlo,pB,Ylo,Klo,_B,Zlo,eio,oio,Cs,sne,rio,tio,uB,aio,nio,bB,sio,lio,iio,Jg,lne,dio,cio,vB,fio,mio,gio,Yg,ine,hio,pio,FB,_io,uio,bio,ws,dne,vio,Fio,TB,Tio,Mio,MB,Eio,Cio,wio,As,cne,Aio,yio,EB,Lio,xio,CB,$io,kio,Sio,ys,fne,Rio,Pio,wB,Bio,Iio,AB,Nio,qio,jio,Kg,mne,Dio,Gio,yB,Oio,Vio,Xio,Zg,gne,zio,Wio,LB,Qio,Hio,Uio,eh,hne,Jio,Yio,xB,Kio,Zio,edo,Ls,pne,odo,rdo,$B,tdo,ado,kB,ndo,sdo,ldo,oh,_ne,ido,ddo,SB,cdo,fdo,mdo,rh,une,gdo,hdo,RB,pdo,_do,udo,th,bne,bdo,vdo,PB,Fdo,Tdo,Mdo,xs,vne,Edo,Cdo,BB,wdo,Ado,IB,ydo,Ldo,xdo,ah,Fne,$do,kdo,NB,Sdo,Rdo,Pdo,nh,Tne,Bdo,Ido,qB,Ndo,qdo,jdo,$s,Mne,Ddo,Gdo,jB,Odo,Vdo,DB,Xdo,zdo,Wdo,ks,Ene,Qdo,Hdo,GB,Udo,Jdo,OB,Ydo,Kdo,Zdo,Ss,Cne,eco,oco,VB,rco,tco,XB,aco,nco,sco,Rs,wne,lco,ico,zB,dco,cco,WB,fco,mco,gco,sh,hco,lh,Uy,pco,Ane,_co,Xqe,Ei,ih,yne,Jy,uco,Lne,bco,zqe,Ao,Yy,vco,Ky,Fco,QB,Tco,Mco,Eco,Zy,Cco,xne,wco,Aco,yco,He,eL,Lco,$ne,xco,$co,ya,kco,kne,Sco,Rco,Sne,Pco,Bco,Rne,Ico,Nco,qco,Y,dh,Pne,jco,Dco,HB,Gco,Oco,Vco,ch,Bne,Xco,zco,UB,Wco,Qco,Hco,fh,Ine,Uco,Jco,JB,Yco,Kco,Zco,mh,Nne,efo,ofo,YB,rfo,tfo,afo,gh,qne,nfo,sfo,KB,lfo,ifo,dfo,hh,jne,cfo,ffo,ZB,mfo,gfo,hfo,ph,Dne,pfo,_fo,eI,ufo,bfo,vfo,_h,Gne,Ffo,Tfo,oI,Mfo,Efo,Cfo,uh,One,wfo,Afo,rI,yfo,Lfo,xfo,bh,Vne,$fo,kfo,tI,Sfo,Rfo,Pfo,vh,Xne,Bfo,Ifo,aI,Nfo,qfo,jfo,Fh,zne,Dfo,Gfo,nI,Ofo,Vfo,Xfo,Th,Wne,zfo,Wfo,sI,Qfo,Hfo,Ufo,Mh,Qne,Jfo,Yfo,lI,Kfo,Zfo,emo,Eh,Hne,omo,rmo,iI,tmo,amo,nmo,Ch,Une,smo,lmo,dI,imo,dmo,cmo,wh,Jne,fmo,mmo,cI,gmo,hmo,pmo,Ah,Yne,_mo,umo,fI,bmo,vmo,Fmo,yh,Kne,Tmo,Mmo,mI,Emo,Cmo,wmo,Lh,Zne,Amo,ymo,gI,Lmo,xmo,$mo,xh,ese,kmo,Smo,hI,Rmo,Pmo,Bmo,$h,ose,Imo,Nmo,pI,qmo,jmo,Dmo,kh,rse,Gmo,Omo,_I,Vmo,Xmo,zmo,Sh,tse,Wmo,Qmo,uI,Hmo,Umo,Jmo,Rh,ase,Ymo,Kmo,bI,Zmo,ego,ogo,Ph,nse,rgo,tgo,vI,ago,ngo,sgo,Bh,sse,lgo,igo,FI,dgo,cgo,fgo,Ih,lse,mgo,ggo,TI,hgo,pgo,_go,Nh,ise,ugo,bgo,MI,vgo,Fgo,Tgo,qh,dse,Mgo,Ego,EI,Cgo,wgo,Ago,jh,ygo,Dh,Lgo,Gh,oL,xgo,cse,$go,Wqe,Ci,Oh,fse,rL,kgo,mse,Sgo,Qqe,yo,tL,Rgo,aL,Pgo,CI,Bgo,Igo,Ngo,nL,qgo,gse,jgo,Dgo,Ggo,Ue,sL,Ogo,hse,Vgo,Xgo,wi,zgo,pse,Wgo,Qgo,_se,Hgo,Ugo,Jgo,he,Vh,use,Ygo,Kgo,wI,Zgo,eho,oho,Xh,bse,rho,tho,vse,aho,nho,sho,zh,Fse,lho,iho,AI,dho,cho,fho,Wh,Tse,mho,gho,yI,hho,pho,_ho,Qh,Mse,uho,bho,LI,vho,Fho,Tho,Hh,Ese,Mho,Eho,xI,Cho,who,Aho,Uh,Cse,yho,Lho,$I,xho,$ho,kho,Jh,wse,Sho,Rho,kI,Pho,Bho,Iho,Yh,Ase,Nho,qho,SI,jho,Dho,Gho,Kh,yse,Oho,Vho,RI,Xho,zho,Who,Zh,Lse,Qho,Hho,PI,Uho,Jho,Yho,ep,xse,Kho,Zho,BI,epo,opo,rpo,op,$se,tpo,apo,II,npo,spo,lpo,rp,kse,ipo,dpo,NI,cpo,fpo,mpo,tp,Sse,gpo,hpo,qI,ppo,_po,upo,ap,Rse,bpo,vpo,jI,Fpo,Tpo,Mpo,np,Pse,Epo,Cpo,DI,wpo,Apo,ypo,sp,Lpo,lp,xpo,ip,lL,$po,Bse,kpo,Hqe,Ai,dp,Ise,iL,Spo,Nse,Rpo,Uqe,Lo,dL,Ppo,yi,Bpo,GI,Ipo,Npo,OI,qpo,jpo,Dpo,cL,Gpo,qse,Opo,Vpo,Xpo,tt,fL,zpo,jse,Wpo,Qpo,Li,Hpo,Dse,Upo,Jpo,VI,Ypo,Kpo,Zpo,cp,e_o,Je,mL,o_o,Gse,r_o,t_o,La,a_o,Ose,n_o,s_o,Vse,l_o,i_o,Xse,d_o,c_o,f_o,x,fp,zse,m_o,g_o,XI,h_o,p_o,__o,mp,Wse,u_o,b_o,zI,v_o,F_o,T_o,gp,Qse,M_o,E_o,WI,C_o,w_o,A_o,hp,Hse,y_o,L_o,QI,x_o,$_o,k_o,pp,Use,S_o,R_o,HI,P_o,B_o,I_o,_p,Jse,N_o,q_o,UI,j_o,D_o,G_o,up,Yse,O_o,V_o,JI,X_o,z_o,W_o,bp,Kse,Q_o,H_o,YI,U_o,J_o,Y_o,vp,Zse,K_o,Z_o,KI,euo,ouo,ruo,Fp,ele,tuo,auo,ZI,nuo,suo,luo,Tp,ole,iuo,duo,eN,cuo,fuo,muo,Mp,rle,guo,huo,oN,puo,_uo,uuo,Ep,tle,buo,vuo,rN,Fuo,Tuo,Muo,Cp,ale,Euo,Cuo,tN,wuo,Auo,yuo,wp,nle,Luo,xuo,aN,$uo,kuo,Suo,Ap,sle,Ruo,Puo,nN,Buo,Iuo,Nuo,yp,lle,quo,juo,sN,Duo,Guo,Ouo,Lp,ile,Vuo,Xuo,lN,zuo,Wuo,Quo,xp,dle,Huo,Uuo,iN,Juo,Yuo,Kuo,$p,cle,Zuo,ebo,dN,obo,rbo,tbo,kp,fle,abo,nbo,cN,sbo,lbo,ibo,Sp,mle,dbo,cbo,fN,fbo,mbo,gbo,Rp,gle,hbo,pbo,mN,_bo,ubo,bbo,Pp,hle,vbo,Fbo,gN,Tbo,Mbo,Ebo,Bp,ple,Cbo,wbo,hN,Abo,ybo,Lbo,Ip,_le,xbo,$bo,pN,kbo,Sbo,Rbo,Np,ule,Pbo,Bbo,_N,Ibo,Nbo,qbo,qp,ble,jbo,Dbo,uN,Gbo,Obo,Vbo,jp,vle,Xbo,zbo,bN,Wbo,Qbo,Hbo,Dp,Fle,Ubo,Jbo,vN,Ybo,Kbo,Zbo,Gp,Tle,e2o,o2o,FN,r2o,t2o,a2o,Op,Mle,n2o,s2o,TN,l2o,i2o,d2o,Ps,Ele,c2o,f2o,MN,m2o,g2o,EN,h2o,p2o,_2o,Vp,Cle,u2o,b2o,CN,v2o,F2o,T2o,Xp,wle,M2o,E2o,wN,C2o,w2o,A2o,zp,Ale,y2o,L2o,AN,x2o,$2o,k2o,Wp,yle,S2o,R2o,yN,P2o,B2o,I2o,Qp,Lle,N2o,q2o,LN,j2o,D2o,G2o,Hp,xle,O2o,V2o,xN,X2o,z2o,W2o,Up,$le,Q2o,H2o,$N,U2o,J2o,Y2o,Jp,kle,K2o,Z2o,kN,evo,ovo,rvo,Yp,Sle,tvo,avo,SN,nvo,svo,lvo,Kp,Rle,ivo,dvo,RN,cvo,fvo,mvo,Zp,Ple,gvo,hvo,PN,pvo,_vo,uvo,e_,Ble,bvo,vvo,BN,Fvo,Tvo,Mvo,o_,Ile,Evo,Cvo,IN,wvo,Avo,yvo,r_,Nle,Lvo,xvo,NN,$vo,kvo,Svo,t_,qle,Rvo,Pvo,qN,Bvo,Ivo,Nvo,a_,jle,qvo,jvo,jN,Dvo,Gvo,Ovo,n_,Dle,Vvo,Xvo,DN,zvo,Wvo,Qvo,s_,Gle,Hvo,Uvo,GN,Jvo,Yvo,Kvo,l_,Ole,Zvo,eFo,ON,oFo,rFo,tFo,i_,Vle,aFo,nFo,VN,sFo,lFo,iFo,d_,Xle,dFo,cFo,XN,fFo,mFo,gFo,c_,zle,hFo,pFo,zN,_Fo,uFo,bFo,f_,Wle,vFo,FFo,WN,TFo,MFo,EFo,m_,Qle,CFo,wFo,QN,AFo,yFo,LFo,g_,Hle,xFo,$Fo,HN,kFo,SFo,RFo,h_,Ule,PFo,BFo,UN,IFo,NFo,qFo,p_,Jle,jFo,DFo,JN,GFo,OFo,VFo,__,Yle,XFo,zFo,YN,WFo,QFo,HFo,u_,Kle,UFo,JFo,KN,YFo,KFo,ZFo,b_,Zle,e6o,o6o,ZN,r6o,t6o,a6o,v_,eie,n6o,s6o,eq,l6o,i6o,d6o,F_,oie,c6o,f6o,oq,m6o,g6o,h6o,T_,rie,p6o,_6o,rq,u6o,b6o,v6o,M_,tie,F6o,T6o,tq,M6o,E6o,C6o,E_,aie,w6o,A6o,aq,y6o,L6o,x6o,C_,nie,$6o,k6o,nq,S6o,R6o,P6o,w_,sie,B6o,I6o,sq,N6o,q6o,j6o,A_,lie,D6o,G6o,lq,O6o,V6o,X6o,y_,iie,z6o,W6o,iq,Q6o,H6o,U6o,L_,die,J6o,Y6o,dq,K6o,Z6o,e1o,x_,cie,o1o,r1o,cq,t1o,a1o,n1o,$_,fie,s1o,l1o,fq,i1o,d1o,c1o,k_,mie,f1o,m1o,mq,g1o,h1o,p1o,S_,gie,_1o,u1o,gq,b1o,v1o,F1o,R_,hie,T1o,M1o,hq,E1o,C1o,w1o,P_,pie,A1o,y1o,pq,L1o,x1o,$1o,B_,_ie,k1o,S1o,_q,R1o,P1o,B1o,I_,uie,I1o,N1o,uq,q1o,j1o,D1o,N_,bie,G1o,O1o,bq,V1o,X1o,z1o,q_,vie,W1o,Q1o,vq,H1o,U1o,J1o,j_,Fie,Y1o,K1o,Fq,Z1o,eTo,oTo,D_,Tie,rTo,tTo,Tq,aTo,nTo,sTo,G_,Mie,lTo,iTo,Mq,dTo,cTo,fTo,O_,Eie,mTo,gTo,Eq,hTo,pTo,_To,V_,Cie,uTo,bTo,Cq,vTo,FTo,TTo,X_,wie,MTo,ETo,wq,CTo,wTo,ATo,z_,Aie,yTo,LTo,Aq,xTo,$To,kTo,W_,yie,STo,RTo,yq,PTo,BTo,ITo,Q_,Lie,NTo,qTo,Lq,jTo,DTo,GTo,H_,xie,OTo,VTo,xq,XTo,zTo,WTo,U_,$ie,QTo,HTo,$q,UTo,JTo,YTo,J_,kie,KTo,ZTo,kq,eMo,oMo,rMo,Y_,Sie,tMo,aMo,Sq,nMo,sMo,lMo,K_,Rie,iMo,dMo,Rq,cMo,fMo,mMo,Z_,Pie,gMo,hMo,Pq,pMo,_Mo,uMo,eu,Bie,bMo,vMo,Bq,FMo,TMo,MMo,ou,Iie,EMo,CMo,Iq,wMo,AMo,yMo,ru,Nie,LMo,xMo,Nq,$Mo,kMo,SMo,tu,qie,RMo,PMo,qq,BMo,IMo,NMo,au,jie,qMo,jMo,jq,DMo,GMo,OMo,nu,VMo,Die,XMo,zMo,Gie,WMo,QMo,su,Jqe,xi,lu,Oie,gL,HMo,Vie,UMo,Yqe,xo,hL,JMo,$i,YMo,Dq,KMo,ZMo,Gq,e4o,o4o,r4o,pL,t4o,Xie,a4o,n4o,s4o,at,_L,l4o,zie,i4o,d4o,ki,c4o,Wie,f4o,m4o,Oq,g4o,h4o,p4o,iu,_4o,Ye,uL,u4o,Qie,b4o,v4o,xa,F4o,Hie,T4o,M4o,Uie,E4o,C4o,Jie,w4o,A4o,y4o,G,du,Yie,L4o,x4o,Vq,$4o,k4o,S4o,cu,Kie,R4o,P4o,Xq,B4o,I4o,N4o,fu,Zie,q4o,j4o,zq,D4o,G4o,O4o,mu,ede,V4o,X4o,Wq,z4o,W4o,Q4o,gu,ode,H4o,U4o,Qq,J4o,Y4o,K4o,hu,rde,Z4o,eEo,Hq,oEo,rEo,tEo,pu,tde,aEo,nEo,Uq,sEo,lEo,iEo,_u,ade,dEo,cEo,Jq,fEo,mEo,gEo,uu,nde,hEo,pEo,Yq,_Eo,uEo,bEo,bu,sde,vEo,FEo,Kq,TEo,MEo,EEo,vu,lde,CEo,wEo,Zq,AEo,yEo,LEo,Fu,ide,xEo,$Eo,ej,kEo,SEo,REo,Tu,dde,PEo,BEo,oj,IEo,NEo,qEo,Mu,cde,jEo,DEo,rj,GEo,OEo,VEo,Eu,fde,XEo,zEo,tj,WEo,QEo,HEo,Cu,mde,UEo,JEo,aj,YEo,KEo,ZEo,wu,gde,eCo,oCo,nj,rCo,tCo,aCo,Au,hde,nCo,sCo,sj,lCo,iCo,dCo,yu,pde,cCo,fCo,lj,mCo,gCo,hCo,Lu,_de,pCo,_Co,ij,uCo,bCo,vCo,xu,ude,FCo,TCo,dj,MCo,ECo,CCo,$u,bde,wCo,ACo,cj,yCo,LCo,xCo,ku,vde,$Co,kCo,fj,SCo,RCo,PCo,Su,Fde,BCo,ICo,mj,NCo,qCo,jCo,Ru,Tde,DCo,GCo,gj,OCo,VCo,XCo,Pu,Mde,zCo,WCo,hj,QCo,HCo,UCo,Bu,Ede,JCo,YCo,pj,KCo,ZCo,e5o,Iu,Cde,o5o,r5o,_j,t5o,a5o,n5o,Nu,wde,s5o,l5o,uj,i5o,d5o,c5o,qu,Ade,f5o,m5o,bj,g5o,h5o,p5o,ju,yde,_5o,u5o,vj,b5o,v5o,F5o,Du,Lde,T5o,M5o,Fj,E5o,C5o,w5o,Gu,xde,A5o,y5o,Tj,L5o,x5o,$5o,Ou,$de,k5o,S5o,Mj,R5o,P5o,B5o,Vu,kde,I5o,N5o,Ej,q5o,j5o,D5o,Xu,Sde,G5o,O5o,Cj,V5o,X5o,z5o,zu,Rde,W5o,Q5o,wj,H5o,U5o,J5o,Wu,Pde,Y5o,K5o,Aj,Z5o,e3o,o3o,Qu,Bde,r3o,t3o,yj,a3o,n3o,s3o,Hu,Ide,l3o,i3o,Lj,d3o,c3o,f3o,Uu,Nde,m3o,g3o,xj,h3o,p3o,_3o,Ju,qde,u3o,b3o,$j,v3o,F3o,T3o,Yu,M3o,jde,E3o,C3o,Dde,w3o,A3o,Ku,Kqe,Si,Zu,Gde,bL,y3o,Ode,L3o,Zqe,$o,vL,x3o,Ri,$3o,kj,k3o,S3o,Sj,R3o,P3o,B3o,FL,I3o,Vde,N3o,q3o,j3o,nt,TL,D3o,Xde,G3o,O3o,Pi,V3o,zde,X3o,z3o,Rj,W3o,Q3o,H3o,eb,U3o,Ke,ML,J3o,Wde,Y3o,K3o,$a,Z3o,Qde,e0o,o0o,Hde,r0o,t0o,Ude,a0o,n0o,s0o,z,ob,Jde,l0o,i0o,Pj,d0o,c0o,f0o,rb,Yde,m0o,g0o,Bj,h0o,p0o,_0o,tb,Kde,u0o,b0o,Ij,v0o,F0o,T0o,ab,Zde,M0o,E0o,Nj,C0o,w0o,A0o,nb,ece,y0o,L0o,qj,x0o,$0o,k0o,sb,oce,S0o,R0o,jj,P0o,B0o,I0o,lb,rce,N0o,q0o,Dj,j0o,D0o,G0o,ib,tce,O0o,V0o,Gj,X0o,z0o,W0o,db,ace,Q0o,H0o,Oj,U0o,J0o,Y0o,cb,nce,K0o,Z0o,Vj,ewo,owo,rwo,fb,sce,two,awo,Xj,nwo,swo,lwo,mb,lce,iwo,dwo,zj,cwo,fwo,mwo,gb,ice,gwo,hwo,Wj,pwo,_wo,uwo,hb,dce,bwo,vwo,Qj,Fwo,Two,Mwo,pb,cce,Ewo,Cwo,Hj,wwo,Awo,ywo,_b,fce,Lwo,xwo,Uj,$wo,kwo,Swo,ub,mce,Rwo,Pwo,Jj,Bwo,Iwo,Nwo,bb,gce,qwo,jwo,Yj,Dwo,Gwo,Owo,vb,hce,Vwo,Xwo,Kj,zwo,Wwo,Qwo,Fb,pce,Hwo,Uwo,Zj,Jwo,Ywo,Kwo,Tb,_ce,Zwo,eAo,eD,oAo,rAo,tAo,Mb,uce,aAo,nAo,oD,sAo,lAo,iAo,Eb,bce,dAo,cAo,rD,fAo,mAo,gAo,Cb,vce,hAo,pAo,tD,_Ao,uAo,bAo,wb,Fce,vAo,FAo,aD,TAo,MAo,EAo,Ab,Tce,CAo,wAo,nD,AAo,yAo,LAo,yb,Mce,xAo,$Ao,sD,kAo,SAo,RAo,Lb,Ece,PAo,BAo,lD,IAo,NAo,qAo,xb,Cce,jAo,DAo,iD,GAo,OAo,VAo,$b,wce,XAo,zAo,dD,WAo,QAo,HAo,kb,Ace,UAo,JAo,cD,YAo,KAo,ZAo,Sb,yce,eyo,oyo,fD,ryo,tyo,ayo,Rb,Lce,nyo,syo,mD,lyo,iyo,dyo,Pb,xce,cyo,fyo,gD,myo,gyo,hyo,Bb,$ce,pyo,_yo,hD,uyo,byo,vyo,Ib,kce,Fyo,Tyo,pD,Myo,Eyo,Cyo,Nb,Sce,wyo,Ayo,_D,yyo,Lyo,xyo,qb,$yo,Rce,kyo,Syo,Pce,Ryo,Pyo,jb,eje,Bi,Db,Bce,EL,Byo,Ice,Iyo,oje,ko,CL,Nyo,Ii,qyo,uD,jyo,Dyo,bD,Gyo,Oyo,Vyo,wL,Xyo,Nce,zyo,Wyo,Qyo,st,AL,Hyo,qce,Uyo,Jyo,Ni,Yyo,jce,Kyo,Zyo,vD,eLo,oLo,rLo,Gb,tLo,Ze,yL,aLo,Dce,nLo,sLo,ka,lLo,Gce,iLo,dLo,Oce,cLo,fLo,Vce,mLo,gLo,hLo,W,Ob,Xce,pLo,_Lo,FD,uLo,bLo,vLo,Vb,zce,FLo,TLo,TD,MLo,ELo,CLo,Xb,Wce,wLo,ALo,MD,yLo,LLo,xLo,zb,Qce,$Lo,kLo,ED,SLo,RLo,PLo,Wb,Hce,BLo,ILo,CD,NLo,qLo,jLo,Qb,Uce,DLo,GLo,wD,OLo,VLo,XLo,Hb,Jce,zLo,WLo,AD,QLo,HLo,ULo,Ub,Yce,JLo,YLo,yD,KLo,ZLo,e8o,Jb,Kce,o8o,r8o,LD,t8o,a8o,n8o,Yb,Zce,s8o,l8o,xD,i8o,d8o,c8o,Kb,efe,f8o,m8o,$D,g8o,h8o,p8o,Zb,ofe,_8o,u8o,kD,b8o,v8o,F8o,e2,rfe,T8o,M8o,SD,E8o,C8o,w8o,o2,tfe,A8o,y8o,RD,L8o,x8o,$8o,r2,afe,k8o,S8o,PD,R8o,P8o,B8o,t2,nfe,I8o,N8o,BD,q8o,j8o,D8o,a2,sfe,G8o,O8o,ID,V8o,X8o,z8o,n2,lfe,W8o,Q8o,ND,H8o,U8o,J8o,s2,ife,Y8o,K8o,qD,Z8o,e7o,o7o,l2,dfe,r7o,t7o,jD,a7o,n7o,s7o,i2,cfe,l7o,i7o,DD,d7o,c7o,f7o,d2,ffe,m7o,g7o,GD,h7o,p7o,_7o,c2,mfe,u7o,b7o,OD,v7o,F7o,T7o,f2,gfe,M7o,E7o,VD,C7o,w7o,A7o,m2,hfe,y7o,L7o,XD,x7o,$7o,k7o,g2,pfe,S7o,R7o,zD,P7o,B7o,I7o,h2,_fe,N7o,q7o,WD,j7o,D7o,G7o,p2,ufe,O7o,V7o,QD,X7o,z7o,W7o,_2,bfe,Q7o,H7o,HD,U7o,J7o,Y7o,u2,vfe,K7o,Z7o,UD,e9o,o9o,r9o,b2,Ffe,t9o,a9o,JD,n9o,s9o,l9o,v2,Tfe,i9o,d9o,Mfe,c9o,f9o,m9o,F2,Efe,g9o,h9o,YD,p9o,_9o,u9o,T2,Cfe,b9o,v9o,KD,F9o,T9o,M9o,M2,wfe,E9o,C9o,ZD,w9o,A9o,y9o,E2,Afe,L9o,x9o,eG,$9o,k9o,S9o,C2,R9o,yfe,P9o,B9o,Lfe,I9o,N9o,w2,rje,qi,A2,xfe,LL,q9o,$fe,j9o,tje,So,xL,D9o,ji,G9o,oG,O9o,V9o,rG,X9o,z9o,W9o,$L,Q9o,kfe,H9o,U9o,J9o,lt,kL,Y9o,Sfe,K9o,Z9o,Di,exo,Rfe,oxo,rxo,tG,txo,axo,nxo,y2,sxo,eo,SL,lxo,Pfe,ixo,dxo,Sa,cxo,Bfe,fxo,mxo,Ife,gxo,hxo,Nfe,pxo,_xo,uxo,_e,L2,qfe,bxo,vxo,aG,Fxo,Txo,Mxo,x2,jfe,Exo,Cxo,nG,wxo,Axo,yxo,$2,Dfe,Lxo,xxo,sG,$xo,kxo,Sxo,k2,Gfe,Rxo,Pxo,lG,Bxo,Ixo,Nxo,S2,Ofe,qxo,jxo,iG,Dxo,Gxo,Oxo,R2,Vfe,Vxo,Xxo,dG,zxo,Wxo,Qxo,P2,Xfe,Hxo,Uxo,cG,Jxo,Yxo,Kxo,B2,zfe,Zxo,e$o,fG,o$o,r$o,t$o,I2,Wfe,a$o,n$o,mG,s$o,l$o,i$o,N2,Qfe,d$o,c$o,gG,f$o,m$o,g$o,q2,Hfe,h$o,p$o,hG,_$o,u$o,b$o,j2,Ufe,v$o,F$o,pG,T$o,M$o,E$o,D2,Jfe,C$o,w$o,_G,A$o,y$o,L$o,G2,Yfe,x$o,$$o,uG,k$o,S$o,R$o,O2,Kfe,P$o,B$o,bG,I$o,N$o,q$o,V2,Zfe,j$o,D$o,vG,G$o,O$o,V$o,X2,X$o,eme,z$o,W$o,ome,Q$o,H$o,z2,aje,Gi,W2,rme,RL,U$o,tme,J$o,nje,Ro,PL,Y$o,Oi,K$o,FG,Z$o,eko,TG,oko,rko,tko,BL,ako,ame,nko,sko,lko,it,IL,iko,nme,dko,cko,Vi,fko,sme,mko,gko,MG,hko,pko,_ko,Q2,uko,oo,NL,bko,lme,vko,Fko,Ra,Tko,ime,Mko,Eko,dme,Cko,wko,cme,Ako,yko,Lko,N,H2,fme,xko,$ko,EG,kko,Sko,Rko,U2,mme,Pko,Bko,CG,Iko,Nko,qko,J2,gme,jko,Dko,wG,Gko,Oko,Vko,Y2,hme,Xko,zko,AG,Wko,Qko,Hko,K2,pme,Uko,Jko,yG,Yko,Kko,Zko,Z2,_me,eSo,oSo,LG,rSo,tSo,aSo,ev,ume,nSo,sSo,xG,lSo,iSo,dSo,ov,bme,cSo,fSo,$G,mSo,gSo,hSo,rv,vme,pSo,_So,kG,uSo,bSo,vSo,tv,Fme,FSo,TSo,SG,MSo,ESo,CSo,av,Tme,wSo,ASo,RG,ySo,LSo,xSo,nv,Mme,$So,kSo,PG,SSo,RSo,PSo,sv,Eme,BSo,ISo,BG,NSo,qSo,jSo,lv,Cme,DSo,GSo,IG,OSo,VSo,XSo,iv,wme,zSo,WSo,NG,QSo,HSo,USo,dv,Ame,JSo,YSo,qG,KSo,ZSo,eRo,cv,yme,oRo,rRo,jG,tRo,aRo,nRo,fv,Lme,sRo,lRo,DG,iRo,dRo,cRo,mv,xme,fRo,mRo,GG,gRo,hRo,pRo,gv,$me,_Ro,uRo,OG,bRo,vRo,FRo,hv,kme,TRo,MRo,VG,ERo,CRo,wRo,pv,Sme,ARo,yRo,XG,LRo,xRo,$Ro,_v,Rme,kRo,SRo,zG,RRo,PRo,BRo,uv,Pme,IRo,NRo,WG,qRo,jRo,DRo,bv,Bme,GRo,ORo,QG,VRo,XRo,zRo,vv,Ime,WRo,QRo,HG,HRo,URo,JRo,Fv,Nme,YRo,KRo,UG,ZRo,ePo,oPo,Tv,qme,rPo,tPo,JG,aPo,nPo,sPo,Mv,jme,lPo,iPo,YG,dPo,cPo,fPo,Ev,Dme,mPo,gPo,KG,hPo,pPo,_Po,Cv,Gme,uPo,bPo,ZG,vPo,FPo,TPo,wv,Ome,MPo,EPo,eO,CPo,wPo,APo,Av,Vme,yPo,LPo,oO,xPo,$Po,kPo,yv,Xme,SPo,RPo,rO,PPo,BPo,IPo,Lv,zme,NPo,qPo,tO,jPo,DPo,GPo,xv,Wme,OPo,VPo,aO,XPo,zPo,WPo,$v,Qme,QPo,HPo,nO,UPo,JPo,YPo,kv,Hme,KPo,ZPo,sO,eBo,oBo,rBo,Sv,Ume,tBo,aBo,lO,nBo,sBo,lBo,Rv,Jme,iBo,dBo,iO,cBo,fBo,mBo,Pv,Yme,gBo,hBo,dO,pBo,_Bo,uBo,Bv,Kme,bBo,vBo,cO,FBo,TBo,MBo,Iv,Zme,EBo,CBo,fO,wBo,ABo,yBo,Nv,ege,LBo,xBo,mO,$Bo,kBo,SBo,qv,oge,RBo,PBo,gO,BBo,IBo,NBo,jv,rge,qBo,jBo,hO,DBo,GBo,OBo,Dv,tge,VBo,XBo,pO,zBo,WBo,QBo,Gv,HBo,age,UBo,JBo,nge,YBo,KBo,Ov,sje,Xi,Vv,sge,qL,ZBo,lge,eIo,lje,Po,jL,oIo,zi,rIo,_O,tIo,aIo,uO,nIo,sIo,lIo,DL,iIo,ige,dIo,cIo,fIo,dt,GL,mIo,dge,gIo,hIo,Wi,pIo,cge,_Io,uIo,bO,bIo,vIo,FIo,Xv,TIo,ro,OL,MIo,fge,EIo,CIo,Pa,wIo,mge,AIo,yIo,gge,LIo,xIo,hge,$Io,kIo,SIo,K,zv,pge,RIo,PIo,vO,BIo,IIo,NIo,Wv,_ge,qIo,jIo,FO,DIo,GIo,OIo,Qv,uge,VIo,XIo,TO,zIo,WIo,QIo,Hv,bge,HIo,UIo,MO,JIo,YIo,KIo,Uv,vge,ZIo,eNo,EO,oNo,rNo,tNo,Jv,Fge,aNo,nNo,CO,sNo,lNo,iNo,Yv,Tge,dNo,cNo,wO,fNo,mNo,gNo,Kv,Mge,hNo,pNo,AO,_No,uNo,bNo,Zv,Ege,vNo,FNo,yO,TNo,MNo,ENo,eF,Cge,CNo,wNo,LO,ANo,yNo,LNo,oF,wge,xNo,$No,xO,kNo,SNo,RNo,rF,Age,PNo,BNo,$O,INo,NNo,qNo,tF,yge,jNo,DNo,kO,GNo,ONo,VNo,aF,Lge,XNo,zNo,SO,WNo,QNo,HNo,nF,xge,UNo,JNo,RO,YNo,KNo,ZNo,sF,$ge,eqo,oqo,PO,rqo,tqo,aqo,lF,kge,nqo,sqo,BO,lqo,iqo,dqo,iF,Sge,cqo,fqo,IO,mqo,gqo,hqo,dF,Rge,pqo,_qo,NO,uqo,bqo,vqo,cF,Pge,Fqo,Tqo,qO,Mqo,Eqo,Cqo,fF,Bge,wqo,Aqo,jO,yqo,Lqo,xqo,mF,Ige,$qo,kqo,DO,Sqo,Rqo,Pqo,gF,Nge,Bqo,Iqo,GO,Nqo,qqo,jqo,hF,qge,Dqo,Gqo,OO,Oqo,Vqo,Xqo,pF,jge,zqo,Wqo,VO,Qqo,Hqo,Uqo,_F,Dge,Jqo,Yqo,XO,Kqo,Zqo,ejo,uF,Gge,ojo,rjo,zO,tjo,ajo,njo,bF,Oge,sjo,ljo,WO,ijo,djo,cjo,vF,Vge,fjo,mjo,QO,gjo,hjo,pjo,FF,_jo,Xge,ujo,bjo,zge,vjo,Fjo,TF,ije,Qi,MF,Wge,VL,Tjo,Qge,Mjo,dje,Bo,XL,Ejo,Hi,Cjo,HO,wjo,Ajo,UO,yjo,Ljo,xjo,zL,$jo,Hge,kjo,Sjo,Rjo,ct,WL,Pjo,Uge,Bjo,Ijo,Ui,Njo,Jge,qjo,jjo,JO,Djo,Gjo,Ojo,EF,Vjo,to,QL,Xjo,Yge,zjo,Wjo,Ba,Qjo,Kge,Hjo,Ujo,Zge,Jjo,Yjo,ehe,Kjo,Zjo,eDo,Yr,CF,ohe,oDo,rDo,YO,tDo,aDo,nDo,wF,rhe,sDo,lDo,KO,iDo,dDo,cDo,AF,the,fDo,mDo,ZO,gDo,hDo,pDo,yF,ahe,_Do,uDo,eV,bDo,vDo,FDo,LF,nhe,TDo,MDo,oV,EDo,CDo,wDo,xF,ADo,she,yDo,LDo,lhe,xDo,$Do,$F,cje,Ji,kF,ihe,HL,kDo,dhe,SDo,fje,Io,UL,RDo,Yi,PDo,rV,BDo,IDo,tV,NDo,qDo,jDo,JL,DDo,che,GDo,ODo,VDo,ft,YL,XDo,fhe,zDo,WDo,Ki,QDo,mhe,HDo,UDo,aV,JDo,YDo,KDo,SF,ZDo,ao,KL,eGo,ghe,oGo,rGo,Ia,tGo,hhe,aGo,nGo,phe,sGo,lGo,_he,iGo,dGo,cGo,U,RF,uhe,fGo,mGo,nV,gGo,hGo,pGo,PF,bhe,_Go,uGo,sV,bGo,vGo,FGo,BF,vhe,TGo,MGo,lV,EGo,CGo,wGo,IF,Fhe,AGo,yGo,iV,LGo,xGo,$Go,NF,The,kGo,SGo,dV,RGo,PGo,BGo,qF,Mhe,IGo,NGo,cV,qGo,jGo,DGo,jF,Ehe,GGo,OGo,fV,VGo,XGo,zGo,DF,Che,WGo,QGo,mV,HGo,UGo,JGo,GF,whe,YGo,KGo,gV,ZGo,eOo,oOo,OF,Ahe,rOo,tOo,hV,aOo,nOo,sOo,VF,yhe,lOo,iOo,pV,dOo,cOo,fOo,XF,Lhe,mOo,gOo,_V,hOo,pOo,_Oo,zF,xhe,uOo,bOo,uV,vOo,FOo,TOo,WF,$he,MOo,EOo,bV,COo,wOo,AOo,QF,khe,yOo,LOo,vV,xOo,$Oo,kOo,HF,She,SOo,ROo,FV,POo,BOo,IOo,UF,Rhe,NOo,qOo,TV,jOo,DOo,GOo,JF,Phe,OOo,VOo,MV,XOo,zOo,WOo,YF,Bhe,QOo,HOo,EV,UOo,JOo,YOo,KF,Ihe,KOo,ZOo,CV,eVo,oVo,rVo,ZF,Nhe,tVo,aVo,wV,nVo,sVo,lVo,e6,qhe,iVo,dVo,AV,cVo,fVo,mVo,o6,jhe,gVo,hVo,yV,pVo,_Vo,uVo,r6,Dhe,bVo,vVo,LV,FVo,TVo,MVo,t6,Ghe,EVo,CVo,xV,wVo,AVo,yVo,a6,Ohe,LVo,xVo,$V,$Vo,kVo,SVo,n6,Vhe,RVo,PVo,kV,BVo,IVo,NVo,s6,Xhe,qVo,jVo,SV,DVo,GVo,OVo,l6,zhe,VVo,XVo,RV,zVo,WVo,QVo,i6,Whe,HVo,UVo,PV,JVo,YVo,KVo,d6,Qhe,ZVo,eXo,BV,oXo,rXo,tXo,c6,Hhe,aXo,nXo,IV,sXo,lXo,iXo,f6,Uhe,dXo,cXo,NV,fXo,mXo,gXo,m6,Jhe,hXo,pXo,qV,_Xo,uXo,bXo,g6,vXo,Yhe,FXo,TXo,Khe,MXo,EXo,h6,mje,Zi,p6,Zhe,ZL,CXo,epe,wXo,gje,No,e8,AXo,ed,yXo,jV,LXo,xXo,DV,$Xo,kXo,SXo,o8,RXo,ope,PXo,BXo,IXo,mt,r8,NXo,rpe,qXo,jXo,od,DXo,tpe,GXo,OXo,GV,VXo,XXo,zXo,_6,WXo,no,t8,QXo,ape,HXo,UXo,Na,JXo,npe,YXo,KXo,spe,ZXo,ezo,lpe,ozo,rzo,tzo,V,u6,ipe,azo,nzo,OV,szo,lzo,izo,b6,dpe,dzo,czo,VV,fzo,mzo,gzo,v6,cpe,hzo,pzo,XV,_zo,uzo,bzo,F6,fpe,vzo,Fzo,zV,Tzo,Mzo,Ezo,T6,mpe,Czo,wzo,WV,Azo,yzo,Lzo,M6,gpe,xzo,$zo,QV,kzo,Szo,Rzo,E6,hpe,Pzo,Bzo,HV,Izo,Nzo,qzo,C6,ppe,jzo,Dzo,UV,Gzo,Ozo,Vzo,w6,_pe,Xzo,zzo,JV,Wzo,Qzo,Hzo,A6,upe,Uzo,Jzo,YV,Yzo,Kzo,Zzo,y6,bpe,eWo,oWo,KV,rWo,tWo,aWo,L6,vpe,nWo,sWo,ZV,lWo,iWo,dWo,x6,Fpe,cWo,fWo,eX,mWo,gWo,hWo,$6,Tpe,pWo,_Wo,oX,uWo,bWo,vWo,k6,Mpe,FWo,TWo,rX,MWo,EWo,CWo,S6,Epe,wWo,AWo,tX,yWo,LWo,xWo,R6,Cpe,$Wo,kWo,aX,SWo,RWo,PWo,P6,wpe,BWo,IWo,nX,NWo,qWo,jWo,B6,Ape,DWo,GWo,sX,OWo,VWo,XWo,I6,ype,zWo,WWo,lX,QWo,HWo,UWo,N6,Lpe,JWo,YWo,iX,KWo,ZWo,eQo,q6,xpe,oQo,rQo,dX,tQo,aQo,nQo,j6,$pe,sQo,lQo,cX,iQo,dQo,cQo,D6,kpe,fQo,mQo,fX,gQo,hQo,pQo,G6,Spe,_Qo,uQo,mX,bQo,vQo,FQo,O6,Rpe,TQo,MQo,gX,EQo,CQo,wQo,V6,Ppe,AQo,yQo,hX,LQo,xQo,$Qo,X6,Bpe,kQo,SQo,pX,RQo,PQo,BQo,z6,Ipe,IQo,NQo,_X,qQo,jQo,DQo,W6,Npe,GQo,OQo,uX,VQo,XQo,zQo,Q6,qpe,WQo,QQo,bX,HQo,UQo,JQo,H6,jpe,YQo,KQo,vX,ZQo,eHo,oHo,U6,Dpe,rHo,tHo,FX,aHo,nHo,sHo,J6,Gpe,lHo,iHo,TX,dHo,cHo,fHo,Y6,Ope,mHo,gHo,MX,hHo,pHo,_Ho,K6,Vpe,uHo,bHo,EX,vHo,FHo,THo,Z6,Xpe,MHo,EHo,CX,CHo,wHo,AHo,e1,zpe,yHo,LHo,wX,xHo,$Ho,kHo,o1,Wpe,SHo,RHo,AX,PHo,BHo,IHo,r1,Qpe,NHo,qHo,yX,jHo,DHo,GHo,t1,OHo,Hpe,VHo,XHo,Upe,zHo,WHo,a1,hje,rd,n1,Jpe,a8,QHo,Ype,HHo,pje,qo,n8,UHo,td,JHo,LX,YHo,KHo,xX,ZHo,eUo,oUo,s8,rUo,Kpe,tUo,aUo,nUo,gt,l8,sUo,Zpe,lUo,iUo,ad,dUo,e_e,cUo,fUo,$X,mUo,gUo,hUo,s1,pUo,so,i8,_Uo,o_e,uUo,bUo,qa,vUo,r_e,FUo,TUo,t_e,MUo,EUo,a_e,CUo,wUo,AUo,n_e,l1,s_e,yUo,LUo,kX,xUo,$Uo,kUo,i1,SUo,l_e,RUo,PUo,i_e,BUo,IUo,d1,_je,nd,c1,d_e,d8,NUo,c_e,qUo,uje,jo,c8,jUo,sd,DUo,SX,GUo,OUo,RX,VUo,XUo,zUo,f8,WUo,f_e,QUo,HUo,UUo,ht,m8,JUo,m_e,YUo,KUo,ld,ZUo,g_e,eJo,oJo,PX,rJo,tJo,aJo,f1,nJo,lo,g8,sJo,h_e,lJo,iJo,ja,dJo,p_e,cJo,fJo,__e,mJo,gJo,u_e,hJo,pJo,_Jo,ve,m1,b_e,uJo,bJo,BX,vJo,FJo,TJo,g1,v_e,MJo,EJo,IX,CJo,wJo,AJo,h1,F_e,yJo,LJo,NX,xJo,$Jo,kJo,p1,T_e,SJo,RJo,qX,PJo,BJo,IJo,Bs,M_e,NJo,qJo,jX,jJo,DJo,DX,GJo,OJo,VJo,_1,E_e,XJo,zJo,GX,WJo,QJo,HJo,Is,C_e,UJo,JJo,OX,YJo,KJo,VX,ZJo,eYo,oYo,pt,w_e,rYo,tYo,XX,aYo,nYo,zX,sYo,lYo,WX,iYo,dYo,cYo,u1,A_e,fYo,mYo,QX,gYo,hYo,pYo,b1,y_e,_Yo,uYo,HX,bYo,vYo,FYo,v1,L_e,TYo,MYo,UX,EYo,CYo,wYo,F1,x_e,AYo,yYo,JX,LYo,xYo,$Yo,T1,$_e,kYo,SYo,YX,RYo,PYo,BYo,M1,k_e,IYo,NYo,KX,qYo,jYo,DYo,E1,S_e,GYo,OYo,ZX,VYo,XYo,zYo,C1,WYo,R_e,QYo,HYo,P_e,UYo,JYo,w1,bje,id,A1,B_e,h8,YYo,I_e,KYo,vje,Do,p8,ZYo,dd,eKo,ez,oKo,rKo,oz,tKo,aKo,nKo,_8,sKo,N_e,lKo,iKo,dKo,_t,u8,cKo,q_e,fKo,mKo,cd,gKo,j_e,hKo,pKo,rz,_Ko,uKo,bKo,y1,vKo,io,b8,FKo,D_e,TKo,MKo,Da,EKo,G_e,CKo,wKo,O_e,AKo,yKo,V_e,LKo,xKo,$Ko,X_e,L1,z_e,kKo,SKo,tz,RKo,PKo,BKo,x1,IKo,W_e,NKo,qKo,Q_e,jKo,DKo,$1,Fje,fd,k1,H_e,v8,GKo,U_e,OKo,Tje,Go,F8,VKo,md,XKo,az,zKo,WKo,nz,QKo,HKo,UKo,T8,JKo,J_e,YKo,KKo,ZKo,ut,M8,eZo,Y_e,oZo,rZo,gd,tZo,K_e,aZo,nZo,sz,sZo,lZo,iZo,S1,dZo,co,E8,cZo,Z_e,fZo,mZo,Ga,gZo,eue,hZo,pZo,oue,_Zo,uZo,rue,bZo,vZo,FZo,Se,R1,tue,TZo,MZo,lz,EZo,CZo,wZo,P1,aue,AZo,yZo,iz,LZo,xZo,$Zo,B1,nue,kZo,SZo,dz,RZo,PZo,BZo,I1,sue,IZo,NZo,cz,qZo,jZo,DZo,N1,lue,GZo,OZo,fz,VZo,XZo,zZo,q1,iue,WZo,QZo,mz,HZo,UZo,JZo,j1,due,YZo,KZo,gz,ZZo,eer,oer,D1,cue,rer,ter,hz,aer,ner,ser,G1,fue,ler,ier,pz,der,cer,fer,O1,mer,mue,ger,her,gue,per,_er,V1,Mje,hd,X1,hue,C8,uer,pue,ber,Eje,Oo,w8,ver,pd,Fer,_z,Ter,Mer,uz,Eer,Cer,wer,A8,Aer,_ue,yer,Ler,xer,bt,y8,$er,uue,ker,Ser,_d,Rer,bue,Per,Ber,bz,Ier,Ner,qer,z1,jer,fo,L8,Der,vue,Ger,Oer,Oa,Ver,Fue,Xer,zer,Tue,Wer,Qer,Mue,Her,Uer,Jer,Kr,W1,Eue,Yer,Ker,vz,Zer,eor,oor,Q1,Cue,ror,tor,Fz,aor,nor,sor,H1,wue,lor,ior,Tz,dor,cor,mor,U1,Aue,gor,hor,Mz,por,_or,uor,J1,yue,bor,vor,Ez,For,Tor,Mor,Y1,Eor,Lue,Cor,wor,xue,Aor,yor,K1,Cje,ud,Z1,$ue,x8,Lor,kue,xor,wje,Vo,$8,$or,bd,kor,Cz,Sor,Ror,wz,Por,Bor,Ior,k8,Nor,Sue,qor,jor,Dor,vt,S8,Gor,Rue,Oor,Vor,vd,Xor,Pue,zor,Wor,Az,Qor,Hor,Uor,eT,Jor,mo,R8,Yor,Bue,Kor,Zor,Va,err,Iue,orr,rrr,Nue,trr,arr,que,nrr,srr,lrr,Re,oT,jue,irr,drr,yz,crr,frr,mrr,rT,Due,grr,hrr,Lz,prr,_rr,urr,tT,Gue,brr,vrr,xz,Frr,Trr,Mrr,aT,Oue,Err,Crr,$z,wrr,Arr,yrr,nT,Vue,Lrr,xrr,kz,$rr,krr,Srr,sT,Xue,Rrr,Prr,Sz,Brr,Irr,Nrr,lT,zue,qrr,jrr,Rz,Drr,Grr,Orr,iT,Wue,Vrr,Xrr,Pz,zrr,Wrr,Qrr,dT,Que,Hrr,Urr,Bz,Jrr,Yrr,Krr,cT,Zrr,Hue,etr,otr,Uue,rtr,ttr,fT,Aje,Fd,mT,Jue,P8,atr,Yue,ntr,yje,Xo,B8,str,Td,ltr,Iz,itr,dtr,Nz,ctr,ftr,mtr,I8,gtr,Kue,htr,ptr,_tr,Ft,N8,utr,Zue,btr,vtr,Md,Ftr,ebe,Ttr,Mtr,qz,Etr,Ctr,wtr,gT,Atr,go,q8,ytr,obe,Ltr,xtr,Xa,$tr,rbe,ktr,Str,tbe,Rtr,Ptr,abe,Btr,Itr,Ntr,j8,hT,nbe,qtr,jtr,jz,Dtr,Gtr,Otr,pT,sbe,Vtr,Xtr,Dz,ztr,Wtr,Qtr,_T,Htr,lbe,Utr,Jtr,ibe,Ytr,Ktr,uT,Lje,Ed,bT,dbe,D8,Ztr,cbe,ear,xje,zo,G8,oar,Cd,rar,Gz,tar,aar,Oz,nar,sar,lar,O8,iar,fbe,dar,car,far,Tt,V8,mar,mbe,gar,har,wd,par,gbe,_ar,uar,Vz,bar,Far,Tar,vT,Mar,ho,X8,Ear,hbe,Car,war,za,Aar,pbe,yar,Lar,_be,xar,$ar,ube,kar,Sar,Rar,Zr,FT,bbe,Par,Bar,Xz,Iar,Nar,qar,TT,vbe,jar,Dar,zz,Gar,Oar,Var,MT,Fbe,Xar,zar,Wz,War,Qar,Har,ET,Tbe,Uar,Jar,Qz,Yar,Kar,Zar,CT,Mbe,enr,onr,Hz,rnr,tnr,anr,wT,nnr,Ebe,snr,lnr,Cbe,inr,dnr,AT,$je,Ad,yT,wbe,z8,cnr,Abe,fnr,kje,Wo,W8,mnr,yd,gnr,Uz,hnr,pnr,Jz,_nr,unr,bnr,Q8,vnr,ybe,Fnr,Tnr,Mnr,Mt,H8,Enr,Lbe,Cnr,wnr,Ld,Anr,xbe,ynr,Lnr,Yz,xnr,$nr,knr,LT,Snr,po,U8,Rnr,$be,Pnr,Bnr,Wa,Inr,kbe,Nnr,qnr,Sbe,jnr,Dnr,Rbe,Gnr,Onr,Vnr,xd,xT,Pbe,Xnr,znr,Kz,Wnr,Qnr,Hnr,$T,Bbe,Unr,Jnr,Zz,Ynr,Knr,Znr,kT,Ibe,esr,osr,eW,rsr,tsr,asr,ST,nsr,Nbe,ssr,lsr,qbe,isr,dsr,RT,Sje,$d,PT,jbe,J8,csr,Dbe,fsr,Rje,Qo,Y8,msr,kd,gsr,oW,hsr,psr,rW,_sr,usr,bsr,K8,vsr,Gbe,Fsr,Tsr,Msr,Et,Z8,Esr,Obe,Csr,wsr,Sd,Asr,Vbe,ysr,Lsr,tW,xsr,$sr,ksr,BT,Ssr,_o,e7,Rsr,Xbe,Psr,Bsr,Qa,Isr,zbe,Nsr,qsr,Wbe,jsr,Dsr,Qbe,Gsr,Osr,Vsr,o7,IT,Hbe,Xsr,zsr,aW,Wsr,Qsr,Hsr,NT,Ube,Usr,Jsr,nW,Ysr,Ksr,Zsr,qT,elr,Jbe,olr,rlr,Ybe,tlr,alr,jT,Pje,Rd,DT,Kbe,r7,nlr,Zbe,slr,Bje,Ho,t7,llr,Pd,ilr,sW,dlr,clr,lW,flr,mlr,glr,a7,hlr,e2e,plr,_lr,ulr,Ct,n7,blr,o2e,vlr,Flr,Bd,Tlr,r2e,Mlr,Elr,iW,Clr,wlr,Alr,GT,ylr,uo,s7,Llr,t2e,xlr,$lr,Ha,klr,a2e,Slr,Rlr,n2e,Plr,Blr,s2e,Ilr,Nlr,qlr,l2e,OT,i2e,jlr,Dlr,dW,Glr,Olr,Vlr,VT,Xlr,d2e,zlr,Wlr,c2e,Qlr,Hlr,XT,Ije,Id,zT,f2e,l7,Ulr,m2e,Jlr,Nje,Uo,i7,Ylr,Nd,Klr,cW,Zlr,eir,fW,oir,rir,tir,d7,air,g2e,nir,sir,lir,wt,c7,iir,h2e,dir,cir,qd,fir,p2e,mir,gir,mW,hir,pir,_ir,WT,uir,bo,f7,bir,_2e,vir,Fir,Ua,Tir,u2e,Mir,Eir,b2e,Cir,wir,v2e,Air,yir,Lir,Ja,QT,F2e,xir,$ir,gW,kir,Sir,Rir,HT,T2e,Pir,Bir,hW,Iir,Nir,qir,UT,M2e,jir,Dir,pW,Gir,Oir,Vir,JT,E2e,Xir,zir,_W,Wir,Qir,Hir,YT,Uir,C2e,Jir,Yir,w2e,Kir,Zir,KT,qje,jd,ZT,A2e,m7,edr,y2e,odr,jje,Jo,g7,rdr,Dd,tdr,uW,adr,ndr,bW,sdr,ldr,idr,h7,ddr,L2e,cdr,fdr,mdr,At,p7,gdr,x2e,hdr,pdr,Gd,_dr,$2e,udr,bdr,vW,vdr,Fdr,Tdr,eM,Mdr,vo,_7,Edr,k2e,Cdr,wdr,Ya,Adr,S2e,ydr,Ldr,R2e,xdr,$dr,P2e,kdr,Sdr,Rdr,B2e,oM,I2e,Pdr,Bdr,FW,Idr,Ndr,qdr,rM,jdr,N2e,Ddr,Gdr,q2e,Odr,Vdr,tM,Dje,Od,aM,j2e,u7,Xdr,D2e,zdr,Gje,Yo,b7,Wdr,Vd,Qdr,TW,Hdr,Udr,MW,Jdr,Ydr,Kdr,v7,Zdr,G2e,ecr,ocr,rcr,yt,F7,tcr,O2e,acr,ncr,Xd,scr,V2e,lcr,icr,EW,dcr,ccr,fcr,nM,mcr,wr,T7,gcr,X2e,hcr,pcr,Ka,_cr,z2e,ucr,bcr,W2e,vcr,Fcr,Q2e,Tcr,Mcr,Ecr,q,sM,H2e,Ccr,wcr,CW,Acr,ycr,Lcr,lM,U2e,xcr,$cr,wW,kcr,Scr,Rcr,iM,J2e,Pcr,Bcr,AW,Icr,Ncr,qcr,dM,Y2e,jcr,Dcr,yW,Gcr,Ocr,Vcr,cM,K2e,Xcr,zcr,LW,Wcr,Qcr,Hcr,fM,Z2e,Ucr,Jcr,xW,Ycr,Kcr,Zcr,mM,eve,efr,ofr,$W,rfr,tfr,afr,gM,ove,nfr,sfr,kW,lfr,ifr,dfr,hM,rve,cfr,ffr,SW,mfr,gfr,hfr,pM,tve,pfr,_fr,RW,ufr,bfr,vfr,_M,ave,Ffr,Tfr,PW,Mfr,Efr,Cfr,uM,nve,wfr,Afr,BW,yfr,Lfr,xfr,bM,sve,$fr,kfr,IW,Sfr,Rfr,Pfr,vM,lve,Bfr,Ifr,NW,Nfr,qfr,jfr,FM,ive,Dfr,Gfr,qW,Ofr,Vfr,Xfr,TM,dve,zfr,Wfr,jW,Qfr,Hfr,Ufr,MM,cve,Jfr,Yfr,DW,Kfr,Zfr,emr,Ns,fve,omr,rmr,GW,tmr,amr,OW,nmr,smr,lmr,EM,mve,imr,dmr,VW,cmr,fmr,mmr,CM,gve,gmr,hmr,XW,pmr,_mr,umr,wM,hve,bmr,vmr,zW,Fmr,Tmr,Mmr,AM,pve,Emr,Cmr,WW,wmr,Amr,ymr,yM,_ve,Lmr,xmr,QW,$mr,kmr,Smr,LM,uve,Rmr,Pmr,HW,Bmr,Imr,Nmr,xM,bve,qmr,jmr,UW,Dmr,Gmr,Omr,$M,vve,Vmr,Xmr,JW,zmr,Wmr,Qmr,kM,Fve,Hmr,Umr,YW,Jmr,Ymr,Kmr,SM,Tve,Zmr,egr,KW,ogr,rgr,tgr,RM,Mve,agr,ngr,ZW,sgr,lgr,igr,PM,Eve,dgr,cgr,eQ,fgr,mgr,ggr,BM,Cve,hgr,pgr,oQ,_gr,ugr,bgr,IM,wve,vgr,Fgr,rQ,Tgr,Mgr,Egr,NM,Ave,Cgr,wgr,tQ,Agr,ygr,Lgr,qM,yve,xgr,$gr,aQ,kgr,Sgr,Rgr,jM,Lve,Pgr,Bgr,nQ,Igr,Ngr,qgr,DM,xve,jgr,Dgr,sQ,Ggr,Ogr,Vgr,GM,$ve,Xgr,zgr,lQ,Wgr,Qgr,Hgr,OM,kve,Ugr,Jgr,iQ,Ygr,Kgr,Zgr,VM,Sve,ehr,ohr,dQ,rhr,thr,ahr,XM,Rve,nhr,shr,cQ,lhr,ihr,dhr,zM,Pve,chr,fhr,fQ,mhr,ghr,hhr,WM,Bve,phr,_hr,mQ,uhr,bhr,vhr,QM,Ive,Fhr,Thr,gQ,Mhr,Ehr,Chr,HM,Nve,whr,Ahr,hQ,yhr,Lhr,xhr,UM,qve,$hr,khr,pQ,Shr,Rhr,Phr,JM,jve,Bhr,Ihr,_Q,Nhr,qhr,jhr,YM,Dve,Dhr,Ghr,uQ,Ohr,Vhr,Xhr,KM,Oje,zd,ZM,Gve,M7,zhr,Ove,Whr,Vje,Ko,E7,Qhr,Wd,Hhr,bQ,Uhr,Jhr,vQ,Yhr,Khr,Zhr,C7,epr,Vve,opr,rpr,tpr,Lt,w7,apr,Xve,npr,spr,Qd,lpr,zve,ipr,dpr,FQ,cpr,fpr,mpr,e4,gpr,Ar,A7,hpr,Wve,ppr,_pr,Za,upr,Qve,bpr,vpr,Hve,Fpr,Tpr,Uve,Mpr,Epr,Cpr,se,o4,Jve,wpr,Apr,TQ,ypr,Lpr,xpr,r4,Yve,$pr,kpr,MQ,Spr,Rpr,Ppr,t4,Kve,Bpr,Ipr,EQ,Npr,qpr,jpr,a4,Zve,Dpr,Gpr,CQ,Opr,Vpr,Xpr,n4,eFe,zpr,Wpr,wQ,Qpr,Hpr,Upr,s4,oFe,Jpr,Ypr,AQ,Kpr,Zpr,e_r,l4,rFe,o_r,r_r,yQ,t_r,a_r,n_r,i4,tFe,s_r,l_r,LQ,i_r,d_r,c_r,d4,aFe,f_r,m_r,xQ,g_r,h_r,p_r,c4,nFe,__r,u_r,$Q,b_r,v_r,F_r,f4,sFe,T_r,M_r,kQ,E_r,C_r,w_r,m4,lFe,A_r,y_r,SQ,L_r,x_r,$_r,g4,iFe,k_r,S_r,RQ,R_r,P_r,B_r,h4,dFe,I_r,N_r,PQ,q_r,j_r,D_r,p4,cFe,G_r,O_r,BQ,V_r,X_r,z_r,_4,fFe,W_r,Q_r,IQ,H_r,U_r,J_r,u4,mFe,Y_r,K_r,NQ,Z_r,eur,our,b4,gFe,rur,tur,qQ,aur,nur,sur,v4,hFe,lur,iur,jQ,dur,cur,fur,F4,pFe,mur,gur,DQ,hur,pur,_ur,T4,_Fe,uur,bur,GQ,vur,Fur,Tur,M4,uFe,Mur,Eur,OQ,Cur,wur,Aur,E4,bFe,yur,Lur,VQ,xur,$ur,kur,C4,Xje,Hd,w4,vFe,y7,Sur,FFe,Rur,zje,Zo,L7,Pur,Ud,Bur,XQ,Iur,Nur,zQ,qur,jur,Dur,x7,Gur,TFe,Our,Vur,Xur,xt,$7,zur,MFe,Wur,Qur,Jd,Hur,EFe,Uur,Jur,WQ,Yur,Kur,Zur,A4,ebr,yr,k7,obr,CFe,rbr,tbr,en,abr,wFe,nbr,sbr,AFe,lbr,ibr,yFe,dbr,cbr,fbr,Me,y4,LFe,mbr,gbr,QQ,hbr,pbr,_br,L4,xFe,ubr,bbr,HQ,vbr,Fbr,Tbr,x4,$Fe,Mbr,Ebr,UQ,Cbr,wbr,Abr,$4,kFe,ybr,Lbr,JQ,xbr,$br,kbr,k4,SFe,Sbr,Rbr,YQ,Pbr,Bbr,Ibr,S4,RFe,Nbr,qbr,KQ,jbr,Dbr,Gbr,R4,PFe,Obr,Vbr,ZQ,Xbr,zbr,Wbr,P4,BFe,Qbr,Hbr,eH,Ubr,Jbr,Ybr,B4,IFe,Kbr,Zbr,oH,e2r,o2r,r2r,I4,NFe,t2r,a2r,rH,n2r,s2r,l2r,N4,qFe,i2r,d2r,tH,c2r,f2r,m2r,q4,jFe,g2r,h2r,aH,p2r,_2r,u2r,j4,DFe,b2r,v2r,nH,F2r,T2r,M2r,D4,Wje,Yd,G4,GFe,S7,E2r,OFe,C2r,Qje,er,R7,w2r,Kd,A2r,sH,y2r,L2r,lH,x2r,$2r,k2r,P7,S2r,VFe,R2r,P2r,B2r,$t,B7,I2r,XFe,N2r,q2r,Zd,j2r,zFe,D2r,G2r,iH,O2r,V2r,X2r,O4,z2r,Lr,I7,W2r,WFe,Q2r,H2r,on,U2r,QFe,J2r,Y2r,HFe,K2r,Z2r,UFe,evr,ovr,rvr,rn,V4,JFe,tvr,avr,dH,nvr,svr,lvr,X4,YFe,ivr,dvr,cH,cvr,fvr,mvr,z4,KFe,gvr,hvr,fH,pvr,_vr,uvr,W4,ZFe,bvr,vvr,mH,Fvr,Tvr,Mvr,Q4,Hje,ec,H4,e6e,N7,Evr,o6e,Cvr,Uje,or,q7,wvr,oc,Avr,gH,yvr,Lvr,hH,xvr,$vr,kvr,j7,Svr,r6e,Rvr,Pvr,Bvr,kt,D7,Ivr,t6e,Nvr,qvr,rc,jvr,a6e,Dvr,Gvr,pH,Ovr,Vvr,Xvr,U4,zvr,xr,G7,Wvr,n6e,Qvr,Hvr,tn,Uvr,s6e,Jvr,Yvr,l6e,Kvr,Zvr,i6e,eFr,oFr,rFr,ie,J4,d6e,tFr,aFr,_H,nFr,sFr,lFr,Y4,c6e,iFr,dFr,uH,cFr,fFr,mFr,K4,f6e,gFr,hFr,bH,pFr,_Fr,uFr,Z4,m6e,bFr,vFr,vH,FFr,TFr,MFr,eE,g6e,EFr,CFr,FH,wFr,AFr,yFr,oE,h6e,LFr,xFr,TH,$Fr,kFr,SFr,rE,p6e,RFr,PFr,MH,BFr,IFr,NFr,tE,_6e,qFr,jFr,EH,DFr,GFr,OFr,aE,u6e,VFr,XFr,CH,zFr,WFr,QFr,nE,b6e,HFr,UFr,wH,JFr,YFr,KFr,sE,v6e,ZFr,e6r,AH,o6r,r6r,t6r,lE,F6e,a6r,n6r,yH,s6r,l6r,i6r,iE,T6e,d6r,c6r,LH,f6r,m6r,g6r,dE,M6e,h6r,p6r,xH,_6r,u6r,b6r,cE,E6e,v6r,F6r,$H,T6r,M6r,E6r,fE,C6e,C6r,w6r,kH,A6r,y6r,L6r,mE,w6e,x6r,$6r,SH,k6r,S6r,R6r,gE,A6e,P6r,B6r,RH,I6r,N6r,q6r,hE,y6e,j6r,D6r,PH,G6r,O6r,V6r,pE,L6e,X6r,z6r,BH,W6r,Q6r,H6r,_E,Jje,tc,uE,x6e,O7,U6r,$6e,J6r,Yje,rr,V7,Y6r,ac,K6r,IH,Z6r,e1r,NH,o1r,r1r,t1r,X7,a1r,k6e,n1r,s1r,l1r,St,z7,i1r,S6e,d1r,c1r,nc,f1r,R6e,m1r,g1r,qH,h1r,p1r,_1r,bE,u1r,$r,W7,b1r,P6e,v1r,F1r,an,T1r,B6e,M1r,E1r,I6e,C1r,w1r,N6e,A1r,y1r,L1r,ye,vE,q6e,x1r,$1r,jH,k1r,S1r,R1r,FE,j6e,P1r,B1r,DH,I1r,N1r,q1r,TE,D6e,j1r,D1r,GH,G1r,O1r,V1r,ME,G6e,X1r,z1r,OH,W1r,Q1r,H1r,EE,O6e,U1r,J1r,VH,Y1r,K1r,Z1r,CE,V6e,eTr,oTr,XH,rTr,tTr,aTr,wE,X6e,nTr,sTr,zH,lTr,iTr,dTr,AE,z6e,cTr,fTr,WH,mTr,gTr,hTr,yE,W6e,pTr,_Tr,QH,uTr,bTr,vTr,LE,Q6e,FTr,TTr,HH,MTr,ETr,CTr,xE,Kje,sc,$E,H6e,Q7,wTr,U6e,ATr,Zje,tr,H7,yTr,lc,LTr,UH,xTr,$Tr,JH,kTr,STr,RTr,U7,PTr,J6e,BTr,ITr,NTr,Rt,J7,qTr,Y6e,jTr,DTr,ic,GTr,K6e,OTr,VTr,YH,XTr,zTr,WTr,kE,QTr,kr,Y7,HTr,Z6e,UTr,JTr,nn,YTr,e1e,KTr,ZTr,o1e,eMr,oMr,r1e,rMr,tMr,aMr,oe,SE,t1e,nMr,sMr,KH,lMr,iMr,dMr,RE,a1e,cMr,fMr,ZH,mMr,gMr,hMr,PE,n1e,pMr,_Mr,eU,uMr,bMr,vMr,BE,s1e,FMr,TMr,oU,MMr,EMr,CMr,IE,l1e,wMr,AMr,rU,yMr,LMr,xMr,NE,i1e,$Mr,kMr,tU,SMr,RMr,PMr,qE,d1e,BMr,IMr,aU,NMr,qMr,jMr,jE,c1e,DMr,GMr,nU,OMr,VMr,XMr,DE,f1e,zMr,WMr,sU,QMr,HMr,UMr,GE,m1e,JMr,YMr,lU,KMr,ZMr,e4r,OE,g1e,o4r,r4r,iU,t4r,a4r,n4r,VE,h1e,s4r,l4r,dU,i4r,d4r,c4r,XE,p1e,f4r,m4r,cU,g4r,h4r,p4r,zE,_1e,_4r,u4r,fU,b4r,v4r,F4r,WE,u1e,T4r,M4r,mU,E4r,C4r,w4r,QE,b1e,A4r,y4r,gU,L4r,x4r,$4r,HE,v1e,k4r,S4r,hU,R4r,P4r,B4r,UE,F1e,I4r,N4r,pU,q4r,j4r,D4r,JE,T1e,G4r,O4r,_U,V4r,X4r,z4r,YE,M1e,W4r,Q4r,uU,H4r,U4r,J4r,KE,E1e,Y4r,K4r,bU,Z4r,eEr,oEr,ZE,C1e,rEr,tEr,vU,aEr,nEr,sEr,eC,w1e,lEr,iEr,FU,dEr,cEr,fEr,oC,A1e,mEr,gEr,TU,hEr,pEr,_Er,rC,y1e,uEr,bEr,MU,vEr,FEr,TEr,tC,L1e,MEr,EEr,EU,CEr,wEr,AEr,aC,eDe,dc,nC,x1e,K7,yEr,$1e,LEr,oDe,ar,Z7,xEr,cc,$Er,CU,kEr,SEr,wU,REr,PEr,BEr,e9,IEr,k1e,NEr,qEr,jEr,Pt,o9,DEr,S1e,GEr,OEr,fc,VEr,R1e,XEr,zEr,AU,WEr,QEr,HEr,sC,UEr,Sr,r9,JEr,P1e,YEr,KEr,sn,ZEr,B1e,eCr,oCr,I1e,rCr,tCr,N1e,aCr,nCr,sCr,pe,lC,q1e,lCr,iCr,yU,dCr,cCr,fCr,iC,j1e,mCr,gCr,LU,hCr,pCr,_Cr,dC,D1e,uCr,bCr,xU,vCr,FCr,TCr,cC,G1e,MCr,ECr,$U,CCr,wCr,ACr,fC,O1e,yCr,LCr,kU,xCr,$Cr,kCr,mC,V1e,SCr,RCr,SU,PCr,BCr,ICr,gC,X1e,NCr,qCr,RU,jCr,DCr,GCr,hC,z1e,OCr,VCr,PU,XCr,zCr,WCr,pC,W1e,QCr,HCr,BU,UCr,JCr,YCr,_C,Q1e,KCr,ZCr,IU,e5r,o5r,r5r,uC,H1e,t5r,a5r,NU,n5r,s5r,l5r,bC,U1e,i5r,d5r,qU,c5r,f5r,m5r,vC,J1e,g5r,h5r,jU,p5r,_5r,u5r,FC,Y1e,b5r,v5r,DU,F5r,T5r,M5r,TC,K1e,E5r,C5r,GU,w5r,A5r,y5r,MC,Z1e,L5r,x5r,OU,$5r,k5r,S5r,EC,eTe,R5r,P5r,VU,B5r,I5r,N5r,CC,rDe,mc,wC,oTe,t9,q5r,rTe,j5r,tDe,nr,a9,D5r,gc,G5r,XU,O5r,V5r,zU,X5r,z5r,W5r,n9,Q5r,tTe,H5r,U5r,J5r,Bt,s9,Y5r,aTe,K5r,Z5r,hc,e3r,nTe,o3r,r3r,WU,t3r,a3r,n3r,AC,s3r,Rr,l9,l3r,sTe,i3r,d3r,ln,c3r,lTe,f3r,m3r,iTe,g3r,h3r,dTe,p3r,_3r,u3r,i9,yC,cTe,b3r,v3r,QU,F3r,T3r,M3r,LC,fTe,E3r,C3r,HU,w3r,A3r,y3r,xC,aDe,pc,$C,mTe,d9,L3r,gTe,x3r,nDe,sr,c9,$3r,_c,k3r,UU,S3r,R3r,JU,P3r,B3r,I3r,f9,N3r,hTe,q3r,j3r,D3r,It,m9,G3r,pTe,O3r,V3r,uc,X3r,_Te,z3r,W3r,YU,Q3r,H3r,U3r,kC,J3r,Pr,g9,Y3r,uTe,K3r,Z3r,dn,e0r,bTe,o0r,r0r,vTe,t0r,a0r,FTe,n0r,s0r,l0r,TTe,SC,MTe,i0r,d0r,KU,c0r,f0r,m0r,RC,sDe,bc,PC,ETe,h9,g0r,CTe,h0r,lDe,lr,p9,p0r,vc,_0r,ZU,u0r,b0r,eJ,v0r,F0r,T0r,_9,M0r,wTe,E0r,C0r,w0r,Nt,u9,A0r,ATe,y0r,L0r,Fc,x0r,yTe,$0r,k0r,oJ,S0r,R0r,P0r,BC,B0r,Br,b9,I0r,LTe,N0r,q0r,cn,j0r,xTe,D0r,G0r,$Te,O0r,V0r,kTe,X0r,z0r,W0r,de,IC,STe,Q0r,H0r,rJ,U0r,J0r,Y0r,NC,RTe,K0r,Z0r,tJ,ewr,owr,rwr,qC,PTe,twr,awr,aJ,nwr,swr,lwr,jC,BTe,iwr,dwr,nJ,cwr,fwr,mwr,DC,ITe,gwr,hwr,sJ,pwr,_wr,uwr,GC,NTe,bwr,vwr,lJ,Fwr,Twr,Mwr,OC,qTe,Ewr,Cwr,iJ,wwr,Awr,ywr,VC,jTe,Lwr,xwr,dJ,$wr,kwr,Swr,XC,DTe,Rwr,Pwr,cJ,Bwr,Iwr,Nwr,zC,GTe,qwr,jwr,fJ,Dwr,Gwr,Owr,WC,OTe,Vwr,Xwr,mJ,zwr,Wwr,Qwr,QC,VTe,Hwr,Uwr,gJ,Jwr,Ywr,Kwr,HC,XTe,Zwr,eAr,hJ,oAr,rAr,tAr,UC,zTe,aAr,nAr,pJ,sAr,lAr,iAr,JC,WTe,dAr,cAr,_J,fAr,mAr,gAr,YC,QTe,hAr,pAr,uJ,_Ar,uAr,bAr,KC,HTe,vAr,FAr,bJ,TAr,MAr,EAr,ZC,UTe,CAr,wAr,vJ,AAr,yAr,LAr,e5,JTe,xAr,$Ar,FJ,kAr,SAr,RAr,o5,YTe,PAr,BAr,TJ,IAr,NAr,qAr,r5,iDe,Tc,t5,KTe,v9,jAr,ZTe,DAr,dDe,ir,F9,GAr,Mc,OAr,MJ,VAr,XAr,EJ,zAr,WAr,QAr,T9,HAr,eMe,UAr,JAr,YAr,qt,M9,KAr,oMe,ZAr,eyr,Ec,oyr,rMe,ryr,tyr,CJ,ayr,nyr,syr,a5,lyr,Ir,E9,iyr,tMe,dyr,cyr,fn,fyr,aMe,myr,gyr,nMe,hyr,pyr,sMe,_yr,uyr,byr,ce,n5,lMe,vyr,Fyr,wJ,Tyr,Myr,Eyr,s5,iMe,Cyr,wyr,AJ,Ayr,yyr,Lyr,l5,dMe,xyr,$yr,yJ,kyr,Syr,Ryr,i5,cMe,Pyr,Byr,LJ,Iyr,Nyr,qyr,d5,fMe,jyr,Dyr,xJ,Gyr,Oyr,Vyr,c5,mMe,Xyr,zyr,$J,Wyr,Qyr,Hyr,f5,gMe,Uyr,Jyr,kJ,Yyr,Kyr,Zyr,m5,hMe,eLr,oLr,SJ,rLr,tLr,aLr,g5,pMe,nLr,sLr,RJ,lLr,iLr,dLr,h5,_Me,cLr,fLr,PJ,mLr,gLr,hLr,p5,uMe,pLr,_Lr,BJ,uLr,bLr,vLr,_5,bMe,FLr,TLr,IJ,MLr,ELr,CLr,u5,vMe,wLr,ALr,NJ,yLr,LLr,xLr,b5,FMe,$Lr,kLr,qJ,SLr,RLr,PLr,v5,TMe,BLr,ILr,jJ,NLr,qLr,jLr,F5,MMe,DLr,GLr,DJ,OLr,VLr,XLr,T5,EMe,zLr,WLr,GJ,QLr,HLr,ULr,M5,CMe,JLr,YLr,OJ,KLr,ZLr,e8r,E5,wMe,o8r,r8r,VJ,t8r,a8r,n8r,C5,AMe,s8r,l8r,XJ,i8r,d8r,c8r,w5,cDe,Cc,A5,yMe,C9,f8r,LMe,m8r,fDe,dr,w9,g8r,wc,h8r,zJ,p8r,_8r,WJ,u8r,b8r,v8r,A9,F8r,xMe,T8r,M8r,E8r,jt,y9,C8r,$Me,w8r,A8r,Ac,y8r,kMe,L8r,x8r,QJ,$8r,k8r,S8r,y5,R8r,Nr,L9,P8r,SMe,B8r,I8r,mn,N8r,RMe,q8r,j8r,PMe,D8r,G8r,BMe,O8r,V8r,X8r,IMe,L5,NMe,z8r,W8r,HJ,Q8r,H8r,U8r,x5,mDe,yc,$5,qMe,x9,J8r,jMe,Y8r,gDe,cr,$9,K8r,Lc,Z8r,UJ,e7r,o7r,JJ,r7r,t7r,a7r,k9,n7r,DMe,s7r,l7r,i7r,Dt,S9,d7r,GMe,c7r,f7r,xc,m7r,OMe,g7r,h7r,YJ,p7r,_7r,u7r,k5,b7r,qr,R9,v7r,VMe,F7r,T7r,gn,M7r,XMe,E7r,C7r,zMe,w7r,A7r,WMe,y7r,L7r,x7r,QMe,S5,HMe,$7r,k7r,KJ,S7r,R7r,P7r,R5,hDe,$c,P5,UMe,P9,B7r,JMe,I7r,pDe,fr,B9,N7r,kc,q7r,ZJ,j7r,D7r,eY,G7r,O7r,V7r,I9,X7r,YMe,z7r,W7r,Q7r,Gt,N9,H7r,KMe,U7r,J7r,Sc,Y7r,ZMe,K7r,Z7r,oY,e9r,o9r,r9r,B5,t9r,jr,q9,a9r,e4e,n9r,s9r,hn,l9r,o4e,i9r,d9r,r4e,c9r,f9r,t4e,m9r,g9r,h9r,re,I5,a4e,p9r,_9r,rY,u9r,b9r,v9r,N5,n4e,F9r,T9r,tY,M9r,E9r,C9r,q5,s4e,w9r,A9r,aY,y9r,L9r,x9r,j5,l4e,$9r,k9r,nY,S9r,R9r,P9r,D5,i4e,B9r,I9r,sY,N9r,q9r,j9r,G5,d4e,D9r,G9r,lY,O9r,V9r,X9r,O5,c4e,z9r,W9r,iY,Q9r,H9r,U9r,V5,f4e,J9r,Y9r,dY,K9r,Z9r,exr,X5,m4e,oxr,rxr,cY,txr,axr,nxr,z5,g4e,sxr,lxr,fY,ixr,dxr,cxr,W5,h4e,fxr,mxr,mY,gxr,hxr,pxr,Q5,p4e,_xr,uxr,gY,bxr,vxr,Fxr,H5,_4e,Txr,Mxr,hY,Exr,Cxr,wxr,U5,u4e,Axr,yxr,pY,Lxr,xxr,$xr,J5,b4e,kxr,Sxr,_Y,Rxr,Pxr,Bxr,Y5,v4e,Ixr,Nxr,uY,qxr,jxr,Dxr,K5,F4e,Gxr,Oxr,bY,Vxr,Xxr,zxr,Z5,T4e,Wxr,Qxr,vY,Hxr,Uxr,Jxr,e3,M4e,Yxr,Kxr,FY,Zxr,e$r,o$r,o3,E4e,r$r,t$r,TY,a$r,n$r,s$r,r3,C4e,l$r,i$r,MY,d$r,c$r,f$r,t3,w4e,m$r,g$r,EY,h$r,p$r,_$r,a3,A4e,u$r,b$r,CY,v$r,F$r,T$r,n3,y4e,M$r,E$r,wY,C$r,w$r,A$r,s3,L4e,y$r,L$r,AY,x$r,$$r,k$r,l3,x4e,S$r,R$r,yY,P$r,B$r,I$r,i3,_De,Rc,d3,$4e,j9,N$r,k4e,q$r,uDe,mr,D9,j$r,Pc,D$r,LY,G$r,O$r,xY,V$r,X$r,z$r,G9,W$r,S4e,Q$r,H$r,U$r,Ot,O9,J$r,R4e,Y$r,K$r,Bc,Z$r,P4e,ekr,okr,$Y,rkr,tkr,akr,c3,nkr,Dr,V9,skr,B4e,lkr,ikr,pn,dkr,I4e,ckr,fkr,N4e,mkr,gkr,q4e,hkr,pkr,_kr,Le,f3,j4e,ukr,bkr,kY,vkr,Fkr,Tkr,m3,D4e,Mkr,Ekr,SY,Ckr,wkr,Akr,g3,G4e,ykr,Lkr,RY,xkr,$kr,kkr,h3,O4e,Skr,Rkr,PY,Pkr,Bkr,Ikr,p3,V4e,Nkr,qkr,BY,jkr,Dkr,Gkr,_3,X4e,Okr,Vkr,IY,Xkr,zkr,Wkr,u3,z4e,Qkr,Hkr,NY,Ukr,Jkr,Ykr,b3,W4e,Kkr,Zkr,qY,eSr,oSr,rSr,v3,Q4e,tSr,aSr,jY,nSr,sSr,lSr,F3,H4e,iSr,dSr,DY,cSr,fSr,mSr,T3,bDe,Ic,M3,U4e,X9,gSr,J4e,hSr,vDe,gr,z9,pSr,Nc,_Sr,GY,uSr,bSr,OY,vSr,FSr,TSr,W9,MSr,Y4e,ESr,CSr,wSr,Vt,Q9,ASr,K4e,ySr,LSr,qc,xSr,Z4e,$Sr,kSr,VY,SSr,RSr,PSr,E3,BSr,Gr,H9,ISr,eEe,NSr,qSr,_n,jSr,oEe,DSr,GSr,rEe,OSr,VSr,tEe,XSr,zSr,WSr,Ee,C3,aEe,QSr,HSr,XY,USr,JSr,YSr,w3,nEe,KSr,ZSr,zY,eRr,oRr,rRr,A3,sEe,tRr,aRr,WY,nRr,sRr,lRr,y3,lEe,iRr,dRr,QY,cRr,fRr,mRr,L3,iEe,gRr,hRr,HY,pRr,_Rr,uRr,x3,dEe,bRr,vRr,UY,FRr,TRr,MRr,$3,cEe,ERr,CRr,JY,wRr,ARr,yRr,k3,fEe,LRr,xRr,YY,$Rr,kRr,SRr,S3,mEe,RRr,PRr,KY,BRr,IRr,NRr,R3,gEe,qRr,jRr,ZY,DRr,GRr,ORr,P3,hEe,VRr,XRr,eK,zRr,WRr,QRr,B3,pEe,HRr,URr,oK,JRr,YRr,KRr,I3,FDe,jc,N3,_Ee,U9,ZRr,uEe,ePr,TDe,hr,J9,oPr,Dc,rPr,rK,tPr,aPr,tK,nPr,sPr,lPr,Y9,iPr,bEe,dPr,cPr,fPr,Xt,K9,mPr,vEe,gPr,hPr,Gc,pPr,FEe,_Pr,uPr,aK,bPr,vPr,FPr,q3,TPr,Or,Z9,MPr,TEe,EPr,CPr,un,wPr,MEe,APr,yPr,EEe,LPr,xPr,CEe,$Pr,kPr,SPr,xe,j3,wEe,RPr,PPr,nK,BPr,IPr,NPr,D3,AEe,qPr,jPr,sK,DPr,GPr,OPr,G3,yEe,VPr,XPr,lK,zPr,WPr,QPr,O3,LEe,HPr,UPr,iK,JPr,YPr,KPr,V3,xEe,ZPr,eBr,dK,oBr,rBr,tBr,X3,$Ee,aBr,nBr,cK,sBr,lBr,iBr,z3,kEe,dBr,cBr,fK,fBr,mBr,gBr,W3,SEe,hBr,pBr,mK,_Br,uBr,bBr,Q3,REe,vBr,FBr,gK,TBr,MBr,EBr,H3,PEe,CBr,wBr,hK,ABr,yBr,LBr,U3,MDe,Oc,J3,BEe,ex,xBr,IEe,$Br,EDe,pr,ox,kBr,Vc,SBr,pK,RBr,PBr,_K,BBr,IBr,NBr,rx,qBr,NEe,jBr,DBr,GBr,zt,tx,OBr,qEe,VBr,XBr,Xc,zBr,jEe,WBr,QBr,uK,HBr,UBr,JBr,Y3,YBr,Vr,ax,KBr,DEe,ZBr,eIr,bn,oIr,GEe,rIr,tIr,OEe,aIr,nIr,VEe,sIr,lIr,iIr,Pe,K3,XEe,dIr,cIr,bK,fIr,mIr,gIr,Z3,zEe,hIr,pIr,vK,_Ir,uIr,bIr,e0,WEe,vIr,FIr,FK,TIr,MIr,EIr,o0,QEe,CIr,wIr,TK,AIr,yIr,LIr,r0,HEe,xIr,$Ir,MK,kIr,SIr,RIr,t0,UEe,PIr,BIr,EK,IIr,NIr,qIr,a0,JEe,jIr,DIr,CK,GIr,OIr,VIr,n0,YEe,XIr,zIr,wK,WIr,QIr,HIr,s0,KEe,UIr,JIr,AK,YIr,KIr,ZIr,l0,CDe,zc,i0,ZEe,nx,eNr,eCe,oNr,wDe,_r,sx,rNr,Wc,tNr,yK,aNr,nNr,LK,sNr,lNr,iNr,lx,dNr,oCe,cNr,fNr,mNr,Wt,ix,gNr,rCe,hNr,pNr,Qc,_Nr,tCe,uNr,bNr,xK,vNr,FNr,TNr,d0,MNr,Xr,dx,ENr,aCe,CNr,wNr,vn,ANr,nCe,yNr,LNr,sCe,xNr,$Nr,lCe,kNr,SNr,RNr,$e,c0,iCe,PNr,BNr,$K,INr,NNr,qNr,f0,dCe,jNr,DNr,kK,GNr,ONr,VNr,m0,cCe,XNr,zNr,SK,WNr,QNr,HNr,g0,fCe,UNr,JNr,RK,YNr,KNr,ZNr,h0,mCe,eqr,oqr,PK,rqr,tqr,aqr,p0,gCe,nqr,sqr,BK,lqr,iqr,dqr,_0,hCe,cqr,fqr,IK,mqr,gqr,hqr,u0,pCe,pqr,_qr,NK,uqr,bqr,vqr,b0,_Ce,Fqr,Tqr,qK,Mqr,Eqr,Cqr,v0,uCe,wqr,Aqr,jK,yqr,Lqr,xqr,F0,ADe,Hc,T0,bCe,cx,$qr,vCe,kqr,yDe,ur,fx,Sqr,Uc,Rqr,DK,Pqr,Bqr,GK,Iqr,Nqr,qqr,mx,jqr,FCe,Dqr,Gqr,Oqr,Qt,gx,Vqr,TCe,Xqr,zqr,Jc,Wqr,MCe,Qqr,Hqr,OK,Uqr,Jqr,Yqr,M0,Kqr,zr,hx,Zqr,ECe,ejr,ojr,Fn,rjr,CCe,tjr,ajr,wCe,njr,sjr,ACe,ljr,ijr,djr,ke,E0,yCe,cjr,fjr,VK,mjr,gjr,hjr,C0,LCe,pjr,_jr,XK,ujr,bjr,vjr,w0,xCe,Fjr,Tjr,zK,Mjr,Ejr,Cjr,A0,$Ce,wjr,Ajr,WK,yjr,Ljr,xjr,y0,kCe,$jr,kjr,QK,Sjr,Rjr,Pjr,L0,SCe,Bjr,Ijr,HK,Njr,qjr,jjr,x0,RCe,Djr,Gjr,UK,Ojr,Vjr,Xjr,$0,PCe,zjr,Wjr,JK,Qjr,Hjr,Ujr,k0,BCe,Jjr,Yjr,YK,Kjr,Zjr,eDr,S0,ICe,oDr,rDr,KK,tDr,aDr,nDr,R0,LDe,Yc,P0,NCe,px,sDr,qCe,lDr,xDe,br,_x,iDr,Kc,dDr,ZK,cDr,fDr,eZ,mDr,gDr,hDr,ux,pDr,jCe,_Dr,uDr,bDr,Ht,bx,vDr,DCe,FDr,TDr,Zc,MDr,GCe,EDr,CDr,oZ,wDr,ADr,yDr,B0,LDr,Wr,vx,xDr,OCe,$Dr,kDr,Tn,SDr,VCe,RDr,PDr,XCe,BDr,IDr,zCe,NDr,qDr,jDr,Ge,I0,WCe,DDr,GDr,rZ,ODr,VDr,XDr,N0,QCe,zDr,WDr,tZ,QDr,HDr,UDr,q0,HCe,JDr,YDr,aZ,KDr,ZDr,eGr,j0,UCe,oGr,rGr,nZ,tGr,aGr,nGr,D0,JCe,sGr,lGr,sZ,iGr,dGr,cGr,G0,YCe,fGr,mGr,lZ,gGr,hGr,pGr,O0,KCe,_Gr,uGr,iZ,bGr,vGr,FGr,V0,ZCe,TGr,MGr,dZ,EGr,CGr,wGr,X0,$De,ef,z0,e5e,Fx,AGr,o5e,yGr,kDe,vr,Tx,LGr,of,xGr,cZ,$Gr,kGr,fZ,SGr,RGr,PGr,Mx,BGr,r5e,IGr,NGr,qGr,Ut,Ex,jGr,t5e,DGr,GGr,rf,OGr,a5e,VGr,XGr,mZ,zGr,WGr,QGr,W0,HGr,Qr,Cx,UGr,n5e,JGr,YGr,Mn,KGr,s5e,ZGr,eOr,l5e,oOr,rOr,i5e,tOr,aOr,nOr,Oe,Q0,d5e,sOr,lOr,gZ,iOr,dOr,cOr,H0,c5e,fOr,mOr,hZ,gOr,hOr,pOr,U0,f5e,_Or,uOr,pZ,bOr,vOr,FOr,J0,m5e,TOr,MOr,_Z,EOr,COr,wOr,Y0,g5e,AOr,yOr,uZ,LOr,xOr,$Or,K0,h5e,kOr,SOr,bZ,ROr,POr,BOr,Z0,p5e,IOr,NOr,vZ,qOr,jOr,DOr,ew,_5e,GOr,OOr,FZ,VOr,XOr,zOr,ow,SDe,tf,rw,u5e,wx,WOr,b5e,QOr,RDe,Fr,Ax,HOr,af,UOr,TZ,JOr,YOr,MZ,KOr,ZOr,eVr,yx,oVr,v5e,rVr,tVr,aVr,Jt,Lx,nVr,F5e,sVr,lVr,nf,iVr,T5e,dVr,cVr,EZ,fVr,mVr,gVr,tw,hVr,Hr,xx,pVr,M5e,_Vr,uVr,En,bVr,E5e,vVr,FVr,C5e,TVr,MVr,w5e,EVr,CVr,wVr,A5e,aw,y5e,AVr,yVr,CZ,LVr,xVr,$Vr,nw,PDe,sf,sw,L5e,$x,kVr,x5e,SVr,BDe,Tr,kx,RVr,lf,PVr,wZ,BVr,IVr,AZ,NVr,qVr,jVr,Sx,DVr,$5e,GVr,OVr,VVr,Yt,Rx,XVr,k5e,zVr,WVr,df,QVr,S5e,HVr,UVr,yZ,JVr,YVr,KVr,lw,ZVr,Ur,Px,eXr,R5e,oXr,rXr,Cn,tXr,P5e,aXr,nXr,B5e,sXr,lXr,I5e,iXr,dXr,cXr,Bx,iw,N5e,fXr,mXr,LZ,gXr,hXr,pXr,dw,q5e,_Xr,uXr,xZ,bXr,vXr,FXr,cw,IDe,cf,fw,j5e,Ix,TXr,D5e,MXr,NDe,Mr,Nx,EXr,ff,CXr,$Z,wXr,AXr,kZ,yXr,LXr,xXr,qx,$Xr,G5e,kXr,SXr,RXr,Kt,jx,PXr,O5e,BXr,IXr,mf,NXr,V5e,qXr,jXr,SZ,DXr,GXr,OXr,mw,VXr,Jr,Dx,XXr,X5e,zXr,WXr,wn,QXr,z5e,HXr,UXr,W5e,JXr,YXr,Q5e,KXr,ZXr,ezr,H5e,gw,U5e,ozr,rzr,RZ,tzr,azr,nzr,hw,qDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Iy=new te({}),Ny=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new szr({props:{warning:!0,$$slots:{default:[sSt]},$$scope:{ctx:L}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/configuration_auto.py#L587"}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/configuration_auto.py#L733"}}),Xy=new te({}),zy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/tokenization_auto.py#L390"}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_6/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/tokenization_auto.py#L404"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/tokenization_auto.py#L603"}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_6/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new szr({props:{$$slots:{default:[dSt]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),rL=new te({}),tL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/processing_auto.py#L88"}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/processing_auto.py#L102"}}),sp=new szr({props:{$$slots:{default:[fSt]},$$scope:{ctx:L}}}),lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/processing_auto.py#L255"}}),iL=new te({}),dL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L739"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),cp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L746"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L761"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),eb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),jb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L768"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),Gb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),LL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L775"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),z2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L784"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),Q2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L818"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),VL=new te({}),XL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L825"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),HL=new te({}),UL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L811"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),ZL=new te({}),e8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L793"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),a1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),a8=new te({}),n8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L800"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),s1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),d8=new te({}),c8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L834"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),f1=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),h8=new te({}),p8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L873"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),v8=new te({}),F8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L880"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),C8=new te({}),w8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L903"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),K1=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),x8=new te({}),$8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L887"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),P8=new te({}),B8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L894"}}),N8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),D8=new te({}),G8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L912"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),z8=new te({}),W8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L919"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),J8=new te({}),Y8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L866"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),r7=new te({}),t7=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L841"}}),n7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),l7=new te({}),i7=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L848"}}),c7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),m7=new te({}),g7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_auto.py#L857"}}),p7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),u7=new te({}),b7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),F7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),M7=new te({}),E7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),w7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),y7=new te({}),L7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),$7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),S7=new te({}),R7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),B7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),N7=new te({}),q7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),D7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),O7=new te({}),V7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),z7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),Q7=new te({}),H7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),J7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),K7=new te({}),Z7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),d9=new te({}),c9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),P9=new te({}),B9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ZRt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ePt]},$$scope:{ctx:L}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[oPt]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_6/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_6/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_6/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rPt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),Sy=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),Ry=o("AutoConfig"),Ln=o(", "),xn=a("a"),Py=o("AutoModel"),_i=o(`, and
`),$n=a("a"),By=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ok=o("will create a model that is an instance of "),bi=a("a"),rk=o("BertModel"),tk=o("."),Eo=l(),wa=a("p"),ak=o("There is one class of "),vf=a("code"),nk=o("AutoModel"),WOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bqe=l(),vi=a("h2"),Ff=a("a"),Aoe=a("span"),F(Iy.$$.fragment),QOe=l(),yoe=a("span"),HOe=o("Extending the Auto Classes"),Iqe=l(),kn=a("p"),UOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Loe=a("code"),JOe=o("NewModel"),YOe=o(", make sure you have a "),xoe=a("code"),KOe=o("NewModelConfig"),ZOe=o(` then you can add those to the auto
classes like this:`),Nqe=l(),F(Ny.$$.fragment),qqe=l(),sk=a("p"),eVe=o("You will then be able to use the auto classes like you would usually do!"),jqe=l(),F(Tf.$$.fragment),Dqe=l(),Fi=a("h2"),Mf=a("a"),$oe=a("span"),F(qy.$$.fragment),oVe=l(),koe=a("span"),rVe=o("AutoConfig"),Gqe=l(),Co=a("div"),F(jy.$$.fragment),tVe=l(),Dy=a("p"),aVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lk=a("a"),nVe=o("from_pretrained()"),sVe=o(" class method."),lVe=l(),Gy=a("p"),iVe=o("This class cannot be instantiated directly using "),Soe=a("code"),dVe=o("__init__()"),cVe=o(" (throws an error)."),fVe=l(),Er=a("div"),F(Oy.$$.fragment),mVe=l(),Roe=a("p"),gVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hVe=l(),Ti=a("p"),pVe=o("The configuration class to instantiate is selected based on the "),Poe=a("code"),_Ve=o("model_type"),uVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Boe=a("code"),bVe=o("pretrained_model_name_or_path"),vVe=o(":"),FVe=l(),A=a("ul"),Ef=a("li"),Ioe=a("strong"),TVe=o("albert"),MVe=o(" \u2014 "),ik=a("a"),EVe=o("AlbertConfig"),CVe=o(" (ALBERT model)"),wVe=l(),Cf=a("li"),Noe=a("strong"),AVe=o("bart"),yVe=o(" \u2014 "),dk=a("a"),LVe=o("BartConfig"),xVe=o(" (BART model)"),$Ve=l(),wf=a("li"),qoe=a("strong"),kVe=o("beit"),SVe=o(" \u2014 "),ck=a("a"),RVe=o("BeitConfig"),PVe=o(" (BEiT model)"),BVe=l(),Af=a("li"),joe=a("strong"),IVe=o("bert"),NVe=o(" \u2014 "),fk=a("a"),qVe=o("BertConfig"),jVe=o(" (BERT model)"),DVe=l(),yf=a("li"),Doe=a("strong"),GVe=o("bert-generation"),OVe=o(" \u2014 "),mk=a("a"),VVe=o("BertGenerationConfig"),XVe=o(" (Bert Generation model)"),zVe=l(),Lf=a("li"),Goe=a("strong"),WVe=o("big_bird"),QVe=o(" \u2014 "),gk=a("a"),HVe=o("BigBirdConfig"),UVe=o(" (BigBird model)"),JVe=l(),xf=a("li"),Ooe=a("strong"),YVe=o("bigbird_pegasus"),KVe=o(" \u2014 "),hk=a("a"),ZVe=o("BigBirdPegasusConfig"),eXe=o(" (BigBird-Pegasus model)"),oXe=l(),$f=a("li"),Voe=a("strong"),rXe=o("blenderbot"),tXe=o(" \u2014 "),pk=a("a"),aXe=o("BlenderbotConfig"),nXe=o(" (Blenderbot model)"),sXe=l(),kf=a("li"),Xoe=a("strong"),lXe=o("blenderbot-small"),iXe=o(" \u2014 "),_k=a("a"),dXe=o("BlenderbotSmallConfig"),cXe=o(" (BlenderbotSmall model)"),fXe=l(),Sf=a("li"),zoe=a("strong"),mXe=o("camembert"),gXe=o(" \u2014 "),uk=a("a"),hXe=o("CamembertConfig"),pXe=o(" (CamemBERT model)"),_Xe=l(),Rf=a("li"),Woe=a("strong"),uXe=o("canine"),bXe=o(" \u2014 "),bk=a("a"),vXe=o("CanineConfig"),FXe=o(" (CANINE model)"),TXe=l(),Pf=a("li"),Qoe=a("strong"),MXe=o("clip"),EXe=o(" \u2014 "),vk=a("a"),CXe=o("CLIPConfig"),wXe=o(" (CLIP model)"),AXe=l(),Bf=a("li"),Hoe=a("strong"),yXe=o("convbert"),LXe=o(" \u2014 "),Fk=a("a"),xXe=o("ConvBertConfig"),$Xe=o(" (ConvBERT model)"),kXe=l(),If=a("li"),Uoe=a("strong"),SXe=o("convnext"),RXe=o(" \u2014 "),Tk=a("a"),PXe=o("ConvNextConfig"),BXe=o(" (ConvNeXT model)"),IXe=l(),Nf=a("li"),Joe=a("strong"),NXe=o("ctrl"),qXe=o(" \u2014 "),Mk=a("a"),jXe=o("CTRLConfig"),DXe=o(" (CTRL model)"),GXe=l(),qf=a("li"),Yoe=a("strong"),OXe=o("cvt"),VXe=o(" \u2014 "),Ek=a("a"),XXe=o("CvtConfig"),zXe=o(" (CvT model)"),WXe=l(),jf=a("li"),Koe=a("strong"),QXe=o("data2vec-audio"),HXe=o(" \u2014 "),Ck=a("a"),UXe=o("Data2VecAudioConfig"),JXe=o(" (Data2VecAudio model)"),YXe=l(),Df=a("li"),Zoe=a("strong"),KXe=o("data2vec-text"),ZXe=o(" \u2014 "),wk=a("a"),eze=o("Data2VecTextConfig"),oze=o(" (Data2VecText model)"),rze=l(),Gf=a("li"),ere=a("strong"),tze=o("data2vec-vision"),aze=o(" \u2014 "),Ak=a("a"),nze=o("Data2VecVisionConfig"),sze=o(" (Data2VecVision model)"),lze=l(),Of=a("li"),ore=a("strong"),ize=o("deberta"),dze=o(" \u2014 "),yk=a("a"),cze=o("DebertaConfig"),fze=o(" (DeBERTa model)"),mze=l(),Vf=a("li"),rre=a("strong"),gze=o("deberta-v2"),hze=o(" \u2014 "),Lk=a("a"),pze=o("DebertaV2Config"),_ze=o(" (DeBERTa-v2 model)"),uze=l(),Xf=a("li"),tre=a("strong"),bze=o("decision_transformer"),vze=o(" \u2014 "),xk=a("a"),Fze=o("DecisionTransformerConfig"),Tze=o(" (Decision Transformer model)"),Mze=l(),zf=a("li"),are=a("strong"),Eze=o("deit"),Cze=o(" \u2014 "),$k=a("a"),wze=o("DeiTConfig"),Aze=o(" (DeiT model)"),yze=l(),Wf=a("li"),nre=a("strong"),Lze=o("detr"),xze=o(" \u2014 "),kk=a("a"),$ze=o("DetrConfig"),kze=o(" (DETR model)"),Sze=l(),Qf=a("li"),sre=a("strong"),Rze=o("distilbert"),Pze=o(" \u2014 "),Sk=a("a"),Bze=o("DistilBertConfig"),Ize=o(" (DistilBERT model)"),Nze=l(),Hf=a("li"),lre=a("strong"),qze=o("dpr"),jze=o(" \u2014 "),Rk=a("a"),Dze=o("DPRConfig"),Gze=o(" (DPR model)"),Oze=l(),Uf=a("li"),ire=a("strong"),Vze=o("dpt"),Xze=o(" \u2014 "),Pk=a("a"),zze=o("DPTConfig"),Wze=o(" (DPT model)"),Qze=l(),Jf=a("li"),dre=a("strong"),Hze=o("electra"),Uze=o(" \u2014 "),Bk=a("a"),Jze=o("ElectraConfig"),Yze=o(" (ELECTRA model)"),Kze=l(),Yf=a("li"),cre=a("strong"),Zze=o("encoder-decoder"),eWe=o(" \u2014 "),Ik=a("a"),oWe=o("EncoderDecoderConfig"),rWe=o(" (Encoder decoder model)"),tWe=l(),Kf=a("li"),fre=a("strong"),aWe=o("flaubert"),nWe=o(" \u2014 "),Nk=a("a"),sWe=o("FlaubertConfig"),lWe=o(" (FlauBERT model)"),iWe=l(),Zf=a("li"),mre=a("strong"),dWe=o("flava"),cWe=o(" \u2014 "),qk=a("a"),fWe=o("FlavaConfig"),mWe=o(" (FLAVA model)"),gWe=l(),em=a("li"),gre=a("strong"),hWe=o("fnet"),pWe=o(" \u2014 "),jk=a("a"),_We=o("FNetConfig"),uWe=o(" (FNet model)"),bWe=l(),om=a("li"),hre=a("strong"),vWe=o("fsmt"),FWe=o(" \u2014 "),Dk=a("a"),TWe=o("FSMTConfig"),MWe=o(" (FairSeq Machine-Translation model)"),EWe=l(),rm=a("li"),pre=a("strong"),CWe=o("funnel"),wWe=o(" \u2014 "),Gk=a("a"),AWe=o("FunnelConfig"),yWe=o(" (Funnel Transformer model)"),LWe=l(),tm=a("li"),_re=a("strong"),xWe=o("glpn"),$We=o(" \u2014 "),Ok=a("a"),kWe=o("GLPNConfig"),SWe=o(" (GLPN model)"),RWe=l(),am=a("li"),ure=a("strong"),PWe=o("gpt2"),BWe=o(" \u2014 "),Vk=a("a"),IWe=o("GPT2Config"),NWe=o(" (OpenAI GPT-2 model)"),qWe=l(),nm=a("li"),bre=a("strong"),jWe=o("gpt_neo"),DWe=o(" \u2014 "),Xk=a("a"),GWe=o("GPTNeoConfig"),OWe=o(" (GPT Neo model)"),VWe=l(),sm=a("li"),vre=a("strong"),XWe=o("gpt_neox"),zWe=o(" \u2014 "),zk=a("a"),WWe=o("GPTNeoXConfig"),QWe=o(" (GPT NeoX model)"),HWe=l(),lm=a("li"),Fre=a("strong"),UWe=o("gptj"),JWe=o(" \u2014 "),Wk=a("a"),YWe=o("GPTJConfig"),KWe=o(" (GPT-J model)"),ZWe=l(),im=a("li"),Tre=a("strong"),eQe=o("hubert"),oQe=o(" \u2014 "),Qk=a("a"),rQe=o("HubertConfig"),tQe=o(" (Hubert model)"),aQe=l(),dm=a("li"),Mre=a("strong"),nQe=o("ibert"),sQe=o(" \u2014 "),Hk=a("a"),lQe=o("IBertConfig"),iQe=o(" (I-BERT model)"),dQe=l(),cm=a("li"),Ere=a("strong"),cQe=o("imagegpt"),fQe=o(" \u2014 "),Uk=a("a"),mQe=o("ImageGPTConfig"),gQe=o(" (ImageGPT model)"),hQe=l(),fm=a("li"),Cre=a("strong"),pQe=o("layoutlm"),_Qe=o(" \u2014 "),Jk=a("a"),uQe=o("LayoutLMConfig"),bQe=o(" (LayoutLM model)"),vQe=l(),mm=a("li"),wre=a("strong"),FQe=o("layoutlmv2"),TQe=o(" \u2014 "),Yk=a("a"),MQe=o("LayoutLMv2Config"),EQe=o(" (LayoutLMv2 model)"),CQe=l(),gm=a("li"),Are=a("strong"),wQe=o("layoutlmv3"),AQe=o(" \u2014 "),Kk=a("a"),yQe=o("LayoutLMv3Config"),LQe=o(" (LayoutLMv3 model)"),xQe=l(),hm=a("li"),yre=a("strong"),$Qe=o("led"),kQe=o(" \u2014 "),Zk=a("a"),SQe=o("LEDConfig"),RQe=o(" (LED model)"),PQe=l(),pm=a("li"),Lre=a("strong"),BQe=o("levit"),IQe=o(" \u2014 "),eS=a("a"),NQe=o("LevitConfig"),qQe=o(" (LeViT model)"),jQe=l(),_m=a("li"),xre=a("strong"),DQe=o("longformer"),GQe=o(" \u2014 "),oS=a("a"),OQe=o("LongformerConfig"),VQe=o(" (Longformer model)"),XQe=l(),um=a("li"),$re=a("strong"),zQe=o("luke"),WQe=o(" \u2014 "),rS=a("a"),QQe=o("LukeConfig"),HQe=o(" (LUKE model)"),UQe=l(),bm=a("li"),kre=a("strong"),JQe=o("lxmert"),YQe=o(" \u2014 "),tS=a("a"),KQe=o("LxmertConfig"),ZQe=o(" (LXMERT model)"),eHe=l(),vm=a("li"),Sre=a("strong"),oHe=o("m2m_100"),rHe=o(" \u2014 "),aS=a("a"),tHe=o("M2M100Config"),aHe=o(" (M2M100 model)"),nHe=l(),Fm=a("li"),Rre=a("strong"),sHe=o("marian"),lHe=o(" \u2014 "),nS=a("a"),iHe=o("MarianConfig"),dHe=o(" (Marian model)"),cHe=l(),Tm=a("li"),Pre=a("strong"),fHe=o("maskformer"),mHe=o(" \u2014 "),sS=a("a"),gHe=o("MaskFormerConfig"),hHe=o(" (MaskFormer model)"),pHe=l(),Mm=a("li"),Bre=a("strong"),_He=o("mbart"),uHe=o(" \u2014 "),lS=a("a"),bHe=o("MBartConfig"),vHe=o(" (mBART model)"),FHe=l(),Em=a("li"),Ire=a("strong"),THe=o("megatron-bert"),MHe=o(" \u2014 "),iS=a("a"),EHe=o("MegatronBertConfig"),CHe=o(" (Megatron-BERT model)"),wHe=l(),Cm=a("li"),Nre=a("strong"),AHe=o("mobilebert"),yHe=o(" \u2014 "),dS=a("a"),LHe=o("MobileBertConfig"),xHe=o(" (MobileBERT model)"),$He=l(),wm=a("li"),qre=a("strong"),kHe=o("mpnet"),SHe=o(" \u2014 "),cS=a("a"),RHe=o("MPNetConfig"),PHe=o(" (MPNet model)"),BHe=l(),Am=a("li"),jre=a("strong"),IHe=o("mt5"),NHe=o(" \u2014 "),fS=a("a"),qHe=o("MT5Config"),jHe=o(" (MT5 model)"),DHe=l(),ym=a("li"),Dre=a("strong"),GHe=o("nystromformer"),OHe=o(" \u2014 "),mS=a("a"),VHe=o("NystromformerConfig"),XHe=o(" (Nystr\xF6mformer model)"),zHe=l(),Lm=a("li"),Gre=a("strong"),WHe=o("openai-gpt"),QHe=o(" \u2014 "),gS=a("a"),HHe=o("OpenAIGPTConfig"),UHe=o(" (OpenAI GPT model)"),JHe=l(),xm=a("li"),Ore=a("strong"),YHe=o("opt"),KHe=o(" \u2014 "),hS=a("a"),ZHe=o("OPTConfig"),eUe=o(" (OPT model)"),oUe=l(),$m=a("li"),Vre=a("strong"),rUe=o("pegasus"),tUe=o(" \u2014 "),pS=a("a"),aUe=o("PegasusConfig"),nUe=o(" (Pegasus model)"),sUe=l(),km=a("li"),Xre=a("strong"),lUe=o("perceiver"),iUe=o(" \u2014 "),_S=a("a"),dUe=o("PerceiverConfig"),cUe=o(" (Perceiver model)"),fUe=l(),Sm=a("li"),zre=a("strong"),mUe=o("plbart"),gUe=o(" \u2014 "),uS=a("a"),hUe=o("PLBartConfig"),pUe=o(" (PLBart model)"),_Ue=l(),Rm=a("li"),Wre=a("strong"),uUe=o("poolformer"),bUe=o(" \u2014 "),bS=a("a"),vUe=o("PoolFormerConfig"),FUe=o(" (PoolFormer model)"),TUe=l(),Pm=a("li"),Qre=a("strong"),MUe=o("prophetnet"),EUe=o(" \u2014 "),vS=a("a"),CUe=o("ProphetNetConfig"),wUe=o(" (ProphetNet model)"),AUe=l(),Bm=a("li"),Hre=a("strong"),yUe=o("qdqbert"),LUe=o(" \u2014 "),FS=a("a"),xUe=o("QDQBertConfig"),$Ue=o(" (QDQBert model)"),kUe=l(),Im=a("li"),Ure=a("strong"),SUe=o("rag"),RUe=o(" \u2014 "),TS=a("a"),PUe=o("RagConfig"),BUe=o(" (RAG model)"),IUe=l(),Nm=a("li"),Jre=a("strong"),NUe=o("realm"),qUe=o(" \u2014 "),MS=a("a"),jUe=o("RealmConfig"),DUe=o(" (REALM model)"),GUe=l(),qm=a("li"),Yre=a("strong"),OUe=o("reformer"),VUe=o(" \u2014 "),ES=a("a"),XUe=o("ReformerConfig"),zUe=o(" (Reformer model)"),WUe=l(),jm=a("li"),Kre=a("strong"),QUe=o("regnet"),HUe=o(" \u2014 "),CS=a("a"),UUe=o("RegNetConfig"),JUe=o(" (RegNet model)"),YUe=l(),Dm=a("li"),Zre=a("strong"),KUe=o("rembert"),ZUe=o(" \u2014 "),wS=a("a"),eJe=o("RemBertConfig"),oJe=o(" (RemBERT model)"),rJe=l(),Gm=a("li"),ete=a("strong"),tJe=o("resnet"),aJe=o(" \u2014 "),AS=a("a"),nJe=o("ResNetConfig"),sJe=o(" (ResNet model)"),lJe=l(),Om=a("li"),ote=a("strong"),iJe=o("retribert"),dJe=o(" \u2014 "),yS=a("a"),cJe=o("RetriBertConfig"),fJe=o(" (RetriBERT model)"),mJe=l(),Vm=a("li"),rte=a("strong"),gJe=o("roberta"),hJe=o(" \u2014 "),LS=a("a"),pJe=o("RobertaConfig"),_Je=o(" (RoBERTa model)"),uJe=l(),Xm=a("li"),tte=a("strong"),bJe=o("roformer"),vJe=o(" \u2014 "),xS=a("a"),FJe=o("RoFormerConfig"),TJe=o(" (RoFormer model)"),MJe=l(),zm=a("li"),ate=a("strong"),EJe=o("segformer"),CJe=o(" \u2014 "),$S=a("a"),wJe=o("SegformerConfig"),AJe=o(" (SegFormer model)"),yJe=l(),Wm=a("li"),nte=a("strong"),LJe=o("sew"),xJe=o(" \u2014 "),kS=a("a"),$Je=o("SEWConfig"),kJe=o(" (SEW model)"),SJe=l(),Qm=a("li"),ste=a("strong"),RJe=o("sew-d"),PJe=o(" \u2014 "),SS=a("a"),BJe=o("SEWDConfig"),IJe=o(" (SEW-D model)"),NJe=l(),Hm=a("li"),lte=a("strong"),qJe=o("speech-encoder-decoder"),jJe=o(" \u2014 "),RS=a("a"),DJe=o("SpeechEncoderDecoderConfig"),GJe=o(" (Speech Encoder decoder model)"),OJe=l(),Um=a("li"),ite=a("strong"),VJe=o("speech_to_text"),XJe=o(" \u2014 "),PS=a("a"),zJe=o("Speech2TextConfig"),WJe=o(" (Speech2Text model)"),QJe=l(),Jm=a("li"),dte=a("strong"),HJe=o("speech_to_text_2"),UJe=o(" \u2014 "),BS=a("a"),JJe=o("Speech2Text2Config"),YJe=o(" (Speech2Text2 model)"),KJe=l(),Ym=a("li"),cte=a("strong"),ZJe=o("splinter"),eYe=o(" \u2014 "),IS=a("a"),oYe=o("SplinterConfig"),rYe=o(" (Splinter model)"),tYe=l(),Km=a("li"),fte=a("strong"),aYe=o("squeezebert"),nYe=o(" \u2014 "),NS=a("a"),sYe=o("SqueezeBertConfig"),lYe=o(" (SqueezeBERT model)"),iYe=l(),Zm=a("li"),mte=a("strong"),dYe=o("swin"),cYe=o(" \u2014 "),qS=a("a"),fYe=o("SwinConfig"),mYe=o(" (Swin Transformer model)"),gYe=l(),eg=a("li"),gte=a("strong"),hYe=o("t5"),pYe=o(" \u2014 "),jS=a("a"),_Ye=o("T5Config"),uYe=o(" (T5 model)"),bYe=l(),og=a("li"),hte=a("strong"),vYe=o("tapas"),FYe=o(" \u2014 "),DS=a("a"),TYe=o("TapasConfig"),MYe=o(" (TAPAS model)"),EYe=l(),rg=a("li"),pte=a("strong"),CYe=o("trajectory_transformer"),wYe=o(" \u2014 "),GS=a("a"),AYe=o("TrajectoryTransformerConfig"),yYe=o(" (Trajectory Transformer model)"),LYe=l(),tg=a("li"),_te=a("strong"),xYe=o("transfo-xl"),$Ye=o(" \u2014 "),OS=a("a"),kYe=o("TransfoXLConfig"),SYe=o(" (Transformer-XL model)"),RYe=l(),ag=a("li"),ute=a("strong"),PYe=o("trocr"),BYe=o(" \u2014 "),VS=a("a"),IYe=o("TrOCRConfig"),NYe=o(" (TrOCR model)"),qYe=l(),ng=a("li"),bte=a("strong"),jYe=o("unispeech"),DYe=o(" \u2014 "),XS=a("a"),GYe=o("UniSpeechConfig"),OYe=o(" (UniSpeech model)"),VYe=l(),sg=a("li"),vte=a("strong"),XYe=o("unispeech-sat"),zYe=o(" \u2014 "),zS=a("a"),WYe=o("UniSpeechSatConfig"),QYe=o(" (UniSpeechSat model)"),HYe=l(),lg=a("li"),Fte=a("strong"),UYe=o("van"),JYe=o(" \u2014 "),WS=a("a"),YYe=o("VanConfig"),KYe=o(" (VAN model)"),ZYe=l(),ig=a("li"),Tte=a("strong"),eKe=o("vilt"),oKe=o(" \u2014 "),QS=a("a"),rKe=o("ViltConfig"),tKe=o(" (ViLT model)"),aKe=l(),dg=a("li"),Mte=a("strong"),nKe=o("vision-encoder-decoder"),sKe=o(" \u2014 "),HS=a("a"),lKe=o("VisionEncoderDecoderConfig"),iKe=o(" (Vision Encoder decoder model)"),dKe=l(),cg=a("li"),Ete=a("strong"),cKe=o("vision-text-dual-encoder"),fKe=o(" \u2014 "),US=a("a"),mKe=o("VisionTextDualEncoderConfig"),gKe=o(" (VisionTextDualEncoder model)"),hKe=l(),fg=a("li"),Cte=a("strong"),pKe=o("visual_bert"),_Ke=o(" \u2014 "),JS=a("a"),uKe=o("VisualBertConfig"),bKe=o(" (VisualBERT model)"),vKe=l(),mg=a("li"),wte=a("strong"),FKe=o("vit"),TKe=o(" \u2014 "),YS=a("a"),MKe=o("ViTConfig"),EKe=o(" (ViT model)"),CKe=l(),gg=a("li"),Ate=a("strong"),wKe=o("vit_mae"),AKe=o(" \u2014 "),KS=a("a"),yKe=o("ViTMAEConfig"),LKe=o(" (ViTMAE model)"),xKe=l(),hg=a("li"),yte=a("strong"),$Ke=o("wav2vec2"),kKe=o(" \u2014 "),ZS=a("a"),SKe=o("Wav2Vec2Config"),RKe=o(" (Wav2Vec2 model)"),PKe=l(),pg=a("li"),Lte=a("strong"),BKe=o("wav2vec2-conformer"),IKe=o(" \u2014 "),eR=a("a"),NKe=o("Wav2Vec2ConformerConfig"),qKe=o(" (Wav2Vec2-Conformer model)"),jKe=l(),_g=a("li"),xte=a("strong"),DKe=o("wavlm"),GKe=o(" \u2014 "),oR=a("a"),OKe=o("WavLMConfig"),VKe=o(" (WavLM model)"),XKe=l(),ug=a("li"),$te=a("strong"),zKe=o("xglm"),WKe=o(" \u2014 "),rR=a("a"),QKe=o("XGLMConfig"),HKe=o(" (XGLM model)"),UKe=l(),bg=a("li"),kte=a("strong"),JKe=o("xlm"),YKe=o(" \u2014 "),tR=a("a"),KKe=o("XLMConfig"),ZKe=o(" (XLM model)"),eZe=l(),vg=a("li"),Ste=a("strong"),oZe=o("xlm-prophetnet"),rZe=o(" \u2014 "),aR=a("a"),tZe=o("XLMProphetNetConfig"),aZe=o(" (XLM-ProphetNet model)"),nZe=l(),Fg=a("li"),Rte=a("strong"),sZe=o("xlm-roberta"),lZe=o(" \u2014 "),nR=a("a"),iZe=o("XLMRobertaConfig"),dZe=o(" (XLM-RoBERTa model)"),cZe=l(),Tg=a("li"),Pte=a("strong"),fZe=o("xlm-roberta-xl"),mZe=o(" \u2014 "),sR=a("a"),gZe=o("XLMRobertaXLConfig"),hZe=o(" (XLM-RoBERTa-XL model)"),pZe=l(),Mg=a("li"),Bte=a("strong"),_Ze=o("xlnet"),uZe=o(" \u2014 "),lR=a("a"),bZe=o("XLNetConfig"),vZe=o(" (XLNet model)"),FZe=l(),Eg=a("li"),Ite=a("strong"),TZe=o("yolos"),MZe=o(" \u2014 "),iR=a("a"),EZe=o("YolosConfig"),CZe=o(" (YOLOS model)"),wZe=l(),Cg=a("li"),Nte=a("strong"),AZe=o("yoso"),yZe=o(" \u2014 "),dR=a("a"),LZe=o("YosoConfig"),xZe=o(" (YOSO model)"),$Ze=l(),F(wg.$$.fragment),kZe=l(),Ag=a("div"),F(Vy.$$.fragment),SZe=l(),qte=a("p"),RZe=o("Register a new configuration for this class."),Oqe=l(),Mi=a("h2"),yg=a("a"),jte=a("span"),F(Xy.$$.fragment),PZe=l(),Dte=a("span"),BZe=o("AutoTokenizer"),Vqe=l(),wo=a("div"),F(zy.$$.fragment),IZe=l(),Wy=a("p"),NZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cR=a("a"),qZe=o("AutoTokenizer.from_pretrained()"),jZe=o(" class method."),DZe=l(),Qy=a("p"),GZe=o("This class cannot be instantiated directly using "),Gte=a("code"),OZe=o("__init__()"),VZe=o(" (throws an error)."),XZe=l(),Cr=a("div"),F(Hy.$$.fragment),zZe=l(),Ote=a("p"),WZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QZe=l(),Aa=a("p"),HZe=o("The tokenizer class to instantiate is selected based on the "),Vte=a("code"),UZe=o("model_type"),JZe=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),YZe=o("pretrained_model_name_or_path"),KZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),ZZe=o("pretrained_model_name_or_path"),eeo=o(":"),oeo=l(),k=a("ul"),Sn=a("li"),Wte=a("strong"),reo=o("albert"),teo=o(" \u2014 "),fR=a("a"),aeo=o("AlbertTokenizer"),neo=o(" or "),mR=a("a"),seo=o("AlbertTokenizerFast"),leo=o(" (ALBERT model)"),ieo=l(),Rn=a("li"),Qte=a("strong"),deo=o("bart"),ceo=o(" \u2014 "),gR=a("a"),feo=o("BartTokenizer"),meo=o(" or "),hR=a("a"),geo=o("BartTokenizerFast"),heo=o(" (BART model)"),peo=l(),Pn=a("li"),Hte=a("strong"),_eo=o("barthez"),ueo=o(" \u2014 "),pR=a("a"),beo=o("BarthezTokenizer"),veo=o(" or "),_R=a("a"),Feo=o("BarthezTokenizerFast"),Teo=o(" (BARThez model)"),Meo=l(),Lg=a("li"),Ute=a("strong"),Eeo=o("bartpho"),Ceo=o(" \u2014 "),uR=a("a"),weo=o("BartphoTokenizer"),Aeo=o(" (BARTpho model)"),yeo=l(),Bn=a("li"),Jte=a("strong"),Leo=o("bert"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("BertTokenizer"),keo=o(" or "),vR=a("a"),Seo=o("BertTokenizerFast"),Reo=o(" (BERT model)"),Peo=l(),xg=a("li"),Yte=a("strong"),Beo=o("bert-generation"),Ieo=o(" \u2014 "),FR=a("a"),Neo=o("BertGenerationTokenizer"),qeo=o(" (Bert Generation model)"),jeo=l(),$g=a("li"),Kte=a("strong"),Deo=o("bert-japanese"),Geo=o(" \u2014 "),TR=a("a"),Oeo=o("BertJapaneseTokenizer"),Veo=o(" (BertJapanese model)"),Xeo=l(),kg=a("li"),Zte=a("strong"),zeo=o("bertweet"),Weo=o(" \u2014 "),MR=a("a"),Qeo=o("BertweetTokenizer"),Heo=o(" (BERTweet model)"),Ueo=l(),In=a("li"),eae=a("strong"),Jeo=o("big_bird"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("BigBirdTokenizer"),Zeo=o(" or "),CR=a("a"),eoo=o("BigBirdTokenizerFast"),ooo=o(" (BigBird model)"),roo=l(),Nn=a("li"),oae=a("strong"),too=o("bigbird_pegasus"),aoo=o(" \u2014 "),wR=a("a"),noo=o("PegasusTokenizer"),soo=o(" or "),AR=a("a"),loo=o("PegasusTokenizerFast"),ioo=o(" (BigBird-Pegasus model)"),doo=l(),qn=a("li"),rae=a("strong"),coo=o("blenderbot"),foo=o(" \u2014 "),yR=a("a"),moo=o("BlenderbotTokenizer"),goo=o(" or "),LR=a("a"),hoo=o("BlenderbotTokenizerFast"),poo=o(" (Blenderbot model)"),_oo=l(),Sg=a("li"),tae=a("strong"),uoo=o("blenderbot-small"),boo=o(" \u2014 "),xR=a("a"),voo=o("BlenderbotSmallTokenizer"),Foo=o(" (BlenderbotSmall model)"),Too=l(),Rg=a("li"),aae=a("strong"),Moo=o("byt5"),Eoo=o(" \u2014 "),$R=a("a"),Coo=o("ByT5Tokenizer"),woo=o(" (ByT5 model)"),Aoo=l(),jn=a("li"),nae=a("strong"),yoo=o("camembert"),Loo=o(" \u2014 "),kR=a("a"),xoo=o("CamembertTokenizer"),$oo=o(" or "),SR=a("a"),koo=o("CamembertTokenizerFast"),Soo=o(" (CamemBERT model)"),Roo=l(),Pg=a("li"),sae=a("strong"),Poo=o("canine"),Boo=o(" \u2014 "),RR=a("a"),Ioo=o("CanineTokenizer"),Noo=o(" (CANINE model)"),qoo=l(),Dn=a("li"),lae=a("strong"),joo=o("clip"),Doo=o(" \u2014 "),PR=a("a"),Goo=o("CLIPTokenizer"),Ooo=o(" or "),BR=a("a"),Voo=o("CLIPTokenizerFast"),Xoo=o(" (CLIP model)"),zoo=l(),Gn=a("li"),iae=a("strong"),Woo=o("convbert"),Qoo=o(" \u2014 "),IR=a("a"),Hoo=o("ConvBertTokenizer"),Uoo=o(" or "),NR=a("a"),Joo=o("ConvBertTokenizerFast"),Yoo=o(" (ConvBERT model)"),Koo=l(),On=a("li"),dae=a("strong"),Zoo=o("cpm"),ero=o(" \u2014 "),qR=a("a"),oro=o("CpmTokenizer"),rro=o(" or "),jR=a("a"),tro=o("CpmTokenizerFast"),aro=o(" (CPM model)"),nro=l(),Bg=a("li"),cae=a("strong"),sro=o("ctrl"),lro=o(" \u2014 "),DR=a("a"),iro=o("CTRLTokenizer"),dro=o(" (CTRL model)"),cro=l(),Vn=a("li"),fae=a("strong"),fro=o("data2vec-text"),mro=o(" \u2014 "),GR=a("a"),gro=o("RobertaTokenizer"),hro=o(" or "),OR=a("a"),pro=o("RobertaTokenizerFast"),_ro=o(" (Data2VecText model)"),uro=l(),Xn=a("li"),mae=a("strong"),bro=o("deberta"),vro=o(" \u2014 "),VR=a("a"),Fro=o("DebertaTokenizer"),Tro=o(" or "),XR=a("a"),Mro=o("DebertaTokenizerFast"),Ero=o(" (DeBERTa model)"),Cro=l(),zn=a("li"),gae=a("strong"),wro=o("deberta-v2"),Aro=o(" \u2014 "),zR=a("a"),yro=o("DebertaV2Tokenizer"),Lro=o(" or "),WR=a("a"),xro=o("DebertaV2TokenizerFast"),$ro=o(" (DeBERTa-v2 model)"),kro=l(),Wn=a("li"),hae=a("strong"),Sro=o("distilbert"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("DistilBertTokenizer"),Bro=o(" or "),HR=a("a"),Iro=o("DistilBertTokenizerFast"),Nro=o(" (DistilBERT model)"),qro=l(),Qn=a("li"),pae=a("strong"),jro=o("dpr"),Dro=o(" \u2014 "),UR=a("a"),Gro=o("DPRQuestionEncoderTokenizer"),Oro=o(" or "),JR=a("a"),Vro=o("DPRQuestionEncoderTokenizerFast"),Xro=o(" (DPR model)"),zro=l(),Hn=a("li"),_ae=a("strong"),Wro=o("electra"),Qro=o(" \u2014 "),YR=a("a"),Hro=o("ElectraTokenizer"),Uro=o(" or "),KR=a("a"),Jro=o("ElectraTokenizerFast"),Yro=o(" (ELECTRA model)"),Kro=l(),Ig=a("li"),uae=a("strong"),Zro=o("flaubert"),eto=o(" \u2014 "),ZR=a("a"),oto=o("FlaubertTokenizer"),rto=o(" (FlauBERT model)"),tto=l(),Un=a("li"),bae=a("strong"),ato=o("fnet"),nto=o(" \u2014 "),eP=a("a"),sto=o("FNetTokenizer"),lto=o(" or "),oP=a("a"),ito=o("FNetTokenizerFast"),dto=o(" (FNet model)"),cto=l(),Ng=a("li"),vae=a("strong"),fto=o("fsmt"),mto=o(" \u2014 "),rP=a("a"),gto=o("FSMTTokenizer"),hto=o(" (FairSeq Machine-Translation model)"),pto=l(),Jn=a("li"),Fae=a("strong"),_to=o("funnel"),uto=o(" \u2014 "),tP=a("a"),bto=o("FunnelTokenizer"),vto=o(" or "),aP=a("a"),Fto=o("FunnelTokenizerFast"),Tto=o(" (Funnel Transformer model)"),Mto=l(),Yn=a("li"),Tae=a("strong"),Eto=o("gpt2"),Cto=o(" \u2014 "),nP=a("a"),wto=o("GPT2Tokenizer"),Ato=o(" or "),sP=a("a"),yto=o("GPT2TokenizerFast"),Lto=o(" (OpenAI GPT-2 model)"),xto=l(),Kn=a("li"),Mae=a("strong"),$to=o("gpt_neo"),kto=o(" \u2014 "),lP=a("a"),Sto=o("GPT2Tokenizer"),Rto=o(" or "),iP=a("a"),Pto=o("GPT2TokenizerFast"),Bto=o(" (GPT Neo model)"),Ito=l(),qg=a("li"),Eae=a("strong"),Nto=o("gpt_neox"),qto=o(" \u2014 "),dP=a("a"),jto=o("GPTNeoXTokenizerFast"),Dto=o(" (GPT NeoX model)"),Gto=l(),Zn=a("li"),Cae=a("strong"),Oto=o("gptj"),Vto=o(" \u2014 "),cP=a("a"),Xto=o("GPT2Tokenizer"),zto=o(" or "),fP=a("a"),Wto=o("GPT2TokenizerFast"),Qto=o(" (GPT-J model)"),Hto=l(),es=a("li"),wae=a("strong"),Uto=o("herbert"),Jto=o(" \u2014 "),mP=a("a"),Yto=o("HerbertTokenizer"),Kto=o(" or "),gP=a("a"),Zto=o("HerbertTokenizerFast"),eao=o(" (HerBERT model)"),oao=l(),jg=a("li"),Aae=a("strong"),rao=o("hubert"),tao=o(" \u2014 "),hP=a("a"),aao=o("Wav2Vec2CTCTokenizer"),nao=o(" (Hubert model)"),sao=l(),os=a("li"),yae=a("strong"),lao=o("ibert"),iao=o(" \u2014 "),pP=a("a"),dao=o("RobertaTokenizer"),cao=o(" or "),_P=a("a"),fao=o("RobertaTokenizerFast"),mao=o(" (I-BERT model)"),gao=l(),rs=a("li"),Lae=a("strong"),hao=o("layoutlm"),pao=o(" \u2014 "),uP=a("a"),_ao=o("LayoutLMTokenizer"),uao=o(" or "),bP=a("a"),bao=o("LayoutLMTokenizerFast"),vao=o(" (LayoutLM model)"),Fao=l(),ts=a("li"),xae=a("strong"),Tao=o("layoutlmv2"),Mao=o(" \u2014 "),vP=a("a"),Eao=o("LayoutLMv2Tokenizer"),Cao=o(" or "),FP=a("a"),wao=o("LayoutLMv2TokenizerFast"),Aao=o(" (LayoutLMv2 model)"),yao=l(),as=a("li"),$ae=a("strong"),Lao=o("layoutlmv3"),xao=o(" \u2014 "),TP=a("a"),$ao=o("LayoutLMv3Tokenizer"),kao=o(" or "),MP=a("a"),Sao=o("LayoutLMv3TokenizerFast"),Rao=o(" (LayoutLMv3 model)"),Pao=l(),ns=a("li"),kae=a("strong"),Bao=o("layoutxlm"),Iao=o(" \u2014 "),EP=a("a"),Nao=o("LayoutXLMTokenizer"),qao=o(" or "),CP=a("a"),jao=o("LayoutXLMTokenizerFast"),Dao=o(" (LayoutXLM model)"),Gao=l(),ss=a("li"),Sae=a("strong"),Oao=o("led"),Vao=o(" \u2014 "),wP=a("a"),Xao=o("LEDTokenizer"),zao=o(" or "),AP=a("a"),Wao=o("LEDTokenizerFast"),Qao=o(" (LED model)"),Hao=l(),ls=a("li"),Rae=a("strong"),Uao=o("longformer"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("LongformerTokenizer"),Kao=o(" or "),LP=a("a"),Zao=o("LongformerTokenizerFast"),eno=o(" (Longformer model)"),ono=l(),Dg=a("li"),Pae=a("strong"),rno=o("luke"),tno=o(" \u2014 "),xP=a("a"),ano=o("LukeTokenizer"),nno=o(" (LUKE model)"),sno=l(),is=a("li"),Bae=a("strong"),lno=o("lxmert"),ino=o(" \u2014 "),$P=a("a"),dno=o("LxmertTokenizer"),cno=o(" or "),kP=a("a"),fno=o("LxmertTokenizerFast"),mno=o(" (LXMERT model)"),gno=l(),Gg=a("li"),Iae=a("strong"),hno=o("m2m_100"),pno=o(" \u2014 "),SP=a("a"),_no=o("M2M100Tokenizer"),uno=o(" (M2M100 model)"),bno=l(),Og=a("li"),Nae=a("strong"),vno=o("marian"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("MarianTokenizer"),Mno=o(" (Marian model)"),Eno=l(),ds=a("li"),qae=a("strong"),Cno=o("mbart"),wno=o(" \u2014 "),PP=a("a"),Ano=o("MBartTokenizer"),yno=o(" or "),BP=a("a"),Lno=o("MBartTokenizerFast"),xno=o(" (mBART model)"),$no=l(),cs=a("li"),jae=a("strong"),kno=o("mbart50"),Sno=o(" \u2014 "),IP=a("a"),Rno=o("MBart50Tokenizer"),Pno=o(" or "),NP=a("a"),Bno=o("MBart50TokenizerFast"),Ino=o(" (mBART-50 model)"),Nno=l(),fs=a("li"),Dae=a("strong"),qno=o("megatron-bert"),jno=o(" \u2014 "),qP=a("a"),Dno=o("BertTokenizer"),Gno=o(" or "),jP=a("a"),Ono=o("BertTokenizerFast"),Vno=o(" (Megatron-BERT model)"),Xno=l(),Vg=a("li"),Gae=a("strong"),zno=o("mluke"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("MLukeTokenizer"),Hno=o(" (mLUKE model)"),Uno=l(),ms=a("li"),Oae=a("strong"),Jno=o("mobilebert"),Yno=o(" \u2014 "),GP=a("a"),Kno=o("MobileBertTokenizer"),Zno=o(" or "),OP=a("a"),eso=o("MobileBertTokenizerFast"),oso=o(" (MobileBERT model)"),rso=l(),gs=a("li"),Vae=a("strong"),tso=o("mpnet"),aso=o(" \u2014 "),VP=a("a"),nso=o("MPNetTokenizer"),sso=o(" or "),XP=a("a"),lso=o("MPNetTokenizerFast"),iso=o(" (MPNet model)"),dso=l(),hs=a("li"),Xae=a("strong"),cso=o("mt5"),fso=o(" \u2014 "),zP=a("a"),mso=o("MT5Tokenizer"),gso=o(" or "),WP=a("a"),hso=o("MT5TokenizerFast"),pso=o(" (MT5 model)"),_so=l(),ps=a("li"),zae=a("strong"),uso=o("nystromformer"),bso=o(" \u2014 "),QP=a("a"),vso=o("AlbertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("AlbertTokenizerFast"),Mso=o(" (Nystr\xF6mformer model)"),Eso=l(),_s=a("li"),Wae=a("strong"),Cso=o("openai-gpt"),wso=o(" \u2014 "),UP=a("a"),Aso=o("OpenAIGPTTokenizer"),yso=o(" or "),JP=a("a"),Lso=o("OpenAIGPTTokenizerFast"),xso=o(" (OpenAI GPT model)"),$so=l(),Xg=a("li"),Qae=a("strong"),kso=o("opt"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("GPT2Tokenizer"),Pso=o(" (OPT model)"),Bso=l(),us=a("li"),Hae=a("strong"),Iso=o("pegasus"),Nso=o(" \u2014 "),KP=a("a"),qso=o("PegasusTokenizer"),jso=o(" or "),ZP=a("a"),Dso=o("PegasusTokenizerFast"),Gso=o(" (Pegasus model)"),Oso=l(),zg=a("li"),Uae=a("strong"),Vso=o("perceiver"),Xso=o(" \u2014 "),eB=a("a"),zso=o("PerceiverTokenizer"),Wso=o(" (Perceiver model)"),Qso=l(),Wg=a("li"),Jae=a("strong"),Hso=o("phobert"),Uso=o(" \u2014 "),oB=a("a"),Jso=o("PhobertTokenizer"),Yso=o(" (PhoBERT model)"),Kso=l(),Qg=a("li"),Yae=a("strong"),Zso=o("plbart"),elo=o(" \u2014 "),rB=a("a"),olo=o("PLBartTokenizer"),rlo=o(" (PLBart model)"),tlo=l(),Hg=a("li"),Kae=a("strong"),alo=o("prophetnet"),nlo=o(" \u2014 "),tB=a("a"),slo=o("ProphetNetTokenizer"),llo=o(" (ProphetNet model)"),ilo=l(),bs=a("li"),Zae=a("strong"),dlo=o("qdqbert"),clo=o(" \u2014 "),aB=a("a"),flo=o("BertTokenizer"),mlo=o(" or "),nB=a("a"),glo=o("BertTokenizerFast"),hlo=o(" (QDQBert model)"),plo=l(),Ug=a("li"),ene=a("strong"),_lo=o("rag"),ulo=o(" \u2014 "),sB=a("a"),blo=o("RagTokenizer"),vlo=o(" (RAG model)"),Flo=l(),vs=a("li"),one=a("strong"),Tlo=o("realm"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("RealmTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("RealmTokenizerFast"),Alo=o(" (REALM model)"),ylo=l(),Fs=a("li"),rne=a("strong"),Llo=o("reformer"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("ReformerTokenizer"),klo=o(" or "),cB=a("a"),Slo=o("ReformerTokenizerFast"),Rlo=o(" (Reformer model)"),Plo=l(),Ts=a("li"),tne=a("strong"),Blo=o("rembert"),Ilo=o(" \u2014 "),fB=a("a"),Nlo=o("RemBertTokenizer"),qlo=o(" or "),mB=a("a"),jlo=o("RemBertTokenizerFast"),Dlo=o(" (RemBERT model)"),Glo=l(),Ms=a("li"),ane=a("strong"),Olo=o("retribert"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("RetriBertTokenizer"),zlo=o(" or "),hB=a("a"),Wlo=o("RetriBertTokenizerFast"),Qlo=o(" (RetriBERT model)"),Hlo=l(),Es=a("li"),nne=a("strong"),Ulo=o("roberta"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("RobertaTokenizer"),Klo=o(" or "),_B=a("a"),Zlo=o("RobertaTokenizerFast"),eio=o(" (RoBERTa model)"),oio=l(),Cs=a("li"),sne=a("strong"),rio=o("roformer"),tio=o(" \u2014 "),uB=a("a"),aio=o("RoFormerTokenizer"),nio=o(" or "),bB=a("a"),sio=o("RoFormerTokenizerFast"),lio=o(" (RoFormer model)"),iio=l(),Jg=a("li"),lne=a("strong"),dio=o("speech_to_text"),cio=o(" \u2014 "),vB=a("a"),fio=o("Speech2TextTokenizer"),mio=o(" (Speech2Text model)"),gio=l(),Yg=a("li"),ine=a("strong"),hio=o("speech_to_text_2"),pio=o(" \u2014 "),FB=a("a"),_io=o("Speech2Text2Tokenizer"),uio=o(" (Speech2Text2 model)"),bio=l(),ws=a("li"),dne=a("strong"),vio=o("splinter"),Fio=o(" \u2014 "),TB=a("a"),Tio=o("SplinterTokenizer"),Mio=o(" or "),MB=a("a"),Eio=o("SplinterTokenizerFast"),Cio=o(" (Splinter model)"),wio=l(),As=a("li"),cne=a("strong"),Aio=o("squeezebert"),yio=o(" \u2014 "),EB=a("a"),Lio=o("SqueezeBertTokenizer"),xio=o(" or "),CB=a("a"),$io=o("SqueezeBertTokenizerFast"),kio=o(" (SqueezeBERT model)"),Sio=l(),ys=a("li"),fne=a("strong"),Rio=o("t5"),Pio=o(" \u2014 "),wB=a("a"),Bio=o("T5Tokenizer"),Iio=o(" or "),AB=a("a"),Nio=o("T5TokenizerFast"),qio=o(" (T5 model)"),jio=l(),Kg=a("li"),mne=a("strong"),Dio=o("tapas"),Gio=o(" \u2014 "),yB=a("a"),Oio=o("TapasTokenizer"),Vio=o(" (TAPAS model)"),Xio=l(),Zg=a("li"),gne=a("strong"),zio=o("tapex"),Wio=o(" \u2014 "),LB=a("a"),Qio=o("TapexTokenizer"),Hio=o(" (TAPEX model)"),Uio=l(),eh=a("li"),hne=a("strong"),Jio=o("transfo-xl"),Yio=o(" \u2014 "),xB=a("a"),Kio=o("TransfoXLTokenizer"),Zio=o(" (Transformer-XL model)"),edo=l(),Ls=a("li"),pne=a("strong"),odo=o("visual_bert"),rdo=o(" \u2014 "),$B=a("a"),tdo=o("BertTokenizer"),ado=o(" or "),kB=a("a"),ndo=o("BertTokenizerFast"),sdo=o(" (VisualBERT model)"),ldo=l(),oh=a("li"),_ne=a("strong"),ido=o("wav2vec2"),ddo=o(" \u2014 "),SB=a("a"),cdo=o("Wav2Vec2CTCTokenizer"),fdo=o(" (Wav2Vec2 model)"),mdo=l(),rh=a("li"),une=a("strong"),gdo=o("wav2vec2-conformer"),hdo=o(" \u2014 "),RB=a("a"),pdo=o("Wav2Vec2CTCTokenizer"),_do=o(" (Wav2Vec2-Conformer model)"),udo=l(),th=a("li"),bne=a("strong"),bdo=o("wav2vec2_phoneme"),vdo=o(" \u2014 "),PB=a("a"),Fdo=o("Wav2Vec2PhonemeCTCTokenizer"),Tdo=o(" (Wav2Vec2Phoneme model)"),Mdo=l(),xs=a("li"),vne=a("strong"),Edo=o("xglm"),Cdo=o(" \u2014 "),BB=a("a"),wdo=o("XGLMTokenizer"),Ado=o(" or "),IB=a("a"),ydo=o("XGLMTokenizerFast"),Ldo=o(" (XGLM model)"),xdo=l(),ah=a("li"),Fne=a("strong"),$do=o("xlm"),kdo=o(" \u2014 "),NB=a("a"),Sdo=o("XLMTokenizer"),Rdo=o(" (XLM model)"),Pdo=l(),nh=a("li"),Tne=a("strong"),Bdo=o("xlm-prophetnet"),Ido=o(" \u2014 "),qB=a("a"),Ndo=o("XLMProphetNetTokenizer"),qdo=o(" (XLM-ProphetNet model)"),jdo=l(),$s=a("li"),Mne=a("strong"),Ddo=o("xlm-roberta"),Gdo=o(" \u2014 "),jB=a("a"),Odo=o("XLMRobertaTokenizer"),Vdo=o(" or "),DB=a("a"),Xdo=o("XLMRobertaTokenizerFast"),zdo=o(" (XLM-RoBERTa model)"),Wdo=l(),ks=a("li"),Ene=a("strong"),Qdo=o("xlm-roberta-xl"),Hdo=o(" \u2014 "),GB=a("a"),Udo=o("RobertaTokenizer"),Jdo=o(" or "),OB=a("a"),Ydo=o("RobertaTokenizerFast"),Kdo=o(" (XLM-RoBERTa-XL model)"),Zdo=l(),Ss=a("li"),Cne=a("strong"),eco=o("xlnet"),oco=o(" \u2014 "),VB=a("a"),rco=o("XLNetTokenizer"),tco=o(" or "),XB=a("a"),aco=o("XLNetTokenizerFast"),nco=o(" (XLNet model)"),sco=l(),Rs=a("li"),wne=a("strong"),lco=o("yoso"),ico=o(" \u2014 "),zB=a("a"),dco=o("AlbertTokenizer"),cco=o(" or "),WB=a("a"),fco=o("AlbertTokenizerFast"),mco=o(" (YOSO model)"),gco=l(),F(sh.$$.fragment),hco=l(),lh=a("div"),F(Uy.$$.fragment),pco=l(),Ane=a("p"),_co=o("Register a new tokenizer in this mapping."),Xqe=l(),Ei=a("h2"),ih=a("a"),yne=a("span"),F(Jy.$$.fragment),uco=l(),Lne=a("span"),bco=o("AutoFeatureExtractor"),zqe=l(),Ao=a("div"),F(Yy.$$.fragment),vco=l(),Ky=a("p"),Fco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=a("a"),Tco=o("AutoFeatureExtractor.from_pretrained()"),Mco=o(" class method."),Eco=l(),Zy=a("p"),Cco=o("This class cannot be instantiated directly using "),xne=a("code"),wco=o("__init__()"),Aco=o(" (throws an error)."),yco=l(),He=a("div"),F(eL.$$.fragment),Lco=l(),$ne=a("p"),xco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$co=l(),ya=a("p"),kco=o("The feature extractor class to instantiate is selected based on the "),kne=a("code"),Sco=o("model_type"),Rco=o(` property of the config object
(either passed as an argument or loaded from `),Sne=a("code"),Pco=o("pretrained_model_name_or_path"),Bco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rne=a("code"),Ico=o("pretrained_model_name_or_path"),Nco=o(":"),qco=l(),Y=a("ul"),dh=a("li"),Pne=a("strong"),jco=o("beit"),Dco=o(" \u2014 "),HB=a("a"),Gco=o("BeitFeatureExtractor"),Oco=o(" (BEiT model)"),Vco=l(),ch=a("li"),Bne=a("strong"),Xco=o("clip"),zco=o(" \u2014 "),UB=a("a"),Wco=o("CLIPFeatureExtractor"),Qco=o(" (CLIP model)"),Hco=l(),fh=a("li"),Ine=a("strong"),Uco=o("convnext"),Jco=o(" \u2014 "),JB=a("a"),Yco=o("ConvNextFeatureExtractor"),Kco=o(" (ConvNeXT model)"),Zco=l(),mh=a("li"),Nne=a("strong"),efo=o("cvt"),ofo=o(" \u2014 "),YB=a("a"),rfo=o("ConvNextFeatureExtractor"),tfo=o(" (CvT model)"),afo=l(),gh=a("li"),qne=a("strong"),nfo=o("data2vec-audio"),sfo=o(" \u2014 "),KB=a("a"),lfo=o("Wav2Vec2FeatureExtractor"),ifo=o(" (Data2VecAudio model)"),dfo=l(),hh=a("li"),jne=a("strong"),cfo=o("data2vec-vision"),ffo=o(" \u2014 "),ZB=a("a"),mfo=o("BeitFeatureExtractor"),gfo=o(" (Data2VecVision model)"),hfo=l(),ph=a("li"),Dne=a("strong"),pfo=o("deit"),_fo=o(" \u2014 "),eI=a("a"),ufo=o("DeiTFeatureExtractor"),bfo=o(" (DeiT model)"),vfo=l(),_h=a("li"),Gne=a("strong"),Ffo=o("detr"),Tfo=o(" \u2014 "),oI=a("a"),Mfo=o("DetrFeatureExtractor"),Efo=o(" (DETR model)"),Cfo=l(),uh=a("li"),One=a("strong"),wfo=o("dpt"),Afo=o(" \u2014 "),rI=a("a"),yfo=o("DPTFeatureExtractor"),Lfo=o(" (DPT model)"),xfo=l(),bh=a("li"),Vne=a("strong"),$fo=o("flava"),kfo=o(" \u2014 "),tI=a("a"),Sfo=o("FlavaFeatureExtractor"),Rfo=o(" (FLAVA model)"),Pfo=l(),vh=a("li"),Xne=a("strong"),Bfo=o("glpn"),Ifo=o(" \u2014 "),aI=a("a"),Nfo=o("GLPNFeatureExtractor"),qfo=o(" (GLPN model)"),jfo=l(),Fh=a("li"),zne=a("strong"),Dfo=o("hubert"),Gfo=o(" \u2014 "),nI=a("a"),Ofo=o("Wav2Vec2FeatureExtractor"),Vfo=o(" (Hubert model)"),Xfo=l(),Th=a("li"),Wne=a("strong"),zfo=o("imagegpt"),Wfo=o(" \u2014 "),sI=a("a"),Qfo=o("ImageGPTFeatureExtractor"),Hfo=o(" (ImageGPT model)"),Ufo=l(),Mh=a("li"),Qne=a("strong"),Jfo=o("layoutlmv2"),Yfo=o(" \u2014 "),lI=a("a"),Kfo=o("LayoutLMv2FeatureExtractor"),Zfo=o(" (LayoutLMv2 model)"),emo=l(),Eh=a("li"),Hne=a("strong"),omo=o("layoutlmv3"),rmo=o(" \u2014 "),iI=a("a"),tmo=o("LayoutLMv3FeatureExtractor"),amo=o(" (LayoutLMv3 model)"),nmo=l(),Ch=a("li"),Une=a("strong"),smo=o("levit"),lmo=o(" \u2014 "),dI=a("a"),imo=o("LevitFeatureExtractor"),dmo=o(" (LeViT model)"),cmo=l(),wh=a("li"),Jne=a("strong"),fmo=o("maskformer"),mmo=o(" \u2014 "),cI=a("a"),gmo=o("MaskFormerFeatureExtractor"),hmo=o(" (MaskFormer model)"),pmo=l(),Ah=a("li"),Yne=a("strong"),_mo=o("perceiver"),umo=o(" \u2014 "),fI=a("a"),bmo=o("PerceiverFeatureExtractor"),vmo=o(" (Perceiver model)"),Fmo=l(),yh=a("li"),Kne=a("strong"),Tmo=o("poolformer"),Mmo=o(" \u2014 "),mI=a("a"),Emo=o("PoolFormerFeatureExtractor"),Cmo=o(" (PoolFormer model)"),wmo=l(),Lh=a("li"),Zne=a("strong"),Amo=o("regnet"),ymo=o(" \u2014 "),gI=a("a"),Lmo=o("ConvNextFeatureExtractor"),xmo=o(" (RegNet model)"),$mo=l(),xh=a("li"),ese=a("strong"),kmo=o("resnet"),Smo=o(" \u2014 "),hI=a("a"),Rmo=o("ConvNextFeatureExtractor"),Pmo=o(" (ResNet model)"),Bmo=l(),$h=a("li"),ose=a("strong"),Imo=o("segformer"),Nmo=o(" \u2014 "),pI=a("a"),qmo=o("SegformerFeatureExtractor"),jmo=o(" (SegFormer model)"),Dmo=l(),kh=a("li"),rse=a("strong"),Gmo=o("speech_to_text"),Omo=o(" \u2014 "),_I=a("a"),Vmo=o("Speech2TextFeatureExtractor"),Xmo=o(" (Speech2Text model)"),zmo=l(),Sh=a("li"),tse=a("strong"),Wmo=o("swin"),Qmo=o(" \u2014 "),uI=a("a"),Hmo=o("ViTFeatureExtractor"),Umo=o(" (Swin Transformer model)"),Jmo=l(),Rh=a("li"),ase=a("strong"),Ymo=o("van"),Kmo=o(" \u2014 "),bI=a("a"),Zmo=o("ConvNextFeatureExtractor"),ego=o(" (VAN model)"),ogo=l(),Ph=a("li"),nse=a("strong"),rgo=o("vit"),tgo=o(" \u2014 "),vI=a("a"),ago=o("ViTFeatureExtractor"),ngo=o(" (ViT model)"),sgo=l(),Bh=a("li"),sse=a("strong"),lgo=o("vit_mae"),igo=o(" \u2014 "),FI=a("a"),dgo=o("ViTFeatureExtractor"),cgo=o(" (ViTMAE model)"),fgo=l(),Ih=a("li"),lse=a("strong"),mgo=o("wav2vec2"),ggo=o(" \u2014 "),TI=a("a"),hgo=o("Wav2Vec2FeatureExtractor"),pgo=o(" (Wav2Vec2 model)"),_go=l(),Nh=a("li"),ise=a("strong"),ugo=o("wav2vec2-conformer"),bgo=o(" \u2014 "),MI=a("a"),vgo=o("Wav2Vec2FeatureExtractor"),Fgo=o(" (Wav2Vec2-Conformer model)"),Tgo=l(),qh=a("li"),dse=a("strong"),Mgo=o("yolos"),Ego=o(" \u2014 "),EI=a("a"),Cgo=o("YolosFeatureExtractor"),wgo=o(" (YOLOS model)"),Ago=l(),F(jh.$$.fragment),ygo=l(),F(Dh.$$.fragment),Lgo=l(),Gh=a("div"),F(oL.$$.fragment),xgo=l(),cse=a("p"),$go=o("Register a new feature extractor for this class."),Wqe=l(),Ci=a("h2"),Oh=a("a"),fse=a("span"),F(rL.$$.fragment),kgo=l(),mse=a("span"),Sgo=o("AutoProcessor"),Qqe=l(),yo=a("div"),F(tL.$$.fragment),Rgo=l(),aL=a("p"),Pgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=a("a"),Bgo=o("AutoProcessor.from_pretrained()"),Igo=o(" class method."),Ngo=l(),nL=a("p"),qgo=o("This class cannot be instantiated directly using "),gse=a("code"),jgo=o("__init__()"),Dgo=o(" (throws an error)."),Ggo=l(),Ue=a("div"),F(sL.$$.fragment),Ogo=l(),hse=a("p"),Vgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Xgo=l(),wi=a("p"),zgo=o("The processor class to instantiate is selected based on the "),pse=a("code"),Wgo=o("model_type"),Qgo=o(` property of the config object (either
passed as an argument or loaded from `),_se=a("code"),Hgo=o("pretrained_model_name_or_path"),Ugo=o(" if possible):"),Jgo=l(),he=a("ul"),Vh=a("li"),use=a("strong"),Ygo=o("clip"),Kgo=o(" \u2014 "),wI=a("a"),Zgo=o("CLIPProcessor"),eho=o(" (CLIP model)"),oho=l(),Xh=a("li"),bse=a("strong"),rho=o("flava"),tho=o(" \u2014 "),vse=a("code"),aho=o("FLAVAProcessor"),nho=o(" (FLAVA model)"),sho=l(),zh=a("li"),Fse=a("strong"),lho=o("layoutlmv2"),iho=o(" \u2014 "),AI=a("a"),dho=o("LayoutLMv2Processor"),cho=o(" (LayoutLMv2 model)"),fho=l(),Wh=a("li"),Tse=a("strong"),mho=o("layoutlmv3"),gho=o(" \u2014 "),yI=a("a"),hho=o("LayoutLMv3Processor"),pho=o(" (LayoutLMv3 model)"),_ho=l(),Qh=a("li"),Mse=a("strong"),uho=o("layoutxlm"),bho=o(" \u2014 "),LI=a("a"),vho=o("LayoutXLMProcessor"),Fho=o(" (LayoutXLM model)"),Tho=l(),Hh=a("li"),Ese=a("strong"),Mho=o("sew"),Eho=o(" \u2014 "),xI=a("a"),Cho=o("Wav2Vec2Processor"),who=o(" (SEW model)"),Aho=l(),Uh=a("li"),Cse=a("strong"),yho=o("sew-d"),Lho=o(" \u2014 "),$I=a("a"),xho=o("Wav2Vec2Processor"),$ho=o(" (SEW-D model)"),kho=l(),Jh=a("li"),wse=a("strong"),Sho=o("speech_to_text"),Rho=o(" \u2014 "),kI=a("a"),Pho=o("Speech2TextProcessor"),Bho=o(" (Speech2Text model)"),Iho=l(),Yh=a("li"),Ase=a("strong"),Nho=o("speech_to_text_2"),qho=o(" \u2014 "),SI=a("a"),jho=o("Speech2Text2Processor"),Dho=o(" (Speech2Text2 model)"),Gho=l(),Kh=a("li"),yse=a("strong"),Oho=o("trocr"),Vho=o(" \u2014 "),RI=a("a"),Xho=o("TrOCRProcessor"),zho=o(" (TrOCR model)"),Who=l(),Zh=a("li"),Lse=a("strong"),Qho=o("unispeech"),Hho=o(" \u2014 "),PI=a("a"),Uho=o("Wav2Vec2Processor"),Jho=o(" (UniSpeech model)"),Yho=l(),ep=a("li"),xse=a("strong"),Kho=o("unispeech-sat"),Zho=o(" \u2014 "),BI=a("a"),epo=o("Wav2Vec2Processor"),opo=o(" (UniSpeechSat model)"),rpo=l(),op=a("li"),$se=a("strong"),tpo=o("vilt"),apo=o(" \u2014 "),II=a("a"),npo=o("ViltProcessor"),spo=o(" (ViLT model)"),lpo=l(),rp=a("li"),kse=a("strong"),ipo=o("vision-text-dual-encoder"),dpo=o(" \u2014 "),NI=a("a"),cpo=o("VisionTextDualEncoderProcessor"),fpo=o(" (VisionTextDualEncoder model)"),mpo=l(),tp=a("li"),Sse=a("strong"),gpo=o("wav2vec2"),hpo=o(" \u2014 "),qI=a("a"),ppo=o("Wav2Vec2Processor"),_po=o(" (Wav2Vec2 model)"),upo=l(),ap=a("li"),Rse=a("strong"),bpo=o("wav2vec2-conformer"),vpo=o(" \u2014 "),jI=a("a"),Fpo=o("Wav2Vec2Processor"),Tpo=o(" (Wav2Vec2-Conformer model)"),Mpo=l(),np=a("li"),Pse=a("strong"),Epo=o("wavlm"),Cpo=o(" \u2014 "),DI=a("a"),wpo=o("Wav2Vec2Processor"),Apo=o(" (WavLM model)"),ypo=l(),F(sp.$$.fragment),Lpo=l(),F(lp.$$.fragment),xpo=l(),ip=a("div"),F(lL.$$.fragment),$po=l(),Bse=a("p"),kpo=o("Register a new processor for this class."),Hqe=l(),Ai=a("h2"),dp=a("a"),Ise=a("span"),F(iL.$$.fragment),Spo=l(),Nse=a("span"),Rpo=o("AutoModel"),Uqe=l(),Lo=a("div"),F(dL.$$.fragment),Ppo=l(),yi=a("p"),Bpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=a("a"),Ipo=o("from_pretrained()"),Npo=o(" class method or the "),OI=a("a"),qpo=o("from_config()"),jpo=o(` class
method.`),Dpo=l(),cL=a("p"),Gpo=o("This class cannot be instantiated directly using "),qse=a("code"),Opo=o("__init__()"),Vpo=o(" (throws an error)."),Xpo=l(),tt=a("div"),F(fL.$$.fragment),zpo=l(),jse=a("p"),Wpo=o("Instantiates one of the base model classes of the library from a configuration."),Qpo=l(),Li=a("p"),Hpo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),Upo=o("not"),Jpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),Ypo=o("from_pretrained()"),Kpo=o(" to load the model weights."),Zpo=l(),F(cp.$$.fragment),e_o=l(),Je=a("div"),F(mL.$$.fragment),o_o=l(),Gse=a("p"),r_o=o("Instantiate one of the base model classes of the library from a pretrained model."),t_o=l(),La=a("p"),a_o=o("The model class to instantiate is selected based on the "),Ose=a("code"),n_o=o("model_type"),s_o=o(` property of the config object (either
passed as an argument or loaded from `),Vse=a("code"),l_o=o("pretrained_model_name_or_path"),i_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(":"),f_o=l(),x=a("ul"),fp=a("li"),zse=a("strong"),m_o=o("albert"),g_o=o(" \u2014 "),XI=a("a"),h_o=o("AlbertModel"),p_o=o(" (ALBERT model)"),__o=l(),mp=a("li"),Wse=a("strong"),u_o=o("bart"),b_o=o(" \u2014 "),zI=a("a"),v_o=o("BartModel"),F_o=o(" (BART model)"),T_o=l(),gp=a("li"),Qse=a("strong"),M_o=o("beit"),E_o=o(" \u2014 "),WI=a("a"),C_o=o("BeitModel"),w_o=o(" (BEiT model)"),A_o=l(),hp=a("li"),Hse=a("strong"),y_o=o("bert"),L_o=o(" \u2014 "),QI=a("a"),x_o=o("BertModel"),$_o=o(" (BERT model)"),k_o=l(),pp=a("li"),Use=a("strong"),S_o=o("bert-generation"),R_o=o(" \u2014 "),HI=a("a"),P_o=o("BertGenerationEncoder"),B_o=o(" (Bert Generation model)"),I_o=l(),_p=a("li"),Jse=a("strong"),N_o=o("big_bird"),q_o=o(" \u2014 "),UI=a("a"),j_o=o("BigBirdModel"),D_o=o(" (BigBird model)"),G_o=l(),up=a("li"),Yse=a("strong"),O_o=o("bigbird_pegasus"),V_o=o(" \u2014 "),JI=a("a"),X_o=o("BigBirdPegasusModel"),z_o=o(" (BigBird-Pegasus model)"),W_o=l(),bp=a("li"),Kse=a("strong"),Q_o=o("blenderbot"),H_o=o(" \u2014 "),YI=a("a"),U_o=o("BlenderbotModel"),J_o=o(" (Blenderbot model)"),Y_o=l(),vp=a("li"),Zse=a("strong"),K_o=o("blenderbot-small"),Z_o=o(" \u2014 "),KI=a("a"),euo=o("BlenderbotSmallModel"),ouo=o(" (BlenderbotSmall model)"),ruo=l(),Fp=a("li"),ele=a("strong"),tuo=o("camembert"),auo=o(" \u2014 "),ZI=a("a"),nuo=o("CamembertModel"),suo=o(" (CamemBERT model)"),luo=l(),Tp=a("li"),ole=a("strong"),iuo=o("canine"),duo=o(" \u2014 "),eN=a("a"),cuo=o("CanineModel"),fuo=o(" (CANINE model)"),muo=l(),Mp=a("li"),rle=a("strong"),guo=o("clip"),huo=o(" \u2014 "),oN=a("a"),puo=o("CLIPModel"),_uo=o(" (CLIP model)"),uuo=l(),Ep=a("li"),tle=a("strong"),buo=o("convbert"),vuo=o(" \u2014 "),rN=a("a"),Fuo=o("ConvBertModel"),Tuo=o(" (ConvBERT model)"),Muo=l(),Cp=a("li"),ale=a("strong"),Euo=o("convnext"),Cuo=o(" \u2014 "),tN=a("a"),wuo=o("ConvNextModel"),Auo=o(" (ConvNeXT model)"),yuo=l(),wp=a("li"),nle=a("strong"),Luo=o("ctrl"),xuo=o(" \u2014 "),aN=a("a"),$uo=o("CTRLModel"),kuo=o(" (CTRL model)"),Suo=l(),Ap=a("li"),sle=a("strong"),Ruo=o("cvt"),Puo=o(" \u2014 "),nN=a("a"),Buo=o("CvtModel"),Iuo=o(" (CvT model)"),Nuo=l(),yp=a("li"),lle=a("strong"),quo=o("data2vec-audio"),juo=o(" \u2014 "),sN=a("a"),Duo=o("Data2VecAudioModel"),Guo=o(" (Data2VecAudio model)"),Ouo=l(),Lp=a("li"),ile=a("strong"),Vuo=o("data2vec-text"),Xuo=o(" \u2014 "),lN=a("a"),zuo=o("Data2VecTextModel"),Wuo=o(" (Data2VecText model)"),Quo=l(),xp=a("li"),dle=a("strong"),Huo=o("data2vec-vision"),Uuo=o(" \u2014 "),iN=a("a"),Juo=o("Data2VecVisionModel"),Yuo=o(" (Data2VecVision model)"),Kuo=l(),$p=a("li"),cle=a("strong"),Zuo=o("deberta"),ebo=o(" \u2014 "),dN=a("a"),obo=o("DebertaModel"),rbo=o(" (DeBERTa model)"),tbo=l(),kp=a("li"),fle=a("strong"),abo=o("deberta-v2"),nbo=o(" \u2014 "),cN=a("a"),sbo=o("DebertaV2Model"),lbo=o(" (DeBERTa-v2 model)"),ibo=l(),Sp=a("li"),mle=a("strong"),dbo=o("decision_transformer"),cbo=o(" \u2014 "),fN=a("a"),fbo=o("DecisionTransformerModel"),mbo=o(" (Decision Transformer model)"),gbo=l(),Rp=a("li"),gle=a("strong"),hbo=o("deit"),pbo=o(" \u2014 "),mN=a("a"),_bo=o("DeiTModel"),ubo=o(" (DeiT model)"),bbo=l(),Pp=a("li"),hle=a("strong"),vbo=o("detr"),Fbo=o(" \u2014 "),gN=a("a"),Tbo=o("DetrModel"),Mbo=o(" (DETR model)"),Ebo=l(),Bp=a("li"),ple=a("strong"),Cbo=o("distilbert"),wbo=o(" \u2014 "),hN=a("a"),Abo=o("DistilBertModel"),ybo=o(" (DistilBERT model)"),Lbo=l(),Ip=a("li"),_le=a("strong"),xbo=o("dpr"),$bo=o(" \u2014 "),pN=a("a"),kbo=o("DPRQuestionEncoder"),Sbo=o(" (DPR model)"),Rbo=l(),Np=a("li"),ule=a("strong"),Pbo=o("dpt"),Bbo=o(" \u2014 "),_N=a("a"),Ibo=o("DPTModel"),Nbo=o(" (DPT model)"),qbo=l(),qp=a("li"),ble=a("strong"),jbo=o("electra"),Dbo=o(" \u2014 "),uN=a("a"),Gbo=o("ElectraModel"),Obo=o(" (ELECTRA model)"),Vbo=l(),jp=a("li"),vle=a("strong"),Xbo=o("flaubert"),zbo=o(" \u2014 "),bN=a("a"),Wbo=o("FlaubertModel"),Qbo=o(" (FlauBERT model)"),Hbo=l(),Dp=a("li"),Fle=a("strong"),Ubo=o("flava"),Jbo=o(" \u2014 "),vN=a("a"),Ybo=o("FlavaModel"),Kbo=o(" (FLAVA model)"),Zbo=l(),Gp=a("li"),Tle=a("strong"),e2o=o("fnet"),o2o=o(" \u2014 "),FN=a("a"),r2o=o("FNetModel"),t2o=o(" (FNet model)"),a2o=l(),Op=a("li"),Mle=a("strong"),n2o=o("fsmt"),s2o=o(" \u2014 "),TN=a("a"),l2o=o("FSMTModel"),i2o=o(" (FairSeq Machine-Translation model)"),d2o=l(),Ps=a("li"),Ele=a("strong"),c2o=o("funnel"),f2o=o(" \u2014 "),MN=a("a"),m2o=o("FunnelModel"),g2o=o(" or "),EN=a("a"),h2o=o("FunnelBaseModel"),p2o=o(" (Funnel Transformer model)"),_2o=l(),Vp=a("li"),Cle=a("strong"),u2o=o("glpn"),b2o=o(" \u2014 "),CN=a("a"),v2o=o("GLPNModel"),F2o=o(" (GLPN model)"),T2o=l(),Xp=a("li"),wle=a("strong"),M2o=o("gpt2"),E2o=o(" \u2014 "),wN=a("a"),C2o=o("GPT2Model"),w2o=o(" (OpenAI GPT-2 model)"),A2o=l(),zp=a("li"),Ale=a("strong"),y2o=o("gpt_neo"),L2o=o(" \u2014 "),AN=a("a"),x2o=o("GPTNeoModel"),$2o=o(" (GPT Neo model)"),k2o=l(),Wp=a("li"),yle=a("strong"),S2o=o("gpt_neox"),R2o=o(" \u2014 "),yN=a("a"),P2o=o("GPTNeoXModel"),B2o=o(" (GPT NeoX model)"),I2o=l(),Qp=a("li"),Lle=a("strong"),N2o=o("gptj"),q2o=o(" \u2014 "),LN=a("a"),j2o=o("GPTJModel"),D2o=o(" (GPT-J model)"),G2o=l(),Hp=a("li"),xle=a("strong"),O2o=o("hubert"),V2o=o(" \u2014 "),xN=a("a"),X2o=o("HubertModel"),z2o=o(" (Hubert model)"),W2o=l(),Up=a("li"),$le=a("strong"),Q2o=o("ibert"),H2o=o(" \u2014 "),$N=a("a"),U2o=o("IBertModel"),J2o=o(" (I-BERT model)"),Y2o=l(),Jp=a("li"),kle=a("strong"),K2o=o("imagegpt"),Z2o=o(" \u2014 "),kN=a("a"),evo=o("ImageGPTModel"),ovo=o(" (ImageGPT model)"),rvo=l(),Yp=a("li"),Sle=a("strong"),tvo=o("layoutlm"),avo=o(" \u2014 "),SN=a("a"),nvo=o("LayoutLMModel"),svo=o(" (LayoutLM model)"),lvo=l(),Kp=a("li"),Rle=a("strong"),ivo=o("layoutlmv2"),dvo=o(" \u2014 "),RN=a("a"),cvo=o("LayoutLMv2Model"),fvo=o(" (LayoutLMv2 model)"),mvo=l(),Zp=a("li"),Ple=a("strong"),gvo=o("layoutlmv3"),hvo=o(" \u2014 "),PN=a("a"),pvo=o("LayoutLMv3Model"),_vo=o(" (LayoutLMv3 model)"),uvo=l(),e_=a("li"),Ble=a("strong"),bvo=o("led"),vvo=o(" \u2014 "),BN=a("a"),Fvo=o("LEDModel"),Tvo=o(" (LED model)"),Mvo=l(),o_=a("li"),Ile=a("strong"),Evo=o("levit"),Cvo=o(" \u2014 "),IN=a("a"),wvo=o("LevitModel"),Avo=o(" (LeViT model)"),yvo=l(),r_=a("li"),Nle=a("strong"),Lvo=o("longformer"),xvo=o(" \u2014 "),NN=a("a"),$vo=o("LongformerModel"),kvo=o(" (Longformer model)"),Svo=l(),t_=a("li"),qle=a("strong"),Rvo=o("luke"),Pvo=o(" \u2014 "),qN=a("a"),Bvo=o("LukeModel"),Ivo=o(" (LUKE model)"),Nvo=l(),a_=a("li"),jle=a("strong"),qvo=o("lxmert"),jvo=o(" \u2014 "),jN=a("a"),Dvo=o("LxmertModel"),Gvo=o(" (LXMERT model)"),Ovo=l(),n_=a("li"),Dle=a("strong"),Vvo=o("m2m_100"),Xvo=o(" \u2014 "),DN=a("a"),zvo=o("M2M100Model"),Wvo=o(" (M2M100 model)"),Qvo=l(),s_=a("li"),Gle=a("strong"),Hvo=o("marian"),Uvo=o(" \u2014 "),GN=a("a"),Jvo=o("MarianModel"),Yvo=o(" (Marian model)"),Kvo=l(),l_=a("li"),Ole=a("strong"),Zvo=o("maskformer"),eFo=o(" \u2014 "),ON=a("a"),oFo=o("MaskFormerModel"),rFo=o(" (MaskFormer model)"),tFo=l(),i_=a("li"),Vle=a("strong"),aFo=o("mbart"),nFo=o(" \u2014 "),VN=a("a"),sFo=o("MBartModel"),lFo=o(" (mBART model)"),iFo=l(),d_=a("li"),Xle=a("strong"),dFo=o("megatron-bert"),cFo=o(" \u2014 "),XN=a("a"),fFo=o("MegatronBertModel"),mFo=o(" (Megatron-BERT model)"),gFo=l(),c_=a("li"),zle=a("strong"),hFo=o("mobilebert"),pFo=o(" \u2014 "),zN=a("a"),_Fo=o("MobileBertModel"),uFo=o(" (MobileBERT model)"),bFo=l(),f_=a("li"),Wle=a("strong"),vFo=o("mpnet"),FFo=o(" \u2014 "),WN=a("a"),TFo=o("MPNetModel"),MFo=o(" (MPNet model)"),EFo=l(),m_=a("li"),Qle=a("strong"),CFo=o("mt5"),wFo=o(" \u2014 "),QN=a("a"),AFo=o("MT5Model"),yFo=o(" (MT5 model)"),LFo=l(),g_=a("li"),Hle=a("strong"),xFo=o("nystromformer"),$Fo=o(" \u2014 "),HN=a("a"),kFo=o("NystromformerModel"),SFo=o(" (Nystr\xF6mformer model)"),RFo=l(),h_=a("li"),Ule=a("strong"),PFo=o("openai-gpt"),BFo=o(" \u2014 "),UN=a("a"),IFo=o("OpenAIGPTModel"),NFo=o(" (OpenAI GPT model)"),qFo=l(),p_=a("li"),Jle=a("strong"),jFo=o("opt"),DFo=o(" \u2014 "),JN=a("a"),GFo=o("OPTModel"),OFo=o(" (OPT model)"),VFo=l(),__=a("li"),Yle=a("strong"),XFo=o("pegasus"),zFo=o(" \u2014 "),YN=a("a"),WFo=o("PegasusModel"),QFo=o(" (Pegasus model)"),HFo=l(),u_=a("li"),Kle=a("strong"),UFo=o("perceiver"),JFo=o(" \u2014 "),KN=a("a"),YFo=o("PerceiverModel"),KFo=o(" (Perceiver model)"),ZFo=l(),b_=a("li"),Zle=a("strong"),e6o=o("plbart"),o6o=o(" \u2014 "),ZN=a("a"),r6o=o("PLBartModel"),t6o=o(" (PLBart model)"),a6o=l(),v_=a("li"),eie=a("strong"),n6o=o("poolformer"),s6o=o(" \u2014 "),eq=a("a"),l6o=o("PoolFormerModel"),i6o=o(" (PoolFormer model)"),d6o=l(),F_=a("li"),oie=a("strong"),c6o=o("prophetnet"),f6o=o(" \u2014 "),oq=a("a"),m6o=o("ProphetNetModel"),g6o=o(" (ProphetNet model)"),h6o=l(),T_=a("li"),rie=a("strong"),p6o=o("qdqbert"),_6o=o(" \u2014 "),rq=a("a"),u6o=o("QDQBertModel"),b6o=o(" (QDQBert model)"),v6o=l(),M_=a("li"),tie=a("strong"),F6o=o("reformer"),T6o=o(" \u2014 "),tq=a("a"),M6o=o("ReformerModel"),E6o=o(" (Reformer model)"),C6o=l(),E_=a("li"),aie=a("strong"),w6o=o("regnet"),A6o=o(" \u2014 "),aq=a("a"),y6o=o("RegNetModel"),L6o=o(" (RegNet model)"),x6o=l(),C_=a("li"),nie=a("strong"),$6o=o("rembert"),k6o=o(" \u2014 "),nq=a("a"),S6o=o("RemBertModel"),R6o=o(" (RemBERT model)"),P6o=l(),w_=a("li"),sie=a("strong"),B6o=o("resnet"),I6o=o(" \u2014 "),sq=a("a"),N6o=o("ResNetModel"),q6o=o(" (ResNet model)"),j6o=l(),A_=a("li"),lie=a("strong"),D6o=o("retribert"),G6o=o(" \u2014 "),lq=a("a"),O6o=o("RetriBertModel"),V6o=o(" (RetriBERT model)"),X6o=l(),y_=a("li"),iie=a("strong"),z6o=o("roberta"),W6o=o(" \u2014 "),iq=a("a"),Q6o=o("RobertaModel"),H6o=o(" (RoBERTa model)"),U6o=l(),L_=a("li"),die=a("strong"),J6o=o("roformer"),Y6o=o(" \u2014 "),dq=a("a"),K6o=o("RoFormerModel"),Z6o=o(" (RoFormer model)"),e1o=l(),x_=a("li"),cie=a("strong"),o1o=o("segformer"),r1o=o(" \u2014 "),cq=a("a"),t1o=o("SegformerModel"),a1o=o(" (SegFormer model)"),n1o=l(),$_=a("li"),fie=a("strong"),s1o=o("sew"),l1o=o(" \u2014 "),fq=a("a"),i1o=o("SEWModel"),d1o=o(" (SEW model)"),c1o=l(),k_=a("li"),mie=a("strong"),f1o=o("sew-d"),m1o=o(" \u2014 "),mq=a("a"),g1o=o("SEWDModel"),h1o=o(" (SEW-D model)"),p1o=l(),S_=a("li"),gie=a("strong"),_1o=o("speech_to_text"),u1o=o(" \u2014 "),gq=a("a"),b1o=o("Speech2TextModel"),v1o=o(" (Speech2Text model)"),F1o=l(),R_=a("li"),hie=a("strong"),T1o=o("splinter"),M1o=o(" \u2014 "),hq=a("a"),E1o=o("SplinterModel"),C1o=o(" (Splinter model)"),w1o=l(),P_=a("li"),pie=a("strong"),A1o=o("squeezebert"),y1o=o(" \u2014 "),pq=a("a"),L1o=o("SqueezeBertModel"),x1o=o(" (SqueezeBERT model)"),$1o=l(),B_=a("li"),_ie=a("strong"),k1o=o("swin"),S1o=o(" \u2014 "),_q=a("a"),R1o=o("SwinModel"),P1o=o(" (Swin Transformer model)"),B1o=l(),I_=a("li"),uie=a("strong"),I1o=o("t5"),N1o=o(" \u2014 "),uq=a("a"),q1o=o("T5Model"),j1o=o(" (T5 model)"),D1o=l(),N_=a("li"),bie=a("strong"),G1o=o("tapas"),O1o=o(" \u2014 "),bq=a("a"),V1o=o("TapasModel"),X1o=o(" (TAPAS model)"),z1o=l(),q_=a("li"),vie=a("strong"),W1o=o("trajectory_transformer"),Q1o=o(" \u2014 "),vq=a("a"),H1o=o("TrajectoryTransformerModel"),U1o=o(" (Trajectory Transformer model)"),J1o=l(),j_=a("li"),Fie=a("strong"),Y1o=o("transfo-xl"),K1o=o(" \u2014 "),Fq=a("a"),Z1o=o("TransfoXLModel"),eTo=o(" (Transformer-XL model)"),oTo=l(),D_=a("li"),Tie=a("strong"),rTo=o("unispeech"),tTo=o(" \u2014 "),Tq=a("a"),aTo=o("UniSpeechModel"),nTo=o(" (UniSpeech model)"),sTo=l(),G_=a("li"),Mie=a("strong"),lTo=o("unispeech-sat"),iTo=o(" \u2014 "),Mq=a("a"),dTo=o("UniSpeechSatModel"),cTo=o(" (UniSpeechSat model)"),fTo=l(),O_=a("li"),Eie=a("strong"),mTo=o("van"),gTo=o(" \u2014 "),Eq=a("a"),hTo=o("VanModel"),pTo=o(" (VAN model)"),_To=l(),V_=a("li"),Cie=a("strong"),uTo=o("vilt"),bTo=o(" \u2014 "),Cq=a("a"),vTo=o("ViltModel"),FTo=o(" (ViLT model)"),TTo=l(),X_=a("li"),wie=a("strong"),MTo=o("vision-text-dual-encoder"),ETo=o(" \u2014 "),wq=a("a"),CTo=o("VisionTextDualEncoderModel"),wTo=o(" (VisionTextDualEncoder model)"),ATo=l(),z_=a("li"),Aie=a("strong"),yTo=o("visual_bert"),LTo=o(" \u2014 "),Aq=a("a"),xTo=o("VisualBertModel"),$To=o(" (VisualBERT model)"),kTo=l(),W_=a("li"),yie=a("strong"),STo=o("vit"),RTo=o(" \u2014 "),yq=a("a"),PTo=o("ViTModel"),BTo=o(" (ViT model)"),ITo=l(),Q_=a("li"),Lie=a("strong"),NTo=o("vit_mae"),qTo=o(" \u2014 "),Lq=a("a"),jTo=o("ViTMAEModel"),DTo=o(" (ViTMAE model)"),GTo=l(),H_=a("li"),xie=a("strong"),OTo=o("wav2vec2"),VTo=o(" \u2014 "),xq=a("a"),XTo=o("Wav2Vec2Model"),zTo=o(" (Wav2Vec2 model)"),WTo=l(),U_=a("li"),$ie=a("strong"),QTo=o("wav2vec2-conformer"),HTo=o(" \u2014 "),$q=a("a"),UTo=o("Wav2Vec2ConformerModel"),JTo=o(" (Wav2Vec2-Conformer model)"),YTo=l(),J_=a("li"),kie=a("strong"),KTo=o("wavlm"),ZTo=o(" \u2014 "),kq=a("a"),eMo=o("WavLMModel"),oMo=o(" (WavLM model)"),rMo=l(),Y_=a("li"),Sie=a("strong"),tMo=o("xglm"),aMo=o(" \u2014 "),Sq=a("a"),nMo=o("XGLMModel"),sMo=o(" (XGLM model)"),lMo=l(),K_=a("li"),Rie=a("strong"),iMo=o("xlm"),dMo=o(" \u2014 "),Rq=a("a"),cMo=o("XLMModel"),fMo=o(" (XLM model)"),mMo=l(),Z_=a("li"),Pie=a("strong"),gMo=o("xlm-prophetnet"),hMo=o(" \u2014 "),Pq=a("a"),pMo=o("XLMProphetNetModel"),_Mo=o(" (XLM-ProphetNet model)"),uMo=l(),eu=a("li"),Bie=a("strong"),bMo=o("xlm-roberta"),vMo=o(" \u2014 "),Bq=a("a"),FMo=o("XLMRobertaModel"),TMo=o(" (XLM-RoBERTa model)"),MMo=l(),ou=a("li"),Iie=a("strong"),EMo=o("xlm-roberta-xl"),CMo=o(" \u2014 "),Iq=a("a"),wMo=o("XLMRobertaXLModel"),AMo=o(" (XLM-RoBERTa-XL model)"),yMo=l(),ru=a("li"),Nie=a("strong"),LMo=o("xlnet"),xMo=o(" \u2014 "),Nq=a("a"),$Mo=o("XLNetModel"),kMo=o(" (XLNet model)"),SMo=l(),tu=a("li"),qie=a("strong"),RMo=o("yolos"),PMo=o(" \u2014 "),qq=a("a"),BMo=o("YolosModel"),IMo=o(" (YOLOS model)"),NMo=l(),au=a("li"),jie=a("strong"),qMo=o("yoso"),jMo=o(" \u2014 "),jq=a("a"),DMo=o("YosoModel"),GMo=o(" (YOSO model)"),OMo=l(),nu=a("p"),VMo=o("The model is set in evaluation mode by default using "),Die=a("code"),XMo=o("model.eval()"),zMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),WMo=o("model.train()"),QMo=l(),F(su.$$.fragment),Jqe=l(),xi=a("h2"),lu=a("a"),Oie=a("span"),F(gL.$$.fragment),HMo=l(),Vie=a("span"),UMo=o("AutoModelForPreTraining"),Yqe=l(),xo=a("div"),F(hL.$$.fragment),JMo=l(),$i=a("p"),YMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=a("a"),KMo=o("from_pretrained()"),ZMo=o(" class method or the "),Gq=a("a"),e4o=o("from_config()"),o4o=o(` class
method.`),r4o=l(),pL=a("p"),t4o=o("This class cannot be instantiated directly using "),Xie=a("code"),a4o=o("__init__()"),n4o=o(" (throws an error)."),s4o=l(),at=a("div"),F(_L.$$.fragment),l4o=l(),zie=a("p"),i4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d4o=l(),ki=a("p"),c4o=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),f4o=o("not"),m4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=a("a"),g4o=o("from_pretrained()"),h4o=o(" to load the model weights."),p4o=l(),F(iu.$$.fragment),_4o=l(),Ye=a("div"),F(uL.$$.fragment),u4o=l(),Qie=a("p"),b4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v4o=l(),xa=a("p"),F4o=o("The model class to instantiate is selected based on the "),Hie=a("code"),T4o=o("model_type"),M4o=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),E4o=o("pretrained_model_name_or_path"),C4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),w4o=o("pretrained_model_name_or_path"),A4o=o(":"),y4o=l(),G=a("ul"),du=a("li"),Yie=a("strong"),L4o=o("albert"),x4o=o(" \u2014 "),Vq=a("a"),$4o=o("AlbertForPreTraining"),k4o=o(" (ALBERT model)"),S4o=l(),cu=a("li"),Kie=a("strong"),R4o=o("bart"),P4o=o(" \u2014 "),Xq=a("a"),B4o=o("BartForConditionalGeneration"),I4o=o(" (BART model)"),N4o=l(),fu=a("li"),Zie=a("strong"),q4o=o("bert"),j4o=o(" \u2014 "),zq=a("a"),D4o=o("BertForPreTraining"),G4o=o(" (BERT model)"),O4o=l(),mu=a("li"),ede=a("strong"),V4o=o("big_bird"),X4o=o(" \u2014 "),Wq=a("a"),z4o=o("BigBirdForPreTraining"),W4o=o(" (BigBird model)"),Q4o=l(),gu=a("li"),ode=a("strong"),H4o=o("camembert"),U4o=o(" \u2014 "),Qq=a("a"),J4o=o("CamembertForMaskedLM"),Y4o=o(" (CamemBERT model)"),K4o=l(),hu=a("li"),rde=a("strong"),Z4o=o("ctrl"),eEo=o(" \u2014 "),Hq=a("a"),oEo=o("CTRLLMHeadModel"),rEo=o(" (CTRL model)"),tEo=l(),pu=a("li"),tde=a("strong"),aEo=o("data2vec-text"),nEo=o(" \u2014 "),Uq=a("a"),sEo=o("Data2VecTextForMaskedLM"),lEo=o(" (Data2VecText model)"),iEo=l(),_u=a("li"),ade=a("strong"),dEo=o("deberta"),cEo=o(" \u2014 "),Jq=a("a"),fEo=o("DebertaForMaskedLM"),mEo=o(" (DeBERTa model)"),gEo=l(),uu=a("li"),nde=a("strong"),hEo=o("deberta-v2"),pEo=o(" \u2014 "),Yq=a("a"),_Eo=o("DebertaV2ForMaskedLM"),uEo=o(" (DeBERTa-v2 model)"),bEo=l(),bu=a("li"),sde=a("strong"),vEo=o("distilbert"),FEo=o(" \u2014 "),Kq=a("a"),TEo=o("DistilBertForMaskedLM"),MEo=o(" (DistilBERT model)"),EEo=l(),vu=a("li"),lde=a("strong"),CEo=o("electra"),wEo=o(" \u2014 "),Zq=a("a"),AEo=o("ElectraForPreTraining"),yEo=o(" (ELECTRA model)"),LEo=l(),Fu=a("li"),ide=a("strong"),xEo=o("flaubert"),$Eo=o(" \u2014 "),ej=a("a"),kEo=o("FlaubertWithLMHeadModel"),SEo=o(" (FlauBERT model)"),REo=l(),Tu=a("li"),dde=a("strong"),PEo=o("flava"),BEo=o(" \u2014 "),oj=a("a"),IEo=o("FlavaForPreTraining"),NEo=o(" (FLAVA model)"),qEo=l(),Mu=a("li"),cde=a("strong"),jEo=o("fnet"),DEo=o(" \u2014 "),rj=a("a"),GEo=o("FNetForPreTraining"),OEo=o(" (FNet model)"),VEo=l(),Eu=a("li"),fde=a("strong"),XEo=o("fsmt"),zEo=o(" \u2014 "),tj=a("a"),WEo=o("FSMTForConditionalGeneration"),QEo=o(" (FairSeq Machine-Translation model)"),HEo=l(),Cu=a("li"),mde=a("strong"),UEo=o("funnel"),JEo=o(" \u2014 "),aj=a("a"),YEo=o("FunnelForPreTraining"),KEo=o(" (Funnel Transformer model)"),ZEo=l(),wu=a("li"),gde=a("strong"),eCo=o("gpt2"),oCo=o(" \u2014 "),nj=a("a"),rCo=o("GPT2LMHeadModel"),tCo=o(" (OpenAI GPT-2 model)"),aCo=l(),Au=a("li"),hde=a("strong"),nCo=o("ibert"),sCo=o(" \u2014 "),sj=a("a"),lCo=o("IBertForMaskedLM"),iCo=o(" (I-BERT model)"),dCo=l(),yu=a("li"),pde=a("strong"),cCo=o("layoutlm"),fCo=o(" \u2014 "),lj=a("a"),mCo=o("LayoutLMForMaskedLM"),gCo=o(" (LayoutLM model)"),hCo=l(),Lu=a("li"),_de=a("strong"),pCo=o("longformer"),_Co=o(" \u2014 "),ij=a("a"),uCo=o("LongformerForMaskedLM"),bCo=o(" (Longformer model)"),vCo=l(),xu=a("li"),ude=a("strong"),FCo=o("lxmert"),TCo=o(" \u2014 "),dj=a("a"),MCo=o("LxmertForPreTraining"),ECo=o(" (LXMERT model)"),CCo=l(),$u=a("li"),bde=a("strong"),wCo=o("megatron-bert"),ACo=o(" \u2014 "),cj=a("a"),yCo=o("MegatronBertForPreTraining"),LCo=o(" (Megatron-BERT model)"),xCo=l(),ku=a("li"),vde=a("strong"),$Co=o("mobilebert"),kCo=o(" \u2014 "),fj=a("a"),SCo=o("MobileBertForPreTraining"),RCo=o(" (MobileBERT model)"),PCo=l(),Su=a("li"),Fde=a("strong"),BCo=o("mpnet"),ICo=o(" \u2014 "),mj=a("a"),NCo=o("MPNetForMaskedLM"),qCo=o(" (MPNet model)"),jCo=l(),Ru=a("li"),Tde=a("strong"),DCo=o("openai-gpt"),GCo=o(" \u2014 "),gj=a("a"),OCo=o("OpenAIGPTLMHeadModel"),VCo=o(" (OpenAI GPT model)"),XCo=l(),Pu=a("li"),Mde=a("strong"),zCo=o("retribert"),WCo=o(" \u2014 "),hj=a("a"),QCo=o("RetriBertModel"),HCo=o(" (RetriBERT model)"),UCo=l(),Bu=a("li"),Ede=a("strong"),JCo=o("roberta"),YCo=o(" \u2014 "),pj=a("a"),KCo=o("RobertaForMaskedLM"),ZCo=o(" (RoBERTa model)"),e5o=l(),Iu=a("li"),Cde=a("strong"),o5o=o("splinter"),r5o=o(" \u2014 "),_j=a("a"),t5o=o("SplinterForPreTraining"),a5o=o(" (Splinter model)"),n5o=l(),Nu=a("li"),wde=a("strong"),s5o=o("squeezebert"),l5o=o(" \u2014 "),uj=a("a"),i5o=o("SqueezeBertForMaskedLM"),d5o=o(" (SqueezeBERT model)"),c5o=l(),qu=a("li"),Ade=a("strong"),f5o=o("t5"),m5o=o(" \u2014 "),bj=a("a"),g5o=o("T5ForConditionalGeneration"),h5o=o(" (T5 model)"),p5o=l(),ju=a("li"),yde=a("strong"),_5o=o("tapas"),u5o=o(" \u2014 "),vj=a("a"),b5o=o("TapasForMaskedLM"),v5o=o(" (TAPAS model)"),F5o=l(),Du=a("li"),Lde=a("strong"),T5o=o("transfo-xl"),M5o=o(" \u2014 "),Fj=a("a"),E5o=o("TransfoXLLMHeadModel"),C5o=o(" (Transformer-XL model)"),w5o=l(),Gu=a("li"),xde=a("strong"),A5o=o("unispeech"),y5o=o(" \u2014 "),Tj=a("a"),L5o=o("UniSpeechForPreTraining"),x5o=o(" (UniSpeech model)"),$5o=l(),Ou=a("li"),$de=a("strong"),k5o=o("unispeech-sat"),S5o=o(" \u2014 "),Mj=a("a"),R5o=o("UniSpeechSatForPreTraining"),P5o=o(" (UniSpeechSat model)"),B5o=l(),Vu=a("li"),kde=a("strong"),I5o=o("visual_bert"),N5o=o(" \u2014 "),Ej=a("a"),q5o=o("VisualBertForPreTraining"),j5o=o(" (VisualBERT model)"),D5o=l(),Xu=a("li"),Sde=a("strong"),G5o=o("vit_mae"),O5o=o(" \u2014 "),Cj=a("a"),V5o=o("ViTMAEForPreTraining"),X5o=o(" (ViTMAE model)"),z5o=l(),zu=a("li"),Rde=a("strong"),W5o=o("wav2vec2"),Q5o=o(" \u2014 "),wj=a("a"),H5o=o("Wav2Vec2ForPreTraining"),U5o=o(" (Wav2Vec2 model)"),J5o=l(),Wu=a("li"),Pde=a("strong"),Y5o=o("wav2vec2-conformer"),K5o=o(" \u2014 "),Aj=a("a"),Z5o=o("Wav2Vec2ConformerForPreTraining"),e3o=o(" (Wav2Vec2-Conformer model)"),o3o=l(),Qu=a("li"),Bde=a("strong"),r3o=o("xlm"),t3o=o(" \u2014 "),yj=a("a"),a3o=o("XLMWithLMHeadModel"),n3o=o(" (XLM model)"),s3o=l(),Hu=a("li"),Ide=a("strong"),l3o=o("xlm-roberta"),i3o=o(" \u2014 "),Lj=a("a"),d3o=o("XLMRobertaForMaskedLM"),c3o=o(" (XLM-RoBERTa model)"),f3o=l(),Uu=a("li"),Nde=a("strong"),m3o=o("xlm-roberta-xl"),g3o=o(" \u2014 "),xj=a("a"),h3o=o("XLMRobertaXLForMaskedLM"),p3o=o(" (XLM-RoBERTa-XL model)"),_3o=l(),Ju=a("li"),qde=a("strong"),u3o=o("xlnet"),b3o=o(" \u2014 "),$j=a("a"),v3o=o("XLNetLMHeadModel"),F3o=o(" (XLNet model)"),T3o=l(),Yu=a("p"),M3o=o("The model is set in evaluation mode by default using "),jde=a("code"),E3o=o("model.eval()"),C3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),w3o=o("model.train()"),A3o=l(),F(Ku.$$.fragment),Kqe=l(),Si=a("h2"),Zu=a("a"),Gde=a("span"),F(bL.$$.fragment),y3o=l(),Ode=a("span"),L3o=o("AutoModelForCausalLM"),Zqe=l(),$o=a("div"),F(vL.$$.fragment),x3o=l(),Ri=a("p"),$3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=a("a"),k3o=o("from_pretrained()"),S3o=o(" class method or the "),Sj=a("a"),R3o=o("from_config()"),P3o=o(` class
method.`),B3o=l(),FL=a("p"),I3o=o("This class cannot be instantiated directly using "),Vde=a("code"),N3o=o("__init__()"),q3o=o(" (throws an error)."),j3o=l(),nt=a("div"),F(TL.$$.fragment),D3o=l(),Xde=a("p"),G3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),O3o=l(),Pi=a("p"),V3o=o(`Note:
Loading a model from its configuration file does `),zde=a("strong"),X3o=o("not"),z3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),W3o=o("from_pretrained()"),Q3o=o(" to load the model weights."),H3o=l(),F(eb.$$.fragment),U3o=l(),Ke=a("div"),F(ML.$$.fragment),J3o=l(),Wde=a("p"),Y3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),K3o=l(),$a=a("p"),Z3o=o("The model class to instantiate is selected based on the "),Qde=a("code"),e0o=o("model_type"),o0o=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),r0o=o("pretrained_model_name_or_path"),t0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),a0o=o("pretrained_model_name_or_path"),n0o=o(":"),s0o=l(),z=a("ul"),ob=a("li"),Jde=a("strong"),l0o=o("bart"),i0o=o(" \u2014 "),Pj=a("a"),d0o=o("BartForCausalLM"),c0o=o(" (BART model)"),f0o=l(),rb=a("li"),Yde=a("strong"),m0o=o("bert"),g0o=o(" \u2014 "),Bj=a("a"),h0o=o("BertLMHeadModel"),p0o=o(" (BERT model)"),_0o=l(),tb=a("li"),Kde=a("strong"),u0o=o("bert-generation"),b0o=o(" \u2014 "),Ij=a("a"),v0o=o("BertGenerationDecoder"),F0o=o(" (Bert Generation model)"),T0o=l(),ab=a("li"),Zde=a("strong"),M0o=o("big_bird"),E0o=o(" \u2014 "),Nj=a("a"),C0o=o("BigBirdForCausalLM"),w0o=o(" (BigBird model)"),A0o=l(),nb=a("li"),ece=a("strong"),y0o=o("bigbird_pegasus"),L0o=o(" \u2014 "),qj=a("a"),x0o=o("BigBirdPegasusForCausalLM"),$0o=o(" (BigBird-Pegasus model)"),k0o=l(),sb=a("li"),oce=a("strong"),S0o=o("blenderbot"),R0o=o(" \u2014 "),jj=a("a"),P0o=o("BlenderbotForCausalLM"),B0o=o(" (Blenderbot model)"),I0o=l(),lb=a("li"),rce=a("strong"),N0o=o("blenderbot-small"),q0o=o(" \u2014 "),Dj=a("a"),j0o=o("BlenderbotSmallForCausalLM"),D0o=o(" (BlenderbotSmall model)"),G0o=l(),ib=a("li"),tce=a("strong"),O0o=o("camembert"),V0o=o(" \u2014 "),Gj=a("a"),X0o=o("CamembertForCausalLM"),z0o=o(" (CamemBERT model)"),W0o=l(),db=a("li"),ace=a("strong"),Q0o=o("ctrl"),H0o=o(" \u2014 "),Oj=a("a"),U0o=o("CTRLLMHeadModel"),J0o=o(" (CTRL model)"),Y0o=l(),cb=a("li"),nce=a("strong"),K0o=o("data2vec-text"),Z0o=o(" \u2014 "),Vj=a("a"),ewo=o("Data2VecTextForCausalLM"),owo=o(" (Data2VecText model)"),rwo=l(),fb=a("li"),sce=a("strong"),two=o("electra"),awo=o(" \u2014 "),Xj=a("a"),nwo=o("ElectraForCausalLM"),swo=o(" (ELECTRA model)"),lwo=l(),mb=a("li"),lce=a("strong"),iwo=o("gpt2"),dwo=o(" \u2014 "),zj=a("a"),cwo=o("GPT2LMHeadModel"),fwo=o(" (OpenAI GPT-2 model)"),mwo=l(),gb=a("li"),ice=a("strong"),gwo=o("gpt_neo"),hwo=o(" \u2014 "),Wj=a("a"),pwo=o("GPTNeoForCausalLM"),_wo=o(" (GPT Neo model)"),uwo=l(),hb=a("li"),dce=a("strong"),bwo=o("gpt_neox"),vwo=o(" \u2014 "),Qj=a("a"),Fwo=o("GPTNeoXForCausalLM"),Two=o(" (GPT NeoX model)"),Mwo=l(),pb=a("li"),cce=a("strong"),Ewo=o("gptj"),Cwo=o(" \u2014 "),Hj=a("a"),wwo=o("GPTJForCausalLM"),Awo=o(" (GPT-J model)"),ywo=l(),_b=a("li"),fce=a("strong"),Lwo=o("marian"),xwo=o(" \u2014 "),Uj=a("a"),$wo=o("MarianForCausalLM"),kwo=o(" (Marian model)"),Swo=l(),ub=a("li"),mce=a("strong"),Rwo=o("mbart"),Pwo=o(" \u2014 "),Jj=a("a"),Bwo=o("MBartForCausalLM"),Iwo=o(" (mBART model)"),Nwo=l(),bb=a("li"),gce=a("strong"),qwo=o("megatron-bert"),jwo=o(" \u2014 "),Yj=a("a"),Dwo=o("MegatronBertForCausalLM"),Gwo=o(" (Megatron-BERT model)"),Owo=l(),vb=a("li"),hce=a("strong"),Vwo=o("openai-gpt"),Xwo=o(" \u2014 "),Kj=a("a"),zwo=o("OpenAIGPTLMHeadModel"),Wwo=o(" (OpenAI GPT model)"),Qwo=l(),Fb=a("li"),pce=a("strong"),Hwo=o("opt"),Uwo=o(" \u2014 "),Zj=a("a"),Jwo=o("OPTForCausalLM"),Ywo=o(" (OPT model)"),Kwo=l(),Tb=a("li"),_ce=a("strong"),Zwo=o("pegasus"),eAo=o(" \u2014 "),eD=a("a"),oAo=o("PegasusForCausalLM"),rAo=o(" (Pegasus model)"),tAo=l(),Mb=a("li"),uce=a("strong"),aAo=o("plbart"),nAo=o(" \u2014 "),oD=a("a"),sAo=o("PLBartForCausalLM"),lAo=o(" (PLBart model)"),iAo=l(),Eb=a("li"),bce=a("strong"),dAo=o("prophetnet"),cAo=o(" \u2014 "),rD=a("a"),fAo=o("ProphetNetForCausalLM"),mAo=o(" (ProphetNet model)"),gAo=l(),Cb=a("li"),vce=a("strong"),hAo=o("qdqbert"),pAo=o(" \u2014 "),tD=a("a"),_Ao=o("QDQBertLMHeadModel"),uAo=o(" (QDQBert model)"),bAo=l(),wb=a("li"),Fce=a("strong"),vAo=o("reformer"),FAo=o(" \u2014 "),aD=a("a"),TAo=o("ReformerModelWithLMHead"),MAo=o(" (Reformer model)"),EAo=l(),Ab=a("li"),Tce=a("strong"),CAo=o("rembert"),wAo=o(" \u2014 "),nD=a("a"),AAo=o("RemBertForCausalLM"),yAo=o(" (RemBERT model)"),LAo=l(),yb=a("li"),Mce=a("strong"),xAo=o("roberta"),$Ao=o(" \u2014 "),sD=a("a"),kAo=o("RobertaForCausalLM"),SAo=o(" (RoBERTa model)"),RAo=l(),Lb=a("li"),Ece=a("strong"),PAo=o("roformer"),BAo=o(" \u2014 "),lD=a("a"),IAo=o("RoFormerForCausalLM"),NAo=o(" (RoFormer model)"),qAo=l(),xb=a("li"),Cce=a("strong"),jAo=o("speech_to_text_2"),DAo=o(" \u2014 "),iD=a("a"),GAo=o("Speech2Text2ForCausalLM"),OAo=o(" (Speech2Text2 model)"),VAo=l(),$b=a("li"),wce=a("strong"),XAo=o("transfo-xl"),zAo=o(" \u2014 "),dD=a("a"),WAo=o("TransfoXLLMHeadModel"),QAo=o(" (Transformer-XL model)"),HAo=l(),kb=a("li"),Ace=a("strong"),UAo=o("trocr"),JAo=o(" \u2014 "),cD=a("a"),YAo=o("TrOCRForCausalLM"),KAo=o(" (TrOCR model)"),ZAo=l(),Sb=a("li"),yce=a("strong"),eyo=o("xglm"),oyo=o(" \u2014 "),fD=a("a"),ryo=o("XGLMForCausalLM"),tyo=o(" (XGLM model)"),ayo=l(),Rb=a("li"),Lce=a("strong"),nyo=o("xlm"),syo=o(" \u2014 "),mD=a("a"),lyo=o("XLMWithLMHeadModel"),iyo=o(" (XLM model)"),dyo=l(),Pb=a("li"),xce=a("strong"),cyo=o("xlm-prophetnet"),fyo=o(" \u2014 "),gD=a("a"),myo=o("XLMProphetNetForCausalLM"),gyo=o(" (XLM-ProphetNet model)"),hyo=l(),Bb=a("li"),$ce=a("strong"),pyo=o("xlm-roberta"),_yo=o(" \u2014 "),hD=a("a"),uyo=o("XLMRobertaForCausalLM"),byo=o(" (XLM-RoBERTa model)"),vyo=l(),Ib=a("li"),kce=a("strong"),Fyo=o("xlm-roberta-xl"),Tyo=o(" \u2014 "),pD=a("a"),Myo=o("XLMRobertaXLForCausalLM"),Eyo=o(" (XLM-RoBERTa-XL model)"),Cyo=l(),Nb=a("li"),Sce=a("strong"),wyo=o("xlnet"),Ayo=o(" \u2014 "),_D=a("a"),yyo=o("XLNetLMHeadModel"),Lyo=o(" (XLNet model)"),xyo=l(),qb=a("p"),$yo=o("The model is set in evaluation mode by default using "),Rce=a("code"),kyo=o("model.eval()"),Syo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),Ryo=o("model.train()"),Pyo=l(),F(jb.$$.fragment),eje=l(),Bi=a("h2"),Db=a("a"),Bce=a("span"),F(EL.$$.fragment),Byo=l(),Ice=a("span"),Iyo=o("AutoModelForMaskedLM"),oje=l(),ko=a("div"),F(CL.$$.fragment),Nyo=l(),Ii=a("p"),qyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=a("a"),jyo=o("from_pretrained()"),Dyo=o(" class method or the "),bD=a("a"),Gyo=o("from_config()"),Oyo=o(` class
method.`),Vyo=l(),wL=a("p"),Xyo=o("This class cannot be instantiated directly using "),Nce=a("code"),zyo=o("__init__()"),Wyo=o(" (throws an error)."),Qyo=l(),st=a("div"),F(AL.$$.fragment),Hyo=l(),qce=a("p"),Uyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jyo=l(),Ni=a("p"),Yyo=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),Kyo=o("not"),Zyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),eLo=o("from_pretrained()"),oLo=o(" to load the model weights."),rLo=l(),F(Gb.$$.fragment),tLo=l(),Ze=a("div"),F(yL.$$.fragment),aLo=l(),Dce=a("p"),nLo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sLo=l(),ka=a("p"),lLo=o("The model class to instantiate is selected based on the "),Gce=a("code"),iLo=o("model_type"),dLo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),cLo=o("pretrained_model_name_or_path"),fLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),mLo=o("pretrained_model_name_or_path"),gLo=o(":"),hLo=l(),W=a("ul"),Ob=a("li"),Xce=a("strong"),pLo=o("albert"),_Lo=o(" \u2014 "),FD=a("a"),uLo=o("AlbertForMaskedLM"),bLo=o(" (ALBERT model)"),vLo=l(),Vb=a("li"),zce=a("strong"),FLo=o("bart"),TLo=o(" \u2014 "),TD=a("a"),MLo=o("BartForConditionalGeneration"),ELo=o(" (BART model)"),CLo=l(),Xb=a("li"),Wce=a("strong"),wLo=o("bert"),ALo=o(" \u2014 "),MD=a("a"),yLo=o("BertForMaskedLM"),LLo=o(" (BERT model)"),xLo=l(),zb=a("li"),Qce=a("strong"),$Lo=o("big_bird"),kLo=o(" \u2014 "),ED=a("a"),SLo=o("BigBirdForMaskedLM"),RLo=o(" (BigBird model)"),PLo=l(),Wb=a("li"),Hce=a("strong"),BLo=o("camembert"),ILo=o(" \u2014 "),CD=a("a"),NLo=o("CamembertForMaskedLM"),qLo=o(" (CamemBERT model)"),jLo=l(),Qb=a("li"),Uce=a("strong"),DLo=o("convbert"),GLo=o(" \u2014 "),wD=a("a"),OLo=o("ConvBertForMaskedLM"),VLo=o(" (ConvBERT model)"),XLo=l(),Hb=a("li"),Jce=a("strong"),zLo=o("data2vec-text"),WLo=o(" \u2014 "),AD=a("a"),QLo=o("Data2VecTextForMaskedLM"),HLo=o(" (Data2VecText model)"),ULo=l(),Ub=a("li"),Yce=a("strong"),JLo=o("deberta"),YLo=o(" \u2014 "),yD=a("a"),KLo=o("DebertaForMaskedLM"),ZLo=o(" (DeBERTa model)"),e8o=l(),Jb=a("li"),Kce=a("strong"),o8o=o("deberta-v2"),r8o=o(" \u2014 "),LD=a("a"),t8o=o("DebertaV2ForMaskedLM"),a8o=o(" (DeBERTa-v2 model)"),n8o=l(),Yb=a("li"),Zce=a("strong"),s8o=o("distilbert"),l8o=o(" \u2014 "),xD=a("a"),i8o=o("DistilBertForMaskedLM"),d8o=o(" (DistilBERT model)"),c8o=l(),Kb=a("li"),efe=a("strong"),f8o=o("electra"),m8o=o(" \u2014 "),$D=a("a"),g8o=o("ElectraForMaskedLM"),h8o=o(" (ELECTRA model)"),p8o=l(),Zb=a("li"),ofe=a("strong"),_8o=o("flaubert"),u8o=o(" \u2014 "),kD=a("a"),b8o=o("FlaubertWithLMHeadModel"),v8o=o(" (FlauBERT model)"),F8o=l(),e2=a("li"),rfe=a("strong"),T8o=o("fnet"),M8o=o(" \u2014 "),SD=a("a"),E8o=o("FNetForMaskedLM"),C8o=o(" (FNet model)"),w8o=l(),o2=a("li"),tfe=a("strong"),A8o=o("funnel"),y8o=o(" \u2014 "),RD=a("a"),L8o=o("FunnelForMaskedLM"),x8o=o(" (Funnel Transformer model)"),$8o=l(),r2=a("li"),afe=a("strong"),k8o=o("ibert"),S8o=o(" \u2014 "),PD=a("a"),R8o=o("IBertForMaskedLM"),P8o=o(" (I-BERT model)"),B8o=l(),t2=a("li"),nfe=a("strong"),I8o=o("layoutlm"),N8o=o(" \u2014 "),BD=a("a"),q8o=o("LayoutLMForMaskedLM"),j8o=o(" (LayoutLM model)"),D8o=l(),a2=a("li"),sfe=a("strong"),G8o=o("longformer"),O8o=o(" \u2014 "),ID=a("a"),V8o=o("LongformerForMaskedLM"),X8o=o(" (Longformer model)"),z8o=l(),n2=a("li"),lfe=a("strong"),W8o=o("luke"),Q8o=o(" \u2014 "),ND=a("a"),H8o=o("LukeForMaskedLM"),U8o=o(" (LUKE model)"),J8o=l(),s2=a("li"),ife=a("strong"),Y8o=o("mbart"),K8o=o(" \u2014 "),qD=a("a"),Z8o=o("MBartForConditionalGeneration"),e7o=o(" (mBART model)"),o7o=l(),l2=a("li"),dfe=a("strong"),r7o=o("megatron-bert"),t7o=o(" \u2014 "),jD=a("a"),a7o=o("MegatronBertForMaskedLM"),n7o=o(" (Megatron-BERT model)"),s7o=l(),i2=a("li"),cfe=a("strong"),l7o=o("mobilebert"),i7o=o(" \u2014 "),DD=a("a"),d7o=o("MobileBertForMaskedLM"),c7o=o(" (MobileBERT model)"),f7o=l(),d2=a("li"),ffe=a("strong"),m7o=o("mpnet"),g7o=o(" \u2014 "),GD=a("a"),h7o=o("MPNetForMaskedLM"),p7o=o(" (MPNet model)"),_7o=l(),c2=a("li"),mfe=a("strong"),u7o=o("nystromformer"),b7o=o(" \u2014 "),OD=a("a"),v7o=o("NystromformerForMaskedLM"),F7o=o(" (Nystr\xF6mformer model)"),T7o=l(),f2=a("li"),gfe=a("strong"),M7o=o("perceiver"),E7o=o(" \u2014 "),VD=a("a"),C7o=o("PerceiverForMaskedLM"),w7o=o(" (Perceiver model)"),A7o=l(),m2=a("li"),hfe=a("strong"),y7o=o("qdqbert"),L7o=o(" \u2014 "),XD=a("a"),x7o=o("QDQBertForMaskedLM"),$7o=o(" (QDQBert model)"),k7o=l(),g2=a("li"),pfe=a("strong"),S7o=o("reformer"),R7o=o(" \u2014 "),zD=a("a"),P7o=o("ReformerForMaskedLM"),B7o=o(" (Reformer model)"),I7o=l(),h2=a("li"),_fe=a("strong"),N7o=o("rembert"),q7o=o(" \u2014 "),WD=a("a"),j7o=o("RemBertForMaskedLM"),D7o=o(" (RemBERT model)"),G7o=l(),p2=a("li"),ufe=a("strong"),O7o=o("roberta"),V7o=o(" \u2014 "),QD=a("a"),X7o=o("RobertaForMaskedLM"),z7o=o(" (RoBERTa model)"),W7o=l(),_2=a("li"),bfe=a("strong"),Q7o=o("roformer"),H7o=o(" \u2014 "),HD=a("a"),U7o=o("RoFormerForMaskedLM"),J7o=o(" (RoFormer model)"),Y7o=l(),u2=a("li"),vfe=a("strong"),K7o=o("squeezebert"),Z7o=o(" \u2014 "),UD=a("a"),e9o=o("SqueezeBertForMaskedLM"),o9o=o(" (SqueezeBERT model)"),r9o=l(),b2=a("li"),Ffe=a("strong"),t9o=o("tapas"),a9o=o(" \u2014 "),JD=a("a"),n9o=o("TapasForMaskedLM"),s9o=o(" (TAPAS model)"),l9o=l(),v2=a("li"),Tfe=a("strong"),i9o=o("wav2vec2"),d9o=o(" \u2014 "),Mfe=a("code"),c9o=o("Wav2Vec2ForMaskedLM"),f9o=o(" (Wav2Vec2 model)"),m9o=l(),F2=a("li"),Efe=a("strong"),g9o=o("xlm"),h9o=o(" \u2014 "),YD=a("a"),p9o=o("XLMWithLMHeadModel"),_9o=o(" (XLM model)"),u9o=l(),T2=a("li"),Cfe=a("strong"),b9o=o("xlm-roberta"),v9o=o(" \u2014 "),KD=a("a"),F9o=o("XLMRobertaForMaskedLM"),T9o=o(" (XLM-RoBERTa model)"),M9o=l(),M2=a("li"),wfe=a("strong"),E9o=o("xlm-roberta-xl"),C9o=o(" \u2014 "),ZD=a("a"),w9o=o("XLMRobertaXLForMaskedLM"),A9o=o(" (XLM-RoBERTa-XL model)"),y9o=l(),E2=a("li"),Afe=a("strong"),L9o=o("yoso"),x9o=o(" \u2014 "),eG=a("a"),$9o=o("YosoForMaskedLM"),k9o=o(" (YOSO model)"),S9o=l(),C2=a("p"),R9o=o("The model is set in evaluation mode by default using "),yfe=a("code"),P9o=o("model.eval()"),B9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),I9o=o("model.train()"),N9o=l(),F(w2.$$.fragment),rje=l(),qi=a("h2"),A2=a("a"),xfe=a("span"),F(LL.$$.fragment),q9o=l(),$fe=a("span"),j9o=o("AutoModelForSeq2SeqLM"),tje=l(),So=a("div"),F(xL.$$.fragment),D9o=l(),ji=a("p"),G9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=a("a"),O9o=o("from_pretrained()"),V9o=o(" class method or the "),rG=a("a"),X9o=o("from_config()"),z9o=o(` class
method.`),W9o=l(),$L=a("p"),Q9o=o("This class cannot be instantiated directly using "),kfe=a("code"),H9o=o("__init__()"),U9o=o(" (throws an error)."),J9o=l(),lt=a("div"),F(kL.$$.fragment),Y9o=l(),Sfe=a("p"),K9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z9o=l(),Di=a("p"),exo=o(`Note:
Loading a model from its configuration file does `),Rfe=a("strong"),oxo=o("not"),rxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),txo=o("from_pretrained()"),axo=o(" to load the model weights."),nxo=l(),F(y2.$$.fragment),sxo=l(),eo=a("div"),F(SL.$$.fragment),lxo=l(),Pfe=a("p"),ixo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dxo=l(),Sa=a("p"),cxo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),fxo=o("model_type"),mxo=o(` property of the config object (either
passed as an argument or loaded from `),Ife=a("code"),gxo=o("pretrained_model_name_or_path"),hxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),pxo=o("pretrained_model_name_or_path"),_xo=o(":"),uxo=l(),_e=a("ul"),L2=a("li"),qfe=a("strong"),bxo=o("bart"),vxo=o(" \u2014 "),aG=a("a"),Fxo=o("BartForConditionalGeneration"),Txo=o(" (BART model)"),Mxo=l(),x2=a("li"),jfe=a("strong"),Exo=o("bigbird_pegasus"),Cxo=o(" \u2014 "),nG=a("a"),wxo=o("BigBirdPegasusForConditionalGeneration"),Axo=o(" (BigBird-Pegasus model)"),yxo=l(),$2=a("li"),Dfe=a("strong"),Lxo=o("blenderbot"),xxo=o(" \u2014 "),sG=a("a"),$xo=o("BlenderbotForConditionalGeneration"),kxo=o(" (Blenderbot model)"),Sxo=l(),k2=a("li"),Gfe=a("strong"),Rxo=o("blenderbot-small"),Pxo=o(" \u2014 "),lG=a("a"),Bxo=o("BlenderbotSmallForConditionalGeneration"),Ixo=o(" (BlenderbotSmall model)"),Nxo=l(),S2=a("li"),Ofe=a("strong"),qxo=o("encoder-decoder"),jxo=o(" \u2014 "),iG=a("a"),Dxo=o("EncoderDecoderModel"),Gxo=o(" (Encoder decoder model)"),Oxo=l(),R2=a("li"),Vfe=a("strong"),Vxo=o("fsmt"),Xxo=o(" \u2014 "),dG=a("a"),zxo=o("FSMTForConditionalGeneration"),Wxo=o(" (FairSeq Machine-Translation model)"),Qxo=l(),P2=a("li"),Xfe=a("strong"),Hxo=o("led"),Uxo=o(" \u2014 "),cG=a("a"),Jxo=o("LEDForConditionalGeneration"),Yxo=o(" (LED model)"),Kxo=l(),B2=a("li"),zfe=a("strong"),Zxo=o("m2m_100"),e$o=o(" \u2014 "),fG=a("a"),o$o=o("M2M100ForConditionalGeneration"),r$o=o(" (M2M100 model)"),t$o=l(),I2=a("li"),Wfe=a("strong"),a$o=o("marian"),n$o=o(" \u2014 "),mG=a("a"),s$o=o("MarianMTModel"),l$o=o(" (Marian model)"),i$o=l(),N2=a("li"),Qfe=a("strong"),d$o=o("mbart"),c$o=o(" \u2014 "),gG=a("a"),f$o=o("MBartForConditionalGeneration"),m$o=o(" (mBART model)"),g$o=l(),q2=a("li"),Hfe=a("strong"),h$o=o("mt5"),p$o=o(" \u2014 "),hG=a("a"),_$o=o("MT5ForConditionalGeneration"),u$o=o(" (MT5 model)"),b$o=l(),j2=a("li"),Ufe=a("strong"),v$o=o("pegasus"),F$o=o(" \u2014 "),pG=a("a"),T$o=o("PegasusForConditionalGeneration"),M$o=o(" (Pegasus model)"),E$o=l(),D2=a("li"),Jfe=a("strong"),C$o=o("plbart"),w$o=o(" \u2014 "),_G=a("a"),A$o=o("PLBartForConditionalGeneration"),y$o=o(" (PLBart model)"),L$o=l(),G2=a("li"),Yfe=a("strong"),x$o=o("prophetnet"),$$o=o(" \u2014 "),uG=a("a"),k$o=o("ProphetNetForConditionalGeneration"),S$o=o(" (ProphetNet model)"),R$o=l(),O2=a("li"),Kfe=a("strong"),P$o=o("t5"),B$o=o(" \u2014 "),bG=a("a"),I$o=o("T5ForConditionalGeneration"),N$o=o(" (T5 model)"),q$o=l(),V2=a("li"),Zfe=a("strong"),j$o=o("xlm-prophetnet"),D$o=o(" \u2014 "),vG=a("a"),G$o=o("XLMProphetNetForConditionalGeneration"),O$o=o(" (XLM-ProphetNet model)"),V$o=l(),X2=a("p"),X$o=o("The model is set in evaluation mode by default using "),eme=a("code"),z$o=o("model.eval()"),W$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),Q$o=o("model.train()"),H$o=l(),F(z2.$$.fragment),aje=l(),Gi=a("h2"),W2=a("a"),rme=a("span"),F(RL.$$.fragment),U$o=l(),tme=a("span"),J$o=o("AutoModelForSequenceClassification"),nje=l(),Ro=a("div"),F(PL.$$.fragment),Y$o=l(),Oi=a("p"),K$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=a("a"),Z$o=o("from_pretrained()"),eko=o(" class method or the "),TG=a("a"),oko=o("from_config()"),rko=o(` class
method.`),tko=l(),BL=a("p"),ako=o("This class cannot be instantiated directly using "),ame=a("code"),nko=o("__init__()"),sko=o(" (throws an error)."),lko=l(),it=a("div"),F(IL.$$.fragment),iko=l(),nme=a("p"),dko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cko=l(),Vi=a("p"),fko=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),mko=o("not"),gko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),hko=o("from_pretrained()"),pko=o(" to load the model weights."),_ko=l(),F(Q2.$$.fragment),uko=l(),oo=a("div"),F(NL.$$.fragment),bko=l(),lme=a("p"),vko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fko=l(),Ra=a("p"),Tko=o("The model class to instantiate is selected based on the "),ime=a("code"),Mko=o("model_type"),Eko=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),Cko=o("pretrained_model_name_or_path"),wko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),Ako=o("pretrained_model_name_or_path"),yko=o(":"),Lko=l(),N=a("ul"),H2=a("li"),fme=a("strong"),xko=o("albert"),$ko=o(" \u2014 "),EG=a("a"),kko=o("AlbertForSequenceClassification"),Sko=o(" (ALBERT model)"),Rko=l(),U2=a("li"),mme=a("strong"),Pko=o("bart"),Bko=o(" \u2014 "),CG=a("a"),Iko=o("BartForSequenceClassification"),Nko=o(" (BART model)"),qko=l(),J2=a("li"),gme=a("strong"),jko=o("bert"),Dko=o(" \u2014 "),wG=a("a"),Gko=o("BertForSequenceClassification"),Oko=o(" (BERT model)"),Vko=l(),Y2=a("li"),hme=a("strong"),Xko=o("big_bird"),zko=o(" \u2014 "),AG=a("a"),Wko=o("BigBirdForSequenceClassification"),Qko=o(" (BigBird model)"),Hko=l(),K2=a("li"),pme=a("strong"),Uko=o("bigbird_pegasus"),Jko=o(" \u2014 "),yG=a("a"),Yko=o("BigBirdPegasusForSequenceClassification"),Kko=o(" (BigBird-Pegasus model)"),Zko=l(),Z2=a("li"),_me=a("strong"),eSo=o("camembert"),oSo=o(" \u2014 "),LG=a("a"),rSo=o("CamembertForSequenceClassification"),tSo=o(" (CamemBERT model)"),aSo=l(),ev=a("li"),ume=a("strong"),nSo=o("canine"),sSo=o(" \u2014 "),xG=a("a"),lSo=o("CanineForSequenceClassification"),iSo=o(" (CANINE model)"),dSo=l(),ov=a("li"),bme=a("strong"),cSo=o("convbert"),fSo=o(" \u2014 "),$G=a("a"),mSo=o("ConvBertForSequenceClassification"),gSo=o(" (ConvBERT model)"),hSo=l(),rv=a("li"),vme=a("strong"),pSo=o("ctrl"),_So=o(" \u2014 "),kG=a("a"),uSo=o("CTRLForSequenceClassification"),bSo=o(" (CTRL model)"),vSo=l(),tv=a("li"),Fme=a("strong"),FSo=o("data2vec-text"),TSo=o(" \u2014 "),SG=a("a"),MSo=o("Data2VecTextForSequenceClassification"),ESo=o(" (Data2VecText model)"),CSo=l(),av=a("li"),Tme=a("strong"),wSo=o("deberta"),ASo=o(" \u2014 "),RG=a("a"),ySo=o("DebertaForSequenceClassification"),LSo=o(" (DeBERTa model)"),xSo=l(),nv=a("li"),Mme=a("strong"),$So=o("deberta-v2"),kSo=o(" \u2014 "),PG=a("a"),SSo=o("DebertaV2ForSequenceClassification"),RSo=o(" (DeBERTa-v2 model)"),PSo=l(),sv=a("li"),Eme=a("strong"),BSo=o("distilbert"),ISo=o(" \u2014 "),BG=a("a"),NSo=o("DistilBertForSequenceClassification"),qSo=o(" (DistilBERT model)"),jSo=l(),lv=a("li"),Cme=a("strong"),DSo=o("electra"),GSo=o(" \u2014 "),IG=a("a"),OSo=o("ElectraForSequenceClassification"),VSo=o(" (ELECTRA model)"),XSo=l(),iv=a("li"),wme=a("strong"),zSo=o("flaubert"),WSo=o(" \u2014 "),NG=a("a"),QSo=o("FlaubertForSequenceClassification"),HSo=o(" (FlauBERT model)"),USo=l(),dv=a("li"),Ame=a("strong"),JSo=o("fnet"),YSo=o(" \u2014 "),qG=a("a"),KSo=o("FNetForSequenceClassification"),ZSo=o(" (FNet model)"),eRo=l(),cv=a("li"),yme=a("strong"),oRo=o("funnel"),rRo=o(" \u2014 "),jG=a("a"),tRo=o("FunnelForSequenceClassification"),aRo=o(" (Funnel Transformer model)"),nRo=l(),fv=a("li"),Lme=a("strong"),sRo=o("gpt2"),lRo=o(" \u2014 "),DG=a("a"),iRo=o("GPT2ForSequenceClassification"),dRo=o(" (OpenAI GPT-2 model)"),cRo=l(),mv=a("li"),xme=a("strong"),fRo=o("gpt_neo"),mRo=o(" \u2014 "),GG=a("a"),gRo=o("GPTNeoForSequenceClassification"),hRo=o(" (GPT Neo model)"),pRo=l(),gv=a("li"),$me=a("strong"),_Ro=o("gptj"),uRo=o(" \u2014 "),OG=a("a"),bRo=o("GPTJForSequenceClassification"),vRo=o(" (GPT-J model)"),FRo=l(),hv=a("li"),kme=a("strong"),TRo=o("ibert"),MRo=o(" \u2014 "),VG=a("a"),ERo=o("IBertForSequenceClassification"),CRo=o(" (I-BERT model)"),wRo=l(),pv=a("li"),Sme=a("strong"),ARo=o("layoutlm"),yRo=o(" \u2014 "),XG=a("a"),LRo=o("LayoutLMForSequenceClassification"),xRo=o(" (LayoutLM model)"),$Ro=l(),_v=a("li"),Rme=a("strong"),kRo=o("layoutlmv2"),SRo=o(" \u2014 "),zG=a("a"),RRo=o("LayoutLMv2ForSequenceClassification"),PRo=o(" (LayoutLMv2 model)"),BRo=l(),uv=a("li"),Pme=a("strong"),IRo=o("layoutlmv3"),NRo=o(" \u2014 "),WG=a("a"),qRo=o("LayoutLMv3ForSequenceClassification"),jRo=o(" (LayoutLMv3 model)"),DRo=l(),bv=a("li"),Bme=a("strong"),GRo=o("led"),ORo=o(" \u2014 "),QG=a("a"),VRo=o("LEDForSequenceClassification"),XRo=o(" (LED model)"),zRo=l(),vv=a("li"),Ime=a("strong"),WRo=o("longformer"),QRo=o(" \u2014 "),HG=a("a"),HRo=o("LongformerForSequenceClassification"),URo=o(" (Longformer model)"),JRo=l(),Fv=a("li"),Nme=a("strong"),YRo=o("mbart"),KRo=o(" \u2014 "),UG=a("a"),ZRo=o("MBartForSequenceClassification"),ePo=o(" (mBART model)"),oPo=l(),Tv=a("li"),qme=a("strong"),rPo=o("megatron-bert"),tPo=o(" \u2014 "),JG=a("a"),aPo=o("MegatronBertForSequenceClassification"),nPo=o(" (Megatron-BERT model)"),sPo=l(),Mv=a("li"),jme=a("strong"),lPo=o("mobilebert"),iPo=o(" \u2014 "),YG=a("a"),dPo=o("MobileBertForSequenceClassification"),cPo=o(" (MobileBERT model)"),fPo=l(),Ev=a("li"),Dme=a("strong"),mPo=o("mpnet"),gPo=o(" \u2014 "),KG=a("a"),hPo=o("MPNetForSequenceClassification"),pPo=o(" (MPNet model)"),_Po=l(),Cv=a("li"),Gme=a("strong"),uPo=o("nystromformer"),bPo=o(" \u2014 "),ZG=a("a"),vPo=o("NystromformerForSequenceClassification"),FPo=o(" (Nystr\xF6mformer model)"),TPo=l(),wv=a("li"),Ome=a("strong"),MPo=o("openai-gpt"),EPo=o(" \u2014 "),eO=a("a"),CPo=o("OpenAIGPTForSequenceClassification"),wPo=o(" (OpenAI GPT model)"),APo=l(),Av=a("li"),Vme=a("strong"),yPo=o("perceiver"),LPo=o(" \u2014 "),oO=a("a"),xPo=o("PerceiverForSequenceClassification"),$Po=o(" (Perceiver model)"),kPo=l(),yv=a("li"),Xme=a("strong"),SPo=o("plbart"),RPo=o(" \u2014 "),rO=a("a"),PPo=o("PLBartForSequenceClassification"),BPo=o(" (PLBart model)"),IPo=l(),Lv=a("li"),zme=a("strong"),NPo=o("qdqbert"),qPo=o(" \u2014 "),tO=a("a"),jPo=o("QDQBertForSequenceClassification"),DPo=o(" (QDQBert model)"),GPo=l(),xv=a("li"),Wme=a("strong"),OPo=o("reformer"),VPo=o(" \u2014 "),aO=a("a"),XPo=o("ReformerForSequenceClassification"),zPo=o(" (Reformer model)"),WPo=l(),$v=a("li"),Qme=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),nO=a("a"),UPo=o("RemBertForSequenceClassification"),JPo=o(" (RemBERT model)"),YPo=l(),kv=a("li"),Hme=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),sO=a("a"),eBo=o("RobertaForSequenceClassification"),oBo=o(" (RoBERTa model)"),rBo=l(),Sv=a("li"),Ume=a("strong"),tBo=o("roformer"),aBo=o(" \u2014 "),lO=a("a"),nBo=o("RoFormerForSequenceClassification"),sBo=o(" (RoFormer model)"),lBo=l(),Rv=a("li"),Jme=a("strong"),iBo=o("squeezebert"),dBo=o(" \u2014 "),iO=a("a"),cBo=o("SqueezeBertForSequenceClassification"),fBo=o(" (SqueezeBERT model)"),mBo=l(),Pv=a("li"),Yme=a("strong"),gBo=o("tapas"),hBo=o(" \u2014 "),dO=a("a"),pBo=o("TapasForSequenceClassification"),_Bo=o(" (TAPAS model)"),uBo=l(),Bv=a("li"),Kme=a("strong"),bBo=o("transfo-xl"),vBo=o(" \u2014 "),cO=a("a"),FBo=o("TransfoXLForSequenceClassification"),TBo=o(" (Transformer-XL model)"),MBo=l(),Iv=a("li"),Zme=a("strong"),EBo=o("xlm"),CBo=o(" \u2014 "),fO=a("a"),wBo=o("XLMForSequenceClassification"),ABo=o(" (XLM model)"),yBo=l(),Nv=a("li"),ege=a("strong"),LBo=o("xlm-roberta"),xBo=o(" \u2014 "),mO=a("a"),$Bo=o("XLMRobertaForSequenceClassification"),kBo=o(" (XLM-RoBERTa model)"),SBo=l(),qv=a("li"),oge=a("strong"),RBo=o("xlm-roberta-xl"),PBo=o(" \u2014 "),gO=a("a"),BBo=o("XLMRobertaXLForSequenceClassification"),IBo=o(" (XLM-RoBERTa-XL model)"),NBo=l(),jv=a("li"),rge=a("strong"),qBo=o("xlnet"),jBo=o(" \u2014 "),hO=a("a"),DBo=o("XLNetForSequenceClassification"),GBo=o(" (XLNet model)"),OBo=l(),Dv=a("li"),tge=a("strong"),VBo=o("yoso"),XBo=o(" \u2014 "),pO=a("a"),zBo=o("YosoForSequenceClassification"),WBo=o(" (YOSO model)"),QBo=l(),Gv=a("p"),HBo=o("The model is set in evaluation mode by default using "),age=a("code"),UBo=o("model.eval()"),JBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),YBo=o("model.train()"),KBo=l(),F(Ov.$$.fragment),sje=l(),Xi=a("h2"),Vv=a("a"),sge=a("span"),F(qL.$$.fragment),ZBo=l(),lge=a("span"),eIo=o("AutoModelForMultipleChoice"),lje=l(),Po=a("div"),F(jL.$$.fragment),oIo=l(),zi=a("p"),rIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=a("a"),tIo=o("from_pretrained()"),aIo=o(" class method or the "),uO=a("a"),nIo=o("from_config()"),sIo=o(` class
method.`),lIo=l(),DL=a("p"),iIo=o("This class cannot be instantiated directly using "),ige=a("code"),dIo=o("__init__()"),cIo=o(" (throws an error)."),fIo=l(),dt=a("div"),F(GL.$$.fragment),mIo=l(),dge=a("p"),gIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hIo=l(),Wi=a("p"),pIo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),_Io=o("not"),uIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),bIo=o("from_pretrained()"),vIo=o(" to load the model weights."),FIo=l(),F(Xv.$$.fragment),TIo=l(),ro=a("div"),F(OL.$$.fragment),MIo=l(),fge=a("p"),EIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CIo=l(),Pa=a("p"),wIo=o("The model class to instantiate is selected based on the "),mge=a("code"),AIo=o("model_type"),yIo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),LIo=o("pretrained_model_name_or_path"),xIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),$Io=o("pretrained_model_name_or_path"),kIo=o(":"),SIo=l(),K=a("ul"),zv=a("li"),pge=a("strong"),RIo=o("albert"),PIo=o(" \u2014 "),vO=a("a"),BIo=o("AlbertForMultipleChoice"),IIo=o(" (ALBERT model)"),NIo=l(),Wv=a("li"),_ge=a("strong"),qIo=o("bert"),jIo=o(" \u2014 "),FO=a("a"),DIo=o("BertForMultipleChoice"),GIo=o(" (BERT model)"),OIo=l(),Qv=a("li"),uge=a("strong"),VIo=o("big_bird"),XIo=o(" \u2014 "),TO=a("a"),zIo=o("BigBirdForMultipleChoice"),WIo=o(" (BigBird model)"),QIo=l(),Hv=a("li"),bge=a("strong"),HIo=o("camembert"),UIo=o(" \u2014 "),MO=a("a"),JIo=o("CamembertForMultipleChoice"),YIo=o(" (CamemBERT model)"),KIo=l(),Uv=a("li"),vge=a("strong"),ZIo=o("canine"),eNo=o(" \u2014 "),EO=a("a"),oNo=o("CanineForMultipleChoice"),rNo=o(" (CANINE model)"),tNo=l(),Jv=a("li"),Fge=a("strong"),aNo=o("convbert"),nNo=o(" \u2014 "),CO=a("a"),sNo=o("ConvBertForMultipleChoice"),lNo=o(" (ConvBERT model)"),iNo=l(),Yv=a("li"),Tge=a("strong"),dNo=o("data2vec-text"),cNo=o(" \u2014 "),wO=a("a"),fNo=o("Data2VecTextForMultipleChoice"),mNo=o(" (Data2VecText model)"),gNo=l(),Kv=a("li"),Mge=a("strong"),hNo=o("deberta-v2"),pNo=o(" \u2014 "),AO=a("a"),_No=o("DebertaV2ForMultipleChoice"),uNo=o(" (DeBERTa-v2 model)"),bNo=l(),Zv=a("li"),Ege=a("strong"),vNo=o("distilbert"),FNo=o(" \u2014 "),yO=a("a"),TNo=o("DistilBertForMultipleChoice"),MNo=o(" (DistilBERT model)"),ENo=l(),eF=a("li"),Cge=a("strong"),CNo=o("electra"),wNo=o(" \u2014 "),LO=a("a"),ANo=o("ElectraForMultipleChoice"),yNo=o(" (ELECTRA model)"),LNo=l(),oF=a("li"),wge=a("strong"),xNo=o("flaubert"),$No=o(" \u2014 "),xO=a("a"),kNo=o("FlaubertForMultipleChoice"),SNo=o(" (FlauBERT model)"),RNo=l(),rF=a("li"),Age=a("strong"),PNo=o("fnet"),BNo=o(" \u2014 "),$O=a("a"),INo=o("FNetForMultipleChoice"),NNo=o(" (FNet model)"),qNo=l(),tF=a("li"),yge=a("strong"),jNo=o("funnel"),DNo=o(" \u2014 "),kO=a("a"),GNo=o("FunnelForMultipleChoice"),ONo=o(" (Funnel Transformer model)"),VNo=l(),aF=a("li"),Lge=a("strong"),XNo=o("ibert"),zNo=o(" \u2014 "),SO=a("a"),WNo=o("IBertForMultipleChoice"),QNo=o(" (I-BERT model)"),HNo=l(),nF=a("li"),xge=a("strong"),UNo=o("longformer"),JNo=o(" \u2014 "),RO=a("a"),YNo=o("LongformerForMultipleChoice"),KNo=o(" (Longformer model)"),ZNo=l(),sF=a("li"),$ge=a("strong"),eqo=o("megatron-bert"),oqo=o(" \u2014 "),PO=a("a"),rqo=o("MegatronBertForMultipleChoice"),tqo=o(" (Megatron-BERT model)"),aqo=l(),lF=a("li"),kge=a("strong"),nqo=o("mobilebert"),sqo=o(" \u2014 "),BO=a("a"),lqo=o("MobileBertForMultipleChoice"),iqo=o(" (MobileBERT model)"),dqo=l(),iF=a("li"),Sge=a("strong"),cqo=o("mpnet"),fqo=o(" \u2014 "),IO=a("a"),mqo=o("MPNetForMultipleChoice"),gqo=o(" (MPNet model)"),hqo=l(),dF=a("li"),Rge=a("strong"),pqo=o("nystromformer"),_qo=o(" \u2014 "),NO=a("a"),uqo=o("NystromformerForMultipleChoice"),bqo=o(" (Nystr\xF6mformer model)"),vqo=l(),cF=a("li"),Pge=a("strong"),Fqo=o("qdqbert"),Tqo=o(" \u2014 "),qO=a("a"),Mqo=o("QDQBertForMultipleChoice"),Eqo=o(" (QDQBert model)"),Cqo=l(),fF=a("li"),Bge=a("strong"),wqo=o("rembert"),Aqo=o(" \u2014 "),jO=a("a"),yqo=o("RemBertForMultipleChoice"),Lqo=o(" (RemBERT model)"),xqo=l(),mF=a("li"),Ige=a("strong"),$qo=o("roberta"),kqo=o(" \u2014 "),DO=a("a"),Sqo=o("RobertaForMultipleChoice"),Rqo=o(" (RoBERTa model)"),Pqo=l(),gF=a("li"),Nge=a("strong"),Bqo=o("roformer"),Iqo=o(" \u2014 "),GO=a("a"),Nqo=o("RoFormerForMultipleChoice"),qqo=o(" (RoFormer model)"),jqo=l(),hF=a("li"),qge=a("strong"),Dqo=o("squeezebert"),Gqo=o(" \u2014 "),OO=a("a"),Oqo=o("SqueezeBertForMultipleChoice"),Vqo=o(" (SqueezeBERT model)"),Xqo=l(),pF=a("li"),jge=a("strong"),zqo=o("xlm"),Wqo=o(" \u2014 "),VO=a("a"),Qqo=o("XLMForMultipleChoice"),Hqo=o(" (XLM model)"),Uqo=l(),_F=a("li"),Dge=a("strong"),Jqo=o("xlm-roberta"),Yqo=o(" \u2014 "),XO=a("a"),Kqo=o("XLMRobertaForMultipleChoice"),Zqo=o(" (XLM-RoBERTa model)"),ejo=l(),uF=a("li"),Gge=a("strong"),ojo=o("xlm-roberta-xl"),rjo=o(" \u2014 "),zO=a("a"),tjo=o("XLMRobertaXLForMultipleChoice"),ajo=o(" (XLM-RoBERTa-XL model)"),njo=l(),bF=a("li"),Oge=a("strong"),sjo=o("xlnet"),ljo=o(" \u2014 "),WO=a("a"),ijo=o("XLNetForMultipleChoice"),djo=o(" (XLNet model)"),cjo=l(),vF=a("li"),Vge=a("strong"),fjo=o("yoso"),mjo=o(" \u2014 "),QO=a("a"),gjo=o("YosoForMultipleChoice"),hjo=o(" (YOSO model)"),pjo=l(),FF=a("p"),_jo=o("The model is set in evaluation mode by default using "),Xge=a("code"),ujo=o("model.eval()"),bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),vjo=o("model.train()"),Fjo=l(),F(TF.$$.fragment),ije=l(),Qi=a("h2"),MF=a("a"),Wge=a("span"),F(VL.$$.fragment),Tjo=l(),Qge=a("span"),Mjo=o("AutoModelForNextSentencePrediction"),dje=l(),Bo=a("div"),F(XL.$$.fragment),Ejo=l(),Hi=a("p"),Cjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=a("a"),wjo=o("from_pretrained()"),Ajo=o(" class method or the "),UO=a("a"),yjo=o("from_config()"),Ljo=o(` class
method.`),xjo=l(),zL=a("p"),$jo=o("This class cannot be instantiated directly using "),Hge=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),ct=a("div"),F(WL.$$.fragment),Pjo=l(),Uge=a("p"),Bjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ijo=l(),Ui=a("p"),Njo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),qjo=o("not"),jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),Djo=o("from_pretrained()"),Gjo=o(" to load the model weights."),Ojo=l(),F(EF.$$.fragment),Vjo=l(),to=a("div"),F(QL.$$.fragment),Xjo=l(),Yge=a("p"),zjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wjo=l(),Ba=a("p"),Qjo=o("The model class to instantiate is selected based on the "),Kge=a("code"),Hjo=o("model_type"),Ujo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),Kjo=o("pretrained_model_name_or_path"),Zjo=o(":"),eDo=l(),Yr=a("ul"),CF=a("li"),ohe=a("strong"),oDo=o("bert"),rDo=o(" \u2014 "),YO=a("a"),tDo=o("BertForNextSentencePrediction"),aDo=o(" (BERT model)"),nDo=l(),wF=a("li"),rhe=a("strong"),sDo=o("fnet"),lDo=o(" \u2014 "),KO=a("a"),iDo=o("FNetForNextSentencePrediction"),dDo=o(" (FNet model)"),cDo=l(),AF=a("li"),the=a("strong"),fDo=o("megatron-bert"),mDo=o(" \u2014 "),ZO=a("a"),gDo=o("MegatronBertForNextSentencePrediction"),hDo=o(" (Megatron-BERT model)"),pDo=l(),yF=a("li"),ahe=a("strong"),_Do=o("mobilebert"),uDo=o(" \u2014 "),eV=a("a"),bDo=o("MobileBertForNextSentencePrediction"),vDo=o(" (MobileBERT model)"),FDo=l(),LF=a("li"),nhe=a("strong"),TDo=o("qdqbert"),MDo=o(" \u2014 "),oV=a("a"),EDo=o("QDQBertForNextSentencePrediction"),CDo=o(" (QDQBert model)"),wDo=l(),xF=a("p"),ADo=o("The model is set in evaluation mode by default using "),she=a("code"),yDo=o("model.eval()"),LDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),xDo=o("model.train()"),$Do=l(),F($F.$$.fragment),cje=l(),Ji=a("h2"),kF=a("a"),ihe=a("span"),F(HL.$$.fragment),kDo=l(),dhe=a("span"),SDo=o("AutoModelForTokenClassification"),fje=l(),Io=a("div"),F(UL.$$.fragment),RDo=l(),Yi=a("p"),PDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=a("a"),BDo=o("from_pretrained()"),IDo=o(" class method or the "),tV=a("a"),NDo=o("from_config()"),qDo=o(` class
method.`),jDo=l(),JL=a("p"),DDo=o("This class cannot be instantiated directly using "),che=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),ft=a("div"),F(YL.$$.fragment),XDo=l(),fhe=a("p"),zDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WDo=l(),Ki=a("p"),QDo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),F(SF.$$.fragment),ZDo=l(),ao=a("div"),F(KL.$$.fragment),eGo=l(),ghe=a("p"),oGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rGo=l(),Ia=a("p"),tGo=o("The model class to instantiate is selected based on the "),hhe=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),U=a("ul"),RF=a("li"),uhe=a("strong"),fGo=o("albert"),mGo=o(" \u2014 "),nV=a("a"),gGo=o("AlbertForTokenClassification"),hGo=o(" (ALBERT model)"),pGo=l(),PF=a("li"),bhe=a("strong"),_Go=o("bert"),uGo=o(" \u2014 "),sV=a("a"),bGo=o("BertForTokenClassification"),vGo=o(" (BERT model)"),FGo=l(),BF=a("li"),vhe=a("strong"),TGo=o("big_bird"),MGo=o(" \u2014 "),lV=a("a"),EGo=o("BigBirdForTokenClassification"),CGo=o(" (BigBird model)"),wGo=l(),IF=a("li"),Fhe=a("strong"),AGo=o("camembert"),yGo=o(" \u2014 "),iV=a("a"),LGo=o("CamembertForTokenClassification"),xGo=o(" (CamemBERT model)"),$Go=l(),NF=a("li"),The=a("strong"),kGo=o("canine"),SGo=o(" \u2014 "),dV=a("a"),RGo=o("CanineForTokenClassification"),PGo=o(" (CANINE model)"),BGo=l(),qF=a("li"),Mhe=a("strong"),IGo=o("convbert"),NGo=o(" \u2014 "),cV=a("a"),qGo=o("ConvBertForTokenClassification"),jGo=o(" (ConvBERT model)"),DGo=l(),jF=a("li"),Ehe=a("strong"),GGo=o("data2vec-text"),OGo=o(" \u2014 "),fV=a("a"),VGo=o("Data2VecTextForTokenClassification"),XGo=o(" (Data2VecText model)"),zGo=l(),DF=a("li"),Che=a("strong"),WGo=o("deberta"),QGo=o(" \u2014 "),mV=a("a"),HGo=o("DebertaForTokenClassification"),UGo=o(" (DeBERTa model)"),JGo=l(),GF=a("li"),whe=a("strong"),YGo=o("deberta-v2"),KGo=o(" \u2014 "),gV=a("a"),ZGo=o("DebertaV2ForTokenClassification"),eOo=o(" (DeBERTa-v2 model)"),oOo=l(),OF=a("li"),Ahe=a("strong"),rOo=o("distilbert"),tOo=o(" \u2014 "),hV=a("a"),aOo=o("DistilBertForTokenClassification"),nOo=o(" (DistilBERT model)"),sOo=l(),VF=a("li"),yhe=a("strong"),lOo=o("electra"),iOo=o(" \u2014 "),pV=a("a"),dOo=o("ElectraForTokenClassification"),cOo=o(" (ELECTRA model)"),fOo=l(),XF=a("li"),Lhe=a("strong"),mOo=o("flaubert"),gOo=o(" \u2014 "),_V=a("a"),hOo=o("FlaubertForTokenClassification"),pOo=o(" (FlauBERT model)"),_Oo=l(),zF=a("li"),xhe=a("strong"),uOo=o("fnet"),bOo=o(" \u2014 "),uV=a("a"),vOo=o("FNetForTokenClassification"),FOo=o(" (FNet model)"),TOo=l(),WF=a("li"),$he=a("strong"),MOo=o("funnel"),EOo=o(" \u2014 "),bV=a("a"),COo=o("FunnelForTokenClassification"),wOo=o(" (Funnel Transformer model)"),AOo=l(),QF=a("li"),khe=a("strong"),yOo=o("gpt2"),LOo=o(" \u2014 "),vV=a("a"),xOo=o("GPT2ForTokenClassification"),$Oo=o(" (OpenAI GPT-2 model)"),kOo=l(),HF=a("li"),She=a("strong"),SOo=o("ibert"),ROo=o(" \u2014 "),FV=a("a"),POo=o("IBertForTokenClassification"),BOo=o(" (I-BERT model)"),IOo=l(),UF=a("li"),Rhe=a("strong"),NOo=o("layoutlm"),qOo=o(" \u2014 "),TV=a("a"),jOo=o("LayoutLMForTokenClassification"),DOo=o(" (LayoutLM model)"),GOo=l(),JF=a("li"),Phe=a("strong"),OOo=o("layoutlmv2"),VOo=o(" \u2014 "),MV=a("a"),XOo=o("LayoutLMv2ForTokenClassification"),zOo=o(" (LayoutLMv2 model)"),WOo=l(),YF=a("li"),Bhe=a("strong"),QOo=o("layoutlmv3"),HOo=o(" \u2014 "),EV=a("a"),UOo=o("LayoutLMv3ForTokenClassification"),JOo=o(" (LayoutLMv3 model)"),YOo=l(),KF=a("li"),Ihe=a("strong"),KOo=o("longformer"),ZOo=o(" \u2014 "),CV=a("a"),eVo=o("LongformerForTokenClassification"),oVo=o(" (Longformer model)"),rVo=l(),ZF=a("li"),Nhe=a("strong"),tVo=o("megatron-bert"),aVo=o(" \u2014 "),wV=a("a"),nVo=o("MegatronBertForTokenClassification"),sVo=o(" (Megatron-BERT model)"),lVo=l(),e6=a("li"),qhe=a("strong"),iVo=o("mobilebert"),dVo=o(" \u2014 "),AV=a("a"),cVo=o("MobileBertForTokenClassification"),fVo=o(" (MobileBERT model)"),mVo=l(),o6=a("li"),jhe=a("strong"),gVo=o("mpnet"),hVo=o(" \u2014 "),yV=a("a"),pVo=o("MPNetForTokenClassification"),_Vo=o(" (MPNet model)"),uVo=l(),r6=a("li"),Dhe=a("strong"),bVo=o("nystromformer"),vVo=o(" \u2014 "),LV=a("a"),FVo=o("NystromformerForTokenClassification"),TVo=o(" (Nystr\xF6mformer model)"),MVo=l(),t6=a("li"),Ghe=a("strong"),EVo=o("qdqbert"),CVo=o(" \u2014 "),xV=a("a"),wVo=o("QDQBertForTokenClassification"),AVo=o(" (QDQBert model)"),yVo=l(),a6=a("li"),Ohe=a("strong"),LVo=o("rembert"),xVo=o(" \u2014 "),$V=a("a"),$Vo=o("RemBertForTokenClassification"),kVo=o(" (RemBERT model)"),SVo=l(),n6=a("li"),Vhe=a("strong"),RVo=o("roberta"),PVo=o(" \u2014 "),kV=a("a"),BVo=o("RobertaForTokenClassification"),IVo=o(" (RoBERTa model)"),NVo=l(),s6=a("li"),Xhe=a("strong"),qVo=o("roformer"),jVo=o(" \u2014 "),SV=a("a"),DVo=o("RoFormerForTokenClassification"),GVo=o(" (RoFormer model)"),OVo=l(),l6=a("li"),zhe=a("strong"),VVo=o("squeezebert"),XVo=o(" \u2014 "),RV=a("a"),zVo=o("SqueezeBertForTokenClassification"),WVo=o(" (SqueezeBERT model)"),QVo=l(),i6=a("li"),Whe=a("strong"),HVo=o("xlm"),UVo=o(" \u2014 "),PV=a("a"),JVo=o("XLMForTokenClassification"),YVo=o(" (XLM model)"),KVo=l(),d6=a("li"),Qhe=a("strong"),ZVo=o("xlm-roberta"),eXo=o(" \u2014 "),BV=a("a"),oXo=o("XLMRobertaForTokenClassification"),rXo=o(" (XLM-RoBERTa model)"),tXo=l(),c6=a("li"),Hhe=a("strong"),aXo=o("xlm-roberta-xl"),nXo=o(" \u2014 "),IV=a("a"),sXo=o("XLMRobertaXLForTokenClassification"),lXo=o(" (XLM-RoBERTa-XL model)"),iXo=l(),f6=a("li"),Uhe=a("strong"),dXo=o("xlnet"),cXo=o(" \u2014 "),NV=a("a"),fXo=o("XLNetForTokenClassification"),mXo=o(" (XLNet model)"),gXo=l(),m6=a("li"),Jhe=a("strong"),hXo=o("yoso"),pXo=o(" \u2014 "),qV=a("a"),_Xo=o("YosoForTokenClassification"),uXo=o(" (YOSO model)"),bXo=l(),g6=a("p"),vXo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),FXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),MXo=o("model.train()"),EXo=l(),F(h6.$$.fragment),mje=l(),Zi=a("h2"),p6=a("a"),Zhe=a("span"),F(ZL.$$.fragment),CXo=l(),epe=a("span"),wXo=o("AutoModelForQuestionAnswering"),gje=l(),No=a("div"),F(e8.$$.fragment),AXo=l(),ed=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=a("a"),LXo=o("from_pretrained()"),xXo=o(" class method or the "),DV=a("a"),$Xo=o("from_config()"),kXo=o(` class
method.`),SXo=l(),o8=a("p"),RXo=o("This class cannot be instantiated directly using "),ope=a("code"),PXo=o("__init__()"),BXo=o(" (throws an error)."),IXo=l(),mt=a("div"),F(r8.$$.fragment),NXo=l(),rpe=a("p"),qXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jXo=l(),od=a("p"),DXo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),GXo=o("not"),OXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),VXo=o("from_pretrained()"),XXo=o(" to load the model weights."),zXo=l(),F(_6.$$.fragment),WXo=l(),no=a("div"),F(t8.$$.fragment),QXo=l(),ape=a("p"),HXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UXo=l(),Na=a("p"),JXo=o("The model class to instantiate is selected based on the "),npe=a("code"),YXo=o("model_type"),KXo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(":"),tzo=l(),V=a("ul"),u6=a("li"),ipe=a("strong"),azo=o("albert"),nzo=o(" \u2014 "),OV=a("a"),szo=o("AlbertForQuestionAnswering"),lzo=o(" (ALBERT model)"),izo=l(),b6=a("li"),dpe=a("strong"),dzo=o("bart"),czo=o(" \u2014 "),VV=a("a"),fzo=o("BartForQuestionAnswering"),mzo=o(" (BART model)"),gzo=l(),v6=a("li"),cpe=a("strong"),hzo=o("bert"),pzo=o(" \u2014 "),XV=a("a"),_zo=o("BertForQuestionAnswering"),uzo=o(" (BERT model)"),bzo=l(),F6=a("li"),fpe=a("strong"),vzo=o("big_bird"),Fzo=o(" \u2014 "),zV=a("a"),Tzo=o("BigBirdForQuestionAnswering"),Mzo=o(" (BigBird model)"),Ezo=l(),T6=a("li"),mpe=a("strong"),Czo=o("bigbird_pegasus"),wzo=o(" \u2014 "),WV=a("a"),Azo=o("BigBirdPegasusForQuestionAnswering"),yzo=o(" (BigBird-Pegasus model)"),Lzo=l(),M6=a("li"),gpe=a("strong"),xzo=o("camembert"),$zo=o(" \u2014 "),QV=a("a"),kzo=o("CamembertForQuestionAnswering"),Szo=o(" (CamemBERT model)"),Rzo=l(),E6=a("li"),hpe=a("strong"),Pzo=o("canine"),Bzo=o(" \u2014 "),HV=a("a"),Izo=o("CanineForQuestionAnswering"),Nzo=o(" (CANINE model)"),qzo=l(),C6=a("li"),ppe=a("strong"),jzo=o("convbert"),Dzo=o(" \u2014 "),UV=a("a"),Gzo=o("ConvBertForQuestionAnswering"),Ozo=o(" (ConvBERT model)"),Vzo=l(),w6=a("li"),_pe=a("strong"),Xzo=o("data2vec-text"),zzo=o(" \u2014 "),JV=a("a"),Wzo=o("Data2VecTextForQuestionAnswering"),Qzo=o(" (Data2VecText model)"),Hzo=l(),A6=a("li"),upe=a("strong"),Uzo=o("deberta"),Jzo=o(" \u2014 "),YV=a("a"),Yzo=o("DebertaForQuestionAnswering"),Kzo=o(" (DeBERTa model)"),Zzo=l(),y6=a("li"),bpe=a("strong"),eWo=o("deberta-v2"),oWo=o(" \u2014 "),KV=a("a"),rWo=o("DebertaV2ForQuestionAnswering"),tWo=o(" (DeBERTa-v2 model)"),aWo=l(),L6=a("li"),vpe=a("strong"),nWo=o("distilbert"),sWo=o(" \u2014 "),ZV=a("a"),lWo=o("DistilBertForQuestionAnswering"),iWo=o(" (DistilBERT model)"),dWo=l(),x6=a("li"),Fpe=a("strong"),cWo=o("electra"),fWo=o(" \u2014 "),eX=a("a"),mWo=o("ElectraForQuestionAnswering"),gWo=o(" (ELECTRA model)"),hWo=l(),$6=a("li"),Tpe=a("strong"),pWo=o("flaubert"),_Wo=o(" \u2014 "),oX=a("a"),uWo=o("FlaubertForQuestionAnsweringSimple"),bWo=o(" (FlauBERT model)"),vWo=l(),k6=a("li"),Mpe=a("strong"),FWo=o("fnet"),TWo=o(" \u2014 "),rX=a("a"),MWo=o("FNetForQuestionAnswering"),EWo=o(" (FNet model)"),CWo=l(),S6=a("li"),Epe=a("strong"),wWo=o("funnel"),AWo=o(" \u2014 "),tX=a("a"),yWo=o("FunnelForQuestionAnswering"),LWo=o(" (Funnel Transformer model)"),xWo=l(),R6=a("li"),Cpe=a("strong"),$Wo=o("gptj"),kWo=o(" \u2014 "),aX=a("a"),SWo=o("GPTJForQuestionAnswering"),RWo=o(" (GPT-J model)"),PWo=l(),P6=a("li"),wpe=a("strong"),BWo=o("ibert"),IWo=o(" \u2014 "),nX=a("a"),NWo=o("IBertForQuestionAnswering"),qWo=o(" (I-BERT model)"),jWo=l(),B6=a("li"),Ape=a("strong"),DWo=o("layoutlmv2"),GWo=o(" \u2014 "),sX=a("a"),OWo=o("LayoutLMv2ForQuestionAnswering"),VWo=o(" (LayoutLMv2 model)"),XWo=l(),I6=a("li"),ype=a("strong"),zWo=o("layoutlmv3"),WWo=o(" \u2014 "),lX=a("a"),QWo=o("LayoutLMv3ForQuestionAnswering"),HWo=o(" (LayoutLMv3 model)"),UWo=l(),N6=a("li"),Lpe=a("strong"),JWo=o("led"),YWo=o(" \u2014 "),iX=a("a"),KWo=o("LEDForQuestionAnswering"),ZWo=o(" (LED model)"),eQo=l(),q6=a("li"),xpe=a("strong"),oQo=o("longformer"),rQo=o(" \u2014 "),dX=a("a"),tQo=o("LongformerForQuestionAnswering"),aQo=o(" (Longformer model)"),nQo=l(),j6=a("li"),$pe=a("strong"),sQo=o("lxmert"),lQo=o(" \u2014 "),cX=a("a"),iQo=o("LxmertForQuestionAnswering"),dQo=o(" (LXMERT model)"),cQo=l(),D6=a("li"),kpe=a("strong"),fQo=o("mbart"),mQo=o(" \u2014 "),fX=a("a"),gQo=o("MBartForQuestionAnswering"),hQo=o(" (mBART model)"),pQo=l(),G6=a("li"),Spe=a("strong"),_Qo=o("megatron-bert"),uQo=o(" \u2014 "),mX=a("a"),bQo=o("MegatronBertForQuestionAnswering"),vQo=o(" (Megatron-BERT model)"),FQo=l(),O6=a("li"),Rpe=a("strong"),TQo=o("mobilebert"),MQo=o(" \u2014 "),gX=a("a"),EQo=o("MobileBertForQuestionAnswering"),CQo=o(" (MobileBERT model)"),wQo=l(),V6=a("li"),Ppe=a("strong"),AQo=o("mpnet"),yQo=o(" \u2014 "),hX=a("a"),LQo=o("MPNetForQuestionAnswering"),xQo=o(" (MPNet model)"),$Qo=l(),X6=a("li"),Bpe=a("strong"),kQo=o("nystromformer"),SQo=o(" \u2014 "),pX=a("a"),RQo=o("NystromformerForQuestionAnswering"),PQo=o(" (Nystr\xF6mformer model)"),BQo=l(),z6=a("li"),Ipe=a("strong"),IQo=o("qdqbert"),NQo=o(" \u2014 "),_X=a("a"),qQo=o("QDQBertForQuestionAnswering"),jQo=o(" (QDQBert model)"),DQo=l(),W6=a("li"),Npe=a("strong"),GQo=o("reformer"),OQo=o(" \u2014 "),uX=a("a"),VQo=o("ReformerForQuestionAnswering"),XQo=o(" (Reformer model)"),zQo=l(),Q6=a("li"),qpe=a("strong"),WQo=o("rembert"),QQo=o(" \u2014 "),bX=a("a"),HQo=o("RemBertForQuestionAnswering"),UQo=o(" (RemBERT model)"),JQo=l(),H6=a("li"),jpe=a("strong"),YQo=o("roberta"),KQo=o(" \u2014 "),vX=a("a"),ZQo=o("RobertaForQuestionAnswering"),eHo=o(" (RoBERTa model)"),oHo=l(),U6=a("li"),Dpe=a("strong"),rHo=o("roformer"),tHo=o(" \u2014 "),FX=a("a"),aHo=o("RoFormerForQuestionAnswering"),nHo=o(" (RoFormer model)"),sHo=l(),J6=a("li"),Gpe=a("strong"),lHo=o("splinter"),iHo=o(" \u2014 "),TX=a("a"),dHo=o("SplinterForQuestionAnswering"),cHo=o(" (Splinter model)"),fHo=l(),Y6=a("li"),Ope=a("strong"),mHo=o("squeezebert"),gHo=o(" \u2014 "),MX=a("a"),hHo=o("SqueezeBertForQuestionAnswering"),pHo=o(" (SqueezeBERT model)"),_Ho=l(),K6=a("li"),Vpe=a("strong"),uHo=o("xlm"),bHo=o(" \u2014 "),EX=a("a"),vHo=o("XLMForQuestionAnsweringSimple"),FHo=o(" (XLM model)"),THo=l(),Z6=a("li"),Xpe=a("strong"),MHo=o("xlm-roberta"),EHo=o(" \u2014 "),CX=a("a"),CHo=o("XLMRobertaForQuestionAnswering"),wHo=o(" (XLM-RoBERTa model)"),AHo=l(),e1=a("li"),zpe=a("strong"),yHo=o("xlm-roberta-xl"),LHo=o(" \u2014 "),wX=a("a"),xHo=o("XLMRobertaXLForQuestionAnswering"),$Ho=o(" (XLM-RoBERTa-XL model)"),kHo=l(),o1=a("li"),Wpe=a("strong"),SHo=o("xlnet"),RHo=o(" \u2014 "),AX=a("a"),PHo=o("XLNetForQuestionAnsweringSimple"),BHo=o(" (XLNet model)"),IHo=l(),r1=a("li"),Qpe=a("strong"),NHo=o("yoso"),qHo=o(" \u2014 "),yX=a("a"),jHo=o("YosoForQuestionAnswering"),DHo=o(" (YOSO model)"),GHo=l(),t1=a("p"),OHo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),zHo=o("model.train()"),WHo=l(),F(a1.$$.fragment),hje=l(),rd=a("h2"),n1=a("a"),Jpe=a("span"),F(a8.$$.fragment),QHo=l(),Ype=a("span"),HHo=o("AutoModelForTableQuestionAnswering"),pje=l(),qo=a("div"),F(n8.$$.fragment),UHo=l(),td=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),xX=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),s8=a("p"),rUo=o("This class cannot be instantiated directly using "),Kpe=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),gt=a("div"),F(l8.$$.fragment),sUo=l(),Zpe=a("p"),lUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iUo=l(),ad=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(s1.$$.fragment),pUo=l(),so=a("div"),F(i8.$$.fragment),_Uo=l(),o_e=a("p"),uUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bUo=l(),qa=a("p"),vUo=o("The model class to instantiate is selected based on the "),r_e=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),n_e=a("ul"),l1=a("li"),s_e=a("strong"),yUo=o("tapas"),LUo=o(" \u2014 "),kX=a("a"),xUo=o("TapasForQuestionAnswering"),$Uo=o(" (TAPAS model)"),kUo=l(),i1=a("p"),SUo=o("The model is set in evaluation mode by default using "),l_e=a("code"),RUo=o("model.eval()"),PUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),BUo=o("model.train()"),IUo=l(),F(d1.$$.fragment),_je=l(),nd=a("h2"),c1=a("a"),d_e=a("span"),F(d8.$$.fragment),NUo=l(),c_e=a("span"),qUo=o("AutoModelForImageClassification"),uje=l(),jo=a("div"),F(c8.$$.fragment),jUo=l(),sd=a("p"),DUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=a("a"),GUo=o("from_pretrained()"),OUo=o(" class method or the "),RX=a("a"),VUo=o("from_config()"),XUo=o(` class
method.`),zUo=l(),f8=a("p"),WUo=o("This class cannot be instantiated directly using "),f_e=a("code"),QUo=o("__init__()"),HUo=o(" (throws an error)."),UUo=l(),ht=a("div"),F(m8.$$.fragment),JUo=l(),m_e=a("p"),YUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KUo=l(),ld=a("p"),ZUo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),eJo=o("not"),oJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),rJo=o("from_pretrained()"),tJo=o(" to load the model weights."),aJo=l(),F(f1.$$.fragment),nJo=l(),lo=a("div"),F(g8.$$.fragment),sJo=l(),h_e=a("p"),lJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iJo=l(),ja=a("p"),dJo=o("The model class to instantiate is selected based on the "),p_e=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),ve=a("ul"),m1=a("li"),b_e=a("strong"),uJo=o("beit"),bJo=o(" \u2014 "),BX=a("a"),vJo=o("BeitForImageClassification"),FJo=o(" (BEiT model)"),TJo=l(),g1=a("li"),v_e=a("strong"),MJo=o("convnext"),EJo=o(" \u2014 "),IX=a("a"),CJo=o("ConvNextForImageClassification"),wJo=o(" (ConvNeXT model)"),AJo=l(),h1=a("li"),F_e=a("strong"),yJo=o("cvt"),LJo=o(" \u2014 "),NX=a("a"),xJo=o("CvtForImageClassification"),$Jo=o(" (CvT model)"),kJo=l(),p1=a("li"),T_e=a("strong"),SJo=o("data2vec-vision"),RJo=o(" \u2014 "),qX=a("a"),PJo=o("Data2VecVisionForImageClassification"),BJo=o(" (Data2VecVision model)"),IJo=l(),Bs=a("li"),M_e=a("strong"),NJo=o("deit"),qJo=o(" \u2014 "),jX=a("a"),jJo=o("DeiTForImageClassification"),DJo=o(" or "),DX=a("a"),GJo=o("DeiTForImageClassificationWithTeacher"),OJo=o(" (DeiT model)"),VJo=l(),_1=a("li"),E_e=a("strong"),XJo=o("imagegpt"),zJo=o(" \u2014 "),GX=a("a"),WJo=o("ImageGPTForImageClassification"),QJo=o(" (ImageGPT model)"),HJo=l(),Is=a("li"),C_e=a("strong"),UJo=o("levit"),JJo=o(" \u2014 "),OX=a("a"),YJo=o("LevitForImageClassification"),KJo=o(" or "),VX=a("a"),ZJo=o("LevitForImageClassificationWithTeacher"),eYo=o(" (LeViT model)"),oYo=l(),pt=a("li"),w_e=a("strong"),rYo=o("perceiver"),tYo=o(" \u2014 "),XX=a("a"),aYo=o("PerceiverForImageClassificationLearned"),nYo=o(" or "),zX=a("a"),sYo=o("PerceiverForImageClassificationFourier"),lYo=o(" or "),WX=a("a"),iYo=o("PerceiverForImageClassificationConvProcessing"),dYo=o(" (Perceiver model)"),cYo=l(),u1=a("li"),A_e=a("strong"),fYo=o("poolformer"),mYo=o(" \u2014 "),QX=a("a"),gYo=o("PoolFormerForImageClassification"),hYo=o(" (PoolFormer model)"),pYo=l(),b1=a("li"),y_e=a("strong"),_Yo=o("regnet"),uYo=o(" \u2014 "),HX=a("a"),bYo=o("RegNetForImageClassification"),vYo=o(" (RegNet model)"),FYo=l(),v1=a("li"),L_e=a("strong"),TYo=o("resnet"),MYo=o(" \u2014 "),UX=a("a"),EYo=o("ResNetForImageClassification"),CYo=o(" (ResNet model)"),wYo=l(),F1=a("li"),x_e=a("strong"),AYo=o("segformer"),yYo=o(" \u2014 "),JX=a("a"),LYo=o("SegformerForImageClassification"),xYo=o(" (SegFormer model)"),$Yo=l(),T1=a("li"),$_e=a("strong"),kYo=o("swin"),SYo=o(" \u2014 "),YX=a("a"),RYo=o("SwinForImageClassification"),PYo=o(" (Swin Transformer model)"),BYo=l(),M1=a("li"),k_e=a("strong"),IYo=o("van"),NYo=o(" \u2014 "),KX=a("a"),qYo=o("VanForImageClassification"),jYo=o(" (VAN model)"),DYo=l(),E1=a("li"),S_e=a("strong"),GYo=o("vit"),OYo=o(" \u2014 "),ZX=a("a"),VYo=o("ViTForImageClassification"),XYo=o(" (ViT model)"),zYo=l(),C1=a("p"),WYo=o("The model is set in evaluation mode by default using "),R_e=a("code"),QYo=o("model.eval()"),HYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),UYo=o("model.train()"),JYo=l(),F(w1.$$.fragment),bje=l(),id=a("h2"),A1=a("a"),B_e=a("span"),F(h8.$$.fragment),YYo=l(),I_e=a("span"),KYo=o("AutoModelForVision2Seq"),vje=l(),Do=a("div"),F(p8.$$.fragment),ZYo=l(),dd=a("p"),eKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ez=a("a"),oKo=o("from_pretrained()"),rKo=o(" class method or the "),oz=a("a"),tKo=o("from_config()"),aKo=o(` class
method.`),nKo=l(),_8=a("p"),sKo=o("This class cannot be instantiated directly using "),N_e=a("code"),lKo=o("__init__()"),iKo=o(" (throws an error)."),dKo=l(),_t=a("div"),F(u8.$$.fragment),cKo=l(),q_e=a("p"),fKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mKo=l(),cd=a("p"),gKo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),hKo=o("not"),pKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),_Ko=o("from_pretrained()"),uKo=o(" to load the model weights."),bKo=l(),F(y1.$$.fragment),vKo=l(),io=a("div"),F(b8.$$.fragment),FKo=l(),D_e=a("p"),TKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MKo=l(),Da=a("p"),EKo=o("The model class to instantiate is selected based on the "),G_e=a("code"),CKo=o("model_type"),wKo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),AKo=o("pretrained_model_name_or_path"),yKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),LKo=o("pretrained_model_name_or_path"),xKo=o(":"),$Ko=l(),X_e=a("ul"),L1=a("li"),z_e=a("strong"),kKo=o("vision-encoder-decoder"),SKo=o(" \u2014 "),tz=a("a"),RKo=o("VisionEncoderDecoderModel"),PKo=o(" (Vision Encoder decoder model)"),BKo=l(),x1=a("p"),IKo=o("The model is set in evaluation mode by default using "),W_e=a("code"),NKo=o("model.eval()"),qKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),jKo=o("model.train()"),DKo=l(),F($1.$$.fragment),Fje=l(),fd=a("h2"),k1=a("a"),H_e=a("span"),F(v8.$$.fragment),GKo=l(),U_e=a("span"),OKo=o("AutoModelForAudioClassification"),Tje=l(),Go=a("div"),F(F8.$$.fragment),VKo=l(),md=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),az=a("a"),zKo=o("from_pretrained()"),WKo=o(" class method or the "),nz=a("a"),QKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),T8=a("p"),JKo=o("This class cannot be instantiated directly using "),J_e=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),ut=a("div"),F(M8.$$.fragment),eZo=l(),Y_e=a("p"),oZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rZo=l(),gd=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(S1.$$.fragment),dZo=l(),co=a("div"),F(E8.$$.fragment),cZo=l(),Z_e=a("p"),fZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mZo=l(),Ga=a("p"),gZo=o("The model class to instantiate is selected based on the "),eue=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),Se=a("ul"),R1=a("li"),tue=a("strong"),TZo=o("data2vec-audio"),MZo=o(" \u2014 "),lz=a("a"),EZo=o("Data2VecAudioForSequenceClassification"),CZo=o(" (Data2VecAudio model)"),wZo=l(),P1=a("li"),aue=a("strong"),AZo=o("hubert"),yZo=o(" \u2014 "),iz=a("a"),LZo=o("HubertForSequenceClassification"),xZo=o(" (Hubert model)"),$Zo=l(),B1=a("li"),nue=a("strong"),kZo=o("sew"),SZo=o(" \u2014 "),dz=a("a"),RZo=o("SEWForSequenceClassification"),PZo=o(" (SEW model)"),BZo=l(),I1=a("li"),sue=a("strong"),IZo=o("sew-d"),NZo=o(" \u2014 "),cz=a("a"),qZo=o("SEWDForSequenceClassification"),jZo=o(" (SEW-D model)"),DZo=l(),N1=a("li"),lue=a("strong"),GZo=o("unispeech"),OZo=o(" \u2014 "),fz=a("a"),VZo=o("UniSpeechForSequenceClassification"),XZo=o(" (UniSpeech model)"),zZo=l(),q1=a("li"),iue=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),mz=a("a"),HZo=o("UniSpeechSatForSequenceClassification"),UZo=o(" (UniSpeechSat model)"),JZo=l(),j1=a("li"),due=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),gz=a("a"),ZZo=o("Wav2Vec2ForSequenceClassification"),eer=o(" (Wav2Vec2 model)"),oer=l(),D1=a("li"),cue=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),hz=a("a"),aer=o("Wav2Vec2ConformerForSequenceClassification"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),G1=a("li"),fue=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),pz=a("a"),der=o("WavLMForSequenceClassification"),cer=o(" (WavLM model)"),fer=l(),O1=a("p"),mer=o("The model is set in evaluation mode by default using "),mue=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),per=o("model.train()"),_er=l(),F(V1.$$.fragment),Mje=l(),hd=a("h2"),X1=a("a"),hue=a("span"),F(C8.$$.fragment),uer=l(),pue=a("span"),ber=o("AutoModelForAudioFrameClassification"),Eje=l(),Oo=a("div"),F(w8.$$.fragment),ver=l(),pd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_z=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),uz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),A8=a("p"),Aer=o("This class cannot be instantiated directly using "),_ue=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),bt=a("div"),F(y8.$$.fragment),$er=l(),uue=a("p"),ker=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ser=l(),_d=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),Ier=o("from_pretrained()"),Ner=o(" to load the model weights."),qer=l(),F(z1.$$.fragment),jer=l(),fo=a("div"),F(L8.$$.fragment),Der=l(),vue=a("p"),Ger=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Oer=l(),Oa=a("p"),Ver=o("The model class to instantiate is selected based on the "),Fue=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Kr=a("ul"),W1=a("li"),Eue=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),vz=a("a"),Zer=o("Data2VecAudioForAudioFrameClassification"),eor=o(" (Data2VecAudio model)"),oor=l(),Q1=a("li"),Cue=a("strong"),ror=o("unispeech-sat"),tor=o(" \u2014 "),Fz=a("a"),aor=o("UniSpeechSatForAudioFrameClassification"),nor=o(" (UniSpeechSat model)"),sor=l(),H1=a("li"),wue=a("strong"),lor=o("wav2vec2"),ior=o(" \u2014 "),Tz=a("a"),dor=o("Wav2Vec2ForAudioFrameClassification"),cor=o(" (Wav2Vec2 model)"),mor=l(),U1=a("li"),Aue=a("strong"),gor=o("wav2vec2-conformer"),hor=o(" \u2014 "),Mz=a("a"),por=o("Wav2Vec2ConformerForAudioFrameClassification"),_or=o(" (Wav2Vec2-Conformer model)"),uor=l(),J1=a("li"),yue=a("strong"),bor=o("wavlm"),vor=o(" \u2014 "),Ez=a("a"),For=o("WavLMForAudioFrameClassification"),Tor=o(" (WavLM model)"),Mor=l(),Y1=a("p"),Eor=o("The model is set in evaluation mode by default using "),Lue=a("code"),Cor=o("model.eval()"),wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),Aor=o("model.train()"),yor=l(),F(K1.$$.fragment),Cje=l(),ud=a("h2"),Z1=a("a"),$ue=a("span"),F(x8.$$.fragment),Lor=l(),kue=a("span"),xor=o("AutoModelForCTC"),wje=l(),Vo=a("div"),F($8.$$.fragment),$or=l(),bd=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Cz=a("a"),Sor=o("from_pretrained()"),Ror=o(" class method or the "),wz=a("a"),Por=o("from_config()"),Bor=o(` class
method.`),Ior=l(),k8=a("p"),Nor=o("This class cannot be instantiated directly using "),Sue=a("code"),qor=o("__init__()"),jor=o(" (throws an error)."),Dor=l(),vt=a("div"),F(S8.$$.fragment),Gor=l(),Rue=a("p"),Oor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Vor=l(),vd=a("p"),Xor=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),zor=o("not"),Wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Qor=o("from_pretrained()"),Hor=o(" to load the model weights."),Uor=l(),F(eT.$$.fragment),Jor=l(),mo=a("div"),F(R8.$$.fragment),Yor=l(),Bue=a("p"),Kor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Zor=l(),Va=a("p"),err=o("The model class to instantiate is selected based on the "),Iue=a("code"),orr=o("model_type"),rrr=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(":"),lrr=l(),Re=a("ul"),oT=a("li"),jue=a("strong"),irr=o("data2vec-audio"),drr=o(" \u2014 "),yz=a("a"),crr=o("Data2VecAudioForCTC"),frr=o(" (Data2VecAudio model)"),mrr=l(),rT=a("li"),Due=a("strong"),grr=o("hubert"),hrr=o(" \u2014 "),Lz=a("a"),prr=o("HubertForCTC"),_rr=o(" (Hubert model)"),urr=l(),tT=a("li"),Gue=a("strong"),brr=o("sew"),vrr=o(" \u2014 "),xz=a("a"),Frr=o("SEWForCTC"),Trr=o(" (SEW model)"),Mrr=l(),aT=a("li"),Oue=a("strong"),Err=o("sew-d"),Crr=o(" \u2014 "),$z=a("a"),wrr=o("SEWDForCTC"),Arr=o(" (SEW-D model)"),yrr=l(),nT=a("li"),Vue=a("strong"),Lrr=o("unispeech"),xrr=o(" \u2014 "),kz=a("a"),$rr=o("UniSpeechForCTC"),krr=o(" (UniSpeech model)"),Srr=l(),sT=a("li"),Xue=a("strong"),Rrr=o("unispeech-sat"),Prr=o(" \u2014 "),Sz=a("a"),Brr=o("UniSpeechSatForCTC"),Irr=o(" (UniSpeechSat model)"),Nrr=l(),lT=a("li"),zue=a("strong"),qrr=o("wav2vec2"),jrr=o(" \u2014 "),Rz=a("a"),Drr=o("Wav2Vec2ForCTC"),Grr=o(" (Wav2Vec2 model)"),Orr=l(),iT=a("li"),Wue=a("strong"),Vrr=o("wav2vec2-conformer"),Xrr=o(" \u2014 "),Pz=a("a"),zrr=o("Wav2Vec2ConformerForCTC"),Wrr=o(" (Wav2Vec2-Conformer model)"),Qrr=l(),dT=a("li"),Que=a("strong"),Hrr=o("wavlm"),Urr=o(" \u2014 "),Bz=a("a"),Jrr=o("WavLMForCTC"),Yrr=o(" (WavLM model)"),Krr=l(),cT=a("p"),Zrr=o("The model is set in evaluation mode by default using "),Hue=a("code"),etr=o("model.eval()"),otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),rtr=o("model.train()"),ttr=l(),F(fT.$$.fragment),Aje=l(),Fd=a("h2"),mT=a("a"),Jue=a("span"),F(P8.$$.fragment),atr=l(),Yue=a("span"),ntr=o("AutoModelForSpeechSeq2Seq"),yje=l(),Xo=a("div"),F(B8.$$.fragment),str=l(),Td=a("p"),ltr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iz=a("a"),itr=o("from_pretrained()"),dtr=o(" class method or the "),Nz=a("a"),ctr=o("from_config()"),ftr=o(` class
method.`),mtr=l(),I8=a("p"),gtr=o("This class cannot be instantiated directly using "),Kue=a("code"),htr=o("__init__()"),ptr=o(" (throws an error)."),_tr=l(),Ft=a("div"),F(N8.$$.fragment),utr=l(),Zue=a("p"),btr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vtr=l(),Md=a("p"),Ftr=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Ttr=o("not"),Mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Etr=o("from_pretrained()"),Ctr=o(" to load the model weights."),wtr=l(),F(gT.$$.fragment),Atr=l(),go=a("div"),F(q8.$$.fragment),ytr=l(),obe=a("p"),Ltr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xtr=l(),Xa=a("p"),$tr=o("The model class to instantiate is selected based on the "),rbe=a("code"),ktr=o("model_type"),Str=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),Rtr=o("pretrained_model_name_or_path"),Ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Btr=o("pretrained_model_name_or_path"),Itr=o(":"),Ntr=l(),j8=a("ul"),hT=a("li"),nbe=a("strong"),qtr=o("speech-encoder-decoder"),jtr=o(" \u2014 "),jz=a("a"),Dtr=o("SpeechEncoderDecoderModel"),Gtr=o(" (Speech Encoder decoder model)"),Otr=l(),pT=a("li"),sbe=a("strong"),Vtr=o("speech_to_text"),Xtr=o(" \u2014 "),Dz=a("a"),ztr=o("Speech2TextForConditionalGeneration"),Wtr=o(" (Speech2Text model)"),Qtr=l(),_T=a("p"),Htr=o("The model is set in evaluation mode by default using "),lbe=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=a("code"),Ytr=o("model.train()"),Ktr=l(),F(uT.$$.fragment),Lje=l(),Ed=a("h2"),bT=a("a"),dbe=a("span"),F(D8.$$.fragment),Ztr=l(),cbe=a("span"),ear=o("AutoModelForAudioXVector"),xje=l(),zo=a("div"),F(G8.$$.fragment),oar=l(),Cd=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),Oz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),O8=a("p"),iar=o("This class cannot be instantiated directly using "),fbe=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),Tt=a("div"),F(V8.$$.fragment),mar=l(),mbe=a("p"),gar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),har=l(),wd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),_ar=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(vT.$$.fragment),Mar=l(),ho=a("div"),F(X8.$$.fragment),Ear=l(),hbe=a("p"),Car=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),war=l(),za=a("p"),Aar=o("The model class to instantiate is selected based on the "),pbe=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Zr=a("ul"),FT=a("li"),bbe=a("strong"),Par=o("data2vec-audio"),Bar=o(" \u2014 "),Xz=a("a"),Iar=o("Data2VecAudioForXVector"),Nar=o(" (Data2VecAudio model)"),qar=l(),TT=a("li"),vbe=a("strong"),jar=o("unispeech-sat"),Dar=o(" \u2014 "),zz=a("a"),Gar=o("UniSpeechSatForXVector"),Oar=o(" (UniSpeechSat model)"),Var=l(),MT=a("li"),Fbe=a("strong"),Xar=o("wav2vec2"),zar=o(" \u2014 "),Wz=a("a"),War=o("Wav2Vec2ForXVector"),Qar=o(" (Wav2Vec2 model)"),Har=l(),ET=a("li"),Tbe=a("strong"),Uar=o("wav2vec2-conformer"),Jar=o(" \u2014 "),Qz=a("a"),Yar=o("Wav2Vec2ConformerForXVector"),Kar=o(" (Wav2Vec2-Conformer model)"),Zar=l(),CT=a("li"),Mbe=a("strong"),enr=o("wavlm"),onr=o(" \u2014 "),Hz=a("a"),rnr=o("WavLMForXVector"),tnr=o(" (WavLM model)"),anr=l(),wT=a("p"),nnr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),inr=o("model.train()"),dnr=l(),F(AT.$$.fragment),$je=l(),Ad=a("h2"),yT=a("a"),wbe=a("span"),F(z8.$$.fragment),cnr=l(),Abe=a("span"),fnr=o("AutoModelForMaskedImageModeling"),kje=l(),Wo=a("div"),F(W8.$$.fragment),mnr=l(),yd=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Uz=a("a"),hnr=o("from_pretrained()"),pnr=o(" class method or the "),Jz=a("a"),_nr=o("from_config()"),unr=o(` class
method.`),bnr=l(),Q8=a("p"),vnr=o("This class cannot be instantiated directly using "),ybe=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),Mt=a("div"),F(H8.$$.fragment),Enr=l(),Lbe=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wnr=l(),Ld=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),ynr=o("not"),Lnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(LT.$$.fragment),Snr=l(),po=a("div"),F(U8.$$.fragment),Rnr=l(),$be=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bnr=l(),Wa=a("p"),Inr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Nnr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),xd=a("ul"),xT=a("li"),Pbe=a("strong"),Xnr=o("deit"),znr=o(" \u2014 "),Kz=a("a"),Wnr=o("DeiTForMaskedImageModeling"),Qnr=o(" (DeiT model)"),Hnr=l(),$T=a("li"),Bbe=a("strong"),Unr=o("swin"),Jnr=o(" \u2014 "),Zz=a("a"),Ynr=o("SwinForMaskedImageModeling"),Knr=o(" (Swin Transformer model)"),Znr=l(),kT=a("li"),Ibe=a("strong"),esr=o("vit"),osr=o(" \u2014 "),eW=a("a"),rsr=o("ViTForMaskedImageModeling"),tsr=o(" (ViT model)"),asr=l(),ST=a("p"),nsr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),ssr=o("model.eval()"),lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),isr=o("model.train()"),dsr=l(),F(RT.$$.fragment),Sje=l(),$d=a("h2"),PT=a("a"),jbe=a("span"),F(J8.$$.fragment),csr=l(),Dbe=a("span"),fsr=o("AutoModelForObjectDetection"),Rje=l(),Qo=a("div"),F(Y8.$$.fragment),msr=l(),kd=a("p"),gsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),oW=a("a"),hsr=o("from_pretrained()"),psr=o(" class method or the "),rW=a("a"),_sr=o("from_config()"),usr=o(` class
method.`),bsr=l(),K8=a("p"),vsr=o("This class cannot be instantiated directly using "),Gbe=a("code"),Fsr=o("__init__()"),Tsr=o(" (throws an error)."),Msr=l(),Et=a("div"),F(Z8.$$.fragment),Esr=l(),Obe=a("p"),Csr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),wsr=l(),Sd=a("p"),Asr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),ysr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),xsr=o("from_pretrained()"),$sr=o(" to load the model weights."),ksr=l(),F(BT.$$.fragment),Ssr=l(),_o=a("div"),F(e7.$$.fragment),Rsr=l(),Xbe=a("p"),Psr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Bsr=l(),Qa=a("p"),Isr=o("The model class to instantiate is selected based on the "),zbe=a("code"),Nsr=o("model_type"),qsr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(":"),Vsr=l(),o7=a("ul"),IT=a("li"),Hbe=a("strong"),Xsr=o("detr"),zsr=o(" \u2014 "),aW=a("a"),Wsr=o("DetrForObjectDetection"),Qsr=o(" (DETR model)"),Hsr=l(),NT=a("li"),Ube=a("strong"),Usr=o("yolos"),Jsr=o(" \u2014 "),nW=a("a"),Ysr=o("YolosForObjectDetection"),Ksr=o(" (YOLOS model)"),Zsr=l(),qT=a("p"),elr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),olr=o("model.eval()"),rlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),tlr=o("model.train()"),alr=l(),F(jT.$$.fragment),Pje=l(),Rd=a("h2"),DT=a("a"),Kbe=a("span"),F(r7.$$.fragment),nlr=l(),Zbe=a("span"),slr=o("AutoModelForImageSegmentation"),Bje=l(),Ho=a("div"),F(t7.$$.fragment),llr=l(),Pd=a("p"),ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sW=a("a"),dlr=o("from_pretrained()"),clr=o(" class method or the "),lW=a("a"),flr=o("from_config()"),mlr=o(` class
method.`),glr=l(),a7=a("p"),hlr=o("This class cannot be instantiated directly using "),e2e=a("code"),plr=o("__init__()"),_lr=o(" (throws an error)."),ulr=l(),Ct=a("div"),F(n7.$$.fragment),blr=l(),o2e=a("p"),vlr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Flr=l(),Bd=a("p"),Tlr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),Mlr=o("not"),Elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Clr=o("from_pretrained()"),wlr=o(" to load the model weights."),Alr=l(),F(GT.$$.fragment),ylr=l(),uo=a("div"),F(s7.$$.fragment),Llr=l(),t2e=a("p"),xlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$lr=l(),Ha=a("p"),klr=o("The model class to instantiate is selected based on the "),a2e=a("code"),Slr=o("model_type"),Rlr=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),Plr=o("pretrained_model_name_or_path"),Blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),Ilr=o("pretrained_model_name_or_path"),Nlr=o(":"),qlr=l(),l2e=a("ul"),OT=a("li"),i2e=a("strong"),jlr=o("detr"),Dlr=o(" \u2014 "),dW=a("a"),Glr=o("DetrForSegmentation"),Olr=o(" (DETR model)"),Vlr=l(),VT=a("p"),Xlr=o("The model is set in evaluation mode by default using "),d2e=a("code"),zlr=o("model.eval()"),Wlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=a("code"),Qlr=o("model.train()"),Hlr=l(),F(XT.$$.fragment),Ije=l(),Id=a("h2"),zT=a("a"),f2e=a("span"),F(l7.$$.fragment),Ulr=l(),m2e=a("span"),Jlr=o("AutoModelForSemanticSegmentation"),Nje=l(),Uo=a("div"),F(i7.$$.fragment),Ylr=l(),Nd=a("p"),Klr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cW=a("a"),Zlr=o("from_pretrained()"),eir=o(" class method or the "),fW=a("a"),oir=o("from_config()"),rir=o(` class
method.`),tir=l(),d7=a("p"),air=o("This class cannot be instantiated directly using "),g2e=a("code"),nir=o("__init__()"),sir=o(" (throws an error)."),lir=l(),wt=a("div"),F(c7.$$.fragment),iir=l(),h2e=a("p"),dir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cir=l(),qd=a("p"),fir=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),mir=o("not"),gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),hir=o("from_pretrained()"),pir=o(" to load the model weights."),_ir=l(),F(WT.$$.fragment),uir=l(),bo=a("div"),F(f7.$$.fragment),bir=l(),_2e=a("p"),vir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Fir=l(),Ua=a("p"),Tir=o("The model class to instantiate is selected based on the "),u2e=a("code"),Mir=o("model_type"),Eir=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),Cir=o("pretrained_model_name_or_path"),wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),Air=o("pretrained_model_name_or_path"),yir=o(":"),Lir=l(),Ja=a("ul"),QT=a("li"),F2e=a("strong"),xir=o("beit"),$ir=o(" \u2014 "),gW=a("a"),kir=o("BeitForSemanticSegmentation"),Sir=o(" (BEiT model)"),Rir=l(),HT=a("li"),T2e=a("strong"),Pir=o("data2vec-vision"),Bir=o(" \u2014 "),hW=a("a"),Iir=o("Data2VecVisionForSemanticSegmentation"),Nir=o(" (Data2VecVision model)"),qir=l(),UT=a("li"),M2e=a("strong"),jir=o("dpt"),Dir=o(" \u2014 "),pW=a("a"),Gir=o("DPTForSemanticSegmentation"),Oir=o(" (DPT model)"),Vir=l(),JT=a("li"),E2e=a("strong"),Xir=o("segformer"),zir=o(" \u2014 "),_W=a("a"),Wir=o("SegformerForSemanticSegmentation"),Qir=o(" (SegFormer model)"),Hir=l(),YT=a("p"),Uir=o("The model is set in evaluation mode by default using "),C2e=a("code"),Jir=o("model.eval()"),Yir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=a("code"),Kir=o("model.train()"),Zir=l(),F(KT.$$.fragment),qje=l(),jd=a("h2"),ZT=a("a"),A2e=a("span"),F(m7.$$.fragment),edr=l(),y2e=a("span"),odr=o("AutoModelForInstanceSegmentation"),jje=l(),Jo=a("div"),F(g7.$$.fragment),rdr=l(),Dd=a("p"),tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uW=a("a"),adr=o("from_pretrained()"),ndr=o(" class method or the "),bW=a("a"),sdr=o("from_config()"),ldr=o(` class
method.`),idr=l(),h7=a("p"),ddr=o("This class cannot be instantiated directly using "),L2e=a("code"),cdr=o("__init__()"),fdr=o(" (throws an error)."),mdr=l(),At=a("div"),F(p7.$$.fragment),gdr=l(),x2e=a("p"),hdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pdr=l(),Gd=a("p"),_dr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),udr=o("not"),bdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),vdr=o("from_pretrained()"),Fdr=o(" to load the model weights."),Tdr=l(),F(eM.$$.fragment),Mdr=l(),vo=a("div"),F(_7.$$.fragment),Edr=l(),k2e=a("p"),Cdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wdr=l(),Ya=a("p"),Adr=o("The model class to instantiate is selected based on the "),S2e=a("code"),ydr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),kdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Rdr=l(),B2e=a("ul"),oM=a("li"),I2e=a("strong"),Pdr=o("maskformer"),Bdr=o(" \u2014 "),FW=a("a"),Idr=o("MaskFormerForInstanceSegmentation"),Ndr=o(" (MaskFormer model)"),qdr=l(),rM=a("p"),jdr=o("The model is set in evaluation mode by default using "),N2e=a("code"),Ddr=o("model.eval()"),Gdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),Odr=o("model.train()"),Vdr=l(),F(tM.$$.fragment),Dje=l(),Od=a("h2"),aM=a("a"),j2e=a("span"),F(u7.$$.fragment),Xdr=l(),D2e=a("span"),zdr=o("TFAutoModel"),Gje=l(),Yo=a("div"),F(b7.$$.fragment),Wdr=l(),Vd=a("p"),Qdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TW=a("a"),Hdr=o("from_pretrained()"),Udr=o(" class method or the "),MW=a("a"),Jdr=o("from_config()"),Ydr=o(` class
method.`),Kdr=l(),v7=a("p"),Zdr=o("This class cannot be instantiated directly using "),G2e=a("code"),ecr=o("__init__()"),ocr=o(" (throws an error)."),rcr=l(),yt=a("div"),F(F7.$$.fragment),tcr=l(),O2e=a("p"),acr=o("Instantiates one of the base model classes of the library from a configuration."),ncr=l(),Xd=a("p"),scr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),lcr=o("not"),icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),dcr=o("from_pretrained()"),ccr=o(" to load the model weights."),fcr=l(),F(nM.$$.fragment),mcr=l(),wr=a("div"),F(T7.$$.fragment),gcr=l(),X2e=a("p"),hcr=o("Instantiate one of the base model classes of the library from a pretrained model."),pcr=l(),Ka=a("p"),_cr=o("The model class to instantiate is selected based on the "),z2e=a("code"),ucr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),q=a("ul"),sM=a("li"),H2e=a("strong"),Ccr=o("albert"),wcr=o(" \u2014 "),CW=a("a"),Acr=o("TFAlbertModel"),ycr=o(" (ALBERT model)"),Lcr=l(),lM=a("li"),U2e=a("strong"),xcr=o("bart"),$cr=o(" \u2014 "),wW=a("a"),kcr=o("TFBartModel"),Scr=o(" (BART model)"),Rcr=l(),iM=a("li"),J2e=a("strong"),Pcr=o("bert"),Bcr=o(" \u2014 "),AW=a("a"),Icr=o("TFBertModel"),Ncr=o(" (BERT model)"),qcr=l(),dM=a("li"),Y2e=a("strong"),jcr=o("blenderbot"),Dcr=o(" \u2014 "),yW=a("a"),Gcr=o("TFBlenderbotModel"),Ocr=o(" (Blenderbot model)"),Vcr=l(),cM=a("li"),K2e=a("strong"),Xcr=o("blenderbot-small"),zcr=o(" \u2014 "),LW=a("a"),Wcr=o("TFBlenderbotSmallModel"),Qcr=o(" (BlenderbotSmall model)"),Hcr=l(),fM=a("li"),Z2e=a("strong"),Ucr=o("camembert"),Jcr=o(" \u2014 "),xW=a("a"),Ycr=o("TFCamembertModel"),Kcr=o(" (CamemBERT model)"),Zcr=l(),mM=a("li"),eve=a("strong"),efr=o("clip"),ofr=o(" \u2014 "),$W=a("a"),rfr=o("TFCLIPModel"),tfr=o(" (CLIP model)"),afr=l(),gM=a("li"),ove=a("strong"),nfr=o("convbert"),sfr=o(" \u2014 "),kW=a("a"),lfr=o("TFConvBertModel"),ifr=o(" (ConvBERT model)"),dfr=l(),hM=a("li"),rve=a("strong"),cfr=o("convnext"),ffr=o(" \u2014 "),SW=a("a"),mfr=o("TFConvNextModel"),gfr=o(" (ConvNeXT model)"),hfr=l(),pM=a("li"),tve=a("strong"),pfr=o("ctrl"),_fr=o(" \u2014 "),RW=a("a"),ufr=o("TFCTRLModel"),bfr=o(" (CTRL model)"),vfr=l(),_M=a("li"),ave=a("strong"),Ffr=o("data2vec-vision"),Tfr=o(" \u2014 "),PW=a("a"),Mfr=o("TFData2VecVisionModel"),Efr=o(" (Data2VecVision model)"),Cfr=l(),uM=a("li"),nve=a("strong"),wfr=o("deberta"),Afr=o(" \u2014 "),BW=a("a"),yfr=o("TFDebertaModel"),Lfr=o(" (DeBERTa model)"),xfr=l(),bM=a("li"),sve=a("strong"),$fr=o("deberta-v2"),kfr=o(" \u2014 "),IW=a("a"),Sfr=o("TFDebertaV2Model"),Rfr=o(" (DeBERTa-v2 model)"),Pfr=l(),vM=a("li"),lve=a("strong"),Bfr=o("distilbert"),Ifr=o(" \u2014 "),NW=a("a"),Nfr=o("TFDistilBertModel"),qfr=o(" (DistilBERT model)"),jfr=l(),FM=a("li"),ive=a("strong"),Dfr=o("dpr"),Gfr=o(" \u2014 "),qW=a("a"),Ofr=o("TFDPRQuestionEncoder"),Vfr=o(" (DPR model)"),Xfr=l(),TM=a("li"),dve=a("strong"),zfr=o("electra"),Wfr=o(" \u2014 "),jW=a("a"),Qfr=o("TFElectraModel"),Hfr=o(" (ELECTRA model)"),Ufr=l(),MM=a("li"),cve=a("strong"),Jfr=o("flaubert"),Yfr=o(" \u2014 "),DW=a("a"),Kfr=o("TFFlaubertModel"),Zfr=o(" (FlauBERT model)"),emr=l(),Ns=a("li"),fve=a("strong"),omr=o("funnel"),rmr=o(" \u2014 "),GW=a("a"),tmr=o("TFFunnelModel"),amr=o(" or "),OW=a("a"),nmr=o("TFFunnelBaseModel"),smr=o(" (Funnel Transformer model)"),lmr=l(),EM=a("li"),mve=a("strong"),imr=o("gpt2"),dmr=o(" \u2014 "),VW=a("a"),cmr=o("TFGPT2Model"),fmr=o(" (OpenAI GPT-2 model)"),mmr=l(),CM=a("li"),gve=a("strong"),gmr=o("gptj"),hmr=o(" \u2014 "),XW=a("a"),pmr=o("TFGPTJModel"),_mr=o(" (GPT-J model)"),umr=l(),wM=a("li"),hve=a("strong"),bmr=o("hubert"),vmr=o(" \u2014 "),zW=a("a"),Fmr=o("TFHubertModel"),Tmr=o(" (Hubert model)"),Mmr=l(),AM=a("li"),pve=a("strong"),Emr=o("layoutlm"),Cmr=o(" \u2014 "),WW=a("a"),wmr=o("TFLayoutLMModel"),Amr=o(" (LayoutLM model)"),ymr=l(),yM=a("li"),_ve=a("strong"),Lmr=o("led"),xmr=o(" \u2014 "),QW=a("a"),$mr=o("TFLEDModel"),kmr=o(" (LED model)"),Smr=l(),LM=a("li"),uve=a("strong"),Rmr=o("longformer"),Pmr=o(" \u2014 "),HW=a("a"),Bmr=o("TFLongformerModel"),Imr=o(" (Longformer model)"),Nmr=l(),xM=a("li"),bve=a("strong"),qmr=o("lxmert"),jmr=o(" \u2014 "),UW=a("a"),Dmr=o("TFLxmertModel"),Gmr=o(" (LXMERT model)"),Omr=l(),$M=a("li"),vve=a("strong"),Vmr=o("marian"),Xmr=o(" \u2014 "),JW=a("a"),zmr=o("TFMarianModel"),Wmr=o(" (Marian model)"),Qmr=l(),kM=a("li"),Fve=a("strong"),Hmr=o("mbart"),Umr=o(" \u2014 "),YW=a("a"),Jmr=o("TFMBartModel"),Ymr=o(" (mBART model)"),Kmr=l(),SM=a("li"),Tve=a("strong"),Zmr=o("mobilebert"),egr=o(" \u2014 "),KW=a("a"),ogr=o("TFMobileBertModel"),rgr=o(" (MobileBERT model)"),tgr=l(),RM=a("li"),Mve=a("strong"),agr=o("mpnet"),ngr=o(" \u2014 "),ZW=a("a"),sgr=o("TFMPNetModel"),lgr=o(" (MPNet model)"),igr=l(),PM=a("li"),Eve=a("strong"),dgr=o("mt5"),cgr=o(" \u2014 "),eQ=a("a"),fgr=o("TFMT5Model"),mgr=o(" (MT5 model)"),ggr=l(),BM=a("li"),Cve=a("strong"),hgr=o("openai-gpt"),pgr=o(" \u2014 "),oQ=a("a"),_gr=o("TFOpenAIGPTModel"),ugr=o(" (OpenAI GPT model)"),bgr=l(),IM=a("li"),wve=a("strong"),vgr=o("opt"),Fgr=o(" \u2014 "),rQ=a("a"),Tgr=o("TFOPTModel"),Mgr=o(" (OPT model)"),Egr=l(),NM=a("li"),Ave=a("strong"),Cgr=o("pegasus"),wgr=o(" \u2014 "),tQ=a("a"),Agr=o("TFPegasusModel"),ygr=o(" (Pegasus model)"),Lgr=l(),qM=a("li"),yve=a("strong"),xgr=o("rembert"),$gr=o(" \u2014 "),aQ=a("a"),kgr=o("TFRemBertModel"),Sgr=o(" (RemBERT model)"),Rgr=l(),jM=a("li"),Lve=a("strong"),Pgr=o("roberta"),Bgr=o(" \u2014 "),nQ=a("a"),Igr=o("TFRobertaModel"),Ngr=o(" (RoBERTa model)"),qgr=l(),DM=a("li"),xve=a("strong"),jgr=o("roformer"),Dgr=o(" \u2014 "),sQ=a("a"),Ggr=o("TFRoFormerModel"),Ogr=o(" (RoFormer model)"),Vgr=l(),GM=a("li"),$ve=a("strong"),Xgr=o("speech_to_text"),zgr=o(" \u2014 "),lQ=a("a"),Wgr=o("TFSpeech2TextModel"),Qgr=o(" (Speech2Text model)"),Hgr=l(),OM=a("li"),kve=a("strong"),Ugr=o("swin"),Jgr=o(" \u2014 "),iQ=a("a"),Ygr=o("TFSwinModel"),Kgr=o(" (Swin Transformer model)"),Zgr=l(),VM=a("li"),Sve=a("strong"),ehr=o("t5"),ohr=o(" \u2014 "),dQ=a("a"),rhr=o("TFT5Model"),thr=o(" (T5 model)"),ahr=l(),XM=a("li"),Rve=a("strong"),nhr=o("tapas"),shr=o(" \u2014 "),cQ=a("a"),lhr=o("TFTapasModel"),ihr=o(" (TAPAS model)"),dhr=l(),zM=a("li"),Pve=a("strong"),chr=o("transfo-xl"),fhr=o(" \u2014 "),fQ=a("a"),mhr=o("TFTransfoXLModel"),ghr=o(" (Transformer-XL model)"),hhr=l(),WM=a("li"),Bve=a("strong"),phr=o("vit"),_hr=o(" \u2014 "),mQ=a("a"),uhr=o("TFViTModel"),bhr=o(" (ViT model)"),vhr=l(),QM=a("li"),Ive=a("strong"),Fhr=o("vit_mae"),Thr=o(" \u2014 "),gQ=a("a"),Mhr=o("TFViTMAEModel"),Ehr=o(" (ViTMAE model)"),Chr=l(),HM=a("li"),Nve=a("strong"),whr=o("wav2vec2"),Ahr=o(" \u2014 "),hQ=a("a"),yhr=o("TFWav2Vec2Model"),Lhr=o(" (Wav2Vec2 model)"),xhr=l(),UM=a("li"),qve=a("strong"),$hr=o("xlm"),khr=o(" \u2014 "),pQ=a("a"),Shr=o("TFXLMModel"),Rhr=o(" (XLM model)"),Phr=l(),JM=a("li"),jve=a("strong"),Bhr=o("xlm-roberta"),Ihr=o(" \u2014 "),_Q=a("a"),Nhr=o("TFXLMRobertaModel"),qhr=o(" (XLM-RoBERTa model)"),jhr=l(),YM=a("li"),Dve=a("strong"),Dhr=o("xlnet"),Ghr=o(" \u2014 "),uQ=a("a"),Ohr=o("TFXLNetModel"),Vhr=o(" (XLNet model)"),Xhr=l(),F(KM.$$.fragment),Oje=l(),zd=a("h2"),ZM=a("a"),Gve=a("span"),F(M7.$$.fragment),zhr=l(),Ove=a("span"),Whr=o("TFAutoModelForPreTraining"),Vje=l(),Ko=a("div"),F(E7.$$.fragment),Qhr=l(),Wd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),vQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),C7=a("p"),epr=o("This class cannot be instantiated directly using "),Vve=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),Lt=a("div"),F(w7.$$.fragment),apr=l(),Xve=a("p"),npr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),spr=l(),Qd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(e4.$$.fragment),gpr=l(),Ar=a("div"),F(A7.$$.fragment),hpr=l(),Wve=a("p"),ppr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_pr=l(),Za=a("p"),upr=o("The model class to instantiate is selected based on the "),Qve=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),se=a("ul"),o4=a("li"),Jve=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),TQ=a("a"),ypr=o("TFAlbertForPreTraining"),Lpr=o(" (ALBERT model)"),xpr=l(),r4=a("li"),Yve=a("strong"),$pr=o("bart"),kpr=o(" \u2014 "),MQ=a("a"),Spr=o("TFBartForConditionalGeneration"),Rpr=o(" (BART model)"),Ppr=l(),t4=a("li"),Kve=a("strong"),Bpr=o("bert"),Ipr=o(" \u2014 "),EQ=a("a"),Npr=o("TFBertForPreTraining"),qpr=o(" (BERT model)"),jpr=l(),a4=a("li"),Zve=a("strong"),Dpr=o("camembert"),Gpr=o(" \u2014 "),CQ=a("a"),Opr=o("TFCamembertForMaskedLM"),Vpr=o(" (CamemBERT model)"),Xpr=l(),n4=a("li"),eFe=a("strong"),zpr=o("ctrl"),Wpr=o(" \u2014 "),wQ=a("a"),Qpr=o("TFCTRLLMHeadModel"),Hpr=o(" (CTRL model)"),Upr=l(),s4=a("li"),oFe=a("strong"),Jpr=o("distilbert"),Ypr=o(" \u2014 "),AQ=a("a"),Kpr=o("TFDistilBertForMaskedLM"),Zpr=o(" (DistilBERT model)"),e_r=l(),l4=a("li"),rFe=a("strong"),o_r=o("electra"),r_r=o(" \u2014 "),yQ=a("a"),t_r=o("TFElectraForPreTraining"),a_r=o(" (ELECTRA model)"),n_r=l(),i4=a("li"),tFe=a("strong"),s_r=o("flaubert"),l_r=o(" \u2014 "),LQ=a("a"),i_r=o("TFFlaubertWithLMHeadModel"),d_r=o(" (FlauBERT model)"),c_r=l(),d4=a("li"),aFe=a("strong"),f_r=o("funnel"),m_r=o(" \u2014 "),xQ=a("a"),g_r=o("TFFunnelForPreTraining"),h_r=o(" (Funnel Transformer model)"),p_r=l(),c4=a("li"),nFe=a("strong"),__r=o("gpt2"),u_r=o(" \u2014 "),$Q=a("a"),b_r=o("TFGPT2LMHeadModel"),v_r=o(" (OpenAI GPT-2 model)"),F_r=l(),f4=a("li"),sFe=a("strong"),T_r=o("layoutlm"),M_r=o(" \u2014 "),kQ=a("a"),E_r=o("TFLayoutLMForMaskedLM"),C_r=o(" (LayoutLM model)"),w_r=l(),m4=a("li"),lFe=a("strong"),A_r=o("lxmert"),y_r=o(" \u2014 "),SQ=a("a"),L_r=o("TFLxmertForPreTraining"),x_r=o(" (LXMERT model)"),$_r=l(),g4=a("li"),iFe=a("strong"),k_r=o("mobilebert"),S_r=o(" \u2014 "),RQ=a("a"),R_r=o("TFMobileBertForPreTraining"),P_r=o(" (MobileBERT model)"),B_r=l(),h4=a("li"),dFe=a("strong"),I_r=o("mpnet"),N_r=o(" \u2014 "),PQ=a("a"),q_r=o("TFMPNetForMaskedLM"),j_r=o(" (MPNet model)"),D_r=l(),p4=a("li"),cFe=a("strong"),G_r=o("openai-gpt"),O_r=o(" \u2014 "),BQ=a("a"),V_r=o("TFOpenAIGPTLMHeadModel"),X_r=o(" (OpenAI GPT model)"),z_r=l(),_4=a("li"),fFe=a("strong"),W_r=o("roberta"),Q_r=o(" \u2014 "),IQ=a("a"),H_r=o("TFRobertaForMaskedLM"),U_r=o(" (RoBERTa model)"),J_r=l(),u4=a("li"),mFe=a("strong"),Y_r=o("t5"),K_r=o(" \u2014 "),NQ=a("a"),Z_r=o("TFT5ForConditionalGeneration"),eur=o(" (T5 model)"),our=l(),b4=a("li"),gFe=a("strong"),rur=o("tapas"),tur=o(" \u2014 "),qQ=a("a"),aur=o("TFTapasForMaskedLM"),nur=o(" (TAPAS model)"),sur=l(),v4=a("li"),hFe=a("strong"),lur=o("transfo-xl"),iur=o(" \u2014 "),jQ=a("a"),dur=o("TFTransfoXLLMHeadModel"),cur=o(" (Transformer-XL model)"),fur=l(),F4=a("li"),pFe=a("strong"),mur=o("vit_mae"),gur=o(" \u2014 "),DQ=a("a"),hur=o("TFViTMAEForPreTraining"),pur=o(" (ViTMAE model)"),_ur=l(),T4=a("li"),_Fe=a("strong"),uur=o("xlm"),bur=o(" \u2014 "),GQ=a("a"),vur=o("TFXLMWithLMHeadModel"),Fur=o(" (XLM model)"),Tur=l(),M4=a("li"),uFe=a("strong"),Mur=o("xlm-roberta"),Eur=o(" \u2014 "),OQ=a("a"),Cur=o("TFXLMRobertaForMaskedLM"),wur=o(" (XLM-RoBERTa model)"),Aur=l(),E4=a("li"),bFe=a("strong"),yur=o("xlnet"),Lur=o(" \u2014 "),VQ=a("a"),xur=o("TFXLNetLMHeadModel"),$ur=o(" (XLNet model)"),kur=l(),F(C4.$$.fragment),Xje=l(),Hd=a("h2"),w4=a("a"),vFe=a("span"),F(y7.$$.fragment),Sur=l(),FFe=a("span"),Rur=o("TFAutoModelForCausalLM"),zje=l(),Zo=a("div"),F(L7.$$.fragment),Pur=l(),Ud=a("p"),Bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XQ=a("a"),Iur=o("from_pretrained()"),Nur=o(" class method or the "),zQ=a("a"),qur=o("from_config()"),jur=o(` class
method.`),Dur=l(),x7=a("p"),Gur=o("This class cannot be instantiated directly using "),TFe=a("code"),Our=o("__init__()"),Vur=o(" (throws an error)."),Xur=l(),xt=a("div"),F($7.$$.fragment),zur=l(),MFe=a("p"),Wur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qur=l(),Jd=a("p"),Hur=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),Uur=o("not"),Jur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),Yur=o("from_pretrained()"),Kur=o(" to load the model weights."),Zur=l(),F(A4.$$.fragment),ebr=l(),yr=a("div"),F(k7.$$.fragment),obr=l(),CFe=a("p"),rbr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tbr=l(),en=a("p"),abr=o("The model class to instantiate is selected based on the "),wFe=a("code"),nbr=o("model_type"),sbr=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),lbr=o("pretrained_model_name_or_path"),ibr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),dbr=o("pretrained_model_name_or_path"),cbr=o(":"),fbr=l(),Me=a("ul"),y4=a("li"),LFe=a("strong"),mbr=o("bert"),gbr=o(" \u2014 "),QQ=a("a"),hbr=o("TFBertLMHeadModel"),pbr=o(" (BERT model)"),_br=l(),L4=a("li"),xFe=a("strong"),ubr=o("camembert"),bbr=o(" \u2014 "),HQ=a("a"),vbr=o("TFCamembertForCausalLM"),Fbr=o(" (CamemBERT model)"),Tbr=l(),x4=a("li"),$Fe=a("strong"),Mbr=o("ctrl"),Ebr=o(" \u2014 "),UQ=a("a"),Cbr=o("TFCTRLLMHeadModel"),wbr=o(" (CTRL model)"),Abr=l(),$4=a("li"),kFe=a("strong"),ybr=o("gpt2"),Lbr=o(" \u2014 "),JQ=a("a"),xbr=o("TFGPT2LMHeadModel"),$br=o(" (OpenAI GPT-2 model)"),kbr=l(),k4=a("li"),SFe=a("strong"),Sbr=o("gptj"),Rbr=o(" \u2014 "),YQ=a("a"),Pbr=o("TFGPTJForCausalLM"),Bbr=o(" (GPT-J model)"),Ibr=l(),S4=a("li"),RFe=a("strong"),Nbr=o("openai-gpt"),qbr=o(" \u2014 "),KQ=a("a"),jbr=o("TFOpenAIGPTLMHeadModel"),Dbr=o(" (OpenAI GPT model)"),Gbr=l(),R4=a("li"),PFe=a("strong"),Obr=o("opt"),Vbr=o(" \u2014 "),ZQ=a("a"),Xbr=o("TFOPTForCausalLM"),zbr=o(" (OPT model)"),Wbr=l(),P4=a("li"),BFe=a("strong"),Qbr=o("rembert"),Hbr=o(" \u2014 "),eH=a("a"),Ubr=o("TFRemBertForCausalLM"),Jbr=o(" (RemBERT model)"),Ybr=l(),B4=a("li"),IFe=a("strong"),Kbr=o("roberta"),Zbr=o(" \u2014 "),oH=a("a"),e2r=o("TFRobertaForCausalLM"),o2r=o(" (RoBERTa model)"),r2r=l(),I4=a("li"),NFe=a("strong"),t2r=o("roformer"),a2r=o(" \u2014 "),rH=a("a"),n2r=o("TFRoFormerForCausalLM"),s2r=o(" (RoFormer model)"),l2r=l(),N4=a("li"),qFe=a("strong"),i2r=o("transfo-xl"),d2r=o(" \u2014 "),tH=a("a"),c2r=o("TFTransfoXLLMHeadModel"),f2r=o(" (Transformer-XL model)"),m2r=l(),q4=a("li"),jFe=a("strong"),g2r=o("xlm"),h2r=o(" \u2014 "),aH=a("a"),p2r=o("TFXLMWithLMHeadModel"),_2r=o(" (XLM model)"),u2r=l(),j4=a("li"),DFe=a("strong"),b2r=o("xlnet"),v2r=o(" \u2014 "),nH=a("a"),F2r=o("TFXLNetLMHeadModel"),T2r=o(" (XLNet model)"),M2r=l(),F(D4.$$.fragment),Wje=l(),Yd=a("h2"),G4=a("a"),GFe=a("span"),F(S7.$$.fragment),E2r=l(),OFe=a("span"),C2r=o("TFAutoModelForImageClassification"),Qje=l(),er=a("div"),F(R7.$$.fragment),w2r=l(),Kd=a("p"),A2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sH=a("a"),y2r=o("from_pretrained()"),L2r=o(" class method or the "),lH=a("a"),x2r=o("from_config()"),$2r=o(` class
method.`),k2r=l(),P7=a("p"),S2r=o("This class cannot be instantiated directly using "),VFe=a("code"),R2r=o("__init__()"),P2r=o(" (throws an error)."),B2r=l(),$t=a("div"),F(B7.$$.fragment),I2r=l(),XFe=a("p"),N2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q2r=l(),Zd=a("p"),j2r=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),D2r=o("not"),G2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),O2r=o("from_pretrained()"),V2r=o(" to load the model weights."),X2r=l(),F(O4.$$.fragment),z2r=l(),Lr=a("div"),F(I7.$$.fragment),W2r=l(),WFe=a("p"),Q2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H2r=l(),on=a("p"),U2r=o("The model class to instantiate is selected based on the "),QFe=a("code"),J2r=o("model_type"),Y2r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(":"),rvr=l(),rn=a("ul"),V4=a("li"),JFe=a("strong"),tvr=o("convnext"),avr=o(" \u2014 "),dH=a("a"),nvr=o("TFConvNextForImageClassification"),svr=o(" (ConvNeXT model)"),lvr=l(),X4=a("li"),YFe=a("strong"),ivr=o("data2vec-vision"),dvr=o(" \u2014 "),cH=a("a"),cvr=o("TFData2VecVisionForImageClassification"),fvr=o(" (Data2VecVision model)"),mvr=l(),z4=a("li"),KFe=a("strong"),gvr=o("swin"),hvr=o(" \u2014 "),fH=a("a"),pvr=o("TFSwinForImageClassification"),_vr=o(" (Swin Transformer model)"),uvr=l(),W4=a("li"),ZFe=a("strong"),bvr=o("vit"),vvr=o(" \u2014 "),mH=a("a"),Fvr=o("TFViTForImageClassification"),Tvr=o(" (ViT model)"),Mvr=l(),F(Q4.$$.fragment),Hje=l(),ec=a("h2"),H4=a("a"),e6e=a("span"),F(N7.$$.fragment),Evr=l(),o6e=a("span"),Cvr=o("TFAutoModelForMaskedLM"),Uje=l(),or=a("div"),F(q7.$$.fragment),wvr=l(),oc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gH=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),hH=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),j7=a("p"),Svr=o("This class cannot be instantiated directly using "),r6e=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),kt=a("div"),F(D7.$$.fragment),Ivr=l(),t6e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qvr=l(),rc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(U4.$$.fragment),zvr=l(),xr=a("div"),F(G7.$$.fragment),Wvr=l(),n6e=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hvr=l(),tn=a("p"),Uvr=o("The model class to instantiate is selected based on the "),s6e=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),ie=a("ul"),J4=a("li"),d6e=a("strong"),tFr=o("albert"),aFr=o(" \u2014 "),_H=a("a"),nFr=o("TFAlbertForMaskedLM"),sFr=o(" (ALBERT model)"),lFr=l(),Y4=a("li"),c6e=a("strong"),iFr=o("bert"),dFr=o(" \u2014 "),uH=a("a"),cFr=o("TFBertForMaskedLM"),fFr=o(" (BERT model)"),mFr=l(),K4=a("li"),f6e=a("strong"),gFr=o("camembert"),hFr=o(" \u2014 "),bH=a("a"),pFr=o("TFCamembertForMaskedLM"),_Fr=o(" (CamemBERT model)"),uFr=l(),Z4=a("li"),m6e=a("strong"),bFr=o("convbert"),vFr=o(" \u2014 "),vH=a("a"),FFr=o("TFConvBertForMaskedLM"),TFr=o(" (ConvBERT model)"),MFr=l(),eE=a("li"),g6e=a("strong"),EFr=o("deberta"),CFr=o(" \u2014 "),FH=a("a"),wFr=o("TFDebertaForMaskedLM"),AFr=o(" (DeBERTa model)"),yFr=l(),oE=a("li"),h6e=a("strong"),LFr=o("deberta-v2"),xFr=o(" \u2014 "),TH=a("a"),$Fr=o("TFDebertaV2ForMaskedLM"),kFr=o(" (DeBERTa-v2 model)"),SFr=l(),rE=a("li"),p6e=a("strong"),RFr=o("distilbert"),PFr=o(" \u2014 "),MH=a("a"),BFr=o("TFDistilBertForMaskedLM"),IFr=o(" (DistilBERT model)"),NFr=l(),tE=a("li"),_6e=a("strong"),qFr=o("electra"),jFr=o(" \u2014 "),EH=a("a"),DFr=o("TFElectraForMaskedLM"),GFr=o(" (ELECTRA model)"),OFr=l(),aE=a("li"),u6e=a("strong"),VFr=o("flaubert"),XFr=o(" \u2014 "),CH=a("a"),zFr=o("TFFlaubertWithLMHeadModel"),WFr=o(" (FlauBERT model)"),QFr=l(),nE=a("li"),b6e=a("strong"),HFr=o("funnel"),UFr=o(" \u2014 "),wH=a("a"),JFr=o("TFFunnelForMaskedLM"),YFr=o(" (Funnel Transformer model)"),KFr=l(),sE=a("li"),v6e=a("strong"),ZFr=o("layoutlm"),e6r=o(" \u2014 "),AH=a("a"),o6r=o("TFLayoutLMForMaskedLM"),r6r=o(" (LayoutLM model)"),t6r=l(),lE=a("li"),F6e=a("strong"),a6r=o("longformer"),n6r=o(" \u2014 "),yH=a("a"),s6r=o("TFLongformerForMaskedLM"),l6r=o(" (Longformer model)"),i6r=l(),iE=a("li"),T6e=a("strong"),d6r=o("mobilebert"),c6r=o(" \u2014 "),LH=a("a"),f6r=o("TFMobileBertForMaskedLM"),m6r=o(" (MobileBERT model)"),g6r=l(),dE=a("li"),M6e=a("strong"),h6r=o("mpnet"),p6r=o(" \u2014 "),xH=a("a"),_6r=o("TFMPNetForMaskedLM"),u6r=o(" (MPNet model)"),b6r=l(),cE=a("li"),E6e=a("strong"),v6r=o("rembert"),F6r=o(" \u2014 "),$H=a("a"),T6r=o("TFRemBertForMaskedLM"),M6r=o(" (RemBERT model)"),E6r=l(),fE=a("li"),C6e=a("strong"),C6r=o("roberta"),w6r=o(" \u2014 "),kH=a("a"),A6r=o("TFRobertaForMaskedLM"),y6r=o(" (RoBERTa model)"),L6r=l(),mE=a("li"),w6e=a("strong"),x6r=o("roformer"),$6r=o(" \u2014 "),SH=a("a"),k6r=o("TFRoFormerForMaskedLM"),S6r=o(" (RoFormer model)"),R6r=l(),gE=a("li"),A6e=a("strong"),P6r=o("tapas"),B6r=o(" \u2014 "),RH=a("a"),I6r=o("TFTapasForMaskedLM"),N6r=o(" (TAPAS model)"),q6r=l(),hE=a("li"),y6e=a("strong"),j6r=o("xlm"),D6r=o(" \u2014 "),PH=a("a"),G6r=o("TFXLMWithLMHeadModel"),O6r=o(" (XLM model)"),V6r=l(),pE=a("li"),L6e=a("strong"),X6r=o("xlm-roberta"),z6r=o(" \u2014 "),BH=a("a"),W6r=o("TFXLMRobertaForMaskedLM"),Q6r=o(" (XLM-RoBERTa model)"),H6r=l(),F(_E.$$.fragment),Jje=l(),tc=a("h2"),uE=a("a"),x6e=a("span"),F(O7.$$.fragment),U6r=l(),$6e=a("span"),J6r=o("TFAutoModelForSeq2SeqLM"),Yje=l(),rr=a("div"),F(V7.$$.fragment),Y6r=l(),ac=a("p"),K6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IH=a("a"),Z6r=o("from_pretrained()"),e1r=o(" class method or the "),NH=a("a"),o1r=o("from_config()"),r1r=o(` class
method.`),t1r=l(),X7=a("p"),a1r=o("This class cannot be instantiated directly using "),k6e=a("code"),n1r=o("__init__()"),s1r=o(" (throws an error)."),l1r=l(),St=a("div"),F(z7.$$.fragment),i1r=l(),S6e=a("p"),d1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c1r=l(),nc=a("p"),f1r=o(`Note:
Loading a model from its configuration file does `),R6e=a("strong"),m1r=o("not"),g1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),h1r=o("from_pretrained()"),p1r=o(" to load the model weights."),_1r=l(),F(bE.$$.fragment),u1r=l(),$r=a("div"),F(W7.$$.fragment),b1r=l(),P6e=a("p"),v1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),F1r=l(),an=a("p"),T1r=o("The model class to instantiate is selected based on the "),B6e=a("code"),M1r=o("model_type"),E1r=o(` property of the config object (either
passed as an argument or loaded from `),I6e=a("code"),C1r=o("pretrained_model_name_or_path"),w1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),A1r=o("pretrained_model_name_or_path"),y1r=o(":"),L1r=l(),ye=a("ul"),vE=a("li"),q6e=a("strong"),x1r=o("bart"),$1r=o(" \u2014 "),jH=a("a"),k1r=o("TFBartForConditionalGeneration"),S1r=o(" (BART model)"),R1r=l(),FE=a("li"),j6e=a("strong"),P1r=o("blenderbot"),B1r=o(" \u2014 "),DH=a("a"),I1r=o("TFBlenderbotForConditionalGeneration"),N1r=o(" (Blenderbot model)"),q1r=l(),TE=a("li"),D6e=a("strong"),j1r=o("blenderbot-small"),D1r=o(" \u2014 "),GH=a("a"),G1r=o("TFBlenderbotSmallForConditionalGeneration"),O1r=o(" (BlenderbotSmall model)"),V1r=l(),ME=a("li"),G6e=a("strong"),X1r=o("encoder-decoder"),z1r=o(" \u2014 "),OH=a("a"),W1r=o("TFEncoderDecoderModel"),Q1r=o(" (Encoder decoder model)"),H1r=l(),EE=a("li"),O6e=a("strong"),U1r=o("led"),J1r=o(" \u2014 "),VH=a("a"),Y1r=o("TFLEDForConditionalGeneration"),K1r=o(" (LED model)"),Z1r=l(),CE=a("li"),V6e=a("strong"),eTr=o("marian"),oTr=o(" \u2014 "),XH=a("a"),rTr=o("TFMarianMTModel"),tTr=o(" (Marian model)"),aTr=l(),wE=a("li"),X6e=a("strong"),nTr=o("mbart"),sTr=o(" \u2014 "),zH=a("a"),lTr=o("TFMBartForConditionalGeneration"),iTr=o(" (mBART model)"),dTr=l(),AE=a("li"),z6e=a("strong"),cTr=o("mt5"),fTr=o(" \u2014 "),WH=a("a"),mTr=o("TFMT5ForConditionalGeneration"),gTr=o(" (MT5 model)"),hTr=l(),yE=a("li"),W6e=a("strong"),pTr=o("pegasus"),_Tr=o(" \u2014 "),QH=a("a"),uTr=o("TFPegasusForConditionalGeneration"),bTr=o(" (Pegasus model)"),vTr=l(),LE=a("li"),Q6e=a("strong"),FTr=o("t5"),TTr=o(" \u2014 "),HH=a("a"),MTr=o("TFT5ForConditionalGeneration"),ETr=o(" (T5 model)"),CTr=l(),F(xE.$$.fragment),Kje=l(),sc=a("h2"),$E=a("a"),H6e=a("span"),F(Q7.$$.fragment),wTr=l(),U6e=a("span"),ATr=o("TFAutoModelForSequenceClassification"),Zje=l(),tr=a("div"),F(H7.$$.fragment),yTr=l(),lc=a("p"),LTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UH=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),JH=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),U7=a("p"),PTr=o("This class cannot be instantiated directly using "),J6e=a("code"),BTr=o("__init__()"),ITr=o(" (throws an error)."),NTr=l(),Rt=a("div"),F(J7.$$.fragment),qTr=l(),Y6e=a("p"),jTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DTr=l(),ic=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),WTr=l(),F(kE.$$.fragment),QTr=l(),kr=a("div"),F(Y7.$$.fragment),HTr=l(),Z6e=a("p"),UTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JTr=l(),nn=a("p"),YTr=o("The model class to instantiate is selected based on the "),e1e=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),oe=a("ul"),SE=a("li"),t1e=a("strong"),nMr=o("albert"),sMr=o(" \u2014 "),KH=a("a"),lMr=o("TFAlbertForSequenceClassification"),iMr=o(" (ALBERT model)"),dMr=l(),RE=a("li"),a1e=a("strong"),cMr=o("bert"),fMr=o(" \u2014 "),ZH=a("a"),mMr=o("TFBertForSequenceClassification"),gMr=o(" (BERT model)"),hMr=l(),PE=a("li"),n1e=a("strong"),pMr=o("camembert"),_Mr=o(" \u2014 "),eU=a("a"),uMr=o("TFCamembertForSequenceClassification"),bMr=o(" (CamemBERT model)"),vMr=l(),BE=a("li"),s1e=a("strong"),FMr=o("convbert"),TMr=o(" \u2014 "),oU=a("a"),MMr=o("TFConvBertForSequenceClassification"),EMr=o(" (ConvBERT model)"),CMr=l(),IE=a("li"),l1e=a("strong"),wMr=o("ctrl"),AMr=o(" \u2014 "),rU=a("a"),yMr=o("TFCTRLForSequenceClassification"),LMr=o(" (CTRL model)"),xMr=l(),NE=a("li"),i1e=a("strong"),$Mr=o("deberta"),kMr=o(" \u2014 "),tU=a("a"),SMr=o("TFDebertaForSequenceClassification"),RMr=o(" (DeBERTa model)"),PMr=l(),qE=a("li"),d1e=a("strong"),BMr=o("deberta-v2"),IMr=o(" \u2014 "),aU=a("a"),NMr=o("TFDebertaV2ForSequenceClassification"),qMr=o(" (DeBERTa-v2 model)"),jMr=l(),jE=a("li"),c1e=a("strong"),DMr=o("distilbert"),GMr=o(" \u2014 "),nU=a("a"),OMr=o("TFDistilBertForSequenceClassification"),VMr=o(" (DistilBERT model)"),XMr=l(),DE=a("li"),f1e=a("strong"),zMr=o("electra"),WMr=o(" \u2014 "),sU=a("a"),QMr=o("TFElectraForSequenceClassification"),HMr=o(" (ELECTRA model)"),UMr=l(),GE=a("li"),m1e=a("strong"),JMr=o("flaubert"),YMr=o(" \u2014 "),lU=a("a"),KMr=o("TFFlaubertForSequenceClassification"),ZMr=o(" (FlauBERT model)"),e4r=l(),OE=a("li"),g1e=a("strong"),o4r=o("funnel"),r4r=o(" \u2014 "),iU=a("a"),t4r=o("TFFunnelForSequenceClassification"),a4r=o(" (Funnel Transformer model)"),n4r=l(),VE=a("li"),h1e=a("strong"),s4r=o("gpt2"),l4r=o(" \u2014 "),dU=a("a"),i4r=o("TFGPT2ForSequenceClassification"),d4r=o(" (OpenAI GPT-2 model)"),c4r=l(),XE=a("li"),p1e=a("strong"),f4r=o("gptj"),m4r=o(" \u2014 "),cU=a("a"),g4r=o("TFGPTJForSequenceClassification"),h4r=o(" (GPT-J model)"),p4r=l(),zE=a("li"),_1e=a("strong"),_4r=o("layoutlm"),u4r=o(" \u2014 "),fU=a("a"),b4r=o("TFLayoutLMForSequenceClassification"),v4r=o(" (LayoutLM model)"),F4r=l(),WE=a("li"),u1e=a("strong"),T4r=o("longformer"),M4r=o(" \u2014 "),mU=a("a"),E4r=o("TFLongformerForSequenceClassification"),C4r=o(" (Longformer model)"),w4r=l(),QE=a("li"),b1e=a("strong"),A4r=o("mobilebert"),y4r=o(" \u2014 "),gU=a("a"),L4r=o("TFMobileBertForSequenceClassification"),x4r=o(" (MobileBERT model)"),$4r=l(),HE=a("li"),v1e=a("strong"),k4r=o("mpnet"),S4r=o(" \u2014 "),hU=a("a"),R4r=o("TFMPNetForSequenceClassification"),P4r=o(" (MPNet model)"),B4r=l(),UE=a("li"),F1e=a("strong"),I4r=o("openai-gpt"),N4r=o(" \u2014 "),pU=a("a"),q4r=o("TFOpenAIGPTForSequenceClassification"),j4r=o(" (OpenAI GPT model)"),D4r=l(),JE=a("li"),T1e=a("strong"),G4r=o("rembert"),O4r=o(" \u2014 "),_U=a("a"),V4r=o("TFRemBertForSequenceClassification"),X4r=o(" (RemBERT model)"),z4r=l(),YE=a("li"),M1e=a("strong"),W4r=o("roberta"),Q4r=o(" \u2014 "),uU=a("a"),H4r=o("TFRobertaForSequenceClassification"),U4r=o(" (RoBERTa model)"),J4r=l(),KE=a("li"),E1e=a("strong"),Y4r=o("roformer"),K4r=o(" \u2014 "),bU=a("a"),Z4r=o("TFRoFormerForSequenceClassification"),eEr=o(" (RoFormer model)"),oEr=l(),ZE=a("li"),C1e=a("strong"),rEr=o("tapas"),tEr=o(" \u2014 "),vU=a("a"),aEr=o("TFTapasForSequenceClassification"),nEr=o(" (TAPAS model)"),sEr=l(),eC=a("li"),w1e=a("strong"),lEr=o("transfo-xl"),iEr=o(" \u2014 "),FU=a("a"),dEr=o("TFTransfoXLForSequenceClassification"),cEr=o(" (Transformer-XL model)"),fEr=l(),oC=a("li"),A1e=a("strong"),mEr=o("xlm"),gEr=o(" \u2014 "),TU=a("a"),hEr=o("TFXLMForSequenceClassification"),pEr=o(" (XLM model)"),_Er=l(),rC=a("li"),y1e=a("strong"),uEr=o("xlm-roberta"),bEr=o(" \u2014 "),MU=a("a"),vEr=o("TFXLMRobertaForSequenceClassification"),FEr=o(" (XLM-RoBERTa model)"),TEr=l(),tC=a("li"),L1e=a("strong"),MEr=o("xlnet"),EEr=o(" \u2014 "),EU=a("a"),CEr=o("TFXLNetForSequenceClassification"),wEr=o(" (XLNet model)"),AEr=l(),F(aC.$$.fragment),eDe=l(),dc=a("h2"),nC=a("a"),x1e=a("span"),F(K7.$$.fragment),yEr=l(),$1e=a("span"),LEr=o("TFAutoModelForMultipleChoice"),oDe=l(),ar=a("div"),F(Z7.$$.fragment),xEr=l(),cc=a("p"),$Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CU=a("a"),kEr=o("from_pretrained()"),SEr=o(" class method or the "),wU=a("a"),REr=o("from_config()"),PEr=o(` class
method.`),BEr=l(),e9=a("p"),IEr=o("This class cannot be instantiated directly using "),k1e=a("code"),NEr=o("__init__()"),qEr=o(" (throws an error)."),jEr=l(),Pt=a("div"),F(o9.$$.fragment),DEr=l(),S1e=a("p"),GEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OEr=l(),fc=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),XEr=o("not"),zEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),WEr=o("from_pretrained()"),QEr=o(" to load the model weights."),HEr=l(),F(sC.$$.fragment),UEr=l(),Sr=a("div"),F(r9.$$.fragment),JEr=l(),P1e=a("p"),YEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KEr=l(),sn=a("p"),ZEr=o("The model class to instantiate is selected based on the "),B1e=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),pe=a("ul"),lC=a("li"),q1e=a("strong"),lCr=o("albert"),iCr=o(" \u2014 "),yU=a("a"),dCr=o("TFAlbertForMultipleChoice"),cCr=o(" (ALBERT model)"),fCr=l(),iC=a("li"),j1e=a("strong"),mCr=o("bert"),gCr=o(" \u2014 "),LU=a("a"),hCr=o("TFBertForMultipleChoice"),pCr=o(" (BERT model)"),_Cr=l(),dC=a("li"),D1e=a("strong"),uCr=o("camembert"),bCr=o(" \u2014 "),xU=a("a"),vCr=o("TFCamembertForMultipleChoice"),FCr=o(" (CamemBERT model)"),TCr=l(),cC=a("li"),G1e=a("strong"),MCr=o("convbert"),ECr=o(" \u2014 "),$U=a("a"),CCr=o("TFConvBertForMultipleChoice"),wCr=o(" (ConvBERT model)"),ACr=l(),fC=a("li"),O1e=a("strong"),yCr=o("distilbert"),LCr=o(" \u2014 "),kU=a("a"),xCr=o("TFDistilBertForMultipleChoice"),$Cr=o(" (DistilBERT model)"),kCr=l(),mC=a("li"),V1e=a("strong"),SCr=o("electra"),RCr=o(" \u2014 "),SU=a("a"),PCr=o("TFElectraForMultipleChoice"),BCr=o(" (ELECTRA model)"),ICr=l(),gC=a("li"),X1e=a("strong"),NCr=o("flaubert"),qCr=o(" \u2014 "),RU=a("a"),jCr=o("TFFlaubertForMultipleChoice"),DCr=o(" (FlauBERT model)"),GCr=l(),hC=a("li"),z1e=a("strong"),OCr=o("funnel"),VCr=o(" \u2014 "),PU=a("a"),XCr=o("TFFunnelForMultipleChoice"),zCr=o(" (Funnel Transformer model)"),WCr=l(),pC=a("li"),W1e=a("strong"),QCr=o("longformer"),HCr=o(" \u2014 "),BU=a("a"),UCr=o("TFLongformerForMultipleChoice"),JCr=o(" (Longformer model)"),YCr=l(),_C=a("li"),Q1e=a("strong"),KCr=o("mobilebert"),ZCr=o(" \u2014 "),IU=a("a"),e5r=o("TFMobileBertForMultipleChoice"),o5r=o(" (MobileBERT model)"),r5r=l(),uC=a("li"),H1e=a("strong"),t5r=o("mpnet"),a5r=o(" \u2014 "),NU=a("a"),n5r=o("TFMPNetForMultipleChoice"),s5r=o(" (MPNet model)"),l5r=l(),bC=a("li"),U1e=a("strong"),i5r=o("rembert"),d5r=o(" \u2014 "),qU=a("a"),c5r=o("TFRemBertForMultipleChoice"),f5r=o(" (RemBERT model)"),m5r=l(),vC=a("li"),J1e=a("strong"),g5r=o("roberta"),h5r=o(" \u2014 "),jU=a("a"),p5r=o("TFRobertaForMultipleChoice"),_5r=o(" (RoBERTa model)"),u5r=l(),FC=a("li"),Y1e=a("strong"),b5r=o("roformer"),v5r=o(" \u2014 "),DU=a("a"),F5r=o("TFRoFormerForMultipleChoice"),T5r=o(" (RoFormer model)"),M5r=l(),TC=a("li"),K1e=a("strong"),E5r=o("xlm"),C5r=o(" \u2014 "),GU=a("a"),w5r=o("TFXLMForMultipleChoice"),A5r=o(" (XLM model)"),y5r=l(),MC=a("li"),Z1e=a("strong"),L5r=o("xlm-roberta"),x5r=o(" \u2014 "),OU=a("a"),$5r=o("TFXLMRobertaForMultipleChoice"),k5r=o(" (XLM-RoBERTa model)"),S5r=l(),EC=a("li"),eTe=a("strong"),R5r=o("xlnet"),P5r=o(" \u2014 "),VU=a("a"),B5r=o("TFXLNetForMultipleChoice"),I5r=o(" (XLNet model)"),N5r=l(),F(CC.$$.fragment),rDe=l(),mc=a("h2"),wC=a("a"),oTe=a("span"),F(t9.$$.fragment),q5r=l(),rTe=a("span"),j5r=o("TFAutoModelForNextSentencePrediction"),tDe=l(),nr=a("div"),F(a9.$$.fragment),D5r=l(),gc=a("p"),G5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XU=a("a"),O5r=o("from_pretrained()"),V5r=o(" class method or the "),zU=a("a"),X5r=o("from_config()"),z5r=o(` class
method.`),W5r=l(),n9=a("p"),Q5r=o("This class cannot be instantiated directly using "),tTe=a("code"),H5r=o("__init__()"),U5r=o(" (throws an error)."),J5r=l(),Bt=a("div"),F(s9.$$.fragment),Y5r=l(),aTe=a("p"),K5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Z5r=l(),hc=a("p"),e3r=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),o3r=o("not"),r3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),t3r=o("from_pretrained()"),a3r=o(" to load the model weights."),n3r=l(),F(AC.$$.fragment),s3r=l(),Rr=a("div"),F(l9.$$.fragment),l3r=l(),sTe=a("p"),i3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),d3r=l(),ln=a("p"),c3r=o("The model class to instantiate is selected based on the "),lTe=a("code"),f3r=o("model_type"),m3r=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(":"),u3r=l(),i9=a("ul"),yC=a("li"),cTe=a("strong"),b3r=o("bert"),v3r=o(" \u2014 "),QU=a("a"),F3r=o("TFBertForNextSentencePrediction"),T3r=o(" (BERT model)"),M3r=l(),LC=a("li"),fTe=a("strong"),E3r=o("mobilebert"),C3r=o(" \u2014 "),HU=a("a"),w3r=o("TFMobileBertForNextSentencePrediction"),A3r=o(" (MobileBERT model)"),y3r=l(),F(xC.$$.fragment),aDe=l(),pc=a("h2"),$C=a("a"),mTe=a("span"),F(d9.$$.fragment),L3r=l(),gTe=a("span"),x3r=o("TFAutoModelForTableQuestionAnswering"),nDe=l(),sr=a("div"),F(c9.$$.fragment),$3r=l(),_c=a("p"),k3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UU=a("a"),S3r=o("from_pretrained()"),R3r=o(" class method or the "),JU=a("a"),P3r=o("from_config()"),B3r=o(` class
method.`),I3r=l(),f9=a("p"),N3r=o("This class cannot be instantiated directly using "),hTe=a("code"),q3r=o("__init__()"),j3r=o(" (throws an error)."),D3r=l(),It=a("div"),F(m9.$$.fragment),G3r=l(),pTe=a("p"),O3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),V3r=l(),uc=a("p"),X3r=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),z3r=o("not"),W3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),Q3r=o("from_pretrained()"),H3r=o(" to load the model weights."),U3r=l(),F(kC.$$.fragment),J3r=l(),Pr=a("div"),F(g9.$$.fragment),Y3r=l(),uTe=a("p"),K3r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z3r=l(),dn=a("p"),e0r=o("The model class to instantiate is selected based on the "),bTe=a("code"),o0r=o("model_type"),r0r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(":"),l0r=l(),TTe=a("ul"),SC=a("li"),MTe=a("strong"),i0r=o("tapas"),d0r=o(" \u2014 "),KU=a("a"),c0r=o("TFTapasForQuestionAnswering"),f0r=o(" (TAPAS model)"),m0r=l(),F(RC.$$.fragment),sDe=l(),bc=a("h2"),PC=a("a"),ETe=a("span"),F(h9.$$.fragment),g0r=l(),CTe=a("span"),h0r=o("TFAutoModelForTokenClassification"),lDe=l(),lr=a("div"),F(p9.$$.fragment),p0r=l(),vc=a("p"),_0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZU=a("a"),u0r=o("from_pretrained()"),b0r=o(" class method or the "),eJ=a("a"),v0r=o("from_config()"),F0r=o(` class
method.`),T0r=l(),_9=a("p"),M0r=o("This class cannot be instantiated directly using "),wTe=a("code"),E0r=o("__init__()"),C0r=o(" (throws an error)."),w0r=l(),Nt=a("div"),F(u9.$$.fragment),A0r=l(),ATe=a("p"),y0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),L0r=l(),Fc=a("p"),x0r=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),$0r=o("not"),k0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),S0r=o("from_pretrained()"),R0r=o(" to load the model weights."),P0r=l(),F(BC.$$.fragment),B0r=l(),Br=a("div"),F(b9.$$.fragment),I0r=l(),LTe=a("p"),N0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q0r=l(),cn=a("p"),j0r=o("The model class to instantiate is selected based on the "),xTe=a("code"),D0r=o("model_type"),G0r=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(":"),W0r=l(),de=a("ul"),IC=a("li"),STe=a("strong"),Q0r=o("albert"),H0r=o(" \u2014 "),rJ=a("a"),U0r=o("TFAlbertForTokenClassification"),J0r=o(" (ALBERT model)"),Y0r=l(),NC=a("li"),RTe=a("strong"),K0r=o("bert"),Z0r=o(" \u2014 "),tJ=a("a"),ewr=o("TFBertForTokenClassification"),owr=o(" (BERT model)"),rwr=l(),qC=a("li"),PTe=a("strong"),twr=o("camembert"),awr=o(" \u2014 "),aJ=a("a"),nwr=o("TFCamembertForTokenClassification"),swr=o(" (CamemBERT model)"),lwr=l(),jC=a("li"),BTe=a("strong"),iwr=o("convbert"),dwr=o(" \u2014 "),nJ=a("a"),cwr=o("TFConvBertForTokenClassification"),fwr=o(" (ConvBERT model)"),mwr=l(),DC=a("li"),ITe=a("strong"),gwr=o("deberta"),hwr=o(" \u2014 "),sJ=a("a"),pwr=o("TFDebertaForTokenClassification"),_wr=o(" (DeBERTa model)"),uwr=l(),GC=a("li"),NTe=a("strong"),bwr=o("deberta-v2"),vwr=o(" \u2014 "),lJ=a("a"),Fwr=o("TFDebertaV2ForTokenClassification"),Twr=o(" (DeBERTa-v2 model)"),Mwr=l(),OC=a("li"),qTe=a("strong"),Ewr=o("distilbert"),Cwr=o(" \u2014 "),iJ=a("a"),wwr=o("TFDistilBertForTokenClassification"),Awr=o(" (DistilBERT model)"),ywr=l(),VC=a("li"),jTe=a("strong"),Lwr=o("electra"),xwr=o(" \u2014 "),dJ=a("a"),$wr=o("TFElectraForTokenClassification"),kwr=o(" (ELECTRA model)"),Swr=l(),XC=a("li"),DTe=a("strong"),Rwr=o("flaubert"),Pwr=o(" \u2014 "),cJ=a("a"),Bwr=o("TFFlaubertForTokenClassification"),Iwr=o(" (FlauBERT model)"),Nwr=l(),zC=a("li"),GTe=a("strong"),qwr=o("funnel"),jwr=o(" \u2014 "),fJ=a("a"),Dwr=o("TFFunnelForTokenClassification"),Gwr=o(" (Funnel Transformer model)"),Owr=l(),WC=a("li"),OTe=a("strong"),Vwr=o("layoutlm"),Xwr=o(" \u2014 "),mJ=a("a"),zwr=o("TFLayoutLMForTokenClassification"),Wwr=o(" (LayoutLM model)"),Qwr=l(),QC=a("li"),VTe=a("strong"),Hwr=o("longformer"),Uwr=o(" \u2014 "),gJ=a("a"),Jwr=o("TFLongformerForTokenClassification"),Ywr=o(" (Longformer model)"),Kwr=l(),HC=a("li"),XTe=a("strong"),Zwr=o("mobilebert"),eAr=o(" \u2014 "),hJ=a("a"),oAr=o("TFMobileBertForTokenClassification"),rAr=o(" (MobileBERT model)"),tAr=l(),UC=a("li"),zTe=a("strong"),aAr=o("mpnet"),nAr=o(" \u2014 "),pJ=a("a"),sAr=o("TFMPNetForTokenClassification"),lAr=o(" (MPNet model)"),iAr=l(),JC=a("li"),WTe=a("strong"),dAr=o("rembert"),cAr=o(" \u2014 "),_J=a("a"),fAr=o("TFRemBertForTokenClassification"),mAr=o(" (RemBERT model)"),gAr=l(),YC=a("li"),QTe=a("strong"),hAr=o("roberta"),pAr=o(" \u2014 "),uJ=a("a"),_Ar=o("TFRobertaForTokenClassification"),uAr=o(" (RoBERTa model)"),bAr=l(),KC=a("li"),HTe=a("strong"),vAr=o("roformer"),FAr=o(" \u2014 "),bJ=a("a"),TAr=o("TFRoFormerForTokenClassification"),MAr=o(" (RoFormer model)"),EAr=l(),ZC=a("li"),UTe=a("strong"),CAr=o("xlm"),wAr=o(" \u2014 "),vJ=a("a"),AAr=o("TFXLMForTokenClassification"),yAr=o(" (XLM model)"),LAr=l(),e5=a("li"),JTe=a("strong"),xAr=o("xlm-roberta"),$Ar=o(" \u2014 "),FJ=a("a"),kAr=o("TFXLMRobertaForTokenClassification"),SAr=o(" (XLM-RoBERTa model)"),RAr=l(),o5=a("li"),YTe=a("strong"),PAr=o("xlnet"),BAr=o(" \u2014 "),TJ=a("a"),IAr=o("TFXLNetForTokenClassification"),NAr=o(" (XLNet model)"),qAr=l(),F(r5.$$.fragment),iDe=l(),Tc=a("h2"),t5=a("a"),KTe=a("span"),F(v9.$$.fragment),jAr=l(),ZTe=a("span"),DAr=o("TFAutoModelForQuestionAnswering"),dDe=l(),ir=a("div"),F(F9.$$.fragment),GAr=l(),Mc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),EJ=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),T9=a("p"),HAr=o("This class cannot be instantiated directly using "),eMe=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),qt=a("div"),F(M9.$$.fragment),KAr=l(),oMe=a("p"),ZAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eyr=l(),Ec=a("p"),oyr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),ryr=o("not"),tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),ayr=o("from_pretrained()"),nyr=o(" to load the model weights."),syr=l(),F(a5.$$.fragment),lyr=l(),Ir=a("div"),F(E9.$$.fragment),iyr=l(),tMe=a("p"),dyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cyr=l(),fn=a("p"),fyr=o("The model class to instantiate is selected based on the "),aMe=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),ce=a("ul"),n5=a("li"),lMe=a("strong"),vyr=o("albert"),Fyr=o(" \u2014 "),wJ=a("a"),Tyr=o("TFAlbertForQuestionAnswering"),Myr=o(" (ALBERT model)"),Eyr=l(),s5=a("li"),iMe=a("strong"),Cyr=o("bert"),wyr=o(" \u2014 "),AJ=a("a"),Ayr=o("TFBertForQuestionAnswering"),yyr=o(" (BERT model)"),Lyr=l(),l5=a("li"),dMe=a("strong"),xyr=o("camembert"),$yr=o(" \u2014 "),yJ=a("a"),kyr=o("TFCamembertForQuestionAnswering"),Syr=o(" (CamemBERT model)"),Ryr=l(),i5=a("li"),cMe=a("strong"),Pyr=o("convbert"),Byr=o(" \u2014 "),LJ=a("a"),Iyr=o("TFConvBertForQuestionAnswering"),Nyr=o(" (ConvBERT model)"),qyr=l(),d5=a("li"),fMe=a("strong"),jyr=o("deberta"),Dyr=o(" \u2014 "),xJ=a("a"),Gyr=o("TFDebertaForQuestionAnswering"),Oyr=o(" (DeBERTa model)"),Vyr=l(),c5=a("li"),mMe=a("strong"),Xyr=o("deberta-v2"),zyr=o(" \u2014 "),$J=a("a"),Wyr=o("TFDebertaV2ForQuestionAnswering"),Qyr=o(" (DeBERTa-v2 model)"),Hyr=l(),f5=a("li"),gMe=a("strong"),Uyr=o("distilbert"),Jyr=o(" \u2014 "),kJ=a("a"),Yyr=o("TFDistilBertForQuestionAnswering"),Kyr=o(" (DistilBERT model)"),Zyr=l(),m5=a("li"),hMe=a("strong"),eLr=o("electra"),oLr=o(" \u2014 "),SJ=a("a"),rLr=o("TFElectraForQuestionAnswering"),tLr=o(" (ELECTRA model)"),aLr=l(),g5=a("li"),pMe=a("strong"),nLr=o("flaubert"),sLr=o(" \u2014 "),RJ=a("a"),lLr=o("TFFlaubertForQuestionAnsweringSimple"),iLr=o(" (FlauBERT model)"),dLr=l(),h5=a("li"),_Me=a("strong"),cLr=o("funnel"),fLr=o(" \u2014 "),PJ=a("a"),mLr=o("TFFunnelForQuestionAnswering"),gLr=o(" (Funnel Transformer model)"),hLr=l(),p5=a("li"),uMe=a("strong"),pLr=o("gptj"),_Lr=o(" \u2014 "),BJ=a("a"),uLr=o("TFGPTJForQuestionAnswering"),bLr=o(" (GPT-J model)"),vLr=l(),_5=a("li"),bMe=a("strong"),FLr=o("longformer"),TLr=o(" \u2014 "),IJ=a("a"),MLr=o("TFLongformerForQuestionAnswering"),ELr=o(" (Longformer model)"),CLr=l(),u5=a("li"),vMe=a("strong"),wLr=o("mobilebert"),ALr=o(" \u2014 "),NJ=a("a"),yLr=o("TFMobileBertForQuestionAnswering"),LLr=o(" (MobileBERT model)"),xLr=l(),b5=a("li"),FMe=a("strong"),$Lr=o("mpnet"),kLr=o(" \u2014 "),qJ=a("a"),SLr=o("TFMPNetForQuestionAnswering"),RLr=o(" (MPNet model)"),PLr=l(),v5=a("li"),TMe=a("strong"),BLr=o("rembert"),ILr=o(" \u2014 "),jJ=a("a"),NLr=o("TFRemBertForQuestionAnswering"),qLr=o(" (RemBERT model)"),jLr=l(),F5=a("li"),MMe=a("strong"),DLr=o("roberta"),GLr=o(" \u2014 "),DJ=a("a"),OLr=o("TFRobertaForQuestionAnswering"),VLr=o(" (RoBERTa model)"),XLr=l(),T5=a("li"),EMe=a("strong"),zLr=o("roformer"),WLr=o(" \u2014 "),GJ=a("a"),QLr=o("TFRoFormerForQuestionAnswering"),HLr=o(" (RoFormer model)"),ULr=l(),M5=a("li"),CMe=a("strong"),JLr=o("xlm"),YLr=o(" \u2014 "),OJ=a("a"),KLr=o("TFXLMForQuestionAnsweringSimple"),ZLr=o(" (XLM model)"),e8r=l(),E5=a("li"),wMe=a("strong"),o8r=o("xlm-roberta"),r8r=o(" \u2014 "),VJ=a("a"),t8r=o("TFXLMRobertaForQuestionAnswering"),a8r=o(" (XLM-RoBERTa model)"),n8r=l(),C5=a("li"),AMe=a("strong"),s8r=o("xlnet"),l8r=o(" \u2014 "),XJ=a("a"),i8r=o("TFXLNetForQuestionAnsweringSimple"),d8r=o(" (XLNet model)"),c8r=l(),F(w5.$$.fragment),cDe=l(),Cc=a("h2"),A5=a("a"),yMe=a("span"),F(C9.$$.fragment),f8r=l(),LMe=a("span"),m8r=o("TFAutoModelForVision2Seq"),fDe=l(),dr=a("div"),F(w9.$$.fragment),g8r=l(),wc=a("p"),h8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=a("a"),p8r=o("from_pretrained()"),_8r=o(" class method or the "),WJ=a("a"),u8r=o("from_config()"),b8r=o(` class
method.`),v8r=l(),A9=a("p"),F8r=o("This class cannot be instantiated directly using "),xMe=a("code"),T8r=o("__init__()"),M8r=o(" (throws an error)."),E8r=l(),jt=a("div"),F(y9.$$.fragment),C8r=l(),$Me=a("p"),w8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A8r=l(),Ac=a("p"),y8r=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),L8r=o("not"),x8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),$8r=o("from_pretrained()"),k8r=o(" to load the model weights."),S8r=l(),F(y5.$$.fragment),R8r=l(),Nr=a("div"),F(L9.$$.fragment),P8r=l(),SMe=a("p"),B8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),I8r=l(),mn=a("p"),N8r=o("The model class to instantiate is selected based on the "),RMe=a("code"),q8r=o("model_type"),j8r=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),O8r=o("pretrained_model_name_or_path"),V8r=o(":"),X8r=l(),IMe=a("ul"),L5=a("li"),NMe=a("strong"),z8r=o("vision-encoder-decoder"),W8r=o(" \u2014 "),HJ=a("a"),Q8r=o("TFVisionEncoderDecoderModel"),H8r=o(" (Vision Encoder decoder model)"),U8r=l(),F(x5.$$.fragment),mDe=l(),yc=a("h2"),$5=a("a"),qMe=a("span"),F(x9.$$.fragment),J8r=l(),jMe=a("span"),Y8r=o("TFAutoModelForSpeechSeq2Seq"),gDe=l(),cr=a("div"),F($9.$$.fragment),K8r=l(),Lc=a("p"),Z8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UJ=a("a"),e7r=o("from_pretrained()"),o7r=o(" class method or the "),JJ=a("a"),r7r=o("from_config()"),t7r=o(` class
method.`),a7r=l(),k9=a("p"),n7r=o("This class cannot be instantiated directly using "),DMe=a("code"),s7r=o("__init__()"),l7r=o(" (throws an error)."),i7r=l(),Dt=a("div"),F(S9.$$.fragment),d7r=l(),GMe=a("p"),c7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),f7r=l(),xc=a("p"),m7r=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),g7r=o("not"),h7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),p7r=o("from_pretrained()"),_7r=o(" to load the model weights."),u7r=l(),F(k5.$$.fragment),b7r=l(),qr=a("div"),F(R9.$$.fragment),v7r=l(),VMe=a("p"),F7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),T7r=l(),gn=a("p"),M7r=o("The model class to instantiate is selected based on the "),XMe=a("code"),E7r=o("model_type"),C7r=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(":"),x7r=l(),QMe=a("ul"),S5=a("li"),HMe=a("strong"),$7r=o("speech_to_text"),k7r=o(" \u2014 "),KJ=a("a"),S7r=o("TFSpeech2TextForConditionalGeneration"),R7r=o(" (Speech2Text model)"),P7r=l(),F(R5.$$.fragment),hDe=l(),$c=a("h2"),P5=a("a"),UMe=a("span"),F(P9.$$.fragment),B7r=l(),JMe=a("span"),I7r=o("FlaxAutoModel"),pDe=l(),fr=a("div"),F(B9.$$.fragment),N7r=l(),kc=a("p"),q7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZJ=a("a"),j7r=o("from_pretrained()"),D7r=o(" class method or the "),eY=a("a"),G7r=o("from_config()"),O7r=o(` class
method.`),V7r=l(),I9=a("p"),X7r=o("This class cannot be instantiated directly using "),YMe=a("code"),z7r=o("__init__()"),W7r=o(" (throws an error)."),Q7r=l(),Gt=a("div"),F(N9.$$.fragment),H7r=l(),KMe=a("p"),U7r=o("Instantiates one of the base model classes of the library from a configuration."),J7r=l(),Sc=a("p"),Y7r=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),K7r=o("not"),Z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),F(B5.$$.fragment),t9r=l(),jr=a("div"),F(q9.$$.fragment),a9r=l(),e4e=a("p"),n9r=o("Instantiate one of the base model classes of the library from a pretrained model."),s9r=l(),hn=a("p"),l9r=o("The model class to instantiate is selected based on the "),o4e=a("code"),i9r=o("model_type"),d9r=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(":"),h9r=l(),re=a("ul"),I5=a("li"),a4e=a("strong"),p9r=o("albert"),_9r=o(" \u2014 "),rY=a("a"),u9r=o("FlaxAlbertModel"),b9r=o(" (ALBERT model)"),v9r=l(),N5=a("li"),n4e=a("strong"),F9r=o("bart"),T9r=o(" \u2014 "),tY=a("a"),M9r=o("FlaxBartModel"),E9r=o(" (BART model)"),C9r=l(),q5=a("li"),s4e=a("strong"),w9r=o("beit"),A9r=o(" \u2014 "),aY=a("a"),y9r=o("FlaxBeitModel"),L9r=o(" (BEiT model)"),x9r=l(),j5=a("li"),l4e=a("strong"),$9r=o("bert"),k9r=o(" \u2014 "),nY=a("a"),S9r=o("FlaxBertModel"),R9r=o(" (BERT model)"),P9r=l(),D5=a("li"),i4e=a("strong"),B9r=o("big_bird"),I9r=o(" \u2014 "),sY=a("a"),N9r=o("FlaxBigBirdModel"),q9r=o(" (BigBird model)"),j9r=l(),G5=a("li"),d4e=a("strong"),D9r=o("blenderbot"),G9r=o(" \u2014 "),lY=a("a"),O9r=o("FlaxBlenderbotModel"),V9r=o(" (Blenderbot model)"),X9r=l(),O5=a("li"),c4e=a("strong"),z9r=o("blenderbot-small"),W9r=o(" \u2014 "),iY=a("a"),Q9r=o("FlaxBlenderbotSmallModel"),H9r=o(" (BlenderbotSmall model)"),U9r=l(),V5=a("li"),f4e=a("strong"),J9r=o("clip"),Y9r=o(" \u2014 "),dY=a("a"),K9r=o("FlaxCLIPModel"),Z9r=o(" (CLIP model)"),exr=l(),X5=a("li"),m4e=a("strong"),oxr=o("distilbert"),rxr=o(" \u2014 "),cY=a("a"),txr=o("FlaxDistilBertModel"),axr=o(" (DistilBERT model)"),nxr=l(),z5=a("li"),g4e=a("strong"),sxr=o("electra"),lxr=o(" \u2014 "),fY=a("a"),ixr=o("FlaxElectraModel"),dxr=o(" (ELECTRA model)"),cxr=l(),W5=a("li"),h4e=a("strong"),fxr=o("gpt2"),mxr=o(" \u2014 "),mY=a("a"),gxr=o("FlaxGPT2Model"),hxr=o(" (OpenAI GPT-2 model)"),pxr=l(),Q5=a("li"),p4e=a("strong"),_xr=o("gpt_neo"),uxr=o(" \u2014 "),gY=a("a"),bxr=o("FlaxGPTNeoModel"),vxr=o(" (GPT Neo model)"),Fxr=l(),H5=a("li"),_4e=a("strong"),Txr=o("gptj"),Mxr=o(" \u2014 "),hY=a("a"),Exr=o("FlaxGPTJModel"),Cxr=o(" (GPT-J model)"),wxr=l(),U5=a("li"),u4e=a("strong"),Axr=o("marian"),yxr=o(" \u2014 "),pY=a("a"),Lxr=o("FlaxMarianModel"),xxr=o(" (Marian model)"),$xr=l(),J5=a("li"),b4e=a("strong"),kxr=o("mbart"),Sxr=o(" \u2014 "),_Y=a("a"),Rxr=o("FlaxMBartModel"),Pxr=o(" (mBART model)"),Bxr=l(),Y5=a("li"),v4e=a("strong"),Ixr=o("mt5"),Nxr=o(" \u2014 "),uY=a("a"),qxr=o("FlaxMT5Model"),jxr=o(" (MT5 model)"),Dxr=l(),K5=a("li"),F4e=a("strong"),Gxr=o("opt"),Oxr=o(" \u2014 "),bY=a("a"),Vxr=o("FlaxOPTModel"),Xxr=o(" (OPT model)"),zxr=l(),Z5=a("li"),T4e=a("strong"),Wxr=o("pegasus"),Qxr=o(" \u2014 "),vY=a("a"),Hxr=o("FlaxPegasusModel"),Uxr=o(" (Pegasus model)"),Jxr=l(),e3=a("li"),M4e=a("strong"),Yxr=o("roberta"),Kxr=o(" \u2014 "),FY=a("a"),Zxr=o("FlaxRobertaModel"),e$r=o(" (RoBERTa model)"),o$r=l(),o3=a("li"),E4e=a("strong"),r$r=o("roformer"),t$r=o(" \u2014 "),TY=a("a"),a$r=o("FlaxRoFormerModel"),n$r=o(" (RoFormer model)"),s$r=l(),r3=a("li"),C4e=a("strong"),l$r=o("t5"),i$r=o(" \u2014 "),MY=a("a"),d$r=o("FlaxT5Model"),c$r=o(" (T5 model)"),f$r=l(),t3=a("li"),w4e=a("strong"),m$r=o("vision-text-dual-encoder"),g$r=o(" \u2014 "),EY=a("a"),h$r=o("FlaxVisionTextDualEncoderModel"),p$r=o(" (VisionTextDualEncoder model)"),_$r=l(),a3=a("li"),A4e=a("strong"),u$r=o("vit"),b$r=o(" \u2014 "),CY=a("a"),v$r=o("FlaxViTModel"),F$r=o(" (ViT model)"),T$r=l(),n3=a("li"),y4e=a("strong"),M$r=o("wav2vec2"),E$r=o(" \u2014 "),wY=a("a"),C$r=o("FlaxWav2Vec2Model"),w$r=o(" (Wav2Vec2 model)"),A$r=l(),s3=a("li"),L4e=a("strong"),y$r=o("xglm"),L$r=o(" \u2014 "),AY=a("a"),x$r=o("FlaxXGLMModel"),$$r=o(" (XGLM model)"),k$r=l(),l3=a("li"),x4e=a("strong"),S$r=o("xlm-roberta"),R$r=o(" \u2014 "),yY=a("a"),P$r=o("FlaxXLMRobertaModel"),B$r=o(" (XLM-RoBERTa model)"),I$r=l(),F(i3.$$.fragment),_De=l(),Rc=a("h2"),d3=a("a"),$4e=a("span"),F(j9.$$.fragment),N$r=l(),k4e=a("span"),q$r=o("FlaxAutoModelForCausalLM"),uDe=l(),mr=a("div"),F(D9.$$.fragment),j$r=l(),Pc=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LY=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),xY=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),G9=a("p"),W$r=o("This class cannot be instantiated directly using "),S4e=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Ot=a("div"),F(O9.$$.fragment),J$r=l(),R4e=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K$r=l(),Bc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(c3.$$.fragment),nkr=l(),Dr=a("div"),F(V9.$$.fragment),skr=l(),B4e=a("p"),lkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ikr=l(),pn=a("p"),dkr=o("The model class to instantiate is selected based on the "),I4e=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),_kr=l(),Le=a("ul"),f3=a("li"),j4e=a("strong"),ukr=o("bart"),bkr=o(" \u2014 "),kY=a("a"),vkr=o("FlaxBartForCausalLM"),Fkr=o(" (BART model)"),Tkr=l(),m3=a("li"),D4e=a("strong"),Mkr=o("bert"),Ekr=o(" \u2014 "),SY=a("a"),Ckr=o("FlaxBertForCausalLM"),wkr=o(" (BERT model)"),Akr=l(),g3=a("li"),G4e=a("strong"),ykr=o("big_bird"),Lkr=o(" \u2014 "),RY=a("a"),xkr=o("FlaxBigBirdForCausalLM"),$kr=o(" (BigBird model)"),kkr=l(),h3=a("li"),O4e=a("strong"),Skr=o("electra"),Rkr=o(" \u2014 "),PY=a("a"),Pkr=o("FlaxElectraForCausalLM"),Bkr=o(" (ELECTRA model)"),Ikr=l(),p3=a("li"),V4e=a("strong"),Nkr=o("gpt2"),qkr=o(" \u2014 "),BY=a("a"),jkr=o("FlaxGPT2LMHeadModel"),Dkr=o(" (OpenAI GPT-2 model)"),Gkr=l(),_3=a("li"),X4e=a("strong"),Okr=o("gpt_neo"),Vkr=o(" \u2014 "),IY=a("a"),Xkr=o("FlaxGPTNeoForCausalLM"),zkr=o(" (GPT Neo model)"),Wkr=l(),u3=a("li"),z4e=a("strong"),Qkr=o("gptj"),Hkr=o(" \u2014 "),NY=a("a"),Ukr=o("FlaxGPTJForCausalLM"),Jkr=o(" (GPT-J model)"),Ykr=l(),b3=a("li"),W4e=a("strong"),Kkr=o("opt"),Zkr=o(" \u2014 "),qY=a("a"),eSr=o("FlaxOPTForCausalLM"),oSr=o(" (OPT model)"),rSr=l(),v3=a("li"),Q4e=a("strong"),tSr=o("roberta"),aSr=o(" \u2014 "),jY=a("a"),nSr=o("FlaxRobertaForCausalLM"),sSr=o(" (RoBERTa model)"),lSr=l(),F3=a("li"),H4e=a("strong"),iSr=o("xglm"),dSr=o(" \u2014 "),DY=a("a"),cSr=o("FlaxXGLMForCausalLM"),fSr=o(" (XGLM model)"),mSr=l(),F(T3.$$.fragment),bDe=l(),Ic=a("h2"),M3=a("a"),U4e=a("span"),F(X9.$$.fragment),gSr=l(),J4e=a("span"),hSr=o("FlaxAutoModelForPreTraining"),vDe=l(),gr=a("div"),F(z9.$$.fragment),pSr=l(),Nc=a("p"),_Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=a("a"),uSr=o("from_pretrained()"),bSr=o(" class method or the "),OY=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),W9=a("p"),MSr=o("This class cannot be instantiated directly using "),Y4e=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),Vt=a("div"),F(Q9.$$.fragment),ASr=l(),K4e=a("p"),ySr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LSr=l(),qc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),PSr=l(),F(E3.$$.fragment),BSr=l(),Gr=a("div"),F(H9.$$.fragment),ISr=l(),eEe=a("p"),NSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qSr=l(),_n=a("p"),jSr=o("The model class to instantiate is selected based on the "),oEe=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),WSr=l(),Ee=a("ul"),C3=a("li"),aEe=a("strong"),QSr=o("albert"),HSr=o(" \u2014 "),XY=a("a"),USr=o("FlaxAlbertForPreTraining"),JSr=o(" (ALBERT model)"),YSr=l(),w3=a("li"),nEe=a("strong"),KSr=o("bart"),ZSr=o(" \u2014 "),zY=a("a"),eRr=o("FlaxBartForConditionalGeneration"),oRr=o(" (BART model)"),rRr=l(),A3=a("li"),sEe=a("strong"),tRr=o("bert"),aRr=o(" \u2014 "),WY=a("a"),nRr=o("FlaxBertForPreTraining"),sRr=o(" (BERT model)"),lRr=l(),y3=a("li"),lEe=a("strong"),iRr=o("big_bird"),dRr=o(" \u2014 "),QY=a("a"),cRr=o("FlaxBigBirdForPreTraining"),fRr=o(" (BigBird model)"),mRr=l(),L3=a("li"),iEe=a("strong"),gRr=o("electra"),hRr=o(" \u2014 "),HY=a("a"),pRr=o("FlaxElectraForPreTraining"),_Rr=o(" (ELECTRA model)"),uRr=l(),x3=a("li"),dEe=a("strong"),bRr=o("mbart"),vRr=o(" \u2014 "),UY=a("a"),FRr=o("FlaxMBartForConditionalGeneration"),TRr=o(" (mBART model)"),MRr=l(),$3=a("li"),cEe=a("strong"),ERr=o("mt5"),CRr=o(" \u2014 "),JY=a("a"),wRr=o("FlaxMT5ForConditionalGeneration"),ARr=o(" (MT5 model)"),yRr=l(),k3=a("li"),fEe=a("strong"),LRr=o("roberta"),xRr=o(" \u2014 "),YY=a("a"),$Rr=o("FlaxRobertaForMaskedLM"),kRr=o(" (RoBERTa model)"),SRr=l(),S3=a("li"),mEe=a("strong"),RRr=o("roformer"),PRr=o(" \u2014 "),KY=a("a"),BRr=o("FlaxRoFormerForMaskedLM"),IRr=o(" (RoFormer model)"),NRr=l(),R3=a("li"),gEe=a("strong"),qRr=o("t5"),jRr=o(" \u2014 "),ZY=a("a"),DRr=o("FlaxT5ForConditionalGeneration"),GRr=o(" (T5 model)"),ORr=l(),P3=a("li"),hEe=a("strong"),VRr=o("wav2vec2"),XRr=o(" \u2014 "),eK=a("a"),zRr=o("FlaxWav2Vec2ForPreTraining"),WRr=o(" (Wav2Vec2 model)"),QRr=l(),B3=a("li"),pEe=a("strong"),HRr=o("xlm-roberta"),URr=o(" \u2014 "),oK=a("a"),JRr=o("FlaxXLMRobertaForMaskedLM"),YRr=o(" (XLM-RoBERTa model)"),KRr=l(),F(I3.$$.fragment),FDe=l(),jc=a("h2"),N3=a("a"),_Ee=a("span"),F(U9.$$.fragment),ZRr=l(),uEe=a("span"),ePr=o("FlaxAutoModelForMaskedLM"),TDe=l(),hr=a("div"),F(J9.$$.fragment),oPr=l(),Dc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rK=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),tK=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Y9=a("p"),iPr=o("This class cannot be instantiated directly using "),bEe=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),fPr=l(),Xt=a("div"),F(K9.$$.fragment),mPr=l(),vEe=a("p"),gPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hPr=l(),Gc=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),_Pr=o("not"),uPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(q3.$$.fragment),TPr=l(),Or=a("div"),F(Z9.$$.fragment),MPr=l(),TEe=a("p"),EPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CPr=l(),un=a("p"),wPr=o("The model class to instantiate is selected based on the "),MEe=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),xe=a("ul"),j3=a("li"),wEe=a("strong"),RPr=o("albert"),PPr=o(" \u2014 "),nK=a("a"),BPr=o("FlaxAlbertForMaskedLM"),IPr=o(" (ALBERT model)"),NPr=l(),D3=a("li"),AEe=a("strong"),qPr=o("bart"),jPr=o(" \u2014 "),sK=a("a"),DPr=o("FlaxBartForConditionalGeneration"),GPr=o(" (BART model)"),OPr=l(),G3=a("li"),yEe=a("strong"),VPr=o("bert"),XPr=o(" \u2014 "),lK=a("a"),zPr=o("FlaxBertForMaskedLM"),WPr=o(" (BERT model)"),QPr=l(),O3=a("li"),LEe=a("strong"),HPr=o("big_bird"),UPr=o(" \u2014 "),iK=a("a"),JPr=o("FlaxBigBirdForMaskedLM"),YPr=o(" (BigBird model)"),KPr=l(),V3=a("li"),xEe=a("strong"),ZPr=o("distilbert"),eBr=o(" \u2014 "),dK=a("a"),oBr=o("FlaxDistilBertForMaskedLM"),rBr=o(" (DistilBERT model)"),tBr=l(),X3=a("li"),$Ee=a("strong"),aBr=o("electra"),nBr=o(" \u2014 "),cK=a("a"),sBr=o("FlaxElectraForMaskedLM"),lBr=o(" (ELECTRA model)"),iBr=l(),z3=a("li"),kEe=a("strong"),dBr=o("mbart"),cBr=o(" \u2014 "),fK=a("a"),fBr=o("FlaxMBartForConditionalGeneration"),mBr=o(" (mBART model)"),gBr=l(),W3=a("li"),SEe=a("strong"),hBr=o("roberta"),pBr=o(" \u2014 "),mK=a("a"),_Br=o("FlaxRobertaForMaskedLM"),uBr=o(" (RoBERTa model)"),bBr=l(),Q3=a("li"),REe=a("strong"),vBr=o("roformer"),FBr=o(" \u2014 "),gK=a("a"),TBr=o("FlaxRoFormerForMaskedLM"),MBr=o(" (RoFormer model)"),EBr=l(),H3=a("li"),PEe=a("strong"),CBr=o("xlm-roberta"),wBr=o(" \u2014 "),hK=a("a"),ABr=o("FlaxXLMRobertaForMaskedLM"),yBr=o(" (XLM-RoBERTa model)"),LBr=l(),F(U3.$$.fragment),MDe=l(),Oc=a("h2"),J3=a("a"),BEe=a("span"),F(ex.$$.fragment),xBr=l(),IEe=a("span"),$Br=o("FlaxAutoModelForSeq2SeqLM"),EDe=l(),pr=a("div"),F(ox.$$.fragment),kBr=l(),Vc=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=a("a"),RBr=o("from_pretrained()"),PBr=o(" class method or the "),_K=a("a"),BBr=o("from_config()"),IBr=o(` class
method.`),NBr=l(),rx=a("p"),qBr=o("This class cannot be instantiated directly using "),NEe=a("code"),jBr=o("__init__()"),DBr=o(" (throws an error)."),GBr=l(),zt=a("div"),F(tx.$$.fragment),OBr=l(),qEe=a("p"),VBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XBr=l(),Xc=a("p"),zBr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),WBr=o("not"),QBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),HBr=o("from_pretrained()"),UBr=o(" to load the model weights."),JBr=l(),F(Y3.$$.fragment),YBr=l(),Vr=a("div"),F(ax.$$.fragment),KBr=l(),DEe=a("p"),ZBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eIr=l(),bn=a("p"),oIr=o("The model class to instantiate is selected based on the "),GEe=a("code"),rIr=o("model_type"),tIr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(":"),iIr=l(),Pe=a("ul"),K3=a("li"),XEe=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),bK=a("a"),fIr=o("FlaxBartForConditionalGeneration"),mIr=o(" (BART model)"),gIr=l(),Z3=a("li"),zEe=a("strong"),hIr=o("blenderbot"),pIr=o(" \u2014 "),vK=a("a"),_Ir=o("FlaxBlenderbotForConditionalGeneration"),uIr=o(" (Blenderbot model)"),bIr=l(),e0=a("li"),WEe=a("strong"),vIr=o("blenderbot-small"),FIr=o(" \u2014 "),FK=a("a"),TIr=o("FlaxBlenderbotSmallForConditionalGeneration"),MIr=o(" (BlenderbotSmall model)"),EIr=l(),o0=a("li"),QEe=a("strong"),CIr=o("encoder-decoder"),wIr=o(" \u2014 "),TK=a("a"),AIr=o("FlaxEncoderDecoderModel"),yIr=o(" (Encoder decoder model)"),LIr=l(),r0=a("li"),HEe=a("strong"),xIr=o("marian"),$Ir=o(" \u2014 "),MK=a("a"),kIr=o("FlaxMarianMTModel"),SIr=o(" (Marian model)"),RIr=l(),t0=a("li"),UEe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),EK=a("a"),IIr=o("FlaxMBartForConditionalGeneration"),NIr=o(" (mBART model)"),qIr=l(),a0=a("li"),JEe=a("strong"),jIr=o("mt5"),DIr=o(" \u2014 "),CK=a("a"),GIr=o("FlaxMT5ForConditionalGeneration"),OIr=o(" (MT5 model)"),VIr=l(),n0=a("li"),YEe=a("strong"),XIr=o("pegasus"),zIr=o(" \u2014 "),wK=a("a"),WIr=o("FlaxPegasusForConditionalGeneration"),QIr=o(" (Pegasus model)"),HIr=l(),s0=a("li"),KEe=a("strong"),UIr=o("t5"),JIr=o(" \u2014 "),AK=a("a"),YIr=o("FlaxT5ForConditionalGeneration"),KIr=o(" (T5 model)"),ZIr=l(),F(l0.$$.fragment),CDe=l(),zc=a("h2"),i0=a("a"),ZEe=a("span"),F(nx.$$.fragment),eNr=l(),eCe=a("span"),oNr=o("FlaxAutoModelForSequenceClassification"),wDe=l(),_r=a("div"),F(sx.$$.fragment),rNr=l(),Wc=a("p"),tNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=a("a"),aNr=o("from_pretrained()"),nNr=o(" class method or the "),LK=a("a"),sNr=o("from_config()"),lNr=o(` class
method.`),iNr=l(),lx=a("p"),dNr=o("This class cannot be instantiated directly using "),oCe=a("code"),cNr=o("__init__()"),fNr=o(" (throws an error)."),mNr=l(),Wt=a("div"),F(ix.$$.fragment),gNr=l(),rCe=a("p"),hNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pNr=l(),Qc=a("p"),_Nr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),uNr=o("not"),bNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),vNr=o("from_pretrained()"),FNr=o(" to load the model weights."),TNr=l(),F(d0.$$.fragment),MNr=l(),Xr=a("div"),F(dx.$$.fragment),ENr=l(),aCe=a("p"),CNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wNr=l(),vn=a("p"),ANr=o("The model class to instantiate is selected based on the "),nCe=a("code"),yNr=o("model_type"),LNr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(":"),RNr=l(),$e=a("ul"),c0=a("li"),iCe=a("strong"),PNr=o("albert"),BNr=o(" \u2014 "),$K=a("a"),INr=o("FlaxAlbertForSequenceClassification"),NNr=o(" (ALBERT model)"),qNr=l(),f0=a("li"),dCe=a("strong"),jNr=o("bart"),DNr=o(" \u2014 "),kK=a("a"),GNr=o("FlaxBartForSequenceClassification"),ONr=o(" (BART model)"),VNr=l(),m0=a("li"),cCe=a("strong"),XNr=o("bert"),zNr=o(" \u2014 "),SK=a("a"),WNr=o("FlaxBertForSequenceClassification"),QNr=o(" (BERT model)"),HNr=l(),g0=a("li"),fCe=a("strong"),UNr=o("big_bird"),JNr=o(" \u2014 "),RK=a("a"),YNr=o("FlaxBigBirdForSequenceClassification"),KNr=o(" (BigBird model)"),ZNr=l(),h0=a("li"),mCe=a("strong"),eqr=o("distilbert"),oqr=o(" \u2014 "),PK=a("a"),rqr=o("FlaxDistilBertForSequenceClassification"),tqr=o(" (DistilBERT model)"),aqr=l(),p0=a("li"),gCe=a("strong"),nqr=o("electra"),sqr=o(" \u2014 "),BK=a("a"),lqr=o("FlaxElectraForSequenceClassification"),iqr=o(" (ELECTRA model)"),dqr=l(),_0=a("li"),hCe=a("strong"),cqr=o("mbart"),fqr=o(" \u2014 "),IK=a("a"),mqr=o("FlaxMBartForSequenceClassification"),gqr=o(" (mBART model)"),hqr=l(),u0=a("li"),pCe=a("strong"),pqr=o("roberta"),_qr=o(" \u2014 "),NK=a("a"),uqr=o("FlaxRobertaForSequenceClassification"),bqr=o(" (RoBERTa model)"),vqr=l(),b0=a("li"),_Ce=a("strong"),Fqr=o("roformer"),Tqr=o(" \u2014 "),qK=a("a"),Mqr=o("FlaxRoFormerForSequenceClassification"),Eqr=o(" (RoFormer model)"),Cqr=l(),v0=a("li"),uCe=a("strong"),wqr=o("xlm-roberta"),Aqr=o(" \u2014 "),jK=a("a"),yqr=o("FlaxXLMRobertaForSequenceClassification"),Lqr=o(" (XLM-RoBERTa model)"),xqr=l(),F(F0.$$.fragment),ADe=l(),Hc=a("h2"),T0=a("a"),bCe=a("span"),F(cx.$$.fragment),$qr=l(),vCe=a("span"),kqr=o("FlaxAutoModelForQuestionAnswering"),yDe=l(),ur=a("div"),F(fx.$$.fragment),Sqr=l(),Uc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DK=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),GK=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),mx=a("p"),jqr=o("This class cannot be instantiated directly using "),FCe=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Qt=a("div"),F(gx.$$.fragment),Vqr=l(),TCe=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zqr=l(),Jc=a("p"),Wqr=o(`Note:
Loading a model from its configuration file does `),MCe=a("strong"),Qqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(M0.$$.fragment),Kqr=l(),zr=a("div"),F(hx.$$.fragment),Zqr=l(),ECe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ojr=l(),Fn=a("p"),rjr=o("The model class to instantiate is selected based on the "),CCe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),wCe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),ke=a("ul"),E0=a("li"),yCe=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),VK=a("a"),mjr=o("FlaxAlbertForQuestionAnswering"),gjr=o(" (ALBERT model)"),hjr=l(),C0=a("li"),LCe=a("strong"),pjr=o("bart"),_jr=o(" \u2014 "),XK=a("a"),ujr=o("FlaxBartForQuestionAnswering"),bjr=o(" (BART model)"),vjr=l(),w0=a("li"),xCe=a("strong"),Fjr=o("bert"),Tjr=o(" \u2014 "),zK=a("a"),Mjr=o("FlaxBertForQuestionAnswering"),Ejr=o(" (BERT model)"),Cjr=l(),A0=a("li"),$Ce=a("strong"),wjr=o("big_bird"),Ajr=o(" \u2014 "),WK=a("a"),yjr=o("FlaxBigBirdForQuestionAnswering"),Ljr=o(" (BigBird model)"),xjr=l(),y0=a("li"),kCe=a("strong"),$jr=o("distilbert"),kjr=o(" \u2014 "),QK=a("a"),Sjr=o("FlaxDistilBertForQuestionAnswering"),Rjr=o(" (DistilBERT model)"),Pjr=l(),L0=a("li"),SCe=a("strong"),Bjr=o("electra"),Ijr=o(" \u2014 "),HK=a("a"),Njr=o("FlaxElectraForQuestionAnswering"),qjr=o(" (ELECTRA model)"),jjr=l(),x0=a("li"),RCe=a("strong"),Djr=o("mbart"),Gjr=o(" \u2014 "),UK=a("a"),Ojr=o("FlaxMBartForQuestionAnswering"),Vjr=o(" (mBART model)"),Xjr=l(),$0=a("li"),PCe=a("strong"),zjr=o("roberta"),Wjr=o(" \u2014 "),JK=a("a"),Qjr=o("FlaxRobertaForQuestionAnswering"),Hjr=o(" (RoBERTa model)"),Ujr=l(),k0=a("li"),BCe=a("strong"),Jjr=o("roformer"),Yjr=o(" \u2014 "),YK=a("a"),Kjr=o("FlaxRoFormerForQuestionAnswering"),Zjr=o(" (RoFormer model)"),eDr=l(),S0=a("li"),ICe=a("strong"),oDr=o("xlm-roberta"),rDr=o(" \u2014 "),KK=a("a"),tDr=o("FlaxXLMRobertaForQuestionAnswering"),aDr=o(" (XLM-RoBERTa model)"),nDr=l(),F(R0.$$.fragment),LDe=l(),Yc=a("h2"),P0=a("a"),NCe=a("span"),F(px.$$.fragment),sDr=l(),qCe=a("span"),lDr=o("FlaxAutoModelForTokenClassification"),xDe=l(),br=a("div"),F(_x.$$.fragment),iDr=l(),Kc=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZK=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),eZ=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),ux=a("p"),pDr=o("This class cannot be instantiated directly using "),jCe=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),Ht=a("div"),F(bx.$$.fragment),vDr=l(),DCe=a("p"),FDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TDr=l(),Zc=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),yDr=l(),F(B0.$$.fragment),LDr=l(),Wr=a("div"),F(vx.$$.fragment),xDr=l(),OCe=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kDr=l(),Tn=a("p"),SDr=o("The model class to instantiate is selected based on the "),VCe=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),NDr=o("pretrained_model_name_or_path"),qDr=o(":"),jDr=l(),Ge=a("ul"),I0=a("li"),WCe=a("strong"),DDr=o("albert"),GDr=o(" \u2014 "),rZ=a("a"),ODr=o("FlaxAlbertForTokenClassification"),VDr=o(" (ALBERT model)"),XDr=l(),N0=a("li"),QCe=a("strong"),zDr=o("bert"),WDr=o(" \u2014 "),tZ=a("a"),QDr=o("FlaxBertForTokenClassification"),HDr=o(" (BERT model)"),UDr=l(),q0=a("li"),HCe=a("strong"),JDr=o("big_bird"),YDr=o(" \u2014 "),aZ=a("a"),KDr=o("FlaxBigBirdForTokenClassification"),ZDr=o(" (BigBird model)"),eGr=l(),j0=a("li"),UCe=a("strong"),oGr=o("distilbert"),rGr=o(" \u2014 "),nZ=a("a"),tGr=o("FlaxDistilBertForTokenClassification"),aGr=o(" (DistilBERT model)"),nGr=l(),D0=a("li"),JCe=a("strong"),sGr=o("electra"),lGr=o(" \u2014 "),sZ=a("a"),iGr=o("FlaxElectraForTokenClassification"),dGr=o(" (ELECTRA model)"),cGr=l(),G0=a("li"),YCe=a("strong"),fGr=o("roberta"),mGr=o(" \u2014 "),lZ=a("a"),gGr=o("FlaxRobertaForTokenClassification"),hGr=o(" (RoBERTa model)"),pGr=l(),O0=a("li"),KCe=a("strong"),_Gr=o("roformer"),uGr=o(" \u2014 "),iZ=a("a"),bGr=o("FlaxRoFormerForTokenClassification"),vGr=o(" (RoFormer model)"),FGr=l(),V0=a("li"),ZCe=a("strong"),TGr=o("xlm-roberta"),MGr=o(" \u2014 "),dZ=a("a"),EGr=o("FlaxXLMRobertaForTokenClassification"),CGr=o(" (XLM-RoBERTa model)"),wGr=l(),F(X0.$$.fragment),$De=l(),ef=a("h2"),z0=a("a"),e5e=a("span"),F(Fx.$$.fragment),AGr=l(),o5e=a("span"),yGr=o("FlaxAutoModelForMultipleChoice"),kDe=l(),vr=a("div"),F(Tx.$$.fragment),LGr=l(),of=a("p"),xGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cZ=a("a"),$Gr=o("from_pretrained()"),kGr=o(" class method or the "),fZ=a("a"),SGr=o("from_config()"),RGr=o(` class
method.`),PGr=l(),Mx=a("p"),BGr=o("This class cannot be instantiated directly using "),r5e=a("code"),IGr=o("__init__()"),NGr=o(" (throws an error)."),qGr=l(),Ut=a("div"),F(Ex.$$.fragment),jGr=l(),t5e=a("p"),DGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GGr=l(),rf=a("p"),OGr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),VGr=o("not"),XGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),zGr=o("from_pretrained()"),WGr=o(" to load the model weights."),QGr=l(),F(W0.$$.fragment),HGr=l(),Qr=a("div"),F(Cx.$$.fragment),UGr=l(),n5e=a("p"),JGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YGr=l(),Mn=a("p"),KGr=o("The model class to instantiate is selected based on the "),s5e=a("code"),ZGr=o("model_type"),eOr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),oOr=o("pretrained_model_name_or_path"),rOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),tOr=o("pretrained_model_name_or_path"),aOr=o(":"),nOr=l(),Oe=a("ul"),Q0=a("li"),d5e=a("strong"),sOr=o("albert"),lOr=o(" \u2014 "),gZ=a("a"),iOr=o("FlaxAlbertForMultipleChoice"),dOr=o(" (ALBERT model)"),cOr=l(),H0=a("li"),c5e=a("strong"),fOr=o("bert"),mOr=o(" \u2014 "),hZ=a("a"),gOr=o("FlaxBertForMultipleChoice"),hOr=o(" (BERT model)"),pOr=l(),U0=a("li"),f5e=a("strong"),_Or=o("big_bird"),uOr=o(" \u2014 "),pZ=a("a"),bOr=o("FlaxBigBirdForMultipleChoice"),vOr=o(" (BigBird model)"),FOr=l(),J0=a("li"),m5e=a("strong"),TOr=o("distilbert"),MOr=o(" \u2014 "),_Z=a("a"),EOr=o("FlaxDistilBertForMultipleChoice"),COr=o(" (DistilBERT model)"),wOr=l(),Y0=a("li"),g5e=a("strong"),AOr=o("electra"),yOr=o(" \u2014 "),uZ=a("a"),LOr=o("FlaxElectraForMultipleChoice"),xOr=o(" (ELECTRA model)"),$Or=l(),K0=a("li"),h5e=a("strong"),kOr=o("roberta"),SOr=o(" \u2014 "),bZ=a("a"),ROr=o("FlaxRobertaForMultipleChoice"),POr=o(" (RoBERTa model)"),BOr=l(),Z0=a("li"),p5e=a("strong"),IOr=o("roformer"),NOr=o(" \u2014 "),vZ=a("a"),qOr=o("FlaxRoFormerForMultipleChoice"),jOr=o(" (RoFormer model)"),DOr=l(),ew=a("li"),_5e=a("strong"),GOr=o("xlm-roberta"),OOr=o(" \u2014 "),FZ=a("a"),VOr=o("FlaxXLMRobertaForMultipleChoice"),XOr=o(" (XLM-RoBERTa model)"),zOr=l(),F(ow.$$.fragment),SDe=l(),tf=a("h2"),rw=a("a"),u5e=a("span"),F(wx.$$.fragment),WOr=l(),b5e=a("span"),QOr=o("FlaxAutoModelForNextSentencePrediction"),RDe=l(),Fr=a("div"),F(Ax.$$.fragment),HOr=l(),af=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),MZ=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),yx=a("p"),oVr=o("This class cannot be instantiated directly using "),v5e=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Jt=a("div"),F(Lx.$$.fragment),nVr=l(),F5e=a("p"),sVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lVr=l(),nf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(tw.$$.fragment),hVr=l(),Hr=a("div"),F(xx.$$.fragment),pVr=l(),M5e=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uVr=l(),En=a("p"),bVr=o("The model class to instantiate is selected based on the "),E5e=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),A5e=a("ul"),aw=a("li"),y5e=a("strong"),AVr=o("bert"),yVr=o(" \u2014 "),CZ=a("a"),LVr=o("FlaxBertForNextSentencePrediction"),xVr=o(" (BERT model)"),$Vr=l(),F(nw.$$.fragment),PDe=l(),sf=a("h2"),sw=a("a"),L5e=a("span"),F($x.$$.fragment),kVr=l(),x5e=a("span"),SVr=o("FlaxAutoModelForImageClassification"),BDe=l(),Tr=a("div"),F(kx.$$.fragment),RVr=l(),lf=a("p"),PVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=a("a"),BVr=o("from_pretrained()"),IVr=o(" class method or the "),AZ=a("a"),NVr=o("from_config()"),qVr=o(` class
method.`),jVr=l(),Sx=a("p"),DVr=o("This class cannot be instantiated directly using "),$5e=a("code"),GVr=o("__init__()"),OVr=o(" (throws an error)."),VVr=l(),Yt=a("div"),F(Rx.$$.fragment),XVr=l(),k5e=a("p"),zVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WVr=l(),df=a("p"),QVr=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),HVr=o("not"),UVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),JVr=o("from_pretrained()"),YVr=o(" to load the model weights."),KVr=l(),F(lw.$$.fragment),ZVr=l(),Ur=a("div"),F(Px.$$.fragment),eXr=l(),R5e=a("p"),oXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rXr=l(),Cn=a("p"),tXr=o("The model class to instantiate is selected based on the "),P5e=a("code"),aXr=o("model_type"),nXr=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),sXr=o("pretrained_model_name_or_path"),lXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),iXr=o("pretrained_model_name_or_path"),dXr=o(":"),cXr=l(),Bx=a("ul"),iw=a("li"),N5e=a("strong"),fXr=o("beit"),mXr=o(" \u2014 "),LZ=a("a"),gXr=o("FlaxBeitForImageClassification"),hXr=o(" (BEiT model)"),pXr=l(),dw=a("li"),q5e=a("strong"),_Xr=o("vit"),uXr=o(" \u2014 "),xZ=a("a"),bXr=o("FlaxViTForImageClassification"),vXr=o(" (ViT model)"),FXr=l(),F(cw.$$.fragment),IDe=l(),cf=a("h2"),fw=a("a"),j5e=a("span"),F(Ix.$$.fragment),TXr=l(),D5e=a("span"),MXr=o("FlaxAutoModelForVision2Seq"),NDe=l(),Mr=a("div"),F(Nx.$$.fragment),EXr=l(),ff=a("p"),CXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$Z=a("a"),wXr=o("from_pretrained()"),AXr=o(" class method or the "),kZ=a("a"),yXr=o("from_config()"),LXr=o(` class
method.`),xXr=l(),qx=a("p"),$Xr=o("This class cannot be instantiated directly using "),G5e=a("code"),kXr=o("__init__()"),SXr=o(" (throws an error)."),RXr=l(),Kt=a("div"),F(jx.$$.fragment),PXr=l(),O5e=a("p"),BXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IXr=l(),mf=a("p"),NXr=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),qXr=o("not"),jXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),DXr=o("from_pretrained()"),GXr=o(" to load the model weights."),OXr=l(),F(mw.$$.fragment),VXr=l(),Jr=a("div"),F(Dx.$$.fragment),XXr=l(),X5e=a("p"),zXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WXr=l(),wn=a("p"),QXr=o("The model class to instantiate is selected based on the "),z5e=a("code"),HXr=o("model_type"),UXr=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=a("code"),KXr=o("pretrained_model_name_or_path"),ZXr=o(":"),ezr=l(),H5e=a("ul"),gw=a("li"),U5e=a("strong"),ozr=o("vision-encoder-decoder"),rzr=o(" \u2014 "),RZ=a("a"),tzr=o("FlaxVisionEncoderDecoderModel"),azr=o(" (Vision Encoder decoder model)"),nzr=l(),F(hw.$$.fragment),this.h()},l(f){const u=aSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Gx=s(p);m=n(Gx,"A",{id:!0,class:!0,href:!0});var J5e=s(m);_=n(J5e,"SPAN",{});var Y5e=s(_);T(d.$$.fragment,Y5e),Y5e.forEach(t),J5e.forEach(t),h=i(Gx),Mo=n(Gx,"SPAN",{});var K5e=s(Mo);mi=r(K5e,"Auto Classes"),K5e.forEach(t),Gx.forEach(t),_f=i(f),rt=n(f,"P",{});var Ox=s(rt);gi=r(Ox,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Ox,"CODE",{});var Z5e=s(hi);Sy=r(Z5e,"from_pretrained()"),Z5e.forEach(t),uf=r(Ox,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ox.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var e3e=s(yn);Ry=r(e3e,"AutoConfig"),e3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var o3e=s(xn);Py=r(o3e,"AutoModel"),o3e.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var r3e=s($n);By=r(r3e,"AutoTokenizer"),r3e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Vx=s(Ae);ok=r(Vx,"will create a model that is an instance of "),bi=n(Vx,"A",{href:!0});var t3e=s(bi);rk=r(t3e,"BertModel"),t3e.forEach(t),tk=r(Vx,"."),Vx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Xx=s(wa);ak=r(Xx,"There is one class of "),vf=n(Xx,"CODE",{});var a3e=s(vf);nk=r(a3e,"AutoModel"),a3e.forEach(t),WOe=r(Xx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Xx.forEach(t),Bqe=i(f),vi=n(f,"H2",{class:!0});var zx=s(vi);Ff=n(zx,"A",{id:!0,class:!0,href:!0});var n3e=s(Ff);Aoe=n(n3e,"SPAN",{});var s3e=s(Aoe);T(Iy.$$.fragment,s3e),s3e.forEach(t),n3e.forEach(t),QOe=i(zx),yoe=n(zx,"SPAN",{});var l3e=s(yoe);HOe=r(l3e,"Extending the Auto Classes"),l3e.forEach(t),zx.forEach(t),Iqe=i(f),kn=n(f,"P",{});var gf=s(kn);UOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Loe=n(gf,"CODE",{});var i3e=s(Loe);JOe=r(i3e,"NewModel"),i3e.forEach(t),YOe=r(gf,", make sure you have a "),xoe=n(gf,"CODE",{});var d3e=s(xoe);KOe=r(d3e,"NewModelConfig"),d3e.forEach(t),ZOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Nqe=i(f),T(Ny.$$.fragment,f),qqe=i(f),sk=n(f,"P",{});var c3e=s(sk);eVe=r(c3e,"You will then be able to use the auto classes like you would usually do!"),c3e.forEach(t),jqe=i(f),T(Tf.$$.fragment,f),Dqe=i(f),Fi=n(f,"H2",{class:!0});var Wx=s(Fi);Mf=n(Wx,"A",{id:!0,class:!0,href:!0});var f3e=s(Mf);$oe=n(f3e,"SPAN",{});var m3e=s($oe);T(qy.$$.fragment,m3e),m3e.forEach(t),f3e.forEach(t),oVe=i(Wx),koe=n(Wx,"SPAN",{});var g3e=s(koe);rVe=r(g3e,"AutoConfig"),g3e.forEach(t),Wx.forEach(t),Gqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(jy.$$.fragment,et),tVe=i(et),Dy=n(et,"P",{});var Qx=s(Dy);aVe=r(Qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lk=n(Qx,"A",{href:!0});var h3e=s(lk);nVe=r(h3e,"from_pretrained()"),h3e.forEach(t),sVe=r(Qx," class method."),Qx.forEach(t),lVe=i(et),Gy=n(et,"P",{});var Hx=s(Gy);iVe=r(Hx,"This class cannot be instantiated directly using "),Soe=n(Hx,"CODE",{});var p3e=s(Soe);dVe=r(p3e,"__init__()"),p3e.forEach(t),cVe=r(Hx," (throws an error)."),Hx.forEach(t),fVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Oy.$$.fragment,ot),mVe=i(ot),Roe=n(ot,"P",{});var _3e=s(Roe);gVe=r(_3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),_3e.forEach(t),hVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);pVe=r(hf,"The configuration class to instantiate is selected based on the "),Poe=n(hf,"CODE",{});var u3e=s(Poe);_Ve=r(u3e,"model_type"),u3e.forEach(t),uVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Boe=n(hf,"CODE",{});var b3e=s(Boe);bVe=r(b3e,"pretrained_model_name_or_path"),b3e.forEach(t),vVe=r(hf,":"),hf.forEach(t),FVe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var pw=s(Ef);Ioe=n(pw,"STRONG",{});var v3e=s(Ioe);TVe=r(v3e,"albert"),v3e.forEach(t),MVe=r(pw," \u2014 "),ik=n(pw,"A",{href:!0});var F3e=s(ik);EVe=r(F3e,"AlbertConfig"),F3e.forEach(t),CVe=r(pw," (ALBERT model)"),pw.forEach(t),wVe=i(y),Cf=n(y,"LI",{});var _w=s(Cf);Noe=n(_w,"STRONG",{});var T3e=s(Noe);AVe=r(T3e,"bart"),T3e.forEach(t),yVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var M3e=s(dk);LVe=r(M3e,"BartConfig"),M3e.forEach(t),xVe=r(_w," (BART model)"),_w.forEach(t),$Ve=i(y),wf=n(y,"LI",{});var uw=s(wf);qoe=n(uw,"STRONG",{});var E3e=s(qoe);kVe=r(E3e,"beit"),E3e.forEach(t),SVe=r(uw," \u2014 "),ck=n(uw,"A",{href:!0});var C3e=s(ck);RVe=r(C3e,"BeitConfig"),C3e.forEach(t),PVe=r(uw," (BEiT model)"),uw.forEach(t),BVe=i(y),Af=n(y,"LI",{});var bw=s(Af);joe=n(bw,"STRONG",{});var w3e=s(joe);IVe=r(w3e,"bert"),w3e.forEach(t),NVe=r(bw," \u2014 "),fk=n(bw,"A",{href:!0});var A3e=s(fk);qVe=r(A3e,"BertConfig"),A3e.forEach(t),jVe=r(bw," (BERT model)"),bw.forEach(t),DVe=i(y),yf=n(y,"LI",{});var vw=s(yf);Doe=n(vw,"STRONG",{});var y3e=s(Doe);GVe=r(y3e,"bert-generation"),y3e.forEach(t),OVe=r(vw," \u2014 "),mk=n(vw,"A",{href:!0});var L3e=s(mk);VVe=r(L3e,"BertGenerationConfig"),L3e.forEach(t),XVe=r(vw," (Bert Generation model)"),vw.forEach(t),zVe=i(y),Lf=n(y,"LI",{});var Fw=s(Lf);Goe=n(Fw,"STRONG",{});var x3e=s(Goe);WVe=r(x3e,"big_bird"),x3e.forEach(t),QVe=r(Fw," \u2014 "),gk=n(Fw,"A",{href:!0});var $3e=s(gk);HVe=r($3e,"BigBirdConfig"),$3e.forEach(t),UVe=r(Fw," (BigBird model)"),Fw.forEach(t),JVe=i(y),xf=n(y,"LI",{});var Tw=s(xf);Ooe=n(Tw,"STRONG",{});var k3e=s(Ooe);YVe=r(k3e,"bigbird_pegasus"),k3e.forEach(t),KVe=r(Tw," \u2014 "),hk=n(Tw,"A",{href:!0});var S3e=s(hk);ZVe=r(S3e,"BigBirdPegasusConfig"),S3e.forEach(t),eXe=r(Tw," (BigBird-Pegasus model)"),Tw.forEach(t),oXe=i(y),$f=n(y,"LI",{});var Mw=s($f);Voe=n(Mw,"STRONG",{});var R3e=s(Voe);rXe=r(R3e,"blenderbot"),R3e.forEach(t),tXe=r(Mw," \u2014 "),pk=n(Mw,"A",{href:!0});var P3e=s(pk);aXe=r(P3e,"BlenderbotConfig"),P3e.forEach(t),nXe=r(Mw," (Blenderbot model)"),Mw.forEach(t),sXe=i(y),kf=n(y,"LI",{});var Ew=s(kf);Xoe=n(Ew,"STRONG",{});var B3e=s(Xoe);lXe=r(B3e,"blenderbot-small"),B3e.forEach(t),iXe=r(Ew," \u2014 "),_k=n(Ew,"A",{href:!0});var I3e=s(_k);dXe=r(I3e,"BlenderbotSmallConfig"),I3e.forEach(t),cXe=r(Ew," (BlenderbotSmall model)"),Ew.forEach(t),fXe=i(y),Sf=n(y,"LI",{});var Cw=s(Sf);zoe=n(Cw,"STRONG",{});var N3e=s(zoe);mXe=r(N3e,"camembert"),N3e.forEach(t),gXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var q3e=s(uk);hXe=r(q3e,"CamembertConfig"),q3e.forEach(t),pXe=r(Cw," (CamemBERT model)"),Cw.forEach(t),_Xe=i(y),Rf=n(y,"LI",{});var ww=s(Rf);Woe=n(ww,"STRONG",{});var j3e=s(Woe);uXe=r(j3e,"canine"),j3e.forEach(t),bXe=r(ww," \u2014 "),bk=n(ww,"A",{href:!0});var D3e=s(bk);vXe=r(D3e,"CanineConfig"),D3e.forEach(t),FXe=r(ww," (CANINE model)"),ww.forEach(t),TXe=i(y),Pf=n(y,"LI",{});var Aw=s(Pf);Qoe=n(Aw,"STRONG",{});var G3e=s(Qoe);MXe=r(G3e,"clip"),G3e.forEach(t),EXe=r(Aw," \u2014 "),vk=n(Aw,"A",{href:!0});var O3e=s(vk);CXe=r(O3e,"CLIPConfig"),O3e.forEach(t),wXe=r(Aw," (CLIP model)"),Aw.forEach(t),AXe=i(y),Bf=n(y,"LI",{});var yw=s(Bf);Hoe=n(yw,"STRONG",{});var V3e=s(Hoe);yXe=r(V3e,"convbert"),V3e.forEach(t),LXe=r(yw," \u2014 "),Fk=n(yw,"A",{href:!0});var X3e=s(Fk);xXe=r(X3e,"ConvBertConfig"),X3e.forEach(t),$Xe=r(yw," (ConvBERT model)"),yw.forEach(t),kXe=i(y),If=n(y,"LI",{});var Lw=s(If);Uoe=n(Lw,"STRONG",{});var z3e=s(Uoe);SXe=r(z3e,"convnext"),z3e.forEach(t),RXe=r(Lw," \u2014 "),Tk=n(Lw,"A",{href:!0});var W3e=s(Tk);PXe=r(W3e,"ConvNextConfig"),W3e.forEach(t),BXe=r(Lw," (ConvNeXT model)"),Lw.forEach(t),IXe=i(y),Nf=n(y,"LI",{});var xw=s(Nf);Joe=n(xw,"STRONG",{});var Q3e=s(Joe);NXe=r(Q3e,"ctrl"),Q3e.forEach(t),qXe=r(xw," \u2014 "),Mk=n(xw,"A",{href:!0});var H3e=s(Mk);jXe=r(H3e,"CTRLConfig"),H3e.forEach(t),DXe=r(xw," (CTRL model)"),xw.forEach(t),GXe=i(y),qf=n(y,"LI",{});var $w=s(qf);Yoe=n($w,"STRONG",{});var U3e=s(Yoe);OXe=r(U3e,"cvt"),U3e.forEach(t),VXe=r($w," \u2014 "),Ek=n($w,"A",{href:!0});var J3e=s(Ek);XXe=r(J3e,"CvtConfig"),J3e.forEach(t),zXe=r($w," (CvT model)"),$w.forEach(t),WXe=i(y),jf=n(y,"LI",{});var kw=s(jf);Koe=n(kw,"STRONG",{});var Y3e=s(Koe);QXe=r(Y3e,"data2vec-audio"),Y3e.forEach(t),HXe=r(kw," \u2014 "),Ck=n(kw,"A",{href:!0});var K3e=s(Ck);UXe=r(K3e,"Data2VecAudioConfig"),K3e.forEach(t),JXe=r(kw," (Data2VecAudio model)"),kw.forEach(t),YXe=i(y),Df=n(y,"LI",{});var Sw=s(Df);Zoe=n(Sw,"STRONG",{});var Z3e=s(Zoe);KXe=r(Z3e,"data2vec-text"),Z3e.forEach(t),ZXe=r(Sw," \u2014 "),wk=n(Sw,"A",{href:!0});var e0e=s(wk);eze=r(e0e,"Data2VecTextConfig"),e0e.forEach(t),oze=r(Sw," (Data2VecText model)"),Sw.forEach(t),rze=i(y),Gf=n(y,"LI",{});var Rw=s(Gf);ere=n(Rw,"STRONG",{});var o0e=s(ere);tze=r(o0e,"data2vec-vision"),o0e.forEach(t),aze=r(Rw," \u2014 "),Ak=n(Rw,"A",{href:!0});var r0e=s(Ak);nze=r(r0e,"Data2VecVisionConfig"),r0e.forEach(t),sze=r(Rw," (Data2VecVision model)"),Rw.forEach(t),lze=i(y),Of=n(y,"LI",{});var Pw=s(Of);ore=n(Pw,"STRONG",{});var t0e=s(ore);ize=r(t0e,"deberta"),t0e.forEach(t),dze=r(Pw," \u2014 "),yk=n(Pw,"A",{href:!0});var a0e=s(yk);cze=r(a0e,"DebertaConfig"),a0e.forEach(t),fze=r(Pw," (DeBERTa model)"),Pw.forEach(t),mze=i(y),Vf=n(y,"LI",{});var Bw=s(Vf);rre=n(Bw,"STRONG",{});var n0e=s(rre);gze=r(n0e,"deberta-v2"),n0e.forEach(t),hze=r(Bw," \u2014 "),Lk=n(Bw,"A",{href:!0});var s0e=s(Lk);pze=r(s0e,"DebertaV2Config"),s0e.forEach(t),_ze=r(Bw," (DeBERTa-v2 model)"),Bw.forEach(t),uze=i(y),Xf=n(y,"LI",{});var Iw=s(Xf);tre=n(Iw,"STRONG",{});var l0e=s(tre);bze=r(l0e,"decision_transformer"),l0e.forEach(t),vze=r(Iw," \u2014 "),xk=n(Iw,"A",{href:!0});var i0e=s(xk);Fze=r(i0e,"DecisionTransformerConfig"),i0e.forEach(t),Tze=r(Iw," (Decision Transformer model)"),Iw.forEach(t),Mze=i(y),zf=n(y,"LI",{});var Nw=s(zf);are=n(Nw,"STRONG",{});var d0e=s(are);Eze=r(d0e,"deit"),d0e.forEach(t),Cze=r(Nw," \u2014 "),$k=n(Nw,"A",{href:!0});var lzr=s($k);wze=r(lzr,"DeiTConfig"),lzr.forEach(t),Aze=r(Nw," (DeiT model)"),Nw.forEach(t),yze=i(y),Wf=n(y,"LI",{});var c0e=s(Wf);nre=n(c0e,"STRONG",{});var izr=s(nre);Lze=r(izr,"detr"),izr.forEach(t),xze=r(c0e," \u2014 "),kk=n(c0e,"A",{href:!0});var dzr=s(kk);$ze=r(dzr,"DetrConfig"),dzr.forEach(t),kze=r(c0e," (DETR model)"),c0e.forEach(t),Sze=i(y),Qf=n(y,"LI",{});var f0e=s(Qf);sre=n(f0e,"STRONG",{});var czr=s(sre);Rze=r(czr,"distilbert"),czr.forEach(t),Pze=r(f0e," \u2014 "),Sk=n(f0e,"A",{href:!0});var fzr=s(Sk);Bze=r(fzr,"DistilBertConfig"),fzr.forEach(t),Ize=r(f0e," (DistilBERT model)"),f0e.forEach(t),Nze=i(y),Hf=n(y,"LI",{});var m0e=s(Hf);lre=n(m0e,"STRONG",{});var mzr=s(lre);qze=r(mzr,"dpr"),mzr.forEach(t),jze=r(m0e," \u2014 "),Rk=n(m0e,"A",{href:!0});var gzr=s(Rk);Dze=r(gzr,"DPRConfig"),gzr.forEach(t),Gze=r(m0e," (DPR model)"),m0e.forEach(t),Oze=i(y),Uf=n(y,"LI",{});var g0e=s(Uf);ire=n(g0e,"STRONG",{});var hzr=s(ire);Vze=r(hzr,"dpt"),hzr.forEach(t),Xze=r(g0e," \u2014 "),Pk=n(g0e,"A",{href:!0});var pzr=s(Pk);zze=r(pzr,"DPTConfig"),pzr.forEach(t),Wze=r(g0e," (DPT model)"),g0e.forEach(t),Qze=i(y),Jf=n(y,"LI",{});var h0e=s(Jf);dre=n(h0e,"STRONG",{});var _zr=s(dre);Hze=r(_zr,"electra"),_zr.forEach(t),Uze=r(h0e," \u2014 "),Bk=n(h0e,"A",{href:!0});var uzr=s(Bk);Jze=r(uzr,"ElectraConfig"),uzr.forEach(t),Yze=r(h0e," (ELECTRA model)"),h0e.forEach(t),Kze=i(y),Yf=n(y,"LI",{});var p0e=s(Yf);cre=n(p0e,"STRONG",{});var bzr=s(cre);Zze=r(bzr,"encoder-decoder"),bzr.forEach(t),eWe=r(p0e," \u2014 "),Ik=n(p0e,"A",{href:!0});var vzr=s(Ik);oWe=r(vzr,"EncoderDecoderConfig"),vzr.forEach(t),rWe=r(p0e," (Encoder decoder model)"),p0e.forEach(t),tWe=i(y),Kf=n(y,"LI",{});var _0e=s(Kf);fre=n(_0e,"STRONG",{});var Fzr=s(fre);aWe=r(Fzr,"flaubert"),Fzr.forEach(t),nWe=r(_0e," \u2014 "),Nk=n(_0e,"A",{href:!0});var Tzr=s(Nk);sWe=r(Tzr,"FlaubertConfig"),Tzr.forEach(t),lWe=r(_0e," (FlauBERT model)"),_0e.forEach(t),iWe=i(y),Zf=n(y,"LI",{});var u0e=s(Zf);mre=n(u0e,"STRONG",{});var Mzr=s(mre);dWe=r(Mzr,"flava"),Mzr.forEach(t),cWe=r(u0e," \u2014 "),qk=n(u0e,"A",{href:!0});var Ezr=s(qk);fWe=r(Ezr,"FlavaConfig"),Ezr.forEach(t),mWe=r(u0e," (FLAVA model)"),u0e.forEach(t),gWe=i(y),em=n(y,"LI",{});var b0e=s(em);gre=n(b0e,"STRONG",{});var Czr=s(gre);hWe=r(Czr,"fnet"),Czr.forEach(t),pWe=r(b0e," \u2014 "),jk=n(b0e,"A",{href:!0});var wzr=s(jk);_We=r(wzr,"FNetConfig"),wzr.forEach(t),uWe=r(b0e," (FNet model)"),b0e.forEach(t),bWe=i(y),om=n(y,"LI",{});var v0e=s(om);hre=n(v0e,"STRONG",{});var Azr=s(hre);vWe=r(Azr,"fsmt"),Azr.forEach(t),FWe=r(v0e," \u2014 "),Dk=n(v0e,"A",{href:!0});var yzr=s(Dk);TWe=r(yzr,"FSMTConfig"),yzr.forEach(t),MWe=r(v0e," (FairSeq Machine-Translation model)"),v0e.forEach(t),EWe=i(y),rm=n(y,"LI",{});var F0e=s(rm);pre=n(F0e,"STRONG",{});var Lzr=s(pre);CWe=r(Lzr,"funnel"),Lzr.forEach(t),wWe=r(F0e," \u2014 "),Gk=n(F0e,"A",{href:!0});var xzr=s(Gk);AWe=r(xzr,"FunnelConfig"),xzr.forEach(t),yWe=r(F0e," (Funnel Transformer model)"),F0e.forEach(t),LWe=i(y),tm=n(y,"LI",{});var T0e=s(tm);_re=n(T0e,"STRONG",{});var $zr=s(_re);xWe=r($zr,"glpn"),$zr.forEach(t),$We=r(T0e," \u2014 "),Ok=n(T0e,"A",{href:!0});var kzr=s(Ok);kWe=r(kzr,"GLPNConfig"),kzr.forEach(t),SWe=r(T0e," (GLPN model)"),T0e.forEach(t),RWe=i(y),am=n(y,"LI",{});var M0e=s(am);ure=n(M0e,"STRONG",{});var Szr=s(ure);PWe=r(Szr,"gpt2"),Szr.forEach(t),BWe=r(M0e," \u2014 "),Vk=n(M0e,"A",{href:!0});var Rzr=s(Vk);IWe=r(Rzr,"GPT2Config"),Rzr.forEach(t),NWe=r(M0e," (OpenAI GPT-2 model)"),M0e.forEach(t),qWe=i(y),nm=n(y,"LI",{});var E0e=s(nm);bre=n(E0e,"STRONG",{});var Pzr=s(bre);jWe=r(Pzr,"gpt_neo"),Pzr.forEach(t),DWe=r(E0e," \u2014 "),Xk=n(E0e,"A",{href:!0});var Bzr=s(Xk);GWe=r(Bzr,"GPTNeoConfig"),Bzr.forEach(t),OWe=r(E0e," (GPT Neo model)"),E0e.forEach(t),VWe=i(y),sm=n(y,"LI",{});var C0e=s(sm);vre=n(C0e,"STRONG",{});var Izr=s(vre);XWe=r(Izr,"gpt_neox"),Izr.forEach(t),zWe=r(C0e," \u2014 "),zk=n(C0e,"A",{href:!0});var Nzr=s(zk);WWe=r(Nzr,"GPTNeoXConfig"),Nzr.forEach(t),QWe=r(C0e," (GPT NeoX model)"),C0e.forEach(t),HWe=i(y),lm=n(y,"LI",{});var w0e=s(lm);Fre=n(w0e,"STRONG",{});var qzr=s(Fre);UWe=r(qzr,"gptj"),qzr.forEach(t),JWe=r(w0e," \u2014 "),Wk=n(w0e,"A",{href:!0});var jzr=s(Wk);YWe=r(jzr,"GPTJConfig"),jzr.forEach(t),KWe=r(w0e," (GPT-J model)"),w0e.forEach(t),ZWe=i(y),im=n(y,"LI",{});var A0e=s(im);Tre=n(A0e,"STRONG",{});var Dzr=s(Tre);eQe=r(Dzr,"hubert"),Dzr.forEach(t),oQe=r(A0e," \u2014 "),Qk=n(A0e,"A",{href:!0});var Gzr=s(Qk);rQe=r(Gzr,"HubertConfig"),Gzr.forEach(t),tQe=r(A0e," (Hubert model)"),A0e.forEach(t),aQe=i(y),dm=n(y,"LI",{});var y0e=s(dm);Mre=n(y0e,"STRONG",{});var Ozr=s(Mre);nQe=r(Ozr,"ibert"),Ozr.forEach(t),sQe=r(y0e," \u2014 "),Hk=n(y0e,"A",{href:!0});var Vzr=s(Hk);lQe=r(Vzr,"IBertConfig"),Vzr.forEach(t),iQe=r(y0e," (I-BERT model)"),y0e.forEach(t),dQe=i(y),cm=n(y,"LI",{});var L0e=s(cm);Ere=n(L0e,"STRONG",{});var Xzr=s(Ere);cQe=r(Xzr,"imagegpt"),Xzr.forEach(t),fQe=r(L0e," \u2014 "),Uk=n(L0e,"A",{href:!0});var zzr=s(Uk);mQe=r(zzr,"ImageGPTConfig"),zzr.forEach(t),gQe=r(L0e," (ImageGPT model)"),L0e.forEach(t),hQe=i(y),fm=n(y,"LI",{});var x0e=s(fm);Cre=n(x0e,"STRONG",{});var Wzr=s(Cre);pQe=r(Wzr,"layoutlm"),Wzr.forEach(t),_Qe=r(x0e," \u2014 "),Jk=n(x0e,"A",{href:!0});var Qzr=s(Jk);uQe=r(Qzr,"LayoutLMConfig"),Qzr.forEach(t),bQe=r(x0e," (LayoutLM model)"),x0e.forEach(t),vQe=i(y),mm=n(y,"LI",{});var $0e=s(mm);wre=n($0e,"STRONG",{});var Hzr=s(wre);FQe=r(Hzr,"layoutlmv2"),Hzr.forEach(t),TQe=r($0e," \u2014 "),Yk=n($0e,"A",{href:!0});var Uzr=s(Yk);MQe=r(Uzr,"LayoutLMv2Config"),Uzr.forEach(t),EQe=r($0e," (LayoutLMv2 model)"),$0e.forEach(t),CQe=i(y),gm=n(y,"LI",{});var k0e=s(gm);Are=n(k0e,"STRONG",{});var Jzr=s(Are);wQe=r(Jzr,"layoutlmv3"),Jzr.forEach(t),AQe=r(k0e," \u2014 "),Kk=n(k0e,"A",{href:!0});var Yzr=s(Kk);yQe=r(Yzr,"LayoutLMv3Config"),Yzr.forEach(t),LQe=r(k0e," (LayoutLMv3 model)"),k0e.forEach(t),xQe=i(y),hm=n(y,"LI",{});var S0e=s(hm);yre=n(S0e,"STRONG",{});var Kzr=s(yre);$Qe=r(Kzr,"led"),Kzr.forEach(t),kQe=r(S0e," \u2014 "),Zk=n(S0e,"A",{href:!0});var Zzr=s(Zk);SQe=r(Zzr,"LEDConfig"),Zzr.forEach(t),RQe=r(S0e," (LED model)"),S0e.forEach(t),PQe=i(y),pm=n(y,"LI",{});var R0e=s(pm);Lre=n(R0e,"STRONG",{});var eWr=s(Lre);BQe=r(eWr,"levit"),eWr.forEach(t),IQe=r(R0e," \u2014 "),eS=n(R0e,"A",{href:!0});var oWr=s(eS);NQe=r(oWr,"LevitConfig"),oWr.forEach(t),qQe=r(R0e," (LeViT model)"),R0e.forEach(t),jQe=i(y),_m=n(y,"LI",{});var P0e=s(_m);xre=n(P0e,"STRONG",{});var rWr=s(xre);DQe=r(rWr,"longformer"),rWr.forEach(t),GQe=r(P0e," \u2014 "),oS=n(P0e,"A",{href:!0});var tWr=s(oS);OQe=r(tWr,"LongformerConfig"),tWr.forEach(t),VQe=r(P0e," (Longformer model)"),P0e.forEach(t),XQe=i(y),um=n(y,"LI",{});var B0e=s(um);$re=n(B0e,"STRONG",{});var aWr=s($re);zQe=r(aWr,"luke"),aWr.forEach(t),WQe=r(B0e," \u2014 "),rS=n(B0e,"A",{href:!0});var nWr=s(rS);QQe=r(nWr,"LukeConfig"),nWr.forEach(t),HQe=r(B0e," (LUKE model)"),B0e.forEach(t),UQe=i(y),bm=n(y,"LI",{});var I0e=s(bm);kre=n(I0e,"STRONG",{});var sWr=s(kre);JQe=r(sWr,"lxmert"),sWr.forEach(t),YQe=r(I0e," \u2014 "),tS=n(I0e,"A",{href:!0});var lWr=s(tS);KQe=r(lWr,"LxmertConfig"),lWr.forEach(t),ZQe=r(I0e," (LXMERT model)"),I0e.forEach(t),eHe=i(y),vm=n(y,"LI",{});var N0e=s(vm);Sre=n(N0e,"STRONG",{});var iWr=s(Sre);oHe=r(iWr,"m2m_100"),iWr.forEach(t),rHe=r(N0e," \u2014 "),aS=n(N0e,"A",{href:!0});var dWr=s(aS);tHe=r(dWr,"M2M100Config"),dWr.forEach(t),aHe=r(N0e," (M2M100 model)"),N0e.forEach(t),nHe=i(y),Fm=n(y,"LI",{});var q0e=s(Fm);Rre=n(q0e,"STRONG",{});var cWr=s(Rre);sHe=r(cWr,"marian"),cWr.forEach(t),lHe=r(q0e," \u2014 "),nS=n(q0e,"A",{href:!0});var fWr=s(nS);iHe=r(fWr,"MarianConfig"),fWr.forEach(t),dHe=r(q0e," (Marian model)"),q0e.forEach(t),cHe=i(y),Tm=n(y,"LI",{});var j0e=s(Tm);Pre=n(j0e,"STRONG",{});var mWr=s(Pre);fHe=r(mWr,"maskformer"),mWr.forEach(t),mHe=r(j0e," \u2014 "),sS=n(j0e,"A",{href:!0});var gWr=s(sS);gHe=r(gWr,"MaskFormerConfig"),gWr.forEach(t),hHe=r(j0e," (MaskFormer model)"),j0e.forEach(t),pHe=i(y),Mm=n(y,"LI",{});var D0e=s(Mm);Bre=n(D0e,"STRONG",{});var hWr=s(Bre);_He=r(hWr,"mbart"),hWr.forEach(t),uHe=r(D0e," \u2014 "),lS=n(D0e,"A",{href:!0});var pWr=s(lS);bHe=r(pWr,"MBartConfig"),pWr.forEach(t),vHe=r(D0e," (mBART model)"),D0e.forEach(t),FHe=i(y),Em=n(y,"LI",{});var G0e=s(Em);Ire=n(G0e,"STRONG",{});var _Wr=s(Ire);THe=r(_Wr,"megatron-bert"),_Wr.forEach(t),MHe=r(G0e," \u2014 "),iS=n(G0e,"A",{href:!0});var uWr=s(iS);EHe=r(uWr,"MegatronBertConfig"),uWr.forEach(t),CHe=r(G0e," (Megatron-BERT model)"),G0e.forEach(t),wHe=i(y),Cm=n(y,"LI",{});var O0e=s(Cm);Nre=n(O0e,"STRONG",{});var bWr=s(Nre);AHe=r(bWr,"mobilebert"),bWr.forEach(t),yHe=r(O0e," \u2014 "),dS=n(O0e,"A",{href:!0});var vWr=s(dS);LHe=r(vWr,"MobileBertConfig"),vWr.forEach(t),xHe=r(O0e," (MobileBERT model)"),O0e.forEach(t),$He=i(y),wm=n(y,"LI",{});var V0e=s(wm);qre=n(V0e,"STRONG",{});var FWr=s(qre);kHe=r(FWr,"mpnet"),FWr.forEach(t),SHe=r(V0e," \u2014 "),cS=n(V0e,"A",{href:!0});var TWr=s(cS);RHe=r(TWr,"MPNetConfig"),TWr.forEach(t),PHe=r(V0e," (MPNet model)"),V0e.forEach(t),BHe=i(y),Am=n(y,"LI",{});var X0e=s(Am);jre=n(X0e,"STRONG",{});var MWr=s(jre);IHe=r(MWr,"mt5"),MWr.forEach(t),NHe=r(X0e," \u2014 "),fS=n(X0e,"A",{href:!0});var EWr=s(fS);qHe=r(EWr,"MT5Config"),EWr.forEach(t),jHe=r(X0e," (MT5 model)"),X0e.forEach(t),DHe=i(y),ym=n(y,"LI",{});var z0e=s(ym);Dre=n(z0e,"STRONG",{});var CWr=s(Dre);GHe=r(CWr,"nystromformer"),CWr.forEach(t),OHe=r(z0e," \u2014 "),mS=n(z0e,"A",{href:!0});var wWr=s(mS);VHe=r(wWr,"NystromformerConfig"),wWr.forEach(t),XHe=r(z0e," (Nystr\xF6mformer model)"),z0e.forEach(t),zHe=i(y),Lm=n(y,"LI",{});var W0e=s(Lm);Gre=n(W0e,"STRONG",{});var AWr=s(Gre);WHe=r(AWr,"openai-gpt"),AWr.forEach(t),QHe=r(W0e," \u2014 "),gS=n(W0e,"A",{href:!0});var yWr=s(gS);HHe=r(yWr,"OpenAIGPTConfig"),yWr.forEach(t),UHe=r(W0e," (OpenAI GPT model)"),W0e.forEach(t),JHe=i(y),xm=n(y,"LI",{});var Q0e=s(xm);Ore=n(Q0e,"STRONG",{});var LWr=s(Ore);YHe=r(LWr,"opt"),LWr.forEach(t),KHe=r(Q0e," \u2014 "),hS=n(Q0e,"A",{href:!0});var xWr=s(hS);ZHe=r(xWr,"OPTConfig"),xWr.forEach(t),eUe=r(Q0e," (OPT model)"),Q0e.forEach(t),oUe=i(y),$m=n(y,"LI",{});var H0e=s($m);Vre=n(H0e,"STRONG",{});var $Wr=s(Vre);rUe=r($Wr,"pegasus"),$Wr.forEach(t),tUe=r(H0e," \u2014 "),pS=n(H0e,"A",{href:!0});var kWr=s(pS);aUe=r(kWr,"PegasusConfig"),kWr.forEach(t),nUe=r(H0e," (Pegasus model)"),H0e.forEach(t),sUe=i(y),km=n(y,"LI",{});var U0e=s(km);Xre=n(U0e,"STRONG",{});var SWr=s(Xre);lUe=r(SWr,"perceiver"),SWr.forEach(t),iUe=r(U0e," \u2014 "),_S=n(U0e,"A",{href:!0});var RWr=s(_S);dUe=r(RWr,"PerceiverConfig"),RWr.forEach(t),cUe=r(U0e," (Perceiver model)"),U0e.forEach(t),fUe=i(y),Sm=n(y,"LI",{});var J0e=s(Sm);zre=n(J0e,"STRONG",{});var PWr=s(zre);mUe=r(PWr,"plbart"),PWr.forEach(t),gUe=r(J0e," \u2014 "),uS=n(J0e,"A",{href:!0});var BWr=s(uS);hUe=r(BWr,"PLBartConfig"),BWr.forEach(t),pUe=r(J0e," (PLBart model)"),J0e.forEach(t),_Ue=i(y),Rm=n(y,"LI",{});var Y0e=s(Rm);Wre=n(Y0e,"STRONG",{});var IWr=s(Wre);uUe=r(IWr,"poolformer"),IWr.forEach(t),bUe=r(Y0e," \u2014 "),bS=n(Y0e,"A",{href:!0});var NWr=s(bS);vUe=r(NWr,"PoolFormerConfig"),NWr.forEach(t),FUe=r(Y0e," (PoolFormer model)"),Y0e.forEach(t),TUe=i(y),Pm=n(y,"LI",{});var K0e=s(Pm);Qre=n(K0e,"STRONG",{});var qWr=s(Qre);MUe=r(qWr,"prophetnet"),qWr.forEach(t),EUe=r(K0e," \u2014 "),vS=n(K0e,"A",{href:!0});var jWr=s(vS);CUe=r(jWr,"ProphetNetConfig"),jWr.forEach(t),wUe=r(K0e," (ProphetNet model)"),K0e.forEach(t),AUe=i(y),Bm=n(y,"LI",{});var Z0e=s(Bm);Hre=n(Z0e,"STRONG",{});var DWr=s(Hre);yUe=r(DWr,"qdqbert"),DWr.forEach(t),LUe=r(Z0e," \u2014 "),FS=n(Z0e,"A",{href:!0});var GWr=s(FS);xUe=r(GWr,"QDQBertConfig"),GWr.forEach(t),$Ue=r(Z0e," (QDQBert model)"),Z0e.forEach(t),kUe=i(y),Im=n(y,"LI",{});var ewe=s(Im);Ure=n(ewe,"STRONG",{});var OWr=s(Ure);SUe=r(OWr,"rag"),OWr.forEach(t),RUe=r(ewe," \u2014 "),TS=n(ewe,"A",{href:!0});var VWr=s(TS);PUe=r(VWr,"RagConfig"),VWr.forEach(t),BUe=r(ewe," (RAG model)"),ewe.forEach(t),IUe=i(y),Nm=n(y,"LI",{});var owe=s(Nm);Jre=n(owe,"STRONG",{});var XWr=s(Jre);NUe=r(XWr,"realm"),XWr.forEach(t),qUe=r(owe," \u2014 "),MS=n(owe,"A",{href:!0});var zWr=s(MS);jUe=r(zWr,"RealmConfig"),zWr.forEach(t),DUe=r(owe," (REALM model)"),owe.forEach(t),GUe=i(y),qm=n(y,"LI",{});var rwe=s(qm);Yre=n(rwe,"STRONG",{});var WWr=s(Yre);OUe=r(WWr,"reformer"),WWr.forEach(t),VUe=r(rwe," \u2014 "),ES=n(rwe,"A",{href:!0});var QWr=s(ES);XUe=r(QWr,"ReformerConfig"),QWr.forEach(t),zUe=r(rwe," (Reformer model)"),rwe.forEach(t),WUe=i(y),jm=n(y,"LI",{});var twe=s(jm);Kre=n(twe,"STRONG",{});var HWr=s(Kre);QUe=r(HWr,"regnet"),HWr.forEach(t),HUe=r(twe," \u2014 "),CS=n(twe,"A",{href:!0});var UWr=s(CS);UUe=r(UWr,"RegNetConfig"),UWr.forEach(t),JUe=r(twe," (RegNet model)"),twe.forEach(t),YUe=i(y),Dm=n(y,"LI",{});var awe=s(Dm);Zre=n(awe,"STRONG",{});var JWr=s(Zre);KUe=r(JWr,"rembert"),JWr.forEach(t),ZUe=r(awe," \u2014 "),wS=n(awe,"A",{href:!0});var YWr=s(wS);eJe=r(YWr,"RemBertConfig"),YWr.forEach(t),oJe=r(awe," (RemBERT model)"),awe.forEach(t),rJe=i(y),Gm=n(y,"LI",{});var nwe=s(Gm);ete=n(nwe,"STRONG",{});var KWr=s(ete);tJe=r(KWr,"resnet"),KWr.forEach(t),aJe=r(nwe," \u2014 "),AS=n(nwe,"A",{href:!0});var ZWr=s(AS);nJe=r(ZWr,"ResNetConfig"),ZWr.forEach(t),sJe=r(nwe," (ResNet model)"),nwe.forEach(t),lJe=i(y),Om=n(y,"LI",{});var swe=s(Om);ote=n(swe,"STRONG",{});var eQr=s(ote);iJe=r(eQr,"retribert"),eQr.forEach(t),dJe=r(swe," \u2014 "),yS=n(swe,"A",{href:!0});var oQr=s(yS);cJe=r(oQr,"RetriBertConfig"),oQr.forEach(t),fJe=r(swe," (RetriBERT model)"),swe.forEach(t),mJe=i(y),Vm=n(y,"LI",{});var lwe=s(Vm);rte=n(lwe,"STRONG",{});var rQr=s(rte);gJe=r(rQr,"roberta"),rQr.forEach(t),hJe=r(lwe," \u2014 "),LS=n(lwe,"A",{href:!0});var tQr=s(LS);pJe=r(tQr,"RobertaConfig"),tQr.forEach(t),_Je=r(lwe," (RoBERTa model)"),lwe.forEach(t),uJe=i(y),Xm=n(y,"LI",{});var iwe=s(Xm);tte=n(iwe,"STRONG",{});var aQr=s(tte);bJe=r(aQr,"roformer"),aQr.forEach(t),vJe=r(iwe," \u2014 "),xS=n(iwe,"A",{href:!0});var nQr=s(xS);FJe=r(nQr,"RoFormerConfig"),nQr.forEach(t),TJe=r(iwe," (RoFormer model)"),iwe.forEach(t),MJe=i(y),zm=n(y,"LI",{});var dwe=s(zm);ate=n(dwe,"STRONG",{});var sQr=s(ate);EJe=r(sQr,"segformer"),sQr.forEach(t),CJe=r(dwe," \u2014 "),$S=n(dwe,"A",{href:!0});var lQr=s($S);wJe=r(lQr,"SegformerConfig"),lQr.forEach(t),AJe=r(dwe," (SegFormer model)"),dwe.forEach(t),yJe=i(y),Wm=n(y,"LI",{});var cwe=s(Wm);nte=n(cwe,"STRONG",{});var iQr=s(nte);LJe=r(iQr,"sew"),iQr.forEach(t),xJe=r(cwe," \u2014 "),kS=n(cwe,"A",{href:!0});var dQr=s(kS);$Je=r(dQr,"SEWConfig"),dQr.forEach(t),kJe=r(cwe," (SEW model)"),cwe.forEach(t),SJe=i(y),Qm=n(y,"LI",{});var fwe=s(Qm);ste=n(fwe,"STRONG",{});var cQr=s(ste);RJe=r(cQr,"sew-d"),cQr.forEach(t),PJe=r(fwe," \u2014 "),SS=n(fwe,"A",{href:!0});var fQr=s(SS);BJe=r(fQr,"SEWDConfig"),fQr.forEach(t),IJe=r(fwe," (SEW-D model)"),fwe.forEach(t),NJe=i(y),Hm=n(y,"LI",{});var mwe=s(Hm);lte=n(mwe,"STRONG",{});var mQr=s(lte);qJe=r(mQr,"speech-encoder-decoder"),mQr.forEach(t),jJe=r(mwe," \u2014 "),RS=n(mwe,"A",{href:!0});var gQr=s(RS);DJe=r(gQr,"SpeechEncoderDecoderConfig"),gQr.forEach(t),GJe=r(mwe," (Speech Encoder decoder model)"),mwe.forEach(t),OJe=i(y),Um=n(y,"LI",{});var gwe=s(Um);ite=n(gwe,"STRONG",{});var hQr=s(ite);VJe=r(hQr,"speech_to_text"),hQr.forEach(t),XJe=r(gwe," \u2014 "),PS=n(gwe,"A",{href:!0});var pQr=s(PS);zJe=r(pQr,"Speech2TextConfig"),pQr.forEach(t),WJe=r(gwe," (Speech2Text model)"),gwe.forEach(t),QJe=i(y),Jm=n(y,"LI",{});var hwe=s(Jm);dte=n(hwe,"STRONG",{});var _Qr=s(dte);HJe=r(_Qr,"speech_to_text_2"),_Qr.forEach(t),UJe=r(hwe," \u2014 "),BS=n(hwe,"A",{href:!0});var uQr=s(BS);JJe=r(uQr,"Speech2Text2Config"),uQr.forEach(t),YJe=r(hwe," (Speech2Text2 model)"),hwe.forEach(t),KJe=i(y),Ym=n(y,"LI",{});var pwe=s(Ym);cte=n(pwe,"STRONG",{});var bQr=s(cte);ZJe=r(bQr,"splinter"),bQr.forEach(t),eYe=r(pwe," \u2014 "),IS=n(pwe,"A",{href:!0});var vQr=s(IS);oYe=r(vQr,"SplinterConfig"),vQr.forEach(t),rYe=r(pwe," (Splinter model)"),pwe.forEach(t),tYe=i(y),Km=n(y,"LI",{});var _we=s(Km);fte=n(_we,"STRONG",{});var FQr=s(fte);aYe=r(FQr,"squeezebert"),FQr.forEach(t),nYe=r(_we," \u2014 "),NS=n(_we,"A",{href:!0});var TQr=s(NS);sYe=r(TQr,"SqueezeBertConfig"),TQr.forEach(t),lYe=r(_we," (SqueezeBERT model)"),_we.forEach(t),iYe=i(y),Zm=n(y,"LI",{});var uwe=s(Zm);mte=n(uwe,"STRONG",{});var MQr=s(mte);dYe=r(MQr,"swin"),MQr.forEach(t),cYe=r(uwe," \u2014 "),qS=n(uwe,"A",{href:!0});var EQr=s(qS);fYe=r(EQr,"SwinConfig"),EQr.forEach(t),mYe=r(uwe," (Swin Transformer model)"),uwe.forEach(t),gYe=i(y),eg=n(y,"LI",{});var bwe=s(eg);gte=n(bwe,"STRONG",{});var CQr=s(gte);hYe=r(CQr,"t5"),CQr.forEach(t),pYe=r(bwe," \u2014 "),jS=n(bwe,"A",{href:!0});var wQr=s(jS);_Ye=r(wQr,"T5Config"),wQr.forEach(t),uYe=r(bwe," (T5 model)"),bwe.forEach(t),bYe=i(y),og=n(y,"LI",{});var vwe=s(og);hte=n(vwe,"STRONG",{});var AQr=s(hte);vYe=r(AQr,"tapas"),AQr.forEach(t),FYe=r(vwe," \u2014 "),DS=n(vwe,"A",{href:!0});var yQr=s(DS);TYe=r(yQr,"TapasConfig"),yQr.forEach(t),MYe=r(vwe," (TAPAS model)"),vwe.forEach(t),EYe=i(y),rg=n(y,"LI",{});var Fwe=s(rg);pte=n(Fwe,"STRONG",{});var LQr=s(pte);CYe=r(LQr,"trajectory_transformer"),LQr.forEach(t),wYe=r(Fwe," \u2014 "),GS=n(Fwe,"A",{href:!0});var xQr=s(GS);AYe=r(xQr,"TrajectoryTransformerConfig"),xQr.forEach(t),yYe=r(Fwe," (Trajectory Transformer model)"),Fwe.forEach(t),LYe=i(y),tg=n(y,"LI",{});var Twe=s(tg);_te=n(Twe,"STRONG",{});var $Qr=s(_te);xYe=r($Qr,"transfo-xl"),$Qr.forEach(t),$Ye=r(Twe," \u2014 "),OS=n(Twe,"A",{href:!0});var kQr=s(OS);kYe=r(kQr,"TransfoXLConfig"),kQr.forEach(t),SYe=r(Twe," (Transformer-XL model)"),Twe.forEach(t),RYe=i(y),ag=n(y,"LI",{});var Mwe=s(ag);ute=n(Mwe,"STRONG",{});var SQr=s(ute);PYe=r(SQr,"trocr"),SQr.forEach(t),BYe=r(Mwe," \u2014 "),VS=n(Mwe,"A",{href:!0});var RQr=s(VS);IYe=r(RQr,"TrOCRConfig"),RQr.forEach(t),NYe=r(Mwe," (TrOCR model)"),Mwe.forEach(t),qYe=i(y),ng=n(y,"LI",{});var Ewe=s(ng);bte=n(Ewe,"STRONG",{});var PQr=s(bte);jYe=r(PQr,"unispeech"),PQr.forEach(t),DYe=r(Ewe," \u2014 "),XS=n(Ewe,"A",{href:!0});var BQr=s(XS);GYe=r(BQr,"UniSpeechConfig"),BQr.forEach(t),OYe=r(Ewe," (UniSpeech model)"),Ewe.forEach(t),VYe=i(y),sg=n(y,"LI",{});var Cwe=s(sg);vte=n(Cwe,"STRONG",{});var IQr=s(vte);XYe=r(IQr,"unispeech-sat"),IQr.forEach(t),zYe=r(Cwe," \u2014 "),zS=n(Cwe,"A",{href:!0});var NQr=s(zS);WYe=r(NQr,"UniSpeechSatConfig"),NQr.forEach(t),QYe=r(Cwe," (UniSpeechSat model)"),Cwe.forEach(t),HYe=i(y),lg=n(y,"LI",{});var wwe=s(lg);Fte=n(wwe,"STRONG",{});var qQr=s(Fte);UYe=r(qQr,"van"),qQr.forEach(t),JYe=r(wwe," \u2014 "),WS=n(wwe,"A",{href:!0});var jQr=s(WS);YYe=r(jQr,"VanConfig"),jQr.forEach(t),KYe=r(wwe," (VAN model)"),wwe.forEach(t),ZYe=i(y),ig=n(y,"LI",{});var Awe=s(ig);Tte=n(Awe,"STRONG",{});var DQr=s(Tte);eKe=r(DQr,"vilt"),DQr.forEach(t),oKe=r(Awe," \u2014 "),QS=n(Awe,"A",{href:!0});var GQr=s(QS);rKe=r(GQr,"ViltConfig"),GQr.forEach(t),tKe=r(Awe," (ViLT model)"),Awe.forEach(t),aKe=i(y),dg=n(y,"LI",{});var ywe=s(dg);Mte=n(ywe,"STRONG",{});var OQr=s(Mte);nKe=r(OQr,"vision-encoder-decoder"),OQr.forEach(t),sKe=r(ywe," \u2014 "),HS=n(ywe,"A",{href:!0});var VQr=s(HS);lKe=r(VQr,"VisionEncoderDecoderConfig"),VQr.forEach(t),iKe=r(ywe," (Vision Encoder decoder model)"),ywe.forEach(t),dKe=i(y),cg=n(y,"LI",{});var Lwe=s(cg);Ete=n(Lwe,"STRONG",{});var XQr=s(Ete);cKe=r(XQr,"vision-text-dual-encoder"),XQr.forEach(t),fKe=r(Lwe," \u2014 "),US=n(Lwe,"A",{href:!0});var zQr=s(US);mKe=r(zQr,"VisionTextDualEncoderConfig"),zQr.forEach(t),gKe=r(Lwe," (VisionTextDualEncoder model)"),Lwe.forEach(t),hKe=i(y),fg=n(y,"LI",{});var xwe=s(fg);Cte=n(xwe,"STRONG",{});var WQr=s(Cte);pKe=r(WQr,"visual_bert"),WQr.forEach(t),_Ke=r(xwe," \u2014 "),JS=n(xwe,"A",{href:!0});var QQr=s(JS);uKe=r(QQr,"VisualBertConfig"),QQr.forEach(t),bKe=r(xwe," (VisualBERT model)"),xwe.forEach(t),vKe=i(y),mg=n(y,"LI",{});var $we=s(mg);wte=n($we,"STRONG",{});var HQr=s(wte);FKe=r(HQr,"vit"),HQr.forEach(t),TKe=r($we," \u2014 "),YS=n($we,"A",{href:!0});var UQr=s(YS);MKe=r(UQr,"ViTConfig"),UQr.forEach(t),EKe=r($we," (ViT model)"),$we.forEach(t),CKe=i(y),gg=n(y,"LI",{});var kwe=s(gg);Ate=n(kwe,"STRONG",{});var JQr=s(Ate);wKe=r(JQr,"vit_mae"),JQr.forEach(t),AKe=r(kwe," \u2014 "),KS=n(kwe,"A",{href:!0});var YQr=s(KS);yKe=r(YQr,"ViTMAEConfig"),YQr.forEach(t),LKe=r(kwe," (ViTMAE model)"),kwe.forEach(t),xKe=i(y),hg=n(y,"LI",{});var Swe=s(hg);yte=n(Swe,"STRONG",{});var KQr=s(yte);$Ke=r(KQr,"wav2vec2"),KQr.forEach(t),kKe=r(Swe," \u2014 "),ZS=n(Swe,"A",{href:!0});var ZQr=s(ZS);SKe=r(ZQr,"Wav2Vec2Config"),ZQr.forEach(t),RKe=r(Swe," (Wav2Vec2 model)"),Swe.forEach(t),PKe=i(y),pg=n(y,"LI",{});var Rwe=s(pg);Lte=n(Rwe,"STRONG",{});var eHr=s(Lte);BKe=r(eHr,"wav2vec2-conformer"),eHr.forEach(t),IKe=r(Rwe," \u2014 "),eR=n(Rwe,"A",{href:!0});var oHr=s(eR);NKe=r(oHr,"Wav2Vec2ConformerConfig"),oHr.forEach(t),qKe=r(Rwe," (Wav2Vec2-Conformer model)"),Rwe.forEach(t),jKe=i(y),_g=n(y,"LI",{});var Pwe=s(_g);xte=n(Pwe,"STRONG",{});var rHr=s(xte);DKe=r(rHr,"wavlm"),rHr.forEach(t),GKe=r(Pwe," \u2014 "),oR=n(Pwe,"A",{href:!0});var tHr=s(oR);OKe=r(tHr,"WavLMConfig"),tHr.forEach(t),VKe=r(Pwe," (WavLM model)"),Pwe.forEach(t),XKe=i(y),ug=n(y,"LI",{});var Bwe=s(ug);$te=n(Bwe,"STRONG",{});var aHr=s($te);zKe=r(aHr,"xglm"),aHr.forEach(t),WKe=r(Bwe," \u2014 "),rR=n(Bwe,"A",{href:!0});var nHr=s(rR);QKe=r(nHr,"XGLMConfig"),nHr.forEach(t),HKe=r(Bwe," (XGLM model)"),Bwe.forEach(t),UKe=i(y),bg=n(y,"LI",{});var Iwe=s(bg);kte=n(Iwe,"STRONG",{});var sHr=s(kte);JKe=r(sHr,"xlm"),sHr.forEach(t),YKe=r(Iwe," \u2014 "),tR=n(Iwe,"A",{href:!0});var lHr=s(tR);KKe=r(lHr,"XLMConfig"),lHr.forEach(t),ZKe=r(Iwe," (XLM model)"),Iwe.forEach(t),eZe=i(y),vg=n(y,"LI",{});var Nwe=s(vg);Ste=n(Nwe,"STRONG",{});var iHr=s(Ste);oZe=r(iHr,"xlm-prophetnet"),iHr.forEach(t),rZe=r(Nwe," \u2014 "),aR=n(Nwe,"A",{href:!0});var dHr=s(aR);tZe=r(dHr,"XLMProphetNetConfig"),dHr.forEach(t),aZe=r(Nwe," (XLM-ProphetNet model)"),Nwe.forEach(t),nZe=i(y),Fg=n(y,"LI",{});var qwe=s(Fg);Rte=n(qwe,"STRONG",{});var cHr=s(Rte);sZe=r(cHr,"xlm-roberta"),cHr.forEach(t),lZe=r(qwe," \u2014 "),nR=n(qwe,"A",{href:!0});var fHr=s(nR);iZe=r(fHr,"XLMRobertaConfig"),fHr.forEach(t),dZe=r(qwe," (XLM-RoBERTa model)"),qwe.forEach(t),cZe=i(y),Tg=n(y,"LI",{});var jwe=s(Tg);Pte=n(jwe,"STRONG",{});var mHr=s(Pte);fZe=r(mHr,"xlm-roberta-xl"),mHr.forEach(t),mZe=r(jwe," \u2014 "),sR=n(jwe,"A",{href:!0});var gHr=s(sR);gZe=r(gHr,"XLMRobertaXLConfig"),gHr.forEach(t),hZe=r(jwe," (XLM-RoBERTa-XL model)"),jwe.forEach(t),pZe=i(y),Mg=n(y,"LI",{});var Dwe=s(Mg);Bte=n(Dwe,"STRONG",{});var hHr=s(Bte);_Ze=r(hHr,"xlnet"),hHr.forEach(t),uZe=r(Dwe," \u2014 "),lR=n(Dwe,"A",{href:!0});var pHr=s(lR);bZe=r(pHr,"XLNetConfig"),pHr.forEach(t),vZe=r(Dwe," (XLNet model)"),Dwe.forEach(t),FZe=i(y),Eg=n(y,"LI",{});var Gwe=s(Eg);Ite=n(Gwe,"STRONG",{});var _Hr=s(Ite);TZe=r(_Hr,"yolos"),_Hr.forEach(t),MZe=r(Gwe," \u2014 "),iR=n(Gwe,"A",{href:!0});var uHr=s(iR);EZe=r(uHr,"YolosConfig"),uHr.forEach(t),CZe=r(Gwe," (YOLOS model)"),Gwe.forEach(t),wZe=i(y),Cg=n(y,"LI",{});var Owe=s(Cg);Nte=n(Owe,"STRONG",{});var bHr=s(Nte);AZe=r(bHr,"yoso"),bHr.forEach(t),yZe=r(Owe," \u2014 "),dR=n(Owe,"A",{href:!0});var vHr=s(dR);LZe=r(vHr,"YosoConfig"),vHr.forEach(t),xZe=r(Owe," (YOSO model)"),Owe.forEach(t),y.forEach(t),$Ze=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),kZe=i(et),Ag=n(et,"DIV",{class:!0});var jDe=s(Ag);T(Vy.$$.fragment,jDe),SZe=i(jDe),qte=n(jDe,"P",{});var FHr=s(qte);RZe=r(FHr,"Register a new configuration for this class."),FHr.forEach(t),jDe.forEach(t),et.forEach(t),Oqe=i(f),Mi=n(f,"H2",{class:!0});var DDe=s(Mi);yg=n(DDe,"A",{id:!0,class:!0,href:!0});var THr=s(yg);jte=n(THr,"SPAN",{});var MHr=s(jte);T(Xy.$$.fragment,MHr),MHr.forEach(t),THr.forEach(t),PZe=i(DDe),Dte=n(DDe,"SPAN",{});var EHr=s(Dte);BZe=r(EHr,"AutoTokenizer"),EHr.forEach(t),DDe.forEach(t),Vqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(zy.$$.fragment,qs),IZe=i(qs),Wy=n(qs,"P",{});var GDe=s(Wy);NZe=r(GDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cR=n(GDe,"A",{href:!0});var CHr=s(cR);qZe=r(CHr,"AutoTokenizer.from_pretrained()"),CHr.forEach(t),jZe=r(GDe," class method."),GDe.forEach(t),DZe=i(qs),Qy=n(qs,"P",{});var ODe=s(Qy);GZe=r(ODe,"This class cannot be instantiated directly using "),Gte=n(ODe,"CODE",{});var wHr=s(Gte);OZe=r(wHr,"__init__()"),wHr.forEach(t),VZe=r(ODe," (throws an error)."),ODe.forEach(t),XZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(Hy.$$.fragment,js),zZe=i(js),Ote=n(js,"P",{});var AHr=s(Ote);WZe=r(AHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),AHr.forEach(t),QZe=i(js),Aa=n(js,"P",{});var qw=s(Aa);HZe=r(qw,"The tokenizer class to instantiate is selected based on the "),Vte=n(qw,"CODE",{});var yHr=s(Vte);UZe=r(yHr,"model_type"),yHr.forEach(t),JZe=r(qw,` property of the config object (either
passed as an argument or loaded from `),Xte=n(qw,"CODE",{});var LHr=s(Xte);YZe=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),KZe=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=n(qw,"CODE",{});var xHr=s(zte);ZZe=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),eeo=r(qw,":"),qw.forEach(t),oeo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ux=s(Sn);Wte=n(Ux,"STRONG",{});var $Hr=s(Wte);reo=r($Hr,"albert"),$Hr.forEach(t),teo=r(Ux," \u2014 "),fR=n(Ux,"A",{href:!0});var kHr=s(fR);aeo=r(kHr,"AlbertTokenizer"),kHr.forEach(t),neo=r(Ux," or "),mR=n(Ux,"A",{href:!0});var SHr=s(mR);seo=r(SHr,"AlbertTokenizerFast"),SHr.forEach(t),leo=r(Ux," (ALBERT model)"),Ux.forEach(t),ieo=i(S),Rn=n(S,"LI",{});var Jx=s(Rn);Qte=n(Jx,"STRONG",{});var RHr=s(Qte);deo=r(RHr,"bart"),RHr.forEach(t),ceo=r(Jx," \u2014 "),gR=n(Jx,"A",{href:!0});var PHr=s(gR);feo=r(PHr,"BartTokenizer"),PHr.forEach(t),meo=r(Jx," or "),hR=n(Jx,"A",{href:!0});var BHr=s(hR);geo=r(BHr,"BartTokenizerFast"),BHr.forEach(t),heo=r(Jx," (BART model)"),Jx.forEach(t),peo=i(S),Pn=n(S,"LI",{});var Yx=s(Pn);Hte=n(Yx,"STRONG",{});var IHr=s(Hte);_eo=r(IHr,"barthez"),IHr.forEach(t),ueo=r(Yx," \u2014 "),pR=n(Yx,"A",{href:!0});var NHr=s(pR);beo=r(NHr,"BarthezTokenizer"),NHr.forEach(t),veo=r(Yx," or "),_R=n(Yx,"A",{href:!0});var qHr=s(_R);Feo=r(qHr,"BarthezTokenizerFast"),qHr.forEach(t),Teo=r(Yx," (BARThez model)"),Yx.forEach(t),Meo=i(S),Lg=n(S,"LI",{});var Vwe=s(Lg);Ute=n(Vwe,"STRONG",{});var jHr=s(Ute);Eeo=r(jHr,"bartpho"),jHr.forEach(t),Ceo=r(Vwe," \u2014 "),uR=n(Vwe,"A",{href:!0});var DHr=s(uR);weo=r(DHr,"BartphoTokenizer"),DHr.forEach(t),Aeo=r(Vwe," (BARTpho model)"),Vwe.forEach(t),yeo=i(S),Bn=n(S,"LI",{});var Kx=s(Bn);Jte=n(Kx,"STRONG",{});var GHr=s(Jte);Leo=r(GHr,"bert"),GHr.forEach(t),xeo=r(Kx," \u2014 "),bR=n(Kx,"A",{href:!0});var OHr=s(bR);$eo=r(OHr,"BertTokenizer"),OHr.forEach(t),keo=r(Kx," or "),vR=n(Kx,"A",{href:!0});var VHr=s(vR);Seo=r(VHr,"BertTokenizerFast"),VHr.forEach(t),Reo=r(Kx," (BERT model)"),Kx.forEach(t),Peo=i(S),xg=n(S,"LI",{});var Xwe=s(xg);Yte=n(Xwe,"STRONG",{});var XHr=s(Yte);Beo=r(XHr,"bert-generation"),XHr.forEach(t),Ieo=r(Xwe," \u2014 "),FR=n(Xwe,"A",{href:!0});var zHr=s(FR);Neo=r(zHr,"BertGenerationTokenizer"),zHr.forEach(t),qeo=r(Xwe," (Bert Generation model)"),Xwe.forEach(t),jeo=i(S),$g=n(S,"LI",{});var zwe=s($g);Kte=n(zwe,"STRONG",{});var WHr=s(Kte);Deo=r(WHr,"bert-japanese"),WHr.forEach(t),Geo=r(zwe," \u2014 "),TR=n(zwe,"A",{href:!0});var QHr=s(TR);Oeo=r(QHr,"BertJapaneseTokenizer"),QHr.forEach(t),Veo=r(zwe," (BertJapanese model)"),zwe.forEach(t),Xeo=i(S),kg=n(S,"LI",{});var Wwe=s(kg);Zte=n(Wwe,"STRONG",{});var HHr=s(Zte);zeo=r(HHr,"bertweet"),HHr.forEach(t),Weo=r(Wwe," \u2014 "),MR=n(Wwe,"A",{href:!0});var UHr=s(MR);Qeo=r(UHr,"BertweetTokenizer"),UHr.forEach(t),Heo=r(Wwe," (BERTweet model)"),Wwe.forEach(t),Ueo=i(S),In=n(S,"LI",{});var Zx=s(In);eae=n(Zx,"STRONG",{});var JHr=s(eae);Jeo=r(JHr,"big_bird"),JHr.forEach(t),Yeo=r(Zx," \u2014 "),ER=n(Zx,"A",{href:!0});var YHr=s(ER);Keo=r(YHr,"BigBirdTokenizer"),YHr.forEach(t),Zeo=r(Zx," or "),CR=n(Zx,"A",{href:!0});var KHr=s(CR);eoo=r(KHr,"BigBirdTokenizerFast"),KHr.forEach(t),ooo=r(Zx," (BigBird model)"),Zx.forEach(t),roo=i(S),Nn=n(S,"LI",{});var e$=s(Nn);oae=n(e$,"STRONG",{});var ZHr=s(oae);too=r(ZHr,"bigbird_pegasus"),ZHr.forEach(t),aoo=r(e$," \u2014 "),wR=n(e$,"A",{href:!0});var eUr=s(wR);noo=r(eUr,"PegasusTokenizer"),eUr.forEach(t),soo=r(e$," or "),AR=n(e$,"A",{href:!0});var oUr=s(AR);loo=r(oUr,"PegasusTokenizerFast"),oUr.forEach(t),ioo=r(e$," (BigBird-Pegasus model)"),e$.forEach(t),doo=i(S),qn=n(S,"LI",{});var o$=s(qn);rae=n(o$,"STRONG",{});var rUr=s(rae);coo=r(rUr,"blenderbot"),rUr.forEach(t),foo=r(o$," \u2014 "),yR=n(o$,"A",{href:!0});var tUr=s(yR);moo=r(tUr,"BlenderbotTokenizer"),tUr.forEach(t),goo=r(o$," or "),LR=n(o$,"A",{href:!0});var aUr=s(LR);hoo=r(aUr,"BlenderbotTokenizerFast"),aUr.forEach(t),poo=r(o$," (Blenderbot model)"),o$.forEach(t),_oo=i(S),Sg=n(S,"LI",{});var Qwe=s(Sg);tae=n(Qwe,"STRONG",{});var nUr=s(tae);uoo=r(nUr,"blenderbot-small"),nUr.forEach(t),boo=r(Qwe," \u2014 "),xR=n(Qwe,"A",{href:!0});var sUr=s(xR);voo=r(sUr,"BlenderbotSmallTokenizer"),sUr.forEach(t),Foo=r(Qwe," (BlenderbotSmall model)"),Qwe.forEach(t),Too=i(S),Rg=n(S,"LI",{});var Hwe=s(Rg);aae=n(Hwe,"STRONG",{});var lUr=s(aae);Moo=r(lUr,"byt5"),lUr.forEach(t),Eoo=r(Hwe," \u2014 "),$R=n(Hwe,"A",{href:!0});var iUr=s($R);Coo=r(iUr,"ByT5Tokenizer"),iUr.forEach(t),woo=r(Hwe," (ByT5 model)"),Hwe.forEach(t),Aoo=i(S),jn=n(S,"LI",{});var r$=s(jn);nae=n(r$,"STRONG",{});var dUr=s(nae);yoo=r(dUr,"camembert"),dUr.forEach(t),Loo=r(r$," \u2014 "),kR=n(r$,"A",{href:!0});var cUr=s(kR);xoo=r(cUr,"CamembertTokenizer"),cUr.forEach(t),$oo=r(r$," or "),SR=n(r$,"A",{href:!0});var fUr=s(SR);koo=r(fUr,"CamembertTokenizerFast"),fUr.forEach(t),Soo=r(r$," (CamemBERT model)"),r$.forEach(t),Roo=i(S),Pg=n(S,"LI",{});var Uwe=s(Pg);sae=n(Uwe,"STRONG",{});var mUr=s(sae);Poo=r(mUr,"canine"),mUr.forEach(t),Boo=r(Uwe," \u2014 "),RR=n(Uwe,"A",{href:!0});var gUr=s(RR);Ioo=r(gUr,"CanineTokenizer"),gUr.forEach(t),Noo=r(Uwe," (CANINE model)"),Uwe.forEach(t),qoo=i(S),Dn=n(S,"LI",{});var t$=s(Dn);lae=n(t$,"STRONG",{});var hUr=s(lae);joo=r(hUr,"clip"),hUr.forEach(t),Doo=r(t$," \u2014 "),PR=n(t$,"A",{href:!0});var pUr=s(PR);Goo=r(pUr,"CLIPTokenizer"),pUr.forEach(t),Ooo=r(t$," or "),BR=n(t$,"A",{href:!0});var _Ur=s(BR);Voo=r(_Ur,"CLIPTokenizerFast"),_Ur.forEach(t),Xoo=r(t$," (CLIP model)"),t$.forEach(t),zoo=i(S),Gn=n(S,"LI",{});var a$=s(Gn);iae=n(a$,"STRONG",{});var uUr=s(iae);Woo=r(uUr,"convbert"),uUr.forEach(t),Qoo=r(a$," \u2014 "),IR=n(a$,"A",{href:!0});var bUr=s(IR);Hoo=r(bUr,"ConvBertTokenizer"),bUr.forEach(t),Uoo=r(a$," or "),NR=n(a$,"A",{href:!0});var vUr=s(NR);Joo=r(vUr,"ConvBertTokenizerFast"),vUr.forEach(t),Yoo=r(a$," (ConvBERT model)"),a$.forEach(t),Koo=i(S),On=n(S,"LI",{});var n$=s(On);dae=n(n$,"STRONG",{});var FUr=s(dae);Zoo=r(FUr,"cpm"),FUr.forEach(t),ero=r(n$," \u2014 "),qR=n(n$,"A",{href:!0});var TUr=s(qR);oro=r(TUr,"CpmTokenizer"),TUr.forEach(t),rro=r(n$," or "),jR=n(n$,"A",{href:!0});var MUr=s(jR);tro=r(MUr,"CpmTokenizerFast"),MUr.forEach(t),aro=r(n$," (CPM model)"),n$.forEach(t),nro=i(S),Bg=n(S,"LI",{});var Jwe=s(Bg);cae=n(Jwe,"STRONG",{});var EUr=s(cae);sro=r(EUr,"ctrl"),EUr.forEach(t),lro=r(Jwe," \u2014 "),DR=n(Jwe,"A",{href:!0});var CUr=s(DR);iro=r(CUr,"CTRLTokenizer"),CUr.forEach(t),dro=r(Jwe," (CTRL model)"),Jwe.forEach(t),cro=i(S),Vn=n(S,"LI",{});var s$=s(Vn);fae=n(s$,"STRONG",{});var wUr=s(fae);fro=r(wUr,"data2vec-text"),wUr.forEach(t),mro=r(s$," \u2014 "),GR=n(s$,"A",{href:!0});var AUr=s(GR);gro=r(AUr,"RobertaTokenizer"),AUr.forEach(t),hro=r(s$," or "),OR=n(s$,"A",{href:!0});var yUr=s(OR);pro=r(yUr,"RobertaTokenizerFast"),yUr.forEach(t),_ro=r(s$," (Data2VecText model)"),s$.forEach(t),uro=i(S),Xn=n(S,"LI",{});var l$=s(Xn);mae=n(l$,"STRONG",{});var LUr=s(mae);bro=r(LUr,"deberta"),LUr.forEach(t),vro=r(l$," \u2014 "),VR=n(l$,"A",{href:!0});var xUr=s(VR);Fro=r(xUr,"DebertaTokenizer"),xUr.forEach(t),Tro=r(l$," or "),XR=n(l$,"A",{href:!0});var $Ur=s(XR);Mro=r($Ur,"DebertaTokenizerFast"),$Ur.forEach(t),Ero=r(l$," (DeBERTa model)"),l$.forEach(t),Cro=i(S),zn=n(S,"LI",{});var i$=s(zn);gae=n(i$,"STRONG",{});var kUr=s(gae);wro=r(kUr,"deberta-v2"),kUr.forEach(t),Aro=r(i$," \u2014 "),zR=n(i$,"A",{href:!0});var SUr=s(zR);yro=r(SUr,"DebertaV2Tokenizer"),SUr.forEach(t),Lro=r(i$," or "),WR=n(i$,"A",{href:!0});var RUr=s(WR);xro=r(RUr,"DebertaV2TokenizerFast"),RUr.forEach(t),$ro=r(i$," (DeBERTa-v2 model)"),i$.forEach(t),kro=i(S),Wn=n(S,"LI",{});var d$=s(Wn);hae=n(d$,"STRONG",{});var PUr=s(hae);Sro=r(PUr,"distilbert"),PUr.forEach(t),Rro=r(d$," \u2014 "),QR=n(d$,"A",{href:!0});var BUr=s(QR);Pro=r(BUr,"DistilBertTokenizer"),BUr.forEach(t),Bro=r(d$," or "),HR=n(d$,"A",{href:!0});var IUr=s(HR);Iro=r(IUr,"DistilBertTokenizerFast"),IUr.forEach(t),Nro=r(d$," (DistilBERT model)"),d$.forEach(t),qro=i(S),Qn=n(S,"LI",{});var c$=s(Qn);pae=n(c$,"STRONG",{});var NUr=s(pae);jro=r(NUr,"dpr"),NUr.forEach(t),Dro=r(c$," \u2014 "),UR=n(c$,"A",{href:!0});var qUr=s(UR);Gro=r(qUr,"DPRQuestionEncoderTokenizer"),qUr.forEach(t),Oro=r(c$," or "),JR=n(c$,"A",{href:!0});var jUr=s(JR);Vro=r(jUr,"DPRQuestionEncoderTokenizerFast"),jUr.forEach(t),Xro=r(c$," (DPR model)"),c$.forEach(t),zro=i(S),Hn=n(S,"LI",{});var f$=s(Hn);_ae=n(f$,"STRONG",{});var DUr=s(_ae);Wro=r(DUr,"electra"),DUr.forEach(t),Qro=r(f$," \u2014 "),YR=n(f$,"A",{href:!0});var GUr=s(YR);Hro=r(GUr,"ElectraTokenizer"),GUr.forEach(t),Uro=r(f$," or "),KR=n(f$,"A",{href:!0});var OUr=s(KR);Jro=r(OUr,"ElectraTokenizerFast"),OUr.forEach(t),Yro=r(f$," (ELECTRA model)"),f$.forEach(t),Kro=i(S),Ig=n(S,"LI",{});var Ywe=s(Ig);uae=n(Ywe,"STRONG",{});var VUr=s(uae);Zro=r(VUr,"flaubert"),VUr.forEach(t),eto=r(Ywe," \u2014 "),ZR=n(Ywe,"A",{href:!0});var XUr=s(ZR);oto=r(XUr,"FlaubertTokenizer"),XUr.forEach(t),rto=r(Ywe," (FlauBERT model)"),Ywe.forEach(t),tto=i(S),Un=n(S,"LI",{});var m$=s(Un);bae=n(m$,"STRONG",{});var zUr=s(bae);ato=r(zUr,"fnet"),zUr.forEach(t),nto=r(m$," \u2014 "),eP=n(m$,"A",{href:!0});var WUr=s(eP);sto=r(WUr,"FNetTokenizer"),WUr.forEach(t),lto=r(m$," or "),oP=n(m$,"A",{href:!0});var QUr=s(oP);ito=r(QUr,"FNetTokenizerFast"),QUr.forEach(t),dto=r(m$," (FNet model)"),m$.forEach(t),cto=i(S),Ng=n(S,"LI",{});var Kwe=s(Ng);vae=n(Kwe,"STRONG",{});var HUr=s(vae);fto=r(HUr,"fsmt"),HUr.forEach(t),mto=r(Kwe," \u2014 "),rP=n(Kwe,"A",{href:!0});var UUr=s(rP);gto=r(UUr,"FSMTTokenizer"),UUr.forEach(t),hto=r(Kwe," (FairSeq Machine-Translation model)"),Kwe.forEach(t),pto=i(S),Jn=n(S,"LI",{});var g$=s(Jn);Fae=n(g$,"STRONG",{});var JUr=s(Fae);_to=r(JUr,"funnel"),JUr.forEach(t),uto=r(g$," \u2014 "),tP=n(g$,"A",{href:!0});var YUr=s(tP);bto=r(YUr,"FunnelTokenizer"),YUr.forEach(t),vto=r(g$," or "),aP=n(g$,"A",{href:!0});var KUr=s(aP);Fto=r(KUr,"FunnelTokenizerFast"),KUr.forEach(t),Tto=r(g$," (Funnel Transformer model)"),g$.forEach(t),Mto=i(S),Yn=n(S,"LI",{});var h$=s(Yn);Tae=n(h$,"STRONG",{});var ZUr=s(Tae);Eto=r(ZUr,"gpt2"),ZUr.forEach(t),Cto=r(h$," \u2014 "),nP=n(h$,"A",{href:!0});var eJr=s(nP);wto=r(eJr,"GPT2Tokenizer"),eJr.forEach(t),Ato=r(h$," or "),sP=n(h$,"A",{href:!0});var oJr=s(sP);yto=r(oJr,"GPT2TokenizerFast"),oJr.forEach(t),Lto=r(h$," (OpenAI GPT-2 model)"),h$.forEach(t),xto=i(S),Kn=n(S,"LI",{});var p$=s(Kn);Mae=n(p$,"STRONG",{});var rJr=s(Mae);$to=r(rJr,"gpt_neo"),rJr.forEach(t),kto=r(p$," \u2014 "),lP=n(p$,"A",{href:!0});var tJr=s(lP);Sto=r(tJr,"GPT2Tokenizer"),tJr.forEach(t),Rto=r(p$," or "),iP=n(p$,"A",{href:!0});var aJr=s(iP);Pto=r(aJr,"GPT2TokenizerFast"),aJr.forEach(t),Bto=r(p$," (GPT Neo model)"),p$.forEach(t),Ito=i(S),qg=n(S,"LI",{});var Zwe=s(qg);Eae=n(Zwe,"STRONG",{});var nJr=s(Eae);Nto=r(nJr,"gpt_neox"),nJr.forEach(t),qto=r(Zwe," \u2014 "),dP=n(Zwe,"A",{href:!0});var sJr=s(dP);jto=r(sJr,"GPTNeoXTokenizerFast"),sJr.forEach(t),Dto=r(Zwe," (GPT NeoX model)"),Zwe.forEach(t),Gto=i(S),Zn=n(S,"LI",{});var _$=s(Zn);Cae=n(_$,"STRONG",{});var lJr=s(Cae);Oto=r(lJr,"gptj"),lJr.forEach(t),Vto=r(_$," \u2014 "),cP=n(_$,"A",{href:!0});var iJr=s(cP);Xto=r(iJr,"GPT2Tokenizer"),iJr.forEach(t),zto=r(_$," or "),fP=n(_$,"A",{href:!0});var dJr=s(fP);Wto=r(dJr,"GPT2TokenizerFast"),dJr.forEach(t),Qto=r(_$," (GPT-J model)"),_$.forEach(t),Hto=i(S),es=n(S,"LI",{});var u$=s(es);wae=n(u$,"STRONG",{});var cJr=s(wae);Uto=r(cJr,"herbert"),cJr.forEach(t),Jto=r(u$," \u2014 "),mP=n(u$,"A",{href:!0});var fJr=s(mP);Yto=r(fJr,"HerbertTokenizer"),fJr.forEach(t),Kto=r(u$," or "),gP=n(u$,"A",{href:!0});var mJr=s(gP);Zto=r(mJr,"HerbertTokenizerFast"),mJr.forEach(t),eao=r(u$," (HerBERT model)"),u$.forEach(t),oao=i(S),jg=n(S,"LI",{});var eAe=s(jg);Aae=n(eAe,"STRONG",{});var gJr=s(Aae);rao=r(gJr,"hubert"),gJr.forEach(t),tao=r(eAe," \u2014 "),hP=n(eAe,"A",{href:!0});var hJr=s(hP);aao=r(hJr,"Wav2Vec2CTCTokenizer"),hJr.forEach(t),nao=r(eAe," (Hubert model)"),eAe.forEach(t),sao=i(S),os=n(S,"LI",{});var b$=s(os);yae=n(b$,"STRONG",{});var pJr=s(yae);lao=r(pJr,"ibert"),pJr.forEach(t),iao=r(b$," \u2014 "),pP=n(b$,"A",{href:!0});var _Jr=s(pP);dao=r(_Jr,"RobertaTokenizer"),_Jr.forEach(t),cao=r(b$," or "),_P=n(b$,"A",{href:!0});var uJr=s(_P);fao=r(uJr,"RobertaTokenizerFast"),uJr.forEach(t),mao=r(b$," (I-BERT model)"),b$.forEach(t),gao=i(S),rs=n(S,"LI",{});var v$=s(rs);Lae=n(v$,"STRONG",{});var bJr=s(Lae);hao=r(bJr,"layoutlm"),bJr.forEach(t),pao=r(v$," \u2014 "),uP=n(v$,"A",{href:!0});var vJr=s(uP);_ao=r(vJr,"LayoutLMTokenizer"),vJr.forEach(t),uao=r(v$," or "),bP=n(v$,"A",{href:!0});var FJr=s(bP);bao=r(FJr,"LayoutLMTokenizerFast"),FJr.forEach(t),vao=r(v$," (LayoutLM model)"),v$.forEach(t),Fao=i(S),ts=n(S,"LI",{});var F$=s(ts);xae=n(F$,"STRONG",{});var TJr=s(xae);Tao=r(TJr,"layoutlmv2"),TJr.forEach(t),Mao=r(F$," \u2014 "),vP=n(F$,"A",{href:!0});var MJr=s(vP);Eao=r(MJr,"LayoutLMv2Tokenizer"),MJr.forEach(t),Cao=r(F$," or "),FP=n(F$,"A",{href:!0});var EJr=s(FP);wao=r(EJr,"LayoutLMv2TokenizerFast"),EJr.forEach(t),Aao=r(F$," (LayoutLMv2 model)"),F$.forEach(t),yao=i(S),as=n(S,"LI",{});var T$=s(as);$ae=n(T$,"STRONG",{});var CJr=s($ae);Lao=r(CJr,"layoutlmv3"),CJr.forEach(t),xao=r(T$," \u2014 "),TP=n(T$,"A",{href:!0});var wJr=s(TP);$ao=r(wJr,"LayoutLMv3Tokenizer"),wJr.forEach(t),kao=r(T$," or "),MP=n(T$,"A",{href:!0});var AJr=s(MP);Sao=r(AJr,"LayoutLMv3TokenizerFast"),AJr.forEach(t),Rao=r(T$," (LayoutLMv3 model)"),T$.forEach(t),Pao=i(S),ns=n(S,"LI",{});var M$=s(ns);kae=n(M$,"STRONG",{});var yJr=s(kae);Bao=r(yJr,"layoutxlm"),yJr.forEach(t),Iao=r(M$," \u2014 "),EP=n(M$,"A",{href:!0});var LJr=s(EP);Nao=r(LJr,"LayoutXLMTokenizer"),LJr.forEach(t),qao=r(M$," or "),CP=n(M$,"A",{href:!0});var xJr=s(CP);jao=r(xJr,"LayoutXLMTokenizerFast"),xJr.forEach(t),Dao=r(M$," (LayoutXLM model)"),M$.forEach(t),Gao=i(S),ss=n(S,"LI",{});var E$=s(ss);Sae=n(E$,"STRONG",{});var $Jr=s(Sae);Oao=r($Jr,"led"),$Jr.forEach(t),Vao=r(E$," \u2014 "),wP=n(E$,"A",{href:!0});var kJr=s(wP);Xao=r(kJr,"LEDTokenizer"),kJr.forEach(t),zao=r(E$," or "),AP=n(E$,"A",{href:!0});var SJr=s(AP);Wao=r(SJr,"LEDTokenizerFast"),SJr.forEach(t),Qao=r(E$," (LED model)"),E$.forEach(t),Hao=i(S),ls=n(S,"LI",{});var C$=s(ls);Rae=n(C$,"STRONG",{});var RJr=s(Rae);Uao=r(RJr,"longformer"),RJr.forEach(t),Jao=r(C$," \u2014 "),yP=n(C$,"A",{href:!0});var PJr=s(yP);Yao=r(PJr,"LongformerTokenizer"),PJr.forEach(t),Kao=r(C$," or "),LP=n(C$,"A",{href:!0});var BJr=s(LP);Zao=r(BJr,"LongformerTokenizerFast"),BJr.forEach(t),eno=r(C$," (Longformer model)"),C$.forEach(t),ono=i(S),Dg=n(S,"LI",{});var oAe=s(Dg);Pae=n(oAe,"STRONG",{});var IJr=s(Pae);rno=r(IJr,"luke"),IJr.forEach(t),tno=r(oAe," \u2014 "),xP=n(oAe,"A",{href:!0});var NJr=s(xP);ano=r(NJr,"LukeTokenizer"),NJr.forEach(t),nno=r(oAe," (LUKE model)"),oAe.forEach(t),sno=i(S),is=n(S,"LI",{});var w$=s(is);Bae=n(w$,"STRONG",{});var qJr=s(Bae);lno=r(qJr,"lxmert"),qJr.forEach(t),ino=r(w$," \u2014 "),$P=n(w$,"A",{href:!0});var jJr=s($P);dno=r(jJr,"LxmertTokenizer"),jJr.forEach(t),cno=r(w$," or "),kP=n(w$,"A",{href:!0});var DJr=s(kP);fno=r(DJr,"LxmertTokenizerFast"),DJr.forEach(t),mno=r(w$," (LXMERT model)"),w$.forEach(t),gno=i(S),Gg=n(S,"LI",{});var rAe=s(Gg);Iae=n(rAe,"STRONG",{});var GJr=s(Iae);hno=r(GJr,"m2m_100"),GJr.forEach(t),pno=r(rAe," \u2014 "),SP=n(rAe,"A",{href:!0});var OJr=s(SP);_no=r(OJr,"M2M100Tokenizer"),OJr.forEach(t),uno=r(rAe," (M2M100 model)"),rAe.forEach(t),bno=i(S),Og=n(S,"LI",{});var tAe=s(Og);Nae=n(tAe,"STRONG",{});var VJr=s(Nae);vno=r(VJr,"marian"),VJr.forEach(t),Fno=r(tAe," \u2014 "),RP=n(tAe,"A",{href:!0});var XJr=s(RP);Tno=r(XJr,"MarianTokenizer"),XJr.forEach(t),Mno=r(tAe," (Marian model)"),tAe.forEach(t),Eno=i(S),ds=n(S,"LI",{});var A$=s(ds);qae=n(A$,"STRONG",{});var zJr=s(qae);Cno=r(zJr,"mbart"),zJr.forEach(t),wno=r(A$," \u2014 "),PP=n(A$,"A",{href:!0});var WJr=s(PP);Ano=r(WJr,"MBartTokenizer"),WJr.forEach(t),yno=r(A$," or "),BP=n(A$,"A",{href:!0});var QJr=s(BP);Lno=r(QJr,"MBartTokenizerFast"),QJr.forEach(t),xno=r(A$," (mBART model)"),A$.forEach(t),$no=i(S),cs=n(S,"LI",{});var y$=s(cs);jae=n(y$,"STRONG",{});var HJr=s(jae);kno=r(HJr,"mbart50"),HJr.forEach(t),Sno=r(y$," \u2014 "),IP=n(y$,"A",{href:!0});var UJr=s(IP);Rno=r(UJr,"MBart50Tokenizer"),UJr.forEach(t),Pno=r(y$," or "),NP=n(y$,"A",{href:!0});var JJr=s(NP);Bno=r(JJr,"MBart50TokenizerFast"),JJr.forEach(t),Ino=r(y$," (mBART-50 model)"),y$.forEach(t),Nno=i(S),fs=n(S,"LI",{});var L$=s(fs);Dae=n(L$,"STRONG",{});var YJr=s(Dae);qno=r(YJr,"megatron-bert"),YJr.forEach(t),jno=r(L$," \u2014 "),qP=n(L$,"A",{href:!0});var KJr=s(qP);Dno=r(KJr,"BertTokenizer"),KJr.forEach(t),Gno=r(L$," or "),jP=n(L$,"A",{href:!0});var ZJr=s(jP);Ono=r(ZJr,"BertTokenizerFast"),ZJr.forEach(t),Vno=r(L$," (Megatron-BERT model)"),L$.forEach(t),Xno=i(S),Vg=n(S,"LI",{});var aAe=s(Vg);Gae=n(aAe,"STRONG",{});var eYr=s(Gae);zno=r(eYr,"mluke"),eYr.forEach(t),Wno=r(aAe," \u2014 "),DP=n(aAe,"A",{href:!0});var oYr=s(DP);Qno=r(oYr,"MLukeTokenizer"),oYr.forEach(t),Hno=r(aAe," (mLUKE model)"),aAe.forEach(t),Uno=i(S),ms=n(S,"LI",{});var x$=s(ms);Oae=n(x$,"STRONG",{});var rYr=s(Oae);Jno=r(rYr,"mobilebert"),rYr.forEach(t),Yno=r(x$," \u2014 "),GP=n(x$,"A",{href:!0});var tYr=s(GP);Kno=r(tYr,"MobileBertTokenizer"),tYr.forEach(t),Zno=r(x$," or "),OP=n(x$,"A",{href:!0});var aYr=s(OP);eso=r(aYr,"MobileBertTokenizerFast"),aYr.forEach(t),oso=r(x$," (MobileBERT model)"),x$.forEach(t),rso=i(S),gs=n(S,"LI",{});var $$=s(gs);Vae=n($$,"STRONG",{});var nYr=s(Vae);tso=r(nYr,"mpnet"),nYr.forEach(t),aso=r($$," \u2014 "),VP=n($$,"A",{href:!0});var sYr=s(VP);nso=r(sYr,"MPNetTokenizer"),sYr.forEach(t),sso=r($$," or "),XP=n($$,"A",{href:!0});var lYr=s(XP);lso=r(lYr,"MPNetTokenizerFast"),lYr.forEach(t),iso=r($$," (MPNet model)"),$$.forEach(t),dso=i(S),hs=n(S,"LI",{});var k$=s(hs);Xae=n(k$,"STRONG",{});var iYr=s(Xae);cso=r(iYr,"mt5"),iYr.forEach(t),fso=r(k$," \u2014 "),zP=n(k$,"A",{href:!0});var dYr=s(zP);mso=r(dYr,"MT5Tokenizer"),dYr.forEach(t),gso=r(k$," or "),WP=n(k$,"A",{href:!0});var cYr=s(WP);hso=r(cYr,"MT5TokenizerFast"),cYr.forEach(t),pso=r(k$," (MT5 model)"),k$.forEach(t),_so=i(S),ps=n(S,"LI",{});var S$=s(ps);zae=n(S$,"STRONG",{});var fYr=s(zae);uso=r(fYr,"nystromformer"),fYr.forEach(t),bso=r(S$," \u2014 "),QP=n(S$,"A",{href:!0});var mYr=s(QP);vso=r(mYr,"AlbertTokenizer"),mYr.forEach(t),Fso=r(S$," or "),HP=n(S$,"A",{href:!0});var gYr=s(HP);Tso=r(gYr,"AlbertTokenizerFast"),gYr.forEach(t),Mso=r(S$," (Nystr\xF6mformer model)"),S$.forEach(t),Eso=i(S),_s=n(S,"LI",{});var R$=s(_s);Wae=n(R$,"STRONG",{});var hYr=s(Wae);Cso=r(hYr,"openai-gpt"),hYr.forEach(t),wso=r(R$," \u2014 "),UP=n(R$,"A",{href:!0});var pYr=s(UP);Aso=r(pYr,"OpenAIGPTTokenizer"),pYr.forEach(t),yso=r(R$," or "),JP=n(R$,"A",{href:!0});var _Yr=s(JP);Lso=r(_Yr,"OpenAIGPTTokenizerFast"),_Yr.forEach(t),xso=r(R$," (OpenAI GPT model)"),R$.forEach(t),$so=i(S),Xg=n(S,"LI",{});var nAe=s(Xg);Qae=n(nAe,"STRONG",{});var uYr=s(Qae);kso=r(uYr,"opt"),uYr.forEach(t),Sso=r(nAe," \u2014 "),YP=n(nAe,"A",{href:!0});var bYr=s(YP);Rso=r(bYr,"GPT2Tokenizer"),bYr.forEach(t),Pso=r(nAe," (OPT model)"),nAe.forEach(t),Bso=i(S),us=n(S,"LI",{});var P$=s(us);Hae=n(P$,"STRONG",{});var vYr=s(Hae);Iso=r(vYr,"pegasus"),vYr.forEach(t),Nso=r(P$," \u2014 "),KP=n(P$,"A",{href:!0});var FYr=s(KP);qso=r(FYr,"PegasusTokenizer"),FYr.forEach(t),jso=r(P$," or "),ZP=n(P$,"A",{href:!0});var TYr=s(ZP);Dso=r(TYr,"PegasusTokenizerFast"),TYr.forEach(t),Gso=r(P$," (Pegasus model)"),P$.forEach(t),Oso=i(S),zg=n(S,"LI",{});var sAe=s(zg);Uae=n(sAe,"STRONG",{});var MYr=s(Uae);Vso=r(MYr,"perceiver"),MYr.forEach(t),Xso=r(sAe," \u2014 "),eB=n(sAe,"A",{href:!0});var EYr=s(eB);zso=r(EYr,"PerceiverTokenizer"),EYr.forEach(t),Wso=r(sAe," (Perceiver model)"),sAe.forEach(t),Qso=i(S),Wg=n(S,"LI",{});var lAe=s(Wg);Jae=n(lAe,"STRONG",{});var CYr=s(Jae);Hso=r(CYr,"phobert"),CYr.forEach(t),Uso=r(lAe," \u2014 "),oB=n(lAe,"A",{href:!0});var wYr=s(oB);Jso=r(wYr,"PhobertTokenizer"),wYr.forEach(t),Yso=r(lAe," (PhoBERT model)"),lAe.forEach(t),Kso=i(S),Qg=n(S,"LI",{});var iAe=s(Qg);Yae=n(iAe,"STRONG",{});var AYr=s(Yae);Zso=r(AYr,"plbart"),AYr.forEach(t),elo=r(iAe," \u2014 "),rB=n(iAe,"A",{href:!0});var yYr=s(rB);olo=r(yYr,"PLBartTokenizer"),yYr.forEach(t),rlo=r(iAe," (PLBart model)"),iAe.forEach(t),tlo=i(S),Hg=n(S,"LI",{});var dAe=s(Hg);Kae=n(dAe,"STRONG",{});var LYr=s(Kae);alo=r(LYr,"prophetnet"),LYr.forEach(t),nlo=r(dAe," \u2014 "),tB=n(dAe,"A",{href:!0});var xYr=s(tB);slo=r(xYr,"ProphetNetTokenizer"),xYr.forEach(t),llo=r(dAe," (ProphetNet model)"),dAe.forEach(t),ilo=i(S),bs=n(S,"LI",{});var B$=s(bs);Zae=n(B$,"STRONG",{});var $Yr=s(Zae);dlo=r($Yr,"qdqbert"),$Yr.forEach(t),clo=r(B$," \u2014 "),aB=n(B$,"A",{href:!0});var kYr=s(aB);flo=r(kYr,"BertTokenizer"),kYr.forEach(t),mlo=r(B$," or "),nB=n(B$,"A",{href:!0});var SYr=s(nB);glo=r(SYr,"BertTokenizerFast"),SYr.forEach(t),hlo=r(B$," (QDQBert model)"),B$.forEach(t),plo=i(S),Ug=n(S,"LI",{});var cAe=s(Ug);ene=n(cAe,"STRONG",{});var RYr=s(ene);_lo=r(RYr,"rag"),RYr.forEach(t),ulo=r(cAe," \u2014 "),sB=n(cAe,"A",{href:!0});var PYr=s(sB);blo=r(PYr,"RagTokenizer"),PYr.forEach(t),vlo=r(cAe," (RAG model)"),cAe.forEach(t),Flo=i(S),vs=n(S,"LI",{});var I$=s(vs);one=n(I$,"STRONG",{});var BYr=s(one);Tlo=r(BYr,"realm"),BYr.forEach(t),Mlo=r(I$," \u2014 "),lB=n(I$,"A",{href:!0});var IYr=s(lB);Elo=r(IYr,"RealmTokenizer"),IYr.forEach(t),Clo=r(I$," or "),iB=n(I$,"A",{href:!0});var NYr=s(iB);wlo=r(NYr,"RealmTokenizerFast"),NYr.forEach(t),Alo=r(I$," (REALM model)"),I$.forEach(t),ylo=i(S),Fs=n(S,"LI",{});var N$=s(Fs);rne=n(N$,"STRONG",{});var qYr=s(rne);Llo=r(qYr,"reformer"),qYr.forEach(t),xlo=r(N$," \u2014 "),dB=n(N$,"A",{href:!0});var jYr=s(dB);$lo=r(jYr,"ReformerTokenizer"),jYr.forEach(t),klo=r(N$," or "),cB=n(N$,"A",{href:!0});var DYr=s(cB);Slo=r(DYr,"ReformerTokenizerFast"),DYr.forEach(t),Rlo=r(N$," (Reformer model)"),N$.forEach(t),Plo=i(S),Ts=n(S,"LI",{});var q$=s(Ts);tne=n(q$,"STRONG",{});var GYr=s(tne);Blo=r(GYr,"rembert"),GYr.forEach(t),Ilo=r(q$," \u2014 "),fB=n(q$,"A",{href:!0});var OYr=s(fB);Nlo=r(OYr,"RemBertTokenizer"),OYr.forEach(t),qlo=r(q$," or "),mB=n(q$,"A",{href:!0});var VYr=s(mB);jlo=r(VYr,"RemBertTokenizerFast"),VYr.forEach(t),Dlo=r(q$," (RemBERT model)"),q$.forEach(t),Glo=i(S),Ms=n(S,"LI",{});var j$=s(Ms);ane=n(j$,"STRONG",{});var XYr=s(ane);Olo=r(XYr,"retribert"),XYr.forEach(t),Vlo=r(j$," \u2014 "),gB=n(j$,"A",{href:!0});var zYr=s(gB);Xlo=r(zYr,"RetriBertTokenizer"),zYr.forEach(t),zlo=r(j$," or "),hB=n(j$,"A",{href:!0});var WYr=s(hB);Wlo=r(WYr,"RetriBertTokenizerFast"),WYr.forEach(t),Qlo=r(j$," (RetriBERT model)"),j$.forEach(t),Hlo=i(S),Es=n(S,"LI",{});var D$=s(Es);nne=n(D$,"STRONG",{});var QYr=s(nne);Ulo=r(QYr,"roberta"),QYr.forEach(t),Jlo=r(D$," \u2014 "),pB=n(D$,"A",{href:!0});var HYr=s(pB);Ylo=r(HYr,"RobertaTokenizer"),HYr.forEach(t),Klo=r(D$," or "),_B=n(D$,"A",{href:!0});var UYr=s(_B);Zlo=r(UYr,"RobertaTokenizerFast"),UYr.forEach(t),eio=r(D$," (RoBERTa model)"),D$.forEach(t),oio=i(S),Cs=n(S,"LI",{});var G$=s(Cs);sne=n(G$,"STRONG",{});var JYr=s(sne);rio=r(JYr,"roformer"),JYr.forEach(t),tio=r(G$," \u2014 "),uB=n(G$,"A",{href:!0});var YYr=s(uB);aio=r(YYr,"RoFormerTokenizer"),YYr.forEach(t),nio=r(G$," or "),bB=n(G$,"A",{href:!0});var KYr=s(bB);sio=r(KYr,"RoFormerTokenizerFast"),KYr.forEach(t),lio=r(G$," (RoFormer model)"),G$.forEach(t),iio=i(S),Jg=n(S,"LI",{});var fAe=s(Jg);lne=n(fAe,"STRONG",{});var ZYr=s(lne);dio=r(ZYr,"speech_to_text"),ZYr.forEach(t),cio=r(fAe," \u2014 "),vB=n(fAe,"A",{href:!0});var eKr=s(vB);fio=r(eKr,"Speech2TextTokenizer"),eKr.forEach(t),mio=r(fAe," (Speech2Text model)"),fAe.forEach(t),gio=i(S),Yg=n(S,"LI",{});var mAe=s(Yg);ine=n(mAe,"STRONG",{});var oKr=s(ine);hio=r(oKr,"speech_to_text_2"),oKr.forEach(t),pio=r(mAe," \u2014 "),FB=n(mAe,"A",{href:!0});var rKr=s(FB);_io=r(rKr,"Speech2Text2Tokenizer"),rKr.forEach(t),uio=r(mAe," (Speech2Text2 model)"),mAe.forEach(t),bio=i(S),ws=n(S,"LI",{});var O$=s(ws);dne=n(O$,"STRONG",{});var tKr=s(dne);vio=r(tKr,"splinter"),tKr.forEach(t),Fio=r(O$," \u2014 "),TB=n(O$,"A",{href:!0});var aKr=s(TB);Tio=r(aKr,"SplinterTokenizer"),aKr.forEach(t),Mio=r(O$," or "),MB=n(O$,"A",{href:!0});var nKr=s(MB);Eio=r(nKr,"SplinterTokenizerFast"),nKr.forEach(t),Cio=r(O$," (Splinter model)"),O$.forEach(t),wio=i(S),As=n(S,"LI",{});var V$=s(As);cne=n(V$,"STRONG",{});var sKr=s(cne);Aio=r(sKr,"squeezebert"),sKr.forEach(t),yio=r(V$," \u2014 "),EB=n(V$,"A",{href:!0});var lKr=s(EB);Lio=r(lKr,"SqueezeBertTokenizer"),lKr.forEach(t),xio=r(V$," or "),CB=n(V$,"A",{href:!0});var iKr=s(CB);$io=r(iKr,"SqueezeBertTokenizerFast"),iKr.forEach(t),kio=r(V$," (SqueezeBERT model)"),V$.forEach(t),Sio=i(S),ys=n(S,"LI",{});var X$=s(ys);fne=n(X$,"STRONG",{});var dKr=s(fne);Rio=r(dKr,"t5"),dKr.forEach(t),Pio=r(X$," \u2014 "),wB=n(X$,"A",{href:!0});var cKr=s(wB);Bio=r(cKr,"T5Tokenizer"),cKr.forEach(t),Iio=r(X$," or "),AB=n(X$,"A",{href:!0});var fKr=s(AB);Nio=r(fKr,"T5TokenizerFast"),fKr.forEach(t),qio=r(X$," (T5 model)"),X$.forEach(t),jio=i(S),Kg=n(S,"LI",{});var gAe=s(Kg);mne=n(gAe,"STRONG",{});var mKr=s(mne);Dio=r(mKr,"tapas"),mKr.forEach(t),Gio=r(gAe," \u2014 "),yB=n(gAe,"A",{href:!0});var gKr=s(yB);Oio=r(gKr,"TapasTokenizer"),gKr.forEach(t),Vio=r(gAe," (TAPAS model)"),gAe.forEach(t),Xio=i(S),Zg=n(S,"LI",{});var hAe=s(Zg);gne=n(hAe,"STRONG",{});var hKr=s(gne);zio=r(hKr,"tapex"),hKr.forEach(t),Wio=r(hAe," \u2014 "),LB=n(hAe,"A",{href:!0});var pKr=s(LB);Qio=r(pKr,"TapexTokenizer"),pKr.forEach(t),Hio=r(hAe," (TAPEX model)"),hAe.forEach(t),Uio=i(S),eh=n(S,"LI",{});var pAe=s(eh);hne=n(pAe,"STRONG",{});var _Kr=s(hne);Jio=r(_Kr,"transfo-xl"),_Kr.forEach(t),Yio=r(pAe," \u2014 "),xB=n(pAe,"A",{href:!0});var uKr=s(xB);Kio=r(uKr,"TransfoXLTokenizer"),uKr.forEach(t),Zio=r(pAe," (Transformer-XL model)"),pAe.forEach(t),edo=i(S),Ls=n(S,"LI",{});var z$=s(Ls);pne=n(z$,"STRONG",{});var bKr=s(pne);odo=r(bKr,"visual_bert"),bKr.forEach(t),rdo=r(z$," \u2014 "),$B=n(z$,"A",{href:!0});var vKr=s($B);tdo=r(vKr,"BertTokenizer"),vKr.forEach(t),ado=r(z$," or "),kB=n(z$,"A",{href:!0});var FKr=s(kB);ndo=r(FKr,"BertTokenizerFast"),FKr.forEach(t),sdo=r(z$," (VisualBERT model)"),z$.forEach(t),ldo=i(S),oh=n(S,"LI",{});var _Ae=s(oh);_ne=n(_Ae,"STRONG",{});var TKr=s(_ne);ido=r(TKr,"wav2vec2"),TKr.forEach(t),ddo=r(_Ae," \u2014 "),SB=n(_Ae,"A",{href:!0});var MKr=s(SB);cdo=r(MKr,"Wav2Vec2CTCTokenizer"),MKr.forEach(t),fdo=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),mdo=i(S),rh=n(S,"LI",{});var uAe=s(rh);une=n(uAe,"STRONG",{});var EKr=s(une);gdo=r(EKr,"wav2vec2-conformer"),EKr.forEach(t),hdo=r(uAe," \u2014 "),RB=n(uAe,"A",{href:!0});var CKr=s(RB);pdo=r(CKr,"Wav2Vec2CTCTokenizer"),CKr.forEach(t),_do=r(uAe," (Wav2Vec2-Conformer model)"),uAe.forEach(t),udo=i(S),th=n(S,"LI",{});var bAe=s(th);bne=n(bAe,"STRONG",{});var wKr=s(bne);bdo=r(wKr,"wav2vec2_phoneme"),wKr.forEach(t),vdo=r(bAe," \u2014 "),PB=n(bAe,"A",{href:!0});var AKr=s(PB);Fdo=r(AKr,"Wav2Vec2PhonemeCTCTokenizer"),AKr.forEach(t),Tdo=r(bAe," (Wav2Vec2Phoneme model)"),bAe.forEach(t),Mdo=i(S),xs=n(S,"LI",{});var W$=s(xs);vne=n(W$,"STRONG",{});var yKr=s(vne);Edo=r(yKr,"xglm"),yKr.forEach(t),Cdo=r(W$," \u2014 "),BB=n(W$,"A",{href:!0});var LKr=s(BB);wdo=r(LKr,"XGLMTokenizer"),LKr.forEach(t),Ado=r(W$," or "),IB=n(W$,"A",{href:!0});var xKr=s(IB);ydo=r(xKr,"XGLMTokenizerFast"),xKr.forEach(t),Ldo=r(W$," (XGLM model)"),W$.forEach(t),xdo=i(S),ah=n(S,"LI",{});var vAe=s(ah);Fne=n(vAe,"STRONG",{});var $Kr=s(Fne);$do=r($Kr,"xlm"),$Kr.forEach(t),kdo=r(vAe," \u2014 "),NB=n(vAe,"A",{href:!0});var kKr=s(NB);Sdo=r(kKr,"XLMTokenizer"),kKr.forEach(t),Rdo=r(vAe," (XLM model)"),vAe.forEach(t),Pdo=i(S),nh=n(S,"LI",{});var FAe=s(nh);Tne=n(FAe,"STRONG",{});var SKr=s(Tne);Bdo=r(SKr,"xlm-prophetnet"),SKr.forEach(t),Ido=r(FAe," \u2014 "),qB=n(FAe,"A",{href:!0});var RKr=s(qB);Ndo=r(RKr,"XLMProphetNetTokenizer"),RKr.forEach(t),qdo=r(FAe," (XLM-ProphetNet model)"),FAe.forEach(t),jdo=i(S),$s=n(S,"LI",{});var Q$=s($s);Mne=n(Q$,"STRONG",{});var PKr=s(Mne);Ddo=r(PKr,"xlm-roberta"),PKr.forEach(t),Gdo=r(Q$," \u2014 "),jB=n(Q$,"A",{href:!0});var BKr=s(jB);Odo=r(BKr,"XLMRobertaTokenizer"),BKr.forEach(t),Vdo=r(Q$," or "),DB=n(Q$,"A",{href:!0});var IKr=s(DB);Xdo=r(IKr,"XLMRobertaTokenizerFast"),IKr.forEach(t),zdo=r(Q$," (XLM-RoBERTa model)"),Q$.forEach(t),Wdo=i(S),ks=n(S,"LI",{});var H$=s(ks);Ene=n(H$,"STRONG",{});var NKr=s(Ene);Qdo=r(NKr,"xlm-roberta-xl"),NKr.forEach(t),Hdo=r(H$," \u2014 "),GB=n(H$,"A",{href:!0});var qKr=s(GB);Udo=r(qKr,"RobertaTokenizer"),qKr.forEach(t),Jdo=r(H$," or "),OB=n(H$,"A",{href:!0});var jKr=s(OB);Ydo=r(jKr,"RobertaTokenizerFast"),jKr.forEach(t),Kdo=r(H$," (XLM-RoBERTa-XL model)"),H$.forEach(t),Zdo=i(S),Ss=n(S,"LI",{});var U$=s(Ss);Cne=n(U$,"STRONG",{});var DKr=s(Cne);eco=r(DKr,"xlnet"),DKr.forEach(t),oco=r(U$," \u2014 "),VB=n(U$,"A",{href:!0});var GKr=s(VB);rco=r(GKr,"XLNetTokenizer"),GKr.forEach(t),tco=r(U$," or "),XB=n(U$,"A",{href:!0});var OKr=s(XB);aco=r(OKr,"XLNetTokenizerFast"),OKr.forEach(t),nco=r(U$," (XLNet model)"),U$.forEach(t),sco=i(S),Rs=n(S,"LI",{});var J$=s(Rs);wne=n(J$,"STRONG",{});var VKr=s(wne);lco=r(VKr,"yoso"),VKr.forEach(t),ico=r(J$," \u2014 "),zB=n(J$,"A",{href:!0});var XKr=s(zB);dco=r(XKr,"AlbertTokenizer"),XKr.forEach(t),cco=r(J$," or "),WB=n(J$,"A",{href:!0});var zKr=s(WB);fco=r(zKr,"AlbertTokenizerFast"),zKr.forEach(t),mco=r(J$," (YOSO model)"),J$.forEach(t),S.forEach(t),gco=i(js),T(sh.$$.fragment,js),js.forEach(t),hco=i(qs),lh=n(qs,"DIV",{class:!0});var VDe=s(lh);T(Uy.$$.fragment,VDe),pco=i(VDe),Ane=n(VDe,"P",{});var WKr=s(Ane);_co=r(WKr,"Register a new tokenizer in this mapping."),WKr.forEach(t),VDe.forEach(t),qs.forEach(t),Xqe=i(f),Ei=n(f,"H2",{class:!0});var XDe=s(Ei);ih=n(XDe,"A",{id:!0,class:!0,href:!0});var QKr=s(ih);yne=n(QKr,"SPAN",{});var HKr=s(yne);T(Jy.$$.fragment,HKr),HKr.forEach(t),QKr.forEach(t),uco=i(XDe),Lne=n(XDe,"SPAN",{});var UKr=s(Lne);bco=r(UKr,"AutoFeatureExtractor"),UKr.forEach(t),XDe.forEach(t),zqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(Yy.$$.fragment,Ds),vco=i(Ds),Ky=n(Ds,"P",{});var zDe=s(Ky);Fco=r(zDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=n(zDe,"A",{href:!0});var JKr=s(QB);Tco=r(JKr,"AutoFeatureExtractor.from_pretrained()"),JKr.forEach(t),Mco=r(zDe," class method."),zDe.forEach(t),Eco=i(Ds),Zy=n(Ds,"P",{});var WDe=s(Zy);Cco=r(WDe,"This class cannot be instantiated directly using "),xne=n(WDe,"CODE",{});var YKr=s(xne);wco=r(YKr,"__init__()"),YKr.forEach(t),Aco=r(WDe," (throws an error)."),WDe.forEach(t),yco=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(eL.$$.fragment,Zt),Lco=i(Zt),$ne=n(Zt,"P",{});var KKr=s($ne);xco=r(KKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KKr.forEach(t),$co=i(Zt),ya=n(Zt,"P",{});var jw=s(ya);kco=r(jw,"The feature extractor class to instantiate is selected based on the "),kne=n(jw,"CODE",{});var ZKr=s(kne);Sco=r(ZKr,"model_type"),ZKr.forEach(t),Rco=r(jw,` property of the config object
(either passed as an argument or loaded from `),Sne=n(jw,"CODE",{});var eZr=s(Sne);Pco=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),Bco=r(jw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rne=n(jw,"CODE",{});var oZr=s(Rne);Ico=r(oZr,"pretrained_model_name_or_path"),oZr.forEach(t),Nco=r(jw,":"),jw.forEach(t),qco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var TAe=s(dh);Pne=n(TAe,"STRONG",{});var rZr=s(Pne);jco=r(rZr,"beit"),rZr.forEach(t),Dco=r(TAe," \u2014 "),HB=n(TAe,"A",{href:!0});var tZr=s(HB);Gco=r(tZr,"BeitFeatureExtractor"),tZr.forEach(t),Oco=r(TAe," (BEiT model)"),TAe.forEach(t),Vco=i(Z),ch=n(Z,"LI",{});var MAe=s(ch);Bne=n(MAe,"STRONG",{});var aZr=s(Bne);Xco=r(aZr,"clip"),aZr.forEach(t),zco=r(MAe," \u2014 "),UB=n(MAe,"A",{href:!0});var nZr=s(UB);Wco=r(nZr,"CLIPFeatureExtractor"),nZr.forEach(t),Qco=r(MAe," (CLIP model)"),MAe.forEach(t),Hco=i(Z),fh=n(Z,"LI",{});var EAe=s(fh);Ine=n(EAe,"STRONG",{});var sZr=s(Ine);Uco=r(sZr,"convnext"),sZr.forEach(t),Jco=r(EAe," \u2014 "),JB=n(EAe,"A",{href:!0});var lZr=s(JB);Yco=r(lZr,"ConvNextFeatureExtractor"),lZr.forEach(t),Kco=r(EAe," (ConvNeXT model)"),EAe.forEach(t),Zco=i(Z),mh=n(Z,"LI",{});var CAe=s(mh);Nne=n(CAe,"STRONG",{});var iZr=s(Nne);efo=r(iZr,"cvt"),iZr.forEach(t),ofo=r(CAe," \u2014 "),YB=n(CAe,"A",{href:!0});var dZr=s(YB);rfo=r(dZr,"ConvNextFeatureExtractor"),dZr.forEach(t),tfo=r(CAe," (CvT model)"),CAe.forEach(t),afo=i(Z),gh=n(Z,"LI",{});var wAe=s(gh);qne=n(wAe,"STRONG",{});var cZr=s(qne);nfo=r(cZr,"data2vec-audio"),cZr.forEach(t),sfo=r(wAe," \u2014 "),KB=n(wAe,"A",{href:!0});var fZr=s(KB);lfo=r(fZr,"Wav2Vec2FeatureExtractor"),fZr.forEach(t),ifo=r(wAe," (Data2VecAudio model)"),wAe.forEach(t),dfo=i(Z),hh=n(Z,"LI",{});var AAe=s(hh);jne=n(AAe,"STRONG",{});var mZr=s(jne);cfo=r(mZr,"data2vec-vision"),mZr.forEach(t),ffo=r(AAe," \u2014 "),ZB=n(AAe,"A",{href:!0});var gZr=s(ZB);mfo=r(gZr,"BeitFeatureExtractor"),gZr.forEach(t),gfo=r(AAe," (Data2VecVision model)"),AAe.forEach(t),hfo=i(Z),ph=n(Z,"LI",{});var yAe=s(ph);Dne=n(yAe,"STRONG",{});var hZr=s(Dne);pfo=r(hZr,"deit"),hZr.forEach(t),_fo=r(yAe," \u2014 "),eI=n(yAe,"A",{href:!0});var pZr=s(eI);ufo=r(pZr,"DeiTFeatureExtractor"),pZr.forEach(t),bfo=r(yAe," (DeiT model)"),yAe.forEach(t),vfo=i(Z),_h=n(Z,"LI",{});var LAe=s(_h);Gne=n(LAe,"STRONG",{});var _Zr=s(Gne);Ffo=r(_Zr,"detr"),_Zr.forEach(t),Tfo=r(LAe," \u2014 "),oI=n(LAe,"A",{href:!0});var uZr=s(oI);Mfo=r(uZr,"DetrFeatureExtractor"),uZr.forEach(t),Efo=r(LAe," (DETR model)"),LAe.forEach(t),Cfo=i(Z),uh=n(Z,"LI",{});var xAe=s(uh);One=n(xAe,"STRONG",{});var bZr=s(One);wfo=r(bZr,"dpt"),bZr.forEach(t),Afo=r(xAe," \u2014 "),rI=n(xAe,"A",{href:!0});var vZr=s(rI);yfo=r(vZr,"DPTFeatureExtractor"),vZr.forEach(t),Lfo=r(xAe," (DPT model)"),xAe.forEach(t),xfo=i(Z),bh=n(Z,"LI",{});var $Ae=s(bh);Vne=n($Ae,"STRONG",{});var FZr=s(Vne);$fo=r(FZr,"flava"),FZr.forEach(t),kfo=r($Ae," \u2014 "),tI=n($Ae,"A",{href:!0});var TZr=s(tI);Sfo=r(TZr,"FlavaFeatureExtractor"),TZr.forEach(t),Rfo=r($Ae," (FLAVA model)"),$Ae.forEach(t),Pfo=i(Z),vh=n(Z,"LI",{});var kAe=s(vh);Xne=n(kAe,"STRONG",{});var MZr=s(Xne);Bfo=r(MZr,"glpn"),MZr.forEach(t),Ifo=r(kAe," \u2014 "),aI=n(kAe,"A",{href:!0});var EZr=s(aI);Nfo=r(EZr,"GLPNFeatureExtractor"),EZr.forEach(t),qfo=r(kAe," (GLPN model)"),kAe.forEach(t),jfo=i(Z),Fh=n(Z,"LI",{});var SAe=s(Fh);zne=n(SAe,"STRONG",{});var CZr=s(zne);Dfo=r(CZr,"hubert"),CZr.forEach(t),Gfo=r(SAe," \u2014 "),nI=n(SAe,"A",{href:!0});var wZr=s(nI);Ofo=r(wZr,"Wav2Vec2FeatureExtractor"),wZr.forEach(t),Vfo=r(SAe," (Hubert model)"),SAe.forEach(t),Xfo=i(Z),Th=n(Z,"LI",{});var RAe=s(Th);Wne=n(RAe,"STRONG",{});var AZr=s(Wne);zfo=r(AZr,"imagegpt"),AZr.forEach(t),Wfo=r(RAe," \u2014 "),sI=n(RAe,"A",{href:!0});var yZr=s(sI);Qfo=r(yZr,"ImageGPTFeatureExtractor"),yZr.forEach(t),Hfo=r(RAe," (ImageGPT model)"),RAe.forEach(t),Ufo=i(Z),Mh=n(Z,"LI",{});var PAe=s(Mh);Qne=n(PAe,"STRONG",{});var LZr=s(Qne);Jfo=r(LZr,"layoutlmv2"),LZr.forEach(t),Yfo=r(PAe," \u2014 "),lI=n(PAe,"A",{href:!0});var xZr=s(lI);Kfo=r(xZr,"LayoutLMv2FeatureExtractor"),xZr.forEach(t),Zfo=r(PAe," (LayoutLMv2 model)"),PAe.forEach(t),emo=i(Z),Eh=n(Z,"LI",{});var BAe=s(Eh);Hne=n(BAe,"STRONG",{});var $Zr=s(Hne);omo=r($Zr,"layoutlmv3"),$Zr.forEach(t),rmo=r(BAe," \u2014 "),iI=n(BAe,"A",{href:!0});var kZr=s(iI);tmo=r(kZr,"LayoutLMv3FeatureExtractor"),kZr.forEach(t),amo=r(BAe," (LayoutLMv3 model)"),BAe.forEach(t),nmo=i(Z),Ch=n(Z,"LI",{});var IAe=s(Ch);Une=n(IAe,"STRONG",{});var SZr=s(Une);smo=r(SZr,"levit"),SZr.forEach(t),lmo=r(IAe," \u2014 "),dI=n(IAe,"A",{href:!0});var RZr=s(dI);imo=r(RZr,"LevitFeatureExtractor"),RZr.forEach(t),dmo=r(IAe," (LeViT model)"),IAe.forEach(t),cmo=i(Z),wh=n(Z,"LI",{});var NAe=s(wh);Jne=n(NAe,"STRONG",{});var PZr=s(Jne);fmo=r(PZr,"maskformer"),PZr.forEach(t),mmo=r(NAe," \u2014 "),cI=n(NAe,"A",{href:!0});var BZr=s(cI);gmo=r(BZr,"MaskFormerFeatureExtractor"),BZr.forEach(t),hmo=r(NAe," (MaskFormer model)"),NAe.forEach(t),pmo=i(Z),Ah=n(Z,"LI",{});var qAe=s(Ah);Yne=n(qAe,"STRONG",{});var IZr=s(Yne);_mo=r(IZr,"perceiver"),IZr.forEach(t),umo=r(qAe," \u2014 "),fI=n(qAe,"A",{href:!0});var NZr=s(fI);bmo=r(NZr,"PerceiverFeatureExtractor"),NZr.forEach(t),vmo=r(qAe," (Perceiver model)"),qAe.forEach(t),Fmo=i(Z),yh=n(Z,"LI",{});var jAe=s(yh);Kne=n(jAe,"STRONG",{});var qZr=s(Kne);Tmo=r(qZr,"poolformer"),qZr.forEach(t),Mmo=r(jAe," \u2014 "),mI=n(jAe,"A",{href:!0});var jZr=s(mI);Emo=r(jZr,"PoolFormerFeatureExtractor"),jZr.forEach(t),Cmo=r(jAe," (PoolFormer model)"),jAe.forEach(t),wmo=i(Z),Lh=n(Z,"LI",{});var DAe=s(Lh);Zne=n(DAe,"STRONG",{});var DZr=s(Zne);Amo=r(DZr,"regnet"),DZr.forEach(t),ymo=r(DAe," \u2014 "),gI=n(DAe,"A",{href:!0});var GZr=s(gI);Lmo=r(GZr,"ConvNextFeatureExtractor"),GZr.forEach(t),xmo=r(DAe," (RegNet model)"),DAe.forEach(t),$mo=i(Z),xh=n(Z,"LI",{});var GAe=s(xh);ese=n(GAe,"STRONG",{});var OZr=s(ese);kmo=r(OZr,"resnet"),OZr.forEach(t),Smo=r(GAe," \u2014 "),hI=n(GAe,"A",{href:!0});var VZr=s(hI);Rmo=r(VZr,"ConvNextFeatureExtractor"),VZr.forEach(t),Pmo=r(GAe," (ResNet model)"),GAe.forEach(t),Bmo=i(Z),$h=n(Z,"LI",{});var OAe=s($h);ose=n(OAe,"STRONG",{});var XZr=s(ose);Imo=r(XZr,"segformer"),XZr.forEach(t),Nmo=r(OAe," \u2014 "),pI=n(OAe,"A",{href:!0});var zZr=s(pI);qmo=r(zZr,"SegformerFeatureExtractor"),zZr.forEach(t),jmo=r(OAe," (SegFormer model)"),OAe.forEach(t),Dmo=i(Z),kh=n(Z,"LI",{});var VAe=s(kh);rse=n(VAe,"STRONG",{});var WZr=s(rse);Gmo=r(WZr,"speech_to_text"),WZr.forEach(t),Omo=r(VAe," \u2014 "),_I=n(VAe,"A",{href:!0});var QZr=s(_I);Vmo=r(QZr,"Speech2TextFeatureExtractor"),QZr.forEach(t),Xmo=r(VAe," (Speech2Text model)"),VAe.forEach(t),zmo=i(Z),Sh=n(Z,"LI",{});var XAe=s(Sh);tse=n(XAe,"STRONG",{});var HZr=s(tse);Wmo=r(HZr,"swin"),HZr.forEach(t),Qmo=r(XAe," \u2014 "),uI=n(XAe,"A",{href:!0});var UZr=s(uI);Hmo=r(UZr,"ViTFeatureExtractor"),UZr.forEach(t),Umo=r(XAe," (Swin Transformer model)"),XAe.forEach(t),Jmo=i(Z),Rh=n(Z,"LI",{});var zAe=s(Rh);ase=n(zAe,"STRONG",{});var JZr=s(ase);Ymo=r(JZr,"van"),JZr.forEach(t),Kmo=r(zAe," \u2014 "),bI=n(zAe,"A",{href:!0});var YZr=s(bI);Zmo=r(YZr,"ConvNextFeatureExtractor"),YZr.forEach(t),ego=r(zAe," (VAN model)"),zAe.forEach(t),ogo=i(Z),Ph=n(Z,"LI",{});var WAe=s(Ph);nse=n(WAe,"STRONG",{});var KZr=s(nse);rgo=r(KZr,"vit"),KZr.forEach(t),tgo=r(WAe," \u2014 "),vI=n(WAe,"A",{href:!0});var ZZr=s(vI);ago=r(ZZr,"ViTFeatureExtractor"),ZZr.forEach(t),ngo=r(WAe," (ViT model)"),WAe.forEach(t),sgo=i(Z),Bh=n(Z,"LI",{});var QAe=s(Bh);sse=n(QAe,"STRONG",{});var eet=s(sse);lgo=r(eet,"vit_mae"),eet.forEach(t),igo=r(QAe," \u2014 "),FI=n(QAe,"A",{href:!0});var oet=s(FI);dgo=r(oet,"ViTFeatureExtractor"),oet.forEach(t),cgo=r(QAe," (ViTMAE model)"),QAe.forEach(t),fgo=i(Z),Ih=n(Z,"LI",{});var HAe=s(Ih);lse=n(HAe,"STRONG",{});var ret=s(lse);mgo=r(ret,"wav2vec2"),ret.forEach(t),ggo=r(HAe," \u2014 "),TI=n(HAe,"A",{href:!0});var tet=s(TI);hgo=r(tet,"Wav2Vec2FeatureExtractor"),tet.forEach(t),pgo=r(HAe," (Wav2Vec2 model)"),HAe.forEach(t),_go=i(Z),Nh=n(Z,"LI",{});var UAe=s(Nh);ise=n(UAe,"STRONG",{});var aet=s(ise);ugo=r(aet,"wav2vec2-conformer"),aet.forEach(t),bgo=r(UAe," \u2014 "),MI=n(UAe,"A",{href:!0});var net=s(MI);vgo=r(net,"Wav2Vec2FeatureExtractor"),net.forEach(t),Fgo=r(UAe," (Wav2Vec2-Conformer model)"),UAe.forEach(t),Tgo=i(Z),qh=n(Z,"LI",{});var JAe=s(qh);dse=n(JAe,"STRONG",{});var set=s(dse);Mgo=r(set,"yolos"),set.forEach(t),Ego=r(JAe," \u2014 "),EI=n(JAe,"A",{href:!0});var iet=s(EI);Cgo=r(iet,"YolosFeatureExtractor"),iet.forEach(t),wgo=r(JAe," (YOLOS model)"),JAe.forEach(t),Z.forEach(t),Ago=i(Zt),T(jh.$$.fragment,Zt),ygo=i(Zt),T(Dh.$$.fragment,Zt),Zt.forEach(t),Lgo=i(Ds),Gh=n(Ds,"DIV",{class:!0});var QDe=s(Gh);T(oL.$$.fragment,QDe),xgo=i(QDe),cse=n(QDe,"P",{});var det=s(cse);$go=r(det,"Register a new feature extractor for this class."),det.forEach(t),QDe.forEach(t),Ds.forEach(t),Wqe=i(f),Ci=n(f,"H2",{class:!0});var HDe=s(Ci);Oh=n(HDe,"A",{id:!0,class:!0,href:!0});var cet=s(Oh);fse=n(cet,"SPAN",{});var fet=s(fse);T(rL.$$.fragment,fet),fet.forEach(t),cet.forEach(t),kgo=i(HDe),mse=n(HDe,"SPAN",{});var met=s(mse);Sgo=r(met,"AutoProcessor"),met.forEach(t),HDe.forEach(t),Qqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(tL.$$.fragment,Gs),Rgo=i(Gs),aL=n(Gs,"P",{});var UDe=s(aL);Pgo=r(UDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=n(UDe,"A",{href:!0});var get=s(CI);Bgo=r(get,"AutoProcessor.from_pretrained()"),get.forEach(t),Igo=r(UDe," class method."),UDe.forEach(t),Ngo=i(Gs),nL=n(Gs,"P",{});var JDe=s(nL);qgo=r(JDe,"This class cannot be instantiated directly using "),gse=n(JDe,"CODE",{});var het=s(gse);jgo=r(het,"__init__()"),het.forEach(t),Dgo=r(JDe," (throws an error)."),JDe.forEach(t),Ggo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(sL.$$.fragment,ea),Ogo=i(ea),hse=n(ea,"P",{});var pet=s(hse);Vgo=r(pet,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pet.forEach(t),Xgo=i(ea),wi=n(ea,"P",{});var PZ=s(wi);zgo=r(PZ,"The processor class to instantiate is selected based on the "),pse=n(PZ,"CODE",{});var _et=s(pse);Wgo=r(_et,"model_type"),_et.forEach(t),Qgo=r(PZ,` property of the config object (either
passed as an argument or loaded from `),_se=n(PZ,"CODE",{});var uet=s(_se);Hgo=r(uet,"pretrained_model_name_or_path"),uet.forEach(t),Ugo=r(PZ," if possible):"),PZ.forEach(t),Jgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Vh=n(ue,"LI",{});var YAe=s(Vh);use=n(YAe,"STRONG",{});var bet=s(use);Ygo=r(bet,"clip"),bet.forEach(t),Kgo=r(YAe," \u2014 "),wI=n(YAe,"A",{href:!0});var vet=s(wI);Zgo=r(vet,"CLIPProcessor"),vet.forEach(t),eho=r(YAe," (CLIP model)"),YAe.forEach(t),oho=i(ue),Xh=n(ue,"LI",{});var KAe=s(Xh);bse=n(KAe,"STRONG",{});var Fet=s(bse);rho=r(Fet,"flava"),Fet.forEach(t),tho=r(KAe," \u2014 "),vse=n(KAe,"CODE",{});var Tet=s(vse);aho=r(Tet,"FLAVAProcessor"),Tet.forEach(t),nho=r(KAe," (FLAVA model)"),KAe.forEach(t),sho=i(ue),zh=n(ue,"LI",{});var ZAe=s(zh);Fse=n(ZAe,"STRONG",{});var Met=s(Fse);lho=r(Met,"layoutlmv2"),Met.forEach(t),iho=r(ZAe," \u2014 "),AI=n(ZAe,"A",{href:!0});var Eet=s(AI);dho=r(Eet,"LayoutLMv2Processor"),Eet.forEach(t),cho=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),fho=i(ue),Wh=n(ue,"LI",{});var eye=s(Wh);Tse=n(eye,"STRONG",{});var Cet=s(Tse);mho=r(Cet,"layoutlmv3"),Cet.forEach(t),gho=r(eye," \u2014 "),yI=n(eye,"A",{href:!0});var wet=s(yI);hho=r(wet,"LayoutLMv3Processor"),wet.forEach(t),pho=r(eye," (LayoutLMv3 model)"),eye.forEach(t),_ho=i(ue),Qh=n(ue,"LI",{});var oye=s(Qh);Mse=n(oye,"STRONG",{});var Aet=s(Mse);uho=r(Aet,"layoutxlm"),Aet.forEach(t),bho=r(oye," \u2014 "),LI=n(oye,"A",{href:!0});var yet=s(LI);vho=r(yet,"LayoutXLMProcessor"),yet.forEach(t),Fho=r(oye," (LayoutXLM model)"),oye.forEach(t),Tho=i(ue),Hh=n(ue,"LI",{});var rye=s(Hh);Ese=n(rye,"STRONG",{});var Let=s(Ese);Mho=r(Let,"sew"),Let.forEach(t),Eho=r(rye," \u2014 "),xI=n(rye,"A",{href:!0});var xet=s(xI);Cho=r(xet,"Wav2Vec2Processor"),xet.forEach(t),who=r(rye," (SEW model)"),rye.forEach(t),Aho=i(ue),Uh=n(ue,"LI",{});var tye=s(Uh);Cse=n(tye,"STRONG",{});var $et=s(Cse);yho=r($et,"sew-d"),$et.forEach(t),Lho=r(tye," \u2014 "),$I=n(tye,"A",{href:!0});var ket=s($I);xho=r(ket,"Wav2Vec2Processor"),ket.forEach(t),$ho=r(tye," (SEW-D model)"),tye.forEach(t),kho=i(ue),Jh=n(ue,"LI",{});var aye=s(Jh);wse=n(aye,"STRONG",{});var Set=s(wse);Sho=r(Set,"speech_to_text"),Set.forEach(t),Rho=r(aye," \u2014 "),kI=n(aye,"A",{href:!0});var Ret=s(kI);Pho=r(Ret,"Speech2TextProcessor"),Ret.forEach(t),Bho=r(aye," (Speech2Text model)"),aye.forEach(t),Iho=i(ue),Yh=n(ue,"LI",{});var nye=s(Yh);Ase=n(nye,"STRONG",{});var Pet=s(Ase);Nho=r(Pet,"speech_to_text_2"),Pet.forEach(t),qho=r(nye," \u2014 "),SI=n(nye,"A",{href:!0});var Bet=s(SI);jho=r(Bet,"Speech2Text2Processor"),Bet.forEach(t),Dho=r(nye," (Speech2Text2 model)"),nye.forEach(t),Gho=i(ue),Kh=n(ue,"LI",{});var sye=s(Kh);yse=n(sye,"STRONG",{});var Iet=s(yse);Oho=r(Iet,"trocr"),Iet.forEach(t),Vho=r(sye," \u2014 "),RI=n(sye,"A",{href:!0});var Net=s(RI);Xho=r(Net,"TrOCRProcessor"),Net.forEach(t),zho=r(sye," (TrOCR model)"),sye.forEach(t),Who=i(ue),Zh=n(ue,"LI",{});var lye=s(Zh);Lse=n(lye,"STRONG",{});var qet=s(Lse);Qho=r(qet,"unispeech"),qet.forEach(t),Hho=r(lye," \u2014 "),PI=n(lye,"A",{href:!0});var jet=s(PI);Uho=r(jet,"Wav2Vec2Processor"),jet.forEach(t),Jho=r(lye," (UniSpeech model)"),lye.forEach(t),Yho=i(ue),ep=n(ue,"LI",{});var iye=s(ep);xse=n(iye,"STRONG",{});var Det=s(xse);Kho=r(Det,"unispeech-sat"),Det.forEach(t),Zho=r(iye," \u2014 "),BI=n(iye,"A",{href:!0});var Get=s(BI);epo=r(Get,"Wav2Vec2Processor"),Get.forEach(t),opo=r(iye," (UniSpeechSat model)"),iye.forEach(t),rpo=i(ue),op=n(ue,"LI",{});var dye=s(op);$se=n(dye,"STRONG",{});var Oet=s($se);tpo=r(Oet,"vilt"),Oet.forEach(t),apo=r(dye," \u2014 "),II=n(dye,"A",{href:!0});var Vet=s(II);npo=r(Vet,"ViltProcessor"),Vet.forEach(t),spo=r(dye," (ViLT model)"),dye.forEach(t),lpo=i(ue),rp=n(ue,"LI",{});var cye=s(rp);kse=n(cye,"STRONG",{});var Xet=s(kse);ipo=r(Xet,"vision-text-dual-encoder"),Xet.forEach(t),dpo=r(cye," \u2014 "),NI=n(cye,"A",{href:!0});var zet=s(NI);cpo=r(zet,"VisionTextDualEncoderProcessor"),zet.forEach(t),fpo=r(cye," (VisionTextDualEncoder model)"),cye.forEach(t),mpo=i(ue),tp=n(ue,"LI",{});var fye=s(tp);Sse=n(fye,"STRONG",{});var Wet=s(Sse);gpo=r(Wet,"wav2vec2"),Wet.forEach(t),hpo=r(fye," \u2014 "),qI=n(fye,"A",{href:!0});var Qet=s(qI);ppo=r(Qet,"Wav2Vec2Processor"),Qet.forEach(t),_po=r(fye," (Wav2Vec2 model)"),fye.forEach(t),upo=i(ue),ap=n(ue,"LI",{});var mye=s(ap);Rse=n(mye,"STRONG",{});var Het=s(Rse);bpo=r(Het,"wav2vec2-conformer"),Het.forEach(t),vpo=r(mye," \u2014 "),jI=n(mye,"A",{href:!0});var Uet=s(jI);Fpo=r(Uet,"Wav2Vec2Processor"),Uet.forEach(t),Tpo=r(mye," (Wav2Vec2-Conformer model)"),mye.forEach(t),Mpo=i(ue),np=n(ue,"LI",{});var gye=s(np);Pse=n(gye,"STRONG",{});var Jet=s(Pse);Epo=r(Jet,"wavlm"),Jet.forEach(t),Cpo=r(gye," \u2014 "),DI=n(gye,"A",{href:!0});var Yet=s(DI);wpo=r(Yet,"Wav2Vec2Processor"),Yet.forEach(t),Apo=r(gye," (WavLM model)"),gye.forEach(t),ue.forEach(t),ypo=i(ea),T(sp.$$.fragment,ea),Lpo=i(ea),T(lp.$$.fragment,ea),ea.forEach(t),xpo=i(Gs),ip=n(Gs,"DIV",{class:!0});var YDe=s(ip);T(lL.$$.fragment,YDe),$po=i(YDe),Bse=n(YDe,"P",{});var Ket=s(Bse);kpo=r(Ket,"Register a new processor for this class."),Ket.forEach(t),YDe.forEach(t),Gs.forEach(t),Hqe=i(f),Ai=n(f,"H2",{class:!0});var KDe=s(Ai);dp=n(KDe,"A",{id:!0,class:!0,href:!0});var Zet=s(dp);Ise=n(Zet,"SPAN",{});var eot=s(Ise);T(iL.$$.fragment,eot),eot.forEach(t),Zet.forEach(t),Spo=i(KDe),Nse=n(KDe,"SPAN",{});var oot=s(Nse);Rpo=r(oot,"AutoModel"),oot.forEach(t),KDe.forEach(t),Uqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(dL.$$.fragment,Os),Ppo=i(Os),yi=n(Os,"P",{});var BZ=s(yi);Bpo=r(BZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=n(BZ,"A",{href:!0});var rot=s(GI);Ipo=r(rot,"from_pretrained()"),rot.forEach(t),Npo=r(BZ," class method or the "),OI=n(BZ,"A",{href:!0});var tot=s(OI);qpo=r(tot,"from_config()"),tot.forEach(t),jpo=r(BZ,` class
method.`),BZ.forEach(t),Dpo=i(Os),cL=n(Os,"P",{});var ZDe=s(cL);Gpo=r(ZDe,"This class cannot be instantiated directly using "),qse=n(ZDe,"CODE",{});var aot=s(qse);Opo=r(aot,"__init__()"),aot.forEach(t),Vpo=r(ZDe," (throws an error)."),ZDe.forEach(t),Xpo=i(Os),tt=n(Os,"DIV",{class:!0});var Dw=s(tt);T(fL.$$.fragment,Dw),zpo=i(Dw),jse=n(Dw,"P",{});var not=s(jse);Wpo=r(not,"Instantiates one of the base model classes of the library from a configuration."),not.forEach(t),Qpo=i(Dw),Li=n(Dw,"P",{});var IZ=s(Li);Hpo=r(IZ,`Note:
Loading a model from its configuration file does `),Dse=n(IZ,"STRONG",{});var sot=s(Dse);Upo=r(sot,"not"),sot.forEach(t),Jpo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n(IZ,"A",{href:!0});var lot=s(VI);Ypo=r(lot,"from_pretrained()"),lot.forEach(t),Kpo=r(IZ," to load the model weights."),IZ.forEach(t),Zpo=i(Dw),T(cp.$$.fragment,Dw),Dw.forEach(t),e_o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(mL.$$.fragment,oa),o_o=i(oa),Gse=n(oa,"P",{});var iot=s(Gse);r_o=r(iot,"Instantiate one of the base model classes of the library from a pretrained model."),iot.forEach(t),t_o=i(oa),La=n(oa,"P",{});var Gw=s(La);a_o=r(Gw,"The model class to instantiate is selected based on the "),Ose=n(Gw,"CODE",{});var dot=s(Ose);n_o=r(dot,"model_type"),dot.forEach(t),s_o=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Vse=n(Gw,"CODE",{});var cot=s(Vse);l_o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),i_o=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=n(Gw,"CODE",{});var fot=s(Xse);d_o=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),c_o=r(Gw,":"),Gw.forEach(t),f_o=i(oa),x=n(oa,"UL",{});var $=s(x);fp=n($,"LI",{});var hye=s(fp);zse=n(hye,"STRONG",{});var mot=s(zse);m_o=r(mot,"albert"),mot.forEach(t),g_o=r(hye," \u2014 "),XI=n(hye,"A",{href:!0});var got=s(XI);h_o=r(got,"AlbertModel"),got.forEach(t),p_o=r(hye," (ALBERT model)"),hye.forEach(t),__o=i($),mp=n($,"LI",{});var pye=s(mp);Wse=n(pye,"STRONG",{});var hot=s(Wse);u_o=r(hot,"bart"),hot.forEach(t),b_o=r(pye," \u2014 "),zI=n(pye,"A",{href:!0});var pot=s(zI);v_o=r(pot,"BartModel"),pot.forEach(t),F_o=r(pye," (BART model)"),pye.forEach(t),T_o=i($),gp=n($,"LI",{});var _ye=s(gp);Qse=n(_ye,"STRONG",{});var _ot=s(Qse);M_o=r(_ot,"beit"),_ot.forEach(t),E_o=r(_ye," \u2014 "),WI=n(_ye,"A",{href:!0});var uot=s(WI);C_o=r(uot,"BeitModel"),uot.forEach(t),w_o=r(_ye," (BEiT model)"),_ye.forEach(t),A_o=i($),hp=n($,"LI",{});var uye=s(hp);Hse=n(uye,"STRONG",{});var bot=s(Hse);y_o=r(bot,"bert"),bot.forEach(t),L_o=r(uye," \u2014 "),QI=n(uye,"A",{href:!0});var vot=s(QI);x_o=r(vot,"BertModel"),vot.forEach(t),$_o=r(uye," (BERT model)"),uye.forEach(t),k_o=i($),pp=n($,"LI",{});var bye=s(pp);Use=n(bye,"STRONG",{});var Fot=s(Use);S_o=r(Fot,"bert-generation"),Fot.forEach(t),R_o=r(bye," \u2014 "),HI=n(bye,"A",{href:!0});var Tot=s(HI);P_o=r(Tot,"BertGenerationEncoder"),Tot.forEach(t),B_o=r(bye," (Bert Generation model)"),bye.forEach(t),I_o=i($),_p=n($,"LI",{});var vye=s(_p);Jse=n(vye,"STRONG",{});var Mot=s(Jse);N_o=r(Mot,"big_bird"),Mot.forEach(t),q_o=r(vye," \u2014 "),UI=n(vye,"A",{href:!0});var Eot=s(UI);j_o=r(Eot,"BigBirdModel"),Eot.forEach(t),D_o=r(vye," (BigBird model)"),vye.forEach(t),G_o=i($),up=n($,"LI",{});var Fye=s(up);Yse=n(Fye,"STRONG",{});var Cot=s(Yse);O_o=r(Cot,"bigbird_pegasus"),Cot.forEach(t),V_o=r(Fye," \u2014 "),JI=n(Fye,"A",{href:!0});var wot=s(JI);X_o=r(wot,"BigBirdPegasusModel"),wot.forEach(t),z_o=r(Fye," (BigBird-Pegasus model)"),Fye.forEach(t),W_o=i($),bp=n($,"LI",{});var Tye=s(bp);Kse=n(Tye,"STRONG",{});var Aot=s(Kse);Q_o=r(Aot,"blenderbot"),Aot.forEach(t),H_o=r(Tye," \u2014 "),YI=n(Tye,"A",{href:!0});var yot=s(YI);U_o=r(yot,"BlenderbotModel"),yot.forEach(t),J_o=r(Tye," (Blenderbot model)"),Tye.forEach(t),Y_o=i($),vp=n($,"LI",{});var Mye=s(vp);Zse=n(Mye,"STRONG",{});var Lot=s(Zse);K_o=r(Lot,"blenderbot-small"),Lot.forEach(t),Z_o=r(Mye," \u2014 "),KI=n(Mye,"A",{href:!0});var xot=s(KI);euo=r(xot,"BlenderbotSmallModel"),xot.forEach(t),ouo=r(Mye," (BlenderbotSmall model)"),Mye.forEach(t),ruo=i($),Fp=n($,"LI",{});var Eye=s(Fp);ele=n(Eye,"STRONG",{});var $ot=s(ele);tuo=r($ot,"camembert"),$ot.forEach(t),auo=r(Eye," \u2014 "),ZI=n(Eye,"A",{href:!0});var kot=s(ZI);nuo=r(kot,"CamembertModel"),kot.forEach(t),suo=r(Eye," (CamemBERT model)"),Eye.forEach(t),luo=i($),Tp=n($,"LI",{});var Cye=s(Tp);ole=n(Cye,"STRONG",{});var Sot=s(ole);iuo=r(Sot,"canine"),Sot.forEach(t),duo=r(Cye," \u2014 "),eN=n(Cye,"A",{href:!0});var Rot=s(eN);cuo=r(Rot,"CanineModel"),Rot.forEach(t),fuo=r(Cye," (CANINE model)"),Cye.forEach(t),muo=i($),Mp=n($,"LI",{});var wye=s(Mp);rle=n(wye,"STRONG",{});var Pot=s(rle);guo=r(Pot,"clip"),Pot.forEach(t),huo=r(wye," \u2014 "),oN=n(wye,"A",{href:!0});var Bot=s(oN);puo=r(Bot,"CLIPModel"),Bot.forEach(t),_uo=r(wye," (CLIP model)"),wye.forEach(t),uuo=i($),Ep=n($,"LI",{});var Aye=s(Ep);tle=n(Aye,"STRONG",{});var Iot=s(tle);buo=r(Iot,"convbert"),Iot.forEach(t),vuo=r(Aye," \u2014 "),rN=n(Aye,"A",{href:!0});var Not=s(rN);Fuo=r(Not,"ConvBertModel"),Not.forEach(t),Tuo=r(Aye," (ConvBERT model)"),Aye.forEach(t),Muo=i($),Cp=n($,"LI",{});var yye=s(Cp);ale=n(yye,"STRONG",{});var qot=s(ale);Euo=r(qot,"convnext"),qot.forEach(t),Cuo=r(yye," \u2014 "),tN=n(yye,"A",{href:!0});var jot=s(tN);wuo=r(jot,"ConvNextModel"),jot.forEach(t),Auo=r(yye," (ConvNeXT model)"),yye.forEach(t),yuo=i($),wp=n($,"LI",{});var Lye=s(wp);nle=n(Lye,"STRONG",{});var Dot=s(nle);Luo=r(Dot,"ctrl"),Dot.forEach(t),xuo=r(Lye," \u2014 "),aN=n(Lye,"A",{href:!0});var Got=s(aN);$uo=r(Got,"CTRLModel"),Got.forEach(t),kuo=r(Lye," (CTRL model)"),Lye.forEach(t),Suo=i($),Ap=n($,"LI",{});var xye=s(Ap);sle=n(xye,"STRONG",{});var Oot=s(sle);Ruo=r(Oot,"cvt"),Oot.forEach(t),Puo=r(xye," \u2014 "),nN=n(xye,"A",{href:!0});var Vot=s(nN);Buo=r(Vot,"CvtModel"),Vot.forEach(t),Iuo=r(xye," (CvT model)"),xye.forEach(t),Nuo=i($),yp=n($,"LI",{});var $ye=s(yp);lle=n($ye,"STRONG",{});var Xot=s(lle);quo=r(Xot,"data2vec-audio"),Xot.forEach(t),juo=r($ye," \u2014 "),sN=n($ye,"A",{href:!0});var zot=s(sN);Duo=r(zot,"Data2VecAudioModel"),zot.forEach(t),Guo=r($ye," (Data2VecAudio model)"),$ye.forEach(t),Ouo=i($),Lp=n($,"LI",{});var kye=s(Lp);ile=n(kye,"STRONG",{});var Wot=s(ile);Vuo=r(Wot,"data2vec-text"),Wot.forEach(t),Xuo=r(kye," \u2014 "),lN=n(kye,"A",{href:!0});var Qot=s(lN);zuo=r(Qot,"Data2VecTextModel"),Qot.forEach(t),Wuo=r(kye," (Data2VecText model)"),kye.forEach(t),Quo=i($),xp=n($,"LI",{});var Sye=s(xp);dle=n(Sye,"STRONG",{});var Hot=s(dle);Huo=r(Hot,"data2vec-vision"),Hot.forEach(t),Uuo=r(Sye," \u2014 "),iN=n(Sye,"A",{href:!0});var Uot=s(iN);Juo=r(Uot,"Data2VecVisionModel"),Uot.forEach(t),Yuo=r(Sye," (Data2VecVision model)"),Sye.forEach(t),Kuo=i($),$p=n($,"LI",{});var Rye=s($p);cle=n(Rye,"STRONG",{});var Jot=s(cle);Zuo=r(Jot,"deberta"),Jot.forEach(t),ebo=r(Rye," \u2014 "),dN=n(Rye,"A",{href:!0});var Yot=s(dN);obo=r(Yot,"DebertaModel"),Yot.forEach(t),rbo=r(Rye," (DeBERTa model)"),Rye.forEach(t),tbo=i($),kp=n($,"LI",{});var Pye=s(kp);fle=n(Pye,"STRONG",{});var Kot=s(fle);abo=r(Kot,"deberta-v2"),Kot.forEach(t),nbo=r(Pye," \u2014 "),cN=n(Pye,"A",{href:!0});var Zot=s(cN);sbo=r(Zot,"DebertaV2Model"),Zot.forEach(t),lbo=r(Pye," (DeBERTa-v2 model)"),Pye.forEach(t),ibo=i($),Sp=n($,"LI",{});var Bye=s(Sp);mle=n(Bye,"STRONG",{});var ert=s(mle);dbo=r(ert,"decision_transformer"),ert.forEach(t),cbo=r(Bye," \u2014 "),fN=n(Bye,"A",{href:!0});var ort=s(fN);fbo=r(ort,"DecisionTransformerModel"),ort.forEach(t),mbo=r(Bye," (Decision Transformer model)"),Bye.forEach(t),gbo=i($),Rp=n($,"LI",{});var Iye=s(Rp);gle=n(Iye,"STRONG",{});var rrt=s(gle);hbo=r(rrt,"deit"),rrt.forEach(t),pbo=r(Iye," \u2014 "),mN=n(Iye,"A",{href:!0});var trt=s(mN);_bo=r(trt,"DeiTModel"),trt.forEach(t),ubo=r(Iye," (DeiT model)"),Iye.forEach(t),bbo=i($),Pp=n($,"LI",{});var Nye=s(Pp);hle=n(Nye,"STRONG",{});var art=s(hle);vbo=r(art,"detr"),art.forEach(t),Fbo=r(Nye," \u2014 "),gN=n(Nye,"A",{href:!0});var nrt=s(gN);Tbo=r(nrt,"DetrModel"),nrt.forEach(t),Mbo=r(Nye," (DETR model)"),Nye.forEach(t),Ebo=i($),Bp=n($,"LI",{});var qye=s(Bp);ple=n(qye,"STRONG",{});var srt=s(ple);Cbo=r(srt,"distilbert"),srt.forEach(t),wbo=r(qye," \u2014 "),hN=n(qye,"A",{href:!0});var lrt=s(hN);Abo=r(lrt,"DistilBertModel"),lrt.forEach(t),ybo=r(qye," (DistilBERT model)"),qye.forEach(t),Lbo=i($),Ip=n($,"LI",{});var jye=s(Ip);_le=n(jye,"STRONG",{});var irt=s(_le);xbo=r(irt,"dpr"),irt.forEach(t),$bo=r(jye," \u2014 "),pN=n(jye,"A",{href:!0});var drt=s(pN);kbo=r(drt,"DPRQuestionEncoder"),drt.forEach(t),Sbo=r(jye," (DPR model)"),jye.forEach(t),Rbo=i($),Np=n($,"LI",{});var Dye=s(Np);ule=n(Dye,"STRONG",{});var crt=s(ule);Pbo=r(crt,"dpt"),crt.forEach(t),Bbo=r(Dye," \u2014 "),_N=n(Dye,"A",{href:!0});var frt=s(_N);Ibo=r(frt,"DPTModel"),frt.forEach(t),Nbo=r(Dye," (DPT model)"),Dye.forEach(t),qbo=i($),qp=n($,"LI",{});var Gye=s(qp);ble=n(Gye,"STRONG",{});var mrt=s(ble);jbo=r(mrt,"electra"),mrt.forEach(t),Dbo=r(Gye," \u2014 "),uN=n(Gye,"A",{href:!0});var grt=s(uN);Gbo=r(grt,"ElectraModel"),grt.forEach(t),Obo=r(Gye," (ELECTRA model)"),Gye.forEach(t),Vbo=i($),jp=n($,"LI",{});var Oye=s(jp);vle=n(Oye,"STRONG",{});var hrt=s(vle);Xbo=r(hrt,"flaubert"),hrt.forEach(t),zbo=r(Oye," \u2014 "),bN=n(Oye,"A",{href:!0});var prt=s(bN);Wbo=r(prt,"FlaubertModel"),prt.forEach(t),Qbo=r(Oye," (FlauBERT model)"),Oye.forEach(t),Hbo=i($),Dp=n($,"LI",{});var Vye=s(Dp);Fle=n(Vye,"STRONG",{});var _rt=s(Fle);Ubo=r(_rt,"flava"),_rt.forEach(t),Jbo=r(Vye," \u2014 "),vN=n(Vye,"A",{href:!0});var urt=s(vN);Ybo=r(urt,"FlavaModel"),urt.forEach(t),Kbo=r(Vye," (FLAVA model)"),Vye.forEach(t),Zbo=i($),Gp=n($,"LI",{});var Xye=s(Gp);Tle=n(Xye,"STRONG",{});var brt=s(Tle);e2o=r(brt,"fnet"),brt.forEach(t),o2o=r(Xye," \u2014 "),FN=n(Xye,"A",{href:!0});var vrt=s(FN);r2o=r(vrt,"FNetModel"),vrt.forEach(t),t2o=r(Xye," (FNet model)"),Xye.forEach(t),a2o=i($),Op=n($,"LI",{});var zye=s(Op);Mle=n(zye,"STRONG",{});var Frt=s(Mle);n2o=r(Frt,"fsmt"),Frt.forEach(t),s2o=r(zye," \u2014 "),TN=n(zye,"A",{href:!0});var Trt=s(TN);l2o=r(Trt,"FSMTModel"),Trt.forEach(t),i2o=r(zye," (FairSeq Machine-Translation model)"),zye.forEach(t),d2o=i($),Ps=n($,"LI",{});var Y$=s(Ps);Ele=n(Y$,"STRONG",{});var Mrt=s(Ele);c2o=r(Mrt,"funnel"),Mrt.forEach(t),f2o=r(Y$," \u2014 "),MN=n(Y$,"A",{href:!0});var Ert=s(MN);m2o=r(Ert,"FunnelModel"),Ert.forEach(t),g2o=r(Y$," or "),EN=n(Y$,"A",{href:!0});var Crt=s(EN);h2o=r(Crt,"FunnelBaseModel"),Crt.forEach(t),p2o=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),_2o=i($),Vp=n($,"LI",{});var Wye=s(Vp);Cle=n(Wye,"STRONG",{});var wrt=s(Cle);u2o=r(wrt,"glpn"),wrt.forEach(t),b2o=r(Wye," \u2014 "),CN=n(Wye,"A",{href:!0});var Art=s(CN);v2o=r(Art,"GLPNModel"),Art.forEach(t),F2o=r(Wye," (GLPN model)"),Wye.forEach(t),T2o=i($),Xp=n($,"LI",{});var Qye=s(Xp);wle=n(Qye,"STRONG",{});var yrt=s(wle);M2o=r(yrt,"gpt2"),yrt.forEach(t),E2o=r(Qye," \u2014 "),wN=n(Qye,"A",{href:!0});var Lrt=s(wN);C2o=r(Lrt,"GPT2Model"),Lrt.forEach(t),w2o=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),A2o=i($),zp=n($,"LI",{});var Hye=s(zp);Ale=n(Hye,"STRONG",{});var xrt=s(Ale);y2o=r(xrt,"gpt_neo"),xrt.forEach(t),L2o=r(Hye," \u2014 "),AN=n(Hye,"A",{href:!0});var $rt=s(AN);x2o=r($rt,"GPTNeoModel"),$rt.forEach(t),$2o=r(Hye," (GPT Neo model)"),Hye.forEach(t),k2o=i($),Wp=n($,"LI",{});var Uye=s(Wp);yle=n(Uye,"STRONG",{});var krt=s(yle);S2o=r(krt,"gpt_neox"),krt.forEach(t),R2o=r(Uye," \u2014 "),yN=n(Uye,"A",{href:!0});var Srt=s(yN);P2o=r(Srt,"GPTNeoXModel"),Srt.forEach(t),B2o=r(Uye," (GPT NeoX model)"),Uye.forEach(t),I2o=i($),Qp=n($,"LI",{});var Jye=s(Qp);Lle=n(Jye,"STRONG",{});var Rrt=s(Lle);N2o=r(Rrt,"gptj"),Rrt.forEach(t),q2o=r(Jye," \u2014 "),LN=n(Jye,"A",{href:!0});var Prt=s(LN);j2o=r(Prt,"GPTJModel"),Prt.forEach(t),D2o=r(Jye," (GPT-J model)"),Jye.forEach(t),G2o=i($),Hp=n($,"LI",{});var Yye=s(Hp);xle=n(Yye,"STRONG",{});var Brt=s(xle);O2o=r(Brt,"hubert"),Brt.forEach(t),V2o=r(Yye," \u2014 "),xN=n(Yye,"A",{href:!0});var Irt=s(xN);X2o=r(Irt,"HubertModel"),Irt.forEach(t),z2o=r(Yye," (Hubert model)"),Yye.forEach(t),W2o=i($),Up=n($,"LI",{});var Kye=s(Up);$le=n(Kye,"STRONG",{});var Nrt=s($le);Q2o=r(Nrt,"ibert"),Nrt.forEach(t),H2o=r(Kye," \u2014 "),$N=n(Kye,"A",{href:!0});var qrt=s($N);U2o=r(qrt,"IBertModel"),qrt.forEach(t),J2o=r(Kye," (I-BERT model)"),Kye.forEach(t),Y2o=i($),Jp=n($,"LI",{});var Zye=s(Jp);kle=n(Zye,"STRONG",{});var jrt=s(kle);K2o=r(jrt,"imagegpt"),jrt.forEach(t),Z2o=r(Zye," \u2014 "),kN=n(Zye,"A",{href:!0});var Drt=s(kN);evo=r(Drt,"ImageGPTModel"),Drt.forEach(t),ovo=r(Zye," (ImageGPT model)"),Zye.forEach(t),rvo=i($),Yp=n($,"LI",{});var eLe=s(Yp);Sle=n(eLe,"STRONG",{});var Grt=s(Sle);tvo=r(Grt,"layoutlm"),Grt.forEach(t),avo=r(eLe," \u2014 "),SN=n(eLe,"A",{href:!0});var Ort=s(SN);nvo=r(Ort,"LayoutLMModel"),Ort.forEach(t),svo=r(eLe," (LayoutLM model)"),eLe.forEach(t),lvo=i($),Kp=n($,"LI",{});var oLe=s(Kp);Rle=n(oLe,"STRONG",{});var Vrt=s(Rle);ivo=r(Vrt,"layoutlmv2"),Vrt.forEach(t),dvo=r(oLe," \u2014 "),RN=n(oLe,"A",{href:!0});var Xrt=s(RN);cvo=r(Xrt,"LayoutLMv2Model"),Xrt.forEach(t),fvo=r(oLe," (LayoutLMv2 model)"),oLe.forEach(t),mvo=i($),Zp=n($,"LI",{});var rLe=s(Zp);Ple=n(rLe,"STRONG",{});var zrt=s(Ple);gvo=r(zrt,"layoutlmv3"),zrt.forEach(t),hvo=r(rLe," \u2014 "),PN=n(rLe,"A",{href:!0});var Wrt=s(PN);pvo=r(Wrt,"LayoutLMv3Model"),Wrt.forEach(t),_vo=r(rLe," (LayoutLMv3 model)"),rLe.forEach(t),uvo=i($),e_=n($,"LI",{});var tLe=s(e_);Ble=n(tLe,"STRONG",{});var Qrt=s(Ble);bvo=r(Qrt,"led"),Qrt.forEach(t),vvo=r(tLe," \u2014 "),BN=n(tLe,"A",{href:!0});var Hrt=s(BN);Fvo=r(Hrt,"LEDModel"),Hrt.forEach(t),Tvo=r(tLe," (LED model)"),tLe.forEach(t),Mvo=i($),o_=n($,"LI",{});var aLe=s(o_);Ile=n(aLe,"STRONG",{});var Urt=s(Ile);Evo=r(Urt,"levit"),Urt.forEach(t),Cvo=r(aLe," \u2014 "),IN=n(aLe,"A",{href:!0});var Jrt=s(IN);wvo=r(Jrt,"LevitModel"),Jrt.forEach(t),Avo=r(aLe," (LeViT model)"),aLe.forEach(t),yvo=i($),r_=n($,"LI",{});var nLe=s(r_);Nle=n(nLe,"STRONG",{});var Yrt=s(Nle);Lvo=r(Yrt,"longformer"),Yrt.forEach(t),xvo=r(nLe," \u2014 "),NN=n(nLe,"A",{href:!0});var Krt=s(NN);$vo=r(Krt,"LongformerModel"),Krt.forEach(t),kvo=r(nLe," (Longformer model)"),nLe.forEach(t),Svo=i($),t_=n($,"LI",{});var sLe=s(t_);qle=n(sLe,"STRONG",{});var Zrt=s(qle);Rvo=r(Zrt,"luke"),Zrt.forEach(t),Pvo=r(sLe," \u2014 "),qN=n(sLe,"A",{href:!0});var ett=s(qN);Bvo=r(ett,"LukeModel"),ett.forEach(t),Ivo=r(sLe," (LUKE model)"),sLe.forEach(t),Nvo=i($),a_=n($,"LI",{});var lLe=s(a_);jle=n(lLe,"STRONG",{});var ott=s(jle);qvo=r(ott,"lxmert"),ott.forEach(t),jvo=r(lLe," \u2014 "),jN=n(lLe,"A",{href:!0});var rtt=s(jN);Dvo=r(rtt,"LxmertModel"),rtt.forEach(t),Gvo=r(lLe," (LXMERT model)"),lLe.forEach(t),Ovo=i($),n_=n($,"LI",{});var iLe=s(n_);Dle=n(iLe,"STRONG",{});var ttt=s(Dle);Vvo=r(ttt,"m2m_100"),ttt.forEach(t),Xvo=r(iLe," \u2014 "),DN=n(iLe,"A",{href:!0});var att=s(DN);zvo=r(att,"M2M100Model"),att.forEach(t),Wvo=r(iLe," (M2M100 model)"),iLe.forEach(t),Qvo=i($),s_=n($,"LI",{});var dLe=s(s_);Gle=n(dLe,"STRONG",{});var ntt=s(Gle);Hvo=r(ntt,"marian"),ntt.forEach(t),Uvo=r(dLe," \u2014 "),GN=n(dLe,"A",{href:!0});var stt=s(GN);Jvo=r(stt,"MarianModel"),stt.forEach(t),Yvo=r(dLe," (Marian model)"),dLe.forEach(t),Kvo=i($),l_=n($,"LI",{});var cLe=s(l_);Ole=n(cLe,"STRONG",{});var ltt=s(Ole);Zvo=r(ltt,"maskformer"),ltt.forEach(t),eFo=r(cLe," \u2014 "),ON=n(cLe,"A",{href:!0});var itt=s(ON);oFo=r(itt,"MaskFormerModel"),itt.forEach(t),rFo=r(cLe," (MaskFormer model)"),cLe.forEach(t),tFo=i($),i_=n($,"LI",{});var fLe=s(i_);Vle=n(fLe,"STRONG",{});var dtt=s(Vle);aFo=r(dtt,"mbart"),dtt.forEach(t),nFo=r(fLe," \u2014 "),VN=n(fLe,"A",{href:!0});var ctt=s(VN);sFo=r(ctt,"MBartModel"),ctt.forEach(t),lFo=r(fLe," (mBART model)"),fLe.forEach(t),iFo=i($),d_=n($,"LI",{});var mLe=s(d_);Xle=n(mLe,"STRONG",{});var ftt=s(Xle);dFo=r(ftt,"megatron-bert"),ftt.forEach(t),cFo=r(mLe," \u2014 "),XN=n(mLe,"A",{href:!0});var mtt=s(XN);fFo=r(mtt,"MegatronBertModel"),mtt.forEach(t),mFo=r(mLe," (Megatron-BERT model)"),mLe.forEach(t),gFo=i($),c_=n($,"LI",{});var gLe=s(c_);zle=n(gLe,"STRONG",{});var gtt=s(zle);hFo=r(gtt,"mobilebert"),gtt.forEach(t),pFo=r(gLe," \u2014 "),zN=n(gLe,"A",{href:!0});var htt=s(zN);_Fo=r(htt,"MobileBertModel"),htt.forEach(t),uFo=r(gLe," (MobileBERT model)"),gLe.forEach(t),bFo=i($),f_=n($,"LI",{});var hLe=s(f_);Wle=n(hLe,"STRONG",{});var ptt=s(Wle);vFo=r(ptt,"mpnet"),ptt.forEach(t),FFo=r(hLe," \u2014 "),WN=n(hLe,"A",{href:!0});var _tt=s(WN);TFo=r(_tt,"MPNetModel"),_tt.forEach(t),MFo=r(hLe," (MPNet model)"),hLe.forEach(t),EFo=i($),m_=n($,"LI",{});var pLe=s(m_);Qle=n(pLe,"STRONG",{});var utt=s(Qle);CFo=r(utt,"mt5"),utt.forEach(t),wFo=r(pLe," \u2014 "),QN=n(pLe,"A",{href:!0});var btt=s(QN);AFo=r(btt,"MT5Model"),btt.forEach(t),yFo=r(pLe," (MT5 model)"),pLe.forEach(t),LFo=i($),g_=n($,"LI",{});var _Le=s(g_);Hle=n(_Le,"STRONG",{});var vtt=s(Hle);xFo=r(vtt,"nystromformer"),vtt.forEach(t),$Fo=r(_Le," \u2014 "),HN=n(_Le,"A",{href:!0});var Ftt=s(HN);kFo=r(Ftt,"NystromformerModel"),Ftt.forEach(t),SFo=r(_Le," (Nystr\xF6mformer model)"),_Le.forEach(t),RFo=i($),h_=n($,"LI",{});var uLe=s(h_);Ule=n(uLe,"STRONG",{});var Ttt=s(Ule);PFo=r(Ttt,"openai-gpt"),Ttt.forEach(t),BFo=r(uLe," \u2014 "),UN=n(uLe,"A",{href:!0});var Mtt=s(UN);IFo=r(Mtt,"OpenAIGPTModel"),Mtt.forEach(t),NFo=r(uLe," (OpenAI GPT model)"),uLe.forEach(t),qFo=i($),p_=n($,"LI",{});var bLe=s(p_);Jle=n(bLe,"STRONG",{});var Ett=s(Jle);jFo=r(Ett,"opt"),Ett.forEach(t),DFo=r(bLe," \u2014 "),JN=n(bLe,"A",{href:!0});var Ctt=s(JN);GFo=r(Ctt,"OPTModel"),Ctt.forEach(t),OFo=r(bLe," (OPT model)"),bLe.forEach(t),VFo=i($),__=n($,"LI",{});var vLe=s(__);Yle=n(vLe,"STRONG",{});var wtt=s(Yle);XFo=r(wtt,"pegasus"),wtt.forEach(t),zFo=r(vLe," \u2014 "),YN=n(vLe,"A",{href:!0});var Att=s(YN);WFo=r(Att,"PegasusModel"),Att.forEach(t),QFo=r(vLe," (Pegasus model)"),vLe.forEach(t),HFo=i($),u_=n($,"LI",{});var FLe=s(u_);Kle=n(FLe,"STRONG",{});var ytt=s(Kle);UFo=r(ytt,"perceiver"),ytt.forEach(t),JFo=r(FLe," \u2014 "),KN=n(FLe,"A",{href:!0});var Ltt=s(KN);YFo=r(Ltt,"PerceiverModel"),Ltt.forEach(t),KFo=r(FLe," (Perceiver model)"),FLe.forEach(t),ZFo=i($),b_=n($,"LI",{});var TLe=s(b_);Zle=n(TLe,"STRONG",{});var xtt=s(Zle);e6o=r(xtt,"plbart"),xtt.forEach(t),o6o=r(TLe," \u2014 "),ZN=n(TLe,"A",{href:!0});var $tt=s(ZN);r6o=r($tt,"PLBartModel"),$tt.forEach(t),t6o=r(TLe," (PLBart model)"),TLe.forEach(t),a6o=i($),v_=n($,"LI",{});var MLe=s(v_);eie=n(MLe,"STRONG",{});var ktt=s(eie);n6o=r(ktt,"poolformer"),ktt.forEach(t),s6o=r(MLe," \u2014 "),eq=n(MLe,"A",{href:!0});var Stt=s(eq);l6o=r(Stt,"PoolFormerModel"),Stt.forEach(t),i6o=r(MLe," (PoolFormer model)"),MLe.forEach(t),d6o=i($),F_=n($,"LI",{});var ELe=s(F_);oie=n(ELe,"STRONG",{});var Rtt=s(oie);c6o=r(Rtt,"prophetnet"),Rtt.forEach(t),f6o=r(ELe," \u2014 "),oq=n(ELe,"A",{href:!0});var Ptt=s(oq);m6o=r(Ptt,"ProphetNetModel"),Ptt.forEach(t),g6o=r(ELe," (ProphetNet model)"),ELe.forEach(t),h6o=i($),T_=n($,"LI",{});var CLe=s(T_);rie=n(CLe,"STRONG",{});var Btt=s(rie);p6o=r(Btt,"qdqbert"),Btt.forEach(t),_6o=r(CLe," \u2014 "),rq=n(CLe,"A",{href:!0});var Itt=s(rq);u6o=r(Itt,"QDQBertModel"),Itt.forEach(t),b6o=r(CLe," (QDQBert model)"),CLe.forEach(t),v6o=i($),M_=n($,"LI",{});var wLe=s(M_);tie=n(wLe,"STRONG",{});var Ntt=s(tie);F6o=r(Ntt,"reformer"),Ntt.forEach(t),T6o=r(wLe," \u2014 "),tq=n(wLe,"A",{href:!0});var qtt=s(tq);M6o=r(qtt,"ReformerModel"),qtt.forEach(t),E6o=r(wLe," (Reformer model)"),wLe.forEach(t),C6o=i($),E_=n($,"LI",{});var ALe=s(E_);aie=n(ALe,"STRONG",{});var jtt=s(aie);w6o=r(jtt,"regnet"),jtt.forEach(t),A6o=r(ALe," \u2014 "),aq=n(ALe,"A",{href:!0});var Dtt=s(aq);y6o=r(Dtt,"RegNetModel"),Dtt.forEach(t),L6o=r(ALe," (RegNet model)"),ALe.forEach(t),x6o=i($),C_=n($,"LI",{});var yLe=s(C_);nie=n(yLe,"STRONG",{});var Gtt=s(nie);$6o=r(Gtt,"rembert"),Gtt.forEach(t),k6o=r(yLe," \u2014 "),nq=n(yLe,"A",{href:!0});var Ott=s(nq);S6o=r(Ott,"RemBertModel"),Ott.forEach(t),R6o=r(yLe," (RemBERT model)"),yLe.forEach(t),P6o=i($),w_=n($,"LI",{});var LLe=s(w_);sie=n(LLe,"STRONG",{});var Vtt=s(sie);B6o=r(Vtt,"resnet"),Vtt.forEach(t),I6o=r(LLe," \u2014 "),sq=n(LLe,"A",{href:!0});var Xtt=s(sq);N6o=r(Xtt,"ResNetModel"),Xtt.forEach(t),q6o=r(LLe," (ResNet model)"),LLe.forEach(t),j6o=i($),A_=n($,"LI",{});var xLe=s(A_);lie=n(xLe,"STRONG",{});var ztt=s(lie);D6o=r(ztt,"retribert"),ztt.forEach(t),G6o=r(xLe," \u2014 "),lq=n(xLe,"A",{href:!0});var Wtt=s(lq);O6o=r(Wtt,"RetriBertModel"),Wtt.forEach(t),V6o=r(xLe," (RetriBERT model)"),xLe.forEach(t),X6o=i($),y_=n($,"LI",{});var $Le=s(y_);iie=n($Le,"STRONG",{});var Qtt=s(iie);z6o=r(Qtt,"roberta"),Qtt.forEach(t),W6o=r($Le," \u2014 "),iq=n($Le,"A",{href:!0});var Htt=s(iq);Q6o=r(Htt,"RobertaModel"),Htt.forEach(t),H6o=r($Le," (RoBERTa model)"),$Le.forEach(t),U6o=i($),L_=n($,"LI",{});var kLe=s(L_);die=n(kLe,"STRONG",{});var Utt=s(die);J6o=r(Utt,"roformer"),Utt.forEach(t),Y6o=r(kLe," \u2014 "),dq=n(kLe,"A",{href:!0});var Jtt=s(dq);K6o=r(Jtt,"RoFormerModel"),Jtt.forEach(t),Z6o=r(kLe," (RoFormer model)"),kLe.forEach(t),e1o=i($),x_=n($,"LI",{});var SLe=s(x_);cie=n(SLe,"STRONG",{});var Ytt=s(cie);o1o=r(Ytt,"segformer"),Ytt.forEach(t),r1o=r(SLe," \u2014 "),cq=n(SLe,"A",{href:!0});var Ktt=s(cq);t1o=r(Ktt,"SegformerModel"),Ktt.forEach(t),a1o=r(SLe," (SegFormer model)"),SLe.forEach(t),n1o=i($),$_=n($,"LI",{});var RLe=s($_);fie=n(RLe,"STRONG",{});var Ztt=s(fie);s1o=r(Ztt,"sew"),Ztt.forEach(t),l1o=r(RLe," \u2014 "),fq=n(RLe,"A",{href:!0});var eat=s(fq);i1o=r(eat,"SEWModel"),eat.forEach(t),d1o=r(RLe," (SEW model)"),RLe.forEach(t),c1o=i($),k_=n($,"LI",{});var PLe=s(k_);mie=n(PLe,"STRONG",{});var oat=s(mie);f1o=r(oat,"sew-d"),oat.forEach(t),m1o=r(PLe," \u2014 "),mq=n(PLe,"A",{href:!0});var rat=s(mq);g1o=r(rat,"SEWDModel"),rat.forEach(t),h1o=r(PLe," (SEW-D model)"),PLe.forEach(t),p1o=i($),S_=n($,"LI",{});var BLe=s(S_);gie=n(BLe,"STRONG",{});var tat=s(gie);_1o=r(tat,"speech_to_text"),tat.forEach(t),u1o=r(BLe," \u2014 "),gq=n(BLe,"A",{href:!0});var aat=s(gq);b1o=r(aat,"Speech2TextModel"),aat.forEach(t),v1o=r(BLe," (Speech2Text model)"),BLe.forEach(t),F1o=i($),R_=n($,"LI",{});var ILe=s(R_);hie=n(ILe,"STRONG",{});var nat=s(hie);T1o=r(nat,"splinter"),nat.forEach(t),M1o=r(ILe," \u2014 "),hq=n(ILe,"A",{href:!0});var sat=s(hq);E1o=r(sat,"SplinterModel"),sat.forEach(t),C1o=r(ILe," (Splinter model)"),ILe.forEach(t),w1o=i($),P_=n($,"LI",{});var NLe=s(P_);pie=n(NLe,"STRONG",{});var lat=s(pie);A1o=r(lat,"squeezebert"),lat.forEach(t),y1o=r(NLe," \u2014 "),pq=n(NLe,"A",{href:!0});var iat=s(pq);L1o=r(iat,"SqueezeBertModel"),iat.forEach(t),x1o=r(NLe," (SqueezeBERT model)"),NLe.forEach(t),$1o=i($),B_=n($,"LI",{});var qLe=s(B_);_ie=n(qLe,"STRONG",{});var dat=s(_ie);k1o=r(dat,"swin"),dat.forEach(t),S1o=r(qLe," \u2014 "),_q=n(qLe,"A",{href:!0});var cat=s(_q);R1o=r(cat,"SwinModel"),cat.forEach(t),P1o=r(qLe," (Swin Transformer model)"),qLe.forEach(t),B1o=i($),I_=n($,"LI",{});var jLe=s(I_);uie=n(jLe,"STRONG",{});var fat=s(uie);I1o=r(fat,"t5"),fat.forEach(t),N1o=r(jLe," \u2014 "),uq=n(jLe,"A",{href:!0});var mat=s(uq);q1o=r(mat,"T5Model"),mat.forEach(t),j1o=r(jLe," (T5 model)"),jLe.forEach(t),D1o=i($),N_=n($,"LI",{});var DLe=s(N_);bie=n(DLe,"STRONG",{});var gat=s(bie);G1o=r(gat,"tapas"),gat.forEach(t),O1o=r(DLe," \u2014 "),bq=n(DLe,"A",{href:!0});var hat=s(bq);V1o=r(hat,"TapasModel"),hat.forEach(t),X1o=r(DLe," (TAPAS model)"),DLe.forEach(t),z1o=i($),q_=n($,"LI",{});var GLe=s(q_);vie=n(GLe,"STRONG",{});var pat=s(vie);W1o=r(pat,"trajectory_transformer"),pat.forEach(t),Q1o=r(GLe," \u2014 "),vq=n(GLe,"A",{href:!0});var _at=s(vq);H1o=r(_at,"TrajectoryTransformerModel"),_at.forEach(t),U1o=r(GLe," (Trajectory Transformer model)"),GLe.forEach(t),J1o=i($),j_=n($,"LI",{});var OLe=s(j_);Fie=n(OLe,"STRONG",{});var uat=s(Fie);Y1o=r(uat,"transfo-xl"),uat.forEach(t),K1o=r(OLe," \u2014 "),Fq=n(OLe,"A",{href:!0});var bat=s(Fq);Z1o=r(bat,"TransfoXLModel"),bat.forEach(t),eTo=r(OLe," (Transformer-XL model)"),OLe.forEach(t),oTo=i($),D_=n($,"LI",{});var VLe=s(D_);Tie=n(VLe,"STRONG",{});var vat=s(Tie);rTo=r(vat,"unispeech"),vat.forEach(t),tTo=r(VLe," \u2014 "),Tq=n(VLe,"A",{href:!0});var Fat=s(Tq);aTo=r(Fat,"UniSpeechModel"),Fat.forEach(t),nTo=r(VLe," (UniSpeech model)"),VLe.forEach(t),sTo=i($),G_=n($,"LI",{});var XLe=s(G_);Mie=n(XLe,"STRONG",{});var Tat=s(Mie);lTo=r(Tat,"unispeech-sat"),Tat.forEach(t),iTo=r(XLe," \u2014 "),Mq=n(XLe,"A",{href:!0});var Mat=s(Mq);dTo=r(Mat,"UniSpeechSatModel"),Mat.forEach(t),cTo=r(XLe," (UniSpeechSat model)"),XLe.forEach(t),fTo=i($),O_=n($,"LI",{});var zLe=s(O_);Eie=n(zLe,"STRONG",{});var Eat=s(Eie);mTo=r(Eat,"van"),Eat.forEach(t),gTo=r(zLe," \u2014 "),Eq=n(zLe,"A",{href:!0});var Cat=s(Eq);hTo=r(Cat,"VanModel"),Cat.forEach(t),pTo=r(zLe," (VAN model)"),zLe.forEach(t),_To=i($),V_=n($,"LI",{});var WLe=s(V_);Cie=n(WLe,"STRONG",{});var wat=s(Cie);uTo=r(wat,"vilt"),wat.forEach(t),bTo=r(WLe," \u2014 "),Cq=n(WLe,"A",{href:!0});var Aat=s(Cq);vTo=r(Aat,"ViltModel"),Aat.forEach(t),FTo=r(WLe," (ViLT model)"),WLe.forEach(t),TTo=i($),X_=n($,"LI",{});var QLe=s(X_);wie=n(QLe,"STRONG",{});var yat=s(wie);MTo=r(yat,"vision-text-dual-encoder"),yat.forEach(t),ETo=r(QLe," \u2014 "),wq=n(QLe,"A",{href:!0});var Lat=s(wq);CTo=r(Lat,"VisionTextDualEncoderModel"),Lat.forEach(t),wTo=r(QLe," (VisionTextDualEncoder model)"),QLe.forEach(t),ATo=i($),z_=n($,"LI",{});var HLe=s(z_);Aie=n(HLe,"STRONG",{});var xat=s(Aie);yTo=r(xat,"visual_bert"),xat.forEach(t),LTo=r(HLe," \u2014 "),Aq=n(HLe,"A",{href:!0});var $at=s(Aq);xTo=r($at,"VisualBertModel"),$at.forEach(t),$To=r(HLe," (VisualBERT model)"),HLe.forEach(t),kTo=i($),W_=n($,"LI",{});var ULe=s(W_);yie=n(ULe,"STRONG",{});var kat=s(yie);STo=r(kat,"vit"),kat.forEach(t),RTo=r(ULe," \u2014 "),yq=n(ULe,"A",{href:!0});var Sat=s(yq);PTo=r(Sat,"ViTModel"),Sat.forEach(t),BTo=r(ULe," (ViT model)"),ULe.forEach(t),ITo=i($),Q_=n($,"LI",{});var JLe=s(Q_);Lie=n(JLe,"STRONG",{});var Rat=s(Lie);NTo=r(Rat,"vit_mae"),Rat.forEach(t),qTo=r(JLe," \u2014 "),Lq=n(JLe,"A",{href:!0});var Pat=s(Lq);jTo=r(Pat,"ViTMAEModel"),Pat.forEach(t),DTo=r(JLe," (ViTMAE model)"),JLe.forEach(t),GTo=i($),H_=n($,"LI",{});var YLe=s(H_);xie=n(YLe,"STRONG",{});var Bat=s(xie);OTo=r(Bat,"wav2vec2"),Bat.forEach(t),VTo=r(YLe," \u2014 "),xq=n(YLe,"A",{href:!0});var Iat=s(xq);XTo=r(Iat,"Wav2Vec2Model"),Iat.forEach(t),zTo=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),WTo=i($),U_=n($,"LI",{});var KLe=s(U_);$ie=n(KLe,"STRONG",{});var Nat=s($ie);QTo=r(Nat,"wav2vec2-conformer"),Nat.forEach(t),HTo=r(KLe," \u2014 "),$q=n(KLe,"A",{href:!0});var qat=s($q);UTo=r(qat,"Wav2Vec2ConformerModel"),qat.forEach(t),JTo=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),YTo=i($),J_=n($,"LI",{});var ZLe=s(J_);kie=n(ZLe,"STRONG",{});var jat=s(kie);KTo=r(jat,"wavlm"),jat.forEach(t),ZTo=r(ZLe," \u2014 "),kq=n(ZLe,"A",{href:!0});var Dat=s(kq);eMo=r(Dat,"WavLMModel"),Dat.forEach(t),oMo=r(ZLe," (WavLM model)"),ZLe.forEach(t),rMo=i($),Y_=n($,"LI",{});var e8e=s(Y_);Sie=n(e8e,"STRONG",{});var Gat=s(Sie);tMo=r(Gat,"xglm"),Gat.forEach(t),aMo=r(e8e," \u2014 "),Sq=n(e8e,"A",{href:!0});var Oat=s(Sq);nMo=r(Oat,"XGLMModel"),Oat.forEach(t),sMo=r(e8e," (XGLM model)"),e8e.forEach(t),lMo=i($),K_=n($,"LI",{});var o8e=s(K_);Rie=n(o8e,"STRONG",{});var Vat=s(Rie);iMo=r(Vat,"xlm"),Vat.forEach(t),dMo=r(o8e," \u2014 "),Rq=n(o8e,"A",{href:!0});var Xat=s(Rq);cMo=r(Xat,"XLMModel"),Xat.forEach(t),fMo=r(o8e," (XLM model)"),o8e.forEach(t),mMo=i($),Z_=n($,"LI",{});var r8e=s(Z_);Pie=n(r8e,"STRONG",{});var zat=s(Pie);gMo=r(zat,"xlm-prophetnet"),zat.forEach(t),hMo=r(r8e," \u2014 "),Pq=n(r8e,"A",{href:!0});var Wat=s(Pq);pMo=r(Wat,"XLMProphetNetModel"),Wat.forEach(t),_Mo=r(r8e," (XLM-ProphetNet model)"),r8e.forEach(t),uMo=i($),eu=n($,"LI",{});var t8e=s(eu);Bie=n(t8e,"STRONG",{});var Qat=s(Bie);bMo=r(Qat,"xlm-roberta"),Qat.forEach(t),vMo=r(t8e," \u2014 "),Bq=n(t8e,"A",{href:!0});var Hat=s(Bq);FMo=r(Hat,"XLMRobertaModel"),Hat.forEach(t),TMo=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),MMo=i($),ou=n($,"LI",{});var a8e=s(ou);Iie=n(a8e,"STRONG",{});var Uat=s(Iie);EMo=r(Uat,"xlm-roberta-xl"),Uat.forEach(t),CMo=r(a8e," \u2014 "),Iq=n(a8e,"A",{href:!0});var Jat=s(Iq);wMo=r(Jat,"XLMRobertaXLModel"),Jat.forEach(t),AMo=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),yMo=i($),ru=n($,"LI",{});var n8e=s(ru);Nie=n(n8e,"STRONG",{});var Yat=s(Nie);LMo=r(Yat,"xlnet"),Yat.forEach(t),xMo=r(n8e," \u2014 "),Nq=n(n8e,"A",{href:!0});var Kat=s(Nq);$Mo=r(Kat,"XLNetModel"),Kat.forEach(t),kMo=r(n8e," (XLNet model)"),n8e.forEach(t),SMo=i($),tu=n($,"LI",{});var s8e=s(tu);qie=n(s8e,"STRONG",{});var Zat=s(qie);RMo=r(Zat,"yolos"),Zat.forEach(t),PMo=r(s8e," \u2014 "),qq=n(s8e,"A",{href:!0});var ent=s(qq);BMo=r(ent,"YolosModel"),ent.forEach(t),IMo=r(s8e," (YOLOS model)"),s8e.forEach(t),NMo=i($),au=n($,"LI",{});var l8e=s(au);jie=n(l8e,"STRONG",{});var ont=s(jie);qMo=r(ont,"yoso"),ont.forEach(t),jMo=r(l8e," \u2014 "),jq=n(l8e,"A",{href:!0});var rnt=s(jq);DMo=r(rnt,"YosoModel"),rnt.forEach(t),GMo=r(l8e," (YOSO model)"),l8e.forEach(t),$.forEach(t),OMo=i(oa),nu=n(oa,"P",{});var i8e=s(nu);VMo=r(i8e,"The model is set in evaluation mode by default using "),Die=n(i8e,"CODE",{});var tnt=s(Die);XMo=r(tnt,"model.eval()"),tnt.forEach(t),zMo=r(i8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(i8e,"CODE",{});var ant=s(Gie);WMo=r(ant,"model.train()"),ant.forEach(t),i8e.forEach(t),QMo=i(oa),T(su.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Jqe=i(f),xi=n(f,"H2",{class:!0});var eGe=s(xi);lu=n(eGe,"A",{id:!0,class:!0,href:!0});var nnt=s(lu);Oie=n(nnt,"SPAN",{});var snt=s(Oie);T(gL.$$.fragment,snt),snt.forEach(t),nnt.forEach(t),HMo=i(eGe),Vie=n(eGe,"SPAN",{});var lnt=s(Vie);UMo=r(lnt,"AutoModelForPreTraining"),lnt.forEach(t),eGe.forEach(t),Yqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(hL.$$.fragment,Vs),JMo=i(Vs),$i=n(Vs,"P",{});var NZ=s($i);YMo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=n(NZ,"A",{href:!0});var int=s(Dq);KMo=r(int,"from_pretrained()"),int.forEach(t),ZMo=r(NZ," class method or the "),Gq=n(NZ,"A",{href:!0});var dnt=s(Gq);e4o=r(dnt,"from_config()"),dnt.forEach(t),o4o=r(NZ,` class
method.`),NZ.forEach(t),r4o=i(Vs),pL=n(Vs,"P",{});var oGe=s(pL);t4o=r(oGe,"This class cannot be instantiated directly using "),Xie=n(oGe,"CODE",{});var cnt=s(Xie);a4o=r(cnt,"__init__()"),cnt.forEach(t),n4o=r(oGe," (throws an error)."),oGe.forEach(t),s4o=i(Vs),at=n(Vs,"DIV",{class:!0});var Ow=s(at);T(_L.$$.fragment,Ow),l4o=i(Ow),zie=n(Ow,"P",{});var fnt=s(zie);i4o=r(fnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fnt.forEach(t),d4o=i(Ow),ki=n(Ow,"P",{});var qZ=s(ki);c4o=r(qZ,`Note:
Loading a model from its configuration file does `),Wie=n(qZ,"STRONG",{});var mnt=s(Wie);f4o=r(mnt,"not"),mnt.forEach(t),m4o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=n(qZ,"A",{href:!0});var gnt=s(Oq);g4o=r(gnt,"from_pretrained()"),gnt.forEach(t),h4o=r(qZ," to load the model weights."),qZ.forEach(t),p4o=i(Ow),T(iu.$$.fragment,Ow),Ow.forEach(t),_4o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(uL.$$.fragment,ra),u4o=i(ra),Qie=n(ra,"P",{});var hnt=s(Qie);b4o=r(hnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hnt.forEach(t),v4o=i(ra),xa=n(ra,"P",{});var Vw=s(xa);F4o=r(Vw,"The model class to instantiate is selected based on the "),Hie=n(Vw,"CODE",{});var pnt=s(Hie);T4o=r(pnt,"model_type"),pnt.forEach(t),M4o=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Uie=n(Vw,"CODE",{});var _nt=s(Uie);E4o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),C4o=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(Vw,"CODE",{});var unt=s(Jie);w4o=r(unt,"pretrained_model_name_or_path"),unt.forEach(t),A4o=r(Vw,":"),Vw.forEach(t),y4o=i(ra),G=n(ra,"UL",{});var O=s(G);du=n(O,"LI",{});var d8e=s(du);Yie=n(d8e,"STRONG",{});var bnt=s(Yie);L4o=r(bnt,"albert"),bnt.forEach(t),x4o=r(d8e," \u2014 "),Vq=n(d8e,"A",{href:!0});var vnt=s(Vq);$4o=r(vnt,"AlbertForPreTraining"),vnt.forEach(t),k4o=r(d8e," (ALBERT model)"),d8e.forEach(t),S4o=i(O),cu=n(O,"LI",{});var c8e=s(cu);Kie=n(c8e,"STRONG",{});var Fnt=s(Kie);R4o=r(Fnt,"bart"),Fnt.forEach(t),P4o=r(c8e," \u2014 "),Xq=n(c8e,"A",{href:!0});var Tnt=s(Xq);B4o=r(Tnt,"BartForConditionalGeneration"),Tnt.forEach(t),I4o=r(c8e," (BART model)"),c8e.forEach(t),N4o=i(O),fu=n(O,"LI",{});var f8e=s(fu);Zie=n(f8e,"STRONG",{});var Mnt=s(Zie);q4o=r(Mnt,"bert"),Mnt.forEach(t),j4o=r(f8e," \u2014 "),zq=n(f8e,"A",{href:!0});var Ent=s(zq);D4o=r(Ent,"BertForPreTraining"),Ent.forEach(t),G4o=r(f8e," (BERT model)"),f8e.forEach(t),O4o=i(O),mu=n(O,"LI",{});var m8e=s(mu);ede=n(m8e,"STRONG",{});var Cnt=s(ede);V4o=r(Cnt,"big_bird"),Cnt.forEach(t),X4o=r(m8e," \u2014 "),Wq=n(m8e,"A",{href:!0});var wnt=s(Wq);z4o=r(wnt,"BigBirdForPreTraining"),wnt.forEach(t),W4o=r(m8e," (BigBird model)"),m8e.forEach(t),Q4o=i(O),gu=n(O,"LI",{});var g8e=s(gu);ode=n(g8e,"STRONG",{});var Ant=s(ode);H4o=r(Ant,"camembert"),Ant.forEach(t),U4o=r(g8e," \u2014 "),Qq=n(g8e,"A",{href:!0});var ynt=s(Qq);J4o=r(ynt,"CamembertForMaskedLM"),ynt.forEach(t),Y4o=r(g8e," (CamemBERT model)"),g8e.forEach(t),K4o=i(O),hu=n(O,"LI",{});var h8e=s(hu);rde=n(h8e,"STRONG",{});var Lnt=s(rde);Z4o=r(Lnt,"ctrl"),Lnt.forEach(t),eEo=r(h8e," \u2014 "),Hq=n(h8e,"A",{href:!0});var xnt=s(Hq);oEo=r(xnt,"CTRLLMHeadModel"),xnt.forEach(t),rEo=r(h8e," (CTRL model)"),h8e.forEach(t),tEo=i(O),pu=n(O,"LI",{});var p8e=s(pu);tde=n(p8e,"STRONG",{});var $nt=s(tde);aEo=r($nt,"data2vec-text"),$nt.forEach(t),nEo=r(p8e," \u2014 "),Uq=n(p8e,"A",{href:!0});var knt=s(Uq);sEo=r(knt,"Data2VecTextForMaskedLM"),knt.forEach(t),lEo=r(p8e," (Data2VecText model)"),p8e.forEach(t),iEo=i(O),_u=n(O,"LI",{});var _8e=s(_u);ade=n(_8e,"STRONG",{});var Snt=s(ade);dEo=r(Snt,"deberta"),Snt.forEach(t),cEo=r(_8e," \u2014 "),Jq=n(_8e,"A",{href:!0});var Rnt=s(Jq);fEo=r(Rnt,"DebertaForMaskedLM"),Rnt.forEach(t),mEo=r(_8e," (DeBERTa model)"),_8e.forEach(t),gEo=i(O),uu=n(O,"LI",{});var u8e=s(uu);nde=n(u8e,"STRONG",{});var Pnt=s(nde);hEo=r(Pnt,"deberta-v2"),Pnt.forEach(t),pEo=r(u8e," \u2014 "),Yq=n(u8e,"A",{href:!0});var Bnt=s(Yq);_Eo=r(Bnt,"DebertaV2ForMaskedLM"),Bnt.forEach(t),uEo=r(u8e," (DeBERTa-v2 model)"),u8e.forEach(t),bEo=i(O),bu=n(O,"LI",{});var b8e=s(bu);sde=n(b8e,"STRONG",{});var Int=s(sde);vEo=r(Int,"distilbert"),Int.forEach(t),FEo=r(b8e," \u2014 "),Kq=n(b8e,"A",{href:!0});var Nnt=s(Kq);TEo=r(Nnt,"DistilBertForMaskedLM"),Nnt.forEach(t),MEo=r(b8e," (DistilBERT model)"),b8e.forEach(t),EEo=i(O),vu=n(O,"LI",{});var v8e=s(vu);lde=n(v8e,"STRONG",{});var qnt=s(lde);CEo=r(qnt,"electra"),qnt.forEach(t),wEo=r(v8e," \u2014 "),Zq=n(v8e,"A",{href:!0});var jnt=s(Zq);AEo=r(jnt,"ElectraForPreTraining"),jnt.forEach(t),yEo=r(v8e," (ELECTRA model)"),v8e.forEach(t),LEo=i(O),Fu=n(O,"LI",{});var F8e=s(Fu);ide=n(F8e,"STRONG",{});var Dnt=s(ide);xEo=r(Dnt,"flaubert"),Dnt.forEach(t),$Eo=r(F8e," \u2014 "),ej=n(F8e,"A",{href:!0});var Gnt=s(ej);kEo=r(Gnt,"FlaubertWithLMHeadModel"),Gnt.forEach(t),SEo=r(F8e," (FlauBERT model)"),F8e.forEach(t),REo=i(O),Tu=n(O,"LI",{});var T8e=s(Tu);dde=n(T8e,"STRONG",{});var Ont=s(dde);PEo=r(Ont,"flava"),Ont.forEach(t),BEo=r(T8e," \u2014 "),oj=n(T8e,"A",{href:!0});var Vnt=s(oj);IEo=r(Vnt,"FlavaForPreTraining"),Vnt.forEach(t),NEo=r(T8e," (FLAVA model)"),T8e.forEach(t),qEo=i(O),Mu=n(O,"LI",{});var M8e=s(Mu);cde=n(M8e,"STRONG",{});var Xnt=s(cde);jEo=r(Xnt,"fnet"),Xnt.forEach(t),DEo=r(M8e," \u2014 "),rj=n(M8e,"A",{href:!0});var znt=s(rj);GEo=r(znt,"FNetForPreTraining"),znt.forEach(t),OEo=r(M8e," (FNet model)"),M8e.forEach(t),VEo=i(O),Eu=n(O,"LI",{});var E8e=s(Eu);fde=n(E8e,"STRONG",{});var Wnt=s(fde);XEo=r(Wnt,"fsmt"),Wnt.forEach(t),zEo=r(E8e," \u2014 "),tj=n(E8e,"A",{href:!0});var Qnt=s(tj);WEo=r(Qnt,"FSMTForConditionalGeneration"),Qnt.forEach(t),QEo=r(E8e," (FairSeq Machine-Translation model)"),E8e.forEach(t),HEo=i(O),Cu=n(O,"LI",{});var C8e=s(Cu);mde=n(C8e,"STRONG",{});var Hnt=s(mde);UEo=r(Hnt,"funnel"),Hnt.forEach(t),JEo=r(C8e," \u2014 "),aj=n(C8e,"A",{href:!0});var Unt=s(aj);YEo=r(Unt,"FunnelForPreTraining"),Unt.forEach(t),KEo=r(C8e," (Funnel Transformer model)"),C8e.forEach(t),ZEo=i(O),wu=n(O,"LI",{});var w8e=s(wu);gde=n(w8e,"STRONG",{});var Jnt=s(gde);eCo=r(Jnt,"gpt2"),Jnt.forEach(t),oCo=r(w8e," \u2014 "),nj=n(w8e,"A",{href:!0});var Ynt=s(nj);rCo=r(Ynt,"GPT2LMHeadModel"),Ynt.forEach(t),tCo=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),aCo=i(O),Au=n(O,"LI",{});var A8e=s(Au);hde=n(A8e,"STRONG",{});var Knt=s(hde);nCo=r(Knt,"ibert"),Knt.forEach(t),sCo=r(A8e," \u2014 "),sj=n(A8e,"A",{href:!0});var Znt=s(sj);lCo=r(Znt,"IBertForMaskedLM"),Znt.forEach(t),iCo=r(A8e," (I-BERT model)"),A8e.forEach(t),dCo=i(O),yu=n(O,"LI",{});var y8e=s(yu);pde=n(y8e,"STRONG",{});var est=s(pde);cCo=r(est,"layoutlm"),est.forEach(t),fCo=r(y8e," \u2014 "),lj=n(y8e,"A",{href:!0});var ost=s(lj);mCo=r(ost,"LayoutLMForMaskedLM"),ost.forEach(t),gCo=r(y8e," (LayoutLM model)"),y8e.forEach(t),hCo=i(O),Lu=n(O,"LI",{});var L8e=s(Lu);_de=n(L8e,"STRONG",{});var rst=s(_de);pCo=r(rst,"longformer"),rst.forEach(t),_Co=r(L8e," \u2014 "),ij=n(L8e,"A",{href:!0});var tst=s(ij);uCo=r(tst,"LongformerForMaskedLM"),tst.forEach(t),bCo=r(L8e," (Longformer model)"),L8e.forEach(t),vCo=i(O),xu=n(O,"LI",{});var x8e=s(xu);ude=n(x8e,"STRONG",{});var ast=s(ude);FCo=r(ast,"lxmert"),ast.forEach(t),TCo=r(x8e," \u2014 "),dj=n(x8e,"A",{href:!0});var nst=s(dj);MCo=r(nst,"LxmertForPreTraining"),nst.forEach(t),ECo=r(x8e," (LXMERT model)"),x8e.forEach(t),CCo=i(O),$u=n(O,"LI",{});var $8e=s($u);bde=n($8e,"STRONG",{});var sst=s(bde);wCo=r(sst,"megatron-bert"),sst.forEach(t),ACo=r($8e," \u2014 "),cj=n($8e,"A",{href:!0});var lst=s(cj);yCo=r(lst,"MegatronBertForPreTraining"),lst.forEach(t),LCo=r($8e," (Megatron-BERT model)"),$8e.forEach(t),xCo=i(O),ku=n(O,"LI",{});var k8e=s(ku);vde=n(k8e,"STRONG",{});var ist=s(vde);$Co=r(ist,"mobilebert"),ist.forEach(t),kCo=r(k8e," \u2014 "),fj=n(k8e,"A",{href:!0});var dst=s(fj);SCo=r(dst,"MobileBertForPreTraining"),dst.forEach(t),RCo=r(k8e," (MobileBERT model)"),k8e.forEach(t),PCo=i(O),Su=n(O,"LI",{});var S8e=s(Su);Fde=n(S8e,"STRONG",{});var cst=s(Fde);BCo=r(cst,"mpnet"),cst.forEach(t),ICo=r(S8e," \u2014 "),mj=n(S8e,"A",{href:!0});var fst=s(mj);NCo=r(fst,"MPNetForMaskedLM"),fst.forEach(t),qCo=r(S8e," (MPNet model)"),S8e.forEach(t),jCo=i(O),Ru=n(O,"LI",{});var R8e=s(Ru);Tde=n(R8e,"STRONG",{});var mst=s(Tde);DCo=r(mst,"openai-gpt"),mst.forEach(t),GCo=r(R8e," \u2014 "),gj=n(R8e,"A",{href:!0});var gst=s(gj);OCo=r(gst,"OpenAIGPTLMHeadModel"),gst.forEach(t),VCo=r(R8e," (OpenAI GPT model)"),R8e.forEach(t),XCo=i(O),Pu=n(O,"LI",{});var P8e=s(Pu);Mde=n(P8e,"STRONG",{});var hst=s(Mde);zCo=r(hst,"retribert"),hst.forEach(t),WCo=r(P8e," \u2014 "),hj=n(P8e,"A",{href:!0});var pst=s(hj);QCo=r(pst,"RetriBertModel"),pst.forEach(t),HCo=r(P8e," (RetriBERT model)"),P8e.forEach(t),UCo=i(O),Bu=n(O,"LI",{});var B8e=s(Bu);Ede=n(B8e,"STRONG",{});var _st=s(Ede);JCo=r(_st,"roberta"),_st.forEach(t),YCo=r(B8e," \u2014 "),pj=n(B8e,"A",{href:!0});var ust=s(pj);KCo=r(ust,"RobertaForMaskedLM"),ust.forEach(t),ZCo=r(B8e," (RoBERTa model)"),B8e.forEach(t),e5o=i(O),Iu=n(O,"LI",{});var I8e=s(Iu);Cde=n(I8e,"STRONG",{});var bst=s(Cde);o5o=r(bst,"splinter"),bst.forEach(t),r5o=r(I8e," \u2014 "),_j=n(I8e,"A",{href:!0});var vst=s(_j);t5o=r(vst,"SplinterForPreTraining"),vst.forEach(t),a5o=r(I8e," (Splinter model)"),I8e.forEach(t),n5o=i(O),Nu=n(O,"LI",{});var N8e=s(Nu);wde=n(N8e,"STRONG",{});var Fst=s(wde);s5o=r(Fst,"squeezebert"),Fst.forEach(t),l5o=r(N8e," \u2014 "),uj=n(N8e,"A",{href:!0});var Tst=s(uj);i5o=r(Tst,"SqueezeBertForMaskedLM"),Tst.forEach(t),d5o=r(N8e," (SqueezeBERT model)"),N8e.forEach(t),c5o=i(O),qu=n(O,"LI",{});var q8e=s(qu);Ade=n(q8e,"STRONG",{});var Mst=s(Ade);f5o=r(Mst,"t5"),Mst.forEach(t),m5o=r(q8e," \u2014 "),bj=n(q8e,"A",{href:!0});var Est=s(bj);g5o=r(Est,"T5ForConditionalGeneration"),Est.forEach(t),h5o=r(q8e," (T5 model)"),q8e.forEach(t),p5o=i(O),ju=n(O,"LI",{});var j8e=s(ju);yde=n(j8e,"STRONG",{});var Cst=s(yde);_5o=r(Cst,"tapas"),Cst.forEach(t),u5o=r(j8e," \u2014 "),vj=n(j8e,"A",{href:!0});var wst=s(vj);b5o=r(wst,"TapasForMaskedLM"),wst.forEach(t),v5o=r(j8e," (TAPAS model)"),j8e.forEach(t),F5o=i(O),Du=n(O,"LI",{});var D8e=s(Du);Lde=n(D8e,"STRONG",{});var Ast=s(Lde);T5o=r(Ast,"transfo-xl"),Ast.forEach(t),M5o=r(D8e," \u2014 "),Fj=n(D8e,"A",{href:!0});var yst=s(Fj);E5o=r(yst,"TransfoXLLMHeadModel"),yst.forEach(t),C5o=r(D8e," (Transformer-XL model)"),D8e.forEach(t),w5o=i(O),Gu=n(O,"LI",{});var G8e=s(Gu);xde=n(G8e,"STRONG",{});var Lst=s(xde);A5o=r(Lst,"unispeech"),Lst.forEach(t),y5o=r(G8e," \u2014 "),Tj=n(G8e,"A",{href:!0});var xst=s(Tj);L5o=r(xst,"UniSpeechForPreTraining"),xst.forEach(t),x5o=r(G8e," (UniSpeech model)"),G8e.forEach(t),$5o=i(O),Ou=n(O,"LI",{});var O8e=s(Ou);$de=n(O8e,"STRONG",{});var $st=s($de);k5o=r($st,"unispeech-sat"),$st.forEach(t),S5o=r(O8e," \u2014 "),Mj=n(O8e,"A",{href:!0});var kst=s(Mj);R5o=r(kst,"UniSpeechSatForPreTraining"),kst.forEach(t),P5o=r(O8e," (UniSpeechSat model)"),O8e.forEach(t),B5o=i(O),Vu=n(O,"LI",{});var V8e=s(Vu);kde=n(V8e,"STRONG",{});var Sst=s(kde);I5o=r(Sst,"visual_bert"),Sst.forEach(t),N5o=r(V8e," \u2014 "),Ej=n(V8e,"A",{href:!0});var Rst=s(Ej);q5o=r(Rst,"VisualBertForPreTraining"),Rst.forEach(t),j5o=r(V8e," (VisualBERT model)"),V8e.forEach(t),D5o=i(O),Xu=n(O,"LI",{});var X8e=s(Xu);Sde=n(X8e,"STRONG",{});var Pst=s(Sde);G5o=r(Pst,"vit_mae"),Pst.forEach(t),O5o=r(X8e," \u2014 "),Cj=n(X8e,"A",{href:!0});var Bst=s(Cj);V5o=r(Bst,"ViTMAEForPreTraining"),Bst.forEach(t),X5o=r(X8e," (ViTMAE model)"),X8e.forEach(t),z5o=i(O),zu=n(O,"LI",{});var z8e=s(zu);Rde=n(z8e,"STRONG",{});var Ist=s(Rde);W5o=r(Ist,"wav2vec2"),Ist.forEach(t),Q5o=r(z8e," \u2014 "),wj=n(z8e,"A",{href:!0});var Nst=s(wj);H5o=r(Nst,"Wav2Vec2ForPreTraining"),Nst.forEach(t),U5o=r(z8e," (Wav2Vec2 model)"),z8e.forEach(t),J5o=i(O),Wu=n(O,"LI",{});var W8e=s(Wu);Pde=n(W8e,"STRONG",{});var qst=s(Pde);Y5o=r(qst,"wav2vec2-conformer"),qst.forEach(t),K5o=r(W8e," \u2014 "),Aj=n(W8e,"A",{href:!0});var jst=s(Aj);Z5o=r(jst,"Wav2Vec2ConformerForPreTraining"),jst.forEach(t),e3o=r(W8e," (Wav2Vec2-Conformer model)"),W8e.forEach(t),o3o=i(O),Qu=n(O,"LI",{});var Q8e=s(Qu);Bde=n(Q8e,"STRONG",{});var Dst=s(Bde);r3o=r(Dst,"xlm"),Dst.forEach(t),t3o=r(Q8e," \u2014 "),yj=n(Q8e,"A",{href:!0});var Gst=s(yj);a3o=r(Gst,"XLMWithLMHeadModel"),Gst.forEach(t),n3o=r(Q8e," (XLM model)"),Q8e.forEach(t),s3o=i(O),Hu=n(O,"LI",{});var H8e=s(Hu);Ide=n(H8e,"STRONG",{});var Ost=s(Ide);l3o=r(Ost,"xlm-roberta"),Ost.forEach(t),i3o=r(H8e," \u2014 "),Lj=n(H8e,"A",{href:!0});var Vst=s(Lj);d3o=r(Vst,"XLMRobertaForMaskedLM"),Vst.forEach(t),c3o=r(H8e," (XLM-RoBERTa model)"),H8e.forEach(t),f3o=i(O),Uu=n(O,"LI",{});var U8e=s(Uu);Nde=n(U8e,"STRONG",{});var Xst=s(Nde);m3o=r(Xst,"xlm-roberta-xl"),Xst.forEach(t),g3o=r(U8e," \u2014 "),xj=n(U8e,"A",{href:!0});var zst=s(xj);h3o=r(zst,"XLMRobertaXLForMaskedLM"),zst.forEach(t),p3o=r(U8e," (XLM-RoBERTa-XL model)"),U8e.forEach(t),_3o=i(O),Ju=n(O,"LI",{});var J8e=s(Ju);qde=n(J8e,"STRONG",{});var Wst=s(qde);u3o=r(Wst,"xlnet"),Wst.forEach(t),b3o=r(J8e," \u2014 "),$j=n(J8e,"A",{href:!0});var Qst=s($j);v3o=r(Qst,"XLNetLMHeadModel"),Qst.forEach(t),F3o=r(J8e," (XLNet model)"),J8e.forEach(t),O.forEach(t),T3o=i(ra),Yu=n(ra,"P",{});var Y8e=s(Yu);M3o=r(Y8e,"The model is set in evaluation mode by default using "),jde=n(Y8e,"CODE",{});var Hst=s(jde);E3o=r(Hst,"model.eval()"),Hst.forEach(t),C3o=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(Y8e,"CODE",{});var Ust=s(Dde);w3o=r(Ust,"model.train()"),Ust.forEach(t),Y8e.forEach(t),A3o=i(ra),T(Ku.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Kqe=i(f),Si=n(f,"H2",{class:!0});var rGe=s(Si);Zu=n(rGe,"A",{id:!0,class:!0,href:!0});var Jst=s(Zu);Gde=n(Jst,"SPAN",{});var Yst=s(Gde);T(bL.$$.fragment,Yst),Yst.forEach(t),Jst.forEach(t),y3o=i(rGe),Ode=n(rGe,"SPAN",{});var Kst=s(Ode);L3o=r(Kst,"AutoModelForCausalLM"),Kst.forEach(t),rGe.forEach(t),Zqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(vL.$$.fragment,Xs),x3o=i(Xs),Ri=n(Xs,"P",{});var jZ=s(Ri);$3o=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=n(jZ,"A",{href:!0});var Zst=s(kj);k3o=r(Zst,"from_pretrained()"),Zst.forEach(t),S3o=r(jZ," class method or the "),Sj=n(jZ,"A",{href:!0});var elt=s(Sj);R3o=r(elt,"from_config()"),elt.forEach(t),P3o=r(jZ,` class
method.`),jZ.forEach(t),B3o=i(Xs),FL=n(Xs,"P",{});var tGe=s(FL);I3o=r(tGe,"This class cannot be instantiated directly using "),Vde=n(tGe,"CODE",{});var olt=s(Vde);N3o=r(olt,"__init__()"),olt.forEach(t),q3o=r(tGe," (throws an error)."),tGe.forEach(t),j3o=i(Xs),nt=n(Xs,"DIV",{class:!0});var Xw=s(nt);T(TL.$$.fragment,Xw),D3o=i(Xw),Xde=n(Xw,"P",{});var rlt=s(Xde);G3o=r(rlt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rlt.forEach(t),O3o=i(Xw),Pi=n(Xw,"P",{});var DZ=s(Pi);V3o=r(DZ,`Note:
Loading a model from its configuration file does `),zde=n(DZ,"STRONG",{});var tlt=s(zde);X3o=r(tlt,"not"),tlt.forEach(t),z3o=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(DZ,"A",{href:!0});var alt=s(Rj);W3o=r(alt,"from_pretrained()"),alt.forEach(t),Q3o=r(DZ," to load the model weights."),DZ.forEach(t),H3o=i(Xw),T(eb.$$.fragment,Xw),Xw.forEach(t),U3o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(ML.$$.fragment,ta),J3o=i(ta),Wde=n(ta,"P",{});var nlt=s(Wde);Y3o=r(nlt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nlt.forEach(t),K3o=i(ta),$a=n(ta,"P",{});var zw=s($a);Z3o=r(zw,"The model class to instantiate is selected based on the "),Qde=n(zw,"CODE",{});var slt=s(Qde);e0o=r(slt,"model_type"),slt.forEach(t),o0o=r(zw,` property of the config object (either
passed as an argument or loaded from `),Hde=n(zw,"CODE",{});var llt=s(Hde);r0o=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),t0o=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(zw,"CODE",{});var ilt=s(Ude);a0o=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),n0o=r(zw,":"),zw.forEach(t),s0o=i(ta),z=n(ta,"UL",{});var Q=s(z);ob=n(Q,"LI",{});var K8e=s(ob);Jde=n(K8e,"STRONG",{});var dlt=s(Jde);l0o=r(dlt,"bart"),dlt.forEach(t),i0o=r(K8e," \u2014 "),Pj=n(K8e,"A",{href:!0});var clt=s(Pj);d0o=r(clt,"BartForCausalLM"),clt.forEach(t),c0o=r(K8e," (BART model)"),K8e.forEach(t),f0o=i(Q),rb=n(Q,"LI",{});var Z8e=s(rb);Yde=n(Z8e,"STRONG",{});var flt=s(Yde);m0o=r(flt,"bert"),flt.forEach(t),g0o=r(Z8e," \u2014 "),Bj=n(Z8e,"A",{href:!0});var mlt=s(Bj);h0o=r(mlt,"BertLMHeadModel"),mlt.forEach(t),p0o=r(Z8e," (BERT model)"),Z8e.forEach(t),_0o=i(Q),tb=n(Q,"LI",{});var e7e=s(tb);Kde=n(e7e,"STRONG",{});var glt=s(Kde);u0o=r(glt,"bert-generation"),glt.forEach(t),b0o=r(e7e," \u2014 "),Ij=n(e7e,"A",{href:!0});var hlt=s(Ij);v0o=r(hlt,"BertGenerationDecoder"),hlt.forEach(t),F0o=r(e7e," (Bert Generation model)"),e7e.forEach(t),T0o=i(Q),ab=n(Q,"LI",{});var o7e=s(ab);Zde=n(o7e,"STRONG",{});var plt=s(Zde);M0o=r(plt,"big_bird"),plt.forEach(t),E0o=r(o7e," \u2014 "),Nj=n(o7e,"A",{href:!0});var _lt=s(Nj);C0o=r(_lt,"BigBirdForCausalLM"),_lt.forEach(t),w0o=r(o7e," (BigBird model)"),o7e.forEach(t),A0o=i(Q),nb=n(Q,"LI",{});var r7e=s(nb);ece=n(r7e,"STRONG",{});var ult=s(ece);y0o=r(ult,"bigbird_pegasus"),ult.forEach(t),L0o=r(r7e," \u2014 "),qj=n(r7e,"A",{href:!0});var blt=s(qj);x0o=r(blt,"BigBirdPegasusForCausalLM"),blt.forEach(t),$0o=r(r7e," (BigBird-Pegasus model)"),r7e.forEach(t),k0o=i(Q),sb=n(Q,"LI",{});var t7e=s(sb);oce=n(t7e,"STRONG",{});var vlt=s(oce);S0o=r(vlt,"blenderbot"),vlt.forEach(t),R0o=r(t7e," \u2014 "),jj=n(t7e,"A",{href:!0});var Flt=s(jj);P0o=r(Flt,"BlenderbotForCausalLM"),Flt.forEach(t),B0o=r(t7e," (Blenderbot model)"),t7e.forEach(t),I0o=i(Q),lb=n(Q,"LI",{});var a7e=s(lb);rce=n(a7e,"STRONG",{});var Tlt=s(rce);N0o=r(Tlt,"blenderbot-small"),Tlt.forEach(t),q0o=r(a7e," \u2014 "),Dj=n(a7e,"A",{href:!0});var Mlt=s(Dj);j0o=r(Mlt,"BlenderbotSmallForCausalLM"),Mlt.forEach(t),D0o=r(a7e," (BlenderbotSmall model)"),a7e.forEach(t),G0o=i(Q),ib=n(Q,"LI",{});var n7e=s(ib);tce=n(n7e,"STRONG",{});var Elt=s(tce);O0o=r(Elt,"camembert"),Elt.forEach(t),V0o=r(n7e," \u2014 "),Gj=n(n7e,"A",{href:!0});var Clt=s(Gj);X0o=r(Clt,"CamembertForCausalLM"),Clt.forEach(t),z0o=r(n7e," (CamemBERT model)"),n7e.forEach(t),W0o=i(Q),db=n(Q,"LI",{});var s7e=s(db);ace=n(s7e,"STRONG",{});var wlt=s(ace);Q0o=r(wlt,"ctrl"),wlt.forEach(t),H0o=r(s7e," \u2014 "),Oj=n(s7e,"A",{href:!0});var Alt=s(Oj);U0o=r(Alt,"CTRLLMHeadModel"),Alt.forEach(t),J0o=r(s7e," (CTRL model)"),s7e.forEach(t),Y0o=i(Q),cb=n(Q,"LI",{});var l7e=s(cb);nce=n(l7e,"STRONG",{});var ylt=s(nce);K0o=r(ylt,"data2vec-text"),ylt.forEach(t),Z0o=r(l7e," \u2014 "),Vj=n(l7e,"A",{href:!0});var Llt=s(Vj);ewo=r(Llt,"Data2VecTextForCausalLM"),Llt.forEach(t),owo=r(l7e," (Data2VecText model)"),l7e.forEach(t),rwo=i(Q),fb=n(Q,"LI",{});var i7e=s(fb);sce=n(i7e,"STRONG",{});var xlt=s(sce);two=r(xlt,"electra"),xlt.forEach(t),awo=r(i7e," \u2014 "),Xj=n(i7e,"A",{href:!0});var $lt=s(Xj);nwo=r($lt,"ElectraForCausalLM"),$lt.forEach(t),swo=r(i7e," (ELECTRA model)"),i7e.forEach(t),lwo=i(Q),mb=n(Q,"LI",{});var d7e=s(mb);lce=n(d7e,"STRONG",{});var klt=s(lce);iwo=r(klt,"gpt2"),klt.forEach(t),dwo=r(d7e," \u2014 "),zj=n(d7e,"A",{href:!0});var Slt=s(zj);cwo=r(Slt,"GPT2LMHeadModel"),Slt.forEach(t),fwo=r(d7e," (OpenAI GPT-2 model)"),d7e.forEach(t),mwo=i(Q),gb=n(Q,"LI",{});var c7e=s(gb);ice=n(c7e,"STRONG",{});var Rlt=s(ice);gwo=r(Rlt,"gpt_neo"),Rlt.forEach(t),hwo=r(c7e," \u2014 "),Wj=n(c7e,"A",{href:!0});var Plt=s(Wj);pwo=r(Plt,"GPTNeoForCausalLM"),Plt.forEach(t),_wo=r(c7e," (GPT Neo model)"),c7e.forEach(t),uwo=i(Q),hb=n(Q,"LI",{});var f7e=s(hb);dce=n(f7e,"STRONG",{});var Blt=s(dce);bwo=r(Blt,"gpt_neox"),Blt.forEach(t),vwo=r(f7e," \u2014 "),Qj=n(f7e,"A",{href:!0});var Ilt=s(Qj);Fwo=r(Ilt,"GPTNeoXForCausalLM"),Ilt.forEach(t),Two=r(f7e," (GPT NeoX model)"),f7e.forEach(t),Mwo=i(Q),pb=n(Q,"LI",{});var m7e=s(pb);cce=n(m7e,"STRONG",{});var Nlt=s(cce);Ewo=r(Nlt,"gptj"),Nlt.forEach(t),Cwo=r(m7e," \u2014 "),Hj=n(m7e,"A",{href:!0});var qlt=s(Hj);wwo=r(qlt,"GPTJForCausalLM"),qlt.forEach(t),Awo=r(m7e," (GPT-J model)"),m7e.forEach(t),ywo=i(Q),_b=n(Q,"LI",{});var g7e=s(_b);fce=n(g7e,"STRONG",{});var jlt=s(fce);Lwo=r(jlt,"marian"),jlt.forEach(t),xwo=r(g7e," \u2014 "),Uj=n(g7e,"A",{href:!0});var Dlt=s(Uj);$wo=r(Dlt,"MarianForCausalLM"),Dlt.forEach(t),kwo=r(g7e," (Marian model)"),g7e.forEach(t),Swo=i(Q),ub=n(Q,"LI",{});var h7e=s(ub);mce=n(h7e,"STRONG",{});var Glt=s(mce);Rwo=r(Glt,"mbart"),Glt.forEach(t),Pwo=r(h7e," \u2014 "),Jj=n(h7e,"A",{href:!0});var Olt=s(Jj);Bwo=r(Olt,"MBartForCausalLM"),Olt.forEach(t),Iwo=r(h7e," (mBART model)"),h7e.forEach(t),Nwo=i(Q),bb=n(Q,"LI",{});var p7e=s(bb);gce=n(p7e,"STRONG",{});var Vlt=s(gce);qwo=r(Vlt,"megatron-bert"),Vlt.forEach(t),jwo=r(p7e," \u2014 "),Yj=n(p7e,"A",{href:!0});var Xlt=s(Yj);Dwo=r(Xlt,"MegatronBertForCausalLM"),Xlt.forEach(t),Gwo=r(p7e," (Megatron-BERT model)"),p7e.forEach(t),Owo=i(Q),vb=n(Q,"LI",{});var _7e=s(vb);hce=n(_7e,"STRONG",{});var zlt=s(hce);Vwo=r(zlt,"openai-gpt"),zlt.forEach(t),Xwo=r(_7e," \u2014 "),Kj=n(_7e,"A",{href:!0});var Wlt=s(Kj);zwo=r(Wlt,"OpenAIGPTLMHeadModel"),Wlt.forEach(t),Wwo=r(_7e," (OpenAI GPT model)"),_7e.forEach(t),Qwo=i(Q),Fb=n(Q,"LI",{});var u7e=s(Fb);pce=n(u7e,"STRONG",{});var Qlt=s(pce);Hwo=r(Qlt,"opt"),Qlt.forEach(t),Uwo=r(u7e," \u2014 "),Zj=n(u7e,"A",{href:!0});var Hlt=s(Zj);Jwo=r(Hlt,"OPTForCausalLM"),Hlt.forEach(t),Ywo=r(u7e," (OPT model)"),u7e.forEach(t),Kwo=i(Q),Tb=n(Q,"LI",{});var b7e=s(Tb);_ce=n(b7e,"STRONG",{});var Ult=s(_ce);Zwo=r(Ult,"pegasus"),Ult.forEach(t),eAo=r(b7e," \u2014 "),eD=n(b7e,"A",{href:!0});var Jlt=s(eD);oAo=r(Jlt,"PegasusForCausalLM"),Jlt.forEach(t),rAo=r(b7e," (Pegasus model)"),b7e.forEach(t),tAo=i(Q),Mb=n(Q,"LI",{});var v7e=s(Mb);uce=n(v7e,"STRONG",{});var Ylt=s(uce);aAo=r(Ylt,"plbart"),Ylt.forEach(t),nAo=r(v7e," \u2014 "),oD=n(v7e,"A",{href:!0});var Klt=s(oD);sAo=r(Klt,"PLBartForCausalLM"),Klt.forEach(t),lAo=r(v7e," (PLBart model)"),v7e.forEach(t),iAo=i(Q),Eb=n(Q,"LI",{});var F7e=s(Eb);bce=n(F7e,"STRONG",{});var Zlt=s(bce);dAo=r(Zlt,"prophetnet"),Zlt.forEach(t),cAo=r(F7e," \u2014 "),rD=n(F7e,"A",{href:!0});var eit=s(rD);fAo=r(eit,"ProphetNetForCausalLM"),eit.forEach(t),mAo=r(F7e," (ProphetNet model)"),F7e.forEach(t),gAo=i(Q),Cb=n(Q,"LI",{});var T7e=s(Cb);vce=n(T7e,"STRONG",{});var oit=s(vce);hAo=r(oit,"qdqbert"),oit.forEach(t),pAo=r(T7e," \u2014 "),tD=n(T7e,"A",{href:!0});var rit=s(tD);_Ao=r(rit,"QDQBertLMHeadModel"),rit.forEach(t),uAo=r(T7e," (QDQBert model)"),T7e.forEach(t),bAo=i(Q),wb=n(Q,"LI",{});var M7e=s(wb);Fce=n(M7e,"STRONG",{});var tit=s(Fce);vAo=r(tit,"reformer"),tit.forEach(t),FAo=r(M7e," \u2014 "),aD=n(M7e,"A",{href:!0});var ait=s(aD);TAo=r(ait,"ReformerModelWithLMHead"),ait.forEach(t),MAo=r(M7e," (Reformer model)"),M7e.forEach(t),EAo=i(Q),Ab=n(Q,"LI",{});var E7e=s(Ab);Tce=n(E7e,"STRONG",{});var nit=s(Tce);CAo=r(nit,"rembert"),nit.forEach(t),wAo=r(E7e," \u2014 "),nD=n(E7e,"A",{href:!0});var sit=s(nD);AAo=r(sit,"RemBertForCausalLM"),sit.forEach(t),yAo=r(E7e," (RemBERT model)"),E7e.forEach(t),LAo=i(Q),yb=n(Q,"LI",{});var C7e=s(yb);Mce=n(C7e,"STRONG",{});var lit=s(Mce);xAo=r(lit,"roberta"),lit.forEach(t),$Ao=r(C7e," \u2014 "),sD=n(C7e,"A",{href:!0});var iit=s(sD);kAo=r(iit,"RobertaForCausalLM"),iit.forEach(t),SAo=r(C7e," (RoBERTa model)"),C7e.forEach(t),RAo=i(Q),Lb=n(Q,"LI",{});var w7e=s(Lb);Ece=n(w7e,"STRONG",{});var dit=s(Ece);PAo=r(dit,"roformer"),dit.forEach(t),BAo=r(w7e," \u2014 "),lD=n(w7e,"A",{href:!0});var cit=s(lD);IAo=r(cit,"RoFormerForCausalLM"),cit.forEach(t),NAo=r(w7e," (RoFormer model)"),w7e.forEach(t),qAo=i(Q),xb=n(Q,"LI",{});var A7e=s(xb);Cce=n(A7e,"STRONG",{});var fit=s(Cce);jAo=r(fit,"speech_to_text_2"),fit.forEach(t),DAo=r(A7e," \u2014 "),iD=n(A7e,"A",{href:!0});var mit=s(iD);GAo=r(mit,"Speech2Text2ForCausalLM"),mit.forEach(t),OAo=r(A7e," (Speech2Text2 model)"),A7e.forEach(t),VAo=i(Q),$b=n(Q,"LI",{});var y7e=s($b);wce=n(y7e,"STRONG",{});var git=s(wce);XAo=r(git,"transfo-xl"),git.forEach(t),zAo=r(y7e," \u2014 "),dD=n(y7e,"A",{href:!0});var hit=s(dD);WAo=r(hit,"TransfoXLLMHeadModel"),hit.forEach(t),QAo=r(y7e," (Transformer-XL model)"),y7e.forEach(t),HAo=i(Q),kb=n(Q,"LI",{});var L7e=s(kb);Ace=n(L7e,"STRONG",{});var pit=s(Ace);UAo=r(pit,"trocr"),pit.forEach(t),JAo=r(L7e," \u2014 "),cD=n(L7e,"A",{href:!0});var _it=s(cD);YAo=r(_it,"TrOCRForCausalLM"),_it.forEach(t),KAo=r(L7e," (TrOCR model)"),L7e.forEach(t),ZAo=i(Q),Sb=n(Q,"LI",{});var x7e=s(Sb);yce=n(x7e,"STRONG",{});var uit=s(yce);eyo=r(uit,"xglm"),uit.forEach(t),oyo=r(x7e," \u2014 "),fD=n(x7e,"A",{href:!0});var bit=s(fD);ryo=r(bit,"XGLMForCausalLM"),bit.forEach(t),tyo=r(x7e," (XGLM model)"),x7e.forEach(t),ayo=i(Q),Rb=n(Q,"LI",{});var $7e=s(Rb);Lce=n($7e,"STRONG",{});var vit=s(Lce);nyo=r(vit,"xlm"),vit.forEach(t),syo=r($7e," \u2014 "),mD=n($7e,"A",{href:!0});var Fit=s(mD);lyo=r(Fit,"XLMWithLMHeadModel"),Fit.forEach(t),iyo=r($7e," (XLM model)"),$7e.forEach(t),dyo=i(Q),Pb=n(Q,"LI",{});var k7e=s(Pb);xce=n(k7e,"STRONG",{});var Tit=s(xce);cyo=r(Tit,"xlm-prophetnet"),Tit.forEach(t),fyo=r(k7e," \u2014 "),gD=n(k7e,"A",{href:!0});var Mit=s(gD);myo=r(Mit,"XLMProphetNetForCausalLM"),Mit.forEach(t),gyo=r(k7e," (XLM-ProphetNet model)"),k7e.forEach(t),hyo=i(Q),Bb=n(Q,"LI",{});var S7e=s(Bb);$ce=n(S7e,"STRONG",{});var Eit=s($ce);pyo=r(Eit,"xlm-roberta"),Eit.forEach(t),_yo=r(S7e," \u2014 "),hD=n(S7e,"A",{href:!0});var Cit=s(hD);uyo=r(Cit,"XLMRobertaForCausalLM"),Cit.forEach(t),byo=r(S7e," (XLM-RoBERTa model)"),S7e.forEach(t),vyo=i(Q),Ib=n(Q,"LI",{});var R7e=s(Ib);kce=n(R7e,"STRONG",{});var wit=s(kce);Fyo=r(wit,"xlm-roberta-xl"),wit.forEach(t),Tyo=r(R7e," \u2014 "),pD=n(R7e,"A",{href:!0});var Ait=s(pD);Myo=r(Ait,"XLMRobertaXLForCausalLM"),Ait.forEach(t),Eyo=r(R7e," (XLM-RoBERTa-XL model)"),R7e.forEach(t),Cyo=i(Q),Nb=n(Q,"LI",{});var P7e=s(Nb);Sce=n(P7e,"STRONG",{});var yit=s(Sce);wyo=r(yit,"xlnet"),yit.forEach(t),Ayo=r(P7e," \u2014 "),_D=n(P7e,"A",{href:!0});var Lit=s(_D);yyo=r(Lit,"XLNetLMHeadModel"),Lit.forEach(t),Lyo=r(P7e," (XLNet model)"),P7e.forEach(t),Q.forEach(t),xyo=i(ta),qb=n(ta,"P",{});var B7e=s(qb);$yo=r(B7e,"The model is set in evaluation mode by default using "),Rce=n(B7e,"CODE",{});var xit=s(Rce);kyo=r(xit,"model.eval()"),xit.forEach(t),Syo=r(B7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(B7e,"CODE",{});var $it=s(Pce);Ryo=r($it,"model.train()"),$it.forEach(t),B7e.forEach(t),Pyo=i(ta),T(jb.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),eje=i(f),Bi=n(f,"H2",{class:!0});var aGe=s(Bi);Db=n(aGe,"A",{id:!0,class:!0,href:!0});var kit=s(Db);Bce=n(kit,"SPAN",{});var Sit=s(Bce);T(EL.$$.fragment,Sit),Sit.forEach(t),kit.forEach(t),Byo=i(aGe),Ice=n(aGe,"SPAN",{});var Rit=s(Ice);Iyo=r(Rit,"AutoModelForMaskedLM"),Rit.forEach(t),aGe.forEach(t),oje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(CL.$$.fragment,zs),Nyo=i(zs),Ii=n(zs,"P",{});var GZ=s(Ii);qyo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=n(GZ,"A",{href:!0});var Pit=s(uD);jyo=r(Pit,"from_pretrained()"),Pit.forEach(t),Dyo=r(GZ," class method or the "),bD=n(GZ,"A",{href:!0});var Bit=s(bD);Gyo=r(Bit,"from_config()"),Bit.forEach(t),Oyo=r(GZ,` class
method.`),GZ.forEach(t),Vyo=i(zs),wL=n(zs,"P",{});var nGe=s(wL);Xyo=r(nGe,"This class cannot be instantiated directly using "),Nce=n(nGe,"CODE",{});var Iit=s(Nce);zyo=r(Iit,"__init__()"),Iit.forEach(t),Wyo=r(nGe," (throws an error)."),nGe.forEach(t),Qyo=i(zs),st=n(zs,"DIV",{class:!0});var Ww=s(st);T(AL.$$.fragment,Ww),Hyo=i(Ww),qce=n(Ww,"P",{});var Nit=s(qce);Uyo=r(Nit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nit.forEach(t),Jyo=i(Ww),Ni=n(Ww,"P",{});var OZ=s(Ni);Yyo=r(OZ,`Note:
Loading a model from its configuration file does `),jce=n(OZ,"STRONG",{});var qit=s(jce);Kyo=r(qit,"not"),qit.forEach(t),Zyo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(OZ,"A",{href:!0});var jit=s(vD);eLo=r(jit,"from_pretrained()"),jit.forEach(t),oLo=r(OZ," to load the model weights."),OZ.forEach(t),rLo=i(Ww),T(Gb.$$.fragment,Ww),Ww.forEach(t),tLo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(yL.$$.fragment,aa),aLo=i(aa),Dce=n(aa,"P",{});var Dit=s(Dce);nLo=r(Dit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dit.forEach(t),sLo=i(aa),ka=n(aa,"P",{});var Qw=s(ka);lLo=r(Qw,"The model class to instantiate is selected based on the "),Gce=n(Qw,"CODE",{});var Git=s(Gce);iLo=r(Git,"model_type"),Git.forEach(t),dLo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Oce=n(Qw,"CODE",{});var Oit=s(Oce);cLo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),fLo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(Qw,"CODE",{});var Vit=s(Vce);mLo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),gLo=r(Qw,":"),Qw.forEach(t),hLo=i(aa),W=n(aa,"UL",{});var H=s(W);Ob=n(H,"LI",{});var I7e=s(Ob);Xce=n(I7e,"STRONG",{});var Xit=s(Xce);pLo=r(Xit,"albert"),Xit.forEach(t),_Lo=r(I7e," \u2014 "),FD=n(I7e,"A",{href:!0});var zit=s(FD);uLo=r(zit,"AlbertForMaskedLM"),zit.forEach(t),bLo=r(I7e," (ALBERT model)"),I7e.forEach(t),vLo=i(H),Vb=n(H,"LI",{});var N7e=s(Vb);zce=n(N7e,"STRONG",{});var Wit=s(zce);FLo=r(Wit,"bart"),Wit.forEach(t),TLo=r(N7e," \u2014 "),TD=n(N7e,"A",{href:!0});var Qit=s(TD);MLo=r(Qit,"BartForConditionalGeneration"),Qit.forEach(t),ELo=r(N7e," (BART model)"),N7e.forEach(t),CLo=i(H),Xb=n(H,"LI",{});var q7e=s(Xb);Wce=n(q7e,"STRONG",{});var Hit=s(Wce);wLo=r(Hit,"bert"),Hit.forEach(t),ALo=r(q7e," \u2014 "),MD=n(q7e,"A",{href:!0});var Uit=s(MD);yLo=r(Uit,"BertForMaskedLM"),Uit.forEach(t),LLo=r(q7e," (BERT model)"),q7e.forEach(t),xLo=i(H),zb=n(H,"LI",{});var j7e=s(zb);Qce=n(j7e,"STRONG",{});var Jit=s(Qce);$Lo=r(Jit,"big_bird"),Jit.forEach(t),kLo=r(j7e," \u2014 "),ED=n(j7e,"A",{href:!0});var Yit=s(ED);SLo=r(Yit,"BigBirdForMaskedLM"),Yit.forEach(t),RLo=r(j7e," (BigBird model)"),j7e.forEach(t),PLo=i(H),Wb=n(H,"LI",{});var D7e=s(Wb);Hce=n(D7e,"STRONG",{});var Kit=s(Hce);BLo=r(Kit,"camembert"),Kit.forEach(t),ILo=r(D7e," \u2014 "),CD=n(D7e,"A",{href:!0});var Zit=s(CD);NLo=r(Zit,"CamembertForMaskedLM"),Zit.forEach(t),qLo=r(D7e," (CamemBERT model)"),D7e.forEach(t),jLo=i(H),Qb=n(H,"LI",{});var G7e=s(Qb);Uce=n(G7e,"STRONG",{});var edt=s(Uce);DLo=r(edt,"convbert"),edt.forEach(t),GLo=r(G7e," \u2014 "),wD=n(G7e,"A",{href:!0});var odt=s(wD);OLo=r(odt,"ConvBertForMaskedLM"),odt.forEach(t),VLo=r(G7e," (ConvBERT model)"),G7e.forEach(t),XLo=i(H),Hb=n(H,"LI",{});var O7e=s(Hb);Jce=n(O7e,"STRONG",{});var rdt=s(Jce);zLo=r(rdt,"data2vec-text"),rdt.forEach(t),WLo=r(O7e," \u2014 "),AD=n(O7e,"A",{href:!0});var tdt=s(AD);QLo=r(tdt,"Data2VecTextForMaskedLM"),tdt.forEach(t),HLo=r(O7e," (Data2VecText model)"),O7e.forEach(t),ULo=i(H),Ub=n(H,"LI",{});var V7e=s(Ub);Yce=n(V7e,"STRONG",{});var adt=s(Yce);JLo=r(adt,"deberta"),adt.forEach(t),YLo=r(V7e," \u2014 "),yD=n(V7e,"A",{href:!0});var ndt=s(yD);KLo=r(ndt,"DebertaForMaskedLM"),ndt.forEach(t),ZLo=r(V7e," (DeBERTa model)"),V7e.forEach(t),e8o=i(H),Jb=n(H,"LI",{});var X7e=s(Jb);Kce=n(X7e,"STRONG",{});var sdt=s(Kce);o8o=r(sdt,"deberta-v2"),sdt.forEach(t),r8o=r(X7e," \u2014 "),LD=n(X7e,"A",{href:!0});var ldt=s(LD);t8o=r(ldt,"DebertaV2ForMaskedLM"),ldt.forEach(t),a8o=r(X7e," (DeBERTa-v2 model)"),X7e.forEach(t),n8o=i(H),Yb=n(H,"LI",{});var z7e=s(Yb);Zce=n(z7e,"STRONG",{});var idt=s(Zce);s8o=r(idt,"distilbert"),idt.forEach(t),l8o=r(z7e," \u2014 "),xD=n(z7e,"A",{href:!0});var ddt=s(xD);i8o=r(ddt,"DistilBertForMaskedLM"),ddt.forEach(t),d8o=r(z7e," (DistilBERT model)"),z7e.forEach(t),c8o=i(H),Kb=n(H,"LI",{});var W7e=s(Kb);efe=n(W7e,"STRONG",{});var cdt=s(efe);f8o=r(cdt,"electra"),cdt.forEach(t),m8o=r(W7e," \u2014 "),$D=n(W7e,"A",{href:!0});var fdt=s($D);g8o=r(fdt,"ElectraForMaskedLM"),fdt.forEach(t),h8o=r(W7e," (ELECTRA model)"),W7e.forEach(t),p8o=i(H),Zb=n(H,"LI",{});var Q7e=s(Zb);ofe=n(Q7e,"STRONG",{});var mdt=s(ofe);_8o=r(mdt,"flaubert"),mdt.forEach(t),u8o=r(Q7e," \u2014 "),kD=n(Q7e,"A",{href:!0});var gdt=s(kD);b8o=r(gdt,"FlaubertWithLMHeadModel"),gdt.forEach(t),v8o=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),F8o=i(H),e2=n(H,"LI",{});var H7e=s(e2);rfe=n(H7e,"STRONG",{});var hdt=s(rfe);T8o=r(hdt,"fnet"),hdt.forEach(t),M8o=r(H7e," \u2014 "),SD=n(H7e,"A",{href:!0});var pdt=s(SD);E8o=r(pdt,"FNetForMaskedLM"),pdt.forEach(t),C8o=r(H7e," (FNet model)"),H7e.forEach(t),w8o=i(H),o2=n(H,"LI",{});var U7e=s(o2);tfe=n(U7e,"STRONG",{});var _dt=s(tfe);A8o=r(_dt,"funnel"),_dt.forEach(t),y8o=r(U7e," \u2014 "),RD=n(U7e,"A",{href:!0});var udt=s(RD);L8o=r(udt,"FunnelForMaskedLM"),udt.forEach(t),x8o=r(U7e," (Funnel Transformer model)"),U7e.forEach(t),$8o=i(H),r2=n(H,"LI",{});var J7e=s(r2);afe=n(J7e,"STRONG",{});var bdt=s(afe);k8o=r(bdt,"ibert"),bdt.forEach(t),S8o=r(J7e," \u2014 "),PD=n(J7e,"A",{href:!0});var vdt=s(PD);R8o=r(vdt,"IBertForMaskedLM"),vdt.forEach(t),P8o=r(J7e," (I-BERT model)"),J7e.forEach(t),B8o=i(H),t2=n(H,"LI",{});var Y7e=s(t2);nfe=n(Y7e,"STRONG",{});var Fdt=s(nfe);I8o=r(Fdt,"layoutlm"),Fdt.forEach(t),N8o=r(Y7e," \u2014 "),BD=n(Y7e,"A",{href:!0});var Tdt=s(BD);q8o=r(Tdt,"LayoutLMForMaskedLM"),Tdt.forEach(t),j8o=r(Y7e," (LayoutLM model)"),Y7e.forEach(t),D8o=i(H),a2=n(H,"LI",{});var K7e=s(a2);sfe=n(K7e,"STRONG",{});var Mdt=s(sfe);G8o=r(Mdt,"longformer"),Mdt.forEach(t),O8o=r(K7e," \u2014 "),ID=n(K7e,"A",{href:!0});var Edt=s(ID);V8o=r(Edt,"LongformerForMaskedLM"),Edt.forEach(t),X8o=r(K7e," (Longformer model)"),K7e.forEach(t),z8o=i(H),n2=n(H,"LI",{});var Z7e=s(n2);lfe=n(Z7e,"STRONG",{});var Cdt=s(lfe);W8o=r(Cdt,"luke"),Cdt.forEach(t),Q8o=r(Z7e," \u2014 "),ND=n(Z7e,"A",{href:!0});var wdt=s(ND);H8o=r(wdt,"LukeForMaskedLM"),wdt.forEach(t),U8o=r(Z7e," (LUKE model)"),Z7e.forEach(t),J8o=i(H),s2=n(H,"LI",{});var e9e=s(s2);ife=n(e9e,"STRONG",{});var Adt=s(ife);Y8o=r(Adt,"mbart"),Adt.forEach(t),K8o=r(e9e," \u2014 "),qD=n(e9e,"A",{href:!0});var ydt=s(qD);Z8o=r(ydt,"MBartForConditionalGeneration"),ydt.forEach(t),e7o=r(e9e," (mBART model)"),e9e.forEach(t),o7o=i(H),l2=n(H,"LI",{});var o9e=s(l2);dfe=n(o9e,"STRONG",{});var Ldt=s(dfe);r7o=r(Ldt,"megatron-bert"),Ldt.forEach(t),t7o=r(o9e," \u2014 "),jD=n(o9e,"A",{href:!0});var xdt=s(jD);a7o=r(xdt,"MegatronBertForMaskedLM"),xdt.forEach(t),n7o=r(o9e," (Megatron-BERT model)"),o9e.forEach(t),s7o=i(H),i2=n(H,"LI",{});var r9e=s(i2);cfe=n(r9e,"STRONG",{});var $dt=s(cfe);l7o=r($dt,"mobilebert"),$dt.forEach(t),i7o=r(r9e," \u2014 "),DD=n(r9e,"A",{href:!0});var kdt=s(DD);d7o=r(kdt,"MobileBertForMaskedLM"),kdt.forEach(t),c7o=r(r9e," (MobileBERT model)"),r9e.forEach(t),f7o=i(H),d2=n(H,"LI",{});var t9e=s(d2);ffe=n(t9e,"STRONG",{});var Sdt=s(ffe);m7o=r(Sdt,"mpnet"),Sdt.forEach(t),g7o=r(t9e," \u2014 "),GD=n(t9e,"A",{href:!0});var Rdt=s(GD);h7o=r(Rdt,"MPNetForMaskedLM"),Rdt.forEach(t),p7o=r(t9e," (MPNet model)"),t9e.forEach(t),_7o=i(H),c2=n(H,"LI",{});var a9e=s(c2);mfe=n(a9e,"STRONG",{});var Pdt=s(mfe);u7o=r(Pdt,"nystromformer"),Pdt.forEach(t),b7o=r(a9e," \u2014 "),OD=n(a9e,"A",{href:!0});var Bdt=s(OD);v7o=r(Bdt,"NystromformerForMaskedLM"),Bdt.forEach(t),F7o=r(a9e," (Nystr\xF6mformer model)"),a9e.forEach(t),T7o=i(H),f2=n(H,"LI",{});var n9e=s(f2);gfe=n(n9e,"STRONG",{});var Idt=s(gfe);M7o=r(Idt,"perceiver"),Idt.forEach(t),E7o=r(n9e," \u2014 "),VD=n(n9e,"A",{href:!0});var Ndt=s(VD);C7o=r(Ndt,"PerceiverForMaskedLM"),Ndt.forEach(t),w7o=r(n9e," (Perceiver model)"),n9e.forEach(t),A7o=i(H),m2=n(H,"LI",{});var s9e=s(m2);hfe=n(s9e,"STRONG",{});var qdt=s(hfe);y7o=r(qdt,"qdqbert"),qdt.forEach(t),L7o=r(s9e," \u2014 "),XD=n(s9e,"A",{href:!0});var jdt=s(XD);x7o=r(jdt,"QDQBertForMaskedLM"),jdt.forEach(t),$7o=r(s9e," (QDQBert model)"),s9e.forEach(t),k7o=i(H),g2=n(H,"LI",{});var l9e=s(g2);pfe=n(l9e,"STRONG",{});var Ddt=s(pfe);S7o=r(Ddt,"reformer"),Ddt.forEach(t),R7o=r(l9e," \u2014 "),zD=n(l9e,"A",{href:!0});var Gdt=s(zD);P7o=r(Gdt,"ReformerForMaskedLM"),Gdt.forEach(t),B7o=r(l9e," (Reformer model)"),l9e.forEach(t),I7o=i(H),h2=n(H,"LI",{});var i9e=s(h2);_fe=n(i9e,"STRONG",{});var Odt=s(_fe);N7o=r(Odt,"rembert"),Odt.forEach(t),q7o=r(i9e," \u2014 "),WD=n(i9e,"A",{href:!0});var Vdt=s(WD);j7o=r(Vdt,"RemBertForMaskedLM"),Vdt.forEach(t),D7o=r(i9e," (RemBERT model)"),i9e.forEach(t),G7o=i(H),p2=n(H,"LI",{});var d9e=s(p2);ufe=n(d9e,"STRONG",{});var Xdt=s(ufe);O7o=r(Xdt,"roberta"),Xdt.forEach(t),V7o=r(d9e," \u2014 "),QD=n(d9e,"A",{href:!0});var zdt=s(QD);X7o=r(zdt,"RobertaForMaskedLM"),zdt.forEach(t),z7o=r(d9e," (RoBERTa model)"),d9e.forEach(t),W7o=i(H),_2=n(H,"LI",{});var c9e=s(_2);bfe=n(c9e,"STRONG",{});var Wdt=s(bfe);Q7o=r(Wdt,"roformer"),Wdt.forEach(t),H7o=r(c9e," \u2014 "),HD=n(c9e,"A",{href:!0});var Qdt=s(HD);U7o=r(Qdt,"RoFormerForMaskedLM"),Qdt.forEach(t),J7o=r(c9e," (RoFormer model)"),c9e.forEach(t),Y7o=i(H),u2=n(H,"LI",{});var f9e=s(u2);vfe=n(f9e,"STRONG",{});var Hdt=s(vfe);K7o=r(Hdt,"squeezebert"),Hdt.forEach(t),Z7o=r(f9e," \u2014 "),UD=n(f9e,"A",{href:!0});var Udt=s(UD);e9o=r(Udt,"SqueezeBertForMaskedLM"),Udt.forEach(t),o9o=r(f9e," (SqueezeBERT model)"),f9e.forEach(t),r9o=i(H),b2=n(H,"LI",{});var m9e=s(b2);Ffe=n(m9e,"STRONG",{});var Jdt=s(Ffe);t9o=r(Jdt,"tapas"),Jdt.forEach(t),a9o=r(m9e," \u2014 "),JD=n(m9e,"A",{href:!0});var Ydt=s(JD);n9o=r(Ydt,"TapasForMaskedLM"),Ydt.forEach(t),s9o=r(m9e," (TAPAS model)"),m9e.forEach(t),l9o=i(H),v2=n(H,"LI",{});var g9e=s(v2);Tfe=n(g9e,"STRONG",{});var Kdt=s(Tfe);i9o=r(Kdt,"wav2vec2"),Kdt.forEach(t),d9o=r(g9e," \u2014 "),Mfe=n(g9e,"CODE",{});var Zdt=s(Mfe);c9o=r(Zdt,"Wav2Vec2ForMaskedLM"),Zdt.forEach(t),f9o=r(g9e," (Wav2Vec2 model)"),g9e.forEach(t),m9o=i(H),F2=n(H,"LI",{});var h9e=s(F2);Efe=n(h9e,"STRONG",{});var ect=s(Efe);g9o=r(ect,"xlm"),ect.forEach(t),h9o=r(h9e," \u2014 "),YD=n(h9e,"A",{href:!0});var oct=s(YD);p9o=r(oct,"XLMWithLMHeadModel"),oct.forEach(t),_9o=r(h9e," (XLM model)"),h9e.forEach(t),u9o=i(H),T2=n(H,"LI",{});var p9e=s(T2);Cfe=n(p9e,"STRONG",{});var rct=s(Cfe);b9o=r(rct,"xlm-roberta"),rct.forEach(t),v9o=r(p9e," \u2014 "),KD=n(p9e,"A",{href:!0});var tct=s(KD);F9o=r(tct,"XLMRobertaForMaskedLM"),tct.forEach(t),T9o=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),M9o=i(H),M2=n(H,"LI",{});var _9e=s(M2);wfe=n(_9e,"STRONG",{});var act=s(wfe);E9o=r(act,"xlm-roberta-xl"),act.forEach(t),C9o=r(_9e," \u2014 "),ZD=n(_9e,"A",{href:!0});var nct=s(ZD);w9o=r(nct,"XLMRobertaXLForMaskedLM"),nct.forEach(t),A9o=r(_9e," (XLM-RoBERTa-XL model)"),_9e.forEach(t),y9o=i(H),E2=n(H,"LI",{});var u9e=s(E2);Afe=n(u9e,"STRONG",{});var sct=s(Afe);L9o=r(sct,"yoso"),sct.forEach(t),x9o=r(u9e," \u2014 "),eG=n(u9e,"A",{href:!0});var lct=s(eG);$9o=r(lct,"YosoForMaskedLM"),lct.forEach(t),k9o=r(u9e," (YOSO model)"),u9e.forEach(t),H.forEach(t),S9o=i(aa),C2=n(aa,"P",{});var b9e=s(C2);R9o=r(b9e,"The model is set in evaluation mode by default using "),yfe=n(b9e,"CODE",{});var ict=s(yfe);P9o=r(ict,"model.eval()"),ict.forEach(t),B9o=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(b9e,"CODE",{});var dct=s(Lfe);I9o=r(dct,"model.train()"),dct.forEach(t),b9e.forEach(t),N9o=i(aa),T(w2.$$.fragment,aa),aa.forEach(t),zs.forEach(t),rje=i(f),qi=n(f,"H2",{class:!0});var sGe=s(qi);A2=n(sGe,"A",{id:!0,class:!0,href:!0});var cct=s(A2);xfe=n(cct,"SPAN",{});var fct=s(xfe);T(LL.$$.fragment,fct),fct.forEach(t),cct.forEach(t),q9o=i(sGe),$fe=n(sGe,"SPAN",{});var mct=s($fe);j9o=r(mct,"AutoModelForSeq2SeqLM"),mct.forEach(t),sGe.forEach(t),tje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(xL.$$.fragment,Ws),D9o=i(Ws),ji=n(Ws,"P",{});var VZ=s(ji);G9o=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=n(VZ,"A",{href:!0});var gct=s(oG);O9o=r(gct,"from_pretrained()"),gct.forEach(t),V9o=r(VZ," class method or the "),rG=n(VZ,"A",{href:!0});var hct=s(rG);X9o=r(hct,"from_config()"),hct.forEach(t),z9o=r(VZ,` class
method.`),VZ.forEach(t),W9o=i(Ws),$L=n(Ws,"P",{});var lGe=s($L);Q9o=r(lGe,"This class cannot be instantiated directly using "),kfe=n(lGe,"CODE",{});var pct=s(kfe);H9o=r(pct,"__init__()"),pct.forEach(t),U9o=r(lGe," (throws an error)."),lGe.forEach(t),J9o=i(Ws),lt=n(Ws,"DIV",{class:!0});var Hw=s(lt);T(kL.$$.fragment,Hw),Y9o=i(Hw),Sfe=n(Hw,"P",{});var _ct=s(Sfe);K9o=r(_ct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_ct.forEach(t),Z9o=i(Hw),Di=n(Hw,"P",{});var XZ=s(Di);exo=r(XZ,`Note:
Loading a model from its configuration file does `),Rfe=n(XZ,"STRONG",{});var uct=s(Rfe);oxo=r(uct,"not"),uct.forEach(t),rxo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(XZ,"A",{href:!0});var bct=s(tG);txo=r(bct,"from_pretrained()"),bct.forEach(t),axo=r(XZ," to load the model weights."),XZ.forEach(t),nxo=i(Hw),T(y2.$$.fragment,Hw),Hw.forEach(t),sxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(SL.$$.fragment,na),lxo=i(na),Pfe=n(na,"P",{});var vct=s(Pfe);ixo=r(vct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vct.forEach(t),dxo=i(na),Sa=n(na,"P",{});var Uw=s(Sa);cxo=r(Uw,"The model class to instantiate is selected based on the "),Bfe=n(Uw,"CODE",{});var Fct=s(Bfe);fxo=r(Fct,"model_type"),Fct.forEach(t),mxo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Ife=n(Uw,"CODE",{});var Tct=s(Ife);gxo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),hxo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(Uw,"CODE",{});var Mct=s(Nfe);pxo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),_xo=r(Uw,":"),Uw.forEach(t),uxo=i(na),_e=n(na,"UL",{});var Fe=s(_e);L2=n(Fe,"LI",{});var v9e=s(L2);qfe=n(v9e,"STRONG",{});var Ect=s(qfe);bxo=r(Ect,"bart"),Ect.forEach(t),vxo=r(v9e," \u2014 "),aG=n(v9e,"A",{href:!0});var Cct=s(aG);Fxo=r(Cct,"BartForConditionalGeneration"),Cct.forEach(t),Txo=r(v9e," (BART model)"),v9e.forEach(t),Mxo=i(Fe),x2=n(Fe,"LI",{});var F9e=s(x2);jfe=n(F9e,"STRONG",{});var wct=s(jfe);Exo=r(wct,"bigbird_pegasus"),wct.forEach(t),Cxo=r(F9e," \u2014 "),nG=n(F9e,"A",{href:!0});var Act=s(nG);wxo=r(Act,"BigBirdPegasusForConditionalGeneration"),Act.forEach(t),Axo=r(F9e," (BigBird-Pegasus model)"),F9e.forEach(t),yxo=i(Fe),$2=n(Fe,"LI",{});var T9e=s($2);Dfe=n(T9e,"STRONG",{});var yct=s(Dfe);Lxo=r(yct,"blenderbot"),yct.forEach(t),xxo=r(T9e," \u2014 "),sG=n(T9e,"A",{href:!0});var Lct=s(sG);$xo=r(Lct,"BlenderbotForConditionalGeneration"),Lct.forEach(t),kxo=r(T9e," (Blenderbot model)"),T9e.forEach(t),Sxo=i(Fe),k2=n(Fe,"LI",{});var M9e=s(k2);Gfe=n(M9e,"STRONG",{});var xct=s(Gfe);Rxo=r(xct,"blenderbot-small"),xct.forEach(t),Pxo=r(M9e," \u2014 "),lG=n(M9e,"A",{href:!0});var $ct=s(lG);Bxo=r($ct,"BlenderbotSmallForConditionalGeneration"),$ct.forEach(t),Ixo=r(M9e," (BlenderbotSmall model)"),M9e.forEach(t),Nxo=i(Fe),S2=n(Fe,"LI",{});var E9e=s(S2);Ofe=n(E9e,"STRONG",{});var kct=s(Ofe);qxo=r(kct,"encoder-decoder"),kct.forEach(t),jxo=r(E9e," \u2014 "),iG=n(E9e,"A",{href:!0});var Sct=s(iG);Dxo=r(Sct,"EncoderDecoderModel"),Sct.forEach(t),Gxo=r(E9e," (Encoder decoder model)"),E9e.forEach(t),Oxo=i(Fe),R2=n(Fe,"LI",{});var C9e=s(R2);Vfe=n(C9e,"STRONG",{});var Rct=s(Vfe);Vxo=r(Rct,"fsmt"),Rct.forEach(t),Xxo=r(C9e," \u2014 "),dG=n(C9e,"A",{href:!0});var Pct=s(dG);zxo=r(Pct,"FSMTForConditionalGeneration"),Pct.forEach(t),Wxo=r(C9e," (FairSeq Machine-Translation model)"),C9e.forEach(t),Qxo=i(Fe),P2=n(Fe,"LI",{});var w9e=s(P2);Xfe=n(w9e,"STRONG",{});var Bct=s(Xfe);Hxo=r(Bct,"led"),Bct.forEach(t),Uxo=r(w9e," \u2014 "),cG=n(w9e,"A",{href:!0});var Ict=s(cG);Jxo=r(Ict,"LEDForConditionalGeneration"),Ict.forEach(t),Yxo=r(w9e," (LED model)"),w9e.forEach(t),Kxo=i(Fe),B2=n(Fe,"LI",{});var A9e=s(B2);zfe=n(A9e,"STRONG",{});var Nct=s(zfe);Zxo=r(Nct,"m2m_100"),Nct.forEach(t),e$o=r(A9e," \u2014 "),fG=n(A9e,"A",{href:!0});var qct=s(fG);o$o=r(qct,"M2M100ForConditionalGeneration"),qct.forEach(t),r$o=r(A9e," (M2M100 model)"),A9e.forEach(t),t$o=i(Fe),I2=n(Fe,"LI",{});var y9e=s(I2);Wfe=n(y9e,"STRONG",{});var jct=s(Wfe);a$o=r(jct,"marian"),jct.forEach(t),n$o=r(y9e," \u2014 "),mG=n(y9e,"A",{href:!0});var Dct=s(mG);s$o=r(Dct,"MarianMTModel"),Dct.forEach(t),l$o=r(y9e," (Marian model)"),y9e.forEach(t),i$o=i(Fe),N2=n(Fe,"LI",{});var L9e=s(N2);Qfe=n(L9e,"STRONG",{});var Gct=s(Qfe);d$o=r(Gct,"mbart"),Gct.forEach(t),c$o=r(L9e," \u2014 "),gG=n(L9e,"A",{href:!0});var Oct=s(gG);f$o=r(Oct,"MBartForConditionalGeneration"),Oct.forEach(t),m$o=r(L9e," (mBART model)"),L9e.forEach(t),g$o=i(Fe),q2=n(Fe,"LI",{});var x9e=s(q2);Hfe=n(x9e,"STRONG",{});var Vct=s(Hfe);h$o=r(Vct,"mt5"),Vct.forEach(t),p$o=r(x9e," \u2014 "),hG=n(x9e,"A",{href:!0});var Xct=s(hG);_$o=r(Xct,"MT5ForConditionalGeneration"),Xct.forEach(t),u$o=r(x9e," (MT5 model)"),x9e.forEach(t),b$o=i(Fe),j2=n(Fe,"LI",{});var $9e=s(j2);Ufe=n($9e,"STRONG",{});var zct=s(Ufe);v$o=r(zct,"pegasus"),zct.forEach(t),F$o=r($9e," \u2014 "),pG=n($9e,"A",{href:!0});var Wct=s(pG);T$o=r(Wct,"PegasusForConditionalGeneration"),Wct.forEach(t),M$o=r($9e," (Pegasus model)"),$9e.forEach(t),E$o=i(Fe),D2=n(Fe,"LI",{});var k9e=s(D2);Jfe=n(k9e,"STRONG",{});var Qct=s(Jfe);C$o=r(Qct,"plbart"),Qct.forEach(t),w$o=r(k9e," \u2014 "),_G=n(k9e,"A",{href:!0});var Hct=s(_G);A$o=r(Hct,"PLBartForConditionalGeneration"),Hct.forEach(t),y$o=r(k9e," (PLBart model)"),k9e.forEach(t),L$o=i(Fe),G2=n(Fe,"LI",{});var S9e=s(G2);Yfe=n(S9e,"STRONG",{});var Uct=s(Yfe);x$o=r(Uct,"prophetnet"),Uct.forEach(t),$$o=r(S9e," \u2014 "),uG=n(S9e,"A",{href:!0});var Jct=s(uG);k$o=r(Jct,"ProphetNetForConditionalGeneration"),Jct.forEach(t),S$o=r(S9e," (ProphetNet model)"),S9e.forEach(t),R$o=i(Fe),O2=n(Fe,"LI",{});var R9e=s(O2);Kfe=n(R9e,"STRONG",{});var Yct=s(Kfe);P$o=r(Yct,"t5"),Yct.forEach(t),B$o=r(R9e," \u2014 "),bG=n(R9e,"A",{href:!0});var Kct=s(bG);I$o=r(Kct,"T5ForConditionalGeneration"),Kct.forEach(t),N$o=r(R9e," (T5 model)"),R9e.forEach(t),q$o=i(Fe),V2=n(Fe,"LI",{});var P9e=s(V2);Zfe=n(P9e,"STRONG",{});var Zct=s(Zfe);j$o=r(Zct,"xlm-prophetnet"),Zct.forEach(t),D$o=r(P9e," \u2014 "),vG=n(P9e,"A",{href:!0});var eft=s(vG);G$o=r(eft,"XLMProphetNetForConditionalGeneration"),eft.forEach(t),O$o=r(P9e," (XLM-ProphetNet model)"),P9e.forEach(t),Fe.forEach(t),V$o=i(na),X2=n(na,"P",{});var B9e=s(X2);X$o=r(B9e,"The model is set in evaluation mode by default using "),eme=n(B9e,"CODE",{});var oft=s(eme);z$o=r(oft,"model.eval()"),oft.forEach(t),W$o=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(B9e,"CODE",{});var rft=s(ome);Q$o=r(rft,"model.train()"),rft.forEach(t),B9e.forEach(t),H$o=i(na),T(z2.$$.fragment,na),na.forEach(t),Ws.forEach(t),aje=i(f),Gi=n(f,"H2",{class:!0});var iGe=s(Gi);W2=n(iGe,"A",{id:!0,class:!0,href:!0});var tft=s(W2);rme=n(tft,"SPAN",{});var aft=s(rme);T(RL.$$.fragment,aft),aft.forEach(t),tft.forEach(t),U$o=i(iGe),tme=n(iGe,"SPAN",{});var nft=s(tme);J$o=r(nft,"AutoModelForSequenceClassification"),nft.forEach(t),iGe.forEach(t),nje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(PL.$$.fragment,Qs),Y$o=i(Qs),Oi=n(Qs,"P",{});var zZ=s(Oi);K$o=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=n(zZ,"A",{href:!0});var sft=s(FG);Z$o=r(sft,"from_pretrained()"),sft.forEach(t),eko=r(zZ," class method or the "),TG=n(zZ,"A",{href:!0});var lft=s(TG);oko=r(lft,"from_config()"),lft.forEach(t),rko=r(zZ,` class
method.`),zZ.forEach(t),tko=i(Qs),BL=n(Qs,"P",{});var dGe=s(BL);ako=r(dGe,"This class cannot be instantiated directly using "),ame=n(dGe,"CODE",{});var ift=s(ame);nko=r(ift,"__init__()"),ift.forEach(t),sko=r(dGe," (throws an error)."),dGe.forEach(t),lko=i(Qs),it=n(Qs,"DIV",{class:!0});var Jw=s(it);T(IL.$$.fragment,Jw),iko=i(Jw),nme=n(Jw,"P",{});var dft=s(nme);dko=r(dft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dft.forEach(t),cko=i(Jw),Vi=n(Jw,"P",{});var WZ=s(Vi);fko=r(WZ,`Note:
Loading a model from its configuration file does `),sme=n(WZ,"STRONG",{});var cft=s(sme);mko=r(cft,"not"),cft.forEach(t),gko=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(WZ,"A",{href:!0});var fft=s(MG);hko=r(fft,"from_pretrained()"),fft.forEach(t),pko=r(WZ," to load the model weights."),WZ.forEach(t),_ko=i(Jw),T(Q2.$$.fragment,Jw),Jw.forEach(t),uko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(NL.$$.fragment,sa),bko=i(sa),lme=n(sa,"P",{});var mft=s(lme);vko=r(mft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mft.forEach(t),Fko=i(sa),Ra=n(sa,"P",{});var Yw=s(Ra);Tko=r(Yw,"The model class to instantiate is selected based on the "),ime=n(Yw,"CODE",{});var gft=s(ime);Mko=r(gft,"model_type"),gft.forEach(t),Eko=r(Yw,` property of the config object (either
passed as an argument or loaded from `),dme=n(Yw,"CODE",{});var hft=s(dme);Cko=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),wko=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(Yw,"CODE",{});var pft=s(cme);Ako=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),yko=r(Yw,":"),Yw.forEach(t),Lko=i(sa),N=n(sa,"UL",{});var j=s(N);H2=n(j,"LI",{});var I9e=s(H2);fme=n(I9e,"STRONG",{});var _ft=s(fme);xko=r(_ft,"albert"),_ft.forEach(t),$ko=r(I9e," \u2014 "),EG=n(I9e,"A",{href:!0});var uft=s(EG);kko=r(uft,"AlbertForSequenceClassification"),uft.forEach(t),Sko=r(I9e," (ALBERT model)"),I9e.forEach(t),Rko=i(j),U2=n(j,"LI",{});var N9e=s(U2);mme=n(N9e,"STRONG",{});var bft=s(mme);Pko=r(bft,"bart"),bft.forEach(t),Bko=r(N9e," \u2014 "),CG=n(N9e,"A",{href:!0});var vft=s(CG);Iko=r(vft,"BartForSequenceClassification"),vft.forEach(t),Nko=r(N9e," (BART model)"),N9e.forEach(t),qko=i(j),J2=n(j,"LI",{});var q9e=s(J2);gme=n(q9e,"STRONG",{});var Fft=s(gme);jko=r(Fft,"bert"),Fft.forEach(t),Dko=r(q9e," \u2014 "),wG=n(q9e,"A",{href:!0});var Tft=s(wG);Gko=r(Tft,"BertForSequenceClassification"),Tft.forEach(t),Oko=r(q9e," (BERT model)"),q9e.forEach(t),Vko=i(j),Y2=n(j,"LI",{});var j9e=s(Y2);hme=n(j9e,"STRONG",{});var Mft=s(hme);Xko=r(Mft,"big_bird"),Mft.forEach(t),zko=r(j9e," \u2014 "),AG=n(j9e,"A",{href:!0});var Eft=s(AG);Wko=r(Eft,"BigBirdForSequenceClassification"),Eft.forEach(t),Qko=r(j9e," (BigBird model)"),j9e.forEach(t),Hko=i(j),K2=n(j,"LI",{});var D9e=s(K2);pme=n(D9e,"STRONG",{});var Cft=s(pme);Uko=r(Cft,"bigbird_pegasus"),Cft.forEach(t),Jko=r(D9e," \u2014 "),yG=n(D9e,"A",{href:!0});var wft=s(yG);Yko=r(wft,"BigBirdPegasusForSequenceClassification"),wft.forEach(t),Kko=r(D9e," (BigBird-Pegasus model)"),D9e.forEach(t),Zko=i(j),Z2=n(j,"LI",{});var G9e=s(Z2);_me=n(G9e,"STRONG",{});var Aft=s(_me);eSo=r(Aft,"camembert"),Aft.forEach(t),oSo=r(G9e," \u2014 "),LG=n(G9e,"A",{href:!0});var yft=s(LG);rSo=r(yft,"CamembertForSequenceClassification"),yft.forEach(t),tSo=r(G9e," (CamemBERT model)"),G9e.forEach(t),aSo=i(j),ev=n(j,"LI",{});var O9e=s(ev);ume=n(O9e,"STRONG",{});var Lft=s(ume);nSo=r(Lft,"canine"),Lft.forEach(t),sSo=r(O9e," \u2014 "),xG=n(O9e,"A",{href:!0});var xft=s(xG);lSo=r(xft,"CanineForSequenceClassification"),xft.forEach(t),iSo=r(O9e," (CANINE model)"),O9e.forEach(t),dSo=i(j),ov=n(j,"LI",{});var V9e=s(ov);bme=n(V9e,"STRONG",{});var $ft=s(bme);cSo=r($ft,"convbert"),$ft.forEach(t),fSo=r(V9e," \u2014 "),$G=n(V9e,"A",{href:!0});var kft=s($G);mSo=r(kft,"ConvBertForSequenceClassification"),kft.forEach(t),gSo=r(V9e," (ConvBERT model)"),V9e.forEach(t),hSo=i(j),rv=n(j,"LI",{});var X9e=s(rv);vme=n(X9e,"STRONG",{});var Sft=s(vme);pSo=r(Sft,"ctrl"),Sft.forEach(t),_So=r(X9e," \u2014 "),kG=n(X9e,"A",{href:!0});var Rft=s(kG);uSo=r(Rft,"CTRLForSequenceClassification"),Rft.forEach(t),bSo=r(X9e," (CTRL model)"),X9e.forEach(t),vSo=i(j),tv=n(j,"LI",{});var z9e=s(tv);Fme=n(z9e,"STRONG",{});var Pft=s(Fme);FSo=r(Pft,"data2vec-text"),Pft.forEach(t),TSo=r(z9e," \u2014 "),SG=n(z9e,"A",{href:!0});var Bft=s(SG);MSo=r(Bft,"Data2VecTextForSequenceClassification"),Bft.forEach(t),ESo=r(z9e," (Data2VecText model)"),z9e.forEach(t),CSo=i(j),av=n(j,"LI",{});var W9e=s(av);Tme=n(W9e,"STRONG",{});var Ift=s(Tme);wSo=r(Ift,"deberta"),Ift.forEach(t),ASo=r(W9e," \u2014 "),RG=n(W9e,"A",{href:!0});var Nft=s(RG);ySo=r(Nft,"DebertaForSequenceClassification"),Nft.forEach(t),LSo=r(W9e," (DeBERTa model)"),W9e.forEach(t),xSo=i(j),nv=n(j,"LI",{});var Q9e=s(nv);Mme=n(Q9e,"STRONG",{});var qft=s(Mme);$So=r(qft,"deberta-v2"),qft.forEach(t),kSo=r(Q9e," \u2014 "),PG=n(Q9e,"A",{href:!0});var jft=s(PG);SSo=r(jft,"DebertaV2ForSequenceClassification"),jft.forEach(t),RSo=r(Q9e," (DeBERTa-v2 model)"),Q9e.forEach(t),PSo=i(j),sv=n(j,"LI",{});var H9e=s(sv);Eme=n(H9e,"STRONG",{});var Dft=s(Eme);BSo=r(Dft,"distilbert"),Dft.forEach(t),ISo=r(H9e," \u2014 "),BG=n(H9e,"A",{href:!0});var Gft=s(BG);NSo=r(Gft,"DistilBertForSequenceClassification"),Gft.forEach(t),qSo=r(H9e," (DistilBERT model)"),H9e.forEach(t),jSo=i(j),lv=n(j,"LI",{});var U9e=s(lv);Cme=n(U9e,"STRONG",{});var Oft=s(Cme);DSo=r(Oft,"electra"),Oft.forEach(t),GSo=r(U9e," \u2014 "),IG=n(U9e,"A",{href:!0});var Vft=s(IG);OSo=r(Vft,"ElectraForSequenceClassification"),Vft.forEach(t),VSo=r(U9e," (ELECTRA model)"),U9e.forEach(t),XSo=i(j),iv=n(j,"LI",{});var J9e=s(iv);wme=n(J9e,"STRONG",{});var Xft=s(wme);zSo=r(Xft,"flaubert"),Xft.forEach(t),WSo=r(J9e," \u2014 "),NG=n(J9e,"A",{href:!0});var zft=s(NG);QSo=r(zft,"FlaubertForSequenceClassification"),zft.forEach(t),HSo=r(J9e," (FlauBERT model)"),J9e.forEach(t),USo=i(j),dv=n(j,"LI",{});var Y9e=s(dv);Ame=n(Y9e,"STRONG",{});var Wft=s(Ame);JSo=r(Wft,"fnet"),Wft.forEach(t),YSo=r(Y9e," \u2014 "),qG=n(Y9e,"A",{href:!0});var Qft=s(qG);KSo=r(Qft,"FNetForSequenceClassification"),Qft.forEach(t),ZSo=r(Y9e," (FNet model)"),Y9e.forEach(t),eRo=i(j),cv=n(j,"LI",{});var K9e=s(cv);yme=n(K9e,"STRONG",{});var Hft=s(yme);oRo=r(Hft,"funnel"),Hft.forEach(t),rRo=r(K9e," \u2014 "),jG=n(K9e,"A",{href:!0});var Uft=s(jG);tRo=r(Uft,"FunnelForSequenceClassification"),Uft.forEach(t),aRo=r(K9e," (Funnel Transformer model)"),K9e.forEach(t),nRo=i(j),fv=n(j,"LI",{});var Z9e=s(fv);Lme=n(Z9e,"STRONG",{});var Jft=s(Lme);sRo=r(Jft,"gpt2"),Jft.forEach(t),lRo=r(Z9e," \u2014 "),DG=n(Z9e,"A",{href:!0});var Yft=s(DG);iRo=r(Yft,"GPT2ForSequenceClassification"),Yft.forEach(t),dRo=r(Z9e," (OpenAI GPT-2 model)"),Z9e.forEach(t),cRo=i(j),mv=n(j,"LI",{});var exe=s(mv);xme=n(exe,"STRONG",{});var Kft=s(xme);fRo=r(Kft,"gpt_neo"),Kft.forEach(t),mRo=r(exe," \u2014 "),GG=n(exe,"A",{href:!0});var Zft=s(GG);gRo=r(Zft,"GPTNeoForSequenceClassification"),Zft.forEach(t),hRo=r(exe," (GPT Neo model)"),exe.forEach(t),pRo=i(j),gv=n(j,"LI",{});var oxe=s(gv);$me=n(oxe,"STRONG",{});var emt=s($me);_Ro=r(emt,"gptj"),emt.forEach(t),uRo=r(oxe," \u2014 "),OG=n(oxe,"A",{href:!0});var omt=s(OG);bRo=r(omt,"GPTJForSequenceClassification"),omt.forEach(t),vRo=r(oxe," (GPT-J model)"),oxe.forEach(t),FRo=i(j),hv=n(j,"LI",{});var rxe=s(hv);kme=n(rxe,"STRONG",{});var rmt=s(kme);TRo=r(rmt,"ibert"),rmt.forEach(t),MRo=r(rxe," \u2014 "),VG=n(rxe,"A",{href:!0});var tmt=s(VG);ERo=r(tmt,"IBertForSequenceClassification"),tmt.forEach(t),CRo=r(rxe," (I-BERT model)"),rxe.forEach(t),wRo=i(j),pv=n(j,"LI",{});var txe=s(pv);Sme=n(txe,"STRONG",{});var amt=s(Sme);ARo=r(amt,"layoutlm"),amt.forEach(t),yRo=r(txe," \u2014 "),XG=n(txe,"A",{href:!0});var nmt=s(XG);LRo=r(nmt,"LayoutLMForSequenceClassification"),nmt.forEach(t),xRo=r(txe," (LayoutLM model)"),txe.forEach(t),$Ro=i(j),_v=n(j,"LI",{});var axe=s(_v);Rme=n(axe,"STRONG",{});var smt=s(Rme);kRo=r(smt,"layoutlmv2"),smt.forEach(t),SRo=r(axe," \u2014 "),zG=n(axe,"A",{href:!0});var lmt=s(zG);RRo=r(lmt,"LayoutLMv2ForSequenceClassification"),lmt.forEach(t),PRo=r(axe," (LayoutLMv2 model)"),axe.forEach(t),BRo=i(j),uv=n(j,"LI",{});var nxe=s(uv);Pme=n(nxe,"STRONG",{});var imt=s(Pme);IRo=r(imt,"layoutlmv3"),imt.forEach(t),NRo=r(nxe," \u2014 "),WG=n(nxe,"A",{href:!0});var dmt=s(WG);qRo=r(dmt,"LayoutLMv3ForSequenceClassification"),dmt.forEach(t),jRo=r(nxe," (LayoutLMv3 model)"),nxe.forEach(t),DRo=i(j),bv=n(j,"LI",{});var sxe=s(bv);Bme=n(sxe,"STRONG",{});var cmt=s(Bme);GRo=r(cmt,"led"),cmt.forEach(t),ORo=r(sxe," \u2014 "),QG=n(sxe,"A",{href:!0});var fmt=s(QG);VRo=r(fmt,"LEDForSequenceClassification"),fmt.forEach(t),XRo=r(sxe," (LED model)"),sxe.forEach(t),zRo=i(j),vv=n(j,"LI",{});var lxe=s(vv);Ime=n(lxe,"STRONG",{});var mmt=s(Ime);WRo=r(mmt,"longformer"),mmt.forEach(t),QRo=r(lxe," \u2014 "),HG=n(lxe,"A",{href:!0});var gmt=s(HG);HRo=r(gmt,"LongformerForSequenceClassification"),gmt.forEach(t),URo=r(lxe," (Longformer model)"),lxe.forEach(t),JRo=i(j),Fv=n(j,"LI",{});var ixe=s(Fv);Nme=n(ixe,"STRONG",{});var hmt=s(Nme);YRo=r(hmt,"mbart"),hmt.forEach(t),KRo=r(ixe," \u2014 "),UG=n(ixe,"A",{href:!0});var pmt=s(UG);ZRo=r(pmt,"MBartForSequenceClassification"),pmt.forEach(t),ePo=r(ixe," (mBART model)"),ixe.forEach(t),oPo=i(j),Tv=n(j,"LI",{});var dxe=s(Tv);qme=n(dxe,"STRONG",{});var _mt=s(qme);rPo=r(_mt,"megatron-bert"),_mt.forEach(t),tPo=r(dxe," \u2014 "),JG=n(dxe,"A",{href:!0});var umt=s(JG);aPo=r(umt,"MegatronBertForSequenceClassification"),umt.forEach(t),nPo=r(dxe," (Megatron-BERT model)"),dxe.forEach(t),sPo=i(j),Mv=n(j,"LI",{});var cxe=s(Mv);jme=n(cxe,"STRONG",{});var bmt=s(jme);lPo=r(bmt,"mobilebert"),bmt.forEach(t),iPo=r(cxe," \u2014 "),YG=n(cxe,"A",{href:!0});var vmt=s(YG);dPo=r(vmt,"MobileBertForSequenceClassification"),vmt.forEach(t),cPo=r(cxe," (MobileBERT model)"),cxe.forEach(t),fPo=i(j),Ev=n(j,"LI",{});var fxe=s(Ev);Dme=n(fxe,"STRONG",{});var Fmt=s(Dme);mPo=r(Fmt,"mpnet"),Fmt.forEach(t),gPo=r(fxe," \u2014 "),KG=n(fxe,"A",{href:!0});var Tmt=s(KG);hPo=r(Tmt,"MPNetForSequenceClassification"),Tmt.forEach(t),pPo=r(fxe," (MPNet model)"),fxe.forEach(t),_Po=i(j),Cv=n(j,"LI",{});var mxe=s(Cv);Gme=n(mxe,"STRONG",{});var Mmt=s(Gme);uPo=r(Mmt,"nystromformer"),Mmt.forEach(t),bPo=r(mxe," \u2014 "),ZG=n(mxe,"A",{href:!0});var Emt=s(ZG);vPo=r(Emt,"NystromformerForSequenceClassification"),Emt.forEach(t),FPo=r(mxe," (Nystr\xF6mformer model)"),mxe.forEach(t),TPo=i(j),wv=n(j,"LI",{});var gxe=s(wv);Ome=n(gxe,"STRONG",{});var Cmt=s(Ome);MPo=r(Cmt,"openai-gpt"),Cmt.forEach(t),EPo=r(gxe," \u2014 "),eO=n(gxe,"A",{href:!0});var wmt=s(eO);CPo=r(wmt,"OpenAIGPTForSequenceClassification"),wmt.forEach(t),wPo=r(gxe," (OpenAI GPT model)"),gxe.forEach(t),APo=i(j),Av=n(j,"LI",{});var hxe=s(Av);Vme=n(hxe,"STRONG",{});var Amt=s(Vme);yPo=r(Amt,"perceiver"),Amt.forEach(t),LPo=r(hxe," \u2014 "),oO=n(hxe,"A",{href:!0});var ymt=s(oO);xPo=r(ymt,"PerceiverForSequenceClassification"),ymt.forEach(t),$Po=r(hxe," (Perceiver model)"),hxe.forEach(t),kPo=i(j),yv=n(j,"LI",{});var pxe=s(yv);Xme=n(pxe,"STRONG",{});var Lmt=s(Xme);SPo=r(Lmt,"plbart"),Lmt.forEach(t),RPo=r(pxe," \u2014 "),rO=n(pxe,"A",{href:!0});var xmt=s(rO);PPo=r(xmt,"PLBartForSequenceClassification"),xmt.forEach(t),BPo=r(pxe," (PLBart model)"),pxe.forEach(t),IPo=i(j),Lv=n(j,"LI",{});var _xe=s(Lv);zme=n(_xe,"STRONG",{});var $mt=s(zme);NPo=r($mt,"qdqbert"),$mt.forEach(t),qPo=r(_xe," \u2014 "),tO=n(_xe,"A",{href:!0});var kmt=s(tO);jPo=r(kmt,"QDQBertForSequenceClassification"),kmt.forEach(t),DPo=r(_xe," (QDQBert model)"),_xe.forEach(t),GPo=i(j),xv=n(j,"LI",{});var uxe=s(xv);Wme=n(uxe,"STRONG",{});var Smt=s(Wme);OPo=r(Smt,"reformer"),Smt.forEach(t),VPo=r(uxe," \u2014 "),aO=n(uxe,"A",{href:!0});var Rmt=s(aO);XPo=r(Rmt,"ReformerForSequenceClassification"),Rmt.forEach(t),zPo=r(uxe," (Reformer model)"),uxe.forEach(t),WPo=i(j),$v=n(j,"LI",{});var bxe=s($v);Qme=n(bxe,"STRONG",{});var Pmt=s(Qme);QPo=r(Pmt,"rembert"),Pmt.forEach(t),HPo=r(bxe," \u2014 "),nO=n(bxe,"A",{href:!0});var Bmt=s(nO);UPo=r(Bmt,"RemBertForSequenceClassification"),Bmt.forEach(t),JPo=r(bxe," (RemBERT model)"),bxe.forEach(t),YPo=i(j),kv=n(j,"LI",{});var vxe=s(kv);Hme=n(vxe,"STRONG",{});var Imt=s(Hme);KPo=r(Imt,"roberta"),Imt.forEach(t),ZPo=r(vxe," \u2014 "),sO=n(vxe,"A",{href:!0});var Nmt=s(sO);eBo=r(Nmt,"RobertaForSequenceClassification"),Nmt.forEach(t),oBo=r(vxe," (RoBERTa model)"),vxe.forEach(t),rBo=i(j),Sv=n(j,"LI",{});var Fxe=s(Sv);Ume=n(Fxe,"STRONG",{});var qmt=s(Ume);tBo=r(qmt,"roformer"),qmt.forEach(t),aBo=r(Fxe," \u2014 "),lO=n(Fxe,"A",{href:!0});var jmt=s(lO);nBo=r(jmt,"RoFormerForSequenceClassification"),jmt.forEach(t),sBo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),lBo=i(j),Rv=n(j,"LI",{});var Txe=s(Rv);Jme=n(Txe,"STRONG",{});var Dmt=s(Jme);iBo=r(Dmt,"squeezebert"),Dmt.forEach(t),dBo=r(Txe," \u2014 "),iO=n(Txe,"A",{href:!0});var Gmt=s(iO);cBo=r(Gmt,"SqueezeBertForSequenceClassification"),Gmt.forEach(t),fBo=r(Txe," (SqueezeBERT model)"),Txe.forEach(t),mBo=i(j),Pv=n(j,"LI",{});var Mxe=s(Pv);Yme=n(Mxe,"STRONG",{});var Omt=s(Yme);gBo=r(Omt,"tapas"),Omt.forEach(t),hBo=r(Mxe," \u2014 "),dO=n(Mxe,"A",{href:!0});var Vmt=s(dO);pBo=r(Vmt,"TapasForSequenceClassification"),Vmt.forEach(t),_Bo=r(Mxe," (TAPAS model)"),Mxe.forEach(t),uBo=i(j),Bv=n(j,"LI",{});var Exe=s(Bv);Kme=n(Exe,"STRONG",{});var Xmt=s(Kme);bBo=r(Xmt,"transfo-xl"),Xmt.forEach(t),vBo=r(Exe," \u2014 "),cO=n(Exe,"A",{href:!0});var zmt=s(cO);FBo=r(zmt,"TransfoXLForSequenceClassification"),zmt.forEach(t),TBo=r(Exe," (Transformer-XL model)"),Exe.forEach(t),MBo=i(j),Iv=n(j,"LI",{});var Cxe=s(Iv);Zme=n(Cxe,"STRONG",{});var Wmt=s(Zme);EBo=r(Wmt,"xlm"),Wmt.forEach(t),CBo=r(Cxe," \u2014 "),fO=n(Cxe,"A",{href:!0});var Qmt=s(fO);wBo=r(Qmt,"XLMForSequenceClassification"),Qmt.forEach(t),ABo=r(Cxe," (XLM model)"),Cxe.forEach(t),yBo=i(j),Nv=n(j,"LI",{});var wxe=s(Nv);ege=n(wxe,"STRONG",{});var Hmt=s(ege);LBo=r(Hmt,"xlm-roberta"),Hmt.forEach(t),xBo=r(wxe," \u2014 "),mO=n(wxe,"A",{href:!0});var Umt=s(mO);$Bo=r(Umt,"XLMRobertaForSequenceClassification"),Umt.forEach(t),kBo=r(wxe," (XLM-RoBERTa model)"),wxe.forEach(t),SBo=i(j),qv=n(j,"LI",{});var Axe=s(qv);oge=n(Axe,"STRONG",{});var Jmt=s(oge);RBo=r(Jmt,"xlm-roberta-xl"),Jmt.forEach(t),PBo=r(Axe," \u2014 "),gO=n(Axe,"A",{href:!0});var Ymt=s(gO);BBo=r(Ymt,"XLMRobertaXLForSequenceClassification"),Ymt.forEach(t),IBo=r(Axe," (XLM-RoBERTa-XL model)"),Axe.forEach(t),NBo=i(j),jv=n(j,"LI",{});var yxe=s(jv);rge=n(yxe,"STRONG",{});var Kmt=s(rge);qBo=r(Kmt,"xlnet"),Kmt.forEach(t),jBo=r(yxe," \u2014 "),hO=n(yxe,"A",{href:!0});var Zmt=s(hO);DBo=r(Zmt,"XLNetForSequenceClassification"),Zmt.forEach(t),GBo=r(yxe," (XLNet model)"),yxe.forEach(t),OBo=i(j),Dv=n(j,"LI",{});var Lxe=s(Dv);tge=n(Lxe,"STRONG",{});var egt=s(tge);VBo=r(egt,"yoso"),egt.forEach(t),XBo=r(Lxe," \u2014 "),pO=n(Lxe,"A",{href:!0});var ogt=s(pO);zBo=r(ogt,"YosoForSequenceClassification"),ogt.forEach(t),WBo=r(Lxe," (YOSO model)"),Lxe.forEach(t),j.forEach(t),QBo=i(sa),Gv=n(sa,"P",{});var xxe=s(Gv);HBo=r(xxe,"The model is set in evaluation mode by default using "),age=n(xxe,"CODE",{});var rgt=s(age);UBo=r(rgt,"model.eval()"),rgt.forEach(t),JBo=r(xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(xxe,"CODE",{});var tgt=s(nge);YBo=r(tgt,"model.train()"),tgt.forEach(t),xxe.forEach(t),KBo=i(sa),T(Ov.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),sje=i(f),Xi=n(f,"H2",{class:!0});var cGe=s(Xi);Vv=n(cGe,"A",{id:!0,class:!0,href:!0});var agt=s(Vv);sge=n(agt,"SPAN",{});var ngt=s(sge);T(qL.$$.fragment,ngt),ngt.forEach(t),agt.forEach(t),ZBo=i(cGe),lge=n(cGe,"SPAN",{});var sgt=s(lge);eIo=r(sgt,"AutoModelForMultipleChoice"),sgt.forEach(t),cGe.forEach(t),lje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(jL.$$.fragment,Hs),oIo=i(Hs),zi=n(Hs,"P",{});var QZ=s(zi);rIo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=n(QZ,"A",{href:!0});var lgt=s(_O);tIo=r(lgt,"from_pretrained()"),lgt.forEach(t),aIo=r(QZ," class method or the "),uO=n(QZ,"A",{href:!0});var igt=s(uO);nIo=r(igt,"from_config()"),igt.forEach(t),sIo=r(QZ,` class
method.`),QZ.forEach(t),lIo=i(Hs),DL=n(Hs,"P",{});var fGe=s(DL);iIo=r(fGe,"This class cannot be instantiated directly using "),ige=n(fGe,"CODE",{});var dgt=s(ige);dIo=r(dgt,"__init__()"),dgt.forEach(t),cIo=r(fGe," (throws an error)."),fGe.forEach(t),fIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var Kw=s(dt);T(GL.$$.fragment,Kw),mIo=i(Kw),dge=n(Kw,"P",{});var cgt=s(dge);gIo=r(cgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cgt.forEach(t),hIo=i(Kw),Wi=n(Kw,"P",{});var HZ=s(Wi);pIo=r(HZ,`Note:
Loading a model from its configuration file does `),cge=n(HZ,"STRONG",{});var fgt=s(cge);_Io=r(fgt,"not"),fgt.forEach(t),uIo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(HZ,"A",{href:!0});var mgt=s(bO);bIo=r(mgt,"from_pretrained()"),mgt.forEach(t),vIo=r(HZ," to load the model weights."),HZ.forEach(t),FIo=i(Kw),T(Xv.$$.fragment,Kw),Kw.forEach(t),TIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(OL.$$.fragment,la),MIo=i(la),fge=n(la,"P",{});var ggt=s(fge);EIo=r(ggt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ggt.forEach(t),CIo=i(la),Pa=n(la,"P",{});var Zw=s(Pa);wIo=r(Zw,"The model class to instantiate is selected based on the "),mge=n(Zw,"CODE",{});var hgt=s(mge);AIo=r(hgt,"model_type"),hgt.forEach(t),yIo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),gge=n(Zw,"CODE",{});var pgt=s(gge);LIo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),xIo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(Zw,"CODE",{});var _gt=s(hge);$Io=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),kIo=r(Zw,":"),Zw.forEach(t),SIo=i(la),K=n(la,"UL",{});var ee=s(K);zv=n(ee,"LI",{});var $xe=s(zv);pge=n($xe,"STRONG",{});var ugt=s(pge);RIo=r(ugt,"albert"),ugt.forEach(t),PIo=r($xe," \u2014 "),vO=n($xe,"A",{href:!0});var bgt=s(vO);BIo=r(bgt,"AlbertForMultipleChoice"),bgt.forEach(t),IIo=r($xe," (ALBERT model)"),$xe.forEach(t),NIo=i(ee),Wv=n(ee,"LI",{});var kxe=s(Wv);_ge=n(kxe,"STRONG",{});var vgt=s(_ge);qIo=r(vgt,"bert"),vgt.forEach(t),jIo=r(kxe," \u2014 "),FO=n(kxe,"A",{href:!0});var Fgt=s(FO);DIo=r(Fgt,"BertForMultipleChoice"),Fgt.forEach(t),GIo=r(kxe," (BERT model)"),kxe.forEach(t),OIo=i(ee),Qv=n(ee,"LI",{});var Sxe=s(Qv);uge=n(Sxe,"STRONG",{});var Tgt=s(uge);VIo=r(Tgt,"big_bird"),Tgt.forEach(t),XIo=r(Sxe," \u2014 "),TO=n(Sxe,"A",{href:!0});var Mgt=s(TO);zIo=r(Mgt,"BigBirdForMultipleChoice"),Mgt.forEach(t),WIo=r(Sxe," (BigBird model)"),Sxe.forEach(t),QIo=i(ee),Hv=n(ee,"LI",{});var Rxe=s(Hv);bge=n(Rxe,"STRONG",{});var Egt=s(bge);HIo=r(Egt,"camembert"),Egt.forEach(t),UIo=r(Rxe," \u2014 "),MO=n(Rxe,"A",{href:!0});var Cgt=s(MO);JIo=r(Cgt,"CamembertForMultipleChoice"),Cgt.forEach(t),YIo=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),KIo=i(ee),Uv=n(ee,"LI",{});var Pxe=s(Uv);vge=n(Pxe,"STRONG",{});var wgt=s(vge);ZIo=r(wgt,"canine"),wgt.forEach(t),eNo=r(Pxe," \u2014 "),EO=n(Pxe,"A",{href:!0});var Agt=s(EO);oNo=r(Agt,"CanineForMultipleChoice"),Agt.forEach(t),rNo=r(Pxe," (CANINE model)"),Pxe.forEach(t),tNo=i(ee),Jv=n(ee,"LI",{});var Bxe=s(Jv);Fge=n(Bxe,"STRONG",{});var ygt=s(Fge);aNo=r(ygt,"convbert"),ygt.forEach(t),nNo=r(Bxe," \u2014 "),CO=n(Bxe,"A",{href:!0});var Lgt=s(CO);sNo=r(Lgt,"ConvBertForMultipleChoice"),Lgt.forEach(t),lNo=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),iNo=i(ee),Yv=n(ee,"LI",{});var Ixe=s(Yv);Tge=n(Ixe,"STRONG",{});var xgt=s(Tge);dNo=r(xgt,"data2vec-text"),xgt.forEach(t),cNo=r(Ixe," \u2014 "),wO=n(Ixe,"A",{href:!0});var $gt=s(wO);fNo=r($gt,"Data2VecTextForMultipleChoice"),$gt.forEach(t),mNo=r(Ixe," (Data2VecText model)"),Ixe.forEach(t),gNo=i(ee),Kv=n(ee,"LI",{});var Nxe=s(Kv);Mge=n(Nxe,"STRONG",{});var kgt=s(Mge);hNo=r(kgt,"deberta-v2"),kgt.forEach(t),pNo=r(Nxe," \u2014 "),AO=n(Nxe,"A",{href:!0});var Sgt=s(AO);_No=r(Sgt,"DebertaV2ForMultipleChoice"),Sgt.forEach(t),uNo=r(Nxe," (DeBERTa-v2 model)"),Nxe.forEach(t),bNo=i(ee),Zv=n(ee,"LI",{});var qxe=s(Zv);Ege=n(qxe,"STRONG",{});var Rgt=s(Ege);vNo=r(Rgt,"distilbert"),Rgt.forEach(t),FNo=r(qxe," \u2014 "),yO=n(qxe,"A",{href:!0});var Pgt=s(yO);TNo=r(Pgt,"DistilBertForMultipleChoice"),Pgt.forEach(t),MNo=r(qxe," (DistilBERT model)"),qxe.forEach(t),ENo=i(ee),eF=n(ee,"LI",{});var jxe=s(eF);Cge=n(jxe,"STRONG",{});var Bgt=s(Cge);CNo=r(Bgt,"electra"),Bgt.forEach(t),wNo=r(jxe," \u2014 "),LO=n(jxe,"A",{href:!0});var Igt=s(LO);ANo=r(Igt,"ElectraForMultipleChoice"),Igt.forEach(t),yNo=r(jxe," (ELECTRA model)"),jxe.forEach(t),LNo=i(ee),oF=n(ee,"LI",{});var Dxe=s(oF);wge=n(Dxe,"STRONG",{});var Ngt=s(wge);xNo=r(Ngt,"flaubert"),Ngt.forEach(t),$No=r(Dxe," \u2014 "),xO=n(Dxe,"A",{href:!0});var qgt=s(xO);kNo=r(qgt,"FlaubertForMultipleChoice"),qgt.forEach(t),SNo=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),RNo=i(ee),rF=n(ee,"LI",{});var Gxe=s(rF);Age=n(Gxe,"STRONG",{});var jgt=s(Age);PNo=r(jgt,"fnet"),jgt.forEach(t),BNo=r(Gxe," \u2014 "),$O=n(Gxe,"A",{href:!0});var Dgt=s($O);INo=r(Dgt,"FNetForMultipleChoice"),Dgt.forEach(t),NNo=r(Gxe," (FNet model)"),Gxe.forEach(t),qNo=i(ee),tF=n(ee,"LI",{});var Oxe=s(tF);yge=n(Oxe,"STRONG",{});var Ggt=s(yge);jNo=r(Ggt,"funnel"),Ggt.forEach(t),DNo=r(Oxe," \u2014 "),kO=n(Oxe,"A",{href:!0});var Ogt=s(kO);GNo=r(Ogt,"FunnelForMultipleChoice"),Ogt.forEach(t),ONo=r(Oxe," (Funnel Transformer model)"),Oxe.forEach(t),VNo=i(ee),aF=n(ee,"LI",{});var Vxe=s(aF);Lge=n(Vxe,"STRONG",{});var Vgt=s(Lge);XNo=r(Vgt,"ibert"),Vgt.forEach(t),zNo=r(Vxe," \u2014 "),SO=n(Vxe,"A",{href:!0});var Xgt=s(SO);WNo=r(Xgt,"IBertForMultipleChoice"),Xgt.forEach(t),QNo=r(Vxe," (I-BERT model)"),Vxe.forEach(t),HNo=i(ee),nF=n(ee,"LI",{});var Xxe=s(nF);xge=n(Xxe,"STRONG",{});var zgt=s(xge);UNo=r(zgt,"longformer"),zgt.forEach(t),JNo=r(Xxe," \u2014 "),RO=n(Xxe,"A",{href:!0});var Wgt=s(RO);YNo=r(Wgt,"LongformerForMultipleChoice"),Wgt.forEach(t),KNo=r(Xxe," (Longformer model)"),Xxe.forEach(t),ZNo=i(ee),sF=n(ee,"LI",{});var zxe=s(sF);$ge=n(zxe,"STRONG",{});var Qgt=s($ge);eqo=r(Qgt,"megatron-bert"),Qgt.forEach(t),oqo=r(zxe," \u2014 "),PO=n(zxe,"A",{href:!0});var Hgt=s(PO);rqo=r(Hgt,"MegatronBertForMultipleChoice"),Hgt.forEach(t),tqo=r(zxe," (Megatron-BERT model)"),zxe.forEach(t),aqo=i(ee),lF=n(ee,"LI",{});var Wxe=s(lF);kge=n(Wxe,"STRONG",{});var Ugt=s(kge);nqo=r(Ugt,"mobilebert"),Ugt.forEach(t),sqo=r(Wxe," \u2014 "),BO=n(Wxe,"A",{href:!0});var Jgt=s(BO);lqo=r(Jgt,"MobileBertForMultipleChoice"),Jgt.forEach(t),iqo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),dqo=i(ee),iF=n(ee,"LI",{});var Qxe=s(iF);Sge=n(Qxe,"STRONG",{});var Ygt=s(Sge);cqo=r(Ygt,"mpnet"),Ygt.forEach(t),fqo=r(Qxe," \u2014 "),IO=n(Qxe,"A",{href:!0});var Kgt=s(IO);mqo=r(Kgt,"MPNetForMultipleChoice"),Kgt.forEach(t),gqo=r(Qxe," (MPNet model)"),Qxe.forEach(t),hqo=i(ee),dF=n(ee,"LI",{});var Hxe=s(dF);Rge=n(Hxe,"STRONG",{});var Zgt=s(Rge);pqo=r(Zgt,"nystromformer"),Zgt.forEach(t),_qo=r(Hxe," \u2014 "),NO=n(Hxe,"A",{href:!0});var eht=s(NO);uqo=r(eht,"NystromformerForMultipleChoice"),eht.forEach(t),bqo=r(Hxe," (Nystr\xF6mformer model)"),Hxe.forEach(t),vqo=i(ee),cF=n(ee,"LI",{});var Uxe=s(cF);Pge=n(Uxe,"STRONG",{});var oht=s(Pge);Fqo=r(oht,"qdqbert"),oht.forEach(t),Tqo=r(Uxe," \u2014 "),qO=n(Uxe,"A",{href:!0});var rht=s(qO);Mqo=r(rht,"QDQBertForMultipleChoice"),rht.forEach(t),Eqo=r(Uxe," (QDQBert model)"),Uxe.forEach(t),Cqo=i(ee),fF=n(ee,"LI",{});var Jxe=s(fF);Bge=n(Jxe,"STRONG",{});var tht=s(Bge);wqo=r(tht,"rembert"),tht.forEach(t),Aqo=r(Jxe," \u2014 "),jO=n(Jxe,"A",{href:!0});var aht=s(jO);yqo=r(aht,"RemBertForMultipleChoice"),aht.forEach(t),Lqo=r(Jxe," (RemBERT model)"),Jxe.forEach(t),xqo=i(ee),mF=n(ee,"LI",{});var Yxe=s(mF);Ige=n(Yxe,"STRONG",{});var nht=s(Ige);$qo=r(nht,"roberta"),nht.forEach(t),kqo=r(Yxe," \u2014 "),DO=n(Yxe,"A",{href:!0});var sht=s(DO);Sqo=r(sht,"RobertaForMultipleChoice"),sht.forEach(t),Rqo=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),Pqo=i(ee),gF=n(ee,"LI",{});var Kxe=s(gF);Nge=n(Kxe,"STRONG",{});var lht=s(Nge);Bqo=r(lht,"roformer"),lht.forEach(t),Iqo=r(Kxe," \u2014 "),GO=n(Kxe,"A",{href:!0});var iht=s(GO);Nqo=r(iht,"RoFormerForMultipleChoice"),iht.forEach(t),qqo=r(Kxe," (RoFormer model)"),Kxe.forEach(t),jqo=i(ee),hF=n(ee,"LI",{});var Zxe=s(hF);qge=n(Zxe,"STRONG",{});var dht=s(qge);Dqo=r(dht,"squeezebert"),dht.forEach(t),Gqo=r(Zxe," \u2014 "),OO=n(Zxe,"A",{href:!0});var cht=s(OO);Oqo=r(cht,"SqueezeBertForMultipleChoice"),cht.forEach(t),Vqo=r(Zxe," (SqueezeBERT model)"),Zxe.forEach(t),Xqo=i(ee),pF=n(ee,"LI",{});var e$e=s(pF);jge=n(e$e,"STRONG",{});var fht=s(jge);zqo=r(fht,"xlm"),fht.forEach(t),Wqo=r(e$e," \u2014 "),VO=n(e$e,"A",{href:!0});var mht=s(VO);Qqo=r(mht,"XLMForMultipleChoice"),mht.forEach(t),Hqo=r(e$e," (XLM model)"),e$e.forEach(t),Uqo=i(ee),_F=n(ee,"LI",{});var o$e=s(_F);Dge=n(o$e,"STRONG",{});var ght=s(Dge);Jqo=r(ght,"xlm-roberta"),ght.forEach(t),Yqo=r(o$e," \u2014 "),XO=n(o$e,"A",{href:!0});var hht=s(XO);Kqo=r(hht,"XLMRobertaForMultipleChoice"),hht.forEach(t),Zqo=r(o$e," (XLM-RoBERTa model)"),o$e.forEach(t),ejo=i(ee),uF=n(ee,"LI",{});var r$e=s(uF);Gge=n(r$e,"STRONG",{});var pht=s(Gge);ojo=r(pht,"xlm-roberta-xl"),pht.forEach(t),rjo=r(r$e," \u2014 "),zO=n(r$e,"A",{href:!0});var _ht=s(zO);tjo=r(_ht,"XLMRobertaXLForMultipleChoice"),_ht.forEach(t),ajo=r(r$e," (XLM-RoBERTa-XL model)"),r$e.forEach(t),njo=i(ee),bF=n(ee,"LI",{});var t$e=s(bF);Oge=n(t$e,"STRONG",{});var uht=s(Oge);sjo=r(uht,"xlnet"),uht.forEach(t),ljo=r(t$e," \u2014 "),WO=n(t$e,"A",{href:!0});var bht=s(WO);ijo=r(bht,"XLNetForMultipleChoice"),bht.forEach(t),djo=r(t$e," (XLNet model)"),t$e.forEach(t),cjo=i(ee),vF=n(ee,"LI",{});var a$e=s(vF);Vge=n(a$e,"STRONG",{});var vht=s(Vge);fjo=r(vht,"yoso"),vht.forEach(t),mjo=r(a$e," \u2014 "),QO=n(a$e,"A",{href:!0});var Fht=s(QO);gjo=r(Fht,"YosoForMultipleChoice"),Fht.forEach(t),hjo=r(a$e," (YOSO model)"),a$e.forEach(t),ee.forEach(t),pjo=i(la),FF=n(la,"P",{});var n$e=s(FF);_jo=r(n$e,"The model is set in evaluation mode by default using "),Xge=n(n$e,"CODE",{});var Tht=s(Xge);ujo=r(Tht,"model.eval()"),Tht.forEach(t),bjo=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(n$e,"CODE",{});var Mht=s(zge);vjo=r(Mht,"model.train()"),Mht.forEach(t),n$e.forEach(t),Fjo=i(la),T(TF.$$.fragment,la),la.forEach(t),Hs.forEach(t),ije=i(f),Qi=n(f,"H2",{class:!0});var mGe=s(Qi);MF=n(mGe,"A",{id:!0,class:!0,href:!0});var Eht=s(MF);Wge=n(Eht,"SPAN",{});var Cht=s(Wge);T(VL.$$.fragment,Cht),Cht.forEach(t),Eht.forEach(t),Tjo=i(mGe),Qge=n(mGe,"SPAN",{});var wht=s(Qge);Mjo=r(wht,"AutoModelForNextSentencePrediction"),wht.forEach(t),mGe.forEach(t),dje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(XL.$$.fragment,Us),Ejo=i(Us),Hi=n(Us,"P",{});var UZ=s(Hi);Cjo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=n(UZ,"A",{href:!0});var Aht=s(HO);wjo=r(Aht,"from_pretrained()"),Aht.forEach(t),Ajo=r(UZ," class method or the "),UO=n(UZ,"A",{href:!0});var yht=s(UO);yjo=r(yht,"from_config()"),yht.forEach(t),Ljo=r(UZ,` class
method.`),UZ.forEach(t),xjo=i(Us),zL=n(Us,"P",{});var gGe=s(zL);$jo=r(gGe,"This class cannot be instantiated directly using "),Hge=n(gGe,"CODE",{});var Lht=s(Hge);kjo=r(Lht,"__init__()"),Lht.forEach(t),Sjo=r(gGe," (throws an error)."),gGe.forEach(t),Rjo=i(Us),ct=n(Us,"DIV",{class:!0});var eA=s(ct);T(WL.$$.fragment,eA),Pjo=i(eA),Uge=n(eA,"P",{});var xht=s(Uge);Bjo=r(xht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xht.forEach(t),Ijo=i(eA),Ui=n(eA,"P",{});var JZ=s(Ui);Njo=r(JZ,`Note:
Loading a model from its configuration file does `),Jge=n(JZ,"STRONG",{});var $ht=s(Jge);qjo=r($ht,"not"),$ht.forEach(t),jjo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(JZ,"A",{href:!0});var kht=s(JO);Djo=r(kht,"from_pretrained()"),kht.forEach(t),Gjo=r(JZ," to load the model weights."),JZ.forEach(t),Ojo=i(eA),T(EF.$$.fragment,eA),eA.forEach(t),Vjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(QL.$$.fragment,ia),Xjo=i(ia),Yge=n(ia,"P",{});var Sht=s(Yge);zjo=r(Sht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sht.forEach(t),Wjo=i(ia),Ba=n(ia,"P",{});var oA=s(Ba);Qjo=r(oA,"The model class to instantiate is selected based on the "),Kge=n(oA,"CODE",{});var Rht=s(Kge);Hjo=r(Rht,"model_type"),Rht.forEach(t),Ujo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Zge=n(oA,"CODE",{});var Pht=s(Zge);Jjo=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),Yjo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(oA,"CODE",{});var Bht=s(ehe);Kjo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),Zjo=r(oA,":"),oA.forEach(t),eDo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);CF=n(Js,"LI",{});var s$e=s(CF);ohe=n(s$e,"STRONG",{});var Iht=s(ohe);oDo=r(Iht,"bert"),Iht.forEach(t),rDo=r(s$e," \u2014 "),YO=n(s$e,"A",{href:!0});var Nht=s(YO);tDo=r(Nht,"BertForNextSentencePrediction"),Nht.forEach(t),aDo=r(s$e," (BERT model)"),s$e.forEach(t),nDo=i(Js),wF=n(Js,"LI",{});var l$e=s(wF);rhe=n(l$e,"STRONG",{});var qht=s(rhe);sDo=r(qht,"fnet"),qht.forEach(t),lDo=r(l$e," \u2014 "),KO=n(l$e,"A",{href:!0});var jht=s(KO);iDo=r(jht,"FNetForNextSentencePrediction"),jht.forEach(t),dDo=r(l$e," (FNet model)"),l$e.forEach(t),cDo=i(Js),AF=n(Js,"LI",{});var i$e=s(AF);the=n(i$e,"STRONG",{});var Dht=s(the);fDo=r(Dht,"megatron-bert"),Dht.forEach(t),mDo=r(i$e," \u2014 "),ZO=n(i$e,"A",{href:!0});var Ght=s(ZO);gDo=r(Ght,"MegatronBertForNextSentencePrediction"),Ght.forEach(t),hDo=r(i$e," (Megatron-BERT model)"),i$e.forEach(t),pDo=i(Js),yF=n(Js,"LI",{});var d$e=s(yF);ahe=n(d$e,"STRONG",{});var Oht=s(ahe);_Do=r(Oht,"mobilebert"),Oht.forEach(t),uDo=r(d$e," \u2014 "),eV=n(d$e,"A",{href:!0});var Vht=s(eV);bDo=r(Vht,"MobileBertForNextSentencePrediction"),Vht.forEach(t),vDo=r(d$e," (MobileBERT model)"),d$e.forEach(t),FDo=i(Js),LF=n(Js,"LI",{});var c$e=s(LF);nhe=n(c$e,"STRONG",{});var Xht=s(nhe);TDo=r(Xht,"qdqbert"),Xht.forEach(t),MDo=r(c$e," \u2014 "),oV=n(c$e,"A",{href:!0});var zht=s(oV);EDo=r(zht,"QDQBertForNextSentencePrediction"),zht.forEach(t),CDo=r(c$e," (QDQBert model)"),c$e.forEach(t),Js.forEach(t),wDo=i(ia),xF=n(ia,"P",{});var f$e=s(xF);ADo=r(f$e,"The model is set in evaluation mode by default using "),she=n(f$e,"CODE",{});var Wht=s(she);yDo=r(Wht,"model.eval()"),Wht.forEach(t),LDo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(f$e,"CODE",{});var Qht=s(lhe);xDo=r(Qht,"model.train()"),Qht.forEach(t),f$e.forEach(t),$Do=i(ia),T($F.$$.fragment,ia),ia.forEach(t),Us.forEach(t),cje=i(f),Ji=n(f,"H2",{class:!0});var hGe=s(Ji);kF=n(hGe,"A",{id:!0,class:!0,href:!0});var Hht=s(kF);ihe=n(Hht,"SPAN",{});var Uht=s(ihe);T(HL.$$.fragment,Uht),Uht.forEach(t),Hht.forEach(t),kDo=i(hGe),dhe=n(hGe,"SPAN",{});var Jht=s(dhe);SDo=r(Jht,"AutoModelForTokenClassification"),Jht.forEach(t),hGe.forEach(t),fje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(UL.$$.fragment,Ys),RDo=i(Ys),Yi=n(Ys,"P",{});var YZ=s(Yi);PDo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=n(YZ,"A",{href:!0});var Yht=s(rV);BDo=r(Yht,"from_pretrained()"),Yht.forEach(t),IDo=r(YZ," class method or the "),tV=n(YZ,"A",{href:!0});var Kht=s(tV);NDo=r(Kht,"from_config()"),Kht.forEach(t),qDo=r(YZ,` class
method.`),YZ.forEach(t),jDo=i(Ys),JL=n(Ys,"P",{});var pGe=s(JL);DDo=r(pGe,"This class cannot be instantiated directly using "),che=n(pGe,"CODE",{});var Zht=s(che);GDo=r(Zht,"__init__()"),Zht.forEach(t),ODo=r(pGe," (throws an error)."),pGe.forEach(t),VDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var rA=s(ft);T(YL.$$.fragment,rA),XDo=i(rA),fhe=n(rA,"P",{});var ept=s(fhe);zDo=r(ept,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ept.forEach(t),WDo=i(rA),Ki=n(rA,"P",{});var KZ=s(Ki);QDo=r(KZ,`Note:
Loading a model from its configuration file does `),mhe=n(KZ,"STRONG",{});var opt=s(mhe);HDo=r(opt,"not"),opt.forEach(t),UDo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(KZ,"A",{href:!0});var rpt=s(aV);JDo=r(rpt,"from_pretrained()"),rpt.forEach(t),YDo=r(KZ," to load the model weights."),KZ.forEach(t),KDo=i(rA),T(SF.$$.fragment,rA),rA.forEach(t),ZDo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(KL.$$.fragment,da),eGo=i(da),ghe=n(da,"P",{});var tpt=s(ghe);oGo=r(tpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tpt.forEach(t),rGo=i(da),Ia=n(da,"P",{});var tA=s(Ia);tGo=r(tA,"The model class to instantiate is selected based on the "),hhe=n(tA,"CODE",{});var apt=s(hhe);aGo=r(apt,"model_type"),apt.forEach(t),nGo=r(tA,` property of the config object (either
passed as an argument or loaded from `),phe=n(tA,"CODE",{});var npt=s(phe);sGo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),lGo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(tA,"CODE",{});var spt=s(_he);iGo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),dGo=r(tA,":"),tA.forEach(t),cGo=i(da),U=n(da,"UL",{});var J=s(U);RF=n(J,"LI",{});var m$e=s(RF);uhe=n(m$e,"STRONG",{});var lpt=s(uhe);fGo=r(lpt,"albert"),lpt.forEach(t),mGo=r(m$e," \u2014 "),nV=n(m$e,"A",{href:!0});var ipt=s(nV);gGo=r(ipt,"AlbertForTokenClassification"),ipt.forEach(t),hGo=r(m$e," (ALBERT model)"),m$e.forEach(t),pGo=i(J),PF=n(J,"LI",{});var g$e=s(PF);bhe=n(g$e,"STRONG",{});var dpt=s(bhe);_Go=r(dpt,"bert"),dpt.forEach(t),uGo=r(g$e," \u2014 "),sV=n(g$e,"A",{href:!0});var cpt=s(sV);bGo=r(cpt,"BertForTokenClassification"),cpt.forEach(t),vGo=r(g$e," (BERT model)"),g$e.forEach(t),FGo=i(J),BF=n(J,"LI",{});var h$e=s(BF);vhe=n(h$e,"STRONG",{});var fpt=s(vhe);TGo=r(fpt,"big_bird"),fpt.forEach(t),MGo=r(h$e," \u2014 "),lV=n(h$e,"A",{href:!0});var mpt=s(lV);EGo=r(mpt,"BigBirdForTokenClassification"),mpt.forEach(t),CGo=r(h$e," (BigBird model)"),h$e.forEach(t),wGo=i(J),IF=n(J,"LI",{});var p$e=s(IF);Fhe=n(p$e,"STRONG",{});var gpt=s(Fhe);AGo=r(gpt,"camembert"),gpt.forEach(t),yGo=r(p$e," \u2014 "),iV=n(p$e,"A",{href:!0});var hpt=s(iV);LGo=r(hpt,"CamembertForTokenClassification"),hpt.forEach(t),xGo=r(p$e," (CamemBERT model)"),p$e.forEach(t),$Go=i(J),NF=n(J,"LI",{});var _$e=s(NF);The=n(_$e,"STRONG",{});var ppt=s(The);kGo=r(ppt,"canine"),ppt.forEach(t),SGo=r(_$e," \u2014 "),dV=n(_$e,"A",{href:!0});var _pt=s(dV);RGo=r(_pt,"CanineForTokenClassification"),_pt.forEach(t),PGo=r(_$e," (CANINE model)"),_$e.forEach(t),BGo=i(J),qF=n(J,"LI",{});var u$e=s(qF);Mhe=n(u$e,"STRONG",{});var upt=s(Mhe);IGo=r(upt,"convbert"),upt.forEach(t),NGo=r(u$e," \u2014 "),cV=n(u$e,"A",{href:!0});var bpt=s(cV);qGo=r(bpt,"ConvBertForTokenClassification"),bpt.forEach(t),jGo=r(u$e," (ConvBERT model)"),u$e.forEach(t),DGo=i(J),jF=n(J,"LI",{});var b$e=s(jF);Ehe=n(b$e,"STRONG",{});var vpt=s(Ehe);GGo=r(vpt,"data2vec-text"),vpt.forEach(t),OGo=r(b$e," \u2014 "),fV=n(b$e,"A",{href:!0});var Fpt=s(fV);VGo=r(Fpt,"Data2VecTextForTokenClassification"),Fpt.forEach(t),XGo=r(b$e," (Data2VecText model)"),b$e.forEach(t),zGo=i(J),DF=n(J,"LI",{});var v$e=s(DF);Che=n(v$e,"STRONG",{});var Tpt=s(Che);WGo=r(Tpt,"deberta"),Tpt.forEach(t),QGo=r(v$e," \u2014 "),mV=n(v$e,"A",{href:!0});var Mpt=s(mV);HGo=r(Mpt,"DebertaForTokenClassification"),Mpt.forEach(t),UGo=r(v$e," (DeBERTa model)"),v$e.forEach(t),JGo=i(J),GF=n(J,"LI",{});var F$e=s(GF);whe=n(F$e,"STRONG",{});var Ept=s(whe);YGo=r(Ept,"deberta-v2"),Ept.forEach(t),KGo=r(F$e," \u2014 "),gV=n(F$e,"A",{href:!0});var Cpt=s(gV);ZGo=r(Cpt,"DebertaV2ForTokenClassification"),Cpt.forEach(t),eOo=r(F$e," (DeBERTa-v2 model)"),F$e.forEach(t),oOo=i(J),OF=n(J,"LI",{});var T$e=s(OF);Ahe=n(T$e,"STRONG",{});var wpt=s(Ahe);rOo=r(wpt,"distilbert"),wpt.forEach(t),tOo=r(T$e," \u2014 "),hV=n(T$e,"A",{href:!0});var Apt=s(hV);aOo=r(Apt,"DistilBertForTokenClassification"),Apt.forEach(t),nOo=r(T$e," (DistilBERT model)"),T$e.forEach(t),sOo=i(J),VF=n(J,"LI",{});var M$e=s(VF);yhe=n(M$e,"STRONG",{});var ypt=s(yhe);lOo=r(ypt,"electra"),ypt.forEach(t),iOo=r(M$e," \u2014 "),pV=n(M$e,"A",{href:!0});var Lpt=s(pV);dOo=r(Lpt,"ElectraForTokenClassification"),Lpt.forEach(t),cOo=r(M$e," (ELECTRA model)"),M$e.forEach(t),fOo=i(J),XF=n(J,"LI",{});var E$e=s(XF);Lhe=n(E$e,"STRONG",{});var xpt=s(Lhe);mOo=r(xpt,"flaubert"),xpt.forEach(t),gOo=r(E$e," \u2014 "),_V=n(E$e,"A",{href:!0});var $pt=s(_V);hOo=r($pt,"FlaubertForTokenClassification"),$pt.forEach(t),pOo=r(E$e," (FlauBERT model)"),E$e.forEach(t),_Oo=i(J),zF=n(J,"LI",{});var C$e=s(zF);xhe=n(C$e,"STRONG",{});var kpt=s(xhe);uOo=r(kpt,"fnet"),kpt.forEach(t),bOo=r(C$e," \u2014 "),uV=n(C$e,"A",{href:!0});var Spt=s(uV);vOo=r(Spt,"FNetForTokenClassification"),Spt.forEach(t),FOo=r(C$e," (FNet model)"),C$e.forEach(t),TOo=i(J),WF=n(J,"LI",{});var w$e=s(WF);$he=n(w$e,"STRONG",{});var Rpt=s($he);MOo=r(Rpt,"funnel"),Rpt.forEach(t),EOo=r(w$e," \u2014 "),bV=n(w$e,"A",{href:!0});var Ppt=s(bV);COo=r(Ppt,"FunnelForTokenClassification"),Ppt.forEach(t),wOo=r(w$e," (Funnel Transformer model)"),w$e.forEach(t),AOo=i(J),QF=n(J,"LI",{});var A$e=s(QF);khe=n(A$e,"STRONG",{});var Bpt=s(khe);yOo=r(Bpt,"gpt2"),Bpt.forEach(t),LOo=r(A$e," \u2014 "),vV=n(A$e,"A",{href:!0});var Ipt=s(vV);xOo=r(Ipt,"GPT2ForTokenClassification"),Ipt.forEach(t),$Oo=r(A$e," (OpenAI GPT-2 model)"),A$e.forEach(t),kOo=i(J),HF=n(J,"LI",{});var y$e=s(HF);She=n(y$e,"STRONG",{});var Npt=s(She);SOo=r(Npt,"ibert"),Npt.forEach(t),ROo=r(y$e," \u2014 "),FV=n(y$e,"A",{href:!0});var qpt=s(FV);POo=r(qpt,"IBertForTokenClassification"),qpt.forEach(t),BOo=r(y$e," (I-BERT model)"),y$e.forEach(t),IOo=i(J),UF=n(J,"LI",{});var L$e=s(UF);Rhe=n(L$e,"STRONG",{});var jpt=s(Rhe);NOo=r(jpt,"layoutlm"),jpt.forEach(t),qOo=r(L$e," \u2014 "),TV=n(L$e,"A",{href:!0});var Dpt=s(TV);jOo=r(Dpt,"LayoutLMForTokenClassification"),Dpt.forEach(t),DOo=r(L$e," (LayoutLM model)"),L$e.forEach(t),GOo=i(J),JF=n(J,"LI",{});var x$e=s(JF);Phe=n(x$e,"STRONG",{});var Gpt=s(Phe);OOo=r(Gpt,"layoutlmv2"),Gpt.forEach(t),VOo=r(x$e," \u2014 "),MV=n(x$e,"A",{href:!0});var Opt=s(MV);XOo=r(Opt,"LayoutLMv2ForTokenClassification"),Opt.forEach(t),zOo=r(x$e," (LayoutLMv2 model)"),x$e.forEach(t),WOo=i(J),YF=n(J,"LI",{});var $$e=s(YF);Bhe=n($$e,"STRONG",{});var Vpt=s(Bhe);QOo=r(Vpt,"layoutlmv3"),Vpt.forEach(t),HOo=r($$e," \u2014 "),EV=n($$e,"A",{href:!0});var Xpt=s(EV);UOo=r(Xpt,"LayoutLMv3ForTokenClassification"),Xpt.forEach(t),JOo=r($$e," (LayoutLMv3 model)"),$$e.forEach(t),YOo=i(J),KF=n(J,"LI",{});var k$e=s(KF);Ihe=n(k$e,"STRONG",{});var zpt=s(Ihe);KOo=r(zpt,"longformer"),zpt.forEach(t),ZOo=r(k$e," \u2014 "),CV=n(k$e,"A",{href:!0});var Wpt=s(CV);eVo=r(Wpt,"LongformerForTokenClassification"),Wpt.forEach(t),oVo=r(k$e," (Longformer model)"),k$e.forEach(t),rVo=i(J),ZF=n(J,"LI",{});var S$e=s(ZF);Nhe=n(S$e,"STRONG",{});var Qpt=s(Nhe);tVo=r(Qpt,"megatron-bert"),Qpt.forEach(t),aVo=r(S$e," \u2014 "),wV=n(S$e,"A",{href:!0});var Hpt=s(wV);nVo=r(Hpt,"MegatronBertForTokenClassification"),Hpt.forEach(t),sVo=r(S$e," (Megatron-BERT model)"),S$e.forEach(t),lVo=i(J),e6=n(J,"LI",{});var R$e=s(e6);qhe=n(R$e,"STRONG",{});var Upt=s(qhe);iVo=r(Upt,"mobilebert"),Upt.forEach(t),dVo=r(R$e," \u2014 "),AV=n(R$e,"A",{href:!0});var Jpt=s(AV);cVo=r(Jpt,"MobileBertForTokenClassification"),Jpt.forEach(t),fVo=r(R$e," (MobileBERT model)"),R$e.forEach(t),mVo=i(J),o6=n(J,"LI",{});var P$e=s(o6);jhe=n(P$e,"STRONG",{});var Ypt=s(jhe);gVo=r(Ypt,"mpnet"),Ypt.forEach(t),hVo=r(P$e," \u2014 "),yV=n(P$e,"A",{href:!0});var Kpt=s(yV);pVo=r(Kpt,"MPNetForTokenClassification"),Kpt.forEach(t),_Vo=r(P$e," (MPNet model)"),P$e.forEach(t),uVo=i(J),r6=n(J,"LI",{});var B$e=s(r6);Dhe=n(B$e,"STRONG",{});var Zpt=s(Dhe);bVo=r(Zpt,"nystromformer"),Zpt.forEach(t),vVo=r(B$e," \u2014 "),LV=n(B$e,"A",{href:!0});var e_t=s(LV);FVo=r(e_t,"NystromformerForTokenClassification"),e_t.forEach(t),TVo=r(B$e," (Nystr\xF6mformer model)"),B$e.forEach(t),MVo=i(J),t6=n(J,"LI",{});var I$e=s(t6);Ghe=n(I$e,"STRONG",{});var o_t=s(Ghe);EVo=r(o_t,"qdqbert"),o_t.forEach(t),CVo=r(I$e," \u2014 "),xV=n(I$e,"A",{href:!0});var r_t=s(xV);wVo=r(r_t,"QDQBertForTokenClassification"),r_t.forEach(t),AVo=r(I$e," (QDQBert model)"),I$e.forEach(t),yVo=i(J),a6=n(J,"LI",{});var N$e=s(a6);Ohe=n(N$e,"STRONG",{});var t_t=s(Ohe);LVo=r(t_t,"rembert"),t_t.forEach(t),xVo=r(N$e," \u2014 "),$V=n(N$e,"A",{href:!0});var a_t=s($V);$Vo=r(a_t,"RemBertForTokenClassification"),a_t.forEach(t),kVo=r(N$e," (RemBERT model)"),N$e.forEach(t),SVo=i(J),n6=n(J,"LI",{});var q$e=s(n6);Vhe=n(q$e,"STRONG",{});var n_t=s(Vhe);RVo=r(n_t,"roberta"),n_t.forEach(t),PVo=r(q$e," \u2014 "),kV=n(q$e,"A",{href:!0});var s_t=s(kV);BVo=r(s_t,"RobertaForTokenClassification"),s_t.forEach(t),IVo=r(q$e," (RoBERTa model)"),q$e.forEach(t),NVo=i(J),s6=n(J,"LI",{});var j$e=s(s6);Xhe=n(j$e,"STRONG",{});var l_t=s(Xhe);qVo=r(l_t,"roformer"),l_t.forEach(t),jVo=r(j$e," \u2014 "),SV=n(j$e,"A",{href:!0});var i_t=s(SV);DVo=r(i_t,"RoFormerForTokenClassification"),i_t.forEach(t),GVo=r(j$e," (RoFormer model)"),j$e.forEach(t),OVo=i(J),l6=n(J,"LI",{});var D$e=s(l6);zhe=n(D$e,"STRONG",{});var d_t=s(zhe);VVo=r(d_t,"squeezebert"),d_t.forEach(t),XVo=r(D$e," \u2014 "),RV=n(D$e,"A",{href:!0});var c_t=s(RV);zVo=r(c_t,"SqueezeBertForTokenClassification"),c_t.forEach(t),WVo=r(D$e," (SqueezeBERT model)"),D$e.forEach(t),QVo=i(J),i6=n(J,"LI",{});var G$e=s(i6);Whe=n(G$e,"STRONG",{});var f_t=s(Whe);HVo=r(f_t,"xlm"),f_t.forEach(t),UVo=r(G$e," \u2014 "),PV=n(G$e,"A",{href:!0});var m_t=s(PV);JVo=r(m_t,"XLMForTokenClassification"),m_t.forEach(t),YVo=r(G$e," (XLM model)"),G$e.forEach(t),KVo=i(J),d6=n(J,"LI",{});var O$e=s(d6);Qhe=n(O$e,"STRONG",{});var g_t=s(Qhe);ZVo=r(g_t,"xlm-roberta"),g_t.forEach(t),eXo=r(O$e," \u2014 "),BV=n(O$e,"A",{href:!0});var h_t=s(BV);oXo=r(h_t,"XLMRobertaForTokenClassification"),h_t.forEach(t),rXo=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),tXo=i(J),c6=n(J,"LI",{});var V$e=s(c6);Hhe=n(V$e,"STRONG",{});var p_t=s(Hhe);aXo=r(p_t,"xlm-roberta-xl"),p_t.forEach(t),nXo=r(V$e," \u2014 "),IV=n(V$e,"A",{href:!0});var __t=s(IV);sXo=r(__t,"XLMRobertaXLForTokenClassification"),__t.forEach(t),lXo=r(V$e," (XLM-RoBERTa-XL model)"),V$e.forEach(t),iXo=i(J),f6=n(J,"LI",{});var X$e=s(f6);Uhe=n(X$e,"STRONG",{});var u_t=s(Uhe);dXo=r(u_t,"xlnet"),u_t.forEach(t),cXo=r(X$e," \u2014 "),NV=n(X$e,"A",{href:!0});var b_t=s(NV);fXo=r(b_t,"XLNetForTokenClassification"),b_t.forEach(t),mXo=r(X$e," (XLNet model)"),X$e.forEach(t),gXo=i(J),m6=n(J,"LI",{});var z$e=s(m6);Jhe=n(z$e,"STRONG",{});var v_t=s(Jhe);hXo=r(v_t,"yoso"),v_t.forEach(t),pXo=r(z$e," \u2014 "),qV=n(z$e,"A",{href:!0});var F_t=s(qV);_Xo=r(F_t,"YosoForTokenClassification"),F_t.forEach(t),uXo=r(z$e," (YOSO model)"),z$e.forEach(t),J.forEach(t),bXo=i(da),g6=n(da,"P",{});var W$e=s(g6);vXo=r(W$e,"The model is set in evaluation mode by default using "),Yhe=n(W$e,"CODE",{});var T_t=s(Yhe);FXo=r(T_t,"model.eval()"),T_t.forEach(t),TXo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(W$e,"CODE",{});var M_t=s(Khe);MXo=r(M_t,"model.train()"),M_t.forEach(t),W$e.forEach(t),EXo=i(da),T(h6.$$.fragment,da),da.forEach(t),Ys.forEach(t),mje=i(f),Zi=n(f,"H2",{class:!0});var _Ge=s(Zi);p6=n(_Ge,"A",{id:!0,class:!0,href:!0});var E_t=s(p6);Zhe=n(E_t,"SPAN",{});var C_t=s(Zhe);T(ZL.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),CXo=i(_Ge),epe=n(_Ge,"SPAN",{});var w_t=s(epe);wXo=r(w_t,"AutoModelForQuestionAnswering"),w_t.forEach(t),_Ge.forEach(t),gje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(e8.$$.fragment,Ks),AXo=i(Ks),ed=n(Ks,"P",{});var ZZ=s(ed);yXo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=n(ZZ,"A",{href:!0});var A_t=s(jV);LXo=r(A_t,"from_pretrained()"),A_t.forEach(t),xXo=r(ZZ," class method or the "),DV=n(ZZ,"A",{href:!0});var y_t=s(DV);$Xo=r(y_t,"from_config()"),y_t.forEach(t),kXo=r(ZZ,` class
method.`),ZZ.forEach(t),SXo=i(Ks),o8=n(Ks,"P",{});var uGe=s(o8);RXo=r(uGe,"This class cannot be instantiated directly using "),ope=n(uGe,"CODE",{});var L_t=s(ope);PXo=r(L_t,"__init__()"),L_t.forEach(t),BXo=r(uGe," (throws an error)."),uGe.forEach(t),IXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var aA=s(mt);T(r8.$$.fragment,aA),NXo=i(aA),rpe=n(aA,"P",{});var x_t=s(rpe);qXo=r(x_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x_t.forEach(t),jXo=i(aA),od=n(aA,"P",{});var eee=s(od);DXo=r(eee,`Note:
Loading a model from its configuration file does `),tpe=n(eee,"STRONG",{});var $_t=s(tpe);GXo=r($_t,"not"),$_t.forEach(t),OXo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(eee,"A",{href:!0});var k_t=s(GV);VXo=r(k_t,"from_pretrained()"),k_t.forEach(t),XXo=r(eee," to load the model weights."),eee.forEach(t),zXo=i(aA),T(_6.$$.fragment,aA),aA.forEach(t),WXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(t8.$$.fragment,ca),QXo=i(ca),ape=n(ca,"P",{});var S_t=s(ape);HXo=r(S_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S_t.forEach(t),UXo=i(ca),Na=n(ca,"P",{});var nA=s(Na);JXo=r(nA,"The model class to instantiate is selected based on the "),npe=n(nA,"CODE",{});var R_t=s(npe);YXo=r(R_t,"model_type"),R_t.forEach(t),KXo=r(nA,` property of the config object (either
passed as an argument or loaded from `),spe=n(nA,"CODE",{});var P_t=s(spe);ZXo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),ezo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(nA,"CODE",{});var B_t=s(lpe);ozo=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),rzo=r(nA,":"),nA.forEach(t),tzo=i(ca),V=n(ca,"UL",{});var X=s(V);u6=n(X,"LI",{});var Q$e=s(u6);ipe=n(Q$e,"STRONG",{});var I_t=s(ipe);azo=r(I_t,"albert"),I_t.forEach(t),nzo=r(Q$e," \u2014 "),OV=n(Q$e,"A",{href:!0});var N_t=s(OV);szo=r(N_t,"AlbertForQuestionAnswering"),N_t.forEach(t),lzo=r(Q$e," (ALBERT model)"),Q$e.forEach(t),izo=i(X),b6=n(X,"LI",{});var H$e=s(b6);dpe=n(H$e,"STRONG",{});var q_t=s(dpe);dzo=r(q_t,"bart"),q_t.forEach(t),czo=r(H$e," \u2014 "),VV=n(H$e,"A",{href:!0});var j_t=s(VV);fzo=r(j_t,"BartForQuestionAnswering"),j_t.forEach(t),mzo=r(H$e," (BART model)"),H$e.forEach(t),gzo=i(X),v6=n(X,"LI",{});var U$e=s(v6);cpe=n(U$e,"STRONG",{});var D_t=s(cpe);hzo=r(D_t,"bert"),D_t.forEach(t),pzo=r(U$e," \u2014 "),XV=n(U$e,"A",{href:!0});var G_t=s(XV);_zo=r(G_t,"BertForQuestionAnswering"),G_t.forEach(t),uzo=r(U$e," (BERT model)"),U$e.forEach(t),bzo=i(X),F6=n(X,"LI",{});var J$e=s(F6);fpe=n(J$e,"STRONG",{});var O_t=s(fpe);vzo=r(O_t,"big_bird"),O_t.forEach(t),Fzo=r(J$e," \u2014 "),zV=n(J$e,"A",{href:!0});var V_t=s(zV);Tzo=r(V_t,"BigBirdForQuestionAnswering"),V_t.forEach(t),Mzo=r(J$e," (BigBird model)"),J$e.forEach(t),Ezo=i(X),T6=n(X,"LI",{});var Y$e=s(T6);mpe=n(Y$e,"STRONG",{});var X_t=s(mpe);Czo=r(X_t,"bigbird_pegasus"),X_t.forEach(t),wzo=r(Y$e," \u2014 "),WV=n(Y$e,"A",{href:!0});var z_t=s(WV);Azo=r(z_t,"BigBirdPegasusForQuestionAnswering"),z_t.forEach(t),yzo=r(Y$e," (BigBird-Pegasus model)"),Y$e.forEach(t),Lzo=i(X),M6=n(X,"LI",{});var K$e=s(M6);gpe=n(K$e,"STRONG",{});var W_t=s(gpe);xzo=r(W_t,"camembert"),W_t.forEach(t),$zo=r(K$e," \u2014 "),QV=n(K$e,"A",{href:!0});var Q_t=s(QV);kzo=r(Q_t,"CamembertForQuestionAnswering"),Q_t.forEach(t),Szo=r(K$e," (CamemBERT model)"),K$e.forEach(t),Rzo=i(X),E6=n(X,"LI",{});var Z$e=s(E6);hpe=n(Z$e,"STRONG",{});var H_t=s(hpe);Pzo=r(H_t,"canine"),H_t.forEach(t),Bzo=r(Z$e," \u2014 "),HV=n(Z$e,"A",{href:!0});var U_t=s(HV);Izo=r(U_t,"CanineForQuestionAnswering"),U_t.forEach(t),Nzo=r(Z$e," (CANINE model)"),Z$e.forEach(t),qzo=i(X),C6=n(X,"LI",{});var eke=s(C6);ppe=n(eke,"STRONG",{});var J_t=s(ppe);jzo=r(J_t,"convbert"),J_t.forEach(t),Dzo=r(eke," \u2014 "),UV=n(eke,"A",{href:!0});var Y_t=s(UV);Gzo=r(Y_t,"ConvBertForQuestionAnswering"),Y_t.forEach(t),Ozo=r(eke," (ConvBERT model)"),eke.forEach(t),Vzo=i(X),w6=n(X,"LI",{});var oke=s(w6);_pe=n(oke,"STRONG",{});var K_t=s(_pe);Xzo=r(K_t,"data2vec-text"),K_t.forEach(t),zzo=r(oke," \u2014 "),JV=n(oke,"A",{href:!0});var Z_t=s(JV);Wzo=r(Z_t,"Data2VecTextForQuestionAnswering"),Z_t.forEach(t),Qzo=r(oke," (Data2VecText model)"),oke.forEach(t),Hzo=i(X),A6=n(X,"LI",{});var rke=s(A6);upe=n(rke,"STRONG",{});var eut=s(upe);Uzo=r(eut,"deberta"),eut.forEach(t),Jzo=r(rke," \u2014 "),YV=n(rke,"A",{href:!0});var out=s(YV);Yzo=r(out,"DebertaForQuestionAnswering"),out.forEach(t),Kzo=r(rke," (DeBERTa model)"),rke.forEach(t),Zzo=i(X),y6=n(X,"LI",{});var tke=s(y6);bpe=n(tke,"STRONG",{});var rut=s(bpe);eWo=r(rut,"deberta-v2"),rut.forEach(t),oWo=r(tke," \u2014 "),KV=n(tke,"A",{href:!0});var tut=s(KV);rWo=r(tut,"DebertaV2ForQuestionAnswering"),tut.forEach(t),tWo=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),aWo=i(X),L6=n(X,"LI",{});var ake=s(L6);vpe=n(ake,"STRONG",{});var aut=s(vpe);nWo=r(aut,"distilbert"),aut.forEach(t),sWo=r(ake," \u2014 "),ZV=n(ake,"A",{href:!0});var nut=s(ZV);lWo=r(nut,"DistilBertForQuestionAnswering"),nut.forEach(t),iWo=r(ake," (DistilBERT model)"),ake.forEach(t),dWo=i(X),x6=n(X,"LI",{});var nke=s(x6);Fpe=n(nke,"STRONG",{});var sut=s(Fpe);cWo=r(sut,"electra"),sut.forEach(t),fWo=r(nke," \u2014 "),eX=n(nke,"A",{href:!0});var lut=s(eX);mWo=r(lut,"ElectraForQuestionAnswering"),lut.forEach(t),gWo=r(nke," (ELECTRA model)"),nke.forEach(t),hWo=i(X),$6=n(X,"LI",{});var ske=s($6);Tpe=n(ske,"STRONG",{});var iut=s(Tpe);pWo=r(iut,"flaubert"),iut.forEach(t),_Wo=r(ske," \u2014 "),oX=n(ske,"A",{href:!0});var dut=s(oX);uWo=r(dut,"FlaubertForQuestionAnsweringSimple"),dut.forEach(t),bWo=r(ske," (FlauBERT model)"),ske.forEach(t),vWo=i(X),k6=n(X,"LI",{});var lke=s(k6);Mpe=n(lke,"STRONG",{});var cut=s(Mpe);FWo=r(cut,"fnet"),cut.forEach(t),TWo=r(lke," \u2014 "),rX=n(lke,"A",{href:!0});var fut=s(rX);MWo=r(fut,"FNetForQuestionAnswering"),fut.forEach(t),EWo=r(lke," (FNet model)"),lke.forEach(t),CWo=i(X),S6=n(X,"LI",{});var ike=s(S6);Epe=n(ike,"STRONG",{});var mut=s(Epe);wWo=r(mut,"funnel"),mut.forEach(t),AWo=r(ike," \u2014 "),tX=n(ike,"A",{href:!0});var gut=s(tX);yWo=r(gut,"FunnelForQuestionAnswering"),gut.forEach(t),LWo=r(ike," (Funnel Transformer model)"),ike.forEach(t),xWo=i(X),R6=n(X,"LI",{});var dke=s(R6);Cpe=n(dke,"STRONG",{});var hut=s(Cpe);$Wo=r(hut,"gptj"),hut.forEach(t),kWo=r(dke," \u2014 "),aX=n(dke,"A",{href:!0});var put=s(aX);SWo=r(put,"GPTJForQuestionAnswering"),put.forEach(t),RWo=r(dke," (GPT-J model)"),dke.forEach(t),PWo=i(X),P6=n(X,"LI",{});var cke=s(P6);wpe=n(cke,"STRONG",{});var _ut=s(wpe);BWo=r(_ut,"ibert"),_ut.forEach(t),IWo=r(cke," \u2014 "),nX=n(cke,"A",{href:!0});var uut=s(nX);NWo=r(uut,"IBertForQuestionAnswering"),uut.forEach(t),qWo=r(cke," (I-BERT model)"),cke.forEach(t),jWo=i(X),B6=n(X,"LI",{});var fke=s(B6);Ape=n(fke,"STRONG",{});var but=s(Ape);DWo=r(but,"layoutlmv2"),but.forEach(t),GWo=r(fke," \u2014 "),sX=n(fke,"A",{href:!0});var vut=s(sX);OWo=r(vut,"LayoutLMv2ForQuestionAnswering"),vut.forEach(t),VWo=r(fke," (LayoutLMv2 model)"),fke.forEach(t),XWo=i(X),I6=n(X,"LI",{});var mke=s(I6);ype=n(mke,"STRONG",{});var Fut=s(ype);zWo=r(Fut,"layoutlmv3"),Fut.forEach(t),WWo=r(mke," \u2014 "),lX=n(mke,"A",{href:!0});var Tut=s(lX);QWo=r(Tut,"LayoutLMv3ForQuestionAnswering"),Tut.forEach(t),HWo=r(mke," (LayoutLMv3 model)"),mke.forEach(t),UWo=i(X),N6=n(X,"LI",{});var gke=s(N6);Lpe=n(gke,"STRONG",{});var Mut=s(Lpe);JWo=r(Mut,"led"),Mut.forEach(t),YWo=r(gke," \u2014 "),iX=n(gke,"A",{href:!0});var Eut=s(iX);KWo=r(Eut,"LEDForQuestionAnswering"),Eut.forEach(t),ZWo=r(gke," (LED model)"),gke.forEach(t),eQo=i(X),q6=n(X,"LI",{});var hke=s(q6);xpe=n(hke,"STRONG",{});var Cut=s(xpe);oQo=r(Cut,"longformer"),Cut.forEach(t),rQo=r(hke," \u2014 "),dX=n(hke,"A",{href:!0});var wut=s(dX);tQo=r(wut,"LongformerForQuestionAnswering"),wut.forEach(t),aQo=r(hke," (Longformer model)"),hke.forEach(t),nQo=i(X),j6=n(X,"LI",{});var pke=s(j6);$pe=n(pke,"STRONG",{});var Aut=s($pe);sQo=r(Aut,"lxmert"),Aut.forEach(t),lQo=r(pke," \u2014 "),cX=n(pke,"A",{href:!0});var yut=s(cX);iQo=r(yut,"LxmertForQuestionAnswering"),yut.forEach(t),dQo=r(pke," (LXMERT model)"),pke.forEach(t),cQo=i(X),D6=n(X,"LI",{});var _ke=s(D6);kpe=n(_ke,"STRONG",{});var Lut=s(kpe);fQo=r(Lut,"mbart"),Lut.forEach(t),mQo=r(_ke," \u2014 "),fX=n(_ke,"A",{href:!0});var xut=s(fX);gQo=r(xut,"MBartForQuestionAnswering"),xut.forEach(t),hQo=r(_ke," (mBART model)"),_ke.forEach(t),pQo=i(X),G6=n(X,"LI",{});var uke=s(G6);Spe=n(uke,"STRONG",{});var $ut=s(Spe);_Qo=r($ut,"megatron-bert"),$ut.forEach(t),uQo=r(uke," \u2014 "),mX=n(uke,"A",{href:!0});var kut=s(mX);bQo=r(kut,"MegatronBertForQuestionAnswering"),kut.forEach(t),vQo=r(uke," (Megatron-BERT model)"),uke.forEach(t),FQo=i(X),O6=n(X,"LI",{});var bke=s(O6);Rpe=n(bke,"STRONG",{});var Sut=s(Rpe);TQo=r(Sut,"mobilebert"),Sut.forEach(t),MQo=r(bke," \u2014 "),gX=n(bke,"A",{href:!0});var Rut=s(gX);EQo=r(Rut,"MobileBertForQuestionAnswering"),Rut.forEach(t),CQo=r(bke," (MobileBERT model)"),bke.forEach(t),wQo=i(X),V6=n(X,"LI",{});var vke=s(V6);Ppe=n(vke,"STRONG",{});var Put=s(Ppe);AQo=r(Put,"mpnet"),Put.forEach(t),yQo=r(vke," \u2014 "),hX=n(vke,"A",{href:!0});var But=s(hX);LQo=r(But,"MPNetForQuestionAnswering"),But.forEach(t),xQo=r(vke," (MPNet model)"),vke.forEach(t),$Qo=i(X),X6=n(X,"LI",{});var Fke=s(X6);Bpe=n(Fke,"STRONG",{});var Iut=s(Bpe);kQo=r(Iut,"nystromformer"),Iut.forEach(t),SQo=r(Fke," \u2014 "),pX=n(Fke,"A",{href:!0});var Nut=s(pX);RQo=r(Nut,"NystromformerForQuestionAnswering"),Nut.forEach(t),PQo=r(Fke," (Nystr\xF6mformer model)"),Fke.forEach(t),BQo=i(X),z6=n(X,"LI",{});var Tke=s(z6);Ipe=n(Tke,"STRONG",{});var qut=s(Ipe);IQo=r(qut,"qdqbert"),qut.forEach(t),NQo=r(Tke," \u2014 "),_X=n(Tke,"A",{href:!0});var jut=s(_X);qQo=r(jut,"QDQBertForQuestionAnswering"),jut.forEach(t),jQo=r(Tke," (QDQBert model)"),Tke.forEach(t),DQo=i(X),W6=n(X,"LI",{});var Mke=s(W6);Npe=n(Mke,"STRONG",{});var Dut=s(Npe);GQo=r(Dut,"reformer"),Dut.forEach(t),OQo=r(Mke," \u2014 "),uX=n(Mke,"A",{href:!0});var Gut=s(uX);VQo=r(Gut,"ReformerForQuestionAnswering"),Gut.forEach(t),XQo=r(Mke," (Reformer model)"),Mke.forEach(t),zQo=i(X),Q6=n(X,"LI",{});var Eke=s(Q6);qpe=n(Eke,"STRONG",{});var Out=s(qpe);WQo=r(Out,"rembert"),Out.forEach(t),QQo=r(Eke," \u2014 "),bX=n(Eke,"A",{href:!0});var Vut=s(bX);HQo=r(Vut,"RemBertForQuestionAnswering"),Vut.forEach(t),UQo=r(Eke," (RemBERT model)"),Eke.forEach(t),JQo=i(X),H6=n(X,"LI",{});var Cke=s(H6);jpe=n(Cke,"STRONG",{});var Xut=s(jpe);YQo=r(Xut,"roberta"),Xut.forEach(t),KQo=r(Cke," \u2014 "),vX=n(Cke,"A",{href:!0});var zut=s(vX);ZQo=r(zut,"RobertaForQuestionAnswering"),zut.forEach(t),eHo=r(Cke," (RoBERTa model)"),Cke.forEach(t),oHo=i(X),U6=n(X,"LI",{});var wke=s(U6);Dpe=n(wke,"STRONG",{});var Wut=s(Dpe);rHo=r(Wut,"roformer"),Wut.forEach(t),tHo=r(wke," \u2014 "),FX=n(wke,"A",{href:!0});var Qut=s(FX);aHo=r(Qut,"RoFormerForQuestionAnswering"),Qut.forEach(t),nHo=r(wke," (RoFormer model)"),wke.forEach(t),sHo=i(X),J6=n(X,"LI",{});var Ake=s(J6);Gpe=n(Ake,"STRONG",{});var Hut=s(Gpe);lHo=r(Hut,"splinter"),Hut.forEach(t),iHo=r(Ake," \u2014 "),TX=n(Ake,"A",{href:!0});var Uut=s(TX);dHo=r(Uut,"SplinterForQuestionAnswering"),Uut.forEach(t),cHo=r(Ake," (Splinter model)"),Ake.forEach(t),fHo=i(X),Y6=n(X,"LI",{});var yke=s(Y6);Ope=n(yke,"STRONG",{});var Jut=s(Ope);mHo=r(Jut,"squeezebert"),Jut.forEach(t),gHo=r(yke," \u2014 "),MX=n(yke,"A",{href:!0});var Yut=s(MX);hHo=r(Yut,"SqueezeBertForQuestionAnswering"),Yut.forEach(t),pHo=r(yke," (SqueezeBERT model)"),yke.forEach(t),_Ho=i(X),K6=n(X,"LI",{});var Lke=s(K6);Vpe=n(Lke,"STRONG",{});var Kut=s(Vpe);uHo=r(Kut,"xlm"),Kut.forEach(t),bHo=r(Lke," \u2014 "),EX=n(Lke,"A",{href:!0});var Zut=s(EX);vHo=r(Zut,"XLMForQuestionAnsweringSimple"),Zut.forEach(t),FHo=r(Lke," (XLM model)"),Lke.forEach(t),THo=i(X),Z6=n(X,"LI",{});var xke=s(Z6);Xpe=n(xke,"STRONG",{});var ebt=s(Xpe);MHo=r(ebt,"xlm-roberta"),ebt.forEach(t),EHo=r(xke," \u2014 "),CX=n(xke,"A",{href:!0});var obt=s(CX);CHo=r(obt,"XLMRobertaForQuestionAnswering"),obt.forEach(t),wHo=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),AHo=i(X),e1=n(X,"LI",{});var $ke=s(e1);zpe=n($ke,"STRONG",{});var rbt=s(zpe);yHo=r(rbt,"xlm-roberta-xl"),rbt.forEach(t),LHo=r($ke," \u2014 "),wX=n($ke,"A",{href:!0});var tbt=s(wX);xHo=r(tbt,"XLMRobertaXLForQuestionAnswering"),tbt.forEach(t),$Ho=r($ke," (XLM-RoBERTa-XL model)"),$ke.forEach(t),kHo=i(X),o1=n(X,"LI",{});var kke=s(o1);Wpe=n(kke,"STRONG",{});var abt=s(Wpe);SHo=r(abt,"xlnet"),abt.forEach(t),RHo=r(kke," \u2014 "),AX=n(kke,"A",{href:!0});var nbt=s(AX);PHo=r(nbt,"XLNetForQuestionAnsweringSimple"),nbt.forEach(t),BHo=r(kke," (XLNet model)"),kke.forEach(t),IHo=i(X),r1=n(X,"LI",{});var Ske=s(r1);Qpe=n(Ske,"STRONG",{});var sbt=s(Qpe);NHo=r(sbt,"yoso"),sbt.forEach(t),qHo=r(Ske," \u2014 "),yX=n(Ske,"A",{href:!0});var lbt=s(yX);jHo=r(lbt,"YosoForQuestionAnswering"),lbt.forEach(t),DHo=r(Ske," (YOSO model)"),Ske.forEach(t),X.forEach(t),GHo=i(ca),t1=n(ca,"P",{});var Rke=s(t1);OHo=r(Rke,"The model is set in evaluation mode by default using "),Hpe=n(Rke,"CODE",{});var ibt=s(Hpe);VHo=r(ibt,"model.eval()"),ibt.forEach(t),XHo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(Rke,"CODE",{});var dbt=s(Upe);zHo=r(dbt,"model.train()"),dbt.forEach(t),Rke.forEach(t),WHo=i(ca),T(a1.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),hje=i(f),rd=n(f,"H2",{class:!0});var bGe=s(rd);n1=n(bGe,"A",{id:!0,class:!0,href:!0});var cbt=s(n1);Jpe=n(cbt,"SPAN",{});var fbt=s(Jpe);T(a8.$$.fragment,fbt),fbt.forEach(t),cbt.forEach(t),QHo=i(bGe),Ype=n(bGe,"SPAN",{});var mbt=s(Ype);HHo=r(mbt,"AutoModelForTableQuestionAnswering"),mbt.forEach(t),bGe.forEach(t),pje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(n8.$$.fragment,Zs),UHo=i(Zs),td=n(Zs,"P",{});var oee=s(td);JHo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=n(oee,"A",{href:!0});var gbt=s(LX);YHo=r(gbt,"from_pretrained()"),gbt.forEach(t),KHo=r(oee," class method or the "),xX=n(oee,"A",{href:!0});var hbt=s(xX);ZHo=r(hbt,"from_config()"),hbt.forEach(t),eUo=r(oee,` class
method.`),oee.forEach(t),oUo=i(Zs),s8=n(Zs,"P",{});var vGe=s(s8);rUo=r(vGe,"This class cannot be instantiated directly using "),Kpe=n(vGe,"CODE",{});var pbt=s(Kpe);tUo=r(pbt,"__init__()"),pbt.forEach(t),aUo=r(vGe," (throws an error)."),vGe.forEach(t),nUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var sA=s(gt);T(l8.$$.fragment,sA),sUo=i(sA),Zpe=n(sA,"P",{});var _bt=s(Zpe);lUo=r(_bt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_bt.forEach(t),iUo=i(sA),ad=n(sA,"P",{});var ree=s(ad);dUo=r(ree,`Note:
Loading a model from its configuration file does `),e_e=n(ree,"STRONG",{});var ubt=s(e_e);cUo=r(ubt,"not"),ubt.forEach(t),fUo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(ree,"A",{href:!0});var bbt=s($X);mUo=r(bbt,"from_pretrained()"),bbt.forEach(t),gUo=r(ree," to load the model weights."),ree.forEach(t),hUo=i(sA),T(s1.$$.fragment,sA),sA.forEach(t),pUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(i8.$$.fragment,fa),_Uo=i(fa),o_e=n(fa,"P",{});var vbt=s(o_e);uUo=r(vbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vbt.forEach(t),bUo=i(fa),qa=n(fa,"P",{});var lA=s(qa);vUo=r(lA,"The model class to instantiate is selected based on the "),r_e=n(lA,"CODE",{});var Fbt=s(r_e);FUo=r(Fbt,"model_type"),Fbt.forEach(t),TUo=r(lA,` property of the config object (either
passed as an argument or loaded from `),t_e=n(lA,"CODE",{});var Tbt=s(t_e);MUo=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),EUo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(lA,"CODE",{});var Mbt=s(a_e);CUo=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),wUo=r(lA,":"),lA.forEach(t),AUo=i(fa),n_e=n(fa,"UL",{});var Ebt=s(n_e);l1=n(Ebt,"LI",{});var Pke=s(l1);s_e=n(Pke,"STRONG",{});var Cbt=s(s_e);yUo=r(Cbt,"tapas"),Cbt.forEach(t),LUo=r(Pke," \u2014 "),kX=n(Pke,"A",{href:!0});var wbt=s(kX);xUo=r(wbt,"TapasForQuestionAnswering"),wbt.forEach(t),$Uo=r(Pke," (TAPAS model)"),Pke.forEach(t),Ebt.forEach(t),kUo=i(fa),i1=n(fa,"P",{});var Bke=s(i1);SUo=r(Bke,"The model is set in evaluation mode by default using "),l_e=n(Bke,"CODE",{});var Abt=s(l_e);RUo=r(Abt,"model.eval()"),Abt.forEach(t),PUo=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(Bke,"CODE",{});var ybt=s(i_e);BUo=r(ybt,"model.train()"),ybt.forEach(t),Bke.forEach(t),IUo=i(fa),T(d1.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),_je=i(f),nd=n(f,"H2",{class:!0});var FGe=s(nd);c1=n(FGe,"A",{id:!0,class:!0,href:!0});var Lbt=s(c1);d_e=n(Lbt,"SPAN",{});var xbt=s(d_e);T(d8.$$.fragment,xbt),xbt.forEach(t),Lbt.forEach(t),NUo=i(FGe),c_e=n(FGe,"SPAN",{});var $bt=s(c_e);qUo=r($bt,"AutoModelForImageClassification"),$bt.forEach(t),FGe.forEach(t),uje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(c8.$$.fragment,el),jUo=i(el),sd=n(el,"P",{});var tee=s(sd);DUo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=n(tee,"A",{href:!0});var kbt=s(SX);GUo=r(kbt,"from_pretrained()"),kbt.forEach(t),OUo=r(tee," class method or the "),RX=n(tee,"A",{href:!0});var Sbt=s(RX);VUo=r(Sbt,"from_config()"),Sbt.forEach(t),XUo=r(tee,` class
method.`),tee.forEach(t),zUo=i(el),f8=n(el,"P",{});var TGe=s(f8);WUo=r(TGe,"This class cannot be instantiated directly using "),f_e=n(TGe,"CODE",{});var Rbt=s(f_e);QUo=r(Rbt,"__init__()"),Rbt.forEach(t),HUo=r(TGe," (throws an error)."),TGe.forEach(t),UUo=i(el),ht=n(el,"DIV",{class:!0});var iA=s(ht);T(m8.$$.fragment,iA),JUo=i(iA),m_e=n(iA,"P",{});var Pbt=s(m_e);YUo=r(Pbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pbt.forEach(t),KUo=i(iA),ld=n(iA,"P",{});var aee=s(ld);ZUo=r(aee,`Note:
Loading a model from its configuration file does `),g_e=n(aee,"STRONG",{});var Bbt=s(g_e);eJo=r(Bbt,"not"),Bbt.forEach(t),oJo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(aee,"A",{href:!0});var Ibt=s(PX);rJo=r(Ibt,"from_pretrained()"),Ibt.forEach(t),tJo=r(aee," to load the model weights."),aee.forEach(t),aJo=i(iA),T(f1.$$.fragment,iA),iA.forEach(t),nJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(g8.$$.fragment,ma),sJo=i(ma),h_e=n(ma,"P",{});var Nbt=s(h_e);lJo=r(Nbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nbt.forEach(t),iJo=i(ma),ja=n(ma,"P",{});var dA=s(ja);dJo=r(dA,"The model class to instantiate is selected based on the "),p_e=n(dA,"CODE",{});var qbt=s(p_e);cJo=r(qbt,"model_type"),qbt.forEach(t),fJo=r(dA,` property of the config object (either
passed as an argument or loaded from `),__e=n(dA,"CODE",{});var jbt=s(__e);mJo=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),gJo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(dA,"CODE",{});var Dbt=s(u_e);hJo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),pJo=r(dA,":"),dA.forEach(t),_Jo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);m1=n(Te,"LI",{});var Ike=s(m1);b_e=n(Ike,"STRONG",{});var Gbt=s(b_e);uJo=r(Gbt,"beit"),Gbt.forEach(t),bJo=r(Ike," \u2014 "),BX=n(Ike,"A",{href:!0});var Obt=s(BX);vJo=r(Obt,"BeitForImageClassification"),Obt.forEach(t),FJo=r(Ike," (BEiT model)"),Ike.forEach(t),TJo=i(Te),g1=n(Te,"LI",{});var Nke=s(g1);v_e=n(Nke,"STRONG",{});var Vbt=s(v_e);MJo=r(Vbt,"convnext"),Vbt.forEach(t),EJo=r(Nke," \u2014 "),IX=n(Nke,"A",{href:!0});var Xbt=s(IX);CJo=r(Xbt,"ConvNextForImageClassification"),Xbt.forEach(t),wJo=r(Nke," (ConvNeXT model)"),Nke.forEach(t),AJo=i(Te),h1=n(Te,"LI",{});var qke=s(h1);F_e=n(qke,"STRONG",{});var zbt=s(F_e);yJo=r(zbt,"cvt"),zbt.forEach(t),LJo=r(qke," \u2014 "),NX=n(qke,"A",{href:!0});var Wbt=s(NX);xJo=r(Wbt,"CvtForImageClassification"),Wbt.forEach(t),$Jo=r(qke," (CvT model)"),qke.forEach(t),kJo=i(Te),p1=n(Te,"LI",{});var jke=s(p1);T_e=n(jke,"STRONG",{});var Qbt=s(T_e);SJo=r(Qbt,"data2vec-vision"),Qbt.forEach(t),RJo=r(jke," \u2014 "),qX=n(jke,"A",{href:!0});var Hbt=s(qX);PJo=r(Hbt,"Data2VecVisionForImageClassification"),Hbt.forEach(t),BJo=r(jke," (Data2VecVision model)"),jke.forEach(t),IJo=i(Te),Bs=n(Te,"LI",{});var K$=s(Bs);M_e=n(K$,"STRONG",{});var Ubt=s(M_e);NJo=r(Ubt,"deit"),Ubt.forEach(t),qJo=r(K$," \u2014 "),jX=n(K$,"A",{href:!0});var Jbt=s(jX);jJo=r(Jbt,"DeiTForImageClassification"),Jbt.forEach(t),DJo=r(K$," or "),DX=n(K$,"A",{href:!0});var Ybt=s(DX);GJo=r(Ybt,"DeiTForImageClassificationWithTeacher"),Ybt.forEach(t),OJo=r(K$," (DeiT model)"),K$.forEach(t),VJo=i(Te),_1=n(Te,"LI",{});var Dke=s(_1);E_e=n(Dke,"STRONG",{});var Kbt=s(E_e);XJo=r(Kbt,"imagegpt"),Kbt.forEach(t),zJo=r(Dke," \u2014 "),GX=n(Dke,"A",{href:!0});var Zbt=s(GX);WJo=r(Zbt,"ImageGPTForImageClassification"),Zbt.forEach(t),QJo=r(Dke," (ImageGPT model)"),Dke.forEach(t),HJo=i(Te),Is=n(Te,"LI",{});var Z$=s(Is);C_e=n(Z$,"STRONG",{});var e2t=s(C_e);UJo=r(e2t,"levit"),e2t.forEach(t),JJo=r(Z$," \u2014 "),OX=n(Z$,"A",{href:!0});var o2t=s(OX);YJo=r(o2t,"LevitForImageClassification"),o2t.forEach(t),KJo=r(Z$," or "),VX=n(Z$,"A",{href:!0});var r2t=s(VX);ZJo=r(r2t,"LevitForImageClassificationWithTeacher"),r2t.forEach(t),eYo=r(Z$," (LeViT model)"),Z$.forEach(t),oYo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);w_e=n(pf,"STRONG",{});var t2t=s(w_e);rYo=r(t2t,"perceiver"),t2t.forEach(t),tYo=r(pf," \u2014 "),XX=n(pf,"A",{href:!0});var a2t=s(XX);aYo=r(a2t,"PerceiverForImageClassificationLearned"),a2t.forEach(t),nYo=r(pf," or "),zX=n(pf,"A",{href:!0});var n2t=s(zX);sYo=r(n2t,"PerceiverForImageClassificationFourier"),n2t.forEach(t),lYo=r(pf," or "),WX=n(pf,"A",{href:!0});var s2t=s(WX);iYo=r(s2t,"PerceiverForImageClassificationConvProcessing"),s2t.forEach(t),dYo=r(pf," (Perceiver model)"),pf.forEach(t),cYo=i(Te),u1=n(Te,"LI",{});var Gke=s(u1);A_e=n(Gke,"STRONG",{});var l2t=s(A_e);fYo=r(l2t,"poolformer"),l2t.forEach(t),mYo=r(Gke," \u2014 "),QX=n(Gke,"A",{href:!0});var i2t=s(QX);gYo=r(i2t,"PoolFormerForImageClassification"),i2t.forEach(t),hYo=r(Gke," (PoolFormer model)"),Gke.forEach(t),pYo=i(Te),b1=n(Te,"LI",{});var Oke=s(b1);y_e=n(Oke,"STRONG",{});var d2t=s(y_e);_Yo=r(d2t,"regnet"),d2t.forEach(t),uYo=r(Oke," \u2014 "),HX=n(Oke,"A",{href:!0});var c2t=s(HX);bYo=r(c2t,"RegNetForImageClassification"),c2t.forEach(t),vYo=r(Oke," (RegNet model)"),Oke.forEach(t),FYo=i(Te),v1=n(Te,"LI",{});var Vke=s(v1);L_e=n(Vke,"STRONG",{});var f2t=s(L_e);TYo=r(f2t,"resnet"),f2t.forEach(t),MYo=r(Vke," \u2014 "),UX=n(Vke,"A",{href:!0});var m2t=s(UX);EYo=r(m2t,"ResNetForImageClassification"),m2t.forEach(t),CYo=r(Vke," (ResNet model)"),Vke.forEach(t),wYo=i(Te),F1=n(Te,"LI",{});var Xke=s(F1);x_e=n(Xke,"STRONG",{});var g2t=s(x_e);AYo=r(g2t,"segformer"),g2t.forEach(t),yYo=r(Xke," \u2014 "),JX=n(Xke,"A",{href:!0});var h2t=s(JX);LYo=r(h2t,"SegformerForImageClassification"),h2t.forEach(t),xYo=r(Xke," (SegFormer model)"),Xke.forEach(t),$Yo=i(Te),T1=n(Te,"LI",{});var zke=s(T1);$_e=n(zke,"STRONG",{});var p2t=s($_e);kYo=r(p2t,"swin"),p2t.forEach(t),SYo=r(zke," \u2014 "),YX=n(zke,"A",{href:!0});var _2t=s(YX);RYo=r(_2t,"SwinForImageClassification"),_2t.forEach(t),PYo=r(zke," (Swin Transformer model)"),zke.forEach(t),BYo=i(Te),M1=n(Te,"LI",{});var Wke=s(M1);k_e=n(Wke,"STRONG",{});var u2t=s(k_e);IYo=r(u2t,"van"),u2t.forEach(t),NYo=r(Wke," \u2014 "),KX=n(Wke,"A",{href:!0});var b2t=s(KX);qYo=r(b2t,"VanForImageClassification"),b2t.forEach(t),jYo=r(Wke," (VAN model)"),Wke.forEach(t),DYo=i(Te),E1=n(Te,"LI",{});var Qke=s(E1);S_e=n(Qke,"STRONG",{});var v2t=s(S_e);GYo=r(v2t,"vit"),v2t.forEach(t),OYo=r(Qke," \u2014 "),ZX=n(Qke,"A",{href:!0});var F2t=s(ZX);VYo=r(F2t,"ViTForImageClassification"),F2t.forEach(t),XYo=r(Qke," (ViT model)"),Qke.forEach(t),Te.forEach(t),zYo=i(ma),C1=n(ma,"P",{});var Hke=s(C1);WYo=r(Hke,"The model is set in evaluation mode by default using "),R_e=n(Hke,"CODE",{});var T2t=s(R_e);QYo=r(T2t,"model.eval()"),T2t.forEach(t),HYo=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(Hke,"CODE",{});var M2t=s(P_e);UYo=r(M2t,"model.train()"),M2t.forEach(t),Hke.forEach(t),JYo=i(ma),T(w1.$$.fragment,ma),ma.forEach(t),el.forEach(t),bje=i(f),id=n(f,"H2",{class:!0});var MGe=s(id);A1=n(MGe,"A",{id:!0,class:!0,href:!0});var E2t=s(A1);B_e=n(E2t,"SPAN",{});var C2t=s(B_e);T(h8.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),YYo=i(MGe),I_e=n(MGe,"SPAN",{});var w2t=s(I_e);KYo=r(w2t,"AutoModelForVision2Seq"),w2t.forEach(t),MGe.forEach(t),vje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(p8.$$.fragment,ol),ZYo=i(ol),dd=n(ol,"P",{});var nee=s(dd);eKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ez=n(nee,"A",{href:!0});var A2t=s(ez);oKo=r(A2t,"from_pretrained()"),A2t.forEach(t),rKo=r(nee," class method or the "),oz=n(nee,"A",{href:!0});var y2t=s(oz);tKo=r(y2t,"from_config()"),y2t.forEach(t),aKo=r(nee,` class
method.`),nee.forEach(t),nKo=i(ol),_8=n(ol,"P",{});var EGe=s(_8);sKo=r(EGe,"This class cannot be instantiated directly using "),N_e=n(EGe,"CODE",{});var L2t=s(N_e);lKo=r(L2t,"__init__()"),L2t.forEach(t),iKo=r(EGe," (throws an error)."),EGe.forEach(t),dKo=i(ol),_t=n(ol,"DIV",{class:!0});var cA=s(_t);T(u8.$$.fragment,cA),cKo=i(cA),q_e=n(cA,"P",{});var x2t=s(q_e);fKo=r(x2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x2t.forEach(t),mKo=i(cA),cd=n(cA,"P",{});var see=s(cd);gKo=r(see,`Note:
Loading a model from its configuration file does `),j_e=n(see,"STRONG",{});var $2t=s(j_e);hKo=r($2t,"not"),$2t.forEach(t),pKo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(see,"A",{href:!0});var k2t=s(rz);_Ko=r(k2t,"from_pretrained()"),k2t.forEach(t),uKo=r(see," to load the model weights."),see.forEach(t),bKo=i(cA),T(y1.$$.fragment,cA),cA.forEach(t),vKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(b8.$$.fragment,ga),FKo=i(ga),D_e=n(ga,"P",{});var S2t=s(D_e);TKo=r(S2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S2t.forEach(t),MKo=i(ga),Da=n(ga,"P",{});var fA=s(Da);EKo=r(fA,"The model class to instantiate is selected based on the "),G_e=n(fA,"CODE",{});var R2t=s(G_e);CKo=r(R2t,"model_type"),R2t.forEach(t),wKo=r(fA,` property of the config object (either
passed as an argument or loaded from `),O_e=n(fA,"CODE",{});var P2t=s(O_e);AKo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),yKo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(fA,"CODE",{});var B2t=s(V_e);LKo=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),xKo=r(fA,":"),fA.forEach(t),$Ko=i(ga),X_e=n(ga,"UL",{});var I2t=s(X_e);L1=n(I2t,"LI",{});var Uke=s(L1);z_e=n(Uke,"STRONG",{});var N2t=s(z_e);kKo=r(N2t,"vision-encoder-decoder"),N2t.forEach(t),SKo=r(Uke," \u2014 "),tz=n(Uke,"A",{href:!0});var q2t=s(tz);RKo=r(q2t,"VisionEncoderDecoderModel"),q2t.forEach(t),PKo=r(Uke," (Vision Encoder decoder model)"),Uke.forEach(t),I2t.forEach(t),BKo=i(ga),x1=n(ga,"P",{});var Jke=s(x1);IKo=r(Jke,"The model is set in evaluation mode by default using "),W_e=n(Jke,"CODE",{});var j2t=s(W_e);NKo=r(j2t,"model.eval()"),j2t.forEach(t),qKo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(Jke,"CODE",{});var D2t=s(Q_e);jKo=r(D2t,"model.train()"),D2t.forEach(t),Jke.forEach(t),DKo=i(ga),T($1.$$.fragment,ga),ga.forEach(t),ol.forEach(t),Fje=i(f),fd=n(f,"H2",{class:!0});var CGe=s(fd);k1=n(CGe,"A",{id:!0,class:!0,href:!0});var G2t=s(k1);H_e=n(G2t,"SPAN",{});var O2t=s(H_e);T(v8.$$.fragment,O2t),O2t.forEach(t),G2t.forEach(t),GKo=i(CGe),U_e=n(CGe,"SPAN",{});var V2t=s(U_e);OKo=r(V2t,"AutoModelForAudioClassification"),V2t.forEach(t),CGe.forEach(t),Tje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(F8.$$.fragment,rl),VKo=i(rl),md=n(rl,"P",{});var lee=s(md);XKo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),az=n(lee,"A",{href:!0});var X2t=s(az);zKo=r(X2t,"from_pretrained()"),X2t.forEach(t),WKo=r(lee," class method or the "),nz=n(lee,"A",{href:!0});var z2t=s(nz);QKo=r(z2t,"from_config()"),z2t.forEach(t),HKo=r(lee,` class
method.`),lee.forEach(t),UKo=i(rl),T8=n(rl,"P",{});var wGe=s(T8);JKo=r(wGe,"This class cannot be instantiated directly using "),J_e=n(wGe,"CODE",{});var W2t=s(J_e);YKo=r(W2t,"__init__()"),W2t.forEach(t),KKo=r(wGe," (throws an error)."),wGe.forEach(t),ZKo=i(rl),ut=n(rl,"DIV",{class:!0});var mA=s(ut);T(M8.$$.fragment,mA),eZo=i(mA),Y_e=n(mA,"P",{});var Q2t=s(Y_e);oZo=r(Q2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Q2t.forEach(t),rZo=i(mA),gd=n(mA,"P",{});var iee=s(gd);tZo=r(iee,`Note:
Loading a model from its configuration file does `),K_e=n(iee,"STRONG",{});var H2t=s(K_e);aZo=r(H2t,"not"),H2t.forEach(t),nZo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(iee,"A",{href:!0});var U2t=s(sz);sZo=r(U2t,"from_pretrained()"),U2t.forEach(t),lZo=r(iee," to load the model weights."),iee.forEach(t),iZo=i(mA),T(S1.$$.fragment,mA),mA.forEach(t),dZo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(E8.$$.fragment,ha),cZo=i(ha),Z_e=n(ha,"P",{});var J2t=s(Z_e);fZo=r(J2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),J2t.forEach(t),mZo=i(ha),Ga=n(ha,"P",{});var gA=s(Ga);gZo=r(gA,"The model class to instantiate is selected based on the "),eue=n(gA,"CODE",{});var Y2t=s(eue);hZo=r(Y2t,"model_type"),Y2t.forEach(t),pZo=r(gA,` property of the config object (either
passed as an argument or loaded from `),oue=n(gA,"CODE",{});var K2t=s(oue);_Zo=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),uZo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(gA,"CODE",{});var Z2t=s(rue);bZo=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),vZo=r(gA,":"),gA.forEach(t),FZo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);R1=n(Ve,"LI",{});var Yke=s(R1);tue=n(Yke,"STRONG",{});var evt=s(tue);TZo=r(evt,"data2vec-audio"),evt.forEach(t),MZo=r(Yke," \u2014 "),lz=n(Yke,"A",{href:!0});var ovt=s(lz);EZo=r(ovt,"Data2VecAudioForSequenceClassification"),ovt.forEach(t),CZo=r(Yke," (Data2VecAudio model)"),Yke.forEach(t),wZo=i(Ve),P1=n(Ve,"LI",{});var Kke=s(P1);aue=n(Kke,"STRONG",{});var rvt=s(aue);AZo=r(rvt,"hubert"),rvt.forEach(t),yZo=r(Kke," \u2014 "),iz=n(Kke,"A",{href:!0});var tvt=s(iz);LZo=r(tvt,"HubertForSequenceClassification"),tvt.forEach(t),xZo=r(Kke," (Hubert model)"),Kke.forEach(t),$Zo=i(Ve),B1=n(Ve,"LI",{});var Zke=s(B1);nue=n(Zke,"STRONG",{});var avt=s(nue);kZo=r(avt,"sew"),avt.forEach(t),SZo=r(Zke," \u2014 "),dz=n(Zke,"A",{href:!0});var nvt=s(dz);RZo=r(nvt,"SEWForSequenceClassification"),nvt.forEach(t),PZo=r(Zke," (SEW model)"),Zke.forEach(t),BZo=i(Ve),I1=n(Ve,"LI",{});var eSe=s(I1);sue=n(eSe,"STRONG",{});var svt=s(sue);IZo=r(svt,"sew-d"),svt.forEach(t),NZo=r(eSe," \u2014 "),cz=n(eSe,"A",{href:!0});var lvt=s(cz);qZo=r(lvt,"SEWDForSequenceClassification"),lvt.forEach(t),jZo=r(eSe," (SEW-D model)"),eSe.forEach(t),DZo=i(Ve),N1=n(Ve,"LI",{});var oSe=s(N1);lue=n(oSe,"STRONG",{});var ivt=s(lue);GZo=r(ivt,"unispeech"),ivt.forEach(t),OZo=r(oSe," \u2014 "),fz=n(oSe,"A",{href:!0});var dvt=s(fz);VZo=r(dvt,"UniSpeechForSequenceClassification"),dvt.forEach(t),XZo=r(oSe," (UniSpeech model)"),oSe.forEach(t),zZo=i(Ve),q1=n(Ve,"LI",{});var rSe=s(q1);iue=n(rSe,"STRONG",{});var cvt=s(iue);WZo=r(cvt,"unispeech-sat"),cvt.forEach(t),QZo=r(rSe," \u2014 "),mz=n(rSe,"A",{href:!0});var fvt=s(mz);HZo=r(fvt,"UniSpeechSatForSequenceClassification"),fvt.forEach(t),UZo=r(rSe," (UniSpeechSat model)"),rSe.forEach(t),JZo=i(Ve),j1=n(Ve,"LI",{});var tSe=s(j1);due=n(tSe,"STRONG",{});var mvt=s(due);YZo=r(mvt,"wav2vec2"),mvt.forEach(t),KZo=r(tSe," \u2014 "),gz=n(tSe,"A",{href:!0});var gvt=s(gz);ZZo=r(gvt,"Wav2Vec2ForSequenceClassification"),gvt.forEach(t),eer=r(tSe," (Wav2Vec2 model)"),tSe.forEach(t),oer=i(Ve),D1=n(Ve,"LI",{});var aSe=s(D1);cue=n(aSe,"STRONG",{});var hvt=s(cue);rer=r(hvt,"wav2vec2-conformer"),hvt.forEach(t),ter=r(aSe," \u2014 "),hz=n(aSe,"A",{href:!0});var pvt=s(hz);aer=r(pvt,"Wav2Vec2ConformerForSequenceClassification"),pvt.forEach(t),ner=r(aSe," (Wav2Vec2-Conformer model)"),aSe.forEach(t),ser=i(Ve),G1=n(Ve,"LI",{});var nSe=s(G1);fue=n(nSe,"STRONG",{});var _vt=s(fue);ler=r(_vt,"wavlm"),_vt.forEach(t),ier=r(nSe," \u2014 "),pz=n(nSe,"A",{href:!0});var uvt=s(pz);der=r(uvt,"WavLMForSequenceClassification"),uvt.forEach(t),cer=r(nSe," (WavLM model)"),nSe.forEach(t),Ve.forEach(t),fer=i(ha),O1=n(ha,"P",{});var sSe=s(O1);mer=r(sSe,"The model is set in evaluation mode by default using "),mue=n(sSe,"CODE",{});var bvt=s(mue);ger=r(bvt,"model.eval()"),bvt.forEach(t),her=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(sSe,"CODE",{});var vvt=s(gue);per=r(vvt,"model.train()"),vvt.forEach(t),sSe.forEach(t),_er=i(ha),T(V1.$$.fragment,ha),ha.forEach(t),rl.forEach(t),Mje=i(f),hd=n(f,"H2",{class:!0});var AGe=s(hd);X1=n(AGe,"A",{id:!0,class:!0,href:!0});var Fvt=s(X1);hue=n(Fvt,"SPAN",{});var Tvt=s(hue);T(C8.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),uer=i(AGe),pue=n(AGe,"SPAN",{});var Mvt=s(pue);ber=r(Mvt,"AutoModelForAudioFrameClassification"),Mvt.forEach(t),AGe.forEach(t),Eje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(w8.$$.fragment,tl),ver=i(tl),pd=n(tl,"P",{});var dee=s(pd);Fer=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_z=n(dee,"A",{href:!0});var Evt=s(_z);Ter=r(Evt,"from_pretrained()"),Evt.forEach(t),Mer=r(dee," class method or the "),uz=n(dee,"A",{href:!0});var Cvt=s(uz);Eer=r(Cvt,"from_config()"),Cvt.forEach(t),Cer=r(dee,` class
method.`),dee.forEach(t),wer=i(tl),A8=n(tl,"P",{});var yGe=s(A8);Aer=r(yGe,"This class cannot be instantiated directly using "),_ue=n(yGe,"CODE",{});var wvt=s(_ue);yer=r(wvt,"__init__()"),wvt.forEach(t),Ler=r(yGe," (throws an error)."),yGe.forEach(t),xer=i(tl),bt=n(tl,"DIV",{class:!0});var hA=s(bt);T(y8.$$.fragment,hA),$er=i(hA),uue=n(hA,"P",{});var Avt=s(uue);ker=r(Avt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Avt.forEach(t),Ser=i(hA),_d=n(hA,"P",{});var cee=s(_d);Rer=r(cee,`Note:
Loading a model from its configuration file does `),bue=n(cee,"STRONG",{});var yvt=s(bue);Per=r(yvt,"not"),yvt.forEach(t),Ber=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(cee,"A",{href:!0});var Lvt=s(bz);Ier=r(Lvt,"from_pretrained()"),Lvt.forEach(t),Ner=r(cee," to load the model weights."),cee.forEach(t),qer=i(hA),T(z1.$$.fragment,hA),hA.forEach(t),jer=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(L8.$$.fragment,pa),Der=i(pa),vue=n(pa,"P",{});var xvt=s(vue);Ger=r(xvt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xvt.forEach(t),Oer=i(pa),Oa=n(pa,"P",{});var pA=s(Oa);Ver=r(pA,"The model class to instantiate is selected based on the "),Fue=n(pA,"CODE",{});var $vt=s(Fue);Xer=r($vt,"model_type"),$vt.forEach(t),zer=r(pA,` property of the config object (either
passed as an argument or loaded from `),Tue=n(pA,"CODE",{});var kvt=s(Tue);Wer=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),Qer=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(pA,"CODE",{});var Svt=s(Mue);Her=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),Uer=r(pA,":"),pA.forEach(t),Jer=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);W1=n(al,"LI",{});var lSe=s(W1);Eue=n(lSe,"STRONG",{});var Rvt=s(Eue);Yer=r(Rvt,"data2vec-audio"),Rvt.forEach(t),Ker=r(lSe," \u2014 "),vz=n(lSe,"A",{href:!0});var Pvt=s(vz);Zer=r(Pvt,"Data2VecAudioForAudioFrameClassification"),Pvt.forEach(t),eor=r(lSe," (Data2VecAudio model)"),lSe.forEach(t),oor=i(al),Q1=n(al,"LI",{});var iSe=s(Q1);Cue=n(iSe,"STRONG",{});var Bvt=s(Cue);ror=r(Bvt,"unispeech-sat"),Bvt.forEach(t),tor=r(iSe," \u2014 "),Fz=n(iSe,"A",{href:!0});var Ivt=s(Fz);aor=r(Ivt,"UniSpeechSatForAudioFrameClassification"),Ivt.forEach(t),nor=r(iSe," (UniSpeechSat model)"),iSe.forEach(t),sor=i(al),H1=n(al,"LI",{});var dSe=s(H1);wue=n(dSe,"STRONG",{});var Nvt=s(wue);lor=r(Nvt,"wav2vec2"),Nvt.forEach(t),ior=r(dSe," \u2014 "),Tz=n(dSe,"A",{href:!0});var qvt=s(Tz);dor=r(qvt,"Wav2Vec2ForAudioFrameClassification"),qvt.forEach(t),cor=r(dSe," (Wav2Vec2 model)"),dSe.forEach(t),mor=i(al),U1=n(al,"LI",{});var cSe=s(U1);Aue=n(cSe,"STRONG",{});var jvt=s(Aue);gor=r(jvt,"wav2vec2-conformer"),jvt.forEach(t),hor=r(cSe," \u2014 "),Mz=n(cSe,"A",{href:!0});var Dvt=s(Mz);por=r(Dvt,"Wav2Vec2ConformerForAudioFrameClassification"),Dvt.forEach(t),_or=r(cSe," (Wav2Vec2-Conformer model)"),cSe.forEach(t),uor=i(al),J1=n(al,"LI",{});var fSe=s(J1);yue=n(fSe,"STRONG",{});var Gvt=s(yue);bor=r(Gvt,"wavlm"),Gvt.forEach(t),vor=r(fSe," \u2014 "),Ez=n(fSe,"A",{href:!0});var Ovt=s(Ez);For=r(Ovt,"WavLMForAudioFrameClassification"),Ovt.forEach(t),Tor=r(fSe," (WavLM model)"),fSe.forEach(t),al.forEach(t),Mor=i(pa),Y1=n(pa,"P",{});var mSe=s(Y1);Eor=r(mSe,"The model is set in evaluation mode by default using "),Lue=n(mSe,"CODE",{});var Vvt=s(Lue);Cor=r(Vvt,"model.eval()"),Vvt.forEach(t),wor=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(mSe,"CODE",{});var Xvt=s(xue);Aor=r(Xvt,"model.train()"),Xvt.forEach(t),mSe.forEach(t),yor=i(pa),T(K1.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Cje=i(f),ud=n(f,"H2",{class:!0});var LGe=s(ud);Z1=n(LGe,"A",{id:!0,class:!0,href:!0});var zvt=s(Z1);$ue=n(zvt,"SPAN",{});var Wvt=s($ue);T(x8.$$.fragment,Wvt),Wvt.forEach(t),zvt.forEach(t),Lor=i(LGe),kue=n(LGe,"SPAN",{});var Qvt=s(kue);xor=r(Qvt,"AutoModelForCTC"),Qvt.forEach(t),LGe.forEach(t),wje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T($8.$$.fragment,nl),$or=i(nl),bd=n(nl,"P",{});var fee=s(bd);kor=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Cz=n(fee,"A",{href:!0});var Hvt=s(Cz);Sor=r(Hvt,"from_pretrained()"),Hvt.forEach(t),Ror=r(fee," class method or the "),wz=n(fee,"A",{href:!0});var Uvt=s(wz);Por=r(Uvt,"from_config()"),Uvt.forEach(t),Bor=r(fee,` class
method.`),fee.forEach(t),Ior=i(nl),k8=n(nl,"P",{});var xGe=s(k8);Nor=r(xGe,"This class cannot be instantiated directly using "),Sue=n(xGe,"CODE",{});var Jvt=s(Sue);qor=r(Jvt,"__init__()"),Jvt.forEach(t),jor=r(xGe," (throws an error)."),xGe.forEach(t),Dor=i(nl),vt=n(nl,"DIV",{class:!0});var _A=s(vt);T(S8.$$.fragment,_A),Gor=i(_A),Rue=n(_A,"P",{});var Yvt=s(Rue);Oor=r(Yvt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Yvt.forEach(t),Vor=i(_A),vd=n(_A,"P",{});var mee=s(vd);Xor=r(mee,`Note:
Loading a model from its configuration file does `),Pue=n(mee,"STRONG",{});var Kvt=s(Pue);zor=r(Kvt,"not"),Kvt.forEach(t),Wor=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(mee,"A",{href:!0});var Zvt=s(Az);Qor=r(Zvt,"from_pretrained()"),Zvt.forEach(t),Hor=r(mee," to load the model weights."),mee.forEach(t),Uor=i(_A),T(eT.$$.fragment,_A),_A.forEach(t),Jor=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(R8.$$.fragment,_a),Yor=i(_a),Bue=n(_a,"P",{});var eFt=s(Bue);Kor=r(eFt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),eFt.forEach(t),Zor=i(_a),Va=n(_a,"P",{});var uA=s(Va);err=r(uA,"The model class to instantiate is selected based on the "),Iue=n(uA,"CODE",{});var oFt=s(Iue);orr=r(oFt,"model_type"),oFt.forEach(t),rrr=r(uA,` property of the config object (either
passed as an argument or loaded from `),Nue=n(uA,"CODE",{});var rFt=s(Nue);trr=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),arr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(uA,"CODE",{});var tFt=s(que);nrr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),srr=r(uA,":"),uA.forEach(t),lrr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);oT=n(Xe,"LI",{});var gSe=s(oT);jue=n(gSe,"STRONG",{});var aFt=s(jue);irr=r(aFt,"data2vec-audio"),aFt.forEach(t),drr=r(gSe," \u2014 "),yz=n(gSe,"A",{href:!0});var nFt=s(yz);crr=r(nFt,"Data2VecAudioForCTC"),nFt.forEach(t),frr=r(gSe," (Data2VecAudio model)"),gSe.forEach(t),mrr=i(Xe),rT=n(Xe,"LI",{});var hSe=s(rT);Due=n(hSe,"STRONG",{});var sFt=s(Due);grr=r(sFt,"hubert"),sFt.forEach(t),hrr=r(hSe," \u2014 "),Lz=n(hSe,"A",{href:!0});var lFt=s(Lz);prr=r(lFt,"HubertForCTC"),lFt.forEach(t),_rr=r(hSe," (Hubert model)"),hSe.forEach(t),urr=i(Xe),tT=n(Xe,"LI",{});var pSe=s(tT);Gue=n(pSe,"STRONG",{});var iFt=s(Gue);brr=r(iFt,"sew"),iFt.forEach(t),vrr=r(pSe," \u2014 "),xz=n(pSe,"A",{href:!0});var dFt=s(xz);Frr=r(dFt,"SEWForCTC"),dFt.forEach(t),Trr=r(pSe," (SEW model)"),pSe.forEach(t),Mrr=i(Xe),aT=n(Xe,"LI",{});var _Se=s(aT);Oue=n(_Se,"STRONG",{});var cFt=s(Oue);Err=r(cFt,"sew-d"),cFt.forEach(t),Crr=r(_Se," \u2014 "),$z=n(_Se,"A",{href:!0});var fFt=s($z);wrr=r(fFt,"SEWDForCTC"),fFt.forEach(t),Arr=r(_Se," (SEW-D model)"),_Se.forEach(t),yrr=i(Xe),nT=n(Xe,"LI",{});var uSe=s(nT);Vue=n(uSe,"STRONG",{});var mFt=s(Vue);Lrr=r(mFt,"unispeech"),mFt.forEach(t),xrr=r(uSe," \u2014 "),kz=n(uSe,"A",{href:!0});var gFt=s(kz);$rr=r(gFt,"UniSpeechForCTC"),gFt.forEach(t),krr=r(uSe," (UniSpeech model)"),uSe.forEach(t),Srr=i(Xe),sT=n(Xe,"LI",{});var bSe=s(sT);Xue=n(bSe,"STRONG",{});var hFt=s(Xue);Rrr=r(hFt,"unispeech-sat"),hFt.forEach(t),Prr=r(bSe," \u2014 "),Sz=n(bSe,"A",{href:!0});var pFt=s(Sz);Brr=r(pFt,"UniSpeechSatForCTC"),pFt.forEach(t),Irr=r(bSe," (UniSpeechSat model)"),bSe.forEach(t),Nrr=i(Xe),lT=n(Xe,"LI",{});var vSe=s(lT);zue=n(vSe,"STRONG",{});var _Ft=s(zue);qrr=r(_Ft,"wav2vec2"),_Ft.forEach(t),jrr=r(vSe," \u2014 "),Rz=n(vSe,"A",{href:!0});var uFt=s(Rz);Drr=r(uFt,"Wav2Vec2ForCTC"),uFt.forEach(t),Grr=r(vSe," (Wav2Vec2 model)"),vSe.forEach(t),Orr=i(Xe),iT=n(Xe,"LI",{});var FSe=s(iT);Wue=n(FSe,"STRONG",{});var bFt=s(Wue);Vrr=r(bFt,"wav2vec2-conformer"),bFt.forEach(t),Xrr=r(FSe," \u2014 "),Pz=n(FSe,"A",{href:!0});var vFt=s(Pz);zrr=r(vFt,"Wav2Vec2ConformerForCTC"),vFt.forEach(t),Wrr=r(FSe," (Wav2Vec2-Conformer model)"),FSe.forEach(t),Qrr=i(Xe),dT=n(Xe,"LI",{});var TSe=s(dT);Que=n(TSe,"STRONG",{});var FFt=s(Que);Hrr=r(FFt,"wavlm"),FFt.forEach(t),Urr=r(TSe," \u2014 "),Bz=n(TSe,"A",{href:!0});var TFt=s(Bz);Jrr=r(TFt,"WavLMForCTC"),TFt.forEach(t),Yrr=r(TSe," (WavLM model)"),TSe.forEach(t),Xe.forEach(t),Krr=i(_a),cT=n(_a,"P",{});var MSe=s(cT);Zrr=r(MSe,"The model is set in evaluation mode by default using "),Hue=n(MSe,"CODE",{});var MFt=s(Hue);etr=r(MFt,"model.eval()"),MFt.forEach(t),otr=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(MSe,"CODE",{});var EFt=s(Uue);rtr=r(EFt,"model.train()"),EFt.forEach(t),MSe.forEach(t),ttr=i(_a),T(fT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Aje=i(f),Fd=n(f,"H2",{class:!0});var $Ge=s(Fd);mT=n($Ge,"A",{id:!0,class:!0,href:!0});var CFt=s(mT);Jue=n(CFt,"SPAN",{});var wFt=s(Jue);T(P8.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),atr=i($Ge),Yue=n($Ge,"SPAN",{});var AFt=s(Yue);ntr=r(AFt,"AutoModelForSpeechSeq2Seq"),AFt.forEach(t),$Ge.forEach(t),yje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(B8.$$.fragment,sl),str=i(sl),Td=n(sl,"P",{});var gee=s(Td);ltr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iz=n(gee,"A",{href:!0});var yFt=s(Iz);itr=r(yFt,"from_pretrained()"),yFt.forEach(t),dtr=r(gee," class method or the "),Nz=n(gee,"A",{href:!0});var LFt=s(Nz);ctr=r(LFt,"from_config()"),LFt.forEach(t),ftr=r(gee,` class
method.`),gee.forEach(t),mtr=i(sl),I8=n(sl,"P",{});var kGe=s(I8);gtr=r(kGe,"This class cannot be instantiated directly using "),Kue=n(kGe,"CODE",{});var xFt=s(Kue);htr=r(xFt,"__init__()"),xFt.forEach(t),ptr=r(kGe," (throws an error)."),kGe.forEach(t),_tr=i(sl),Ft=n(sl,"DIV",{class:!0});var bA=s(Ft);T(N8.$$.fragment,bA),utr=i(bA),Zue=n(bA,"P",{});var $Ft=s(Zue);btr=r($Ft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Ft.forEach(t),vtr=i(bA),Md=n(bA,"P",{});var hee=s(Md);Ftr=r(hee,`Note:
Loading a model from its configuration file does `),ebe=n(hee,"STRONG",{});var kFt=s(ebe);Ttr=r(kFt,"not"),kFt.forEach(t),Mtr=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(hee,"A",{href:!0});var SFt=s(qz);Etr=r(SFt,"from_pretrained()"),SFt.forEach(t),Ctr=r(hee," to load the model weights."),hee.forEach(t),wtr=i(bA),T(gT.$$.fragment,bA),bA.forEach(t),Atr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(q8.$$.fragment,ua),ytr=i(ua),obe=n(ua,"P",{});var RFt=s(obe);Ltr=r(RFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RFt.forEach(t),xtr=i(ua),Xa=n(ua,"P",{});var vA=s(Xa);$tr=r(vA,"The model class to instantiate is selected based on the "),rbe=n(vA,"CODE",{});var PFt=s(rbe);ktr=r(PFt,"model_type"),PFt.forEach(t),Str=r(vA,` property of the config object (either
passed as an argument or loaded from `),tbe=n(vA,"CODE",{});var BFt=s(tbe);Rtr=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),Ptr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(vA,"CODE",{});var IFt=s(abe);Btr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),Itr=r(vA,":"),vA.forEach(t),Ntr=i(ua),j8=n(ua,"UL",{});var SGe=s(j8);hT=n(SGe,"LI",{});var ESe=s(hT);nbe=n(ESe,"STRONG",{});var NFt=s(nbe);qtr=r(NFt,"speech-encoder-decoder"),NFt.forEach(t),jtr=r(ESe," \u2014 "),jz=n(ESe,"A",{href:!0});var qFt=s(jz);Dtr=r(qFt,"SpeechEncoderDecoderModel"),qFt.forEach(t),Gtr=r(ESe," (Speech Encoder decoder model)"),ESe.forEach(t),Otr=i(SGe),pT=n(SGe,"LI",{});var CSe=s(pT);sbe=n(CSe,"STRONG",{});var jFt=s(sbe);Vtr=r(jFt,"speech_to_text"),jFt.forEach(t),Xtr=r(CSe," \u2014 "),Dz=n(CSe,"A",{href:!0});var DFt=s(Dz);ztr=r(DFt,"Speech2TextForConditionalGeneration"),DFt.forEach(t),Wtr=r(CSe," (Speech2Text model)"),CSe.forEach(t),SGe.forEach(t),Qtr=i(ua),_T=n(ua,"P",{});var wSe=s(_T);Htr=r(wSe,"The model is set in evaluation mode by default using "),lbe=n(wSe,"CODE",{});var GFt=s(lbe);Utr=r(GFt,"model.eval()"),GFt.forEach(t),Jtr=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=n(wSe,"CODE",{});var OFt=s(ibe);Ytr=r(OFt,"model.train()"),OFt.forEach(t),wSe.forEach(t),Ktr=i(ua),T(uT.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Lje=i(f),Ed=n(f,"H2",{class:!0});var RGe=s(Ed);bT=n(RGe,"A",{id:!0,class:!0,href:!0});var VFt=s(bT);dbe=n(VFt,"SPAN",{});var XFt=s(dbe);T(D8.$$.fragment,XFt),XFt.forEach(t),VFt.forEach(t),Ztr=i(RGe),cbe=n(RGe,"SPAN",{});var zFt=s(cbe);ear=r(zFt,"AutoModelForAudioXVector"),zFt.forEach(t),RGe.forEach(t),xje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(G8.$$.fragment,ll),oar=i(ll),Cd=n(ll,"P",{});var pee=s(Cd);rar=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gz=n(pee,"A",{href:!0});var WFt=s(Gz);tar=r(WFt,"from_pretrained()"),WFt.forEach(t),aar=r(pee," class method or the "),Oz=n(pee,"A",{href:!0});var QFt=s(Oz);nar=r(QFt,"from_config()"),QFt.forEach(t),sar=r(pee,` class
method.`),pee.forEach(t),lar=i(ll),O8=n(ll,"P",{});var PGe=s(O8);iar=r(PGe,"This class cannot be instantiated directly using "),fbe=n(PGe,"CODE",{});var HFt=s(fbe);dar=r(HFt,"__init__()"),HFt.forEach(t),car=r(PGe," (throws an error)."),PGe.forEach(t),far=i(ll),Tt=n(ll,"DIV",{class:!0});var FA=s(Tt);T(V8.$$.fragment,FA),mar=i(FA),mbe=n(FA,"P",{});var UFt=s(mbe);gar=r(UFt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),UFt.forEach(t),har=i(FA),wd=n(FA,"P",{});var _ee=s(wd);par=r(_ee,`Note:
Loading a model from its configuration file does `),gbe=n(_ee,"STRONG",{});var JFt=s(gbe);_ar=r(JFt,"not"),JFt.forEach(t),uar=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(_ee,"A",{href:!0});var YFt=s(Vz);bar=r(YFt,"from_pretrained()"),YFt.forEach(t),Far=r(_ee," to load the model weights."),_ee.forEach(t),Tar=i(FA),T(vT.$$.fragment,FA),FA.forEach(t),Mar=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(X8.$$.fragment,ba),Ear=i(ba),hbe=n(ba,"P",{});var KFt=s(hbe);Car=r(KFt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KFt.forEach(t),war=i(ba),za=n(ba,"P",{});var TA=s(za);Aar=r(TA,"The model class to instantiate is selected based on the "),pbe=n(TA,"CODE",{});var ZFt=s(pbe);yar=r(ZFt,"model_type"),ZFt.forEach(t),Lar=r(TA,` property of the config object (either
passed as an argument or loaded from `),_be=n(TA,"CODE",{});var e6t=s(_be);xar=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),$ar=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(TA,"CODE",{});var o6t=s(ube);kar=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),Sar=r(TA,":"),TA.forEach(t),Rar=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);FT=n(il,"LI",{});var ASe=s(FT);bbe=n(ASe,"STRONG",{});var r6t=s(bbe);Par=r(r6t,"data2vec-audio"),r6t.forEach(t),Bar=r(ASe," \u2014 "),Xz=n(ASe,"A",{href:!0});var t6t=s(Xz);Iar=r(t6t,"Data2VecAudioForXVector"),t6t.forEach(t),Nar=r(ASe," (Data2VecAudio model)"),ASe.forEach(t),qar=i(il),TT=n(il,"LI",{});var ySe=s(TT);vbe=n(ySe,"STRONG",{});var a6t=s(vbe);jar=r(a6t,"unispeech-sat"),a6t.forEach(t),Dar=r(ySe," \u2014 "),zz=n(ySe,"A",{href:!0});var n6t=s(zz);Gar=r(n6t,"UniSpeechSatForXVector"),n6t.forEach(t),Oar=r(ySe," (UniSpeechSat model)"),ySe.forEach(t),Var=i(il),MT=n(il,"LI",{});var LSe=s(MT);Fbe=n(LSe,"STRONG",{});var s6t=s(Fbe);Xar=r(s6t,"wav2vec2"),s6t.forEach(t),zar=r(LSe," \u2014 "),Wz=n(LSe,"A",{href:!0});var l6t=s(Wz);War=r(l6t,"Wav2Vec2ForXVector"),l6t.forEach(t),Qar=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),Har=i(il),ET=n(il,"LI",{});var xSe=s(ET);Tbe=n(xSe,"STRONG",{});var i6t=s(Tbe);Uar=r(i6t,"wav2vec2-conformer"),i6t.forEach(t),Jar=r(xSe," \u2014 "),Qz=n(xSe,"A",{href:!0});var d6t=s(Qz);Yar=r(d6t,"Wav2Vec2ConformerForXVector"),d6t.forEach(t),Kar=r(xSe," (Wav2Vec2-Conformer model)"),xSe.forEach(t),Zar=i(il),CT=n(il,"LI",{});var $Se=s(CT);Mbe=n($Se,"STRONG",{});var c6t=s(Mbe);enr=r(c6t,"wavlm"),c6t.forEach(t),onr=r($Se," \u2014 "),Hz=n($Se,"A",{href:!0});var f6t=s(Hz);rnr=r(f6t,"WavLMForXVector"),f6t.forEach(t),tnr=r($Se," (WavLM model)"),$Se.forEach(t),il.forEach(t),anr=i(ba),wT=n(ba,"P",{});var kSe=s(wT);nnr=r(kSe,"The model is set in evaluation mode by default using "),Ebe=n(kSe,"CODE",{});var m6t=s(Ebe);snr=r(m6t,"model.eval()"),m6t.forEach(t),lnr=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n(kSe,"CODE",{});var g6t=s(Cbe);inr=r(g6t,"model.train()"),g6t.forEach(t),kSe.forEach(t),dnr=i(ba),T(AT.$$.fragment,ba),ba.forEach(t),ll.forEach(t),$je=i(f),Ad=n(f,"H2",{class:!0});var BGe=s(Ad);yT=n(BGe,"A",{id:!0,class:!0,href:!0});var h6t=s(yT);wbe=n(h6t,"SPAN",{});var p6t=s(wbe);T(z8.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),cnr=i(BGe),Abe=n(BGe,"SPAN",{});var _6t=s(Abe);fnr=r(_6t,"AutoModelForMaskedImageModeling"),_6t.forEach(t),BGe.forEach(t),kje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(W8.$$.fragment,dl),mnr=i(dl),yd=n(dl,"P",{});var uee=s(yd);gnr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Uz=n(uee,"A",{href:!0});var u6t=s(Uz);hnr=r(u6t,"from_pretrained()"),u6t.forEach(t),pnr=r(uee," class method or the "),Jz=n(uee,"A",{href:!0});var b6t=s(Jz);_nr=r(b6t,"from_config()"),b6t.forEach(t),unr=r(uee,` class
method.`),uee.forEach(t),bnr=i(dl),Q8=n(dl,"P",{});var IGe=s(Q8);vnr=r(IGe,"This class cannot be instantiated directly using "),ybe=n(IGe,"CODE",{});var v6t=s(ybe);Fnr=r(v6t,"__init__()"),v6t.forEach(t),Tnr=r(IGe," (throws an error)."),IGe.forEach(t),Mnr=i(dl),Mt=n(dl,"DIV",{class:!0});var MA=s(Mt);T(H8.$$.fragment,MA),Enr=i(MA),Lbe=n(MA,"P",{});var F6t=s(Lbe);Cnr=r(F6t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),F6t.forEach(t),wnr=i(MA),Ld=n(MA,"P",{});var bee=s(Ld);Anr=r(bee,`Note:
Loading a model from its configuration file does `),xbe=n(bee,"STRONG",{});var T6t=s(xbe);ynr=r(T6t,"not"),T6t.forEach(t),Lnr=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(bee,"A",{href:!0});var M6t=s(Yz);xnr=r(M6t,"from_pretrained()"),M6t.forEach(t),$nr=r(bee," to load the model weights."),bee.forEach(t),knr=i(MA),T(LT.$$.fragment,MA),MA.forEach(t),Snr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(U8.$$.fragment,va),Rnr=i(va),$be=n(va,"P",{});var E6t=s($be);Pnr=r(E6t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),E6t.forEach(t),Bnr=i(va),Wa=n(va,"P",{});var EA=s(Wa);Inr=r(EA,"The model class to instantiate is selected based on the "),kbe=n(EA,"CODE",{});var C6t=s(kbe);Nnr=r(C6t,"model_type"),C6t.forEach(t),qnr=r(EA,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(EA,"CODE",{});var w6t=s(Sbe);jnr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),Dnr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(EA,"CODE",{});var A6t=s(Rbe);Gnr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),Onr=r(EA,":"),EA.forEach(t),Vnr=i(va),xd=n(va,"UL",{});var vee=s(xd);xT=n(vee,"LI",{});var SSe=s(xT);Pbe=n(SSe,"STRONG",{});var y6t=s(Pbe);Xnr=r(y6t,"deit"),y6t.forEach(t),znr=r(SSe," \u2014 "),Kz=n(SSe,"A",{href:!0});var L6t=s(Kz);Wnr=r(L6t,"DeiTForMaskedImageModeling"),L6t.forEach(t),Qnr=r(SSe," (DeiT model)"),SSe.forEach(t),Hnr=i(vee),$T=n(vee,"LI",{});var RSe=s($T);Bbe=n(RSe,"STRONG",{});var x6t=s(Bbe);Unr=r(x6t,"swin"),x6t.forEach(t),Jnr=r(RSe," \u2014 "),Zz=n(RSe,"A",{href:!0});var $6t=s(Zz);Ynr=r($6t,"SwinForMaskedImageModeling"),$6t.forEach(t),Knr=r(RSe," (Swin Transformer model)"),RSe.forEach(t),Znr=i(vee),kT=n(vee,"LI",{});var PSe=s(kT);Ibe=n(PSe,"STRONG",{});var k6t=s(Ibe);esr=r(k6t,"vit"),k6t.forEach(t),osr=r(PSe," \u2014 "),eW=n(PSe,"A",{href:!0});var S6t=s(eW);rsr=r(S6t,"ViTForMaskedImageModeling"),S6t.forEach(t),tsr=r(PSe," (ViT model)"),PSe.forEach(t),vee.forEach(t),asr=i(va),ST=n(va,"P",{});var BSe=s(ST);nsr=r(BSe,"The model is set in evaluation mode by default using "),Nbe=n(BSe,"CODE",{});var R6t=s(Nbe);ssr=r(R6t,"model.eval()"),R6t.forEach(t),lsr=r(BSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(BSe,"CODE",{});var P6t=s(qbe);isr=r(P6t,"model.train()"),P6t.forEach(t),BSe.forEach(t),dsr=i(va),T(RT.$$.fragment,va),va.forEach(t),dl.forEach(t),Sje=i(f),$d=n(f,"H2",{class:!0});var NGe=s($d);PT=n(NGe,"A",{id:!0,class:!0,href:!0});var B6t=s(PT);jbe=n(B6t,"SPAN",{});var I6t=s(jbe);T(J8.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),csr=i(NGe),Dbe=n(NGe,"SPAN",{});var N6t=s(Dbe);fsr=r(N6t,"AutoModelForObjectDetection"),N6t.forEach(t),NGe.forEach(t),Rje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(Y8.$$.fragment,cl),msr=i(cl),kd=n(cl,"P",{});var Fee=s(kd);gsr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),oW=n(Fee,"A",{href:!0});var q6t=s(oW);hsr=r(q6t,"from_pretrained()"),q6t.forEach(t),psr=r(Fee," class method or the "),rW=n(Fee,"A",{href:!0});var j6t=s(rW);_sr=r(j6t,"from_config()"),j6t.forEach(t),usr=r(Fee,` class
method.`),Fee.forEach(t),bsr=i(cl),K8=n(cl,"P",{});var qGe=s(K8);vsr=r(qGe,"This class cannot be instantiated directly using "),Gbe=n(qGe,"CODE",{});var D6t=s(Gbe);Fsr=r(D6t,"__init__()"),D6t.forEach(t),Tsr=r(qGe," (throws an error)."),qGe.forEach(t),Msr=i(cl),Et=n(cl,"DIV",{class:!0});var CA=s(Et);T(Z8.$$.fragment,CA),Esr=i(CA),Obe=n(CA,"P",{});var G6t=s(Obe);Csr=r(G6t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),G6t.forEach(t),wsr=i(CA),Sd=n(CA,"P",{});var Tee=s(Sd);Asr=r(Tee,`Note:
Loading a model from its configuration file does `),Vbe=n(Tee,"STRONG",{});var O6t=s(Vbe);ysr=r(O6t,"not"),O6t.forEach(t),Lsr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(Tee,"A",{href:!0});var V6t=s(tW);xsr=r(V6t,"from_pretrained()"),V6t.forEach(t),$sr=r(Tee," to load the model weights."),Tee.forEach(t),ksr=i(CA),T(BT.$$.fragment,CA),CA.forEach(t),Ssr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(e7.$$.fragment,Fa),Rsr=i(Fa),Xbe=n(Fa,"P",{});var X6t=s(Xbe);Psr=r(X6t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),X6t.forEach(t),Bsr=i(Fa),Qa=n(Fa,"P",{});var wA=s(Qa);Isr=r(wA,"The model class to instantiate is selected based on the "),zbe=n(wA,"CODE",{});var z6t=s(zbe);Nsr=r(z6t,"model_type"),z6t.forEach(t),qsr=r(wA,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(wA,"CODE",{});var W6t=s(Wbe);jsr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),Dsr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(wA,"CODE",{});var Q6t=s(Qbe);Gsr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),Osr=r(wA,":"),wA.forEach(t),Vsr=i(Fa),o7=n(Fa,"UL",{});var jGe=s(o7);IT=n(jGe,"LI",{});var ISe=s(IT);Hbe=n(ISe,"STRONG",{});var H6t=s(Hbe);Xsr=r(H6t,"detr"),H6t.forEach(t),zsr=r(ISe," \u2014 "),aW=n(ISe,"A",{href:!0});var U6t=s(aW);Wsr=r(U6t,"DetrForObjectDetection"),U6t.forEach(t),Qsr=r(ISe," (DETR model)"),ISe.forEach(t),Hsr=i(jGe),NT=n(jGe,"LI",{});var NSe=s(NT);Ube=n(NSe,"STRONG",{});var J6t=s(Ube);Usr=r(J6t,"yolos"),J6t.forEach(t),Jsr=r(NSe," \u2014 "),nW=n(NSe,"A",{href:!0});var Y6t=s(nW);Ysr=r(Y6t,"YolosForObjectDetection"),Y6t.forEach(t),Ksr=r(NSe," (YOLOS model)"),NSe.forEach(t),jGe.forEach(t),Zsr=i(Fa),qT=n(Fa,"P",{});var qSe=s(qT);elr=r(qSe,"The model is set in evaluation mode by default using "),Jbe=n(qSe,"CODE",{});var K6t=s(Jbe);olr=r(K6t,"model.eval()"),K6t.forEach(t),rlr=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(qSe,"CODE",{});var Z6t=s(Ybe);tlr=r(Z6t,"model.train()"),Z6t.forEach(t),qSe.forEach(t),alr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),Pje=i(f),Rd=n(f,"H2",{class:!0});var DGe=s(Rd);DT=n(DGe,"A",{id:!0,class:!0,href:!0});var e1t=s(DT);Kbe=n(e1t,"SPAN",{});var o1t=s(Kbe);T(r7.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),nlr=i(DGe),Zbe=n(DGe,"SPAN",{});var r1t=s(Zbe);slr=r(r1t,"AutoModelForImageSegmentation"),r1t.forEach(t),DGe.forEach(t),Bje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(t7.$$.fragment,fl),llr=i(fl),Pd=n(fl,"P",{});var Mee=s(Pd);ilr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sW=n(Mee,"A",{href:!0});var t1t=s(sW);dlr=r(t1t,"from_pretrained()"),t1t.forEach(t),clr=r(Mee," class method or the "),lW=n(Mee,"A",{href:!0});var a1t=s(lW);flr=r(a1t,"from_config()"),a1t.forEach(t),mlr=r(Mee,` class
method.`),Mee.forEach(t),glr=i(fl),a7=n(fl,"P",{});var GGe=s(a7);hlr=r(GGe,"This class cannot be instantiated directly using "),e2e=n(GGe,"CODE",{});var n1t=s(e2e);plr=r(n1t,"__init__()"),n1t.forEach(t),_lr=r(GGe," (throws an error)."),GGe.forEach(t),ulr=i(fl),Ct=n(fl,"DIV",{class:!0});var AA=s(Ct);T(n7.$$.fragment,AA),blr=i(AA),o2e=n(AA,"P",{});var s1t=s(o2e);vlr=r(s1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),s1t.forEach(t),Flr=i(AA),Bd=n(AA,"P",{});var Eee=s(Bd);Tlr=r(Eee,`Note:
Loading a model from its configuration file does `),r2e=n(Eee,"STRONG",{});var l1t=s(r2e);Mlr=r(l1t,"not"),l1t.forEach(t),Elr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Eee,"A",{href:!0});var i1t=s(iW);Clr=r(i1t,"from_pretrained()"),i1t.forEach(t),wlr=r(Eee," to load the model weights."),Eee.forEach(t),Alr=i(AA),T(GT.$$.fragment,AA),AA.forEach(t),ylr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(s7.$$.fragment,Ta),Llr=i(Ta),t2e=n(Ta,"P",{});var d1t=s(t2e);xlr=r(d1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),d1t.forEach(t),$lr=i(Ta),Ha=n(Ta,"P",{});var yA=s(Ha);klr=r(yA,"The model class to instantiate is selected based on the "),a2e=n(yA,"CODE",{});var c1t=s(a2e);Slr=r(c1t,"model_type"),c1t.forEach(t),Rlr=r(yA,` property of the config object (either
passed as an argument or loaded from `),n2e=n(yA,"CODE",{});var f1t=s(n2e);Plr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),Blr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(yA,"CODE",{});var m1t=s(s2e);Ilr=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),Nlr=r(yA,":"),yA.forEach(t),qlr=i(Ta),l2e=n(Ta,"UL",{});var g1t=s(l2e);OT=n(g1t,"LI",{});var jSe=s(OT);i2e=n(jSe,"STRONG",{});var h1t=s(i2e);jlr=r(h1t,"detr"),h1t.forEach(t),Dlr=r(jSe," \u2014 "),dW=n(jSe,"A",{href:!0});var p1t=s(dW);Glr=r(p1t,"DetrForSegmentation"),p1t.forEach(t),Olr=r(jSe," (DETR model)"),jSe.forEach(t),g1t.forEach(t),Vlr=i(Ta),VT=n(Ta,"P",{});var DSe=s(VT);Xlr=r(DSe,"The model is set in evaluation mode by default using "),d2e=n(DSe,"CODE",{});var _1t=s(d2e);zlr=r(_1t,"model.eval()"),_1t.forEach(t),Wlr=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c2e=n(DSe,"CODE",{});var u1t=s(c2e);Qlr=r(u1t,"model.train()"),u1t.forEach(t),DSe.forEach(t),Hlr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Ije=i(f),Id=n(f,"H2",{class:!0});var OGe=s(Id);zT=n(OGe,"A",{id:!0,class:!0,href:!0});var b1t=s(zT);f2e=n(b1t,"SPAN",{});var v1t=s(f2e);T(l7.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),Ulr=i(OGe),m2e=n(OGe,"SPAN",{});var F1t=s(m2e);Jlr=r(F1t,"AutoModelForSemanticSegmentation"),F1t.forEach(t),OGe.forEach(t),Nje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(i7.$$.fragment,ml),Ylr=i(ml),Nd=n(ml,"P",{});var Cee=s(Nd);Klr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cW=n(Cee,"A",{href:!0});var T1t=s(cW);Zlr=r(T1t,"from_pretrained()"),T1t.forEach(t),eir=r(Cee," class method or the "),fW=n(Cee,"A",{href:!0});var M1t=s(fW);oir=r(M1t,"from_config()"),M1t.forEach(t),rir=r(Cee,` class
method.`),Cee.forEach(t),tir=i(ml),d7=n(ml,"P",{});var VGe=s(d7);air=r(VGe,"This class cannot be instantiated directly using "),g2e=n(VGe,"CODE",{});var E1t=s(g2e);nir=r(E1t,"__init__()"),E1t.forEach(t),sir=r(VGe," (throws an error)."),VGe.forEach(t),lir=i(ml),wt=n(ml,"DIV",{class:!0});var LA=s(wt);T(c7.$$.fragment,LA),iir=i(LA),h2e=n(LA,"P",{});var C1t=s(h2e);dir=r(C1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),C1t.forEach(t),cir=i(LA),qd=n(LA,"P",{});var wee=s(qd);fir=r(wee,`Note:
Loading a model from its configuration file does `),p2e=n(wee,"STRONG",{});var w1t=s(p2e);mir=r(w1t,"not"),w1t.forEach(t),gir=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(wee,"A",{href:!0});var A1t=s(mW);hir=r(A1t,"from_pretrained()"),A1t.forEach(t),pir=r(wee," to load the model weights."),wee.forEach(t),_ir=i(LA),T(WT.$$.fragment,LA),LA.forEach(t),uir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(f7.$$.fragment,Ma),bir=i(Ma),_2e=n(Ma,"P",{});var y1t=s(_2e);vir=r(y1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),y1t.forEach(t),Fir=i(Ma),Ua=n(Ma,"P",{});var xA=s(Ua);Tir=r(xA,"The model class to instantiate is selected based on the "),u2e=n(xA,"CODE",{});var L1t=s(u2e);Mir=r(L1t,"model_type"),L1t.forEach(t),Eir=r(xA,` property of the config object (either
passed as an argument or loaded from `),b2e=n(xA,"CODE",{});var x1t=s(b2e);Cir=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),wir=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(xA,"CODE",{});var $1t=s(v2e);Air=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),yir=r(xA,":"),xA.forEach(t),Lir=i(Ma),Ja=n(Ma,"UL",{});var $A=s(Ja);QT=n($A,"LI",{});var GSe=s(QT);F2e=n(GSe,"STRONG",{});var k1t=s(F2e);xir=r(k1t,"beit"),k1t.forEach(t),$ir=r(GSe," \u2014 "),gW=n(GSe,"A",{href:!0});var S1t=s(gW);kir=r(S1t,"BeitForSemanticSegmentation"),S1t.forEach(t),Sir=r(GSe," (BEiT model)"),GSe.forEach(t),Rir=i($A),HT=n($A,"LI",{});var OSe=s(HT);T2e=n(OSe,"STRONG",{});var R1t=s(T2e);Pir=r(R1t,"data2vec-vision"),R1t.forEach(t),Bir=r(OSe," \u2014 "),hW=n(OSe,"A",{href:!0});var P1t=s(hW);Iir=r(P1t,"Data2VecVisionForSemanticSegmentation"),P1t.forEach(t),Nir=r(OSe," (Data2VecVision model)"),OSe.forEach(t),qir=i($A),UT=n($A,"LI",{});var VSe=s(UT);M2e=n(VSe,"STRONG",{});var B1t=s(M2e);jir=r(B1t,"dpt"),B1t.forEach(t),Dir=r(VSe," \u2014 "),pW=n(VSe,"A",{href:!0});var I1t=s(pW);Gir=r(I1t,"DPTForSemanticSegmentation"),I1t.forEach(t),Oir=r(VSe," (DPT model)"),VSe.forEach(t),Vir=i($A),JT=n($A,"LI",{});var XSe=s(JT);E2e=n(XSe,"STRONG",{});var N1t=s(E2e);Xir=r(N1t,"segformer"),N1t.forEach(t),zir=r(XSe," \u2014 "),_W=n(XSe,"A",{href:!0});var q1t=s(_W);Wir=r(q1t,"SegformerForSemanticSegmentation"),q1t.forEach(t),Qir=r(XSe," (SegFormer model)"),XSe.forEach(t),$A.forEach(t),Hir=i(Ma),YT=n(Ma,"P",{});var zSe=s(YT);Uir=r(zSe,"The model is set in evaluation mode by default using "),C2e=n(zSe,"CODE",{});var j1t=s(C2e);Jir=r(j1t,"model.eval()"),j1t.forEach(t),Yir=r(zSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=n(zSe,"CODE",{});var D1t=s(w2e);Kir=r(D1t,"model.train()"),D1t.forEach(t),zSe.forEach(t),Zir=i(Ma),T(KT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),qje=i(f),jd=n(f,"H2",{class:!0});var XGe=s(jd);ZT=n(XGe,"A",{id:!0,class:!0,href:!0});var G1t=s(ZT);A2e=n(G1t,"SPAN",{});var O1t=s(A2e);T(m7.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),edr=i(XGe),y2e=n(XGe,"SPAN",{});var V1t=s(y2e);odr=r(V1t,"AutoModelForInstanceSegmentation"),V1t.forEach(t),XGe.forEach(t),jje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(g7.$$.fragment,gl),rdr=i(gl),Dd=n(gl,"P",{});var Aee=s(Dd);tdr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uW=n(Aee,"A",{href:!0});var X1t=s(uW);adr=r(X1t,"from_pretrained()"),X1t.forEach(t),ndr=r(Aee," class method or the "),bW=n(Aee,"A",{href:!0});var z1t=s(bW);sdr=r(z1t,"from_config()"),z1t.forEach(t),ldr=r(Aee,` class
method.`),Aee.forEach(t),idr=i(gl),h7=n(gl,"P",{});var zGe=s(h7);ddr=r(zGe,"This class cannot be instantiated directly using "),L2e=n(zGe,"CODE",{});var W1t=s(L2e);cdr=r(W1t,"__init__()"),W1t.forEach(t),fdr=r(zGe," (throws an error)."),zGe.forEach(t),mdr=i(gl),At=n(gl,"DIV",{class:!0});var kA=s(At);T(p7.$$.fragment,kA),gdr=i(kA),x2e=n(kA,"P",{});var Q1t=s(x2e);hdr=r(Q1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Q1t.forEach(t),pdr=i(kA),Gd=n(kA,"P",{});var yee=s(Gd);_dr=r(yee,`Note:
Loading a model from its configuration file does `),$2e=n(yee,"STRONG",{});var H1t=s($2e);udr=r(H1t,"not"),H1t.forEach(t),bdr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(yee,"A",{href:!0});var U1t=s(vW);vdr=r(U1t,"from_pretrained()"),U1t.forEach(t),Fdr=r(yee," to load the model weights."),yee.forEach(t),Tdr=i(kA),T(eM.$$.fragment,kA),kA.forEach(t),Mdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(_7.$$.fragment,Ea),Edr=i(Ea),k2e=n(Ea,"P",{});var J1t=s(k2e);Cdr=r(J1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J1t.forEach(t),wdr=i(Ea),Ya=n(Ea,"P",{});var SA=s(Ya);Adr=r(SA,"The model class to instantiate is selected based on the "),S2e=n(SA,"CODE",{});var Y1t=s(S2e);ydr=r(Y1t,"model_type"),Y1t.forEach(t),Ldr=r(SA,` property of the config object (either
passed as an argument or loaded from `),R2e=n(SA,"CODE",{});var K1t=s(R2e);xdr=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),$dr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(SA,"CODE",{});var Z1t=s(P2e);kdr=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),Sdr=r(SA,":"),SA.forEach(t),Rdr=i(Ea),B2e=n(Ea,"UL",{});var eTt=s(B2e);oM=n(eTt,"LI",{});var WSe=s(oM);I2e=n(WSe,"STRONG",{});var oTt=s(I2e);Pdr=r(oTt,"maskformer"),oTt.forEach(t),Bdr=r(WSe," \u2014 "),FW=n(WSe,"A",{href:!0});var rTt=s(FW);Idr=r(rTt,"MaskFormerForInstanceSegmentation"),rTt.forEach(t),Ndr=r(WSe," (MaskFormer model)"),WSe.forEach(t),eTt.forEach(t),qdr=i(Ea),rM=n(Ea,"P",{});var QSe=s(rM);jdr=r(QSe,"The model is set in evaluation mode by default using "),N2e=n(QSe,"CODE",{});var tTt=s(N2e);Ddr=r(tTt,"model.eval()"),tTt.forEach(t),Gdr=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(QSe,"CODE",{});var aTt=s(q2e);Odr=r(aTt,"model.train()"),aTt.forEach(t),QSe.forEach(t),Vdr=i(Ea),T(tM.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Dje=i(f),Od=n(f,"H2",{class:!0});var WGe=s(Od);aM=n(WGe,"A",{id:!0,class:!0,href:!0});var nTt=s(aM);j2e=n(nTt,"SPAN",{});var sTt=s(j2e);T(u7.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),Xdr=i(WGe),D2e=n(WGe,"SPAN",{});var lTt=s(D2e);zdr=r(lTt,"TFAutoModel"),lTt.forEach(t),WGe.forEach(t),Gje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(b7.$$.fragment,hl),Wdr=i(hl),Vd=n(hl,"P",{});var Lee=s(Vd);Qdr=r(Lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TW=n(Lee,"A",{href:!0});var iTt=s(TW);Hdr=r(iTt,"from_pretrained()"),iTt.forEach(t),Udr=r(Lee," class method or the "),MW=n(Lee,"A",{href:!0});var dTt=s(MW);Jdr=r(dTt,"from_config()"),dTt.forEach(t),Ydr=r(Lee,` class
method.`),Lee.forEach(t),Kdr=i(hl),v7=n(hl,"P",{});var QGe=s(v7);Zdr=r(QGe,"This class cannot be instantiated directly using "),G2e=n(QGe,"CODE",{});var cTt=s(G2e);ecr=r(cTt,"__init__()"),cTt.forEach(t),ocr=r(QGe," (throws an error)."),QGe.forEach(t),rcr=i(hl),yt=n(hl,"DIV",{class:!0});var RA=s(yt);T(F7.$$.fragment,RA),tcr=i(RA),O2e=n(RA,"P",{});var fTt=s(O2e);acr=r(fTt,"Instantiates one of the base model classes of the library from a configuration."),fTt.forEach(t),ncr=i(RA),Xd=n(RA,"P",{});var xee=s(Xd);scr=r(xee,`Note:
Loading a model from its configuration file does `),V2e=n(xee,"STRONG",{});var mTt=s(V2e);lcr=r(mTt,"not"),mTt.forEach(t),icr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(xee,"A",{href:!0});var gTt=s(EW);dcr=r(gTt,"from_pretrained()"),gTt.forEach(t),ccr=r(xee," to load the model weights."),xee.forEach(t),fcr=i(RA),T(nM.$$.fragment,RA),RA.forEach(t),mcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(T7.$$.fragment,pl),gcr=i(pl),X2e=n(pl,"P",{});var hTt=s(X2e);hcr=r(hTt,"Instantiate one of the base model classes of the library from a pretrained model."),hTt.forEach(t),pcr=i(pl),Ka=n(pl,"P",{});var PA=s(Ka);_cr=r(PA,"The model class to instantiate is selected based on the "),z2e=n(PA,"CODE",{});var pTt=s(z2e);ucr=r(pTt,"model_type"),pTt.forEach(t),bcr=r(PA,` property of the config object (either
passed as an argument or loaded from `),W2e=n(PA,"CODE",{});var _Tt=s(W2e);vcr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),Fcr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(PA,"CODE",{});var uTt=s(Q2e);Tcr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),Mcr=r(PA,":"),PA.forEach(t),Ecr=i(pl),q=n(pl,"UL",{});var D=s(q);sM=n(D,"LI",{});var HSe=s(sM);H2e=n(HSe,"STRONG",{});var bTt=s(H2e);Ccr=r(bTt,"albert"),bTt.forEach(t),wcr=r(HSe," \u2014 "),CW=n(HSe,"A",{href:!0});var vTt=s(CW);Acr=r(vTt,"TFAlbertModel"),vTt.forEach(t),ycr=r(HSe," (ALBERT model)"),HSe.forEach(t),Lcr=i(D),lM=n(D,"LI",{});var USe=s(lM);U2e=n(USe,"STRONG",{});var FTt=s(U2e);xcr=r(FTt,"bart"),FTt.forEach(t),$cr=r(USe," \u2014 "),wW=n(USe,"A",{href:!0});var TTt=s(wW);kcr=r(TTt,"TFBartModel"),TTt.forEach(t),Scr=r(USe," (BART model)"),USe.forEach(t),Rcr=i(D),iM=n(D,"LI",{});var JSe=s(iM);J2e=n(JSe,"STRONG",{});var MTt=s(J2e);Pcr=r(MTt,"bert"),MTt.forEach(t),Bcr=r(JSe," \u2014 "),AW=n(JSe,"A",{href:!0});var ETt=s(AW);Icr=r(ETt,"TFBertModel"),ETt.forEach(t),Ncr=r(JSe," (BERT model)"),JSe.forEach(t),qcr=i(D),dM=n(D,"LI",{});var YSe=s(dM);Y2e=n(YSe,"STRONG",{});var CTt=s(Y2e);jcr=r(CTt,"blenderbot"),CTt.forEach(t),Dcr=r(YSe," \u2014 "),yW=n(YSe,"A",{href:!0});var wTt=s(yW);Gcr=r(wTt,"TFBlenderbotModel"),wTt.forEach(t),Ocr=r(YSe," (Blenderbot model)"),YSe.forEach(t),Vcr=i(D),cM=n(D,"LI",{});var KSe=s(cM);K2e=n(KSe,"STRONG",{});var ATt=s(K2e);Xcr=r(ATt,"blenderbot-small"),ATt.forEach(t),zcr=r(KSe," \u2014 "),LW=n(KSe,"A",{href:!0});var yTt=s(LW);Wcr=r(yTt,"TFBlenderbotSmallModel"),yTt.forEach(t),Qcr=r(KSe," (BlenderbotSmall model)"),KSe.forEach(t),Hcr=i(D),fM=n(D,"LI",{});var ZSe=s(fM);Z2e=n(ZSe,"STRONG",{});var LTt=s(Z2e);Ucr=r(LTt,"camembert"),LTt.forEach(t),Jcr=r(ZSe," \u2014 "),xW=n(ZSe,"A",{href:!0});var xTt=s(xW);Ycr=r(xTt,"TFCamembertModel"),xTt.forEach(t),Kcr=r(ZSe," (CamemBERT model)"),ZSe.forEach(t),Zcr=i(D),mM=n(D,"LI",{});var eRe=s(mM);eve=n(eRe,"STRONG",{});var $Tt=s(eve);efr=r($Tt,"clip"),$Tt.forEach(t),ofr=r(eRe," \u2014 "),$W=n(eRe,"A",{href:!0});var kTt=s($W);rfr=r(kTt,"TFCLIPModel"),kTt.forEach(t),tfr=r(eRe," (CLIP model)"),eRe.forEach(t),afr=i(D),gM=n(D,"LI",{});var oRe=s(gM);ove=n(oRe,"STRONG",{});var STt=s(ove);nfr=r(STt,"convbert"),STt.forEach(t),sfr=r(oRe," \u2014 "),kW=n(oRe,"A",{href:!0});var RTt=s(kW);lfr=r(RTt,"TFConvBertModel"),RTt.forEach(t),ifr=r(oRe," (ConvBERT model)"),oRe.forEach(t),dfr=i(D),hM=n(D,"LI",{});var rRe=s(hM);rve=n(rRe,"STRONG",{});var PTt=s(rve);cfr=r(PTt,"convnext"),PTt.forEach(t),ffr=r(rRe," \u2014 "),SW=n(rRe,"A",{href:!0});var BTt=s(SW);mfr=r(BTt,"TFConvNextModel"),BTt.forEach(t),gfr=r(rRe," (ConvNeXT model)"),rRe.forEach(t),hfr=i(D),pM=n(D,"LI",{});var tRe=s(pM);tve=n(tRe,"STRONG",{});var ITt=s(tve);pfr=r(ITt,"ctrl"),ITt.forEach(t),_fr=r(tRe," \u2014 "),RW=n(tRe,"A",{href:!0});var NTt=s(RW);ufr=r(NTt,"TFCTRLModel"),NTt.forEach(t),bfr=r(tRe," (CTRL model)"),tRe.forEach(t),vfr=i(D),_M=n(D,"LI",{});var aRe=s(_M);ave=n(aRe,"STRONG",{});var qTt=s(ave);Ffr=r(qTt,"data2vec-vision"),qTt.forEach(t),Tfr=r(aRe," \u2014 "),PW=n(aRe,"A",{href:!0});var jTt=s(PW);Mfr=r(jTt,"TFData2VecVisionModel"),jTt.forEach(t),Efr=r(aRe," (Data2VecVision model)"),aRe.forEach(t),Cfr=i(D),uM=n(D,"LI",{});var nRe=s(uM);nve=n(nRe,"STRONG",{});var DTt=s(nve);wfr=r(DTt,"deberta"),DTt.forEach(t),Afr=r(nRe," \u2014 "),BW=n(nRe,"A",{href:!0});var GTt=s(BW);yfr=r(GTt,"TFDebertaModel"),GTt.forEach(t),Lfr=r(nRe," (DeBERTa model)"),nRe.forEach(t),xfr=i(D),bM=n(D,"LI",{});var sRe=s(bM);sve=n(sRe,"STRONG",{});var OTt=s(sve);$fr=r(OTt,"deberta-v2"),OTt.forEach(t),kfr=r(sRe," \u2014 "),IW=n(sRe,"A",{href:!0});var VTt=s(IW);Sfr=r(VTt,"TFDebertaV2Model"),VTt.forEach(t),Rfr=r(sRe," (DeBERTa-v2 model)"),sRe.forEach(t),Pfr=i(D),vM=n(D,"LI",{});var lRe=s(vM);lve=n(lRe,"STRONG",{});var XTt=s(lve);Bfr=r(XTt,"distilbert"),XTt.forEach(t),Ifr=r(lRe," \u2014 "),NW=n(lRe,"A",{href:!0});var zTt=s(NW);Nfr=r(zTt,"TFDistilBertModel"),zTt.forEach(t),qfr=r(lRe," (DistilBERT model)"),lRe.forEach(t),jfr=i(D),FM=n(D,"LI",{});var iRe=s(FM);ive=n(iRe,"STRONG",{});var WTt=s(ive);Dfr=r(WTt,"dpr"),WTt.forEach(t),Gfr=r(iRe," \u2014 "),qW=n(iRe,"A",{href:!0});var QTt=s(qW);Ofr=r(QTt,"TFDPRQuestionEncoder"),QTt.forEach(t),Vfr=r(iRe," (DPR model)"),iRe.forEach(t),Xfr=i(D),TM=n(D,"LI",{});var dRe=s(TM);dve=n(dRe,"STRONG",{});var HTt=s(dve);zfr=r(HTt,"electra"),HTt.forEach(t),Wfr=r(dRe," \u2014 "),jW=n(dRe,"A",{href:!0});var UTt=s(jW);Qfr=r(UTt,"TFElectraModel"),UTt.forEach(t),Hfr=r(dRe," (ELECTRA model)"),dRe.forEach(t),Ufr=i(D),MM=n(D,"LI",{});var cRe=s(MM);cve=n(cRe,"STRONG",{});var JTt=s(cve);Jfr=r(JTt,"flaubert"),JTt.forEach(t),Yfr=r(cRe," \u2014 "),DW=n(cRe,"A",{href:!0});var YTt=s(DW);Kfr=r(YTt,"TFFlaubertModel"),YTt.forEach(t),Zfr=r(cRe," (FlauBERT model)"),cRe.forEach(t),emr=i(D),Ns=n(D,"LI",{});var ek=s(Ns);fve=n(ek,"STRONG",{});var KTt=s(fve);omr=r(KTt,"funnel"),KTt.forEach(t),rmr=r(ek," \u2014 "),GW=n(ek,"A",{href:!0});var ZTt=s(GW);tmr=r(ZTt,"TFFunnelModel"),ZTt.forEach(t),amr=r(ek," or "),OW=n(ek,"A",{href:!0});var eMt=s(OW);nmr=r(eMt,"TFFunnelBaseModel"),eMt.forEach(t),smr=r(ek," (Funnel Transformer model)"),ek.forEach(t),lmr=i(D),EM=n(D,"LI",{});var fRe=s(EM);mve=n(fRe,"STRONG",{});var oMt=s(mve);imr=r(oMt,"gpt2"),oMt.forEach(t),dmr=r(fRe," \u2014 "),VW=n(fRe,"A",{href:!0});var rMt=s(VW);cmr=r(rMt,"TFGPT2Model"),rMt.forEach(t),fmr=r(fRe," (OpenAI GPT-2 model)"),fRe.forEach(t),mmr=i(D),CM=n(D,"LI",{});var mRe=s(CM);gve=n(mRe,"STRONG",{});var tMt=s(gve);gmr=r(tMt,"gptj"),tMt.forEach(t),hmr=r(mRe," \u2014 "),XW=n(mRe,"A",{href:!0});var aMt=s(XW);pmr=r(aMt,"TFGPTJModel"),aMt.forEach(t),_mr=r(mRe," (GPT-J model)"),mRe.forEach(t),umr=i(D),wM=n(D,"LI",{});var gRe=s(wM);hve=n(gRe,"STRONG",{});var nMt=s(hve);bmr=r(nMt,"hubert"),nMt.forEach(t),vmr=r(gRe," \u2014 "),zW=n(gRe,"A",{href:!0});var sMt=s(zW);Fmr=r(sMt,"TFHubertModel"),sMt.forEach(t),Tmr=r(gRe," (Hubert model)"),gRe.forEach(t),Mmr=i(D),AM=n(D,"LI",{});var hRe=s(AM);pve=n(hRe,"STRONG",{});var lMt=s(pve);Emr=r(lMt,"layoutlm"),lMt.forEach(t),Cmr=r(hRe," \u2014 "),WW=n(hRe,"A",{href:!0});var iMt=s(WW);wmr=r(iMt,"TFLayoutLMModel"),iMt.forEach(t),Amr=r(hRe," (LayoutLM model)"),hRe.forEach(t),ymr=i(D),yM=n(D,"LI",{});var pRe=s(yM);_ve=n(pRe,"STRONG",{});var dMt=s(_ve);Lmr=r(dMt,"led"),dMt.forEach(t),xmr=r(pRe," \u2014 "),QW=n(pRe,"A",{href:!0});var cMt=s(QW);$mr=r(cMt,"TFLEDModel"),cMt.forEach(t),kmr=r(pRe," (LED model)"),pRe.forEach(t),Smr=i(D),LM=n(D,"LI",{});var _Re=s(LM);uve=n(_Re,"STRONG",{});var fMt=s(uve);Rmr=r(fMt,"longformer"),fMt.forEach(t),Pmr=r(_Re," \u2014 "),HW=n(_Re,"A",{href:!0});var mMt=s(HW);Bmr=r(mMt,"TFLongformerModel"),mMt.forEach(t),Imr=r(_Re," (Longformer model)"),_Re.forEach(t),Nmr=i(D),xM=n(D,"LI",{});var uRe=s(xM);bve=n(uRe,"STRONG",{});var gMt=s(bve);qmr=r(gMt,"lxmert"),gMt.forEach(t),jmr=r(uRe," \u2014 "),UW=n(uRe,"A",{href:!0});var hMt=s(UW);Dmr=r(hMt,"TFLxmertModel"),hMt.forEach(t),Gmr=r(uRe," (LXMERT model)"),uRe.forEach(t),Omr=i(D),$M=n(D,"LI",{});var bRe=s($M);vve=n(bRe,"STRONG",{});var pMt=s(vve);Vmr=r(pMt,"marian"),pMt.forEach(t),Xmr=r(bRe," \u2014 "),JW=n(bRe,"A",{href:!0});var _Mt=s(JW);zmr=r(_Mt,"TFMarianModel"),_Mt.forEach(t),Wmr=r(bRe," (Marian model)"),bRe.forEach(t),Qmr=i(D),kM=n(D,"LI",{});var vRe=s(kM);Fve=n(vRe,"STRONG",{});var uMt=s(Fve);Hmr=r(uMt,"mbart"),uMt.forEach(t),Umr=r(vRe," \u2014 "),YW=n(vRe,"A",{href:!0});var bMt=s(YW);Jmr=r(bMt,"TFMBartModel"),bMt.forEach(t),Ymr=r(vRe," (mBART model)"),vRe.forEach(t),Kmr=i(D),SM=n(D,"LI",{});var FRe=s(SM);Tve=n(FRe,"STRONG",{});var vMt=s(Tve);Zmr=r(vMt,"mobilebert"),vMt.forEach(t),egr=r(FRe," \u2014 "),KW=n(FRe,"A",{href:!0});var FMt=s(KW);ogr=r(FMt,"TFMobileBertModel"),FMt.forEach(t),rgr=r(FRe," (MobileBERT model)"),FRe.forEach(t),tgr=i(D),RM=n(D,"LI",{});var TRe=s(RM);Mve=n(TRe,"STRONG",{});var TMt=s(Mve);agr=r(TMt,"mpnet"),TMt.forEach(t),ngr=r(TRe," \u2014 "),ZW=n(TRe,"A",{href:!0});var MMt=s(ZW);sgr=r(MMt,"TFMPNetModel"),MMt.forEach(t),lgr=r(TRe," (MPNet model)"),TRe.forEach(t),igr=i(D),PM=n(D,"LI",{});var MRe=s(PM);Eve=n(MRe,"STRONG",{});var EMt=s(Eve);dgr=r(EMt,"mt5"),EMt.forEach(t),cgr=r(MRe," \u2014 "),eQ=n(MRe,"A",{href:!0});var CMt=s(eQ);fgr=r(CMt,"TFMT5Model"),CMt.forEach(t),mgr=r(MRe," (MT5 model)"),MRe.forEach(t),ggr=i(D),BM=n(D,"LI",{});var ERe=s(BM);Cve=n(ERe,"STRONG",{});var wMt=s(Cve);hgr=r(wMt,"openai-gpt"),wMt.forEach(t),pgr=r(ERe," \u2014 "),oQ=n(ERe,"A",{href:!0});var AMt=s(oQ);_gr=r(AMt,"TFOpenAIGPTModel"),AMt.forEach(t),ugr=r(ERe," (OpenAI GPT model)"),ERe.forEach(t),bgr=i(D),IM=n(D,"LI",{});var CRe=s(IM);wve=n(CRe,"STRONG",{});var yMt=s(wve);vgr=r(yMt,"opt"),yMt.forEach(t),Fgr=r(CRe," \u2014 "),rQ=n(CRe,"A",{href:!0});var LMt=s(rQ);Tgr=r(LMt,"TFOPTModel"),LMt.forEach(t),Mgr=r(CRe," (OPT model)"),CRe.forEach(t),Egr=i(D),NM=n(D,"LI",{});var wRe=s(NM);Ave=n(wRe,"STRONG",{});var xMt=s(Ave);Cgr=r(xMt,"pegasus"),xMt.forEach(t),wgr=r(wRe," \u2014 "),tQ=n(wRe,"A",{href:!0});var $Mt=s(tQ);Agr=r($Mt,"TFPegasusModel"),$Mt.forEach(t),ygr=r(wRe," (Pegasus model)"),wRe.forEach(t),Lgr=i(D),qM=n(D,"LI",{});var ARe=s(qM);yve=n(ARe,"STRONG",{});var kMt=s(yve);xgr=r(kMt,"rembert"),kMt.forEach(t),$gr=r(ARe," \u2014 "),aQ=n(ARe,"A",{href:!0});var SMt=s(aQ);kgr=r(SMt,"TFRemBertModel"),SMt.forEach(t),Sgr=r(ARe," (RemBERT model)"),ARe.forEach(t),Rgr=i(D),jM=n(D,"LI",{});var yRe=s(jM);Lve=n(yRe,"STRONG",{});var RMt=s(Lve);Pgr=r(RMt,"roberta"),RMt.forEach(t),Bgr=r(yRe," \u2014 "),nQ=n(yRe,"A",{href:!0});var PMt=s(nQ);Igr=r(PMt,"TFRobertaModel"),PMt.forEach(t),Ngr=r(yRe," (RoBERTa model)"),yRe.forEach(t),qgr=i(D),DM=n(D,"LI",{});var LRe=s(DM);xve=n(LRe,"STRONG",{});var BMt=s(xve);jgr=r(BMt,"roformer"),BMt.forEach(t),Dgr=r(LRe," \u2014 "),sQ=n(LRe,"A",{href:!0});var IMt=s(sQ);Ggr=r(IMt,"TFRoFormerModel"),IMt.forEach(t),Ogr=r(LRe," (RoFormer model)"),LRe.forEach(t),Vgr=i(D),GM=n(D,"LI",{});var xRe=s(GM);$ve=n(xRe,"STRONG",{});var NMt=s($ve);Xgr=r(NMt,"speech_to_text"),NMt.forEach(t),zgr=r(xRe," \u2014 "),lQ=n(xRe,"A",{href:!0});var qMt=s(lQ);Wgr=r(qMt,"TFSpeech2TextModel"),qMt.forEach(t),Qgr=r(xRe," (Speech2Text model)"),xRe.forEach(t),Hgr=i(D),OM=n(D,"LI",{});var $Re=s(OM);kve=n($Re,"STRONG",{});var jMt=s(kve);Ugr=r(jMt,"swin"),jMt.forEach(t),Jgr=r($Re," \u2014 "),iQ=n($Re,"A",{href:!0});var DMt=s(iQ);Ygr=r(DMt,"TFSwinModel"),DMt.forEach(t),Kgr=r($Re," (Swin Transformer model)"),$Re.forEach(t),Zgr=i(D),VM=n(D,"LI",{});var kRe=s(VM);Sve=n(kRe,"STRONG",{});var GMt=s(Sve);ehr=r(GMt,"t5"),GMt.forEach(t),ohr=r(kRe," \u2014 "),dQ=n(kRe,"A",{href:!0});var OMt=s(dQ);rhr=r(OMt,"TFT5Model"),OMt.forEach(t),thr=r(kRe," (T5 model)"),kRe.forEach(t),ahr=i(D),XM=n(D,"LI",{});var SRe=s(XM);Rve=n(SRe,"STRONG",{});var VMt=s(Rve);nhr=r(VMt,"tapas"),VMt.forEach(t),shr=r(SRe," \u2014 "),cQ=n(SRe,"A",{href:!0});var XMt=s(cQ);lhr=r(XMt,"TFTapasModel"),XMt.forEach(t),ihr=r(SRe," (TAPAS model)"),SRe.forEach(t),dhr=i(D),zM=n(D,"LI",{});var RRe=s(zM);Pve=n(RRe,"STRONG",{});var zMt=s(Pve);chr=r(zMt,"transfo-xl"),zMt.forEach(t),fhr=r(RRe," \u2014 "),fQ=n(RRe,"A",{href:!0});var WMt=s(fQ);mhr=r(WMt,"TFTransfoXLModel"),WMt.forEach(t),ghr=r(RRe," (Transformer-XL model)"),RRe.forEach(t),hhr=i(D),WM=n(D,"LI",{});var PRe=s(WM);Bve=n(PRe,"STRONG",{});var QMt=s(Bve);phr=r(QMt,"vit"),QMt.forEach(t),_hr=r(PRe," \u2014 "),mQ=n(PRe,"A",{href:!0});var HMt=s(mQ);uhr=r(HMt,"TFViTModel"),HMt.forEach(t),bhr=r(PRe," (ViT model)"),PRe.forEach(t),vhr=i(D),QM=n(D,"LI",{});var BRe=s(QM);Ive=n(BRe,"STRONG",{});var UMt=s(Ive);Fhr=r(UMt,"vit_mae"),UMt.forEach(t),Thr=r(BRe," \u2014 "),gQ=n(BRe,"A",{href:!0});var JMt=s(gQ);Mhr=r(JMt,"TFViTMAEModel"),JMt.forEach(t),Ehr=r(BRe," (ViTMAE model)"),BRe.forEach(t),Chr=i(D),HM=n(D,"LI",{});var IRe=s(HM);Nve=n(IRe,"STRONG",{});var YMt=s(Nve);whr=r(YMt,"wav2vec2"),YMt.forEach(t),Ahr=r(IRe," \u2014 "),hQ=n(IRe,"A",{href:!0});var KMt=s(hQ);yhr=r(KMt,"TFWav2Vec2Model"),KMt.forEach(t),Lhr=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),xhr=i(D),UM=n(D,"LI",{});var NRe=s(UM);qve=n(NRe,"STRONG",{});var ZMt=s(qve);$hr=r(ZMt,"xlm"),ZMt.forEach(t),khr=r(NRe," \u2014 "),pQ=n(NRe,"A",{href:!0});var e4t=s(pQ);Shr=r(e4t,"TFXLMModel"),e4t.forEach(t),Rhr=r(NRe," (XLM model)"),NRe.forEach(t),Phr=i(D),JM=n(D,"LI",{});var qRe=s(JM);jve=n(qRe,"STRONG",{});var o4t=s(jve);Bhr=r(o4t,"xlm-roberta"),o4t.forEach(t),Ihr=r(qRe," \u2014 "),_Q=n(qRe,"A",{href:!0});var r4t=s(_Q);Nhr=r(r4t,"TFXLMRobertaModel"),r4t.forEach(t),qhr=r(qRe," (XLM-RoBERTa model)"),qRe.forEach(t),jhr=i(D),YM=n(D,"LI",{});var jRe=s(YM);Dve=n(jRe,"STRONG",{});var t4t=s(Dve);Dhr=r(t4t,"xlnet"),t4t.forEach(t),Ghr=r(jRe," \u2014 "),uQ=n(jRe,"A",{href:!0});var a4t=s(uQ);Ohr=r(a4t,"TFXLNetModel"),a4t.forEach(t),Vhr=r(jRe," (XLNet model)"),jRe.forEach(t),D.forEach(t),Xhr=i(pl),T(KM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Oje=i(f),zd=n(f,"H2",{class:!0});var HGe=s(zd);ZM=n(HGe,"A",{id:!0,class:!0,href:!0});var n4t=s(ZM);Gve=n(n4t,"SPAN",{});var s4t=s(Gve);T(M7.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),zhr=i(HGe),Ove=n(HGe,"SPAN",{});var l4t=s(Ove);Whr=r(l4t,"TFAutoModelForPreTraining"),l4t.forEach(t),HGe.forEach(t),Vje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(E7.$$.fragment,_l),Qhr=i(_l),Wd=n(_l,"P",{});var $ee=s(Wd);Hhr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bQ=n($ee,"A",{href:!0});var i4t=s(bQ);Uhr=r(i4t,"from_pretrained()"),i4t.forEach(t),Jhr=r($ee," class method or the "),vQ=n($ee,"A",{href:!0});var d4t=s(vQ);Yhr=r(d4t,"from_config()"),d4t.forEach(t),Khr=r($ee,` class
method.`),$ee.forEach(t),Zhr=i(_l),C7=n(_l,"P",{});var UGe=s(C7);epr=r(UGe,"This class cannot be instantiated directly using "),Vve=n(UGe,"CODE",{});var c4t=s(Vve);opr=r(c4t,"__init__()"),c4t.forEach(t),rpr=r(UGe," (throws an error)."),UGe.forEach(t),tpr=i(_l),Lt=n(_l,"DIV",{class:!0});var BA=s(Lt);T(w7.$$.fragment,BA),apr=i(BA),Xve=n(BA,"P",{});var f4t=s(Xve);npr=r(f4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f4t.forEach(t),spr=i(BA),Qd=n(BA,"P",{});var kee=s(Qd);lpr=r(kee,`Note:
Loading a model from its configuration file does `),zve=n(kee,"STRONG",{});var m4t=s(zve);ipr=r(m4t,"not"),m4t.forEach(t),dpr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(kee,"A",{href:!0});var g4t=s(FQ);cpr=r(g4t,"from_pretrained()"),g4t.forEach(t),fpr=r(kee," to load the model weights."),kee.forEach(t),mpr=i(BA),T(e4.$$.fragment,BA),BA.forEach(t),gpr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(A7.$$.fragment,ul),hpr=i(ul),Wve=n(ul,"P",{});var h4t=s(Wve);ppr=r(h4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h4t.forEach(t),_pr=i(ul),Za=n(ul,"P",{});var IA=s(Za);upr=r(IA,"The model class to instantiate is selected based on the "),Qve=n(IA,"CODE",{});var p4t=s(Qve);bpr=r(p4t,"model_type"),p4t.forEach(t),vpr=r(IA,` property of the config object (either
passed as an argument or loaded from `),Hve=n(IA,"CODE",{});var _4t=s(Hve);Fpr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Tpr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(IA,"CODE",{});var u4t=s(Uve);Mpr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),Epr=r(IA,":"),IA.forEach(t),Cpr=i(ul),se=n(ul,"UL",{});var le=s(se);o4=n(le,"LI",{});var DRe=s(o4);Jve=n(DRe,"STRONG",{});var b4t=s(Jve);wpr=r(b4t,"albert"),b4t.forEach(t),Apr=r(DRe," \u2014 "),TQ=n(DRe,"A",{href:!0});var v4t=s(TQ);ypr=r(v4t,"TFAlbertForPreTraining"),v4t.forEach(t),Lpr=r(DRe," (ALBERT model)"),DRe.forEach(t),xpr=i(le),r4=n(le,"LI",{});var GRe=s(r4);Yve=n(GRe,"STRONG",{});var F4t=s(Yve);$pr=r(F4t,"bart"),F4t.forEach(t),kpr=r(GRe," \u2014 "),MQ=n(GRe,"A",{href:!0});var T4t=s(MQ);Spr=r(T4t,"TFBartForConditionalGeneration"),T4t.forEach(t),Rpr=r(GRe," (BART model)"),GRe.forEach(t),Ppr=i(le),t4=n(le,"LI",{});var ORe=s(t4);Kve=n(ORe,"STRONG",{});var M4t=s(Kve);Bpr=r(M4t,"bert"),M4t.forEach(t),Ipr=r(ORe," \u2014 "),EQ=n(ORe,"A",{href:!0});var E4t=s(EQ);Npr=r(E4t,"TFBertForPreTraining"),E4t.forEach(t),qpr=r(ORe," (BERT model)"),ORe.forEach(t),jpr=i(le),a4=n(le,"LI",{});var VRe=s(a4);Zve=n(VRe,"STRONG",{});var C4t=s(Zve);Dpr=r(C4t,"camembert"),C4t.forEach(t),Gpr=r(VRe," \u2014 "),CQ=n(VRe,"A",{href:!0});var w4t=s(CQ);Opr=r(w4t,"TFCamembertForMaskedLM"),w4t.forEach(t),Vpr=r(VRe," (CamemBERT model)"),VRe.forEach(t),Xpr=i(le),n4=n(le,"LI",{});var XRe=s(n4);eFe=n(XRe,"STRONG",{});var A4t=s(eFe);zpr=r(A4t,"ctrl"),A4t.forEach(t),Wpr=r(XRe," \u2014 "),wQ=n(XRe,"A",{href:!0});var y4t=s(wQ);Qpr=r(y4t,"TFCTRLLMHeadModel"),y4t.forEach(t),Hpr=r(XRe," (CTRL model)"),XRe.forEach(t),Upr=i(le),s4=n(le,"LI",{});var zRe=s(s4);oFe=n(zRe,"STRONG",{});var L4t=s(oFe);Jpr=r(L4t,"distilbert"),L4t.forEach(t),Ypr=r(zRe," \u2014 "),AQ=n(zRe,"A",{href:!0});var x4t=s(AQ);Kpr=r(x4t,"TFDistilBertForMaskedLM"),x4t.forEach(t),Zpr=r(zRe," (DistilBERT model)"),zRe.forEach(t),e_r=i(le),l4=n(le,"LI",{});var WRe=s(l4);rFe=n(WRe,"STRONG",{});var $4t=s(rFe);o_r=r($4t,"electra"),$4t.forEach(t),r_r=r(WRe," \u2014 "),yQ=n(WRe,"A",{href:!0});var k4t=s(yQ);t_r=r(k4t,"TFElectraForPreTraining"),k4t.forEach(t),a_r=r(WRe," (ELECTRA model)"),WRe.forEach(t),n_r=i(le),i4=n(le,"LI",{});var QRe=s(i4);tFe=n(QRe,"STRONG",{});var S4t=s(tFe);s_r=r(S4t,"flaubert"),S4t.forEach(t),l_r=r(QRe," \u2014 "),LQ=n(QRe,"A",{href:!0});var R4t=s(LQ);i_r=r(R4t,"TFFlaubertWithLMHeadModel"),R4t.forEach(t),d_r=r(QRe," (FlauBERT model)"),QRe.forEach(t),c_r=i(le),d4=n(le,"LI",{});var HRe=s(d4);aFe=n(HRe,"STRONG",{});var P4t=s(aFe);f_r=r(P4t,"funnel"),P4t.forEach(t),m_r=r(HRe," \u2014 "),xQ=n(HRe,"A",{href:!0});var B4t=s(xQ);g_r=r(B4t,"TFFunnelForPreTraining"),B4t.forEach(t),h_r=r(HRe," (Funnel Transformer model)"),HRe.forEach(t),p_r=i(le),c4=n(le,"LI",{});var URe=s(c4);nFe=n(URe,"STRONG",{});var I4t=s(nFe);__r=r(I4t,"gpt2"),I4t.forEach(t),u_r=r(URe," \u2014 "),$Q=n(URe,"A",{href:!0});var N4t=s($Q);b_r=r(N4t,"TFGPT2LMHeadModel"),N4t.forEach(t),v_r=r(URe," (OpenAI GPT-2 model)"),URe.forEach(t),F_r=i(le),f4=n(le,"LI",{});var JRe=s(f4);sFe=n(JRe,"STRONG",{});var q4t=s(sFe);T_r=r(q4t,"layoutlm"),q4t.forEach(t),M_r=r(JRe," \u2014 "),kQ=n(JRe,"A",{href:!0});var j4t=s(kQ);E_r=r(j4t,"TFLayoutLMForMaskedLM"),j4t.forEach(t),C_r=r(JRe," (LayoutLM model)"),JRe.forEach(t),w_r=i(le),m4=n(le,"LI",{});var YRe=s(m4);lFe=n(YRe,"STRONG",{});var D4t=s(lFe);A_r=r(D4t,"lxmert"),D4t.forEach(t),y_r=r(YRe," \u2014 "),SQ=n(YRe,"A",{href:!0});var G4t=s(SQ);L_r=r(G4t,"TFLxmertForPreTraining"),G4t.forEach(t),x_r=r(YRe," (LXMERT model)"),YRe.forEach(t),$_r=i(le),g4=n(le,"LI",{});var KRe=s(g4);iFe=n(KRe,"STRONG",{});var O4t=s(iFe);k_r=r(O4t,"mobilebert"),O4t.forEach(t),S_r=r(KRe," \u2014 "),RQ=n(KRe,"A",{href:!0});var V4t=s(RQ);R_r=r(V4t,"TFMobileBertForPreTraining"),V4t.forEach(t),P_r=r(KRe," (MobileBERT model)"),KRe.forEach(t),B_r=i(le),h4=n(le,"LI",{});var ZRe=s(h4);dFe=n(ZRe,"STRONG",{});var X4t=s(dFe);I_r=r(X4t,"mpnet"),X4t.forEach(t),N_r=r(ZRe," \u2014 "),PQ=n(ZRe,"A",{href:!0});var z4t=s(PQ);q_r=r(z4t,"TFMPNetForMaskedLM"),z4t.forEach(t),j_r=r(ZRe," (MPNet model)"),ZRe.forEach(t),D_r=i(le),p4=n(le,"LI",{});var ePe=s(p4);cFe=n(ePe,"STRONG",{});var W4t=s(cFe);G_r=r(W4t,"openai-gpt"),W4t.forEach(t),O_r=r(ePe," \u2014 "),BQ=n(ePe,"A",{href:!0});var Q4t=s(BQ);V_r=r(Q4t,"TFOpenAIGPTLMHeadModel"),Q4t.forEach(t),X_r=r(ePe," (OpenAI GPT model)"),ePe.forEach(t),z_r=i(le),_4=n(le,"LI",{});var oPe=s(_4);fFe=n(oPe,"STRONG",{});var H4t=s(fFe);W_r=r(H4t,"roberta"),H4t.forEach(t),Q_r=r(oPe," \u2014 "),IQ=n(oPe,"A",{href:!0});var U4t=s(IQ);H_r=r(U4t,"TFRobertaForMaskedLM"),U4t.forEach(t),U_r=r(oPe," (RoBERTa model)"),oPe.forEach(t),J_r=i(le),u4=n(le,"LI",{});var rPe=s(u4);mFe=n(rPe,"STRONG",{});var J4t=s(mFe);Y_r=r(J4t,"t5"),J4t.forEach(t),K_r=r(rPe," \u2014 "),NQ=n(rPe,"A",{href:!0});var Y4t=s(NQ);Z_r=r(Y4t,"TFT5ForConditionalGeneration"),Y4t.forEach(t),eur=r(rPe," (T5 model)"),rPe.forEach(t),our=i(le),b4=n(le,"LI",{});var tPe=s(b4);gFe=n(tPe,"STRONG",{});var K4t=s(gFe);rur=r(K4t,"tapas"),K4t.forEach(t),tur=r(tPe," \u2014 "),qQ=n(tPe,"A",{href:!0});var Z4t=s(qQ);aur=r(Z4t,"TFTapasForMaskedLM"),Z4t.forEach(t),nur=r(tPe," (TAPAS model)"),tPe.forEach(t),sur=i(le),v4=n(le,"LI",{});var aPe=s(v4);hFe=n(aPe,"STRONG",{});var eEt=s(hFe);lur=r(eEt,"transfo-xl"),eEt.forEach(t),iur=r(aPe," \u2014 "),jQ=n(aPe,"A",{href:!0});var oEt=s(jQ);dur=r(oEt,"TFTransfoXLLMHeadModel"),oEt.forEach(t),cur=r(aPe," (Transformer-XL model)"),aPe.forEach(t),fur=i(le),F4=n(le,"LI",{});var nPe=s(F4);pFe=n(nPe,"STRONG",{});var rEt=s(pFe);mur=r(rEt,"vit_mae"),rEt.forEach(t),gur=r(nPe," \u2014 "),DQ=n(nPe,"A",{href:!0});var tEt=s(DQ);hur=r(tEt,"TFViTMAEForPreTraining"),tEt.forEach(t),pur=r(nPe," (ViTMAE model)"),nPe.forEach(t),_ur=i(le),T4=n(le,"LI",{});var sPe=s(T4);_Fe=n(sPe,"STRONG",{});var aEt=s(_Fe);uur=r(aEt,"xlm"),aEt.forEach(t),bur=r(sPe," \u2014 "),GQ=n(sPe,"A",{href:!0});var nEt=s(GQ);vur=r(nEt,"TFXLMWithLMHeadModel"),nEt.forEach(t),Fur=r(sPe," (XLM model)"),sPe.forEach(t),Tur=i(le),M4=n(le,"LI",{});var lPe=s(M4);uFe=n(lPe,"STRONG",{});var sEt=s(uFe);Mur=r(sEt,"xlm-roberta"),sEt.forEach(t),Eur=r(lPe," \u2014 "),OQ=n(lPe,"A",{href:!0});var lEt=s(OQ);Cur=r(lEt,"TFXLMRobertaForMaskedLM"),lEt.forEach(t),wur=r(lPe," (XLM-RoBERTa model)"),lPe.forEach(t),Aur=i(le),E4=n(le,"LI",{});var iPe=s(E4);bFe=n(iPe,"STRONG",{});var iEt=s(bFe);yur=r(iEt,"xlnet"),iEt.forEach(t),Lur=r(iPe," \u2014 "),VQ=n(iPe,"A",{href:!0});var dEt=s(VQ);xur=r(dEt,"TFXLNetLMHeadModel"),dEt.forEach(t),$ur=r(iPe," (XLNet model)"),iPe.forEach(t),le.forEach(t),kur=i(ul),T(C4.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Xje=i(f),Hd=n(f,"H2",{class:!0});var JGe=s(Hd);w4=n(JGe,"A",{id:!0,class:!0,href:!0});var cEt=s(w4);vFe=n(cEt,"SPAN",{});var fEt=s(vFe);T(y7.$$.fragment,fEt),fEt.forEach(t),cEt.forEach(t),Sur=i(JGe),FFe=n(JGe,"SPAN",{});var mEt=s(FFe);Rur=r(mEt,"TFAutoModelForCausalLM"),mEt.forEach(t),JGe.forEach(t),zje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(L7.$$.fragment,bl),Pur=i(bl),Ud=n(bl,"P",{});var See=s(Ud);Bur=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XQ=n(See,"A",{href:!0});var gEt=s(XQ);Iur=r(gEt,"from_pretrained()"),gEt.forEach(t),Nur=r(See," class method or the "),zQ=n(See,"A",{href:!0});var hEt=s(zQ);qur=r(hEt,"from_config()"),hEt.forEach(t),jur=r(See,` class
method.`),See.forEach(t),Dur=i(bl),x7=n(bl,"P",{});var YGe=s(x7);Gur=r(YGe,"This class cannot be instantiated directly using "),TFe=n(YGe,"CODE",{});var pEt=s(TFe);Our=r(pEt,"__init__()"),pEt.forEach(t),Vur=r(YGe," (throws an error)."),YGe.forEach(t),Xur=i(bl),xt=n(bl,"DIV",{class:!0});var NA=s(xt);T($7.$$.fragment,NA),zur=i(NA),MFe=n(NA,"P",{});var _Et=s(MFe);Wur=r(_Et,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Et.forEach(t),Qur=i(NA),Jd=n(NA,"P",{});var Ree=s(Jd);Hur=r(Ree,`Note:
Loading a model from its configuration file does `),EFe=n(Ree,"STRONG",{});var uEt=s(EFe);Uur=r(uEt,"not"),uEt.forEach(t),Jur=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(Ree,"A",{href:!0});var bEt=s(WQ);Yur=r(bEt,"from_pretrained()"),bEt.forEach(t),Kur=r(Ree," to load the model weights."),Ree.forEach(t),Zur=i(NA),T(A4.$$.fragment,NA),NA.forEach(t),ebr=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(k7.$$.fragment,vl),obr=i(vl),CFe=n(vl,"P",{});var vEt=s(CFe);rbr=r(vEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vEt.forEach(t),tbr=i(vl),en=n(vl,"P",{});var qA=s(en);abr=r(qA,"The model class to instantiate is selected based on the "),wFe=n(qA,"CODE",{});var FEt=s(wFe);nbr=r(FEt,"model_type"),FEt.forEach(t),sbr=r(qA,` property of the config object (either
passed as an argument or loaded from `),AFe=n(qA,"CODE",{});var TEt=s(AFe);lbr=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),ibr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(qA,"CODE",{});var MEt=s(yFe);dbr=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),cbr=r(qA,":"),qA.forEach(t),fbr=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);y4=n(Ce,"LI",{});var dPe=s(y4);LFe=n(dPe,"STRONG",{});var EEt=s(LFe);mbr=r(EEt,"bert"),EEt.forEach(t),gbr=r(dPe," \u2014 "),QQ=n(dPe,"A",{href:!0});var CEt=s(QQ);hbr=r(CEt,"TFBertLMHeadModel"),CEt.forEach(t),pbr=r(dPe," (BERT model)"),dPe.forEach(t),_br=i(Ce),L4=n(Ce,"LI",{});var cPe=s(L4);xFe=n(cPe,"STRONG",{});var wEt=s(xFe);ubr=r(wEt,"camembert"),wEt.forEach(t),bbr=r(cPe," \u2014 "),HQ=n(cPe,"A",{href:!0});var AEt=s(HQ);vbr=r(AEt,"TFCamembertForCausalLM"),AEt.forEach(t),Fbr=r(cPe," (CamemBERT model)"),cPe.forEach(t),Tbr=i(Ce),x4=n(Ce,"LI",{});var fPe=s(x4);$Fe=n(fPe,"STRONG",{});var yEt=s($Fe);Mbr=r(yEt,"ctrl"),yEt.forEach(t),Ebr=r(fPe," \u2014 "),UQ=n(fPe,"A",{href:!0});var LEt=s(UQ);Cbr=r(LEt,"TFCTRLLMHeadModel"),LEt.forEach(t),wbr=r(fPe," (CTRL model)"),fPe.forEach(t),Abr=i(Ce),$4=n(Ce,"LI",{});var mPe=s($4);kFe=n(mPe,"STRONG",{});var xEt=s(kFe);ybr=r(xEt,"gpt2"),xEt.forEach(t),Lbr=r(mPe," \u2014 "),JQ=n(mPe,"A",{href:!0});var $Et=s(JQ);xbr=r($Et,"TFGPT2LMHeadModel"),$Et.forEach(t),$br=r(mPe," (OpenAI GPT-2 model)"),mPe.forEach(t),kbr=i(Ce),k4=n(Ce,"LI",{});var gPe=s(k4);SFe=n(gPe,"STRONG",{});var kEt=s(SFe);Sbr=r(kEt,"gptj"),kEt.forEach(t),Rbr=r(gPe," \u2014 "),YQ=n(gPe,"A",{href:!0});var SEt=s(YQ);Pbr=r(SEt,"TFGPTJForCausalLM"),SEt.forEach(t),Bbr=r(gPe," (GPT-J model)"),gPe.forEach(t),Ibr=i(Ce),S4=n(Ce,"LI",{});var hPe=s(S4);RFe=n(hPe,"STRONG",{});var REt=s(RFe);Nbr=r(REt,"openai-gpt"),REt.forEach(t),qbr=r(hPe," \u2014 "),KQ=n(hPe,"A",{href:!0});var PEt=s(KQ);jbr=r(PEt,"TFOpenAIGPTLMHeadModel"),PEt.forEach(t),Dbr=r(hPe," (OpenAI GPT model)"),hPe.forEach(t),Gbr=i(Ce),R4=n(Ce,"LI",{});var pPe=s(R4);PFe=n(pPe,"STRONG",{});var BEt=s(PFe);Obr=r(BEt,"opt"),BEt.forEach(t),Vbr=r(pPe," \u2014 "),ZQ=n(pPe,"A",{href:!0});var IEt=s(ZQ);Xbr=r(IEt,"TFOPTForCausalLM"),IEt.forEach(t),zbr=r(pPe," (OPT model)"),pPe.forEach(t),Wbr=i(Ce),P4=n(Ce,"LI",{});var _Pe=s(P4);BFe=n(_Pe,"STRONG",{});var NEt=s(BFe);Qbr=r(NEt,"rembert"),NEt.forEach(t),Hbr=r(_Pe," \u2014 "),eH=n(_Pe,"A",{href:!0});var qEt=s(eH);Ubr=r(qEt,"TFRemBertForCausalLM"),qEt.forEach(t),Jbr=r(_Pe," (RemBERT model)"),_Pe.forEach(t),Ybr=i(Ce),B4=n(Ce,"LI",{});var uPe=s(B4);IFe=n(uPe,"STRONG",{});var jEt=s(IFe);Kbr=r(jEt,"roberta"),jEt.forEach(t),Zbr=r(uPe," \u2014 "),oH=n(uPe,"A",{href:!0});var DEt=s(oH);e2r=r(DEt,"TFRobertaForCausalLM"),DEt.forEach(t),o2r=r(uPe," (RoBERTa model)"),uPe.forEach(t),r2r=i(Ce),I4=n(Ce,"LI",{});var bPe=s(I4);NFe=n(bPe,"STRONG",{});var GEt=s(NFe);t2r=r(GEt,"roformer"),GEt.forEach(t),a2r=r(bPe," \u2014 "),rH=n(bPe,"A",{href:!0});var OEt=s(rH);n2r=r(OEt,"TFRoFormerForCausalLM"),OEt.forEach(t),s2r=r(bPe," (RoFormer model)"),bPe.forEach(t),l2r=i(Ce),N4=n(Ce,"LI",{});var vPe=s(N4);qFe=n(vPe,"STRONG",{});var VEt=s(qFe);i2r=r(VEt,"transfo-xl"),VEt.forEach(t),d2r=r(vPe," \u2014 "),tH=n(vPe,"A",{href:!0});var XEt=s(tH);c2r=r(XEt,"TFTransfoXLLMHeadModel"),XEt.forEach(t),f2r=r(vPe," (Transformer-XL model)"),vPe.forEach(t),m2r=i(Ce),q4=n(Ce,"LI",{});var FPe=s(q4);jFe=n(FPe,"STRONG",{});var zEt=s(jFe);g2r=r(zEt,"xlm"),zEt.forEach(t),h2r=r(FPe," \u2014 "),aH=n(FPe,"A",{href:!0});var WEt=s(aH);p2r=r(WEt,"TFXLMWithLMHeadModel"),WEt.forEach(t),_2r=r(FPe," (XLM model)"),FPe.forEach(t),u2r=i(Ce),j4=n(Ce,"LI",{});var TPe=s(j4);DFe=n(TPe,"STRONG",{});var QEt=s(DFe);b2r=r(QEt,"xlnet"),QEt.forEach(t),v2r=r(TPe," \u2014 "),nH=n(TPe,"A",{href:!0});var HEt=s(nH);F2r=r(HEt,"TFXLNetLMHeadModel"),HEt.forEach(t),T2r=r(TPe," (XLNet model)"),TPe.forEach(t),Ce.forEach(t),M2r=i(vl),T(D4.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Wje=i(f),Yd=n(f,"H2",{class:!0});var KGe=s(Yd);G4=n(KGe,"A",{id:!0,class:!0,href:!0});var UEt=s(G4);GFe=n(UEt,"SPAN",{});var JEt=s(GFe);T(S7.$$.fragment,JEt),JEt.forEach(t),UEt.forEach(t),E2r=i(KGe),OFe=n(KGe,"SPAN",{});var YEt=s(OFe);C2r=r(YEt,"TFAutoModelForImageClassification"),YEt.forEach(t),KGe.forEach(t),Qje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(R7.$$.fragment,Fl),w2r=i(Fl),Kd=n(Fl,"P",{});var Pee=s(Kd);A2r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sH=n(Pee,"A",{href:!0});var KEt=s(sH);y2r=r(KEt,"from_pretrained()"),KEt.forEach(t),L2r=r(Pee," class method or the "),lH=n(Pee,"A",{href:!0});var ZEt=s(lH);x2r=r(ZEt,"from_config()"),ZEt.forEach(t),$2r=r(Pee,` class
method.`),Pee.forEach(t),k2r=i(Fl),P7=n(Fl,"P",{});var ZGe=s(P7);S2r=r(ZGe,"This class cannot be instantiated directly using "),VFe=n(ZGe,"CODE",{});var eCt=s(VFe);R2r=r(eCt,"__init__()"),eCt.forEach(t),P2r=r(ZGe," (throws an error)."),ZGe.forEach(t),B2r=i(Fl),$t=n(Fl,"DIV",{class:!0});var jA=s($t);T(B7.$$.fragment,jA),I2r=i(jA),XFe=n(jA,"P",{});var oCt=s(XFe);N2r=r(oCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oCt.forEach(t),q2r=i(jA),Zd=n(jA,"P",{});var Bee=s(Zd);j2r=r(Bee,`Note:
Loading a model from its configuration file does `),zFe=n(Bee,"STRONG",{});var rCt=s(zFe);D2r=r(rCt,"not"),rCt.forEach(t),G2r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(Bee,"A",{href:!0});var tCt=s(iH);O2r=r(tCt,"from_pretrained()"),tCt.forEach(t),V2r=r(Bee," to load the model weights."),Bee.forEach(t),X2r=i(jA),T(O4.$$.fragment,jA),jA.forEach(t),z2r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(I7.$$.fragment,Tl),W2r=i(Tl),WFe=n(Tl,"P",{});var aCt=s(WFe);Q2r=r(aCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aCt.forEach(t),H2r=i(Tl),on=n(Tl,"P",{});var DA=s(on);U2r=r(DA,"The model class to instantiate is selected based on the "),QFe=n(DA,"CODE",{});var nCt=s(QFe);J2r=r(nCt,"model_type"),nCt.forEach(t),Y2r=r(DA,` property of the config object (either
passed as an argument or loaded from `),HFe=n(DA,"CODE",{});var sCt=s(HFe);K2r=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),Z2r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(DA,"CODE",{});var lCt=s(UFe);evr=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),ovr=r(DA,":"),DA.forEach(t),rvr=i(Tl),rn=n(Tl,"UL",{});var GA=s(rn);V4=n(GA,"LI",{});var MPe=s(V4);JFe=n(MPe,"STRONG",{});var iCt=s(JFe);tvr=r(iCt,"convnext"),iCt.forEach(t),avr=r(MPe," \u2014 "),dH=n(MPe,"A",{href:!0});var dCt=s(dH);nvr=r(dCt,"TFConvNextForImageClassification"),dCt.forEach(t),svr=r(MPe," (ConvNeXT model)"),MPe.forEach(t),lvr=i(GA),X4=n(GA,"LI",{});var EPe=s(X4);YFe=n(EPe,"STRONG",{});var cCt=s(YFe);ivr=r(cCt,"data2vec-vision"),cCt.forEach(t),dvr=r(EPe," \u2014 "),cH=n(EPe,"A",{href:!0});var fCt=s(cH);cvr=r(fCt,"TFData2VecVisionForImageClassification"),fCt.forEach(t),fvr=r(EPe," (Data2VecVision model)"),EPe.forEach(t),mvr=i(GA),z4=n(GA,"LI",{});var CPe=s(z4);KFe=n(CPe,"STRONG",{});var mCt=s(KFe);gvr=r(mCt,"swin"),mCt.forEach(t),hvr=r(CPe," \u2014 "),fH=n(CPe,"A",{href:!0});var gCt=s(fH);pvr=r(gCt,"TFSwinForImageClassification"),gCt.forEach(t),_vr=r(CPe," (Swin Transformer model)"),CPe.forEach(t),uvr=i(GA),W4=n(GA,"LI",{});var wPe=s(W4);ZFe=n(wPe,"STRONG",{});var hCt=s(ZFe);bvr=r(hCt,"vit"),hCt.forEach(t),vvr=r(wPe," \u2014 "),mH=n(wPe,"A",{href:!0});var pCt=s(mH);Fvr=r(pCt,"TFViTForImageClassification"),pCt.forEach(t),Tvr=r(wPe," (ViT model)"),wPe.forEach(t),GA.forEach(t),Mvr=i(Tl),T(Q4.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Hje=i(f),ec=n(f,"H2",{class:!0});var eOe=s(ec);H4=n(eOe,"A",{id:!0,class:!0,href:!0});var _Ct=s(H4);e6e=n(_Ct,"SPAN",{});var uCt=s(e6e);T(N7.$$.fragment,uCt),uCt.forEach(t),_Ct.forEach(t),Evr=i(eOe),o6e=n(eOe,"SPAN",{});var bCt=s(o6e);Cvr=r(bCt,"TFAutoModelForMaskedLM"),bCt.forEach(t),eOe.forEach(t),Uje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(q7.$$.fragment,Ml),wvr=i(Ml),oc=n(Ml,"P",{});var Iee=s(oc);Avr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gH=n(Iee,"A",{href:!0});var vCt=s(gH);yvr=r(vCt,"from_pretrained()"),vCt.forEach(t),Lvr=r(Iee," class method or the "),hH=n(Iee,"A",{href:!0});var FCt=s(hH);xvr=r(FCt,"from_config()"),FCt.forEach(t),$vr=r(Iee,` class
method.`),Iee.forEach(t),kvr=i(Ml),j7=n(Ml,"P",{});var oOe=s(j7);Svr=r(oOe,"This class cannot be instantiated directly using "),r6e=n(oOe,"CODE",{});var TCt=s(r6e);Rvr=r(TCt,"__init__()"),TCt.forEach(t),Pvr=r(oOe," (throws an error)."),oOe.forEach(t),Bvr=i(Ml),kt=n(Ml,"DIV",{class:!0});var OA=s(kt);T(D7.$$.fragment,OA),Ivr=i(OA),t6e=n(OA,"P",{});var MCt=s(t6e);Nvr=r(MCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MCt.forEach(t),qvr=i(OA),rc=n(OA,"P",{});var Nee=s(rc);jvr=r(Nee,`Note:
Loading a model from its configuration file does `),a6e=n(Nee,"STRONG",{});var ECt=s(a6e);Dvr=r(ECt,"not"),ECt.forEach(t),Gvr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Nee,"A",{href:!0});var CCt=s(pH);Ovr=r(CCt,"from_pretrained()"),CCt.forEach(t),Vvr=r(Nee," to load the model weights."),Nee.forEach(t),Xvr=i(OA),T(U4.$$.fragment,OA),OA.forEach(t),zvr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(G7.$$.fragment,El),Wvr=i(El),n6e=n(El,"P",{});var wCt=s(n6e);Qvr=r(wCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wCt.forEach(t),Hvr=i(El),tn=n(El,"P",{});var VA=s(tn);Uvr=r(VA,"The model class to instantiate is selected based on the "),s6e=n(VA,"CODE",{});var ACt=s(s6e);Jvr=r(ACt,"model_type"),ACt.forEach(t),Yvr=r(VA,` property of the config object (either
passed as an argument or loaded from `),l6e=n(VA,"CODE",{});var yCt=s(l6e);Kvr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),Zvr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(VA,"CODE",{});var LCt=s(i6e);eFr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),oFr=r(VA,":"),VA.forEach(t),rFr=i(El),ie=n(El,"UL",{});var fe=s(ie);J4=n(fe,"LI",{});var APe=s(J4);d6e=n(APe,"STRONG",{});var xCt=s(d6e);tFr=r(xCt,"albert"),xCt.forEach(t),aFr=r(APe," \u2014 "),_H=n(APe,"A",{href:!0});var $Ct=s(_H);nFr=r($Ct,"TFAlbertForMaskedLM"),$Ct.forEach(t),sFr=r(APe," (ALBERT model)"),APe.forEach(t),lFr=i(fe),Y4=n(fe,"LI",{});var yPe=s(Y4);c6e=n(yPe,"STRONG",{});var kCt=s(c6e);iFr=r(kCt,"bert"),kCt.forEach(t),dFr=r(yPe," \u2014 "),uH=n(yPe,"A",{href:!0});var SCt=s(uH);cFr=r(SCt,"TFBertForMaskedLM"),SCt.forEach(t),fFr=r(yPe," (BERT model)"),yPe.forEach(t),mFr=i(fe),K4=n(fe,"LI",{});var LPe=s(K4);f6e=n(LPe,"STRONG",{});var RCt=s(f6e);gFr=r(RCt,"camembert"),RCt.forEach(t),hFr=r(LPe," \u2014 "),bH=n(LPe,"A",{href:!0});var PCt=s(bH);pFr=r(PCt,"TFCamembertForMaskedLM"),PCt.forEach(t),_Fr=r(LPe," (CamemBERT model)"),LPe.forEach(t),uFr=i(fe),Z4=n(fe,"LI",{});var xPe=s(Z4);m6e=n(xPe,"STRONG",{});var BCt=s(m6e);bFr=r(BCt,"convbert"),BCt.forEach(t),vFr=r(xPe," \u2014 "),vH=n(xPe,"A",{href:!0});var ICt=s(vH);FFr=r(ICt,"TFConvBertForMaskedLM"),ICt.forEach(t),TFr=r(xPe," (ConvBERT model)"),xPe.forEach(t),MFr=i(fe),eE=n(fe,"LI",{});var $Pe=s(eE);g6e=n($Pe,"STRONG",{});var NCt=s(g6e);EFr=r(NCt,"deberta"),NCt.forEach(t),CFr=r($Pe," \u2014 "),FH=n($Pe,"A",{href:!0});var qCt=s(FH);wFr=r(qCt,"TFDebertaForMaskedLM"),qCt.forEach(t),AFr=r($Pe," (DeBERTa model)"),$Pe.forEach(t),yFr=i(fe),oE=n(fe,"LI",{});var kPe=s(oE);h6e=n(kPe,"STRONG",{});var jCt=s(h6e);LFr=r(jCt,"deberta-v2"),jCt.forEach(t),xFr=r(kPe," \u2014 "),TH=n(kPe,"A",{href:!0});var DCt=s(TH);$Fr=r(DCt,"TFDebertaV2ForMaskedLM"),DCt.forEach(t),kFr=r(kPe," (DeBERTa-v2 model)"),kPe.forEach(t),SFr=i(fe),rE=n(fe,"LI",{});var SPe=s(rE);p6e=n(SPe,"STRONG",{});var GCt=s(p6e);RFr=r(GCt,"distilbert"),GCt.forEach(t),PFr=r(SPe," \u2014 "),MH=n(SPe,"A",{href:!0});var OCt=s(MH);BFr=r(OCt,"TFDistilBertForMaskedLM"),OCt.forEach(t),IFr=r(SPe," (DistilBERT model)"),SPe.forEach(t),NFr=i(fe),tE=n(fe,"LI",{});var RPe=s(tE);_6e=n(RPe,"STRONG",{});var VCt=s(_6e);qFr=r(VCt,"electra"),VCt.forEach(t),jFr=r(RPe," \u2014 "),EH=n(RPe,"A",{href:!0});var XCt=s(EH);DFr=r(XCt,"TFElectraForMaskedLM"),XCt.forEach(t),GFr=r(RPe," (ELECTRA model)"),RPe.forEach(t),OFr=i(fe),aE=n(fe,"LI",{});var PPe=s(aE);u6e=n(PPe,"STRONG",{});var zCt=s(u6e);VFr=r(zCt,"flaubert"),zCt.forEach(t),XFr=r(PPe," \u2014 "),CH=n(PPe,"A",{href:!0});var WCt=s(CH);zFr=r(WCt,"TFFlaubertWithLMHeadModel"),WCt.forEach(t),WFr=r(PPe," (FlauBERT model)"),PPe.forEach(t),QFr=i(fe),nE=n(fe,"LI",{});var BPe=s(nE);b6e=n(BPe,"STRONG",{});var QCt=s(b6e);HFr=r(QCt,"funnel"),QCt.forEach(t),UFr=r(BPe," \u2014 "),wH=n(BPe,"A",{href:!0});var HCt=s(wH);JFr=r(HCt,"TFFunnelForMaskedLM"),HCt.forEach(t),YFr=r(BPe," (Funnel Transformer model)"),BPe.forEach(t),KFr=i(fe),sE=n(fe,"LI",{});var IPe=s(sE);v6e=n(IPe,"STRONG",{});var UCt=s(v6e);ZFr=r(UCt,"layoutlm"),UCt.forEach(t),e6r=r(IPe," \u2014 "),AH=n(IPe,"A",{href:!0});var JCt=s(AH);o6r=r(JCt,"TFLayoutLMForMaskedLM"),JCt.forEach(t),r6r=r(IPe," (LayoutLM model)"),IPe.forEach(t),t6r=i(fe),lE=n(fe,"LI",{});var NPe=s(lE);F6e=n(NPe,"STRONG",{});var YCt=s(F6e);a6r=r(YCt,"longformer"),YCt.forEach(t),n6r=r(NPe," \u2014 "),yH=n(NPe,"A",{href:!0});var KCt=s(yH);s6r=r(KCt,"TFLongformerForMaskedLM"),KCt.forEach(t),l6r=r(NPe," (Longformer model)"),NPe.forEach(t),i6r=i(fe),iE=n(fe,"LI",{});var qPe=s(iE);T6e=n(qPe,"STRONG",{});var ZCt=s(T6e);d6r=r(ZCt,"mobilebert"),ZCt.forEach(t),c6r=r(qPe," \u2014 "),LH=n(qPe,"A",{href:!0});var e5t=s(LH);f6r=r(e5t,"TFMobileBertForMaskedLM"),e5t.forEach(t),m6r=r(qPe," (MobileBERT model)"),qPe.forEach(t),g6r=i(fe),dE=n(fe,"LI",{});var jPe=s(dE);M6e=n(jPe,"STRONG",{});var o5t=s(M6e);h6r=r(o5t,"mpnet"),o5t.forEach(t),p6r=r(jPe," \u2014 "),xH=n(jPe,"A",{href:!0});var r5t=s(xH);_6r=r(r5t,"TFMPNetForMaskedLM"),r5t.forEach(t),u6r=r(jPe," (MPNet model)"),jPe.forEach(t),b6r=i(fe),cE=n(fe,"LI",{});var DPe=s(cE);E6e=n(DPe,"STRONG",{});var t5t=s(E6e);v6r=r(t5t,"rembert"),t5t.forEach(t),F6r=r(DPe," \u2014 "),$H=n(DPe,"A",{href:!0});var a5t=s($H);T6r=r(a5t,"TFRemBertForMaskedLM"),a5t.forEach(t),M6r=r(DPe," (RemBERT model)"),DPe.forEach(t),E6r=i(fe),fE=n(fe,"LI",{});var GPe=s(fE);C6e=n(GPe,"STRONG",{});var n5t=s(C6e);C6r=r(n5t,"roberta"),n5t.forEach(t),w6r=r(GPe," \u2014 "),kH=n(GPe,"A",{href:!0});var s5t=s(kH);A6r=r(s5t,"TFRobertaForMaskedLM"),s5t.forEach(t),y6r=r(GPe," (RoBERTa model)"),GPe.forEach(t),L6r=i(fe),mE=n(fe,"LI",{});var OPe=s(mE);w6e=n(OPe,"STRONG",{});var l5t=s(w6e);x6r=r(l5t,"roformer"),l5t.forEach(t),$6r=r(OPe," \u2014 "),SH=n(OPe,"A",{href:!0});var i5t=s(SH);k6r=r(i5t,"TFRoFormerForMaskedLM"),i5t.forEach(t),S6r=r(OPe," (RoFormer model)"),OPe.forEach(t),R6r=i(fe),gE=n(fe,"LI",{});var VPe=s(gE);A6e=n(VPe,"STRONG",{});var d5t=s(A6e);P6r=r(d5t,"tapas"),d5t.forEach(t),B6r=r(VPe," \u2014 "),RH=n(VPe,"A",{href:!0});var c5t=s(RH);I6r=r(c5t,"TFTapasForMaskedLM"),c5t.forEach(t),N6r=r(VPe," (TAPAS model)"),VPe.forEach(t),q6r=i(fe),hE=n(fe,"LI",{});var XPe=s(hE);y6e=n(XPe,"STRONG",{});var f5t=s(y6e);j6r=r(f5t,"xlm"),f5t.forEach(t),D6r=r(XPe," \u2014 "),PH=n(XPe,"A",{href:!0});var m5t=s(PH);G6r=r(m5t,"TFXLMWithLMHeadModel"),m5t.forEach(t),O6r=r(XPe," (XLM model)"),XPe.forEach(t),V6r=i(fe),pE=n(fe,"LI",{});var zPe=s(pE);L6e=n(zPe,"STRONG",{});var g5t=s(L6e);X6r=r(g5t,"xlm-roberta"),g5t.forEach(t),z6r=r(zPe," \u2014 "),BH=n(zPe,"A",{href:!0});var h5t=s(BH);W6r=r(h5t,"TFXLMRobertaForMaskedLM"),h5t.forEach(t),Q6r=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),fe.forEach(t),H6r=i(El),T(_E.$$.fragment,El),El.forEach(t),Ml.forEach(t),Jje=i(f),tc=n(f,"H2",{class:!0});var rOe=s(tc);uE=n(rOe,"A",{id:!0,class:!0,href:!0});var p5t=s(uE);x6e=n(p5t,"SPAN",{});var _5t=s(x6e);T(O7.$$.fragment,_5t),_5t.forEach(t),p5t.forEach(t),U6r=i(rOe),$6e=n(rOe,"SPAN",{});var u5t=s($6e);J6r=r(u5t,"TFAutoModelForSeq2SeqLM"),u5t.forEach(t),rOe.forEach(t),Yje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(V7.$$.fragment,Cl),Y6r=i(Cl),ac=n(Cl,"P",{});var qee=s(ac);K6r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IH=n(qee,"A",{href:!0});var b5t=s(IH);Z6r=r(b5t,"from_pretrained()"),b5t.forEach(t),e1r=r(qee," class method or the "),NH=n(qee,"A",{href:!0});var v5t=s(NH);o1r=r(v5t,"from_config()"),v5t.forEach(t),r1r=r(qee,` class
method.`),qee.forEach(t),t1r=i(Cl),X7=n(Cl,"P",{});var tOe=s(X7);a1r=r(tOe,"This class cannot be instantiated directly using "),k6e=n(tOe,"CODE",{});var F5t=s(k6e);n1r=r(F5t,"__init__()"),F5t.forEach(t),s1r=r(tOe," (throws an error)."),tOe.forEach(t),l1r=i(Cl),St=n(Cl,"DIV",{class:!0});var XA=s(St);T(z7.$$.fragment,XA),i1r=i(XA),S6e=n(XA,"P",{});var T5t=s(S6e);d1r=r(T5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T5t.forEach(t),c1r=i(XA),nc=n(XA,"P",{});var jee=s(nc);f1r=r(jee,`Note:
Loading a model from its configuration file does `),R6e=n(jee,"STRONG",{});var M5t=s(R6e);m1r=r(M5t,"not"),M5t.forEach(t),g1r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(jee,"A",{href:!0});var E5t=s(qH);h1r=r(E5t,"from_pretrained()"),E5t.forEach(t),p1r=r(jee," to load the model weights."),jee.forEach(t),_1r=i(XA),T(bE.$$.fragment,XA),XA.forEach(t),u1r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(W7.$$.fragment,wl),b1r=i(wl),P6e=n(wl,"P",{});var C5t=s(P6e);v1r=r(C5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C5t.forEach(t),F1r=i(wl),an=n(wl,"P",{});var zA=s(an);T1r=r(zA,"The model class to instantiate is selected based on the "),B6e=n(zA,"CODE",{});var w5t=s(B6e);M1r=r(w5t,"model_type"),w5t.forEach(t),E1r=r(zA,` property of the config object (either
passed as an argument or loaded from `),I6e=n(zA,"CODE",{});var A5t=s(I6e);C1r=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),w1r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(zA,"CODE",{});var y5t=s(N6e);A1r=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),y1r=r(zA,":"),zA.forEach(t),L1r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);vE=n(Be,"LI",{});var WPe=s(vE);q6e=n(WPe,"STRONG",{});var L5t=s(q6e);x1r=r(L5t,"bart"),L5t.forEach(t),$1r=r(WPe," \u2014 "),jH=n(WPe,"A",{href:!0});var x5t=s(jH);k1r=r(x5t,"TFBartForConditionalGeneration"),x5t.forEach(t),S1r=r(WPe," (BART model)"),WPe.forEach(t),R1r=i(Be),FE=n(Be,"LI",{});var QPe=s(FE);j6e=n(QPe,"STRONG",{});var $5t=s(j6e);P1r=r($5t,"blenderbot"),$5t.forEach(t),B1r=r(QPe," \u2014 "),DH=n(QPe,"A",{href:!0});var k5t=s(DH);I1r=r(k5t,"TFBlenderbotForConditionalGeneration"),k5t.forEach(t),N1r=r(QPe," (Blenderbot model)"),QPe.forEach(t),q1r=i(Be),TE=n(Be,"LI",{});var HPe=s(TE);D6e=n(HPe,"STRONG",{});var S5t=s(D6e);j1r=r(S5t,"blenderbot-small"),S5t.forEach(t),D1r=r(HPe," \u2014 "),GH=n(HPe,"A",{href:!0});var R5t=s(GH);G1r=r(R5t,"TFBlenderbotSmallForConditionalGeneration"),R5t.forEach(t),O1r=r(HPe," (BlenderbotSmall model)"),HPe.forEach(t),V1r=i(Be),ME=n(Be,"LI",{});var UPe=s(ME);G6e=n(UPe,"STRONG",{});var P5t=s(G6e);X1r=r(P5t,"encoder-decoder"),P5t.forEach(t),z1r=r(UPe," \u2014 "),OH=n(UPe,"A",{href:!0});var B5t=s(OH);W1r=r(B5t,"TFEncoderDecoderModel"),B5t.forEach(t),Q1r=r(UPe," (Encoder decoder model)"),UPe.forEach(t),H1r=i(Be),EE=n(Be,"LI",{});var JPe=s(EE);O6e=n(JPe,"STRONG",{});var I5t=s(O6e);U1r=r(I5t,"led"),I5t.forEach(t),J1r=r(JPe," \u2014 "),VH=n(JPe,"A",{href:!0});var N5t=s(VH);Y1r=r(N5t,"TFLEDForConditionalGeneration"),N5t.forEach(t),K1r=r(JPe," (LED model)"),JPe.forEach(t),Z1r=i(Be),CE=n(Be,"LI",{});var YPe=s(CE);V6e=n(YPe,"STRONG",{});var q5t=s(V6e);eTr=r(q5t,"marian"),q5t.forEach(t),oTr=r(YPe," \u2014 "),XH=n(YPe,"A",{href:!0});var j5t=s(XH);rTr=r(j5t,"TFMarianMTModel"),j5t.forEach(t),tTr=r(YPe," (Marian model)"),YPe.forEach(t),aTr=i(Be),wE=n(Be,"LI",{});var KPe=s(wE);X6e=n(KPe,"STRONG",{});var D5t=s(X6e);nTr=r(D5t,"mbart"),D5t.forEach(t),sTr=r(KPe," \u2014 "),zH=n(KPe,"A",{href:!0});var G5t=s(zH);lTr=r(G5t,"TFMBartForConditionalGeneration"),G5t.forEach(t),iTr=r(KPe," (mBART model)"),KPe.forEach(t),dTr=i(Be),AE=n(Be,"LI",{});var ZPe=s(AE);z6e=n(ZPe,"STRONG",{});var O5t=s(z6e);cTr=r(O5t,"mt5"),O5t.forEach(t),fTr=r(ZPe," \u2014 "),WH=n(ZPe,"A",{href:!0});var V5t=s(WH);mTr=r(V5t,"TFMT5ForConditionalGeneration"),V5t.forEach(t),gTr=r(ZPe," (MT5 model)"),ZPe.forEach(t),hTr=i(Be),yE=n(Be,"LI",{});var eBe=s(yE);W6e=n(eBe,"STRONG",{});var X5t=s(W6e);pTr=r(X5t,"pegasus"),X5t.forEach(t),_Tr=r(eBe," \u2014 "),QH=n(eBe,"A",{href:!0});var z5t=s(QH);uTr=r(z5t,"TFPegasusForConditionalGeneration"),z5t.forEach(t),bTr=r(eBe," (Pegasus model)"),eBe.forEach(t),vTr=i(Be),LE=n(Be,"LI",{});var oBe=s(LE);Q6e=n(oBe,"STRONG",{});var W5t=s(Q6e);FTr=r(W5t,"t5"),W5t.forEach(t),TTr=r(oBe," \u2014 "),HH=n(oBe,"A",{href:!0});var Q5t=s(HH);MTr=r(Q5t,"TFT5ForConditionalGeneration"),Q5t.forEach(t),ETr=r(oBe," (T5 model)"),oBe.forEach(t),Be.forEach(t),CTr=i(wl),T(xE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Kje=i(f),sc=n(f,"H2",{class:!0});var aOe=s(sc);$E=n(aOe,"A",{id:!0,class:!0,href:!0});var H5t=s($E);H6e=n(H5t,"SPAN",{});var U5t=s(H6e);T(Q7.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),wTr=i(aOe),U6e=n(aOe,"SPAN",{});var J5t=s(U6e);ATr=r(J5t,"TFAutoModelForSequenceClassification"),J5t.forEach(t),aOe.forEach(t),Zje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(H7.$$.fragment,Al),yTr=i(Al),lc=n(Al,"P",{});var Dee=s(lc);LTr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UH=n(Dee,"A",{href:!0});var Y5t=s(UH);xTr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),$Tr=r(Dee," class method or the "),JH=n(Dee,"A",{href:!0});var K5t=s(JH);kTr=r(K5t,"from_config()"),K5t.forEach(t),STr=r(Dee,` class
method.`),Dee.forEach(t),RTr=i(Al),U7=n(Al,"P",{});var nOe=s(U7);PTr=r(nOe,"This class cannot be instantiated directly using "),J6e=n(nOe,"CODE",{});var Z5t=s(J6e);BTr=r(Z5t,"__init__()"),Z5t.forEach(t),ITr=r(nOe," (throws an error)."),nOe.forEach(t),NTr=i(Al),Rt=n(Al,"DIV",{class:!0});var WA=s(Rt);T(J7.$$.fragment,WA),qTr=i(WA),Y6e=n(WA,"P",{});var e3t=s(Y6e);jTr=r(e3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e3t.forEach(t),DTr=i(WA),ic=n(WA,"P",{});var Gee=s(ic);GTr=r(Gee,`Note:
Loading a model from its configuration file does `),K6e=n(Gee,"STRONG",{});var o3t=s(K6e);OTr=r(o3t,"not"),o3t.forEach(t),VTr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Gee,"A",{href:!0});var r3t=s(YH);XTr=r(r3t,"from_pretrained()"),r3t.forEach(t),zTr=r(Gee," to load the model weights."),Gee.forEach(t),WTr=i(WA),T(kE.$$.fragment,WA),WA.forEach(t),QTr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(Y7.$$.fragment,yl),HTr=i(yl),Z6e=n(yl,"P",{});var t3t=s(Z6e);UTr=r(t3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t3t.forEach(t),JTr=i(yl),nn=n(yl,"P",{});var QA=s(nn);YTr=r(QA,"The model class to instantiate is selected based on the "),e1e=n(QA,"CODE",{});var a3t=s(e1e);KTr=r(a3t,"model_type"),a3t.forEach(t),ZTr=r(QA,` property of the config object (either
passed as an argument or loaded from `),o1e=n(QA,"CODE",{});var n3t=s(o1e);eMr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),oMr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(QA,"CODE",{});var s3t=s(r1e);rMr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),tMr=r(QA,":"),QA.forEach(t),aMr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);SE=n(ae,"LI",{});var rBe=s(SE);t1e=n(rBe,"STRONG",{});var l3t=s(t1e);nMr=r(l3t,"albert"),l3t.forEach(t),sMr=r(rBe," \u2014 "),KH=n(rBe,"A",{href:!0});var i3t=s(KH);lMr=r(i3t,"TFAlbertForSequenceClassification"),i3t.forEach(t),iMr=r(rBe," (ALBERT model)"),rBe.forEach(t),dMr=i(ae),RE=n(ae,"LI",{});var tBe=s(RE);a1e=n(tBe,"STRONG",{});var d3t=s(a1e);cMr=r(d3t,"bert"),d3t.forEach(t),fMr=r(tBe," \u2014 "),ZH=n(tBe,"A",{href:!0});var c3t=s(ZH);mMr=r(c3t,"TFBertForSequenceClassification"),c3t.forEach(t),gMr=r(tBe," (BERT model)"),tBe.forEach(t),hMr=i(ae),PE=n(ae,"LI",{});var aBe=s(PE);n1e=n(aBe,"STRONG",{});var f3t=s(n1e);pMr=r(f3t,"camembert"),f3t.forEach(t),_Mr=r(aBe," \u2014 "),eU=n(aBe,"A",{href:!0});var m3t=s(eU);uMr=r(m3t,"TFCamembertForSequenceClassification"),m3t.forEach(t),bMr=r(aBe," (CamemBERT model)"),aBe.forEach(t),vMr=i(ae),BE=n(ae,"LI",{});var nBe=s(BE);s1e=n(nBe,"STRONG",{});var g3t=s(s1e);FMr=r(g3t,"convbert"),g3t.forEach(t),TMr=r(nBe," \u2014 "),oU=n(nBe,"A",{href:!0});var h3t=s(oU);MMr=r(h3t,"TFConvBertForSequenceClassification"),h3t.forEach(t),EMr=r(nBe," (ConvBERT model)"),nBe.forEach(t),CMr=i(ae),IE=n(ae,"LI",{});var sBe=s(IE);l1e=n(sBe,"STRONG",{});var p3t=s(l1e);wMr=r(p3t,"ctrl"),p3t.forEach(t),AMr=r(sBe," \u2014 "),rU=n(sBe,"A",{href:!0});var _3t=s(rU);yMr=r(_3t,"TFCTRLForSequenceClassification"),_3t.forEach(t),LMr=r(sBe," (CTRL model)"),sBe.forEach(t),xMr=i(ae),NE=n(ae,"LI",{});var lBe=s(NE);i1e=n(lBe,"STRONG",{});var u3t=s(i1e);$Mr=r(u3t,"deberta"),u3t.forEach(t),kMr=r(lBe," \u2014 "),tU=n(lBe,"A",{href:!0});var b3t=s(tU);SMr=r(b3t,"TFDebertaForSequenceClassification"),b3t.forEach(t),RMr=r(lBe," (DeBERTa model)"),lBe.forEach(t),PMr=i(ae),qE=n(ae,"LI",{});var iBe=s(qE);d1e=n(iBe,"STRONG",{});var v3t=s(d1e);BMr=r(v3t,"deberta-v2"),v3t.forEach(t),IMr=r(iBe," \u2014 "),aU=n(iBe,"A",{href:!0});var F3t=s(aU);NMr=r(F3t,"TFDebertaV2ForSequenceClassification"),F3t.forEach(t),qMr=r(iBe," (DeBERTa-v2 model)"),iBe.forEach(t),jMr=i(ae),jE=n(ae,"LI",{});var dBe=s(jE);c1e=n(dBe,"STRONG",{});var T3t=s(c1e);DMr=r(T3t,"distilbert"),T3t.forEach(t),GMr=r(dBe," \u2014 "),nU=n(dBe,"A",{href:!0});var M3t=s(nU);OMr=r(M3t,"TFDistilBertForSequenceClassification"),M3t.forEach(t),VMr=r(dBe," (DistilBERT model)"),dBe.forEach(t),XMr=i(ae),DE=n(ae,"LI",{});var cBe=s(DE);f1e=n(cBe,"STRONG",{});var E3t=s(f1e);zMr=r(E3t,"electra"),E3t.forEach(t),WMr=r(cBe," \u2014 "),sU=n(cBe,"A",{href:!0});var C3t=s(sU);QMr=r(C3t,"TFElectraForSequenceClassification"),C3t.forEach(t),HMr=r(cBe," (ELECTRA model)"),cBe.forEach(t),UMr=i(ae),GE=n(ae,"LI",{});var fBe=s(GE);m1e=n(fBe,"STRONG",{});var w3t=s(m1e);JMr=r(w3t,"flaubert"),w3t.forEach(t),YMr=r(fBe," \u2014 "),lU=n(fBe,"A",{href:!0});var A3t=s(lU);KMr=r(A3t,"TFFlaubertForSequenceClassification"),A3t.forEach(t),ZMr=r(fBe," (FlauBERT model)"),fBe.forEach(t),e4r=i(ae),OE=n(ae,"LI",{});var mBe=s(OE);g1e=n(mBe,"STRONG",{});var y3t=s(g1e);o4r=r(y3t,"funnel"),y3t.forEach(t),r4r=r(mBe," \u2014 "),iU=n(mBe,"A",{href:!0});var L3t=s(iU);t4r=r(L3t,"TFFunnelForSequenceClassification"),L3t.forEach(t),a4r=r(mBe," (Funnel Transformer model)"),mBe.forEach(t),n4r=i(ae),VE=n(ae,"LI",{});var gBe=s(VE);h1e=n(gBe,"STRONG",{});var x3t=s(h1e);s4r=r(x3t,"gpt2"),x3t.forEach(t),l4r=r(gBe," \u2014 "),dU=n(gBe,"A",{href:!0});var $3t=s(dU);i4r=r($3t,"TFGPT2ForSequenceClassification"),$3t.forEach(t),d4r=r(gBe," (OpenAI GPT-2 model)"),gBe.forEach(t),c4r=i(ae),XE=n(ae,"LI",{});var hBe=s(XE);p1e=n(hBe,"STRONG",{});var k3t=s(p1e);f4r=r(k3t,"gptj"),k3t.forEach(t),m4r=r(hBe," \u2014 "),cU=n(hBe,"A",{href:!0});var S3t=s(cU);g4r=r(S3t,"TFGPTJForSequenceClassification"),S3t.forEach(t),h4r=r(hBe," (GPT-J model)"),hBe.forEach(t),p4r=i(ae),zE=n(ae,"LI",{});var pBe=s(zE);_1e=n(pBe,"STRONG",{});var R3t=s(_1e);_4r=r(R3t,"layoutlm"),R3t.forEach(t),u4r=r(pBe," \u2014 "),fU=n(pBe,"A",{href:!0});var P3t=s(fU);b4r=r(P3t,"TFLayoutLMForSequenceClassification"),P3t.forEach(t),v4r=r(pBe," (LayoutLM model)"),pBe.forEach(t),F4r=i(ae),WE=n(ae,"LI",{});var _Be=s(WE);u1e=n(_Be,"STRONG",{});var B3t=s(u1e);T4r=r(B3t,"longformer"),B3t.forEach(t),M4r=r(_Be," \u2014 "),mU=n(_Be,"A",{href:!0});var I3t=s(mU);E4r=r(I3t,"TFLongformerForSequenceClassification"),I3t.forEach(t),C4r=r(_Be," (Longformer model)"),_Be.forEach(t),w4r=i(ae),QE=n(ae,"LI",{});var uBe=s(QE);b1e=n(uBe,"STRONG",{});var N3t=s(b1e);A4r=r(N3t,"mobilebert"),N3t.forEach(t),y4r=r(uBe," \u2014 "),gU=n(uBe,"A",{href:!0});var q3t=s(gU);L4r=r(q3t,"TFMobileBertForSequenceClassification"),q3t.forEach(t),x4r=r(uBe," (MobileBERT model)"),uBe.forEach(t),$4r=i(ae),HE=n(ae,"LI",{});var bBe=s(HE);v1e=n(bBe,"STRONG",{});var j3t=s(v1e);k4r=r(j3t,"mpnet"),j3t.forEach(t),S4r=r(bBe," \u2014 "),hU=n(bBe,"A",{href:!0});var D3t=s(hU);R4r=r(D3t,"TFMPNetForSequenceClassification"),D3t.forEach(t),P4r=r(bBe," (MPNet model)"),bBe.forEach(t),B4r=i(ae),UE=n(ae,"LI",{});var vBe=s(UE);F1e=n(vBe,"STRONG",{});var G3t=s(F1e);I4r=r(G3t,"openai-gpt"),G3t.forEach(t),N4r=r(vBe," \u2014 "),pU=n(vBe,"A",{href:!0});var O3t=s(pU);q4r=r(O3t,"TFOpenAIGPTForSequenceClassification"),O3t.forEach(t),j4r=r(vBe," (OpenAI GPT model)"),vBe.forEach(t),D4r=i(ae),JE=n(ae,"LI",{});var FBe=s(JE);T1e=n(FBe,"STRONG",{});var V3t=s(T1e);G4r=r(V3t,"rembert"),V3t.forEach(t),O4r=r(FBe," \u2014 "),_U=n(FBe,"A",{href:!0});var X3t=s(_U);V4r=r(X3t,"TFRemBertForSequenceClassification"),X3t.forEach(t),X4r=r(FBe," (RemBERT model)"),FBe.forEach(t),z4r=i(ae),YE=n(ae,"LI",{});var TBe=s(YE);M1e=n(TBe,"STRONG",{});var z3t=s(M1e);W4r=r(z3t,"roberta"),z3t.forEach(t),Q4r=r(TBe," \u2014 "),uU=n(TBe,"A",{href:!0});var W3t=s(uU);H4r=r(W3t,"TFRobertaForSequenceClassification"),W3t.forEach(t),U4r=r(TBe," (RoBERTa model)"),TBe.forEach(t),J4r=i(ae),KE=n(ae,"LI",{});var MBe=s(KE);E1e=n(MBe,"STRONG",{});var Q3t=s(E1e);Y4r=r(Q3t,"roformer"),Q3t.forEach(t),K4r=r(MBe," \u2014 "),bU=n(MBe,"A",{href:!0});var H3t=s(bU);Z4r=r(H3t,"TFRoFormerForSequenceClassification"),H3t.forEach(t),eEr=r(MBe," (RoFormer model)"),MBe.forEach(t),oEr=i(ae),ZE=n(ae,"LI",{});var EBe=s(ZE);C1e=n(EBe,"STRONG",{});var U3t=s(C1e);rEr=r(U3t,"tapas"),U3t.forEach(t),tEr=r(EBe," \u2014 "),vU=n(EBe,"A",{href:!0});var J3t=s(vU);aEr=r(J3t,"TFTapasForSequenceClassification"),J3t.forEach(t),nEr=r(EBe," (TAPAS model)"),EBe.forEach(t),sEr=i(ae),eC=n(ae,"LI",{});var CBe=s(eC);w1e=n(CBe,"STRONG",{});var Y3t=s(w1e);lEr=r(Y3t,"transfo-xl"),Y3t.forEach(t),iEr=r(CBe," \u2014 "),FU=n(CBe,"A",{href:!0});var K3t=s(FU);dEr=r(K3t,"TFTransfoXLForSequenceClassification"),K3t.forEach(t),cEr=r(CBe," (Transformer-XL model)"),CBe.forEach(t),fEr=i(ae),oC=n(ae,"LI",{});var wBe=s(oC);A1e=n(wBe,"STRONG",{});var Z3t=s(A1e);mEr=r(Z3t,"xlm"),Z3t.forEach(t),gEr=r(wBe," \u2014 "),TU=n(wBe,"A",{href:!0});var e0t=s(TU);hEr=r(e0t,"TFXLMForSequenceClassification"),e0t.forEach(t),pEr=r(wBe," (XLM model)"),wBe.forEach(t),_Er=i(ae),rC=n(ae,"LI",{});var ABe=s(rC);y1e=n(ABe,"STRONG",{});var o0t=s(y1e);uEr=r(o0t,"xlm-roberta"),o0t.forEach(t),bEr=r(ABe," \u2014 "),MU=n(ABe,"A",{href:!0});var r0t=s(MU);vEr=r(r0t,"TFXLMRobertaForSequenceClassification"),r0t.forEach(t),FEr=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),TEr=i(ae),tC=n(ae,"LI",{});var yBe=s(tC);L1e=n(yBe,"STRONG",{});var t0t=s(L1e);MEr=r(t0t,"xlnet"),t0t.forEach(t),EEr=r(yBe," \u2014 "),EU=n(yBe,"A",{href:!0});var a0t=s(EU);CEr=r(a0t,"TFXLNetForSequenceClassification"),a0t.forEach(t),wEr=r(yBe," (XLNet model)"),yBe.forEach(t),ae.forEach(t),AEr=i(yl),T(aC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),eDe=i(f),dc=n(f,"H2",{class:!0});var sOe=s(dc);nC=n(sOe,"A",{id:!0,class:!0,href:!0});var n0t=s(nC);x1e=n(n0t,"SPAN",{});var s0t=s(x1e);T(K7.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),yEr=i(sOe),$1e=n(sOe,"SPAN",{});var l0t=s($1e);LEr=r(l0t,"TFAutoModelForMultipleChoice"),l0t.forEach(t),sOe.forEach(t),oDe=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(Z7.$$.fragment,Ll),xEr=i(Ll),cc=n(Ll,"P",{});var Oee=s(cc);$Er=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CU=n(Oee,"A",{href:!0});var i0t=s(CU);kEr=r(i0t,"from_pretrained()"),i0t.forEach(t),SEr=r(Oee," class method or the "),wU=n(Oee,"A",{href:!0});var d0t=s(wU);REr=r(d0t,"from_config()"),d0t.forEach(t),PEr=r(Oee,` class
method.`),Oee.forEach(t),BEr=i(Ll),e9=n(Ll,"P",{});var lOe=s(e9);IEr=r(lOe,"This class cannot be instantiated directly using "),k1e=n(lOe,"CODE",{});var c0t=s(k1e);NEr=r(c0t,"__init__()"),c0t.forEach(t),qEr=r(lOe," (throws an error)."),lOe.forEach(t),jEr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var HA=s(Pt);T(o9.$$.fragment,HA),DEr=i(HA),S1e=n(HA,"P",{});var f0t=s(S1e);GEr=r(f0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f0t.forEach(t),OEr=i(HA),fc=n(HA,"P",{});var Vee=s(fc);VEr=r(Vee,`Note:
Loading a model from its configuration file does `),R1e=n(Vee,"STRONG",{});var m0t=s(R1e);XEr=r(m0t,"not"),m0t.forEach(t),zEr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Vee,"A",{href:!0});var g0t=s(AU);WEr=r(g0t,"from_pretrained()"),g0t.forEach(t),QEr=r(Vee," to load the model weights."),Vee.forEach(t),HEr=i(HA),T(sC.$$.fragment,HA),HA.forEach(t),UEr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(r9.$$.fragment,xl),JEr=i(xl),P1e=n(xl,"P",{});var h0t=s(P1e);YEr=r(h0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h0t.forEach(t),KEr=i(xl),sn=n(xl,"P",{});var UA=s(sn);ZEr=r(UA,"The model class to instantiate is selected based on the "),B1e=n(UA,"CODE",{});var p0t=s(B1e);eCr=r(p0t,"model_type"),p0t.forEach(t),oCr=r(UA,` property of the config object (either
passed as an argument or loaded from `),I1e=n(UA,"CODE",{});var _0t=s(I1e);rCr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),tCr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(UA,"CODE",{});var u0t=s(N1e);aCr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),nCr=r(UA,":"),UA.forEach(t),sCr=i(xl),pe=n(xl,"UL",{});var be=s(pe);lC=n(be,"LI",{});var LBe=s(lC);q1e=n(LBe,"STRONG",{});var b0t=s(q1e);lCr=r(b0t,"albert"),b0t.forEach(t),iCr=r(LBe," \u2014 "),yU=n(LBe,"A",{href:!0});var v0t=s(yU);dCr=r(v0t,"TFAlbertForMultipleChoice"),v0t.forEach(t),cCr=r(LBe," (ALBERT model)"),LBe.forEach(t),fCr=i(be),iC=n(be,"LI",{});var xBe=s(iC);j1e=n(xBe,"STRONG",{});var F0t=s(j1e);mCr=r(F0t,"bert"),F0t.forEach(t),gCr=r(xBe," \u2014 "),LU=n(xBe,"A",{href:!0});var T0t=s(LU);hCr=r(T0t,"TFBertForMultipleChoice"),T0t.forEach(t),pCr=r(xBe," (BERT model)"),xBe.forEach(t),_Cr=i(be),dC=n(be,"LI",{});var $Be=s(dC);D1e=n($Be,"STRONG",{});var M0t=s(D1e);uCr=r(M0t,"camembert"),M0t.forEach(t),bCr=r($Be," \u2014 "),xU=n($Be,"A",{href:!0});var E0t=s(xU);vCr=r(E0t,"TFCamembertForMultipleChoice"),E0t.forEach(t),FCr=r($Be," (CamemBERT model)"),$Be.forEach(t),TCr=i(be),cC=n(be,"LI",{});var kBe=s(cC);G1e=n(kBe,"STRONG",{});var C0t=s(G1e);MCr=r(C0t,"convbert"),C0t.forEach(t),ECr=r(kBe," \u2014 "),$U=n(kBe,"A",{href:!0});var w0t=s($U);CCr=r(w0t,"TFConvBertForMultipleChoice"),w0t.forEach(t),wCr=r(kBe," (ConvBERT model)"),kBe.forEach(t),ACr=i(be),fC=n(be,"LI",{});var SBe=s(fC);O1e=n(SBe,"STRONG",{});var A0t=s(O1e);yCr=r(A0t,"distilbert"),A0t.forEach(t),LCr=r(SBe," \u2014 "),kU=n(SBe,"A",{href:!0});var y0t=s(kU);xCr=r(y0t,"TFDistilBertForMultipleChoice"),y0t.forEach(t),$Cr=r(SBe," (DistilBERT model)"),SBe.forEach(t),kCr=i(be),mC=n(be,"LI",{});var RBe=s(mC);V1e=n(RBe,"STRONG",{});var L0t=s(V1e);SCr=r(L0t,"electra"),L0t.forEach(t),RCr=r(RBe," \u2014 "),SU=n(RBe,"A",{href:!0});var x0t=s(SU);PCr=r(x0t,"TFElectraForMultipleChoice"),x0t.forEach(t),BCr=r(RBe," (ELECTRA model)"),RBe.forEach(t),ICr=i(be),gC=n(be,"LI",{});var PBe=s(gC);X1e=n(PBe,"STRONG",{});var $0t=s(X1e);NCr=r($0t,"flaubert"),$0t.forEach(t),qCr=r(PBe," \u2014 "),RU=n(PBe,"A",{href:!0});var k0t=s(RU);jCr=r(k0t,"TFFlaubertForMultipleChoice"),k0t.forEach(t),DCr=r(PBe," (FlauBERT model)"),PBe.forEach(t),GCr=i(be),hC=n(be,"LI",{});var BBe=s(hC);z1e=n(BBe,"STRONG",{});var S0t=s(z1e);OCr=r(S0t,"funnel"),S0t.forEach(t),VCr=r(BBe," \u2014 "),PU=n(BBe,"A",{href:!0});var R0t=s(PU);XCr=r(R0t,"TFFunnelForMultipleChoice"),R0t.forEach(t),zCr=r(BBe," (Funnel Transformer model)"),BBe.forEach(t),WCr=i(be),pC=n(be,"LI",{});var IBe=s(pC);W1e=n(IBe,"STRONG",{});var P0t=s(W1e);QCr=r(P0t,"longformer"),P0t.forEach(t),HCr=r(IBe," \u2014 "),BU=n(IBe,"A",{href:!0});var B0t=s(BU);UCr=r(B0t,"TFLongformerForMultipleChoice"),B0t.forEach(t),JCr=r(IBe," (Longformer model)"),IBe.forEach(t),YCr=i(be),_C=n(be,"LI",{});var NBe=s(_C);Q1e=n(NBe,"STRONG",{});var I0t=s(Q1e);KCr=r(I0t,"mobilebert"),I0t.forEach(t),ZCr=r(NBe," \u2014 "),IU=n(NBe,"A",{href:!0});var N0t=s(IU);e5r=r(N0t,"TFMobileBertForMultipleChoice"),N0t.forEach(t),o5r=r(NBe," (MobileBERT model)"),NBe.forEach(t),r5r=i(be),uC=n(be,"LI",{});var qBe=s(uC);H1e=n(qBe,"STRONG",{});var q0t=s(H1e);t5r=r(q0t,"mpnet"),q0t.forEach(t),a5r=r(qBe," \u2014 "),NU=n(qBe,"A",{href:!0});var j0t=s(NU);n5r=r(j0t,"TFMPNetForMultipleChoice"),j0t.forEach(t),s5r=r(qBe," (MPNet model)"),qBe.forEach(t),l5r=i(be),bC=n(be,"LI",{});var jBe=s(bC);U1e=n(jBe,"STRONG",{});var D0t=s(U1e);i5r=r(D0t,"rembert"),D0t.forEach(t),d5r=r(jBe," \u2014 "),qU=n(jBe,"A",{href:!0});var G0t=s(qU);c5r=r(G0t,"TFRemBertForMultipleChoice"),G0t.forEach(t),f5r=r(jBe," (RemBERT model)"),jBe.forEach(t),m5r=i(be),vC=n(be,"LI",{});var DBe=s(vC);J1e=n(DBe,"STRONG",{});var O0t=s(J1e);g5r=r(O0t,"roberta"),O0t.forEach(t),h5r=r(DBe," \u2014 "),jU=n(DBe,"A",{href:!0});var V0t=s(jU);p5r=r(V0t,"TFRobertaForMultipleChoice"),V0t.forEach(t),_5r=r(DBe," (RoBERTa model)"),DBe.forEach(t),u5r=i(be),FC=n(be,"LI",{});var GBe=s(FC);Y1e=n(GBe,"STRONG",{});var X0t=s(Y1e);b5r=r(X0t,"roformer"),X0t.forEach(t),v5r=r(GBe," \u2014 "),DU=n(GBe,"A",{href:!0});var z0t=s(DU);F5r=r(z0t,"TFRoFormerForMultipleChoice"),z0t.forEach(t),T5r=r(GBe," (RoFormer model)"),GBe.forEach(t),M5r=i(be),TC=n(be,"LI",{});var OBe=s(TC);K1e=n(OBe,"STRONG",{});var W0t=s(K1e);E5r=r(W0t,"xlm"),W0t.forEach(t),C5r=r(OBe," \u2014 "),GU=n(OBe,"A",{href:!0});var Q0t=s(GU);w5r=r(Q0t,"TFXLMForMultipleChoice"),Q0t.forEach(t),A5r=r(OBe," (XLM model)"),OBe.forEach(t),y5r=i(be),MC=n(be,"LI",{});var VBe=s(MC);Z1e=n(VBe,"STRONG",{});var H0t=s(Z1e);L5r=r(H0t,"xlm-roberta"),H0t.forEach(t),x5r=r(VBe," \u2014 "),OU=n(VBe,"A",{href:!0});var U0t=s(OU);$5r=r(U0t,"TFXLMRobertaForMultipleChoice"),U0t.forEach(t),k5r=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),S5r=i(be),EC=n(be,"LI",{});var XBe=s(EC);eTe=n(XBe,"STRONG",{});var J0t=s(eTe);R5r=r(J0t,"xlnet"),J0t.forEach(t),P5r=r(XBe," \u2014 "),VU=n(XBe,"A",{href:!0});var Y0t=s(VU);B5r=r(Y0t,"TFXLNetForMultipleChoice"),Y0t.forEach(t),I5r=r(XBe," (XLNet model)"),XBe.forEach(t),be.forEach(t),N5r=i(xl),T(CC.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),rDe=i(f),mc=n(f,"H2",{class:!0});var iOe=s(mc);wC=n(iOe,"A",{id:!0,class:!0,href:!0});var K0t=s(wC);oTe=n(K0t,"SPAN",{});var Z0t=s(oTe);T(t9.$$.fragment,Z0t),Z0t.forEach(t),K0t.forEach(t),q5r=i(iOe),rTe=n(iOe,"SPAN",{});var ewt=s(rTe);j5r=r(ewt,"TFAutoModelForNextSentencePrediction"),ewt.forEach(t),iOe.forEach(t),tDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(a9.$$.fragment,$l),D5r=i($l),gc=n($l,"P",{});var Xee=s(gc);G5r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XU=n(Xee,"A",{href:!0});var owt=s(XU);O5r=r(owt,"from_pretrained()"),owt.forEach(t),V5r=r(Xee," class method or the "),zU=n(Xee,"A",{href:!0});var rwt=s(zU);X5r=r(rwt,"from_config()"),rwt.forEach(t),z5r=r(Xee,` class
method.`),Xee.forEach(t),W5r=i($l),n9=n($l,"P",{});var dOe=s(n9);Q5r=r(dOe,"This class cannot be instantiated directly using "),tTe=n(dOe,"CODE",{});var twt=s(tTe);H5r=r(twt,"__init__()"),twt.forEach(t),U5r=r(dOe," (throws an error)."),dOe.forEach(t),J5r=i($l),Bt=n($l,"DIV",{class:!0});var JA=s(Bt);T(s9.$$.fragment,JA),Y5r=i(JA),aTe=n(JA,"P",{});var awt=s(aTe);K5r=r(awt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),awt.forEach(t),Z5r=i(JA),hc=n(JA,"P",{});var zee=s(hc);e3r=r(zee,`Note:
Loading a model from its configuration file does `),nTe=n(zee,"STRONG",{});var nwt=s(nTe);o3r=r(nwt,"not"),nwt.forEach(t),r3r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(zee,"A",{href:!0});var swt=s(WU);t3r=r(swt,"from_pretrained()"),swt.forEach(t),a3r=r(zee," to load the model weights."),zee.forEach(t),n3r=i(JA),T(AC.$$.fragment,JA),JA.forEach(t),s3r=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(l9.$$.fragment,kl),l3r=i(kl),sTe=n(kl,"P",{});var lwt=s(sTe);i3r=r(lwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lwt.forEach(t),d3r=i(kl),ln=n(kl,"P",{});var YA=s(ln);c3r=r(YA,"The model class to instantiate is selected based on the "),lTe=n(YA,"CODE",{});var iwt=s(lTe);f3r=r(iwt,"model_type"),iwt.forEach(t),m3r=r(YA,` property of the config object (either
passed as an argument or loaded from `),iTe=n(YA,"CODE",{});var dwt=s(iTe);g3r=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),h3r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(YA,"CODE",{});var cwt=s(dTe);p3r=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),_3r=r(YA,":"),YA.forEach(t),u3r=i(kl),i9=n(kl,"UL",{});var cOe=s(i9);yC=n(cOe,"LI",{});var zBe=s(yC);cTe=n(zBe,"STRONG",{});var fwt=s(cTe);b3r=r(fwt,"bert"),fwt.forEach(t),v3r=r(zBe," \u2014 "),QU=n(zBe,"A",{href:!0});var mwt=s(QU);F3r=r(mwt,"TFBertForNextSentencePrediction"),mwt.forEach(t),T3r=r(zBe," (BERT model)"),zBe.forEach(t),M3r=i(cOe),LC=n(cOe,"LI",{});var WBe=s(LC);fTe=n(WBe,"STRONG",{});var gwt=s(fTe);E3r=r(gwt,"mobilebert"),gwt.forEach(t),C3r=r(WBe," \u2014 "),HU=n(WBe,"A",{href:!0});var hwt=s(HU);w3r=r(hwt,"TFMobileBertForNextSentencePrediction"),hwt.forEach(t),A3r=r(WBe," (MobileBERT model)"),WBe.forEach(t),cOe.forEach(t),y3r=i(kl),T(xC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),aDe=i(f),pc=n(f,"H2",{class:!0});var fOe=s(pc);$C=n(fOe,"A",{id:!0,class:!0,href:!0});var pwt=s($C);mTe=n(pwt,"SPAN",{});var _wt=s(mTe);T(d9.$$.fragment,_wt),_wt.forEach(t),pwt.forEach(t),L3r=i(fOe),gTe=n(fOe,"SPAN",{});var uwt=s(gTe);x3r=r(uwt,"TFAutoModelForTableQuestionAnswering"),uwt.forEach(t),fOe.forEach(t),nDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(c9.$$.fragment,Sl),$3r=i(Sl),_c=n(Sl,"P",{});var Wee=s(_c);k3r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UU=n(Wee,"A",{href:!0});var bwt=s(UU);S3r=r(bwt,"from_pretrained()"),bwt.forEach(t),R3r=r(Wee," class method or the "),JU=n(Wee,"A",{href:!0});var vwt=s(JU);P3r=r(vwt,"from_config()"),vwt.forEach(t),B3r=r(Wee,` class
method.`),Wee.forEach(t),I3r=i(Sl),f9=n(Sl,"P",{});var mOe=s(f9);N3r=r(mOe,"This class cannot be instantiated directly using "),hTe=n(mOe,"CODE",{});var Fwt=s(hTe);q3r=r(Fwt,"__init__()"),Fwt.forEach(t),j3r=r(mOe," (throws an error)."),mOe.forEach(t),D3r=i(Sl),It=n(Sl,"DIV",{class:!0});var KA=s(It);T(m9.$$.fragment,KA),G3r=i(KA),pTe=n(KA,"P",{});var Twt=s(pTe);O3r=r(Twt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Twt.forEach(t),V3r=i(KA),uc=n(KA,"P",{});var Qee=s(uc);X3r=r(Qee,`Note:
Loading a model from its configuration file does `),_Te=n(Qee,"STRONG",{});var Mwt=s(_Te);z3r=r(Mwt,"not"),Mwt.forEach(t),W3r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Qee,"A",{href:!0});var Ewt=s(YU);Q3r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),H3r=r(Qee," to load the model weights."),Qee.forEach(t),U3r=i(KA),T(kC.$$.fragment,KA),KA.forEach(t),J3r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(g9.$$.fragment,Rl),Y3r=i(Rl),uTe=n(Rl,"P",{});var Cwt=s(uTe);K3r=r(Cwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Cwt.forEach(t),Z3r=i(Rl),dn=n(Rl,"P",{});var ZA=s(dn);e0r=r(ZA,"The model class to instantiate is selected based on the "),bTe=n(ZA,"CODE",{});var wwt=s(bTe);o0r=r(wwt,"model_type"),wwt.forEach(t),r0r=r(ZA,` property of the config object (either
passed as an argument or loaded from `),vTe=n(ZA,"CODE",{});var Awt=s(vTe);t0r=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),a0r=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(ZA,"CODE",{});var ywt=s(FTe);n0r=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),s0r=r(ZA,":"),ZA.forEach(t),l0r=i(Rl),TTe=n(Rl,"UL",{});var Lwt=s(TTe);SC=n(Lwt,"LI",{});var QBe=s(SC);MTe=n(QBe,"STRONG",{});var xwt=s(MTe);i0r=r(xwt,"tapas"),xwt.forEach(t),d0r=r(QBe," \u2014 "),KU=n(QBe,"A",{href:!0});var $wt=s(KU);c0r=r($wt,"TFTapasForQuestionAnswering"),$wt.forEach(t),f0r=r(QBe," (TAPAS model)"),QBe.forEach(t),Lwt.forEach(t),m0r=i(Rl),T(RC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),sDe=i(f),bc=n(f,"H2",{class:!0});var gOe=s(bc);PC=n(gOe,"A",{id:!0,class:!0,href:!0});var kwt=s(PC);ETe=n(kwt,"SPAN",{});var Swt=s(ETe);T(h9.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),g0r=i(gOe),CTe=n(gOe,"SPAN",{});var Rwt=s(CTe);h0r=r(Rwt,"TFAutoModelForTokenClassification"),Rwt.forEach(t),gOe.forEach(t),lDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(p9.$$.fragment,Pl),p0r=i(Pl),vc=n(Pl,"P",{});var Hee=s(vc);_0r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZU=n(Hee,"A",{href:!0});var Pwt=s(ZU);u0r=r(Pwt,"from_pretrained()"),Pwt.forEach(t),b0r=r(Hee," class method or the "),eJ=n(Hee,"A",{href:!0});var Bwt=s(eJ);v0r=r(Bwt,"from_config()"),Bwt.forEach(t),F0r=r(Hee,` class
method.`),Hee.forEach(t),T0r=i(Pl),_9=n(Pl,"P",{});var hOe=s(_9);M0r=r(hOe,"This class cannot be instantiated directly using "),wTe=n(hOe,"CODE",{});var Iwt=s(wTe);E0r=r(Iwt,"__init__()"),Iwt.forEach(t),C0r=r(hOe," (throws an error)."),hOe.forEach(t),w0r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var ey=s(Nt);T(u9.$$.fragment,ey),A0r=i(ey),ATe=n(ey,"P",{});var Nwt=s(ATe);y0r=r(Nwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nwt.forEach(t),L0r=i(ey),Fc=n(ey,"P",{});var Uee=s(Fc);x0r=r(Uee,`Note:
Loading a model from its configuration file does `),yTe=n(Uee,"STRONG",{});var qwt=s(yTe);$0r=r(qwt,"not"),qwt.forEach(t),k0r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Uee,"A",{href:!0});var jwt=s(oJ);S0r=r(jwt,"from_pretrained()"),jwt.forEach(t),R0r=r(Uee," to load the model weights."),Uee.forEach(t),P0r=i(ey),T(BC.$$.fragment,ey),ey.forEach(t),B0r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(b9.$$.fragment,Bl),I0r=i(Bl),LTe=n(Bl,"P",{});var Dwt=s(LTe);N0r=r(Dwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dwt.forEach(t),q0r=i(Bl),cn=n(Bl,"P",{});var oy=s(cn);j0r=r(oy,"The model class to instantiate is selected based on the "),xTe=n(oy,"CODE",{});var Gwt=s(xTe);D0r=r(Gwt,"model_type"),Gwt.forEach(t),G0r=r(oy,` property of the config object (either
passed as an argument or loaded from `),$Te=n(oy,"CODE",{});var Owt=s($Te);O0r=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),V0r=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(oy,"CODE",{});var Vwt=s(kTe);X0r=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),z0r=r(oy,":"),oy.forEach(t),W0r=i(Bl),de=n(Bl,"UL",{});var me=s(de);IC=n(me,"LI",{});var HBe=s(IC);STe=n(HBe,"STRONG",{});var Xwt=s(STe);Q0r=r(Xwt,"albert"),Xwt.forEach(t),H0r=r(HBe," \u2014 "),rJ=n(HBe,"A",{href:!0});var zwt=s(rJ);U0r=r(zwt,"TFAlbertForTokenClassification"),zwt.forEach(t),J0r=r(HBe," (ALBERT model)"),HBe.forEach(t),Y0r=i(me),NC=n(me,"LI",{});var UBe=s(NC);RTe=n(UBe,"STRONG",{});var Wwt=s(RTe);K0r=r(Wwt,"bert"),Wwt.forEach(t),Z0r=r(UBe," \u2014 "),tJ=n(UBe,"A",{href:!0});var Qwt=s(tJ);ewr=r(Qwt,"TFBertForTokenClassification"),Qwt.forEach(t),owr=r(UBe," (BERT model)"),UBe.forEach(t),rwr=i(me),qC=n(me,"LI",{});var JBe=s(qC);PTe=n(JBe,"STRONG",{});var Hwt=s(PTe);twr=r(Hwt,"camembert"),Hwt.forEach(t),awr=r(JBe," \u2014 "),aJ=n(JBe,"A",{href:!0});var Uwt=s(aJ);nwr=r(Uwt,"TFCamembertForTokenClassification"),Uwt.forEach(t),swr=r(JBe," (CamemBERT model)"),JBe.forEach(t),lwr=i(me),jC=n(me,"LI",{});var YBe=s(jC);BTe=n(YBe,"STRONG",{});var Jwt=s(BTe);iwr=r(Jwt,"convbert"),Jwt.forEach(t),dwr=r(YBe," \u2014 "),nJ=n(YBe,"A",{href:!0});var Ywt=s(nJ);cwr=r(Ywt,"TFConvBertForTokenClassification"),Ywt.forEach(t),fwr=r(YBe," (ConvBERT model)"),YBe.forEach(t),mwr=i(me),DC=n(me,"LI",{});var KBe=s(DC);ITe=n(KBe,"STRONG",{});var Kwt=s(ITe);gwr=r(Kwt,"deberta"),Kwt.forEach(t),hwr=r(KBe," \u2014 "),sJ=n(KBe,"A",{href:!0});var Zwt=s(sJ);pwr=r(Zwt,"TFDebertaForTokenClassification"),Zwt.forEach(t),_wr=r(KBe," (DeBERTa model)"),KBe.forEach(t),uwr=i(me),GC=n(me,"LI",{});var ZBe=s(GC);NTe=n(ZBe,"STRONG",{});var eAt=s(NTe);bwr=r(eAt,"deberta-v2"),eAt.forEach(t),vwr=r(ZBe," \u2014 "),lJ=n(ZBe,"A",{href:!0});var oAt=s(lJ);Fwr=r(oAt,"TFDebertaV2ForTokenClassification"),oAt.forEach(t),Twr=r(ZBe," (DeBERTa-v2 model)"),ZBe.forEach(t),Mwr=i(me),OC=n(me,"LI",{});var eIe=s(OC);qTe=n(eIe,"STRONG",{});var rAt=s(qTe);Ewr=r(rAt,"distilbert"),rAt.forEach(t),Cwr=r(eIe," \u2014 "),iJ=n(eIe,"A",{href:!0});var tAt=s(iJ);wwr=r(tAt,"TFDistilBertForTokenClassification"),tAt.forEach(t),Awr=r(eIe," (DistilBERT model)"),eIe.forEach(t),ywr=i(me),VC=n(me,"LI",{});var oIe=s(VC);jTe=n(oIe,"STRONG",{});var aAt=s(jTe);Lwr=r(aAt,"electra"),aAt.forEach(t),xwr=r(oIe," \u2014 "),dJ=n(oIe,"A",{href:!0});var nAt=s(dJ);$wr=r(nAt,"TFElectraForTokenClassification"),nAt.forEach(t),kwr=r(oIe," (ELECTRA model)"),oIe.forEach(t),Swr=i(me),XC=n(me,"LI",{});var rIe=s(XC);DTe=n(rIe,"STRONG",{});var sAt=s(DTe);Rwr=r(sAt,"flaubert"),sAt.forEach(t),Pwr=r(rIe," \u2014 "),cJ=n(rIe,"A",{href:!0});var lAt=s(cJ);Bwr=r(lAt,"TFFlaubertForTokenClassification"),lAt.forEach(t),Iwr=r(rIe," (FlauBERT model)"),rIe.forEach(t),Nwr=i(me),zC=n(me,"LI",{});var tIe=s(zC);GTe=n(tIe,"STRONG",{});var iAt=s(GTe);qwr=r(iAt,"funnel"),iAt.forEach(t),jwr=r(tIe," \u2014 "),fJ=n(tIe,"A",{href:!0});var dAt=s(fJ);Dwr=r(dAt,"TFFunnelForTokenClassification"),dAt.forEach(t),Gwr=r(tIe," (Funnel Transformer model)"),tIe.forEach(t),Owr=i(me),WC=n(me,"LI",{});var aIe=s(WC);OTe=n(aIe,"STRONG",{});var cAt=s(OTe);Vwr=r(cAt,"layoutlm"),cAt.forEach(t),Xwr=r(aIe," \u2014 "),mJ=n(aIe,"A",{href:!0});var fAt=s(mJ);zwr=r(fAt,"TFLayoutLMForTokenClassification"),fAt.forEach(t),Wwr=r(aIe," (LayoutLM model)"),aIe.forEach(t),Qwr=i(me),QC=n(me,"LI",{});var nIe=s(QC);VTe=n(nIe,"STRONG",{});var mAt=s(VTe);Hwr=r(mAt,"longformer"),mAt.forEach(t),Uwr=r(nIe," \u2014 "),gJ=n(nIe,"A",{href:!0});var gAt=s(gJ);Jwr=r(gAt,"TFLongformerForTokenClassification"),gAt.forEach(t),Ywr=r(nIe," (Longformer model)"),nIe.forEach(t),Kwr=i(me),HC=n(me,"LI",{});var sIe=s(HC);XTe=n(sIe,"STRONG",{});var hAt=s(XTe);Zwr=r(hAt,"mobilebert"),hAt.forEach(t),eAr=r(sIe," \u2014 "),hJ=n(sIe,"A",{href:!0});var pAt=s(hJ);oAr=r(pAt,"TFMobileBertForTokenClassification"),pAt.forEach(t),rAr=r(sIe," (MobileBERT model)"),sIe.forEach(t),tAr=i(me),UC=n(me,"LI",{});var lIe=s(UC);zTe=n(lIe,"STRONG",{});var _At=s(zTe);aAr=r(_At,"mpnet"),_At.forEach(t),nAr=r(lIe," \u2014 "),pJ=n(lIe,"A",{href:!0});var uAt=s(pJ);sAr=r(uAt,"TFMPNetForTokenClassification"),uAt.forEach(t),lAr=r(lIe," (MPNet model)"),lIe.forEach(t),iAr=i(me),JC=n(me,"LI",{});var iIe=s(JC);WTe=n(iIe,"STRONG",{});var bAt=s(WTe);dAr=r(bAt,"rembert"),bAt.forEach(t),cAr=r(iIe," \u2014 "),_J=n(iIe,"A",{href:!0});var vAt=s(_J);fAr=r(vAt,"TFRemBertForTokenClassification"),vAt.forEach(t),mAr=r(iIe," (RemBERT model)"),iIe.forEach(t),gAr=i(me),YC=n(me,"LI",{});var dIe=s(YC);QTe=n(dIe,"STRONG",{});var FAt=s(QTe);hAr=r(FAt,"roberta"),FAt.forEach(t),pAr=r(dIe," \u2014 "),uJ=n(dIe,"A",{href:!0});var TAt=s(uJ);_Ar=r(TAt,"TFRobertaForTokenClassification"),TAt.forEach(t),uAr=r(dIe," (RoBERTa model)"),dIe.forEach(t),bAr=i(me),KC=n(me,"LI",{});var cIe=s(KC);HTe=n(cIe,"STRONG",{});var MAt=s(HTe);vAr=r(MAt,"roformer"),MAt.forEach(t),FAr=r(cIe," \u2014 "),bJ=n(cIe,"A",{href:!0});var EAt=s(bJ);TAr=r(EAt,"TFRoFormerForTokenClassification"),EAt.forEach(t),MAr=r(cIe," (RoFormer model)"),cIe.forEach(t),EAr=i(me),ZC=n(me,"LI",{});var fIe=s(ZC);UTe=n(fIe,"STRONG",{});var CAt=s(UTe);CAr=r(CAt,"xlm"),CAt.forEach(t),wAr=r(fIe," \u2014 "),vJ=n(fIe,"A",{href:!0});var wAt=s(vJ);AAr=r(wAt,"TFXLMForTokenClassification"),wAt.forEach(t),yAr=r(fIe," (XLM model)"),fIe.forEach(t),LAr=i(me),e5=n(me,"LI",{});var mIe=s(e5);JTe=n(mIe,"STRONG",{});var AAt=s(JTe);xAr=r(AAt,"xlm-roberta"),AAt.forEach(t),$Ar=r(mIe," \u2014 "),FJ=n(mIe,"A",{href:!0});var yAt=s(FJ);kAr=r(yAt,"TFXLMRobertaForTokenClassification"),yAt.forEach(t),SAr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),RAr=i(me),o5=n(me,"LI",{});var gIe=s(o5);YTe=n(gIe,"STRONG",{});var LAt=s(YTe);PAr=r(LAt,"xlnet"),LAt.forEach(t),BAr=r(gIe," \u2014 "),TJ=n(gIe,"A",{href:!0});var xAt=s(TJ);IAr=r(xAt,"TFXLNetForTokenClassification"),xAt.forEach(t),NAr=r(gIe," (XLNet model)"),gIe.forEach(t),me.forEach(t),qAr=i(Bl),T(r5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),iDe=i(f),Tc=n(f,"H2",{class:!0});var pOe=s(Tc);t5=n(pOe,"A",{id:!0,class:!0,href:!0});var $At=s(t5);KTe=n($At,"SPAN",{});var kAt=s(KTe);T(v9.$$.fragment,kAt),kAt.forEach(t),$At.forEach(t),jAr=i(pOe),ZTe=n(pOe,"SPAN",{});var SAt=s(ZTe);DAr=r(SAt,"TFAutoModelForQuestionAnswering"),SAt.forEach(t),pOe.forEach(t),dDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(F9.$$.fragment,Il),GAr=i(Il),Mc=n(Il,"P",{});var Jee=s(Mc);OAr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=n(Jee,"A",{href:!0});var RAt=s(MJ);VAr=r(RAt,"from_pretrained()"),RAt.forEach(t),XAr=r(Jee," class method or the "),EJ=n(Jee,"A",{href:!0});var PAt=s(EJ);zAr=r(PAt,"from_config()"),PAt.forEach(t),WAr=r(Jee,` class
method.`),Jee.forEach(t),QAr=i(Il),T9=n(Il,"P",{});var _Oe=s(T9);HAr=r(_Oe,"This class cannot be instantiated directly using "),eMe=n(_Oe,"CODE",{});var BAt=s(eMe);UAr=r(BAt,"__init__()"),BAt.forEach(t),JAr=r(_Oe," (throws an error)."),_Oe.forEach(t),YAr=i(Il),qt=n(Il,"DIV",{class:!0});var ry=s(qt);T(M9.$$.fragment,ry),KAr=i(ry),oMe=n(ry,"P",{});var IAt=s(oMe);ZAr=r(IAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IAt.forEach(t),eyr=i(ry),Ec=n(ry,"P",{});var Yee=s(Ec);oyr=r(Yee,`Note:
Loading a model from its configuration file does `),rMe=n(Yee,"STRONG",{});var NAt=s(rMe);ryr=r(NAt,"not"),NAt.forEach(t),tyr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(Yee,"A",{href:!0});var qAt=s(CJ);ayr=r(qAt,"from_pretrained()"),qAt.forEach(t),nyr=r(Yee," to load the model weights."),Yee.forEach(t),syr=i(ry),T(a5.$$.fragment,ry),ry.forEach(t),lyr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(E9.$$.fragment,Nl),iyr=i(Nl),tMe=n(Nl,"P",{});var jAt=s(tMe);dyr=r(jAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jAt.forEach(t),cyr=i(Nl),fn=n(Nl,"P",{});var ty=s(fn);fyr=r(ty,"The model class to instantiate is selected based on the "),aMe=n(ty,"CODE",{});var DAt=s(aMe);myr=r(DAt,"model_type"),DAt.forEach(t),gyr=r(ty,` property of the config object (either
passed as an argument or loaded from `),nMe=n(ty,"CODE",{});var GAt=s(nMe);hyr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),pyr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(ty,"CODE",{});var OAt=s(sMe);_yr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),uyr=r(ty,":"),ty.forEach(t),byr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);n5=n(ge,"LI",{});var hIe=s(n5);lMe=n(hIe,"STRONG",{});var VAt=s(lMe);vyr=r(VAt,"albert"),VAt.forEach(t),Fyr=r(hIe," \u2014 "),wJ=n(hIe,"A",{href:!0});var XAt=s(wJ);Tyr=r(XAt,"TFAlbertForQuestionAnswering"),XAt.forEach(t),Myr=r(hIe," (ALBERT model)"),hIe.forEach(t),Eyr=i(ge),s5=n(ge,"LI",{});var pIe=s(s5);iMe=n(pIe,"STRONG",{});var zAt=s(iMe);Cyr=r(zAt,"bert"),zAt.forEach(t),wyr=r(pIe," \u2014 "),AJ=n(pIe,"A",{href:!0});var WAt=s(AJ);Ayr=r(WAt,"TFBertForQuestionAnswering"),WAt.forEach(t),yyr=r(pIe," (BERT model)"),pIe.forEach(t),Lyr=i(ge),l5=n(ge,"LI",{});var _Ie=s(l5);dMe=n(_Ie,"STRONG",{});var QAt=s(dMe);xyr=r(QAt,"camembert"),QAt.forEach(t),$yr=r(_Ie," \u2014 "),yJ=n(_Ie,"A",{href:!0});var HAt=s(yJ);kyr=r(HAt,"TFCamembertForQuestionAnswering"),HAt.forEach(t),Syr=r(_Ie," (CamemBERT model)"),_Ie.forEach(t),Ryr=i(ge),i5=n(ge,"LI",{});var uIe=s(i5);cMe=n(uIe,"STRONG",{});var UAt=s(cMe);Pyr=r(UAt,"convbert"),UAt.forEach(t),Byr=r(uIe," \u2014 "),LJ=n(uIe,"A",{href:!0});var JAt=s(LJ);Iyr=r(JAt,"TFConvBertForQuestionAnswering"),JAt.forEach(t),Nyr=r(uIe," (ConvBERT model)"),uIe.forEach(t),qyr=i(ge),d5=n(ge,"LI",{});var bIe=s(d5);fMe=n(bIe,"STRONG",{});var YAt=s(fMe);jyr=r(YAt,"deberta"),YAt.forEach(t),Dyr=r(bIe," \u2014 "),xJ=n(bIe,"A",{href:!0});var KAt=s(xJ);Gyr=r(KAt,"TFDebertaForQuestionAnswering"),KAt.forEach(t),Oyr=r(bIe," (DeBERTa model)"),bIe.forEach(t),Vyr=i(ge),c5=n(ge,"LI",{});var vIe=s(c5);mMe=n(vIe,"STRONG",{});var ZAt=s(mMe);Xyr=r(ZAt,"deberta-v2"),ZAt.forEach(t),zyr=r(vIe," \u2014 "),$J=n(vIe,"A",{href:!0});var eyt=s($J);Wyr=r(eyt,"TFDebertaV2ForQuestionAnswering"),eyt.forEach(t),Qyr=r(vIe," (DeBERTa-v2 model)"),vIe.forEach(t),Hyr=i(ge),f5=n(ge,"LI",{});var FIe=s(f5);gMe=n(FIe,"STRONG",{});var oyt=s(gMe);Uyr=r(oyt,"distilbert"),oyt.forEach(t),Jyr=r(FIe," \u2014 "),kJ=n(FIe,"A",{href:!0});var ryt=s(kJ);Yyr=r(ryt,"TFDistilBertForQuestionAnswering"),ryt.forEach(t),Kyr=r(FIe," (DistilBERT model)"),FIe.forEach(t),Zyr=i(ge),m5=n(ge,"LI",{});var TIe=s(m5);hMe=n(TIe,"STRONG",{});var tyt=s(hMe);eLr=r(tyt,"electra"),tyt.forEach(t),oLr=r(TIe," \u2014 "),SJ=n(TIe,"A",{href:!0});var ayt=s(SJ);rLr=r(ayt,"TFElectraForQuestionAnswering"),ayt.forEach(t),tLr=r(TIe," (ELECTRA model)"),TIe.forEach(t),aLr=i(ge),g5=n(ge,"LI",{});var MIe=s(g5);pMe=n(MIe,"STRONG",{});var nyt=s(pMe);nLr=r(nyt,"flaubert"),nyt.forEach(t),sLr=r(MIe," \u2014 "),RJ=n(MIe,"A",{href:!0});var syt=s(RJ);lLr=r(syt,"TFFlaubertForQuestionAnsweringSimple"),syt.forEach(t),iLr=r(MIe," (FlauBERT model)"),MIe.forEach(t),dLr=i(ge),h5=n(ge,"LI",{});var EIe=s(h5);_Me=n(EIe,"STRONG",{});var lyt=s(_Me);cLr=r(lyt,"funnel"),lyt.forEach(t),fLr=r(EIe," \u2014 "),PJ=n(EIe,"A",{href:!0});var iyt=s(PJ);mLr=r(iyt,"TFFunnelForQuestionAnswering"),iyt.forEach(t),gLr=r(EIe," (Funnel Transformer model)"),EIe.forEach(t),hLr=i(ge),p5=n(ge,"LI",{});var CIe=s(p5);uMe=n(CIe,"STRONG",{});var dyt=s(uMe);pLr=r(dyt,"gptj"),dyt.forEach(t),_Lr=r(CIe," \u2014 "),BJ=n(CIe,"A",{href:!0});var cyt=s(BJ);uLr=r(cyt,"TFGPTJForQuestionAnswering"),cyt.forEach(t),bLr=r(CIe," (GPT-J model)"),CIe.forEach(t),vLr=i(ge),_5=n(ge,"LI",{});var wIe=s(_5);bMe=n(wIe,"STRONG",{});var fyt=s(bMe);FLr=r(fyt,"longformer"),fyt.forEach(t),TLr=r(wIe," \u2014 "),IJ=n(wIe,"A",{href:!0});var myt=s(IJ);MLr=r(myt,"TFLongformerForQuestionAnswering"),myt.forEach(t),ELr=r(wIe," (Longformer model)"),wIe.forEach(t),CLr=i(ge),u5=n(ge,"LI",{});var AIe=s(u5);vMe=n(AIe,"STRONG",{});var gyt=s(vMe);wLr=r(gyt,"mobilebert"),gyt.forEach(t),ALr=r(AIe," \u2014 "),NJ=n(AIe,"A",{href:!0});var hyt=s(NJ);yLr=r(hyt,"TFMobileBertForQuestionAnswering"),hyt.forEach(t),LLr=r(AIe," (MobileBERT model)"),AIe.forEach(t),xLr=i(ge),b5=n(ge,"LI",{});var yIe=s(b5);FMe=n(yIe,"STRONG",{});var pyt=s(FMe);$Lr=r(pyt,"mpnet"),pyt.forEach(t),kLr=r(yIe," \u2014 "),qJ=n(yIe,"A",{href:!0});var _yt=s(qJ);SLr=r(_yt,"TFMPNetForQuestionAnswering"),_yt.forEach(t),RLr=r(yIe," (MPNet model)"),yIe.forEach(t),PLr=i(ge),v5=n(ge,"LI",{});var LIe=s(v5);TMe=n(LIe,"STRONG",{});var uyt=s(TMe);BLr=r(uyt,"rembert"),uyt.forEach(t),ILr=r(LIe," \u2014 "),jJ=n(LIe,"A",{href:!0});var byt=s(jJ);NLr=r(byt,"TFRemBertForQuestionAnswering"),byt.forEach(t),qLr=r(LIe," (RemBERT model)"),LIe.forEach(t),jLr=i(ge),F5=n(ge,"LI",{});var xIe=s(F5);MMe=n(xIe,"STRONG",{});var vyt=s(MMe);DLr=r(vyt,"roberta"),vyt.forEach(t),GLr=r(xIe," \u2014 "),DJ=n(xIe,"A",{href:!0});var Fyt=s(DJ);OLr=r(Fyt,"TFRobertaForQuestionAnswering"),Fyt.forEach(t),VLr=r(xIe," (RoBERTa model)"),xIe.forEach(t),XLr=i(ge),T5=n(ge,"LI",{});var $Ie=s(T5);EMe=n($Ie,"STRONG",{});var Tyt=s(EMe);zLr=r(Tyt,"roformer"),Tyt.forEach(t),WLr=r($Ie," \u2014 "),GJ=n($Ie,"A",{href:!0});var Myt=s(GJ);QLr=r(Myt,"TFRoFormerForQuestionAnswering"),Myt.forEach(t),HLr=r($Ie," (RoFormer model)"),$Ie.forEach(t),ULr=i(ge),M5=n(ge,"LI",{});var kIe=s(M5);CMe=n(kIe,"STRONG",{});var Eyt=s(CMe);JLr=r(Eyt,"xlm"),Eyt.forEach(t),YLr=r(kIe," \u2014 "),OJ=n(kIe,"A",{href:!0});var Cyt=s(OJ);KLr=r(Cyt,"TFXLMForQuestionAnsweringSimple"),Cyt.forEach(t),ZLr=r(kIe," (XLM model)"),kIe.forEach(t),e8r=i(ge),E5=n(ge,"LI",{});var SIe=s(E5);wMe=n(SIe,"STRONG",{});var wyt=s(wMe);o8r=r(wyt,"xlm-roberta"),wyt.forEach(t),r8r=r(SIe," \u2014 "),VJ=n(SIe,"A",{href:!0});var Ayt=s(VJ);t8r=r(Ayt,"TFXLMRobertaForQuestionAnswering"),Ayt.forEach(t),a8r=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),n8r=i(ge),C5=n(ge,"LI",{});var RIe=s(C5);AMe=n(RIe,"STRONG",{});var yyt=s(AMe);s8r=r(yyt,"xlnet"),yyt.forEach(t),l8r=r(RIe," \u2014 "),XJ=n(RIe,"A",{href:!0});var Lyt=s(XJ);i8r=r(Lyt,"TFXLNetForQuestionAnsweringSimple"),Lyt.forEach(t),d8r=r(RIe," (XLNet model)"),RIe.forEach(t),ge.forEach(t),c8r=i(Nl),T(w5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),cDe=i(f),Cc=n(f,"H2",{class:!0});var uOe=s(Cc);A5=n(uOe,"A",{id:!0,class:!0,href:!0});var xyt=s(A5);yMe=n(xyt,"SPAN",{});var $yt=s(yMe);T(C9.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),f8r=i(uOe),LMe=n(uOe,"SPAN",{});var kyt=s(LMe);m8r=r(kyt,"TFAutoModelForVision2Seq"),kyt.forEach(t),uOe.forEach(t),fDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(w9.$$.fragment,ql),g8r=i(ql),wc=n(ql,"P",{});var Kee=s(wc);h8r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=n(Kee,"A",{href:!0});var Syt=s(zJ);p8r=r(Syt,"from_pretrained()"),Syt.forEach(t),_8r=r(Kee," class method or the "),WJ=n(Kee,"A",{href:!0});var Ryt=s(WJ);u8r=r(Ryt,"from_config()"),Ryt.forEach(t),b8r=r(Kee,` class
method.`),Kee.forEach(t),v8r=i(ql),A9=n(ql,"P",{});var bOe=s(A9);F8r=r(bOe,"This class cannot be instantiated directly using "),xMe=n(bOe,"CODE",{});var Pyt=s(xMe);T8r=r(Pyt,"__init__()"),Pyt.forEach(t),M8r=r(bOe," (throws an error)."),bOe.forEach(t),E8r=i(ql),jt=n(ql,"DIV",{class:!0});var ay=s(jt);T(y9.$$.fragment,ay),C8r=i(ay),$Me=n(ay,"P",{});var Byt=s($Me);w8r=r(Byt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Byt.forEach(t),A8r=i(ay),Ac=n(ay,"P",{});var Zee=s(Ac);y8r=r(Zee,`Note:
Loading a model from its configuration file does `),kMe=n(Zee,"STRONG",{});var Iyt=s(kMe);L8r=r(Iyt,"not"),Iyt.forEach(t),x8r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Zee,"A",{href:!0});var Nyt=s(QJ);$8r=r(Nyt,"from_pretrained()"),Nyt.forEach(t),k8r=r(Zee," to load the model weights."),Zee.forEach(t),S8r=i(ay),T(y5.$$.fragment,ay),ay.forEach(t),R8r=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(L9.$$.fragment,jl),P8r=i(jl),SMe=n(jl,"P",{});var qyt=s(SMe);B8r=r(qyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qyt.forEach(t),I8r=i(jl),mn=n(jl,"P",{});var ny=s(mn);N8r=r(ny,"The model class to instantiate is selected based on the "),RMe=n(ny,"CODE",{});var jyt=s(RMe);q8r=r(jyt,"model_type"),jyt.forEach(t),j8r=r(ny,` property of the config object (either
passed as an argument or loaded from `),PMe=n(ny,"CODE",{});var Dyt=s(PMe);D8r=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),G8r=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(ny,"CODE",{});var Gyt=s(BMe);O8r=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),V8r=r(ny,":"),ny.forEach(t),X8r=i(jl),IMe=n(jl,"UL",{});var Oyt=s(IMe);L5=n(Oyt,"LI",{});var PIe=s(L5);NMe=n(PIe,"STRONG",{});var Vyt=s(NMe);z8r=r(Vyt,"vision-encoder-decoder"),Vyt.forEach(t),W8r=r(PIe," \u2014 "),HJ=n(PIe,"A",{href:!0});var Xyt=s(HJ);Q8r=r(Xyt,"TFVisionEncoderDecoderModel"),Xyt.forEach(t),H8r=r(PIe," (Vision Encoder decoder model)"),PIe.forEach(t),Oyt.forEach(t),U8r=i(jl),T(x5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),mDe=i(f),yc=n(f,"H2",{class:!0});var vOe=s(yc);$5=n(vOe,"A",{id:!0,class:!0,href:!0});var zyt=s($5);qMe=n(zyt,"SPAN",{});var Wyt=s(qMe);T(x9.$$.fragment,Wyt),Wyt.forEach(t),zyt.forEach(t),J8r=i(vOe),jMe=n(vOe,"SPAN",{});var Qyt=s(jMe);Y8r=r(Qyt,"TFAutoModelForSpeechSeq2Seq"),Qyt.forEach(t),vOe.forEach(t),gDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T($9.$$.fragment,Dl),K8r=i(Dl),Lc=n(Dl,"P",{});var eoe=s(Lc);Z8r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UJ=n(eoe,"A",{href:!0});var Hyt=s(UJ);e7r=r(Hyt,"from_pretrained()"),Hyt.forEach(t),o7r=r(eoe," class method or the "),JJ=n(eoe,"A",{href:!0});var Uyt=s(JJ);r7r=r(Uyt,"from_config()"),Uyt.forEach(t),t7r=r(eoe,` class
method.`),eoe.forEach(t),a7r=i(Dl),k9=n(Dl,"P",{});var FOe=s(k9);n7r=r(FOe,"This class cannot be instantiated directly using "),DMe=n(FOe,"CODE",{});var Jyt=s(DMe);s7r=r(Jyt,"__init__()"),Jyt.forEach(t),l7r=r(FOe," (throws an error)."),FOe.forEach(t),i7r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var sy=s(Dt);T(S9.$$.fragment,sy),d7r=i(sy),GMe=n(sy,"P",{});var Yyt=s(GMe);c7r=r(Yyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yyt.forEach(t),f7r=i(sy),xc=n(sy,"P",{});var ooe=s(xc);m7r=r(ooe,`Note:
Loading a model from its configuration file does `),OMe=n(ooe,"STRONG",{});var Kyt=s(OMe);g7r=r(Kyt,"not"),Kyt.forEach(t),h7r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(ooe,"A",{href:!0});var Zyt=s(YJ);p7r=r(Zyt,"from_pretrained()"),Zyt.forEach(t),_7r=r(ooe," to load the model weights."),ooe.forEach(t),u7r=i(sy),T(k5.$$.fragment,sy),sy.forEach(t),b7r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(R9.$$.fragment,Gl),v7r=i(Gl),VMe=n(Gl,"P",{});var eLt=s(VMe);F7r=r(eLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eLt.forEach(t),T7r=i(Gl),gn=n(Gl,"P",{});var ly=s(gn);M7r=r(ly,"The model class to instantiate is selected based on the "),XMe=n(ly,"CODE",{});var oLt=s(XMe);E7r=r(oLt,"model_type"),oLt.forEach(t),C7r=r(ly,` property of the config object (either
passed as an argument or loaded from `),zMe=n(ly,"CODE",{});var rLt=s(zMe);w7r=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),A7r=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(ly,"CODE",{});var tLt=s(WMe);y7r=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),L7r=r(ly,":"),ly.forEach(t),x7r=i(Gl),QMe=n(Gl,"UL",{});var aLt=s(QMe);S5=n(aLt,"LI",{});var BIe=s(S5);HMe=n(BIe,"STRONG",{});var nLt=s(HMe);$7r=r(nLt,"speech_to_text"),nLt.forEach(t),k7r=r(BIe," \u2014 "),KJ=n(BIe,"A",{href:!0});var sLt=s(KJ);S7r=r(sLt,"TFSpeech2TextForConditionalGeneration"),sLt.forEach(t),R7r=r(BIe," (Speech2Text model)"),BIe.forEach(t),aLt.forEach(t),P7r=i(Gl),T(R5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),hDe=i(f),$c=n(f,"H2",{class:!0});var TOe=s($c);P5=n(TOe,"A",{id:!0,class:!0,href:!0});var lLt=s(P5);UMe=n(lLt,"SPAN",{});var iLt=s(UMe);T(P9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),B7r=i(TOe),JMe=n(TOe,"SPAN",{});var dLt=s(JMe);I7r=r(dLt,"FlaxAutoModel"),dLt.forEach(t),TOe.forEach(t),pDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(B9.$$.fragment,Ol),N7r=i(Ol),kc=n(Ol,"P",{});var roe=s(kc);q7r=r(roe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZJ=n(roe,"A",{href:!0});var cLt=s(ZJ);j7r=r(cLt,"from_pretrained()"),cLt.forEach(t),D7r=r(roe," class method or the "),eY=n(roe,"A",{href:!0});var fLt=s(eY);G7r=r(fLt,"from_config()"),fLt.forEach(t),O7r=r(roe,` class
method.`),roe.forEach(t),V7r=i(Ol),I9=n(Ol,"P",{});var MOe=s(I9);X7r=r(MOe,"This class cannot be instantiated directly using "),YMe=n(MOe,"CODE",{});var mLt=s(YMe);z7r=r(mLt,"__init__()"),mLt.forEach(t),W7r=r(MOe," (throws an error)."),MOe.forEach(t),Q7r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var iy=s(Gt);T(N9.$$.fragment,iy),H7r=i(iy),KMe=n(iy,"P",{});var gLt=s(KMe);U7r=r(gLt,"Instantiates one of the base model classes of the library from a configuration."),gLt.forEach(t),J7r=i(iy),Sc=n(iy,"P",{});var toe=s(Sc);Y7r=r(toe,`Note:
Loading a model from its configuration file does `),ZMe=n(toe,"STRONG",{});var hLt=s(ZMe);K7r=r(hLt,"not"),hLt.forEach(t),Z7r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(toe,"A",{href:!0});var pLt=s(oY);e9r=r(pLt,"from_pretrained()"),pLt.forEach(t),o9r=r(toe," to load the model weights."),toe.forEach(t),r9r=i(iy),T(B5.$$.fragment,iy),iy.forEach(t),t9r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(q9.$$.fragment,Vl),a9r=i(Vl),e4e=n(Vl,"P",{});var _Lt=s(e4e);n9r=r(_Lt,"Instantiate one of the base model classes of the library from a pretrained model."),_Lt.forEach(t),s9r=i(Vl),hn=n(Vl,"P",{});var dy=s(hn);l9r=r(dy,"The model class to instantiate is selected based on the "),o4e=n(dy,"CODE",{});var uLt=s(o4e);i9r=r(uLt,"model_type"),uLt.forEach(t),d9r=r(dy,` property of the config object (either
passed as an argument or loaded from `),r4e=n(dy,"CODE",{});var bLt=s(r4e);c9r=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),f9r=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(dy,"CODE",{});var vLt=s(t4e);m9r=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),g9r=r(dy,":"),dy.forEach(t),h9r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);I5=n(ne,"LI",{});var IIe=s(I5);a4e=n(IIe,"STRONG",{});var FLt=s(a4e);p9r=r(FLt,"albert"),FLt.forEach(t),_9r=r(IIe," \u2014 "),rY=n(IIe,"A",{href:!0});var TLt=s(rY);u9r=r(TLt,"FlaxAlbertModel"),TLt.forEach(t),b9r=r(IIe," (ALBERT model)"),IIe.forEach(t),v9r=i(ne),N5=n(ne,"LI",{});var NIe=s(N5);n4e=n(NIe,"STRONG",{});var MLt=s(n4e);F9r=r(MLt,"bart"),MLt.forEach(t),T9r=r(NIe," \u2014 "),tY=n(NIe,"A",{href:!0});var ELt=s(tY);M9r=r(ELt,"FlaxBartModel"),ELt.forEach(t),E9r=r(NIe," (BART model)"),NIe.forEach(t),C9r=i(ne),q5=n(ne,"LI",{});var qIe=s(q5);s4e=n(qIe,"STRONG",{});var CLt=s(s4e);w9r=r(CLt,"beit"),CLt.forEach(t),A9r=r(qIe," \u2014 "),aY=n(qIe,"A",{href:!0});var wLt=s(aY);y9r=r(wLt,"FlaxBeitModel"),wLt.forEach(t),L9r=r(qIe," (BEiT model)"),qIe.forEach(t),x9r=i(ne),j5=n(ne,"LI",{});var jIe=s(j5);l4e=n(jIe,"STRONG",{});var ALt=s(l4e);$9r=r(ALt,"bert"),ALt.forEach(t),k9r=r(jIe," \u2014 "),nY=n(jIe,"A",{href:!0});var yLt=s(nY);S9r=r(yLt,"FlaxBertModel"),yLt.forEach(t),R9r=r(jIe," (BERT model)"),jIe.forEach(t),P9r=i(ne),D5=n(ne,"LI",{});var DIe=s(D5);i4e=n(DIe,"STRONG",{});var LLt=s(i4e);B9r=r(LLt,"big_bird"),LLt.forEach(t),I9r=r(DIe," \u2014 "),sY=n(DIe,"A",{href:!0});var xLt=s(sY);N9r=r(xLt,"FlaxBigBirdModel"),xLt.forEach(t),q9r=r(DIe," (BigBird model)"),DIe.forEach(t),j9r=i(ne),G5=n(ne,"LI",{});var GIe=s(G5);d4e=n(GIe,"STRONG",{});var $Lt=s(d4e);D9r=r($Lt,"blenderbot"),$Lt.forEach(t),G9r=r(GIe," \u2014 "),lY=n(GIe,"A",{href:!0});var kLt=s(lY);O9r=r(kLt,"FlaxBlenderbotModel"),kLt.forEach(t),V9r=r(GIe," (Blenderbot model)"),GIe.forEach(t),X9r=i(ne),O5=n(ne,"LI",{});var OIe=s(O5);c4e=n(OIe,"STRONG",{});var SLt=s(c4e);z9r=r(SLt,"blenderbot-small"),SLt.forEach(t),W9r=r(OIe," \u2014 "),iY=n(OIe,"A",{href:!0});var RLt=s(iY);Q9r=r(RLt,"FlaxBlenderbotSmallModel"),RLt.forEach(t),H9r=r(OIe," (BlenderbotSmall model)"),OIe.forEach(t),U9r=i(ne),V5=n(ne,"LI",{});var VIe=s(V5);f4e=n(VIe,"STRONG",{});var PLt=s(f4e);J9r=r(PLt,"clip"),PLt.forEach(t),Y9r=r(VIe," \u2014 "),dY=n(VIe,"A",{href:!0});var BLt=s(dY);K9r=r(BLt,"FlaxCLIPModel"),BLt.forEach(t),Z9r=r(VIe," (CLIP model)"),VIe.forEach(t),exr=i(ne),X5=n(ne,"LI",{});var XIe=s(X5);m4e=n(XIe,"STRONG",{});var ILt=s(m4e);oxr=r(ILt,"distilbert"),ILt.forEach(t),rxr=r(XIe," \u2014 "),cY=n(XIe,"A",{href:!0});var NLt=s(cY);txr=r(NLt,"FlaxDistilBertModel"),NLt.forEach(t),axr=r(XIe," (DistilBERT model)"),XIe.forEach(t),nxr=i(ne),z5=n(ne,"LI",{});var zIe=s(z5);g4e=n(zIe,"STRONG",{});var qLt=s(g4e);sxr=r(qLt,"electra"),qLt.forEach(t),lxr=r(zIe," \u2014 "),fY=n(zIe,"A",{href:!0});var jLt=s(fY);ixr=r(jLt,"FlaxElectraModel"),jLt.forEach(t),dxr=r(zIe," (ELECTRA model)"),zIe.forEach(t),cxr=i(ne),W5=n(ne,"LI",{});var WIe=s(W5);h4e=n(WIe,"STRONG",{});var DLt=s(h4e);fxr=r(DLt,"gpt2"),DLt.forEach(t),mxr=r(WIe," \u2014 "),mY=n(WIe,"A",{href:!0});var GLt=s(mY);gxr=r(GLt,"FlaxGPT2Model"),GLt.forEach(t),hxr=r(WIe," (OpenAI GPT-2 model)"),WIe.forEach(t),pxr=i(ne),Q5=n(ne,"LI",{});var QIe=s(Q5);p4e=n(QIe,"STRONG",{});var OLt=s(p4e);_xr=r(OLt,"gpt_neo"),OLt.forEach(t),uxr=r(QIe," \u2014 "),gY=n(QIe,"A",{href:!0});var VLt=s(gY);bxr=r(VLt,"FlaxGPTNeoModel"),VLt.forEach(t),vxr=r(QIe," (GPT Neo model)"),QIe.forEach(t),Fxr=i(ne),H5=n(ne,"LI",{});var HIe=s(H5);_4e=n(HIe,"STRONG",{});var XLt=s(_4e);Txr=r(XLt,"gptj"),XLt.forEach(t),Mxr=r(HIe," \u2014 "),hY=n(HIe,"A",{href:!0});var zLt=s(hY);Exr=r(zLt,"FlaxGPTJModel"),zLt.forEach(t),Cxr=r(HIe," (GPT-J model)"),HIe.forEach(t),wxr=i(ne),U5=n(ne,"LI",{});var UIe=s(U5);u4e=n(UIe,"STRONG",{});var WLt=s(u4e);Axr=r(WLt,"marian"),WLt.forEach(t),yxr=r(UIe," \u2014 "),pY=n(UIe,"A",{href:!0});var QLt=s(pY);Lxr=r(QLt,"FlaxMarianModel"),QLt.forEach(t),xxr=r(UIe," (Marian model)"),UIe.forEach(t),$xr=i(ne),J5=n(ne,"LI",{});var JIe=s(J5);b4e=n(JIe,"STRONG",{});var HLt=s(b4e);kxr=r(HLt,"mbart"),HLt.forEach(t),Sxr=r(JIe," \u2014 "),_Y=n(JIe,"A",{href:!0});var ULt=s(_Y);Rxr=r(ULt,"FlaxMBartModel"),ULt.forEach(t),Pxr=r(JIe," (mBART model)"),JIe.forEach(t),Bxr=i(ne),Y5=n(ne,"LI",{});var YIe=s(Y5);v4e=n(YIe,"STRONG",{});var JLt=s(v4e);Ixr=r(JLt,"mt5"),JLt.forEach(t),Nxr=r(YIe," \u2014 "),uY=n(YIe,"A",{href:!0});var YLt=s(uY);qxr=r(YLt,"FlaxMT5Model"),YLt.forEach(t),jxr=r(YIe," (MT5 model)"),YIe.forEach(t),Dxr=i(ne),K5=n(ne,"LI",{});var KIe=s(K5);F4e=n(KIe,"STRONG",{});var KLt=s(F4e);Gxr=r(KLt,"opt"),KLt.forEach(t),Oxr=r(KIe," \u2014 "),bY=n(KIe,"A",{href:!0});var ZLt=s(bY);Vxr=r(ZLt,"FlaxOPTModel"),ZLt.forEach(t),Xxr=r(KIe," (OPT model)"),KIe.forEach(t),zxr=i(ne),Z5=n(ne,"LI",{});var ZIe=s(Z5);T4e=n(ZIe,"STRONG",{});var e8t=s(T4e);Wxr=r(e8t,"pegasus"),e8t.forEach(t),Qxr=r(ZIe," \u2014 "),vY=n(ZIe,"A",{href:!0});var o8t=s(vY);Hxr=r(o8t,"FlaxPegasusModel"),o8t.forEach(t),Uxr=r(ZIe," (Pegasus model)"),ZIe.forEach(t),Jxr=i(ne),e3=n(ne,"LI",{});var eNe=s(e3);M4e=n(eNe,"STRONG",{});var r8t=s(M4e);Yxr=r(r8t,"roberta"),r8t.forEach(t),Kxr=r(eNe," \u2014 "),FY=n(eNe,"A",{href:!0});var t8t=s(FY);Zxr=r(t8t,"FlaxRobertaModel"),t8t.forEach(t),e$r=r(eNe," (RoBERTa model)"),eNe.forEach(t),o$r=i(ne),o3=n(ne,"LI",{});var oNe=s(o3);E4e=n(oNe,"STRONG",{});var a8t=s(E4e);r$r=r(a8t,"roformer"),a8t.forEach(t),t$r=r(oNe," \u2014 "),TY=n(oNe,"A",{href:!0});var n8t=s(TY);a$r=r(n8t,"FlaxRoFormerModel"),n8t.forEach(t),n$r=r(oNe," (RoFormer model)"),oNe.forEach(t),s$r=i(ne),r3=n(ne,"LI",{});var rNe=s(r3);C4e=n(rNe,"STRONG",{});var s8t=s(C4e);l$r=r(s8t,"t5"),s8t.forEach(t),i$r=r(rNe," \u2014 "),MY=n(rNe,"A",{href:!0});var l8t=s(MY);d$r=r(l8t,"FlaxT5Model"),l8t.forEach(t),c$r=r(rNe," (T5 model)"),rNe.forEach(t),f$r=i(ne),t3=n(ne,"LI",{});var tNe=s(t3);w4e=n(tNe,"STRONG",{});var i8t=s(w4e);m$r=r(i8t,"vision-text-dual-encoder"),i8t.forEach(t),g$r=r(tNe," \u2014 "),EY=n(tNe,"A",{href:!0});var d8t=s(EY);h$r=r(d8t,"FlaxVisionTextDualEncoderModel"),d8t.forEach(t),p$r=r(tNe," (VisionTextDualEncoder model)"),tNe.forEach(t),_$r=i(ne),a3=n(ne,"LI",{});var aNe=s(a3);A4e=n(aNe,"STRONG",{});var c8t=s(A4e);u$r=r(c8t,"vit"),c8t.forEach(t),b$r=r(aNe," \u2014 "),CY=n(aNe,"A",{href:!0});var f8t=s(CY);v$r=r(f8t,"FlaxViTModel"),f8t.forEach(t),F$r=r(aNe," (ViT model)"),aNe.forEach(t),T$r=i(ne),n3=n(ne,"LI",{});var nNe=s(n3);y4e=n(nNe,"STRONG",{});var m8t=s(y4e);M$r=r(m8t,"wav2vec2"),m8t.forEach(t),E$r=r(nNe," \u2014 "),wY=n(nNe,"A",{href:!0});var g8t=s(wY);C$r=r(g8t,"FlaxWav2Vec2Model"),g8t.forEach(t),w$r=r(nNe," (Wav2Vec2 model)"),nNe.forEach(t),A$r=i(ne),s3=n(ne,"LI",{});var sNe=s(s3);L4e=n(sNe,"STRONG",{});var h8t=s(L4e);y$r=r(h8t,"xglm"),h8t.forEach(t),L$r=r(sNe," \u2014 "),AY=n(sNe,"A",{href:!0});var p8t=s(AY);x$r=r(p8t,"FlaxXGLMModel"),p8t.forEach(t),$$r=r(sNe," (XGLM model)"),sNe.forEach(t),k$r=i(ne),l3=n(ne,"LI",{});var lNe=s(l3);x4e=n(lNe,"STRONG",{});var _8t=s(x4e);S$r=r(_8t,"xlm-roberta"),_8t.forEach(t),R$r=r(lNe," \u2014 "),yY=n(lNe,"A",{href:!0});var u8t=s(yY);P$r=r(u8t,"FlaxXLMRobertaModel"),u8t.forEach(t),B$r=r(lNe," (XLM-RoBERTa model)"),lNe.forEach(t),ne.forEach(t),I$r=i(Vl),T(i3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),_De=i(f),Rc=n(f,"H2",{class:!0});var EOe=s(Rc);d3=n(EOe,"A",{id:!0,class:!0,href:!0});var b8t=s(d3);$4e=n(b8t,"SPAN",{});var v8t=s($4e);T(j9.$$.fragment,v8t),v8t.forEach(t),b8t.forEach(t),N$r=i(EOe),k4e=n(EOe,"SPAN",{});var F8t=s(k4e);q$r=r(F8t,"FlaxAutoModelForCausalLM"),F8t.forEach(t),EOe.forEach(t),uDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(D9.$$.fragment,Xl),j$r=i(Xl),Pc=n(Xl,"P",{});var aoe=s(Pc);D$r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LY=n(aoe,"A",{href:!0});var T8t=s(LY);G$r=r(T8t,"from_pretrained()"),T8t.forEach(t),O$r=r(aoe," class method or the "),xY=n(aoe,"A",{href:!0});var M8t=s(xY);V$r=r(M8t,"from_config()"),M8t.forEach(t),X$r=r(aoe,` class
method.`),aoe.forEach(t),z$r=i(Xl),G9=n(Xl,"P",{});var COe=s(G9);W$r=r(COe,"This class cannot be instantiated directly using "),S4e=n(COe,"CODE",{});var E8t=s(S4e);Q$r=r(E8t,"__init__()"),E8t.forEach(t),H$r=r(COe," (throws an error)."),COe.forEach(t),U$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var cy=s(Ot);T(O9.$$.fragment,cy),J$r=i(cy),R4e=n(cy,"P",{});var C8t=s(R4e);Y$r=r(C8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C8t.forEach(t),K$r=i(cy),Bc=n(cy,"P",{});var noe=s(Bc);Z$r=r(noe,`Note:
Loading a model from its configuration file does `),P4e=n(noe,"STRONG",{});var w8t=s(P4e);ekr=r(w8t,"not"),w8t.forEach(t),okr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(noe,"A",{href:!0});var A8t=s($Y);rkr=r(A8t,"from_pretrained()"),A8t.forEach(t),tkr=r(noe," to load the model weights."),noe.forEach(t),akr=i(cy),T(c3.$$.fragment,cy),cy.forEach(t),nkr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(V9.$$.fragment,zl),skr=i(zl),B4e=n(zl,"P",{});var y8t=s(B4e);lkr=r(y8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y8t.forEach(t),ikr=i(zl),pn=n(zl,"P",{});var fy=s(pn);dkr=r(fy,"The model class to instantiate is selected based on the "),I4e=n(fy,"CODE",{});var L8t=s(I4e);ckr=r(L8t,"model_type"),L8t.forEach(t),fkr=r(fy,` property of the config object (either
passed as an argument or loaded from `),N4e=n(fy,"CODE",{});var x8t=s(N4e);mkr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),gkr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(fy,"CODE",{});var $8t=s(q4e);hkr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),pkr=r(fy,":"),fy.forEach(t),_kr=i(zl),Le=n(zl,"UL",{});var Ie=s(Le);f3=n(Ie,"LI",{});var iNe=s(f3);j4e=n(iNe,"STRONG",{});var k8t=s(j4e);ukr=r(k8t,"bart"),k8t.forEach(t),bkr=r(iNe," \u2014 "),kY=n(iNe,"A",{href:!0});var S8t=s(kY);vkr=r(S8t,"FlaxBartForCausalLM"),S8t.forEach(t),Fkr=r(iNe," (BART model)"),iNe.forEach(t),Tkr=i(Ie),m3=n(Ie,"LI",{});var dNe=s(m3);D4e=n(dNe,"STRONG",{});var R8t=s(D4e);Mkr=r(R8t,"bert"),R8t.forEach(t),Ekr=r(dNe," \u2014 "),SY=n(dNe,"A",{href:!0});var P8t=s(SY);Ckr=r(P8t,"FlaxBertForCausalLM"),P8t.forEach(t),wkr=r(dNe," (BERT model)"),dNe.forEach(t),Akr=i(Ie),g3=n(Ie,"LI",{});var cNe=s(g3);G4e=n(cNe,"STRONG",{});var B8t=s(G4e);ykr=r(B8t,"big_bird"),B8t.forEach(t),Lkr=r(cNe," \u2014 "),RY=n(cNe,"A",{href:!0});var I8t=s(RY);xkr=r(I8t,"FlaxBigBirdForCausalLM"),I8t.forEach(t),$kr=r(cNe," (BigBird model)"),cNe.forEach(t),kkr=i(Ie),h3=n(Ie,"LI",{});var fNe=s(h3);O4e=n(fNe,"STRONG",{});var N8t=s(O4e);Skr=r(N8t,"electra"),N8t.forEach(t),Rkr=r(fNe," \u2014 "),PY=n(fNe,"A",{href:!0});var q8t=s(PY);Pkr=r(q8t,"FlaxElectraForCausalLM"),q8t.forEach(t),Bkr=r(fNe," (ELECTRA model)"),fNe.forEach(t),Ikr=i(Ie),p3=n(Ie,"LI",{});var mNe=s(p3);V4e=n(mNe,"STRONG",{});var j8t=s(V4e);Nkr=r(j8t,"gpt2"),j8t.forEach(t),qkr=r(mNe," \u2014 "),BY=n(mNe,"A",{href:!0});var D8t=s(BY);jkr=r(D8t,"FlaxGPT2LMHeadModel"),D8t.forEach(t),Dkr=r(mNe," (OpenAI GPT-2 model)"),mNe.forEach(t),Gkr=i(Ie),_3=n(Ie,"LI",{});var gNe=s(_3);X4e=n(gNe,"STRONG",{});var G8t=s(X4e);Okr=r(G8t,"gpt_neo"),G8t.forEach(t),Vkr=r(gNe," \u2014 "),IY=n(gNe,"A",{href:!0});var O8t=s(IY);Xkr=r(O8t,"FlaxGPTNeoForCausalLM"),O8t.forEach(t),zkr=r(gNe," (GPT Neo model)"),gNe.forEach(t),Wkr=i(Ie),u3=n(Ie,"LI",{});var hNe=s(u3);z4e=n(hNe,"STRONG",{});var V8t=s(z4e);Qkr=r(V8t,"gptj"),V8t.forEach(t),Hkr=r(hNe," \u2014 "),NY=n(hNe,"A",{href:!0});var X8t=s(NY);Ukr=r(X8t,"FlaxGPTJForCausalLM"),X8t.forEach(t),Jkr=r(hNe," (GPT-J model)"),hNe.forEach(t),Ykr=i(Ie),b3=n(Ie,"LI",{});var pNe=s(b3);W4e=n(pNe,"STRONG",{});var z8t=s(W4e);Kkr=r(z8t,"opt"),z8t.forEach(t),Zkr=r(pNe," \u2014 "),qY=n(pNe,"A",{href:!0});var W8t=s(qY);eSr=r(W8t,"FlaxOPTForCausalLM"),W8t.forEach(t),oSr=r(pNe," (OPT model)"),pNe.forEach(t),rSr=i(Ie),v3=n(Ie,"LI",{});var _Ne=s(v3);Q4e=n(_Ne,"STRONG",{});var Q8t=s(Q4e);tSr=r(Q8t,"roberta"),Q8t.forEach(t),aSr=r(_Ne," \u2014 "),jY=n(_Ne,"A",{href:!0});var H8t=s(jY);nSr=r(H8t,"FlaxRobertaForCausalLM"),H8t.forEach(t),sSr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),lSr=i(Ie),F3=n(Ie,"LI",{});var uNe=s(F3);H4e=n(uNe,"STRONG",{});var U8t=s(H4e);iSr=r(U8t,"xglm"),U8t.forEach(t),dSr=r(uNe," \u2014 "),DY=n(uNe,"A",{href:!0});var J8t=s(DY);cSr=r(J8t,"FlaxXGLMForCausalLM"),J8t.forEach(t),fSr=r(uNe," (XGLM model)"),uNe.forEach(t),Ie.forEach(t),mSr=i(zl),T(T3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),bDe=i(f),Ic=n(f,"H2",{class:!0});var wOe=s(Ic);M3=n(wOe,"A",{id:!0,class:!0,href:!0});var Y8t=s(M3);U4e=n(Y8t,"SPAN",{});var K8t=s(U4e);T(X9.$$.fragment,K8t),K8t.forEach(t),Y8t.forEach(t),gSr=i(wOe),J4e=n(wOe,"SPAN",{});var Z8t=s(J4e);hSr=r(Z8t,"FlaxAutoModelForPreTraining"),Z8t.forEach(t),wOe.forEach(t),vDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(z9.$$.fragment,Wl),pSr=i(Wl),Nc=n(Wl,"P",{});var soe=s(Nc);_Sr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=n(soe,"A",{href:!0});var e7t=s(GY);uSr=r(e7t,"from_pretrained()"),e7t.forEach(t),bSr=r(soe," class method or the "),OY=n(soe,"A",{href:!0});var o7t=s(OY);vSr=r(o7t,"from_config()"),o7t.forEach(t),FSr=r(soe,` class
method.`),soe.forEach(t),TSr=i(Wl),W9=n(Wl,"P",{});var AOe=s(W9);MSr=r(AOe,"This class cannot be instantiated directly using "),Y4e=n(AOe,"CODE",{});var r7t=s(Y4e);ESr=r(r7t,"__init__()"),r7t.forEach(t),CSr=r(AOe," (throws an error)."),AOe.forEach(t),wSr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var my=s(Vt);T(Q9.$$.fragment,my),ASr=i(my),K4e=n(my,"P",{});var t7t=s(K4e);ySr=r(t7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t7t.forEach(t),LSr=i(my),qc=n(my,"P",{});var loe=s(qc);xSr=r(loe,`Note:
Loading a model from its configuration file does `),Z4e=n(loe,"STRONG",{});var a7t=s(Z4e);$Sr=r(a7t,"not"),a7t.forEach(t),kSr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(loe,"A",{href:!0});var n7t=s(VY);SSr=r(n7t,"from_pretrained()"),n7t.forEach(t),RSr=r(loe," to load the model weights."),loe.forEach(t),PSr=i(my),T(E3.$$.fragment,my),my.forEach(t),BSr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(H9.$$.fragment,Ql),ISr=i(Ql),eEe=n(Ql,"P",{});var s7t=s(eEe);NSr=r(s7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s7t.forEach(t),qSr=i(Ql),_n=n(Ql,"P",{});var gy=s(_n);jSr=r(gy,"The model class to instantiate is selected based on the "),oEe=n(gy,"CODE",{});var l7t=s(oEe);DSr=r(l7t,"model_type"),l7t.forEach(t),GSr=r(gy,` property of the config object (either
passed as an argument or loaded from `),rEe=n(gy,"CODE",{});var i7t=s(rEe);OSr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),VSr=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(gy,"CODE",{});var d7t=s(tEe);XSr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),zSr=r(gy,":"),gy.forEach(t),WSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);C3=n(we,"LI",{});var bNe=s(C3);aEe=n(bNe,"STRONG",{});var c7t=s(aEe);QSr=r(c7t,"albert"),c7t.forEach(t),HSr=r(bNe," \u2014 "),XY=n(bNe,"A",{href:!0});var f7t=s(XY);USr=r(f7t,"FlaxAlbertForPreTraining"),f7t.forEach(t),JSr=r(bNe," (ALBERT model)"),bNe.forEach(t),YSr=i(we),w3=n(we,"LI",{});var vNe=s(w3);nEe=n(vNe,"STRONG",{});var m7t=s(nEe);KSr=r(m7t,"bart"),m7t.forEach(t),ZSr=r(vNe," \u2014 "),zY=n(vNe,"A",{href:!0});var g7t=s(zY);eRr=r(g7t,"FlaxBartForConditionalGeneration"),g7t.forEach(t),oRr=r(vNe," (BART model)"),vNe.forEach(t),rRr=i(we),A3=n(we,"LI",{});var FNe=s(A3);sEe=n(FNe,"STRONG",{});var h7t=s(sEe);tRr=r(h7t,"bert"),h7t.forEach(t),aRr=r(FNe," \u2014 "),WY=n(FNe,"A",{href:!0});var p7t=s(WY);nRr=r(p7t,"FlaxBertForPreTraining"),p7t.forEach(t),sRr=r(FNe," (BERT model)"),FNe.forEach(t),lRr=i(we),y3=n(we,"LI",{});var TNe=s(y3);lEe=n(TNe,"STRONG",{});var _7t=s(lEe);iRr=r(_7t,"big_bird"),_7t.forEach(t),dRr=r(TNe," \u2014 "),QY=n(TNe,"A",{href:!0});var u7t=s(QY);cRr=r(u7t,"FlaxBigBirdForPreTraining"),u7t.forEach(t),fRr=r(TNe," (BigBird model)"),TNe.forEach(t),mRr=i(we),L3=n(we,"LI",{});var MNe=s(L3);iEe=n(MNe,"STRONG",{});var b7t=s(iEe);gRr=r(b7t,"electra"),b7t.forEach(t),hRr=r(MNe," \u2014 "),HY=n(MNe,"A",{href:!0});var v7t=s(HY);pRr=r(v7t,"FlaxElectraForPreTraining"),v7t.forEach(t),_Rr=r(MNe," (ELECTRA model)"),MNe.forEach(t),uRr=i(we),x3=n(we,"LI",{});var ENe=s(x3);dEe=n(ENe,"STRONG",{});var F7t=s(dEe);bRr=r(F7t,"mbart"),F7t.forEach(t),vRr=r(ENe," \u2014 "),UY=n(ENe,"A",{href:!0});var T7t=s(UY);FRr=r(T7t,"FlaxMBartForConditionalGeneration"),T7t.forEach(t),TRr=r(ENe," (mBART model)"),ENe.forEach(t),MRr=i(we),$3=n(we,"LI",{});var CNe=s($3);cEe=n(CNe,"STRONG",{});var M7t=s(cEe);ERr=r(M7t,"mt5"),M7t.forEach(t),CRr=r(CNe," \u2014 "),JY=n(CNe,"A",{href:!0});var E7t=s(JY);wRr=r(E7t,"FlaxMT5ForConditionalGeneration"),E7t.forEach(t),ARr=r(CNe," (MT5 model)"),CNe.forEach(t),yRr=i(we),k3=n(we,"LI",{});var wNe=s(k3);fEe=n(wNe,"STRONG",{});var C7t=s(fEe);LRr=r(C7t,"roberta"),C7t.forEach(t),xRr=r(wNe," \u2014 "),YY=n(wNe,"A",{href:!0});var w7t=s(YY);$Rr=r(w7t,"FlaxRobertaForMaskedLM"),w7t.forEach(t),kRr=r(wNe," (RoBERTa model)"),wNe.forEach(t),SRr=i(we),S3=n(we,"LI",{});var ANe=s(S3);mEe=n(ANe,"STRONG",{});var A7t=s(mEe);RRr=r(A7t,"roformer"),A7t.forEach(t),PRr=r(ANe," \u2014 "),KY=n(ANe,"A",{href:!0});var y7t=s(KY);BRr=r(y7t,"FlaxRoFormerForMaskedLM"),y7t.forEach(t),IRr=r(ANe," (RoFormer model)"),ANe.forEach(t),NRr=i(we),R3=n(we,"LI",{});var yNe=s(R3);gEe=n(yNe,"STRONG",{});var L7t=s(gEe);qRr=r(L7t,"t5"),L7t.forEach(t),jRr=r(yNe," \u2014 "),ZY=n(yNe,"A",{href:!0});var x7t=s(ZY);DRr=r(x7t,"FlaxT5ForConditionalGeneration"),x7t.forEach(t),GRr=r(yNe," (T5 model)"),yNe.forEach(t),ORr=i(we),P3=n(we,"LI",{});var LNe=s(P3);hEe=n(LNe,"STRONG",{});var $7t=s(hEe);VRr=r($7t,"wav2vec2"),$7t.forEach(t),XRr=r(LNe," \u2014 "),eK=n(LNe,"A",{href:!0});var k7t=s(eK);zRr=r(k7t,"FlaxWav2Vec2ForPreTraining"),k7t.forEach(t),WRr=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),QRr=i(we),B3=n(we,"LI",{});var xNe=s(B3);pEe=n(xNe,"STRONG",{});var S7t=s(pEe);HRr=r(S7t,"xlm-roberta"),S7t.forEach(t),URr=r(xNe," \u2014 "),oK=n(xNe,"A",{href:!0});var R7t=s(oK);JRr=r(R7t,"FlaxXLMRobertaForMaskedLM"),R7t.forEach(t),YRr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),we.forEach(t),KRr=i(Ql),T(I3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),FDe=i(f),jc=n(f,"H2",{class:!0});var yOe=s(jc);N3=n(yOe,"A",{id:!0,class:!0,href:!0});var P7t=s(N3);_Ee=n(P7t,"SPAN",{});var B7t=s(_Ee);T(U9.$$.fragment,B7t),B7t.forEach(t),P7t.forEach(t),ZRr=i(yOe),uEe=n(yOe,"SPAN",{});var I7t=s(uEe);ePr=r(I7t,"FlaxAutoModelForMaskedLM"),I7t.forEach(t),yOe.forEach(t),TDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(J9.$$.fragment,Hl),oPr=i(Hl),Dc=n(Hl,"P",{});var ioe=s(Dc);rPr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rK=n(ioe,"A",{href:!0});var N7t=s(rK);tPr=r(N7t,"from_pretrained()"),N7t.forEach(t),aPr=r(ioe," class method or the "),tK=n(ioe,"A",{href:!0});var q7t=s(tK);nPr=r(q7t,"from_config()"),q7t.forEach(t),sPr=r(ioe,` class
method.`),ioe.forEach(t),lPr=i(Hl),Y9=n(Hl,"P",{});var LOe=s(Y9);iPr=r(LOe,"This class cannot be instantiated directly using "),bEe=n(LOe,"CODE",{});var j7t=s(bEe);dPr=r(j7t,"__init__()"),j7t.forEach(t),cPr=r(LOe," (throws an error)."),LOe.forEach(t),fPr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var hy=s(Xt);T(K9.$$.fragment,hy),mPr=i(hy),vEe=n(hy,"P",{});var D7t=s(vEe);gPr=r(D7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D7t.forEach(t),hPr=i(hy),Gc=n(hy,"P",{});var doe=s(Gc);pPr=r(doe,`Note:
Loading a model from its configuration file does `),FEe=n(doe,"STRONG",{});var G7t=s(FEe);_Pr=r(G7t,"not"),G7t.forEach(t),uPr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(doe,"A",{href:!0});var O7t=s(aK);bPr=r(O7t,"from_pretrained()"),O7t.forEach(t),vPr=r(doe," to load the model weights."),doe.forEach(t),FPr=i(hy),T(q3.$$.fragment,hy),hy.forEach(t),TPr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(Z9.$$.fragment,Ul),MPr=i(Ul),TEe=n(Ul,"P",{});var V7t=s(TEe);EPr=r(V7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V7t.forEach(t),CPr=i(Ul),un=n(Ul,"P",{});var py=s(un);wPr=r(py,"The model class to instantiate is selected based on the "),MEe=n(py,"CODE",{});var X7t=s(MEe);APr=r(X7t,"model_type"),X7t.forEach(t),yPr=r(py,` property of the config object (either
passed as an argument or loaded from `),EEe=n(py,"CODE",{});var z7t=s(EEe);LPr=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),xPr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(py,"CODE",{});var W7t=s(CEe);$Pr=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),kPr=r(py,":"),py.forEach(t),SPr=i(Ul),xe=n(Ul,"UL",{});var Ne=s(xe);j3=n(Ne,"LI",{});var $Ne=s(j3);wEe=n($Ne,"STRONG",{});var Q7t=s(wEe);RPr=r(Q7t,"albert"),Q7t.forEach(t),PPr=r($Ne," \u2014 "),nK=n($Ne,"A",{href:!0});var H7t=s(nK);BPr=r(H7t,"FlaxAlbertForMaskedLM"),H7t.forEach(t),IPr=r($Ne," (ALBERT model)"),$Ne.forEach(t),NPr=i(Ne),D3=n(Ne,"LI",{});var kNe=s(D3);AEe=n(kNe,"STRONG",{});var U7t=s(AEe);qPr=r(U7t,"bart"),U7t.forEach(t),jPr=r(kNe," \u2014 "),sK=n(kNe,"A",{href:!0});var J7t=s(sK);DPr=r(J7t,"FlaxBartForConditionalGeneration"),J7t.forEach(t),GPr=r(kNe," (BART model)"),kNe.forEach(t),OPr=i(Ne),G3=n(Ne,"LI",{});var SNe=s(G3);yEe=n(SNe,"STRONG",{});var Y7t=s(yEe);VPr=r(Y7t,"bert"),Y7t.forEach(t),XPr=r(SNe," \u2014 "),lK=n(SNe,"A",{href:!0});var K7t=s(lK);zPr=r(K7t,"FlaxBertForMaskedLM"),K7t.forEach(t),WPr=r(SNe," (BERT model)"),SNe.forEach(t),QPr=i(Ne),O3=n(Ne,"LI",{});var RNe=s(O3);LEe=n(RNe,"STRONG",{});var Z7t=s(LEe);HPr=r(Z7t,"big_bird"),Z7t.forEach(t),UPr=r(RNe," \u2014 "),iK=n(RNe,"A",{href:!0});var e9t=s(iK);JPr=r(e9t,"FlaxBigBirdForMaskedLM"),e9t.forEach(t),YPr=r(RNe," (BigBird model)"),RNe.forEach(t),KPr=i(Ne),V3=n(Ne,"LI",{});var PNe=s(V3);xEe=n(PNe,"STRONG",{});var o9t=s(xEe);ZPr=r(o9t,"distilbert"),o9t.forEach(t),eBr=r(PNe," \u2014 "),dK=n(PNe,"A",{href:!0});var r9t=s(dK);oBr=r(r9t,"FlaxDistilBertForMaskedLM"),r9t.forEach(t),rBr=r(PNe," (DistilBERT model)"),PNe.forEach(t),tBr=i(Ne),X3=n(Ne,"LI",{});var BNe=s(X3);$Ee=n(BNe,"STRONG",{});var t9t=s($Ee);aBr=r(t9t,"electra"),t9t.forEach(t),nBr=r(BNe," \u2014 "),cK=n(BNe,"A",{href:!0});var a9t=s(cK);sBr=r(a9t,"FlaxElectraForMaskedLM"),a9t.forEach(t),lBr=r(BNe," (ELECTRA model)"),BNe.forEach(t),iBr=i(Ne),z3=n(Ne,"LI",{});var INe=s(z3);kEe=n(INe,"STRONG",{});var n9t=s(kEe);dBr=r(n9t,"mbart"),n9t.forEach(t),cBr=r(INe," \u2014 "),fK=n(INe,"A",{href:!0});var s9t=s(fK);fBr=r(s9t,"FlaxMBartForConditionalGeneration"),s9t.forEach(t),mBr=r(INe," (mBART model)"),INe.forEach(t),gBr=i(Ne),W3=n(Ne,"LI",{});var NNe=s(W3);SEe=n(NNe,"STRONG",{});var l9t=s(SEe);hBr=r(l9t,"roberta"),l9t.forEach(t),pBr=r(NNe," \u2014 "),mK=n(NNe,"A",{href:!0});var i9t=s(mK);_Br=r(i9t,"FlaxRobertaForMaskedLM"),i9t.forEach(t),uBr=r(NNe," (RoBERTa model)"),NNe.forEach(t),bBr=i(Ne),Q3=n(Ne,"LI",{});var qNe=s(Q3);REe=n(qNe,"STRONG",{});var d9t=s(REe);vBr=r(d9t,"roformer"),d9t.forEach(t),FBr=r(qNe," \u2014 "),gK=n(qNe,"A",{href:!0});var c9t=s(gK);TBr=r(c9t,"FlaxRoFormerForMaskedLM"),c9t.forEach(t),MBr=r(qNe," (RoFormer model)"),qNe.forEach(t),EBr=i(Ne),H3=n(Ne,"LI",{});var jNe=s(H3);PEe=n(jNe,"STRONG",{});var f9t=s(PEe);CBr=r(f9t,"xlm-roberta"),f9t.forEach(t),wBr=r(jNe," \u2014 "),hK=n(jNe,"A",{href:!0});var m9t=s(hK);ABr=r(m9t,"FlaxXLMRobertaForMaskedLM"),m9t.forEach(t),yBr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),Ne.forEach(t),LBr=i(Ul),T(U3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),MDe=i(f),Oc=n(f,"H2",{class:!0});var xOe=s(Oc);J3=n(xOe,"A",{id:!0,class:!0,href:!0});var g9t=s(J3);BEe=n(g9t,"SPAN",{});var h9t=s(BEe);T(ex.$$.fragment,h9t),h9t.forEach(t),g9t.forEach(t),xBr=i(xOe),IEe=n(xOe,"SPAN",{});var p9t=s(IEe);$Br=r(p9t,"FlaxAutoModelForSeq2SeqLM"),p9t.forEach(t),xOe.forEach(t),EDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(ox.$$.fragment,Jl),kBr=i(Jl),Vc=n(Jl,"P",{});var coe=s(Vc);SBr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=n(coe,"A",{href:!0});var _9t=s(pK);RBr=r(_9t,"from_pretrained()"),_9t.forEach(t),PBr=r(coe," class method or the "),_K=n(coe,"A",{href:!0});var u9t=s(_K);BBr=r(u9t,"from_config()"),u9t.forEach(t),IBr=r(coe,` class
method.`),coe.forEach(t),NBr=i(Jl),rx=n(Jl,"P",{});var $Oe=s(rx);qBr=r($Oe,"This class cannot be instantiated directly using "),NEe=n($Oe,"CODE",{});var b9t=s(NEe);jBr=r(b9t,"__init__()"),b9t.forEach(t),DBr=r($Oe," (throws an error)."),$Oe.forEach(t),GBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var _y=s(zt);T(tx.$$.fragment,_y),OBr=i(_y),qEe=n(_y,"P",{});var v9t=s(qEe);VBr=r(v9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v9t.forEach(t),XBr=i(_y),Xc=n(_y,"P",{});var foe=s(Xc);zBr=r(foe,`Note:
Loading a model from its configuration file does `),jEe=n(foe,"STRONG",{});var F9t=s(jEe);WBr=r(F9t,"not"),F9t.forEach(t),QBr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(foe,"A",{href:!0});var T9t=s(uK);HBr=r(T9t,"from_pretrained()"),T9t.forEach(t),UBr=r(foe," to load the model weights."),foe.forEach(t),JBr=i(_y),T(Y3.$$.fragment,_y),_y.forEach(t),YBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ax.$$.fragment,Yl),KBr=i(Yl),DEe=n(Yl,"P",{});var M9t=s(DEe);ZBr=r(M9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M9t.forEach(t),eIr=i(Yl),bn=n(Yl,"P",{});var uy=s(bn);oIr=r(uy,"The model class to instantiate is selected based on the "),GEe=n(uy,"CODE",{});var E9t=s(GEe);rIr=r(E9t,"model_type"),E9t.forEach(t),tIr=r(uy,` property of the config object (either
passed as an argument or loaded from `),OEe=n(uy,"CODE",{});var C9t=s(OEe);aIr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),nIr=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(uy,"CODE",{});var w9t=s(VEe);sIr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),lIr=r(uy,":"),uy.forEach(t),iIr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);K3=n(ze,"LI",{});var DNe=s(K3);XEe=n(DNe,"STRONG",{});var A9t=s(XEe);dIr=r(A9t,"bart"),A9t.forEach(t),cIr=r(DNe," \u2014 "),bK=n(DNe,"A",{href:!0});var y9t=s(bK);fIr=r(y9t,"FlaxBartForConditionalGeneration"),y9t.forEach(t),mIr=r(DNe," (BART model)"),DNe.forEach(t),gIr=i(ze),Z3=n(ze,"LI",{});var GNe=s(Z3);zEe=n(GNe,"STRONG",{});var L9t=s(zEe);hIr=r(L9t,"blenderbot"),L9t.forEach(t),pIr=r(GNe," \u2014 "),vK=n(GNe,"A",{href:!0});var x9t=s(vK);_Ir=r(x9t,"FlaxBlenderbotForConditionalGeneration"),x9t.forEach(t),uIr=r(GNe," (Blenderbot model)"),GNe.forEach(t),bIr=i(ze),e0=n(ze,"LI",{});var ONe=s(e0);WEe=n(ONe,"STRONG",{});var $9t=s(WEe);vIr=r($9t,"blenderbot-small"),$9t.forEach(t),FIr=r(ONe," \u2014 "),FK=n(ONe,"A",{href:!0});var k9t=s(FK);TIr=r(k9t,"FlaxBlenderbotSmallForConditionalGeneration"),k9t.forEach(t),MIr=r(ONe," (BlenderbotSmall model)"),ONe.forEach(t),EIr=i(ze),o0=n(ze,"LI",{});var VNe=s(o0);QEe=n(VNe,"STRONG",{});var S9t=s(QEe);CIr=r(S9t,"encoder-decoder"),S9t.forEach(t),wIr=r(VNe," \u2014 "),TK=n(VNe,"A",{href:!0});var R9t=s(TK);AIr=r(R9t,"FlaxEncoderDecoderModel"),R9t.forEach(t),yIr=r(VNe," (Encoder decoder model)"),VNe.forEach(t),LIr=i(ze),r0=n(ze,"LI",{});var XNe=s(r0);HEe=n(XNe,"STRONG",{});var P9t=s(HEe);xIr=r(P9t,"marian"),P9t.forEach(t),$Ir=r(XNe," \u2014 "),MK=n(XNe,"A",{href:!0});var B9t=s(MK);kIr=r(B9t,"FlaxMarianMTModel"),B9t.forEach(t),SIr=r(XNe," (Marian model)"),XNe.forEach(t),RIr=i(ze),t0=n(ze,"LI",{});var zNe=s(t0);UEe=n(zNe,"STRONG",{});var I9t=s(UEe);PIr=r(I9t,"mbart"),I9t.forEach(t),BIr=r(zNe," \u2014 "),EK=n(zNe,"A",{href:!0});var N9t=s(EK);IIr=r(N9t,"FlaxMBartForConditionalGeneration"),N9t.forEach(t),NIr=r(zNe," (mBART model)"),zNe.forEach(t),qIr=i(ze),a0=n(ze,"LI",{});var WNe=s(a0);JEe=n(WNe,"STRONG",{});var q9t=s(JEe);jIr=r(q9t,"mt5"),q9t.forEach(t),DIr=r(WNe," \u2014 "),CK=n(WNe,"A",{href:!0});var j9t=s(CK);GIr=r(j9t,"FlaxMT5ForConditionalGeneration"),j9t.forEach(t),OIr=r(WNe," (MT5 model)"),WNe.forEach(t),VIr=i(ze),n0=n(ze,"LI",{});var QNe=s(n0);YEe=n(QNe,"STRONG",{});var D9t=s(YEe);XIr=r(D9t,"pegasus"),D9t.forEach(t),zIr=r(QNe," \u2014 "),wK=n(QNe,"A",{href:!0});var G9t=s(wK);WIr=r(G9t,"FlaxPegasusForConditionalGeneration"),G9t.forEach(t),QIr=r(QNe," (Pegasus model)"),QNe.forEach(t),HIr=i(ze),s0=n(ze,"LI",{});var HNe=s(s0);KEe=n(HNe,"STRONG",{});var O9t=s(KEe);UIr=r(O9t,"t5"),O9t.forEach(t),JIr=r(HNe," \u2014 "),AK=n(HNe,"A",{href:!0});var V9t=s(AK);YIr=r(V9t,"FlaxT5ForConditionalGeneration"),V9t.forEach(t),KIr=r(HNe," (T5 model)"),HNe.forEach(t),ze.forEach(t),ZIr=i(Yl),T(l0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),CDe=i(f),zc=n(f,"H2",{class:!0});var kOe=s(zc);i0=n(kOe,"A",{id:!0,class:!0,href:!0});var X9t=s(i0);ZEe=n(X9t,"SPAN",{});var z9t=s(ZEe);T(nx.$$.fragment,z9t),z9t.forEach(t),X9t.forEach(t),eNr=i(kOe),eCe=n(kOe,"SPAN",{});var W9t=s(eCe);oNr=r(W9t,"FlaxAutoModelForSequenceClassification"),W9t.forEach(t),kOe.forEach(t),wDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(sx.$$.fragment,Kl),rNr=i(Kl),Wc=n(Kl,"P",{});var moe=s(Wc);tNr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=n(moe,"A",{href:!0});var Q9t=s(yK);aNr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),nNr=r(moe," class method or the "),LK=n(moe,"A",{href:!0});var H9t=s(LK);sNr=r(H9t,"from_config()"),H9t.forEach(t),lNr=r(moe,` class
method.`),moe.forEach(t),iNr=i(Kl),lx=n(Kl,"P",{});var SOe=s(lx);dNr=r(SOe,"This class cannot be instantiated directly using "),oCe=n(SOe,"CODE",{});var U9t=s(oCe);cNr=r(U9t,"__init__()"),U9t.forEach(t),fNr=r(SOe," (throws an error)."),SOe.forEach(t),mNr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var by=s(Wt);T(ix.$$.fragment,by),gNr=i(by),rCe=n(by,"P",{});var J9t=s(rCe);hNr=r(J9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),J9t.forEach(t),pNr=i(by),Qc=n(by,"P",{});var goe=s(Qc);_Nr=r(goe,`Note:
Loading a model from its configuration file does `),tCe=n(goe,"STRONG",{});var Y9t=s(tCe);uNr=r(Y9t,"not"),Y9t.forEach(t),bNr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(goe,"A",{href:!0});var K9t=s(xK);vNr=r(K9t,"from_pretrained()"),K9t.forEach(t),FNr=r(goe," to load the model weights."),goe.forEach(t),TNr=i(by),T(d0.$$.fragment,by),by.forEach(t),MNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(dx.$$.fragment,Zl),ENr=i(Zl),aCe=n(Zl,"P",{});var Z9t=s(aCe);CNr=r(Z9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Z9t.forEach(t),wNr=i(Zl),vn=n(Zl,"P",{});var vy=s(vn);ANr=r(vy,"The model class to instantiate is selected based on the "),nCe=n(vy,"CODE",{});var ext=s(nCe);yNr=r(ext,"model_type"),ext.forEach(t),LNr=r(vy,` property of the config object (either
passed as an argument or loaded from `),sCe=n(vy,"CODE",{});var oxt=s(sCe);xNr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),$Nr=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(vy,"CODE",{});var rxt=s(lCe);kNr=r(rxt,"pretrained_model_name_or_path"),rxt.forEach(t),SNr=r(vy,":"),vy.forEach(t),RNr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);c0=n(qe,"LI",{});var UNe=s(c0);iCe=n(UNe,"STRONG",{});var txt=s(iCe);PNr=r(txt,"albert"),txt.forEach(t),BNr=r(UNe," \u2014 "),$K=n(UNe,"A",{href:!0});var axt=s($K);INr=r(axt,"FlaxAlbertForSequenceClassification"),axt.forEach(t),NNr=r(UNe," (ALBERT model)"),UNe.forEach(t),qNr=i(qe),f0=n(qe,"LI",{});var JNe=s(f0);dCe=n(JNe,"STRONG",{});var nxt=s(dCe);jNr=r(nxt,"bart"),nxt.forEach(t),DNr=r(JNe," \u2014 "),kK=n(JNe,"A",{href:!0});var sxt=s(kK);GNr=r(sxt,"FlaxBartForSequenceClassification"),sxt.forEach(t),ONr=r(JNe," (BART model)"),JNe.forEach(t),VNr=i(qe),m0=n(qe,"LI",{});var YNe=s(m0);cCe=n(YNe,"STRONG",{});var lxt=s(cCe);XNr=r(lxt,"bert"),lxt.forEach(t),zNr=r(YNe," \u2014 "),SK=n(YNe,"A",{href:!0});var ixt=s(SK);WNr=r(ixt,"FlaxBertForSequenceClassification"),ixt.forEach(t),QNr=r(YNe," (BERT model)"),YNe.forEach(t),HNr=i(qe),g0=n(qe,"LI",{});var KNe=s(g0);fCe=n(KNe,"STRONG",{});var dxt=s(fCe);UNr=r(dxt,"big_bird"),dxt.forEach(t),JNr=r(KNe," \u2014 "),RK=n(KNe,"A",{href:!0});var cxt=s(RK);YNr=r(cxt,"FlaxBigBirdForSequenceClassification"),cxt.forEach(t),KNr=r(KNe," (BigBird model)"),KNe.forEach(t),ZNr=i(qe),h0=n(qe,"LI",{});var ZNe=s(h0);mCe=n(ZNe,"STRONG",{});var fxt=s(mCe);eqr=r(fxt,"distilbert"),fxt.forEach(t),oqr=r(ZNe," \u2014 "),PK=n(ZNe,"A",{href:!0});var mxt=s(PK);rqr=r(mxt,"FlaxDistilBertForSequenceClassification"),mxt.forEach(t),tqr=r(ZNe," (DistilBERT model)"),ZNe.forEach(t),aqr=i(qe),p0=n(qe,"LI",{});var eqe=s(p0);gCe=n(eqe,"STRONG",{});var gxt=s(gCe);nqr=r(gxt,"electra"),gxt.forEach(t),sqr=r(eqe," \u2014 "),BK=n(eqe,"A",{href:!0});var hxt=s(BK);lqr=r(hxt,"FlaxElectraForSequenceClassification"),hxt.forEach(t),iqr=r(eqe," (ELECTRA model)"),eqe.forEach(t),dqr=i(qe),_0=n(qe,"LI",{});var oqe=s(_0);hCe=n(oqe,"STRONG",{});var pxt=s(hCe);cqr=r(pxt,"mbart"),pxt.forEach(t),fqr=r(oqe," \u2014 "),IK=n(oqe,"A",{href:!0});var _xt=s(IK);mqr=r(_xt,"FlaxMBartForSequenceClassification"),_xt.forEach(t),gqr=r(oqe," (mBART model)"),oqe.forEach(t),hqr=i(qe),u0=n(qe,"LI",{});var rqe=s(u0);pCe=n(rqe,"STRONG",{});var uxt=s(pCe);pqr=r(uxt,"roberta"),uxt.forEach(t),_qr=r(rqe," \u2014 "),NK=n(rqe,"A",{href:!0});var bxt=s(NK);uqr=r(bxt,"FlaxRobertaForSequenceClassification"),bxt.forEach(t),bqr=r(rqe," (RoBERTa model)"),rqe.forEach(t),vqr=i(qe),b0=n(qe,"LI",{});var tqe=s(b0);_Ce=n(tqe,"STRONG",{});var vxt=s(_Ce);Fqr=r(vxt,"roformer"),vxt.forEach(t),Tqr=r(tqe," \u2014 "),qK=n(tqe,"A",{href:!0});var Fxt=s(qK);Mqr=r(Fxt,"FlaxRoFormerForSequenceClassification"),Fxt.forEach(t),Eqr=r(tqe," (RoFormer model)"),tqe.forEach(t),Cqr=i(qe),v0=n(qe,"LI",{});var aqe=s(v0);uCe=n(aqe,"STRONG",{});var Txt=s(uCe);wqr=r(Txt,"xlm-roberta"),Txt.forEach(t),Aqr=r(aqe," \u2014 "),jK=n(aqe,"A",{href:!0});var Mxt=s(jK);yqr=r(Mxt,"FlaxXLMRobertaForSequenceClassification"),Mxt.forEach(t),Lqr=r(aqe," (XLM-RoBERTa model)"),aqe.forEach(t),qe.forEach(t),xqr=i(Zl),T(F0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ADe=i(f),Hc=n(f,"H2",{class:!0});var ROe=s(Hc);T0=n(ROe,"A",{id:!0,class:!0,href:!0});var Ext=s(T0);bCe=n(Ext,"SPAN",{});var Cxt=s(bCe);T(cx.$$.fragment,Cxt),Cxt.forEach(t),Ext.forEach(t),$qr=i(ROe),vCe=n(ROe,"SPAN",{});var wxt=s(vCe);kqr=r(wxt,"FlaxAutoModelForQuestionAnswering"),wxt.forEach(t),ROe.forEach(t),yDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(fx.$$.fragment,ei),Sqr=i(ei),Uc=n(ei,"P",{});var hoe=s(Uc);Rqr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DK=n(hoe,"A",{href:!0});var Axt=s(DK);Pqr=r(Axt,"from_pretrained()"),Axt.forEach(t),Bqr=r(hoe," class method or the "),GK=n(hoe,"A",{href:!0});var yxt=s(GK);Iqr=r(yxt,"from_config()"),yxt.forEach(t),Nqr=r(hoe,` class
method.`),hoe.forEach(t),qqr=i(ei),mx=n(ei,"P",{});var POe=s(mx);jqr=r(POe,"This class cannot be instantiated directly using "),FCe=n(POe,"CODE",{});var Lxt=s(FCe);Dqr=r(Lxt,"__init__()"),Lxt.forEach(t),Gqr=r(POe," (throws an error)."),POe.forEach(t),Oqr=i(ei),Qt=n(ei,"DIV",{class:!0});var Fy=s(Qt);T(gx.$$.fragment,Fy),Vqr=i(Fy),TCe=n(Fy,"P",{});var xxt=s(TCe);Xqr=r(xxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xxt.forEach(t),zqr=i(Fy),Jc=n(Fy,"P",{});var poe=s(Jc);Wqr=r(poe,`Note:
Loading a model from its configuration file does `),MCe=n(poe,"STRONG",{});var $xt=s(MCe);Qqr=r($xt,"not"),$xt.forEach(t),Hqr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(poe,"A",{href:!0});var kxt=s(OK);Uqr=r(kxt,"from_pretrained()"),kxt.forEach(t),Jqr=r(poe," to load the model weights."),poe.forEach(t),Yqr=i(Fy),T(M0.$$.fragment,Fy),Fy.forEach(t),Kqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(hx.$$.fragment,oi),Zqr=i(oi),ECe=n(oi,"P",{});var Sxt=s(ECe);ejr=r(Sxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sxt.forEach(t),ojr=i(oi),Fn=n(oi,"P",{});var Ty=s(Fn);rjr=r(Ty,"The model class to instantiate is selected based on the "),CCe=n(Ty,"CODE",{});var Rxt=s(CCe);tjr=r(Rxt,"model_type"),Rxt.forEach(t),ajr=r(Ty,` property of the config object (either
passed as an argument or loaded from `),wCe=n(Ty,"CODE",{});var Pxt=s(wCe);njr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),sjr=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=n(Ty,"CODE",{});var Bxt=s(ACe);ljr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),ijr=r(Ty,":"),Ty.forEach(t),djr=i(oi),ke=n(oi,"UL",{});var je=s(ke);E0=n(je,"LI",{});var nqe=s(E0);yCe=n(nqe,"STRONG",{});var Ixt=s(yCe);cjr=r(Ixt,"albert"),Ixt.forEach(t),fjr=r(nqe," \u2014 "),VK=n(nqe,"A",{href:!0});var Nxt=s(VK);mjr=r(Nxt,"FlaxAlbertForQuestionAnswering"),Nxt.forEach(t),gjr=r(nqe," (ALBERT model)"),nqe.forEach(t),hjr=i(je),C0=n(je,"LI",{});var sqe=s(C0);LCe=n(sqe,"STRONG",{});var qxt=s(LCe);pjr=r(qxt,"bart"),qxt.forEach(t),_jr=r(sqe," \u2014 "),XK=n(sqe,"A",{href:!0});var jxt=s(XK);ujr=r(jxt,"FlaxBartForQuestionAnswering"),jxt.forEach(t),bjr=r(sqe," (BART model)"),sqe.forEach(t),vjr=i(je),w0=n(je,"LI",{});var lqe=s(w0);xCe=n(lqe,"STRONG",{});var Dxt=s(xCe);Fjr=r(Dxt,"bert"),Dxt.forEach(t),Tjr=r(lqe," \u2014 "),zK=n(lqe,"A",{href:!0});var Gxt=s(zK);Mjr=r(Gxt,"FlaxBertForQuestionAnswering"),Gxt.forEach(t),Ejr=r(lqe," (BERT model)"),lqe.forEach(t),Cjr=i(je),A0=n(je,"LI",{});var iqe=s(A0);$Ce=n(iqe,"STRONG",{});var Oxt=s($Ce);wjr=r(Oxt,"big_bird"),Oxt.forEach(t),Ajr=r(iqe," \u2014 "),WK=n(iqe,"A",{href:!0});var Vxt=s(WK);yjr=r(Vxt,"FlaxBigBirdForQuestionAnswering"),Vxt.forEach(t),Ljr=r(iqe," (BigBird model)"),iqe.forEach(t),xjr=i(je),y0=n(je,"LI",{});var dqe=s(y0);kCe=n(dqe,"STRONG",{});var Xxt=s(kCe);$jr=r(Xxt,"distilbert"),Xxt.forEach(t),kjr=r(dqe," \u2014 "),QK=n(dqe,"A",{href:!0});var zxt=s(QK);Sjr=r(zxt,"FlaxDistilBertForQuestionAnswering"),zxt.forEach(t),Rjr=r(dqe," (DistilBERT model)"),dqe.forEach(t),Pjr=i(je),L0=n(je,"LI",{});var cqe=s(L0);SCe=n(cqe,"STRONG",{});var Wxt=s(SCe);Bjr=r(Wxt,"electra"),Wxt.forEach(t),Ijr=r(cqe," \u2014 "),HK=n(cqe,"A",{href:!0});var Qxt=s(HK);Njr=r(Qxt,"FlaxElectraForQuestionAnswering"),Qxt.forEach(t),qjr=r(cqe," (ELECTRA model)"),cqe.forEach(t),jjr=i(je),x0=n(je,"LI",{});var fqe=s(x0);RCe=n(fqe,"STRONG",{});var Hxt=s(RCe);Djr=r(Hxt,"mbart"),Hxt.forEach(t),Gjr=r(fqe," \u2014 "),UK=n(fqe,"A",{href:!0});var Uxt=s(UK);Ojr=r(Uxt,"FlaxMBartForQuestionAnswering"),Uxt.forEach(t),Vjr=r(fqe," (mBART model)"),fqe.forEach(t),Xjr=i(je),$0=n(je,"LI",{});var mqe=s($0);PCe=n(mqe,"STRONG",{});var Jxt=s(PCe);zjr=r(Jxt,"roberta"),Jxt.forEach(t),Wjr=r(mqe," \u2014 "),JK=n(mqe,"A",{href:!0});var Yxt=s(JK);Qjr=r(Yxt,"FlaxRobertaForQuestionAnswering"),Yxt.forEach(t),Hjr=r(mqe," (RoBERTa model)"),mqe.forEach(t),Ujr=i(je),k0=n(je,"LI",{});var gqe=s(k0);BCe=n(gqe,"STRONG",{});var Kxt=s(BCe);Jjr=r(Kxt,"roformer"),Kxt.forEach(t),Yjr=r(gqe," \u2014 "),YK=n(gqe,"A",{href:!0});var Zxt=s(YK);Kjr=r(Zxt,"FlaxRoFormerForQuestionAnswering"),Zxt.forEach(t),Zjr=r(gqe," (RoFormer model)"),gqe.forEach(t),eDr=i(je),S0=n(je,"LI",{});var hqe=s(S0);ICe=n(hqe,"STRONG",{});var e$t=s(ICe);oDr=r(e$t,"xlm-roberta"),e$t.forEach(t),rDr=r(hqe," \u2014 "),KK=n(hqe,"A",{href:!0});var o$t=s(KK);tDr=r(o$t,"FlaxXLMRobertaForQuestionAnswering"),o$t.forEach(t),aDr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),je.forEach(t),nDr=i(oi),T(R0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),LDe=i(f),Yc=n(f,"H2",{class:!0});var BOe=s(Yc);P0=n(BOe,"A",{id:!0,class:!0,href:!0});var r$t=s(P0);NCe=n(r$t,"SPAN",{});var t$t=s(NCe);T(px.$$.fragment,t$t),t$t.forEach(t),r$t.forEach(t),sDr=i(BOe),qCe=n(BOe,"SPAN",{});var a$t=s(qCe);lDr=r(a$t,"FlaxAutoModelForTokenClassification"),a$t.forEach(t),BOe.forEach(t),xDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(_x.$$.fragment,ri),iDr=i(ri),Kc=n(ri,"P",{});var _oe=s(Kc);dDr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZK=n(_oe,"A",{href:!0});var n$t=s(ZK);cDr=r(n$t,"from_pretrained()"),n$t.forEach(t),fDr=r(_oe," class method or the "),eZ=n(_oe,"A",{href:!0});var s$t=s(eZ);mDr=r(s$t,"from_config()"),s$t.forEach(t),gDr=r(_oe,` class
method.`),_oe.forEach(t),hDr=i(ri),ux=n(ri,"P",{});var IOe=s(ux);pDr=r(IOe,"This class cannot be instantiated directly using "),jCe=n(IOe,"CODE",{});var l$t=s(jCe);_Dr=r(l$t,"__init__()"),l$t.forEach(t),uDr=r(IOe," (throws an error)."),IOe.forEach(t),bDr=i(ri),Ht=n(ri,"DIV",{class:!0});var My=s(Ht);T(bx.$$.fragment,My),vDr=i(My),DCe=n(My,"P",{});var i$t=s(DCe);FDr=r(i$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),i$t.forEach(t),TDr=i(My),Zc=n(My,"P",{});var uoe=s(Zc);MDr=r(uoe,`Note:
Loading a model from its configuration file does `),GCe=n(uoe,"STRONG",{});var d$t=s(GCe);EDr=r(d$t,"not"),d$t.forEach(t),CDr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(uoe,"A",{href:!0});var c$t=s(oZ);wDr=r(c$t,"from_pretrained()"),c$t.forEach(t),ADr=r(uoe," to load the model weights."),uoe.forEach(t),yDr=i(My),T(B0.$$.fragment,My),My.forEach(t),LDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(vx.$$.fragment,ti),xDr=i(ti),OCe=n(ti,"P",{});var f$t=s(OCe);$Dr=r(f$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f$t.forEach(t),kDr=i(ti),Tn=n(ti,"P",{});var Ey=s(Tn);SDr=r(Ey,"The model class to instantiate is selected based on the "),VCe=n(Ey,"CODE",{});var m$t=s(VCe);RDr=r(m$t,"model_type"),m$t.forEach(t),PDr=r(Ey,` property of the config object (either
passed as an argument or loaded from `),XCe=n(Ey,"CODE",{});var g$t=s(XCe);BDr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),IDr=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(Ey,"CODE",{});var h$t=s(zCe);NDr=r(h$t,"pretrained_model_name_or_path"),h$t.forEach(t),qDr=r(Ey,":"),Ey.forEach(t),jDr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);I0=n(Fo,"LI",{});var pqe=s(I0);WCe=n(pqe,"STRONG",{});var p$t=s(WCe);DDr=r(p$t,"albert"),p$t.forEach(t),GDr=r(pqe," \u2014 "),rZ=n(pqe,"A",{href:!0});var _$t=s(rZ);ODr=r(_$t,"FlaxAlbertForTokenClassification"),_$t.forEach(t),VDr=r(pqe," (ALBERT model)"),pqe.forEach(t),XDr=i(Fo),N0=n(Fo,"LI",{});var _qe=s(N0);QCe=n(_qe,"STRONG",{});var u$t=s(QCe);zDr=r(u$t,"bert"),u$t.forEach(t),WDr=r(_qe," \u2014 "),tZ=n(_qe,"A",{href:!0});var b$t=s(tZ);QDr=r(b$t,"FlaxBertForTokenClassification"),b$t.forEach(t),HDr=r(_qe," (BERT model)"),_qe.forEach(t),UDr=i(Fo),q0=n(Fo,"LI",{});var uqe=s(q0);HCe=n(uqe,"STRONG",{});var v$t=s(HCe);JDr=r(v$t,"big_bird"),v$t.forEach(t),YDr=r(uqe," \u2014 "),aZ=n(uqe,"A",{href:!0});var F$t=s(aZ);KDr=r(F$t,"FlaxBigBirdForTokenClassification"),F$t.forEach(t),ZDr=r(uqe," (BigBird model)"),uqe.forEach(t),eGr=i(Fo),j0=n(Fo,"LI",{});var bqe=s(j0);UCe=n(bqe,"STRONG",{});var T$t=s(UCe);oGr=r(T$t,"distilbert"),T$t.forEach(t),rGr=r(bqe," \u2014 "),nZ=n(bqe,"A",{href:!0});var M$t=s(nZ);tGr=r(M$t,"FlaxDistilBertForTokenClassification"),M$t.forEach(t),aGr=r(bqe," (DistilBERT model)"),bqe.forEach(t),nGr=i(Fo),D0=n(Fo,"LI",{});var vqe=s(D0);JCe=n(vqe,"STRONG",{});var E$t=s(JCe);sGr=r(E$t,"electra"),E$t.forEach(t),lGr=r(vqe," \u2014 "),sZ=n(vqe,"A",{href:!0});var C$t=s(sZ);iGr=r(C$t,"FlaxElectraForTokenClassification"),C$t.forEach(t),dGr=r(vqe," (ELECTRA model)"),vqe.forEach(t),cGr=i(Fo),G0=n(Fo,"LI",{});var Fqe=s(G0);YCe=n(Fqe,"STRONG",{});var w$t=s(YCe);fGr=r(w$t,"roberta"),w$t.forEach(t),mGr=r(Fqe," \u2014 "),lZ=n(Fqe,"A",{href:!0});var A$t=s(lZ);gGr=r(A$t,"FlaxRobertaForTokenClassification"),A$t.forEach(t),hGr=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),pGr=i(Fo),O0=n(Fo,"LI",{});var Tqe=s(O0);KCe=n(Tqe,"STRONG",{});var y$t=s(KCe);_Gr=r(y$t,"roformer"),y$t.forEach(t),uGr=r(Tqe," \u2014 "),iZ=n(Tqe,"A",{href:!0});var L$t=s(iZ);bGr=r(L$t,"FlaxRoFormerForTokenClassification"),L$t.forEach(t),vGr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),FGr=i(Fo),V0=n(Fo,"LI",{});var Mqe=s(V0);ZCe=n(Mqe,"STRONG",{});var x$t=s(ZCe);TGr=r(x$t,"xlm-roberta"),x$t.forEach(t),MGr=r(Mqe," \u2014 "),dZ=n(Mqe,"A",{href:!0});var $$t=s(dZ);EGr=r($$t,"FlaxXLMRobertaForTokenClassification"),$$t.forEach(t),CGr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),Fo.forEach(t),wGr=i(ti),T(X0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),$De=i(f),ef=n(f,"H2",{class:!0});var NOe=s(ef);z0=n(NOe,"A",{id:!0,class:!0,href:!0});var k$t=s(z0);e5e=n(k$t,"SPAN",{});var S$t=s(e5e);T(Fx.$$.fragment,S$t),S$t.forEach(t),k$t.forEach(t),AGr=i(NOe),o5e=n(NOe,"SPAN",{});var R$t=s(o5e);yGr=r(R$t,"FlaxAutoModelForMultipleChoice"),R$t.forEach(t),NOe.forEach(t),kDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Tx.$$.fragment,ai),LGr=i(ai),of=n(ai,"P",{});var boe=s(of);xGr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cZ=n(boe,"A",{href:!0});var P$t=s(cZ);$Gr=r(P$t,"from_pretrained()"),P$t.forEach(t),kGr=r(boe," class method or the "),fZ=n(boe,"A",{href:!0});var B$t=s(fZ);SGr=r(B$t,"from_config()"),B$t.forEach(t),RGr=r(boe,` class
method.`),boe.forEach(t),PGr=i(ai),Mx=n(ai,"P",{});var qOe=s(Mx);BGr=r(qOe,"This class cannot be instantiated directly using "),r5e=n(qOe,"CODE",{});var I$t=s(r5e);IGr=r(I$t,"__init__()"),I$t.forEach(t),NGr=r(qOe," (throws an error)."),qOe.forEach(t),qGr=i(ai),Ut=n(ai,"DIV",{class:!0});var Cy=s(Ut);T(Ex.$$.fragment,Cy),jGr=i(Cy),t5e=n(Cy,"P",{});var N$t=s(t5e);DGr=r(N$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),N$t.forEach(t),GGr=i(Cy),rf=n(Cy,"P",{});var voe=s(rf);OGr=r(voe,`Note:
Loading a model from its configuration file does `),a5e=n(voe,"STRONG",{});var q$t=s(a5e);VGr=r(q$t,"not"),q$t.forEach(t),XGr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(voe,"A",{href:!0});var j$t=s(mZ);zGr=r(j$t,"from_pretrained()"),j$t.forEach(t),WGr=r(voe," to load the model weights."),voe.forEach(t),QGr=i(Cy),T(W0.$$.fragment,Cy),Cy.forEach(t),HGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Cx.$$.fragment,ni),UGr=i(ni),n5e=n(ni,"P",{});var D$t=s(n5e);JGr=r(D$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D$t.forEach(t),YGr=i(ni),Mn=n(ni,"P",{});var wy=s(Mn);KGr=r(wy,"The model class to instantiate is selected based on the "),s5e=n(wy,"CODE",{});var G$t=s(s5e);ZGr=r(G$t,"model_type"),G$t.forEach(t),eOr=r(wy,` property of the config object (either
passed as an argument or loaded from `),l5e=n(wy,"CODE",{});var O$t=s(l5e);oOr=r(O$t,"pretrained_model_name_or_path"),O$t.forEach(t),rOr=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(wy,"CODE",{});var V$t=s(i5e);tOr=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),aOr=r(wy,":"),wy.forEach(t),nOr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);Q0=n(To,"LI",{});var Eqe=s(Q0);d5e=n(Eqe,"STRONG",{});var X$t=s(d5e);sOr=r(X$t,"albert"),X$t.forEach(t),lOr=r(Eqe," \u2014 "),gZ=n(Eqe,"A",{href:!0});var z$t=s(gZ);iOr=r(z$t,"FlaxAlbertForMultipleChoice"),z$t.forEach(t),dOr=r(Eqe," (ALBERT model)"),Eqe.forEach(t),cOr=i(To),H0=n(To,"LI",{});var Cqe=s(H0);c5e=n(Cqe,"STRONG",{});var W$t=s(c5e);fOr=r(W$t,"bert"),W$t.forEach(t),mOr=r(Cqe," \u2014 "),hZ=n(Cqe,"A",{href:!0});var Q$t=s(hZ);gOr=r(Q$t,"FlaxBertForMultipleChoice"),Q$t.forEach(t),hOr=r(Cqe," (BERT model)"),Cqe.forEach(t),pOr=i(To),U0=n(To,"LI",{});var wqe=s(U0);f5e=n(wqe,"STRONG",{});var H$t=s(f5e);_Or=r(H$t,"big_bird"),H$t.forEach(t),uOr=r(wqe," \u2014 "),pZ=n(wqe,"A",{href:!0});var U$t=s(pZ);bOr=r(U$t,"FlaxBigBirdForMultipleChoice"),U$t.forEach(t),vOr=r(wqe," (BigBird model)"),wqe.forEach(t),FOr=i(To),J0=n(To,"LI",{});var Aqe=s(J0);m5e=n(Aqe,"STRONG",{});var J$t=s(m5e);TOr=r(J$t,"distilbert"),J$t.forEach(t),MOr=r(Aqe," \u2014 "),_Z=n(Aqe,"A",{href:!0});var Y$t=s(_Z);EOr=r(Y$t,"FlaxDistilBertForMultipleChoice"),Y$t.forEach(t),COr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),wOr=i(To),Y0=n(To,"LI",{});var yqe=s(Y0);g5e=n(yqe,"STRONG",{});var K$t=s(g5e);AOr=r(K$t,"electra"),K$t.forEach(t),yOr=r(yqe," \u2014 "),uZ=n(yqe,"A",{href:!0});var Z$t=s(uZ);LOr=r(Z$t,"FlaxElectraForMultipleChoice"),Z$t.forEach(t),xOr=r(yqe," (ELECTRA model)"),yqe.forEach(t),$Or=i(To),K0=n(To,"LI",{});var Lqe=s(K0);h5e=n(Lqe,"STRONG",{});var ekt=s(h5e);kOr=r(ekt,"roberta"),ekt.forEach(t),SOr=r(Lqe," \u2014 "),bZ=n(Lqe,"A",{href:!0});var okt=s(bZ);ROr=r(okt,"FlaxRobertaForMultipleChoice"),okt.forEach(t),POr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),BOr=i(To),Z0=n(To,"LI",{});var xqe=s(Z0);p5e=n(xqe,"STRONG",{});var rkt=s(p5e);IOr=r(rkt,"roformer"),rkt.forEach(t),NOr=r(xqe," \u2014 "),vZ=n(xqe,"A",{href:!0});var tkt=s(vZ);qOr=r(tkt,"FlaxRoFormerForMultipleChoice"),tkt.forEach(t),jOr=r(xqe," (RoFormer model)"),xqe.forEach(t),DOr=i(To),ew=n(To,"LI",{});var $qe=s(ew);_5e=n($qe,"STRONG",{});var akt=s(_5e);GOr=r(akt,"xlm-roberta"),akt.forEach(t),OOr=r($qe," \u2014 "),FZ=n($qe,"A",{href:!0});var nkt=s(FZ);VOr=r(nkt,"FlaxXLMRobertaForMultipleChoice"),nkt.forEach(t),XOr=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),To.forEach(t),zOr=i(ni),T(ow.$$.fragment,ni),ni.forEach(t),ai.forEach(t),SDe=i(f),tf=n(f,"H2",{class:!0});var jOe=s(tf);rw=n(jOe,"A",{id:!0,class:!0,href:!0});var skt=s(rw);u5e=n(skt,"SPAN",{});var lkt=s(u5e);T(wx.$$.fragment,lkt),lkt.forEach(t),skt.forEach(t),WOr=i(jOe),b5e=n(jOe,"SPAN",{});var ikt=s(b5e);QOr=r(ikt,"FlaxAutoModelForNextSentencePrediction"),ikt.forEach(t),jOe.forEach(t),RDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Ax.$$.fragment,si),HOr=i(si),af=n(si,"P",{});var Foe=s(af);UOr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=n(Foe,"A",{href:!0});var dkt=s(TZ);JOr=r(dkt,"from_pretrained()"),dkt.forEach(t),YOr=r(Foe," class method or the "),MZ=n(Foe,"A",{href:!0});var ckt=s(MZ);KOr=r(ckt,"from_config()"),ckt.forEach(t),ZOr=r(Foe,` class
method.`),Foe.forEach(t),eVr=i(si),yx=n(si,"P",{});var DOe=s(yx);oVr=r(DOe,"This class cannot be instantiated directly using "),v5e=n(DOe,"CODE",{});var fkt=s(v5e);rVr=r(fkt,"__init__()"),fkt.forEach(t),tVr=r(DOe," (throws an error)."),DOe.forEach(t),aVr=i(si),Jt=n(si,"DIV",{class:!0});var Ay=s(Jt);T(Lx.$$.fragment,Ay),nVr=i(Ay),F5e=n(Ay,"P",{});var mkt=s(F5e);sVr=r(mkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mkt.forEach(t),lVr=i(Ay),nf=n(Ay,"P",{});var Toe=s(nf);iVr=r(Toe,`Note:
Loading a model from its configuration file does `),T5e=n(Toe,"STRONG",{});var gkt=s(T5e);dVr=r(gkt,"not"),gkt.forEach(t),cVr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Toe,"A",{href:!0});var hkt=s(EZ);fVr=r(hkt,"from_pretrained()"),hkt.forEach(t),mVr=r(Toe," to load the model weights."),Toe.forEach(t),gVr=i(Ay),T(tw.$$.fragment,Ay),Ay.forEach(t),hVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(xx.$$.fragment,li),pVr=i(li),M5e=n(li,"P",{});var pkt=s(M5e);_Vr=r(pkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pkt.forEach(t),uVr=i(li),En=n(li,"P",{});var yy=s(En);bVr=r(yy,"The model class to instantiate is selected based on the "),E5e=n(yy,"CODE",{});var _kt=s(E5e);vVr=r(_kt,"model_type"),_kt.forEach(t),FVr=r(yy,` property of the config object (either
passed as an argument or loaded from `),C5e=n(yy,"CODE",{});var ukt=s(C5e);TVr=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),MVr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(yy,"CODE",{});var bkt=s(w5e);EVr=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),CVr=r(yy,":"),yy.forEach(t),wVr=i(li),A5e=n(li,"UL",{});var vkt=s(A5e);aw=n(vkt,"LI",{});var kqe=s(aw);y5e=n(kqe,"STRONG",{});var Fkt=s(y5e);AVr=r(Fkt,"bert"),Fkt.forEach(t),yVr=r(kqe," \u2014 "),CZ=n(kqe,"A",{href:!0});var Tkt=s(CZ);LVr=r(Tkt,"FlaxBertForNextSentencePrediction"),Tkt.forEach(t),xVr=r(kqe," (BERT model)"),kqe.forEach(t),vkt.forEach(t),$Vr=i(li),T(nw.$$.fragment,li),li.forEach(t),si.forEach(t),PDe=i(f),sf=n(f,"H2",{class:!0});var GOe=s(sf);sw=n(GOe,"A",{id:!0,class:!0,href:!0});var Mkt=s(sw);L5e=n(Mkt,"SPAN",{});var Ekt=s(L5e);T($x.$$.fragment,Ekt),Ekt.forEach(t),Mkt.forEach(t),kVr=i(GOe),x5e=n(GOe,"SPAN",{});var Ckt=s(x5e);SVr=r(Ckt,"FlaxAutoModelForImageClassification"),Ckt.forEach(t),GOe.forEach(t),BDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(kx.$$.fragment,ii),RVr=i(ii),lf=n(ii,"P",{});var Moe=s(lf);PVr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=n(Moe,"A",{href:!0});var wkt=s(wZ);BVr=r(wkt,"from_pretrained()"),wkt.forEach(t),IVr=r(Moe," class method or the "),AZ=n(Moe,"A",{href:!0});var Akt=s(AZ);NVr=r(Akt,"from_config()"),Akt.forEach(t),qVr=r(Moe,` class
method.`),Moe.forEach(t),jVr=i(ii),Sx=n(ii,"P",{});var OOe=s(Sx);DVr=r(OOe,"This class cannot be instantiated directly using "),$5e=n(OOe,"CODE",{});var ykt=s($5e);GVr=r(ykt,"__init__()"),ykt.forEach(t),OVr=r(OOe," (throws an error)."),OOe.forEach(t),VVr=i(ii),Yt=n(ii,"DIV",{class:!0});var Ly=s(Yt);T(Rx.$$.fragment,Ly),XVr=i(Ly),k5e=n(Ly,"P",{});var Lkt=s(k5e);zVr=r(Lkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lkt.forEach(t),WVr=i(Ly),df=n(Ly,"P",{});var Eoe=s(df);QVr=r(Eoe,`Note:
Loading a model from its configuration file does `),S5e=n(Eoe,"STRONG",{});var xkt=s(S5e);HVr=r(xkt,"not"),xkt.forEach(t),UVr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Eoe,"A",{href:!0});var $kt=s(yZ);JVr=r($kt,"from_pretrained()"),$kt.forEach(t),YVr=r(Eoe," to load the model weights."),Eoe.forEach(t),KVr=i(Ly),T(lw.$$.fragment,Ly),Ly.forEach(t),ZVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Px.$$.fragment,di),eXr=i(di),R5e=n(di,"P",{});var kkt=s(R5e);oXr=r(kkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kkt.forEach(t),rXr=i(di),Cn=n(di,"P",{});var xy=s(Cn);tXr=r(xy,"The model class to instantiate is selected based on the "),P5e=n(xy,"CODE",{});var Skt=s(P5e);aXr=r(Skt,"model_type"),Skt.forEach(t),nXr=r(xy,` property of the config object (either
passed as an argument or loaded from `),B5e=n(xy,"CODE",{});var Rkt=s(B5e);sXr=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),lXr=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(xy,"CODE",{});var Pkt=s(I5e);iXr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),dXr=r(xy,":"),xy.forEach(t),cXr=i(di),Bx=n(di,"UL",{});var VOe=s(Bx);iw=n(VOe,"LI",{});var Sqe=s(iw);N5e=n(Sqe,"STRONG",{});var Bkt=s(N5e);fXr=r(Bkt,"beit"),Bkt.forEach(t),mXr=r(Sqe," \u2014 "),LZ=n(Sqe,"A",{href:!0});var Ikt=s(LZ);gXr=r(Ikt,"FlaxBeitForImageClassification"),Ikt.forEach(t),hXr=r(Sqe," (BEiT model)"),Sqe.forEach(t),pXr=i(VOe),dw=n(VOe,"LI",{});var Rqe=s(dw);q5e=n(Rqe,"STRONG",{});var Nkt=s(q5e);_Xr=r(Nkt,"vit"),Nkt.forEach(t),uXr=r(Rqe," \u2014 "),xZ=n(Rqe,"A",{href:!0});var qkt=s(xZ);bXr=r(qkt,"FlaxViTForImageClassification"),qkt.forEach(t),vXr=r(Rqe," (ViT model)"),Rqe.forEach(t),VOe.forEach(t),FXr=i(di),T(cw.$$.fragment,di),di.forEach(t),ii.forEach(t),IDe=i(f),cf=n(f,"H2",{class:!0});var XOe=s(cf);fw=n(XOe,"A",{id:!0,class:!0,href:!0});var jkt=s(fw);j5e=n(jkt,"SPAN",{});var Dkt=s(j5e);T(Ix.$$.fragment,Dkt),Dkt.forEach(t),jkt.forEach(t),TXr=i(XOe),D5e=n(XOe,"SPAN",{});var Gkt=s(D5e);MXr=r(Gkt,"FlaxAutoModelForVision2Seq"),Gkt.forEach(t),XOe.forEach(t),NDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Nx.$$.fragment,ci),EXr=i(ci),ff=n(ci,"P",{});var Coe=s(ff);CXr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$Z=n(Coe,"A",{href:!0});var Okt=s($Z);wXr=r(Okt,"from_pretrained()"),Okt.forEach(t),AXr=r(Coe," class method or the "),kZ=n(Coe,"A",{href:!0});var Vkt=s(kZ);yXr=r(Vkt,"from_config()"),Vkt.forEach(t),LXr=r(Coe,` class
method.`),Coe.forEach(t),xXr=i(ci),qx=n(ci,"P",{});var zOe=s(qx);$Xr=r(zOe,"This class cannot be instantiated directly using "),G5e=n(zOe,"CODE",{});var Xkt=s(G5e);kXr=r(Xkt,"__init__()"),Xkt.forEach(t),SXr=r(zOe," (throws an error)."),zOe.forEach(t),RXr=i(ci),Kt=n(ci,"DIV",{class:!0});var $y=s(Kt);T(jx.$$.fragment,$y),PXr=i($y),O5e=n($y,"P",{});var zkt=s(O5e);BXr=r(zkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zkt.forEach(t),IXr=i($y),mf=n($y,"P",{});var woe=s(mf);NXr=r(woe,`Note:
Loading a model from its configuration file does `),V5e=n(woe,"STRONG",{});var Wkt=s(V5e);qXr=r(Wkt,"not"),Wkt.forEach(t),jXr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(woe,"A",{href:!0});var Qkt=s(SZ);DXr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),GXr=r(woe," to load the model weights."),woe.forEach(t),OXr=i($y),T(mw.$$.fragment,$y),$y.forEach(t),VXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Dx.$$.fragment,fi),XXr=i(fi),X5e=n(fi,"P",{});var Hkt=s(X5e);zXr=r(Hkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hkt.forEach(t),WXr=i(fi),wn=n(fi,"P",{});var ky=s(wn);QXr=r(ky,"The model class to instantiate is selected based on the "),z5e=n(ky,"CODE",{});var Ukt=s(z5e);HXr=r(Ukt,"model_type"),Ukt.forEach(t),UXr=r(ky,` property of the config object (either
passed as an argument or loaded from `),W5e=n(ky,"CODE",{});var Jkt=s(W5e);JXr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),YXr=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=n(ky,"CODE",{});var Ykt=s(Q5e);KXr=r(Ykt,"pretrained_model_name_or_path"),Ykt.forEach(t),ZXr=r(ky,":"),ky.forEach(t),ezr=i(fi),H5e=n(fi,"UL",{});var Kkt=s(H5e);gw=n(Kkt,"LI",{});var Pqe=s(gw);U5e=n(Pqe,"STRONG",{});var Zkt=s(U5e);ozr=r(Zkt,"vision-encoder-decoder"),Zkt.forEach(t),rzr=r(Pqe," \u2014 "),RZ=n(Pqe,"A",{href:!0});var eSt=s(RZ);tzr=r(eSt,"FlaxVisionEncoderDecoderModel"),eSt.forEach(t),azr=r(Pqe," (Vision Encoder decoder model)"),Pqe.forEach(t),Kkt.forEach(t),nzr=i(fi),T(hw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(aPt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(lk,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ik,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertConfig"),c(dk,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitConfig"),c(fk,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertConfig"),c(mk,"href","/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(gk,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdConfig"),c(hk,"href","/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(pk,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(_k,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(uk,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertConfig"),c(bk,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineConfig"),c(vk,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPConfig"),c(Fk,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertConfig"),c(Tk,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextConfig"),c(Mk,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLConfig"),c(Ek,"href","/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtConfig"),c(Ck,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wk,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ak,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(yk,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaConfig"),c(Lk,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xk,"href","/docs/transformers/pr_6/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($k,"href","/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTConfig"),c(kk,"href","/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrConfig"),c(Sk,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Rk,"href","/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRConfig"),c(Pk,"href","/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTConfig"),c(Bk,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraConfig"),c(Ik,"href","/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qk,"href","/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaConfig"),c(jk,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetConfig"),c(Dk,"href","/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTConfig"),c(Gk,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelConfig"),c(Ok,"href","/docs/transformers/pr_6/en/model_doc/glpn#transformers.GLPNConfig"),c(Vk,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Config"),c(Xk,"href","/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zk,"href","/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Wk,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJConfig"),c(Qk,"href","/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertConfig"),c(Hk,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertConfig"),c(Uk,"href","/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Jk,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Yk,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Kk,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Zk,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDConfig"),c(eS,"href","/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitConfig"),c(oS,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerConfig"),c(rS,"href","/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeConfig"),c(tS,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertConfig"),c(aS,"href","/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100Config"),c(nS,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianConfig"),c(sS,"href","/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(lS,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartConfig"),c(iS,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(dS,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(cS,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetConfig"),c(fS,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Config"),c(mS,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(gS,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(hS,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTConfig"),c(pS,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusConfig"),c(_S,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverConfig"),c(uS,"href","/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartConfig"),c(bS,"href","/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(vS,"href","/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(FS,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(TS,"href","/docs/transformers/pr_6/en/model_doc/rag#transformers.RagConfig"),c(MS,"href","/docs/transformers/pr_6/en/model_doc/realm#transformers.RealmConfig"),c(ES,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerConfig"),c(CS,"href","/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetConfig"),c(wS,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertConfig"),c(AS,"href","/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetConfig"),c(yS,"href","/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertConfig"),c(LS,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaConfig"),c(xS,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerConfig"),c($S,"href","/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerConfig"),c(kS,"href","/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWConfig"),c(SS,"href","/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDConfig"),c(RS,"href","/docs/transformers/pr_6/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(PS,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(BS,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(IS,"href","/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterConfig"),c(NS,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(qS,"href","/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinConfig"),c(jS,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Config"),c(DS,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasConfig"),c(GS,"href","/docs/transformers/pr_6/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(OS,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(VS,"href","/docs/transformers/pr_6/en/model_doc/trocr#transformers.TrOCRConfig"),c(XS,"href","/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(zS,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(WS,"href","/docs/transformers/pr_6/en/model_doc/van#transformers.VanConfig"),c(QS,"href","/docs/transformers/pr_6/en/model_doc/vilt#transformers.ViltConfig"),c(HS,"href","/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(US,"href","/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(JS,"href","/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(YS,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTConfig"),c(KS,"href","/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ZS,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(eR,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(oR,"href","/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMConfig"),c(rR,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMConfig"),c(tR,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMConfig"),c(aR,"href","/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(nR,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(sR,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(lR,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetConfig"),c(iR,"href","/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosConfig"),c(dR,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(cR,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(fR,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertTokenizer"),c(mR,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gR,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartTokenizer"),c(hR,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartTokenizerFast"),c(pR,"href","/docs/transformers/pr_6/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_R,"href","/docs/transformers/pr_6/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(uR,"href","/docs/transformers/pr_6/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(bR,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizer"),c(vR,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizerFast"),c(FR,"href","/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(TR,"href","/docs/transformers/pr_6/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(MR,"href","/docs/transformers/pr_6/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(ER,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(CR,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(wR,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AR,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yR,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(LR,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(xR,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c($R,"href","/docs/transformers/pr_6/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kR,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SR,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RR,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineTokenizer"),c(PR,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPTokenizer"),c(BR,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IR,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NR,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_6/en/model_doc/cpm#transformers.CpmTokenizer"),c(jR,"href","/docs/transformers/pr_6/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(DR,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(GR,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaTokenizer"),c(XR,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(WR,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QR,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(HR,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(JR,"href","/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(YR,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraTokenizer"),c(KR,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ZR,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(eP,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetTokenizer"),c(oP,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(rP,"href","/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(tP,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelTokenizer"),c(aP,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(nP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(cP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mP,"href","/docs/transformers/pr_6/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gP,"href","/docs/transformers/pr_6/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hP,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pP,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_P,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uP,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bP,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vP,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FP,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TP,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MP,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EP,"href","/docs/transformers/pr_6/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CP,"href","/docs/transformers/pr_6/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wP,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDTokenizer"),c(AP,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDTokenizerFast"),c(yP,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LP,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xP,"href","/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeTokenizer"),c($P,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kP,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SP,"href","/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RP,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianTokenizer"),c(PP,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartTokenizer"),c(BP,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IP,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NP,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qP,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_6/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GP,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OP,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XP,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zP,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertTokenizer"),c(HP,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UP,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JP,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YP,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZP,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eB,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oB,"href","/docs/transformers/pr_6/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rB,"href","/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tB,"href","/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aB,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_6/en/model_doc/rag#transformers.RagTokenizer"),c(lB,"href","/docs/transformers/pr_6/en/model_doc/realm#transformers.RealmTokenizer"),c(iB,"href","/docs/transformers/pr_6/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dB,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cB,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fB,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mB,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hB,"href","/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bB,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vB,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FB,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TB,"href","/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MB,"href","/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EB,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CB,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Tokenizer"),c(AB,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasTokenizer"),c(LB,"href","/docs/transformers/pr_6/en/model_doc/tapex#transformers.TapexTokenizer"),c(xB,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($B,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizer"),c(kB,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertTokenizerFast"),c(SB,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BB,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMTokenizer"),c(qB,"href","/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertTokenizer"),c(WB,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(QB,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eI,"href","/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rI,"href","/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aI,"href","/docs/transformers/pr_6/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dI,"href","/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(cI,"href","/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mI,"href","/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gI,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_I,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uI,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EI,"href","/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(CI,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wI,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPProcessor"),c(AI,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yI,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(LI,"href","/docs/transformers/pr_6/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SI,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RI,"href","/docs/transformers/pr_6/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_6/en/model_doc/vilt#transformers.ViltProcessor"),c(NI,"href","/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DI,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoModel"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(GI,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertModel"),c(zI,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartModel"),c(WI,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitModel"),c(QI,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertModel"),c(HI,"href","/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UI,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdModel"),c(JI,"href","/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YI,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KI,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZI,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertModel"),c(tN,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextModel"),c(aN,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLModel"),c(nN,"href","/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtModel"),c(sN,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lN,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iN,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dN,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaModel"),c(cN,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fN,"href","/docs/transformers/pr_6/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mN,"href","/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTModel"),c(gN,"href","/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrModel"),c(hN,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertModel"),c(pN,"href","/docs/transformers/pr_6/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_N,"href","/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraModel"),c(bN,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertModel"),c(vN,"href","/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaModel"),c(FN,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetModel"),c(TN,"href","/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTModel"),c(MN,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelModel"),c(EN,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CN,"href","/docs/transformers/pr_6/en/model_doc/glpn#transformers.GLPNModel"),c(wN,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2Model"),c(AN,"href","/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yN,"href","/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(LN,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJModel"),c(xN,"href","/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertModel"),c($N,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertModel"),c(kN,"href","/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SN,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RN,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PN,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(BN,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDModel"),c(IN,"href","/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitModel"),c(NN,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerModel"),c(qN,"href","/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeModel"),c(jN,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertModel"),c(DN,"href","/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100Model"),c(GN,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianModel"),c(ON,"href","/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VN,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartModel"),c(XN,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(zN,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WN,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetModel"),c(QN,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5Model"),c(HN,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UN,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JN,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTModel"),c(YN,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusModel"),c(KN,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZN,"href","/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_6/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Fq,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_6/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_6/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(kq,"href","/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMModel"),c(Sq,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMModel"),c(Rq,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Iq,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosModel"),c(jq,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lu,"id","transformers.AutoModelForPreTraining"),c(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Dq,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gq,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oq,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vq,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_6/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cj,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fj,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mj,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hj,"href","/docs/transformers/pr_6/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mj,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ej,"href","/docs/transformers/pr_6/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wj,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Aj,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yj,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(kj,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForCausalLM"),c(Bj,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ij,"href","/docs/transformers/pr_6/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nj,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(qj,"href","/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jj,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Dj,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Gj,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Oj,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Vj,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Xj,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForCausalLM"),c(zj,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wj,"href","/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Qj,"href","/docs/transformers/pr_6/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Hj,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Uj,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianForCausalLM"),c(Jj,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Yj,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Kj,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Zj,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.OPTForCausalLM"),c(eD,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(oD,"href","/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(rD,"href","/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(aD,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(nD,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(sD,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(lD,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(iD,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(dD,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cD,"href","/docs/transformers/pr_6/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(fD,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mD,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(hD,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(pD,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_D,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Db,"id","transformers.AutoModelForMaskedLM"),c(Db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Db,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(uD,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(TD,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForMaskedLM"),c(ED,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(CD,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wD,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yD,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xD,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($D,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(kD,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(RD,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(PD,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ND,"href","/docs/transformers/pr_6/en/model_doc/luke#transformers.LukeForMaskedLM"),c(qD,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VD,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XD,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WD,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UD,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KD,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eG,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForSeq2SeqLM"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(oG,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dG,"href","/docs/transformers/pr_6/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_6/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.MarianMTModel"),c(gG,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_6/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_6/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W2,"id","transformers.AutoModelForSequenceClassification"),c(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W2,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(FG,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(yG,"href","/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(LG,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForSequenceClassification"),c($G,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(RG,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(PG,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(NG,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(DG,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(OG,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(VG,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(zG,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDForSequenceClassification"),c(HG,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eO,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oO,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rO,"href","/docs/transformers/pr_6/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tO,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lO,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cO,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fO,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mO,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gO,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hO,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForMultipleChoice"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(_O,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MO,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CO,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AO,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yO,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xO,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($O,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kO,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SO,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XO,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zO,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WO,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForNextSentencePrediction"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(HO,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForTokenClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(rV,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sV,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForTokenClassification"),c(lV,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iV,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dV,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cV,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mV,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gV,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_V,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uV,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vV,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FV,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EV,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(CV,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xV,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($V,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RV,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IV,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NV,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.AutoModelForQuestionAnswering"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(jV,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_6/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_6/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_6/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_6/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_6/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_6/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_6/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_6/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_6/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_6/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_6/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_6/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n1,"id","transformers.AutoModelForTableQuestionAnswering"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(LX,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForImageClassification"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(SX,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitForImageClassification"),c(IX,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NX,"href","/docs/transformers/pr_6/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qX,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jX,"href","/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DX,"href","/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GX,"href","/docs/transformers/pr_6/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OX,"href","/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitForImageClassification"),c(VX,"href","/docs/transformers/pr_6/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(XX,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zX,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(WX,"href","/docs/transformers/pr_6/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(QX,"href","/docs/transformers/pr_6/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HX,"href","/docs/transformers/pr_6/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(UX,"href","/docs/transformers/pr_6/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JX,"href","/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YX,"href","/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinForImageClassification"),c(KX,"href","/docs/transformers/pr_6/en/model_doc/van#transformers.VanForImageClassification"),c(ZX,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForVision2Seq"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(ez,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForAudioClassification"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(az,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(iz,"href","/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(dz,"href","/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(cz,"href","/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(fz,"href","/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(mz,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(gz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(hz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(pz,"href","/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForAudioFrameClassification"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(_z,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Mz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Ez,"href","/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z1,"id","transformers.AutoModelForCTC"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Cz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Lz,"href","/docs/transformers/pr_6/en/model_doc/hubert#transformers.HubertForCTC"),c(xz,"href","/docs/transformers/pr_6/en/model_doc/sew#transformers.SEWForCTC"),c($z,"href","/docs/transformers/pr_6/en/model_doc/sew-d#transformers.SEWDForCTC"),c(kz,"href","/docs/transformers/pr_6/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Sz,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Rz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Pz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Bz,"href","/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_6/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Dz,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForAudioXVector"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Gz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(zz,"href","/docs/transformers/pr_6/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Wz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Qz,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Hz,"href","/docs/transformers/pr_6/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForMaskedImageModeling"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Uz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_6/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Zz,"href","/docs/transformers/pr_6/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(eW,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForObjectDetection"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(oW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrForObjectDetection"),c(nW,"href","/docs/transformers/pr_6/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForImageSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(sW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_6/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForSemanticSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(cW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(pW,"href","/docs/transformers/pr_6/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(_W,"href","/docs/transformers/pr_6/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForInstanceSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(uW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_6/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModel"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(TW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertModel"),c(wW,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.TFBartModel"),c(AW,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertModel"),c(yW,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LW,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(xW,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertModel"),c($W,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.TFCLIPModel"),c(kW,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertModel"),c(SW,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.TFConvNextModel"),c(RW,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLModel"),c(PW,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BW,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaModel"),c(IW,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(NW,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qW,"href","/docs/transformers/pr_6/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(jW,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraModel"),c(DW,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(GW,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelModel"),c(OW,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(VW,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2Model"),c(XW,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJModel"),c(zW,"href","/docs/transformers/pr_6/en/model_doc/hubert#transformers.TFHubertModel"),c(WW,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QW,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.TFLEDModel"),c(HW,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerModel"),c(UW,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.TFLxmertModel"),c(JW,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.TFMarianModel"),c(YW,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.TFMBartModel"),c(KW,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(ZW,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetModel"),c(eQ,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.TFMT5Model"),c(oQ,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(rQ,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.TFOPTModel"),c(tQ,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.TFPegasusModel"),c(aQ,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertModel"),c(nQ,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaModel"),c(sQ,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerModel"),c(lQ,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(iQ,"href","/docs/transformers/pr_6/en/model_doc/swin#transformers.TFSwinModel"),c(dQ,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.TFT5Model"),c(cQ,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasModel"),c(fQ,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(mQ,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.TFViTModel"),c(gQ,"href","/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(hQ,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(pQ,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMModel"),c(_Q,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(uQ,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForPreTraining"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(MQ,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForPreTraining"),c(CQ,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(AQ,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LQ,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c($Q,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kQ,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SQ,"href","/docs/transformers/pr_6/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(RQ,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(PQ,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BQ,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NQ,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jQ,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_6/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(GQ,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OQ,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(VQ,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForCausalLM"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(HQ,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(UQ,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(YQ,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(KQ,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(eH,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(oH,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(rH,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(tH,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aH,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nH,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForImageClassification"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(sH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_6/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(cH,"href","/docs/transformers/pr_6/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(fH,"href","/docs/transformers/pr_6/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(mH,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForMaskedLM"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(gH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(uH,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vH,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(FH,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(TH,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(MH,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(CH,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(AH,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yH,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LH,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(xH,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($H,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(kH,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SH,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(RH,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PH,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BH,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(IH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GH,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VH,"href","/docs/transformers/pr_6/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.TFMarianMTModel"),c(zH,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QH,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(HH,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForSequenceClassification"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(UH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oU,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rU,"href","/docs/transformers/pr_6/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tU,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nU,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lU,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iU,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dU,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cU,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(fU,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mU,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gU,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pU,"href","/docs/transformers/pr_6/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_U,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(uU,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bU,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vU,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(FU,"href","/docs/transformers/pr_6/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TU,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(MU,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(EU,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForMultipleChoice"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(CU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($U,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(RU,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PU,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BU,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IU,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(qU,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(DU,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(GU,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(OU,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(VU,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(XU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(HU,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForTableQuestionAnswering"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(UU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_6/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForTokenClassification"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sJ,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iJ,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cJ,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fJ,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(mJ,"href","/docs/transformers/pr_6/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gJ,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hJ,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(_J,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bJ,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vJ,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FJ,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TJ,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForQuestionAnswering"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_6/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_6/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_6/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_6/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_6/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PJ,"href","/docs/transformers/pr_6/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_6/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_6/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_6/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_6/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_6/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VJ,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_6/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForVision2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_6/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModel"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tY,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartModel"),c(aY,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.FlaxBeitModel"),c(nY,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertModel"),c(sY,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lY,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iY,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dY,"href","/docs/transformers/pr_6/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cY,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fY,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraModel"),c(mY,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gY,"href","/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hY,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pY,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.FlaxMarianModel"),c(_Y,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartModel"),c(uY,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bY,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.FlaxOPTModel"),c(vY,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(FY,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(TY,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(MY,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.FlaxT5Model"),c(EY,"href","/docs/transformers/pr_6/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(CY,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.FlaxViTModel"),c(wY,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(AY,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(yY,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForCausalLM"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(LY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(SY,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(RY,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(PY,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(BY,"href","/docs/transformers/pr_6/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(IY,"href","/docs/transformers/pr_6/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NY,"href","/docs/transformers/pr_6/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qY,"href","/docs/transformers/pr_6/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(jY,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DY,"href","/docs/transformers/pr_6/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForPreTraining"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(GY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zY,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(QY,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HY,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UY,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KY,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZY,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_6/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(oK,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForMaskedLM"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(rK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(sK,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(iK,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(dK,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(cK,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(fK,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gK,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hK,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(pK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_6/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_6/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(TK,"href","/docs/transformers/pr_6/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(MK,"href","/docs/transformers/pr_6/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(EK,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_6/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wK,"href","/docs/transformers/pr_6/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(AK,"href","/docs/transformers/pr_6/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(yK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(SK,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(PK,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(BK,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(IK,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(NK,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qK,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jK,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(DK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_6/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_6/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(KK,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForTokenClassification"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(ZK,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rZ,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nZ,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lZ,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dZ,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(cZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_6/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_6/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_6/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_6/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_6/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vZ,"href","/docs/transformers/pr_6/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(FZ,"href","/docs/transformers/pr_6/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(TZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_6/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForImageClassification"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(wZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_6/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xZ,"href","/docs/transformers/pr_6/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForVision2Seq"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c($Z,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_6/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_6/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,Sy),e(rt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,Ry),e(We,Ln),e(We,xn),e(xn,Py),e(We,_i),e(We,$n),e($n,By),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ok),e(Ae,bi),e(bi,rk),e(Ae,tk),b(f,Eo,u),b(f,wa,u),e(wa,ak),e(wa,vf),e(vf,nk),e(wa,WOe),b(f,Bqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Aoe),M(Iy,Aoe,null),e(vi,QOe),e(vi,yoe),e(yoe,HOe),b(f,Iqe,u),b(f,kn,u),e(kn,UOe),e(kn,Loe),e(Loe,JOe),e(kn,YOe),e(kn,xoe),e(xoe,KOe),e(kn,ZOe),b(f,Nqe,u),M(Ny,f,u),b(f,qqe,u),b(f,sk,u),e(sk,eVe),b(f,jqe,u),M(Tf,f,u),b(f,Dqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,$oe),M(qy,$oe,null),e(Fi,oVe),e(Fi,koe),e(koe,rVe),b(f,Gqe,u),b(f,Co,u),M(jy,Co,null),e(Co,tVe),e(Co,Dy),e(Dy,aVe),e(Dy,lk),e(lk,nVe),e(Dy,sVe),e(Co,lVe),e(Co,Gy),e(Gy,iVe),e(Gy,Soe),e(Soe,dVe),e(Gy,cVe),e(Co,fVe),e(Co,Er),M(Oy,Er,null),e(Er,mVe),e(Er,Roe),e(Roe,gVe),e(Er,hVe),e(Er,Ti),e(Ti,pVe),e(Ti,Poe),e(Poe,_Ve),e(Ti,uVe),e(Ti,Boe),e(Boe,bVe),e(Ti,vVe),e(Er,FVe),e(Er,A),e(A,Ef),e(Ef,Ioe),e(Ioe,TVe),e(Ef,MVe),e(Ef,ik),e(ik,EVe),e(Ef,CVe),e(A,wVe),e(A,Cf),e(Cf,Noe),e(Noe,AVe),e(Cf,yVe),e(Cf,dk),e(dk,LVe),e(Cf,xVe),e(A,$Ve),e(A,wf),e(wf,qoe),e(qoe,kVe),e(wf,SVe),e(wf,ck),e(ck,RVe),e(wf,PVe),e(A,BVe),e(A,Af),e(Af,joe),e(joe,IVe),e(Af,NVe),e(Af,fk),e(fk,qVe),e(Af,jVe),e(A,DVe),e(A,yf),e(yf,Doe),e(Doe,GVe),e(yf,OVe),e(yf,mk),e(mk,VVe),e(yf,XVe),e(A,zVe),e(A,Lf),e(Lf,Goe),e(Goe,WVe),e(Lf,QVe),e(Lf,gk),e(gk,HVe),e(Lf,UVe),e(A,JVe),e(A,xf),e(xf,Ooe),e(Ooe,YVe),e(xf,KVe),e(xf,hk),e(hk,ZVe),e(xf,eXe),e(A,oXe),e(A,$f),e($f,Voe),e(Voe,rXe),e($f,tXe),e($f,pk),e(pk,aXe),e($f,nXe),e(A,sXe),e(A,kf),e(kf,Xoe),e(Xoe,lXe),e(kf,iXe),e(kf,_k),e(_k,dXe),e(kf,cXe),e(A,fXe),e(A,Sf),e(Sf,zoe),e(zoe,mXe),e(Sf,gXe),e(Sf,uk),e(uk,hXe),e(Sf,pXe),e(A,_Xe),e(A,Rf),e(Rf,Woe),e(Woe,uXe),e(Rf,bXe),e(Rf,bk),e(bk,vXe),e(Rf,FXe),e(A,TXe),e(A,Pf),e(Pf,Qoe),e(Qoe,MXe),e(Pf,EXe),e(Pf,vk),e(vk,CXe),e(Pf,wXe),e(A,AXe),e(A,Bf),e(Bf,Hoe),e(Hoe,yXe),e(Bf,LXe),e(Bf,Fk),e(Fk,xXe),e(Bf,$Xe),e(A,kXe),e(A,If),e(If,Uoe),e(Uoe,SXe),e(If,RXe),e(If,Tk),e(Tk,PXe),e(If,BXe),e(A,IXe),e(A,Nf),e(Nf,Joe),e(Joe,NXe),e(Nf,qXe),e(Nf,Mk),e(Mk,jXe),e(Nf,DXe),e(A,GXe),e(A,qf),e(qf,Yoe),e(Yoe,OXe),e(qf,VXe),e(qf,Ek),e(Ek,XXe),e(qf,zXe),e(A,WXe),e(A,jf),e(jf,Koe),e(Koe,QXe),e(jf,HXe),e(jf,Ck),e(Ck,UXe),e(jf,JXe),e(A,YXe),e(A,Df),e(Df,Zoe),e(Zoe,KXe),e(Df,ZXe),e(Df,wk),e(wk,eze),e(Df,oze),e(A,rze),e(A,Gf),e(Gf,ere),e(ere,tze),e(Gf,aze),e(Gf,Ak),e(Ak,nze),e(Gf,sze),e(A,lze),e(A,Of),e(Of,ore),e(ore,ize),e(Of,dze),e(Of,yk),e(yk,cze),e(Of,fze),e(A,mze),e(A,Vf),e(Vf,rre),e(rre,gze),e(Vf,hze),e(Vf,Lk),e(Lk,pze),e(Vf,_ze),e(A,uze),e(A,Xf),e(Xf,tre),e(tre,bze),e(Xf,vze),e(Xf,xk),e(xk,Fze),e(Xf,Tze),e(A,Mze),e(A,zf),e(zf,are),e(are,Eze),e(zf,Cze),e(zf,$k),e($k,wze),e(zf,Aze),e(A,yze),e(A,Wf),e(Wf,nre),e(nre,Lze),e(Wf,xze),e(Wf,kk),e(kk,$ze),e(Wf,kze),e(A,Sze),e(A,Qf),e(Qf,sre),e(sre,Rze),e(Qf,Pze),e(Qf,Sk),e(Sk,Bze),e(Qf,Ize),e(A,Nze),e(A,Hf),e(Hf,lre),e(lre,qze),e(Hf,jze),e(Hf,Rk),e(Rk,Dze),e(Hf,Gze),e(A,Oze),e(A,Uf),e(Uf,ire),e(ire,Vze),e(Uf,Xze),e(Uf,Pk),e(Pk,zze),e(Uf,Wze),e(A,Qze),e(A,Jf),e(Jf,dre),e(dre,Hze),e(Jf,Uze),e(Jf,Bk),e(Bk,Jze),e(Jf,Yze),e(A,Kze),e(A,Yf),e(Yf,cre),e(cre,Zze),e(Yf,eWe),e(Yf,Ik),e(Ik,oWe),e(Yf,rWe),e(A,tWe),e(A,Kf),e(Kf,fre),e(fre,aWe),e(Kf,nWe),e(Kf,Nk),e(Nk,sWe),e(Kf,lWe),e(A,iWe),e(A,Zf),e(Zf,mre),e(mre,dWe),e(Zf,cWe),e(Zf,qk),e(qk,fWe),e(Zf,mWe),e(A,gWe),e(A,em),e(em,gre),e(gre,hWe),e(em,pWe),e(em,jk),e(jk,_We),e(em,uWe),e(A,bWe),e(A,om),e(om,hre),e(hre,vWe),e(om,FWe),e(om,Dk),e(Dk,TWe),e(om,MWe),e(A,EWe),e(A,rm),e(rm,pre),e(pre,CWe),e(rm,wWe),e(rm,Gk),e(Gk,AWe),e(rm,yWe),e(A,LWe),e(A,tm),e(tm,_re),e(_re,xWe),e(tm,$We),e(tm,Ok),e(Ok,kWe),e(tm,SWe),e(A,RWe),e(A,am),e(am,ure),e(ure,PWe),e(am,BWe),e(am,Vk),e(Vk,IWe),e(am,NWe),e(A,qWe),e(A,nm),e(nm,bre),e(bre,jWe),e(nm,DWe),e(nm,Xk),e(Xk,GWe),e(nm,OWe),e(A,VWe),e(A,sm),e(sm,vre),e(vre,XWe),e(sm,zWe),e(sm,zk),e(zk,WWe),e(sm,QWe),e(A,HWe),e(A,lm),e(lm,Fre),e(Fre,UWe),e(lm,JWe),e(lm,Wk),e(Wk,YWe),e(lm,KWe),e(A,ZWe),e(A,im),e(im,Tre),e(Tre,eQe),e(im,oQe),e(im,Qk),e(Qk,rQe),e(im,tQe),e(A,aQe),e(A,dm),e(dm,Mre),e(Mre,nQe),e(dm,sQe),e(dm,Hk),e(Hk,lQe),e(dm,iQe),e(A,dQe),e(A,cm),e(cm,Ere),e(Ere,cQe),e(cm,fQe),e(cm,Uk),e(Uk,mQe),e(cm,gQe),e(A,hQe),e(A,fm),e(fm,Cre),e(Cre,pQe),e(fm,_Qe),e(fm,Jk),e(Jk,uQe),e(fm,bQe),e(A,vQe),e(A,mm),e(mm,wre),e(wre,FQe),e(mm,TQe),e(mm,Yk),e(Yk,MQe),e(mm,EQe),e(A,CQe),e(A,gm),e(gm,Are),e(Are,wQe),e(gm,AQe),e(gm,Kk),e(Kk,yQe),e(gm,LQe),e(A,xQe),e(A,hm),e(hm,yre),e(yre,$Qe),e(hm,kQe),e(hm,Zk),e(Zk,SQe),e(hm,RQe),e(A,PQe),e(A,pm),e(pm,Lre),e(Lre,BQe),e(pm,IQe),e(pm,eS),e(eS,NQe),e(pm,qQe),e(A,jQe),e(A,_m),e(_m,xre),e(xre,DQe),e(_m,GQe),e(_m,oS),e(oS,OQe),e(_m,VQe),e(A,XQe),e(A,um),e(um,$re),e($re,zQe),e(um,WQe),e(um,rS),e(rS,QQe),e(um,HQe),e(A,UQe),e(A,bm),e(bm,kre),e(kre,JQe),e(bm,YQe),e(bm,tS),e(tS,KQe),e(bm,ZQe),e(A,eHe),e(A,vm),e(vm,Sre),e(Sre,oHe),e(vm,rHe),e(vm,aS),e(aS,tHe),e(vm,aHe),e(A,nHe),e(A,Fm),e(Fm,Rre),e(Rre,sHe),e(Fm,lHe),e(Fm,nS),e(nS,iHe),e(Fm,dHe),e(A,cHe),e(A,Tm),e(Tm,Pre),e(Pre,fHe),e(Tm,mHe),e(Tm,sS),e(sS,gHe),e(Tm,hHe),e(A,pHe),e(A,Mm),e(Mm,Bre),e(Bre,_He),e(Mm,uHe),e(Mm,lS),e(lS,bHe),e(Mm,vHe),e(A,FHe),e(A,Em),e(Em,Ire),e(Ire,THe),e(Em,MHe),e(Em,iS),e(iS,EHe),e(Em,CHe),e(A,wHe),e(A,Cm),e(Cm,Nre),e(Nre,AHe),e(Cm,yHe),e(Cm,dS),e(dS,LHe),e(Cm,xHe),e(A,$He),e(A,wm),e(wm,qre),e(qre,kHe),e(wm,SHe),e(wm,cS),e(cS,RHe),e(wm,PHe),e(A,BHe),e(A,Am),e(Am,jre),e(jre,IHe),e(Am,NHe),e(Am,fS),e(fS,qHe),e(Am,jHe),e(A,DHe),e(A,ym),e(ym,Dre),e(Dre,GHe),e(ym,OHe),e(ym,mS),e(mS,VHe),e(ym,XHe),e(A,zHe),e(A,Lm),e(Lm,Gre),e(Gre,WHe),e(Lm,QHe),e(Lm,gS),e(gS,HHe),e(Lm,UHe),e(A,JHe),e(A,xm),e(xm,Ore),e(Ore,YHe),e(xm,KHe),e(xm,hS),e(hS,ZHe),e(xm,eUe),e(A,oUe),e(A,$m),e($m,Vre),e(Vre,rUe),e($m,tUe),e($m,pS),e(pS,aUe),e($m,nUe),e(A,sUe),e(A,km),e(km,Xre),e(Xre,lUe),e(km,iUe),e(km,_S),e(_S,dUe),e(km,cUe),e(A,fUe),e(A,Sm),e(Sm,zre),e(zre,mUe),e(Sm,gUe),e(Sm,uS),e(uS,hUe),e(Sm,pUe),e(A,_Ue),e(A,Rm),e(Rm,Wre),e(Wre,uUe),e(Rm,bUe),e(Rm,bS),e(bS,vUe),e(Rm,FUe),e(A,TUe),e(A,Pm),e(Pm,Qre),e(Qre,MUe),e(Pm,EUe),e(Pm,vS),e(vS,CUe),e(Pm,wUe),e(A,AUe),e(A,Bm),e(Bm,Hre),e(Hre,yUe),e(Bm,LUe),e(Bm,FS),e(FS,xUe),e(Bm,$Ue),e(A,kUe),e(A,Im),e(Im,Ure),e(Ure,SUe),e(Im,RUe),e(Im,TS),e(TS,PUe),e(Im,BUe),e(A,IUe),e(A,Nm),e(Nm,Jre),e(Jre,NUe),e(Nm,qUe),e(Nm,MS),e(MS,jUe),e(Nm,DUe),e(A,GUe),e(A,qm),e(qm,Yre),e(Yre,OUe),e(qm,VUe),e(qm,ES),e(ES,XUe),e(qm,zUe),e(A,WUe),e(A,jm),e(jm,Kre),e(Kre,QUe),e(jm,HUe),e(jm,CS),e(CS,UUe),e(jm,JUe),e(A,YUe),e(A,Dm),e(Dm,Zre),e(Zre,KUe),e(Dm,ZUe),e(Dm,wS),e(wS,eJe),e(Dm,oJe),e(A,rJe),e(A,Gm),e(Gm,ete),e(ete,tJe),e(Gm,aJe),e(Gm,AS),e(AS,nJe),e(Gm,sJe),e(A,lJe),e(A,Om),e(Om,ote),e(ote,iJe),e(Om,dJe),e(Om,yS),e(yS,cJe),e(Om,fJe),e(A,mJe),e(A,Vm),e(Vm,rte),e(rte,gJe),e(Vm,hJe),e(Vm,LS),e(LS,pJe),e(Vm,_Je),e(A,uJe),e(A,Xm),e(Xm,tte),e(tte,bJe),e(Xm,vJe),e(Xm,xS),e(xS,FJe),e(Xm,TJe),e(A,MJe),e(A,zm),e(zm,ate),e(ate,EJe),e(zm,CJe),e(zm,$S),e($S,wJe),e(zm,AJe),e(A,yJe),e(A,Wm),e(Wm,nte),e(nte,LJe),e(Wm,xJe),e(Wm,kS),e(kS,$Je),e(Wm,kJe),e(A,SJe),e(A,Qm),e(Qm,ste),e(ste,RJe),e(Qm,PJe),e(Qm,SS),e(SS,BJe),e(Qm,IJe),e(A,NJe),e(A,Hm),e(Hm,lte),e(lte,qJe),e(Hm,jJe),e(Hm,RS),e(RS,DJe),e(Hm,GJe),e(A,OJe),e(A,Um),e(Um,ite),e(ite,VJe),e(Um,XJe),e(Um,PS),e(PS,zJe),e(Um,WJe),e(A,QJe),e(A,Jm),e(Jm,dte),e(dte,HJe),e(Jm,UJe),e(Jm,BS),e(BS,JJe),e(Jm,YJe),e(A,KJe),e(A,Ym),e(Ym,cte),e(cte,ZJe),e(Ym,eYe),e(Ym,IS),e(IS,oYe),e(Ym,rYe),e(A,tYe),e(A,Km),e(Km,fte),e(fte,aYe),e(Km,nYe),e(Km,NS),e(NS,sYe),e(Km,lYe),e(A,iYe),e(A,Zm),e(Zm,mte),e(mte,dYe),e(Zm,cYe),e(Zm,qS),e(qS,fYe),e(Zm,mYe),e(A,gYe),e(A,eg),e(eg,gte),e(gte,hYe),e(eg,pYe),e(eg,jS),e(jS,_Ye),e(eg,uYe),e(A,bYe),e(A,og),e(og,hte),e(hte,vYe),e(og,FYe),e(og,DS),e(DS,TYe),e(og,MYe),e(A,EYe),e(A,rg),e(rg,pte),e(pte,CYe),e(rg,wYe),e(rg,GS),e(GS,AYe),e(rg,yYe),e(A,LYe),e(A,tg),e(tg,_te),e(_te,xYe),e(tg,$Ye),e(tg,OS),e(OS,kYe),e(tg,SYe),e(A,RYe),e(A,ag),e(ag,ute),e(ute,PYe),e(ag,BYe),e(ag,VS),e(VS,IYe),e(ag,NYe),e(A,qYe),e(A,ng),e(ng,bte),e(bte,jYe),e(ng,DYe),e(ng,XS),e(XS,GYe),e(ng,OYe),e(A,VYe),e(A,sg),e(sg,vte),e(vte,XYe),e(sg,zYe),e(sg,zS),e(zS,WYe),e(sg,QYe),e(A,HYe),e(A,lg),e(lg,Fte),e(Fte,UYe),e(lg,JYe),e(lg,WS),e(WS,YYe),e(lg,KYe),e(A,ZYe),e(A,ig),e(ig,Tte),e(Tte,eKe),e(ig,oKe),e(ig,QS),e(QS,rKe),e(ig,tKe),e(A,aKe),e(A,dg),e(dg,Mte),e(Mte,nKe),e(dg,sKe),e(dg,HS),e(HS,lKe),e(dg,iKe),e(A,dKe),e(A,cg),e(cg,Ete),e(Ete,cKe),e(cg,fKe),e(cg,US),e(US,mKe),e(cg,gKe),e(A,hKe),e(A,fg),e(fg,Cte),e(Cte,pKe),e(fg,_Ke),e(fg,JS),e(JS,uKe),e(fg,bKe),e(A,vKe),e(A,mg),e(mg,wte),e(wte,FKe),e(mg,TKe),e(mg,YS),e(YS,MKe),e(mg,EKe),e(A,CKe),e(A,gg),e(gg,Ate),e(Ate,wKe),e(gg,AKe),e(gg,KS),e(KS,yKe),e(gg,LKe),e(A,xKe),e(A,hg),e(hg,yte),e(yte,$Ke),e(hg,kKe),e(hg,ZS),e(ZS,SKe),e(hg,RKe),e(A,PKe),e(A,pg),e(pg,Lte),e(Lte,BKe),e(pg,IKe),e(pg,eR),e(eR,NKe),e(pg,qKe),e(A,jKe),e(A,_g),e(_g,xte),e(xte,DKe),e(_g,GKe),e(_g,oR),e(oR,OKe),e(_g,VKe),e(A,XKe),e(A,ug),e(ug,$te),e($te,zKe),e(ug,WKe),e(ug,rR),e(rR,QKe),e(ug,HKe),e(A,UKe),e(A,bg),e(bg,kte),e(kte,JKe),e(bg,YKe),e(bg,tR),e(tR,KKe),e(bg,ZKe),e(A,eZe),e(A,vg),e(vg,Ste),e(Ste,oZe),e(vg,rZe),e(vg,aR),e(aR,tZe),e(vg,aZe),e(A,nZe),e(A,Fg),e(Fg,Rte),e(Rte,sZe),e(Fg,lZe),e(Fg,nR),e(nR,iZe),e(Fg,dZe),e(A,cZe),e(A,Tg),e(Tg,Pte),e(Pte,fZe),e(Tg,mZe),e(Tg,sR),e(sR,gZe),e(Tg,hZe),e(A,pZe),e(A,Mg),e(Mg,Bte),e(Bte,_Ze),e(Mg,uZe),e(Mg,lR),e(lR,bZe),e(Mg,vZe),e(A,FZe),e(A,Eg),e(Eg,Ite),e(Ite,TZe),e(Eg,MZe),e(Eg,iR),e(iR,EZe),e(Eg,CZe),e(A,wZe),e(A,Cg),e(Cg,Nte),e(Nte,AZe),e(Cg,yZe),e(Cg,dR),e(dR,LZe),e(Cg,xZe),e(Er,$Ze),M(wg,Er,null),e(Co,kZe),e(Co,Ag),M(Vy,Ag,null),e(Ag,SZe),e(Ag,qte),e(qte,RZe),b(f,Oqe,u),b(f,Mi,u),e(Mi,yg),e(yg,jte),M(Xy,jte,null),e(Mi,PZe),e(Mi,Dte),e(Dte,BZe),b(f,Vqe,u),b(f,wo,u),M(zy,wo,null),e(wo,IZe),e(wo,Wy),e(Wy,NZe),e(Wy,cR),e(cR,qZe),e(Wy,jZe),e(wo,DZe),e(wo,Qy),e(Qy,GZe),e(Qy,Gte),e(Gte,OZe),e(Qy,VZe),e(wo,XZe),e(wo,Cr),M(Hy,Cr,null),e(Cr,zZe),e(Cr,Ote),e(Ote,WZe),e(Cr,QZe),e(Cr,Aa),e(Aa,HZe),e(Aa,Vte),e(Vte,UZe),e(Aa,JZe),e(Aa,Xte),e(Xte,YZe),e(Aa,KZe),e(Aa,zte),e(zte,ZZe),e(Aa,eeo),e(Cr,oeo),e(Cr,k),e(k,Sn),e(Sn,Wte),e(Wte,reo),e(Sn,teo),e(Sn,fR),e(fR,aeo),e(Sn,neo),e(Sn,mR),e(mR,seo),e(Sn,leo),e(k,ieo),e(k,Rn),e(Rn,Qte),e(Qte,deo),e(Rn,ceo),e(Rn,gR),e(gR,feo),e(Rn,meo),e(Rn,hR),e(hR,geo),e(Rn,heo),e(k,peo),e(k,Pn),e(Pn,Hte),e(Hte,_eo),e(Pn,ueo),e(Pn,pR),e(pR,beo),e(Pn,veo),e(Pn,_R),e(_R,Feo),e(Pn,Teo),e(k,Meo),e(k,Lg),e(Lg,Ute),e(Ute,Eeo),e(Lg,Ceo),e(Lg,uR),e(uR,weo),e(Lg,Aeo),e(k,yeo),e(k,Bn),e(Bn,Jte),e(Jte,Leo),e(Bn,xeo),e(Bn,bR),e(bR,$eo),e(Bn,keo),e(Bn,vR),e(vR,Seo),e(Bn,Reo),e(k,Peo),e(k,xg),e(xg,Yte),e(Yte,Beo),e(xg,Ieo),e(xg,FR),e(FR,Neo),e(xg,qeo),e(k,jeo),e(k,$g),e($g,Kte),e(Kte,Deo),e($g,Geo),e($g,TR),e(TR,Oeo),e($g,Veo),e(k,Xeo),e(k,kg),e(kg,Zte),e(Zte,zeo),e(kg,Weo),e(kg,MR),e(MR,Qeo),e(kg,Heo),e(k,Ueo),e(k,In),e(In,eae),e(eae,Jeo),e(In,Yeo),e(In,ER),e(ER,Keo),e(In,Zeo),e(In,CR),e(CR,eoo),e(In,ooo),e(k,roo),e(k,Nn),e(Nn,oae),e(oae,too),e(Nn,aoo),e(Nn,wR),e(wR,noo),e(Nn,soo),e(Nn,AR),e(AR,loo),e(Nn,ioo),e(k,doo),e(k,qn),e(qn,rae),e(rae,coo),e(qn,foo),e(qn,yR),e(yR,moo),e(qn,goo),e(qn,LR),e(LR,hoo),e(qn,poo),e(k,_oo),e(k,Sg),e(Sg,tae),e(tae,uoo),e(Sg,boo),e(Sg,xR),e(xR,voo),e(Sg,Foo),e(k,Too),e(k,Rg),e(Rg,aae),e(aae,Moo),e(Rg,Eoo),e(Rg,$R),e($R,Coo),e(Rg,woo),e(k,Aoo),e(k,jn),e(jn,nae),e(nae,yoo),e(jn,Loo),e(jn,kR),e(kR,xoo),e(jn,$oo),e(jn,SR),e(SR,koo),e(jn,Soo),e(k,Roo),e(k,Pg),e(Pg,sae),e(sae,Poo),e(Pg,Boo),e(Pg,RR),e(RR,Ioo),e(Pg,Noo),e(k,qoo),e(k,Dn),e(Dn,lae),e(lae,joo),e(Dn,Doo),e(Dn,PR),e(PR,Goo),e(Dn,Ooo),e(Dn,BR),e(BR,Voo),e(Dn,Xoo),e(k,zoo),e(k,Gn),e(Gn,iae),e(iae,Woo),e(Gn,Qoo),e(Gn,IR),e(IR,Hoo),e(Gn,Uoo),e(Gn,NR),e(NR,Joo),e(Gn,Yoo),e(k,Koo),e(k,On),e(On,dae),e(dae,Zoo),e(On,ero),e(On,qR),e(qR,oro),e(On,rro),e(On,jR),e(jR,tro),e(On,aro),e(k,nro),e(k,Bg),e(Bg,cae),e(cae,sro),e(Bg,lro),e(Bg,DR),e(DR,iro),e(Bg,dro),e(k,cro),e(k,Vn),e(Vn,fae),e(fae,fro),e(Vn,mro),e(Vn,GR),e(GR,gro),e(Vn,hro),e(Vn,OR),e(OR,pro),e(Vn,_ro),e(k,uro),e(k,Xn),e(Xn,mae),e(mae,bro),e(Xn,vro),e(Xn,VR),e(VR,Fro),e(Xn,Tro),e(Xn,XR),e(XR,Mro),e(Xn,Ero),e(k,Cro),e(k,zn),e(zn,gae),e(gae,wro),e(zn,Aro),e(zn,zR),e(zR,yro),e(zn,Lro),e(zn,WR),e(WR,xro),e(zn,$ro),e(k,kro),e(k,Wn),e(Wn,hae),e(hae,Sro),e(Wn,Rro),e(Wn,QR),e(QR,Pro),e(Wn,Bro),e(Wn,HR),e(HR,Iro),e(Wn,Nro),e(k,qro),e(k,Qn),e(Qn,pae),e(pae,jro),e(Qn,Dro),e(Qn,UR),e(UR,Gro),e(Qn,Oro),e(Qn,JR),e(JR,Vro),e(Qn,Xro),e(k,zro),e(k,Hn),e(Hn,_ae),e(_ae,Wro),e(Hn,Qro),e(Hn,YR),e(YR,Hro),e(Hn,Uro),e(Hn,KR),e(KR,Jro),e(Hn,Yro),e(k,Kro),e(k,Ig),e(Ig,uae),e(uae,Zro),e(Ig,eto),e(Ig,ZR),e(ZR,oto),e(Ig,rto),e(k,tto),e(k,Un),e(Un,bae),e(bae,ato),e(Un,nto),e(Un,eP),e(eP,sto),e(Un,lto),e(Un,oP),e(oP,ito),e(Un,dto),e(k,cto),e(k,Ng),e(Ng,vae),e(vae,fto),e(Ng,mto),e(Ng,rP),e(rP,gto),e(Ng,hto),e(k,pto),e(k,Jn),e(Jn,Fae),e(Fae,_to),e(Jn,uto),e(Jn,tP),e(tP,bto),e(Jn,vto),e(Jn,aP),e(aP,Fto),e(Jn,Tto),e(k,Mto),e(k,Yn),e(Yn,Tae),e(Tae,Eto),e(Yn,Cto),e(Yn,nP),e(nP,wto),e(Yn,Ato),e(Yn,sP),e(sP,yto),e(Yn,Lto),e(k,xto),e(k,Kn),e(Kn,Mae),e(Mae,$to),e(Kn,kto),e(Kn,lP),e(lP,Sto),e(Kn,Rto),e(Kn,iP),e(iP,Pto),e(Kn,Bto),e(k,Ito),e(k,qg),e(qg,Eae),e(Eae,Nto),e(qg,qto),e(qg,dP),e(dP,jto),e(qg,Dto),e(k,Gto),e(k,Zn),e(Zn,Cae),e(Cae,Oto),e(Zn,Vto),e(Zn,cP),e(cP,Xto),e(Zn,zto),e(Zn,fP),e(fP,Wto),e(Zn,Qto),e(k,Hto),e(k,es),e(es,wae),e(wae,Uto),e(es,Jto),e(es,mP),e(mP,Yto),e(es,Kto),e(es,gP),e(gP,Zto),e(es,eao),e(k,oao),e(k,jg),e(jg,Aae),e(Aae,rao),e(jg,tao),e(jg,hP),e(hP,aao),e(jg,nao),e(k,sao),e(k,os),e(os,yae),e(yae,lao),e(os,iao),e(os,pP),e(pP,dao),e(os,cao),e(os,_P),e(_P,fao),e(os,mao),e(k,gao),e(k,rs),e(rs,Lae),e(Lae,hao),e(rs,pao),e(rs,uP),e(uP,_ao),e(rs,uao),e(rs,bP),e(bP,bao),e(rs,vao),e(k,Fao),e(k,ts),e(ts,xae),e(xae,Tao),e(ts,Mao),e(ts,vP),e(vP,Eao),e(ts,Cao),e(ts,FP),e(FP,wao),e(ts,Aao),e(k,yao),e(k,as),e(as,$ae),e($ae,Lao),e(as,xao),e(as,TP),e(TP,$ao),e(as,kao),e(as,MP),e(MP,Sao),e(as,Rao),e(k,Pao),e(k,ns),e(ns,kae),e(kae,Bao),e(ns,Iao),e(ns,EP),e(EP,Nao),e(ns,qao),e(ns,CP),e(CP,jao),e(ns,Dao),e(k,Gao),e(k,ss),e(ss,Sae),e(Sae,Oao),e(ss,Vao),e(ss,wP),e(wP,Xao),e(ss,zao),e(ss,AP),e(AP,Wao),e(ss,Qao),e(k,Hao),e(k,ls),e(ls,Rae),e(Rae,Uao),e(ls,Jao),e(ls,yP),e(yP,Yao),e(ls,Kao),e(ls,LP),e(LP,Zao),e(ls,eno),e(k,ono),e(k,Dg),e(Dg,Pae),e(Pae,rno),e(Dg,tno),e(Dg,xP),e(xP,ano),e(Dg,nno),e(k,sno),e(k,is),e(is,Bae),e(Bae,lno),e(is,ino),e(is,$P),e($P,dno),e(is,cno),e(is,kP),e(kP,fno),e(is,mno),e(k,gno),e(k,Gg),e(Gg,Iae),e(Iae,hno),e(Gg,pno),e(Gg,SP),e(SP,_no),e(Gg,uno),e(k,bno),e(k,Og),e(Og,Nae),e(Nae,vno),e(Og,Fno),e(Og,RP),e(RP,Tno),e(Og,Mno),e(k,Eno),e(k,ds),e(ds,qae),e(qae,Cno),e(ds,wno),e(ds,PP),e(PP,Ano),e(ds,yno),e(ds,BP),e(BP,Lno),e(ds,xno),e(k,$no),e(k,cs),e(cs,jae),e(jae,kno),e(cs,Sno),e(cs,IP),e(IP,Rno),e(cs,Pno),e(cs,NP),e(NP,Bno),e(cs,Ino),e(k,Nno),e(k,fs),e(fs,Dae),e(Dae,qno),e(fs,jno),e(fs,qP),e(qP,Dno),e(fs,Gno),e(fs,jP),e(jP,Ono),e(fs,Vno),e(k,Xno),e(k,Vg),e(Vg,Gae),e(Gae,zno),e(Vg,Wno),e(Vg,DP),e(DP,Qno),e(Vg,Hno),e(k,Uno),e(k,ms),e(ms,Oae),e(Oae,Jno),e(ms,Yno),e(ms,GP),e(GP,Kno),e(ms,Zno),e(ms,OP),e(OP,eso),e(ms,oso),e(k,rso),e(k,gs),e(gs,Vae),e(Vae,tso),e(gs,aso),e(gs,VP),e(VP,nso),e(gs,sso),e(gs,XP),e(XP,lso),e(gs,iso),e(k,dso),e(k,hs),e(hs,Xae),e(Xae,cso),e(hs,fso),e(hs,zP),e(zP,mso),e(hs,gso),e(hs,WP),e(WP,hso),e(hs,pso),e(k,_so),e(k,ps),e(ps,zae),e(zae,uso),e(ps,bso),e(ps,QP),e(QP,vso),e(ps,Fso),e(ps,HP),e(HP,Tso),e(ps,Mso),e(k,Eso),e(k,_s),e(_s,Wae),e(Wae,Cso),e(_s,wso),e(_s,UP),e(UP,Aso),e(_s,yso),e(_s,JP),e(JP,Lso),e(_s,xso),e(k,$so),e(k,Xg),e(Xg,Qae),e(Qae,kso),e(Xg,Sso),e(Xg,YP),e(YP,Rso),e(Xg,Pso),e(k,Bso),e(k,us),e(us,Hae),e(Hae,Iso),e(us,Nso),e(us,KP),e(KP,qso),e(us,jso),e(us,ZP),e(ZP,Dso),e(us,Gso),e(k,Oso),e(k,zg),e(zg,Uae),e(Uae,Vso),e(zg,Xso),e(zg,eB),e(eB,zso),e(zg,Wso),e(k,Qso),e(k,Wg),e(Wg,Jae),e(Jae,Hso),e(Wg,Uso),e(Wg,oB),e(oB,Jso),e(Wg,Yso),e(k,Kso),e(k,Qg),e(Qg,Yae),e(Yae,Zso),e(Qg,elo),e(Qg,rB),e(rB,olo),e(Qg,rlo),e(k,tlo),e(k,Hg),e(Hg,Kae),e(Kae,alo),e(Hg,nlo),e(Hg,tB),e(tB,slo),e(Hg,llo),e(k,ilo),e(k,bs),e(bs,Zae),e(Zae,dlo),e(bs,clo),e(bs,aB),e(aB,flo),e(bs,mlo),e(bs,nB),e(nB,glo),e(bs,hlo),e(k,plo),e(k,Ug),e(Ug,ene),e(ene,_lo),e(Ug,ulo),e(Ug,sB),e(sB,blo),e(Ug,vlo),e(k,Flo),e(k,vs),e(vs,one),e(one,Tlo),e(vs,Mlo),e(vs,lB),e(lB,Elo),e(vs,Clo),e(vs,iB),e(iB,wlo),e(vs,Alo),e(k,ylo),e(k,Fs),e(Fs,rne),e(rne,Llo),e(Fs,xlo),e(Fs,dB),e(dB,$lo),e(Fs,klo),e(Fs,cB),e(cB,Slo),e(Fs,Rlo),e(k,Plo),e(k,Ts),e(Ts,tne),e(tne,Blo),e(Ts,Ilo),e(Ts,fB),e(fB,Nlo),e(Ts,qlo),e(Ts,mB),e(mB,jlo),e(Ts,Dlo),e(k,Glo),e(k,Ms),e(Ms,ane),e(ane,Olo),e(Ms,Vlo),e(Ms,gB),e(gB,Xlo),e(Ms,zlo),e(Ms,hB),e(hB,Wlo),e(Ms,Qlo),e(k,Hlo),e(k,Es),e(Es,nne),e(nne,Ulo),e(Es,Jlo),e(Es,pB),e(pB,Ylo),e(Es,Klo),e(Es,_B),e(_B,Zlo),e(Es,eio),e(k,oio),e(k,Cs),e(Cs,sne),e(sne,rio),e(Cs,tio),e(Cs,uB),e(uB,aio),e(Cs,nio),e(Cs,bB),e(bB,sio),e(Cs,lio),e(k,iio),e(k,Jg),e(Jg,lne),e(lne,dio),e(Jg,cio),e(Jg,vB),e(vB,fio),e(Jg,mio),e(k,gio),e(k,Yg),e(Yg,ine),e(ine,hio),e(Yg,pio),e(Yg,FB),e(FB,_io),e(Yg,uio),e(k,bio),e(k,ws),e(ws,dne),e(dne,vio),e(ws,Fio),e(ws,TB),e(TB,Tio),e(ws,Mio),e(ws,MB),e(MB,Eio),e(ws,Cio),e(k,wio),e(k,As),e(As,cne),e(cne,Aio),e(As,yio),e(As,EB),e(EB,Lio),e(As,xio),e(As,CB),e(CB,$io),e(As,kio),e(k,Sio),e(k,ys),e(ys,fne),e(fne,Rio),e(ys,Pio),e(ys,wB),e(wB,Bio),e(ys,Iio),e(ys,AB),e(AB,Nio),e(ys,qio),e(k,jio),e(k,Kg),e(Kg,mne),e(mne,Dio),e(Kg,Gio),e(Kg,yB),e(yB,Oio),e(Kg,Vio),e(k,Xio),e(k,Zg),e(Zg,gne),e(gne,zio),e(Zg,Wio),e(Zg,LB),e(LB,Qio),e(Zg,Hio),e(k,Uio),e(k,eh),e(eh,hne),e(hne,Jio),e(eh,Yio),e(eh,xB),e(xB,Kio),e(eh,Zio),e(k,edo),e(k,Ls),e(Ls,pne),e(pne,odo),e(Ls,rdo),e(Ls,$B),e($B,tdo),e(Ls,ado),e(Ls,kB),e(kB,ndo),e(Ls,sdo),e(k,ldo),e(k,oh),e(oh,_ne),e(_ne,ido),e(oh,ddo),e(oh,SB),e(SB,cdo),e(oh,fdo),e(k,mdo),e(k,rh),e(rh,une),e(une,gdo),e(rh,hdo),e(rh,RB),e(RB,pdo),e(rh,_do),e(k,udo),e(k,th),e(th,bne),e(bne,bdo),e(th,vdo),e(th,PB),e(PB,Fdo),e(th,Tdo),e(k,Mdo),e(k,xs),e(xs,vne),e(vne,Edo),e(xs,Cdo),e(xs,BB),e(BB,wdo),e(xs,Ado),e(xs,IB),e(IB,ydo),e(xs,Ldo),e(k,xdo),e(k,ah),e(ah,Fne),e(Fne,$do),e(ah,kdo),e(ah,NB),e(NB,Sdo),e(ah,Rdo),e(k,Pdo),e(k,nh),e(nh,Tne),e(Tne,Bdo),e(nh,Ido),e(nh,qB),e(qB,Ndo),e(nh,qdo),e(k,jdo),e(k,$s),e($s,Mne),e(Mne,Ddo),e($s,Gdo),e($s,jB),e(jB,Odo),e($s,Vdo),e($s,DB),e(DB,Xdo),e($s,zdo),e(k,Wdo),e(k,ks),e(ks,Ene),e(Ene,Qdo),e(ks,Hdo),e(ks,GB),e(GB,Udo),e(ks,Jdo),e(ks,OB),e(OB,Ydo),e(ks,Kdo),e(k,Zdo),e(k,Ss),e(Ss,Cne),e(Cne,eco),e(Ss,oco),e(Ss,VB),e(VB,rco),e(Ss,tco),e(Ss,XB),e(XB,aco),e(Ss,nco),e(k,sco),e(k,Rs),e(Rs,wne),e(wne,lco),e(Rs,ico),e(Rs,zB),e(zB,dco),e(Rs,cco),e(Rs,WB),e(WB,fco),e(Rs,mco),e(Cr,gco),M(sh,Cr,null),e(wo,hco),e(wo,lh),M(Uy,lh,null),e(lh,pco),e(lh,Ane),e(Ane,_co),b(f,Xqe,u),b(f,Ei,u),e(Ei,ih),e(ih,yne),M(Jy,yne,null),e(Ei,uco),e(Ei,Lne),e(Lne,bco),b(f,zqe,u),b(f,Ao,u),M(Yy,Ao,null),e(Ao,vco),e(Ao,Ky),e(Ky,Fco),e(Ky,QB),e(QB,Tco),e(Ky,Mco),e(Ao,Eco),e(Ao,Zy),e(Zy,Cco),e(Zy,xne),e(xne,wco),e(Zy,Aco),e(Ao,yco),e(Ao,He),M(eL,He,null),e(He,Lco),e(He,$ne),e($ne,xco),e(He,$co),e(He,ya),e(ya,kco),e(ya,kne),e(kne,Sco),e(ya,Rco),e(ya,Sne),e(Sne,Pco),e(ya,Bco),e(ya,Rne),e(Rne,Ico),e(ya,Nco),e(He,qco),e(He,Y),e(Y,dh),e(dh,Pne),e(Pne,jco),e(dh,Dco),e(dh,HB),e(HB,Gco),e(dh,Oco),e(Y,Vco),e(Y,ch),e(ch,Bne),e(Bne,Xco),e(ch,zco),e(ch,UB),e(UB,Wco),e(ch,Qco),e(Y,Hco),e(Y,fh),e(fh,Ine),e(Ine,Uco),e(fh,Jco),e(fh,JB),e(JB,Yco),e(fh,Kco),e(Y,Zco),e(Y,mh),e(mh,Nne),e(Nne,efo),e(mh,ofo),e(mh,YB),e(YB,rfo),e(mh,tfo),e(Y,afo),e(Y,gh),e(gh,qne),e(qne,nfo),e(gh,sfo),e(gh,KB),e(KB,lfo),e(gh,ifo),e(Y,dfo),e(Y,hh),e(hh,jne),e(jne,cfo),e(hh,ffo),e(hh,ZB),e(ZB,mfo),e(hh,gfo),e(Y,hfo),e(Y,ph),e(ph,Dne),e(Dne,pfo),e(ph,_fo),e(ph,eI),e(eI,ufo),e(ph,bfo),e(Y,vfo),e(Y,_h),e(_h,Gne),e(Gne,Ffo),e(_h,Tfo),e(_h,oI),e(oI,Mfo),e(_h,Efo),e(Y,Cfo),e(Y,uh),e(uh,One),e(One,wfo),e(uh,Afo),e(uh,rI),e(rI,yfo),e(uh,Lfo),e(Y,xfo),e(Y,bh),e(bh,Vne),e(Vne,$fo),e(bh,kfo),e(bh,tI),e(tI,Sfo),e(bh,Rfo),e(Y,Pfo),e(Y,vh),e(vh,Xne),e(Xne,Bfo),e(vh,Ifo),e(vh,aI),e(aI,Nfo),e(vh,qfo),e(Y,jfo),e(Y,Fh),e(Fh,zne),e(zne,Dfo),e(Fh,Gfo),e(Fh,nI),e(nI,Ofo),e(Fh,Vfo),e(Y,Xfo),e(Y,Th),e(Th,Wne),e(Wne,zfo),e(Th,Wfo),e(Th,sI),e(sI,Qfo),e(Th,Hfo),e(Y,Ufo),e(Y,Mh),e(Mh,Qne),e(Qne,Jfo),e(Mh,Yfo),e(Mh,lI),e(lI,Kfo),e(Mh,Zfo),e(Y,emo),e(Y,Eh),e(Eh,Hne),e(Hne,omo),e(Eh,rmo),e(Eh,iI),e(iI,tmo),e(Eh,amo),e(Y,nmo),e(Y,Ch),e(Ch,Une),e(Une,smo),e(Ch,lmo),e(Ch,dI),e(dI,imo),e(Ch,dmo),e(Y,cmo),e(Y,wh),e(wh,Jne),e(Jne,fmo),e(wh,mmo),e(wh,cI),e(cI,gmo),e(wh,hmo),e(Y,pmo),e(Y,Ah),e(Ah,Yne),e(Yne,_mo),e(Ah,umo),e(Ah,fI),e(fI,bmo),e(Ah,vmo),e(Y,Fmo),e(Y,yh),e(yh,Kne),e(Kne,Tmo),e(yh,Mmo),e(yh,mI),e(mI,Emo),e(yh,Cmo),e(Y,wmo),e(Y,Lh),e(Lh,Zne),e(Zne,Amo),e(Lh,ymo),e(Lh,gI),e(gI,Lmo),e(Lh,xmo),e(Y,$mo),e(Y,xh),e(xh,ese),e(ese,kmo),e(xh,Smo),e(xh,hI),e(hI,Rmo),e(xh,Pmo),e(Y,Bmo),e(Y,$h),e($h,ose),e(ose,Imo),e($h,Nmo),e($h,pI),e(pI,qmo),e($h,jmo),e(Y,Dmo),e(Y,kh),e(kh,rse),e(rse,Gmo),e(kh,Omo),e(kh,_I),e(_I,Vmo),e(kh,Xmo),e(Y,zmo),e(Y,Sh),e(Sh,tse),e(tse,Wmo),e(Sh,Qmo),e(Sh,uI),e(uI,Hmo),e(Sh,Umo),e(Y,Jmo),e(Y,Rh),e(Rh,ase),e(ase,Ymo),e(Rh,Kmo),e(Rh,bI),e(bI,Zmo),e(Rh,ego),e(Y,ogo),e(Y,Ph),e(Ph,nse),e(nse,rgo),e(Ph,tgo),e(Ph,vI),e(vI,ago),e(Ph,ngo),e(Y,sgo),e(Y,Bh),e(Bh,sse),e(sse,lgo),e(Bh,igo),e(Bh,FI),e(FI,dgo),e(Bh,cgo),e(Y,fgo),e(Y,Ih),e(Ih,lse),e(lse,mgo),e(Ih,ggo),e(Ih,TI),e(TI,hgo),e(Ih,pgo),e(Y,_go),e(Y,Nh),e(Nh,ise),e(ise,ugo),e(Nh,bgo),e(Nh,MI),e(MI,vgo),e(Nh,Fgo),e(Y,Tgo),e(Y,qh),e(qh,dse),e(dse,Mgo),e(qh,Ego),e(qh,EI),e(EI,Cgo),e(qh,wgo),e(He,Ago),M(jh,He,null),e(He,ygo),M(Dh,He,null),e(Ao,Lgo),e(Ao,Gh),M(oL,Gh,null),e(Gh,xgo),e(Gh,cse),e(cse,$go),b(f,Wqe,u),b(f,Ci,u),e(Ci,Oh),e(Oh,fse),M(rL,fse,null),e(Ci,kgo),e(Ci,mse),e(mse,Sgo),b(f,Qqe,u),b(f,yo,u),M(tL,yo,null),e(yo,Rgo),e(yo,aL),e(aL,Pgo),e(aL,CI),e(CI,Bgo),e(aL,Igo),e(yo,Ngo),e(yo,nL),e(nL,qgo),e(nL,gse),e(gse,jgo),e(nL,Dgo),e(yo,Ggo),e(yo,Ue),M(sL,Ue,null),e(Ue,Ogo),e(Ue,hse),e(hse,Vgo),e(Ue,Xgo),e(Ue,wi),e(wi,zgo),e(wi,pse),e(pse,Wgo),e(wi,Qgo),e(wi,_se),e(_se,Hgo),e(wi,Ugo),e(Ue,Jgo),e(Ue,he),e(he,Vh),e(Vh,use),e(use,Ygo),e(Vh,Kgo),e(Vh,wI),e(wI,Zgo),e(Vh,eho),e(he,oho),e(he,Xh),e(Xh,bse),e(bse,rho),e(Xh,tho),e(Xh,vse),e(vse,aho),e(Xh,nho),e(he,sho),e(he,zh),e(zh,Fse),e(Fse,lho),e(zh,iho),e(zh,AI),e(AI,dho),e(zh,cho),e(he,fho),e(he,Wh),e(Wh,Tse),e(Tse,mho),e(Wh,gho),e(Wh,yI),e(yI,hho),e(Wh,pho),e(he,_ho),e(he,Qh),e(Qh,Mse),e(Mse,uho),e(Qh,bho),e(Qh,LI),e(LI,vho),e(Qh,Fho),e(he,Tho),e(he,Hh),e(Hh,Ese),e(Ese,Mho),e(Hh,Eho),e(Hh,xI),e(xI,Cho),e(Hh,who),e(he,Aho),e(he,Uh),e(Uh,Cse),e(Cse,yho),e(Uh,Lho),e(Uh,$I),e($I,xho),e(Uh,$ho),e(he,kho),e(he,Jh),e(Jh,wse),e(wse,Sho),e(Jh,Rho),e(Jh,kI),e(kI,Pho),e(Jh,Bho),e(he,Iho),e(he,Yh),e(Yh,Ase),e(Ase,Nho),e(Yh,qho),e(Yh,SI),e(SI,jho),e(Yh,Dho),e(he,Gho),e(he,Kh),e(Kh,yse),e(yse,Oho),e(Kh,Vho),e(Kh,RI),e(RI,Xho),e(Kh,zho),e(he,Who),e(he,Zh),e(Zh,Lse),e(Lse,Qho),e(Zh,Hho),e(Zh,PI),e(PI,Uho),e(Zh,Jho),e(he,Yho),e(he,ep),e(ep,xse),e(xse,Kho),e(ep,Zho),e(ep,BI),e(BI,epo),e(ep,opo),e(he,rpo),e(he,op),e(op,$se),e($se,tpo),e(op,apo),e(op,II),e(II,npo),e(op,spo),e(he,lpo),e(he,rp),e(rp,kse),e(kse,ipo),e(rp,dpo),e(rp,NI),e(NI,cpo),e(rp,fpo),e(he,mpo),e(he,tp),e(tp,Sse),e(Sse,gpo),e(tp,hpo),e(tp,qI),e(qI,ppo),e(tp,_po),e(he,upo),e(he,ap),e(ap,Rse),e(Rse,bpo),e(ap,vpo),e(ap,jI),e(jI,Fpo),e(ap,Tpo),e(he,Mpo),e(he,np),e(np,Pse),e(Pse,Epo),e(np,Cpo),e(np,DI),e(DI,wpo),e(np,Apo),e(Ue,ypo),M(sp,Ue,null),e(Ue,Lpo),M(lp,Ue,null),e(yo,xpo),e(yo,ip),M(lL,ip,null),e(ip,$po),e(ip,Bse),e(Bse,kpo),b(f,Hqe,u),b(f,Ai,u),e(Ai,dp),e(dp,Ise),M(iL,Ise,null),e(Ai,Spo),e(Ai,Nse),e(Nse,Rpo),b(f,Uqe,u),b(f,Lo,u),M(dL,Lo,null),e(Lo,Ppo),e(Lo,yi),e(yi,Bpo),e(yi,GI),e(GI,Ipo),e(yi,Npo),e(yi,OI),e(OI,qpo),e(yi,jpo),e(Lo,Dpo),e(Lo,cL),e(cL,Gpo),e(cL,qse),e(qse,Opo),e(cL,Vpo),e(Lo,Xpo),e(Lo,tt),M(fL,tt,null),e(tt,zpo),e(tt,jse),e(jse,Wpo),e(tt,Qpo),e(tt,Li),e(Li,Hpo),e(Li,Dse),e(Dse,Upo),e(Li,Jpo),e(Li,VI),e(VI,Ypo),e(Li,Kpo),e(tt,Zpo),M(cp,tt,null),e(Lo,e_o),e(Lo,Je),M(mL,Je,null),e(Je,o_o),e(Je,Gse),e(Gse,r_o),e(Je,t_o),e(Je,La),e(La,a_o),e(La,Ose),e(Ose,n_o),e(La,s_o),e(La,Vse),e(Vse,l_o),e(La,i_o),e(La,Xse),e(Xse,d_o),e(La,c_o),e(Je,f_o),e(Je,x),e(x,fp),e(fp,zse),e(zse,m_o),e(fp,g_o),e(fp,XI),e(XI,h_o),e(fp,p_o),e(x,__o),e(x,mp),e(mp,Wse),e(Wse,u_o),e(mp,b_o),e(mp,zI),e(zI,v_o),e(mp,F_o),e(x,T_o),e(x,gp),e(gp,Qse),e(Qse,M_o),e(gp,E_o),e(gp,WI),e(WI,C_o),e(gp,w_o),e(x,A_o),e(x,hp),e(hp,Hse),e(Hse,y_o),e(hp,L_o),e(hp,QI),e(QI,x_o),e(hp,$_o),e(x,k_o),e(x,pp),e(pp,Use),e(Use,S_o),e(pp,R_o),e(pp,HI),e(HI,P_o),e(pp,B_o),e(x,I_o),e(x,_p),e(_p,Jse),e(Jse,N_o),e(_p,q_o),e(_p,UI),e(UI,j_o),e(_p,D_o),e(x,G_o),e(x,up),e(up,Yse),e(Yse,O_o),e(up,V_o),e(up,JI),e(JI,X_o),e(up,z_o),e(x,W_o),e(x,bp),e(bp,Kse),e(Kse,Q_o),e(bp,H_o),e(bp,YI),e(YI,U_o),e(bp,J_o),e(x,Y_o),e(x,vp),e(vp,Zse),e(Zse,K_o),e(vp,Z_o),e(vp,KI),e(KI,euo),e(vp,ouo),e(x,ruo),e(x,Fp),e(Fp,ele),e(ele,tuo),e(Fp,auo),e(Fp,ZI),e(ZI,nuo),e(Fp,suo),e(x,luo),e(x,Tp),e(Tp,ole),e(ole,iuo),e(Tp,duo),e(Tp,eN),e(eN,cuo),e(Tp,fuo),e(x,muo),e(x,Mp),e(Mp,rle),e(rle,guo),e(Mp,huo),e(Mp,oN),e(oN,puo),e(Mp,_uo),e(x,uuo),e(x,Ep),e(Ep,tle),e(tle,buo),e(Ep,vuo),e(Ep,rN),e(rN,Fuo),e(Ep,Tuo),e(x,Muo),e(x,Cp),e(Cp,ale),e(ale,Euo),e(Cp,Cuo),e(Cp,tN),e(tN,wuo),e(Cp,Auo),e(x,yuo),e(x,wp),e(wp,nle),e(nle,Luo),e(wp,xuo),e(wp,aN),e(aN,$uo),e(wp,kuo),e(x,Suo),e(x,Ap),e(Ap,sle),e(sle,Ruo),e(Ap,Puo),e(Ap,nN),e(nN,Buo),e(Ap,Iuo),e(x,Nuo),e(x,yp),e(yp,lle),e(lle,quo),e(yp,juo),e(yp,sN),e(sN,Duo),e(yp,Guo),e(x,Ouo),e(x,Lp),e(Lp,ile),e(ile,Vuo),e(Lp,Xuo),e(Lp,lN),e(lN,zuo),e(Lp,Wuo),e(x,Quo),e(x,xp),e(xp,dle),e(dle,Huo),e(xp,Uuo),e(xp,iN),e(iN,Juo),e(xp,Yuo),e(x,Kuo),e(x,$p),e($p,cle),e(cle,Zuo),e($p,ebo),e($p,dN),e(dN,obo),e($p,rbo),e(x,tbo),e(x,kp),e(kp,fle),e(fle,abo),e(kp,nbo),e(kp,cN),e(cN,sbo),e(kp,lbo),e(x,ibo),e(x,Sp),e(Sp,mle),e(mle,dbo),e(Sp,cbo),e(Sp,fN),e(fN,fbo),e(Sp,mbo),e(x,gbo),e(x,Rp),e(Rp,gle),e(gle,hbo),e(Rp,pbo),e(Rp,mN),e(mN,_bo),e(Rp,ubo),e(x,bbo),e(x,Pp),e(Pp,hle),e(hle,vbo),e(Pp,Fbo),e(Pp,gN),e(gN,Tbo),e(Pp,Mbo),e(x,Ebo),e(x,Bp),e(Bp,ple),e(ple,Cbo),e(Bp,wbo),e(Bp,hN),e(hN,Abo),e(Bp,ybo),e(x,Lbo),e(x,Ip),e(Ip,_le),e(_le,xbo),e(Ip,$bo),e(Ip,pN),e(pN,kbo),e(Ip,Sbo),e(x,Rbo),e(x,Np),e(Np,ule),e(ule,Pbo),e(Np,Bbo),e(Np,_N),e(_N,Ibo),e(Np,Nbo),e(x,qbo),e(x,qp),e(qp,ble),e(ble,jbo),e(qp,Dbo),e(qp,uN),e(uN,Gbo),e(qp,Obo),e(x,Vbo),e(x,jp),e(jp,vle),e(vle,Xbo),e(jp,zbo),e(jp,bN),e(bN,Wbo),e(jp,Qbo),e(x,Hbo),e(x,Dp),e(Dp,Fle),e(Fle,Ubo),e(Dp,Jbo),e(Dp,vN),e(vN,Ybo),e(Dp,Kbo),e(x,Zbo),e(x,Gp),e(Gp,Tle),e(Tle,e2o),e(Gp,o2o),e(Gp,FN),e(FN,r2o),e(Gp,t2o),e(x,a2o),e(x,Op),e(Op,Mle),e(Mle,n2o),e(Op,s2o),e(Op,TN),e(TN,l2o),e(Op,i2o),e(x,d2o),e(x,Ps),e(Ps,Ele),e(Ele,c2o),e(Ps,f2o),e(Ps,MN),e(MN,m2o),e(Ps,g2o),e(Ps,EN),e(EN,h2o),e(Ps,p2o),e(x,_2o),e(x,Vp),e(Vp,Cle),e(Cle,u2o),e(Vp,b2o),e(Vp,CN),e(CN,v2o),e(Vp,F2o),e(x,T2o),e(x,Xp),e(Xp,wle),e(wle,M2o),e(Xp,E2o),e(Xp,wN),e(wN,C2o),e(Xp,w2o),e(x,A2o),e(x,zp),e(zp,Ale),e(Ale,y2o),e(zp,L2o),e(zp,AN),e(AN,x2o),e(zp,$2o),e(x,k2o),e(x,Wp),e(Wp,yle),e(yle,S2o),e(Wp,R2o),e(Wp,yN),e(yN,P2o),e(Wp,B2o),e(x,I2o),e(x,Qp),e(Qp,Lle),e(Lle,N2o),e(Qp,q2o),e(Qp,LN),e(LN,j2o),e(Qp,D2o),e(x,G2o),e(x,Hp),e(Hp,xle),e(xle,O2o),e(Hp,V2o),e(Hp,xN),e(xN,X2o),e(Hp,z2o),e(x,W2o),e(x,Up),e(Up,$le),e($le,Q2o),e(Up,H2o),e(Up,$N),e($N,U2o),e(Up,J2o),e(x,Y2o),e(x,Jp),e(Jp,kle),e(kle,K2o),e(Jp,Z2o),e(Jp,kN),e(kN,evo),e(Jp,ovo),e(x,rvo),e(x,Yp),e(Yp,Sle),e(Sle,tvo),e(Yp,avo),e(Yp,SN),e(SN,nvo),e(Yp,svo),e(x,lvo),e(x,Kp),e(Kp,Rle),e(Rle,ivo),e(Kp,dvo),e(Kp,RN),e(RN,cvo),e(Kp,fvo),e(x,mvo),e(x,Zp),e(Zp,Ple),e(Ple,gvo),e(Zp,hvo),e(Zp,PN),e(PN,pvo),e(Zp,_vo),e(x,uvo),e(x,e_),e(e_,Ble),e(Ble,bvo),e(e_,vvo),e(e_,BN),e(BN,Fvo),e(e_,Tvo),e(x,Mvo),e(x,o_),e(o_,Ile),e(Ile,Evo),e(o_,Cvo),e(o_,IN),e(IN,wvo),e(o_,Avo),e(x,yvo),e(x,r_),e(r_,Nle),e(Nle,Lvo),e(r_,xvo),e(r_,NN),e(NN,$vo),e(r_,kvo),e(x,Svo),e(x,t_),e(t_,qle),e(qle,Rvo),e(t_,Pvo),e(t_,qN),e(qN,Bvo),e(t_,Ivo),e(x,Nvo),e(x,a_),e(a_,jle),e(jle,qvo),e(a_,jvo),e(a_,jN),e(jN,Dvo),e(a_,Gvo),e(x,Ovo),e(x,n_),e(n_,Dle),e(Dle,Vvo),e(n_,Xvo),e(n_,DN),e(DN,zvo),e(n_,Wvo),e(x,Qvo),e(x,s_),e(s_,Gle),e(Gle,Hvo),e(s_,Uvo),e(s_,GN),e(GN,Jvo),e(s_,Yvo),e(x,Kvo),e(x,l_),e(l_,Ole),e(Ole,Zvo),e(l_,eFo),e(l_,ON),e(ON,oFo),e(l_,rFo),e(x,tFo),e(x,i_),e(i_,Vle),e(Vle,aFo),e(i_,nFo),e(i_,VN),e(VN,sFo),e(i_,lFo),e(x,iFo),e(x,d_),e(d_,Xle),e(Xle,dFo),e(d_,cFo),e(d_,XN),e(XN,fFo),e(d_,mFo),e(x,gFo),e(x,c_),e(c_,zle),e(zle,hFo),e(c_,pFo),e(c_,zN),e(zN,_Fo),e(c_,uFo),e(x,bFo),e(x,f_),e(f_,Wle),e(Wle,vFo),e(f_,FFo),e(f_,WN),e(WN,TFo),e(f_,MFo),e(x,EFo),e(x,m_),e(m_,Qle),e(Qle,CFo),e(m_,wFo),e(m_,QN),e(QN,AFo),e(m_,yFo),e(x,LFo),e(x,g_),e(g_,Hle),e(Hle,xFo),e(g_,$Fo),e(g_,HN),e(HN,kFo),e(g_,SFo),e(x,RFo),e(x,h_),e(h_,Ule),e(Ule,PFo),e(h_,BFo),e(h_,UN),e(UN,IFo),e(h_,NFo),e(x,qFo),e(x,p_),e(p_,Jle),e(Jle,jFo),e(p_,DFo),e(p_,JN),e(JN,GFo),e(p_,OFo),e(x,VFo),e(x,__),e(__,Yle),e(Yle,XFo),e(__,zFo),e(__,YN),e(YN,WFo),e(__,QFo),e(x,HFo),e(x,u_),e(u_,Kle),e(Kle,UFo),e(u_,JFo),e(u_,KN),e(KN,YFo),e(u_,KFo),e(x,ZFo),e(x,b_),e(b_,Zle),e(Zle,e6o),e(b_,o6o),e(b_,ZN),e(ZN,r6o),e(b_,t6o),e(x,a6o),e(x,v_),e(v_,eie),e(eie,n6o),e(v_,s6o),e(v_,eq),e(eq,l6o),e(v_,i6o),e(x,d6o),e(x,F_),e(F_,oie),e(oie,c6o),e(F_,f6o),e(F_,oq),e(oq,m6o),e(F_,g6o),e(x,h6o),e(x,T_),e(T_,rie),e(rie,p6o),e(T_,_6o),e(T_,rq),e(rq,u6o),e(T_,b6o),e(x,v6o),e(x,M_),e(M_,tie),e(tie,F6o),e(M_,T6o),e(M_,tq),e(tq,M6o),e(M_,E6o),e(x,C6o),e(x,E_),e(E_,aie),e(aie,w6o),e(E_,A6o),e(E_,aq),e(aq,y6o),e(E_,L6o),e(x,x6o),e(x,C_),e(C_,nie),e(nie,$6o),e(C_,k6o),e(C_,nq),e(nq,S6o),e(C_,R6o),e(x,P6o),e(x,w_),e(w_,sie),e(sie,B6o),e(w_,I6o),e(w_,sq),e(sq,N6o),e(w_,q6o),e(x,j6o),e(x,A_),e(A_,lie),e(lie,D6o),e(A_,G6o),e(A_,lq),e(lq,O6o),e(A_,V6o),e(x,X6o),e(x,y_),e(y_,iie),e(iie,z6o),e(y_,W6o),e(y_,iq),e(iq,Q6o),e(y_,H6o),e(x,U6o),e(x,L_),e(L_,die),e(die,J6o),e(L_,Y6o),e(L_,dq),e(dq,K6o),e(L_,Z6o),e(x,e1o),e(x,x_),e(x_,cie),e(cie,o1o),e(x_,r1o),e(x_,cq),e(cq,t1o),e(x_,a1o),e(x,n1o),e(x,$_),e($_,fie),e(fie,s1o),e($_,l1o),e($_,fq),e(fq,i1o),e($_,d1o),e(x,c1o),e(x,k_),e(k_,mie),e(mie,f1o),e(k_,m1o),e(k_,mq),e(mq,g1o),e(k_,h1o),e(x,p1o),e(x,S_),e(S_,gie),e(gie,_1o),e(S_,u1o),e(S_,gq),e(gq,b1o),e(S_,v1o),e(x,F1o),e(x,R_),e(R_,hie),e(hie,T1o),e(R_,M1o),e(R_,hq),e(hq,E1o),e(R_,C1o),e(x,w1o),e(x,P_),e(P_,pie),e(pie,A1o),e(P_,y1o),e(P_,pq),e(pq,L1o),e(P_,x1o),e(x,$1o),e(x,B_),e(B_,_ie),e(_ie,k1o),e(B_,S1o),e(B_,_q),e(_q,R1o),e(B_,P1o),e(x,B1o),e(x,I_),e(I_,uie),e(uie,I1o),e(I_,N1o),e(I_,uq),e(uq,q1o),e(I_,j1o),e(x,D1o),e(x,N_),e(N_,bie),e(bie,G1o),e(N_,O1o),e(N_,bq),e(bq,V1o),e(N_,X1o),e(x,z1o),e(x,q_),e(q_,vie),e(vie,W1o),e(q_,Q1o),e(q_,vq),e(vq,H1o),e(q_,U1o),e(x,J1o),e(x,j_),e(j_,Fie),e(Fie,Y1o),e(j_,K1o),e(j_,Fq),e(Fq,Z1o),e(j_,eTo),e(x,oTo),e(x,D_),e(D_,Tie),e(Tie,rTo),e(D_,tTo),e(D_,Tq),e(Tq,aTo),e(D_,nTo),e(x,sTo),e(x,G_),e(G_,Mie),e(Mie,lTo),e(G_,iTo),e(G_,Mq),e(Mq,dTo),e(G_,cTo),e(x,fTo),e(x,O_),e(O_,Eie),e(Eie,mTo),e(O_,gTo),e(O_,Eq),e(Eq,hTo),e(O_,pTo),e(x,_To),e(x,V_),e(V_,Cie),e(Cie,uTo),e(V_,bTo),e(V_,Cq),e(Cq,vTo),e(V_,FTo),e(x,TTo),e(x,X_),e(X_,wie),e(wie,MTo),e(X_,ETo),e(X_,wq),e(wq,CTo),e(X_,wTo),e(x,ATo),e(x,z_),e(z_,Aie),e(Aie,yTo),e(z_,LTo),e(z_,Aq),e(Aq,xTo),e(z_,$To),e(x,kTo),e(x,W_),e(W_,yie),e(yie,STo),e(W_,RTo),e(W_,yq),e(yq,PTo),e(W_,BTo),e(x,ITo),e(x,Q_),e(Q_,Lie),e(Lie,NTo),e(Q_,qTo),e(Q_,Lq),e(Lq,jTo),e(Q_,DTo),e(x,GTo),e(x,H_),e(H_,xie),e(xie,OTo),e(H_,VTo),e(H_,xq),e(xq,XTo),e(H_,zTo),e(x,WTo),e(x,U_),e(U_,$ie),e($ie,QTo),e(U_,HTo),e(U_,$q),e($q,UTo),e(U_,JTo),e(x,YTo),e(x,J_),e(J_,kie),e(kie,KTo),e(J_,ZTo),e(J_,kq),e(kq,eMo),e(J_,oMo),e(x,rMo),e(x,Y_),e(Y_,Sie),e(Sie,tMo),e(Y_,aMo),e(Y_,Sq),e(Sq,nMo),e(Y_,sMo),e(x,lMo),e(x,K_),e(K_,Rie),e(Rie,iMo),e(K_,dMo),e(K_,Rq),e(Rq,cMo),e(K_,fMo),e(x,mMo),e(x,Z_),e(Z_,Pie),e(Pie,gMo),e(Z_,hMo),e(Z_,Pq),e(Pq,pMo),e(Z_,_Mo),e(x,uMo),e(x,eu),e(eu,Bie),e(Bie,bMo),e(eu,vMo),e(eu,Bq),e(Bq,FMo),e(eu,TMo),e(x,MMo),e(x,ou),e(ou,Iie),e(Iie,EMo),e(ou,CMo),e(ou,Iq),e(Iq,wMo),e(ou,AMo),e(x,yMo),e(x,ru),e(ru,Nie),e(Nie,LMo),e(ru,xMo),e(ru,Nq),e(Nq,$Mo),e(ru,kMo),e(x,SMo),e(x,tu),e(tu,qie),e(qie,RMo),e(tu,PMo),e(tu,qq),e(qq,BMo),e(tu,IMo),e(x,NMo),e(x,au),e(au,jie),e(jie,qMo),e(au,jMo),e(au,jq),e(jq,DMo),e(au,GMo),e(Je,OMo),e(Je,nu),e(nu,VMo),e(nu,Die),e(Die,XMo),e(nu,zMo),e(nu,Gie),e(Gie,WMo),e(Je,QMo),M(su,Je,null),b(f,Jqe,u),b(f,xi,u),e(xi,lu),e(lu,Oie),M(gL,Oie,null),e(xi,HMo),e(xi,Vie),e(Vie,UMo),b(f,Yqe,u),b(f,xo,u),M(hL,xo,null),e(xo,JMo),e(xo,$i),e($i,YMo),e($i,Dq),e(Dq,KMo),e($i,ZMo),e($i,Gq),e(Gq,e4o),e($i,o4o),e(xo,r4o),e(xo,pL),e(pL,t4o),e(pL,Xie),e(Xie,a4o),e(pL,n4o),e(xo,s4o),e(xo,at),M(_L,at,null),e(at,l4o),e(at,zie),e(zie,i4o),e(at,d4o),e(at,ki),e(ki,c4o),e(ki,Wie),e(Wie,f4o),e(ki,m4o),e(ki,Oq),e(Oq,g4o),e(ki,h4o),e(at,p4o),M(iu,at,null),e(xo,_4o),e(xo,Ye),M(uL,Ye,null),e(Ye,u4o),e(Ye,Qie),e(Qie,b4o),e(Ye,v4o),e(Ye,xa),e(xa,F4o),e(xa,Hie),e(Hie,T4o),e(xa,M4o),e(xa,Uie),e(Uie,E4o),e(xa,C4o),e(xa,Jie),e(Jie,w4o),e(xa,A4o),e(Ye,y4o),e(Ye,G),e(G,du),e(du,Yie),e(Yie,L4o),e(du,x4o),e(du,Vq),e(Vq,$4o),e(du,k4o),e(G,S4o),e(G,cu),e(cu,Kie),e(Kie,R4o),e(cu,P4o),e(cu,Xq),e(Xq,B4o),e(cu,I4o),e(G,N4o),e(G,fu),e(fu,Zie),e(Zie,q4o),e(fu,j4o),e(fu,zq),e(zq,D4o),e(fu,G4o),e(G,O4o),e(G,mu),e(mu,ede),e(ede,V4o),e(mu,X4o),e(mu,Wq),e(Wq,z4o),e(mu,W4o),e(G,Q4o),e(G,gu),e(gu,ode),e(ode,H4o),e(gu,U4o),e(gu,Qq),e(Qq,J4o),e(gu,Y4o),e(G,K4o),e(G,hu),e(hu,rde),e(rde,Z4o),e(hu,eEo),e(hu,Hq),e(Hq,oEo),e(hu,rEo),e(G,tEo),e(G,pu),e(pu,tde),e(tde,aEo),e(pu,nEo),e(pu,Uq),e(Uq,sEo),e(pu,lEo),e(G,iEo),e(G,_u),e(_u,ade),e(ade,dEo),e(_u,cEo),e(_u,Jq),e(Jq,fEo),e(_u,mEo),e(G,gEo),e(G,uu),e(uu,nde),e(nde,hEo),e(uu,pEo),e(uu,Yq),e(Yq,_Eo),e(uu,uEo),e(G,bEo),e(G,bu),e(bu,sde),e(sde,vEo),e(bu,FEo),e(bu,Kq),e(Kq,TEo),e(bu,MEo),e(G,EEo),e(G,vu),e(vu,lde),e(lde,CEo),e(vu,wEo),e(vu,Zq),e(Zq,AEo),e(vu,yEo),e(G,LEo),e(G,Fu),e(Fu,ide),e(ide,xEo),e(Fu,$Eo),e(Fu,ej),e(ej,kEo),e(Fu,SEo),e(G,REo),e(G,Tu),e(Tu,dde),e(dde,PEo),e(Tu,BEo),e(Tu,oj),e(oj,IEo),e(Tu,NEo),e(G,qEo),e(G,Mu),e(Mu,cde),e(cde,jEo),e(Mu,DEo),e(Mu,rj),e(rj,GEo),e(Mu,OEo),e(G,VEo),e(G,Eu),e(Eu,fde),e(fde,XEo),e(Eu,zEo),e(Eu,tj),e(tj,WEo),e(Eu,QEo),e(G,HEo),e(G,Cu),e(Cu,mde),e(mde,UEo),e(Cu,JEo),e(Cu,aj),e(aj,YEo),e(Cu,KEo),e(G,ZEo),e(G,wu),e(wu,gde),e(gde,eCo),e(wu,oCo),e(wu,nj),e(nj,rCo),e(wu,tCo),e(G,aCo),e(G,Au),e(Au,hde),e(hde,nCo),e(Au,sCo),e(Au,sj),e(sj,lCo),e(Au,iCo),e(G,dCo),e(G,yu),e(yu,pde),e(pde,cCo),e(yu,fCo),e(yu,lj),e(lj,mCo),e(yu,gCo),e(G,hCo),e(G,Lu),e(Lu,_de),e(_de,pCo),e(Lu,_Co),e(Lu,ij),e(ij,uCo),e(Lu,bCo),e(G,vCo),e(G,xu),e(xu,ude),e(ude,FCo),e(xu,TCo),e(xu,dj),e(dj,MCo),e(xu,ECo),e(G,CCo),e(G,$u),e($u,bde),e(bde,wCo),e($u,ACo),e($u,cj),e(cj,yCo),e($u,LCo),e(G,xCo),e(G,ku),e(ku,vde),e(vde,$Co),e(ku,kCo),e(ku,fj),e(fj,SCo),e(ku,RCo),e(G,PCo),e(G,Su),e(Su,Fde),e(Fde,BCo),e(Su,ICo),e(Su,mj),e(mj,NCo),e(Su,qCo),e(G,jCo),e(G,Ru),e(Ru,Tde),e(Tde,DCo),e(Ru,GCo),e(Ru,gj),e(gj,OCo),e(Ru,VCo),e(G,XCo),e(G,Pu),e(Pu,Mde),e(Mde,zCo),e(Pu,WCo),e(Pu,hj),e(hj,QCo),e(Pu,HCo),e(G,UCo),e(G,Bu),e(Bu,Ede),e(Ede,JCo),e(Bu,YCo),e(Bu,pj),e(pj,KCo),e(Bu,ZCo),e(G,e5o),e(G,Iu),e(Iu,Cde),e(Cde,o5o),e(Iu,r5o),e(Iu,_j),e(_j,t5o),e(Iu,a5o),e(G,n5o),e(G,Nu),e(Nu,wde),e(wde,s5o),e(Nu,l5o),e(Nu,uj),e(uj,i5o),e(Nu,d5o),e(G,c5o),e(G,qu),e(qu,Ade),e(Ade,f5o),e(qu,m5o),e(qu,bj),e(bj,g5o),e(qu,h5o),e(G,p5o),e(G,ju),e(ju,yde),e(yde,_5o),e(ju,u5o),e(ju,vj),e(vj,b5o),e(ju,v5o),e(G,F5o),e(G,Du),e(Du,Lde),e(Lde,T5o),e(Du,M5o),e(Du,Fj),e(Fj,E5o),e(Du,C5o),e(G,w5o),e(G,Gu),e(Gu,xde),e(xde,A5o),e(Gu,y5o),e(Gu,Tj),e(Tj,L5o),e(Gu,x5o),e(G,$5o),e(G,Ou),e(Ou,$de),e($de,k5o),e(Ou,S5o),e(Ou,Mj),e(Mj,R5o),e(Ou,P5o),e(G,B5o),e(G,Vu),e(Vu,kde),e(kde,I5o),e(Vu,N5o),e(Vu,Ej),e(Ej,q5o),e(Vu,j5o),e(G,D5o),e(G,Xu),e(Xu,Sde),e(Sde,G5o),e(Xu,O5o),e(Xu,Cj),e(Cj,V5o),e(Xu,X5o),e(G,z5o),e(G,zu),e(zu,Rde),e(Rde,W5o),e(zu,Q5o),e(zu,wj),e(wj,H5o),e(zu,U5o),e(G,J5o),e(G,Wu),e(Wu,Pde),e(Pde,Y5o),e(Wu,K5o),e(Wu,Aj),e(Aj,Z5o),e(Wu,e3o),e(G,o3o),e(G,Qu),e(Qu,Bde),e(Bde,r3o),e(Qu,t3o),e(Qu,yj),e(yj,a3o),e(Qu,n3o),e(G,s3o),e(G,Hu),e(Hu,Ide),e(Ide,l3o),e(Hu,i3o),e(Hu,Lj),e(Lj,d3o),e(Hu,c3o),e(G,f3o),e(G,Uu),e(Uu,Nde),e(Nde,m3o),e(Uu,g3o),e(Uu,xj),e(xj,h3o),e(Uu,p3o),e(G,_3o),e(G,Ju),e(Ju,qde),e(qde,u3o),e(Ju,b3o),e(Ju,$j),e($j,v3o),e(Ju,F3o),e(Ye,T3o),e(Ye,Yu),e(Yu,M3o),e(Yu,jde),e(jde,E3o),e(Yu,C3o),e(Yu,Dde),e(Dde,w3o),e(Ye,A3o),M(Ku,Ye,null),b(f,Kqe,u),b(f,Si,u),e(Si,Zu),e(Zu,Gde),M(bL,Gde,null),e(Si,y3o),e(Si,Ode),e(Ode,L3o),b(f,Zqe,u),b(f,$o,u),M(vL,$o,null),e($o,x3o),e($o,Ri),e(Ri,$3o),e(Ri,kj),e(kj,k3o),e(Ri,S3o),e(Ri,Sj),e(Sj,R3o),e(Ri,P3o),e($o,B3o),e($o,FL),e(FL,I3o),e(FL,Vde),e(Vde,N3o),e(FL,q3o),e($o,j3o),e($o,nt),M(TL,nt,null),e(nt,D3o),e(nt,Xde),e(Xde,G3o),e(nt,O3o),e(nt,Pi),e(Pi,V3o),e(Pi,zde),e(zde,X3o),e(Pi,z3o),e(Pi,Rj),e(Rj,W3o),e(Pi,Q3o),e(nt,H3o),M(eb,nt,null),e($o,U3o),e($o,Ke),M(ML,Ke,null),e(Ke,J3o),e(Ke,Wde),e(Wde,Y3o),e(Ke,K3o),e(Ke,$a),e($a,Z3o),e($a,Qde),e(Qde,e0o),e($a,o0o),e($a,Hde),e(Hde,r0o),e($a,t0o),e($a,Ude),e(Ude,a0o),e($a,n0o),e(Ke,s0o),e(Ke,z),e(z,ob),e(ob,Jde),e(Jde,l0o),e(ob,i0o),e(ob,Pj),e(Pj,d0o),e(ob,c0o),e(z,f0o),e(z,rb),e(rb,Yde),e(Yde,m0o),e(rb,g0o),e(rb,Bj),e(Bj,h0o),e(rb,p0o),e(z,_0o),e(z,tb),e(tb,Kde),e(Kde,u0o),e(tb,b0o),e(tb,Ij),e(Ij,v0o),e(tb,F0o),e(z,T0o),e(z,ab),e(ab,Zde),e(Zde,M0o),e(ab,E0o),e(ab,Nj),e(Nj,C0o),e(ab,w0o),e(z,A0o),e(z,nb),e(nb,ece),e(ece,y0o),e(nb,L0o),e(nb,qj),e(qj,x0o),e(nb,$0o),e(z,k0o),e(z,sb),e(sb,oce),e(oce,S0o),e(sb,R0o),e(sb,jj),e(jj,P0o),e(sb,B0o),e(z,I0o),e(z,lb),e(lb,rce),e(rce,N0o),e(lb,q0o),e(lb,Dj),e(Dj,j0o),e(lb,D0o),e(z,G0o),e(z,ib),e(ib,tce),e(tce,O0o),e(ib,V0o),e(ib,Gj),e(Gj,X0o),e(ib,z0o),e(z,W0o),e(z,db),e(db,ace),e(ace,Q0o),e(db,H0o),e(db,Oj),e(Oj,U0o),e(db,J0o),e(z,Y0o),e(z,cb),e(cb,nce),e(nce,K0o),e(cb,Z0o),e(cb,Vj),e(Vj,ewo),e(cb,owo),e(z,rwo),e(z,fb),e(fb,sce),e(sce,two),e(fb,awo),e(fb,Xj),e(Xj,nwo),e(fb,swo),e(z,lwo),e(z,mb),e(mb,lce),e(lce,iwo),e(mb,dwo),e(mb,zj),e(zj,cwo),e(mb,fwo),e(z,mwo),e(z,gb),e(gb,ice),e(ice,gwo),e(gb,hwo),e(gb,Wj),e(Wj,pwo),e(gb,_wo),e(z,uwo),e(z,hb),e(hb,dce),e(dce,bwo),e(hb,vwo),e(hb,Qj),e(Qj,Fwo),e(hb,Two),e(z,Mwo),e(z,pb),e(pb,cce),e(cce,Ewo),e(pb,Cwo),e(pb,Hj),e(Hj,wwo),e(pb,Awo),e(z,ywo),e(z,_b),e(_b,fce),e(fce,Lwo),e(_b,xwo),e(_b,Uj),e(Uj,$wo),e(_b,kwo),e(z,Swo),e(z,ub),e(ub,mce),e(mce,Rwo),e(ub,Pwo),e(ub,Jj),e(Jj,Bwo),e(ub,Iwo),e(z,Nwo),e(z,bb),e(bb,gce),e(gce,qwo),e(bb,jwo),e(bb,Yj),e(Yj,Dwo),e(bb,Gwo),e(z,Owo),e(z,vb),e(vb,hce),e(hce,Vwo),e(vb,Xwo),e(vb,Kj),e(Kj,zwo),e(vb,Wwo),e(z,Qwo),e(z,Fb),e(Fb,pce),e(pce,Hwo),e(Fb,Uwo),e(Fb,Zj),e(Zj,Jwo),e(Fb,Ywo),e(z,Kwo),e(z,Tb),e(Tb,_ce),e(_ce,Zwo),e(Tb,eAo),e(Tb,eD),e(eD,oAo),e(Tb,rAo),e(z,tAo),e(z,Mb),e(Mb,uce),e(uce,aAo),e(Mb,nAo),e(Mb,oD),e(oD,sAo),e(Mb,lAo),e(z,iAo),e(z,Eb),e(Eb,bce),e(bce,dAo),e(Eb,cAo),e(Eb,rD),e(rD,fAo),e(Eb,mAo),e(z,gAo),e(z,Cb),e(Cb,vce),e(vce,hAo),e(Cb,pAo),e(Cb,tD),e(tD,_Ao),e(Cb,uAo),e(z,bAo),e(z,wb),e(wb,Fce),e(Fce,vAo),e(wb,FAo),e(wb,aD),e(aD,TAo),e(wb,MAo),e(z,EAo),e(z,Ab),e(Ab,Tce),e(Tce,CAo),e(Ab,wAo),e(Ab,nD),e(nD,AAo),e(Ab,yAo),e(z,LAo),e(z,yb),e(yb,Mce),e(Mce,xAo),e(yb,$Ao),e(yb,sD),e(sD,kAo),e(yb,SAo),e(z,RAo),e(z,Lb),e(Lb,Ece),e(Ece,PAo),e(Lb,BAo),e(Lb,lD),e(lD,IAo),e(Lb,NAo),e(z,qAo),e(z,xb),e(xb,Cce),e(Cce,jAo),e(xb,DAo),e(xb,iD),e(iD,GAo),e(xb,OAo),e(z,VAo),e(z,$b),e($b,wce),e(wce,XAo),e($b,zAo),e($b,dD),e(dD,WAo),e($b,QAo),e(z,HAo),e(z,kb),e(kb,Ace),e(Ace,UAo),e(kb,JAo),e(kb,cD),e(cD,YAo),e(kb,KAo),e(z,ZAo),e(z,Sb),e(Sb,yce),e(yce,eyo),e(Sb,oyo),e(Sb,fD),e(fD,ryo),e(Sb,tyo),e(z,ayo),e(z,Rb),e(Rb,Lce),e(Lce,nyo),e(Rb,syo),e(Rb,mD),e(mD,lyo),e(Rb,iyo),e(z,dyo),e(z,Pb),e(Pb,xce),e(xce,cyo),e(Pb,fyo),e(Pb,gD),e(gD,myo),e(Pb,gyo),e(z,hyo),e(z,Bb),e(Bb,$ce),e($ce,pyo),e(Bb,_yo),e(Bb,hD),e(hD,uyo),e(Bb,byo),e(z,vyo),e(z,Ib),e(Ib,kce),e(kce,Fyo),e(Ib,Tyo),e(Ib,pD),e(pD,Myo),e(Ib,Eyo),e(z,Cyo),e(z,Nb),e(Nb,Sce),e(Sce,wyo),e(Nb,Ayo),e(Nb,_D),e(_D,yyo),e(Nb,Lyo),e(Ke,xyo),e(Ke,qb),e(qb,$yo),e(qb,Rce),e(Rce,kyo),e(qb,Syo),e(qb,Pce),e(Pce,Ryo),e(Ke,Pyo),M(jb,Ke,null),b(f,eje,u),b(f,Bi,u),e(Bi,Db),e(Db,Bce),M(EL,Bce,null),e(Bi,Byo),e(Bi,Ice),e(Ice,Iyo),b(f,oje,u),b(f,ko,u),M(CL,ko,null),e(ko,Nyo),e(ko,Ii),e(Ii,qyo),e(Ii,uD),e(uD,jyo),e(Ii,Dyo),e(Ii,bD),e(bD,Gyo),e(Ii,Oyo),e(ko,Vyo),e(ko,wL),e(wL,Xyo),e(wL,Nce),e(Nce,zyo),e(wL,Wyo),e(ko,Qyo),e(ko,st),M(AL,st,null),e(st,Hyo),e(st,qce),e(qce,Uyo),e(st,Jyo),e(st,Ni),e(Ni,Yyo),e(Ni,jce),e(jce,Kyo),e(Ni,Zyo),e(Ni,vD),e(vD,eLo),e(Ni,oLo),e(st,rLo),M(Gb,st,null),e(ko,tLo),e(ko,Ze),M(yL,Ze,null),e(Ze,aLo),e(Ze,Dce),e(Dce,nLo),e(Ze,sLo),e(Ze,ka),e(ka,lLo),e(ka,Gce),e(Gce,iLo),e(ka,dLo),e(ka,Oce),e(Oce,cLo),e(ka,fLo),e(ka,Vce),e(Vce,mLo),e(ka,gLo),e(Ze,hLo),e(Ze,W),e(W,Ob),e(Ob,Xce),e(Xce,pLo),e(Ob,_Lo),e(Ob,FD),e(FD,uLo),e(Ob,bLo),e(W,vLo),e(W,Vb),e(Vb,zce),e(zce,FLo),e(Vb,TLo),e(Vb,TD),e(TD,MLo),e(Vb,ELo),e(W,CLo),e(W,Xb),e(Xb,Wce),e(Wce,wLo),e(Xb,ALo),e(Xb,MD),e(MD,yLo),e(Xb,LLo),e(W,xLo),e(W,zb),e(zb,Qce),e(Qce,$Lo),e(zb,kLo),e(zb,ED),e(ED,SLo),e(zb,RLo),e(W,PLo),e(W,Wb),e(Wb,Hce),e(Hce,BLo),e(Wb,ILo),e(Wb,CD),e(CD,NLo),e(Wb,qLo),e(W,jLo),e(W,Qb),e(Qb,Uce),e(Uce,DLo),e(Qb,GLo),e(Qb,wD),e(wD,OLo),e(Qb,VLo),e(W,XLo),e(W,Hb),e(Hb,Jce),e(Jce,zLo),e(Hb,WLo),e(Hb,AD),e(AD,QLo),e(Hb,HLo),e(W,ULo),e(W,Ub),e(Ub,Yce),e(Yce,JLo),e(Ub,YLo),e(Ub,yD),e(yD,KLo),e(Ub,ZLo),e(W,e8o),e(W,Jb),e(Jb,Kce),e(Kce,o8o),e(Jb,r8o),e(Jb,LD),e(LD,t8o),e(Jb,a8o),e(W,n8o),e(W,Yb),e(Yb,Zce),e(Zce,s8o),e(Yb,l8o),e(Yb,xD),e(xD,i8o),e(Yb,d8o),e(W,c8o),e(W,Kb),e(Kb,efe),e(efe,f8o),e(Kb,m8o),e(Kb,$D),e($D,g8o),e(Kb,h8o),e(W,p8o),e(W,Zb),e(Zb,ofe),e(ofe,_8o),e(Zb,u8o),e(Zb,kD),e(kD,b8o),e(Zb,v8o),e(W,F8o),e(W,e2),e(e2,rfe),e(rfe,T8o),e(e2,M8o),e(e2,SD),e(SD,E8o),e(e2,C8o),e(W,w8o),e(W,o2),e(o2,tfe),e(tfe,A8o),e(o2,y8o),e(o2,RD),e(RD,L8o),e(o2,x8o),e(W,$8o),e(W,r2),e(r2,afe),e(afe,k8o),e(r2,S8o),e(r2,PD),e(PD,R8o),e(r2,P8o),e(W,B8o),e(W,t2),e(t2,nfe),e(nfe,I8o),e(t2,N8o),e(t2,BD),e(BD,q8o),e(t2,j8o),e(W,D8o),e(W,a2),e(a2,sfe),e(sfe,G8o),e(a2,O8o),e(a2,ID),e(ID,V8o),e(a2,X8o),e(W,z8o),e(W,n2),e(n2,lfe),e(lfe,W8o),e(n2,Q8o),e(n2,ND),e(ND,H8o),e(n2,U8o),e(W,J8o),e(W,s2),e(s2,ife),e(ife,Y8o),e(s2,K8o),e(s2,qD),e(qD,Z8o),e(s2,e7o),e(W,o7o),e(W,l2),e(l2,dfe),e(dfe,r7o),e(l2,t7o),e(l2,jD),e(jD,a7o),e(l2,n7o),e(W,s7o),e(W,i2),e(i2,cfe),e(cfe,l7o),e(i2,i7o),e(i2,DD),e(DD,d7o),e(i2,c7o),e(W,f7o),e(W,d2),e(d2,ffe),e(ffe,m7o),e(d2,g7o),e(d2,GD),e(GD,h7o),e(d2,p7o),e(W,_7o),e(W,c2),e(c2,mfe),e(mfe,u7o),e(c2,b7o),e(c2,OD),e(OD,v7o),e(c2,F7o),e(W,T7o),e(W,f2),e(f2,gfe),e(gfe,M7o),e(f2,E7o),e(f2,VD),e(VD,C7o),e(f2,w7o),e(W,A7o),e(W,m2),e(m2,hfe),e(hfe,y7o),e(m2,L7o),e(m2,XD),e(XD,x7o),e(m2,$7o),e(W,k7o),e(W,g2),e(g2,pfe),e(pfe,S7o),e(g2,R7o),e(g2,zD),e(zD,P7o),e(g2,B7o),e(W,I7o),e(W,h2),e(h2,_fe),e(_fe,N7o),e(h2,q7o),e(h2,WD),e(WD,j7o),e(h2,D7o),e(W,G7o),e(W,p2),e(p2,ufe),e(ufe,O7o),e(p2,V7o),e(p2,QD),e(QD,X7o),e(p2,z7o),e(W,W7o),e(W,_2),e(_2,bfe),e(bfe,Q7o),e(_2,H7o),e(_2,HD),e(HD,U7o),e(_2,J7o),e(W,Y7o),e(W,u2),e(u2,vfe),e(vfe,K7o),e(u2,Z7o),e(u2,UD),e(UD,e9o),e(u2,o9o),e(W,r9o),e(W,b2),e(b2,Ffe),e(Ffe,t9o),e(b2,a9o),e(b2,JD),e(JD,n9o),e(b2,s9o),e(W,l9o),e(W,v2),e(v2,Tfe),e(Tfe,i9o),e(v2,d9o),e(v2,Mfe),e(Mfe,c9o),e(v2,f9o),e(W,m9o),e(W,F2),e(F2,Efe),e(Efe,g9o),e(F2,h9o),e(F2,YD),e(YD,p9o),e(F2,_9o),e(W,u9o),e(W,T2),e(T2,Cfe),e(Cfe,b9o),e(T2,v9o),e(T2,KD),e(KD,F9o),e(T2,T9o),e(W,M9o),e(W,M2),e(M2,wfe),e(wfe,E9o),e(M2,C9o),e(M2,ZD),e(ZD,w9o),e(M2,A9o),e(W,y9o),e(W,E2),e(E2,Afe),e(Afe,L9o),e(E2,x9o),e(E2,eG),e(eG,$9o),e(E2,k9o),e(Ze,S9o),e(Ze,C2),e(C2,R9o),e(C2,yfe),e(yfe,P9o),e(C2,B9o),e(C2,Lfe),e(Lfe,I9o),e(Ze,N9o),M(w2,Ze,null),b(f,rje,u),b(f,qi,u),e(qi,A2),e(A2,xfe),M(LL,xfe,null),e(qi,q9o),e(qi,$fe),e($fe,j9o),b(f,tje,u),b(f,So,u),M(xL,So,null),e(So,D9o),e(So,ji),e(ji,G9o),e(ji,oG),e(oG,O9o),e(ji,V9o),e(ji,rG),e(rG,X9o),e(ji,z9o),e(So,W9o),e(So,$L),e($L,Q9o),e($L,kfe),e(kfe,H9o),e($L,U9o),e(So,J9o),e(So,lt),M(kL,lt,null),e(lt,Y9o),e(lt,Sfe),e(Sfe,K9o),e(lt,Z9o),e(lt,Di),e(Di,exo),e(Di,Rfe),e(Rfe,oxo),e(Di,rxo),e(Di,tG),e(tG,txo),e(Di,axo),e(lt,nxo),M(y2,lt,null),e(So,sxo),e(So,eo),M(SL,eo,null),e(eo,lxo),e(eo,Pfe),e(Pfe,ixo),e(eo,dxo),e(eo,Sa),e(Sa,cxo),e(Sa,Bfe),e(Bfe,fxo),e(Sa,mxo),e(Sa,Ife),e(Ife,gxo),e(Sa,hxo),e(Sa,Nfe),e(Nfe,pxo),e(Sa,_xo),e(eo,uxo),e(eo,_e),e(_e,L2),e(L2,qfe),e(qfe,bxo),e(L2,vxo),e(L2,aG),e(aG,Fxo),e(L2,Txo),e(_e,Mxo),e(_e,x2),e(x2,jfe),e(jfe,Exo),e(x2,Cxo),e(x2,nG),e(nG,wxo),e(x2,Axo),e(_e,yxo),e(_e,$2),e($2,Dfe),e(Dfe,Lxo),e($2,xxo),e($2,sG),e(sG,$xo),e($2,kxo),e(_e,Sxo),e(_e,k2),e(k2,Gfe),e(Gfe,Rxo),e(k2,Pxo),e(k2,lG),e(lG,Bxo),e(k2,Ixo),e(_e,Nxo),e(_e,S2),e(S2,Ofe),e(Ofe,qxo),e(S2,jxo),e(S2,iG),e(iG,Dxo),e(S2,Gxo),e(_e,Oxo),e(_e,R2),e(R2,Vfe),e(Vfe,Vxo),e(R2,Xxo),e(R2,dG),e(dG,zxo),e(R2,Wxo),e(_e,Qxo),e(_e,P2),e(P2,Xfe),e(Xfe,Hxo),e(P2,Uxo),e(P2,cG),e(cG,Jxo),e(P2,Yxo),e(_e,Kxo),e(_e,B2),e(B2,zfe),e(zfe,Zxo),e(B2,e$o),e(B2,fG),e(fG,o$o),e(B2,r$o),e(_e,t$o),e(_e,I2),e(I2,Wfe),e(Wfe,a$o),e(I2,n$o),e(I2,mG),e(mG,s$o),e(I2,l$o),e(_e,i$o),e(_e,N2),e(N2,Qfe),e(Qfe,d$o),e(N2,c$o),e(N2,gG),e(gG,f$o),e(N2,m$o),e(_e,g$o),e(_e,q2),e(q2,Hfe),e(Hfe,h$o),e(q2,p$o),e(q2,hG),e(hG,_$o),e(q2,u$o),e(_e,b$o),e(_e,j2),e(j2,Ufe),e(Ufe,v$o),e(j2,F$o),e(j2,pG),e(pG,T$o),e(j2,M$o),e(_e,E$o),e(_e,D2),e(D2,Jfe),e(Jfe,C$o),e(D2,w$o),e(D2,_G),e(_G,A$o),e(D2,y$o),e(_e,L$o),e(_e,G2),e(G2,Yfe),e(Yfe,x$o),e(G2,$$o),e(G2,uG),e(uG,k$o),e(G2,S$o),e(_e,R$o),e(_e,O2),e(O2,Kfe),e(Kfe,P$o),e(O2,B$o),e(O2,bG),e(bG,I$o),e(O2,N$o),e(_e,q$o),e(_e,V2),e(V2,Zfe),e(Zfe,j$o),e(V2,D$o),e(V2,vG),e(vG,G$o),e(V2,O$o),e(eo,V$o),e(eo,X2),e(X2,X$o),e(X2,eme),e(eme,z$o),e(X2,W$o),e(X2,ome),e(ome,Q$o),e(eo,H$o),M(z2,eo,null),b(f,aje,u),b(f,Gi,u),e(Gi,W2),e(W2,rme),M(RL,rme,null),e(Gi,U$o),e(Gi,tme),e(tme,J$o),b(f,nje,u),b(f,Ro,u),M(PL,Ro,null),e(Ro,Y$o),e(Ro,Oi),e(Oi,K$o),e(Oi,FG),e(FG,Z$o),e(Oi,eko),e(Oi,TG),e(TG,oko),e(Oi,rko),e(Ro,tko),e(Ro,BL),e(BL,ako),e(BL,ame),e(ame,nko),e(BL,sko),e(Ro,lko),e(Ro,it),M(IL,it,null),e(it,iko),e(it,nme),e(nme,dko),e(it,cko),e(it,Vi),e(Vi,fko),e(Vi,sme),e(sme,mko),e(Vi,gko),e(Vi,MG),e(MG,hko),e(Vi,pko),e(it,_ko),M(Q2,it,null),e(Ro,uko),e(Ro,oo),M(NL,oo,null),e(oo,bko),e(oo,lme),e(lme,vko),e(oo,Fko),e(oo,Ra),e(Ra,Tko),e(Ra,ime),e(ime,Mko),e(Ra,Eko),e(Ra,dme),e(dme,Cko),e(Ra,wko),e(Ra,cme),e(cme,Ako),e(Ra,yko),e(oo,Lko),e(oo,N),e(N,H2),e(H2,fme),e(fme,xko),e(H2,$ko),e(H2,EG),e(EG,kko),e(H2,Sko),e(N,Rko),e(N,U2),e(U2,mme),e(mme,Pko),e(U2,Bko),e(U2,CG),e(CG,Iko),e(U2,Nko),e(N,qko),e(N,J2),e(J2,gme),e(gme,jko),e(J2,Dko),e(J2,wG),e(wG,Gko),e(J2,Oko),e(N,Vko),e(N,Y2),e(Y2,hme),e(hme,Xko),e(Y2,zko),e(Y2,AG),e(AG,Wko),e(Y2,Qko),e(N,Hko),e(N,K2),e(K2,pme),e(pme,Uko),e(K2,Jko),e(K2,yG),e(yG,Yko),e(K2,Kko),e(N,Zko),e(N,Z2),e(Z2,_me),e(_me,eSo),e(Z2,oSo),e(Z2,LG),e(LG,rSo),e(Z2,tSo),e(N,aSo),e(N,ev),e(ev,ume),e(ume,nSo),e(ev,sSo),e(ev,xG),e(xG,lSo),e(ev,iSo),e(N,dSo),e(N,ov),e(ov,bme),e(bme,cSo),e(ov,fSo),e(ov,$G),e($G,mSo),e(ov,gSo),e(N,hSo),e(N,rv),e(rv,vme),e(vme,pSo),e(rv,_So),e(rv,kG),e(kG,uSo),e(rv,bSo),e(N,vSo),e(N,tv),e(tv,Fme),e(Fme,FSo),e(tv,TSo),e(tv,SG),e(SG,MSo),e(tv,ESo),e(N,CSo),e(N,av),e(av,Tme),e(Tme,wSo),e(av,ASo),e(av,RG),e(RG,ySo),e(av,LSo),e(N,xSo),e(N,nv),e(nv,Mme),e(Mme,$So),e(nv,kSo),e(nv,PG),e(PG,SSo),e(nv,RSo),e(N,PSo),e(N,sv),e(sv,Eme),e(Eme,BSo),e(sv,ISo),e(sv,BG),e(BG,NSo),e(sv,qSo),e(N,jSo),e(N,lv),e(lv,Cme),e(Cme,DSo),e(lv,GSo),e(lv,IG),e(IG,OSo),e(lv,VSo),e(N,XSo),e(N,iv),e(iv,wme),e(wme,zSo),e(iv,WSo),e(iv,NG),e(NG,QSo),e(iv,HSo),e(N,USo),e(N,dv),e(dv,Ame),e(Ame,JSo),e(dv,YSo),e(dv,qG),e(qG,KSo),e(dv,ZSo),e(N,eRo),e(N,cv),e(cv,yme),e(yme,oRo),e(cv,rRo),e(cv,jG),e(jG,tRo),e(cv,aRo),e(N,nRo),e(N,fv),e(fv,Lme),e(Lme,sRo),e(fv,lRo),e(fv,DG),e(DG,iRo),e(fv,dRo),e(N,cRo),e(N,mv),e(mv,xme),e(xme,fRo),e(mv,mRo),e(mv,GG),e(GG,gRo),e(mv,hRo),e(N,pRo),e(N,gv),e(gv,$me),e($me,_Ro),e(gv,uRo),e(gv,OG),e(OG,bRo),e(gv,vRo),e(N,FRo),e(N,hv),e(hv,kme),e(kme,TRo),e(hv,MRo),e(hv,VG),e(VG,ERo),e(hv,CRo),e(N,wRo),e(N,pv),e(pv,Sme),e(Sme,ARo),e(pv,yRo),e(pv,XG),e(XG,LRo),e(pv,xRo),e(N,$Ro),e(N,_v),e(_v,Rme),e(Rme,kRo),e(_v,SRo),e(_v,zG),e(zG,RRo),e(_v,PRo),e(N,BRo),e(N,uv),e(uv,Pme),e(Pme,IRo),e(uv,NRo),e(uv,WG),e(WG,qRo),e(uv,jRo),e(N,DRo),e(N,bv),e(bv,Bme),e(Bme,GRo),e(bv,ORo),e(bv,QG),e(QG,VRo),e(bv,XRo),e(N,zRo),e(N,vv),e(vv,Ime),e(Ime,WRo),e(vv,QRo),e(vv,HG),e(HG,HRo),e(vv,URo),e(N,JRo),e(N,Fv),e(Fv,Nme),e(Nme,YRo),e(Fv,KRo),e(Fv,UG),e(UG,ZRo),e(Fv,ePo),e(N,oPo),e(N,Tv),e(Tv,qme),e(qme,rPo),e(Tv,tPo),e(Tv,JG),e(JG,aPo),e(Tv,nPo),e(N,sPo),e(N,Mv),e(Mv,jme),e(jme,lPo),e(Mv,iPo),e(Mv,YG),e(YG,dPo),e(Mv,cPo),e(N,fPo),e(N,Ev),e(Ev,Dme),e(Dme,mPo),e(Ev,gPo),e(Ev,KG),e(KG,hPo),e(Ev,pPo),e(N,_Po),e(N,Cv),e(Cv,Gme),e(Gme,uPo),e(Cv,bPo),e(Cv,ZG),e(ZG,vPo),e(Cv,FPo),e(N,TPo),e(N,wv),e(wv,Ome),e(Ome,MPo),e(wv,EPo),e(wv,eO),e(eO,CPo),e(wv,wPo),e(N,APo),e(N,Av),e(Av,Vme),e(Vme,yPo),e(Av,LPo),e(Av,oO),e(oO,xPo),e(Av,$Po),e(N,kPo),e(N,yv),e(yv,Xme),e(Xme,SPo),e(yv,RPo),e(yv,rO),e(rO,PPo),e(yv,BPo),e(N,IPo),e(N,Lv),e(Lv,zme),e(zme,NPo),e(Lv,qPo),e(Lv,tO),e(tO,jPo),e(Lv,DPo),e(N,GPo),e(N,xv),e(xv,Wme),e(Wme,OPo),e(xv,VPo),e(xv,aO),e(aO,XPo),e(xv,zPo),e(N,WPo),e(N,$v),e($v,Qme),e(Qme,QPo),e($v,HPo),e($v,nO),e(nO,UPo),e($v,JPo),e(N,YPo),e(N,kv),e(kv,Hme),e(Hme,KPo),e(kv,ZPo),e(kv,sO),e(sO,eBo),e(kv,oBo),e(N,rBo),e(N,Sv),e(Sv,Ume),e(Ume,tBo),e(Sv,aBo),e(Sv,lO),e(lO,nBo),e(Sv,sBo),e(N,lBo),e(N,Rv),e(Rv,Jme),e(Jme,iBo),e(Rv,dBo),e(Rv,iO),e(iO,cBo),e(Rv,fBo),e(N,mBo),e(N,Pv),e(Pv,Yme),e(Yme,gBo),e(Pv,hBo),e(Pv,dO),e(dO,pBo),e(Pv,_Bo),e(N,uBo),e(N,Bv),e(Bv,Kme),e(Kme,bBo),e(Bv,vBo),e(Bv,cO),e(cO,FBo),e(Bv,TBo),e(N,MBo),e(N,Iv),e(Iv,Zme),e(Zme,EBo),e(Iv,CBo),e(Iv,fO),e(fO,wBo),e(Iv,ABo),e(N,yBo),e(N,Nv),e(Nv,ege),e(ege,LBo),e(Nv,xBo),e(Nv,mO),e(mO,$Bo),e(Nv,kBo),e(N,SBo),e(N,qv),e(qv,oge),e(oge,RBo),e(qv,PBo),e(qv,gO),e(gO,BBo),e(qv,IBo),e(N,NBo),e(N,jv),e(jv,rge),e(rge,qBo),e(jv,jBo),e(jv,hO),e(hO,DBo),e(jv,GBo),e(N,OBo),e(N,Dv),e(Dv,tge),e(tge,VBo),e(Dv,XBo),e(Dv,pO),e(pO,zBo),e(Dv,WBo),e(oo,QBo),e(oo,Gv),e(Gv,HBo),e(Gv,age),e(age,UBo),e(Gv,JBo),e(Gv,nge),e(nge,YBo),e(oo,KBo),M(Ov,oo,null),b(f,sje,u),b(f,Xi,u),e(Xi,Vv),e(Vv,sge),M(qL,sge,null),e(Xi,ZBo),e(Xi,lge),e(lge,eIo),b(f,lje,u),b(f,Po,u),M(jL,Po,null),e(Po,oIo),e(Po,zi),e(zi,rIo),e(zi,_O),e(_O,tIo),e(zi,aIo),e(zi,uO),e(uO,nIo),e(zi,sIo),e(Po,lIo),e(Po,DL),e(DL,iIo),e(DL,ige),e(ige,dIo),e(DL,cIo),e(Po,fIo),e(Po,dt),M(GL,dt,null),e(dt,mIo),e(dt,dge),e(dge,gIo),e(dt,hIo),e(dt,Wi),e(Wi,pIo),e(Wi,cge),e(cge,_Io),e(Wi,uIo),e(Wi,bO),e(bO,bIo),e(Wi,vIo),e(dt,FIo),M(Xv,dt,null),e(Po,TIo),e(Po,ro),M(OL,ro,null),e(ro,MIo),e(ro,fge),e(fge,EIo),e(ro,CIo),e(ro,Pa),e(Pa,wIo),e(Pa,mge),e(mge,AIo),e(Pa,yIo),e(Pa,gge),e(gge,LIo),e(Pa,xIo),e(Pa,hge),e(hge,$Io),e(Pa,kIo),e(ro,SIo),e(ro,K),e(K,zv),e(zv,pge),e(pge,RIo),e(zv,PIo),e(zv,vO),e(vO,BIo),e(zv,IIo),e(K,NIo),e(K,Wv),e(Wv,_ge),e(_ge,qIo),e(Wv,jIo),e(Wv,FO),e(FO,DIo),e(Wv,GIo),e(K,OIo),e(K,Qv),e(Qv,uge),e(uge,VIo),e(Qv,XIo),e(Qv,TO),e(TO,zIo),e(Qv,WIo),e(K,QIo),e(K,Hv),e(Hv,bge),e(bge,HIo),e(Hv,UIo),e(Hv,MO),e(MO,JIo),e(Hv,YIo),e(K,KIo),e(K,Uv),e(Uv,vge),e(vge,ZIo),e(Uv,eNo),e(Uv,EO),e(EO,oNo),e(Uv,rNo),e(K,tNo),e(K,Jv),e(Jv,Fge),e(Fge,aNo),e(Jv,nNo),e(Jv,CO),e(CO,sNo),e(Jv,lNo),e(K,iNo),e(K,Yv),e(Yv,Tge),e(Tge,dNo),e(Yv,cNo),e(Yv,wO),e(wO,fNo),e(Yv,mNo),e(K,gNo),e(K,Kv),e(Kv,Mge),e(Mge,hNo),e(Kv,pNo),e(Kv,AO),e(AO,_No),e(Kv,uNo),e(K,bNo),e(K,Zv),e(Zv,Ege),e(Ege,vNo),e(Zv,FNo),e(Zv,yO),e(yO,TNo),e(Zv,MNo),e(K,ENo),e(K,eF),e(eF,Cge),e(Cge,CNo),e(eF,wNo),e(eF,LO),e(LO,ANo),e(eF,yNo),e(K,LNo),e(K,oF),e(oF,wge),e(wge,xNo),e(oF,$No),e(oF,xO),e(xO,kNo),e(oF,SNo),e(K,RNo),e(K,rF),e(rF,Age),e(Age,PNo),e(rF,BNo),e(rF,$O),e($O,INo),e(rF,NNo),e(K,qNo),e(K,tF),e(tF,yge),e(yge,jNo),e(tF,DNo),e(tF,kO),e(kO,GNo),e(tF,ONo),e(K,VNo),e(K,aF),e(aF,Lge),e(Lge,XNo),e(aF,zNo),e(aF,SO),e(SO,WNo),e(aF,QNo),e(K,HNo),e(K,nF),e(nF,xge),e(xge,UNo),e(nF,JNo),e(nF,RO),e(RO,YNo),e(nF,KNo),e(K,ZNo),e(K,sF),e(sF,$ge),e($ge,eqo),e(sF,oqo),e(sF,PO),e(PO,rqo),e(sF,tqo),e(K,aqo),e(K,lF),e(lF,kge),e(kge,nqo),e(lF,sqo),e(lF,BO),e(BO,lqo),e(lF,iqo),e(K,dqo),e(K,iF),e(iF,Sge),e(Sge,cqo),e(iF,fqo),e(iF,IO),e(IO,mqo),e(iF,gqo),e(K,hqo),e(K,dF),e(dF,Rge),e(Rge,pqo),e(dF,_qo),e(dF,NO),e(NO,uqo),e(dF,bqo),e(K,vqo),e(K,cF),e(cF,Pge),e(Pge,Fqo),e(cF,Tqo),e(cF,qO),e(qO,Mqo),e(cF,Eqo),e(K,Cqo),e(K,fF),e(fF,Bge),e(Bge,wqo),e(fF,Aqo),e(fF,jO),e(jO,yqo),e(fF,Lqo),e(K,xqo),e(K,mF),e(mF,Ige),e(Ige,$qo),e(mF,kqo),e(mF,DO),e(DO,Sqo),e(mF,Rqo),e(K,Pqo),e(K,gF),e(gF,Nge),e(Nge,Bqo),e(gF,Iqo),e(gF,GO),e(GO,Nqo),e(gF,qqo),e(K,jqo),e(K,hF),e(hF,qge),e(qge,Dqo),e(hF,Gqo),e(hF,OO),e(OO,Oqo),e(hF,Vqo),e(K,Xqo),e(K,pF),e(pF,jge),e(jge,zqo),e(pF,Wqo),e(pF,VO),e(VO,Qqo),e(pF,Hqo),e(K,Uqo),e(K,_F),e(_F,Dge),e(Dge,Jqo),e(_F,Yqo),e(_F,XO),e(XO,Kqo),e(_F,Zqo),e(K,ejo),e(K,uF),e(uF,Gge),e(Gge,ojo),e(uF,rjo),e(uF,zO),e(zO,tjo),e(uF,ajo),e(K,njo),e(K,bF),e(bF,Oge),e(Oge,sjo),e(bF,ljo),e(bF,WO),e(WO,ijo),e(bF,djo),e(K,cjo),e(K,vF),e(vF,Vge),e(Vge,fjo),e(vF,mjo),e(vF,QO),e(QO,gjo),e(vF,hjo),e(ro,pjo),e(ro,FF),e(FF,_jo),e(FF,Xge),e(Xge,ujo),e(FF,bjo),e(FF,zge),e(zge,vjo),e(ro,Fjo),M(TF,ro,null),b(f,ije,u),b(f,Qi,u),e(Qi,MF),e(MF,Wge),M(VL,Wge,null),e(Qi,Tjo),e(Qi,Qge),e(Qge,Mjo),b(f,dje,u),b(f,Bo,u),M(XL,Bo,null),e(Bo,Ejo),e(Bo,Hi),e(Hi,Cjo),e(Hi,HO),e(HO,wjo),e(Hi,Ajo),e(Hi,UO),e(UO,yjo),e(Hi,Ljo),e(Bo,xjo),e(Bo,zL),e(zL,$jo),e(zL,Hge),e(Hge,kjo),e(zL,Sjo),e(Bo,Rjo),e(Bo,ct),M(WL,ct,null),e(ct,Pjo),e(ct,Uge),e(Uge,Bjo),e(ct,Ijo),e(ct,Ui),e(Ui,Njo),e(Ui,Jge),e(Jge,qjo),e(Ui,jjo),e(Ui,JO),e(JO,Djo),e(Ui,Gjo),e(ct,Ojo),M(EF,ct,null),e(Bo,Vjo),e(Bo,to),M(QL,to,null),e(to,Xjo),e(to,Yge),e(Yge,zjo),e(to,Wjo),e(to,Ba),e(Ba,Qjo),e(Ba,Kge),e(Kge,Hjo),e(Ba,Ujo),e(Ba,Zge),e(Zge,Jjo),e(Ba,Yjo),e(Ba,ehe),e(ehe,Kjo),e(Ba,Zjo),e(to,eDo),e(to,Yr),e(Yr,CF),e(CF,ohe),e(ohe,oDo),e(CF,rDo),e(CF,YO),e(YO,tDo),e(CF,aDo),e(Yr,nDo),e(Yr,wF),e(wF,rhe),e(rhe,sDo),e(wF,lDo),e(wF,KO),e(KO,iDo),e(wF,dDo),e(Yr,cDo),e(Yr,AF),e(AF,the),e(the,fDo),e(AF,mDo),e(AF,ZO),e(ZO,gDo),e(AF,hDo),e(Yr,pDo),e(Yr,yF),e(yF,ahe),e(ahe,_Do),e(yF,uDo),e(yF,eV),e(eV,bDo),e(yF,vDo),e(Yr,FDo),e(Yr,LF),e(LF,nhe),e(nhe,TDo),e(LF,MDo),e(LF,oV),e(oV,EDo),e(LF,CDo),e(to,wDo),e(to,xF),e(xF,ADo),e(xF,she),e(she,yDo),e(xF,LDo),e(xF,lhe),e(lhe,xDo),e(to,$Do),M($F,to,null),b(f,cje,u),b(f,Ji,u),e(Ji,kF),e(kF,ihe),M(HL,ihe,null),e(Ji,kDo),e(Ji,dhe),e(dhe,SDo),b(f,fje,u),b(f,Io,u),M(UL,Io,null),e(Io,RDo),e(Io,Yi),e(Yi,PDo),e(Yi,rV),e(rV,BDo),e(Yi,IDo),e(Yi,tV),e(tV,NDo),e(Yi,qDo),e(Io,jDo),e(Io,JL),e(JL,DDo),e(JL,che),e(che,GDo),e(JL,ODo),e(Io,VDo),e(Io,ft),M(YL,ft,null),e(ft,XDo),e(ft,fhe),e(fhe,zDo),e(ft,WDo),e(ft,Ki),e(Ki,QDo),e(Ki,mhe),e(mhe,HDo),e(Ki,UDo),e(Ki,aV),e(aV,JDo),e(Ki,YDo),e(ft,KDo),M(SF,ft,null),e(Io,ZDo),e(Io,ao),M(KL,ao,null),e(ao,eGo),e(ao,ghe),e(ghe,oGo),e(ao,rGo),e(ao,Ia),e(Ia,tGo),e(Ia,hhe),e(hhe,aGo),e(Ia,nGo),e(Ia,phe),e(phe,sGo),e(Ia,lGo),e(Ia,_he),e(_he,iGo),e(Ia,dGo),e(ao,cGo),e(ao,U),e(U,RF),e(RF,uhe),e(uhe,fGo),e(RF,mGo),e(RF,nV),e(nV,gGo),e(RF,hGo),e(U,pGo),e(U,PF),e(PF,bhe),e(bhe,_Go),e(PF,uGo),e(PF,sV),e(sV,bGo),e(PF,vGo),e(U,FGo),e(U,BF),e(BF,vhe),e(vhe,TGo),e(BF,MGo),e(BF,lV),e(lV,EGo),e(BF,CGo),e(U,wGo),e(U,IF),e(IF,Fhe),e(Fhe,AGo),e(IF,yGo),e(IF,iV),e(iV,LGo),e(IF,xGo),e(U,$Go),e(U,NF),e(NF,The),e(The,kGo),e(NF,SGo),e(NF,dV),e(dV,RGo),e(NF,PGo),e(U,BGo),e(U,qF),e(qF,Mhe),e(Mhe,IGo),e(qF,NGo),e(qF,cV),e(cV,qGo),e(qF,jGo),e(U,DGo),e(U,jF),e(jF,Ehe),e(Ehe,GGo),e(jF,OGo),e(jF,fV),e(fV,VGo),e(jF,XGo),e(U,zGo),e(U,DF),e(DF,Che),e(Che,WGo),e(DF,QGo),e(DF,mV),e(mV,HGo),e(DF,UGo),e(U,JGo),e(U,GF),e(GF,whe),e(whe,YGo),e(GF,KGo),e(GF,gV),e(gV,ZGo),e(GF,eOo),e(U,oOo),e(U,OF),e(OF,Ahe),e(Ahe,rOo),e(OF,tOo),e(OF,hV),e(hV,aOo),e(OF,nOo),e(U,sOo),e(U,VF),e(VF,yhe),e(yhe,lOo),e(VF,iOo),e(VF,pV),e(pV,dOo),e(VF,cOo),e(U,fOo),e(U,XF),e(XF,Lhe),e(Lhe,mOo),e(XF,gOo),e(XF,_V),e(_V,hOo),e(XF,pOo),e(U,_Oo),e(U,zF),e(zF,xhe),e(xhe,uOo),e(zF,bOo),e(zF,uV),e(uV,vOo),e(zF,FOo),e(U,TOo),e(U,WF),e(WF,$he),e($he,MOo),e(WF,EOo),e(WF,bV),e(bV,COo),e(WF,wOo),e(U,AOo),e(U,QF),e(QF,khe),e(khe,yOo),e(QF,LOo),e(QF,vV),e(vV,xOo),e(QF,$Oo),e(U,kOo),e(U,HF),e(HF,She),e(She,SOo),e(HF,ROo),e(HF,FV),e(FV,POo),e(HF,BOo),e(U,IOo),e(U,UF),e(UF,Rhe),e(Rhe,NOo),e(UF,qOo),e(UF,TV),e(TV,jOo),e(UF,DOo),e(U,GOo),e(U,JF),e(JF,Phe),e(Phe,OOo),e(JF,VOo),e(JF,MV),e(MV,XOo),e(JF,zOo),e(U,WOo),e(U,YF),e(YF,Bhe),e(Bhe,QOo),e(YF,HOo),e(YF,EV),e(EV,UOo),e(YF,JOo),e(U,YOo),e(U,KF),e(KF,Ihe),e(Ihe,KOo),e(KF,ZOo),e(KF,CV),e(CV,eVo),e(KF,oVo),e(U,rVo),e(U,ZF),e(ZF,Nhe),e(Nhe,tVo),e(ZF,aVo),e(ZF,wV),e(wV,nVo),e(ZF,sVo),e(U,lVo),e(U,e6),e(e6,qhe),e(qhe,iVo),e(e6,dVo),e(e6,AV),e(AV,cVo),e(e6,fVo),e(U,mVo),e(U,o6),e(o6,jhe),e(jhe,gVo),e(o6,hVo),e(o6,yV),e(yV,pVo),e(o6,_Vo),e(U,uVo),e(U,r6),e(r6,Dhe),e(Dhe,bVo),e(r6,vVo),e(r6,LV),e(LV,FVo),e(r6,TVo),e(U,MVo),e(U,t6),e(t6,Ghe),e(Ghe,EVo),e(t6,CVo),e(t6,xV),e(xV,wVo),e(t6,AVo),e(U,yVo),e(U,a6),e(a6,Ohe),e(Ohe,LVo),e(a6,xVo),e(a6,$V),e($V,$Vo),e(a6,kVo),e(U,SVo),e(U,n6),e(n6,Vhe),e(Vhe,RVo),e(n6,PVo),e(n6,kV),e(kV,BVo),e(n6,IVo),e(U,NVo),e(U,s6),e(s6,Xhe),e(Xhe,qVo),e(s6,jVo),e(s6,SV),e(SV,DVo),e(s6,GVo),e(U,OVo),e(U,l6),e(l6,zhe),e(zhe,VVo),e(l6,XVo),e(l6,RV),e(RV,zVo),e(l6,WVo),e(U,QVo),e(U,i6),e(i6,Whe),e(Whe,HVo),e(i6,UVo),e(i6,PV),e(PV,JVo),e(i6,YVo),e(U,KVo),e(U,d6),e(d6,Qhe),e(Qhe,ZVo),e(d6,eXo),e(d6,BV),e(BV,oXo),e(d6,rXo),e(U,tXo),e(U,c6),e(c6,Hhe),e(Hhe,aXo),e(c6,nXo),e(c6,IV),e(IV,sXo),e(c6,lXo),e(U,iXo),e(U,f6),e(f6,Uhe),e(Uhe,dXo),e(f6,cXo),e(f6,NV),e(NV,fXo),e(f6,mXo),e(U,gXo),e(U,m6),e(m6,Jhe),e(Jhe,hXo),e(m6,pXo),e(m6,qV),e(qV,_Xo),e(m6,uXo),e(ao,bXo),e(ao,g6),e(g6,vXo),e(g6,Yhe),e(Yhe,FXo),e(g6,TXo),e(g6,Khe),e(Khe,MXo),e(ao,EXo),M(h6,ao,null),b(f,mje,u),b(f,Zi,u),e(Zi,p6),e(p6,Zhe),M(ZL,Zhe,null),e(Zi,CXo),e(Zi,epe),e(epe,wXo),b(f,gje,u),b(f,No,u),M(e8,No,null),e(No,AXo),e(No,ed),e(ed,yXo),e(ed,jV),e(jV,LXo),e(ed,xXo),e(ed,DV),e(DV,$Xo),e(ed,kXo),e(No,SXo),e(No,o8),e(o8,RXo),e(o8,ope),e(ope,PXo),e(o8,BXo),e(No,IXo),e(No,mt),M(r8,mt,null),e(mt,NXo),e(mt,rpe),e(rpe,qXo),e(mt,jXo),e(mt,od),e(od,DXo),e(od,tpe),e(tpe,GXo),e(od,OXo),e(od,GV),e(GV,VXo),e(od,XXo),e(mt,zXo),M(_6,mt,null),e(No,WXo),e(No,no),M(t8,no,null),e(no,QXo),e(no,ape),e(ape,HXo),e(no,UXo),e(no,Na),e(Na,JXo),e(Na,npe),e(npe,YXo),e(Na,KXo),e(Na,spe),e(spe,ZXo),e(Na,ezo),e(Na,lpe),e(lpe,ozo),e(Na,rzo),e(no,tzo),e(no,V),e(V,u6),e(u6,ipe),e(ipe,azo),e(u6,nzo),e(u6,OV),e(OV,szo),e(u6,lzo),e(V,izo),e(V,b6),e(b6,dpe),e(dpe,dzo),e(b6,czo),e(b6,VV),e(VV,fzo),e(b6,mzo),e(V,gzo),e(V,v6),e(v6,cpe),e(cpe,hzo),e(v6,pzo),e(v6,XV),e(XV,_zo),e(v6,uzo),e(V,bzo),e(V,F6),e(F6,fpe),e(fpe,vzo),e(F6,Fzo),e(F6,zV),e(zV,Tzo),e(F6,Mzo),e(V,Ezo),e(V,T6),e(T6,mpe),e(mpe,Czo),e(T6,wzo),e(T6,WV),e(WV,Azo),e(T6,yzo),e(V,Lzo),e(V,M6),e(M6,gpe),e(gpe,xzo),e(M6,$zo),e(M6,QV),e(QV,kzo),e(M6,Szo),e(V,Rzo),e(V,E6),e(E6,hpe),e(hpe,Pzo),e(E6,Bzo),e(E6,HV),e(HV,Izo),e(E6,Nzo),e(V,qzo),e(V,C6),e(C6,ppe),e(ppe,jzo),e(C6,Dzo),e(C6,UV),e(UV,Gzo),e(C6,Ozo),e(V,Vzo),e(V,w6),e(w6,_pe),e(_pe,Xzo),e(w6,zzo),e(w6,JV),e(JV,Wzo),e(w6,Qzo),e(V,Hzo),e(V,A6),e(A6,upe),e(upe,Uzo),e(A6,Jzo),e(A6,YV),e(YV,Yzo),e(A6,Kzo),e(V,Zzo),e(V,y6),e(y6,bpe),e(bpe,eWo),e(y6,oWo),e(y6,KV),e(KV,rWo),e(y6,tWo),e(V,aWo),e(V,L6),e(L6,vpe),e(vpe,nWo),e(L6,sWo),e(L6,ZV),e(ZV,lWo),e(L6,iWo),e(V,dWo),e(V,x6),e(x6,Fpe),e(Fpe,cWo),e(x6,fWo),e(x6,eX),e(eX,mWo),e(x6,gWo),e(V,hWo),e(V,$6),e($6,Tpe),e(Tpe,pWo),e($6,_Wo),e($6,oX),e(oX,uWo),e($6,bWo),e(V,vWo),e(V,k6),e(k6,Mpe),e(Mpe,FWo),e(k6,TWo),e(k6,rX),e(rX,MWo),e(k6,EWo),e(V,CWo),e(V,S6),e(S6,Epe),e(Epe,wWo),e(S6,AWo),e(S6,tX),e(tX,yWo),e(S6,LWo),e(V,xWo),e(V,R6),e(R6,Cpe),e(Cpe,$Wo),e(R6,kWo),e(R6,aX),e(aX,SWo),e(R6,RWo),e(V,PWo),e(V,P6),e(P6,wpe),e(wpe,BWo),e(P6,IWo),e(P6,nX),e(nX,NWo),e(P6,qWo),e(V,jWo),e(V,B6),e(B6,Ape),e(Ape,DWo),e(B6,GWo),e(B6,sX),e(sX,OWo),e(B6,VWo),e(V,XWo),e(V,I6),e(I6,ype),e(ype,zWo),e(I6,WWo),e(I6,lX),e(lX,QWo),e(I6,HWo),e(V,UWo),e(V,N6),e(N6,Lpe),e(Lpe,JWo),e(N6,YWo),e(N6,iX),e(iX,KWo),e(N6,ZWo),e(V,eQo),e(V,q6),e(q6,xpe),e(xpe,oQo),e(q6,rQo),e(q6,dX),e(dX,tQo),e(q6,aQo),e(V,nQo),e(V,j6),e(j6,$pe),e($pe,sQo),e(j6,lQo),e(j6,cX),e(cX,iQo),e(j6,dQo),e(V,cQo),e(V,D6),e(D6,kpe),e(kpe,fQo),e(D6,mQo),e(D6,fX),e(fX,gQo),e(D6,hQo),e(V,pQo),e(V,G6),e(G6,Spe),e(Spe,_Qo),e(G6,uQo),e(G6,mX),e(mX,bQo),e(G6,vQo),e(V,FQo),e(V,O6),e(O6,Rpe),e(Rpe,TQo),e(O6,MQo),e(O6,gX),e(gX,EQo),e(O6,CQo),e(V,wQo),e(V,V6),e(V6,Ppe),e(Ppe,AQo),e(V6,yQo),e(V6,hX),e(hX,LQo),e(V6,xQo),e(V,$Qo),e(V,X6),e(X6,Bpe),e(Bpe,kQo),e(X6,SQo),e(X6,pX),e(pX,RQo),e(X6,PQo),e(V,BQo),e(V,z6),e(z6,Ipe),e(Ipe,IQo),e(z6,NQo),e(z6,_X),e(_X,qQo),e(z6,jQo),e(V,DQo),e(V,W6),e(W6,Npe),e(Npe,GQo),e(W6,OQo),e(W6,uX),e(uX,VQo),e(W6,XQo),e(V,zQo),e(V,Q6),e(Q6,qpe),e(qpe,WQo),e(Q6,QQo),e(Q6,bX),e(bX,HQo),e(Q6,UQo),e(V,JQo),e(V,H6),e(H6,jpe),e(jpe,YQo),e(H6,KQo),e(H6,vX),e(vX,ZQo),e(H6,eHo),e(V,oHo),e(V,U6),e(U6,Dpe),e(Dpe,rHo),e(U6,tHo),e(U6,FX),e(FX,aHo),e(U6,nHo),e(V,sHo),e(V,J6),e(J6,Gpe),e(Gpe,lHo),e(J6,iHo),e(J6,TX),e(TX,dHo),e(J6,cHo),e(V,fHo),e(V,Y6),e(Y6,Ope),e(Ope,mHo),e(Y6,gHo),e(Y6,MX),e(MX,hHo),e(Y6,pHo),e(V,_Ho),e(V,K6),e(K6,Vpe),e(Vpe,uHo),e(K6,bHo),e(K6,EX),e(EX,vHo),e(K6,FHo),e(V,THo),e(V,Z6),e(Z6,Xpe),e(Xpe,MHo),e(Z6,EHo),e(Z6,CX),e(CX,CHo),e(Z6,wHo),e(V,AHo),e(V,e1),e(e1,zpe),e(zpe,yHo),e(e1,LHo),e(e1,wX),e(wX,xHo),e(e1,$Ho),e(V,kHo),e(V,o1),e(o1,Wpe),e(Wpe,SHo),e(o1,RHo),e(o1,AX),e(AX,PHo),e(o1,BHo),e(V,IHo),e(V,r1),e(r1,Qpe),e(Qpe,NHo),e(r1,qHo),e(r1,yX),e(yX,jHo),e(r1,DHo),e(no,GHo),e(no,t1),e(t1,OHo),e(t1,Hpe),e(Hpe,VHo),e(t1,XHo),e(t1,Upe),e(Upe,zHo),e(no,WHo),M(a1,no,null),b(f,hje,u),b(f,rd,u),e(rd,n1),e(n1,Jpe),M(a8,Jpe,null),e(rd,QHo),e(rd,Ype),e(Ype,HHo),b(f,pje,u),b(f,qo,u),M(n8,qo,null),e(qo,UHo),e(qo,td),e(td,JHo),e(td,LX),e(LX,YHo),e(td,KHo),e(td,xX),e(xX,ZHo),e(td,eUo),e(qo,oUo),e(qo,s8),e(s8,rUo),e(s8,Kpe),e(Kpe,tUo),e(s8,aUo),e(qo,nUo),e(qo,gt),M(l8,gt,null),e(gt,sUo),e(gt,Zpe),e(Zpe,lUo),e(gt,iUo),e(gt,ad),e(ad,dUo),e(ad,e_e),e(e_e,cUo),e(ad,fUo),e(ad,$X),e($X,mUo),e(ad,gUo),e(gt,hUo),M(s1,gt,null),e(qo,pUo),e(qo,so),M(i8,so,null),e(so,_Uo),e(so,o_e),e(o_e,uUo),e(so,bUo),e(so,qa),e(qa,vUo),e(qa,r_e),e(r_e,FUo),e(qa,TUo),e(qa,t_e),e(t_e,MUo),e(qa,EUo),e(qa,a_e),e(a_e,CUo),e(qa,wUo),e(so,AUo),e(so,n_e),e(n_e,l1),e(l1,s_e),e(s_e,yUo),e(l1,LUo),e(l1,kX),e(kX,xUo),e(l1,$Uo),e(so,kUo),e(so,i1),e(i1,SUo),e(i1,l_e),e(l_e,RUo),e(i1,PUo),e(i1,i_e),e(i_e,BUo),e(so,IUo),M(d1,so,null),b(f,_je,u),b(f,nd,u),e(nd,c1),e(c1,d_e),M(d8,d_e,null),e(nd,NUo),e(nd,c_e),e(c_e,qUo),b(f,uje,u),b(f,jo,u),M(c8,jo,null),e(jo,jUo),e(jo,sd),e(sd,DUo),e(sd,SX),e(SX,GUo),e(sd,OUo),e(sd,RX),e(RX,VUo),e(sd,XUo),e(jo,zUo),e(jo,f8),e(f8,WUo),e(f8,f_e),e(f_e,QUo),e(f8,HUo),e(jo,UUo),e(jo,ht),M(m8,ht,null),e(ht,JUo),e(ht,m_e),e(m_e,YUo),e(ht,KUo),e(ht,ld),e(ld,ZUo),e(ld,g_e),e(g_e,eJo),e(ld,oJo),e(ld,PX),e(PX,rJo),e(ld,tJo),e(ht,aJo),M(f1,ht,null),e(jo,nJo),e(jo,lo),M(g8,lo,null),e(lo,sJo),e(lo,h_e),e(h_e,lJo),e(lo,iJo),e(lo,ja),e(ja,dJo),e(ja,p_e),e(p_e,cJo),e(ja,fJo),e(ja,__e),e(__e,mJo),e(ja,gJo),e(ja,u_e),e(u_e,hJo),e(ja,pJo),e(lo,_Jo),e(lo,ve),e(ve,m1),e(m1,b_e),e(b_e,uJo),e(m1,bJo),e(m1,BX),e(BX,vJo),e(m1,FJo),e(ve,TJo),e(ve,g1),e(g1,v_e),e(v_e,MJo),e(g1,EJo),e(g1,IX),e(IX,CJo),e(g1,wJo),e(ve,AJo),e(ve,h1),e(h1,F_e),e(F_e,yJo),e(h1,LJo),e(h1,NX),e(NX,xJo),e(h1,$Jo),e(ve,kJo),e(ve,p1),e(p1,T_e),e(T_e,SJo),e(p1,RJo),e(p1,qX),e(qX,PJo),e(p1,BJo),e(ve,IJo),e(ve,Bs),e(Bs,M_e),e(M_e,NJo),e(Bs,qJo),e(Bs,jX),e(jX,jJo),e(Bs,DJo),e(Bs,DX),e(DX,GJo),e(Bs,OJo),e(ve,VJo),e(ve,_1),e(_1,E_e),e(E_e,XJo),e(_1,zJo),e(_1,GX),e(GX,WJo),e(_1,QJo),e(ve,HJo),e(ve,Is),e(Is,C_e),e(C_e,UJo),e(Is,JJo),e(Is,OX),e(OX,YJo),e(Is,KJo),e(Is,VX),e(VX,ZJo),e(Is,eYo),e(ve,oYo),e(ve,pt),e(pt,w_e),e(w_e,rYo),e(pt,tYo),e(pt,XX),e(XX,aYo),e(pt,nYo),e(pt,zX),e(zX,sYo),e(pt,lYo),e(pt,WX),e(WX,iYo),e(pt,dYo),e(ve,cYo),e(ve,u1),e(u1,A_e),e(A_e,fYo),e(u1,mYo),e(u1,QX),e(QX,gYo),e(u1,hYo),e(ve,pYo),e(ve,b1),e(b1,y_e),e(y_e,_Yo),e(b1,uYo),e(b1,HX),e(HX,bYo),e(b1,vYo),e(ve,FYo),e(ve,v1),e(v1,L_e),e(L_e,TYo),e(v1,MYo),e(v1,UX),e(UX,EYo),e(v1,CYo),e(ve,wYo),e(ve,F1),e(F1,x_e),e(x_e,AYo),e(F1,yYo),e(F1,JX),e(JX,LYo),e(F1,xYo),e(ve,$Yo),e(ve,T1),e(T1,$_e),e($_e,kYo),e(T1,SYo),e(T1,YX),e(YX,RYo),e(T1,PYo),e(ve,BYo),e(ve,M1),e(M1,k_e),e(k_e,IYo),e(M1,NYo),e(M1,KX),e(KX,qYo),e(M1,jYo),e(ve,DYo),e(ve,E1),e(E1,S_e),e(S_e,GYo),e(E1,OYo),e(E1,ZX),e(ZX,VYo),e(E1,XYo),e(lo,zYo),e(lo,C1),e(C1,WYo),e(C1,R_e),e(R_e,QYo),e(C1,HYo),e(C1,P_e),e(P_e,UYo),e(lo,JYo),M(w1,lo,null),b(f,bje,u),b(f,id,u),e(id,A1),e(A1,B_e),M(h8,B_e,null),e(id,YYo),e(id,I_e),e(I_e,KYo),b(f,vje,u),b(f,Do,u),M(p8,Do,null),e(Do,ZYo),e(Do,dd),e(dd,eKo),e(dd,ez),e(ez,oKo),e(dd,rKo),e(dd,oz),e(oz,tKo),e(dd,aKo),e(Do,nKo),e(Do,_8),e(_8,sKo),e(_8,N_e),e(N_e,lKo),e(_8,iKo),e(Do,dKo),e(Do,_t),M(u8,_t,null),e(_t,cKo),e(_t,q_e),e(q_e,fKo),e(_t,mKo),e(_t,cd),e(cd,gKo),e(cd,j_e),e(j_e,hKo),e(cd,pKo),e(cd,rz),e(rz,_Ko),e(cd,uKo),e(_t,bKo),M(y1,_t,null),e(Do,vKo),e(Do,io),M(b8,io,null),e(io,FKo),e(io,D_e),e(D_e,TKo),e(io,MKo),e(io,Da),e(Da,EKo),e(Da,G_e),e(G_e,CKo),e(Da,wKo),e(Da,O_e),e(O_e,AKo),e(Da,yKo),e(Da,V_e),e(V_e,LKo),e(Da,xKo),e(io,$Ko),e(io,X_e),e(X_e,L1),e(L1,z_e),e(z_e,kKo),e(L1,SKo),e(L1,tz),e(tz,RKo),e(L1,PKo),e(io,BKo),e(io,x1),e(x1,IKo),e(x1,W_e),e(W_e,NKo),e(x1,qKo),e(x1,Q_e),e(Q_e,jKo),e(io,DKo),M($1,io,null),b(f,Fje,u),b(f,fd,u),e(fd,k1),e(k1,H_e),M(v8,H_e,null),e(fd,GKo),e(fd,U_e),e(U_e,OKo),b(f,Tje,u),b(f,Go,u),M(F8,Go,null),e(Go,VKo),e(Go,md),e(md,XKo),e(md,az),e(az,zKo),e(md,WKo),e(md,nz),e(nz,QKo),e(md,HKo),e(Go,UKo),e(Go,T8),e(T8,JKo),e(T8,J_e),e(J_e,YKo),e(T8,KKo),e(Go,ZKo),e(Go,ut),M(M8,ut,null),e(ut,eZo),e(ut,Y_e),e(Y_e,oZo),e(ut,rZo),e(ut,gd),e(gd,tZo),e(gd,K_e),e(K_e,aZo),e(gd,nZo),e(gd,sz),e(sz,sZo),e(gd,lZo),e(ut,iZo),M(S1,ut,null),e(Go,dZo),e(Go,co),M(E8,co,null),e(co,cZo),e(co,Z_e),e(Z_e,fZo),e(co,mZo),e(co,Ga),e(Ga,gZo),e(Ga,eue),e(eue,hZo),e(Ga,pZo),e(Ga,oue),e(oue,_Zo),e(Ga,uZo),e(Ga,rue),e(rue,bZo),e(Ga,vZo),e(co,FZo),e(co,Se),e(Se,R1),e(R1,tue),e(tue,TZo),e(R1,MZo),e(R1,lz),e(lz,EZo),e(R1,CZo),e(Se,wZo),e(Se,P1),e(P1,aue),e(aue,AZo),e(P1,yZo),e(P1,iz),e(iz,LZo),e(P1,xZo),e(Se,$Zo),e(Se,B1),e(B1,nue),e(nue,kZo),e(B1,SZo),e(B1,dz),e(dz,RZo),e(B1,PZo),e(Se,BZo),e(Se,I1),e(I1,sue),e(sue,IZo),e(I1,NZo),e(I1,cz),e(cz,qZo),e(I1,jZo),e(Se,DZo),e(Se,N1),e(N1,lue),e(lue,GZo),e(N1,OZo),e(N1,fz),e(fz,VZo),e(N1,XZo),e(Se,zZo),e(Se,q1),e(q1,iue),e(iue,WZo),e(q1,QZo),e(q1,mz),e(mz,HZo),e(q1,UZo),e(Se,JZo),e(Se,j1),e(j1,due),e(due,YZo),e(j1,KZo),e(j1,gz),e(gz,ZZo),e(j1,eer),e(Se,oer),e(Se,D1),e(D1,cue),e(cue,rer),e(D1,ter),e(D1,hz),e(hz,aer),e(D1,ner),e(Se,ser),e(Se,G1),e(G1,fue),e(fue,ler),e(G1,ier),e(G1,pz),e(pz,der),e(G1,cer),e(co,fer),e(co,O1),e(O1,mer),e(O1,mue),e(mue,ger),e(O1,her),e(O1,gue),e(gue,per),e(co,_er),M(V1,co,null),b(f,Mje,u),b(f,hd,u),e(hd,X1),e(X1,hue),M(C8,hue,null),e(hd,uer),e(hd,pue),e(pue,ber),b(f,Eje,u),b(f,Oo,u),M(w8,Oo,null),e(Oo,ver),e(Oo,pd),e(pd,Fer),e(pd,_z),e(_z,Ter),e(pd,Mer),e(pd,uz),e(uz,Eer),e(pd,Cer),e(Oo,wer),e(Oo,A8),e(A8,Aer),e(A8,_ue),e(_ue,yer),e(A8,Ler),e(Oo,xer),e(Oo,bt),M(y8,bt,null),e(bt,$er),e(bt,uue),e(uue,ker),e(bt,Ser),e(bt,_d),e(_d,Rer),e(_d,bue),e(bue,Per),e(_d,Ber),e(_d,bz),e(bz,Ier),e(_d,Ner),e(bt,qer),M(z1,bt,null),e(Oo,jer),e(Oo,fo),M(L8,fo,null),e(fo,Der),e(fo,vue),e(vue,Ger),e(fo,Oer),e(fo,Oa),e(Oa,Ver),e(Oa,Fue),e(Fue,Xer),e(Oa,zer),e(Oa,Tue),e(Tue,Wer),e(Oa,Qer),e(Oa,Mue),e(Mue,Her),e(Oa,Uer),e(fo,Jer),e(fo,Kr),e(Kr,W1),e(W1,Eue),e(Eue,Yer),e(W1,Ker),e(W1,vz),e(vz,Zer),e(W1,eor),e(Kr,oor),e(Kr,Q1),e(Q1,Cue),e(Cue,ror),e(Q1,tor),e(Q1,Fz),e(Fz,aor),e(Q1,nor),e(Kr,sor),e(Kr,H1),e(H1,wue),e(wue,lor),e(H1,ior),e(H1,Tz),e(Tz,dor),e(H1,cor),e(Kr,mor),e(Kr,U1),e(U1,Aue),e(Aue,gor),e(U1,hor),e(U1,Mz),e(Mz,por),e(U1,_or),e(Kr,uor),e(Kr,J1),e(J1,yue),e(yue,bor),e(J1,vor),e(J1,Ez),e(Ez,For),e(J1,Tor),e(fo,Mor),e(fo,Y1),e(Y1,Eor),e(Y1,Lue),e(Lue,Cor),e(Y1,wor),e(Y1,xue),e(xue,Aor),e(fo,yor),M(K1,fo,null),b(f,Cje,u),b(f,ud,u),e(ud,Z1),e(Z1,$ue),M(x8,$ue,null),e(ud,Lor),e(ud,kue),e(kue,xor),b(f,wje,u),b(f,Vo,u),M($8,Vo,null),e(Vo,$or),e(Vo,bd),e(bd,kor),e(bd,Cz),e(Cz,Sor),e(bd,Ror),e(bd,wz),e(wz,Por),e(bd,Bor),e(Vo,Ior),e(Vo,k8),e(k8,Nor),e(k8,Sue),e(Sue,qor),e(k8,jor),e(Vo,Dor),e(Vo,vt),M(S8,vt,null),e(vt,Gor),e(vt,Rue),e(Rue,Oor),e(vt,Vor),e(vt,vd),e(vd,Xor),e(vd,Pue),e(Pue,zor),e(vd,Wor),e(vd,Az),e(Az,Qor),e(vd,Hor),e(vt,Uor),M(eT,vt,null),e(Vo,Jor),e(Vo,mo),M(R8,mo,null),e(mo,Yor),e(mo,Bue),e(Bue,Kor),e(mo,Zor),e(mo,Va),e(Va,err),e(Va,Iue),e(Iue,orr),e(Va,rrr),e(Va,Nue),e(Nue,trr),e(Va,arr),e(Va,que),e(que,nrr),e(Va,srr),e(mo,lrr),e(mo,Re),e(Re,oT),e(oT,jue),e(jue,irr),e(oT,drr),e(oT,yz),e(yz,crr),e(oT,frr),e(Re,mrr),e(Re,rT),e(rT,Due),e(Due,grr),e(rT,hrr),e(rT,Lz),e(Lz,prr),e(rT,_rr),e(Re,urr),e(Re,tT),e(tT,Gue),e(Gue,brr),e(tT,vrr),e(tT,xz),e(xz,Frr),e(tT,Trr),e(Re,Mrr),e(Re,aT),e(aT,Oue),e(Oue,Err),e(aT,Crr),e(aT,$z),e($z,wrr),e(aT,Arr),e(Re,yrr),e(Re,nT),e(nT,Vue),e(Vue,Lrr),e(nT,xrr),e(nT,kz),e(kz,$rr),e(nT,krr),e(Re,Srr),e(Re,sT),e(sT,Xue),e(Xue,Rrr),e(sT,Prr),e(sT,Sz),e(Sz,Brr),e(sT,Irr),e(Re,Nrr),e(Re,lT),e(lT,zue),e(zue,qrr),e(lT,jrr),e(lT,Rz),e(Rz,Drr),e(lT,Grr),e(Re,Orr),e(Re,iT),e(iT,Wue),e(Wue,Vrr),e(iT,Xrr),e(iT,Pz),e(Pz,zrr),e(iT,Wrr),e(Re,Qrr),e(Re,dT),e(dT,Que),e(Que,Hrr),e(dT,Urr),e(dT,Bz),e(Bz,Jrr),e(dT,Yrr),e(mo,Krr),e(mo,cT),e(cT,Zrr),e(cT,Hue),e(Hue,etr),e(cT,otr),e(cT,Uue),e(Uue,rtr),e(mo,ttr),M(fT,mo,null),b(f,Aje,u),b(f,Fd,u),e(Fd,mT),e(mT,Jue),M(P8,Jue,null),e(Fd,atr),e(Fd,Yue),e(Yue,ntr),b(f,yje,u),b(f,Xo,u),M(B8,Xo,null),e(Xo,str),e(Xo,Td),e(Td,ltr),e(Td,Iz),e(Iz,itr),e(Td,dtr),e(Td,Nz),e(Nz,ctr),e(Td,ftr),e(Xo,mtr),e(Xo,I8),e(I8,gtr),e(I8,Kue),e(Kue,htr),e(I8,ptr),e(Xo,_tr),e(Xo,Ft),M(N8,Ft,null),e(Ft,utr),e(Ft,Zue),e(Zue,btr),e(Ft,vtr),e(Ft,Md),e(Md,Ftr),e(Md,ebe),e(ebe,Ttr),e(Md,Mtr),e(Md,qz),e(qz,Etr),e(Md,Ctr),e(Ft,wtr),M(gT,Ft,null),e(Xo,Atr),e(Xo,go),M(q8,go,null),e(go,ytr),e(go,obe),e(obe,Ltr),e(go,xtr),e(go,Xa),e(Xa,$tr),e(Xa,rbe),e(rbe,ktr),e(Xa,Str),e(Xa,tbe),e(tbe,Rtr),e(Xa,Ptr),e(Xa,abe),e(abe,Btr),e(Xa,Itr),e(go,Ntr),e(go,j8),e(j8,hT),e(hT,nbe),e(nbe,qtr),e(hT,jtr),e(hT,jz),e(jz,Dtr),e(hT,Gtr),e(j8,Otr),e(j8,pT),e(pT,sbe),e(sbe,Vtr),e(pT,Xtr),e(pT,Dz),e(Dz,ztr),e(pT,Wtr),e(go,Qtr),e(go,_T),e(_T,Htr),e(_T,lbe),e(lbe,Utr),e(_T,Jtr),e(_T,ibe),e(ibe,Ytr),e(go,Ktr),M(uT,go,null),b(f,Lje,u),b(f,Ed,u),e(Ed,bT),e(bT,dbe),M(D8,dbe,null),e(Ed,Ztr),e(Ed,cbe),e(cbe,ear),b(f,xje,u),b(f,zo,u),M(G8,zo,null),e(zo,oar),e(zo,Cd),e(Cd,rar),e(Cd,Gz),e(Gz,tar),e(Cd,aar),e(Cd,Oz),e(Oz,nar),e(Cd,sar),e(zo,lar),e(zo,O8),e(O8,iar),e(O8,fbe),e(fbe,dar),e(O8,car),e(zo,far),e(zo,Tt),M(V8,Tt,null),e(Tt,mar),e(Tt,mbe),e(mbe,gar),e(Tt,har),e(Tt,wd),e(wd,par),e(wd,gbe),e(gbe,_ar),e(wd,uar),e(wd,Vz),e(Vz,bar),e(wd,Far),e(Tt,Tar),M(vT,Tt,null),e(zo,Mar),e(zo,ho),M(X8,ho,null),e(ho,Ear),e(ho,hbe),e(hbe,Car),e(ho,war),e(ho,za),e(za,Aar),e(za,pbe),e(pbe,yar),e(za,Lar),e(za,_be),e(_be,xar),e(za,$ar),e(za,ube),e(ube,kar),e(za,Sar),e(ho,Rar),e(ho,Zr),e(Zr,FT),e(FT,bbe),e(bbe,Par),e(FT,Bar),e(FT,Xz),e(Xz,Iar),e(FT,Nar),e(Zr,qar),e(Zr,TT),e(TT,vbe),e(vbe,jar),e(TT,Dar),e(TT,zz),e(zz,Gar),e(TT,Oar),e(Zr,Var),e(Zr,MT),e(MT,Fbe),e(Fbe,Xar),e(MT,zar),e(MT,Wz),e(Wz,War),e(MT,Qar),e(Zr,Har),e(Zr,ET),e(ET,Tbe),e(Tbe,Uar),e(ET,Jar),e(ET,Qz),e(Qz,Yar),e(ET,Kar),e(Zr,Zar),e(Zr,CT),e(CT,Mbe),e(Mbe,enr),e(CT,onr),e(CT,Hz),e(Hz,rnr),e(CT,tnr),e(ho,anr),e(ho,wT),e(wT,nnr),e(wT,Ebe),e(Ebe,snr),e(wT,lnr),e(wT,Cbe),e(Cbe,inr),e(ho,dnr),M(AT,ho,null),b(f,$je,u),b(f,Ad,u),e(Ad,yT),e(yT,wbe),M(z8,wbe,null),e(Ad,cnr),e(Ad,Abe),e(Abe,fnr),b(f,kje,u),b(f,Wo,u),M(W8,Wo,null),e(Wo,mnr),e(Wo,yd),e(yd,gnr),e(yd,Uz),e(Uz,hnr),e(yd,pnr),e(yd,Jz),e(Jz,_nr),e(yd,unr),e(Wo,bnr),e(Wo,Q8),e(Q8,vnr),e(Q8,ybe),e(ybe,Fnr),e(Q8,Tnr),e(Wo,Mnr),e(Wo,Mt),M(H8,Mt,null),e(Mt,Enr),e(Mt,Lbe),e(Lbe,Cnr),e(Mt,wnr),e(Mt,Ld),e(Ld,Anr),e(Ld,xbe),e(xbe,ynr),e(Ld,Lnr),e(Ld,Yz),e(Yz,xnr),e(Ld,$nr),e(Mt,knr),M(LT,Mt,null),e(Wo,Snr),e(Wo,po),M(U8,po,null),e(po,Rnr),e(po,$be),e($be,Pnr),e(po,Bnr),e(po,Wa),e(Wa,Inr),e(Wa,kbe),e(kbe,Nnr),e(Wa,qnr),e(Wa,Sbe),e(Sbe,jnr),e(Wa,Dnr),e(Wa,Rbe),e(Rbe,Gnr),e(Wa,Onr),e(po,Vnr),e(po,xd),e(xd,xT),e(xT,Pbe),e(Pbe,Xnr),e(xT,znr),e(xT,Kz),e(Kz,Wnr),e(xT,Qnr),e(xd,Hnr),e(xd,$T),e($T,Bbe),e(Bbe,Unr),e($T,Jnr),e($T,Zz),e(Zz,Ynr),e($T,Knr),e(xd,Znr),e(xd,kT),e(kT,Ibe),e(Ibe,esr),e(kT,osr),e(kT,eW),e(eW,rsr),e(kT,tsr),e(po,asr),e(po,ST),e(ST,nsr),e(ST,Nbe),e(Nbe,ssr),e(ST,lsr),e(ST,qbe),e(qbe,isr),e(po,dsr),M(RT,po,null),b(f,Sje,u),b(f,$d,u),e($d,PT),e(PT,jbe),M(J8,jbe,null),e($d,csr),e($d,Dbe),e(Dbe,fsr),b(f,Rje,u),b(f,Qo,u),M(Y8,Qo,null),e(Qo,msr),e(Qo,kd),e(kd,gsr),e(kd,oW),e(oW,hsr),e(kd,psr),e(kd,rW),e(rW,_sr),e(kd,usr),e(Qo,bsr),e(Qo,K8),e(K8,vsr),e(K8,Gbe),e(Gbe,Fsr),e(K8,Tsr),e(Qo,Msr),e(Qo,Et),M(Z8,Et,null),e(Et,Esr),e(Et,Obe),e(Obe,Csr),e(Et,wsr),e(Et,Sd),e(Sd,Asr),e(Sd,Vbe),e(Vbe,ysr),e(Sd,Lsr),e(Sd,tW),e(tW,xsr),e(Sd,$sr),e(Et,ksr),M(BT,Et,null),e(Qo,Ssr),e(Qo,_o),M(e7,_o,null),e(_o,Rsr),e(_o,Xbe),e(Xbe,Psr),e(_o,Bsr),e(_o,Qa),e(Qa,Isr),e(Qa,zbe),e(zbe,Nsr),e(Qa,qsr),e(Qa,Wbe),e(Wbe,jsr),e(Qa,Dsr),e(Qa,Qbe),e(Qbe,Gsr),e(Qa,Osr),e(_o,Vsr),e(_o,o7),e(o7,IT),e(IT,Hbe),e(Hbe,Xsr),e(IT,zsr),e(IT,aW),e(aW,Wsr),e(IT,Qsr),e(o7,Hsr),e(o7,NT),e(NT,Ube),e(Ube,Usr),e(NT,Jsr),e(NT,nW),e(nW,Ysr),e(NT,Ksr),e(_o,Zsr),e(_o,qT),e(qT,elr),e(qT,Jbe),e(Jbe,olr),e(qT,rlr),e(qT,Ybe),e(Ybe,tlr),e(_o,alr),M(jT,_o,null),b(f,Pje,u),b(f,Rd,u),e(Rd,DT),e(DT,Kbe),M(r7,Kbe,null),e(Rd,nlr),e(Rd,Zbe),e(Zbe,slr),b(f,Bje,u),b(f,Ho,u),M(t7,Ho,null),e(Ho,llr),e(Ho,Pd),e(Pd,ilr),e(Pd,sW),e(sW,dlr),e(Pd,clr),e(Pd,lW),e(lW,flr),e(Pd,mlr),e(Ho,glr),e(Ho,a7),e(a7,hlr),e(a7,e2e),e(e2e,plr),e(a7,_lr),e(Ho,ulr),e(Ho,Ct),M(n7,Ct,null),e(Ct,blr),e(Ct,o2e),e(o2e,vlr),e(Ct,Flr),e(Ct,Bd),e(Bd,Tlr),e(Bd,r2e),e(r2e,Mlr),e(Bd,Elr),e(Bd,iW),e(iW,Clr),e(Bd,wlr),e(Ct,Alr),M(GT,Ct,null),e(Ho,ylr),e(Ho,uo),M(s7,uo,null),e(uo,Llr),e(uo,t2e),e(t2e,xlr),e(uo,$lr),e(uo,Ha),e(Ha,klr),e(Ha,a2e),e(a2e,Slr),e(Ha,Rlr),e(Ha,n2e),e(n2e,Plr),e(Ha,Blr),e(Ha,s2e),e(s2e,Ilr),e(Ha,Nlr),e(uo,qlr),e(uo,l2e),e(l2e,OT),e(OT,i2e),e(i2e,jlr),e(OT,Dlr),e(OT,dW),e(dW,Glr),e(OT,Olr),e(uo,Vlr),e(uo,VT),e(VT,Xlr),e(VT,d2e),e(d2e,zlr),e(VT,Wlr),e(VT,c2e),e(c2e,Qlr),e(uo,Hlr),M(XT,uo,null),b(f,Ije,u),b(f,Id,u),e(Id,zT),e(zT,f2e),M(l7,f2e,null),e(Id,Ulr),e(Id,m2e),e(m2e,Jlr),b(f,Nje,u),b(f,Uo,u),M(i7,Uo,null),e(Uo,Ylr),e(Uo,Nd),e(Nd,Klr),e(Nd,cW),e(cW,Zlr),e(Nd,eir),e(Nd,fW),e(fW,oir),e(Nd,rir),e(Uo,tir),e(Uo,d7),e(d7,air),e(d7,g2e),e(g2e,nir),e(d7,sir),e(Uo,lir),e(Uo,wt),M(c7,wt,null),e(wt,iir),e(wt,h2e),e(h2e,dir),e(wt,cir),e(wt,qd),e(qd,fir),e(qd,p2e),e(p2e,mir),e(qd,gir),e(qd,mW),e(mW,hir),e(qd,pir),e(wt,_ir),M(WT,wt,null),e(Uo,uir),e(Uo,bo),M(f7,bo,null),e(bo,bir),e(bo,_2e),e(_2e,vir),e(bo,Fir),e(bo,Ua),e(Ua,Tir),e(Ua,u2e),e(u2e,Mir),e(Ua,Eir),e(Ua,b2e),e(b2e,Cir),e(Ua,wir),e(Ua,v2e),e(v2e,Air),e(Ua,yir),e(bo,Lir),e(bo,Ja),e(Ja,QT),e(QT,F2e),e(F2e,xir),e(QT,$ir),e(QT,gW),e(gW,kir),e(QT,Sir),e(Ja,Rir),e(Ja,HT),e(HT,T2e),e(T2e,Pir),e(HT,Bir),e(HT,hW),e(hW,Iir),e(HT,Nir),e(Ja,qir),e(Ja,UT),e(UT,M2e),e(M2e,jir),e(UT,Dir),e(UT,pW),e(pW,Gir),e(UT,Oir),e(Ja,Vir),e(Ja,JT),e(JT,E2e),e(E2e,Xir),e(JT,zir),e(JT,_W),e(_W,Wir),e(JT,Qir),e(bo,Hir),e(bo,YT),e(YT,Uir),e(YT,C2e),e(C2e,Jir),e(YT,Yir),e(YT,w2e),e(w2e,Kir),e(bo,Zir),M(KT,bo,null),b(f,qje,u),b(f,jd,u),e(jd,ZT),e(ZT,A2e),M(m7,A2e,null),e(jd,edr),e(jd,y2e),e(y2e,odr),b(f,jje,u),b(f,Jo,u),M(g7,Jo,null),e(Jo,rdr),e(Jo,Dd),e(Dd,tdr),e(Dd,uW),e(uW,adr),e(Dd,ndr),e(Dd,bW),e(bW,sdr),e(Dd,ldr),e(Jo,idr),e(Jo,h7),e(h7,ddr),e(h7,L2e),e(L2e,cdr),e(h7,fdr),e(Jo,mdr),e(Jo,At),M(p7,At,null),e(At,gdr),e(At,x2e),e(x2e,hdr),e(At,pdr),e(At,Gd),e(Gd,_dr),e(Gd,$2e),e($2e,udr),e(Gd,bdr),e(Gd,vW),e(vW,vdr),e(Gd,Fdr),e(At,Tdr),M(eM,At,null),e(Jo,Mdr),e(Jo,vo),M(_7,vo,null),e(vo,Edr),e(vo,k2e),e(k2e,Cdr),e(vo,wdr),e(vo,Ya),e(Ya,Adr),e(Ya,S2e),e(S2e,ydr),e(Ya,Ldr),e(Ya,R2e),e(R2e,xdr),e(Ya,$dr),e(Ya,P2e),e(P2e,kdr),e(Ya,Sdr),e(vo,Rdr),e(vo,B2e),e(B2e,oM),e(oM,I2e),e(I2e,Pdr),e(oM,Bdr),e(oM,FW),e(FW,Idr),e(oM,Ndr),e(vo,qdr),e(vo,rM),e(rM,jdr),e(rM,N2e),e(N2e,Ddr),e(rM,Gdr),e(rM,q2e),e(q2e,Odr),e(vo,Vdr),M(tM,vo,null),b(f,Dje,u),b(f,Od,u),e(Od,aM),e(aM,j2e),M(u7,j2e,null),e(Od,Xdr),e(Od,D2e),e(D2e,zdr),b(f,Gje,u),b(f,Yo,u),M(b7,Yo,null),e(Yo,Wdr),e(Yo,Vd),e(Vd,Qdr),e(Vd,TW),e(TW,Hdr),e(Vd,Udr),e(Vd,MW),e(MW,Jdr),e(Vd,Ydr),e(Yo,Kdr),e(Yo,v7),e(v7,Zdr),e(v7,G2e),e(G2e,ecr),e(v7,ocr),e(Yo,rcr),e(Yo,yt),M(F7,yt,null),e(yt,tcr),e(yt,O2e),e(O2e,acr),e(yt,ncr),e(yt,Xd),e(Xd,scr),e(Xd,V2e),e(V2e,lcr),e(Xd,icr),e(Xd,EW),e(EW,dcr),e(Xd,ccr),e(yt,fcr),M(nM,yt,null),e(Yo,mcr),e(Yo,wr),M(T7,wr,null),e(wr,gcr),e(wr,X2e),e(X2e,hcr),e(wr,pcr),e(wr,Ka),e(Ka,_cr),e(Ka,z2e),e(z2e,ucr),e(Ka,bcr),e(Ka,W2e),e(W2e,vcr),e(Ka,Fcr),e(Ka,Q2e),e(Q2e,Tcr),e(Ka,Mcr),e(wr,Ecr),e(wr,q),e(q,sM),e(sM,H2e),e(H2e,Ccr),e(sM,wcr),e(sM,CW),e(CW,Acr),e(sM,ycr),e(q,Lcr),e(q,lM),e(lM,U2e),e(U2e,xcr),e(lM,$cr),e(lM,wW),e(wW,kcr),e(lM,Scr),e(q,Rcr),e(q,iM),e(iM,J2e),e(J2e,Pcr),e(iM,Bcr),e(iM,AW),e(AW,Icr),e(iM,Ncr),e(q,qcr),e(q,dM),e(dM,Y2e),e(Y2e,jcr),e(dM,Dcr),e(dM,yW),e(yW,Gcr),e(dM,Ocr),e(q,Vcr),e(q,cM),e(cM,K2e),e(K2e,Xcr),e(cM,zcr),e(cM,LW),e(LW,Wcr),e(cM,Qcr),e(q,Hcr),e(q,fM),e(fM,Z2e),e(Z2e,Ucr),e(fM,Jcr),e(fM,xW),e(xW,Ycr),e(fM,Kcr),e(q,Zcr),e(q,mM),e(mM,eve),e(eve,efr),e(mM,ofr),e(mM,$W),e($W,rfr),e(mM,tfr),e(q,afr),e(q,gM),e(gM,ove),e(ove,nfr),e(gM,sfr),e(gM,kW),e(kW,lfr),e(gM,ifr),e(q,dfr),e(q,hM),e(hM,rve),e(rve,cfr),e(hM,ffr),e(hM,SW),e(SW,mfr),e(hM,gfr),e(q,hfr),e(q,pM),e(pM,tve),e(tve,pfr),e(pM,_fr),e(pM,RW),e(RW,ufr),e(pM,bfr),e(q,vfr),e(q,_M),e(_M,ave),e(ave,Ffr),e(_M,Tfr),e(_M,PW),e(PW,Mfr),e(_M,Efr),e(q,Cfr),e(q,uM),e(uM,nve),e(nve,wfr),e(uM,Afr),e(uM,BW),e(BW,yfr),e(uM,Lfr),e(q,xfr),e(q,bM),e(bM,sve),e(sve,$fr),e(bM,kfr),e(bM,IW),e(IW,Sfr),e(bM,Rfr),e(q,Pfr),e(q,vM),e(vM,lve),e(lve,Bfr),e(vM,Ifr),e(vM,NW),e(NW,Nfr),e(vM,qfr),e(q,jfr),e(q,FM),e(FM,ive),e(ive,Dfr),e(FM,Gfr),e(FM,qW),e(qW,Ofr),e(FM,Vfr),e(q,Xfr),e(q,TM),e(TM,dve),e(dve,zfr),e(TM,Wfr),e(TM,jW),e(jW,Qfr),e(TM,Hfr),e(q,Ufr),e(q,MM),e(MM,cve),e(cve,Jfr),e(MM,Yfr),e(MM,DW),e(DW,Kfr),e(MM,Zfr),e(q,emr),e(q,Ns),e(Ns,fve),e(fve,omr),e(Ns,rmr),e(Ns,GW),e(GW,tmr),e(Ns,amr),e(Ns,OW),e(OW,nmr),e(Ns,smr),e(q,lmr),e(q,EM),e(EM,mve),e(mve,imr),e(EM,dmr),e(EM,VW),e(VW,cmr),e(EM,fmr),e(q,mmr),e(q,CM),e(CM,gve),e(gve,gmr),e(CM,hmr),e(CM,XW),e(XW,pmr),e(CM,_mr),e(q,umr),e(q,wM),e(wM,hve),e(hve,bmr),e(wM,vmr),e(wM,zW),e(zW,Fmr),e(wM,Tmr),e(q,Mmr),e(q,AM),e(AM,pve),e(pve,Emr),e(AM,Cmr),e(AM,WW),e(WW,wmr),e(AM,Amr),e(q,ymr),e(q,yM),e(yM,_ve),e(_ve,Lmr),e(yM,xmr),e(yM,QW),e(QW,$mr),e(yM,kmr),e(q,Smr),e(q,LM),e(LM,uve),e(uve,Rmr),e(LM,Pmr),e(LM,HW),e(HW,Bmr),e(LM,Imr),e(q,Nmr),e(q,xM),e(xM,bve),e(bve,qmr),e(xM,jmr),e(xM,UW),e(UW,Dmr),e(xM,Gmr),e(q,Omr),e(q,$M),e($M,vve),e(vve,Vmr),e($M,Xmr),e($M,JW),e(JW,zmr),e($M,Wmr),e(q,Qmr),e(q,kM),e(kM,Fve),e(Fve,Hmr),e(kM,Umr),e(kM,YW),e(YW,Jmr),e(kM,Ymr),e(q,Kmr),e(q,SM),e(SM,Tve),e(Tve,Zmr),e(SM,egr),e(SM,KW),e(KW,ogr),e(SM,rgr),e(q,tgr),e(q,RM),e(RM,Mve),e(Mve,agr),e(RM,ngr),e(RM,ZW),e(ZW,sgr),e(RM,lgr),e(q,igr),e(q,PM),e(PM,Eve),e(Eve,dgr),e(PM,cgr),e(PM,eQ),e(eQ,fgr),e(PM,mgr),e(q,ggr),e(q,BM),e(BM,Cve),e(Cve,hgr),e(BM,pgr),e(BM,oQ),e(oQ,_gr),e(BM,ugr),e(q,bgr),e(q,IM),e(IM,wve),e(wve,vgr),e(IM,Fgr),e(IM,rQ),e(rQ,Tgr),e(IM,Mgr),e(q,Egr),e(q,NM),e(NM,Ave),e(Ave,Cgr),e(NM,wgr),e(NM,tQ),e(tQ,Agr),e(NM,ygr),e(q,Lgr),e(q,qM),e(qM,yve),e(yve,xgr),e(qM,$gr),e(qM,aQ),e(aQ,kgr),e(qM,Sgr),e(q,Rgr),e(q,jM),e(jM,Lve),e(Lve,Pgr),e(jM,Bgr),e(jM,nQ),e(nQ,Igr),e(jM,Ngr),e(q,qgr),e(q,DM),e(DM,xve),e(xve,jgr),e(DM,Dgr),e(DM,sQ),e(sQ,Ggr),e(DM,Ogr),e(q,Vgr),e(q,GM),e(GM,$ve),e($ve,Xgr),e(GM,zgr),e(GM,lQ),e(lQ,Wgr),e(GM,Qgr),e(q,Hgr),e(q,OM),e(OM,kve),e(kve,Ugr),e(OM,Jgr),e(OM,iQ),e(iQ,Ygr),e(OM,Kgr),e(q,Zgr),e(q,VM),e(VM,Sve),e(Sve,ehr),e(VM,ohr),e(VM,dQ),e(dQ,rhr),e(VM,thr),e(q,ahr),e(q,XM),e(XM,Rve),e(Rve,nhr),e(XM,shr),e(XM,cQ),e(cQ,lhr),e(XM,ihr),e(q,dhr),e(q,zM),e(zM,Pve),e(Pve,chr),e(zM,fhr),e(zM,fQ),e(fQ,mhr),e(zM,ghr),e(q,hhr),e(q,WM),e(WM,Bve),e(Bve,phr),e(WM,_hr),e(WM,mQ),e(mQ,uhr),e(WM,bhr),e(q,vhr),e(q,QM),e(QM,Ive),e(Ive,Fhr),e(QM,Thr),e(QM,gQ),e(gQ,Mhr),e(QM,Ehr),e(q,Chr),e(q,HM),e(HM,Nve),e(Nve,whr),e(HM,Ahr),e(HM,hQ),e(hQ,yhr),e(HM,Lhr),e(q,xhr),e(q,UM),e(UM,qve),e(qve,$hr),e(UM,khr),e(UM,pQ),e(pQ,Shr),e(UM,Rhr),e(q,Phr),e(q,JM),e(JM,jve),e(jve,Bhr),e(JM,Ihr),e(JM,_Q),e(_Q,Nhr),e(JM,qhr),e(q,jhr),e(q,YM),e(YM,Dve),e(Dve,Dhr),e(YM,Ghr),e(YM,uQ),e(uQ,Ohr),e(YM,Vhr),e(wr,Xhr),M(KM,wr,null),b(f,Oje,u),b(f,zd,u),e(zd,ZM),e(ZM,Gve),M(M7,Gve,null),e(zd,zhr),e(zd,Ove),e(Ove,Whr),b(f,Vje,u),b(f,Ko,u),M(E7,Ko,null),e(Ko,Qhr),e(Ko,Wd),e(Wd,Hhr),e(Wd,bQ),e(bQ,Uhr),e(Wd,Jhr),e(Wd,vQ),e(vQ,Yhr),e(Wd,Khr),e(Ko,Zhr),e(Ko,C7),e(C7,epr),e(C7,Vve),e(Vve,opr),e(C7,rpr),e(Ko,tpr),e(Ko,Lt),M(w7,Lt,null),e(Lt,apr),e(Lt,Xve),e(Xve,npr),e(Lt,spr),e(Lt,Qd),e(Qd,lpr),e(Qd,zve),e(zve,ipr),e(Qd,dpr),e(Qd,FQ),e(FQ,cpr),e(Qd,fpr),e(Lt,mpr),M(e4,Lt,null),e(Ko,gpr),e(Ko,Ar),M(A7,Ar,null),e(Ar,hpr),e(Ar,Wve),e(Wve,ppr),e(Ar,_pr),e(Ar,Za),e(Za,upr),e(Za,Qve),e(Qve,bpr),e(Za,vpr),e(Za,Hve),e(Hve,Fpr),e(Za,Tpr),e(Za,Uve),e(Uve,Mpr),e(Za,Epr),e(Ar,Cpr),e(Ar,se),e(se,o4),e(o4,Jve),e(Jve,wpr),e(o4,Apr),e(o4,TQ),e(TQ,ypr),e(o4,Lpr),e(se,xpr),e(se,r4),e(r4,Yve),e(Yve,$pr),e(r4,kpr),e(r4,MQ),e(MQ,Spr),e(r4,Rpr),e(se,Ppr),e(se,t4),e(t4,Kve),e(Kve,Bpr),e(t4,Ipr),e(t4,EQ),e(EQ,Npr),e(t4,qpr),e(se,jpr),e(se,a4),e(a4,Zve),e(Zve,Dpr),e(a4,Gpr),e(a4,CQ),e(CQ,Opr),e(a4,Vpr),e(se,Xpr),e(se,n4),e(n4,eFe),e(eFe,zpr),e(n4,Wpr),e(n4,wQ),e(wQ,Qpr),e(n4,Hpr),e(se,Upr),e(se,s4),e(s4,oFe),e(oFe,Jpr),e(s4,Ypr),e(s4,AQ),e(AQ,Kpr),e(s4,Zpr),e(se,e_r),e(se,l4),e(l4,rFe),e(rFe,o_r),e(l4,r_r),e(l4,yQ),e(yQ,t_r),e(l4,a_r),e(se,n_r),e(se,i4),e(i4,tFe),e(tFe,s_r),e(i4,l_r),e(i4,LQ),e(LQ,i_r),e(i4,d_r),e(se,c_r),e(se,d4),e(d4,aFe),e(aFe,f_r),e(d4,m_r),e(d4,xQ),e(xQ,g_r),e(d4,h_r),e(se,p_r),e(se,c4),e(c4,nFe),e(nFe,__r),e(c4,u_r),e(c4,$Q),e($Q,b_r),e(c4,v_r),e(se,F_r),e(se,f4),e(f4,sFe),e(sFe,T_r),e(f4,M_r),e(f4,kQ),e(kQ,E_r),e(f4,C_r),e(se,w_r),e(se,m4),e(m4,lFe),e(lFe,A_r),e(m4,y_r),e(m4,SQ),e(SQ,L_r),e(m4,x_r),e(se,$_r),e(se,g4),e(g4,iFe),e(iFe,k_r),e(g4,S_r),e(g4,RQ),e(RQ,R_r),e(g4,P_r),e(se,B_r),e(se,h4),e(h4,dFe),e(dFe,I_r),e(h4,N_r),e(h4,PQ),e(PQ,q_r),e(h4,j_r),e(se,D_r),e(se,p4),e(p4,cFe),e(cFe,G_r),e(p4,O_r),e(p4,BQ),e(BQ,V_r),e(p4,X_r),e(se,z_r),e(se,_4),e(_4,fFe),e(fFe,W_r),e(_4,Q_r),e(_4,IQ),e(IQ,H_r),e(_4,U_r),e(se,J_r),e(se,u4),e(u4,mFe),e(mFe,Y_r),e(u4,K_r),e(u4,NQ),e(NQ,Z_r),e(u4,eur),e(se,our),e(se,b4),e(b4,gFe),e(gFe,rur),e(b4,tur),e(b4,qQ),e(qQ,aur),e(b4,nur),e(se,sur),e(se,v4),e(v4,hFe),e(hFe,lur),e(v4,iur),e(v4,jQ),e(jQ,dur),e(v4,cur),e(se,fur),e(se,F4),e(F4,pFe),e(pFe,mur),e(F4,gur),e(F4,DQ),e(DQ,hur),e(F4,pur),e(se,_ur),e(se,T4),e(T4,_Fe),e(_Fe,uur),e(T4,bur),e(T4,GQ),e(GQ,vur),e(T4,Fur),e(se,Tur),e(se,M4),e(M4,uFe),e(uFe,Mur),e(M4,Eur),e(M4,OQ),e(OQ,Cur),e(M4,wur),e(se,Aur),e(se,E4),e(E4,bFe),e(bFe,yur),e(E4,Lur),e(E4,VQ),e(VQ,xur),e(E4,$ur),e(Ar,kur),M(C4,Ar,null),b(f,Xje,u),b(f,Hd,u),e(Hd,w4),e(w4,vFe),M(y7,vFe,null),e(Hd,Sur),e(Hd,FFe),e(FFe,Rur),b(f,zje,u),b(f,Zo,u),M(L7,Zo,null),e(Zo,Pur),e(Zo,Ud),e(Ud,Bur),e(Ud,XQ),e(XQ,Iur),e(Ud,Nur),e(Ud,zQ),e(zQ,qur),e(Ud,jur),e(Zo,Dur),e(Zo,x7),e(x7,Gur),e(x7,TFe),e(TFe,Our),e(x7,Vur),e(Zo,Xur),e(Zo,xt),M($7,xt,null),e(xt,zur),e(xt,MFe),e(MFe,Wur),e(xt,Qur),e(xt,Jd),e(Jd,Hur),e(Jd,EFe),e(EFe,Uur),e(Jd,Jur),e(Jd,WQ),e(WQ,Yur),e(Jd,Kur),e(xt,Zur),M(A4,xt,null),e(Zo,ebr),e(Zo,yr),M(k7,yr,null),e(yr,obr),e(yr,CFe),e(CFe,rbr),e(yr,tbr),e(yr,en),e(en,abr),e(en,wFe),e(wFe,nbr),e(en,sbr),e(en,AFe),e(AFe,lbr),e(en,ibr),e(en,yFe),e(yFe,dbr),e(en,cbr),e(yr,fbr),e(yr,Me),e(Me,y4),e(y4,LFe),e(LFe,mbr),e(y4,gbr),e(y4,QQ),e(QQ,hbr),e(y4,pbr),e(Me,_br),e(Me,L4),e(L4,xFe),e(xFe,ubr),e(L4,bbr),e(L4,HQ),e(HQ,vbr),e(L4,Fbr),e(Me,Tbr),e(Me,x4),e(x4,$Fe),e($Fe,Mbr),e(x4,Ebr),e(x4,UQ),e(UQ,Cbr),e(x4,wbr),e(Me,Abr),e(Me,$4),e($4,kFe),e(kFe,ybr),e($4,Lbr),e($4,JQ),e(JQ,xbr),e($4,$br),e(Me,kbr),e(Me,k4),e(k4,SFe),e(SFe,Sbr),e(k4,Rbr),e(k4,YQ),e(YQ,Pbr),e(k4,Bbr),e(Me,Ibr),e(Me,S4),e(S4,RFe),e(RFe,Nbr),e(S4,qbr),e(S4,KQ),e(KQ,jbr),e(S4,Dbr),e(Me,Gbr),e(Me,R4),e(R4,PFe),e(PFe,Obr),e(R4,Vbr),e(R4,ZQ),e(ZQ,Xbr),e(R4,zbr),e(Me,Wbr),e(Me,P4),e(P4,BFe),e(BFe,Qbr),e(P4,Hbr),e(P4,eH),e(eH,Ubr),e(P4,Jbr),e(Me,Ybr),e(Me,B4),e(B4,IFe),e(IFe,Kbr),e(B4,Zbr),e(B4,oH),e(oH,e2r),e(B4,o2r),e(Me,r2r),e(Me,I4),e(I4,NFe),e(NFe,t2r),e(I4,a2r),e(I4,rH),e(rH,n2r),e(I4,s2r),e(Me,l2r),e(Me,N4),e(N4,qFe),e(qFe,i2r),e(N4,d2r),e(N4,tH),e(tH,c2r),e(N4,f2r),e(Me,m2r),e(Me,q4),e(q4,jFe),e(jFe,g2r),e(q4,h2r),e(q4,aH),e(aH,p2r),e(q4,_2r),e(Me,u2r),e(Me,j4),e(j4,DFe),e(DFe,b2r),e(j4,v2r),e(j4,nH),e(nH,F2r),e(j4,T2r),e(yr,M2r),M(D4,yr,null),b(f,Wje,u),b(f,Yd,u),e(Yd,G4),e(G4,GFe),M(S7,GFe,null),e(Yd,E2r),e(Yd,OFe),e(OFe,C2r),b(f,Qje,u),b(f,er,u),M(R7,er,null),e(er,w2r),e(er,Kd),e(Kd,A2r),e(Kd,sH),e(sH,y2r),e(Kd,L2r),e(Kd,lH),e(lH,x2r),e(Kd,$2r),e(er,k2r),e(er,P7),e(P7,S2r),e(P7,VFe),e(VFe,R2r),e(P7,P2r),e(er,B2r),e(er,$t),M(B7,$t,null),e($t,I2r),e($t,XFe),e(XFe,N2r),e($t,q2r),e($t,Zd),e(Zd,j2r),e(Zd,zFe),e(zFe,D2r),e(Zd,G2r),e(Zd,iH),e(iH,O2r),e(Zd,V2r),e($t,X2r),M(O4,$t,null),e(er,z2r),e(er,Lr),M(I7,Lr,null),e(Lr,W2r),e(Lr,WFe),e(WFe,Q2r),e(Lr,H2r),e(Lr,on),e(on,U2r),e(on,QFe),e(QFe,J2r),e(on,Y2r),e(on,HFe),e(HFe,K2r),e(on,Z2r),e(on,UFe),e(UFe,evr),e(on,ovr),e(Lr,rvr),e(Lr,rn),e(rn,V4),e(V4,JFe),e(JFe,tvr),e(V4,avr),e(V4,dH),e(dH,nvr),e(V4,svr),e(rn,lvr),e(rn,X4),e(X4,YFe),e(YFe,ivr),e(X4,dvr),e(X4,cH),e(cH,cvr),e(X4,fvr),e(rn,mvr),e(rn,z4),e(z4,KFe),e(KFe,gvr),e(z4,hvr),e(z4,fH),e(fH,pvr),e(z4,_vr),e(rn,uvr),e(rn,W4),e(W4,ZFe),e(ZFe,bvr),e(W4,vvr),e(W4,mH),e(mH,Fvr),e(W4,Tvr),e(Lr,Mvr),M(Q4,Lr,null),b(f,Hje,u),b(f,ec,u),e(ec,H4),e(H4,e6e),M(N7,e6e,null),e(ec,Evr),e(ec,o6e),e(o6e,Cvr),b(f,Uje,u),b(f,or,u),M(q7,or,null),e(or,wvr),e(or,oc),e(oc,Avr),e(oc,gH),e(gH,yvr),e(oc,Lvr),e(oc,hH),e(hH,xvr),e(oc,$vr),e(or,kvr),e(or,j7),e(j7,Svr),e(j7,r6e),e(r6e,Rvr),e(j7,Pvr),e(or,Bvr),e(or,kt),M(D7,kt,null),e(kt,Ivr),e(kt,t6e),e(t6e,Nvr),e(kt,qvr),e(kt,rc),e(rc,jvr),e(rc,a6e),e(a6e,Dvr),e(rc,Gvr),e(rc,pH),e(pH,Ovr),e(rc,Vvr),e(kt,Xvr),M(U4,kt,null),e(or,zvr),e(or,xr),M(G7,xr,null),e(xr,Wvr),e(xr,n6e),e(n6e,Qvr),e(xr,Hvr),e(xr,tn),e(tn,Uvr),e(tn,s6e),e(s6e,Jvr),e(tn,Yvr),e(tn,l6e),e(l6e,Kvr),e(tn,Zvr),e(tn,i6e),e(i6e,eFr),e(tn,oFr),e(xr,rFr),e(xr,ie),e(ie,J4),e(J4,d6e),e(d6e,tFr),e(J4,aFr),e(J4,_H),e(_H,nFr),e(J4,sFr),e(ie,lFr),e(ie,Y4),e(Y4,c6e),e(c6e,iFr),e(Y4,dFr),e(Y4,uH),e(uH,cFr),e(Y4,fFr),e(ie,mFr),e(ie,K4),e(K4,f6e),e(f6e,gFr),e(K4,hFr),e(K4,bH),e(bH,pFr),e(K4,_Fr),e(ie,uFr),e(ie,Z4),e(Z4,m6e),e(m6e,bFr),e(Z4,vFr),e(Z4,vH),e(vH,FFr),e(Z4,TFr),e(ie,MFr),e(ie,eE),e(eE,g6e),e(g6e,EFr),e(eE,CFr),e(eE,FH),e(FH,wFr),e(eE,AFr),e(ie,yFr),e(ie,oE),e(oE,h6e),e(h6e,LFr),e(oE,xFr),e(oE,TH),e(TH,$Fr),e(oE,kFr),e(ie,SFr),e(ie,rE),e(rE,p6e),e(p6e,RFr),e(rE,PFr),e(rE,MH),e(MH,BFr),e(rE,IFr),e(ie,NFr),e(ie,tE),e(tE,_6e),e(_6e,qFr),e(tE,jFr),e(tE,EH),e(EH,DFr),e(tE,GFr),e(ie,OFr),e(ie,aE),e(aE,u6e),e(u6e,VFr),e(aE,XFr),e(aE,CH),e(CH,zFr),e(aE,WFr),e(ie,QFr),e(ie,nE),e(nE,b6e),e(b6e,HFr),e(nE,UFr),e(nE,wH),e(wH,JFr),e(nE,YFr),e(ie,KFr),e(ie,sE),e(sE,v6e),e(v6e,ZFr),e(sE,e6r),e(sE,AH),e(AH,o6r),e(sE,r6r),e(ie,t6r),e(ie,lE),e(lE,F6e),e(F6e,a6r),e(lE,n6r),e(lE,yH),e(yH,s6r),e(lE,l6r),e(ie,i6r),e(ie,iE),e(iE,T6e),e(T6e,d6r),e(iE,c6r),e(iE,LH),e(LH,f6r),e(iE,m6r),e(ie,g6r),e(ie,dE),e(dE,M6e),e(M6e,h6r),e(dE,p6r),e(dE,xH),e(xH,_6r),e(dE,u6r),e(ie,b6r),e(ie,cE),e(cE,E6e),e(E6e,v6r),e(cE,F6r),e(cE,$H),e($H,T6r),e(cE,M6r),e(ie,E6r),e(ie,fE),e(fE,C6e),e(C6e,C6r),e(fE,w6r),e(fE,kH),e(kH,A6r),e(fE,y6r),e(ie,L6r),e(ie,mE),e(mE,w6e),e(w6e,x6r),e(mE,$6r),e(mE,SH),e(SH,k6r),e(mE,S6r),e(ie,R6r),e(ie,gE),e(gE,A6e),e(A6e,P6r),e(gE,B6r),e(gE,RH),e(RH,I6r),e(gE,N6r),e(ie,q6r),e(ie,hE),e(hE,y6e),e(y6e,j6r),e(hE,D6r),e(hE,PH),e(PH,G6r),e(hE,O6r),e(ie,V6r),e(ie,pE),e(pE,L6e),e(L6e,X6r),e(pE,z6r),e(pE,BH),e(BH,W6r),e(pE,Q6r),e(xr,H6r),M(_E,xr,null),b(f,Jje,u),b(f,tc,u),e(tc,uE),e(uE,x6e),M(O7,x6e,null),e(tc,U6r),e(tc,$6e),e($6e,J6r),b(f,Yje,u),b(f,rr,u),M(V7,rr,null),e(rr,Y6r),e(rr,ac),e(ac,K6r),e(ac,IH),e(IH,Z6r),e(ac,e1r),e(ac,NH),e(NH,o1r),e(ac,r1r),e(rr,t1r),e(rr,X7),e(X7,a1r),e(X7,k6e),e(k6e,n1r),e(X7,s1r),e(rr,l1r),e(rr,St),M(z7,St,null),e(St,i1r),e(St,S6e),e(S6e,d1r),e(St,c1r),e(St,nc),e(nc,f1r),e(nc,R6e),e(R6e,m1r),e(nc,g1r),e(nc,qH),e(qH,h1r),e(nc,p1r),e(St,_1r),M(bE,St,null),e(rr,u1r),e(rr,$r),M(W7,$r,null),e($r,b1r),e($r,P6e),e(P6e,v1r),e($r,F1r),e($r,an),e(an,T1r),e(an,B6e),e(B6e,M1r),e(an,E1r),e(an,I6e),e(I6e,C1r),e(an,w1r),e(an,N6e),e(N6e,A1r),e(an,y1r),e($r,L1r),e($r,ye),e(ye,vE),e(vE,q6e),e(q6e,x1r),e(vE,$1r),e(vE,jH),e(jH,k1r),e(vE,S1r),e(ye,R1r),e(ye,FE),e(FE,j6e),e(j6e,P1r),e(FE,B1r),e(FE,DH),e(DH,I1r),e(FE,N1r),e(ye,q1r),e(ye,TE),e(TE,D6e),e(D6e,j1r),e(TE,D1r),e(TE,GH),e(GH,G1r),e(TE,O1r),e(ye,V1r),e(ye,ME),e(ME,G6e),e(G6e,X1r),e(ME,z1r),e(ME,OH),e(OH,W1r),e(ME,Q1r),e(ye,H1r),e(ye,EE),e(EE,O6e),e(O6e,U1r),e(EE,J1r),e(EE,VH),e(VH,Y1r),e(EE,K1r),e(ye,Z1r),e(ye,CE),e(CE,V6e),e(V6e,eTr),e(CE,oTr),e(CE,XH),e(XH,rTr),e(CE,tTr),e(ye,aTr),e(ye,wE),e(wE,X6e),e(X6e,nTr),e(wE,sTr),e(wE,zH),e(zH,lTr),e(wE,iTr),e(ye,dTr),e(ye,AE),e(AE,z6e),e(z6e,cTr),e(AE,fTr),e(AE,WH),e(WH,mTr),e(AE,gTr),e(ye,hTr),e(ye,yE),e(yE,W6e),e(W6e,pTr),e(yE,_Tr),e(yE,QH),e(QH,uTr),e(yE,bTr),e(ye,vTr),e(ye,LE),e(LE,Q6e),e(Q6e,FTr),e(LE,TTr),e(LE,HH),e(HH,MTr),e(LE,ETr),e($r,CTr),M(xE,$r,null),b(f,Kje,u),b(f,sc,u),e(sc,$E),e($E,H6e),M(Q7,H6e,null),e(sc,wTr),e(sc,U6e),e(U6e,ATr),b(f,Zje,u),b(f,tr,u),M(H7,tr,null),e(tr,yTr),e(tr,lc),e(lc,LTr),e(lc,UH),e(UH,xTr),e(lc,$Tr),e(lc,JH),e(JH,kTr),e(lc,STr),e(tr,RTr),e(tr,U7),e(U7,PTr),e(U7,J6e),e(J6e,BTr),e(U7,ITr),e(tr,NTr),e(tr,Rt),M(J7,Rt,null),e(Rt,qTr),e(Rt,Y6e),e(Y6e,jTr),e(Rt,DTr),e(Rt,ic),e(ic,GTr),e(ic,K6e),e(K6e,OTr),e(ic,VTr),e(ic,YH),e(YH,XTr),e(ic,zTr),e(Rt,WTr),M(kE,Rt,null),e(tr,QTr),e(tr,kr),M(Y7,kr,null),e(kr,HTr),e(kr,Z6e),e(Z6e,UTr),e(kr,JTr),e(kr,nn),e(nn,YTr),e(nn,e1e),e(e1e,KTr),e(nn,ZTr),e(nn,o1e),e(o1e,eMr),e(nn,oMr),e(nn,r1e),e(r1e,rMr),e(nn,tMr),e(kr,aMr),e(kr,oe),e(oe,SE),e(SE,t1e),e(t1e,nMr),e(SE,sMr),e(SE,KH),e(KH,lMr),e(SE,iMr),e(oe,dMr),e(oe,RE),e(RE,a1e),e(a1e,cMr),e(RE,fMr),e(RE,ZH),e(ZH,mMr),e(RE,gMr),e(oe,hMr),e(oe,PE),e(PE,n1e),e(n1e,pMr),e(PE,_Mr),e(PE,eU),e(eU,uMr),e(PE,bMr),e(oe,vMr),e(oe,BE),e(BE,s1e),e(s1e,FMr),e(BE,TMr),e(BE,oU),e(oU,MMr),e(BE,EMr),e(oe,CMr),e(oe,IE),e(IE,l1e),e(l1e,wMr),e(IE,AMr),e(IE,rU),e(rU,yMr),e(IE,LMr),e(oe,xMr),e(oe,NE),e(NE,i1e),e(i1e,$Mr),e(NE,kMr),e(NE,tU),e(tU,SMr),e(NE,RMr),e(oe,PMr),e(oe,qE),e(qE,d1e),e(d1e,BMr),e(qE,IMr),e(qE,aU),e(aU,NMr),e(qE,qMr),e(oe,jMr),e(oe,jE),e(jE,c1e),e(c1e,DMr),e(jE,GMr),e(jE,nU),e(nU,OMr),e(jE,VMr),e(oe,XMr),e(oe,DE),e(DE,f1e),e(f1e,zMr),e(DE,WMr),e(DE,sU),e(sU,QMr),e(DE,HMr),e(oe,UMr),e(oe,GE),e(GE,m1e),e(m1e,JMr),e(GE,YMr),e(GE,lU),e(lU,KMr),e(GE,ZMr),e(oe,e4r),e(oe,OE),e(OE,g1e),e(g1e,o4r),e(OE,r4r),e(OE,iU),e(iU,t4r),e(OE,a4r),e(oe,n4r),e(oe,VE),e(VE,h1e),e(h1e,s4r),e(VE,l4r),e(VE,dU),e(dU,i4r),e(VE,d4r),e(oe,c4r),e(oe,XE),e(XE,p1e),e(p1e,f4r),e(XE,m4r),e(XE,cU),e(cU,g4r),e(XE,h4r),e(oe,p4r),e(oe,zE),e(zE,_1e),e(_1e,_4r),e(zE,u4r),e(zE,fU),e(fU,b4r),e(zE,v4r),e(oe,F4r),e(oe,WE),e(WE,u1e),e(u1e,T4r),e(WE,M4r),e(WE,mU),e(mU,E4r),e(WE,C4r),e(oe,w4r),e(oe,QE),e(QE,b1e),e(b1e,A4r),e(QE,y4r),e(QE,gU),e(gU,L4r),e(QE,x4r),e(oe,$4r),e(oe,HE),e(HE,v1e),e(v1e,k4r),e(HE,S4r),e(HE,hU),e(hU,R4r),e(HE,P4r),e(oe,B4r),e(oe,UE),e(UE,F1e),e(F1e,I4r),e(UE,N4r),e(UE,pU),e(pU,q4r),e(UE,j4r),e(oe,D4r),e(oe,JE),e(JE,T1e),e(T1e,G4r),e(JE,O4r),e(JE,_U),e(_U,V4r),e(JE,X4r),e(oe,z4r),e(oe,YE),e(YE,M1e),e(M1e,W4r),e(YE,Q4r),e(YE,uU),e(uU,H4r),e(YE,U4r),e(oe,J4r),e(oe,KE),e(KE,E1e),e(E1e,Y4r),e(KE,K4r),e(KE,bU),e(bU,Z4r),e(KE,eEr),e(oe,oEr),e(oe,ZE),e(ZE,C1e),e(C1e,rEr),e(ZE,tEr),e(ZE,vU),e(vU,aEr),e(ZE,nEr),e(oe,sEr),e(oe,eC),e(eC,w1e),e(w1e,lEr),e(eC,iEr),e(eC,FU),e(FU,dEr),e(eC,cEr),e(oe,fEr),e(oe,oC),e(oC,A1e),e(A1e,mEr),e(oC,gEr),e(oC,TU),e(TU,hEr),e(oC,pEr),e(oe,_Er),e(oe,rC),e(rC,y1e),e(y1e,uEr),e(rC,bEr),e(rC,MU),e(MU,vEr),e(rC,FEr),e(oe,TEr),e(oe,tC),e(tC,L1e),e(L1e,MEr),e(tC,EEr),e(tC,EU),e(EU,CEr),e(tC,wEr),e(kr,AEr),M(aC,kr,null),b(f,eDe,u),b(f,dc,u),e(dc,nC),e(nC,x1e),M(K7,x1e,null),e(dc,yEr),e(dc,$1e),e($1e,LEr),b(f,oDe,u),b(f,ar,u),M(Z7,ar,null),e(ar,xEr),e(ar,cc),e(cc,$Er),e(cc,CU),e(CU,kEr),e(cc,SEr),e(cc,wU),e(wU,REr),e(cc,PEr),e(ar,BEr),e(ar,e9),e(e9,IEr),e(e9,k1e),e(k1e,NEr),e(e9,qEr),e(ar,jEr),e(ar,Pt),M(o9,Pt,null),e(Pt,DEr),e(Pt,S1e),e(S1e,GEr),e(Pt,OEr),e(Pt,fc),e(fc,VEr),e(fc,R1e),e(R1e,XEr),e(fc,zEr),e(fc,AU),e(AU,WEr),e(fc,QEr),e(Pt,HEr),M(sC,Pt,null),e(ar,UEr),e(ar,Sr),M(r9,Sr,null),e(Sr,JEr),e(Sr,P1e),e(P1e,YEr),e(Sr,KEr),e(Sr,sn),e(sn,ZEr),e(sn,B1e),e(B1e,eCr),e(sn,oCr),e(sn,I1e),e(I1e,rCr),e(sn,tCr),e(sn,N1e),e(N1e,aCr),e(sn,nCr),e(Sr,sCr),e(Sr,pe),e(pe,lC),e(lC,q1e),e(q1e,lCr),e(lC,iCr),e(lC,yU),e(yU,dCr),e(lC,cCr),e(pe,fCr),e(pe,iC),e(iC,j1e),e(j1e,mCr),e(iC,gCr),e(iC,LU),e(LU,hCr),e(iC,pCr),e(pe,_Cr),e(pe,dC),e(dC,D1e),e(D1e,uCr),e(dC,bCr),e(dC,xU),e(xU,vCr),e(dC,FCr),e(pe,TCr),e(pe,cC),e(cC,G1e),e(G1e,MCr),e(cC,ECr),e(cC,$U),e($U,CCr),e(cC,wCr),e(pe,ACr),e(pe,fC),e(fC,O1e),e(O1e,yCr),e(fC,LCr),e(fC,kU),e(kU,xCr),e(fC,$Cr),e(pe,kCr),e(pe,mC),e(mC,V1e),e(V1e,SCr),e(mC,RCr),e(mC,SU),e(SU,PCr),e(mC,BCr),e(pe,ICr),e(pe,gC),e(gC,X1e),e(X1e,NCr),e(gC,qCr),e(gC,RU),e(RU,jCr),e(gC,DCr),e(pe,GCr),e(pe,hC),e(hC,z1e),e(z1e,OCr),e(hC,VCr),e(hC,PU),e(PU,XCr),e(hC,zCr),e(pe,WCr),e(pe,pC),e(pC,W1e),e(W1e,QCr),e(pC,HCr),e(pC,BU),e(BU,UCr),e(pC,JCr),e(pe,YCr),e(pe,_C),e(_C,Q1e),e(Q1e,KCr),e(_C,ZCr),e(_C,IU),e(IU,e5r),e(_C,o5r),e(pe,r5r),e(pe,uC),e(uC,H1e),e(H1e,t5r),e(uC,a5r),e(uC,NU),e(NU,n5r),e(uC,s5r),e(pe,l5r),e(pe,bC),e(bC,U1e),e(U1e,i5r),e(bC,d5r),e(bC,qU),e(qU,c5r),e(bC,f5r),e(pe,m5r),e(pe,vC),e(vC,J1e),e(J1e,g5r),e(vC,h5r),e(vC,jU),e(jU,p5r),e(vC,_5r),e(pe,u5r),e(pe,FC),e(FC,Y1e),e(Y1e,b5r),e(FC,v5r),e(FC,DU),e(DU,F5r),e(FC,T5r),e(pe,M5r),e(pe,TC),e(TC,K1e),e(K1e,E5r),e(TC,C5r),e(TC,GU),e(GU,w5r),e(TC,A5r),e(pe,y5r),e(pe,MC),e(MC,Z1e),e(Z1e,L5r),e(MC,x5r),e(MC,OU),e(OU,$5r),e(MC,k5r),e(pe,S5r),e(pe,EC),e(EC,eTe),e(eTe,R5r),e(EC,P5r),e(EC,VU),e(VU,B5r),e(EC,I5r),e(Sr,N5r),M(CC,Sr,null),b(f,rDe,u),b(f,mc,u),e(mc,wC),e(wC,oTe),M(t9,oTe,null),e(mc,q5r),e(mc,rTe),e(rTe,j5r),b(f,tDe,u),b(f,nr,u),M(a9,nr,null),e(nr,D5r),e(nr,gc),e(gc,G5r),e(gc,XU),e(XU,O5r),e(gc,V5r),e(gc,zU),e(zU,X5r),e(gc,z5r),e(nr,W5r),e(nr,n9),e(n9,Q5r),e(n9,tTe),e(tTe,H5r),e(n9,U5r),e(nr,J5r),e(nr,Bt),M(s9,Bt,null),e(Bt,Y5r),e(Bt,aTe),e(aTe,K5r),e(Bt,Z5r),e(Bt,hc),e(hc,e3r),e(hc,nTe),e(nTe,o3r),e(hc,r3r),e(hc,WU),e(WU,t3r),e(hc,a3r),e(Bt,n3r),M(AC,Bt,null),e(nr,s3r),e(nr,Rr),M(l9,Rr,null),e(Rr,l3r),e(Rr,sTe),e(sTe,i3r),e(Rr,d3r),e(Rr,ln),e(ln,c3r),e(ln,lTe),e(lTe,f3r),e(ln,m3r),e(ln,iTe),e(iTe,g3r),e(ln,h3r),e(ln,dTe),e(dTe,p3r),e(ln,_3r),e(Rr,u3r),e(Rr,i9),e(i9,yC),e(yC,cTe),e(cTe,b3r),e(yC,v3r),e(yC,QU),e(QU,F3r),e(yC,T3r),e(i9,M3r),e(i9,LC),e(LC,fTe),e(fTe,E3r),e(LC,C3r),e(LC,HU),e(HU,w3r),e(LC,A3r),e(Rr,y3r),M(xC,Rr,null),b(f,aDe,u),b(f,pc,u),e(pc,$C),e($C,mTe),M(d9,mTe,null),e(pc,L3r),e(pc,gTe),e(gTe,x3r),b(f,nDe,u),b(f,sr,u),M(c9,sr,null),e(sr,$3r),e(sr,_c),e(_c,k3r),e(_c,UU),e(UU,S3r),e(_c,R3r),e(_c,JU),e(JU,P3r),e(_c,B3r),e(sr,I3r),e(sr,f9),e(f9,N3r),e(f9,hTe),e(hTe,q3r),e(f9,j3r),e(sr,D3r),e(sr,It),M(m9,It,null),e(It,G3r),e(It,pTe),e(pTe,O3r),e(It,V3r),e(It,uc),e(uc,X3r),e(uc,_Te),e(_Te,z3r),e(uc,W3r),e(uc,YU),e(YU,Q3r),e(uc,H3r),e(It,U3r),M(kC,It,null),e(sr,J3r),e(sr,Pr),M(g9,Pr,null),e(Pr,Y3r),e(Pr,uTe),e(uTe,K3r),e(Pr,Z3r),e(Pr,dn),e(dn,e0r),e(dn,bTe),e(bTe,o0r),e(dn,r0r),e(dn,vTe),e(vTe,t0r),e(dn,a0r),e(dn,FTe),e(FTe,n0r),e(dn,s0r),e(Pr,l0r),e(Pr,TTe),e(TTe,SC),e(SC,MTe),e(MTe,i0r),e(SC,d0r),e(SC,KU),e(KU,c0r),e(SC,f0r),e(Pr,m0r),M(RC,Pr,null),b(f,sDe,u),b(f,bc,u),e(bc,PC),e(PC,ETe),M(h9,ETe,null),e(bc,g0r),e(bc,CTe),e(CTe,h0r),b(f,lDe,u),b(f,lr,u),M(p9,lr,null),e(lr,p0r),e(lr,vc),e(vc,_0r),e(vc,ZU),e(ZU,u0r),e(vc,b0r),e(vc,eJ),e(eJ,v0r),e(vc,F0r),e(lr,T0r),e(lr,_9),e(_9,M0r),e(_9,wTe),e(wTe,E0r),e(_9,C0r),e(lr,w0r),e(lr,Nt),M(u9,Nt,null),e(Nt,A0r),e(Nt,ATe),e(ATe,y0r),e(Nt,L0r),e(Nt,Fc),e(Fc,x0r),e(Fc,yTe),e(yTe,$0r),e(Fc,k0r),e(Fc,oJ),e(oJ,S0r),e(Fc,R0r),e(Nt,P0r),M(BC,Nt,null),e(lr,B0r),e(lr,Br),M(b9,Br,null),e(Br,I0r),e(Br,LTe),e(LTe,N0r),e(Br,q0r),e(Br,cn),e(cn,j0r),e(cn,xTe),e(xTe,D0r),e(cn,G0r),e(cn,$Te),e($Te,O0r),e(cn,V0r),e(cn,kTe),e(kTe,X0r),e(cn,z0r),e(Br,W0r),e(Br,de),e(de,IC),e(IC,STe),e(STe,Q0r),e(IC,H0r),e(IC,rJ),e(rJ,U0r),e(IC,J0r),e(de,Y0r),e(de,NC),e(NC,RTe),e(RTe,K0r),e(NC,Z0r),e(NC,tJ),e(tJ,ewr),e(NC,owr),e(de,rwr),e(de,qC),e(qC,PTe),e(PTe,twr),e(qC,awr),e(qC,aJ),e(aJ,nwr),e(qC,swr),e(de,lwr),e(de,jC),e(jC,BTe),e(BTe,iwr),e(jC,dwr),e(jC,nJ),e(nJ,cwr),e(jC,fwr),e(de,mwr),e(de,DC),e(DC,ITe),e(ITe,gwr),e(DC,hwr),e(DC,sJ),e(sJ,pwr),e(DC,_wr),e(de,uwr),e(de,GC),e(GC,NTe),e(NTe,bwr),e(GC,vwr),e(GC,lJ),e(lJ,Fwr),e(GC,Twr),e(de,Mwr),e(de,OC),e(OC,qTe),e(qTe,Ewr),e(OC,Cwr),e(OC,iJ),e(iJ,wwr),e(OC,Awr),e(de,ywr),e(de,VC),e(VC,jTe),e(jTe,Lwr),e(VC,xwr),e(VC,dJ),e(dJ,$wr),e(VC,kwr),e(de,Swr),e(de,XC),e(XC,DTe),e(DTe,Rwr),e(XC,Pwr),e(XC,cJ),e(cJ,Bwr),e(XC,Iwr),e(de,Nwr),e(de,zC),e(zC,GTe),e(GTe,qwr),e(zC,jwr),e(zC,fJ),e(fJ,Dwr),e(zC,Gwr),e(de,Owr),e(de,WC),e(WC,OTe),e(OTe,Vwr),e(WC,Xwr),e(WC,mJ),e(mJ,zwr),e(WC,Wwr),e(de,Qwr),e(de,QC),e(QC,VTe),e(VTe,Hwr),e(QC,Uwr),e(QC,gJ),e(gJ,Jwr),e(QC,Ywr),e(de,Kwr),e(de,HC),e(HC,XTe),e(XTe,Zwr),e(HC,eAr),e(HC,hJ),e(hJ,oAr),e(HC,rAr),e(de,tAr),e(de,UC),e(UC,zTe),e(zTe,aAr),e(UC,nAr),e(UC,pJ),e(pJ,sAr),e(UC,lAr),e(de,iAr),e(de,JC),e(JC,WTe),e(WTe,dAr),e(JC,cAr),e(JC,_J),e(_J,fAr),e(JC,mAr),e(de,gAr),e(de,YC),e(YC,QTe),e(QTe,hAr),e(YC,pAr),e(YC,uJ),e(uJ,_Ar),e(YC,uAr),e(de,bAr),e(de,KC),e(KC,HTe),e(HTe,vAr),e(KC,FAr),e(KC,bJ),e(bJ,TAr),e(KC,MAr),e(de,EAr),e(de,ZC),e(ZC,UTe),e(UTe,CAr),e(ZC,wAr),e(ZC,vJ),e(vJ,AAr),e(ZC,yAr),e(de,LAr),e(de,e5),e(e5,JTe),e(JTe,xAr),e(e5,$Ar),e(e5,FJ),e(FJ,kAr),e(e5,SAr),e(de,RAr),e(de,o5),e(o5,YTe),e(YTe,PAr),e(o5,BAr),e(o5,TJ),e(TJ,IAr),e(o5,NAr),e(Br,qAr),M(r5,Br,null),b(f,iDe,u),b(f,Tc,u),e(Tc,t5),e(t5,KTe),M(v9,KTe,null),e(Tc,jAr),e(Tc,ZTe),e(ZTe,DAr),b(f,dDe,u),b(f,ir,u),M(F9,ir,null),e(ir,GAr),e(ir,Mc),e(Mc,OAr),e(Mc,MJ),e(MJ,VAr),e(Mc,XAr),e(Mc,EJ),e(EJ,zAr),e(Mc,WAr),e(ir,QAr),e(ir,T9),e(T9,HAr),e(T9,eMe),e(eMe,UAr),e(T9,JAr),e(ir,YAr),e(ir,qt),M(M9,qt,null),e(qt,KAr),e(qt,oMe),e(oMe,ZAr),e(qt,eyr),e(qt,Ec),e(Ec,oyr),e(Ec,rMe),e(rMe,ryr),e(Ec,tyr),e(Ec,CJ),e(CJ,ayr),e(Ec,nyr),e(qt,syr),M(a5,qt,null),e(ir,lyr),e(ir,Ir),M(E9,Ir,null),e(Ir,iyr),e(Ir,tMe),e(tMe,dyr),e(Ir,cyr),e(Ir,fn),e(fn,fyr),e(fn,aMe),e(aMe,myr),e(fn,gyr),e(fn,nMe),e(nMe,hyr),e(fn,pyr),e(fn,sMe),e(sMe,_yr),e(fn,uyr),e(Ir,byr),e(Ir,ce),e(ce,n5),e(n5,lMe),e(lMe,vyr),e(n5,Fyr),e(n5,wJ),e(wJ,Tyr),e(n5,Myr),e(ce,Eyr),e(ce,s5),e(s5,iMe),e(iMe,Cyr),e(s5,wyr),e(s5,AJ),e(AJ,Ayr),e(s5,yyr),e(ce,Lyr),e(ce,l5),e(l5,dMe),e(dMe,xyr),e(l5,$yr),e(l5,yJ),e(yJ,kyr),e(l5,Syr),e(ce,Ryr),e(ce,i5),e(i5,cMe),e(cMe,Pyr),e(i5,Byr),e(i5,LJ),e(LJ,Iyr),e(i5,Nyr),e(ce,qyr),e(ce,d5),e(d5,fMe),e(fMe,jyr),e(d5,Dyr),e(d5,xJ),e(xJ,Gyr),e(d5,Oyr),e(ce,Vyr),e(ce,c5),e(c5,mMe),e(mMe,Xyr),e(c5,zyr),e(c5,$J),e($J,Wyr),e(c5,Qyr),e(ce,Hyr),e(ce,f5),e(f5,gMe),e(gMe,Uyr),e(f5,Jyr),e(f5,kJ),e(kJ,Yyr),e(f5,Kyr),e(ce,Zyr),e(ce,m5),e(m5,hMe),e(hMe,eLr),e(m5,oLr),e(m5,SJ),e(SJ,rLr),e(m5,tLr),e(ce,aLr),e(ce,g5),e(g5,pMe),e(pMe,nLr),e(g5,sLr),e(g5,RJ),e(RJ,lLr),e(g5,iLr),e(ce,dLr),e(ce,h5),e(h5,_Me),e(_Me,cLr),e(h5,fLr),e(h5,PJ),e(PJ,mLr),e(h5,gLr),e(ce,hLr),e(ce,p5),e(p5,uMe),e(uMe,pLr),e(p5,_Lr),e(p5,BJ),e(BJ,uLr),e(p5,bLr),e(ce,vLr),e(ce,_5),e(_5,bMe),e(bMe,FLr),e(_5,TLr),e(_5,IJ),e(IJ,MLr),e(_5,ELr),e(ce,CLr),e(ce,u5),e(u5,vMe),e(vMe,wLr),e(u5,ALr),e(u5,NJ),e(NJ,yLr),e(u5,LLr),e(ce,xLr),e(ce,b5),e(b5,FMe),e(FMe,$Lr),e(b5,kLr),e(b5,qJ),e(qJ,SLr),e(b5,RLr),e(ce,PLr),e(ce,v5),e(v5,TMe),e(TMe,BLr),e(v5,ILr),e(v5,jJ),e(jJ,NLr),e(v5,qLr),e(ce,jLr),e(ce,F5),e(F5,MMe),e(MMe,DLr),e(F5,GLr),e(F5,DJ),e(DJ,OLr),e(F5,VLr),e(ce,XLr),e(ce,T5),e(T5,EMe),e(EMe,zLr),e(T5,WLr),e(T5,GJ),e(GJ,QLr),e(T5,HLr),e(ce,ULr),e(ce,M5),e(M5,CMe),e(CMe,JLr),e(M5,YLr),e(M5,OJ),e(OJ,KLr),e(M5,ZLr),e(ce,e8r),e(ce,E5),e(E5,wMe),e(wMe,o8r),e(E5,r8r),e(E5,VJ),e(VJ,t8r),e(E5,a8r),e(ce,n8r),e(ce,C5),e(C5,AMe),e(AMe,s8r),e(C5,l8r),e(C5,XJ),e(XJ,i8r),e(C5,d8r),e(Ir,c8r),M(w5,Ir,null),b(f,cDe,u),b(f,Cc,u),e(Cc,A5),e(A5,yMe),M(C9,yMe,null),e(Cc,f8r),e(Cc,LMe),e(LMe,m8r),b(f,fDe,u),b(f,dr,u),M(w9,dr,null),e(dr,g8r),e(dr,wc),e(wc,h8r),e(wc,zJ),e(zJ,p8r),e(wc,_8r),e(wc,WJ),e(WJ,u8r),e(wc,b8r),e(dr,v8r),e(dr,A9),e(A9,F8r),e(A9,xMe),e(xMe,T8r),e(A9,M8r),e(dr,E8r),e(dr,jt),M(y9,jt,null),e(jt,C8r),e(jt,$Me),e($Me,w8r),e(jt,A8r),e(jt,Ac),e(Ac,y8r),e(Ac,kMe),e(kMe,L8r),e(Ac,x8r),e(Ac,QJ),e(QJ,$8r),e(Ac,k8r),e(jt,S8r),M(y5,jt,null),e(dr,R8r),e(dr,Nr),M(L9,Nr,null),e(Nr,P8r),e(Nr,SMe),e(SMe,B8r),e(Nr,I8r),e(Nr,mn),e(mn,N8r),e(mn,RMe),e(RMe,q8r),e(mn,j8r),e(mn,PMe),e(PMe,D8r),e(mn,G8r),e(mn,BMe),e(BMe,O8r),e(mn,V8r),e(Nr,X8r),e(Nr,IMe),e(IMe,L5),e(L5,NMe),e(NMe,z8r),e(L5,W8r),e(L5,HJ),e(HJ,Q8r),e(L5,H8r),e(Nr,U8r),M(x5,Nr,null),b(f,mDe,u),b(f,yc,u),e(yc,$5),e($5,qMe),M(x9,qMe,null),e(yc,J8r),e(yc,jMe),e(jMe,Y8r),b(f,gDe,u),b(f,cr,u),M($9,cr,null),e(cr,K8r),e(cr,Lc),e(Lc,Z8r),e(Lc,UJ),e(UJ,e7r),e(Lc,o7r),e(Lc,JJ),e(JJ,r7r),e(Lc,t7r),e(cr,a7r),e(cr,k9),e(k9,n7r),e(k9,DMe),e(DMe,s7r),e(k9,l7r),e(cr,i7r),e(cr,Dt),M(S9,Dt,null),e(Dt,d7r),e(Dt,GMe),e(GMe,c7r),e(Dt,f7r),e(Dt,xc),e(xc,m7r),e(xc,OMe),e(OMe,g7r),e(xc,h7r),e(xc,YJ),e(YJ,p7r),e(xc,_7r),e(Dt,u7r),M(k5,Dt,null),e(cr,b7r),e(cr,qr),M(R9,qr,null),e(qr,v7r),e(qr,VMe),e(VMe,F7r),e(qr,T7r),e(qr,gn),e(gn,M7r),e(gn,XMe),e(XMe,E7r),e(gn,C7r),e(gn,zMe),e(zMe,w7r),e(gn,A7r),e(gn,WMe),e(WMe,y7r),e(gn,L7r),e(qr,x7r),e(qr,QMe),e(QMe,S5),e(S5,HMe),e(HMe,$7r),e(S5,k7r),e(S5,KJ),e(KJ,S7r),e(S5,R7r),e(qr,P7r),M(R5,qr,null),b(f,hDe,u),b(f,$c,u),e($c,P5),e(P5,UMe),M(P9,UMe,null),e($c,B7r),e($c,JMe),e(JMe,I7r),b(f,pDe,u),b(f,fr,u),M(B9,fr,null),e(fr,N7r),e(fr,kc),e(kc,q7r),e(kc,ZJ),e(ZJ,j7r),e(kc,D7r),e(kc,eY),e(eY,G7r),e(kc,O7r),e(fr,V7r),e(fr,I9),e(I9,X7r),e(I9,YMe),e(YMe,z7r),e(I9,W7r),e(fr,Q7r),e(fr,Gt),M(N9,Gt,null),e(Gt,H7r),e(Gt,KMe),e(KMe,U7r),e(Gt,J7r),e(Gt,Sc),e(Sc,Y7r),e(Sc,ZMe),e(ZMe,K7r),e(Sc,Z7r),e(Sc,oY),e(oY,e9r),e(Sc,o9r),e(Gt,r9r),M(B5,Gt,null),e(fr,t9r),e(fr,jr),M(q9,jr,null),e(jr,a9r),e(jr,e4e),e(e4e,n9r),e(jr,s9r),e(jr,hn),e(hn,l9r),e(hn,o4e),e(o4e,i9r),e(hn,d9r),e(hn,r4e),e(r4e,c9r),e(hn,f9r),e(hn,t4e),e(t4e,m9r),e(hn,g9r),e(jr,h9r),e(jr,re),e(re,I5),e(I5,a4e),e(a4e,p9r),e(I5,_9r),e(I5,rY),e(rY,u9r),e(I5,b9r),e(re,v9r),e(re,N5),e(N5,n4e),e(n4e,F9r),e(N5,T9r),e(N5,tY),e(tY,M9r),e(N5,E9r),e(re,C9r),e(re,q5),e(q5,s4e),e(s4e,w9r),e(q5,A9r),e(q5,aY),e(aY,y9r),e(q5,L9r),e(re,x9r),e(re,j5),e(j5,l4e),e(l4e,$9r),e(j5,k9r),e(j5,nY),e(nY,S9r),e(j5,R9r),e(re,P9r),e(re,D5),e(D5,i4e),e(i4e,B9r),e(D5,I9r),e(D5,sY),e(sY,N9r),e(D5,q9r),e(re,j9r),e(re,G5),e(G5,d4e),e(d4e,D9r),e(G5,G9r),e(G5,lY),e(lY,O9r),e(G5,V9r),e(re,X9r),e(re,O5),e(O5,c4e),e(c4e,z9r),e(O5,W9r),e(O5,iY),e(iY,Q9r),e(O5,H9r),e(re,U9r),e(re,V5),e(V5,f4e),e(f4e,J9r),e(V5,Y9r),e(V5,dY),e(dY,K9r),e(V5,Z9r),e(re,exr),e(re,X5),e(X5,m4e),e(m4e,oxr),e(X5,rxr),e(X5,cY),e(cY,txr),e(X5,axr),e(re,nxr),e(re,z5),e(z5,g4e),e(g4e,sxr),e(z5,lxr),e(z5,fY),e(fY,ixr),e(z5,dxr),e(re,cxr),e(re,W5),e(W5,h4e),e(h4e,fxr),e(W5,mxr),e(W5,mY),e(mY,gxr),e(W5,hxr),e(re,pxr),e(re,Q5),e(Q5,p4e),e(p4e,_xr),e(Q5,uxr),e(Q5,gY),e(gY,bxr),e(Q5,vxr),e(re,Fxr),e(re,H5),e(H5,_4e),e(_4e,Txr),e(H5,Mxr),e(H5,hY),e(hY,Exr),e(H5,Cxr),e(re,wxr),e(re,U5),e(U5,u4e),e(u4e,Axr),e(U5,yxr),e(U5,pY),e(pY,Lxr),e(U5,xxr),e(re,$xr),e(re,J5),e(J5,b4e),e(b4e,kxr),e(J5,Sxr),e(J5,_Y),e(_Y,Rxr),e(J5,Pxr),e(re,Bxr),e(re,Y5),e(Y5,v4e),e(v4e,Ixr),e(Y5,Nxr),e(Y5,uY),e(uY,qxr),e(Y5,jxr),e(re,Dxr),e(re,K5),e(K5,F4e),e(F4e,Gxr),e(K5,Oxr),e(K5,bY),e(bY,Vxr),e(K5,Xxr),e(re,zxr),e(re,Z5),e(Z5,T4e),e(T4e,Wxr),e(Z5,Qxr),e(Z5,vY),e(vY,Hxr),e(Z5,Uxr),e(re,Jxr),e(re,e3),e(e3,M4e),e(M4e,Yxr),e(e3,Kxr),e(e3,FY),e(FY,Zxr),e(e3,e$r),e(re,o$r),e(re,o3),e(o3,E4e),e(E4e,r$r),e(o3,t$r),e(o3,TY),e(TY,a$r),e(o3,n$r),e(re,s$r),e(re,r3),e(r3,C4e),e(C4e,l$r),e(r3,i$r),e(r3,MY),e(MY,d$r),e(r3,c$r),e(re,f$r),e(re,t3),e(t3,w4e),e(w4e,m$r),e(t3,g$r),e(t3,EY),e(EY,h$r),e(t3,p$r),e(re,_$r),e(re,a3),e(a3,A4e),e(A4e,u$r),e(a3,b$r),e(a3,CY),e(CY,v$r),e(a3,F$r),e(re,T$r),e(re,n3),e(n3,y4e),e(y4e,M$r),e(n3,E$r),e(n3,wY),e(wY,C$r),e(n3,w$r),e(re,A$r),e(re,s3),e(s3,L4e),e(L4e,y$r),e(s3,L$r),e(s3,AY),e(AY,x$r),e(s3,$$r),e(re,k$r),e(re,l3),e(l3,x4e),e(x4e,S$r),e(l3,R$r),e(l3,yY),e(yY,P$r),e(l3,B$r),e(jr,I$r),M(i3,jr,null),b(f,_De,u),b(f,Rc,u),e(Rc,d3),e(d3,$4e),M(j9,$4e,null),e(Rc,N$r),e(Rc,k4e),e(k4e,q$r),b(f,uDe,u),b(f,mr,u),M(D9,mr,null),e(mr,j$r),e(mr,Pc),e(Pc,D$r),e(Pc,LY),e(LY,G$r),e(Pc,O$r),e(Pc,xY),e(xY,V$r),e(Pc,X$r),e(mr,z$r),e(mr,G9),e(G9,W$r),e(G9,S4e),e(S4e,Q$r),e(G9,H$r),e(mr,U$r),e(mr,Ot),M(O9,Ot,null),e(Ot,J$r),e(Ot,R4e),e(R4e,Y$r),e(Ot,K$r),e(Ot,Bc),e(Bc,Z$r),e(Bc,P4e),e(P4e,ekr),e(Bc,okr),e(Bc,$Y),e($Y,rkr),e(Bc,tkr),e(Ot,akr),M(c3,Ot,null),e(mr,nkr),e(mr,Dr),M(V9,Dr,null),e(Dr,skr),e(Dr,B4e),e(B4e,lkr),e(Dr,ikr),e(Dr,pn),e(pn,dkr),e(pn,I4e),e(I4e,ckr),e(pn,fkr),e(pn,N4e),e(N4e,mkr),e(pn,gkr),e(pn,q4e),e(q4e,hkr),e(pn,pkr),e(Dr,_kr),e(Dr,Le),e(Le,f3),e(f3,j4e),e(j4e,ukr),e(f3,bkr),e(f3,kY),e(kY,vkr),e(f3,Fkr),e(Le,Tkr),e(Le,m3),e(m3,D4e),e(D4e,Mkr),e(m3,Ekr),e(m3,SY),e(SY,Ckr),e(m3,wkr),e(Le,Akr),e(Le,g3),e(g3,G4e),e(G4e,ykr),e(g3,Lkr),e(g3,RY),e(RY,xkr),e(g3,$kr),e(Le,kkr),e(Le,h3),e(h3,O4e),e(O4e,Skr),e(h3,Rkr),e(h3,PY),e(PY,Pkr),e(h3,Bkr),e(Le,Ikr),e(Le,p3),e(p3,V4e),e(V4e,Nkr),e(p3,qkr),e(p3,BY),e(BY,jkr),e(p3,Dkr),e(Le,Gkr),e(Le,_3),e(_3,X4e),e(X4e,Okr),e(_3,Vkr),e(_3,IY),e(IY,Xkr),e(_3,zkr),e(Le,Wkr),e(Le,u3),e(u3,z4e),e(z4e,Qkr),e(u3,Hkr),e(u3,NY),e(NY,Ukr),e(u3,Jkr),e(Le,Ykr),e(Le,b3),e(b3,W4e),e(W4e,Kkr),e(b3,Zkr),e(b3,qY),e(qY,eSr),e(b3,oSr),e(Le,rSr),e(Le,v3),e(v3,Q4e),e(Q4e,tSr),e(v3,aSr),e(v3,jY),e(jY,nSr),e(v3,sSr),e(Le,lSr),e(Le,F3),e(F3,H4e),e(H4e,iSr),e(F3,dSr),e(F3,DY),e(DY,cSr),e(F3,fSr),e(Dr,mSr),M(T3,Dr,null),b(f,bDe,u),b(f,Ic,u),e(Ic,M3),e(M3,U4e),M(X9,U4e,null),e(Ic,gSr),e(Ic,J4e),e(J4e,hSr),b(f,vDe,u),b(f,gr,u),M(z9,gr,null),e(gr,pSr),e(gr,Nc),e(Nc,_Sr),e(Nc,GY),e(GY,uSr),e(Nc,bSr),e(Nc,OY),e(OY,vSr),e(Nc,FSr),e(gr,TSr),e(gr,W9),e(W9,MSr),e(W9,Y4e),e(Y4e,ESr),e(W9,CSr),e(gr,wSr),e(gr,Vt),M(Q9,Vt,null),e(Vt,ASr),e(Vt,K4e),e(K4e,ySr),e(Vt,LSr),e(Vt,qc),e(qc,xSr),e(qc,Z4e),e(Z4e,$Sr),e(qc,kSr),e(qc,VY),e(VY,SSr),e(qc,RSr),e(Vt,PSr),M(E3,Vt,null),e(gr,BSr),e(gr,Gr),M(H9,Gr,null),e(Gr,ISr),e(Gr,eEe),e(eEe,NSr),e(Gr,qSr),e(Gr,_n),e(_n,jSr),e(_n,oEe),e(oEe,DSr),e(_n,GSr),e(_n,rEe),e(rEe,OSr),e(_n,VSr),e(_n,tEe),e(tEe,XSr),e(_n,zSr),e(Gr,WSr),e(Gr,Ee),e(Ee,C3),e(C3,aEe),e(aEe,QSr),e(C3,HSr),e(C3,XY),e(XY,USr),e(C3,JSr),e(Ee,YSr),e(Ee,w3),e(w3,nEe),e(nEe,KSr),e(w3,ZSr),e(w3,zY),e(zY,eRr),e(w3,oRr),e(Ee,rRr),e(Ee,A3),e(A3,sEe),e(sEe,tRr),e(A3,aRr),e(A3,WY),e(WY,nRr),e(A3,sRr),e(Ee,lRr),e(Ee,y3),e(y3,lEe),e(lEe,iRr),e(y3,dRr),e(y3,QY),e(QY,cRr),e(y3,fRr),e(Ee,mRr),e(Ee,L3),e(L3,iEe),e(iEe,gRr),e(L3,hRr),e(L3,HY),e(HY,pRr),e(L3,_Rr),e(Ee,uRr),e(Ee,x3),e(x3,dEe),e(dEe,bRr),e(x3,vRr),e(x3,UY),e(UY,FRr),e(x3,TRr),e(Ee,MRr),e(Ee,$3),e($3,cEe),e(cEe,ERr),e($3,CRr),e($3,JY),e(JY,wRr),e($3,ARr),e(Ee,yRr),e(Ee,k3),e(k3,fEe),e(fEe,LRr),e(k3,xRr),e(k3,YY),e(YY,$Rr),e(k3,kRr),e(Ee,SRr),e(Ee,S3),e(S3,mEe),e(mEe,RRr),e(S3,PRr),e(S3,KY),e(KY,BRr),e(S3,IRr),e(Ee,NRr),e(Ee,R3),e(R3,gEe),e(gEe,qRr),e(R3,jRr),e(R3,ZY),e(ZY,DRr),e(R3,GRr),e(Ee,ORr),e(Ee,P3),e(P3,hEe),e(hEe,VRr),e(P3,XRr),e(P3,eK),e(eK,zRr),e(P3,WRr),e(Ee,QRr),e(Ee,B3),e(B3,pEe),e(pEe,HRr),e(B3,URr),e(B3,oK),e(oK,JRr),e(B3,YRr),e(Gr,KRr),M(I3,Gr,null),b(f,FDe,u),b(f,jc,u),e(jc,N3),e(N3,_Ee),M(U9,_Ee,null),e(jc,ZRr),e(jc,uEe),e(uEe,ePr),b(f,TDe,u),b(f,hr,u),M(J9,hr,null),e(hr,oPr),e(hr,Dc),e(Dc,rPr),e(Dc,rK),e(rK,tPr),e(Dc,aPr),e(Dc,tK),e(tK,nPr),e(Dc,sPr),e(hr,lPr),e(hr,Y9),e(Y9,iPr),e(Y9,bEe),e(bEe,dPr),e(Y9,cPr),e(hr,fPr),e(hr,Xt),M(K9,Xt,null),e(Xt,mPr),e(Xt,vEe),e(vEe,gPr),e(Xt,hPr),e(Xt,Gc),e(Gc,pPr),e(Gc,FEe),e(FEe,_Pr),e(Gc,uPr),e(Gc,aK),e(aK,bPr),e(Gc,vPr),e(Xt,FPr),M(q3,Xt,null),e(hr,TPr),e(hr,Or),M(Z9,Or,null),e(Or,MPr),e(Or,TEe),e(TEe,EPr),e(Or,CPr),e(Or,un),e(un,wPr),e(un,MEe),e(MEe,APr),e(un,yPr),e(un,EEe),e(EEe,LPr),e(un,xPr),e(un,CEe),e(CEe,$Pr),e(un,kPr),e(Or,SPr),e(Or,xe),e(xe,j3),e(j3,wEe),e(wEe,RPr),e(j3,PPr),e(j3,nK),e(nK,BPr),e(j3,IPr),e(xe,NPr),e(xe,D3),e(D3,AEe),e(AEe,qPr),e(D3,jPr),e(D3,sK),e(sK,DPr),e(D3,GPr),e(xe,OPr),e(xe,G3),e(G3,yEe),e(yEe,VPr),e(G3,XPr),e(G3,lK),e(lK,zPr),e(G3,WPr),e(xe,QPr),e(xe,O3),e(O3,LEe),e(LEe,HPr),e(O3,UPr),e(O3,iK),e(iK,JPr),e(O3,YPr),e(xe,KPr),e(xe,V3),e(V3,xEe),e(xEe,ZPr),e(V3,eBr),e(V3,dK),e(dK,oBr),e(V3,rBr),e(xe,tBr),e(xe,X3),e(X3,$Ee),e($Ee,aBr),e(X3,nBr),e(X3,cK),e(cK,sBr),e(X3,lBr),e(xe,iBr),e(xe,z3),e(z3,kEe),e(kEe,dBr),e(z3,cBr),e(z3,fK),e(fK,fBr),e(z3,mBr),e(xe,gBr),e(xe,W3),e(W3,SEe),e(SEe,hBr),e(W3,pBr),e(W3,mK),e(mK,_Br),e(W3,uBr),e(xe,bBr),e(xe,Q3),e(Q3,REe),e(REe,vBr),e(Q3,FBr),e(Q3,gK),e(gK,TBr),e(Q3,MBr),e(xe,EBr),e(xe,H3),e(H3,PEe),e(PEe,CBr),e(H3,wBr),e(H3,hK),e(hK,ABr),e(H3,yBr),e(Or,LBr),M(U3,Or,null),b(f,MDe,u),b(f,Oc,u),e(Oc,J3),e(J3,BEe),M(ex,BEe,null),e(Oc,xBr),e(Oc,IEe),e(IEe,$Br),b(f,EDe,u),b(f,pr,u),M(ox,pr,null),e(pr,kBr),e(pr,Vc),e(Vc,SBr),e(Vc,pK),e(pK,RBr),e(Vc,PBr),e(Vc,_K),e(_K,BBr),e(Vc,IBr),e(pr,NBr),e(pr,rx),e(rx,qBr),e(rx,NEe),e(NEe,jBr),e(rx,DBr),e(pr,GBr),e(pr,zt),M(tx,zt,null),e(zt,OBr),e(zt,qEe),e(qEe,VBr),e(zt,XBr),e(zt,Xc),e(Xc,zBr),e(Xc,jEe),e(jEe,WBr),e(Xc,QBr),e(Xc,uK),e(uK,HBr),e(Xc,UBr),e(zt,JBr),M(Y3,zt,null),e(pr,YBr),e(pr,Vr),M(ax,Vr,null),e(Vr,KBr),e(Vr,DEe),e(DEe,ZBr),e(Vr,eIr),e(Vr,bn),e(bn,oIr),e(bn,GEe),e(GEe,rIr),e(bn,tIr),e(bn,OEe),e(OEe,aIr),e(bn,nIr),e(bn,VEe),e(VEe,sIr),e(bn,lIr),e(Vr,iIr),e(Vr,Pe),e(Pe,K3),e(K3,XEe),e(XEe,dIr),e(K3,cIr),e(K3,bK),e(bK,fIr),e(K3,mIr),e(Pe,gIr),e(Pe,Z3),e(Z3,zEe),e(zEe,hIr),e(Z3,pIr),e(Z3,vK),e(vK,_Ir),e(Z3,uIr),e(Pe,bIr),e(Pe,e0),e(e0,WEe),e(WEe,vIr),e(e0,FIr),e(e0,FK),e(FK,TIr),e(e0,MIr),e(Pe,EIr),e(Pe,o0),e(o0,QEe),e(QEe,CIr),e(o0,wIr),e(o0,TK),e(TK,AIr),e(o0,yIr),e(Pe,LIr),e(Pe,r0),e(r0,HEe),e(HEe,xIr),e(r0,$Ir),e(r0,MK),e(MK,kIr),e(r0,SIr),e(Pe,RIr),e(Pe,t0),e(t0,UEe),e(UEe,PIr),e(t0,BIr),e(t0,EK),e(EK,IIr),e(t0,NIr),e(Pe,qIr),e(Pe,a0),e(a0,JEe),e(JEe,jIr),e(a0,DIr),e(a0,CK),e(CK,GIr),e(a0,OIr),e(Pe,VIr),e(Pe,n0),e(n0,YEe),e(YEe,XIr),e(n0,zIr),e(n0,wK),e(wK,WIr),e(n0,QIr),e(Pe,HIr),e(Pe,s0),e(s0,KEe),e(KEe,UIr),e(s0,JIr),e(s0,AK),e(AK,YIr),e(s0,KIr),e(Vr,ZIr),M(l0,Vr,null),b(f,CDe,u),b(f,zc,u),e(zc,i0),e(i0,ZEe),M(nx,ZEe,null),e(zc,eNr),e(zc,eCe),e(eCe,oNr),b(f,wDe,u),b(f,_r,u),M(sx,_r,null),e(_r,rNr),e(_r,Wc),e(Wc,tNr),e(Wc,yK),e(yK,aNr),e(Wc,nNr),e(Wc,LK),e(LK,sNr),e(Wc,lNr),e(_r,iNr),e(_r,lx),e(lx,dNr),e(lx,oCe),e(oCe,cNr),e(lx,fNr),e(_r,mNr),e(_r,Wt),M(ix,Wt,null),e(Wt,gNr),e(Wt,rCe),e(rCe,hNr),e(Wt,pNr),e(Wt,Qc),e(Qc,_Nr),e(Qc,tCe),e(tCe,uNr),e(Qc,bNr),e(Qc,xK),e(xK,vNr),e(Qc,FNr),e(Wt,TNr),M(d0,Wt,null),e(_r,MNr),e(_r,Xr),M(dx,Xr,null),e(Xr,ENr),e(Xr,aCe),e(aCe,CNr),e(Xr,wNr),e(Xr,vn),e(vn,ANr),e(vn,nCe),e(nCe,yNr),e(vn,LNr),e(vn,sCe),e(sCe,xNr),e(vn,$Nr),e(vn,lCe),e(lCe,kNr),e(vn,SNr),e(Xr,RNr),e(Xr,$e),e($e,c0),e(c0,iCe),e(iCe,PNr),e(c0,BNr),e(c0,$K),e($K,INr),e(c0,NNr),e($e,qNr),e($e,f0),e(f0,dCe),e(dCe,jNr),e(f0,DNr),e(f0,kK),e(kK,GNr),e(f0,ONr),e($e,VNr),e($e,m0),e(m0,cCe),e(cCe,XNr),e(m0,zNr),e(m0,SK),e(SK,WNr),e(m0,QNr),e($e,HNr),e($e,g0),e(g0,fCe),e(fCe,UNr),e(g0,JNr),e(g0,RK),e(RK,YNr),e(g0,KNr),e($e,ZNr),e($e,h0),e(h0,mCe),e(mCe,eqr),e(h0,oqr),e(h0,PK),e(PK,rqr),e(h0,tqr),e($e,aqr),e($e,p0),e(p0,gCe),e(gCe,nqr),e(p0,sqr),e(p0,BK),e(BK,lqr),e(p0,iqr),e($e,dqr),e($e,_0),e(_0,hCe),e(hCe,cqr),e(_0,fqr),e(_0,IK),e(IK,mqr),e(_0,gqr),e($e,hqr),e($e,u0),e(u0,pCe),e(pCe,pqr),e(u0,_qr),e(u0,NK),e(NK,uqr),e(u0,bqr),e($e,vqr),e($e,b0),e(b0,_Ce),e(_Ce,Fqr),e(b0,Tqr),e(b0,qK),e(qK,Mqr),e(b0,Eqr),e($e,Cqr),e($e,v0),e(v0,uCe),e(uCe,wqr),e(v0,Aqr),e(v0,jK),e(jK,yqr),e(v0,Lqr),e(Xr,xqr),M(F0,Xr,null),b(f,ADe,u),b(f,Hc,u),e(Hc,T0),e(T0,bCe),M(cx,bCe,null),e(Hc,$qr),e(Hc,vCe),e(vCe,kqr),b(f,yDe,u),b(f,ur,u),M(fx,ur,null),e(ur,Sqr),e(ur,Uc),e(Uc,Rqr),e(Uc,DK),e(DK,Pqr),e(Uc,Bqr),e(Uc,GK),e(GK,Iqr),e(Uc,Nqr),e(ur,qqr),e(ur,mx),e(mx,jqr),e(mx,FCe),e(FCe,Dqr),e(mx,Gqr),e(ur,Oqr),e(ur,Qt),M(gx,Qt,null),e(Qt,Vqr),e(Qt,TCe),e(TCe,Xqr),e(Qt,zqr),e(Qt,Jc),e(Jc,Wqr),e(Jc,MCe),e(MCe,Qqr),e(Jc,Hqr),e(Jc,OK),e(OK,Uqr),e(Jc,Jqr),e(Qt,Yqr),M(M0,Qt,null),e(ur,Kqr),e(ur,zr),M(hx,zr,null),e(zr,Zqr),e(zr,ECe),e(ECe,ejr),e(zr,ojr),e(zr,Fn),e(Fn,rjr),e(Fn,CCe),e(CCe,tjr),e(Fn,ajr),e(Fn,wCe),e(wCe,njr),e(Fn,sjr),e(Fn,ACe),e(ACe,ljr),e(Fn,ijr),e(zr,djr),e(zr,ke),e(ke,E0),e(E0,yCe),e(yCe,cjr),e(E0,fjr),e(E0,VK),e(VK,mjr),e(E0,gjr),e(ke,hjr),e(ke,C0),e(C0,LCe),e(LCe,pjr),e(C0,_jr),e(C0,XK),e(XK,ujr),e(C0,bjr),e(ke,vjr),e(ke,w0),e(w0,xCe),e(xCe,Fjr),e(w0,Tjr),e(w0,zK),e(zK,Mjr),e(w0,Ejr),e(ke,Cjr),e(ke,A0),e(A0,$Ce),e($Ce,wjr),e(A0,Ajr),e(A0,WK),e(WK,yjr),e(A0,Ljr),e(ke,xjr),e(ke,y0),e(y0,kCe),e(kCe,$jr),e(y0,kjr),e(y0,QK),e(QK,Sjr),e(y0,Rjr),e(ke,Pjr),e(ke,L0),e(L0,SCe),e(SCe,Bjr),e(L0,Ijr),e(L0,HK),e(HK,Njr),e(L0,qjr),e(ke,jjr),e(ke,x0),e(x0,RCe),e(RCe,Djr),e(x0,Gjr),e(x0,UK),e(UK,Ojr),e(x0,Vjr),e(ke,Xjr),e(ke,$0),e($0,PCe),e(PCe,zjr),e($0,Wjr),e($0,JK),e(JK,Qjr),e($0,Hjr),e(ke,Ujr),e(ke,k0),e(k0,BCe),e(BCe,Jjr),e(k0,Yjr),e(k0,YK),e(YK,Kjr),e(k0,Zjr),e(ke,eDr),e(ke,S0),e(S0,ICe),e(ICe,oDr),e(S0,rDr),e(S0,KK),e(KK,tDr),e(S0,aDr),e(zr,nDr),M(R0,zr,null),b(f,LDe,u),b(f,Yc,u),e(Yc,P0),e(P0,NCe),M(px,NCe,null),e(Yc,sDr),e(Yc,qCe),e(qCe,lDr),b(f,xDe,u),b(f,br,u),M(_x,br,null),e(br,iDr),e(br,Kc),e(Kc,dDr),e(Kc,ZK),e(ZK,cDr),e(Kc,fDr),e(Kc,eZ),e(eZ,mDr),e(Kc,gDr),e(br,hDr),e(br,ux),e(ux,pDr),e(ux,jCe),e(jCe,_Dr),e(ux,uDr),e(br,bDr),e(br,Ht),M(bx,Ht,null),e(Ht,vDr),e(Ht,DCe),e(DCe,FDr),e(Ht,TDr),e(Ht,Zc),e(Zc,MDr),e(Zc,GCe),e(GCe,EDr),e(Zc,CDr),e(Zc,oZ),e(oZ,wDr),e(Zc,ADr),e(Ht,yDr),M(B0,Ht,null),e(br,LDr),e(br,Wr),M(vx,Wr,null),e(Wr,xDr),e(Wr,OCe),e(OCe,$Dr),e(Wr,kDr),e(Wr,Tn),e(Tn,SDr),e(Tn,VCe),e(VCe,RDr),e(Tn,PDr),e(Tn,XCe),e(XCe,BDr),e(Tn,IDr),e(Tn,zCe),e(zCe,NDr),e(Tn,qDr),e(Wr,jDr),e(Wr,Ge),e(Ge,I0),e(I0,WCe),e(WCe,DDr),e(I0,GDr),e(I0,rZ),e(rZ,ODr),e(I0,VDr),e(Ge,XDr),e(Ge,N0),e(N0,QCe),e(QCe,zDr),e(N0,WDr),e(N0,tZ),e(tZ,QDr),e(N0,HDr),e(Ge,UDr),e(Ge,q0),e(q0,HCe),e(HCe,JDr),e(q0,YDr),e(q0,aZ),e(aZ,KDr),e(q0,ZDr),e(Ge,eGr),e(Ge,j0),e(j0,UCe),e(UCe,oGr),e(j0,rGr),e(j0,nZ),e(nZ,tGr),e(j0,aGr),e(Ge,nGr),e(Ge,D0),e(D0,JCe),e(JCe,sGr),e(D0,lGr),e(D0,sZ),e(sZ,iGr),e(D0,dGr),e(Ge,cGr),e(Ge,G0),e(G0,YCe),e(YCe,fGr),e(G0,mGr),e(G0,lZ),e(lZ,gGr),e(G0,hGr),e(Ge,pGr),e(Ge,O0),e(O0,KCe),e(KCe,_Gr),e(O0,uGr),e(O0,iZ),e(iZ,bGr),e(O0,vGr),e(Ge,FGr),e(Ge,V0),e(V0,ZCe),e(ZCe,TGr),e(V0,MGr),e(V0,dZ),e(dZ,EGr),e(V0,CGr),e(Wr,wGr),M(X0,Wr,null),b(f,$De,u),b(f,ef,u),e(ef,z0),e(z0,e5e),M(Fx,e5e,null),e(ef,AGr),e(ef,o5e),e(o5e,yGr),b(f,kDe,u),b(f,vr,u),M(Tx,vr,null),e(vr,LGr),e(vr,of),e(of,xGr),e(of,cZ),e(cZ,$Gr),e(of,kGr),e(of,fZ),e(fZ,SGr),e(of,RGr),e(vr,PGr),e(vr,Mx),e(Mx,BGr),e(Mx,r5e),e(r5e,IGr),e(Mx,NGr),e(vr,qGr),e(vr,Ut),M(Ex,Ut,null),e(Ut,jGr),e(Ut,t5e),e(t5e,DGr),e(Ut,GGr),e(Ut,rf),e(rf,OGr),e(rf,a5e),e(a5e,VGr),e(rf,XGr),e(rf,mZ),e(mZ,zGr),e(rf,WGr),e(Ut,QGr),M(W0,Ut,null),e(vr,HGr),e(vr,Qr),M(Cx,Qr,null),e(Qr,UGr),e(Qr,n5e),e(n5e,JGr),e(Qr,YGr),e(Qr,Mn),e(Mn,KGr),e(Mn,s5e),e(s5e,ZGr),e(Mn,eOr),e(Mn,l5e),e(l5e,oOr),e(Mn,rOr),e(Mn,i5e),e(i5e,tOr),e(Mn,aOr),e(Qr,nOr),e(Qr,Oe),e(Oe,Q0),e(Q0,d5e),e(d5e,sOr),e(Q0,lOr),e(Q0,gZ),e(gZ,iOr),e(Q0,dOr),e(Oe,cOr),e(Oe,H0),e(H0,c5e),e(c5e,fOr),e(H0,mOr),e(H0,hZ),e(hZ,gOr),e(H0,hOr),e(Oe,pOr),e(Oe,U0),e(U0,f5e),e(f5e,_Or),e(U0,uOr),e(U0,pZ),e(pZ,bOr),e(U0,vOr),e(Oe,FOr),e(Oe,J0),e(J0,m5e),e(m5e,TOr),e(J0,MOr),e(J0,_Z),e(_Z,EOr),e(J0,COr),e(Oe,wOr),e(Oe,Y0),e(Y0,g5e),e(g5e,AOr),e(Y0,yOr),e(Y0,uZ),e(uZ,LOr),e(Y0,xOr),e(Oe,$Or),e(Oe,K0),e(K0,h5e),e(h5e,kOr),e(K0,SOr),e(K0,bZ),e(bZ,ROr),e(K0,POr),e(Oe,BOr),e(Oe,Z0),e(Z0,p5e),e(p5e,IOr),e(Z0,NOr),e(Z0,vZ),e(vZ,qOr),e(Z0,jOr),e(Oe,DOr),e(Oe,ew),e(ew,_5e),e(_5e,GOr),e(ew,OOr),e(ew,FZ),e(FZ,VOr),e(ew,XOr),e(Qr,zOr),M(ow,Qr,null),b(f,SDe,u),b(f,tf,u),e(tf,rw),e(rw,u5e),M(wx,u5e,null),e(tf,WOr),e(tf,b5e),e(b5e,QOr),b(f,RDe,u),b(f,Fr,u),M(Ax,Fr,null),e(Fr,HOr),e(Fr,af),e(af,UOr),e(af,TZ),e(TZ,JOr),e(af,YOr),e(af,MZ),e(MZ,KOr),e(af,ZOr),e(Fr,eVr),e(Fr,yx),e(yx,oVr),e(yx,v5e),e(v5e,rVr),e(yx,tVr),e(Fr,aVr),e(Fr,Jt),M(Lx,Jt,null),e(Jt,nVr),e(Jt,F5e),e(F5e,sVr),e(Jt,lVr),e(Jt,nf),e(nf,iVr),e(nf,T5e),e(T5e,dVr),e(nf,cVr),e(nf,EZ),e(EZ,fVr),e(nf,mVr),e(Jt,gVr),M(tw,Jt,null),e(Fr,hVr),e(Fr,Hr),M(xx,Hr,null),e(Hr,pVr),e(Hr,M5e),e(M5e,_Vr),e(Hr,uVr),e(Hr,En),e(En,bVr),e(En,E5e),e(E5e,vVr),e(En,FVr),e(En,C5e),e(C5e,TVr),e(En,MVr),e(En,w5e),e(w5e,EVr),e(En,CVr),e(Hr,wVr),e(Hr,A5e),e(A5e,aw),e(aw,y5e),e(y5e,AVr),e(aw,yVr),e(aw,CZ),e(CZ,LVr),e(aw,xVr),e(Hr,$Vr),M(nw,Hr,null),b(f,PDe,u),b(f,sf,u),e(sf,sw),e(sw,L5e),M($x,L5e,null),e(sf,kVr),e(sf,x5e),e(x5e,SVr),b(f,BDe,u),b(f,Tr,u),M(kx,Tr,null),e(Tr,RVr),e(Tr,lf),e(lf,PVr),e(lf,wZ),e(wZ,BVr),e(lf,IVr),e(lf,AZ),e(AZ,NVr),e(lf,qVr),e(Tr,jVr),e(Tr,Sx),e(Sx,DVr),e(Sx,$5e),e($5e,GVr),e(Sx,OVr),e(Tr,VVr),e(Tr,Yt),M(Rx,Yt,null),e(Yt,XVr),e(Yt,k5e),e(k5e,zVr),e(Yt,WVr),e(Yt,df),e(df,QVr),e(df,S5e),e(S5e,HVr),e(df,UVr),e(df,yZ),e(yZ,JVr),e(df,YVr),e(Yt,KVr),M(lw,Yt,null),e(Tr,ZVr),e(Tr,Ur),M(Px,Ur,null),e(Ur,eXr),e(Ur,R5e),e(R5e,oXr),e(Ur,rXr),e(Ur,Cn),e(Cn,tXr),e(Cn,P5e),e(P5e,aXr),e(Cn,nXr),e(Cn,B5e),e(B5e,sXr),e(Cn,lXr),e(Cn,I5e),e(I5e,iXr),e(Cn,dXr),e(Ur,cXr),e(Ur,Bx),e(Bx,iw),e(iw,N5e),e(N5e,fXr),e(iw,mXr),e(iw,LZ),e(LZ,gXr),e(iw,hXr),e(Bx,pXr),e(Bx,dw),e(dw,q5e),e(q5e,_Xr),e(dw,uXr),e(dw,xZ),e(xZ,bXr),e(dw,vXr),e(Ur,FXr),M(cw,Ur,null),b(f,IDe,u),b(f,cf,u),e(cf,fw),e(fw,j5e),M(Ix,j5e,null),e(cf,TXr),e(cf,D5e),e(D5e,MXr),b(f,NDe,u),b(f,Mr,u),M(Nx,Mr,null),e(Mr,EXr),e(Mr,ff),e(ff,CXr),e(ff,$Z),e($Z,wXr),e(ff,AXr),e(ff,kZ),e(kZ,yXr),e(ff,LXr),e(Mr,xXr),e(Mr,qx),e(qx,$Xr),e(qx,G5e),e(G5e,kXr),e(qx,SXr),e(Mr,RXr),e(Mr,Kt),M(jx,Kt,null),e(Kt,PXr),e(Kt,O5e),e(O5e,BXr),e(Kt,IXr),e(Kt,mf),e(mf,NXr),e(mf,V5e),e(V5e,qXr),e(mf,jXr),e(mf,SZ),e(SZ,DXr),e(mf,GXr),e(Kt,OXr),M(mw,Kt,null),e(Mr,VXr),e(Mr,Jr),M(Dx,Jr,null),e(Jr,XXr),e(Jr,X5e),e(X5e,zXr),e(Jr,WXr),e(Jr,wn),e(wn,QXr),e(wn,z5e),e(z5e,HXr),e(wn,UXr),e(wn,W5e),e(W5e,JXr),e(wn,YXr),e(wn,Q5e),e(Q5e,KXr),e(wn,ZXr),e(Jr,ezr),e(Jr,H5e),e(H5e,gw),e(gw,U5e),e(U5e,ozr),e(gw,rzr),e(gw,RZ),e(RZ,tzr),e(gw,azr),e(Jr,nzr),M(hw,Jr,null),qDe=!0},p(f,[u]){const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Tf.$set(Gx);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),wg.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),sh.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),jh.$set(K5e);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),Dh.$set(Ox);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),sp.$set(Z5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),lp.$set(An);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),cp.$set(e3e);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),su.$set(o3e);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),iu.$set(r3e);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),Ku.$set(Vx);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),eb.$set(t3e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),jb.$set(Xx);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),Gb.$set(a3e);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),w2.$set(zx);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),y2.$set(n3e);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),z2.$set(s3e);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),Q2.$set(l3e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Ov.$set(gf);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),Xv.$set(i3e);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),TF.$set(d3e);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),EF.$set(c3e);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),$F.$set(Wx);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),SF.$set(f3e);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),h6.$set(m3e);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),_6.$set(g3e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),a1.$set(et);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),s1.$set(Qx);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),d1.$set(h3e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),f1.$set(Hx);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),w1.$set(p3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),y1.$set(ot);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),$1.$set(_3e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),S1.$set(hf);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),V1.$set(u3e);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),z1.$set(b3e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),K1.$set(y);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),eT.$set(pw);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),fT.$set(v3e);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),gT.$set(F3e);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),uT.$set(_w);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),vT.$set(T3e);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),AT.$set(M3e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),LT.$set(uw);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),RT.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),BT.$set(C3e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),jT.$set(bw);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),GT.$set(w3e);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),XT.$set(A3e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),WT.$set(vw);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),KT.$set(y3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),eM.$set(L3e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),tM.$set(Fw);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),nM.$set(x3e);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),KM.$set($3e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),e4.$set(Tw);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),C4.$set(k3e);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),A4.$set(S3e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),D4.$set(Mw);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),O4.$set(R3e);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),Q4.$set(P3e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),U4.$set(Ew);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),_E.$set(B3e);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),bE.$set(I3e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),xE.$set(Cw);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),kE.$set(N3e);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),aC.$set(q3e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),sC.$set(ww);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),CC.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),AC.$set(D3e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),xC.$set(Aw);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),kC.$set(G3e);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),RC.$set(O3e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),BC.$set(yw);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),r5.$set(V3e);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),a5.$set(X3e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),w5.$set(Lw);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),y5.$set(z3e);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),x5.$set(W3e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),k5.$set(xw);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),R5.$set(Q3e);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),B5.$set(H3e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),i3.$set($w);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),c3.$set(U3e);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),T3.$set(J3e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),E3.$set(kw);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),I3.$set(Y3e);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),q3.$set(K3e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),U3.$set(Sw);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),Y3.$set(Z3e);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),l0.$set(e0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),d0.$set(Rw);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),F0.$set(o0e);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),M0.$set(r0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),R0.$set(Pw);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),B0.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),X0.$set(a0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),W0.$set(Bw);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),ow.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),tw.$set(s0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),nw.$set(Iw);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),lw.$set(l0e);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),cw.$set(i0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),mw.$set(Nw);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),hw.$set(d0e)},i(f){qDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(Tf.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Oy.$$.fragment,f),E(wg.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Hy.$$.fragment,f),E(sh.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(eL.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(sL.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(cp.$$.fragment,f),E(mL.$$.fragment,f),E(su.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(iu.$$.fragment,f),E(uL.$$.fragment,f),E(Ku.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(eb.$$.fragment,f),E(ML.$$.fragment,f),E(jb.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(Gb.$$.fragment,f),E(yL.$$.fragment,f),E(w2.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(y2.$$.fragment,f),E(SL.$$.fragment,f),E(z2.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(Q2.$$.fragment,f),E(NL.$$.fragment,f),E(Ov.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(Xv.$$.fragment,f),E(OL.$$.fragment,f),E(TF.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(EF.$$.fragment,f),E(QL.$$.fragment,f),E($F.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(SF.$$.fragment,f),E(KL.$$.fragment,f),E(h6.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(_6.$$.fragment,f),E(t8.$$.fragment,f),E(a1.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(s1.$$.fragment,f),E(i8.$$.fragment,f),E(d1.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(f1.$$.fragment,f),E(g8.$$.fragment,f),E(w1.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(y1.$$.fragment,f),E(b8.$$.fragment,f),E($1.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(S1.$$.fragment,f),E(E8.$$.fragment,f),E(V1.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(z1.$$.fragment,f),E(L8.$$.fragment,f),E(K1.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(eT.$$.fragment,f),E(R8.$$.fragment,f),E(fT.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(gT.$$.fragment,f),E(q8.$$.fragment,f),E(uT.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(vT.$$.fragment,f),E(X8.$$.fragment,f),E(AT.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(LT.$$.fragment,f),E(U8.$$.fragment,f),E(RT.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(BT.$$.fragment,f),E(e7.$$.fragment,f),E(jT.$$.fragment,f),E(r7.$$.fragment,f),E(t7.$$.fragment,f),E(n7.$$.fragment,f),E(GT.$$.fragment,f),E(s7.$$.fragment,f),E(XT.$$.fragment,f),E(l7.$$.fragment,f),E(i7.$$.fragment,f),E(c7.$$.fragment,f),E(WT.$$.fragment,f),E(f7.$$.fragment,f),E(KT.$$.fragment,f),E(m7.$$.fragment,f),E(g7.$$.fragment,f),E(p7.$$.fragment,f),E(eM.$$.fragment,f),E(_7.$$.fragment,f),E(tM.$$.fragment,f),E(u7.$$.fragment,f),E(b7.$$.fragment,f),E(F7.$$.fragment,f),E(nM.$$.fragment,f),E(T7.$$.fragment,f),E(KM.$$.fragment,f),E(M7.$$.fragment,f),E(E7.$$.fragment,f),E(w7.$$.fragment,f),E(e4.$$.fragment,f),E(A7.$$.fragment,f),E(C4.$$.fragment,f),E(y7.$$.fragment,f),E(L7.$$.fragment,f),E($7.$$.fragment,f),E(A4.$$.fragment,f),E(k7.$$.fragment,f),E(D4.$$.fragment,f),E(S7.$$.fragment,f),E(R7.$$.fragment,f),E(B7.$$.fragment,f),E(O4.$$.fragment,f),E(I7.$$.fragment,f),E(Q4.$$.fragment,f),E(N7.$$.fragment,f),E(q7.$$.fragment,f),E(D7.$$.fragment,f),E(U4.$$.fragment,f),E(G7.$$.fragment,f),E(_E.$$.fragment,f),E(O7.$$.fragment,f),E(V7.$$.fragment,f),E(z7.$$.fragment,f),E(bE.$$.fragment,f),E(W7.$$.fragment,f),E(xE.$$.fragment,f),E(Q7.$$.fragment,f),E(H7.$$.fragment,f),E(J7.$$.fragment,f),E(kE.$$.fragment,f),E(Y7.$$.fragment,f),E(aC.$$.fragment,f),E(K7.$$.fragment,f),E(Z7.$$.fragment,f),E(o9.$$.fragment,f),E(sC.$$.fragment,f),E(r9.$$.fragment,f),E(CC.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(AC.$$.fragment,f),E(l9.$$.fragment,f),E(xC.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(kC.$$.fragment,f),E(g9.$$.fragment,f),E(RC.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(BC.$$.fragment,f),E(b9.$$.fragment,f),E(r5.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(a5.$$.fragment,f),E(E9.$$.fragment,f),E(w5.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(y9.$$.fragment,f),E(y5.$$.fragment,f),E(L9.$$.fragment,f),E(x5.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(k5.$$.fragment,f),E(R9.$$.fragment,f),E(R5.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(B5.$$.fragment,f),E(q9.$$.fragment,f),E(i3.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(c3.$$.fragment,f),E(V9.$$.fragment,f),E(T3.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(E3.$$.fragment,f),E(H9.$$.fragment,f),E(I3.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(q3.$$.fragment,f),E(Z9.$$.fragment,f),E(U3.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(Y3.$$.fragment,f),E(ax.$$.fragment,f),E(l0.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(d0.$$.fragment,f),E(dx.$$.fragment,f),E(F0.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(M0.$$.fragment,f),E(hx.$$.fragment,f),E(R0.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(B0.$$.fragment,f),E(vx.$$.fragment,f),E(X0.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(W0.$$.fragment,f),E(Cx.$$.fragment,f),E(ow.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(tw.$$.fragment,f),E(xx.$$.fragment,f),E(nw.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(lw.$$.fragment,f),E(Px.$$.fragment,f),E(cw.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(mw.$$.fragment,f),E(Dx.$$.fragment,f),E(hw.$$.fragment,f),qDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(Tf.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Oy.$$.fragment,f),C(wg.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Hy.$$.fragment,f),C(sh.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(eL.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(sL.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(cp.$$.fragment,f),C(mL.$$.fragment,f),C(su.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(iu.$$.fragment,f),C(uL.$$.fragment,f),C(Ku.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(eb.$$.fragment,f),C(ML.$$.fragment,f),C(jb.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(Gb.$$.fragment,f),C(yL.$$.fragment,f),C(w2.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(y2.$$.fragment,f),C(SL.$$.fragment,f),C(z2.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(Q2.$$.fragment,f),C(NL.$$.fragment,f),C(Ov.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(Xv.$$.fragment,f),C(OL.$$.fragment,f),C(TF.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(EF.$$.fragment,f),C(QL.$$.fragment,f),C($F.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(SF.$$.fragment,f),C(KL.$$.fragment,f),C(h6.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(_6.$$.fragment,f),C(t8.$$.fragment,f),C(a1.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(s1.$$.fragment,f),C(i8.$$.fragment,f),C(d1.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(f1.$$.fragment,f),C(g8.$$.fragment,f),C(w1.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(y1.$$.fragment,f),C(b8.$$.fragment,f),C($1.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(S1.$$.fragment,f),C(E8.$$.fragment,f),C(V1.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(z1.$$.fragment,f),C(L8.$$.fragment,f),C(K1.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(eT.$$.fragment,f),C(R8.$$.fragment,f),C(fT.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(gT.$$.fragment,f),C(q8.$$.fragment,f),C(uT.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(vT.$$.fragment,f),C(X8.$$.fragment,f),C(AT.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(LT.$$.fragment,f),C(U8.$$.fragment,f),C(RT.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(BT.$$.fragment,f),C(e7.$$.fragment,f),C(jT.$$.fragment,f),C(r7.$$.fragment,f),C(t7.$$.fragment,f),C(n7.$$.fragment,f),C(GT.$$.fragment,f),C(s7.$$.fragment,f),C(XT.$$.fragment,f),C(l7.$$.fragment,f),C(i7.$$.fragment,f),C(c7.$$.fragment,f),C(WT.$$.fragment,f),C(f7.$$.fragment,f),C(KT.$$.fragment,f),C(m7.$$.fragment,f),C(g7.$$.fragment,f),C(p7.$$.fragment,f),C(eM.$$.fragment,f),C(_7.$$.fragment,f),C(tM.$$.fragment,f),C(u7.$$.fragment,f),C(b7.$$.fragment,f),C(F7.$$.fragment,f),C(nM.$$.fragment,f),C(T7.$$.fragment,f),C(KM.$$.fragment,f),C(M7.$$.fragment,f),C(E7.$$.fragment,f),C(w7.$$.fragment,f),C(e4.$$.fragment,f),C(A7.$$.fragment,f),C(C4.$$.fragment,f),C(y7.$$.fragment,f),C(L7.$$.fragment,f),C($7.$$.fragment,f),C(A4.$$.fragment,f),C(k7.$$.fragment,f),C(D4.$$.fragment,f),C(S7.$$.fragment,f),C(R7.$$.fragment,f),C(B7.$$.fragment,f),C(O4.$$.fragment,f),C(I7.$$.fragment,f),C(Q4.$$.fragment,f),C(N7.$$.fragment,f),C(q7.$$.fragment,f),C(D7.$$.fragment,f),C(U4.$$.fragment,f),C(G7.$$.fragment,f),C(_E.$$.fragment,f),C(O7.$$.fragment,f),C(V7.$$.fragment,f),C(z7.$$.fragment,f),C(bE.$$.fragment,f),C(W7.$$.fragment,f),C(xE.$$.fragment,f),C(Q7.$$.fragment,f),C(H7.$$.fragment,f),C(J7.$$.fragment,f),C(kE.$$.fragment,f),C(Y7.$$.fragment,f),C(aC.$$.fragment,f),C(K7.$$.fragment,f),C(Z7.$$.fragment,f),C(o9.$$.fragment,f),C(sC.$$.fragment,f),C(r9.$$.fragment,f),C(CC.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(AC.$$.fragment,f),C(l9.$$.fragment,f),C(xC.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(kC.$$.fragment,f),C(g9.$$.fragment,f),C(RC.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(BC.$$.fragment,f),C(b9.$$.fragment,f),C(r5.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(a5.$$.fragment,f),C(E9.$$.fragment,f),C(w5.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(y9.$$.fragment,f),C(y5.$$.fragment,f),C(L9.$$.fragment,f),C(x5.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(k5.$$.fragment,f),C(R9.$$.fragment,f),C(R5.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(B5.$$.fragment,f),C(q9.$$.fragment,f),C(i3.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(c3.$$.fragment,f),C(V9.$$.fragment,f),C(T3.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(E3.$$.fragment,f),C(H9.$$.fragment,f),C(I3.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(q3.$$.fragment,f),C(Z9.$$.fragment,f),C(U3.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(Y3.$$.fragment,f),C(ax.$$.fragment,f),C(l0.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(d0.$$.fragment,f),C(dx.$$.fragment,f),C(F0.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(M0.$$.fragment,f),C(hx.$$.fragment,f),C(R0.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(B0.$$.fragment,f),C(vx.$$.fragment,f),C(X0.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(W0.$$.fragment,f),C(Cx.$$.fragment,f),C(ow.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(tw.$$.fragment,f),C(xx.$$.fragment,f),C(nw.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(lw.$$.fragment,f),C(Px.$$.fragment,f),C(cw.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(mw.$$.fragment,f),C(Dx.$$.fragment,f),C(hw.$$.fragment,f),qDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(De),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Bqe),f&&t(vi),w(Iy),f&&t(Iqe),f&&t(kn),f&&t(Nqe),w(Ny,f),f&&t(qqe),f&&t(sk),f&&t(jqe),w(Tf,f),f&&t(Dqe),f&&t(Fi),w(qy),f&&t(Gqe),f&&t(Co),w(jy),w(Oy),w(wg),w(Vy),f&&t(Oqe),f&&t(Mi),w(Xy),f&&t(Vqe),f&&t(wo),w(zy),w(Hy),w(sh),w(Uy),f&&t(Xqe),f&&t(Ei),w(Jy),f&&t(zqe),f&&t(Ao),w(Yy),w(eL),w(jh),w(Dh),w(oL),f&&t(Wqe),f&&t(Ci),w(rL),f&&t(Qqe),f&&t(yo),w(tL),w(sL),w(sp),w(lp),w(lL),f&&t(Hqe),f&&t(Ai),w(iL),f&&t(Uqe),f&&t(Lo),w(dL),w(fL),w(cp),w(mL),w(su),f&&t(Jqe),f&&t(xi),w(gL),f&&t(Yqe),f&&t(xo),w(hL),w(_L),w(iu),w(uL),w(Ku),f&&t(Kqe),f&&t(Si),w(bL),f&&t(Zqe),f&&t($o),w(vL),w(TL),w(eb),w(ML),w(jb),f&&t(eje),f&&t(Bi),w(EL),f&&t(oje),f&&t(ko),w(CL),w(AL),w(Gb),w(yL),w(w2),f&&t(rje),f&&t(qi),w(LL),f&&t(tje),f&&t(So),w(xL),w(kL),w(y2),w(SL),w(z2),f&&t(aje),f&&t(Gi),w(RL),f&&t(nje),f&&t(Ro),w(PL),w(IL),w(Q2),w(NL),w(Ov),f&&t(sje),f&&t(Xi),w(qL),f&&t(lje),f&&t(Po),w(jL),w(GL),w(Xv),w(OL),w(TF),f&&t(ije),f&&t(Qi),w(VL),f&&t(dje),f&&t(Bo),w(XL),w(WL),w(EF),w(QL),w($F),f&&t(cje),f&&t(Ji),w(HL),f&&t(fje),f&&t(Io),w(UL),w(YL),w(SF),w(KL),w(h6),f&&t(mje),f&&t(Zi),w(ZL),f&&t(gje),f&&t(No),w(e8),w(r8),w(_6),w(t8),w(a1),f&&t(hje),f&&t(rd),w(a8),f&&t(pje),f&&t(qo),w(n8),w(l8),w(s1),w(i8),w(d1),f&&t(_je),f&&t(nd),w(d8),f&&t(uje),f&&t(jo),w(c8),w(m8),w(f1),w(g8),w(w1),f&&t(bje),f&&t(id),w(h8),f&&t(vje),f&&t(Do),w(p8),w(u8),w(y1),w(b8),w($1),f&&t(Fje),f&&t(fd),w(v8),f&&t(Tje),f&&t(Go),w(F8),w(M8),w(S1),w(E8),w(V1),f&&t(Mje),f&&t(hd),w(C8),f&&t(Eje),f&&t(Oo),w(w8),w(y8),w(z1),w(L8),w(K1),f&&t(Cje),f&&t(ud),w(x8),f&&t(wje),f&&t(Vo),w($8),w(S8),w(eT),w(R8),w(fT),f&&t(Aje),f&&t(Fd),w(P8),f&&t(yje),f&&t(Xo),w(B8),w(N8),w(gT),w(q8),w(uT),f&&t(Lje),f&&t(Ed),w(D8),f&&t(xje),f&&t(zo),w(G8),w(V8),w(vT),w(X8),w(AT),f&&t($je),f&&t(Ad),w(z8),f&&t(kje),f&&t(Wo),w(W8),w(H8),w(LT),w(U8),w(RT),f&&t(Sje),f&&t($d),w(J8),f&&t(Rje),f&&t(Qo),w(Y8),w(Z8),w(BT),w(e7),w(jT),f&&t(Pje),f&&t(Rd),w(r7),f&&t(Bje),f&&t(Ho),w(t7),w(n7),w(GT),w(s7),w(XT),f&&t(Ije),f&&t(Id),w(l7),f&&t(Nje),f&&t(Uo),w(i7),w(c7),w(WT),w(f7),w(KT),f&&t(qje),f&&t(jd),w(m7),f&&t(jje),f&&t(Jo),w(g7),w(p7),w(eM),w(_7),w(tM),f&&t(Dje),f&&t(Od),w(u7),f&&t(Gje),f&&t(Yo),w(b7),w(F7),w(nM),w(T7),w(KM),f&&t(Oje),f&&t(zd),w(M7),f&&t(Vje),f&&t(Ko),w(E7),w(w7),w(e4),w(A7),w(C4),f&&t(Xje),f&&t(Hd),w(y7),f&&t(zje),f&&t(Zo),w(L7),w($7),w(A4),w(k7),w(D4),f&&t(Wje),f&&t(Yd),w(S7),f&&t(Qje),f&&t(er),w(R7),w(B7),w(O4),w(I7),w(Q4),f&&t(Hje),f&&t(ec),w(N7),f&&t(Uje),f&&t(or),w(q7),w(D7),w(U4),w(G7),w(_E),f&&t(Jje),f&&t(tc),w(O7),f&&t(Yje),f&&t(rr),w(V7),w(z7),w(bE),w(W7),w(xE),f&&t(Kje),f&&t(sc),w(Q7),f&&t(Zje),f&&t(tr),w(H7),w(J7),w(kE),w(Y7),w(aC),f&&t(eDe),f&&t(dc),w(K7),f&&t(oDe),f&&t(ar),w(Z7),w(o9),w(sC),w(r9),w(CC),f&&t(rDe),f&&t(mc),w(t9),f&&t(tDe),f&&t(nr),w(a9),w(s9),w(AC),w(l9),w(xC),f&&t(aDe),f&&t(pc),w(d9),f&&t(nDe),f&&t(sr),w(c9),w(m9),w(kC),w(g9),w(RC),f&&t(sDe),f&&t(bc),w(h9),f&&t(lDe),f&&t(lr),w(p9),w(u9),w(BC),w(b9),w(r5),f&&t(iDe),f&&t(Tc),w(v9),f&&t(dDe),f&&t(ir),w(F9),w(M9),w(a5),w(E9),w(w5),f&&t(cDe),f&&t(Cc),w(C9),f&&t(fDe),f&&t(dr),w(w9),w(y9),w(y5),w(L9),w(x5),f&&t(mDe),f&&t(yc),w(x9),f&&t(gDe),f&&t(cr),w($9),w(S9),w(k5),w(R9),w(R5),f&&t(hDe),f&&t($c),w(P9),f&&t(pDe),f&&t(fr),w(B9),w(N9),w(B5),w(q9),w(i3),f&&t(_De),f&&t(Rc),w(j9),f&&t(uDe),f&&t(mr),w(D9),w(O9),w(c3),w(V9),w(T3),f&&t(bDe),f&&t(Ic),w(X9),f&&t(vDe),f&&t(gr),w(z9),w(Q9),w(E3),w(H9),w(I3),f&&t(FDe),f&&t(jc),w(U9),f&&t(TDe),f&&t(hr),w(J9),w(K9),w(q3),w(Z9),w(U3),f&&t(MDe),f&&t(Oc),w(ex),f&&t(EDe),f&&t(pr),w(ox),w(tx),w(Y3),w(ax),w(l0),f&&t(CDe),f&&t(zc),w(nx),f&&t(wDe),f&&t(_r),w(sx),w(ix),w(d0),w(dx),w(F0),f&&t(ADe),f&&t(Hc),w(cx),f&&t(yDe),f&&t(ur),w(fx),w(gx),w(M0),w(hx),w(R0),f&&t(LDe),f&&t(Yc),w(px),f&&t(xDe),f&&t(br),w(_x),w(bx),w(B0),w(vx),w(X0),f&&t($De),f&&t(ef),w(Fx),f&&t(kDe),f&&t(vr),w(Tx),w(Ex),w(W0),w(Cx),w(ow),f&&t(SDe),f&&t(tf),w(wx),f&&t(RDe),f&&t(Fr),w(Ax),w(Lx),w(tw),w(xx),w(nw),f&&t(PDe),f&&t(sf),w($x),f&&t(BDe),f&&t(Tr),w(kx),w(Rx),w(lw),w(Px),w(cw),f&&t(IDe),f&&t(cf),w(Ix),f&&t(NDe),f&&t(Mr),w(Nx),w(jx),w(mw),w(Dx),w(hw)}}}const aPt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function nPt(L){return nSt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mPt extends oSt{constructor(g){super();rSt(this,g,nPt,tPt,tSt,{})}}export{mPt as default,aPt as metadata};
