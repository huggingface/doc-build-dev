import{S as bIt,i as vIt,s as FIt,e as a,k as l,w as F,t as o,M as TIt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as MIt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as NHr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function EIt(L){let g,v,p,m,u,d,h,Eo,vi,Af,at,Fi,Ti,s0,yf,Ge,We,Mi,Sn,l0,Rn,Pn,i0,Ei,Bn,d0,Ci,Lf,La;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),vi=a("code"),Af=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Fi=a("code"),Ti=o('"new-model"'),s0=o(")."),yf=l(),Ge=a("p"),We=o("Likewise, if your "),Mi=a("code"),Sn=o("NewModel"),l0=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),i0=o(`, make sure its
`),Ei=a("code"),Bn=o("config_class"),d0=o(` attribute is set to the same class you use when registering the model (here
`),Ci=a("code"),Lf=o("NewModelConfig"),La=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Bk=s(p);m=r(Bk,"NewModelConfig"),Bk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var wi=s(d);h=r(wi,"PretrainedConfig"),wi.forEach(t),Eo=r(Ae,`, make sure its
`),vi=n(Ae,"CODE",{});var Ik=s(vi);Af=r(Ik,"model_type"),Ik.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Fi=n(Ae,"CODE",{});var Nk=s(Fi);Ti=r(Nk,'"new-model"'),Nk.forEach(t),s0=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Ge=n(Qe,"P",{});var Co=s(Ge);We=r(Co,"Likewise, if your "),Mi=n(Co,"CODE",{});var xa=s(Mi);Sn=r(xa,"NewModel"),xa.forEach(t),l0=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var qk=s(Rn);Pn=r(qk,"PreTrainedModel"),qk.forEach(t),i0=r(Co,`, make sure its
`),Ei=n(Co,"CODE",{});var xf=s(Ei);Bn=r(xf,"config_class"),xf.forEach(t),d0=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ci=n(Co,"CODE",{});var jk=s(Ci);Lf=r(jk,"NewModelConfig"),jk.forEach(t),La=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,vi),e(vi,Af),e(g,at),e(g,Fi),e(Fi,Ti),e(g,s0),b(Qe,yf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,Mi),e(Mi,Sn),e(Ge,l0),e(Ge,Rn),e(Rn,Pn),e(Ge,i0),e(Ge,Ei),e(Ei,Bn),e(Ge,d0),e(Ge,Ci),e(Ci,Lf),e(Ge,La)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Ge)}}}function CIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AIt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function yIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LIt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function xIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $It(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Nt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ENt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ANt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Nt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function INt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ONt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _qt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mqt(L){let g,v,p,m,u,d,h,Eo,vi,Af,at,Fi,Ti,s0,yf,Ge,We,Mi,Sn,l0,Rn,Pn,i0,Ei,Bn,d0,Ci,Lf,La,Qe,Ae,Bk,wi,Ik,Nk,Co,xa,qk,xf,jk,$Xe,pDe,Ai,$f,Cre,c0,kXe,wre,SXe,uDe,In,RXe,Are,PXe,BXe,yre,IXe,NXe,_De,f0,bDe,Dk,qXe,vDe,kf,FDe,yi,Sf,Lre,m0,jXe,xre,DXe,TDe,wo,g0,GXe,h0,OXe,Gk,VXe,XXe,zXe,p0,WXe,$re,QXe,HXe,UXe,wr,u0,JXe,kre,YXe,KXe,Li,ZXe,Sre,eze,oze,Rre,rze,tze,aze,A,Rf,Pre,nze,sze,Ok,lze,ize,dze,Pf,Bre,cze,fze,Vk,mze,gze,hze,Bf,Ire,pze,uze,Xk,_ze,bze,vze,If,Nre,Fze,Tze,zk,Mze,Eze,Cze,Nf,qre,wze,Aze,Wk,yze,Lze,xze,qf,jre,$ze,kze,Qk,Sze,Rze,Pze,jf,Dre,Bze,Ize,Hk,Nze,qze,jze,Df,Gre,Dze,Gze,Uk,Oze,Vze,Xze,Gf,Ore,zze,Wze,Jk,Qze,Hze,Uze,Of,Vre,Jze,Yze,Yk,Kze,Zze,eWe,Vf,Xre,oWe,rWe,Kk,tWe,aWe,nWe,Xf,zre,sWe,lWe,Zk,iWe,dWe,cWe,zf,Wre,fWe,mWe,eS,gWe,hWe,pWe,Wf,Qre,uWe,_We,oS,bWe,vWe,FWe,Qf,Hre,TWe,MWe,rS,EWe,CWe,wWe,Hf,Ure,AWe,yWe,tS,LWe,xWe,$We,Uf,Jre,kWe,SWe,aS,RWe,PWe,BWe,Jf,Yre,IWe,NWe,nS,qWe,jWe,DWe,Yf,Kre,GWe,OWe,sS,VWe,XWe,zWe,Kf,Zre,WWe,QWe,lS,HWe,UWe,JWe,Zf,ete,YWe,KWe,iS,ZWe,eQe,oQe,em,ote,rQe,tQe,dS,aQe,nQe,sQe,om,rte,lQe,iQe,cS,dQe,cQe,fQe,rm,tte,mQe,gQe,fS,hQe,pQe,uQe,tm,ate,_Qe,bQe,mS,vQe,FQe,TQe,am,nte,MQe,EQe,gS,CQe,wQe,AQe,nm,ste,yQe,LQe,hS,xQe,$Qe,kQe,sm,lte,SQe,RQe,pS,PQe,BQe,IQe,lm,ite,NQe,qQe,uS,jQe,DQe,GQe,im,dte,OQe,VQe,_S,XQe,zQe,WQe,dm,cte,QQe,HQe,bS,UQe,JQe,YQe,cm,fte,KQe,ZQe,vS,eHe,oHe,rHe,fm,mte,tHe,aHe,FS,nHe,sHe,lHe,mm,gte,iHe,dHe,TS,cHe,fHe,mHe,gm,hte,gHe,hHe,MS,pHe,uHe,_He,hm,pte,bHe,vHe,ES,FHe,THe,MHe,pm,ute,EHe,CHe,CS,wHe,AHe,yHe,um,_te,LHe,xHe,wS,$He,kHe,SHe,_m,bte,RHe,PHe,AS,BHe,IHe,NHe,bm,vte,qHe,jHe,yS,DHe,GHe,OHe,vm,Fte,VHe,XHe,LS,zHe,WHe,QHe,Fm,Tte,HHe,UHe,xS,JHe,YHe,KHe,Tm,Mte,ZHe,eUe,$S,oUe,rUe,tUe,Mm,Ete,aUe,nUe,kS,sUe,lUe,iUe,Em,Cte,dUe,cUe,SS,fUe,mUe,gUe,Cm,wte,hUe,pUe,RS,uUe,_Ue,bUe,wm,Ate,vUe,FUe,PS,TUe,MUe,EUe,Am,yte,CUe,wUe,BS,AUe,yUe,LUe,ym,Lte,xUe,$Ue,IS,kUe,SUe,RUe,Lm,xte,PUe,BUe,NS,IUe,NUe,qUe,xm,$te,jUe,DUe,qS,GUe,OUe,VUe,$m,kte,XUe,zUe,jS,WUe,QUe,HUe,km,Ste,UUe,JUe,DS,YUe,KUe,ZUe,Sm,Rte,eJe,oJe,GS,rJe,tJe,aJe,Rm,Pte,nJe,sJe,OS,lJe,iJe,dJe,Pm,Bte,cJe,fJe,VS,mJe,gJe,hJe,Bm,Ite,pJe,uJe,XS,_Je,bJe,vJe,Im,Nte,FJe,TJe,zS,MJe,EJe,CJe,Nm,qte,wJe,AJe,WS,yJe,LJe,xJe,qm,jte,$Je,kJe,QS,SJe,RJe,PJe,jm,Dte,BJe,IJe,HS,NJe,qJe,jJe,Dm,Gte,DJe,GJe,US,OJe,VJe,XJe,Gm,Ote,zJe,WJe,JS,QJe,HJe,UJe,Om,Vte,JJe,YJe,YS,KJe,ZJe,eYe,Vm,Xte,oYe,rYe,KS,tYe,aYe,nYe,Xm,zte,sYe,lYe,ZS,iYe,dYe,cYe,zm,Wte,fYe,mYe,eR,gYe,hYe,pYe,Wm,Qte,uYe,_Ye,oR,bYe,vYe,FYe,Qm,Hte,TYe,MYe,rR,EYe,CYe,wYe,Hm,Ute,AYe,yYe,tR,LYe,xYe,$Ye,Um,Jte,kYe,SYe,aR,RYe,PYe,BYe,Jm,Yte,IYe,NYe,nR,qYe,jYe,DYe,Ym,Kte,GYe,OYe,sR,VYe,XYe,zYe,Km,Zte,WYe,QYe,lR,HYe,UYe,JYe,Zm,eae,YYe,KYe,iR,ZYe,eKe,oKe,eg,oae,rKe,tKe,dR,aKe,nKe,sKe,og,rae,lKe,iKe,cR,dKe,cKe,fKe,rg,tae,mKe,gKe,fR,hKe,pKe,uKe,tg,aae,_Ke,bKe,mR,vKe,FKe,TKe,ag,nae,MKe,EKe,gR,CKe,wKe,AKe,ng,sae,yKe,LKe,hR,xKe,$Ke,kKe,sg,lae,SKe,RKe,pR,PKe,BKe,IKe,lg,iae,NKe,qKe,uR,jKe,DKe,GKe,ig,dae,OKe,VKe,_R,XKe,zKe,WKe,dg,cae,QKe,HKe,bR,UKe,JKe,YKe,cg,fae,KKe,ZKe,vR,eZe,oZe,rZe,fg,mae,tZe,aZe,FR,nZe,sZe,lZe,mg,gae,iZe,dZe,TR,cZe,fZe,mZe,gg,hae,gZe,hZe,MR,pZe,uZe,_Ze,hg,pae,bZe,vZe,ER,FZe,TZe,MZe,pg,uae,EZe,CZe,CR,wZe,AZe,yZe,ug,_ae,LZe,xZe,wR,$Ze,kZe,SZe,_g,bae,RZe,PZe,AR,BZe,IZe,NZe,bg,vae,qZe,jZe,yR,DZe,GZe,OZe,vg,Fae,VZe,XZe,LR,zZe,WZe,QZe,Fg,Tae,HZe,UZe,xR,JZe,YZe,KZe,Tg,Mae,ZZe,eeo,$R,oeo,reo,teo,Mg,Eae,aeo,neo,kR,seo,leo,ieo,Eg,Cae,deo,ceo,SR,feo,meo,geo,Cg,wae,heo,peo,RR,ueo,_eo,beo,wg,Aae,veo,Feo,PR,Teo,Meo,Eeo,Ag,yae,Ceo,weo,BR,Aeo,yeo,Leo,yg,Lae,xeo,$eo,IR,keo,Seo,Reo,Lg,xae,Peo,Beo,NR,Ieo,Neo,qeo,xg,$ae,jeo,Deo,qR,Geo,Oeo,Veo,$g,kae,Xeo,zeo,jR,Weo,Qeo,Heo,kg,Sae,Ueo,Jeo,DR,Yeo,Keo,Zeo,Sg,Rae,eoo,ooo,GR,roo,too,aoo,Rg,Pae,noo,soo,OR,loo,ioo,doo,Pg,Bae,coo,foo,VR,moo,goo,hoo,Bg,Iae,poo,uoo,XR,_oo,boo,voo,Ig,Nae,Foo,Too,zR,Moo,Eoo,Coo,Ng,woo,qg,_0,Aoo,qae,yoo,MDe,xi,jg,jae,b0,Loo,Dae,xoo,EDe,Ao,v0,$oo,F0,koo,WR,Soo,Roo,Poo,T0,Boo,Gae,Ioo,Noo,qoo,Ar,M0,joo,Oae,Doo,Goo,$a,Ooo,Vae,Voo,Xoo,Xae,zoo,Woo,zae,Qoo,Hoo,Uoo,k,Nn,Wae,Joo,Yoo,QR,Koo,Zoo,HR,ero,oro,rro,qn,Qae,tro,aro,UR,nro,sro,JR,lro,iro,dro,jn,Hae,cro,fro,YR,mro,gro,KR,hro,pro,uro,Dg,Uae,_ro,bro,ZR,vro,Fro,Tro,Dn,Jae,Mro,Ero,eP,Cro,wro,oP,Aro,yro,Lro,Gg,Yae,xro,$ro,rP,kro,Sro,Rro,Og,Kae,Pro,Bro,tP,Iro,Nro,qro,Vg,Zae,jro,Dro,aP,Gro,Oro,Vro,Gn,ene,Xro,zro,nP,Wro,Qro,sP,Hro,Uro,Jro,On,one,Yro,Kro,lP,Zro,eto,iP,oto,rto,tto,Vn,rne,ato,nto,dP,sto,lto,cP,ito,dto,cto,Xg,tne,fto,mto,fP,gto,hto,pto,zg,ane,uto,_to,mP,bto,vto,Fto,Wg,nne,Tto,Mto,gP,Eto,Cto,wto,Xn,sne,Ato,yto,hP,Lto,xto,pP,$to,kto,Sto,Qg,lne,Rto,Pto,uP,Bto,Ito,Nto,zn,ine,qto,jto,_P,Dto,Gto,bP,Oto,Vto,Xto,Wn,dne,zto,Wto,vP,Qto,Hto,FP,Uto,Jto,Yto,Qn,cne,Kto,Zto,TP,eao,oao,MP,rao,tao,aao,Hg,fne,nao,sao,EP,lao,iao,dao,Hn,mne,cao,fao,CP,mao,gao,wP,hao,pao,uao,Un,gne,_ao,bao,AP,vao,Fao,yP,Tao,Mao,Eao,Jn,hne,Cao,wao,LP,Aao,yao,xP,Lao,xao,$ao,Yn,pne,kao,Sao,$P,Rao,Pao,kP,Bao,Iao,Nao,Kn,une,qao,jao,SP,Dao,Gao,RP,Oao,Vao,Xao,Zn,_ne,zao,Wao,PP,Qao,Hao,BP,Uao,Jao,Yao,Ug,bne,Kao,Zao,IP,eno,ono,rno,es,vne,tno,ano,NP,nno,sno,qP,lno,ino,dno,Jg,Fne,cno,fno,jP,mno,gno,hno,os,Tne,pno,uno,DP,_no,bno,GP,vno,Fno,Tno,rs,Mne,Mno,Eno,OP,Cno,wno,VP,Ano,yno,Lno,ts,Ene,xno,$no,XP,kno,Sno,zP,Rno,Pno,Bno,Yg,Cne,Ino,Nno,WP,qno,jno,Dno,as,wne,Gno,Ono,QP,Vno,Xno,HP,zno,Wno,Qno,ns,Ane,Hno,Uno,UP,Jno,Yno,JP,Kno,Zno,eso,Kg,yne,oso,rso,YP,tso,aso,nso,ss,Lne,sso,lso,KP,iso,dso,ZP,cso,fso,mso,ls,xne,gso,hso,eB,pso,uso,oB,_so,bso,vso,is,$ne,Fso,Tso,rB,Mso,Eso,tB,Cso,wso,Aso,ds,kne,yso,Lso,aB,xso,$so,nB,kso,Sso,Rso,cs,Sne,Pso,Bso,sB,Iso,Nso,lB,qso,jso,Dso,fs,Rne,Gso,Oso,iB,Vso,Xso,dB,zso,Wso,Qso,ms,Pne,Hso,Uso,cB,Jso,Yso,fB,Kso,Zso,elo,Zg,Bne,olo,rlo,mB,tlo,alo,nlo,gs,Ine,slo,llo,gB,ilo,dlo,hB,clo,flo,mlo,eh,Nne,glo,hlo,pB,plo,ulo,_lo,oh,qne,blo,vlo,uB,Flo,Tlo,Mlo,hs,jne,Elo,Clo,_B,wlo,Alo,bB,ylo,Llo,xlo,ps,Dne,$lo,klo,vB,Slo,Rlo,FB,Plo,Blo,Ilo,us,Gne,Nlo,qlo,TB,jlo,Dlo,MB,Glo,Olo,Vlo,rh,One,Xlo,zlo,EB,Wlo,Qlo,Hlo,_s,Vne,Ulo,Jlo,CB,Ylo,Klo,wB,Zlo,eio,oio,bs,Xne,rio,tio,AB,aio,nio,yB,sio,lio,iio,vs,zne,dio,cio,LB,fio,mio,xB,gio,hio,pio,Fs,Wne,uio,_io,$B,bio,vio,kB,Fio,Tio,Mio,Ts,Qne,Eio,Cio,SB,wio,Aio,RB,yio,Lio,xio,th,Hne,$io,kio,PB,Sio,Rio,Pio,Ms,Une,Bio,Iio,BB,Nio,qio,IB,jio,Dio,Gio,ah,Jne,Oio,Vio,NB,Xio,zio,Wio,nh,Yne,Qio,Hio,qB,Uio,Jio,Yio,sh,Kne,Kio,Zio,jB,edo,odo,rdo,lh,Zne,tdo,ado,DB,ndo,sdo,ldo,Es,ese,ido,ddo,GB,cdo,fdo,OB,mdo,gdo,hdo,ih,ose,pdo,udo,VB,_do,bdo,vdo,Cs,rse,Fdo,Tdo,XB,Mdo,Edo,zB,Cdo,wdo,Ado,ws,tse,ydo,Ldo,WB,xdo,$do,QB,kdo,Sdo,Rdo,As,ase,Pdo,Bdo,HB,Ido,Ndo,UB,qdo,jdo,Ddo,ys,nse,Gdo,Odo,JB,Vdo,Xdo,YB,zdo,Wdo,Qdo,Ls,sse,Hdo,Udo,KB,Jdo,Ydo,ZB,Kdo,Zdo,eco,xs,lse,oco,rco,eI,tco,aco,oI,nco,sco,lco,dh,ise,ico,dco,rI,cco,fco,mco,ch,dse,gco,hco,tI,pco,uco,_co,$s,cse,bco,vco,aI,Fco,Tco,nI,Mco,Eco,Cco,ks,fse,wco,Aco,sI,yco,Lco,lI,xco,$co,kco,Ss,mse,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,fh,gse,jco,Dco,cI,Gco,Oco,Vco,mh,hse,Xco,zco,fI,Wco,Qco,Hco,gh,pse,Uco,Jco,mI,Yco,Kco,Zco,Rs,use,efo,ofo,gI,rfo,tfo,hI,afo,nfo,sfo,Ps,_se,lfo,ifo,pI,dfo,cfo,uI,ffo,mfo,gfo,hh,bse,hfo,pfo,_I,ufo,_fo,bfo,ph,vse,vfo,Ffo,bI,Tfo,Mfo,Efo,uh,Fse,Cfo,wfo,vI,Afo,yfo,Lfo,Bs,Tse,xfo,$fo,FI,kfo,Sfo,TI,Rfo,Pfo,Bfo,_h,Mse,Ifo,Nfo,MI,qfo,jfo,Dfo,bh,Ese,Gfo,Ofo,EI,Vfo,Xfo,zfo,Is,Cse,Wfo,Qfo,CI,Hfo,Ufo,wI,Jfo,Yfo,Kfo,Ns,wse,Zfo,emo,AI,omo,rmo,yI,tmo,amo,nmo,qs,Ase,smo,lmo,LI,imo,dmo,xI,cmo,fmo,mmo,js,yse,gmo,hmo,$I,pmo,umo,kI,_mo,bmo,vmo,vh,Fmo,Fh,E0,Tmo,Lse,Mmo,CDe,$i,Th,xse,C0,Emo,$se,Cmo,wDe,yo,w0,wmo,A0,Amo,SI,ymo,Lmo,xmo,y0,$mo,kse,kmo,Smo,Rmo,He,L0,Pmo,Sse,Bmo,Imo,ka,Nmo,Rse,qmo,jmo,Pse,Dmo,Gmo,Bse,Omo,Vmo,Xmo,Y,Mh,Ise,zmo,Wmo,RI,Qmo,Hmo,Umo,Eh,Nse,Jmo,Ymo,PI,Kmo,Zmo,ego,Ch,qse,ogo,rgo,BI,tgo,ago,ngo,wh,jse,sgo,lgo,II,igo,dgo,cgo,Ah,Dse,fgo,mgo,NI,ggo,hgo,pgo,yh,Gse,ugo,_go,qI,bgo,vgo,Fgo,Lh,Ose,Tgo,Mgo,jI,Ego,Cgo,wgo,xh,Vse,Ago,ygo,DI,Lgo,xgo,$go,$h,Xse,kgo,Sgo,GI,Rgo,Pgo,Bgo,kh,zse,Igo,Ngo,OI,qgo,jgo,Dgo,Sh,Wse,Ggo,Ogo,VI,Vgo,Xgo,zgo,Rh,Qse,Wgo,Qgo,XI,Hgo,Ugo,Jgo,Ph,Hse,Ygo,Kgo,zI,Zgo,eho,oho,Bh,Use,rho,tho,WI,aho,nho,sho,Ih,Jse,lho,iho,QI,dho,cho,fho,Nh,Yse,mho,gho,HI,hho,pho,uho,qh,Kse,_ho,bho,UI,vho,Fho,Tho,jh,Zse,Mho,Eho,JI,Cho,who,Aho,Dh,ele,yho,Lho,YI,xho,$ho,kho,Gh,ole,Sho,Rho,KI,Pho,Bho,Iho,Oh,rle,Nho,qho,ZI,jho,Dho,Gho,Vh,tle,Oho,Vho,eN,Xho,zho,Who,Xh,ale,Qho,Hho,oN,Uho,Jho,Yho,zh,nle,Kho,Zho,rN,epo,opo,rpo,Wh,sle,tpo,apo,tN,npo,spo,lpo,Qh,lle,ipo,dpo,aN,cpo,fpo,mpo,Hh,ile,gpo,hpo,nN,ppo,upo,_po,Uh,dle,bpo,vpo,sN,Fpo,Tpo,Mpo,Jh,cle,Epo,Cpo,lN,wpo,Apo,ypo,Yh,fle,Lpo,xpo,iN,$po,kpo,Spo,Kh,mle,Rpo,Ppo,dN,Bpo,Ipo,Npo,Zh,gle,qpo,jpo,cN,Dpo,Gpo,Opo,ep,Vpo,op,Xpo,rp,x0,zpo,hle,Wpo,ADe,ki,tp,ple,$0,Qpo,ule,Hpo,yDe,Lo,k0,Upo,S0,Jpo,fN,Ypo,Kpo,Zpo,R0,euo,_le,ouo,ruo,tuo,Ue,P0,auo,ble,nuo,suo,Si,luo,vle,iuo,duo,Fle,cuo,fuo,muo,he,ap,Tle,guo,huo,mN,puo,uuo,_uo,np,Mle,buo,vuo,Ele,Fuo,Tuo,Muo,sp,Cle,Euo,Cuo,gN,wuo,Auo,yuo,lp,wle,Luo,xuo,hN,$uo,kuo,Suo,ip,Ale,Ruo,Puo,pN,Buo,Iuo,Nuo,dp,yle,quo,juo,uN,Duo,Guo,Ouo,cp,Lle,Vuo,Xuo,_N,zuo,Wuo,Quo,fp,xle,Huo,Uuo,bN,Juo,Yuo,Kuo,mp,$le,Zuo,e_o,vN,o_o,r_o,t_o,gp,kle,a_o,n_o,FN,s_o,l_o,i_o,hp,Sle,d_o,c_o,TN,f_o,m_o,g_o,pp,Rle,h_o,p_o,MN,u_o,__o,b_o,up,Ple,v_o,F_o,EN,T_o,M_o,E_o,_p,Ble,C_o,w_o,CN,A_o,y_o,L_o,bp,Ile,x_o,$_o,wN,k_o,S_o,R_o,vp,Nle,P_o,B_o,AN,I_o,N_o,q_o,Fp,qle,j_o,D_o,yN,G_o,O_o,V_o,Tp,X_o,Mp,z_o,Ep,B0,W_o,jle,Q_o,LDe,Ri,Cp,Dle,I0,H_o,Gle,U_o,xDe,xo,N0,J_o,Pi,Y_o,LN,K_o,Z_o,xN,e1o,o1o,r1o,q0,t1o,Ole,a1o,n1o,s1o,nt,j0,l1o,Vle,i1o,d1o,Bi,c1o,Xle,f1o,m1o,$N,g1o,h1o,p1o,wp,u1o,Je,D0,_1o,zle,b1o,v1o,Sa,F1o,Wle,T1o,M1o,Qle,E1o,C1o,Hle,w1o,A1o,y1o,x,Ap,Ule,L1o,x1o,kN,$1o,k1o,S1o,yp,Jle,R1o,P1o,SN,B1o,I1o,N1o,Lp,Yle,q1o,j1o,RN,D1o,G1o,O1o,xp,Kle,V1o,X1o,PN,z1o,W1o,Q1o,$p,Zle,H1o,U1o,BN,J1o,Y1o,K1o,kp,eie,Z1o,ebo,IN,obo,rbo,tbo,Sp,oie,abo,nbo,NN,sbo,lbo,ibo,Rp,rie,dbo,cbo,qN,fbo,mbo,gbo,Pp,tie,hbo,pbo,jN,ubo,_bo,bbo,Bp,aie,vbo,Fbo,DN,Tbo,Mbo,Ebo,Ip,nie,Cbo,wbo,GN,Abo,ybo,Lbo,Np,sie,xbo,$bo,ON,kbo,Sbo,Rbo,qp,lie,Pbo,Bbo,VN,Ibo,Nbo,qbo,jp,iie,jbo,Dbo,XN,Gbo,Obo,Vbo,Dp,die,Xbo,zbo,zN,Wbo,Qbo,Hbo,Gp,cie,Ubo,Jbo,WN,Ybo,Kbo,Zbo,Op,fie,e2o,o2o,QN,r2o,t2o,a2o,Vp,mie,n2o,s2o,HN,l2o,i2o,d2o,Xp,gie,c2o,f2o,UN,m2o,g2o,h2o,zp,hie,p2o,u2o,JN,_2o,b2o,v2o,Wp,pie,F2o,T2o,YN,M2o,E2o,C2o,Qp,uie,w2o,A2o,KN,y2o,L2o,x2o,Hp,_ie,$2o,k2o,ZN,S2o,R2o,P2o,Up,bie,B2o,I2o,eq,N2o,q2o,j2o,Jp,vie,D2o,G2o,oq,O2o,V2o,X2o,Yp,Fie,z2o,W2o,rq,Q2o,H2o,U2o,Kp,Tie,J2o,Y2o,tq,K2o,Z2o,evo,Zp,Mie,ovo,rvo,aq,tvo,avo,nvo,eu,Eie,svo,lvo,nq,ivo,dvo,cvo,ou,Cie,fvo,mvo,sq,gvo,hvo,pvo,ru,wie,uvo,_vo,lq,bvo,vvo,Fvo,tu,Aie,Tvo,Mvo,iq,Evo,Cvo,wvo,au,yie,Avo,yvo,dq,Lvo,xvo,$vo,Ds,Lie,kvo,Svo,cq,Rvo,Pvo,fq,Bvo,Ivo,Nvo,nu,xie,qvo,jvo,mq,Dvo,Gvo,Ovo,su,$ie,Vvo,Xvo,gq,zvo,Wvo,Qvo,lu,kie,Hvo,Uvo,hq,Jvo,Yvo,Kvo,iu,Sie,Zvo,eFo,pq,oFo,rFo,tFo,du,Rie,aFo,nFo,uq,sFo,lFo,iFo,cu,Pie,dFo,cFo,_q,fFo,mFo,gFo,fu,Bie,hFo,pFo,bq,uFo,_Fo,bFo,mu,Iie,vFo,FFo,vq,TFo,MFo,EFo,gu,Nie,CFo,wFo,Fq,AFo,yFo,LFo,hu,qie,xFo,$Fo,Tq,kFo,SFo,RFo,pu,jie,PFo,BFo,Mq,IFo,NFo,qFo,uu,Die,jFo,DFo,Eq,GFo,OFo,VFo,_u,Gie,XFo,zFo,Cq,WFo,QFo,HFo,bu,Oie,UFo,JFo,wq,YFo,KFo,ZFo,vu,Vie,e6o,o6o,Aq,r6o,t6o,a6o,Fu,Xie,n6o,s6o,yq,l6o,i6o,d6o,Tu,zie,c6o,f6o,Lq,m6o,g6o,h6o,Mu,Wie,p6o,u6o,xq,_6o,b6o,v6o,Eu,Qie,F6o,T6o,$q,M6o,E6o,C6o,Cu,Hie,w6o,A6o,kq,y6o,L6o,x6o,wu,Uie,$6o,k6o,Sq,S6o,R6o,P6o,Au,Jie,B6o,I6o,Rq,N6o,q6o,j6o,yu,Yie,D6o,G6o,Pq,O6o,V6o,X6o,Lu,Kie,z6o,W6o,Bq,Q6o,H6o,U6o,xu,Zie,J6o,Y6o,Iq,K6o,Z6o,eTo,$u,ede,oTo,rTo,Nq,tTo,aTo,nTo,ku,ode,sTo,lTo,qq,iTo,dTo,cTo,Su,rde,fTo,mTo,jq,gTo,hTo,pTo,Ru,tde,uTo,_To,Dq,bTo,vTo,FTo,Pu,ade,TTo,MTo,Gq,ETo,CTo,wTo,Bu,nde,ATo,yTo,Oq,LTo,xTo,$To,Iu,sde,kTo,STo,Vq,RTo,PTo,BTo,Nu,lde,ITo,NTo,Xq,qTo,jTo,DTo,qu,ide,GTo,OTo,zq,VTo,XTo,zTo,ju,dde,WTo,QTo,Wq,HTo,UTo,JTo,Du,cde,YTo,KTo,Qq,ZTo,e7o,o7o,Gu,fde,r7o,t7o,Hq,a7o,n7o,s7o,Ou,mde,l7o,i7o,Uq,d7o,c7o,f7o,Vu,gde,m7o,g7o,Jq,h7o,p7o,u7o,Xu,hde,_7o,b7o,Yq,v7o,F7o,T7o,zu,pde,M7o,E7o,Kq,C7o,w7o,A7o,Wu,ude,y7o,L7o,Zq,x7o,$7o,k7o,Qu,_de,S7o,R7o,ej,P7o,B7o,I7o,Hu,bde,N7o,q7o,oj,j7o,D7o,G7o,Uu,vde,O7o,V7o,rj,X7o,z7o,W7o,Ju,Fde,Q7o,H7o,tj,U7o,J7o,Y7o,Yu,Tde,K7o,Z7o,aj,e8o,o8o,r8o,Ku,Mde,t8o,a8o,nj,n8o,s8o,l8o,Zu,Ede,i8o,d8o,sj,c8o,f8o,m8o,e_,Cde,g8o,h8o,lj,p8o,u8o,_8o,o_,wde,b8o,v8o,ij,F8o,T8o,M8o,r_,Ade,E8o,C8o,dj,w8o,A8o,y8o,t_,yde,L8o,x8o,cj,$8o,k8o,S8o,a_,Lde,R8o,P8o,fj,B8o,I8o,N8o,n_,xde,q8o,j8o,mj,D8o,G8o,O8o,s_,$de,V8o,X8o,gj,z8o,W8o,Q8o,l_,kde,H8o,U8o,hj,J8o,Y8o,K8o,i_,Sde,Z8o,e9o,pj,o9o,r9o,t9o,d_,Rde,a9o,n9o,uj,s9o,l9o,i9o,c_,Pde,d9o,c9o,_j,f9o,m9o,g9o,f_,Bde,h9o,p9o,bj,u9o,_9o,b9o,m_,Ide,v9o,F9o,vj,T9o,M9o,E9o,g_,Nde,C9o,w9o,Fj,A9o,y9o,L9o,h_,qde,x9o,$9o,Tj,k9o,S9o,R9o,p_,jde,P9o,B9o,Mj,I9o,N9o,q9o,u_,Dde,j9o,D9o,Ej,G9o,O9o,V9o,__,Gde,X9o,z9o,Cj,W9o,Q9o,H9o,b_,Ode,U9o,J9o,wj,Y9o,K9o,Z9o,v_,Vde,eMo,oMo,Aj,rMo,tMo,aMo,F_,Xde,nMo,sMo,yj,lMo,iMo,dMo,T_,zde,cMo,fMo,Lj,mMo,gMo,hMo,M_,pMo,Wde,uMo,_Mo,Qde,bMo,vMo,E_,$De,Ii,C_,Hde,G0,FMo,Ude,TMo,kDe,$o,O0,MMo,Ni,EMo,xj,CMo,wMo,$j,AMo,yMo,LMo,V0,xMo,Jde,$Mo,kMo,SMo,st,X0,RMo,Yde,PMo,BMo,qi,IMo,Kde,NMo,qMo,kj,jMo,DMo,GMo,w_,OMo,Ye,z0,VMo,Zde,XMo,zMo,Ra,WMo,ece,QMo,HMo,oce,UMo,JMo,rce,YMo,KMo,ZMo,G,A_,tce,e4o,o4o,Sj,r4o,t4o,a4o,y_,ace,n4o,s4o,Rj,l4o,i4o,d4o,L_,nce,c4o,f4o,Pj,m4o,g4o,h4o,x_,sce,p4o,u4o,Bj,_4o,b4o,v4o,$_,lce,F4o,T4o,Ij,M4o,E4o,C4o,k_,ice,w4o,A4o,Nj,y4o,L4o,x4o,S_,dce,$4o,k4o,qj,S4o,R4o,P4o,R_,cce,B4o,I4o,jj,N4o,q4o,j4o,P_,fce,D4o,G4o,Dj,O4o,V4o,X4o,B_,mce,z4o,W4o,Gj,Q4o,H4o,U4o,I_,gce,J4o,Y4o,Oj,K4o,Z4o,eEo,N_,hce,oEo,rEo,Vj,tEo,aEo,nEo,q_,pce,sEo,lEo,Xj,iEo,dEo,cEo,j_,uce,fEo,mEo,zj,gEo,hEo,pEo,D_,_ce,uEo,_Eo,Wj,bEo,vEo,FEo,G_,bce,TEo,MEo,Qj,EEo,CEo,wEo,O_,vce,AEo,yEo,Hj,LEo,xEo,$Eo,V_,Fce,kEo,SEo,Uj,REo,PEo,BEo,X_,Tce,IEo,NEo,Jj,qEo,jEo,DEo,z_,Mce,GEo,OEo,Yj,VEo,XEo,zEo,W_,Ece,WEo,QEo,Kj,HEo,UEo,JEo,Q_,Cce,YEo,KEo,Zj,ZEo,eCo,oCo,H_,wce,rCo,tCo,eD,aCo,nCo,sCo,U_,Ace,lCo,iCo,oD,dCo,cCo,fCo,J_,yce,mCo,gCo,rD,hCo,pCo,uCo,Y_,Lce,_Co,bCo,tD,vCo,FCo,TCo,K_,xce,MCo,ECo,aD,CCo,wCo,ACo,Z_,$ce,yCo,LCo,nD,xCo,$Co,kCo,e1,kce,SCo,RCo,sD,PCo,BCo,ICo,o1,Sce,NCo,qCo,lD,jCo,DCo,GCo,r1,Rce,OCo,VCo,iD,XCo,zCo,WCo,t1,Pce,QCo,HCo,dD,UCo,JCo,YCo,a1,Bce,KCo,ZCo,cD,e5o,o5o,r5o,n1,Ice,t5o,a5o,fD,n5o,s5o,l5o,s1,Nce,i5o,d5o,mD,c5o,f5o,m5o,l1,qce,g5o,h5o,gD,p5o,u5o,_5o,i1,jce,b5o,v5o,hD,F5o,T5o,M5o,d1,Dce,E5o,C5o,pD,w5o,A5o,y5o,c1,Gce,L5o,x5o,uD,$5o,k5o,S5o,f1,Oce,R5o,P5o,_D,B5o,I5o,N5o,m1,Vce,q5o,j5o,bD,D5o,G5o,O5o,g1,Xce,V5o,X5o,vD,z5o,W5o,Q5o,h1,zce,H5o,U5o,FD,J5o,Y5o,K5o,p1,Z5o,Wce,e3o,o3o,Qce,r3o,t3o,u1,SDe,ji,_1,Hce,W0,a3o,Uce,n3o,RDe,ko,Q0,s3o,Di,l3o,TD,i3o,d3o,MD,c3o,f3o,m3o,H0,g3o,Jce,h3o,p3o,u3o,lt,U0,_3o,Yce,b3o,v3o,Gi,F3o,Kce,T3o,M3o,ED,E3o,C3o,w3o,b1,A3o,Ke,J0,y3o,Zce,L3o,x3o,Pa,$3o,efe,k3o,S3o,ofe,R3o,P3o,rfe,B3o,I3o,N3o,z,v1,tfe,q3o,j3o,CD,D3o,G3o,O3o,F1,afe,V3o,X3o,wD,z3o,W3o,Q3o,T1,nfe,H3o,U3o,AD,J3o,Y3o,K3o,M1,sfe,Z3o,ewo,yD,owo,rwo,two,E1,lfe,awo,nwo,LD,swo,lwo,iwo,C1,ife,dwo,cwo,xD,fwo,mwo,gwo,w1,dfe,hwo,pwo,$D,uwo,_wo,bwo,A1,cfe,vwo,Fwo,kD,Two,Mwo,Ewo,y1,ffe,Cwo,wwo,SD,Awo,ywo,Lwo,L1,mfe,xwo,$wo,RD,kwo,Swo,Rwo,x1,gfe,Pwo,Bwo,PD,Iwo,Nwo,qwo,$1,hfe,jwo,Dwo,BD,Gwo,Owo,Vwo,k1,pfe,Xwo,zwo,ID,Wwo,Qwo,Hwo,S1,ufe,Uwo,Jwo,ND,Ywo,Kwo,Zwo,R1,_fe,e0o,o0o,qD,r0o,t0o,a0o,P1,bfe,n0o,s0o,jD,l0o,i0o,d0o,B1,vfe,c0o,f0o,DD,m0o,g0o,h0o,I1,Ffe,p0o,u0o,GD,_0o,b0o,v0o,N1,Tfe,F0o,T0o,OD,M0o,E0o,C0o,q1,Mfe,w0o,A0o,VD,y0o,L0o,x0o,j1,Efe,$0o,k0o,XD,S0o,R0o,P0o,D1,Cfe,B0o,I0o,zD,N0o,q0o,j0o,G1,wfe,D0o,G0o,WD,O0o,V0o,X0o,O1,Afe,z0o,W0o,QD,Q0o,H0o,U0o,V1,yfe,J0o,Y0o,HD,K0o,Z0o,eAo,X1,Lfe,oAo,rAo,UD,tAo,aAo,nAo,z1,xfe,sAo,lAo,JD,iAo,dAo,cAo,W1,$fe,fAo,mAo,YD,gAo,hAo,pAo,Q1,kfe,uAo,_Ao,KD,bAo,vAo,FAo,H1,Sfe,TAo,MAo,ZD,EAo,CAo,wAo,U1,Rfe,AAo,yAo,eG,LAo,xAo,$Ao,J1,Pfe,kAo,SAo,oG,RAo,PAo,BAo,Y1,Bfe,IAo,NAo,rG,qAo,jAo,DAo,K1,Ife,GAo,OAo,tG,VAo,XAo,zAo,Z1,Nfe,WAo,QAo,aG,HAo,UAo,JAo,eb,qfe,YAo,KAo,nG,ZAo,eyo,oyo,ob,jfe,ryo,tyo,sG,ayo,nyo,syo,rb,Dfe,lyo,iyo,lG,dyo,cyo,fyo,tb,myo,Gfe,gyo,hyo,Ofe,pyo,uyo,ab,PDe,Oi,nb,Vfe,Y0,_yo,Xfe,byo,BDe,So,K0,vyo,Vi,Fyo,iG,Tyo,Myo,dG,Eyo,Cyo,wyo,Z0,Ayo,zfe,yyo,Lyo,xyo,it,eA,$yo,Wfe,kyo,Syo,Xi,Ryo,Qfe,Pyo,Byo,cG,Iyo,Nyo,qyo,sb,jyo,Ze,oA,Dyo,Hfe,Gyo,Oyo,Ba,Vyo,Ufe,Xyo,zyo,Jfe,Wyo,Qyo,Yfe,Hyo,Uyo,Jyo,Q,lb,Kfe,Yyo,Kyo,fG,Zyo,eLo,oLo,ib,Zfe,rLo,tLo,mG,aLo,nLo,sLo,db,eme,lLo,iLo,gG,dLo,cLo,fLo,cb,ome,mLo,gLo,hG,hLo,pLo,uLo,fb,rme,_Lo,bLo,pG,vLo,FLo,TLo,mb,tme,MLo,ELo,uG,CLo,wLo,ALo,gb,ame,yLo,LLo,_G,xLo,$Lo,kLo,hb,nme,SLo,RLo,bG,PLo,BLo,ILo,pb,sme,NLo,qLo,vG,jLo,DLo,GLo,ub,lme,OLo,VLo,FG,XLo,zLo,WLo,_b,ime,QLo,HLo,TG,ULo,JLo,YLo,bb,dme,KLo,ZLo,MG,exo,oxo,rxo,vb,cme,txo,axo,EG,nxo,sxo,lxo,Fb,fme,ixo,dxo,CG,cxo,fxo,mxo,Tb,mme,gxo,hxo,wG,pxo,uxo,_xo,Mb,gme,bxo,vxo,AG,Fxo,Txo,Mxo,Eb,hme,Exo,Cxo,yG,wxo,Axo,yxo,Cb,pme,Lxo,xxo,LG,$xo,kxo,Sxo,wb,ume,Rxo,Pxo,xG,Bxo,Ixo,Nxo,Ab,_me,qxo,jxo,$G,Dxo,Gxo,Oxo,yb,bme,Vxo,Xxo,kG,zxo,Wxo,Qxo,Lb,vme,Hxo,Uxo,SG,Jxo,Yxo,Kxo,xb,Fme,Zxo,e$o,RG,o$o,r$o,t$o,$b,Tme,a$o,n$o,PG,s$o,l$o,i$o,kb,Mme,d$o,c$o,BG,f$o,m$o,g$o,Sb,Eme,h$o,p$o,IG,u$o,_$o,b$o,Rb,Cme,v$o,F$o,NG,T$o,M$o,E$o,Pb,wme,C$o,w$o,qG,A$o,y$o,L$o,Bb,Ame,x$o,$$o,jG,k$o,S$o,R$o,Ib,yme,P$o,B$o,DG,I$o,N$o,q$o,Nb,Lme,j$o,D$o,GG,G$o,O$o,V$o,qb,xme,X$o,z$o,$me,W$o,Q$o,H$o,jb,kme,U$o,J$o,OG,Y$o,K$o,Z$o,Db,Sme,eko,oko,VG,rko,tko,ako,Gb,Rme,nko,sko,XG,lko,iko,dko,Ob,Pme,cko,fko,zG,mko,gko,hko,Vb,pko,Bme,uko,_ko,Ime,bko,vko,Xb,IDe,zi,zb,Nme,rA,Fko,qme,Tko,NDe,Ro,tA,Mko,Wi,Eko,WG,Cko,wko,QG,Ako,yko,Lko,aA,xko,jme,$ko,kko,Sko,dt,nA,Rko,Dme,Pko,Bko,Qi,Iko,Gme,Nko,qko,HG,jko,Dko,Gko,Wb,Oko,eo,sA,Vko,Ome,Xko,zko,Ia,Wko,Vme,Qko,Hko,Xme,Uko,Jko,zme,Yko,Kko,Zko,ue,Qb,Wme,eSo,oSo,UG,rSo,tSo,aSo,Hb,Qme,nSo,sSo,JG,lSo,iSo,dSo,Ub,Hme,cSo,fSo,YG,mSo,gSo,hSo,Jb,Ume,pSo,uSo,KG,_So,bSo,vSo,Yb,Jme,FSo,TSo,ZG,MSo,ESo,CSo,Kb,Yme,wSo,ASo,eO,ySo,LSo,xSo,Zb,Kme,$So,kSo,oO,SSo,RSo,PSo,e2,Zme,BSo,ISo,rO,NSo,qSo,jSo,o2,ege,DSo,GSo,tO,OSo,VSo,XSo,r2,oge,zSo,WSo,aO,QSo,HSo,USo,t2,rge,JSo,YSo,nO,KSo,ZSo,eRo,a2,tge,oRo,rRo,sO,tRo,aRo,nRo,n2,age,sRo,lRo,lO,iRo,dRo,cRo,s2,nge,fRo,mRo,iO,gRo,hRo,pRo,l2,sge,uRo,_Ro,dO,bRo,vRo,FRo,i2,lge,TRo,MRo,cO,ERo,CRo,wRo,d2,ARo,ige,yRo,LRo,dge,xRo,$Ro,c2,qDe,Hi,f2,cge,lA,kRo,fge,SRo,jDe,Po,iA,RRo,Ui,PRo,fO,BRo,IRo,mO,NRo,qRo,jRo,dA,DRo,mge,GRo,ORo,VRo,ct,cA,XRo,gge,zRo,WRo,Ji,QRo,hge,HRo,URo,gO,JRo,YRo,KRo,m2,ZRo,oo,fA,ePo,pge,oPo,rPo,Na,tPo,uge,aPo,nPo,_ge,sPo,lPo,bge,iPo,dPo,cPo,N,g2,vge,fPo,mPo,hO,gPo,hPo,pPo,h2,Fge,uPo,_Po,pO,bPo,vPo,FPo,p2,Tge,TPo,MPo,uO,EPo,CPo,wPo,u2,Mge,APo,yPo,_O,LPo,xPo,$Po,_2,Ege,kPo,SPo,bO,RPo,PPo,BPo,b2,Cge,IPo,NPo,vO,qPo,jPo,DPo,v2,wge,GPo,OPo,FO,VPo,XPo,zPo,F2,Age,WPo,QPo,TO,HPo,UPo,JPo,T2,yge,YPo,KPo,MO,ZPo,eBo,oBo,M2,Lge,rBo,tBo,EO,aBo,nBo,sBo,E2,xge,lBo,iBo,CO,dBo,cBo,fBo,C2,$ge,mBo,gBo,wO,hBo,pBo,uBo,w2,kge,_Bo,bBo,AO,vBo,FBo,TBo,A2,Sge,MBo,EBo,yO,CBo,wBo,ABo,y2,Rge,yBo,LBo,LO,xBo,$Bo,kBo,L2,Pge,SBo,RBo,xO,PBo,BBo,IBo,x2,Bge,NBo,qBo,$O,jBo,DBo,GBo,$2,Ige,OBo,VBo,kO,XBo,zBo,WBo,k2,Nge,QBo,HBo,SO,UBo,JBo,YBo,S2,qge,KBo,ZBo,RO,eIo,oIo,rIo,R2,jge,tIo,aIo,PO,nIo,sIo,lIo,P2,Dge,iIo,dIo,BO,cIo,fIo,mIo,B2,Gge,gIo,hIo,IO,pIo,uIo,_Io,I2,Oge,bIo,vIo,NO,FIo,TIo,MIo,N2,Vge,EIo,CIo,qO,wIo,AIo,yIo,q2,Xge,LIo,xIo,jO,$Io,kIo,SIo,j2,zge,RIo,PIo,DO,BIo,IIo,NIo,D2,Wge,qIo,jIo,GO,DIo,GIo,OIo,G2,Qge,VIo,XIo,OO,zIo,WIo,QIo,O2,Hge,HIo,UIo,VO,JIo,YIo,KIo,V2,Uge,ZIo,eNo,XO,oNo,rNo,tNo,X2,Jge,aNo,nNo,zO,sNo,lNo,iNo,z2,Yge,dNo,cNo,WO,fNo,mNo,gNo,W2,Kge,hNo,pNo,QO,uNo,_No,bNo,Q2,Zge,vNo,FNo,HO,TNo,MNo,ENo,H2,ehe,CNo,wNo,UO,ANo,yNo,LNo,U2,ohe,xNo,$No,JO,kNo,SNo,RNo,J2,rhe,PNo,BNo,YO,INo,NNo,qNo,Y2,the,jNo,DNo,KO,GNo,ONo,VNo,K2,ahe,XNo,zNo,ZO,WNo,QNo,HNo,Z2,nhe,UNo,JNo,eV,YNo,KNo,ZNo,ev,she,eqo,oqo,oV,rqo,tqo,aqo,ov,lhe,nqo,sqo,rV,lqo,iqo,dqo,rv,ihe,cqo,fqo,tV,mqo,gqo,hqo,tv,dhe,pqo,uqo,aV,_qo,bqo,vqo,av,che,Fqo,Tqo,nV,Mqo,Eqo,Cqo,nv,fhe,wqo,Aqo,sV,yqo,Lqo,xqo,sv,$qo,mhe,kqo,Sqo,ghe,Rqo,Pqo,lv,DDe,Yi,iv,hhe,mA,Bqo,phe,Iqo,GDe,Bo,gA,Nqo,Ki,qqo,lV,jqo,Dqo,iV,Gqo,Oqo,Vqo,hA,Xqo,uhe,zqo,Wqo,Qqo,ft,pA,Hqo,_he,Uqo,Jqo,Zi,Yqo,bhe,Kqo,Zqo,dV,ejo,ojo,rjo,dv,tjo,ro,uA,ajo,vhe,njo,sjo,qa,ljo,Fhe,ijo,djo,The,cjo,fjo,Mhe,mjo,gjo,hjo,Z,cv,Ehe,pjo,ujo,cV,_jo,bjo,vjo,fv,Che,Fjo,Tjo,fV,Mjo,Ejo,Cjo,mv,whe,wjo,Ajo,mV,yjo,Ljo,xjo,gv,Ahe,$jo,kjo,gV,Sjo,Rjo,Pjo,hv,yhe,Bjo,Ijo,hV,Njo,qjo,jjo,pv,Lhe,Djo,Gjo,pV,Ojo,Vjo,Xjo,uv,xhe,zjo,Wjo,uV,Qjo,Hjo,Ujo,_v,$he,Jjo,Yjo,_V,Kjo,Zjo,eDo,bv,khe,oDo,rDo,bV,tDo,aDo,nDo,vv,She,sDo,lDo,vV,iDo,dDo,cDo,Fv,Rhe,fDo,mDo,FV,gDo,hDo,pDo,Tv,Phe,uDo,_Do,TV,bDo,vDo,FDo,Mv,Bhe,TDo,MDo,MV,EDo,CDo,wDo,Ev,Ihe,ADo,yDo,EV,LDo,xDo,$Do,Cv,Nhe,kDo,SDo,CV,RDo,PDo,BDo,wv,qhe,IDo,NDo,wV,qDo,jDo,DDo,Av,jhe,GDo,ODo,AV,VDo,XDo,zDo,yv,Dhe,WDo,QDo,yV,HDo,UDo,JDo,Lv,Ghe,YDo,KDo,LV,ZDo,eGo,oGo,xv,Ohe,rGo,tGo,xV,aGo,nGo,sGo,$v,Vhe,lGo,iGo,$V,dGo,cGo,fGo,kv,Xhe,mGo,gGo,kV,hGo,pGo,uGo,Sv,zhe,_Go,bGo,SV,vGo,FGo,TGo,Rv,Whe,MGo,EGo,RV,CGo,wGo,AGo,Pv,Qhe,yGo,LGo,PV,xGo,$Go,kGo,Bv,Hhe,SGo,RGo,BV,PGo,BGo,IGo,Iv,Uhe,NGo,qGo,IV,jGo,DGo,GGo,Nv,Jhe,OGo,VGo,NV,XGo,zGo,WGo,qv,Yhe,QGo,HGo,qV,UGo,JGo,YGo,jv,KGo,Khe,ZGo,eOo,Zhe,oOo,rOo,Dv,ODe,ed,Gv,epe,_A,tOo,ope,aOo,VDe,Io,bA,nOo,od,sOo,jV,lOo,iOo,DV,dOo,cOo,fOo,vA,mOo,rpe,gOo,hOo,pOo,mt,FA,uOo,tpe,_Oo,bOo,rd,vOo,ape,FOo,TOo,GV,MOo,EOo,COo,Ov,wOo,to,TA,AOo,npe,yOo,LOo,ja,xOo,spe,$Oo,kOo,lpe,SOo,ROo,ipe,POo,BOo,IOo,Zr,Vv,dpe,NOo,qOo,OV,jOo,DOo,GOo,Xv,cpe,OOo,VOo,VV,XOo,zOo,WOo,zv,fpe,QOo,HOo,XV,UOo,JOo,YOo,Wv,mpe,KOo,ZOo,zV,eVo,oVo,rVo,Qv,gpe,tVo,aVo,WV,nVo,sVo,lVo,Hv,iVo,hpe,dVo,cVo,ppe,fVo,mVo,Uv,XDe,td,Jv,upe,MA,gVo,_pe,hVo,zDe,No,EA,pVo,ad,uVo,QV,_Vo,bVo,HV,vVo,FVo,TVo,CA,MVo,bpe,EVo,CVo,wVo,gt,wA,AVo,vpe,yVo,LVo,nd,xVo,Fpe,$Vo,kVo,UV,SVo,RVo,PVo,Yv,BVo,ao,AA,IVo,Tpe,NVo,qVo,Da,jVo,Mpe,DVo,GVo,Epe,OVo,VVo,Cpe,XVo,zVo,WVo,U,Kv,wpe,QVo,HVo,JV,UVo,JVo,YVo,Zv,Ape,KVo,ZVo,YV,eXo,oXo,rXo,eF,ype,tXo,aXo,KV,nXo,sXo,lXo,oF,Lpe,iXo,dXo,ZV,cXo,fXo,mXo,rF,xpe,gXo,hXo,eX,pXo,uXo,_Xo,tF,$pe,bXo,vXo,oX,FXo,TXo,MXo,aF,kpe,EXo,CXo,rX,wXo,AXo,yXo,nF,Spe,LXo,xXo,tX,$Xo,kXo,SXo,sF,Rpe,RXo,PXo,aX,BXo,IXo,NXo,lF,Ppe,qXo,jXo,nX,DXo,GXo,OXo,iF,Bpe,VXo,XXo,sX,zXo,WXo,QXo,dF,Ipe,HXo,UXo,lX,JXo,YXo,KXo,cF,Npe,ZXo,ezo,iX,ozo,rzo,tzo,fF,qpe,azo,nzo,dX,szo,lzo,izo,mF,jpe,dzo,czo,cX,fzo,mzo,gzo,gF,Dpe,hzo,pzo,fX,uzo,_zo,bzo,hF,Gpe,vzo,Fzo,mX,Tzo,Mzo,Ezo,pF,Ope,Czo,wzo,gX,Azo,yzo,Lzo,uF,Vpe,xzo,$zo,hX,kzo,Szo,Rzo,_F,Xpe,Pzo,Bzo,pX,Izo,Nzo,qzo,bF,zpe,jzo,Dzo,uX,Gzo,Ozo,Vzo,vF,Wpe,Xzo,zzo,_X,Wzo,Qzo,Hzo,FF,Qpe,Uzo,Jzo,bX,Yzo,Kzo,Zzo,TF,Hpe,eWo,oWo,vX,rWo,tWo,aWo,MF,Upe,nWo,sWo,FX,lWo,iWo,dWo,EF,Jpe,cWo,fWo,TX,mWo,gWo,hWo,CF,Ype,pWo,uWo,MX,_Wo,bWo,vWo,wF,Kpe,FWo,TWo,EX,MWo,EWo,CWo,AF,Zpe,wWo,AWo,CX,yWo,LWo,xWo,yF,eue,$Wo,kWo,wX,SWo,RWo,PWo,LF,oue,BWo,IWo,AX,NWo,qWo,jWo,xF,rue,DWo,GWo,yX,OWo,VWo,XWo,$F,tue,zWo,WWo,LX,QWo,HWo,UWo,kF,aue,JWo,YWo,xX,KWo,ZWo,eQo,SF,oQo,nue,rQo,tQo,sue,aQo,nQo,RF,WDe,sd,PF,lue,yA,sQo,iue,lQo,QDe,qo,LA,iQo,ld,dQo,$X,cQo,fQo,kX,mQo,gQo,hQo,xA,pQo,due,uQo,_Qo,bQo,ht,$A,vQo,cue,FQo,TQo,id,MQo,fue,EQo,CQo,SX,wQo,AQo,yQo,BF,LQo,no,kA,xQo,mue,$Qo,kQo,Ga,SQo,gue,RQo,PQo,hue,BQo,IQo,pue,NQo,qQo,jQo,V,IF,uue,DQo,GQo,RX,OQo,VQo,XQo,NF,_ue,zQo,WQo,PX,QQo,HQo,UQo,qF,bue,JQo,YQo,BX,KQo,ZQo,eHo,jF,vue,oHo,rHo,IX,tHo,aHo,nHo,DF,Fue,sHo,lHo,NX,iHo,dHo,cHo,GF,Tue,fHo,mHo,qX,gHo,hHo,pHo,OF,Mue,uHo,_Ho,jX,bHo,vHo,FHo,VF,Eue,THo,MHo,DX,EHo,CHo,wHo,XF,Cue,AHo,yHo,GX,LHo,xHo,$Ho,zF,wue,kHo,SHo,OX,RHo,PHo,BHo,WF,Aue,IHo,NHo,VX,qHo,jHo,DHo,QF,yue,GHo,OHo,XX,VHo,XHo,zHo,HF,Lue,WHo,QHo,zX,HHo,UHo,JHo,UF,xue,YHo,KHo,WX,ZHo,eUo,oUo,JF,$ue,rUo,tUo,QX,aUo,nUo,sUo,YF,kue,lUo,iUo,HX,dUo,cUo,fUo,KF,Sue,mUo,gUo,UX,hUo,pUo,uUo,ZF,Rue,_Uo,bUo,JX,vUo,FUo,TUo,e6,Pue,MUo,EUo,YX,CUo,wUo,AUo,o6,Bue,yUo,LUo,KX,xUo,$Uo,kUo,r6,Iue,SUo,RUo,ZX,PUo,BUo,IUo,t6,Nue,NUo,qUo,ez,jUo,DUo,GUo,a6,que,OUo,VUo,oz,XUo,zUo,WUo,n6,jue,QUo,HUo,rz,UUo,JUo,YUo,s6,Due,KUo,ZUo,tz,eJo,oJo,rJo,l6,Gue,tJo,aJo,az,nJo,sJo,lJo,i6,Oue,iJo,dJo,nz,cJo,fJo,mJo,d6,Vue,gJo,hJo,sz,pJo,uJo,_Jo,c6,Xue,bJo,vJo,lz,FJo,TJo,MJo,f6,zue,EJo,CJo,iz,wJo,AJo,yJo,m6,Wue,LJo,xJo,dz,$Jo,kJo,SJo,g6,Que,RJo,PJo,cz,BJo,IJo,NJo,h6,Hue,qJo,jJo,fz,DJo,GJo,OJo,p6,Uue,VJo,XJo,mz,zJo,WJo,QJo,u6,Jue,HJo,UJo,gz,JJo,YJo,KJo,_6,Yue,ZJo,eYo,hz,oYo,rYo,tYo,b6,Kue,aYo,nYo,pz,sYo,lYo,iYo,v6,Zue,dYo,cYo,uz,fYo,mYo,gYo,F6,e_e,hYo,pYo,_z,uYo,_Yo,bYo,T6,o_e,vYo,FYo,bz,TYo,MYo,EYo,M6,CYo,r_e,wYo,AYo,t_e,yYo,LYo,E6,HDe,dd,C6,a_e,SA,xYo,n_e,$Yo,UDe,jo,RA,kYo,cd,SYo,vz,RYo,PYo,Fz,BYo,IYo,NYo,PA,qYo,s_e,jYo,DYo,GYo,pt,BA,OYo,l_e,VYo,XYo,fd,zYo,i_e,WYo,QYo,Tz,HYo,UYo,JYo,w6,YYo,so,IA,KYo,d_e,ZYo,eKo,Oa,oKo,c_e,rKo,tKo,f_e,aKo,nKo,m_e,sKo,lKo,iKo,g_e,A6,h_e,dKo,cKo,Mz,fKo,mKo,gKo,y6,hKo,p_e,pKo,uKo,u_e,_Ko,bKo,L6,JDe,md,x6,__e,NA,vKo,b_e,FKo,YDe,Do,qA,TKo,gd,MKo,Ez,EKo,CKo,Cz,wKo,AKo,yKo,jA,LKo,v_e,xKo,$Ko,kKo,ut,DA,SKo,F_e,RKo,PKo,hd,BKo,T_e,IKo,NKo,wz,qKo,jKo,DKo,$6,GKo,lo,GA,OKo,M_e,VKo,XKo,Va,zKo,E_e,WKo,QKo,C_e,HKo,UKo,w_e,JKo,YKo,KKo,ve,k6,A_e,ZKo,eZo,Az,oZo,rZo,tZo,S6,y_e,aZo,nZo,yz,sZo,lZo,iZo,R6,L_e,dZo,cZo,Lz,fZo,mZo,gZo,P6,x_e,hZo,pZo,xz,uZo,_Zo,bZo,Gs,$_e,vZo,FZo,$z,TZo,MZo,kz,EZo,CZo,wZo,B6,k_e,AZo,yZo,Sz,LZo,xZo,$Zo,Os,S_e,kZo,SZo,Rz,RZo,PZo,Pz,BZo,IZo,NZo,_t,R_e,qZo,jZo,Bz,DZo,GZo,Iz,OZo,VZo,Nz,XZo,zZo,WZo,I6,P_e,QZo,HZo,qz,UZo,JZo,YZo,N6,B_e,KZo,ZZo,jz,eer,oer,rer,q6,I_e,ter,aer,Dz,ner,ser,ler,j6,N_e,ier,der,Gz,cer,fer,mer,D6,q_e,ger,her,Oz,per,uer,_er,G6,j_e,ber,ver,Vz,Fer,Ter,Mer,O6,D_e,Eer,Cer,Xz,wer,Aer,yer,V6,Ler,G_e,xer,$er,O_e,ker,Ser,X6,KDe,pd,z6,V_e,OA,Rer,X_e,Per,ZDe,Go,VA,Ber,ud,Ier,zz,Ner,qer,Wz,jer,Der,Ger,XA,Oer,z_e,Ver,Xer,zer,bt,zA,Wer,W_e,Qer,Her,_d,Uer,Q_e,Jer,Yer,Qz,Ker,Zer,eor,W6,oor,io,WA,ror,H_e,tor,aor,Xa,nor,U_e,sor,lor,J_e,ior,dor,Y_e,cor,mor,gor,K_e,Q6,Z_e,hor,por,Hz,uor,_or,bor,H6,vor,e1e,For,Tor,o1e,Mor,Eor,U6,eGe,bd,J6,r1e,QA,Cor,t1e,wor,oGe,Oo,HA,Aor,vd,yor,Uz,Lor,xor,Jz,$or,kor,Sor,UA,Ror,a1e,Por,Bor,Ior,vt,JA,Nor,n1e,qor,jor,Fd,Dor,s1e,Gor,Oor,Yz,Vor,Xor,zor,Y6,Wor,co,YA,Qor,l1e,Hor,Uor,za,Jor,i1e,Yor,Kor,d1e,Zor,err,c1e,orr,rrr,trr,f1e,K6,m1e,arr,nrr,Kz,srr,lrr,irr,Z6,drr,g1e,crr,frr,h1e,mrr,grr,eT,rGe,Td,oT,p1e,KA,hrr,u1e,prr,tGe,Vo,ZA,urr,Md,_rr,Zz,brr,vrr,eW,Frr,Trr,Mrr,ey,Err,_1e,Crr,wrr,Arr,Ft,oy,yrr,b1e,Lrr,xrr,Ed,$rr,v1e,krr,Srr,oW,Rrr,Prr,Brr,rT,Irr,fo,ry,Nrr,F1e,qrr,jrr,Wa,Drr,T1e,Grr,Orr,M1e,Vrr,Xrr,E1e,zrr,Wrr,Qrr,Re,tT,C1e,Hrr,Urr,rW,Jrr,Yrr,Krr,aT,w1e,Zrr,etr,tW,otr,rtr,ttr,nT,A1e,atr,ntr,aW,str,ltr,itr,sT,y1e,dtr,ctr,nW,ftr,mtr,gtr,lT,L1e,htr,ptr,sW,utr,_tr,btr,iT,x1e,vtr,Ftr,lW,Ttr,Mtr,Etr,dT,$1e,Ctr,wtr,iW,Atr,ytr,Ltr,cT,k1e,xtr,$tr,dW,ktr,Str,Rtr,fT,S1e,Ptr,Btr,cW,Itr,Ntr,qtr,mT,jtr,R1e,Dtr,Gtr,P1e,Otr,Vtr,gT,aGe,Cd,hT,B1e,ty,Xtr,I1e,ztr,nGe,Xo,ay,Wtr,wd,Qtr,fW,Htr,Utr,mW,Jtr,Ytr,Ktr,ny,Ztr,N1e,ear,oar,rar,Tt,sy,tar,q1e,aar,nar,Ad,sar,j1e,lar,iar,gW,dar,car,far,pT,mar,mo,ly,gar,D1e,har,par,Qa,uar,G1e,_ar,bar,O1e,Far,Tar,V1e,Mar,Ear,Car,et,uT,X1e,war,Aar,hW,yar,Lar,xar,_T,z1e,$ar,kar,pW,Sar,Rar,Par,bT,W1e,Bar,Iar,uW,Nar,qar,jar,vT,Q1e,Dar,Gar,_W,Oar,Var,Xar,FT,H1e,zar,War,bW,Qar,Har,Uar,TT,Jar,U1e,Yar,Kar,J1e,Zar,enr,MT,sGe,yd,ET,Y1e,iy,onr,K1e,rnr,lGe,zo,dy,tnr,Ld,anr,vW,nnr,snr,FW,lnr,inr,dnr,cy,cnr,Z1e,fnr,mnr,gnr,Mt,fy,hnr,ebe,pnr,unr,xd,_nr,obe,bnr,vnr,TW,Fnr,Tnr,Mnr,CT,Enr,go,my,Cnr,rbe,wnr,Anr,Ha,ynr,tbe,Lnr,xnr,abe,$nr,knr,nbe,Snr,Rnr,Pnr,ye,wT,sbe,Bnr,Inr,MW,Nnr,qnr,jnr,AT,lbe,Dnr,Gnr,EW,Onr,Vnr,Xnr,yT,ibe,znr,Wnr,CW,Qnr,Hnr,Unr,LT,dbe,Jnr,Ynr,wW,Knr,Znr,esr,xT,cbe,osr,rsr,AW,tsr,asr,nsr,$T,fbe,ssr,lsr,yW,isr,dsr,csr,kT,mbe,fsr,msr,LW,gsr,hsr,psr,ST,gbe,usr,_sr,xW,bsr,vsr,Fsr,RT,hbe,Tsr,Msr,$W,Esr,Csr,wsr,PT,pbe,Asr,ysr,kW,Lsr,xsr,$sr,BT,ksr,ube,Ssr,Rsr,_be,Psr,Bsr,IT,iGe,$d,NT,bbe,gy,Isr,vbe,Nsr,dGe,Wo,hy,qsr,kd,jsr,SW,Dsr,Gsr,RW,Osr,Vsr,Xsr,py,zsr,Fbe,Wsr,Qsr,Hsr,Et,uy,Usr,Tbe,Jsr,Ysr,Sd,Ksr,Mbe,Zsr,elr,PW,olr,rlr,tlr,qT,alr,ho,_y,nlr,Ebe,slr,llr,Ua,ilr,Cbe,dlr,clr,wbe,flr,mlr,Abe,glr,hlr,plr,by,jT,ybe,ulr,_lr,BW,blr,vlr,Flr,DT,Lbe,Tlr,Mlr,IW,Elr,Clr,wlr,GT,Alr,xbe,ylr,Llr,$be,xlr,$lr,OT,cGe,Rd,VT,kbe,vy,klr,Sbe,Slr,fGe,Qo,Fy,Rlr,Pd,Plr,NW,Blr,Ilr,qW,Nlr,qlr,jlr,Ty,Dlr,Rbe,Glr,Olr,Vlr,Ct,My,Xlr,Pbe,zlr,Wlr,Bd,Qlr,Bbe,Hlr,Ulr,jW,Jlr,Ylr,Klr,XT,Zlr,po,Ey,eir,Ibe,oir,rir,Ja,tir,Nbe,air,nir,qbe,sir,lir,jbe,iir,dir,cir,ot,zT,Dbe,fir,mir,DW,gir,hir,pir,WT,Gbe,uir,_ir,GW,bir,vir,Fir,QT,Obe,Tir,Mir,OW,Eir,Cir,wir,HT,Vbe,Air,yir,VW,Lir,xir,$ir,UT,Xbe,kir,Sir,XW,Rir,Pir,Bir,JT,Iir,zbe,Nir,qir,Wbe,jir,Dir,YT,mGe,Id,KT,Qbe,Cy,Gir,Hbe,Oir,gGe,Ho,wy,Vir,Nd,Xir,zW,zir,Wir,WW,Qir,Hir,Uir,Ay,Jir,Ube,Yir,Kir,Zir,wt,yy,edr,Jbe,odr,rdr,qd,tdr,Ybe,adr,ndr,QW,sdr,ldr,idr,ZT,ddr,uo,Ly,cdr,Kbe,fdr,mdr,Ya,gdr,Zbe,hdr,pdr,e2e,udr,_dr,o2e,bdr,vdr,Fdr,jd,e7,r2e,Tdr,Mdr,HW,Edr,Cdr,wdr,o7,t2e,Adr,ydr,UW,Ldr,xdr,$dr,r7,a2e,kdr,Sdr,JW,Rdr,Pdr,Bdr,t7,Idr,n2e,Ndr,qdr,s2e,jdr,Ddr,a7,hGe,Dd,n7,l2e,xy,Gdr,i2e,Odr,pGe,Uo,$y,Vdr,Gd,Xdr,YW,zdr,Wdr,KW,Qdr,Hdr,Udr,ky,Jdr,d2e,Ydr,Kdr,Zdr,At,Sy,ecr,c2e,ocr,rcr,Od,tcr,f2e,acr,ncr,ZW,scr,lcr,icr,s7,dcr,_o,Ry,ccr,m2e,fcr,mcr,Ka,gcr,g2e,hcr,pcr,h2e,ucr,_cr,p2e,bcr,vcr,Fcr,Py,l7,u2e,Tcr,Mcr,eQ,Ecr,Ccr,wcr,i7,_2e,Acr,ycr,oQ,Lcr,xcr,$cr,d7,kcr,b2e,Scr,Rcr,v2e,Pcr,Bcr,c7,uGe,Vd,f7,F2e,By,Icr,T2e,Ncr,_Ge,Jo,Iy,qcr,Xd,jcr,rQ,Dcr,Gcr,tQ,Ocr,Vcr,Xcr,Ny,zcr,M2e,Wcr,Qcr,Hcr,yt,qy,Ucr,E2e,Jcr,Ycr,zd,Kcr,C2e,Zcr,efr,aQ,ofr,rfr,tfr,m7,afr,bo,jy,nfr,w2e,sfr,lfr,Za,ifr,A2e,dfr,cfr,y2e,ffr,mfr,L2e,gfr,hfr,pfr,x2e,g7,$2e,ufr,_fr,nQ,bfr,vfr,Ffr,h7,Tfr,k2e,Mfr,Efr,S2e,Cfr,wfr,p7,bGe,Wd,u7,R2e,Dy,Afr,P2e,yfr,vGe,Yo,Gy,Lfr,Qd,xfr,sQ,$fr,kfr,lQ,Sfr,Rfr,Pfr,Oy,Bfr,B2e,Ifr,Nfr,qfr,Lt,Vy,jfr,I2e,Dfr,Gfr,Hd,Ofr,N2e,Vfr,Xfr,iQ,zfr,Wfr,Qfr,_7,Hfr,vo,Xy,Ufr,q2e,Jfr,Yfr,en,Kfr,j2e,Zfr,emr,D2e,omr,rmr,G2e,tmr,amr,nmr,on,b7,O2e,smr,lmr,dQ,imr,dmr,cmr,v7,V2e,fmr,mmr,cQ,gmr,hmr,pmr,F7,X2e,umr,_mr,fQ,bmr,vmr,Fmr,T7,z2e,Tmr,Mmr,mQ,Emr,Cmr,wmr,M7,Amr,W2e,ymr,Lmr,Q2e,xmr,$mr,E7,FGe,Ud,C7,H2e,zy,kmr,U2e,Smr,TGe,Ko,Wy,Rmr,Jd,Pmr,gQ,Bmr,Imr,hQ,Nmr,qmr,jmr,Qy,Dmr,J2e,Gmr,Omr,Vmr,xt,Hy,Xmr,Y2e,zmr,Wmr,Yd,Qmr,K2e,Hmr,Umr,pQ,Jmr,Ymr,Kmr,w7,Zmr,Fo,Uy,egr,Z2e,ogr,rgr,rn,tgr,eve,agr,ngr,ove,sgr,lgr,rve,igr,dgr,cgr,tve,A7,ave,fgr,mgr,uQ,ggr,hgr,pgr,y7,ugr,nve,_gr,bgr,sve,vgr,Fgr,L7,MGe,Kd,x7,lve,Jy,Tgr,ive,Mgr,EGe,Zo,Yy,Egr,Zd,Cgr,_Q,wgr,Agr,bQ,ygr,Lgr,xgr,Ky,$gr,dve,kgr,Sgr,Rgr,$t,Zy,Pgr,cve,Bgr,Igr,ec,Ngr,fve,qgr,jgr,vQ,Dgr,Ggr,Ogr,$7,Vgr,yr,eL,Xgr,mve,zgr,Wgr,tn,Qgr,gve,Hgr,Ugr,hve,Jgr,Ygr,pve,Kgr,Zgr,ehr,q,k7,uve,ohr,rhr,FQ,thr,ahr,nhr,S7,_ve,shr,lhr,TQ,ihr,dhr,chr,R7,bve,fhr,mhr,MQ,ghr,hhr,phr,P7,vve,uhr,_hr,EQ,bhr,vhr,Fhr,B7,Fve,Thr,Mhr,CQ,Ehr,Chr,whr,I7,Tve,Ahr,yhr,wQ,Lhr,xhr,$hr,N7,Mve,khr,Shr,AQ,Rhr,Phr,Bhr,q7,Eve,Ihr,Nhr,yQ,qhr,jhr,Dhr,j7,Cve,Ghr,Ohr,LQ,Vhr,Xhr,zhr,D7,wve,Whr,Qhr,xQ,Hhr,Uhr,Jhr,G7,Ave,Yhr,Khr,$Q,Zhr,epr,opr,O7,yve,rpr,tpr,kQ,apr,npr,spr,V7,Lve,lpr,ipr,SQ,dpr,cpr,fpr,X7,xve,mpr,gpr,RQ,hpr,ppr,upr,z7,$ve,_pr,bpr,PQ,vpr,Fpr,Tpr,W7,kve,Mpr,Epr,BQ,Cpr,wpr,Apr,Q7,Sve,ypr,Lpr,IQ,xpr,$pr,kpr,Vs,Rve,Spr,Rpr,NQ,Ppr,Bpr,qQ,Ipr,Npr,qpr,H7,Pve,jpr,Dpr,jQ,Gpr,Opr,Vpr,U7,Bve,Xpr,zpr,DQ,Wpr,Qpr,Hpr,J7,Ive,Upr,Jpr,GQ,Ypr,Kpr,Zpr,Y7,Nve,eur,our,OQ,rur,tur,aur,K7,qve,nur,sur,VQ,lur,iur,dur,Z7,jve,cur,fur,XQ,mur,gur,hur,e8,Dve,pur,uur,zQ,_ur,bur,vur,o8,Gve,Fur,Tur,WQ,Mur,Eur,Cur,r8,Ove,wur,Aur,QQ,yur,Lur,xur,t8,Vve,$ur,kur,HQ,Sur,Rur,Pur,a8,Xve,Bur,Iur,UQ,Nur,qur,jur,n8,zve,Dur,Gur,JQ,Our,Vur,Xur,s8,Wve,zur,Wur,YQ,Qur,Hur,Uur,l8,Qve,Jur,Yur,KQ,Kur,Zur,e_r,i8,Hve,o_r,r_r,ZQ,t_r,a_r,n_r,d8,Uve,s_r,l_r,eH,i_r,d_r,c_r,c8,Jve,f_r,m_r,oH,g_r,h_r,p_r,f8,Yve,u_r,__r,rH,b_r,v_r,F_r,m8,Kve,T_r,M_r,tH,E_r,C_r,w_r,g8,Zve,A_r,y_r,aH,L_r,x_r,$_r,h8,eFe,k_r,S_r,nH,R_r,P_r,B_r,p8,oFe,I_r,N_r,sH,q_r,j_r,D_r,u8,rFe,G_r,O_r,lH,V_r,X_r,z_r,_8,tFe,W_r,Q_r,iH,H_r,U_r,J_r,b8,aFe,Y_r,K_r,dH,Z_r,e1r,o1r,v8,nFe,r1r,t1r,cH,a1r,n1r,s1r,F8,sFe,l1r,i1r,fH,d1r,c1r,f1r,T8,lFe,m1r,g1r,mH,h1r,p1r,u1r,M8,iFe,_1r,b1r,gH,v1r,F1r,T1r,E8,CGe,oc,C8,dFe,oL,M1r,cFe,E1r,wGe,er,rL,C1r,rc,w1r,hH,A1r,y1r,pH,L1r,x1r,$1r,tL,k1r,fFe,S1r,R1r,P1r,kt,aL,B1r,mFe,I1r,N1r,tc,q1r,gFe,j1r,D1r,uH,G1r,O1r,V1r,w8,X1r,Lr,nL,z1r,hFe,W1r,Q1r,an,H1r,pFe,U1r,J1r,uFe,Y1r,K1r,_Fe,Z1r,ebr,obr,se,A8,bFe,rbr,tbr,_H,abr,nbr,sbr,y8,vFe,lbr,ibr,bH,dbr,cbr,fbr,L8,FFe,mbr,gbr,vH,hbr,pbr,ubr,x8,TFe,_br,bbr,FH,vbr,Fbr,Tbr,$8,MFe,Mbr,Ebr,TH,Cbr,wbr,Abr,k8,EFe,ybr,Lbr,MH,xbr,$br,kbr,S8,CFe,Sbr,Rbr,EH,Pbr,Bbr,Ibr,R8,wFe,Nbr,qbr,CH,jbr,Dbr,Gbr,P8,AFe,Obr,Vbr,wH,Xbr,zbr,Wbr,B8,yFe,Qbr,Hbr,AH,Ubr,Jbr,Ybr,I8,LFe,Kbr,Zbr,yH,e2r,o2r,r2r,N8,xFe,t2r,a2r,LH,n2r,s2r,l2r,q8,$Fe,i2r,d2r,xH,c2r,f2r,m2r,j8,kFe,g2r,h2r,$H,p2r,u2r,_2r,D8,SFe,b2r,v2r,kH,F2r,T2r,M2r,G8,RFe,E2r,C2r,SH,w2r,A2r,y2r,O8,PFe,L2r,x2r,RH,$2r,k2r,S2r,V8,BFe,R2r,P2r,PH,B2r,I2r,N2r,X8,IFe,q2r,j2r,BH,D2r,G2r,O2r,z8,NFe,V2r,X2r,IH,z2r,W2r,Q2r,W8,qFe,H2r,U2r,NH,J2r,Y2r,K2r,Q8,jFe,Z2r,evr,qH,ovr,rvr,tvr,H8,DFe,avr,nvr,jH,svr,lvr,ivr,U8,AGe,ac,J8,GFe,sL,dvr,OFe,cvr,yGe,or,lL,fvr,nc,mvr,DH,gvr,hvr,GH,pvr,uvr,_vr,iL,bvr,VFe,vvr,Fvr,Tvr,St,dL,Mvr,XFe,Evr,Cvr,sc,wvr,zFe,Avr,yvr,OH,Lvr,xvr,$vr,Y8,kvr,xr,cL,Svr,WFe,Rvr,Pvr,nn,Bvr,QFe,Ivr,Nvr,HFe,qvr,jvr,UFe,Dvr,Gvr,Ovr,Me,K8,JFe,Vvr,Xvr,VH,zvr,Wvr,Qvr,Z8,YFe,Hvr,Uvr,XH,Jvr,Yvr,Kvr,e9,KFe,Zvr,eFr,zH,oFr,rFr,tFr,o9,ZFe,aFr,nFr,WH,sFr,lFr,iFr,r9,e6e,dFr,cFr,QH,fFr,mFr,gFr,t9,o6e,hFr,pFr,HH,uFr,_Fr,bFr,a9,r6e,vFr,FFr,UH,TFr,MFr,EFr,n9,t6e,CFr,wFr,JH,AFr,yFr,LFr,s9,a6e,xFr,$Fr,YH,kFr,SFr,RFr,l9,n6e,PFr,BFr,KH,IFr,NFr,qFr,i9,s6e,jFr,DFr,ZH,GFr,OFr,VFr,d9,l6e,XFr,zFr,eU,WFr,QFr,HFr,c9,i6e,UFr,JFr,oU,YFr,KFr,ZFr,f9,LGe,lc,m9,d6e,fL,e6r,c6e,o6r,xGe,rr,mL,r6r,ic,t6r,rU,a6r,n6r,tU,s6r,l6r,i6r,gL,d6r,f6e,c6r,f6r,m6r,Rt,hL,g6r,m6e,h6r,p6r,dc,u6r,g6e,_6r,b6r,aU,v6r,F6r,T6r,g9,M6r,$r,pL,E6r,h6e,C6r,w6r,sn,A6r,p6e,y6r,L6r,u6e,x6r,$6r,_6e,k6r,S6r,R6r,ln,h9,b6e,P6r,B6r,nU,I6r,N6r,q6r,p9,v6e,j6r,D6r,sU,G6r,O6r,V6r,u9,F6e,X6r,z6r,lU,W6r,Q6r,H6r,_9,T6e,U6r,J6r,iU,Y6r,K6r,Z6r,b9,$Ge,cc,v9,M6e,uL,eTr,E6e,oTr,kGe,tr,_L,rTr,fc,tTr,dU,aTr,nTr,cU,sTr,lTr,iTr,bL,dTr,C6e,cTr,fTr,mTr,Pt,vL,gTr,w6e,hTr,pTr,mc,uTr,A6e,_Tr,bTr,fU,vTr,FTr,TTr,F9,MTr,kr,FL,ETr,y6e,CTr,wTr,dn,ATr,L6e,yTr,LTr,x6e,xTr,$Tr,$6e,kTr,STr,RTr,ie,T9,k6e,PTr,BTr,mU,ITr,NTr,qTr,M9,S6e,jTr,DTr,gU,GTr,OTr,VTr,E9,R6e,XTr,zTr,hU,WTr,QTr,HTr,C9,P6e,UTr,JTr,pU,YTr,KTr,ZTr,w9,B6e,e7r,o7r,uU,r7r,t7r,a7r,A9,I6e,n7r,s7r,_U,l7r,i7r,d7r,y9,N6e,c7r,f7r,bU,m7r,g7r,h7r,L9,q6e,p7r,u7r,vU,_7r,b7r,v7r,x9,j6e,F7r,T7r,FU,M7r,E7r,C7r,$9,D6e,w7r,A7r,TU,y7r,L7r,x7r,k9,G6e,$7r,k7r,MU,S7r,R7r,P7r,S9,O6e,B7r,I7r,EU,N7r,q7r,j7r,R9,V6e,D7r,G7r,CU,O7r,V7r,X7r,P9,X6e,z7r,W7r,wU,Q7r,H7r,U7r,B9,z6e,J7r,Y7r,AU,K7r,Z7r,e8r,I9,W6e,o8r,r8r,yU,t8r,a8r,n8r,N9,Q6e,s8r,l8r,LU,i8r,d8r,c8r,q9,H6e,f8r,m8r,xU,g8r,h8r,p8r,j9,U6e,u8r,_8r,$U,b8r,v8r,F8r,D9,J6e,T8r,M8r,kU,E8r,C8r,w8r,G9,SGe,gc,O9,Y6e,TL,A8r,K6e,y8r,RGe,ar,ML,L8r,hc,x8r,SU,$8r,k8r,RU,S8r,R8r,P8r,EL,B8r,Z6e,I8r,N8r,q8r,Bt,CL,j8r,eTe,D8r,G8r,pc,O8r,oTe,V8r,X8r,PU,z8r,W8r,Q8r,V9,H8r,Sr,wL,U8r,rTe,J8r,Y8r,cn,K8r,tTe,Z8r,e9r,aTe,o9r,r9r,nTe,t9r,a9r,n9r,Le,X9,sTe,s9r,l9r,BU,i9r,d9r,c9r,z9,lTe,f9r,m9r,IU,g9r,h9r,p9r,W9,iTe,u9r,_9r,NU,b9r,v9r,F9r,Q9,dTe,T9r,M9r,qU,E9r,C9r,w9r,H9,cTe,A9r,y9r,jU,L9r,x9r,$9r,U9,fTe,k9r,S9r,DU,R9r,P9r,B9r,J9,mTe,I9r,N9r,GU,q9r,j9r,D9r,Y9,gTe,G9r,O9r,OU,V9r,X9r,z9r,K9,hTe,W9r,Q9r,VU,H9r,U9r,J9r,Z9,pTe,Y9r,K9r,XU,Z9r,eMr,oMr,eM,PGe,uc,oM,uTe,AL,rMr,_Te,tMr,BGe,nr,yL,aMr,_c,nMr,zU,sMr,lMr,WU,iMr,dMr,cMr,LL,fMr,bTe,mMr,gMr,hMr,It,xL,pMr,vTe,uMr,_Mr,bc,bMr,FTe,vMr,FMr,QU,TMr,MMr,EMr,rM,CMr,Rr,$L,wMr,TTe,AMr,yMr,fn,LMr,MTe,xMr,$Mr,ETe,kMr,SMr,CTe,RMr,PMr,BMr,re,tM,wTe,IMr,NMr,HU,qMr,jMr,DMr,aM,ATe,GMr,OMr,UU,VMr,XMr,zMr,nM,yTe,WMr,QMr,JU,HMr,UMr,JMr,sM,LTe,YMr,KMr,YU,ZMr,e4r,o4r,lM,xTe,r4r,t4r,KU,a4r,n4r,s4r,iM,$Te,l4r,i4r,ZU,d4r,c4r,f4r,dM,kTe,m4r,g4r,eJ,h4r,p4r,u4r,cM,STe,_4r,b4r,oJ,v4r,F4r,T4r,fM,RTe,M4r,E4r,rJ,C4r,w4r,A4r,mM,PTe,y4r,L4r,tJ,x4r,$4r,k4r,gM,BTe,S4r,R4r,aJ,P4r,B4r,I4r,hM,ITe,N4r,q4r,nJ,j4r,D4r,G4r,pM,NTe,O4r,V4r,sJ,X4r,z4r,W4r,uM,qTe,Q4r,H4r,lJ,U4r,J4r,Y4r,_M,jTe,K4r,Z4r,iJ,eEr,oEr,rEr,bM,DTe,tEr,aEr,dJ,nEr,sEr,lEr,vM,GTe,iEr,dEr,cJ,cEr,fEr,mEr,FM,OTe,gEr,hEr,fJ,pEr,uEr,_Er,TM,VTe,bEr,vEr,mJ,FEr,TEr,MEr,MM,XTe,EEr,CEr,gJ,wEr,AEr,yEr,EM,zTe,LEr,xEr,hJ,$Er,kEr,SEr,CM,WTe,REr,PEr,pJ,BEr,IEr,NEr,wM,QTe,qEr,jEr,uJ,DEr,GEr,OEr,AM,HTe,VEr,XEr,_J,zEr,WEr,QEr,yM,UTe,HEr,UEr,bJ,JEr,YEr,KEr,LM,JTe,ZEr,eCr,vJ,oCr,rCr,tCr,xM,IGe,vc,$M,YTe,kL,aCr,KTe,nCr,NGe,sr,SL,sCr,Fc,lCr,FJ,iCr,dCr,TJ,cCr,fCr,mCr,RL,gCr,ZTe,hCr,pCr,uCr,Nt,PL,_Cr,e7e,bCr,vCr,Tc,FCr,o7e,TCr,MCr,MJ,ECr,CCr,wCr,kM,ACr,Pr,BL,yCr,r7e,LCr,xCr,mn,$Cr,t7e,kCr,SCr,a7e,RCr,PCr,n7e,BCr,ICr,NCr,pe,SM,s7e,qCr,jCr,EJ,DCr,GCr,OCr,RM,l7e,VCr,XCr,CJ,zCr,WCr,QCr,PM,i7e,HCr,UCr,wJ,JCr,YCr,KCr,BM,d7e,ZCr,e5r,AJ,o5r,r5r,t5r,IM,c7e,a5r,n5r,yJ,s5r,l5r,i5r,NM,f7e,d5r,c5r,LJ,f5r,m5r,g5r,qM,m7e,h5r,p5r,xJ,u5r,_5r,b5r,jM,g7e,v5r,F5r,$J,T5r,M5r,E5r,DM,h7e,C5r,w5r,kJ,A5r,y5r,L5r,GM,p7e,x5r,$5r,SJ,k5r,S5r,R5r,OM,u7e,P5r,B5r,RJ,I5r,N5r,q5r,VM,_7e,j5r,D5r,PJ,G5r,O5r,V5r,XM,b7e,X5r,z5r,BJ,W5r,Q5r,H5r,zM,v7e,U5r,J5r,IJ,Y5r,K5r,Z5r,WM,F7e,e3r,o3r,NJ,r3r,t3r,a3r,QM,T7e,n3r,s3r,qJ,l3r,i3r,d3r,HM,M7e,c3r,f3r,jJ,m3r,g3r,h3r,UM,qGe,Mc,JM,E7e,IL,p3r,C7e,u3r,jGe,lr,NL,_3r,Ec,b3r,DJ,v3r,F3r,GJ,T3r,M3r,E3r,qL,C3r,w7e,w3r,A3r,y3r,qt,jL,L3r,A7e,x3r,$3r,Cc,k3r,y7e,S3r,R3r,OJ,P3r,B3r,I3r,YM,N3r,Br,DL,q3r,L7e,j3r,D3r,gn,G3r,x7e,O3r,V3r,$7e,X3r,z3r,k7e,W3r,Q3r,H3r,GL,KM,S7e,U3r,J3r,VJ,Y3r,K3r,Z3r,ZM,R7e,ewr,owr,XJ,rwr,twr,awr,e4,DGe,wc,o4,P7e,OL,nwr,B7e,swr,GGe,ir,VL,lwr,Ac,iwr,zJ,dwr,cwr,WJ,fwr,mwr,gwr,XL,hwr,I7e,pwr,uwr,_wr,jt,zL,bwr,N7e,vwr,Fwr,yc,Twr,q7e,Mwr,Ewr,QJ,Cwr,wwr,Awr,r4,ywr,Ir,WL,Lwr,j7e,xwr,$wr,hn,kwr,D7e,Swr,Rwr,G7e,Pwr,Bwr,O7e,Iwr,Nwr,qwr,V7e,t4,X7e,jwr,Dwr,HJ,Gwr,Owr,Vwr,a4,OGe,Lc,n4,z7e,QL,Xwr,W7e,zwr,VGe,dr,HL,Wwr,xc,Qwr,UJ,Hwr,Uwr,JJ,Jwr,Ywr,Kwr,UL,Zwr,Q7e,e0r,o0r,r0r,Dt,JL,t0r,H7e,a0r,n0r,$c,s0r,U7e,l0r,i0r,YJ,d0r,c0r,f0r,s4,m0r,Nr,YL,g0r,J7e,h0r,p0r,pn,u0r,Y7e,_0r,b0r,K7e,v0r,F0r,Z7e,T0r,M0r,E0r,de,l4,e8e,C0r,w0r,KJ,A0r,y0r,L0r,i4,o8e,x0r,$0r,ZJ,k0r,S0r,R0r,d4,r8e,P0r,B0r,eY,I0r,N0r,q0r,c4,t8e,j0r,D0r,oY,G0r,O0r,V0r,f4,a8e,X0r,z0r,rY,W0r,Q0r,H0r,m4,n8e,U0r,J0r,tY,Y0r,K0r,Z0r,g4,s8e,eAr,oAr,aY,rAr,tAr,aAr,h4,l8e,nAr,sAr,nY,lAr,iAr,dAr,p4,i8e,cAr,fAr,sY,mAr,gAr,hAr,u4,d8e,pAr,uAr,lY,_Ar,bAr,vAr,_4,c8e,FAr,TAr,iY,MAr,EAr,CAr,b4,f8e,wAr,AAr,dY,yAr,LAr,xAr,v4,m8e,$Ar,kAr,cY,SAr,RAr,PAr,F4,g8e,BAr,IAr,fY,NAr,qAr,jAr,T4,h8e,DAr,GAr,mY,OAr,VAr,XAr,M4,p8e,zAr,WAr,gY,QAr,HAr,UAr,E4,u8e,JAr,YAr,hY,KAr,ZAr,eyr,C4,_8e,oyr,ryr,pY,tyr,ayr,nyr,w4,b8e,syr,lyr,uY,iyr,dyr,cyr,A4,v8e,fyr,myr,_Y,gyr,hyr,pyr,y4,XGe,kc,L4,F8e,KL,uyr,T8e,_yr,zGe,cr,ZL,byr,Sc,vyr,bY,Fyr,Tyr,vY,Myr,Eyr,Cyr,ex,wyr,M8e,Ayr,yyr,Lyr,Gt,ox,xyr,E8e,$yr,kyr,Rc,Syr,C8e,Ryr,Pyr,FY,Byr,Iyr,Nyr,x4,qyr,qr,rx,jyr,w8e,Dyr,Gyr,un,Oyr,A8e,Vyr,Xyr,y8e,zyr,Wyr,L8e,Qyr,Hyr,Uyr,ce,$4,x8e,Jyr,Yyr,TY,Kyr,Zyr,eLr,k4,$8e,oLr,rLr,MY,tLr,aLr,nLr,S4,k8e,sLr,lLr,EY,iLr,dLr,cLr,R4,S8e,fLr,mLr,CY,gLr,hLr,pLr,P4,R8e,uLr,_Lr,wY,bLr,vLr,FLr,B4,P8e,TLr,MLr,AY,ELr,CLr,wLr,I4,B8e,ALr,yLr,yY,LLr,xLr,$Lr,N4,I8e,kLr,SLr,LY,RLr,PLr,BLr,q4,N8e,ILr,NLr,xY,qLr,jLr,DLr,j4,q8e,GLr,OLr,$Y,VLr,XLr,zLr,D4,j8e,WLr,QLr,kY,HLr,ULr,JLr,G4,D8e,YLr,KLr,SY,ZLr,exr,oxr,O4,G8e,rxr,txr,RY,axr,nxr,sxr,V4,O8e,lxr,ixr,PY,dxr,cxr,fxr,X4,V8e,mxr,gxr,BY,hxr,pxr,uxr,z4,X8e,_xr,bxr,IY,vxr,Fxr,Txr,W4,z8e,Mxr,Exr,NY,Cxr,wxr,Axr,Q4,W8e,yxr,Lxr,qY,xxr,$xr,kxr,H4,Q8e,Sxr,Rxr,jY,Pxr,Bxr,Ixr,U4,H8e,Nxr,qxr,DY,jxr,Dxr,Gxr,J4,WGe,Pc,Y4,U8e,tx,Oxr,J8e,Vxr,QGe,fr,ax,Xxr,Bc,zxr,GY,Wxr,Qxr,OY,Hxr,Uxr,Jxr,nx,Yxr,Y8e,Kxr,Zxr,e$r,Ot,sx,o$r,K8e,r$r,t$r,Ic,a$r,Z8e,n$r,s$r,VY,l$r,i$r,d$r,K4,c$r,jr,lx,f$r,e9e,m$r,g$r,_n,h$r,o9e,p$r,u$r,r9e,_$r,b$r,t9e,v$r,F$r,T$r,a9e,Z4,n9e,M$r,E$r,XY,C$r,w$r,A$r,eE,HGe,Nc,oE,s9e,ix,y$r,l9e,L$r,UGe,mr,dx,x$r,qc,$$r,zY,k$r,S$r,WY,R$r,P$r,B$r,cx,I$r,i9e,N$r,q$r,j$r,Vt,fx,D$r,d9e,G$r,O$r,jc,V$r,c9e,X$r,z$r,QY,W$r,Q$r,H$r,rE,U$r,Dr,mx,J$r,f9e,Y$r,K$r,bn,Z$r,m9e,ekr,okr,g9e,rkr,tkr,h9e,akr,nkr,skr,p9e,tE,u9e,lkr,ikr,HY,dkr,ckr,fkr,aE,JGe,Dc,nE,_9e,gx,mkr,b9e,gkr,YGe,gr,hx,hkr,Gc,pkr,UY,ukr,_kr,JY,bkr,vkr,Fkr,px,Tkr,v9e,Mkr,Ekr,Ckr,Xt,ux,wkr,F9e,Akr,ykr,Oc,Lkr,T9e,xkr,$kr,YY,kkr,Skr,Rkr,sE,Pkr,Gr,_x,Bkr,M9e,Ikr,Nkr,vn,qkr,E9e,jkr,Dkr,C9e,Gkr,Okr,w9e,Vkr,Xkr,zkr,te,lE,A9e,Wkr,Qkr,KY,Hkr,Ukr,Jkr,iE,y9e,Ykr,Kkr,ZY,Zkr,eSr,oSr,dE,L9e,rSr,tSr,eK,aSr,nSr,sSr,cE,x9e,lSr,iSr,oK,dSr,cSr,fSr,fE,$9e,mSr,gSr,rK,hSr,pSr,uSr,mE,k9e,_Sr,bSr,tK,vSr,FSr,TSr,gE,S9e,MSr,ESr,aK,CSr,wSr,ASr,hE,R9e,ySr,LSr,nK,xSr,$Sr,kSr,pE,P9e,SSr,RSr,sK,PSr,BSr,ISr,uE,B9e,NSr,qSr,lK,jSr,DSr,GSr,_E,I9e,OSr,VSr,iK,XSr,zSr,WSr,bE,N9e,QSr,HSr,dK,USr,JSr,YSr,vE,q9e,KSr,ZSr,cK,eRr,oRr,rRr,FE,j9e,tRr,aRr,fK,nRr,sRr,lRr,TE,D9e,iRr,dRr,mK,cRr,fRr,mRr,ME,G9e,gRr,hRr,gK,pRr,uRr,_Rr,EE,O9e,bRr,vRr,hK,FRr,TRr,MRr,CE,V9e,ERr,CRr,pK,wRr,ARr,yRr,wE,X9e,LRr,xRr,uK,$Rr,kRr,SRr,AE,z9e,RRr,PRr,_K,BRr,IRr,NRr,yE,W9e,qRr,jRr,bK,DRr,GRr,ORr,LE,Q9e,VRr,XRr,vK,zRr,WRr,QRr,xE,H9e,HRr,URr,FK,JRr,YRr,KRr,$E,U9e,ZRr,ePr,TK,oPr,rPr,tPr,kE,J9e,aPr,nPr,MK,sPr,lPr,iPr,SE,Y9e,dPr,cPr,EK,fPr,mPr,gPr,RE,KGe,Vc,PE,K9e,bx,hPr,Z9e,pPr,ZGe,hr,vx,uPr,Xc,_Pr,CK,bPr,vPr,wK,FPr,TPr,MPr,Fx,EPr,eMe,CPr,wPr,APr,zt,Tx,yPr,oMe,LPr,xPr,zc,$Pr,rMe,kPr,SPr,AK,RPr,PPr,BPr,BE,IPr,Or,Mx,NPr,tMe,qPr,jPr,Fn,DPr,aMe,GPr,OPr,nMe,VPr,XPr,sMe,zPr,WPr,QPr,xe,IE,lMe,HPr,UPr,yK,JPr,YPr,KPr,NE,iMe,ZPr,eBr,LK,oBr,rBr,tBr,qE,dMe,aBr,nBr,xK,sBr,lBr,iBr,jE,cMe,dBr,cBr,$K,fBr,mBr,gBr,DE,fMe,hBr,pBr,kK,uBr,_Br,bBr,GE,mMe,vBr,FBr,SK,TBr,MBr,EBr,OE,gMe,CBr,wBr,RK,ABr,yBr,LBr,VE,hMe,xBr,$Br,PK,kBr,SBr,RBr,XE,pMe,PBr,BBr,BK,IBr,NBr,qBr,zE,uMe,jBr,DBr,IK,GBr,OBr,VBr,WE,eOe,Wc,QE,_Me,Ex,XBr,bMe,zBr,oOe,pr,Cx,WBr,Qc,QBr,NK,HBr,UBr,qK,JBr,YBr,KBr,wx,ZBr,vMe,eIr,oIr,rIr,Wt,Ax,tIr,FMe,aIr,nIr,Hc,sIr,TMe,lIr,iIr,jK,dIr,cIr,fIr,HE,mIr,Vr,yx,gIr,MMe,hIr,pIr,Tn,uIr,EMe,_Ir,bIr,CMe,vIr,FIr,wMe,TIr,MIr,EIr,Ee,UE,AMe,CIr,wIr,DK,AIr,yIr,LIr,JE,yMe,xIr,$Ir,GK,kIr,SIr,RIr,YE,LMe,PIr,BIr,OK,IIr,NIr,qIr,KE,xMe,jIr,DIr,VK,GIr,OIr,VIr,ZE,$Me,XIr,zIr,XK,WIr,QIr,HIr,eC,kMe,UIr,JIr,zK,YIr,KIr,ZIr,oC,SMe,eNr,oNr,WK,rNr,tNr,aNr,rC,RMe,nNr,sNr,QK,lNr,iNr,dNr,tC,PMe,cNr,fNr,HK,mNr,gNr,hNr,aC,BMe,pNr,uNr,UK,_Nr,bNr,vNr,nC,IMe,FNr,TNr,JK,MNr,ENr,CNr,sC,NMe,wNr,ANr,YK,yNr,LNr,xNr,lC,rOe,Uc,iC,qMe,Lx,$Nr,jMe,kNr,tOe,ur,xx,SNr,Jc,RNr,KK,PNr,BNr,ZK,INr,NNr,qNr,$x,jNr,DMe,DNr,GNr,ONr,Qt,kx,VNr,GMe,XNr,zNr,Yc,WNr,OMe,QNr,HNr,eZ,UNr,JNr,YNr,dC,KNr,Xr,Sx,ZNr,VMe,eqr,oqr,Mn,rqr,XMe,tqr,aqr,zMe,nqr,sqr,WMe,lqr,iqr,dqr,$e,cC,QMe,cqr,fqr,oZ,mqr,gqr,hqr,fC,HMe,pqr,uqr,rZ,_qr,bqr,vqr,mC,UMe,Fqr,Tqr,tZ,Mqr,Eqr,Cqr,gC,JMe,wqr,Aqr,aZ,yqr,Lqr,xqr,hC,YMe,$qr,kqr,nZ,Sqr,Rqr,Pqr,pC,KMe,Bqr,Iqr,sZ,Nqr,qqr,jqr,uC,ZMe,Dqr,Gqr,lZ,Oqr,Vqr,Xqr,_C,e4e,zqr,Wqr,iZ,Qqr,Hqr,Uqr,bC,o4e,Jqr,Yqr,dZ,Kqr,Zqr,ejr,vC,r4e,ojr,rjr,cZ,tjr,ajr,njr,FC,aOe,Kc,TC,t4e,Rx,sjr,a4e,ljr,nOe,_r,Px,ijr,Zc,djr,fZ,cjr,fjr,mZ,mjr,gjr,hjr,Bx,pjr,n4e,ujr,_jr,bjr,Ht,Ix,vjr,s4e,Fjr,Tjr,ef,Mjr,l4e,Ejr,Cjr,gZ,wjr,Ajr,yjr,MC,Ljr,zr,Nx,xjr,i4e,$jr,kjr,En,Sjr,d4e,Rjr,Pjr,c4e,Bjr,Ijr,f4e,Njr,qjr,jjr,Pe,EC,m4e,Djr,Gjr,hZ,Ojr,Vjr,Xjr,CC,g4e,zjr,Wjr,pZ,Qjr,Hjr,Ujr,wC,h4e,Jjr,Yjr,uZ,Kjr,Zjr,eDr,AC,p4e,oDr,rDr,_Z,tDr,aDr,nDr,yC,u4e,sDr,lDr,bZ,iDr,dDr,cDr,LC,_4e,fDr,mDr,vZ,gDr,hDr,pDr,xC,b4e,uDr,_Dr,FZ,bDr,vDr,FDr,$C,v4e,TDr,MDr,TZ,EDr,CDr,wDr,kC,F4e,ADr,yDr,MZ,LDr,xDr,$Dr,SC,sOe,of,RC,T4e,qx,kDr,M4e,SDr,lOe,br,jx,RDr,rf,PDr,EZ,BDr,IDr,CZ,NDr,qDr,jDr,Dx,DDr,E4e,GDr,ODr,VDr,Ut,Gx,XDr,C4e,zDr,WDr,tf,QDr,w4e,HDr,UDr,wZ,JDr,YDr,KDr,PC,ZDr,Wr,Ox,eGr,A4e,oGr,rGr,Cn,tGr,y4e,aGr,nGr,L4e,sGr,lGr,x4e,iGr,dGr,cGr,ke,BC,$4e,fGr,mGr,AZ,gGr,hGr,pGr,IC,k4e,uGr,_Gr,yZ,bGr,vGr,FGr,NC,S4e,TGr,MGr,LZ,EGr,CGr,wGr,qC,R4e,AGr,yGr,xZ,LGr,xGr,$Gr,jC,P4e,kGr,SGr,$Z,RGr,PGr,BGr,DC,B4e,IGr,NGr,kZ,qGr,jGr,DGr,GC,I4e,GGr,OGr,SZ,VGr,XGr,zGr,OC,N4e,WGr,QGr,RZ,HGr,UGr,JGr,VC,q4e,YGr,KGr,PZ,ZGr,eOr,oOr,XC,j4e,rOr,tOr,BZ,aOr,nOr,sOr,zC,iOe,af,WC,D4e,Vx,lOr,G4e,iOr,dOe,vr,Xx,dOr,nf,cOr,IZ,fOr,mOr,NZ,gOr,hOr,pOr,zx,uOr,O4e,_Or,bOr,vOr,Jt,Wx,FOr,V4e,TOr,MOr,sf,EOr,X4e,COr,wOr,qZ,AOr,yOr,LOr,QC,xOr,Qr,Qx,$Or,z4e,kOr,SOr,wn,ROr,W4e,POr,BOr,Q4e,IOr,NOr,H4e,qOr,jOr,DOr,Se,HC,U4e,GOr,OOr,jZ,VOr,XOr,zOr,UC,J4e,WOr,QOr,DZ,HOr,UOr,JOr,JC,Y4e,YOr,KOr,GZ,ZOr,eVr,oVr,YC,K4e,rVr,tVr,OZ,aVr,nVr,sVr,KC,Z4e,lVr,iVr,VZ,dVr,cVr,fVr,ZC,eEe,mVr,gVr,XZ,hVr,pVr,uVr,e5,oEe,_Vr,bVr,zZ,vVr,FVr,TVr,o5,rEe,MVr,EVr,WZ,CVr,wVr,AVr,r5,tEe,yVr,LVr,QZ,xVr,$Vr,kVr,t5,aEe,SVr,RVr,HZ,PVr,BVr,IVr,a5,cOe,lf,n5,nEe,Hx,NVr,sEe,qVr,fOe,Fr,Ux,jVr,df,DVr,UZ,GVr,OVr,JZ,VVr,XVr,zVr,Jx,WVr,lEe,QVr,HVr,UVr,Yt,Yx,JVr,iEe,YVr,KVr,cf,ZVr,dEe,eXr,oXr,YZ,rXr,tXr,aXr,s5,nXr,Hr,Kx,sXr,cEe,lXr,iXr,An,dXr,fEe,cXr,fXr,mEe,mXr,gXr,gEe,hXr,pXr,uXr,Oe,l5,hEe,_Xr,bXr,KZ,vXr,FXr,TXr,i5,pEe,MXr,EXr,ZZ,CXr,wXr,AXr,d5,uEe,yXr,LXr,eee,xXr,$Xr,kXr,c5,_Ee,SXr,RXr,oee,PXr,BXr,IXr,f5,bEe,NXr,qXr,ree,jXr,DXr,GXr,m5,vEe,OXr,VXr,tee,XXr,zXr,WXr,g5,FEe,QXr,HXr,aee,UXr,JXr,YXr,h5,TEe,KXr,ZXr,nee,ezr,ozr,rzr,p5,mOe,ff,u5,MEe,Zx,tzr,EEe,azr,gOe,Tr,e$,nzr,mf,szr,see,lzr,izr,lee,dzr,czr,fzr,o$,mzr,CEe,gzr,hzr,pzr,Kt,r$,uzr,wEe,_zr,bzr,gf,vzr,AEe,Fzr,Tzr,iee,Mzr,Ezr,Czr,_5,wzr,Ur,t$,Azr,yEe,yzr,Lzr,yn,xzr,LEe,$zr,kzr,xEe,Szr,Rzr,$Ee,Pzr,Bzr,Izr,Ve,b5,kEe,Nzr,qzr,dee,jzr,Dzr,Gzr,v5,SEe,Ozr,Vzr,cee,Xzr,zzr,Wzr,F5,REe,Qzr,Hzr,fee,Uzr,Jzr,Yzr,T5,PEe,Kzr,Zzr,mee,eWr,oWr,rWr,M5,BEe,tWr,aWr,gee,nWr,sWr,lWr,E5,IEe,iWr,dWr,hee,cWr,fWr,mWr,C5,NEe,gWr,hWr,pee,pWr,uWr,_Wr,w5,qEe,bWr,vWr,uee,FWr,TWr,MWr,A5,hOe,hf,y5,jEe,a$,EWr,DEe,CWr,pOe,Mr,n$,wWr,pf,AWr,_ee,yWr,LWr,bee,xWr,$Wr,kWr,s$,SWr,GEe,RWr,PWr,BWr,Zt,l$,IWr,OEe,NWr,qWr,uf,jWr,VEe,DWr,GWr,vee,OWr,VWr,XWr,L5,zWr,Jr,i$,WWr,XEe,QWr,HWr,Ln,UWr,zEe,JWr,YWr,WEe,KWr,ZWr,QEe,eQr,oQr,rQr,HEe,x5,UEe,tQr,aQr,Fee,nQr,sQr,lQr,$5,uOe,_f,k5,JEe,d$,iQr,YEe,dQr,_Oe,Er,c$,cQr,bf,fQr,Tee,mQr,gQr,Mee,hQr,pQr,uQr,f$,_Qr,KEe,bQr,vQr,FQr,ea,m$,TQr,ZEe,MQr,EQr,vf,CQr,eCe,wQr,AQr,Eee,yQr,LQr,xQr,S5,$Qr,Yr,g$,kQr,oCe,SQr,RQr,xn,PQr,rCe,BQr,IQr,tCe,NQr,qQr,aCe,jQr,DQr,GQr,h$,R5,nCe,OQr,VQr,Cee,XQr,zQr,WQr,P5,sCe,QQr,HQr,wee,UQr,JQr,YQr,B5,bOe,Ff,I5,lCe,p$,KQr,iCe,ZQr,vOe,Cr,u$,eHr,Tf,oHr,Aee,rHr,tHr,yee,aHr,nHr,sHr,_$,lHr,dCe,iHr,dHr,cHr,oa,b$,fHr,cCe,mHr,gHr,Mf,hHr,fCe,pHr,uHr,Lee,_Hr,bHr,vHr,N5,FHr,Kr,v$,THr,mCe,MHr,EHr,$n,CHr,gCe,wHr,AHr,hCe,yHr,LHr,pCe,xHr,$Hr,kHr,uCe,q5,_Ce,SHr,RHr,xee,PHr,BHr,IHr,j5,FOe;return d=new oe({}),La=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),c0=new oe({}),f0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),kf=new NHr({props:{warning:!0,$$slots:{default:[EIt]},$$scope:{ctx:L}}}),m0=new oe({}),g0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/configuration_auto.py#L591"}}),u0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/configuration_auto.py#L614"}}),Ng=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[CIt]},$$scope:{ctx:L}}}),_0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/configuration_auto.py#L737"}}),b0=new oe({}),v0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/tokenization_auto.py#L392"}}),M0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17689/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/tokenization_auto.py#L406"}}),vh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[wIt]},$$scope:{ctx:L}}}),E0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/tokenization_auto.py#L605"}}),C0=new oe({}),w0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17689/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ep=new NHr({props:{$$slots:{default:[AIt]},$$scope:{ctx:L}}}),op=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[yIt]},$$scope:{ctx:L}}}),x0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),$0=new oe({}),k0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/processing_auto.py#L88"}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/processing_auto.py#L102"}}),Tp=new NHr({props:{$$slots:{default:[LIt]},$$scope:{ctx:L}}}),Mp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[xIt]},$$scope:{ctx:L}}}),B0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/processing_auto.py#L255"}}),I0=new oe({}),N0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L753"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),wp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[$It]},$$scope:{ctx:L}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),E_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[kIt]},$$scope:{ctx:L}}}),G0=new oe({}),O0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L760"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),w_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[SIt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),u1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RIt]},$$scope:{ctx:L}}}),W0=new oe({}),Q0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L775"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),b1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[PIt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),ab=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BIt]},$$scope:{ctx:L}}}),Y0=new oe({}),K0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L782"}}),eA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),sb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[IIt]},$$scope:{ctx:L}}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NIt]},$$scope:{ctx:L}}}),rA=new oe({}),tA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L789"}}),nA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qIt]},$$scope:{ctx:L}}}),sA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),c2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jIt]},$$scope:{ctx:L}}}),lA=new oe({}),iA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L798"}}),cA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),m2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[DIt]},$$scope:{ctx:L}}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[GIt]},$$scope:{ctx:L}}}),mA=new oe({}),gA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L843"}}),pA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[OIt]},$$scope:{ctx:L}}}),uA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VIt]},$$scope:{ctx:L}}}),_A=new oe({}),bA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L850"}}),FA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XIt]},$$scope:{ctx:L}}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zIt]},$$scope:{ctx:L}}}),MA=new oe({}),EA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L836"}}),wA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[WIt]},$$scope:{ctx:L}}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QIt]},$$scope:{ctx:L}}}),yA=new oe({}),LA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L807"}}),$A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HIt]},$$scope:{ctx:L}}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UIt]},$$scope:{ctx:L}}}),SA=new oe({}),RA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L814"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JIt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YIt]},$$scope:{ctx:L}}}),NA=new oe({}),qA=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L859"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[KIt]},$$scope:{ctx:L}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZIt]},$$scope:{ctx:L}}}),OA=new oe({}),VA=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L898"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eNt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oNt]},$$scope:{ctx:L}}}),QA=new oe({}),HA=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L825"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[rNt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[tNt]},$$scope:{ctx:L}}}),KA=new oe({}),ZA=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L905"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[aNt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nNt]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L928"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sNt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lNt]},$$scope:{ctx:L}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L912"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[iNt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dNt]},$$scope:{ctx:L}}}),gy=new oe({}),hy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L919"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cNt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fNt]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L937"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[mNt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gNt]},$$scope:{ctx:L}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L944"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hNt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[pNt]},$$scope:{ctx:L}}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L891"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[uNt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[_Nt]},$$scope:{ctx:L}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L866"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bNt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vNt]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L873"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),_7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[FNt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[TNt]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_auto.py#L882"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[MNt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ENt]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[CNt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wNt]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ANt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yNt]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[LNt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xNt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$Nt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),b9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kNt]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),F9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[SNt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),G9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RNt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),V9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PNt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BNt]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[INt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NNt]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qNt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jNt]},$$scope:{ctx:L}}}),IL=new oe({}),NL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DNt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GNt]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ONt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[VNt]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[XNt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zNt]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[WNt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QNt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[HNt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UNt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JNt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YNt]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[KNt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ZNt]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[eqt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oqt]},$$scope:{ctx:L}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[rqt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tqt]},$$scope:{ctx:L}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[aqt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nqt]},$$scope:{ctx:L}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sqt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lqt]},$$scope:{ctx:L}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iqt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dqt]},$$scope:{ctx:L}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cqt]},$$scope:{ctx:L}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fqt]},$$scope:{ctx:L}}}),Hx=new oe({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[mqt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gqt]},$$scope:{ctx:L}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hqt]},$$scope:{ctx:L}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pqt]},$$scope:{ctx:L}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uqt]},$$scope:{ctx:L}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_qt]},$$scope:{ctx:L}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[bqt]},$$scope:{ctx:L}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vqt]},$$scope:{ctx:L}}}),p$=new oe({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Fqt]},$$scope:{ctx:L}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17689/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17689/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17689/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Tqt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),vi=o("Auto Classes"),Af=l(),at=a("p"),Fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=a("code"),s0=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),Mi=o("Instantiating one of "),Sn=a("a"),l0=o("AutoConfig"),Rn=o(", "),Pn=a("a"),i0=o("AutoModel"),Ei=o(`, and
`),Bn=a("a"),d0=o("AutoTokenizer"),Ci=o(" will directly create a class of the relevant architecture. For instance"),Lf=l(),F(La.$$.fragment),Qe=l(),Ae=a("p"),Bk=o("will create a model that is an instance of "),wi=a("a"),Ik=o("BertModel"),Nk=o("."),Co=l(),xa=a("p"),qk=o("There is one class of "),xf=a("code"),jk=o("AutoModel"),$Xe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pDe=l(),Ai=a("h2"),$f=a("a"),Cre=a("span"),F(c0.$$.fragment),kXe=l(),wre=a("span"),SXe=o("Extending the Auto Classes"),uDe=l(),In=a("p"),RXe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Are=a("code"),PXe=o("NewModel"),BXe=o(", make sure you have a "),yre=a("code"),IXe=o("NewModelConfig"),NXe=o(` then you can add those to the auto
classes like this:`),_De=l(),F(f0.$$.fragment),bDe=l(),Dk=a("p"),qXe=o("You will then be able to use the auto classes like you would usually do!"),vDe=l(),F(kf.$$.fragment),FDe=l(),yi=a("h2"),Sf=a("a"),Lre=a("span"),F(m0.$$.fragment),jXe=l(),xre=a("span"),DXe=o("AutoConfig"),TDe=l(),wo=a("div"),F(g0.$$.fragment),GXe=l(),h0=a("p"),OXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Gk=a("a"),VXe=o("from_pretrained()"),XXe=o(" class method."),zXe=l(),p0=a("p"),WXe=o("This class cannot be instantiated directly using "),$re=a("code"),QXe=o("__init__()"),HXe=o(" (throws an error)."),UXe=l(),wr=a("div"),F(u0.$$.fragment),JXe=l(),kre=a("p"),YXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),KXe=l(),Li=a("p"),ZXe=o("The configuration class to instantiate is selected based on the "),Sre=a("code"),eze=o("model_type"),oze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rre=a("code"),rze=o("pretrained_model_name_or_path"),tze=o(":"),aze=l(),A=a("ul"),Rf=a("li"),Pre=a("strong"),nze=o("albert"),sze=o(" \u2014 "),Ok=a("a"),lze=o("AlbertConfig"),ize=o(" (ALBERT model)"),dze=l(),Pf=a("li"),Bre=a("strong"),cze=o("bart"),fze=o(" \u2014 "),Vk=a("a"),mze=o("BartConfig"),gze=o(" (BART model)"),hze=l(),Bf=a("li"),Ire=a("strong"),pze=o("beit"),uze=o(" \u2014 "),Xk=a("a"),_ze=o("BeitConfig"),bze=o(" (BEiT model)"),vze=l(),If=a("li"),Nre=a("strong"),Fze=o("bert"),Tze=o(" \u2014 "),zk=a("a"),Mze=o("BertConfig"),Eze=o(" (BERT model)"),Cze=l(),Nf=a("li"),qre=a("strong"),wze=o("bert-generation"),Aze=o(" \u2014 "),Wk=a("a"),yze=o("BertGenerationConfig"),Lze=o(" (Bert Generation model)"),xze=l(),qf=a("li"),jre=a("strong"),$ze=o("big_bird"),kze=o(" \u2014 "),Qk=a("a"),Sze=o("BigBirdConfig"),Rze=o(" (BigBird model)"),Pze=l(),jf=a("li"),Dre=a("strong"),Bze=o("bigbird_pegasus"),Ize=o(" \u2014 "),Hk=a("a"),Nze=o("BigBirdPegasusConfig"),qze=o(" (BigBird-Pegasus model)"),jze=l(),Df=a("li"),Gre=a("strong"),Dze=o("blenderbot"),Gze=o(" \u2014 "),Uk=a("a"),Oze=o("BlenderbotConfig"),Vze=o(" (Blenderbot model)"),Xze=l(),Gf=a("li"),Ore=a("strong"),zze=o("blenderbot-small"),Wze=o(" \u2014 "),Jk=a("a"),Qze=o("BlenderbotSmallConfig"),Hze=o(" (BlenderbotSmall model)"),Uze=l(),Of=a("li"),Vre=a("strong"),Jze=o("bloom"),Yze=o(" \u2014 "),Yk=a("a"),Kze=o("BloomConfig"),Zze=o(" (BLOOM model)"),eWe=l(),Vf=a("li"),Xre=a("strong"),oWe=o("camembert"),rWe=o(" \u2014 "),Kk=a("a"),tWe=o("CamembertConfig"),aWe=o(" (CamemBERT model)"),nWe=l(),Xf=a("li"),zre=a("strong"),sWe=o("canine"),lWe=o(" \u2014 "),Zk=a("a"),iWe=o("CanineConfig"),dWe=o(" (CANINE model)"),cWe=l(),zf=a("li"),Wre=a("strong"),fWe=o("clip"),mWe=o(" \u2014 "),eS=a("a"),gWe=o("CLIPConfig"),hWe=o(" (CLIP model)"),pWe=l(),Wf=a("li"),Qre=a("strong"),uWe=o("convbert"),_We=o(" \u2014 "),oS=a("a"),bWe=o("ConvBertConfig"),vWe=o(" (ConvBERT model)"),FWe=l(),Qf=a("li"),Hre=a("strong"),TWe=o("convnext"),MWe=o(" \u2014 "),rS=a("a"),EWe=o("ConvNextConfig"),CWe=o(" (ConvNeXT model)"),wWe=l(),Hf=a("li"),Ure=a("strong"),AWe=o("ctrl"),yWe=o(" \u2014 "),tS=a("a"),LWe=o("CTRLConfig"),xWe=o(" (CTRL model)"),$We=l(),Uf=a("li"),Jre=a("strong"),kWe=o("cvt"),SWe=o(" \u2014 "),aS=a("a"),RWe=o("CvtConfig"),PWe=o(" (CvT model)"),BWe=l(),Jf=a("li"),Yre=a("strong"),IWe=o("data2vec-audio"),NWe=o(" \u2014 "),nS=a("a"),qWe=o("Data2VecAudioConfig"),jWe=o(" (Data2VecAudio model)"),DWe=l(),Yf=a("li"),Kre=a("strong"),GWe=o("data2vec-text"),OWe=o(" \u2014 "),sS=a("a"),VWe=o("Data2VecTextConfig"),XWe=o(" (Data2VecText model)"),zWe=l(),Kf=a("li"),Zre=a("strong"),WWe=o("data2vec-vision"),QWe=o(" \u2014 "),lS=a("a"),HWe=o("Data2VecVisionConfig"),UWe=o(" (Data2VecVision model)"),JWe=l(),Zf=a("li"),ete=a("strong"),YWe=o("deberta"),KWe=o(" \u2014 "),iS=a("a"),ZWe=o("DebertaConfig"),eQe=o(" (DeBERTa model)"),oQe=l(),em=a("li"),ote=a("strong"),rQe=o("deberta-v2"),tQe=o(" \u2014 "),dS=a("a"),aQe=o("DebertaV2Config"),nQe=o(" (DeBERTa-v2 model)"),sQe=l(),om=a("li"),rte=a("strong"),lQe=o("decision_transformer"),iQe=o(" \u2014 "),cS=a("a"),dQe=o("DecisionTransformerConfig"),cQe=o(" (Decision Transformer model)"),fQe=l(),rm=a("li"),tte=a("strong"),mQe=o("deit"),gQe=o(" \u2014 "),fS=a("a"),hQe=o("DeiTConfig"),pQe=o(" (DeiT model)"),uQe=l(),tm=a("li"),ate=a("strong"),_Qe=o("detr"),bQe=o(" \u2014 "),mS=a("a"),vQe=o("DetrConfig"),FQe=o(" (DETR model)"),TQe=l(),am=a("li"),nte=a("strong"),MQe=o("distilbert"),EQe=o(" \u2014 "),gS=a("a"),CQe=o("DistilBertConfig"),wQe=o(" (DistilBERT model)"),AQe=l(),nm=a("li"),ste=a("strong"),yQe=o("dpr"),LQe=o(" \u2014 "),hS=a("a"),xQe=o("DPRConfig"),$Qe=o(" (DPR model)"),kQe=l(),sm=a("li"),lte=a("strong"),SQe=o("dpt"),RQe=o(" \u2014 "),pS=a("a"),PQe=o("DPTConfig"),BQe=o(" (DPT model)"),IQe=l(),lm=a("li"),ite=a("strong"),NQe=o("electra"),qQe=o(" \u2014 "),uS=a("a"),jQe=o("ElectraConfig"),DQe=o(" (ELECTRA model)"),GQe=l(),im=a("li"),dte=a("strong"),OQe=o("encoder-decoder"),VQe=o(" \u2014 "),_S=a("a"),XQe=o("EncoderDecoderConfig"),zQe=o(" (Encoder decoder model)"),WQe=l(),dm=a("li"),cte=a("strong"),QQe=o("flaubert"),HQe=o(" \u2014 "),bS=a("a"),UQe=o("FlaubertConfig"),JQe=o(" (FlauBERT model)"),YQe=l(),cm=a("li"),fte=a("strong"),KQe=o("flava"),ZQe=o(" \u2014 "),vS=a("a"),eHe=o("FlavaConfig"),oHe=o(" (FLAVA model)"),rHe=l(),fm=a("li"),mte=a("strong"),tHe=o("fnet"),aHe=o(" \u2014 "),FS=a("a"),nHe=o("FNetConfig"),sHe=o(" (FNet model)"),lHe=l(),mm=a("li"),gte=a("strong"),iHe=o("fsmt"),dHe=o(" \u2014 "),TS=a("a"),cHe=o("FSMTConfig"),fHe=o(" (FairSeq Machine-Translation model)"),mHe=l(),gm=a("li"),hte=a("strong"),gHe=o("funnel"),hHe=o(" \u2014 "),MS=a("a"),pHe=o("FunnelConfig"),uHe=o(" (Funnel Transformer model)"),_He=l(),hm=a("li"),pte=a("strong"),bHe=o("glpn"),vHe=o(" \u2014 "),ES=a("a"),FHe=o("GLPNConfig"),THe=o(" (GLPN model)"),MHe=l(),pm=a("li"),ute=a("strong"),EHe=o("gpt2"),CHe=o(" \u2014 "),CS=a("a"),wHe=o("GPT2Config"),AHe=o(" (OpenAI GPT-2 model)"),yHe=l(),um=a("li"),_te=a("strong"),LHe=o("gpt_neo"),xHe=o(" \u2014 "),wS=a("a"),$He=o("GPTNeoConfig"),kHe=o(" (GPT Neo model)"),SHe=l(),_m=a("li"),bte=a("strong"),RHe=o("gpt_neox"),PHe=o(" \u2014 "),AS=a("a"),BHe=o("GPTNeoXConfig"),IHe=o(" (GPT NeoX model)"),NHe=l(),bm=a("li"),vte=a("strong"),qHe=o("gptj"),jHe=o(" \u2014 "),yS=a("a"),DHe=o("GPTJConfig"),GHe=o(" (GPT-J model)"),OHe=l(),vm=a("li"),Fte=a("strong"),VHe=o("hubert"),XHe=o(" \u2014 "),LS=a("a"),zHe=o("HubertConfig"),WHe=o(" (Hubert model)"),QHe=l(),Fm=a("li"),Tte=a("strong"),HHe=o("ibert"),UHe=o(" \u2014 "),xS=a("a"),JHe=o("IBertConfig"),YHe=o(" (I-BERT model)"),KHe=l(),Tm=a("li"),Mte=a("strong"),ZHe=o("imagegpt"),eUe=o(" \u2014 "),$S=a("a"),oUe=o("ImageGPTConfig"),rUe=o(" (ImageGPT model)"),tUe=l(),Mm=a("li"),Ete=a("strong"),aUe=o("layoutlm"),nUe=o(" \u2014 "),kS=a("a"),sUe=o("LayoutLMConfig"),lUe=o(" (LayoutLM model)"),iUe=l(),Em=a("li"),Cte=a("strong"),dUe=o("layoutlmv2"),cUe=o(" \u2014 "),SS=a("a"),fUe=o("LayoutLMv2Config"),mUe=o(" (LayoutLMv2 model)"),gUe=l(),Cm=a("li"),wte=a("strong"),hUe=o("layoutlmv3"),pUe=o(" \u2014 "),RS=a("a"),uUe=o("LayoutLMv3Config"),_Ue=o(" (LayoutLMv3 model)"),bUe=l(),wm=a("li"),Ate=a("strong"),vUe=o("led"),FUe=o(" \u2014 "),PS=a("a"),TUe=o("LEDConfig"),MUe=o(" (LED model)"),EUe=l(),Am=a("li"),yte=a("strong"),CUe=o("levit"),wUe=o(" \u2014 "),BS=a("a"),AUe=o("LevitConfig"),yUe=o(" (LeViT model)"),LUe=l(),ym=a("li"),Lte=a("strong"),xUe=o("longformer"),$Ue=o(" \u2014 "),IS=a("a"),kUe=o("LongformerConfig"),SUe=o(" (Longformer model)"),RUe=l(),Lm=a("li"),xte=a("strong"),PUe=o("luke"),BUe=o(" \u2014 "),NS=a("a"),IUe=o("LukeConfig"),NUe=o(" (LUKE model)"),qUe=l(),xm=a("li"),$te=a("strong"),jUe=o("lxmert"),DUe=o(" \u2014 "),qS=a("a"),GUe=o("LxmertConfig"),OUe=o(" (LXMERT model)"),VUe=l(),$m=a("li"),kte=a("strong"),XUe=o("m2m_100"),zUe=o(" \u2014 "),jS=a("a"),WUe=o("M2M100Config"),QUe=o(" (M2M100 model)"),HUe=l(),km=a("li"),Ste=a("strong"),UUe=o("marian"),JUe=o(" \u2014 "),DS=a("a"),YUe=o("MarianConfig"),KUe=o(" (Marian model)"),ZUe=l(),Sm=a("li"),Rte=a("strong"),eJe=o("maskformer"),oJe=o(" \u2014 "),GS=a("a"),rJe=o("MaskFormerConfig"),tJe=o(" (MaskFormer model)"),aJe=l(),Rm=a("li"),Pte=a("strong"),nJe=o("mbart"),sJe=o(" \u2014 "),OS=a("a"),lJe=o("MBartConfig"),iJe=o(" (mBART model)"),dJe=l(),Pm=a("li"),Bte=a("strong"),cJe=o("mctct"),fJe=o(" \u2014 "),VS=a("a"),mJe=o("MCTCTConfig"),gJe=o(" (M-CTC-T model)"),hJe=l(),Bm=a("li"),Ite=a("strong"),pJe=o("megatron-bert"),uJe=o(" \u2014 "),XS=a("a"),_Je=o("MegatronBertConfig"),bJe=o(" (Megatron-BERT model)"),vJe=l(),Im=a("li"),Nte=a("strong"),FJe=o("mobilebert"),TJe=o(" \u2014 "),zS=a("a"),MJe=o("MobileBertConfig"),EJe=o(" (MobileBERT model)"),CJe=l(),Nm=a("li"),qte=a("strong"),wJe=o("mpnet"),AJe=o(" \u2014 "),WS=a("a"),yJe=o("MPNetConfig"),LJe=o(" (MPNet model)"),xJe=l(),qm=a("li"),jte=a("strong"),$Je=o("mt5"),kJe=o(" \u2014 "),QS=a("a"),SJe=o("MT5Config"),RJe=o(" (MT5 model)"),PJe=l(),jm=a("li"),Dte=a("strong"),BJe=o("nystromformer"),IJe=o(" \u2014 "),HS=a("a"),NJe=o("NystromformerConfig"),qJe=o(" (Nystr\xF6mformer model)"),jJe=l(),Dm=a("li"),Gte=a("strong"),DJe=o("openai-gpt"),GJe=o(" \u2014 "),US=a("a"),OJe=o("OpenAIGPTConfig"),VJe=o(" (OpenAI GPT model)"),XJe=l(),Gm=a("li"),Ote=a("strong"),zJe=o("opt"),WJe=o(" \u2014 "),JS=a("a"),QJe=o("OPTConfig"),HJe=o(" (OPT model)"),UJe=l(),Om=a("li"),Vte=a("strong"),JJe=o("pegasus"),YJe=o(" \u2014 "),YS=a("a"),KJe=o("PegasusConfig"),ZJe=o(" (Pegasus model)"),eYe=l(),Vm=a("li"),Xte=a("strong"),oYe=o("perceiver"),rYe=o(" \u2014 "),KS=a("a"),tYe=o("PerceiverConfig"),aYe=o(" (Perceiver model)"),nYe=l(),Xm=a("li"),zte=a("strong"),sYe=o("plbart"),lYe=o(" \u2014 "),ZS=a("a"),iYe=o("PLBartConfig"),dYe=o(" (PLBart model)"),cYe=l(),zm=a("li"),Wte=a("strong"),fYe=o("poolformer"),mYe=o(" \u2014 "),eR=a("a"),gYe=o("PoolFormerConfig"),hYe=o(" (PoolFormer model)"),pYe=l(),Wm=a("li"),Qte=a("strong"),uYe=o("prophetnet"),_Ye=o(" \u2014 "),oR=a("a"),bYe=o("ProphetNetConfig"),vYe=o(" (ProphetNet model)"),FYe=l(),Qm=a("li"),Hte=a("strong"),TYe=o("qdqbert"),MYe=o(" \u2014 "),rR=a("a"),EYe=o("QDQBertConfig"),CYe=o(" (QDQBert model)"),wYe=l(),Hm=a("li"),Ute=a("strong"),AYe=o("rag"),yYe=o(" \u2014 "),tR=a("a"),LYe=o("RagConfig"),xYe=o(" (RAG model)"),$Ye=l(),Um=a("li"),Jte=a("strong"),kYe=o("realm"),SYe=o(" \u2014 "),aR=a("a"),RYe=o("RealmConfig"),PYe=o(" (REALM model)"),BYe=l(),Jm=a("li"),Yte=a("strong"),IYe=o("reformer"),NYe=o(" \u2014 "),nR=a("a"),qYe=o("ReformerConfig"),jYe=o(" (Reformer model)"),DYe=l(),Ym=a("li"),Kte=a("strong"),GYe=o("regnet"),OYe=o(" \u2014 "),sR=a("a"),VYe=o("RegNetConfig"),XYe=o(" (RegNet model)"),zYe=l(),Km=a("li"),Zte=a("strong"),WYe=o("rembert"),QYe=o(" \u2014 "),lR=a("a"),HYe=o("RemBertConfig"),UYe=o(" (RemBERT model)"),JYe=l(),Zm=a("li"),eae=a("strong"),YYe=o("resnet"),KYe=o(" \u2014 "),iR=a("a"),ZYe=o("ResNetConfig"),eKe=o(" (ResNet model)"),oKe=l(),eg=a("li"),oae=a("strong"),rKe=o("retribert"),tKe=o(" \u2014 "),dR=a("a"),aKe=o("RetriBertConfig"),nKe=o(" (RetriBERT model)"),sKe=l(),og=a("li"),rae=a("strong"),lKe=o("roberta"),iKe=o(" \u2014 "),cR=a("a"),dKe=o("RobertaConfig"),cKe=o(" (RoBERTa model)"),fKe=l(),rg=a("li"),tae=a("strong"),mKe=o("roformer"),gKe=o(" \u2014 "),fR=a("a"),hKe=o("RoFormerConfig"),pKe=o(" (RoFormer model)"),uKe=l(),tg=a("li"),aae=a("strong"),_Ke=o("segformer"),bKe=o(" \u2014 "),mR=a("a"),vKe=o("SegformerConfig"),FKe=o(" (SegFormer model)"),TKe=l(),ag=a("li"),nae=a("strong"),MKe=o("sew"),EKe=o(" \u2014 "),gR=a("a"),CKe=o("SEWConfig"),wKe=o(" (SEW model)"),AKe=l(),ng=a("li"),sae=a("strong"),yKe=o("sew-d"),LKe=o(" \u2014 "),hR=a("a"),xKe=o("SEWDConfig"),$Ke=o(" (SEW-D model)"),kKe=l(),sg=a("li"),lae=a("strong"),SKe=o("speech-encoder-decoder"),RKe=o(" \u2014 "),pR=a("a"),PKe=o("SpeechEncoderDecoderConfig"),BKe=o(" (Speech Encoder decoder model)"),IKe=l(),lg=a("li"),iae=a("strong"),NKe=o("speech_to_text"),qKe=o(" \u2014 "),uR=a("a"),jKe=o("Speech2TextConfig"),DKe=o(" (Speech2Text model)"),GKe=l(),ig=a("li"),dae=a("strong"),OKe=o("speech_to_text_2"),VKe=o(" \u2014 "),_R=a("a"),XKe=o("Speech2Text2Config"),zKe=o(" (Speech2Text2 model)"),WKe=l(),dg=a("li"),cae=a("strong"),QKe=o("splinter"),HKe=o(" \u2014 "),bR=a("a"),UKe=o("SplinterConfig"),JKe=o(" (Splinter model)"),YKe=l(),cg=a("li"),fae=a("strong"),KKe=o("squeezebert"),ZKe=o(" \u2014 "),vR=a("a"),eZe=o("SqueezeBertConfig"),oZe=o(" (SqueezeBERT model)"),rZe=l(),fg=a("li"),mae=a("strong"),tZe=o("swin"),aZe=o(" \u2014 "),FR=a("a"),nZe=o("SwinConfig"),sZe=o(" (Swin Transformer model)"),lZe=l(),mg=a("li"),gae=a("strong"),iZe=o("t5"),dZe=o(" \u2014 "),TR=a("a"),cZe=o("T5Config"),fZe=o(" (T5 model)"),mZe=l(),gg=a("li"),hae=a("strong"),gZe=o("tapas"),hZe=o(" \u2014 "),MR=a("a"),pZe=o("TapasConfig"),uZe=o(" (TAPAS model)"),_Ze=l(),hg=a("li"),pae=a("strong"),bZe=o("trajectory_transformer"),vZe=o(" \u2014 "),ER=a("a"),FZe=o("TrajectoryTransformerConfig"),TZe=o(" (Trajectory Transformer model)"),MZe=l(),pg=a("li"),uae=a("strong"),EZe=o("transfo-xl"),CZe=o(" \u2014 "),CR=a("a"),wZe=o("TransfoXLConfig"),AZe=o(" (Transformer-XL model)"),yZe=l(),ug=a("li"),_ae=a("strong"),LZe=o("trocr"),xZe=o(" \u2014 "),wR=a("a"),$Ze=o("TrOCRConfig"),kZe=o(" (TrOCR model)"),SZe=l(),_g=a("li"),bae=a("strong"),RZe=o("unispeech"),PZe=o(" \u2014 "),AR=a("a"),BZe=o("UniSpeechConfig"),IZe=o(" (UniSpeech model)"),NZe=l(),bg=a("li"),vae=a("strong"),qZe=o("unispeech-sat"),jZe=o(" \u2014 "),yR=a("a"),DZe=o("UniSpeechSatConfig"),GZe=o(" (UniSpeechSat model)"),OZe=l(),vg=a("li"),Fae=a("strong"),VZe=o("van"),XZe=o(" \u2014 "),LR=a("a"),zZe=o("VanConfig"),WZe=o(" (VAN model)"),QZe=l(),Fg=a("li"),Tae=a("strong"),HZe=o("vilt"),UZe=o(" \u2014 "),xR=a("a"),JZe=o("ViltConfig"),YZe=o(" (ViLT model)"),KZe=l(),Tg=a("li"),Mae=a("strong"),ZZe=o("vision-encoder-decoder"),eeo=o(" \u2014 "),$R=a("a"),oeo=o("VisionEncoderDecoderConfig"),reo=o(" (Vision Encoder decoder model)"),teo=l(),Mg=a("li"),Eae=a("strong"),aeo=o("vision-text-dual-encoder"),neo=o(" \u2014 "),kR=a("a"),seo=o("VisionTextDualEncoderConfig"),leo=o(" (VisionTextDualEncoder model)"),ieo=l(),Eg=a("li"),Cae=a("strong"),deo=o("visual_bert"),ceo=o(" \u2014 "),SR=a("a"),feo=o("VisualBertConfig"),meo=o(" (VisualBERT model)"),geo=l(),Cg=a("li"),wae=a("strong"),heo=o("vit"),peo=o(" \u2014 "),RR=a("a"),ueo=o("ViTConfig"),_eo=o(" (ViT model)"),beo=l(),wg=a("li"),Aae=a("strong"),veo=o("vit_mae"),Feo=o(" \u2014 "),PR=a("a"),Teo=o("ViTMAEConfig"),Meo=o(" (ViTMAE model)"),Eeo=l(),Ag=a("li"),yae=a("strong"),Ceo=o("wav2vec2"),weo=o(" \u2014 "),BR=a("a"),Aeo=o("Wav2Vec2Config"),yeo=o(" (Wav2Vec2 model)"),Leo=l(),yg=a("li"),Lae=a("strong"),xeo=o("wav2vec2-conformer"),$eo=o(" \u2014 "),IR=a("a"),keo=o("Wav2Vec2ConformerConfig"),Seo=o(" (Wav2Vec2-Conformer model)"),Reo=l(),Lg=a("li"),xae=a("strong"),Peo=o("wavlm"),Beo=o(" \u2014 "),NR=a("a"),Ieo=o("WavLMConfig"),Neo=o(" (WavLM model)"),qeo=l(),xg=a("li"),$ae=a("strong"),jeo=o("xglm"),Deo=o(" \u2014 "),qR=a("a"),Geo=o("XGLMConfig"),Oeo=o(" (XGLM model)"),Veo=l(),$g=a("li"),kae=a("strong"),Xeo=o("xlm"),zeo=o(" \u2014 "),jR=a("a"),Weo=o("XLMConfig"),Qeo=o(" (XLM model)"),Heo=l(),kg=a("li"),Sae=a("strong"),Ueo=o("xlm-prophetnet"),Jeo=o(" \u2014 "),DR=a("a"),Yeo=o("XLMProphetNetConfig"),Keo=o(" (XLM-ProphetNet model)"),Zeo=l(),Sg=a("li"),Rae=a("strong"),eoo=o("xlm-roberta"),ooo=o(" \u2014 "),GR=a("a"),roo=o("XLMRobertaConfig"),too=o(" (XLM-RoBERTa model)"),aoo=l(),Rg=a("li"),Pae=a("strong"),noo=o("xlm-roberta-xl"),soo=o(" \u2014 "),OR=a("a"),loo=o("XLMRobertaXLConfig"),ioo=o(" (XLM-RoBERTa-XL model)"),doo=l(),Pg=a("li"),Bae=a("strong"),coo=o("xlnet"),foo=o(" \u2014 "),VR=a("a"),moo=o("XLNetConfig"),goo=o(" (XLNet model)"),hoo=l(),Bg=a("li"),Iae=a("strong"),poo=o("yolos"),uoo=o(" \u2014 "),XR=a("a"),_oo=o("YolosConfig"),boo=o(" (YOLOS model)"),voo=l(),Ig=a("li"),Nae=a("strong"),Foo=o("yoso"),Too=o(" \u2014 "),zR=a("a"),Moo=o("YosoConfig"),Eoo=o(" (YOSO model)"),Coo=l(),F(Ng.$$.fragment),woo=l(),qg=a("div"),F(_0.$$.fragment),Aoo=l(),qae=a("p"),yoo=o("Register a new configuration for this class."),MDe=l(),xi=a("h2"),jg=a("a"),jae=a("span"),F(b0.$$.fragment),Loo=l(),Dae=a("span"),xoo=o("AutoTokenizer"),EDe=l(),Ao=a("div"),F(v0.$$.fragment),$oo=l(),F0=a("p"),koo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WR=a("a"),Soo=o("AutoTokenizer.from_pretrained()"),Roo=o(" class method."),Poo=l(),T0=a("p"),Boo=o("This class cannot be instantiated directly using "),Gae=a("code"),Ioo=o("__init__()"),Noo=o(" (throws an error)."),qoo=l(),Ar=a("div"),F(M0.$$.fragment),joo=l(),Oae=a("p"),Doo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Goo=l(),$a=a("p"),Ooo=o("The tokenizer class to instantiate is selected based on the "),Vae=a("code"),Voo=o("model_type"),Xoo=o(` property of the config object (either
passed as an argument or loaded from `),Xae=a("code"),zoo=o("pretrained_model_name_or_path"),Woo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zae=a("code"),Qoo=o("pretrained_model_name_or_path"),Hoo=o(":"),Uoo=l(),k=a("ul"),Nn=a("li"),Wae=a("strong"),Joo=o("albert"),Yoo=o(" \u2014 "),QR=a("a"),Koo=o("AlbertTokenizer"),Zoo=o(" or "),HR=a("a"),ero=o("AlbertTokenizerFast"),oro=o(" (ALBERT model)"),rro=l(),qn=a("li"),Qae=a("strong"),tro=o("bart"),aro=o(" \u2014 "),UR=a("a"),nro=o("BartTokenizer"),sro=o(" or "),JR=a("a"),lro=o("BartTokenizerFast"),iro=o(" (BART model)"),dro=l(),jn=a("li"),Hae=a("strong"),cro=o("barthez"),fro=o(" \u2014 "),YR=a("a"),mro=o("BarthezTokenizer"),gro=o(" or "),KR=a("a"),hro=o("BarthezTokenizerFast"),pro=o(" (BARThez model)"),uro=l(),Dg=a("li"),Uae=a("strong"),_ro=o("bartpho"),bro=o(" \u2014 "),ZR=a("a"),vro=o("BartphoTokenizer"),Fro=o(" (BARTpho model)"),Tro=l(),Dn=a("li"),Jae=a("strong"),Mro=o("bert"),Ero=o(" \u2014 "),eP=a("a"),Cro=o("BertTokenizer"),wro=o(" or "),oP=a("a"),Aro=o("BertTokenizerFast"),yro=o(" (BERT model)"),Lro=l(),Gg=a("li"),Yae=a("strong"),xro=o("bert-generation"),$ro=o(" \u2014 "),rP=a("a"),kro=o("BertGenerationTokenizer"),Sro=o(" (Bert Generation model)"),Rro=l(),Og=a("li"),Kae=a("strong"),Pro=o("bert-japanese"),Bro=o(" \u2014 "),tP=a("a"),Iro=o("BertJapaneseTokenizer"),Nro=o(" (BertJapanese model)"),qro=l(),Vg=a("li"),Zae=a("strong"),jro=o("bertweet"),Dro=o(" \u2014 "),aP=a("a"),Gro=o("BertweetTokenizer"),Oro=o(" (BERTweet model)"),Vro=l(),Gn=a("li"),ene=a("strong"),Xro=o("big_bird"),zro=o(" \u2014 "),nP=a("a"),Wro=o("BigBirdTokenizer"),Qro=o(" or "),sP=a("a"),Hro=o("BigBirdTokenizerFast"),Uro=o(" (BigBird model)"),Jro=l(),On=a("li"),one=a("strong"),Yro=o("bigbird_pegasus"),Kro=o(" \u2014 "),lP=a("a"),Zro=o("PegasusTokenizer"),eto=o(" or "),iP=a("a"),oto=o("PegasusTokenizerFast"),rto=o(" (BigBird-Pegasus model)"),tto=l(),Vn=a("li"),rne=a("strong"),ato=o("blenderbot"),nto=o(" \u2014 "),dP=a("a"),sto=o("BlenderbotTokenizer"),lto=o(" or "),cP=a("a"),ito=o("BlenderbotTokenizerFast"),dto=o(" (Blenderbot model)"),cto=l(),Xg=a("li"),tne=a("strong"),fto=o("blenderbot-small"),mto=o(" \u2014 "),fP=a("a"),gto=o("BlenderbotSmallTokenizer"),hto=o(" (BlenderbotSmall model)"),pto=l(),zg=a("li"),ane=a("strong"),uto=o("bloom"),_to=o(" \u2014 "),mP=a("a"),bto=o("BloomTokenizerFast"),vto=o(" (BLOOM model)"),Fto=l(),Wg=a("li"),nne=a("strong"),Tto=o("byt5"),Mto=o(" \u2014 "),gP=a("a"),Eto=o("ByT5Tokenizer"),Cto=o(" (ByT5 model)"),wto=l(),Xn=a("li"),sne=a("strong"),Ato=o("camembert"),yto=o(" \u2014 "),hP=a("a"),Lto=o("CamembertTokenizer"),xto=o(" or "),pP=a("a"),$to=o("CamembertTokenizerFast"),kto=o(" (CamemBERT model)"),Sto=l(),Qg=a("li"),lne=a("strong"),Rto=o("canine"),Pto=o(" \u2014 "),uP=a("a"),Bto=o("CanineTokenizer"),Ito=o(" (CANINE model)"),Nto=l(),zn=a("li"),ine=a("strong"),qto=o("clip"),jto=o(" \u2014 "),_P=a("a"),Dto=o("CLIPTokenizer"),Gto=o(" or "),bP=a("a"),Oto=o("CLIPTokenizerFast"),Vto=o(" (CLIP model)"),Xto=l(),Wn=a("li"),dne=a("strong"),zto=o("convbert"),Wto=o(" \u2014 "),vP=a("a"),Qto=o("ConvBertTokenizer"),Hto=o(" or "),FP=a("a"),Uto=o("ConvBertTokenizerFast"),Jto=o(" (ConvBERT model)"),Yto=l(),Qn=a("li"),cne=a("strong"),Kto=o("cpm"),Zto=o(" \u2014 "),TP=a("a"),eao=o("CpmTokenizer"),oao=o(" or "),MP=a("a"),rao=o("CpmTokenizerFast"),tao=o(" (CPM model)"),aao=l(),Hg=a("li"),fne=a("strong"),nao=o("ctrl"),sao=o(" \u2014 "),EP=a("a"),lao=o("CTRLTokenizer"),iao=o(" (CTRL model)"),dao=l(),Hn=a("li"),mne=a("strong"),cao=o("data2vec-text"),fao=o(" \u2014 "),CP=a("a"),mao=o("RobertaTokenizer"),gao=o(" or "),wP=a("a"),hao=o("RobertaTokenizerFast"),pao=o(" (Data2VecText model)"),uao=l(),Un=a("li"),gne=a("strong"),_ao=o("deberta"),bao=o(" \u2014 "),AP=a("a"),vao=o("DebertaTokenizer"),Fao=o(" or "),yP=a("a"),Tao=o("DebertaTokenizerFast"),Mao=o(" (DeBERTa model)"),Eao=l(),Jn=a("li"),hne=a("strong"),Cao=o("deberta-v2"),wao=o(" \u2014 "),LP=a("a"),Aao=o("DebertaV2Tokenizer"),yao=o(" or "),xP=a("a"),Lao=o("DebertaV2TokenizerFast"),xao=o(" (DeBERTa-v2 model)"),$ao=l(),Yn=a("li"),pne=a("strong"),kao=o("distilbert"),Sao=o(" \u2014 "),$P=a("a"),Rao=o("DistilBertTokenizer"),Pao=o(" or "),kP=a("a"),Bao=o("DistilBertTokenizerFast"),Iao=o(" (DistilBERT model)"),Nao=l(),Kn=a("li"),une=a("strong"),qao=o("dpr"),jao=o(" \u2014 "),SP=a("a"),Dao=o("DPRQuestionEncoderTokenizer"),Gao=o(" or "),RP=a("a"),Oao=o("DPRQuestionEncoderTokenizerFast"),Vao=o(" (DPR model)"),Xao=l(),Zn=a("li"),_ne=a("strong"),zao=o("electra"),Wao=o(" \u2014 "),PP=a("a"),Qao=o("ElectraTokenizer"),Hao=o(" or "),BP=a("a"),Uao=o("ElectraTokenizerFast"),Jao=o(" (ELECTRA model)"),Yao=l(),Ug=a("li"),bne=a("strong"),Kao=o("flaubert"),Zao=o(" \u2014 "),IP=a("a"),eno=o("FlaubertTokenizer"),ono=o(" (FlauBERT model)"),rno=l(),es=a("li"),vne=a("strong"),tno=o("fnet"),ano=o(" \u2014 "),NP=a("a"),nno=o("FNetTokenizer"),sno=o(" or "),qP=a("a"),lno=o("FNetTokenizerFast"),ino=o(" (FNet model)"),dno=l(),Jg=a("li"),Fne=a("strong"),cno=o("fsmt"),fno=o(" \u2014 "),jP=a("a"),mno=o("FSMTTokenizer"),gno=o(" (FairSeq Machine-Translation model)"),hno=l(),os=a("li"),Tne=a("strong"),pno=o("funnel"),uno=o(" \u2014 "),DP=a("a"),_no=o("FunnelTokenizer"),bno=o(" or "),GP=a("a"),vno=o("FunnelTokenizerFast"),Fno=o(" (Funnel Transformer model)"),Tno=l(),rs=a("li"),Mne=a("strong"),Mno=o("gpt2"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("GPT2Tokenizer"),wno=o(" or "),VP=a("a"),Ano=o("GPT2TokenizerFast"),yno=o(" (OpenAI GPT-2 model)"),Lno=l(),ts=a("li"),Ene=a("strong"),xno=o("gpt_neo"),$no=o(" \u2014 "),XP=a("a"),kno=o("GPT2Tokenizer"),Sno=o(" or "),zP=a("a"),Rno=o("GPT2TokenizerFast"),Pno=o(" (GPT Neo model)"),Bno=l(),Yg=a("li"),Cne=a("strong"),Ino=o("gpt_neox"),Nno=o(" \u2014 "),WP=a("a"),qno=o("GPTNeoXTokenizerFast"),jno=o(" (GPT NeoX model)"),Dno=l(),as=a("li"),wne=a("strong"),Gno=o("gptj"),Ono=o(" \u2014 "),QP=a("a"),Vno=o("GPT2Tokenizer"),Xno=o(" or "),HP=a("a"),zno=o("GPT2TokenizerFast"),Wno=o(" (GPT-J model)"),Qno=l(),ns=a("li"),Ane=a("strong"),Hno=o("herbert"),Uno=o(" \u2014 "),UP=a("a"),Jno=o("HerbertTokenizer"),Yno=o(" or "),JP=a("a"),Kno=o("HerbertTokenizerFast"),Zno=o(" (HerBERT model)"),eso=l(),Kg=a("li"),yne=a("strong"),oso=o("hubert"),rso=o(" \u2014 "),YP=a("a"),tso=o("Wav2Vec2CTCTokenizer"),aso=o(" (Hubert model)"),nso=l(),ss=a("li"),Lne=a("strong"),sso=o("ibert"),lso=o(" \u2014 "),KP=a("a"),iso=o("RobertaTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("RobertaTokenizerFast"),fso=o(" (I-BERT model)"),mso=l(),ls=a("li"),xne=a("strong"),gso=o("layoutlm"),hso=o(" \u2014 "),eB=a("a"),pso=o("LayoutLMTokenizer"),uso=o(" or "),oB=a("a"),_so=o("LayoutLMTokenizerFast"),bso=o(" (LayoutLM model)"),vso=l(),is=a("li"),$ne=a("strong"),Fso=o("layoutlmv2"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("LayoutLMv2Tokenizer"),Eso=o(" or "),tB=a("a"),Cso=o("LayoutLMv2TokenizerFast"),wso=o(" (LayoutLMv2 model)"),Aso=l(),ds=a("li"),kne=a("strong"),yso=o("layoutlmv3"),Lso=o(" \u2014 "),aB=a("a"),xso=o("LayoutLMv3Tokenizer"),$so=o(" or "),nB=a("a"),kso=o("LayoutLMv3TokenizerFast"),Sso=o(" (LayoutLMv3 model)"),Rso=l(),cs=a("li"),Sne=a("strong"),Pso=o("layoutxlm"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("LayoutXLMTokenizer"),Nso=o(" or "),lB=a("a"),qso=o("LayoutXLMTokenizerFast"),jso=o(" (LayoutXLM model)"),Dso=l(),fs=a("li"),Rne=a("strong"),Gso=o("led"),Oso=o(" \u2014 "),iB=a("a"),Vso=o("LEDTokenizer"),Xso=o(" or "),dB=a("a"),zso=o("LEDTokenizerFast"),Wso=o(" (LED model)"),Qso=l(),ms=a("li"),Pne=a("strong"),Hso=o("longformer"),Uso=o(" \u2014 "),cB=a("a"),Jso=o("LongformerTokenizer"),Yso=o(" or "),fB=a("a"),Kso=o("LongformerTokenizerFast"),Zso=o(" (Longformer model)"),elo=l(),Zg=a("li"),Bne=a("strong"),olo=o("luke"),rlo=o(" \u2014 "),mB=a("a"),tlo=o("LukeTokenizer"),alo=o(" (LUKE model)"),nlo=l(),gs=a("li"),Ine=a("strong"),slo=o("lxmert"),llo=o(" \u2014 "),gB=a("a"),ilo=o("LxmertTokenizer"),dlo=o(" or "),hB=a("a"),clo=o("LxmertTokenizerFast"),flo=o(" (LXMERT model)"),mlo=l(),eh=a("li"),Nne=a("strong"),glo=o("m2m_100"),hlo=o(" \u2014 "),pB=a("a"),plo=o("M2M100Tokenizer"),ulo=o(" (M2M100 model)"),_lo=l(),oh=a("li"),qne=a("strong"),blo=o("marian"),vlo=o(" \u2014 "),uB=a("a"),Flo=o("MarianTokenizer"),Tlo=o(" (Marian model)"),Mlo=l(),hs=a("li"),jne=a("strong"),Elo=o("mbart"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("MBartTokenizer"),Alo=o(" or "),bB=a("a"),ylo=o("MBartTokenizerFast"),Llo=o(" (mBART model)"),xlo=l(),ps=a("li"),Dne=a("strong"),$lo=o("mbart50"),klo=o(" \u2014 "),vB=a("a"),Slo=o("MBart50Tokenizer"),Rlo=o(" or "),FB=a("a"),Plo=o("MBart50TokenizerFast"),Blo=o(" (mBART-50 model)"),Ilo=l(),us=a("li"),Gne=a("strong"),Nlo=o("megatron-bert"),qlo=o(" \u2014 "),TB=a("a"),jlo=o("BertTokenizer"),Dlo=o(" or "),MB=a("a"),Glo=o("BertTokenizerFast"),Olo=o(" (Megatron-BERT model)"),Vlo=l(),rh=a("li"),One=a("strong"),Xlo=o("mluke"),zlo=o(" \u2014 "),EB=a("a"),Wlo=o("MLukeTokenizer"),Qlo=o(" (mLUKE model)"),Hlo=l(),_s=a("li"),Vne=a("strong"),Ulo=o("mobilebert"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("MobileBertTokenizer"),Klo=o(" or "),wB=a("a"),Zlo=o("MobileBertTokenizerFast"),eio=o(" (MobileBERT model)"),oio=l(),bs=a("li"),Xne=a("strong"),rio=o("mpnet"),tio=o(" \u2014 "),AB=a("a"),aio=o("MPNetTokenizer"),nio=o(" or "),yB=a("a"),sio=o("MPNetTokenizerFast"),lio=o(" (MPNet model)"),iio=l(),vs=a("li"),zne=a("strong"),dio=o("mt5"),cio=o(" \u2014 "),LB=a("a"),fio=o("MT5Tokenizer"),mio=o(" or "),xB=a("a"),gio=o("MT5TokenizerFast"),hio=o(" (MT5 model)"),pio=l(),Fs=a("li"),Wne=a("strong"),uio=o("nystromformer"),_io=o(" \u2014 "),$B=a("a"),bio=o("AlbertTokenizer"),vio=o(" or "),kB=a("a"),Fio=o("AlbertTokenizerFast"),Tio=o(" (Nystr\xF6mformer model)"),Mio=l(),Ts=a("li"),Qne=a("strong"),Eio=o("openai-gpt"),Cio=o(" \u2014 "),SB=a("a"),wio=o("OpenAIGPTTokenizer"),Aio=o(" or "),RB=a("a"),yio=o("OpenAIGPTTokenizerFast"),Lio=o(" (OpenAI GPT model)"),xio=l(),th=a("li"),Hne=a("strong"),$io=o("opt"),kio=o(" \u2014 "),PB=a("a"),Sio=o("GPT2Tokenizer"),Rio=o(" (OPT model)"),Pio=l(),Ms=a("li"),Une=a("strong"),Bio=o("pegasus"),Iio=o(" \u2014 "),BB=a("a"),Nio=o("PegasusTokenizer"),qio=o(" or "),IB=a("a"),jio=o("PegasusTokenizerFast"),Dio=o(" (Pegasus model)"),Gio=l(),ah=a("li"),Jne=a("strong"),Oio=o("perceiver"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("PerceiverTokenizer"),zio=o(" (Perceiver model)"),Wio=l(),nh=a("li"),Yne=a("strong"),Qio=o("phobert"),Hio=o(" \u2014 "),qB=a("a"),Uio=o("PhobertTokenizer"),Jio=o(" (PhoBERT model)"),Yio=l(),sh=a("li"),Kne=a("strong"),Kio=o("plbart"),Zio=o(" \u2014 "),jB=a("a"),edo=o("PLBartTokenizer"),odo=o(" (PLBart model)"),rdo=l(),lh=a("li"),Zne=a("strong"),tdo=o("prophetnet"),ado=o(" \u2014 "),DB=a("a"),ndo=o("ProphetNetTokenizer"),sdo=o(" (ProphetNet model)"),ldo=l(),Es=a("li"),ese=a("strong"),ido=o("qdqbert"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("BertTokenizer"),fdo=o(" or "),OB=a("a"),mdo=o("BertTokenizerFast"),gdo=o(" (QDQBert model)"),hdo=l(),ih=a("li"),ose=a("strong"),pdo=o("rag"),udo=o(" \u2014 "),VB=a("a"),_do=o("RagTokenizer"),bdo=o(" (RAG model)"),vdo=l(),Cs=a("li"),rse=a("strong"),Fdo=o("realm"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("RealmTokenizer"),Edo=o(" or "),zB=a("a"),Cdo=o("RealmTokenizerFast"),wdo=o(" (REALM model)"),Ado=l(),ws=a("li"),tse=a("strong"),ydo=o("reformer"),Ldo=o(" \u2014 "),WB=a("a"),xdo=o("ReformerTokenizer"),$do=o(" or "),QB=a("a"),kdo=o("ReformerTokenizerFast"),Sdo=o(" (Reformer model)"),Rdo=l(),As=a("li"),ase=a("strong"),Pdo=o("rembert"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("RemBertTokenizer"),Ndo=o(" or "),UB=a("a"),qdo=o("RemBertTokenizerFast"),jdo=o(" (RemBERT model)"),Ddo=l(),ys=a("li"),nse=a("strong"),Gdo=o("retribert"),Odo=o(" \u2014 "),JB=a("a"),Vdo=o("RetriBertTokenizer"),Xdo=o(" or "),YB=a("a"),zdo=o("RetriBertTokenizerFast"),Wdo=o(" (RetriBERT model)"),Qdo=l(),Ls=a("li"),sse=a("strong"),Hdo=o("roberta"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("RobertaTokenizer"),Ydo=o(" or "),ZB=a("a"),Kdo=o("RobertaTokenizerFast"),Zdo=o(" (RoBERTa model)"),eco=l(),xs=a("li"),lse=a("strong"),oco=o("roformer"),rco=o(" \u2014 "),eI=a("a"),tco=o("RoFormerTokenizer"),aco=o(" or "),oI=a("a"),nco=o("RoFormerTokenizerFast"),sco=o(" (RoFormer model)"),lco=l(),dh=a("li"),ise=a("strong"),ico=o("speech_to_text"),dco=o(" \u2014 "),rI=a("a"),cco=o("Speech2TextTokenizer"),fco=o(" (Speech2Text model)"),mco=l(),ch=a("li"),dse=a("strong"),gco=o("speech_to_text_2"),hco=o(" \u2014 "),tI=a("a"),pco=o("Speech2Text2Tokenizer"),uco=o(" (Speech2Text2 model)"),_co=l(),$s=a("li"),cse=a("strong"),bco=o("splinter"),vco=o(" \u2014 "),aI=a("a"),Fco=o("SplinterTokenizer"),Tco=o(" or "),nI=a("a"),Mco=o("SplinterTokenizerFast"),Eco=o(" (Splinter model)"),Cco=l(),ks=a("li"),fse=a("strong"),wco=o("squeezebert"),Aco=o(" \u2014 "),sI=a("a"),yco=o("SqueezeBertTokenizer"),Lco=o(" or "),lI=a("a"),xco=o("SqueezeBertTokenizerFast"),$co=o(" (SqueezeBERT model)"),kco=l(),Ss=a("li"),mse=a("strong"),Sco=o("t5"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("T5Tokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("T5TokenizerFast"),Nco=o(" (T5 model)"),qco=l(),fh=a("li"),gse=a("strong"),jco=o("tapas"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("TapasTokenizer"),Oco=o(" (TAPAS model)"),Vco=l(),mh=a("li"),hse=a("strong"),Xco=o("tapex"),zco=o(" \u2014 "),fI=a("a"),Wco=o("TapexTokenizer"),Qco=o(" (TAPEX model)"),Hco=l(),gh=a("li"),pse=a("strong"),Uco=o("transfo-xl"),Jco=o(" \u2014 "),mI=a("a"),Yco=o("TransfoXLTokenizer"),Kco=o(" (Transformer-XL model)"),Zco=l(),Rs=a("li"),use=a("strong"),efo=o("vilt"),ofo=o(" \u2014 "),gI=a("a"),rfo=o("BertTokenizer"),tfo=o(" or "),hI=a("a"),afo=o("BertTokenizerFast"),nfo=o(" (ViLT model)"),sfo=l(),Ps=a("li"),_se=a("strong"),lfo=o("visual_bert"),ifo=o(" \u2014 "),pI=a("a"),dfo=o("BertTokenizer"),cfo=o(" or "),uI=a("a"),ffo=o("BertTokenizerFast"),mfo=o(" (VisualBERT model)"),gfo=l(),hh=a("li"),bse=a("strong"),hfo=o("wav2vec2"),pfo=o(" \u2014 "),_I=a("a"),ufo=o("Wav2Vec2CTCTokenizer"),_fo=o(" (Wav2Vec2 model)"),bfo=l(),ph=a("li"),vse=a("strong"),vfo=o("wav2vec2-conformer"),Ffo=o(" \u2014 "),bI=a("a"),Tfo=o("Wav2Vec2CTCTokenizer"),Mfo=o(" (Wav2Vec2-Conformer model)"),Efo=l(),uh=a("li"),Fse=a("strong"),Cfo=o("wav2vec2_phoneme"),wfo=o(" \u2014 "),vI=a("a"),Afo=o("Wav2Vec2PhonemeCTCTokenizer"),yfo=o(" (Wav2Vec2Phoneme model)"),Lfo=l(),Bs=a("li"),Tse=a("strong"),xfo=o("xglm"),$fo=o(" \u2014 "),FI=a("a"),kfo=o("XGLMTokenizer"),Sfo=o(" or "),TI=a("a"),Rfo=o("XGLMTokenizerFast"),Pfo=o(" (XGLM model)"),Bfo=l(),_h=a("li"),Mse=a("strong"),Ifo=o("xlm"),Nfo=o(" \u2014 "),MI=a("a"),qfo=o("XLMTokenizer"),jfo=o(" (XLM model)"),Dfo=l(),bh=a("li"),Ese=a("strong"),Gfo=o("xlm-prophetnet"),Ofo=o(" \u2014 "),EI=a("a"),Vfo=o("XLMProphetNetTokenizer"),Xfo=o(" (XLM-ProphetNet model)"),zfo=l(),Is=a("li"),Cse=a("strong"),Wfo=o("xlm-roberta"),Qfo=o(" \u2014 "),CI=a("a"),Hfo=o("XLMRobertaTokenizer"),Ufo=o(" or "),wI=a("a"),Jfo=o("XLMRobertaTokenizerFast"),Yfo=o(" (XLM-RoBERTa model)"),Kfo=l(),Ns=a("li"),wse=a("strong"),Zfo=o("xlm-roberta-xl"),emo=o(" \u2014 "),AI=a("a"),omo=o("RobertaTokenizer"),rmo=o(" or "),yI=a("a"),tmo=o("RobertaTokenizerFast"),amo=o(" (XLM-RoBERTa-XL model)"),nmo=l(),qs=a("li"),Ase=a("strong"),smo=o("xlnet"),lmo=o(" \u2014 "),LI=a("a"),imo=o("XLNetTokenizer"),dmo=o(" or "),xI=a("a"),cmo=o("XLNetTokenizerFast"),fmo=o(" (XLNet model)"),mmo=l(),js=a("li"),yse=a("strong"),gmo=o("yoso"),hmo=o(" \u2014 "),$I=a("a"),pmo=o("AlbertTokenizer"),umo=o(" or "),kI=a("a"),_mo=o("AlbertTokenizerFast"),bmo=o(" (YOSO model)"),vmo=l(),F(vh.$$.fragment),Fmo=l(),Fh=a("div"),F(E0.$$.fragment),Tmo=l(),Lse=a("p"),Mmo=o("Register a new tokenizer in this mapping."),CDe=l(),$i=a("h2"),Th=a("a"),xse=a("span"),F(C0.$$.fragment),Emo=l(),$se=a("span"),Cmo=o("AutoFeatureExtractor"),wDe=l(),yo=a("div"),F(w0.$$.fragment),wmo=l(),A0=a("p"),Amo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SI=a("a"),ymo=o("AutoFeatureExtractor.from_pretrained()"),Lmo=o(" class method."),xmo=l(),y0=a("p"),$mo=o("This class cannot be instantiated directly using "),kse=a("code"),kmo=o("__init__()"),Smo=o(" (throws an error)."),Rmo=l(),He=a("div"),F(L0.$$.fragment),Pmo=l(),Sse=a("p"),Bmo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Imo=l(),ka=a("p"),Nmo=o("The feature extractor class to instantiate is selected based on the "),Rse=a("code"),qmo=o("model_type"),jmo=o(` property of the config object
(either passed as an argument or loaded from `),Pse=a("code"),Dmo=o("pretrained_model_name_or_path"),Gmo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bse=a("code"),Omo=o("pretrained_model_name_or_path"),Vmo=o(":"),Xmo=l(),Y=a("ul"),Mh=a("li"),Ise=a("strong"),zmo=o("beit"),Wmo=o(" \u2014 "),RI=a("a"),Qmo=o("BeitFeatureExtractor"),Hmo=o(" (BEiT model)"),Umo=l(),Eh=a("li"),Nse=a("strong"),Jmo=o("clip"),Ymo=o(" \u2014 "),PI=a("a"),Kmo=o("CLIPFeatureExtractor"),Zmo=o(" (CLIP model)"),ego=l(),Ch=a("li"),qse=a("strong"),ogo=o("convnext"),rgo=o(" \u2014 "),BI=a("a"),tgo=o("ConvNextFeatureExtractor"),ago=o(" (ConvNeXT model)"),ngo=l(),wh=a("li"),jse=a("strong"),sgo=o("cvt"),lgo=o(" \u2014 "),II=a("a"),igo=o("ConvNextFeatureExtractor"),dgo=o(" (CvT model)"),cgo=l(),Ah=a("li"),Dse=a("strong"),fgo=o("data2vec-audio"),mgo=o(" \u2014 "),NI=a("a"),ggo=o("Wav2Vec2FeatureExtractor"),hgo=o(" (Data2VecAudio model)"),pgo=l(),yh=a("li"),Gse=a("strong"),ugo=o("data2vec-vision"),_go=o(" \u2014 "),qI=a("a"),bgo=o("BeitFeatureExtractor"),vgo=o(" (Data2VecVision model)"),Fgo=l(),Lh=a("li"),Ose=a("strong"),Tgo=o("deit"),Mgo=o(" \u2014 "),jI=a("a"),Ego=o("DeiTFeatureExtractor"),Cgo=o(" (DeiT model)"),wgo=l(),xh=a("li"),Vse=a("strong"),Ago=o("detr"),ygo=o(" \u2014 "),DI=a("a"),Lgo=o("DetrFeatureExtractor"),xgo=o(" (DETR model)"),$go=l(),$h=a("li"),Xse=a("strong"),kgo=o("dpt"),Sgo=o(" \u2014 "),GI=a("a"),Rgo=o("DPTFeatureExtractor"),Pgo=o(" (DPT model)"),Bgo=l(),kh=a("li"),zse=a("strong"),Igo=o("flava"),Ngo=o(" \u2014 "),OI=a("a"),qgo=o("FlavaFeatureExtractor"),jgo=o(" (FLAVA model)"),Dgo=l(),Sh=a("li"),Wse=a("strong"),Ggo=o("glpn"),Ogo=o(" \u2014 "),VI=a("a"),Vgo=o("GLPNFeatureExtractor"),Xgo=o(" (GLPN model)"),zgo=l(),Rh=a("li"),Qse=a("strong"),Wgo=o("hubert"),Qgo=o(" \u2014 "),XI=a("a"),Hgo=o("Wav2Vec2FeatureExtractor"),Ugo=o(" (Hubert model)"),Jgo=l(),Ph=a("li"),Hse=a("strong"),Ygo=o("imagegpt"),Kgo=o(" \u2014 "),zI=a("a"),Zgo=o("ImageGPTFeatureExtractor"),eho=o(" (ImageGPT model)"),oho=l(),Bh=a("li"),Use=a("strong"),rho=o("layoutlmv2"),tho=o(" \u2014 "),WI=a("a"),aho=o("LayoutLMv2FeatureExtractor"),nho=o(" (LayoutLMv2 model)"),sho=l(),Ih=a("li"),Jse=a("strong"),lho=o("layoutlmv3"),iho=o(" \u2014 "),QI=a("a"),dho=o("LayoutLMv3FeatureExtractor"),cho=o(" (LayoutLMv3 model)"),fho=l(),Nh=a("li"),Yse=a("strong"),mho=o("levit"),gho=o(" \u2014 "),HI=a("a"),hho=o("LevitFeatureExtractor"),pho=o(" (LeViT model)"),uho=l(),qh=a("li"),Kse=a("strong"),_ho=o("maskformer"),bho=o(" \u2014 "),UI=a("a"),vho=o("MaskFormerFeatureExtractor"),Fho=o(" (MaskFormer model)"),Tho=l(),jh=a("li"),Zse=a("strong"),Mho=o("mctct"),Eho=o(" \u2014 "),JI=a("a"),Cho=o("MCTCTFeatureExtractor"),who=o(" (M-CTC-T model)"),Aho=l(),Dh=a("li"),ele=a("strong"),yho=o("perceiver"),Lho=o(" \u2014 "),YI=a("a"),xho=o("PerceiverFeatureExtractor"),$ho=o(" (Perceiver model)"),kho=l(),Gh=a("li"),ole=a("strong"),Sho=o("poolformer"),Rho=o(" \u2014 "),KI=a("a"),Pho=o("PoolFormerFeatureExtractor"),Bho=o(" (PoolFormer model)"),Iho=l(),Oh=a("li"),rle=a("strong"),Nho=o("regnet"),qho=o(" \u2014 "),ZI=a("a"),jho=o("ConvNextFeatureExtractor"),Dho=o(" (RegNet model)"),Gho=l(),Vh=a("li"),tle=a("strong"),Oho=o("resnet"),Vho=o(" \u2014 "),eN=a("a"),Xho=o("ConvNextFeatureExtractor"),zho=o(" (ResNet model)"),Who=l(),Xh=a("li"),ale=a("strong"),Qho=o("segformer"),Hho=o(" \u2014 "),oN=a("a"),Uho=o("SegformerFeatureExtractor"),Jho=o(" (SegFormer model)"),Yho=l(),zh=a("li"),nle=a("strong"),Kho=o("speech_to_text"),Zho=o(" \u2014 "),rN=a("a"),epo=o("Speech2TextFeatureExtractor"),opo=o(" (Speech2Text model)"),rpo=l(),Wh=a("li"),sle=a("strong"),tpo=o("swin"),apo=o(" \u2014 "),tN=a("a"),npo=o("ViTFeatureExtractor"),spo=o(" (Swin Transformer model)"),lpo=l(),Qh=a("li"),lle=a("strong"),ipo=o("van"),dpo=o(" \u2014 "),aN=a("a"),cpo=o("ConvNextFeatureExtractor"),fpo=o(" (VAN model)"),mpo=l(),Hh=a("li"),ile=a("strong"),gpo=o("vilt"),hpo=o(" \u2014 "),nN=a("a"),ppo=o("ViltFeatureExtractor"),upo=o(" (ViLT model)"),_po=l(),Uh=a("li"),dle=a("strong"),bpo=o("vit"),vpo=o(" \u2014 "),sN=a("a"),Fpo=o("ViTFeatureExtractor"),Tpo=o(" (ViT model)"),Mpo=l(),Jh=a("li"),cle=a("strong"),Epo=o("vit_mae"),Cpo=o(" \u2014 "),lN=a("a"),wpo=o("ViTFeatureExtractor"),Apo=o(" (ViTMAE model)"),ypo=l(),Yh=a("li"),fle=a("strong"),Lpo=o("wav2vec2"),xpo=o(" \u2014 "),iN=a("a"),$po=o("Wav2Vec2FeatureExtractor"),kpo=o(" (Wav2Vec2 model)"),Spo=l(),Kh=a("li"),mle=a("strong"),Rpo=o("wav2vec2-conformer"),Ppo=o(" \u2014 "),dN=a("a"),Bpo=o("Wav2Vec2FeatureExtractor"),Ipo=o(" (Wav2Vec2-Conformer model)"),Npo=l(),Zh=a("li"),gle=a("strong"),qpo=o("yolos"),jpo=o(" \u2014 "),cN=a("a"),Dpo=o("YolosFeatureExtractor"),Gpo=o(" (YOLOS model)"),Opo=l(),F(ep.$$.fragment),Vpo=l(),F(op.$$.fragment),Xpo=l(),rp=a("div"),F(x0.$$.fragment),zpo=l(),hle=a("p"),Wpo=o("Register a new feature extractor for this class."),ADe=l(),ki=a("h2"),tp=a("a"),ple=a("span"),F($0.$$.fragment),Qpo=l(),ule=a("span"),Hpo=o("AutoProcessor"),yDe=l(),Lo=a("div"),F(k0.$$.fragment),Upo=l(),S0=a("p"),Jpo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fN=a("a"),Ypo=o("AutoProcessor.from_pretrained()"),Kpo=o(" class method."),Zpo=l(),R0=a("p"),euo=o("This class cannot be instantiated directly using "),_le=a("code"),ouo=o("__init__()"),ruo=o(" (throws an error)."),tuo=l(),Ue=a("div"),F(P0.$$.fragment),auo=l(),ble=a("p"),nuo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),suo=l(),Si=a("p"),luo=o("The processor class to instantiate is selected based on the "),vle=a("code"),iuo=o("model_type"),duo=o(` property of the config object (either
passed as an argument or loaded from `),Fle=a("code"),cuo=o("pretrained_model_name_or_path"),fuo=o(" if possible):"),muo=l(),he=a("ul"),ap=a("li"),Tle=a("strong"),guo=o("clip"),huo=o(" \u2014 "),mN=a("a"),puo=o("CLIPProcessor"),uuo=o(" (CLIP model)"),_uo=l(),np=a("li"),Mle=a("strong"),buo=o("flava"),vuo=o(" \u2014 "),Ele=a("code"),Fuo=o("FLAVAProcessor"),Tuo=o(" (FLAVA model)"),Muo=l(),sp=a("li"),Cle=a("strong"),Euo=o("layoutlmv2"),Cuo=o(" \u2014 "),gN=a("a"),wuo=o("LayoutLMv2Processor"),Auo=o(" (LayoutLMv2 model)"),yuo=l(),lp=a("li"),wle=a("strong"),Luo=o("layoutlmv3"),xuo=o(" \u2014 "),hN=a("a"),$uo=o("LayoutLMv3Processor"),kuo=o(" (LayoutLMv3 model)"),Suo=l(),ip=a("li"),Ale=a("strong"),Ruo=o("layoutxlm"),Puo=o(" \u2014 "),pN=a("a"),Buo=o("LayoutXLMProcessor"),Iuo=o(" (LayoutXLM model)"),Nuo=l(),dp=a("li"),yle=a("strong"),quo=o("sew"),juo=o(" \u2014 "),uN=a("a"),Duo=o("Wav2Vec2Processor"),Guo=o(" (SEW model)"),Ouo=l(),cp=a("li"),Lle=a("strong"),Vuo=o("sew-d"),Xuo=o(" \u2014 "),_N=a("a"),zuo=o("Wav2Vec2Processor"),Wuo=o(" (SEW-D model)"),Quo=l(),fp=a("li"),xle=a("strong"),Huo=o("speech_to_text"),Uuo=o(" \u2014 "),bN=a("a"),Juo=o("Speech2TextProcessor"),Yuo=o(" (Speech2Text model)"),Kuo=l(),mp=a("li"),$le=a("strong"),Zuo=o("speech_to_text_2"),e_o=o(" \u2014 "),vN=a("a"),o_o=o("Speech2Text2Processor"),r_o=o(" (Speech2Text2 model)"),t_o=l(),gp=a("li"),kle=a("strong"),a_o=o("trocr"),n_o=o(" \u2014 "),FN=a("a"),s_o=o("TrOCRProcessor"),l_o=o(" (TrOCR model)"),i_o=l(),hp=a("li"),Sle=a("strong"),d_o=o("unispeech"),c_o=o(" \u2014 "),TN=a("a"),f_o=o("Wav2Vec2Processor"),m_o=o(" (UniSpeech model)"),g_o=l(),pp=a("li"),Rle=a("strong"),h_o=o("unispeech-sat"),p_o=o(" \u2014 "),MN=a("a"),u_o=o("Wav2Vec2Processor"),__o=o(" (UniSpeechSat model)"),b_o=l(),up=a("li"),Ple=a("strong"),v_o=o("vilt"),F_o=o(" \u2014 "),EN=a("a"),T_o=o("ViltProcessor"),M_o=o(" (ViLT model)"),E_o=l(),_p=a("li"),Ble=a("strong"),C_o=o("vision-text-dual-encoder"),w_o=o(" \u2014 "),CN=a("a"),A_o=o("VisionTextDualEncoderProcessor"),y_o=o(" (VisionTextDualEncoder model)"),L_o=l(),bp=a("li"),Ile=a("strong"),x_o=o("wav2vec2"),$_o=o(" \u2014 "),wN=a("a"),k_o=o("Wav2Vec2Processor"),S_o=o(" (Wav2Vec2 model)"),R_o=l(),vp=a("li"),Nle=a("strong"),P_o=o("wav2vec2-conformer"),B_o=o(" \u2014 "),AN=a("a"),I_o=o("Wav2Vec2Processor"),N_o=o(" (Wav2Vec2-Conformer model)"),q_o=l(),Fp=a("li"),qle=a("strong"),j_o=o("wavlm"),D_o=o(" \u2014 "),yN=a("a"),G_o=o("Wav2Vec2Processor"),O_o=o(" (WavLM model)"),V_o=l(),F(Tp.$$.fragment),X_o=l(),F(Mp.$$.fragment),z_o=l(),Ep=a("div"),F(B0.$$.fragment),W_o=l(),jle=a("p"),Q_o=o("Register a new processor for this class."),LDe=l(),Ri=a("h2"),Cp=a("a"),Dle=a("span"),F(I0.$$.fragment),H_o=l(),Gle=a("span"),U_o=o("AutoModel"),xDe=l(),xo=a("div"),F(N0.$$.fragment),J_o=l(),Pi=a("p"),Y_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LN=a("a"),K_o=o("from_pretrained()"),Z_o=o(" class method or the "),xN=a("a"),e1o=o("from_config()"),o1o=o(` class
method.`),r1o=l(),q0=a("p"),t1o=o("This class cannot be instantiated directly using "),Ole=a("code"),a1o=o("__init__()"),n1o=o(" (throws an error)."),s1o=l(),nt=a("div"),F(j0.$$.fragment),l1o=l(),Vle=a("p"),i1o=o("Instantiates one of the base model classes of the library from a configuration."),d1o=l(),Bi=a("p"),c1o=o(`Note:
Loading a model from its configuration file does `),Xle=a("strong"),f1o=o("not"),m1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),g1o=o("from_pretrained()"),h1o=o(" to load the model weights."),p1o=l(),F(wp.$$.fragment),u1o=l(),Je=a("div"),F(D0.$$.fragment),_1o=l(),zle=a("p"),b1o=o("Instantiate one of the base model classes of the library from a pretrained model."),v1o=l(),Sa=a("p"),F1o=o("The model class to instantiate is selected based on the "),Wle=a("code"),T1o=o("model_type"),M1o=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),E1o=o("pretrained_model_name_or_path"),C1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=a("code"),w1o=o("pretrained_model_name_or_path"),A1o=o(":"),y1o=l(),x=a("ul"),Ap=a("li"),Ule=a("strong"),L1o=o("albert"),x1o=o(" \u2014 "),kN=a("a"),$1o=o("AlbertModel"),k1o=o(" (ALBERT model)"),S1o=l(),yp=a("li"),Jle=a("strong"),R1o=o("bart"),P1o=o(" \u2014 "),SN=a("a"),B1o=o("BartModel"),I1o=o(" (BART model)"),N1o=l(),Lp=a("li"),Yle=a("strong"),q1o=o("beit"),j1o=o(" \u2014 "),RN=a("a"),D1o=o("BeitModel"),G1o=o(" (BEiT model)"),O1o=l(),xp=a("li"),Kle=a("strong"),V1o=o("bert"),X1o=o(" \u2014 "),PN=a("a"),z1o=o("BertModel"),W1o=o(" (BERT model)"),Q1o=l(),$p=a("li"),Zle=a("strong"),H1o=o("bert-generation"),U1o=o(" \u2014 "),BN=a("a"),J1o=o("BertGenerationEncoder"),Y1o=o(" (Bert Generation model)"),K1o=l(),kp=a("li"),eie=a("strong"),Z1o=o("big_bird"),ebo=o(" \u2014 "),IN=a("a"),obo=o("BigBirdModel"),rbo=o(" (BigBird model)"),tbo=l(),Sp=a("li"),oie=a("strong"),abo=o("bigbird_pegasus"),nbo=o(" \u2014 "),NN=a("a"),sbo=o("BigBirdPegasusModel"),lbo=o(" (BigBird-Pegasus model)"),ibo=l(),Rp=a("li"),rie=a("strong"),dbo=o("blenderbot"),cbo=o(" \u2014 "),qN=a("a"),fbo=o("BlenderbotModel"),mbo=o(" (Blenderbot model)"),gbo=l(),Pp=a("li"),tie=a("strong"),hbo=o("blenderbot-small"),pbo=o(" \u2014 "),jN=a("a"),ubo=o("BlenderbotSmallModel"),_bo=o(" (BlenderbotSmall model)"),bbo=l(),Bp=a("li"),aie=a("strong"),vbo=o("bloom"),Fbo=o(" \u2014 "),DN=a("a"),Tbo=o("BloomModel"),Mbo=o(" (BLOOM model)"),Ebo=l(),Ip=a("li"),nie=a("strong"),Cbo=o("camembert"),wbo=o(" \u2014 "),GN=a("a"),Abo=o("CamembertModel"),ybo=o(" (CamemBERT model)"),Lbo=l(),Np=a("li"),sie=a("strong"),xbo=o("canine"),$bo=o(" \u2014 "),ON=a("a"),kbo=o("CanineModel"),Sbo=o(" (CANINE model)"),Rbo=l(),qp=a("li"),lie=a("strong"),Pbo=o("clip"),Bbo=o(" \u2014 "),VN=a("a"),Ibo=o("CLIPModel"),Nbo=o(" (CLIP model)"),qbo=l(),jp=a("li"),iie=a("strong"),jbo=o("convbert"),Dbo=o(" \u2014 "),XN=a("a"),Gbo=o("ConvBertModel"),Obo=o(" (ConvBERT model)"),Vbo=l(),Dp=a("li"),die=a("strong"),Xbo=o("convnext"),zbo=o(" \u2014 "),zN=a("a"),Wbo=o("ConvNextModel"),Qbo=o(" (ConvNeXT model)"),Hbo=l(),Gp=a("li"),cie=a("strong"),Ubo=o("ctrl"),Jbo=o(" \u2014 "),WN=a("a"),Ybo=o("CTRLModel"),Kbo=o(" (CTRL model)"),Zbo=l(),Op=a("li"),fie=a("strong"),e2o=o("cvt"),o2o=o(" \u2014 "),QN=a("a"),r2o=o("CvtModel"),t2o=o(" (CvT model)"),a2o=l(),Vp=a("li"),mie=a("strong"),n2o=o("data2vec-audio"),s2o=o(" \u2014 "),HN=a("a"),l2o=o("Data2VecAudioModel"),i2o=o(" (Data2VecAudio model)"),d2o=l(),Xp=a("li"),gie=a("strong"),c2o=o("data2vec-text"),f2o=o(" \u2014 "),UN=a("a"),m2o=o("Data2VecTextModel"),g2o=o(" (Data2VecText model)"),h2o=l(),zp=a("li"),hie=a("strong"),p2o=o("data2vec-vision"),u2o=o(" \u2014 "),JN=a("a"),_2o=o("Data2VecVisionModel"),b2o=o(" (Data2VecVision model)"),v2o=l(),Wp=a("li"),pie=a("strong"),F2o=o("deberta"),T2o=o(" \u2014 "),YN=a("a"),M2o=o("DebertaModel"),E2o=o(" (DeBERTa model)"),C2o=l(),Qp=a("li"),uie=a("strong"),w2o=o("deberta-v2"),A2o=o(" \u2014 "),KN=a("a"),y2o=o("DebertaV2Model"),L2o=o(" (DeBERTa-v2 model)"),x2o=l(),Hp=a("li"),_ie=a("strong"),$2o=o("decision_transformer"),k2o=o(" \u2014 "),ZN=a("a"),S2o=o("DecisionTransformerModel"),R2o=o(" (Decision Transformer model)"),P2o=l(),Up=a("li"),bie=a("strong"),B2o=o("deit"),I2o=o(" \u2014 "),eq=a("a"),N2o=o("DeiTModel"),q2o=o(" (DeiT model)"),j2o=l(),Jp=a("li"),vie=a("strong"),D2o=o("detr"),G2o=o(" \u2014 "),oq=a("a"),O2o=o("DetrModel"),V2o=o(" (DETR model)"),X2o=l(),Yp=a("li"),Fie=a("strong"),z2o=o("distilbert"),W2o=o(" \u2014 "),rq=a("a"),Q2o=o("DistilBertModel"),H2o=o(" (DistilBERT model)"),U2o=l(),Kp=a("li"),Tie=a("strong"),J2o=o("dpr"),Y2o=o(" \u2014 "),tq=a("a"),K2o=o("DPRQuestionEncoder"),Z2o=o(" (DPR model)"),evo=l(),Zp=a("li"),Mie=a("strong"),ovo=o("dpt"),rvo=o(" \u2014 "),aq=a("a"),tvo=o("DPTModel"),avo=o(" (DPT model)"),nvo=l(),eu=a("li"),Eie=a("strong"),svo=o("electra"),lvo=o(" \u2014 "),nq=a("a"),ivo=o("ElectraModel"),dvo=o(" (ELECTRA model)"),cvo=l(),ou=a("li"),Cie=a("strong"),fvo=o("flaubert"),mvo=o(" \u2014 "),sq=a("a"),gvo=o("FlaubertModel"),hvo=o(" (FlauBERT model)"),pvo=l(),ru=a("li"),wie=a("strong"),uvo=o("flava"),_vo=o(" \u2014 "),lq=a("a"),bvo=o("FlavaModel"),vvo=o(" (FLAVA model)"),Fvo=l(),tu=a("li"),Aie=a("strong"),Tvo=o("fnet"),Mvo=o(" \u2014 "),iq=a("a"),Evo=o("FNetModel"),Cvo=o(" (FNet model)"),wvo=l(),au=a("li"),yie=a("strong"),Avo=o("fsmt"),yvo=o(" \u2014 "),dq=a("a"),Lvo=o("FSMTModel"),xvo=o(" (FairSeq Machine-Translation model)"),$vo=l(),Ds=a("li"),Lie=a("strong"),kvo=o("funnel"),Svo=o(" \u2014 "),cq=a("a"),Rvo=o("FunnelModel"),Pvo=o(" or "),fq=a("a"),Bvo=o("FunnelBaseModel"),Ivo=o(" (Funnel Transformer model)"),Nvo=l(),nu=a("li"),xie=a("strong"),qvo=o("glpn"),jvo=o(" \u2014 "),mq=a("a"),Dvo=o("GLPNModel"),Gvo=o(" (GLPN model)"),Ovo=l(),su=a("li"),$ie=a("strong"),Vvo=o("gpt2"),Xvo=o(" \u2014 "),gq=a("a"),zvo=o("GPT2Model"),Wvo=o(" (OpenAI GPT-2 model)"),Qvo=l(),lu=a("li"),kie=a("strong"),Hvo=o("gpt_neo"),Uvo=o(" \u2014 "),hq=a("a"),Jvo=o("GPTNeoModel"),Yvo=o(" (GPT Neo model)"),Kvo=l(),iu=a("li"),Sie=a("strong"),Zvo=o("gpt_neox"),eFo=o(" \u2014 "),pq=a("a"),oFo=o("GPTNeoXModel"),rFo=o(" (GPT NeoX model)"),tFo=l(),du=a("li"),Rie=a("strong"),aFo=o("gptj"),nFo=o(" \u2014 "),uq=a("a"),sFo=o("GPTJModel"),lFo=o(" (GPT-J model)"),iFo=l(),cu=a("li"),Pie=a("strong"),dFo=o("hubert"),cFo=o(" \u2014 "),_q=a("a"),fFo=o("HubertModel"),mFo=o(" (Hubert model)"),gFo=l(),fu=a("li"),Bie=a("strong"),hFo=o("ibert"),pFo=o(" \u2014 "),bq=a("a"),uFo=o("IBertModel"),_Fo=o(" (I-BERT model)"),bFo=l(),mu=a("li"),Iie=a("strong"),vFo=o("imagegpt"),FFo=o(" \u2014 "),vq=a("a"),TFo=o("ImageGPTModel"),MFo=o(" (ImageGPT model)"),EFo=l(),gu=a("li"),Nie=a("strong"),CFo=o("layoutlm"),wFo=o(" \u2014 "),Fq=a("a"),AFo=o("LayoutLMModel"),yFo=o(" (LayoutLM model)"),LFo=l(),hu=a("li"),qie=a("strong"),xFo=o("layoutlmv2"),$Fo=o(" \u2014 "),Tq=a("a"),kFo=o("LayoutLMv2Model"),SFo=o(" (LayoutLMv2 model)"),RFo=l(),pu=a("li"),jie=a("strong"),PFo=o("layoutlmv3"),BFo=o(" \u2014 "),Mq=a("a"),IFo=o("LayoutLMv3Model"),NFo=o(" (LayoutLMv3 model)"),qFo=l(),uu=a("li"),Die=a("strong"),jFo=o("led"),DFo=o(" \u2014 "),Eq=a("a"),GFo=o("LEDModel"),OFo=o(" (LED model)"),VFo=l(),_u=a("li"),Gie=a("strong"),XFo=o("levit"),zFo=o(" \u2014 "),Cq=a("a"),WFo=o("LevitModel"),QFo=o(" (LeViT model)"),HFo=l(),bu=a("li"),Oie=a("strong"),UFo=o("longformer"),JFo=o(" \u2014 "),wq=a("a"),YFo=o("LongformerModel"),KFo=o(" (Longformer model)"),ZFo=l(),vu=a("li"),Vie=a("strong"),e6o=o("luke"),o6o=o(" \u2014 "),Aq=a("a"),r6o=o("LukeModel"),t6o=o(" (LUKE model)"),a6o=l(),Fu=a("li"),Xie=a("strong"),n6o=o("lxmert"),s6o=o(" \u2014 "),yq=a("a"),l6o=o("LxmertModel"),i6o=o(" (LXMERT model)"),d6o=l(),Tu=a("li"),zie=a("strong"),c6o=o("m2m_100"),f6o=o(" \u2014 "),Lq=a("a"),m6o=o("M2M100Model"),g6o=o(" (M2M100 model)"),h6o=l(),Mu=a("li"),Wie=a("strong"),p6o=o("marian"),u6o=o(" \u2014 "),xq=a("a"),_6o=o("MarianModel"),b6o=o(" (Marian model)"),v6o=l(),Eu=a("li"),Qie=a("strong"),F6o=o("maskformer"),T6o=o(" \u2014 "),$q=a("a"),M6o=o("MaskFormerModel"),E6o=o(" (MaskFormer model)"),C6o=l(),Cu=a("li"),Hie=a("strong"),w6o=o("mbart"),A6o=o(" \u2014 "),kq=a("a"),y6o=o("MBartModel"),L6o=o(" (mBART model)"),x6o=l(),wu=a("li"),Uie=a("strong"),$6o=o("mctct"),k6o=o(" \u2014 "),Sq=a("a"),S6o=o("MCTCTModel"),R6o=o(" (M-CTC-T model)"),P6o=l(),Au=a("li"),Jie=a("strong"),B6o=o("megatron-bert"),I6o=o(" \u2014 "),Rq=a("a"),N6o=o("MegatronBertModel"),q6o=o(" (Megatron-BERT model)"),j6o=l(),yu=a("li"),Yie=a("strong"),D6o=o("mobilebert"),G6o=o(" \u2014 "),Pq=a("a"),O6o=o("MobileBertModel"),V6o=o(" (MobileBERT model)"),X6o=l(),Lu=a("li"),Kie=a("strong"),z6o=o("mpnet"),W6o=o(" \u2014 "),Bq=a("a"),Q6o=o("MPNetModel"),H6o=o(" (MPNet model)"),U6o=l(),xu=a("li"),Zie=a("strong"),J6o=o("mt5"),Y6o=o(" \u2014 "),Iq=a("a"),K6o=o("MT5Model"),Z6o=o(" (MT5 model)"),eTo=l(),$u=a("li"),ede=a("strong"),oTo=o("nystromformer"),rTo=o(" \u2014 "),Nq=a("a"),tTo=o("NystromformerModel"),aTo=o(" (Nystr\xF6mformer model)"),nTo=l(),ku=a("li"),ode=a("strong"),sTo=o("openai-gpt"),lTo=o(" \u2014 "),qq=a("a"),iTo=o("OpenAIGPTModel"),dTo=o(" (OpenAI GPT model)"),cTo=l(),Su=a("li"),rde=a("strong"),fTo=o("opt"),mTo=o(" \u2014 "),jq=a("a"),gTo=o("OPTModel"),hTo=o(" (OPT model)"),pTo=l(),Ru=a("li"),tde=a("strong"),uTo=o("pegasus"),_To=o(" \u2014 "),Dq=a("a"),bTo=o("PegasusModel"),vTo=o(" (Pegasus model)"),FTo=l(),Pu=a("li"),ade=a("strong"),TTo=o("perceiver"),MTo=o(" \u2014 "),Gq=a("a"),ETo=o("PerceiverModel"),CTo=o(" (Perceiver model)"),wTo=l(),Bu=a("li"),nde=a("strong"),ATo=o("plbart"),yTo=o(" \u2014 "),Oq=a("a"),LTo=o("PLBartModel"),xTo=o(" (PLBart model)"),$To=l(),Iu=a("li"),sde=a("strong"),kTo=o("poolformer"),STo=o(" \u2014 "),Vq=a("a"),RTo=o("PoolFormerModel"),PTo=o(" (PoolFormer model)"),BTo=l(),Nu=a("li"),lde=a("strong"),ITo=o("prophetnet"),NTo=o(" \u2014 "),Xq=a("a"),qTo=o("ProphetNetModel"),jTo=o(" (ProphetNet model)"),DTo=l(),qu=a("li"),ide=a("strong"),GTo=o("qdqbert"),OTo=o(" \u2014 "),zq=a("a"),VTo=o("QDQBertModel"),XTo=o(" (QDQBert model)"),zTo=l(),ju=a("li"),dde=a("strong"),WTo=o("reformer"),QTo=o(" \u2014 "),Wq=a("a"),HTo=o("ReformerModel"),UTo=o(" (Reformer model)"),JTo=l(),Du=a("li"),cde=a("strong"),YTo=o("regnet"),KTo=o(" \u2014 "),Qq=a("a"),ZTo=o("RegNetModel"),e7o=o(" (RegNet model)"),o7o=l(),Gu=a("li"),fde=a("strong"),r7o=o("rembert"),t7o=o(" \u2014 "),Hq=a("a"),a7o=o("RemBertModel"),n7o=o(" (RemBERT model)"),s7o=l(),Ou=a("li"),mde=a("strong"),l7o=o("resnet"),i7o=o(" \u2014 "),Uq=a("a"),d7o=o("ResNetModel"),c7o=o(" (ResNet model)"),f7o=l(),Vu=a("li"),gde=a("strong"),m7o=o("retribert"),g7o=o(" \u2014 "),Jq=a("a"),h7o=o("RetriBertModel"),p7o=o(" (RetriBERT model)"),u7o=l(),Xu=a("li"),hde=a("strong"),_7o=o("roberta"),b7o=o(" \u2014 "),Yq=a("a"),v7o=o("RobertaModel"),F7o=o(" (RoBERTa model)"),T7o=l(),zu=a("li"),pde=a("strong"),M7o=o("roformer"),E7o=o(" \u2014 "),Kq=a("a"),C7o=o("RoFormerModel"),w7o=o(" (RoFormer model)"),A7o=l(),Wu=a("li"),ude=a("strong"),y7o=o("segformer"),L7o=o(" \u2014 "),Zq=a("a"),x7o=o("SegformerModel"),$7o=o(" (SegFormer model)"),k7o=l(),Qu=a("li"),_de=a("strong"),S7o=o("sew"),R7o=o(" \u2014 "),ej=a("a"),P7o=o("SEWModel"),B7o=o(" (SEW model)"),I7o=l(),Hu=a("li"),bde=a("strong"),N7o=o("sew-d"),q7o=o(" \u2014 "),oj=a("a"),j7o=o("SEWDModel"),D7o=o(" (SEW-D model)"),G7o=l(),Uu=a("li"),vde=a("strong"),O7o=o("speech_to_text"),V7o=o(" \u2014 "),rj=a("a"),X7o=o("Speech2TextModel"),z7o=o(" (Speech2Text model)"),W7o=l(),Ju=a("li"),Fde=a("strong"),Q7o=o("splinter"),H7o=o(" \u2014 "),tj=a("a"),U7o=o("SplinterModel"),J7o=o(" (Splinter model)"),Y7o=l(),Yu=a("li"),Tde=a("strong"),K7o=o("squeezebert"),Z7o=o(" \u2014 "),aj=a("a"),e8o=o("SqueezeBertModel"),o8o=o(" (SqueezeBERT model)"),r8o=l(),Ku=a("li"),Mde=a("strong"),t8o=o("swin"),a8o=o(" \u2014 "),nj=a("a"),n8o=o("SwinModel"),s8o=o(" (Swin Transformer model)"),l8o=l(),Zu=a("li"),Ede=a("strong"),i8o=o("t5"),d8o=o(" \u2014 "),sj=a("a"),c8o=o("T5Model"),f8o=o(" (T5 model)"),m8o=l(),e_=a("li"),Cde=a("strong"),g8o=o("tapas"),h8o=o(" \u2014 "),lj=a("a"),p8o=o("TapasModel"),u8o=o(" (TAPAS model)"),_8o=l(),o_=a("li"),wde=a("strong"),b8o=o("trajectory_transformer"),v8o=o(" \u2014 "),ij=a("a"),F8o=o("TrajectoryTransformerModel"),T8o=o(" (Trajectory Transformer model)"),M8o=l(),r_=a("li"),Ade=a("strong"),E8o=o("transfo-xl"),C8o=o(" \u2014 "),dj=a("a"),w8o=o("TransfoXLModel"),A8o=o(" (Transformer-XL model)"),y8o=l(),t_=a("li"),yde=a("strong"),L8o=o("unispeech"),x8o=o(" \u2014 "),cj=a("a"),$8o=o("UniSpeechModel"),k8o=o(" (UniSpeech model)"),S8o=l(),a_=a("li"),Lde=a("strong"),R8o=o("unispeech-sat"),P8o=o(" \u2014 "),fj=a("a"),B8o=o("UniSpeechSatModel"),I8o=o(" (UniSpeechSat model)"),N8o=l(),n_=a("li"),xde=a("strong"),q8o=o("van"),j8o=o(" \u2014 "),mj=a("a"),D8o=o("VanModel"),G8o=o(" (VAN model)"),O8o=l(),s_=a("li"),$de=a("strong"),V8o=o("vilt"),X8o=o(" \u2014 "),gj=a("a"),z8o=o("ViltModel"),W8o=o(" (ViLT model)"),Q8o=l(),l_=a("li"),kde=a("strong"),H8o=o("vision-text-dual-encoder"),U8o=o(" \u2014 "),hj=a("a"),J8o=o("VisionTextDualEncoderModel"),Y8o=o(" (VisionTextDualEncoder model)"),K8o=l(),i_=a("li"),Sde=a("strong"),Z8o=o("visual_bert"),e9o=o(" \u2014 "),pj=a("a"),o9o=o("VisualBertModel"),r9o=o(" (VisualBERT model)"),t9o=l(),d_=a("li"),Rde=a("strong"),a9o=o("vit"),n9o=o(" \u2014 "),uj=a("a"),s9o=o("ViTModel"),l9o=o(" (ViT model)"),i9o=l(),c_=a("li"),Pde=a("strong"),d9o=o("vit_mae"),c9o=o(" \u2014 "),_j=a("a"),f9o=o("ViTMAEModel"),m9o=o(" (ViTMAE model)"),g9o=l(),f_=a("li"),Bde=a("strong"),h9o=o("wav2vec2"),p9o=o(" \u2014 "),bj=a("a"),u9o=o("Wav2Vec2Model"),_9o=o(" (Wav2Vec2 model)"),b9o=l(),m_=a("li"),Ide=a("strong"),v9o=o("wav2vec2-conformer"),F9o=o(" \u2014 "),vj=a("a"),T9o=o("Wav2Vec2ConformerModel"),M9o=o(" (Wav2Vec2-Conformer model)"),E9o=l(),g_=a("li"),Nde=a("strong"),C9o=o("wavlm"),w9o=o(" \u2014 "),Fj=a("a"),A9o=o("WavLMModel"),y9o=o(" (WavLM model)"),L9o=l(),h_=a("li"),qde=a("strong"),x9o=o("xglm"),$9o=o(" \u2014 "),Tj=a("a"),k9o=o("XGLMModel"),S9o=o(" (XGLM model)"),R9o=l(),p_=a("li"),jde=a("strong"),P9o=o("xlm"),B9o=o(" \u2014 "),Mj=a("a"),I9o=o("XLMModel"),N9o=o(" (XLM model)"),q9o=l(),u_=a("li"),Dde=a("strong"),j9o=o("xlm-prophetnet"),D9o=o(" \u2014 "),Ej=a("a"),G9o=o("XLMProphetNetModel"),O9o=o(" (XLM-ProphetNet model)"),V9o=l(),__=a("li"),Gde=a("strong"),X9o=o("xlm-roberta"),z9o=o(" \u2014 "),Cj=a("a"),W9o=o("XLMRobertaModel"),Q9o=o(" (XLM-RoBERTa model)"),H9o=l(),b_=a("li"),Ode=a("strong"),U9o=o("xlm-roberta-xl"),J9o=o(" \u2014 "),wj=a("a"),Y9o=o("XLMRobertaXLModel"),K9o=o(" (XLM-RoBERTa-XL model)"),Z9o=l(),v_=a("li"),Vde=a("strong"),eMo=o("xlnet"),oMo=o(" \u2014 "),Aj=a("a"),rMo=o("XLNetModel"),tMo=o(" (XLNet model)"),aMo=l(),F_=a("li"),Xde=a("strong"),nMo=o("yolos"),sMo=o(" \u2014 "),yj=a("a"),lMo=o("YolosModel"),iMo=o(" (YOLOS model)"),dMo=l(),T_=a("li"),zde=a("strong"),cMo=o("yoso"),fMo=o(" \u2014 "),Lj=a("a"),mMo=o("YosoModel"),gMo=o(" (YOSO model)"),hMo=l(),M_=a("p"),pMo=o("The model is set in evaluation mode by default using "),Wde=a("code"),uMo=o("model.eval()"),_Mo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=a("code"),bMo=o("model.train()"),vMo=l(),F(E_.$$.fragment),$De=l(),Ii=a("h2"),C_=a("a"),Hde=a("span"),F(G0.$$.fragment),FMo=l(),Ude=a("span"),TMo=o("AutoModelForPreTraining"),kDe=l(),$o=a("div"),F(O0.$$.fragment),MMo=l(),Ni=a("p"),EMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xj=a("a"),CMo=o("from_pretrained()"),wMo=o(" class method or the "),$j=a("a"),AMo=o("from_config()"),yMo=o(` class
method.`),LMo=l(),V0=a("p"),xMo=o("This class cannot be instantiated directly using "),Jde=a("code"),$Mo=o("__init__()"),kMo=o(" (throws an error)."),SMo=l(),st=a("div"),F(X0.$$.fragment),RMo=l(),Yde=a("p"),PMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BMo=l(),qi=a("p"),IMo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),NMo=o("not"),qMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),jMo=o("from_pretrained()"),DMo=o(" to load the model weights."),GMo=l(),F(w_.$$.fragment),OMo=l(),Ye=a("div"),F(z0.$$.fragment),VMo=l(),Zde=a("p"),XMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zMo=l(),Ra=a("p"),WMo=o("The model class to instantiate is selected based on the "),ece=a("code"),QMo=o("model_type"),HMo=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),UMo=o("pretrained_model_name_or_path"),JMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),YMo=o("pretrained_model_name_or_path"),KMo=o(":"),ZMo=l(),G=a("ul"),A_=a("li"),tce=a("strong"),e4o=o("albert"),o4o=o(" \u2014 "),Sj=a("a"),r4o=o("AlbertForPreTraining"),t4o=o(" (ALBERT model)"),a4o=l(),y_=a("li"),ace=a("strong"),n4o=o("bart"),s4o=o(" \u2014 "),Rj=a("a"),l4o=o("BartForConditionalGeneration"),i4o=o(" (BART model)"),d4o=l(),L_=a("li"),nce=a("strong"),c4o=o("bert"),f4o=o(" \u2014 "),Pj=a("a"),m4o=o("BertForPreTraining"),g4o=o(" (BERT model)"),h4o=l(),x_=a("li"),sce=a("strong"),p4o=o("big_bird"),u4o=o(" \u2014 "),Bj=a("a"),_4o=o("BigBirdForPreTraining"),b4o=o(" (BigBird model)"),v4o=l(),$_=a("li"),lce=a("strong"),F4o=o("bloom"),T4o=o(" \u2014 "),Ij=a("a"),M4o=o("BloomForCausalLM"),E4o=o(" (BLOOM model)"),C4o=l(),k_=a("li"),ice=a("strong"),w4o=o("camembert"),A4o=o(" \u2014 "),Nj=a("a"),y4o=o("CamembertForMaskedLM"),L4o=o(" (CamemBERT model)"),x4o=l(),S_=a("li"),dce=a("strong"),$4o=o("ctrl"),k4o=o(" \u2014 "),qj=a("a"),S4o=o("CTRLLMHeadModel"),R4o=o(" (CTRL model)"),P4o=l(),R_=a("li"),cce=a("strong"),B4o=o("data2vec-text"),I4o=o(" \u2014 "),jj=a("a"),N4o=o("Data2VecTextForMaskedLM"),q4o=o(" (Data2VecText model)"),j4o=l(),P_=a("li"),fce=a("strong"),D4o=o("deberta"),G4o=o(" \u2014 "),Dj=a("a"),O4o=o("DebertaForMaskedLM"),V4o=o(" (DeBERTa model)"),X4o=l(),B_=a("li"),mce=a("strong"),z4o=o("deberta-v2"),W4o=o(" \u2014 "),Gj=a("a"),Q4o=o("DebertaV2ForMaskedLM"),H4o=o(" (DeBERTa-v2 model)"),U4o=l(),I_=a("li"),gce=a("strong"),J4o=o("distilbert"),Y4o=o(" \u2014 "),Oj=a("a"),K4o=o("DistilBertForMaskedLM"),Z4o=o(" (DistilBERT model)"),eEo=l(),N_=a("li"),hce=a("strong"),oEo=o("electra"),rEo=o(" \u2014 "),Vj=a("a"),tEo=o("ElectraForPreTraining"),aEo=o(" (ELECTRA model)"),nEo=l(),q_=a("li"),pce=a("strong"),sEo=o("flaubert"),lEo=o(" \u2014 "),Xj=a("a"),iEo=o("FlaubertWithLMHeadModel"),dEo=o(" (FlauBERT model)"),cEo=l(),j_=a("li"),uce=a("strong"),fEo=o("flava"),mEo=o(" \u2014 "),zj=a("a"),gEo=o("FlavaForPreTraining"),hEo=o(" (FLAVA model)"),pEo=l(),D_=a("li"),_ce=a("strong"),uEo=o("fnet"),_Eo=o(" \u2014 "),Wj=a("a"),bEo=o("FNetForPreTraining"),vEo=o(" (FNet model)"),FEo=l(),G_=a("li"),bce=a("strong"),TEo=o("fsmt"),MEo=o(" \u2014 "),Qj=a("a"),EEo=o("FSMTForConditionalGeneration"),CEo=o(" (FairSeq Machine-Translation model)"),wEo=l(),O_=a("li"),vce=a("strong"),AEo=o("funnel"),yEo=o(" \u2014 "),Hj=a("a"),LEo=o("FunnelForPreTraining"),xEo=o(" (Funnel Transformer model)"),$Eo=l(),V_=a("li"),Fce=a("strong"),kEo=o("gpt2"),SEo=o(" \u2014 "),Uj=a("a"),REo=o("GPT2LMHeadModel"),PEo=o(" (OpenAI GPT-2 model)"),BEo=l(),X_=a("li"),Tce=a("strong"),IEo=o("ibert"),NEo=o(" \u2014 "),Jj=a("a"),qEo=o("IBertForMaskedLM"),jEo=o(" (I-BERT model)"),DEo=l(),z_=a("li"),Mce=a("strong"),GEo=o("layoutlm"),OEo=o(" \u2014 "),Yj=a("a"),VEo=o("LayoutLMForMaskedLM"),XEo=o(" (LayoutLM model)"),zEo=l(),W_=a("li"),Ece=a("strong"),WEo=o("longformer"),QEo=o(" \u2014 "),Kj=a("a"),HEo=o("LongformerForMaskedLM"),UEo=o(" (Longformer model)"),JEo=l(),Q_=a("li"),Cce=a("strong"),YEo=o("lxmert"),KEo=o(" \u2014 "),Zj=a("a"),ZEo=o("LxmertForPreTraining"),eCo=o(" (LXMERT model)"),oCo=l(),H_=a("li"),wce=a("strong"),rCo=o("megatron-bert"),tCo=o(" \u2014 "),eD=a("a"),aCo=o("MegatronBertForPreTraining"),nCo=o(" (Megatron-BERT model)"),sCo=l(),U_=a("li"),Ace=a("strong"),lCo=o("mobilebert"),iCo=o(" \u2014 "),oD=a("a"),dCo=o("MobileBertForPreTraining"),cCo=o(" (MobileBERT model)"),fCo=l(),J_=a("li"),yce=a("strong"),mCo=o("mpnet"),gCo=o(" \u2014 "),rD=a("a"),hCo=o("MPNetForMaskedLM"),pCo=o(" (MPNet model)"),uCo=l(),Y_=a("li"),Lce=a("strong"),_Co=o("openai-gpt"),bCo=o(" \u2014 "),tD=a("a"),vCo=o("OpenAIGPTLMHeadModel"),FCo=o(" (OpenAI GPT model)"),TCo=l(),K_=a("li"),xce=a("strong"),MCo=o("retribert"),ECo=o(" \u2014 "),aD=a("a"),CCo=o("RetriBertModel"),wCo=o(" (RetriBERT model)"),ACo=l(),Z_=a("li"),$ce=a("strong"),yCo=o("roberta"),LCo=o(" \u2014 "),nD=a("a"),xCo=o("RobertaForMaskedLM"),$Co=o(" (RoBERTa model)"),kCo=l(),e1=a("li"),kce=a("strong"),SCo=o("splinter"),RCo=o(" \u2014 "),sD=a("a"),PCo=o("SplinterForPreTraining"),BCo=o(" (Splinter model)"),ICo=l(),o1=a("li"),Sce=a("strong"),NCo=o("squeezebert"),qCo=o(" \u2014 "),lD=a("a"),jCo=o("SqueezeBertForMaskedLM"),DCo=o(" (SqueezeBERT model)"),GCo=l(),r1=a("li"),Rce=a("strong"),OCo=o("t5"),VCo=o(" \u2014 "),iD=a("a"),XCo=o("T5ForConditionalGeneration"),zCo=o(" (T5 model)"),WCo=l(),t1=a("li"),Pce=a("strong"),QCo=o("tapas"),HCo=o(" \u2014 "),dD=a("a"),UCo=o("TapasForMaskedLM"),JCo=o(" (TAPAS model)"),YCo=l(),a1=a("li"),Bce=a("strong"),KCo=o("transfo-xl"),ZCo=o(" \u2014 "),cD=a("a"),e5o=o("TransfoXLLMHeadModel"),o5o=o(" (Transformer-XL model)"),r5o=l(),n1=a("li"),Ice=a("strong"),t5o=o("unispeech"),a5o=o(" \u2014 "),fD=a("a"),n5o=o("UniSpeechForPreTraining"),s5o=o(" (UniSpeech model)"),l5o=l(),s1=a("li"),Nce=a("strong"),i5o=o("unispeech-sat"),d5o=o(" \u2014 "),mD=a("a"),c5o=o("UniSpeechSatForPreTraining"),f5o=o(" (UniSpeechSat model)"),m5o=l(),l1=a("li"),qce=a("strong"),g5o=o("visual_bert"),h5o=o(" \u2014 "),gD=a("a"),p5o=o("VisualBertForPreTraining"),u5o=o(" (VisualBERT model)"),_5o=l(),i1=a("li"),jce=a("strong"),b5o=o("vit_mae"),v5o=o(" \u2014 "),hD=a("a"),F5o=o("ViTMAEForPreTraining"),T5o=o(" (ViTMAE model)"),M5o=l(),d1=a("li"),Dce=a("strong"),E5o=o("wav2vec2"),C5o=o(" \u2014 "),pD=a("a"),w5o=o("Wav2Vec2ForPreTraining"),A5o=o(" (Wav2Vec2 model)"),y5o=l(),c1=a("li"),Gce=a("strong"),L5o=o("wav2vec2-conformer"),x5o=o(" \u2014 "),uD=a("a"),$5o=o("Wav2Vec2ConformerForPreTraining"),k5o=o(" (Wav2Vec2-Conformer model)"),S5o=l(),f1=a("li"),Oce=a("strong"),R5o=o("xlm"),P5o=o(" \u2014 "),_D=a("a"),B5o=o("XLMWithLMHeadModel"),I5o=o(" (XLM model)"),N5o=l(),m1=a("li"),Vce=a("strong"),q5o=o("xlm-roberta"),j5o=o(" \u2014 "),bD=a("a"),D5o=o("XLMRobertaForMaskedLM"),G5o=o(" (XLM-RoBERTa model)"),O5o=l(),g1=a("li"),Xce=a("strong"),V5o=o("xlm-roberta-xl"),X5o=o(" \u2014 "),vD=a("a"),z5o=o("XLMRobertaXLForMaskedLM"),W5o=o(" (XLM-RoBERTa-XL model)"),Q5o=l(),h1=a("li"),zce=a("strong"),H5o=o("xlnet"),U5o=o(" \u2014 "),FD=a("a"),J5o=o("XLNetLMHeadModel"),Y5o=o(" (XLNet model)"),K5o=l(),p1=a("p"),Z5o=o("The model is set in evaluation mode by default using "),Wce=a("code"),e3o=o("model.eval()"),o3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),r3o=o("model.train()"),t3o=l(),F(u1.$$.fragment),SDe=l(),ji=a("h2"),_1=a("a"),Hce=a("span"),F(W0.$$.fragment),a3o=l(),Uce=a("span"),n3o=o("AutoModelForCausalLM"),RDe=l(),ko=a("div"),F(Q0.$$.fragment),s3o=l(),Di=a("p"),l3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TD=a("a"),i3o=o("from_pretrained()"),d3o=o(" class method or the "),MD=a("a"),c3o=o("from_config()"),f3o=o(` class
method.`),m3o=l(),H0=a("p"),g3o=o("This class cannot be instantiated directly using "),Jce=a("code"),h3o=o("__init__()"),p3o=o(" (throws an error)."),u3o=l(),lt=a("div"),F(U0.$$.fragment),_3o=l(),Yce=a("p"),b3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v3o=l(),Gi=a("p"),F3o=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),T3o=o("not"),M3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),E3o=o("from_pretrained()"),C3o=o(" to load the model weights."),w3o=l(),F(b1.$$.fragment),A3o=l(),Ke=a("div"),F(J0.$$.fragment),y3o=l(),Zce=a("p"),L3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x3o=l(),Pa=a("p"),$3o=o("The model class to instantiate is selected based on the "),efe=a("code"),k3o=o("model_type"),S3o=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),R3o=o("pretrained_model_name_or_path"),P3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),B3o=o("pretrained_model_name_or_path"),I3o=o(":"),N3o=l(),z=a("ul"),v1=a("li"),tfe=a("strong"),q3o=o("bart"),j3o=o(" \u2014 "),CD=a("a"),D3o=o("BartForCausalLM"),G3o=o(" (BART model)"),O3o=l(),F1=a("li"),afe=a("strong"),V3o=o("bert"),X3o=o(" \u2014 "),wD=a("a"),z3o=o("BertLMHeadModel"),W3o=o(" (BERT model)"),Q3o=l(),T1=a("li"),nfe=a("strong"),H3o=o("bert-generation"),U3o=o(" \u2014 "),AD=a("a"),J3o=o("BertGenerationDecoder"),Y3o=o(" (Bert Generation model)"),K3o=l(),M1=a("li"),sfe=a("strong"),Z3o=o("big_bird"),ewo=o(" \u2014 "),yD=a("a"),owo=o("BigBirdForCausalLM"),rwo=o(" (BigBird model)"),two=l(),E1=a("li"),lfe=a("strong"),awo=o("bigbird_pegasus"),nwo=o(" \u2014 "),LD=a("a"),swo=o("BigBirdPegasusForCausalLM"),lwo=o(" (BigBird-Pegasus model)"),iwo=l(),C1=a("li"),ife=a("strong"),dwo=o("blenderbot"),cwo=o(" \u2014 "),xD=a("a"),fwo=o("BlenderbotForCausalLM"),mwo=o(" (Blenderbot model)"),gwo=l(),w1=a("li"),dfe=a("strong"),hwo=o("blenderbot-small"),pwo=o(" \u2014 "),$D=a("a"),uwo=o("BlenderbotSmallForCausalLM"),_wo=o(" (BlenderbotSmall model)"),bwo=l(),A1=a("li"),cfe=a("strong"),vwo=o("bloom"),Fwo=o(" \u2014 "),kD=a("a"),Two=o("BloomForCausalLM"),Mwo=o(" (BLOOM model)"),Ewo=l(),y1=a("li"),ffe=a("strong"),Cwo=o("camembert"),wwo=o(" \u2014 "),SD=a("a"),Awo=o("CamembertForCausalLM"),ywo=o(" (CamemBERT model)"),Lwo=l(),L1=a("li"),mfe=a("strong"),xwo=o("ctrl"),$wo=o(" \u2014 "),RD=a("a"),kwo=o("CTRLLMHeadModel"),Swo=o(" (CTRL model)"),Rwo=l(),x1=a("li"),gfe=a("strong"),Pwo=o("data2vec-text"),Bwo=o(" \u2014 "),PD=a("a"),Iwo=o("Data2VecTextForCausalLM"),Nwo=o(" (Data2VecText model)"),qwo=l(),$1=a("li"),hfe=a("strong"),jwo=o("electra"),Dwo=o(" \u2014 "),BD=a("a"),Gwo=o("ElectraForCausalLM"),Owo=o(" (ELECTRA model)"),Vwo=l(),k1=a("li"),pfe=a("strong"),Xwo=o("gpt2"),zwo=o(" \u2014 "),ID=a("a"),Wwo=o("GPT2LMHeadModel"),Qwo=o(" (OpenAI GPT-2 model)"),Hwo=l(),S1=a("li"),ufe=a("strong"),Uwo=o("gpt_neo"),Jwo=o(" \u2014 "),ND=a("a"),Ywo=o("GPTNeoForCausalLM"),Kwo=o(" (GPT Neo model)"),Zwo=l(),R1=a("li"),_fe=a("strong"),e0o=o("gpt_neox"),o0o=o(" \u2014 "),qD=a("a"),r0o=o("GPTNeoXForCausalLM"),t0o=o(" (GPT NeoX model)"),a0o=l(),P1=a("li"),bfe=a("strong"),n0o=o("gptj"),s0o=o(" \u2014 "),jD=a("a"),l0o=o("GPTJForCausalLM"),i0o=o(" (GPT-J model)"),d0o=l(),B1=a("li"),vfe=a("strong"),c0o=o("marian"),f0o=o(" \u2014 "),DD=a("a"),m0o=o("MarianForCausalLM"),g0o=o(" (Marian model)"),h0o=l(),I1=a("li"),Ffe=a("strong"),p0o=o("mbart"),u0o=o(" \u2014 "),GD=a("a"),_0o=o("MBartForCausalLM"),b0o=o(" (mBART model)"),v0o=l(),N1=a("li"),Tfe=a("strong"),F0o=o("megatron-bert"),T0o=o(" \u2014 "),OD=a("a"),M0o=o("MegatronBertForCausalLM"),E0o=o(" (Megatron-BERT model)"),C0o=l(),q1=a("li"),Mfe=a("strong"),w0o=o("openai-gpt"),A0o=o(" \u2014 "),VD=a("a"),y0o=o("OpenAIGPTLMHeadModel"),L0o=o(" (OpenAI GPT model)"),x0o=l(),j1=a("li"),Efe=a("strong"),$0o=o("opt"),k0o=o(" \u2014 "),XD=a("a"),S0o=o("OPTForCausalLM"),R0o=o(" (OPT model)"),P0o=l(),D1=a("li"),Cfe=a("strong"),B0o=o("pegasus"),I0o=o(" \u2014 "),zD=a("a"),N0o=o("PegasusForCausalLM"),q0o=o(" (Pegasus model)"),j0o=l(),G1=a("li"),wfe=a("strong"),D0o=o("plbart"),G0o=o(" \u2014 "),WD=a("a"),O0o=o("PLBartForCausalLM"),V0o=o(" (PLBart model)"),X0o=l(),O1=a("li"),Afe=a("strong"),z0o=o("prophetnet"),W0o=o(" \u2014 "),QD=a("a"),Q0o=o("ProphetNetForCausalLM"),H0o=o(" (ProphetNet model)"),U0o=l(),V1=a("li"),yfe=a("strong"),J0o=o("qdqbert"),Y0o=o(" \u2014 "),HD=a("a"),K0o=o("QDQBertLMHeadModel"),Z0o=o(" (QDQBert model)"),eAo=l(),X1=a("li"),Lfe=a("strong"),oAo=o("reformer"),rAo=o(" \u2014 "),UD=a("a"),tAo=o("ReformerModelWithLMHead"),aAo=o(" (Reformer model)"),nAo=l(),z1=a("li"),xfe=a("strong"),sAo=o("rembert"),lAo=o(" \u2014 "),JD=a("a"),iAo=o("RemBertForCausalLM"),dAo=o(" (RemBERT model)"),cAo=l(),W1=a("li"),$fe=a("strong"),fAo=o("roberta"),mAo=o(" \u2014 "),YD=a("a"),gAo=o("RobertaForCausalLM"),hAo=o(" (RoBERTa model)"),pAo=l(),Q1=a("li"),kfe=a("strong"),uAo=o("roformer"),_Ao=o(" \u2014 "),KD=a("a"),bAo=o("RoFormerForCausalLM"),vAo=o(" (RoFormer model)"),FAo=l(),H1=a("li"),Sfe=a("strong"),TAo=o("speech_to_text_2"),MAo=o(" \u2014 "),ZD=a("a"),EAo=o("Speech2Text2ForCausalLM"),CAo=o(" (Speech2Text2 model)"),wAo=l(),U1=a("li"),Rfe=a("strong"),AAo=o("transfo-xl"),yAo=o(" \u2014 "),eG=a("a"),LAo=o("TransfoXLLMHeadModel"),xAo=o(" (Transformer-XL model)"),$Ao=l(),J1=a("li"),Pfe=a("strong"),kAo=o("trocr"),SAo=o(" \u2014 "),oG=a("a"),RAo=o("TrOCRForCausalLM"),PAo=o(" (TrOCR model)"),BAo=l(),Y1=a("li"),Bfe=a("strong"),IAo=o("xglm"),NAo=o(" \u2014 "),rG=a("a"),qAo=o("XGLMForCausalLM"),jAo=o(" (XGLM model)"),DAo=l(),K1=a("li"),Ife=a("strong"),GAo=o("xlm"),OAo=o(" \u2014 "),tG=a("a"),VAo=o("XLMWithLMHeadModel"),XAo=o(" (XLM model)"),zAo=l(),Z1=a("li"),Nfe=a("strong"),WAo=o("xlm-prophetnet"),QAo=o(" \u2014 "),aG=a("a"),HAo=o("XLMProphetNetForCausalLM"),UAo=o(" (XLM-ProphetNet model)"),JAo=l(),eb=a("li"),qfe=a("strong"),YAo=o("xlm-roberta"),KAo=o(" \u2014 "),nG=a("a"),ZAo=o("XLMRobertaForCausalLM"),eyo=o(" (XLM-RoBERTa model)"),oyo=l(),ob=a("li"),jfe=a("strong"),ryo=o("xlm-roberta-xl"),tyo=o(" \u2014 "),sG=a("a"),ayo=o("XLMRobertaXLForCausalLM"),nyo=o(" (XLM-RoBERTa-XL model)"),syo=l(),rb=a("li"),Dfe=a("strong"),lyo=o("xlnet"),iyo=o(" \u2014 "),lG=a("a"),dyo=o("XLNetLMHeadModel"),cyo=o(" (XLNet model)"),fyo=l(),tb=a("p"),myo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),gyo=o("model.eval()"),hyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),pyo=o("model.train()"),uyo=l(),F(ab.$$.fragment),PDe=l(),Oi=a("h2"),nb=a("a"),Vfe=a("span"),F(Y0.$$.fragment),_yo=l(),Xfe=a("span"),byo=o("AutoModelForMaskedLM"),BDe=l(),So=a("div"),F(K0.$$.fragment),vyo=l(),Vi=a("p"),Fyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iG=a("a"),Tyo=o("from_pretrained()"),Myo=o(" class method or the "),dG=a("a"),Eyo=o("from_config()"),Cyo=o(` class
method.`),wyo=l(),Z0=a("p"),Ayo=o("This class cannot be instantiated directly using "),zfe=a("code"),yyo=o("__init__()"),Lyo=o(" (throws an error)."),xyo=l(),it=a("div"),F(eA.$$.fragment),$yo=l(),Wfe=a("p"),kyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Syo=l(),Xi=a("p"),Ryo=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),Pyo=o("not"),Byo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),Iyo=o("from_pretrained()"),Nyo=o(" to load the model weights."),qyo=l(),F(sb.$$.fragment),jyo=l(),Ze=a("div"),F(oA.$$.fragment),Dyo=l(),Hfe=a("p"),Gyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Oyo=l(),Ba=a("p"),Vyo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),Xyo=o("model_type"),zyo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),Wyo=o("pretrained_model_name_or_path"),Qyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),Hyo=o("pretrained_model_name_or_path"),Uyo=o(":"),Jyo=l(),Q=a("ul"),lb=a("li"),Kfe=a("strong"),Yyo=o("albert"),Kyo=o(" \u2014 "),fG=a("a"),Zyo=o("AlbertForMaskedLM"),eLo=o(" (ALBERT model)"),oLo=l(),ib=a("li"),Zfe=a("strong"),rLo=o("bart"),tLo=o(" \u2014 "),mG=a("a"),aLo=o("BartForConditionalGeneration"),nLo=o(" (BART model)"),sLo=l(),db=a("li"),eme=a("strong"),lLo=o("bert"),iLo=o(" \u2014 "),gG=a("a"),dLo=o("BertForMaskedLM"),cLo=o(" (BERT model)"),fLo=l(),cb=a("li"),ome=a("strong"),mLo=o("big_bird"),gLo=o(" \u2014 "),hG=a("a"),hLo=o("BigBirdForMaskedLM"),pLo=o(" (BigBird model)"),uLo=l(),fb=a("li"),rme=a("strong"),_Lo=o("camembert"),bLo=o(" \u2014 "),pG=a("a"),vLo=o("CamembertForMaskedLM"),FLo=o(" (CamemBERT model)"),TLo=l(),mb=a("li"),tme=a("strong"),MLo=o("convbert"),ELo=o(" \u2014 "),uG=a("a"),CLo=o("ConvBertForMaskedLM"),wLo=o(" (ConvBERT model)"),ALo=l(),gb=a("li"),ame=a("strong"),yLo=o("data2vec-text"),LLo=o(" \u2014 "),_G=a("a"),xLo=o("Data2VecTextForMaskedLM"),$Lo=o(" (Data2VecText model)"),kLo=l(),hb=a("li"),nme=a("strong"),SLo=o("deberta"),RLo=o(" \u2014 "),bG=a("a"),PLo=o("DebertaForMaskedLM"),BLo=o(" (DeBERTa model)"),ILo=l(),pb=a("li"),sme=a("strong"),NLo=o("deberta-v2"),qLo=o(" \u2014 "),vG=a("a"),jLo=o("DebertaV2ForMaskedLM"),DLo=o(" (DeBERTa-v2 model)"),GLo=l(),ub=a("li"),lme=a("strong"),OLo=o("distilbert"),VLo=o(" \u2014 "),FG=a("a"),XLo=o("DistilBertForMaskedLM"),zLo=o(" (DistilBERT model)"),WLo=l(),_b=a("li"),ime=a("strong"),QLo=o("electra"),HLo=o(" \u2014 "),TG=a("a"),ULo=o("ElectraForMaskedLM"),JLo=o(" (ELECTRA model)"),YLo=l(),bb=a("li"),dme=a("strong"),KLo=o("flaubert"),ZLo=o(" \u2014 "),MG=a("a"),exo=o("FlaubertWithLMHeadModel"),oxo=o(" (FlauBERT model)"),rxo=l(),vb=a("li"),cme=a("strong"),txo=o("fnet"),axo=o(" \u2014 "),EG=a("a"),nxo=o("FNetForMaskedLM"),sxo=o(" (FNet model)"),lxo=l(),Fb=a("li"),fme=a("strong"),ixo=o("funnel"),dxo=o(" \u2014 "),CG=a("a"),cxo=o("FunnelForMaskedLM"),fxo=o(" (Funnel Transformer model)"),mxo=l(),Tb=a("li"),mme=a("strong"),gxo=o("ibert"),hxo=o(" \u2014 "),wG=a("a"),pxo=o("IBertForMaskedLM"),uxo=o(" (I-BERT model)"),_xo=l(),Mb=a("li"),gme=a("strong"),bxo=o("layoutlm"),vxo=o(" \u2014 "),AG=a("a"),Fxo=o("LayoutLMForMaskedLM"),Txo=o(" (LayoutLM model)"),Mxo=l(),Eb=a("li"),hme=a("strong"),Exo=o("longformer"),Cxo=o(" \u2014 "),yG=a("a"),wxo=o("LongformerForMaskedLM"),Axo=o(" (Longformer model)"),yxo=l(),Cb=a("li"),pme=a("strong"),Lxo=o("luke"),xxo=o(" \u2014 "),LG=a("a"),$xo=o("LukeForMaskedLM"),kxo=o(" (LUKE model)"),Sxo=l(),wb=a("li"),ume=a("strong"),Rxo=o("mbart"),Pxo=o(" \u2014 "),xG=a("a"),Bxo=o("MBartForConditionalGeneration"),Ixo=o(" (mBART model)"),Nxo=l(),Ab=a("li"),_me=a("strong"),qxo=o("megatron-bert"),jxo=o(" \u2014 "),$G=a("a"),Dxo=o("MegatronBertForMaskedLM"),Gxo=o(" (Megatron-BERT model)"),Oxo=l(),yb=a("li"),bme=a("strong"),Vxo=o("mobilebert"),Xxo=o(" \u2014 "),kG=a("a"),zxo=o("MobileBertForMaskedLM"),Wxo=o(" (MobileBERT model)"),Qxo=l(),Lb=a("li"),vme=a("strong"),Hxo=o("mpnet"),Uxo=o(" \u2014 "),SG=a("a"),Jxo=o("MPNetForMaskedLM"),Yxo=o(" (MPNet model)"),Kxo=l(),xb=a("li"),Fme=a("strong"),Zxo=o("nystromformer"),e$o=o(" \u2014 "),RG=a("a"),o$o=o("NystromformerForMaskedLM"),r$o=o(" (Nystr\xF6mformer model)"),t$o=l(),$b=a("li"),Tme=a("strong"),a$o=o("perceiver"),n$o=o(" \u2014 "),PG=a("a"),s$o=o("PerceiverForMaskedLM"),l$o=o(" (Perceiver model)"),i$o=l(),kb=a("li"),Mme=a("strong"),d$o=o("qdqbert"),c$o=o(" \u2014 "),BG=a("a"),f$o=o("QDQBertForMaskedLM"),m$o=o(" (QDQBert model)"),g$o=l(),Sb=a("li"),Eme=a("strong"),h$o=o("reformer"),p$o=o(" \u2014 "),IG=a("a"),u$o=o("ReformerForMaskedLM"),_$o=o(" (Reformer model)"),b$o=l(),Rb=a("li"),Cme=a("strong"),v$o=o("rembert"),F$o=o(" \u2014 "),NG=a("a"),T$o=o("RemBertForMaskedLM"),M$o=o(" (RemBERT model)"),E$o=l(),Pb=a("li"),wme=a("strong"),C$o=o("roberta"),w$o=o(" \u2014 "),qG=a("a"),A$o=o("RobertaForMaskedLM"),y$o=o(" (RoBERTa model)"),L$o=l(),Bb=a("li"),Ame=a("strong"),x$o=o("roformer"),$$o=o(" \u2014 "),jG=a("a"),k$o=o("RoFormerForMaskedLM"),S$o=o(" (RoFormer model)"),R$o=l(),Ib=a("li"),yme=a("strong"),P$o=o("squeezebert"),B$o=o(" \u2014 "),DG=a("a"),I$o=o("SqueezeBertForMaskedLM"),N$o=o(" (SqueezeBERT model)"),q$o=l(),Nb=a("li"),Lme=a("strong"),j$o=o("tapas"),D$o=o(" \u2014 "),GG=a("a"),G$o=o("TapasForMaskedLM"),O$o=o(" (TAPAS model)"),V$o=l(),qb=a("li"),xme=a("strong"),X$o=o("wav2vec2"),z$o=o(" \u2014 "),$me=a("code"),W$o=o("Wav2Vec2ForMaskedLM"),Q$o=o(" (Wav2Vec2 model)"),H$o=l(),jb=a("li"),kme=a("strong"),U$o=o("xlm"),J$o=o(" \u2014 "),OG=a("a"),Y$o=o("XLMWithLMHeadModel"),K$o=o(" (XLM model)"),Z$o=l(),Db=a("li"),Sme=a("strong"),eko=o("xlm-roberta"),oko=o(" \u2014 "),VG=a("a"),rko=o("XLMRobertaForMaskedLM"),tko=o(" (XLM-RoBERTa model)"),ako=l(),Gb=a("li"),Rme=a("strong"),nko=o("xlm-roberta-xl"),sko=o(" \u2014 "),XG=a("a"),lko=o("XLMRobertaXLForMaskedLM"),iko=o(" (XLM-RoBERTa-XL model)"),dko=l(),Ob=a("li"),Pme=a("strong"),cko=o("yoso"),fko=o(" \u2014 "),zG=a("a"),mko=o("YosoForMaskedLM"),gko=o(" (YOSO model)"),hko=l(),Vb=a("p"),pko=o("The model is set in evaluation mode by default using "),Bme=a("code"),uko=o("model.eval()"),_ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),bko=o("model.train()"),vko=l(),F(Xb.$$.fragment),IDe=l(),zi=a("h2"),zb=a("a"),Nme=a("span"),F(rA.$$.fragment),Fko=l(),qme=a("span"),Tko=o("AutoModelForSeq2SeqLM"),NDe=l(),Ro=a("div"),F(tA.$$.fragment),Mko=l(),Wi=a("p"),Eko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WG=a("a"),Cko=o("from_pretrained()"),wko=o(" class method or the "),QG=a("a"),Ako=o("from_config()"),yko=o(` class
method.`),Lko=l(),aA=a("p"),xko=o("This class cannot be instantiated directly using "),jme=a("code"),$ko=o("__init__()"),kko=o(" (throws an error)."),Sko=l(),dt=a("div"),F(nA.$$.fragment),Rko=l(),Dme=a("p"),Pko=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bko=l(),Qi=a("p"),Iko=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),Nko=o("not"),qko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),jko=o("from_pretrained()"),Dko=o(" to load the model weights."),Gko=l(),F(Wb.$$.fragment),Oko=l(),eo=a("div"),F(sA.$$.fragment),Vko=l(),Ome=a("p"),Xko=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zko=l(),Ia=a("p"),Wko=o("The model class to instantiate is selected based on the "),Vme=a("code"),Qko=o("model_type"),Hko=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),Uko=o("pretrained_model_name_or_path"),Jko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),Yko=o("pretrained_model_name_or_path"),Kko=o(":"),Zko=l(),ue=a("ul"),Qb=a("li"),Wme=a("strong"),eSo=o("bart"),oSo=o(" \u2014 "),UG=a("a"),rSo=o("BartForConditionalGeneration"),tSo=o(" (BART model)"),aSo=l(),Hb=a("li"),Qme=a("strong"),nSo=o("bigbird_pegasus"),sSo=o(" \u2014 "),JG=a("a"),lSo=o("BigBirdPegasusForConditionalGeneration"),iSo=o(" (BigBird-Pegasus model)"),dSo=l(),Ub=a("li"),Hme=a("strong"),cSo=o("blenderbot"),fSo=o(" \u2014 "),YG=a("a"),mSo=o("BlenderbotForConditionalGeneration"),gSo=o(" (Blenderbot model)"),hSo=l(),Jb=a("li"),Ume=a("strong"),pSo=o("blenderbot-small"),uSo=o(" \u2014 "),KG=a("a"),_So=o("BlenderbotSmallForConditionalGeneration"),bSo=o(" (BlenderbotSmall model)"),vSo=l(),Yb=a("li"),Jme=a("strong"),FSo=o("encoder-decoder"),TSo=o(" \u2014 "),ZG=a("a"),MSo=o("EncoderDecoderModel"),ESo=o(" (Encoder decoder model)"),CSo=l(),Kb=a("li"),Yme=a("strong"),wSo=o("fsmt"),ASo=o(" \u2014 "),eO=a("a"),ySo=o("FSMTForConditionalGeneration"),LSo=o(" (FairSeq Machine-Translation model)"),xSo=l(),Zb=a("li"),Kme=a("strong"),$So=o("led"),kSo=o(" \u2014 "),oO=a("a"),SSo=o("LEDForConditionalGeneration"),RSo=o(" (LED model)"),PSo=l(),e2=a("li"),Zme=a("strong"),BSo=o("m2m_100"),ISo=o(" \u2014 "),rO=a("a"),NSo=o("M2M100ForConditionalGeneration"),qSo=o(" (M2M100 model)"),jSo=l(),o2=a("li"),ege=a("strong"),DSo=o("marian"),GSo=o(" \u2014 "),tO=a("a"),OSo=o("MarianMTModel"),VSo=o(" (Marian model)"),XSo=l(),r2=a("li"),oge=a("strong"),zSo=o("mbart"),WSo=o(" \u2014 "),aO=a("a"),QSo=o("MBartForConditionalGeneration"),HSo=o(" (mBART model)"),USo=l(),t2=a("li"),rge=a("strong"),JSo=o("mt5"),YSo=o(" \u2014 "),nO=a("a"),KSo=o("MT5ForConditionalGeneration"),ZSo=o(" (MT5 model)"),eRo=l(),a2=a("li"),tge=a("strong"),oRo=o("pegasus"),rRo=o(" \u2014 "),sO=a("a"),tRo=o("PegasusForConditionalGeneration"),aRo=o(" (Pegasus model)"),nRo=l(),n2=a("li"),age=a("strong"),sRo=o("plbart"),lRo=o(" \u2014 "),lO=a("a"),iRo=o("PLBartForConditionalGeneration"),dRo=o(" (PLBart model)"),cRo=l(),s2=a("li"),nge=a("strong"),fRo=o("prophetnet"),mRo=o(" \u2014 "),iO=a("a"),gRo=o("ProphetNetForConditionalGeneration"),hRo=o(" (ProphetNet model)"),pRo=l(),l2=a("li"),sge=a("strong"),uRo=o("t5"),_Ro=o(" \u2014 "),dO=a("a"),bRo=o("T5ForConditionalGeneration"),vRo=o(" (T5 model)"),FRo=l(),i2=a("li"),lge=a("strong"),TRo=o("xlm-prophetnet"),MRo=o(" \u2014 "),cO=a("a"),ERo=o("XLMProphetNetForConditionalGeneration"),CRo=o(" (XLM-ProphetNet model)"),wRo=l(),d2=a("p"),ARo=o("The model is set in evaluation mode by default using "),ige=a("code"),yRo=o("model.eval()"),LRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),xRo=o("model.train()"),$Ro=l(),F(c2.$$.fragment),qDe=l(),Hi=a("h2"),f2=a("a"),cge=a("span"),F(lA.$$.fragment),kRo=l(),fge=a("span"),SRo=o("AutoModelForSequenceClassification"),jDe=l(),Po=a("div"),F(iA.$$.fragment),RRo=l(),Ui=a("p"),PRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fO=a("a"),BRo=o("from_pretrained()"),IRo=o(" class method or the "),mO=a("a"),NRo=o("from_config()"),qRo=o(` class
method.`),jRo=l(),dA=a("p"),DRo=o("This class cannot be instantiated directly using "),mge=a("code"),GRo=o("__init__()"),ORo=o(" (throws an error)."),VRo=l(),ct=a("div"),F(cA.$$.fragment),XRo=l(),gge=a("p"),zRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WRo=l(),Ji=a("p"),QRo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),HRo=o("not"),URo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),JRo=o("from_pretrained()"),YRo=o(" to load the model weights."),KRo=l(),F(m2.$$.fragment),ZRo=l(),oo=a("div"),F(fA.$$.fragment),ePo=l(),pge=a("p"),oPo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rPo=l(),Na=a("p"),tPo=o("The model class to instantiate is selected based on the "),uge=a("code"),aPo=o("model_type"),nPo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),iPo=o("pretrained_model_name_or_path"),dPo=o(":"),cPo=l(),N=a("ul"),g2=a("li"),vge=a("strong"),fPo=o("albert"),mPo=o(" \u2014 "),hO=a("a"),gPo=o("AlbertForSequenceClassification"),hPo=o(" (ALBERT model)"),pPo=l(),h2=a("li"),Fge=a("strong"),uPo=o("bart"),_Po=o(" \u2014 "),pO=a("a"),bPo=o("BartForSequenceClassification"),vPo=o(" (BART model)"),FPo=l(),p2=a("li"),Tge=a("strong"),TPo=o("bert"),MPo=o(" \u2014 "),uO=a("a"),EPo=o("BertForSequenceClassification"),CPo=o(" (BERT model)"),wPo=l(),u2=a("li"),Mge=a("strong"),APo=o("big_bird"),yPo=o(" \u2014 "),_O=a("a"),LPo=o("BigBirdForSequenceClassification"),xPo=o(" (BigBird model)"),$Po=l(),_2=a("li"),Ege=a("strong"),kPo=o("bigbird_pegasus"),SPo=o(" \u2014 "),bO=a("a"),RPo=o("BigBirdPegasusForSequenceClassification"),PPo=o(" (BigBird-Pegasus model)"),BPo=l(),b2=a("li"),Cge=a("strong"),IPo=o("camembert"),NPo=o(" \u2014 "),vO=a("a"),qPo=o("CamembertForSequenceClassification"),jPo=o(" (CamemBERT model)"),DPo=l(),v2=a("li"),wge=a("strong"),GPo=o("canine"),OPo=o(" \u2014 "),FO=a("a"),VPo=o("CanineForSequenceClassification"),XPo=o(" (CANINE model)"),zPo=l(),F2=a("li"),Age=a("strong"),WPo=o("convbert"),QPo=o(" \u2014 "),TO=a("a"),HPo=o("ConvBertForSequenceClassification"),UPo=o(" (ConvBERT model)"),JPo=l(),T2=a("li"),yge=a("strong"),YPo=o("ctrl"),KPo=o(" \u2014 "),MO=a("a"),ZPo=o("CTRLForSequenceClassification"),eBo=o(" (CTRL model)"),oBo=l(),M2=a("li"),Lge=a("strong"),rBo=o("data2vec-text"),tBo=o(" \u2014 "),EO=a("a"),aBo=o("Data2VecTextForSequenceClassification"),nBo=o(" (Data2VecText model)"),sBo=l(),E2=a("li"),xge=a("strong"),lBo=o("deberta"),iBo=o(" \u2014 "),CO=a("a"),dBo=o("DebertaForSequenceClassification"),cBo=o(" (DeBERTa model)"),fBo=l(),C2=a("li"),$ge=a("strong"),mBo=o("deberta-v2"),gBo=o(" \u2014 "),wO=a("a"),hBo=o("DebertaV2ForSequenceClassification"),pBo=o(" (DeBERTa-v2 model)"),uBo=l(),w2=a("li"),kge=a("strong"),_Bo=o("distilbert"),bBo=o(" \u2014 "),AO=a("a"),vBo=o("DistilBertForSequenceClassification"),FBo=o(" (DistilBERT model)"),TBo=l(),A2=a("li"),Sge=a("strong"),MBo=o("electra"),EBo=o(" \u2014 "),yO=a("a"),CBo=o("ElectraForSequenceClassification"),wBo=o(" (ELECTRA model)"),ABo=l(),y2=a("li"),Rge=a("strong"),yBo=o("flaubert"),LBo=o(" \u2014 "),LO=a("a"),xBo=o("FlaubertForSequenceClassification"),$Bo=o(" (FlauBERT model)"),kBo=l(),L2=a("li"),Pge=a("strong"),SBo=o("fnet"),RBo=o(" \u2014 "),xO=a("a"),PBo=o("FNetForSequenceClassification"),BBo=o(" (FNet model)"),IBo=l(),x2=a("li"),Bge=a("strong"),NBo=o("funnel"),qBo=o(" \u2014 "),$O=a("a"),jBo=o("FunnelForSequenceClassification"),DBo=o(" (Funnel Transformer model)"),GBo=l(),$2=a("li"),Ige=a("strong"),OBo=o("gpt2"),VBo=o(" \u2014 "),kO=a("a"),XBo=o("GPT2ForSequenceClassification"),zBo=o(" (OpenAI GPT-2 model)"),WBo=l(),k2=a("li"),Nge=a("strong"),QBo=o("gpt_neo"),HBo=o(" \u2014 "),SO=a("a"),UBo=o("GPTNeoForSequenceClassification"),JBo=o(" (GPT Neo model)"),YBo=l(),S2=a("li"),qge=a("strong"),KBo=o("gptj"),ZBo=o(" \u2014 "),RO=a("a"),eIo=o("GPTJForSequenceClassification"),oIo=o(" (GPT-J model)"),rIo=l(),R2=a("li"),jge=a("strong"),tIo=o("ibert"),aIo=o(" \u2014 "),PO=a("a"),nIo=o("IBertForSequenceClassification"),sIo=o(" (I-BERT model)"),lIo=l(),P2=a("li"),Dge=a("strong"),iIo=o("layoutlm"),dIo=o(" \u2014 "),BO=a("a"),cIo=o("LayoutLMForSequenceClassification"),fIo=o(" (LayoutLM model)"),mIo=l(),B2=a("li"),Gge=a("strong"),gIo=o("layoutlmv2"),hIo=o(" \u2014 "),IO=a("a"),pIo=o("LayoutLMv2ForSequenceClassification"),uIo=o(" (LayoutLMv2 model)"),_Io=l(),I2=a("li"),Oge=a("strong"),bIo=o("layoutlmv3"),vIo=o(" \u2014 "),NO=a("a"),FIo=o("LayoutLMv3ForSequenceClassification"),TIo=o(" (LayoutLMv3 model)"),MIo=l(),N2=a("li"),Vge=a("strong"),EIo=o("led"),CIo=o(" \u2014 "),qO=a("a"),wIo=o("LEDForSequenceClassification"),AIo=o(" (LED model)"),yIo=l(),q2=a("li"),Xge=a("strong"),LIo=o("longformer"),xIo=o(" \u2014 "),jO=a("a"),$Io=o("LongformerForSequenceClassification"),kIo=o(" (Longformer model)"),SIo=l(),j2=a("li"),zge=a("strong"),RIo=o("mbart"),PIo=o(" \u2014 "),DO=a("a"),BIo=o("MBartForSequenceClassification"),IIo=o(" (mBART model)"),NIo=l(),D2=a("li"),Wge=a("strong"),qIo=o("megatron-bert"),jIo=o(" \u2014 "),GO=a("a"),DIo=o("MegatronBertForSequenceClassification"),GIo=o(" (Megatron-BERT model)"),OIo=l(),G2=a("li"),Qge=a("strong"),VIo=o("mobilebert"),XIo=o(" \u2014 "),OO=a("a"),zIo=o("MobileBertForSequenceClassification"),WIo=o(" (MobileBERT model)"),QIo=l(),O2=a("li"),Hge=a("strong"),HIo=o("mpnet"),UIo=o(" \u2014 "),VO=a("a"),JIo=o("MPNetForSequenceClassification"),YIo=o(" (MPNet model)"),KIo=l(),V2=a("li"),Uge=a("strong"),ZIo=o("nystromformer"),eNo=o(" \u2014 "),XO=a("a"),oNo=o("NystromformerForSequenceClassification"),rNo=o(" (Nystr\xF6mformer model)"),tNo=l(),X2=a("li"),Jge=a("strong"),aNo=o("openai-gpt"),nNo=o(" \u2014 "),zO=a("a"),sNo=o("OpenAIGPTForSequenceClassification"),lNo=o(" (OpenAI GPT model)"),iNo=l(),z2=a("li"),Yge=a("strong"),dNo=o("perceiver"),cNo=o(" \u2014 "),WO=a("a"),fNo=o("PerceiverForSequenceClassification"),mNo=o(" (Perceiver model)"),gNo=l(),W2=a("li"),Kge=a("strong"),hNo=o("plbart"),pNo=o(" \u2014 "),QO=a("a"),uNo=o("PLBartForSequenceClassification"),_No=o(" (PLBart model)"),bNo=l(),Q2=a("li"),Zge=a("strong"),vNo=o("qdqbert"),FNo=o(" \u2014 "),HO=a("a"),TNo=o("QDQBertForSequenceClassification"),MNo=o(" (QDQBert model)"),ENo=l(),H2=a("li"),ehe=a("strong"),CNo=o("reformer"),wNo=o(" \u2014 "),UO=a("a"),ANo=o("ReformerForSequenceClassification"),yNo=o(" (Reformer model)"),LNo=l(),U2=a("li"),ohe=a("strong"),xNo=o("rembert"),$No=o(" \u2014 "),JO=a("a"),kNo=o("RemBertForSequenceClassification"),SNo=o(" (RemBERT model)"),RNo=l(),J2=a("li"),rhe=a("strong"),PNo=o("roberta"),BNo=o(" \u2014 "),YO=a("a"),INo=o("RobertaForSequenceClassification"),NNo=o(" (RoBERTa model)"),qNo=l(),Y2=a("li"),the=a("strong"),jNo=o("roformer"),DNo=o(" \u2014 "),KO=a("a"),GNo=o("RoFormerForSequenceClassification"),ONo=o(" (RoFormer model)"),VNo=l(),K2=a("li"),ahe=a("strong"),XNo=o("squeezebert"),zNo=o(" \u2014 "),ZO=a("a"),WNo=o("SqueezeBertForSequenceClassification"),QNo=o(" (SqueezeBERT model)"),HNo=l(),Z2=a("li"),nhe=a("strong"),UNo=o("tapas"),JNo=o(" \u2014 "),eV=a("a"),YNo=o("TapasForSequenceClassification"),KNo=o(" (TAPAS model)"),ZNo=l(),ev=a("li"),she=a("strong"),eqo=o("transfo-xl"),oqo=o(" \u2014 "),oV=a("a"),rqo=o("TransfoXLForSequenceClassification"),tqo=o(" (Transformer-XL model)"),aqo=l(),ov=a("li"),lhe=a("strong"),nqo=o("xlm"),sqo=o(" \u2014 "),rV=a("a"),lqo=o("XLMForSequenceClassification"),iqo=o(" (XLM model)"),dqo=l(),rv=a("li"),ihe=a("strong"),cqo=o("xlm-roberta"),fqo=o(" \u2014 "),tV=a("a"),mqo=o("XLMRobertaForSequenceClassification"),gqo=o(" (XLM-RoBERTa model)"),hqo=l(),tv=a("li"),dhe=a("strong"),pqo=o("xlm-roberta-xl"),uqo=o(" \u2014 "),aV=a("a"),_qo=o("XLMRobertaXLForSequenceClassification"),bqo=o(" (XLM-RoBERTa-XL model)"),vqo=l(),av=a("li"),che=a("strong"),Fqo=o("xlnet"),Tqo=o(" \u2014 "),nV=a("a"),Mqo=o("XLNetForSequenceClassification"),Eqo=o(" (XLNet model)"),Cqo=l(),nv=a("li"),fhe=a("strong"),wqo=o("yoso"),Aqo=o(" \u2014 "),sV=a("a"),yqo=o("YosoForSequenceClassification"),Lqo=o(" (YOSO model)"),xqo=l(),sv=a("p"),$qo=o("The model is set in evaluation mode by default using "),mhe=a("code"),kqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),Rqo=o("model.train()"),Pqo=l(),F(lv.$$.fragment),DDe=l(),Yi=a("h2"),iv=a("a"),hhe=a("span"),F(mA.$$.fragment),Bqo=l(),phe=a("span"),Iqo=o("AutoModelForMultipleChoice"),GDe=l(),Bo=a("div"),F(gA.$$.fragment),Nqo=l(),Ki=a("p"),qqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lV=a("a"),jqo=o("from_pretrained()"),Dqo=o(" class method or the "),iV=a("a"),Gqo=o("from_config()"),Oqo=o(` class
method.`),Vqo=l(),hA=a("p"),Xqo=o("This class cannot be instantiated directly using "),uhe=a("code"),zqo=o("__init__()"),Wqo=o(" (throws an error)."),Qqo=l(),ft=a("div"),F(pA.$$.fragment),Hqo=l(),_he=a("p"),Uqo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jqo=l(),Zi=a("p"),Yqo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),Kqo=o("not"),Zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),ejo=o("from_pretrained()"),ojo=o(" to load the model weights."),rjo=l(),F(dv.$$.fragment),tjo=l(),ro=a("div"),F(uA.$$.fragment),ajo=l(),vhe=a("p"),njo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sjo=l(),qa=a("p"),ljo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),ijo=o("model_type"),djo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),cjo=o("pretrained_model_name_or_path"),fjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),mjo=o("pretrained_model_name_or_path"),gjo=o(":"),hjo=l(),Z=a("ul"),cv=a("li"),Ehe=a("strong"),pjo=o("albert"),ujo=o(" \u2014 "),cV=a("a"),_jo=o("AlbertForMultipleChoice"),bjo=o(" (ALBERT model)"),vjo=l(),fv=a("li"),Che=a("strong"),Fjo=o("bert"),Tjo=o(" \u2014 "),fV=a("a"),Mjo=o("BertForMultipleChoice"),Ejo=o(" (BERT model)"),Cjo=l(),mv=a("li"),whe=a("strong"),wjo=o("big_bird"),Ajo=o(" \u2014 "),mV=a("a"),yjo=o("BigBirdForMultipleChoice"),Ljo=o(" (BigBird model)"),xjo=l(),gv=a("li"),Ahe=a("strong"),$jo=o("camembert"),kjo=o(" \u2014 "),gV=a("a"),Sjo=o("CamembertForMultipleChoice"),Rjo=o(" (CamemBERT model)"),Pjo=l(),hv=a("li"),yhe=a("strong"),Bjo=o("canine"),Ijo=o(" \u2014 "),hV=a("a"),Njo=o("CanineForMultipleChoice"),qjo=o(" (CANINE model)"),jjo=l(),pv=a("li"),Lhe=a("strong"),Djo=o("convbert"),Gjo=o(" \u2014 "),pV=a("a"),Ojo=o("ConvBertForMultipleChoice"),Vjo=o(" (ConvBERT model)"),Xjo=l(),uv=a("li"),xhe=a("strong"),zjo=o("data2vec-text"),Wjo=o(" \u2014 "),uV=a("a"),Qjo=o("Data2VecTextForMultipleChoice"),Hjo=o(" (Data2VecText model)"),Ujo=l(),_v=a("li"),$he=a("strong"),Jjo=o("deberta-v2"),Yjo=o(" \u2014 "),_V=a("a"),Kjo=o("DebertaV2ForMultipleChoice"),Zjo=o(" (DeBERTa-v2 model)"),eDo=l(),bv=a("li"),khe=a("strong"),oDo=o("distilbert"),rDo=o(" \u2014 "),bV=a("a"),tDo=o("DistilBertForMultipleChoice"),aDo=o(" (DistilBERT model)"),nDo=l(),vv=a("li"),She=a("strong"),sDo=o("electra"),lDo=o(" \u2014 "),vV=a("a"),iDo=o("ElectraForMultipleChoice"),dDo=o(" (ELECTRA model)"),cDo=l(),Fv=a("li"),Rhe=a("strong"),fDo=o("flaubert"),mDo=o(" \u2014 "),FV=a("a"),gDo=o("FlaubertForMultipleChoice"),hDo=o(" (FlauBERT model)"),pDo=l(),Tv=a("li"),Phe=a("strong"),uDo=o("fnet"),_Do=o(" \u2014 "),TV=a("a"),bDo=o("FNetForMultipleChoice"),vDo=o(" (FNet model)"),FDo=l(),Mv=a("li"),Bhe=a("strong"),TDo=o("funnel"),MDo=o(" \u2014 "),MV=a("a"),EDo=o("FunnelForMultipleChoice"),CDo=o(" (Funnel Transformer model)"),wDo=l(),Ev=a("li"),Ihe=a("strong"),ADo=o("ibert"),yDo=o(" \u2014 "),EV=a("a"),LDo=o("IBertForMultipleChoice"),xDo=o(" (I-BERT model)"),$Do=l(),Cv=a("li"),Nhe=a("strong"),kDo=o("longformer"),SDo=o(" \u2014 "),CV=a("a"),RDo=o("LongformerForMultipleChoice"),PDo=o(" (Longformer model)"),BDo=l(),wv=a("li"),qhe=a("strong"),IDo=o("megatron-bert"),NDo=o(" \u2014 "),wV=a("a"),qDo=o("MegatronBertForMultipleChoice"),jDo=o(" (Megatron-BERT model)"),DDo=l(),Av=a("li"),jhe=a("strong"),GDo=o("mobilebert"),ODo=o(" \u2014 "),AV=a("a"),VDo=o("MobileBertForMultipleChoice"),XDo=o(" (MobileBERT model)"),zDo=l(),yv=a("li"),Dhe=a("strong"),WDo=o("mpnet"),QDo=o(" \u2014 "),yV=a("a"),HDo=o("MPNetForMultipleChoice"),UDo=o(" (MPNet model)"),JDo=l(),Lv=a("li"),Ghe=a("strong"),YDo=o("nystromformer"),KDo=o(" \u2014 "),LV=a("a"),ZDo=o("NystromformerForMultipleChoice"),eGo=o(" (Nystr\xF6mformer model)"),oGo=l(),xv=a("li"),Ohe=a("strong"),rGo=o("qdqbert"),tGo=o(" \u2014 "),xV=a("a"),aGo=o("QDQBertForMultipleChoice"),nGo=o(" (QDQBert model)"),sGo=l(),$v=a("li"),Vhe=a("strong"),lGo=o("rembert"),iGo=o(" \u2014 "),$V=a("a"),dGo=o("RemBertForMultipleChoice"),cGo=o(" (RemBERT model)"),fGo=l(),kv=a("li"),Xhe=a("strong"),mGo=o("roberta"),gGo=o(" \u2014 "),kV=a("a"),hGo=o("RobertaForMultipleChoice"),pGo=o(" (RoBERTa model)"),uGo=l(),Sv=a("li"),zhe=a("strong"),_Go=o("roformer"),bGo=o(" \u2014 "),SV=a("a"),vGo=o("RoFormerForMultipleChoice"),FGo=o(" (RoFormer model)"),TGo=l(),Rv=a("li"),Whe=a("strong"),MGo=o("squeezebert"),EGo=o(" \u2014 "),RV=a("a"),CGo=o("SqueezeBertForMultipleChoice"),wGo=o(" (SqueezeBERT model)"),AGo=l(),Pv=a("li"),Qhe=a("strong"),yGo=o("xlm"),LGo=o(" \u2014 "),PV=a("a"),xGo=o("XLMForMultipleChoice"),$Go=o(" (XLM model)"),kGo=l(),Bv=a("li"),Hhe=a("strong"),SGo=o("xlm-roberta"),RGo=o(" \u2014 "),BV=a("a"),PGo=o("XLMRobertaForMultipleChoice"),BGo=o(" (XLM-RoBERTa model)"),IGo=l(),Iv=a("li"),Uhe=a("strong"),NGo=o("xlm-roberta-xl"),qGo=o(" \u2014 "),IV=a("a"),jGo=o("XLMRobertaXLForMultipleChoice"),DGo=o(" (XLM-RoBERTa-XL model)"),GGo=l(),Nv=a("li"),Jhe=a("strong"),OGo=o("xlnet"),VGo=o(" \u2014 "),NV=a("a"),XGo=o("XLNetForMultipleChoice"),zGo=o(" (XLNet model)"),WGo=l(),qv=a("li"),Yhe=a("strong"),QGo=o("yoso"),HGo=o(" \u2014 "),qV=a("a"),UGo=o("YosoForMultipleChoice"),JGo=o(" (YOSO model)"),YGo=l(),jv=a("p"),KGo=o("The model is set in evaluation mode by default using "),Khe=a("code"),ZGo=o("model.eval()"),eOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),oOo=o("model.train()"),rOo=l(),F(Dv.$$.fragment),ODe=l(),ed=a("h2"),Gv=a("a"),epe=a("span"),F(_A.$$.fragment),tOo=l(),ope=a("span"),aOo=o("AutoModelForNextSentencePrediction"),VDe=l(),Io=a("div"),F(bA.$$.fragment),nOo=l(),od=a("p"),sOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jV=a("a"),lOo=o("from_pretrained()"),iOo=o(" class method or the "),DV=a("a"),dOo=o("from_config()"),cOo=o(` class
method.`),fOo=l(),vA=a("p"),mOo=o("This class cannot be instantiated directly using "),rpe=a("code"),gOo=o("__init__()"),hOo=o(" (throws an error)."),pOo=l(),mt=a("div"),F(FA.$$.fragment),uOo=l(),tpe=a("p"),_Oo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bOo=l(),rd=a("p"),vOo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),FOo=o("not"),TOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),MOo=o("from_pretrained()"),EOo=o(" to load the model weights."),COo=l(),F(Ov.$$.fragment),wOo=l(),to=a("div"),F(TA.$$.fragment),AOo=l(),npe=a("p"),yOo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LOo=l(),ja=a("p"),xOo=o("The model class to instantiate is selected based on the "),spe=a("code"),$Oo=o("model_type"),kOo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),SOo=o("pretrained_model_name_or_path"),ROo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),POo=o("pretrained_model_name_or_path"),BOo=o(":"),IOo=l(),Zr=a("ul"),Vv=a("li"),dpe=a("strong"),NOo=o("bert"),qOo=o(" \u2014 "),OV=a("a"),jOo=o("BertForNextSentencePrediction"),DOo=o(" (BERT model)"),GOo=l(),Xv=a("li"),cpe=a("strong"),OOo=o("fnet"),VOo=o(" \u2014 "),VV=a("a"),XOo=o("FNetForNextSentencePrediction"),zOo=o(" (FNet model)"),WOo=l(),zv=a("li"),fpe=a("strong"),QOo=o("megatron-bert"),HOo=o(" \u2014 "),XV=a("a"),UOo=o("MegatronBertForNextSentencePrediction"),JOo=o(" (Megatron-BERT model)"),YOo=l(),Wv=a("li"),mpe=a("strong"),KOo=o("mobilebert"),ZOo=o(" \u2014 "),zV=a("a"),eVo=o("MobileBertForNextSentencePrediction"),oVo=o(" (MobileBERT model)"),rVo=l(),Qv=a("li"),gpe=a("strong"),tVo=o("qdqbert"),aVo=o(" \u2014 "),WV=a("a"),nVo=o("QDQBertForNextSentencePrediction"),sVo=o(" (QDQBert model)"),lVo=l(),Hv=a("p"),iVo=o("The model is set in evaluation mode by default using "),hpe=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),fVo=o("model.train()"),mVo=l(),F(Uv.$$.fragment),XDe=l(),td=a("h2"),Jv=a("a"),upe=a("span"),F(MA.$$.fragment),gVo=l(),_pe=a("span"),hVo=o("AutoModelForTokenClassification"),zDe=l(),No=a("div"),F(EA.$$.fragment),pVo=l(),ad=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QV=a("a"),_Vo=o("from_pretrained()"),bVo=o(" class method or the "),HV=a("a"),vVo=o("from_config()"),FVo=o(` class
method.`),TVo=l(),CA=a("p"),MVo=o("This class cannot be instantiated directly using "),bpe=a("code"),EVo=o("__init__()"),CVo=o(" (throws an error)."),wVo=l(),gt=a("div"),F(wA.$$.fragment),AVo=l(),vpe=a("p"),yVo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LVo=l(),nd=a("p"),xVo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),$Vo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),SVo=o("from_pretrained()"),RVo=o(" to load the model weights."),PVo=l(),F(Yv.$$.fragment),BVo=l(),ao=a("div"),F(AA.$$.fragment),IVo=l(),Tpe=a("p"),NVo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qVo=l(),Da=a("p"),jVo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),WVo=l(),U=a("ul"),Kv=a("li"),wpe=a("strong"),QVo=o("albert"),HVo=o(" \u2014 "),JV=a("a"),UVo=o("AlbertForTokenClassification"),JVo=o(" (ALBERT model)"),YVo=l(),Zv=a("li"),Ape=a("strong"),KVo=o("bert"),ZVo=o(" \u2014 "),YV=a("a"),eXo=o("BertForTokenClassification"),oXo=o(" (BERT model)"),rXo=l(),eF=a("li"),ype=a("strong"),tXo=o("big_bird"),aXo=o(" \u2014 "),KV=a("a"),nXo=o("BigBirdForTokenClassification"),sXo=o(" (BigBird model)"),lXo=l(),oF=a("li"),Lpe=a("strong"),iXo=o("camembert"),dXo=o(" \u2014 "),ZV=a("a"),cXo=o("CamembertForTokenClassification"),fXo=o(" (CamemBERT model)"),mXo=l(),rF=a("li"),xpe=a("strong"),gXo=o("canine"),hXo=o(" \u2014 "),eX=a("a"),pXo=o("CanineForTokenClassification"),uXo=o(" (CANINE model)"),_Xo=l(),tF=a("li"),$pe=a("strong"),bXo=o("convbert"),vXo=o(" \u2014 "),oX=a("a"),FXo=o("ConvBertForTokenClassification"),TXo=o(" (ConvBERT model)"),MXo=l(),aF=a("li"),kpe=a("strong"),EXo=o("data2vec-text"),CXo=o(" \u2014 "),rX=a("a"),wXo=o("Data2VecTextForTokenClassification"),AXo=o(" (Data2VecText model)"),yXo=l(),nF=a("li"),Spe=a("strong"),LXo=o("deberta"),xXo=o(" \u2014 "),tX=a("a"),$Xo=o("DebertaForTokenClassification"),kXo=o(" (DeBERTa model)"),SXo=l(),sF=a("li"),Rpe=a("strong"),RXo=o("deberta-v2"),PXo=o(" \u2014 "),aX=a("a"),BXo=o("DebertaV2ForTokenClassification"),IXo=o(" (DeBERTa-v2 model)"),NXo=l(),lF=a("li"),Ppe=a("strong"),qXo=o("distilbert"),jXo=o(" \u2014 "),nX=a("a"),DXo=o("DistilBertForTokenClassification"),GXo=o(" (DistilBERT model)"),OXo=l(),iF=a("li"),Bpe=a("strong"),VXo=o("electra"),XXo=o(" \u2014 "),sX=a("a"),zXo=o("ElectraForTokenClassification"),WXo=o(" (ELECTRA model)"),QXo=l(),dF=a("li"),Ipe=a("strong"),HXo=o("flaubert"),UXo=o(" \u2014 "),lX=a("a"),JXo=o("FlaubertForTokenClassification"),YXo=o(" (FlauBERT model)"),KXo=l(),cF=a("li"),Npe=a("strong"),ZXo=o("fnet"),ezo=o(" \u2014 "),iX=a("a"),ozo=o("FNetForTokenClassification"),rzo=o(" (FNet model)"),tzo=l(),fF=a("li"),qpe=a("strong"),azo=o("funnel"),nzo=o(" \u2014 "),dX=a("a"),szo=o("FunnelForTokenClassification"),lzo=o(" (Funnel Transformer model)"),izo=l(),mF=a("li"),jpe=a("strong"),dzo=o("gpt2"),czo=o(" \u2014 "),cX=a("a"),fzo=o("GPT2ForTokenClassification"),mzo=o(" (OpenAI GPT-2 model)"),gzo=l(),gF=a("li"),Dpe=a("strong"),hzo=o("ibert"),pzo=o(" \u2014 "),fX=a("a"),uzo=o("IBertForTokenClassification"),_zo=o(" (I-BERT model)"),bzo=l(),hF=a("li"),Gpe=a("strong"),vzo=o("layoutlm"),Fzo=o(" \u2014 "),mX=a("a"),Tzo=o("LayoutLMForTokenClassification"),Mzo=o(" (LayoutLM model)"),Ezo=l(),pF=a("li"),Ope=a("strong"),Czo=o("layoutlmv2"),wzo=o(" \u2014 "),gX=a("a"),Azo=o("LayoutLMv2ForTokenClassification"),yzo=o(" (LayoutLMv2 model)"),Lzo=l(),uF=a("li"),Vpe=a("strong"),xzo=o("layoutlmv3"),$zo=o(" \u2014 "),hX=a("a"),kzo=o("LayoutLMv3ForTokenClassification"),Szo=o(" (LayoutLMv3 model)"),Rzo=l(),_F=a("li"),Xpe=a("strong"),Pzo=o("longformer"),Bzo=o(" \u2014 "),pX=a("a"),Izo=o("LongformerForTokenClassification"),Nzo=o(" (Longformer model)"),qzo=l(),bF=a("li"),zpe=a("strong"),jzo=o("megatron-bert"),Dzo=o(" \u2014 "),uX=a("a"),Gzo=o("MegatronBertForTokenClassification"),Ozo=o(" (Megatron-BERT model)"),Vzo=l(),vF=a("li"),Wpe=a("strong"),Xzo=o("mobilebert"),zzo=o(" \u2014 "),_X=a("a"),Wzo=o("MobileBertForTokenClassification"),Qzo=o(" (MobileBERT model)"),Hzo=l(),FF=a("li"),Qpe=a("strong"),Uzo=o("mpnet"),Jzo=o(" \u2014 "),bX=a("a"),Yzo=o("MPNetForTokenClassification"),Kzo=o(" (MPNet model)"),Zzo=l(),TF=a("li"),Hpe=a("strong"),eWo=o("nystromformer"),oWo=o(" \u2014 "),vX=a("a"),rWo=o("NystromformerForTokenClassification"),tWo=o(" (Nystr\xF6mformer model)"),aWo=l(),MF=a("li"),Upe=a("strong"),nWo=o("qdqbert"),sWo=o(" \u2014 "),FX=a("a"),lWo=o("QDQBertForTokenClassification"),iWo=o(" (QDQBert model)"),dWo=l(),EF=a("li"),Jpe=a("strong"),cWo=o("rembert"),fWo=o(" \u2014 "),TX=a("a"),mWo=o("RemBertForTokenClassification"),gWo=o(" (RemBERT model)"),hWo=l(),CF=a("li"),Ype=a("strong"),pWo=o("roberta"),uWo=o(" \u2014 "),MX=a("a"),_Wo=o("RobertaForTokenClassification"),bWo=o(" (RoBERTa model)"),vWo=l(),wF=a("li"),Kpe=a("strong"),FWo=o("roformer"),TWo=o(" \u2014 "),EX=a("a"),MWo=o("RoFormerForTokenClassification"),EWo=o(" (RoFormer model)"),CWo=l(),AF=a("li"),Zpe=a("strong"),wWo=o("squeezebert"),AWo=o(" \u2014 "),CX=a("a"),yWo=o("SqueezeBertForTokenClassification"),LWo=o(" (SqueezeBERT model)"),xWo=l(),yF=a("li"),eue=a("strong"),$Wo=o("xlm"),kWo=o(" \u2014 "),wX=a("a"),SWo=o("XLMForTokenClassification"),RWo=o(" (XLM model)"),PWo=l(),LF=a("li"),oue=a("strong"),BWo=o("xlm-roberta"),IWo=o(" \u2014 "),AX=a("a"),NWo=o("XLMRobertaForTokenClassification"),qWo=o(" (XLM-RoBERTa model)"),jWo=l(),xF=a("li"),rue=a("strong"),DWo=o("xlm-roberta-xl"),GWo=o(" \u2014 "),yX=a("a"),OWo=o("XLMRobertaXLForTokenClassification"),VWo=o(" (XLM-RoBERTa-XL model)"),XWo=l(),$F=a("li"),tue=a("strong"),zWo=o("xlnet"),WWo=o(" \u2014 "),LX=a("a"),QWo=o("XLNetForTokenClassification"),HWo=o(" (XLNet model)"),UWo=l(),kF=a("li"),aue=a("strong"),JWo=o("yoso"),YWo=o(" \u2014 "),xX=a("a"),KWo=o("YosoForTokenClassification"),ZWo=o(" (YOSO model)"),eQo=l(),SF=a("p"),oQo=o("The model is set in evaluation mode by default using "),nue=a("code"),rQo=o("model.eval()"),tQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),aQo=o("model.train()"),nQo=l(),F(RF.$$.fragment),WDe=l(),sd=a("h2"),PF=a("a"),lue=a("span"),F(yA.$$.fragment),sQo=l(),iue=a("span"),lQo=o("AutoModelForQuestionAnswering"),QDe=l(),qo=a("div"),F(LA.$$.fragment),iQo=l(),ld=a("p"),dQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$X=a("a"),cQo=o("from_pretrained()"),fQo=o(" class method or the "),kX=a("a"),mQo=o("from_config()"),gQo=o(` class
method.`),hQo=l(),xA=a("p"),pQo=o("This class cannot be instantiated directly using "),due=a("code"),uQo=o("__init__()"),_Qo=o(" (throws an error)."),bQo=l(),ht=a("div"),F($A.$$.fragment),vQo=l(),cue=a("p"),FQo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TQo=l(),id=a("p"),MQo=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),EQo=o("not"),CQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),wQo=o("from_pretrained()"),AQo=o(" to load the model weights."),yQo=l(),F(BF.$$.fragment),LQo=l(),no=a("div"),F(kA.$$.fragment),xQo=l(),mue=a("p"),$Qo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kQo=l(),Ga=a("p"),SQo=o("The model class to instantiate is selected based on the "),gue=a("code"),RQo=o("model_type"),PQo=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),BQo=o("pretrained_model_name_or_path"),IQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),NQo=o("pretrained_model_name_or_path"),qQo=o(":"),jQo=l(),V=a("ul"),IF=a("li"),uue=a("strong"),DQo=o("albert"),GQo=o(" \u2014 "),RX=a("a"),OQo=o("AlbertForQuestionAnswering"),VQo=o(" (ALBERT model)"),XQo=l(),NF=a("li"),_ue=a("strong"),zQo=o("bart"),WQo=o(" \u2014 "),PX=a("a"),QQo=o("BartForQuestionAnswering"),HQo=o(" (BART model)"),UQo=l(),qF=a("li"),bue=a("strong"),JQo=o("bert"),YQo=o(" \u2014 "),BX=a("a"),KQo=o("BertForQuestionAnswering"),ZQo=o(" (BERT model)"),eHo=l(),jF=a("li"),vue=a("strong"),oHo=o("big_bird"),rHo=o(" \u2014 "),IX=a("a"),tHo=o("BigBirdForQuestionAnswering"),aHo=o(" (BigBird model)"),nHo=l(),DF=a("li"),Fue=a("strong"),sHo=o("bigbird_pegasus"),lHo=o(" \u2014 "),NX=a("a"),iHo=o("BigBirdPegasusForQuestionAnswering"),dHo=o(" (BigBird-Pegasus model)"),cHo=l(),GF=a("li"),Tue=a("strong"),fHo=o("camembert"),mHo=o(" \u2014 "),qX=a("a"),gHo=o("CamembertForQuestionAnswering"),hHo=o(" (CamemBERT model)"),pHo=l(),OF=a("li"),Mue=a("strong"),uHo=o("canine"),_Ho=o(" \u2014 "),jX=a("a"),bHo=o("CanineForQuestionAnswering"),vHo=o(" (CANINE model)"),FHo=l(),VF=a("li"),Eue=a("strong"),THo=o("convbert"),MHo=o(" \u2014 "),DX=a("a"),EHo=o("ConvBertForQuestionAnswering"),CHo=o(" (ConvBERT model)"),wHo=l(),XF=a("li"),Cue=a("strong"),AHo=o("data2vec-text"),yHo=o(" \u2014 "),GX=a("a"),LHo=o("Data2VecTextForQuestionAnswering"),xHo=o(" (Data2VecText model)"),$Ho=l(),zF=a("li"),wue=a("strong"),kHo=o("deberta"),SHo=o(" \u2014 "),OX=a("a"),RHo=o("DebertaForQuestionAnswering"),PHo=o(" (DeBERTa model)"),BHo=l(),WF=a("li"),Aue=a("strong"),IHo=o("deberta-v2"),NHo=o(" \u2014 "),VX=a("a"),qHo=o("DebertaV2ForQuestionAnswering"),jHo=o(" (DeBERTa-v2 model)"),DHo=l(),QF=a("li"),yue=a("strong"),GHo=o("distilbert"),OHo=o(" \u2014 "),XX=a("a"),VHo=o("DistilBertForQuestionAnswering"),XHo=o(" (DistilBERT model)"),zHo=l(),HF=a("li"),Lue=a("strong"),WHo=o("electra"),QHo=o(" \u2014 "),zX=a("a"),HHo=o("ElectraForQuestionAnswering"),UHo=o(" (ELECTRA model)"),JHo=l(),UF=a("li"),xue=a("strong"),YHo=o("flaubert"),KHo=o(" \u2014 "),WX=a("a"),ZHo=o("FlaubertForQuestionAnsweringSimple"),eUo=o(" (FlauBERT model)"),oUo=l(),JF=a("li"),$ue=a("strong"),rUo=o("fnet"),tUo=o(" \u2014 "),QX=a("a"),aUo=o("FNetForQuestionAnswering"),nUo=o(" (FNet model)"),sUo=l(),YF=a("li"),kue=a("strong"),lUo=o("funnel"),iUo=o(" \u2014 "),HX=a("a"),dUo=o("FunnelForQuestionAnswering"),cUo=o(" (Funnel Transformer model)"),fUo=l(),KF=a("li"),Sue=a("strong"),mUo=o("gptj"),gUo=o(" \u2014 "),UX=a("a"),hUo=o("GPTJForQuestionAnswering"),pUo=o(" (GPT-J model)"),uUo=l(),ZF=a("li"),Rue=a("strong"),_Uo=o("ibert"),bUo=o(" \u2014 "),JX=a("a"),vUo=o("IBertForQuestionAnswering"),FUo=o(" (I-BERT model)"),TUo=l(),e6=a("li"),Pue=a("strong"),MUo=o("layoutlmv2"),EUo=o(" \u2014 "),YX=a("a"),CUo=o("LayoutLMv2ForQuestionAnswering"),wUo=o(" (LayoutLMv2 model)"),AUo=l(),o6=a("li"),Bue=a("strong"),yUo=o("layoutlmv3"),LUo=o(" \u2014 "),KX=a("a"),xUo=o("LayoutLMv3ForQuestionAnswering"),$Uo=o(" (LayoutLMv3 model)"),kUo=l(),r6=a("li"),Iue=a("strong"),SUo=o("led"),RUo=o(" \u2014 "),ZX=a("a"),PUo=o("LEDForQuestionAnswering"),BUo=o(" (LED model)"),IUo=l(),t6=a("li"),Nue=a("strong"),NUo=o("longformer"),qUo=o(" \u2014 "),ez=a("a"),jUo=o("LongformerForQuestionAnswering"),DUo=o(" (Longformer model)"),GUo=l(),a6=a("li"),que=a("strong"),OUo=o("lxmert"),VUo=o(" \u2014 "),oz=a("a"),XUo=o("LxmertForQuestionAnswering"),zUo=o(" (LXMERT model)"),WUo=l(),n6=a("li"),jue=a("strong"),QUo=o("mbart"),HUo=o(" \u2014 "),rz=a("a"),UUo=o("MBartForQuestionAnswering"),JUo=o(" (mBART model)"),YUo=l(),s6=a("li"),Due=a("strong"),KUo=o("megatron-bert"),ZUo=o(" \u2014 "),tz=a("a"),eJo=o("MegatronBertForQuestionAnswering"),oJo=o(" (Megatron-BERT model)"),rJo=l(),l6=a("li"),Gue=a("strong"),tJo=o("mobilebert"),aJo=o(" \u2014 "),az=a("a"),nJo=o("MobileBertForQuestionAnswering"),sJo=o(" (MobileBERT model)"),lJo=l(),i6=a("li"),Oue=a("strong"),iJo=o("mpnet"),dJo=o(" \u2014 "),nz=a("a"),cJo=o("MPNetForQuestionAnswering"),fJo=o(" (MPNet model)"),mJo=l(),d6=a("li"),Vue=a("strong"),gJo=o("nystromformer"),hJo=o(" \u2014 "),sz=a("a"),pJo=o("NystromformerForQuestionAnswering"),uJo=o(" (Nystr\xF6mformer model)"),_Jo=l(),c6=a("li"),Xue=a("strong"),bJo=o("qdqbert"),vJo=o(" \u2014 "),lz=a("a"),FJo=o("QDQBertForQuestionAnswering"),TJo=o(" (QDQBert model)"),MJo=l(),f6=a("li"),zue=a("strong"),EJo=o("reformer"),CJo=o(" \u2014 "),iz=a("a"),wJo=o("ReformerForQuestionAnswering"),AJo=o(" (Reformer model)"),yJo=l(),m6=a("li"),Wue=a("strong"),LJo=o("rembert"),xJo=o(" \u2014 "),dz=a("a"),$Jo=o("RemBertForQuestionAnswering"),kJo=o(" (RemBERT model)"),SJo=l(),g6=a("li"),Que=a("strong"),RJo=o("roberta"),PJo=o(" \u2014 "),cz=a("a"),BJo=o("RobertaForQuestionAnswering"),IJo=o(" (RoBERTa model)"),NJo=l(),h6=a("li"),Hue=a("strong"),qJo=o("roformer"),jJo=o(" \u2014 "),fz=a("a"),DJo=o("RoFormerForQuestionAnswering"),GJo=o(" (RoFormer model)"),OJo=l(),p6=a("li"),Uue=a("strong"),VJo=o("splinter"),XJo=o(" \u2014 "),mz=a("a"),zJo=o("SplinterForQuestionAnswering"),WJo=o(" (Splinter model)"),QJo=l(),u6=a("li"),Jue=a("strong"),HJo=o("squeezebert"),UJo=o(" \u2014 "),gz=a("a"),JJo=o("SqueezeBertForQuestionAnswering"),YJo=o(" (SqueezeBERT model)"),KJo=l(),_6=a("li"),Yue=a("strong"),ZJo=o("xlm"),eYo=o(" \u2014 "),hz=a("a"),oYo=o("XLMForQuestionAnsweringSimple"),rYo=o(" (XLM model)"),tYo=l(),b6=a("li"),Kue=a("strong"),aYo=o("xlm-roberta"),nYo=o(" \u2014 "),pz=a("a"),sYo=o("XLMRobertaForQuestionAnswering"),lYo=o(" (XLM-RoBERTa model)"),iYo=l(),v6=a("li"),Zue=a("strong"),dYo=o("xlm-roberta-xl"),cYo=o(" \u2014 "),uz=a("a"),fYo=o("XLMRobertaXLForQuestionAnswering"),mYo=o(" (XLM-RoBERTa-XL model)"),gYo=l(),F6=a("li"),e_e=a("strong"),hYo=o("xlnet"),pYo=o(" \u2014 "),_z=a("a"),uYo=o("XLNetForQuestionAnsweringSimple"),_Yo=o(" (XLNet model)"),bYo=l(),T6=a("li"),o_e=a("strong"),vYo=o("yoso"),FYo=o(" \u2014 "),bz=a("a"),TYo=o("YosoForQuestionAnswering"),MYo=o(" (YOSO model)"),EYo=l(),M6=a("p"),CYo=o("The model is set in evaluation mode by default using "),r_e=a("code"),wYo=o("model.eval()"),AYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),yYo=o("model.train()"),LYo=l(),F(E6.$$.fragment),HDe=l(),dd=a("h2"),C6=a("a"),a_e=a("span"),F(SA.$$.fragment),xYo=l(),n_e=a("span"),$Yo=o("AutoModelForTableQuestionAnswering"),UDe=l(),jo=a("div"),F(RA.$$.fragment),kYo=l(),cd=a("p"),SYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vz=a("a"),RYo=o("from_pretrained()"),PYo=o(" class method or the "),Fz=a("a"),BYo=o("from_config()"),IYo=o(` class
method.`),NYo=l(),PA=a("p"),qYo=o("This class cannot be instantiated directly using "),s_e=a("code"),jYo=o("__init__()"),DYo=o(" (throws an error)."),GYo=l(),pt=a("div"),F(BA.$$.fragment),OYo=l(),l_e=a("p"),VYo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XYo=l(),fd=a("p"),zYo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),WYo=o("not"),QYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),HYo=o("from_pretrained()"),UYo=o(" to load the model weights."),JYo=l(),F(w6.$$.fragment),YYo=l(),so=a("div"),F(IA.$$.fragment),KYo=l(),d_e=a("p"),ZYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eKo=l(),Oa=a("p"),oKo=o("The model class to instantiate is selected based on the "),c_e=a("code"),rKo=o("model_type"),tKo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),aKo=o("pretrained_model_name_or_path"),nKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(":"),iKo=l(),g_e=a("ul"),A6=a("li"),h_e=a("strong"),dKo=o("tapas"),cKo=o(" \u2014 "),Mz=a("a"),fKo=o("TapasForQuestionAnswering"),mKo=o(" (TAPAS model)"),gKo=l(),y6=a("p"),hKo=o("The model is set in evaluation mode by default using "),p_e=a("code"),pKo=o("model.eval()"),uKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),_Ko=o("model.train()"),bKo=l(),F(L6.$$.fragment),JDe=l(),md=a("h2"),x6=a("a"),__e=a("span"),F(NA.$$.fragment),vKo=l(),b_e=a("span"),FKo=o("AutoModelForImageClassification"),YDe=l(),Do=a("div"),F(qA.$$.fragment),TKo=l(),gd=a("p"),MKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ez=a("a"),EKo=o("from_pretrained()"),CKo=o(" class method or the "),Cz=a("a"),wKo=o("from_config()"),AKo=o(` class
method.`),yKo=l(),jA=a("p"),LKo=o("This class cannot be instantiated directly using "),v_e=a("code"),xKo=o("__init__()"),$Ko=o(" (throws an error)."),kKo=l(),ut=a("div"),F(DA.$$.fragment),SKo=l(),F_e=a("p"),RKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PKo=l(),hd=a("p"),BKo=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),IKo=o("not"),NKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),qKo=o("from_pretrained()"),jKo=o(" to load the model weights."),DKo=l(),F($6.$$.fragment),GKo=l(),lo=a("div"),F(GA.$$.fragment),OKo=l(),M_e=a("p"),VKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XKo=l(),Va=a("p"),zKo=o("The model class to instantiate is selected based on the "),E_e=a("code"),WKo=o("model_type"),QKo=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),HKo=o("pretrained_model_name_or_path"),UKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),JKo=o("pretrained_model_name_or_path"),YKo=o(":"),KKo=l(),ve=a("ul"),k6=a("li"),A_e=a("strong"),ZKo=o("beit"),eZo=o(" \u2014 "),Az=a("a"),oZo=o("BeitForImageClassification"),rZo=o(" (BEiT model)"),tZo=l(),S6=a("li"),y_e=a("strong"),aZo=o("convnext"),nZo=o(" \u2014 "),yz=a("a"),sZo=o("ConvNextForImageClassification"),lZo=o(" (ConvNeXT model)"),iZo=l(),R6=a("li"),L_e=a("strong"),dZo=o("cvt"),cZo=o(" \u2014 "),Lz=a("a"),fZo=o("CvtForImageClassification"),mZo=o(" (CvT model)"),gZo=l(),P6=a("li"),x_e=a("strong"),hZo=o("data2vec-vision"),pZo=o(" \u2014 "),xz=a("a"),uZo=o("Data2VecVisionForImageClassification"),_Zo=o(" (Data2VecVision model)"),bZo=l(),Gs=a("li"),$_e=a("strong"),vZo=o("deit"),FZo=o(" \u2014 "),$z=a("a"),TZo=o("DeiTForImageClassification"),MZo=o(" or "),kz=a("a"),EZo=o("DeiTForImageClassificationWithTeacher"),CZo=o(" (DeiT model)"),wZo=l(),B6=a("li"),k_e=a("strong"),AZo=o("imagegpt"),yZo=o(" \u2014 "),Sz=a("a"),LZo=o("ImageGPTForImageClassification"),xZo=o(" (ImageGPT model)"),$Zo=l(),Os=a("li"),S_e=a("strong"),kZo=o("levit"),SZo=o(" \u2014 "),Rz=a("a"),RZo=o("LevitForImageClassification"),PZo=o(" or "),Pz=a("a"),BZo=o("LevitForImageClassificationWithTeacher"),IZo=o(" (LeViT model)"),NZo=l(),_t=a("li"),R_e=a("strong"),qZo=o("perceiver"),jZo=o(" \u2014 "),Bz=a("a"),DZo=o("PerceiverForImageClassificationLearned"),GZo=o(" or "),Iz=a("a"),OZo=o("PerceiverForImageClassificationFourier"),VZo=o(" or "),Nz=a("a"),XZo=o("PerceiverForImageClassificationConvProcessing"),zZo=o(" (Perceiver model)"),WZo=l(),I6=a("li"),P_e=a("strong"),QZo=o("poolformer"),HZo=o(" \u2014 "),qz=a("a"),UZo=o("PoolFormerForImageClassification"),JZo=o(" (PoolFormer model)"),YZo=l(),N6=a("li"),B_e=a("strong"),KZo=o("regnet"),ZZo=o(" \u2014 "),jz=a("a"),eer=o("RegNetForImageClassification"),oer=o(" (RegNet model)"),rer=l(),q6=a("li"),I_e=a("strong"),ter=o("resnet"),aer=o(" \u2014 "),Dz=a("a"),ner=o("ResNetForImageClassification"),ser=o(" (ResNet model)"),ler=l(),j6=a("li"),N_e=a("strong"),ier=o("segformer"),der=o(" \u2014 "),Gz=a("a"),cer=o("SegformerForImageClassification"),fer=o(" (SegFormer model)"),mer=l(),D6=a("li"),q_e=a("strong"),ger=o("swin"),her=o(" \u2014 "),Oz=a("a"),per=o("SwinForImageClassification"),uer=o(" (Swin Transformer model)"),_er=l(),G6=a("li"),j_e=a("strong"),ber=o("van"),ver=o(" \u2014 "),Vz=a("a"),Fer=o("VanForImageClassification"),Ter=o(" (VAN model)"),Mer=l(),O6=a("li"),D_e=a("strong"),Eer=o("vit"),Cer=o(" \u2014 "),Xz=a("a"),wer=o("ViTForImageClassification"),Aer=o(" (ViT model)"),yer=l(),V6=a("p"),Ler=o("The model is set in evaluation mode by default using "),G_e=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),ker=o("model.train()"),Ser=l(),F(X6.$$.fragment),KDe=l(),pd=a("h2"),z6=a("a"),V_e=a("span"),F(OA.$$.fragment),Rer=l(),X_e=a("span"),Per=o("AutoModelForVision2Seq"),ZDe=l(),Go=a("div"),F(VA.$$.fragment),Ber=l(),ud=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zz=a("a"),Ner=o("from_pretrained()"),qer=o(" class method or the "),Wz=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),XA=a("p"),Oer=o("This class cannot be instantiated directly using "),z_e=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),bt=a("div"),F(zA.$$.fragment),Wer=l(),W_e=a("p"),Qer=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Her=l(),_d=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(W6.$$.fragment),oor=l(),io=a("div"),F(WA.$$.fragment),ror=l(),H_e=a("p"),tor=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aor=l(),Xa=a("p"),nor=o("The model class to instantiate is selected based on the "),U_e=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),K_e=a("ul"),Q6=a("li"),Z_e=a("strong"),hor=o("vision-encoder-decoder"),por=o(" \u2014 "),Hz=a("a"),uor=o("VisionEncoderDecoderModel"),_or=o(" (Vision Encoder decoder model)"),bor=l(),H6=a("p"),vor=o("The model is set in evaluation mode by default using "),e1e=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),Mor=o("model.train()"),Eor=l(),F(U6.$$.fragment),eGe=l(),bd=a("h2"),J6=a("a"),r1e=a("span"),F(QA.$$.fragment),Cor=l(),t1e=a("span"),wor=o("AutoModelForVisualQuestionAnswering"),oGe=l(),Oo=a("div"),F(HA.$$.fragment),Aor=l(),vd=a("p"),yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),Uz=a("a"),Lor=o("from_pretrained()"),xor=o(" class method or the "),Jz=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),UA=a("p"),Ror=o("This class cannot be instantiated directly using "),a1e=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),vt=a("div"),F(JA.$$.fragment),Nor=l(),n1e=a("p"),qor=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),jor=l(),Fd=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(Y6.$$.fragment),Wor=l(),co=a("div"),F(YA.$$.fragment),Qor=l(),l1e=a("p"),Hor=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Uor=l(),za=a("p"),Jor=o("The model class to instantiate is selected based on the "),i1e=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),f1e=a("ul"),K6=a("li"),m1e=a("strong"),arr=o("vilt"),nrr=o(" \u2014 "),Kz=a("a"),srr=o("ViltForQuestionAnswering"),lrr=o(" (ViLT model)"),irr=l(),Z6=a("p"),drr=o("The model is set in evaluation mode by default using "),g1e=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),mrr=o("model.train()"),grr=l(),F(eT.$$.fragment),rGe=l(),Td=a("h2"),oT=a("a"),p1e=a("span"),F(KA.$$.fragment),hrr=l(),u1e=a("span"),prr=o("AutoModelForAudioClassification"),tGe=l(),Vo=a("div"),F(ZA.$$.fragment),urr=l(),Md=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Zz=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),eW=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),ey=a("p"),Err=o("This class cannot be instantiated directly using "),_1e=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Ft=a("div"),F(oy.$$.fragment),yrr=l(),b1e=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),xrr=l(),Ed=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(rT.$$.fragment),Irr=l(),fo=a("div"),F(ry.$$.fragment),Nrr=l(),F1e=a("p"),qrr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jrr=l(),Wa=a("p"),Drr=o("The model class to instantiate is selected based on the "),T1e=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),Re=a("ul"),tT=a("li"),C1e=a("strong"),Hrr=o("data2vec-audio"),Urr=o(" \u2014 "),rW=a("a"),Jrr=o("Data2VecAudioForSequenceClassification"),Yrr=o(" (Data2VecAudio model)"),Krr=l(),aT=a("li"),w1e=a("strong"),Zrr=o("hubert"),etr=o(" \u2014 "),tW=a("a"),otr=o("HubertForSequenceClassification"),rtr=o(" (Hubert model)"),ttr=l(),nT=a("li"),A1e=a("strong"),atr=o("sew"),ntr=o(" \u2014 "),aW=a("a"),str=o("SEWForSequenceClassification"),ltr=o(" (SEW model)"),itr=l(),sT=a("li"),y1e=a("strong"),dtr=o("sew-d"),ctr=o(" \u2014 "),nW=a("a"),ftr=o("SEWDForSequenceClassification"),mtr=o(" (SEW-D model)"),gtr=l(),lT=a("li"),L1e=a("strong"),htr=o("unispeech"),ptr=o(" \u2014 "),sW=a("a"),utr=o("UniSpeechForSequenceClassification"),_tr=o(" (UniSpeech model)"),btr=l(),iT=a("li"),x1e=a("strong"),vtr=o("unispeech-sat"),Ftr=o(" \u2014 "),lW=a("a"),Ttr=o("UniSpeechSatForSequenceClassification"),Mtr=o(" (UniSpeechSat model)"),Etr=l(),dT=a("li"),$1e=a("strong"),Ctr=o("wav2vec2"),wtr=o(" \u2014 "),iW=a("a"),Atr=o("Wav2Vec2ForSequenceClassification"),ytr=o(" (Wav2Vec2 model)"),Ltr=l(),cT=a("li"),k1e=a("strong"),xtr=o("wav2vec2-conformer"),$tr=o(" \u2014 "),dW=a("a"),ktr=o("Wav2Vec2ConformerForSequenceClassification"),Str=o(" (Wav2Vec2-Conformer model)"),Rtr=l(),fT=a("li"),S1e=a("strong"),Ptr=o("wavlm"),Btr=o(" \u2014 "),cW=a("a"),Itr=o("WavLMForSequenceClassification"),Ntr=o(" (WavLM model)"),qtr=l(),mT=a("p"),jtr=o("The model is set in evaluation mode by default using "),R1e=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),Otr=o("model.train()"),Vtr=l(),F(gT.$$.fragment),aGe=l(),Cd=a("h2"),hT=a("a"),B1e=a("span"),F(ty.$$.fragment),Xtr=l(),I1e=a("span"),ztr=o("AutoModelForAudioFrameClassification"),nGe=l(),Xo=a("div"),F(ay.$$.fragment),Wtr=l(),wd=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),fW=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),mW=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),ny=a("p"),Ztr=o("This class cannot be instantiated directly using "),N1e=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),Tt=a("div"),F(sy.$$.fragment),tar=l(),q1e=a("p"),aar=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nar=l(),Ad=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),far=l(),F(pT.$$.fragment),mar=l(),mo=a("div"),F(ly.$$.fragment),gar=l(),D1e=a("p"),har=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),par=l(),Qa=a("p"),uar=o("The model class to instantiate is selected based on the "),G1e=a("code"),_ar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),et=a("ul"),uT=a("li"),X1e=a("strong"),war=o("data2vec-audio"),Aar=o(" \u2014 "),hW=a("a"),yar=o("Data2VecAudioForAudioFrameClassification"),Lar=o(" (Data2VecAudio model)"),xar=l(),_T=a("li"),z1e=a("strong"),$ar=o("unispeech-sat"),kar=o(" \u2014 "),pW=a("a"),Sar=o("UniSpeechSatForAudioFrameClassification"),Rar=o(" (UniSpeechSat model)"),Par=l(),bT=a("li"),W1e=a("strong"),Bar=o("wav2vec2"),Iar=o(" \u2014 "),uW=a("a"),Nar=o("Wav2Vec2ForAudioFrameClassification"),qar=o(" (Wav2Vec2 model)"),jar=l(),vT=a("li"),Q1e=a("strong"),Dar=o("wav2vec2-conformer"),Gar=o(" \u2014 "),_W=a("a"),Oar=o("Wav2Vec2ConformerForAudioFrameClassification"),Var=o(" (Wav2Vec2-Conformer model)"),Xar=l(),FT=a("li"),H1e=a("strong"),zar=o("wavlm"),War=o(" \u2014 "),bW=a("a"),Qar=o("WavLMForAudioFrameClassification"),Har=o(" (WavLM model)"),Uar=l(),TT=a("p"),Jar=o("The model is set in evaluation mode by default using "),U1e=a("code"),Yar=o("model.eval()"),Kar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=a("code"),Zar=o("model.train()"),enr=l(),F(MT.$$.fragment),sGe=l(),yd=a("h2"),ET=a("a"),Y1e=a("span"),F(iy.$$.fragment),onr=l(),K1e=a("span"),rnr=o("AutoModelForCTC"),lGe=l(),zo=a("div"),F(dy.$$.fragment),tnr=l(),Ld=a("p"),anr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vW=a("a"),nnr=o("from_pretrained()"),snr=o(" class method or the "),FW=a("a"),lnr=o("from_config()"),inr=o(` class
method.`),dnr=l(),cy=a("p"),cnr=o("This class cannot be instantiated directly using "),Z1e=a("code"),fnr=o("__init__()"),mnr=o(" (throws an error)."),gnr=l(),Mt=a("div"),F(fy.$$.fragment),hnr=l(),ebe=a("p"),pnr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),unr=l(),xd=a("p"),_nr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),bnr=o("not"),vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" to load the model weights."),Mnr=l(),F(CT.$$.fragment),Enr=l(),go=a("div"),F(my.$$.fragment),Cnr=l(),rbe=a("p"),wnr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Anr=l(),Ha=a("p"),ynr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Lnr=o("model_type"),xnr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(":"),Pnr=l(),ye=a("ul"),wT=a("li"),sbe=a("strong"),Bnr=o("data2vec-audio"),Inr=o(" \u2014 "),MW=a("a"),Nnr=o("Data2VecAudioForCTC"),qnr=o(" (Data2VecAudio model)"),jnr=l(),AT=a("li"),lbe=a("strong"),Dnr=o("hubert"),Gnr=o(" \u2014 "),EW=a("a"),Onr=o("HubertForCTC"),Vnr=o(" (Hubert model)"),Xnr=l(),yT=a("li"),ibe=a("strong"),znr=o("mctct"),Wnr=o(" \u2014 "),CW=a("a"),Qnr=o("MCTCTForCTC"),Hnr=o(" (M-CTC-T model)"),Unr=l(),LT=a("li"),dbe=a("strong"),Jnr=o("sew"),Ynr=o(" \u2014 "),wW=a("a"),Knr=o("SEWForCTC"),Znr=o(" (SEW model)"),esr=l(),xT=a("li"),cbe=a("strong"),osr=o("sew-d"),rsr=o(" \u2014 "),AW=a("a"),tsr=o("SEWDForCTC"),asr=o(" (SEW-D model)"),nsr=l(),$T=a("li"),fbe=a("strong"),ssr=o("unispeech"),lsr=o(" \u2014 "),yW=a("a"),isr=o("UniSpeechForCTC"),dsr=o(" (UniSpeech model)"),csr=l(),kT=a("li"),mbe=a("strong"),fsr=o("unispeech-sat"),msr=o(" \u2014 "),LW=a("a"),gsr=o("UniSpeechSatForCTC"),hsr=o(" (UniSpeechSat model)"),psr=l(),ST=a("li"),gbe=a("strong"),usr=o("wav2vec2"),_sr=o(" \u2014 "),xW=a("a"),bsr=o("Wav2Vec2ForCTC"),vsr=o(" (Wav2Vec2 model)"),Fsr=l(),RT=a("li"),hbe=a("strong"),Tsr=o("wav2vec2-conformer"),Msr=o(" \u2014 "),$W=a("a"),Esr=o("Wav2Vec2ConformerForCTC"),Csr=o(" (Wav2Vec2-Conformer model)"),wsr=l(),PT=a("li"),pbe=a("strong"),Asr=o("wavlm"),ysr=o(" \u2014 "),kW=a("a"),Lsr=o("WavLMForCTC"),xsr=o(" (WavLM model)"),$sr=l(),BT=a("p"),ksr=o("The model is set in evaluation mode by default using "),ube=a("code"),Ssr=o("model.eval()"),Rsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Psr=o("model.train()"),Bsr=l(),F(IT.$$.fragment),iGe=l(),$d=a("h2"),NT=a("a"),bbe=a("span"),F(gy.$$.fragment),Isr=l(),vbe=a("span"),Nsr=o("AutoModelForSpeechSeq2Seq"),dGe=l(),Wo=a("div"),F(hy.$$.fragment),qsr=l(),kd=a("p"),jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SW=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" class method or the "),RW=a("a"),Osr=o("from_config()"),Vsr=o(` class
method.`),Xsr=l(),py=a("p"),zsr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Wsr=o("__init__()"),Qsr=o(" (throws an error)."),Hsr=l(),Et=a("div"),F(uy.$$.fragment),Usr=l(),Tbe=a("p"),Jsr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ysr=l(),Sd=a("p"),Ksr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Zsr=o("not"),elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),olr=o("from_pretrained()"),rlr=o(" to load the model weights."),tlr=l(),F(qT.$$.fragment),alr=l(),ho=a("div"),F(_y.$$.fragment),nlr=l(),Ebe=a("p"),slr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),llr=l(),Ua=a("p"),ilr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),by=a("ul"),jT=a("li"),ybe=a("strong"),ulr=o("speech-encoder-decoder"),_lr=o(" \u2014 "),BW=a("a"),blr=o("SpeechEncoderDecoderModel"),vlr=o(" (Speech Encoder decoder model)"),Flr=l(),DT=a("li"),Lbe=a("strong"),Tlr=o("speech_to_text"),Mlr=o(" \u2014 "),IW=a("a"),Elr=o("Speech2TextForConditionalGeneration"),Clr=o(" (Speech2Text model)"),wlr=l(),GT=a("p"),Alr=o("The model is set in evaluation mode by default using "),xbe=a("code"),ylr=o("model.eval()"),Llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),xlr=o("model.train()"),$lr=l(),F(OT.$$.fragment),cGe=l(),Rd=a("h2"),VT=a("a"),kbe=a("span"),F(vy.$$.fragment),klr=l(),Sbe=a("span"),Slr=o("AutoModelForAudioXVector"),fGe=l(),Qo=a("div"),F(Fy.$$.fragment),Rlr=l(),Pd=a("p"),Plr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NW=a("a"),Blr=o("from_pretrained()"),Ilr=o(" class method or the "),qW=a("a"),Nlr=o("from_config()"),qlr=o(` class
method.`),jlr=l(),Ty=a("p"),Dlr=o("This class cannot be instantiated directly using "),Rbe=a("code"),Glr=o("__init__()"),Olr=o(" (throws an error)."),Vlr=l(),Ct=a("div"),F(My.$$.fragment),Xlr=l(),Pbe=a("p"),zlr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Wlr=l(),Bd=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Hlr=o("not"),Ulr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" to load the model weights."),Klr=l(),F(XT.$$.fragment),Zlr=l(),po=a("div"),F(Ey.$$.fragment),eir=l(),Ibe=a("p"),oir=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rir=l(),Ja=a("p"),tir=o("The model class to instantiate is selected based on the "),Nbe=a("code"),air=o("model_type"),nir=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),sir=o("pretrained_model_name_or_path"),lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),iir=o("pretrained_model_name_or_path"),dir=o(":"),cir=l(),ot=a("ul"),zT=a("li"),Dbe=a("strong"),fir=o("data2vec-audio"),mir=o(" \u2014 "),DW=a("a"),gir=o("Data2VecAudioForXVector"),hir=o(" (Data2VecAudio model)"),pir=l(),WT=a("li"),Gbe=a("strong"),uir=o("unispeech-sat"),_ir=o(" \u2014 "),GW=a("a"),bir=o("UniSpeechSatForXVector"),vir=o(" (UniSpeechSat model)"),Fir=l(),QT=a("li"),Obe=a("strong"),Tir=o("wav2vec2"),Mir=o(" \u2014 "),OW=a("a"),Eir=o("Wav2Vec2ForXVector"),Cir=o(" (Wav2Vec2 model)"),wir=l(),HT=a("li"),Vbe=a("strong"),Air=o("wav2vec2-conformer"),yir=o(" \u2014 "),VW=a("a"),Lir=o("Wav2Vec2ConformerForXVector"),xir=o(" (Wav2Vec2-Conformer model)"),$ir=l(),UT=a("li"),Xbe=a("strong"),kir=o("wavlm"),Sir=o(" \u2014 "),XW=a("a"),Rir=o("WavLMForXVector"),Pir=o(" (WavLM model)"),Bir=l(),JT=a("p"),Iir=o("The model is set in evaluation mode by default using "),zbe=a("code"),Nir=o("model.eval()"),qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=a("code"),jir=o("model.train()"),Dir=l(),F(YT.$$.fragment),mGe=l(),Id=a("h2"),KT=a("a"),Qbe=a("span"),F(Cy.$$.fragment),Gir=l(),Hbe=a("span"),Oir=o("AutoModelForMaskedImageModeling"),gGe=l(),Ho=a("div"),F(wy.$$.fragment),Vir=l(),Nd=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zW=a("a"),zir=o("from_pretrained()"),Wir=o(" class method or the "),WW=a("a"),Qir=o("from_config()"),Hir=o(` class
method.`),Uir=l(),Ay=a("p"),Jir=o("This class cannot be instantiated directly using "),Ube=a("code"),Yir=o("__init__()"),Kir=o(" (throws an error)."),Zir=l(),wt=a("div"),F(yy.$$.fragment),edr=l(),Jbe=a("p"),odr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rdr=l(),qd=a("p"),tdr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),adr=o("not"),ndr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),sdr=o("from_pretrained()"),ldr=o(" to load the model weights."),idr=l(),F(ZT.$$.fragment),ddr=l(),uo=a("div"),F(Ly.$$.fragment),cdr=l(),Kbe=a("p"),fdr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mdr=l(),Ya=a("p"),gdr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),hdr=o("model_type"),pdr=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),udr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),bdr=o("pretrained_model_name_or_path"),vdr=o(":"),Fdr=l(),jd=a("ul"),e7=a("li"),r2e=a("strong"),Tdr=o("deit"),Mdr=o(" \u2014 "),HW=a("a"),Edr=o("DeiTForMaskedImageModeling"),Cdr=o(" (DeiT model)"),wdr=l(),o7=a("li"),t2e=a("strong"),Adr=o("swin"),ydr=o(" \u2014 "),UW=a("a"),Ldr=o("SwinForMaskedImageModeling"),xdr=o(" (Swin Transformer model)"),$dr=l(),r7=a("li"),a2e=a("strong"),kdr=o("vit"),Sdr=o(" \u2014 "),JW=a("a"),Rdr=o("ViTForMaskedImageModeling"),Pdr=o(" (ViT model)"),Bdr=l(),t7=a("p"),Idr=o("The model is set in evaluation mode by default using "),n2e=a("code"),Ndr=o("model.eval()"),qdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=a("code"),jdr=o("model.train()"),Ddr=l(),F(a7.$$.fragment),hGe=l(),Dd=a("h2"),n7=a("a"),l2e=a("span"),F(xy.$$.fragment),Gdr=l(),i2e=a("span"),Odr=o("AutoModelForObjectDetection"),pGe=l(),Uo=a("div"),F($y.$$.fragment),Vdr=l(),Gd=a("p"),Xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YW=a("a"),zdr=o("from_pretrained()"),Wdr=o(" class method or the "),KW=a("a"),Qdr=o("from_config()"),Hdr=o(` class
method.`),Udr=l(),ky=a("p"),Jdr=o("This class cannot be instantiated directly using "),d2e=a("code"),Ydr=o("__init__()"),Kdr=o(" (throws an error)."),Zdr=l(),At=a("div"),F(Sy.$$.fragment),ecr=l(),c2e=a("p"),ocr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rcr=l(),Od=a("p"),tcr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),acr=o("not"),ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),scr=o("from_pretrained()"),lcr=o(" to load the model weights."),icr=l(),F(s7.$$.fragment),dcr=l(),_o=a("div"),F(Ry.$$.fragment),ccr=l(),m2e=a("p"),fcr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mcr=l(),Ka=a("p"),gcr=o("The model class to instantiate is selected based on the "),g2e=a("code"),hcr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),ucr=o("pretrained_model_name_or_path"),_cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(":"),Fcr=l(),Py=a("ul"),l7=a("li"),u2e=a("strong"),Tcr=o("detr"),Mcr=o(" \u2014 "),eQ=a("a"),Ecr=o("DetrForObjectDetection"),Ccr=o(" (DETR model)"),wcr=l(),i7=a("li"),_2e=a("strong"),Acr=o("yolos"),ycr=o(" \u2014 "),oQ=a("a"),Lcr=o("YolosForObjectDetection"),xcr=o(" (YOLOS model)"),$cr=l(),d7=a("p"),kcr=o("The model is set in evaluation mode by default using "),b2e=a("code"),Scr=o("model.eval()"),Rcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),Pcr=o("model.train()"),Bcr=l(),F(c7.$$.fragment),uGe=l(),Vd=a("h2"),f7=a("a"),F2e=a("span"),F(By.$$.fragment),Icr=l(),T2e=a("span"),Ncr=o("AutoModelForImageSegmentation"),_Ge=l(),Jo=a("div"),F(Iy.$$.fragment),qcr=l(),Xd=a("p"),jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rQ=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" class method or the "),tQ=a("a"),Ocr=o("from_config()"),Vcr=o(` class
method.`),Xcr=l(),Ny=a("p"),zcr=o("This class cannot be instantiated directly using "),M2e=a("code"),Wcr=o("__init__()"),Qcr=o(" (throws an error)."),Hcr=l(),yt=a("div"),F(qy.$$.fragment),Ucr=l(),E2e=a("p"),Jcr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ycr=l(),zd=a("p"),Kcr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),Zcr=o("not"),efr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),ofr=o("from_pretrained()"),rfr=o(" to load the model weights."),tfr=l(),F(m7.$$.fragment),afr=l(),bo=a("div"),F(jy.$$.fragment),nfr=l(),w2e=a("p"),sfr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lfr=l(),Za=a("p"),ifr=o("The model class to instantiate is selected based on the "),A2e=a("code"),dfr=o("model_type"),cfr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),ffr=o("pretrained_model_name_or_path"),mfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(":"),pfr=l(),x2e=a("ul"),g7=a("li"),$2e=a("strong"),ufr=o("detr"),_fr=o(" \u2014 "),nQ=a("a"),bfr=o("DetrForSegmentation"),vfr=o(" (DETR model)"),Ffr=l(),h7=a("p"),Tfr=o("The model is set in evaluation mode by default using "),k2e=a("code"),Mfr=o("model.eval()"),Efr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),Cfr=o("model.train()"),wfr=l(),F(p7.$$.fragment),bGe=l(),Wd=a("h2"),u7=a("a"),R2e=a("span"),F(Dy.$$.fragment),Afr=l(),P2e=a("span"),yfr=o("AutoModelForSemanticSegmentation"),vGe=l(),Yo=a("div"),F(Gy.$$.fragment),Lfr=l(),Qd=a("p"),xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sQ=a("a"),$fr=o("from_pretrained()"),kfr=o(" class method or the "),lQ=a("a"),Sfr=o("from_config()"),Rfr=o(` class
method.`),Pfr=l(),Oy=a("p"),Bfr=o("This class cannot be instantiated directly using "),B2e=a("code"),Ifr=o("__init__()"),Nfr=o(" (throws an error)."),qfr=l(),Lt=a("div"),F(Vy.$$.fragment),jfr=l(),I2e=a("p"),Dfr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gfr=l(),Hd=a("p"),Ofr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),Vfr=o("not"),Xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),zfr=o("from_pretrained()"),Wfr=o(" to load the model weights."),Qfr=l(),F(_7.$$.fragment),Hfr=l(),vo=a("div"),F(Xy.$$.fragment),Ufr=l(),q2e=a("p"),Jfr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Yfr=l(),en=a("p"),Kfr=o("The model class to instantiate is selected based on the "),j2e=a("code"),Zfr=o("model_type"),emr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),omr=o("pretrained_model_name_or_path"),rmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),tmr=o("pretrained_model_name_or_path"),amr=o(":"),nmr=l(),on=a("ul"),b7=a("li"),O2e=a("strong"),smr=o("beit"),lmr=o(" \u2014 "),dQ=a("a"),imr=o("BeitForSemanticSegmentation"),dmr=o(" (BEiT model)"),cmr=l(),v7=a("li"),V2e=a("strong"),fmr=o("data2vec-vision"),mmr=o(" \u2014 "),cQ=a("a"),gmr=o("Data2VecVisionForSemanticSegmentation"),hmr=o(" (Data2VecVision model)"),pmr=l(),F7=a("li"),X2e=a("strong"),umr=o("dpt"),_mr=o(" \u2014 "),fQ=a("a"),bmr=o("DPTForSemanticSegmentation"),vmr=o(" (DPT model)"),Fmr=l(),T7=a("li"),z2e=a("strong"),Tmr=o("segformer"),Mmr=o(" \u2014 "),mQ=a("a"),Emr=o("SegformerForSemanticSegmentation"),Cmr=o(" (SegFormer model)"),wmr=l(),M7=a("p"),Amr=o("The model is set in evaluation mode by default using "),W2e=a("code"),ymr=o("model.eval()"),Lmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=a("code"),xmr=o("model.train()"),$mr=l(),F(E7.$$.fragment),FGe=l(),Ud=a("h2"),C7=a("a"),H2e=a("span"),F(zy.$$.fragment),kmr=l(),U2e=a("span"),Smr=o("AutoModelForInstanceSegmentation"),TGe=l(),Ko=a("div"),F(Wy.$$.fragment),Rmr=l(),Jd=a("p"),Pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gQ=a("a"),Bmr=o("from_pretrained()"),Imr=o(" class method or the "),hQ=a("a"),Nmr=o("from_config()"),qmr=o(` class
method.`),jmr=l(),Qy=a("p"),Dmr=o("This class cannot be instantiated directly using "),J2e=a("code"),Gmr=o("__init__()"),Omr=o(" (throws an error)."),Vmr=l(),xt=a("div"),F(Hy.$$.fragment),Xmr=l(),Y2e=a("p"),zmr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wmr=l(),Yd=a("p"),Qmr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Hmr=o("not"),Umr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Jmr=o("from_pretrained()"),Ymr=o(" to load the model weights."),Kmr=l(),F(w7.$$.fragment),Zmr=l(),Fo=a("div"),F(Uy.$$.fragment),egr=l(),Z2e=a("p"),ogr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rgr=l(),rn=a("p"),tgr=o("The model class to instantiate is selected based on the "),eve=a("code"),agr=o("model_type"),ngr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(":"),cgr=l(),tve=a("ul"),A7=a("li"),ave=a("strong"),fgr=o("maskformer"),mgr=o(" \u2014 "),uQ=a("a"),ggr=o("MaskFormerForInstanceSegmentation"),hgr=o(" (MaskFormer model)"),pgr=l(),y7=a("p"),ugr=o("The model is set in evaluation mode by default using "),nve=a("code"),_gr=o("model.eval()"),bgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sve=a("code"),vgr=o("model.train()"),Fgr=l(),F(L7.$$.fragment),MGe=l(),Kd=a("h2"),x7=a("a"),lve=a("span"),F(Jy.$$.fragment),Tgr=l(),ive=a("span"),Mgr=o("TFAutoModel"),EGe=l(),Zo=a("div"),F(Yy.$$.fragment),Egr=l(),Zd=a("p"),Cgr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=a("a"),wgr=o("from_pretrained()"),Agr=o(" class method or the "),bQ=a("a"),ygr=o("from_config()"),Lgr=o(` class
method.`),xgr=l(),Ky=a("p"),$gr=o("This class cannot be instantiated directly using "),dve=a("code"),kgr=o("__init__()"),Sgr=o(" (throws an error)."),Rgr=l(),$t=a("div"),F(Zy.$$.fragment),Pgr=l(),cve=a("p"),Bgr=o("Instantiates one of the base model classes of the library from a configuration."),Igr=l(),ec=a("p"),Ngr=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),qgr=o("not"),jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" to load the model weights."),Ogr=l(),F($7.$$.fragment),Vgr=l(),yr=a("div"),F(eL.$$.fragment),Xgr=l(),mve=a("p"),zgr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wgr=l(),tn=a("p"),Qgr=o("The model class to instantiate is selected based on the "),gve=a("code"),Hgr=o("model_type"),Ugr=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),Jgr=o("pretrained_model_name_or_path"),Ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(":"),ehr=l(),q=a("ul"),k7=a("li"),uve=a("strong"),ohr=o("albert"),rhr=o(" \u2014 "),FQ=a("a"),thr=o("TFAlbertModel"),ahr=o(" (ALBERT model)"),nhr=l(),S7=a("li"),_ve=a("strong"),shr=o("bart"),lhr=o(" \u2014 "),TQ=a("a"),ihr=o("TFBartModel"),dhr=o(" (BART model)"),chr=l(),R7=a("li"),bve=a("strong"),fhr=o("bert"),mhr=o(" \u2014 "),MQ=a("a"),ghr=o("TFBertModel"),hhr=o(" (BERT model)"),phr=l(),P7=a("li"),vve=a("strong"),uhr=o("blenderbot"),_hr=o(" \u2014 "),EQ=a("a"),bhr=o("TFBlenderbotModel"),vhr=o(" (Blenderbot model)"),Fhr=l(),B7=a("li"),Fve=a("strong"),Thr=o("blenderbot-small"),Mhr=o(" \u2014 "),CQ=a("a"),Ehr=o("TFBlenderbotSmallModel"),Chr=o(" (BlenderbotSmall model)"),whr=l(),I7=a("li"),Tve=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),wQ=a("a"),Lhr=o("TFCamembertModel"),xhr=o(" (CamemBERT model)"),$hr=l(),N7=a("li"),Mve=a("strong"),khr=o("clip"),Shr=o(" \u2014 "),AQ=a("a"),Rhr=o("TFCLIPModel"),Phr=o(" (CLIP model)"),Bhr=l(),q7=a("li"),Eve=a("strong"),Ihr=o("convbert"),Nhr=o(" \u2014 "),yQ=a("a"),qhr=o("TFConvBertModel"),jhr=o(" (ConvBERT model)"),Dhr=l(),j7=a("li"),Cve=a("strong"),Ghr=o("convnext"),Ohr=o(" \u2014 "),LQ=a("a"),Vhr=o("TFConvNextModel"),Xhr=o(" (ConvNeXT model)"),zhr=l(),D7=a("li"),wve=a("strong"),Whr=o("ctrl"),Qhr=o(" \u2014 "),xQ=a("a"),Hhr=o("TFCTRLModel"),Uhr=o(" (CTRL model)"),Jhr=l(),G7=a("li"),Ave=a("strong"),Yhr=o("data2vec-vision"),Khr=o(" \u2014 "),$Q=a("a"),Zhr=o("TFData2VecVisionModel"),epr=o(" (Data2VecVision model)"),opr=l(),O7=a("li"),yve=a("strong"),rpr=o("deberta"),tpr=o(" \u2014 "),kQ=a("a"),apr=o("TFDebertaModel"),npr=o(" (DeBERTa model)"),spr=l(),V7=a("li"),Lve=a("strong"),lpr=o("deberta-v2"),ipr=o(" \u2014 "),SQ=a("a"),dpr=o("TFDebertaV2Model"),cpr=o(" (DeBERTa-v2 model)"),fpr=l(),X7=a("li"),xve=a("strong"),mpr=o("distilbert"),gpr=o(" \u2014 "),RQ=a("a"),hpr=o("TFDistilBertModel"),ppr=o(" (DistilBERT model)"),upr=l(),z7=a("li"),$ve=a("strong"),_pr=o("dpr"),bpr=o(" \u2014 "),PQ=a("a"),vpr=o("TFDPRQuestionEncoder"),Fpr=o(" (DPR model)"),Tpr=l(),W7=a("li"),kve=a("strong"),Mpr=o("electra"),Epr=o(" \u2014 "),BQ=a("a"),Cpr=o("TFElectraModel"),wpr=o(" (ELECTRA model)"),Apr=l(),Q7=a("li"),Sve=a("strong"),ypr=o("flaubert"),Lpr=o(" \u2014 "),IQ=a("a"),xpr=o("TFFlaubertModel"),$pr=o(" (FlauBERT model)"),kpr=l(),Vs=a("li"),Rve=a("strong"),Spr=o("funnel"),Rpr=o(" \u2014 "),NQ=a("a"),Ppr=o("TFFunnelModel"),Bpr=o(" or "),qQ=a("a"),Ipr=o("TFFunnelBaseModel"),Npr=o(" (Funnel Transformer model)"),qpr=l(),H7=a("li"),Pve=a("strong"),jpr=o("gpt2"),Dpr=o(" \u2014 "),jQ=a("a"),Gpr=o("TFGPT2Model"),Opr=o(" (OpenAI GPT-2 model)"),Vpr=l(),U7=a("li"),Bve=a("strong"),Xpr=o("gptj"),zpr=o(" \u2014 "),DQ=a("a"),Wpr=o("TFGPTJModel"),Qpr=o(" (GPT-J model)"),Hpr=l(),J7=a("li"),Ive=a("strong"),Upr=o("hubert"),Jpr=o(" \u2014 "),GQ=a("a"),Ypr=o("TFHubertModel"),Kpr=o(" (Hubert model)"),Zpr=l(),Y7=a("li"),Nve=a("strong"),eur=o("layoutlm"),our=o(" \u2014 "),OQ=a("a"),rur=o("TFLayoutLMModel"),tur=o(" (LayoutLM model)"),aur=l(),K7=a("li"),qve=a("strong"),nur=o("led"),sur=o(" \u2014 "),VQ=a("a"),lur=o("TFLEDModel"),iur=o(" (LED model)"),dur=l(),Z7=a("li"),jve=a("strong"),cur=o("longformer"),fur=o(" \u2014 "),XQ=a("a"),mur=o("TFLongformerModel"),gur=o(" (Longformer model)"),hur=l(),e8=a("li"),Dve=a("strong"),pur=o("lxmert"),uur=o(" \u2014 "),zQ=a("a"),_ur=o("TFLxmertModel"),bur=o(" (LXMERT model)"),vur=l(),o8=a("li"),Gve=a("strong"),Fur=o("marian"),Tur=o(" \u2014 "),WQ=a("a"),Mur=o("TFMarianModel"),Eur=o(" (Marian model)"),Cur=l(),r8=a("li"),Ove=a("strong"),wur=o("mbart"),Aur=o(" \u2014 "),QQ=a("a"),yur=o("TFMBartModel"),Lur=o(" (mBART model)"),xur=l(),t8=a("li"),Vve=a("strong"),$ur=o("mobilebert"),kur=o(" \u2014 "),HQ=a("a"),Sur=o("TFMobileBertModel"),Rur=o(" (MobileBERT model)"),Pur=l(),a8=a("li"),Xve=a("strong"),Bur=o("mpnet"),Iur=o(" \u2014 "),UQ=a("a"),Nur=o("TFMPNetModel"),qur=o(" (MPNet model)"),jur=l(),n8=a("li"),zve=a("strong"),Dur=o("mt5"),Gur=o(" \u2014 "),JQ=a("a"),Our=o("TFMT5Model"),Vur=o(" (MT5 model)"),Xur=l(),s8=a("li"),Wve=a("strong"),zur=o("openai-gpt"),Wur=o(" \u2014 "),YQ=a("a"),Qur=o("TFOpenAIGPTModel"),Hur=o(" (OpenAI GPT model)"),Uur=l(),l8=a("li"),Qve=a("strong"),Jur=o("opt"),Yur=o(" \u2014 "),KQ=a("a"),Kur=o("TFOPTModel"),Zur=o(" (OPT model)"),e_r=l(),i8=a("li"),Hve=a("strong"),o_r=o("pegasus"),r_r=o(" \u2014 "),ZQ=a("a"),t_r=o("TFPegasusModel"),a_r=o(" (Pegasus model)"),n_r=l(),d8=a("li"),Uve=a("strong"),s_r=o("rembert"),l_r=o(" \u2014 "),eH=a("a"),i_r=o("TFRemBertModel"),d_r=o(" (RemBERT model)"),c_r=l(),c8=a("li"),Jve=a("strong"),f_r=o("roberta"),m_r=o(" \u2014 "),oH=a("a"),g_r=o("TFRobertaModel"),h_r=o(" (RoBERTa model)"),p_r=l(),f8=a("li"),Yve=a("strong"),u_r=o("roformer"),__r=o(" \u2014 "),rH=a("a"),b_r=o("TFRoFormerModel"),v_r=o(" (RoFormer model)"),F_r=l(),m8=a("li"),Kve=a("strong"),T_r=o("speech_to_text"),M_r=o(" \u2014 "),tH=a("a"),E_r=o("TFSpeech2TextModel"),C_r=o(" (Speech2Text model)"),w_r=l(),g8=a("li"),Zve=a("strong"),A_r=o("swin"),y_r=o(" \u2014 "),aH=a("a"),L_r=o("TFSwinModel"),x_r=o(" (Swin Transformer model)"),$_r=l(),h8=a("li"),eFe=a("strong"),k_r=o("t5"),S_r=o(" \u2014 "),nH=a("a"),R_r=o("TFT5Model"),P_r=o(" (T5 model)"),B_r=l(),p8=a("li"),oFe=a("strong"),I_r=o("tapas"),N_r=o(" \u2014 "),sH=a("a"),q_r=o("TFTapasModel"),j_r=o(" (TAPAS model)"),D_r=l(),u8=a("li"),rFe=a("strong"),G_r=o("transfo-xl"),O_r=o(" \u2014 "),lH=a("a"),V_r=o("TFTransfoXLModel"),X_r=o(" (Transformer-XL model)"),z_r=l(),_8=a("li"),tFe=a("strong"),W_r=o("vit"),Q_r=o(" \u2014 "),iH=a("a"),H_r=o("TFViTModel"),U_r=o(" (ViT model)"),J_r=l(),b8=a("li"),aFe=a("strong"),Y_r=o("vit_mae"),K_r=o(" \u2014 "),dH=a("a"),Z_r=o("TFViTMAEModel"),e1r=o(" (ViTMAE model)"),o1r=l(),v8=a("li"),nFe=a("strong"),r1r=o("wav2vec2"),t1r=o(" \u2014 "),cH=a("a"),a1r=o("TFWav2Vec2Model"),n1r=o(" (Wav2Vec2 model)"),s1r=l(),F8=a("li"),sFe=a("strong"),l1r=o("xlm"),i1r=o(" \u2014 "),fH=a("a"),d1r=o("TFXLMModel"),c1r=o(" (XLM model)"),f1r=l(),T8=a("li"),lFe=a("strong"),m1r=o("xlm-roberta"),g1r=o(" \u2014 "),mH=a("a"),h1r=o("TFXLMRobertaModel"),p1r=o(" (XLM-RoBERTa model)"),u1r=l(),M8=a("li"),iFe=a("strong"),_1r=o("xlnet"),b1r=o(" \u2014 "),gH=a("a"),v1r=o("TFXLNetModel"),F1r=o(" (XLNet model)"),T1r=l(),F(E8.$$.fragment),CGe=l(),oc=a("h2"),C8=a("a"),dFe=a("span"),F(oL.$$.fragment),M1r=l(),cFe=a("span"),E1r=o("TFAutoModelForPreTraining"),wGe=l(),er=a("div"),F(rL.$$.fragment),C1r=l(),rc=a("p"),w1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hH=a("a"),A1r=o("from_pretrained()"),y1r=o(" class method or the "),pH=a("a"),L1r=o("from_config()"),x1r=o(` class
method.`),$1r=l(),tL=a("p"),k1r=o("This class cannot be instantiated directly using "),fFe=a("code"),S1r=o("__init__()"),R1r=o(" (throws an error)."),P1r=l(),kt=a("div"),F(aL.$$.fragment),B1r=l(),mFe=a("p"),I1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N1r=l(),tc=a("p"),q1r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),j1r=o("not"),D1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),G1r=o("from_pretrained()"),O1r=o(" to load the model weights."),V1r=l(),F(w8.$$.fragment),X1r=l(),Lr=a("div"),F(nL.$$.fragment),z1r=l(),hFe=a("p"),W1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q1r=l(),an=a("p"),H1r=o("The model class to instantiate is selected based on the "),pFe=a("code"),U1r=o("model_type"),J1r=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),Y1r=o("pretrained_model_name_or_path"),K1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),Z1r=o("pretrained_model_name_or_path"),ebr=o(":"),obr=l(),se=a("ul"),A8=a("li"),bFe=a("strong"),rbr=o("albert"),tbr=o(" \u2014 "),_H=a("a"),abr=o("TFAlbertForPreTraining"),nbr=o(" (ALBERT model)"),sbr=l(),y8=a("li"),vFe=a("strong"),lbr=o("bart"),ibr=o(" \u2014 "),bH=a("a"),dbr=o("TFBartForConditionalGeneration"),cbr=o(" (BART model)"),fbr=l(),L8=a("li"),FFe=a("strong"),mbr=o("bert"),gbr=o(" \u2014 "),vH=a("a"),hbr=o("TFBertForPreTraining"),pbr=o(" (BERT model)"),ubr=l(),x8=a("li"),TFe=a("strong"),_br=o("camembert"),bbr=o(" \u2014 "),FH=a("a"),vbr=o("TFCamembertForMaskedLM"),Fbr=o(" (CamemBERT model)"),Tbr=l(),$8=a("li"),MFe=a("strong"),Mbr=o("ctrl"),Ebr=o(" \u2014 "),TH=a("a"),Cbr=o("TFCTRLLMHeadModel"),wbr=o(" (CTRL model)"),Abr=l(),k8=a("li"),EFe=a("strong"),ybr=o("distilbert"),Lbr=o(" \u2014 "),MH=a("a"),xbr=o("TFDistilBertForMaskedLM"),$br=o(" (DistilBERT model)"),kbr=l(),S8=a("li"),CFe=a("strong"),Sbr=o("electra"),Rbr=o(" \u2014 "),EH=a("a"),Pbr=o("TFElectraForPreTraining"),Bbr=o(" (ELECTRA model)"),Ibr=l(),R8=a("li"),wFe=a("strong"),Nbr=o("flaubert"),qbr=o(" \u2014 "),CH=a("a"),jbr=o("TFFlaubertWithLMHeadModel"),Dbr=o(" (FlauBERT model)"),Gbr=l(),P8=a("li"),AFe=a("strong"),Obr=o("funnel"),Vbr=o(" \u2014 "),wH=a("a"),Xbr=o("TFFunnelForPreTraining"),zbr=o(" (Funnel Transformer model)"),Wbr=l(),B8=a("li"),yFe=a("strong"),Qbr=o("gpt2"),Hbr=o(" \u2014 "),AH=a("a"),Ubr=o("TFGPT2LMHeadModel"),Jbr=o(" (OpenAI GPT-2 model)"),Ybr=l(),I8=a("li"),LFe=a("strong"),Kbr=o("layoutlm"),Zbr=o(" \u2014 "),yH=a("a"),e2r=o("TFLayoutLMForMaskedLM"),o2r=o(" (LayoutLM model)"),r2r=l(),N8=a("li"),xFe=a("strong"),t2r=o("lxmert"),a2r=o(" \u2014 "),LH=a("a"),n2r=o("TFLxmertForPreTraining"),s2r=o(" (LXMERT model)"),l2r=l(),q8=a("li"),$Fe=a("strong"),i2r=o("mobilebert"),d2r=o(" \u2014 "),xH=a("a"),c2r=o("TFMobileBertForPreTraining"),f2r=o(" (MobileBERT model)"),m2r=l(),j8=a("li"),kFe=a("strong"),g2r=o("mpnet"),h2r=o(" \u2014 "),$H=a("a"),p2r=o("TFMPNetForMaskedLM"),u2r=o(" (MPNet model)"),_2r=l(),D8=a("li"),SFe=a("strong"),b2r=o("openai-gpt"),v2r=o(" \u2014 "),kH=a("a"),F2r=o("TFOpenAIGPTLMHeadModel"),T2r=o(" (OpenAI GPT model)"),M2r=l(),G8=a("li"),RFe=a("strong"),E2r=o("roberta"),C2r=o(" \u2014 "),SH=a("a"),w2r=o("TFRobertaForMaskedLM"),A2r=o(" (RoBERTa model)"),y2r=l(),O8=a("li"),PFe=a("strong"),L2r=o("t5"),x2r=o(" \u2014 "),RH=a("a"),$2r=o("TFT5ForConditionalGeneration"),k2r=o(" (T5 model)"),S2r=l(),V8=a("li"),BFe=a("strong"),R2r=o("tapas"),P2r=o(" \u2014 "),PH=a("a"),B2r=o("TFTapasForMaskedLM"),I2r=o(" (TAPAS model)"),N2r=l(),X8=a("li"),IFe=a("strong"),q2r=o("transfo-xl"),j2r=o(" \u2014 "),BH=a("a"),D2r=o("TFTransfoXLLMHeadModel"),G2r=o(" (Transformer-XL model)"),O2r=l(),z8=a("li"),NFe=a("strong"),V2r=o("vit_mae"),X2r=o(" \u2014 "),IH=a("a"),z2r=o("TFViTMAEForPreTraining"),W2r=o(" (ViTMAE model)"),Q2r=l(),W8=a("li"),qFe=a("strong"),H2r=o("xlm"),U2r=o(" \u2014 "),NH=a("a"),J2r=o("TFXLMWithLMHeadModel"),Y2r=o(" (XLM model)"),K2r=l(),Q8=a("li"),jFe=a("strong"),Z2r=o("xlm-roberta"),evr=o(" \u2014 "),qH=a("a"),ovr=o("TFXLMRobertaForMaskedLM"),rvr=o(" (XLM-RoBERTa model)"),tvr=l(),H8=a("li"),DFe=a("strong"),avr=o("xlnet"),nvr=o(" \u2014 "),jH=a("a"),svr=o("TFXLNetLMHeadModel"),lvr=o(" (XLNet model)"),ivr=l(),F(U8.$$.fragment),AGe=l(),ac=a("h2"),J8=a("a"),GFe=a("span"),F(sL.$$.fragment),dvr=l(),OFe=a("span"),cvr=o("TFAutoModelForCausalLM"),yGe=l(),or=a("div"),F(lL.$$.fragment),fvr=l(),nc=a("p"),mvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DH=a("a"),gvr=o("from_pretrained()"),hvr=o(" class method or the "),GH=a("a"),pvr=o("from_config()"),uvr=o(` class
method.`),_vr=l(),iL=a("p"),bvr=o("This class cannot be instantiated directly using "),VFe=a("code"),vvr=o("__init__()"),Fvr=o(" (throws an error)."),Tvr=l(),St=a("div"),F(dL.$$.fragment),Mvr=l(),XFe=a("p"),Evr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cvr=l(),sc=a("p"),wvr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),Avr=o("not"),yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),Lvr=o("from_pretrained()"),xvr=o(" to load the model weights."),$vr=l(),F(Y8.$$.fragment),kvr=l(),xr=a("div"),F(cL.$$.fragment),Svr=l(),WFe=a("p"),Rvr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pvr=l(),nn=a("p"),Bvr=o("The model class to instantiate is selected based on the "),QFe=a("code"),Ivr=o("model_type"),Nvr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),qvr=o("pretrained_model_name_or_path"),jvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),Dvr=o("pretrained_model_name_or_path"),Gvr=o(":"),Ovr=l(),Me=a("ul"),K8=a("li"),JFe=a("strong"),Vvr=o("bert"),Xvr=o(" \u2014 "),VH=a("a"),zvr=o("TFBertLMHeadModel"),Wvr=o(" (BERT model)"),Qvr=l(),Z8=a("li"),YFe=a("strong"),Hvr=o("camembert"),Uvr=o(" \u2014 "),XH=a("a"),Jvr=o("TFCamembertForCausalLM"),Yvr=o(" (CamemBERT model)"),Kvr=l(),e9=a("li"),KFe=a("strong"),Zvr=o("ctrl"),eFr=o(" \u2014 "),zH=a("a"),oFr=o("TFCTRLLMHeadModel"),rFr=o(" (CTRL model)"),tFr=l(),o9=a("li"),ZFe=a("strong"),aFr=o("gpt2"),nFr=o(" \u2014 "),WH=a("a"),sFr=o("TFGPT2LMHeadModel"),lFr=o(" (OpenAI GPT-2 model)"),iFr=l(),r9=a("li"),e6e=a("strong"),dFr=o("gptj"),cFr=o(" \u2014 "),QH=a("a"),fFr=o("TFGPTJForCausalLM"),mFr=o(" (GPT-J model)"),gFr=l(),t9=a("li"),o6e=a("strong"),hFr=o("openai-gpt"),pFr=o(" \u2014 "),HH=a("a"),uFr=o("TFOpenAIGPTLMHeadModel"),_Fr=o(" (OpenAI GPT model)"),bFr=l(),a9=a("li"),r6e=a("strong"),vFr=o("opt"),FFr=o(" \u2014 "),UH=a("a"),TFr=o("TFOPTForCausalLM"),MFr=o(" (OPT model)"),EFr=l(),n9=a("li"),t6e=a("strong"),CFr=o("rembert"),wFr=o(" \u2014 "),JH=a("a"),AFr=o("TFRemBertForCausalLM"),yFr=o(" (RemBERT model)"),LFr=l(),s9=a("li"),a6e=a("strong"),xFr=o("roberta"),$Fr=o(" \u2014 "),YH=a("a"),kFr=o("TFRobertaForCausalLM"),SFr=o(" (RoBERTa model)"),RFr=l(),l9=a("li"),n6e=a("strong"),PFr=o("roformer"),BFr=o(" \u2014 "),KH=a("a"),IFr=o("TFRoFormerForCausalLM"),NFr=o(" (RoFormer model)"),qFr=l(),i9=a("li"),s6e=a("strong"),jFr=o("transfo-xl"),DFr=o(" \u2014 "),ZH=a("a"),GFr=o("TFTransfoXLLMHeadModel"),OFr=o(" (Transformer-XL model)"),VFr=l(),d9=a("li"),l6e=a("strong"),XFr=o("xlm"),zFr=o(" \u2014 "),eU=a("a"),WFr=o("TFXLMWithLMHeadModel"),QFr=o(" (XLM model)"),HFr=l(),c9=a("li"),i6e=a("strong"),UFr=o("xlnet"),JFr=o(" \u2014 "),oU=a("a"),YFr=o("TFXLNetLMHeadModel"),KFr=o(" (XLNet model)"),ZFr=l(),F(f9.$$.fragment),LGe=l(),lc=a("h2"),m9=a("a"),d6e=a("span"),F(fL.$$.fragment),e6r=l(),c6e=a("span"),o6r=o("TFAutoModelForImageClassification"),xGe=l(),rr=a("div"),F(mL.$$.fragment),r6r=l(),ic=a("p"),t6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rU=a("a"),a6r=o("from_pretrained()"),n6r=o(" class method or the "),tU=a("a"),s6r=o("from_config()"),l6r=o(` class
method.`),i6r=l(),gL=a("p"),d6r=o("This class cannot be instantiated directly using "),f6e=a("code"),c6r=o("__init__()"),f6r=o(" (throws an error)."),m6r=l(),Rt=a("div"),F(hL.$$.fragment),g6r=l(),m6e=a("p"),h6r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p6r=l(),dc=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),_6r=o("not"),b6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),v6r=o("from_pretrained()"),F6r=o(" to load the model weights."),T6r=l(),F(g9.$$.fragment),M6r=l(),$r=a("div"),F(pL.$$.fragment),E6r=l(),h6e=a("p"),C6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w6r=l(),sn=a("p"),A6r=o("The model class to instantiate is selected based on the "),p6e=a("code"),y6r=o("model_type"),L6r=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),x6r=o("pretrained_model_name_or_path"),$6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(":"),R6r=l(),ln=a("ul"),h9=a("li"),b6e=a("strong"),P6r=o("convnext"),B6r=o(" \u2014 "),nU=a("a"),I6r=o("TFConvNextForImageClassification"),N6r=o(" (ConvNeXT model)"),q6r=l(),p9=a("li"),v6e=a("strong"),j6r=o("data2vec-vision"),D6r=o(" \u2014 "),sU=a("a"),G6r=o("TFData2VecVisionForImageClassification"),O6r=o(" (Data2VecVision model)"),V6r=l(),u9=a("li"),F6e=a("strong"),X6r=o("swin"),z6r=o(" \u2014 "),lU=a("a"),W6r=o("TFSwinForImageClassification"),Q6r=o(" (Swin Transformer model)"),H6r=l(),_9=a("li"),T6e=a("strong"),U6r=o("vit"),J6r=o(" \u2014 "),iU=a("a"),Y6r=o("TFViTForImageClassification"),K6r=o(" (ViT model)"),Z6r=l(),F(b9.$$.fragment),$Ge=l(),cc=a("h2"),v9=a("a"),M6e=a("span"),F(uL.$$.fragment),eTr=l(),E6e=a("span"),oTr=o("TFAutoModelForMaskedLM"),kGe=l(),tr=a("div"),F(_L.$$.fragment),rTr=l(),fc=a("p"),tTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dU=a("a"),aTr=o("from_pretrained()"),nTr=o(" class method or the "),cU=a("a"),sTr=o("from_config()"),lTr=o(` class
method.`),iTr=l(),bL=a("p"),dTr=o("This class cannot be instantiated directly using "),C6e=a("code"),cTr=o("__init__()"),fTr=o(" (throws an error)."),mTr=l(),Pt=a("div"),F(vL.$$.fragment),gTr=l(),w6e=a("p"),hTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pTr=l(),mc=a("p"),uTr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),_Tr=o("not"),bTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),vTr=o("from_pretrained()"),FTr=o(" to load the model weights."),TTr=l(),F(F9.$$.fragment),MTr=l(),kr=a("div"),F(FL.$$.fragment),ETr=l(),y6e=a("p"),CTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wTr=l(),dn=a("p"),ATr=o("The model class to instantiate is selected based on the "),L6e=a("code"),yTr=o("model_type"),LTr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),xTr=o("pretrained_model_name_or_path"),$Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(":"),RTr=l(),ie=a("ul"),T9=a("li"),k6e=a("strong"),PTr=o("albert"),BTr=o(" \u2014 "),mU=a("a"),ITr=o("TFAlbertForMaskedLM"),NTr=o(" (ALBERT model)"),qTr=l(),M9=a("li"),S6e=a("strong"),jTr=o("bert"),DTr=o(" \u2014 "),gU=a("a"),GTr=o("TFBertForMaskedLM"),OTr=o(" (BERT model)"),VTr=l(),E9=a("li"),R6e=a("strong"),XTr=o("camembert"),zTr=o(" \u2014 "),hU=a("a"),WTr=o("TFCamembertForMaskedLM"),QTr=o(" (CamemBERT model)"),HTr=l(),C9=a("li"),P6e=a("strong"),UTr=o("convbert"),JTr=o(" \u2014 "),pU=a("a"),YTr=o("TFConvBertForMaskedLM"),KTr=o(" (ConvBERT model)"),ZTr=l(),w9=a("li"),B6e=a("strong"),e7r=o("deberta"),o7r=o(" \u2014 "),uU=a("a"),r7r=o("TFDebertaForMaskedLM"),t7r=o(" (DeBERTa model)"),a7r=l(),A9=a("li"),I6e=a("strong"),n7r=o("deberta-v2"),s7r=o(" \u2014 "),_U=a("a"),l7r=o("TFDebertaV2ForMaskedLM"),i7r=o(" (DeBERTa-v2 model)"),d7r=l(),y9=a("li"),N6e=a("strong"),c7r=o("distilbert"),f7r=o(" \u2014 "),bU=a("a"),m7r=o("TFDistilBertForMaskedLM"),g7r=o(" (DistilBERT model)"),h7r=l(),L9=a("li"),q6e=a("strong"),p7r=o("electra"),u7r=o(" \u2014 "),vU=a("a"),_7r=o("TFElectraForMaskedLM"),b7r=o(" (ELECTRA model)"),v7r=l(),x9=a("li"),j6e=a("strong"),F7r=o("flaubert"),T7r=o(" \u2014 "),FU=a("a"),M7r=o("TFFlaubertWithLMHeadModel"),E7r=o(" (FlauBERT model)"),C7r=l(),$9=a("li"),D6e=a("strong"),w7r=o("funnel"),A7r=o(" \u2014 "),TU=a("a"),y7r=o("TFFunnelForMaskedLM"),L7r=o(" (Funnel Transformer model)"),x7r=l(),k9=a("li"),G6e=a("strong"),$7r=o("layoutlm"),k7r=o(" \u2014 "),MU=a("a"),S7r=o("TFLayoutLMForMaskedLM"),R7r=o(" (LayoutLM model)"),P7r=l(),S9=a("li"),O6e=a("strong"),B7r=o("longformer"),I7r=o(" \u2014 "),EU=a("a"),N7r=o("TFLongformerForMaskedLM"),q7r=o(" (Longformer model)"),j7r=l(),R9=a("li"),V6e=a("strong"),D7r=o("mobilebert"),G7r=o(" \u2014 "),CU=a("a"),O7r=o("TFMobileBertForMaskedLM"),V7r=o(" (MobileBERT model)"),X7r=l(),P9=a("li"),X6e=a("strong"),z7r=o("mpnet"),W7r=o(" \u2014 "),wU=a("a"),Q7r=o("TFMPNetForMaskedLM"),H7r=o(" (MPNet model)"),U7r=l(),B9=a("li"),z6e=a("strong"),J7r=o("rembert"),Y7r=o(" \u2014 "),AU=a("a"),K7r=o("TFRemBertForMaskedLM"),Z7r=o(" (RemBERT model)"),e8r=l(),I9=a("li"),W6e=a("strong"),o8r=o("roberta"),r8r=o(" \u2014 "),yU=a("a"),t8r=o("TFRobertaForMaskedLM"),a8r=o(" (RoBERTa model)"),n8r=l(),N9=a("li"),Q6e=a("strong"),s8r=o("roformer"),l8r=o(" \u2014 "),LU=a("a"),i8r=o("TFRoFormerForMaskedLM"),d8r=o(" (RoFormer model)"),c8r=l(),q9=a("li"),H6e=a("strong"),f8r=o("tapas"),m8r=o(" \u2014 "),xU=a("a"),g8r=o("TFTapasForMaskedLM"),h8r=o(" (TAPAS model)"),p8r=l(),j9=a("li"),U6e=a("strong"),u8r=o("xlm"),_8r=o(" \u2014 "),$U=a("a"),b8r=o("TFXLMWithLMHeadModel"),v8r=o(" (XLM model)"),F8r=l(),D9=a("li"),J6e=a("strong"),T8r=o("xlm-roberta"),M8r=o(" \u2014 "),kU=a("a"),E8r=o("TFXLMRobertaForMaskedLM"),C8r=o(" (XLM-RoBERTa model)"),w8r=l(),F(G9.$$.fragment),SGe=l(),gc=a("h2"),O9=a("a"),Y6e=a("span"),F(TL.$$.fragment),A8r=l(),K6e=a("span"),y8r=o("TFAutoModelForSeq2SeqLM"),RGe=l(),ar=a("div"),F(ML.$$.fragment),L8r=l(),hc=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SU=a("a"),$8r=o("from_pretrained()"),k8r=o(" class method or the "),RU=a("a"),S8r=o("from_config()"),R8r=o(` class
method.`),P8r=l(),EL=a("p"),B8r=o("This class cannot be instantiated directly using "),Z6e=a("code"),I8r=o("__init__()"),N8r=o(" (throws an error)."),q8r=l(),Bt=a("div"),F(CL.$$.fragment),j8r=l(),eTe=a("p"),D8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G8r=l(),pc=a("p"),O8r=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),V8r=o("not"),X8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),z8r=o("from_pretrained()"),W8r=o(" to load the model weights."),Q8r=l(),F(V9.$$.fragment),H8r=l(),Sr=a("div"),F(wL.$$.fragment),U8r=l(),rTe=a("p"),J8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y8r=l(),cn=a("p"),K8r=o("The model class to instantiate is selected based on the "),tTe=a("code"),Z8r=o("model_type"),e9r=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(":"),n9r=l(),Le=a("ul"),X9=a("li"),sTe=a("strong"),s9r=o("bart"),l9r=o(" \u2014 "),BU=a("a"),i9r=o("TFBartForConditionalGeneration"),d9r=o(" (BART model)"),c9r=l(),z9=a("li"),lTe=a("strong"),f9r=o("blenderbot"),m9r=o(" \u2014 "),IU=a("a"),g9r=o("TFBlenderbotForConditionalGeneration"),h9r=o(" (Blenderbot model)"),p9r=l(),W9=a("li"),iTe=a("strong"),u9r=o("blenderbot-small"),_9r=o(" \u2014 "),NU=a("a"),b9r=o("TFBlenderbotSmallForConditionalGeneration"),v9r=o(" (BlenderbotSmall model)"),F9r=l(),Q9=a("li"),dTe=a("strong"),T9r=o("encoder-decoder"),M9r=o(" \u2014 "),qU=a("a"),E9r=o("TFEncoderDecoderModel"),C9r=o(" (Encoder decoder model)"),w9r=l(),H9=a("li"),cTe=a("strong"),A9r=o("led"),y9r=o(" \u2014 "),jU=a("a"),L9r=o("TFLEDForConditionalGeneration"),x9r=o(" (LED model)"),$9r=l(),U9=a("li"),fTe=a("strong"),k9r=o("marian"),S9r=o(" \u2014 "),DU=a("a"),R9r=o("TFMarianMTModel"),P9r=o(" (Marian model)"),B9r=l(),J9=a("li"),mTe=a("strong"),I9r=o("mbart"),N9r=o(" \u2014 "),GU=a("a"),q9r=o("TFMBartForConditionalGeneration"),j9r=o(" (mBART model)"),D9r=l(),Y9=a("li"),gTe=a("strong"),G9r=o("mt5"),O9r=o(" \u2014 "),OU=a("a"),V9r=o("TFMT5ForConditionalGeneration"),X9r=o(" (MT5 model)"),z9r=l(),K9=a("li"),hTe=a("strong"),W9r=o("pegasus"),Q9r=o(" \u2014 "),VU=a("a"),H9r=o("TFPegasusForConditionalGeneration"),U9r=o(" (Pegasus model)"),J9r=l(),Z9=a("li"),pTe=a("strong"),Y9r=o("t5"),K9r=o(" \u2014 "),XU=a("a"),Z9r=o("TFT5ForConditionalGeneration"),eMr=o(" (T5 model)"),oMr=l(),F(eM.$$.fragment),PGe=l(),uc=a("h2"),oM=a("a"),uTe=a("span"),F(AL.$$.fragment),rMr=l(),_Te=a("span"),tMr=o("TFAutoModelForSequenceClassification"),BGe=l(),nr=a("div"),F(yL.$$.fragment),aMr=l(),_c=a("p"),nMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zU=a("a"),sMr=o("from_pretrained()"),lMr=o(" class method or the "),WU=a("a"),iMr=o("from_config()"),dMr=o(` class
method.`),cMr=l(),LL=a("p"),fMr=o("This class cannot be instantiated directly using "),bTe=a("code"),mMr=o("__init__()"),gMr=o(" (throws an error)."),hMr=l(),It=a("div"),F(xL.$$.fragment),pMr=l(),vTe=a("p"),uMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Mr=l(),bc=a("p"),bMr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),vMr=o("not"),FMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),TMr=o("from_pretrained()"),MMr=o(" to load the model weights."),EMr=l(),F(rM.$$.fragment),CMr=l(),Rr=a("div"),F($L.$$.fragment),wMr=l(),TTe=a("p"),AMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yMr=l(),fn=a("p"),LMr=o("The model class to instantiate is selected based on the "),MTe=a("code"),xMr=o("model_type"),$Mr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),kMr=o("pretrained_model_name_or_path"),SMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),RMr=o("pretrained_model_name_or_path"),PMr=o(":"),BMr=l(),re=a("ul"),tM=a("li"),wTe=a("strong"),IMr=o("albert"),NMr=o(" \u2014 "),HU=a("a"),qMr=o("TFAlbertForSequenceClassification"),jMr=o(" (ALBERT model)"),DMr=l(),aM=a("li"),ATe=a("strong"),GMr=o("bert"),OMr=o(" \u2014 "),UU=a("a"),VMr=o("TFBertForSequenceClassification"),XMr=o(" (BERT model)"),zMr=l(),nM=a("li"),yTe=a("strong"),WMr=o("camembert"),QMr=o(" \u2014 "),JU=a("a"),HMr=o("TFCamembertForSequenceClassification"),UMr=o(" (CamemBERT model)"),JMr=l(),sM=a("li"),LTe=a("strong"),YMr=o("convbert"),KMr=o(" \u2014 "),YU=a("a"),ZMr=o("TFConvBertForSequenceClassification"),e4r=o(" (ConvBERT model)"),o4r=l(),lM=a("li"),xTe=a("strong"),r4r=o("ctrl"),t4r=o(" \u2014 "),KU=a("a"),a4r=o("TFCTRLForSequenceClassification"),n4r=o(" (CTRL model)"),s4r=l(),iM=a("li"),$Te=a("strong"),l4r=o("deberta"),i4r=o(" \u2014 "),ZU=a("a"),d4r=o("TFDebertaForSequenceClassification"),c4r=o(" (DeBERTa model)"),f4r=l(),dM=a("li"),kTe=a("strong"),m4r=o("deberta-v2"),g4r=o(" \u2014 "),eJ=a("a"),h4r=o("TFDebertaV2ForSequenceClassification"),p4r=o(" (DeBERTa-v2 model)"),u4r=l(),cM=a("li"),STe=a("strong"),_4r=o("distilbert"),b4r=o(" \u2014 "),oJ=a("a"),v4r=o("TFDistilBertForSequenceClassification"),F4r=o(" (DistilBERT model)"),T4r=l(),fM=a("li"),RTe=a("strong"),M4r=o("electra"),E4r=o(" \u2014 "),rJ=a("a"),C4r=o("TFElectraForSequenceClassification"),w4r=o(" (ELECTRA model)"),A4r=l(),mM=a("li"),PTe=a("strong"),y4r=o("flaubert"),L4r=o(" \u2014 "),tJ=a("a"),x4r=o("TFFlaubertForSequenceClassification"),$4r=o(" (FlauBERT model)"),k4r=l(),gM=a("li"),BTe=a("strong"),S4r=o("funnel"),R4r=o(" \u2014 "),aJ=a("a"),P4r=o("TFFunnelForSequenceClassification"),B4r=o(" (Funnel Transformer model)"),I4r=l(),hM=a("li"),ITe=a("strong"),N4r=o("gpt2"),q4r=o(" \u2014 "),nJ=a("a"),j4r=o("TFGPT2ForSequenceClassification"),D4r=o(" (OpenAI GPT-2 model)"),G4r=l(),pM=a("li"),NTe=a("strong"),O4r=o("gptj"),V4r=o(" \u2014 "),sJ=a("a"),X4r=o("TFGPTJForSequenceClassification"),z4r=o(" (GPT-J model)"),W4r=l(),uM=a("li"),qTe=a("strong"),Q4r=o("layoutlm"),H4r=o(" \u2014 "),lJ=a("a"),U4r=o("TFLayoutLMForSequenceClassification"),J4r=o(" (LayoutLM model)"),Y4r=l(),_M=a("li"),jTe=a("strong"),K4r=o("longformer"),Z4r=o(" \u2014 "),iJ=a("a"),eEr=o("TFLongformerForSequenceClassification"),oEr=o(" (Longformer model)"),rEr=l(),bM=a("li"),DTe=a("strong"),tEr=o("mobilebert"),aEr=o(" \u2014 "),dJ=a("a"),nEr=o("TFMobileBertForSequenceClassification"),sEr=o(" (MobileBERT model)"),lEr=l(),vM=a("li"),GTe=a("strong"),iEr=o("mpnet"),dEr=o(" \u2014 "),cJ=a("a"),cEr=o("TFMPNetForSequenceClassification"),fEr=o(" (MPNet model)"),mEr=l(),FM=a("li"),OTe=a("strong"),gEr=o("openai-gpt"),hEr=o(" \u2014 "),fJ=a("a"),pEr=o("TFOpenAIGPTForSequenceClassification"),uEr=o(" (OpenAI GPT model)"),_Er=l(),TM=a("li"),VTe=a("strong"),bEr=o("rembert"),vEr=o(" \u2014 "),mJ=a("a"),FEr=o("TFRemBertForSequenceClassification"),TEr=o(" (RemBERT model)"),MEr=l(),MM=a("li"),XTe=a("strong"),EEr=o("roberta"),CEr=o(" \u2014 "),gJ=a("a"),wEr=o("TFRobertaForSequenceClassification"),AEr=o(" (RoBERTa model)"),yEr=l(),EM=a("li"),zTe=a("strong"),LEr=o("roformer"),xEr=o(" \u2014 "),hJ=a("a"),$Er=o("TFRoFormerForSequenceClassification"),kEr=o(" (RoFormer model)"),SEr=l(),CM=a("li"),WTe=a("strong"),REr=o("tapas"),PEr=o(" \u2014 "),pJ=a("a"),BEr=o("TFTapasForSequenceClassification"),IEr=o(" (TAPAS model)"),NEr=l(),wM=a("li"),QTe=a("strong"),qEr=o("transfo-xl"),jEr=o(" \u2014 "),uJ=a("a"),DEr=o("TFTransfoXLForSequenceClassification"),GEr=o(" (Transformer-XL model)"),OEr=l(),AM=a("li"),HTe=a("strong"),VEr=o("xlm"),XEr=o(" \u2014 "),_J=a("a"),zEr=o("TFXLMForSequenceClassification"),WEr=o(" (XLM model)"),QEr=l(),yM=a("li"),UTe=a("strong"),HEr=o("xlm-roberta"),UEr=o(" \u2014 "),bJ=a("a"),JEr=o("TFXLMRobertaForSequenceClassification"),YEr=o(" (XLM-RoBERTa model)"),KEr=l(),LM=a("li"),JTe=a("strong"),ZEr=o("xlnet"),eCr=o(" \u2014 "),vJ=a("a"),oCr=o("TFXLNetForSequenceClassification"),rCr=o(" (XLNet model)"),tCr=l(),F(xM.$$.fragment),IGe=l(),vc=a("h2"),$M=a("a"),YTe=a("span"),F(kL.$$.fragment),aCr=l(),KTe=a("span"),nCr=o("TFAutoModelForMultipleChoice"),NGe=l(),sr=a("div"),F(SL.$$.fragment),sCr=l(),Fc=a("p"),lCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FJ=a("a"),iCr=o("from_pretrained()"),dCr=o(" class method or the "),TJ=a("a"),cCr=o("from_config()"),fCr=o(` class
method.`),mCr=l(),RL=a("p"),gCr=o("This class cannot be instantiated directly using "),ZTe=a("code"),hCr=o("__init__()"),pCr=o(" (throws an error)."),uCr=l(),Nt=a("div"),F(PL.$$.fragment),_Cr=l(),e7e=a("p"),bCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vCr=l(),Tc=a("p"),FCr=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),TCr=o("not"),MCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),ECr=o("from_pretrained()"),CCr=o(" to load the model weights."),wCr=l(),F(kM.$$.fragment),ACr=l(),Pr=a("div"),F(BL.$$.fragment),yCr=l(),r7e=a("p"),LCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xCr=l(),mn=a("p"),$Cr=o("The model class to instantiate is selected based on the "),t7e=a("code"),kCr=o("model_type"),SCr=o(` property of the config object (either
passed as an argument or loaded from `),a7e=a("code"),RCr=o("pretrained_model_name_or_path"),PCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(":"),NCr=l(),pe=a("ul"),SM=a("li"),s7e=a("strong"),qCr=o("albert"),jCr=o(" \u2014 "),EJ=a("a"),DCr=o("TFAlbertForMultipleChoice"),GCr=o(" (ALBERT model)"),OCr=l(),RM=a("li"),l7e=a("strong"),VCr=o("bert"),XCr=o(" \u2014 "),CJ=a("a"),zCr=o("TFBertForMultipleChoice"),WCr=o(" (BERT model)"),QCr=l(),PM=a("li"),i7e=a("strong"),HCr=o("camembert"),UCr=o(" \u2014 "),wJ=a("a"),JCr=o("TFCamembertForMultipleChoice"),YCr=o(" (CamemBERT model)"),KCr=l(),BM=a("li"),d7e=a("strong"),ZCr=o("convbert"),e5r=o(" \u2014 "),AJ=a("a"),o5r=o("TFConvBertForMultipleChoice"),r5r=o(" (ConvBERT model)"),t5r=l(),IM=a("li"),c7e=a("strong"),a5r=o("distilbert"),n5r=o(" \u2014 "),yJ=a("a"),s5r=o("TFDistilBertForMultipleChoice"),l5r=o(" (DistilBERT model)"),i5r=l(),NM=a("li"),f7e=a("strong"),d5r=o("electra"),c5r=o(" \u2014 "),LJ=a("a"),f5r=o("TFElectraForMultipleChoice"),m5r=o(" (ELECTRA model)"),g5r=l(),qM=a("li"),m7e=a("strong"),h5r=o("flaubert"),p5r=o(" \u2014 "),xJ=a("a"),u5r=o("TFFlaubertForMultipleChoice"),_5r=o(" (FlauBERT model)"),b5r=l(),jM=a("li"),g7e=a("strong"),v5r=o("funnel"),F5r=o(" \u2014 "),$J=a("a"),T5r=o("TFFunnelForMultipleChoice"),M5r=o(" (Funnel Transformer model)"),E5r=l(),DM=a("li"),h7e=a("strong"),C5r=o("longformer"),w5r=o(" \u2014 "),kJ=a("a"),A5r=o("TFLongformerForMultipleChoice"),y5r=o(" (Longformer model)"),L5r=l(),GM=a("li"),p7e=a("strong"),x5r=o("mobilebert"),$5r=o(" \u2014 "),SJ=a("a"),k5r=o("TFMobileBertForMultipleChoice"),S5r=o(" (MobileBERT model)"),R5r=l(),OM=a("li"),u7e=a("strong"),P5r=o("mpnet"),B5r=o(" \u2014 "),RJ=a("a"),I5r=o("TFMPNetForMultipleChoice"),N5r=o(" (MPNet model)"),q5r=l(),VM=a("li"),_7e=a("strong"),j5r=o("rembert"),D5r=o(" \u2014 "),PJ=a("a"),G5r=o("TFRemBertForMultipleChoice"),O5r=o(" (RemBERT model)"),V5r=l(),XM=a("li"),b7e=a("strong"),X5r=o("roberta"),z5r=o(" \u2014 "),BJ=a("a"),W5r=o("TFRobertaForMultipleChoice"),Q5r=o(" (RoBERTa model)"),H5r=l(),zM=a("li"),v7e=a("strong"),U5r=o("roformer"),J5r=o(" \u2014 "),IJ=a("a"),Y5r=o("TFRoFormerForMultipleChoice"),K5r=o(" (RoFormer model)"),Z5r=l(),WM=a("li"),F7e=a("strong"),e3r=o("xlm"),o3r=o(" \u2014 "),NJ=a("a"),r3r=o("TFXLMForMultipleChoice"),t3r=o(" (XLM model)"),a3r=l(),QM=a("li"),T7e=a("strong"),n3r=o("xlm-roberta"),s3r=o(" \u2014 "),qJ=a("a"),l3r=o("TFXLMRobertaForMultipleChoice"),i3r=o(" (XLM-RoBERTa model)"),d3r=l(),HM=a("li"),M7e=a("strong"),c3r=o("xlnet"),f3r=o(" \u2014 "),jJ=a("a"),m3r=o("TFXLNetForMultipleChoice"),g3r=o(" (XLNet model)"),h3r=l(),F(UM.$$.fragment),qGe=l(),Mc=a("h2"),JM=a("a"),E7e=a("span"),F(IL.$$.fragment),p3r=l(),C7e=a("span"),u3r=o("TFAutoModelForNextSentencePrediction"),jGe=l(),lr=a("div"),F(NL.$$.fragment),_3r=l(),Ec=a("p"),b3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DJ=a("a"),v3r=o("from_pretrained()"),F3r=o(" class method or the "),GJ=a("a"),T3r=o("from_config()"),M3r=o(` class
method.`),E3r=l(),qL=a("p"),C3r=o("This class cannot be instantiated directly using "),w7e=a("code"),w3r=o("__init__()"),A3r=o(" (throws an error)."),y3r=l(),qt=a("div"),F(jL.$$.fragment),L3r=l(),A7e=a("p"),x3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$3r=l(),Cc=a("p"),k3r=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),S3r=o("not"),R3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),P3r=o("from_pretrained()"),B3r=o(" to load the model weights."),I3r=l(),F(YM.$$.fragment),N3r=l(),Br=a("div"),F(DL.$$.fragment),q3r=l(),L7e=a("p"),j3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D3r=l(),gn=a("p"),G3r=o("The model class to instantiate is selected based on the "),x7e=a("code"),O3r=o("model_type"),V3r=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),X3r=o("pretrained_model_name_or_path"),z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),W3r=o("pretrained_model_name_or_path"),Q3r=o(":"),H3r=l(),GL=a("ul"),KM=a("li"),S7e=a("strong"),U3r=o("bert"),J3r=o(" \u2014 "),VJ=a("a"),Y3r=o("TFBertForNextSentencePrediction"),K3r=o(" (BERT model)"),Z3r=l(),ZM=a("li"),R7e=a("strong"),ewr=o("mobilebert"),owr=o(" \u2014 "),XJ=a("a"),rwr=o("TFMobileBertForNextSentencePrediction"),twr=o(" (MobileBERT model)"),awr=l(),F(e4.$$.fragment),DGe=l(),wc=a("h2"),o4=a("a"),P7e=a("span"),F(OL.$$.fragment),nwr=l(),B7e=a("span"),swr=o("TFAutoModelForTableQuestionAnswering"),GGe=l(),ir=a("div"),F(VL.$$.fragment),lwr=l(),Ac=a("p"),iwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zJ=a("a"),dwr=o("from_pretrained()"),cwr=o(" class method or the "),WJ=a("a"),fwr=o("from_config()"),mwr=o(` class
method.`),gwr=l(),XL=a("p"),hwr=o("This class cannot be instantiated directly using "),I7e=a("code"),pwr=o("__init__()"),uwr=o(" (throws an error)."),_wr=l(),jt=a("div"),F(zL.$$.fragment),bwr=l(),N7e=a("p"),vwr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fwr=l(),yc=a("p"),Twr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),Mwr=o("not"),Ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),Cwr=o("from_pretrained()"),wwr=o(" to load the model weights."),Awr=l(),F(r4.$$.fragment),ywr=l(),Ir=a("div"),F(WL.$$.fragment),Lwr=l(),j7e=a("p"),xwr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$wr=l(),hn=a("p"),kwr=o("The model class to instantiate is selected based on the "),D7e=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),Pwr=o("pretrained_model_name_or_path"),Bwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),Iwr=o("pretrained_model_name_or_path"),Nwr=o(":"),qwr=l(),V7e=a("ul"),t4=a("li"),X7e=a("strong"),jwr=o("tapas"),Dwr=o(" \u2014 "),HJ=a("a"),Gwr=o("TFTapasForQuestionAnswering"),Owr=o(" (TAPAS model)"),Vwr=l(),F(a4.$$.fragment),OGe=l(),Lc=a("h2"),n4=a("a"),z7e=a("span"),F(QL.$$.fragment),Xwr=l(),W7e=a("span"),zwr=o("TFAutoModelForTokenClassification"),VGe=l(),dr=a("div"),F(HL.$$.fragment),Wwr=l(),xc=a("p"),Qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UJ=a("a"),Hwr=o("from_pretrained()"),Uwr=o(" class method or the "),JJ=a("a"),Jwr=o("from_config()"),Ywr=o(` class
method.`),Kwr=l(),UL=a("p"),Zwr=o("This class cannot be instantiated directly using "),Q7e=a("code"),e0r=o("__init__()"),o0r=o(" (throws an error)."),r0r=l(),Dt=a("div"),F(JL.$$.fragment),t0r=l(),H7e=a("p"),a0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n0r=l(),$c=a("p"),s0r=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),l0r=o("not"),i0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),d0r=o("from_pretrained()"),c0r=o(" to load the model weights."),f0r=l(),F(s4.$$.fragment),m0r=l(),Nr=a("div"),F(YL.$$.fragment),g0r=l(),J7e=a("p"),h0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p0r=l(),pn=a("p"),u0r=o("The model class to instantiate is selected based on the "),Y7e=a("code"),_0r=o("model_type"),b0r=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),v0r=o("pretrained_model_name_or_path"),F0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),T0r=o("pretrained_model_name_or_path"),M0r=o(":"),E0r=l(),de=a("ul"),l4=a("li"),e8e=a("strong"),C0r=o("albert"),w0r=o(" \u2014 "),KJ=a("a"),A0r=o("TFAlbertForTokenClassification"),y0r=o(" (ALBERT model)"),L0r=l(),i4=a("li"),o8e=a("strong"),x0r=o("bert"),$0r=o(" \u2014 "),ZJ=a("a"),k0r=o("TFBertForTokenClassification"),S0r=o(" (BERT model)"),R0r=l(),d4=a("li"),r8e=a("strong"),P0r=o("camembert"),B0r=o(" \u2014 "),eY=a("a"),I0r=o("TFCamembertForTokenClassification"),N0r=o(" (CamemBERT model)"),q0r=l(),c4=a("li"),t8e=a("strong"),j0r=o("convbert"),D0r=o(" \u2014 "),oY=a("a"),G0r=o("TFConvBertForTokenClassification"),O0r=o(" (ConvBERT model)"),V0r=l(),f4=a("li"),a8e=a("strong"),X0r=o("deberta"),z0r=o(" \u2014 "),rY=a("a"),W0r=o("TFDebertaForTokenClassification"),Q0r=o(" (DeBERTa model)"),H0r=l(),m4=a("li"),n8e=a("strong"),U0r=o("deberta-v2"),J0r=o(" \u2014 "),tY=a("a"),Y0r=o("TFDebertaV2ForTokenClassification"),K0r=o(" (DeBERTa-v2 model)"),Z0r=l(),g4=a("li"),s8e=a("strong"),eAr=o("distilbert"),oAr=o(" \u2014 "),aY=a("a"),rAr=o("TFDistilBertForTokenClassification"),tAr=o(" (DistilBERT model)"),aAr=l(),h4=a("li"),l8e=a("strong"),nAr=o("electra"),sAr=o(" \u2014 "),nY=a("a"),lAr=o("TFElectraForTokenClassification"),iAr=o(" (ELECTRA model)"),dAr=l(),p4=a("li"),i8e=a("strong"),cAr=o("flaubert"),fAr=o(" \u2014 "),sY=a("a"),mAr=o("TFFlaubertForTokenClassification"),gAr=o(" (FlauBERT model)"),hAr=l(),u4=a("li"),d8e=a("strong"),pAr=o("funnel"),uAr=o(" \u2014 "),lY=a("a"),_Ar=o("TFFunnelForTokenClassification"),bAr=o(" (Funnel Transformer model)"),vAr=l(),_4=a("li"),c8e=a("strong"),FAr=o("layoutlm"),TAr=o(" \u2014 "),iY=a("a"),MAr=o("TFLayoutLMForTokenClassification"),EAr=o(" (LayoutLM model)"),CAr=l(),b4=a("li"),f8e=a("strong"),wAr=o("longformer"),AAr=o(" \u2014 "),dY=a("a"),yAr=o("TFLongformerForTokenClassification"),LAr=o(" (Longformer model)"),xAr=l(),v4=a("li"),m8e=a("strong"),$Ar=o("mobilebert"),kAr=o(" \u2014 "),cY=a("a"),SAr=o("TFMobileBertForTokenClassification"),RAr=o(" (MobileBERT model)"),PAr=l(),F4=a("li"),g8e=a("strong"),BAr=o("mpnet"),IAr=o(" \u2014 "),fY=a("a"),NAr=o("TFMPNetForTokenClassification"),qAr=o(" (MPNet model)"),jAr=l(),T4=a("li"),h8e=a("strong"),DAr=o("rembert"),GAr=o(" \u2014 "),mY=a("a"),OAr=o("TFRemBertForTokenClassification"),VAr=o(" (RemBERT model)"),XAr=l(),M4=a("li"),p8e=a("strong"),zAr=o("roberta"),WAr=o(" \u2014 "),gY=a("a"),QAr=o("TFRobertaForTokenClassification"),HAr=o(" (RoBERTa model)"),UAr=l(),E4=a("li"),u8e=a("strong"),JAr=o("roformer"),YAr=o(" \u2014 "),hY=a("a"),KAr=o("TFRoFormerForTokenClassification"),ZAr=o(" (RoFormer model)"),eyr=l(),C4=a("li"),_8e=a("strong"),oyr=o("xlm"),ryr=o(" \u2014 "),pY=a("a"),tyr=o("TFXLMForTokenClassification"),ayr=o(" (XLM model)"),nyr=l(),w4=a("li"),b8e=a("strong"),syr=o("xlm-roberta"),lyr=o(" \u2014 "),uY=a("a"),iyr=o("TFXLMRobertaForTokenClassification"),dyr=o(" (XLM-RoBERTa model)"),cyr=l(),A4=a("li"),v8e=a("strong"),fyr=o("xlnet"),myr=o(" \u2014 "),_Y=a("a"),gyr=o("TFXLNetForTokenClassification"),hyr=o(" (XLNet model)"),pyr=l(),F(y4.$$.fragment),XGe=l(),kc=a("h2"),L4=a("a"),F8e=a("span"),F(KL.$$.fragment),uyr=l(),T8e=a("span"),_yr=o("TFAutoModelForQuestionAnswering"),zGe=l(),cr=a("div"),F(ZL.$$.fragment),byr=l(),Sc=a("p"),vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bY=a("a"),Fyr=o("from_pretrained()"),Tyr=o(" class method or the "),vY=a("a"),Myr=o("from_config()"),Eyr=o(` class
method.`),Cyr=l(),ex=a("p"),wyr=o("This class cannot be instantiated directly using "),M8e=a("code"),Ayr=o("__init__()"),yyr=o(" (throws an error)."),Lyr=l(),Gt=a("div"),F(ox.$$.fragment),xyr=l(),E8e=a("p"),$yr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kyr=l(),Rc=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),C8e=a("strong"),Ryr=o("not"),Pyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),Byr=o("from_pretrained()"),Iyr=o(" to load the model weights."),Nyr=l(),F(x4.$$.fragment),qyr=l(),qr=a("div"),F(rx.$$.fragment),jyr=l(),w8e=a("p"),Dyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gyr=l(),un=a("p"),Oyr=o("The model class to instantiate is selected based on the "),A8e=a("code"),Vyr=o("model_type"),Xyr=o(` property of the config object (either
passed as an argument or loaded from `),y8e=a("code"),zyr=o("pretrained_model_name_or_path"),Wyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L8e=a("code"),Qyr=o("pretrained_model_name_or_path"),Hyr=o(":"),Uyr=l(),ce=a("ul"),$4=a("li"),x8e=a("strong"),Jyr=o("albert"),Yyr=o(" \u2014 "),TY=a("a"),Kyr=o("TFAlbertForQuestionAnswering"),Zyr=o(" (ALBERT model)"),eLr=l(),k4=a("li"),$8e=a("strong"),oLr=o("bert"),rLr=o(" \u2014 "),MY=a("a"),tLr=o("TFBertForQuestionAnswering"),aLr=o(" (BERT model)"),nLr=l(),S4=a("li"),k8e=a("strong"),sLr=o("camembert"),lLr=o(" \u2014 "),EY=a("a"),iLr=o("TFCamembertForQuestionAnswering"),dLr=o(" (CamemBERT model)"),cLr=l(),R4=a("li"),S8e=a("strong"),fLr=o("convbert"),mLr=o(" \u2014 "),CY=a("a"),gLr=o("TFConvBertForQuestionAnswering"),hLr=o(" (ConvBERT model)"),pLr=l(),P4=a("li"),R8e=a("strong"),uLr=o("deberta"),_Lr=o(" \u2014 "),wY=a("a"),bLr=o("TFDebertaForQuestionAnswering"),vLr=o(" (DeBERTa model)"),FLr=l(),B4=a("li"),P8e=a("strong"),TLr=o("deberta-v2"),MLr=o(" \u2014 "),AY=a("a"),ELr=o("TFDebertaV2ForQuestionAnswering"),CLr=o(" (DeBERTa-v2 model)"),wLr=l(),I4=a("li"),B8e=a("strong"),ALr=o("distilbert"),yLr=o(" \u2014 "),yY=a("a"),LLr=o("TFDistilBertForQuestionAnswering"),xLr=o(" (DistilBERT model)"),$Lr=l(),N4=a("li"),I8e=a("strong"),kLr=o("electra"),SLr=o(" \u2014 "),LY=a("a"),RLr=o("TFElectraForQuestionAnswering"),PLr=o(" (ELECTRA model)"),BLr=l(),q4=a("li"),N8e=a("strong"),ILr=o("flaubert"),NLr=o(" \u2014 "),xY=a("a"),qLr=o("TFFlaubertForQuestionAnsweringSimple"),jLr=o(" (FlauBERT model)"),DLr=l(),j4=a("li"),q8e=a("strong"),GLr=o("funnel"),OLr=o(" \u2014 "),$Y=a("a"),VLr=o("TFFunnelForQuestionAnswering"),XLr=o(" (Funnel Transformer model)"),zLr=l(),D4=a("li"),j8e=a("strong"),WLr=o("gptj"),QLr=o(" \u2014 "),kY=a("a"),HLr=o("TFGPTJForQuestionAnswering"),ULr=o(" (GPT-J model)"),JLr=l(),G4=a("li"),D8e=a("strong"),YLr=o("longformer"),KLr=o(" \u2014 "),SY=a("a"),ZLr=o("TFLongformerForQuestionAnswering"),exr=o(" (Longformer model)"),oxr=l(),O4=a("li"),G8e=a("strong"),rxr=o("mobilebert"),txr=o(" \u2014 "),RY=a("a"),axr=o("TFMobileBertForQuestionAnswering"),nxr=o(" (MobileBERT model)"),sxr=l(),V4=a("li"),O8e=a("strong"),lxr=o("mpnet"),ixr=o(" \u2014 "),PY=a("a"),dxr=o("TFMPNetForQuestionAnswering"),cxr=o(" (MPNet model)"),fxr=l(),X4=a("li"),V8e=a("strong"),mxr=o("rembert"),gxr=o(" \u2014 "),BY=a("a"),hxr=o("TFRemBertForQuestionAnswering"),pxr=o(" (RemBERT model)"),uxr=l(),z4=a("li"),X8e=a("strong"),_xr=o("roberta"),bxr=o(" \u2014 "),IY=a("a"),vxr=o("TFRobertaForQuestionAnswering"),Fxr=o(" (RoBERTa model)"),Txr=l(),W4=a("li"),z8e=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),NY=a("a"),Cxr=o("TFRoFormerForQuestionAnswering"),wxr=o(" (RoFormer model)"),Axr=l(),Q4=a("li"),W8e=a("strong"),yxr=o("xlm"),Lxr=o(" \u2014 "),qY=a("a"),xxr=o("TFXLMForQuestionAnsweringSimple"),$xr=o(" (XLM model)"),kxr=l(),H4=a("li"),Q8e=a("strong"),Sxr=o("xlm-roberta"),Rxr=o(" \u2014 "),jY=a("a"),Pxr=o("TFXLMRobertaForQuestionAnswering"),Bxr=o(" (XLM-RoBERTa model)"),Ixr=l(),U4=a("li"),H8e=a("strong"),Nxr=o("xlnet"),qxr=o(" \u2014 "),DY=a("a"),jxr=o("TFXLNetForQuestionAnsweringSimple"),Dxr=o(" (XLNet model)"),Gxr=l(),F(J4.$$.fragment),WGe=l(),Pc=a("h2"),Y4=a("a"),U8e=a("span"),F(tx.$$.fragment),Oxr=l(),J8e=a("span"),Vxr=o("TFAutoModelForVision2Seq"),QGe=l(),fr=a("div"),F(ax.$$.fragment),Xxr=l(),Bc=a("p"),zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GY=a("a"),Wxr=o("from_pretrained()"),Qxr=o(" class method or the "),OY=a("a"),Hxr=o("from_config()"),Uxr=o(` class
method.`),Jxr=l(),nx=a("p"),Yxr=o("This class cannot be instantiated directly using "),Y8e=a("code"),Kxr=o("__init__()"),Zxr=o(" (throws an error)."),e$r=l(),Ot=a("div"),F(sx.$$.fragment),o$r=l(),K8e=a("p"),r$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),t$r=l(),Ic=a("p"),a$r=o(`Note:
Loading a model from its configuration file does `),Z8e=a("strong"),n$r=o("not"),s$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),l$r=o("from_pretrained()"),i$r=o(" to load the model weights."),d$r=l(),F(K4.$$.fragment),c$r=l(),jr=a("div"),F(lx.$$.fragment),f$r=l(),e9e=a("p"),m$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g$r=l(),_n=a("p"),h$r=o("The model class to instantiate is selected based on the "),o9e=a("code"),p$r=o("model_type"),u$r=o(` property of the config object (either
passed as an argument or loaded from `),r9e=a("code"),_$r=o("pretrained_model_name_or_path"),b$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(":"),T$r=l(),a9e=a("ul"),Z4=a("li"),n9e=a("strong"),M$r=o("vision-encoder-decoder"),E$r=o(" \u2014 "),XY=a("a"),C$r=o("TFVisionEncoderDecoderModel"),w$r=o(" (Vision Encoder decoder model)"),A$r=l(),F(eE.$$.fragment),HGe=l(),Nc=a("h2"),oE=a("a"),s9e=a("span"),F(ix.$$.fragment),y$r=l(),l9e=a("span"),L$r=o("TFAutoModelForSpeechSeq2Seq"),UGe=l(),mr=a("div"),F(dx.$$.fragment),x$r=l(),qc=a("p"),$$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zY=a("a"),k$r=o("from_pretrained()"),S$r=o(" class method or the "),WY=a("a"),R$r=o("from_config()"),P$r=o(` class
method.`),B$r=l(),cx=a("p"),I$r=o("This class cannot be instantiated directly using "),i9e=a("code"),N$r=o("__init__()"),q$r=o(" (throws an error)."),j$r=l(),Vt=a("div"),F(fx.$$.fragment),D$r=l(),d9e=a("p"),G$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O$r=l(),jc=a("p"),V$r=o(`Note:
Loading a model from its configuration file does `),c9e=a("strong"),X$r=o("not"),z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),W$r=o("from_pretrained()"),Q$r=o(" to load the model weights."),H$r=l(),F(rE.$$.fragment),U$r=l(),Dr=a("div"),F(mx.$$.fragment),J$r=l(),f9e=a("p"),Y$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),K$r=l(),bn=a("p"),Z$r=o("The model class to instantiate is selected based on the "),m9e=a("code"),ekr=o("model_type"),okr=o(` property of the config object (either
passed as an argument or loaded from `),g9e=a("code"),rkr=o("pretrained_model_name_or_path"),tkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(":"),skr=l(),p9e=a("ul"),tE=a("li"),u9e=a("strong"),lkr=o("speech_to_text"),ikr=o(" \u2014 "),HY=a("a"),dkr=o("TFSpeech2TextForConditionalGeneration"),ckr=o(" (Speech2Text model)"),fkr=l(),F(aE.$$.fragment),JGe=l(),Dc=a("h2"),nE=a("a"),_9e=a("span"),F(gx.$$.fragment),mkr=l(),b9e=a("span"),gkr=o("FlaxAutoModel"),YGe=l(),gr=a("div"),F(hx.$$.fragment),hkr=l(),Gc=a("p"),pkr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UY=a("a"),ukr=o("from_pretrained()"),_kr=o(" class method or the "),JY=a("a"),bkr=o("from_config()"),vkr=o(` class
method.`),Fkr=l(),px=a("p"),Tkr=o("This class cannot be instantiated directly using "),v9e=a("code"),Mkr=o("__init__()"),Ekr=o(" (throws an error)."),Ckr=l(),Xt=a("div"),F(ux.$$.fragment),wkr=l(),F9e=a("p"),Akr=o("Instantiates one of the base model classes of the library from a configuration."),ykr=l(),Oc=a("p"),Lkr=o(`Note:
Loading a model from its configuration file does `),T9e=a("strong"),xkr=o("not"),$kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),kkr=o("from_pretrained()"),Skr=o(" to load the model weights."),Rkr=l(),F(sE.$$.fragment),Pkr=l(),Gr=a("div"),F(_x.$$.fragment),Bkr=l(),M9e=a("p"),Ikr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nkr=l(),vn=a("p"),qkr=o("The model class to instantiate is selected based on the "),E9e=a("code"),jkr=o("model_type"),Dkr=o(` property of the config object (either
passed as an argument or loaded from `),C9e=a("code"),Gkr=o("pretrained_model_name_or_path"),Okr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(":"),zkr=l(),te=a("ul"),lE=a("li"),A9e=a("strong"),Wkr=o("albert"),Qkr=o(" \u2014 "),KY=a("a"),Hkr=o("FlaxAlbertModel"),Ukr=o(" (ALBERT model)"),Jkr=l(),iE=a("li"),y9e=a("strong"),Ykr=o("bart"),Kkr=o(" \u2014 "),ZY=a("a"),Zkr=o("FlaxBartModel"),eSr=o(" (BART model)"),oSr=l(),dE=a("li"),L9e=a("strong"),rSr=o("beit"),tSr=o(" \u2014 "),eK=a("a"),aSr=o("FlaxBeitModel"),nSr=o(" (BEiT model)"),sSr=l(),cE=a("li"),x9e=a("strong"),lSr=o("bert"),iSr=o(" \u2014 "),oK=a("a"),dSr=o("FlaxBertModel"),cSr=o(" (BERT model)"),fSr=l(),fE=a("li"),$9e=a("strong"),mSr=o("big_bird"),gSr=o(" \u2014 "),rK=a("a"),hSr=o("FlaxBigBirdModel"),pSr=o(" (BigBird model)"),uSr=l(),mE=a("li"),k9e=a("strong"),_Sr=o("blenderbot"),bSr=o(" \u2014 "),tK=a("a"),vSr=o("FlaxBlenderbotModel"),FSr=o(" (Blenderbot model)"),TSr=l(),gE=a("li"),S9e=a("strong"),MSr=o("blenderbot-small"),ESr=o(" \u2014 "),aK=a("a"),CSr=o("FlaxBlenderbotSmallModel"),wSr=o(" (BlenderbotSmall model)"),ASr=l(),hE=a("li"),R9e=a("strong"),ySr=o("clip"),LSr=o(" \u2014 "),nK=a("a"),xSr=o("FlaxCLIPModel"),$Sr=o(" (CLIP model)"),kSr=l(),pE=a("li"),P9e=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),sK=a("a"),PSr=o("FlaxDistilBertModel"),BSr=o(" (DistilBERT model)"),ISr=l(),uE=a("li"),B9e=a("strong"),NSr=o("electra"),qSr=o(" \u2014 "),lK=a("a"),jSr=o("FlaxElectraModel"),DSr=o(" (ELECTRA model)"),GSr=l(),_E=a("li"),I9e=a("strong"),OSr=o("gpt2"),VSr=o(" \u2014 "),iK=a("a"),XSr=o("FlaxGPT2Model"),zSr=o(" (OpenAI GPT-2 model)"),WSr=l(),bE=a("li"),N9e=a("strong"),QSr=o("gpt_neo"),HSr=o(" \u2014 "),dK=a("a"),USr=o("FlaxGPTNeoModel"),JSr=o(" (GPT Neo model)"),YSr=l(),vE=a("li"),q9e=a("strong"),KSr=o("gptj"),ZSr=o(" \u2014 "),cK=a("a"),eRr=o("FlaxGPTJModel"),oRr=o(" (GPT-J model)"),rRr=l(),FE=a("li"),j9e=a("strong"),tRr=o("marian"),aRr=o(" \u2014 "),fK=a("a"),nRr=o("FlaxMarianModel"),sRr=o(" (Marian model)"),lRr=l(),TE=a("li"),D9e=a("strong"),iRr=o("mbart"),dRr=o(" \u2014 "),mK=a("a"),cRr=o("FlaxMBartModel"),fRr=o(" (mBART model)"),mRr=l(),ME=a("li"),G9e=a("strong"),gRr=o("mt5"),hRr=o(" \u2014 "),gK=a("a"),pRr=o("FlaxMT5Model"),uRr=o(" (MT5 model)"),_Rr=l(),EE=a("li"),O9e=a("strong"),bRr=o("opt"),vRr=o(" \u2014 "),hK=a("a"),FRr=o("FlaxOPTModel"),TRr=o(" (OPT model)"),MRr=l(),CE=a("li"),V9e=a("strong"),ERr=o("pegasus"),CRr=o(" \u2014 "),pK=a("a"),wRr=o("FlaxPegasusModel"),ARr=o(" (Pegasus model)"),yRr=l(),wE=a("li"),X9e=a("strong"),LRr=o("roberta"),xRr=o(" \u2014 "),uK=a("a"),$Rr=o("FlaxRobertaModel"),kRr=o(" (RoBERTa model)"),SRr=l(),AE=a("li"),z9e=a("strong"),RRr=o("roformer"),PRr=o(" \u2014 "),_K=a("a"),BRr=o("FlaxRoFormerModel"),IRr=o(" (RoFormer model)"),NRr=l(),yE=a("li"),W9e=a("strong"),qRr=o("t5"),jRr=o(" \u2014 "),bK=a("a"),DRr=o("FlaxT5Model"),GRr=o(" (T5 model)"),ORr=l(),LE=a("li"),Q9e=a("strong"),VRr=o("vision-text-dual-encoder"),XRr=o(" \u2014 "),vK=a("a"),zRr=o("FlaxVisionTextDualEncoderModel"),WRr=o(" (VisionTextDualEncoder model)"),QRr=l(),xE=a("li"),H9e=a("strong"),HRr=o("vit"),URr=o(" \u2014 "),FK=a("a"),JRr=o("FlaxViTModel"),YRr=o(" (ViT model)"),KRr=l(),$E=a("li"),U9e=a("strong"),ZRr=o("wav2vec2"),ePr=o(" \u2014 "),TK=a("a"),oPr=o("FlaxWav2Vec2Model"),rPr=o(" (Wav2Vec2 model)"),tPr=l(),kE=a("li"),J9e=a("strong"),aPr=o("xglm"),nPr=o(" \u2014 "),MK=a("a"),sPr=o("FlaxXGLMModel"),lPr=o(" (XGLM model)"),iPr=l(),SE=a("li"),Y9e=a("strong"),dPr=o("xlm-roberta"),cPr=o(" \u2014 "),EK=a("a"),fPr=o("FlaxXLMRobertaModel"),mPr=o(" (XLM-RoBERTa model)"),gPr=l(),F(RE.$$.fragment),KGe=l(),Vc=a("h2"),PE=a("a"),K9e=a("span"),F(bx.$$.fragment),hPr=l(),Z9e=a("span"),pPr=o("FlaxAutoModelForCausalLM"),ZGe=l(),hr=a("div"),F(vx.$$.fragment),uPr=l(),Xc=a("p"),_Pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CK=a("a"),bPr=o("from_pretrained()"),vPr=o(" class method or the "),wK=a("a"),FPr=o("from_config()"),TPr=o(` class
method.`),MPr=l(),Fx=a("p"),EPr=o("This class cannot be instantiated directly using "),eMe=a("code"),CPr=o("__init__()"),wPr=o(" (throws an error)."),APr=l(),zt=a("div"),F(Tx.$$.fragment),yPr=l(),oMe=a("p"),LPr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xPr=l(),zc=a("p"),$Pr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),kPr=o("not"),SPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),RPr=o("from_pretrained()"),PPr=o(" to load the model weights."),BPr=l(),F(BE.$$.fragment),IPr=l(),Or=a("div"),F(Mx.$$.fragment),NPr=l(),tMe=a("p"),qPr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jPr=l(),Fn=a("p"),DPr=o("The model class to instantiate is selected based on the "),aMe=a("code"),GPr=o("model_type"),OPr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),VPr=o("pretrained_model_name_or_path"),XPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),zPr=o("pretrained_model_name_or_path"),WPr=o(":"),QPr=l(),xe=a("ul"),IE=a("li"),lMe=a("strong"),HPr=o("bart"),UPr=o(" \u2014 "),yK=a("a"),JPr=o("FlaxBartForCausalLM"),YPr=o(" (BART model)"),KPr=l(),NE=a("li"),iMe=a("strong"),ZPr=o("bert"),eBr=o(" \u2014 "),LK=a("a"),oBr=o("FlaxBertForCausalLM"),rBr=o(" (BERT model)"),tBr=l(),qE=a("li"),dMe=a("strong"),aBr=o("big_bird"),nBr=o(" \u2014 "),xK=a("a"),sBr=o("FlaxBigBirdForCausalLM"),lBr=o(" (BigBird model)"),iBr=l(),jE=a("li"),cMe=a("strong"),dBr=o("electra"),cBr=o(" \u2014 "),$K=a("a"),fBr=o("FlaxElectraForCausalLM"),mBr=o(" (ELECTRA model)"),gBr=l(),DE=a("li"),fMe=a("strong"),hBr=o("gpt2"),pBr=o(" \u2014 "),kK=a("a"),uBr=o("FlaxGPT2LMHeadModel"),_Br=o(" (OpenAI GPT-2 model)"),bBr=l(),GE=a("li"),mMe=a("strong"),vBr=o("gpt_neo"),FBr=o(" \u2014 "),SK=a("a"),TBr=o("FlaxGPTNeoForCausalLM"),MBr=o(" (GPT Neo model)"),EBr=l(),OE=a("li"),gMe=a("strong"),CBr=o("gptj"),wBr=o(" \u2014 "),RK=a("a"),ABr=o("FlaxGPTJForCausalLM"),yBr=o(" (GPT-J model)"),LBr=l(),VE=a("li"),hMe=a("strong"),xBr=o("opt"),$Br=o(" \u2014 "),PK=a("a"),kBr=o("FlaxOPTForCausalLM"),SBr=o(" (OPT model)"),RBr=l(),XE=a("li"),pMe=a("strong"),PBr=o("roberta"),BBr=o(" \u2014 "),BK=a("a"),IBr=o("FlaxRobertaForCausalLM"),NBr=o(" (RoBERTa model)"),qBr=l(),zE=a("li"),uMe=a("strong"),jBr=o("xglm"),DBr=o(" \u2014 "),IK=a("a"),GBr=o("FlaxXGLMForCausalLM"),OBr=o(" (XGLM model)"),VBr=l(),F(WE.$$.fragment),eOe=l(),Wc=a("h2"),QE=a("a"),_Me=a("span"),F(Ex.$$.fragment),XBr=l(),bMe=a("span"),zBr=o("FlaxAutoModelForPreTraining"),oOe=l(),pr=a("div"),F(Cx.$$.fragment),WBr=l(),Qc=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NK=a("a"),HBr=o("from_pretrained()"),UBr=o(" class method or the "),qK=a("a"),JBr=o("from_config()"),YBr=o(` class
method.`),KBr=l(),wx=a("p"),ZBr=o("This class cannot be instantiated directly using "),vMe=a("code"),eIr=o("__init__()"),oIr=o(" (throws an error)."),rIr=l(),Wt=a("div"),F(Ax.$$.fragment),tIr=l(),FMe=a("p"),aIr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nIr=l(),Hc=a("p"),sIr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),lIr=o("not"),iIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),dIr=o("from_pretrained()"),cIr=o(" to load the model weights."),fIr=l(),F(HE.$$.fragment),mIr=l(),Vr=a("div"),F(yx.$$.fragment),gIr=l(),MMe=a("p"),hIr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pIr=l(),Tn=a("p"),uIr=o("The model class to instantiate is selected based on the "),EMe=a("code"),_Ir=o("model_type"),bIr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(":"),EIr=l(),Ee=a("ul"),UE=a("li"),AMe=a("strong"),CIr=o("albert"),wIr=o(" \u2014 "),DK=a("a"),AIr=o("FlaxAlbertForPreTraining"),yIr=o(" (ALBERT model)"),LIr=l(),JE=a("li"),yMe=a("strong"),xIr=o("bart"),$Ir=o(" \u2014 "),GK=a("a"),kIr=o("FlaxBartForConditionalGeneration"),SIr=o(" (BART model)"),RIr=l(),YE=a("li"),LMe=a("strong"),PIr=o("bert"),BIr=o(" \u2014 "),OK=a("a"),IIr=o("FlaxBertForPreTraining"),NIr=o(" (BERT model)"),qIr=l(),KE=a("li"),xMe=a("strong"),jIr=o("big_bird"),DIr=o(" \u2014 "),VK=a("a"),GIr=o("FlaxBigBirdForPreTraining"),OIr=o(" (BigBird model)"),VIr=l(),ZE=a("li"),$Me=a("strong"),XIr=o("electra"),zIr=o(" \u2014 "),XK=a("a"),WIr=o("FlaxElectraForPreTraining"),QIr=o(" (ELECTRA model)"),HIr=l(),eC=a("li"),kMe=a("strong"),UIr=o("mbart"),JIr=o(" \u2014 "),zK=a("a"),YIr=o("FlaxMBartForConditionalGeneration"),KIr=o(" (mBART model)"),ZIr=l(),oC=a("li"),SMe=a("strong"),eNr=o("mt5"),oNr=o(" \u2014 "),WK=a("a"),rNr=o("FlaxMT5ForConditionalGeneration"),tNr=o(" (MT5 model)"),aNr=l(),rC=a("li"),RMe=a("strong"),nNr=o("roberta"),sNr=o(" \u2014 "),QK=a("a"),lNr=o("FlaxRobertaForMaskedLM"),iNr=o(" (RoBERTa model)"),dNr=l(),tC=a("li"),PMe=a("strong"),cNr=o("roformer"),fNr=o(" \u2014 "),HK=a("a"),mNr=o("FlaxRoFormerForMaskedLM"),gNr=o(" (RoFormer model)"),hNr=l(),aC=a("li"),BMe=a("strong"),pNr=o("t5"),uNr=o(" \u2014 "),UK=a("a"),_Nr=o("FlaxT5ForConditionalGeneration"),bNr=o(" (T5 model)"),vNr=l(),nC=a("li"),IMe=a("strong"),FNr=o("wav2vec2"),TNr=o(" \u2014 "),JK=a("a"),MNr=o("FlaxWav2Vec2ForPreTraining"),ENr=o(" (Wav2Vec2 model)"),CNr=l(),sC=a("li"),NMe=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),YK=a("a"),yNr=o("FlaxXLMRobertaForMaskedLM"),LNr=o(" (XLM-RoBERTa model)"),xNr=l(),F(lC.$$.fragment),rOe=l(),Uc=a("h2"),iC=a("a"),qMe=a("span"),F(Lx.$$.fragment),$Nr=l(),jMe=a("span"),kNr=o("FlaxAutoModelForMaskedLM"),tOe=l(),ur=a("div"),F(xx.$$.fragment),SNr=l(),Jc=a("p"),RNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KK=a("a"),PNr=o("from_pretrained()"),BNr=o(" class method or the "),ZK=a("a"),INr=o("from_config()"),NNr=o(` class
method.`),qNr=l(),$x=a("p"),jNr=o("This class cannot be instantiated directly using "),DMe=a("code"),DNr=o("__init__()"),GNr=o(" (throws an error)."),ONr=l(),Qt=a("div"),F(kx.$$.fragment),VNr=l(),GMe=a("p"),XNr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zNr=l(),Yc=a("p"),WNr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),QNr=o("not"),HNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),UNr=o("from_pretrained()"),JNr=o(" to load the model weights."),YNr=l(),F(dC.$$.fragment),KNr=l(),Xr=a("div"),F(Sx.$$.fragment),ZNr=l(),VMe=a("p"),eqr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oqr=l(),Mn=a("p"),rqr=o("The model class to instantiate is selected based on the "),XMe=a("code"),tqr=o("model_type"),aqr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),nqr=o("pretrained_model_name_or_path"),sqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),lqr=o("pretrained_model_name_or_path"),iqr=o(":"),dqr=l(),$e=a("ul"),cC=a("li"),QMe=a("strong"),cqr=o("albert"),fqr=o(" \u2014 "),oZ=a("a"),mqr=o("FlaxAlbertForMaskedLM"),gqr=o(" (ALBERT model)"),hqr=l(),fC=a("li"),HMe=a("strong"),pqr=o("bart"),uqr=o(" \u2014 "),rZ=a("a"),_qr=o("FlaxBartForConditionalGeneration"),bqr=o(" (BART model)"),vqr=l(),mC=a("li"),UMe=a("strong"),Fqr=o("bert"),Tqr=o(" \u2014 "),tZ=a("a"),Mqr=o("FlaxBertForMaskedLM"),Eqr=o(" (BERT model)"),Cqr=l(),gC=a("li"),JMe=a("strong"),wqr=o("big_bird"),Aqr=o(" \u2014 "),aZ=a("a"),yqr=o("FlaxBigBirdForMaskedLM"),Lqr=o(" (BigBird model)"),xqr=l(),hC=a("li"),YMe=a("strong"),$qr=o("distilbert"),kqr=o(" \u2014 "),nZ=a("a"),Sqr=o("FlaxDistilBertForMaskedLM"),Rqr=o(" (DistilBERT model)"),Pqr=l(),pC=a("li"),KMe=a("strong"),Bqr=o("electra"),Iqr=o(" \u2014 "),sZ=a("a"),Nqr=o("FlaxElectraForMaskedLM"),qqr=o(" (ELECTRA model)"),jqr=l(),uC=a("li"),ZMe=a("strong"),Dqr=o("mbart"),Gqr=o(" \u2014 "),lZ=a("a"),Oqr=o("FlaxMBartForConditionalGeneration"),Vqr=o(" (mBART model)"),Xqr=l(),_C=a("li"),e4e=a("strong"),zqr=o("roberta"),Wqr=o(" \u2014 "),iZ=a("a"),Qqr=o("FlaxRobertaForMaskedLM"),Hqr=o(" (RoBERTa model)"),Uqr=l(),bC=a("li"),o4e=a("strong"),Jqr=o("roformer"),Yqr=o(" \u2014 "),dZ=a("a"),Kqr=o("FlaxRoFormerForMaskedLM"),Zqr=o(" (RoFormer model)"),ejr=l(),vC=a("li"),r4e=a("strong"),ojr=o("xlm-roberta"),rjr=o(" \u2014 "),cZ=a("a"),tjr=o("FlaxXLMRobertaForMaskedLM"),ajr=o(" (XLM-RoBERTa model)"),njr=l(),F(FC.$$.fragment),aOe=l(),Kc=a("h2"),TC=a("a"),t4e=a("span"),F(Rx.$$.fragment),sjr=l(),a4e=a("span"),ljr=o("FlaxAutoModelForSeq2SeqLM"),nOe=l(),_r=a("div"),F(Px.$$.fragment),ijr=l(),Zc=a("p"),djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fZ=a("a"),cjr=o("from_pretrained()"),fjr=o(" class method or the "),mZ=a("a"),mjr=o("from_config()"),gjr=o(` class
method.`),hjr=l(),Bx=a("p"),pjr=o("This class cannot be instantiated directly using "),n4e=a("code"),ujr=o("__init__()"),_jr=o(" (throws an error)."),bjr=l(),Ht=a("div"),F(Ix.$$.fragment),vjr=l(),s4e=a("p"),Fjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tjr=l(),ef=a("p"),Mjr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),Ejr=o("not"),Cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),wjr=o("from_pretrained()"),Ajr=o(" to load the model weights."),yjr=l(),F(MC.$$.fragment),Ljr=l(),zr=a("div"),F(Nx.$$.fragment),xjr=l(),i4e=a("p"),$jr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kjr=l(),En=a("p"),Sjr=o("The model class to instantiate is selected based on the "),d4e=a("code"),Rjr=o("model_type"),Pjr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Bjr=o("pretrained_model_name_or_path"),Ijr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),Njr=o("pretrained_model_name_or_path"),qjr=o(":"),jjr=l(),Pe=a("ul"),EC=a("li"),m4e=a("strong"),Djr=o("bart"),Gjr=o(" \u2014 "),hZ=a("a"),Ojr=o("FlaxBartForConditionalGeneration"),Vjr=o(" (BART model)"),Xjr=l(),CC=a("li"),g4e=a("strong"),zjr=o("blenderbot"),Wjr=o(" \u2014 "),pZ=a("a"),Qjr=o("FlaxBlenderbotForConditionalGeneration"),Hjr=o(" (Blenderbot model)"),Ujr=l(),wC=a("li"),h4e=a("strong"),Jjr=o("blenderbot-small"),Yjr=o(" \u2014 "),uZ=a("a"),Kjr=o("FlaxBlenderbotSmallForConditionalGeneration"),Zjr=o(" (BlenderbotSmall model)"),eDr=l(),AC=a("li"),p4e=a("strong"),oDr=o("encoder-decoder"),rDr=o(" \u2014 "),_Z=a("a"),tDr=o("FlaxEncoderDecoderModel"),aDr=o(" (Encoder decoder model)"),nDr=l(),yC=a("li"),u4e=a("strong"),sDr=o("marian"),lDr=o(" \u2014 "),bZ=a("a"),iDr=o("FlaxMarianMTModel"),dDr=o(" (Marian model)"),cDr=l(),LC=a("li"),_4e=a("strong"),fDr=o("mbart"),mDr=o(" \u2014 "),vZ=a("a"),gDr=o("FlaxMBartForConditionalGeneration"),hDr=o(" (mBART model)"),pDr=l(),xC=a("li"),b4e=a("strong"),uDr=o("mt5"),_Dr=o(" \u2014 "),FZ=a("a"),bDr=o("FlaxMT5ForConditionalGeneration"),vDr=o(" (MT5 model)"),FDr=l(),$C=a("li"),v4e=a("strong"),TDr=o("pegasus"),MDr=o(" \u2014 "),TZ=a("a"),EDr=o("FlaxPegasusForConditionalGeneration"),CDr=o(" (Pegasus model)"),wDr=l(),kC=a("li"),F4e=a("strong"),ADr=o("t5"),yDr=o(" \u2014 "),MZ=a("a"),LDr=o("FlaxT5ForConditionalGeneration"),xDr=o(" (T5 model)"),$Dr=l(),F(SC.$$.fragment),sOe=l(),of=a("h2"),RC=a("a"),T4e=a("span"),F(qx.$$.fragment),kDr=l(),M4e=a("span"),SDr=o("FlaxAutoModelForSequenceClassification"),lOe=l(),br=a("div"),F(jx.$$.fragment),RDr=l(),rf=a("p"),PDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EZ=a("a"),BDr=o("from_pretrained()"),IDr=o(" class method or the "),CZ=a("a"),NDr=o("from_config()"),qDr=o(` class
method.`),jDr=l(),Dx=a("p"),DDr=o("This class cannot be instantiated directly using "),E4e=a("code"),GDr=o("__init__()"),ODr=o(" (throws an error)."),VDr=l(),Ut=a("div"),F(Gx.$$.fragment),XDr=l(),C4e=a("p"),zDr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WDr=l(),tf=a("p"),QDr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),HDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" to load the model weights."),KDr=l(),F(PC.$$.fragment),ZDr=l(),Wr=a("div"),F(Ox.$$.fragment),eGr=l(),A4e=a("p"),oGr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rGr=l(),Cn=a("p"),tGr=o("The model class to instantiate is selected based on the "),y4e=a("code"),aGr=o("model_type"),nGr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),sGr=o("pretrained_model_name_or_path"),lGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(":"),cGr=l(),ke=a("ul"),BC=a("li"),$4e=a("strong"),fGr=o("albert"),mGr=o(" \u2014 "),AZ=a("a"),gGr=o("FlaxAlbertForSequenceClassification"),hGr=o(" (ALBERT model)"),pGr=l(),IC=a("li"),k4e=a("strong"),uGr=o("bart"),_Gr=o(" \u2014 "),yZ=a("a"),bGr=o("FlaxBartForSequenceClassification"),vGr=o(" (BART model)"),FGr=l(),NC=a("li"),S4e=a("strong"),TGr=o("bert"),MGr=o(" \u2014 "),LZ=a("a"),EGr=o("FlaxBertForSequenceClassification"),CGr=o(" (BERT model)"),wGr=l(),qC=a("li"),R4e=a("strong"),AGr=o("big_bird"),yGr=o(" \u2014 "),xZ=a("a"),LGr=o("FlaxBigBirdForSequenceClassification"),xGr=o(" (BigBird model)"),$Gr=l(),jC=a("li"),P4e=a("strong"),kGr=o("distilbert"),SGr=o(" \u2014 "),$Z=a("a"),RGr=o("FlaxDistilBertForSequenceClassification"),PGr=o(" (DistilBERT model)"),BGr=l(),DC=a("li"),B4e=a("strong"),IGr=o("electra"),NGr=o(" \u2014 "),kZ=a("a"),qGr=o("FlaxElectraForSequenceClassification"),jGr=o(" (ELECTRA model)"),DGr=l(),GC=a("li"),I4e=a("strong"),GGr=o("mbart"),OGr=o(" \u2014 "),SZ=a("a"),VGr=o("FlaxMBartForSequenceClassification"),XGr=o(" (mBART model)"),zGr=l(),OC=a("li"),N4e=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),RZ=a("a"),HGr=o("FlaxRobertaForSequenceClassification"),UGr=o(" (RoBERTa model)"),JGr=l(),VC=a("li"),q4e=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),PZ=a("a"),ZGr=o("FlaxRoFormerForSequenceClassification"),eOr=o(" (RoFormer model)"),oOr=l(),XC=a("li"),j4e=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),BZ=a("a"),aOr=o("FlaxXLMRobertaForSequenceClassification"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(zC.$$.fragment),iOe=l(),af=a("h2"),WC=a("a"),D4e=a("span"),F(Vx.$$.fragment),lOr=l(),G4e=a("span"),iOr=o("FlaxAutoModelForQuestionAnswering"),dOe=l(),vr=a("div"),F(Xx.$$.fragment),dOr=l(),nf=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),NZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),zx=a("p"),uOr=o("This class cannot be instantiated directly using "),O4e=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Wx.$$.fragment),FOr=l(),V4e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MOr=l(),sf=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(QC.$$.fragment),xOr=l(),Qr=a("div"),F(Qx.$$.fragment),$Or=l(),z4e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SOr=l(),wn=a("p"),ROr=o("The model class to instantiate is selected based on the "),W4e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),Se=a("ul"),HC=a("li"),U4e=a("strong"),GOr=o("albert"),OOr=o(" \u2014 "),jZ=a("a"),VOr=o("FlaxAlbertForQuestionAnswering"),XOr=o(" (ALBERT model)"),zOr=l(),UC=a("li"),J4e=a("strong"),WOr=o("bart"),QOr=o(" \u2014 "),DZ=a("a"),HOr=o("FlaxBartForQuestionAnswering"),UOr=o(" (BART model)"),JOr=l(),JC=a("li"),Y4e=a("strong"),YOr=o("bert"),KOr=o(" \u2014 "),GZ=a("a"),ZOr=o("FlaxBertForQuestionAnswering"),eVr=o(" (BERT model)"),oVr=l(),YC=a("li"),K4e=a("strong"),rVr=o("big_bird"),tVr=o(" \u2014 "),OZ=a("a"),aVr=o("FlaxBigBirdForQuestionAnswering"),nVr=o(" (BigBird model)"),sVr=l(),KC=a("li"),Z4e=a("strong"),lVr=o("distilbert"),iVr=o(" \u2014 "),VZ=a("a"),dVr=o("FlaxDistilBertForQuestionAnswering"),cVr=o(" (DistilBERT model)"),fVr=l(),ZC=a("li"),eEe=a("strong"),mVr=o("electra"),gVr=o(" \u2014 "),XZ=a("a"),hVr=o("FlaxElectraForQuestionAnswering"),pVr=o(" (ELECTRA model)"),uVr=l(),e5=a("li"),oEe=a("strong"),_Vr=o("mbart"),bVr=o(" \u2014 "),zZ=a("a"),vVr=o("FlaxMBartForQuestionAnswering"),FVr=o(" (mBART model)"),TVr=l(),o5=a("li"),rEe=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),WZ=a("a"),CVr=o("FlaxRobertaForQuestionAnswering"),wVr=o(" (RoBERTa model)"),AVr=l(),r5=a("li"),tEe=a("strong"),yVr=o("roformer"),LVr=o(" \u2014 "),QZ=a("a"),xVr=o("FlaxRoFormerForQuestionAnswering"),$Vr=o(" (RoFormer model)"),kVr=l(),t5=a("li"),aEe=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),HZ=a("a"),PVr=o("FlaxXLMRobertaForQuestionAnswering"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(a5.$$.fragment),cOe=l(),lf=a("h2"),n5=a("a"),nEe=a("span"),F(Hx.$$.fragment),NVr=l(),sEe=a("span"),qVr=o("FlaxAutoModelForTokenClassification"),fOe=l(),Fr=a("div"),F(Ux.$$.fragment),jVr=l(),df=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),JZ=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),Jx=a("p"),WVr=o("This class cannot be instantiated directly using "),lEe=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Yt=a("div"),F(Yx.$$.fragment),JVr=l(),iEe=a("p"),YVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KVr=l(),cf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(s5.$$.fragment),nXr=l(),Hr=a("div"),F(Kx.$$.fragment),sXr=l(),cEe=a("p"),lXr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iXr=l(),An=a("p"),dXr=o("The model class to instantiate is selected based on the "),fEe=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),uXr=l(),Oe=a("ul"),l5=a("li"),hEe=a("strong"),_Xr=o("albert"),bXr=o(" \u2014 "),KZ=a("a"),vXr=o("FlaxAlbertForTokenClassification"),FXr=o(" (ALBERT model)"),TXr=l(),i5=a("li"),pEe=a("strong"),MXr=o("bert"),EXr=o(" \u2014 "),ZZ=a("a"),CXr=o("FlaxBertForTokenClassification"),wXr=o(" (BERT model)"),AXr=l(),d5=a("li"),uEe=a("strong"),yXr=o("big_bird"),LXr=o(" \u2014 "),eee=a("a"),xXr=o("FlaxBigBirdForTokenClassification"),$Xr=o(" (BigBird model)"),kXr=l(),c5=a("li"),_Ee=a("strong"),SXr=o("distilbert"),RXr=o(" \u2014 "),oee=a("a"),PXr=o("FlaxDistilBertForTokenClassification"),BXr=o(" (DistilBERT model)"),IXr=l(),f5=a("li"),bEe=a("strong"),NXr=o("electra"),qXr=o(" \u2014 "),ree=a("a"),jXr=o("FlaxElectraForTokenClassification"),DXr=o(" (ELECTRA model)"),GXr=l(),m5=a("li"),vEe=a("strong"),OXr=o("roberta"),VXr=o(" \u2014 "),tee=a("a"),XXr=o("FlaxRobertaForTokenClassification"),zXr=o(" (RoBERTa model)"),WXr=l(),g5=a("li"),FEe=a("strong"),QXr=o("roformer"),HXr=o(" \u2014 "),aee=a("a"),UXr=o("FlaxRoFormerForTokenClassification"),JXr=o(" (RoFormer model)"),YXr=l(),h5=a("li"),TEe=a("strong"),KXr=o("xlm-roberta"),ZXr=o(" \u2014 "),nee=a("a"),ezr=o("FlaxXLMRobertaForTokenClassification"),ozr=o(" (XLM-RoBERTa model)"),rzr=l(),F(p5.$$.fragment),mOe=l(),ff=a("h2"),u5=a("a"),MEe=a("span"),F(Zx.$$.fragment),tzr=l(),EEe=a("span"),azr=o("FlaxAutoModelForMultipleChoice"),gOe=l(),Tr=a("div"),F(e$.$$.fragment),nzr=l(),mf=a("p"),szr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),see=a("a"),lzr=o("from_pretrained()"),izr=o(" class method or the "),lee=a("a"),dzr=o("from_config()"),czr=o(` class
method.`),fzr=l(),o$=a("p"),mzr=o("This class cannot be instantiated directly using "),CEe=a("code"),gzr=o("__init__()"),hzr=o(" (throws an error)."),pzr=l(),Kt=a("div"),F(r$.$$.fragment),uzr=l(),wEe=a("p"),_zr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bzr=l(),gf=a("p"),vzr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),Fzr=o("not"),Tzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),Mzr=o("from_pretrained()"),Ezr=o(" to load the model weights."),Czr=l(),F(_5.$$.fragment),wzr=l(),Ur=a("div"),F(t$.$$.fragment),Azr=l(),yEe=a("p"),yzr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lzr=l(),yn=a("p"),xzr=o("The model class to instantiate is selected based on the "),LEe=a("code"),$zr=o("model_type"),kzr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),Szr=o("pretrained_model_name_or_path"),Rzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),Pzr=o("pretrained_model_name_or_path"),Bzr=o(":"),Izr=l(),Ve=a("ul"),b5=a("li"),kEe=a("strong"),Nzr=o("albert"),qzr=o(" \u2014 "),dee=a("a"),jzr=o("FlaxAlbertForMultipleChoice"),Dzr=o(" (ALBERT model)"),Gzr=l(),v5=a("li"),SEe=a("strong"),Ozr=o("bert"),Vzr=o(" \u2014 "),cee=a("a"),Xzr=o("FlaxBertForMultipleChoice"),zzr=o(" (BERT model)"),Wzr=l(),F5=a("li"),REe=a("strong"),Qzr=o("big_bird"),Hzr=o(" \u2014 "),fee=a("a"),Uzr=o("FlaxBigBirdForMultipleChoice"),Jzr=o(" (BigBird model)"),Yzr=l(),T5=a("li"),PEe=a("strong"),Kzr=o("distilbert"),Zzr=o(" \u2014 "),mee=a("a"),eWr=o("FlaxDistilBertForMultipleChoice"),oWr=o(" (DistilBERT model)"),rWr=l(),M5=a("li"),BEe=a("strong"),tWr=o("electra"),aWr=o(" \u2014 "),gee=a("a"),nWr=o("FlaxElectraForMultipleChoice"),sWr=o(" (ELECTRA model)"),lWr=l(),E5=a("li"),IEe=a("strong"),iWr=o("roberta"),dWr=o(" \u2014 "),hee=a("a"),cWr=o("FlaxRobertaForMultipleChoice"),fWr=o(" (RoBERTa model)"),mWr=l(),C5=a("li"),NEe=a("strong"),gWr=o("roformer"),hWr=o(" \u2014 "),pee=a("a"),pWr=o("FlaxRoFormerForMultipleChoice"),uWr=o(" (RoFormer model)"),_Wr=l(),w5=a("li"),qEe=a("strong"),bWr=o("xlm-roberta"),vWr=o(" \u2014 "),uee=a("a"),FWr=o("FlaxXLMRobertaForMultipleChoice"),TWr=o(" (XLM-RoBERTa model)"),MWr=l(),F(A5.$$.fragment),hOe=l(),hf=a("h2"),y5=a("a"),jEe=a("span"),F(a$.$$.fragment),EWr=l(),DEe=a("span"),CWr=o("FlaxAutoModelForNextSentencePrediction"),pOe=l(),Mr=a("div"),F(n$.$$.fragment),wWr=l(),pf=a("p"),AWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_ee=a("a"),yWr=o("from_pretrained()"),LWr=o(" class method or the "),bee=a("a"),xWr=o("from_config()"),$Wr=o(` class
method.`),kWr=l(),s$=a("p"),SWr=o("This class cannot be instantiated directly using "),GEe=a("code"),RWr=o("__init__()"),PWr=o(" (throws an error)."),BWr=l(),Zt=a("div"),F(l$.$$.fragment),IWr=l(),OEe=a("p"),NWr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qWr=l(),uf=a("p"),jWr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),DWr=o("not"),GWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=a("a"),OWr=o("from_pretrained()"),VWr=o(" to load the model weights."),XWr=l(),F(L5.$$.fragment),zWr=l(),Jr=a("div"),F(i$.$$.fragment),WWr=l(),XEe=a("p"),QWr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HWr=l(),Ln=a("p"),UWr=o("The model class to instantiate is selected based on the "),zEe=a("code"),JWr=o("model_type"),YWr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),KWr=o("pretrained_model_name_or_path"),ZWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),eQr=o("pretrained_model_name_or_path"),oQr=o(":"),rQr=l(),HEe=a("ul"),x5=a("li"),UEe=a("strong"),tQr=o("bert"),aQr=o(" \u2014 "),Fee=a("a"),nQr=o("FlaxBertForNextSentencePrediction"),sQr=o(" (BERT model)"),lQr=l(),F($5.$$.fragment),uOe=l(),_f=a("h2"),k5=a("a"),JEe=a("span"),F(d$.$$.fragment),iQr=l(),YEe=a("span"),dQr=o("FlaxAutoModelForImageClassification"),_Oe=l(),Er=a("div"),F(c$.$$.fragment),cQr=l(),bf=a("p"),fQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tee=a("a"),mQr=o("from_pretrained()"),gQr=o(" class method or the "),Mee=a("a"),hQr=o("from_config()"),pQr=o(` class
method.`),uQr=l(),f$=a("p"),_Qr=o("This class cannot be instantiated directly using "),KEe=a("code"),bQr=o("__init__()"),vQr=o(" (throws an error)."),FQr=l(),ea=a("div"),F(m$.$$.fragment),TQr=l(),ZEe=a("p"),MQr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EQr=l(),vf=a("p"),CQr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),wQr=o("not"),AQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("a"),yQr=o("from_pretrained()"),LQr=o(" to load the model weights."),xQr=l(),F(S5.$$.fragment),$Qr=l(),Yr=a("div"),F(g$.$$.fragment),kQr=l(),oCe=a("p"),SQr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RQr=l(),xn=a("p"),PQr=o("The model class to instantiate is selected based on the "),rCe=a("code"),BQr=o("model_type"),IQr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),NQr=o("pretrained_model_name_or_path"),qQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),jQr=o("pretrained_model_name_or_path"),DQr=o(":"),GQr=l(),h$=a("ul"),R5=a("li"),nCe=a("strong"),OQr=o("beit"),VQr=o(" \u2014 "),Cee=a("a"),XQr=o("FlaxBeitForImageClassification"),zQr=o(" (BEiT model)"),WQr=l(),P5=a("li"),sCe=a("strong"),QQr=o("vit"),HQr=o(" \u2014 "),wee=a("a"),UQr=o("FlaxViTForImageClassification"),JQr=o(" (ViT model)"),YQr=l(),F(B5.$$.fragment),bOe=l(),Ff=a("h2"),I5=a("a"),lCe=a("span"),F(p$.$$.fragment),KQr=l(),iCe=a("span"),ZQr=o("FlaxAutoModelForVision2Seq"),vOe=l(),Cr=a("div"),F(u$.$$.fragment),eHr=l(),Tf=a("p"),oHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aee=a("a"),rHr=o("from_pretrained()"),tHr=o(" class method or the "),yee=a("a"),aHr=o("from_config()"),nHr=o(` class
method.`),sHr=l(),_$=a("p"),lHr=o("This class cannot be instantiated directly using "),dCe=a("code"),iHr=o("__init__()"),dHr=o(" (throws an error)."),cHr=l(),oa=a("div"),F(b$.$$.fragment),fHr=l(),cCe=a("p"),mHr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gHr=l(),Mf=a("p"),hHr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),pHr=o("not"),uHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),_Hr=o("from_pretrained()"),bHr=o(" to load the model weights."),vHr=l(),F(N5.$$.fragment),FHr=l(),Kr=a("div"),F(v$.$$.fragment),THr=l(),mCe=a("p"),MHr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EHr=l(),$n=a("p"),CHr=o("The model class to instantiate is selected based on the "),gCe=a("code"),wHr=o("model_type"),AHr=o(` property of the config object (either
passed as an argument or loaded from `),hCe=a("code"),yHr=o("pretrained_model_name_or_path"),LHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),xHr=o("pretrained_model_name_or_path"),$Hr=o(":"),kHr=l(),uCe=a("ul"),q5=a("li"),_Ce=a("strong"),SHr=o("vision-encoder-decoder"),RHr=o(" \u2014 "),xee=a("a"),PHr=o("FlaxVisionEncoderDecoderModel"),BHr=o(" (Vision Encoder decoder model)"),IHr=l(),F(j5.$$.fragment),this.h()},l(f){const _=TIt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var F$=s(p);m=n(F$,"A",{id:!0,class:!0,href:!0});var bCe=s(m);u=n(bCe,"SPAN",{});var vCe=s(u);T(d.$$.fragment,vCe),vCe.forEach(t),bCe.forEach(t),h=i(F$),Eo=n(F$,"SPAN",{});var FCe=s(Eo);vi=r(FCe,"Auto Classes"),FCe.forEach(t),F$.forEach(t),Af=i(f),at=n(f,"P",{});var T$=s(at);Fi=r(T$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=n(T$,"CODE",{});var TCe=s(Ti);s0=r(TCe,"from_pretrained()"),TCe.forEach(t),yf=r(T$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),T$.forEach(t),Ge=i(f),We=n(f,"P",{});var kn=s(We);Mi=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var MCe=s(Sn);l0=r(MCe,"AutoConfig"),MCe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var ECe=s(Pn);i0=r(ECe,"AutoModel"),ECe.forEach(t),Ei=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var CCe=s(Bn);d0=r(CCe,"AutoTokenizer"),CCe.forEach(t),Ci=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),Lf=i(f),T(La.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var M$=s(Ae);Bk=r(M$,"will create a model that is an instance of "),wi=n(M$,"A",{href:!0});var wCe=s(wi);Ik=r(wCe,"BertModel"),wCe.forEach(t),Nk=r(M$,"."),M$.forEach(t),Co=i(f),xa=n(f,"P",{});var E$=s(xa);qk=r(E$,"There is one class of "),xf=n(E$,"CODE",{});var ACe=s(xf);jk=r(ACe,"AutoModel"),ACe.forEach(t),$Xe=r(E$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),E$.forEach(t),pDe=i(f),Ai=n(f,"H2",{class:!0});var C$=s(Ai);$f=n(C$,"A",{id:!0,class:!0,href:!0});var yCe=s($f);Cre=n(yCe,"SPAN",{});var LCe=s(Cre);T(c0.$$.fragment,LCe),LCe.forEach(t),yCe.forEach(t),kXe=i(C$),wre=n(C$,"SPAN",{});var xCe=s(wre);SXe=r(xCe,"Extending the Auto Classes"),xCe.forEach(t),C$.forEach(t),uDe=i(f),In=n(f,"P",{});var Ef=s(In);RXe=r(Ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Are=n(Ef,"CODE",{});var $Ce=s(Are);PXe=r($Ce,"NewModel"),$Ce.forEach(t),BXe=r(Ef,", make sure you have a "),yre=n(Ef,"CODE",{});var kCe=s(yre);IXe=r(kCe,"NewModelConfig"),kCe.forEach(t),NXe=r(Ef,` then you can add those to the auto
classes like this:`),Ef.forEach(t),_De=i(f),T(f0.$$.fragment,f),bDe=i(f),Dk=n(f,"P",{});var SCe=s(Dk);qXe=r(SCe,"You will then be able to use the auto classes like you would usually do!"),SCe.forEach(t),vDe=i(f),T(kf.$$.fragment,f),FDe=i(f),yi=n(f,"H2",{class:!0});var w$=s(yi);Sf=n(w$,"A",{id:!0,class:!0,href:!0});var RCe=s(Sf);Lre=n(RCe,"SPAN",{});var PCe=s(Lre);T(m0.$$.fragment,PCe),PCe.forEach(t),RCe.forEach(t),jXe=i(w$),xre=n(w$,"SPAN",{});var BCe=s(xre);DXe=r(BCe,"AutoConfig"),BCe.forEach(t),w$.forEach(t),TDe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(g0.$$.fragment,rt),GXe=i(rt),h0=n(rt,"P",{});var A$=s(h0);OXe=r(A$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Gk=n(A$,"A",{href:!0});var ICe=s(Gk);VXe=r(ICe,"from_pretrained()"),ICe.forEach(t),XXe=r(A$," class method."),A$.forEach(t),zXe=i(rt),p0=n(rt,"P",{});var y$=s(p0);WXe=r(y$,"This class cannot be instantiated directly using "),$re=n(y$,"CODE",{});var NCe=s($re);QXe=r(NCe,"__init__()"),NCe.forEach(t),HXe=r(y$," (throws an error)."),y$.forEach(t),UXe=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(u0.$$.fragment,tt),JXe=i(tt),kre=n(tt,"P",{});var qCe=s(kre);YXe=r(qCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),qCe.forEach(t),KXe=i(tt),Li=n(tt,"P",{});var Cf=s(Li);ZXe=r(Cf,"The configuration class to instantiate is selected based on the "),Sre=n(Cf,"CODE",{});var jCe=s(Sre);eze=r(jCe,"model_type"),jCe.forEach(t),oze=r(Cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rre=n(Cf,"CODE",{});var DCe=s(Rre);rze=r(DCe,"pretrained_model_name_or_path"),DCe.forEach(t),tze=r(Cf,":"),Cf.forEach(t),aze=i(tt),A=n(tt,"UL",{});var y=s(A);Rf=n(y,"LI",{});var D5=s(Rf);Pre=n(D5,"STRONG",{});var GCe=s(Pre);nze=r(GCe,"albert"),GCe.forEach(t),sze=r(D5," \u2014 "),Ok=n(D5,"A",{href:!0});var OCe=s(Ok);lze=r(OCe,"AlbertConfig"),OCe.forEach(t),ize=r(D5," (ALBERT model)"),D5.forEach(t),dze=i(y),Pf=n(y,"LI",{});var G5=s(Pf);Bre=n(G5,"STRONG",{});var VCe=s(Bre);cze=r(VCe,"bart"),VCe.forEach(t),fze=r(G5," \u2014 "),Vk=n(G5,"A",{href:!0});var XCe=s(Vk);mze=r(XCe,"BartConfig"),XCe.forEach(t),gze=r(G5," (BART model)"),G5.forEach(t),hze=i(y),Bf=n(y,"LI",{});var O5=s(Bf);Ire=n(O5,"STRONG",{});var zCe=s(Ire);pze=r(zCe,"beit"),zCe.forEach(t),uze=r(O5," \u2014 "),Xk=n(O5,"A",{href:!0});var WCe=s(Xk);_ze=r(WCe,"BeitConfig"),WCe.forEach(t),bze=r(O5," (BEiT model)"),O5.forEach(t),vze=i(y),If=n(y,"LI",{});var V5=s(If);Nre=n(V5,"STRONG",{});var QCe=s(Nre);Fze=r(QCe,"bert"),QCe.forEach(t),Tze=r(V5," \u2014 "),zk=n(V5,"A",{href:!0});var HCe=s(zk);Mze=r(HCe,"BertConfig"),HCe.forEach(t),Eze=r(V5," (BERT model)"),V5.forEach(t),Cze=i(y),Nf=n(y,"LI",{});var X5=s(Nf);qre=n(X5,"STRONG",{});var UCe=s(qre);wze=r(UCe,"bert-generation"),UCe.forEach(t),Aze=r(X5," \u2014 "),Wk=n(X5,"A",{href:!0});var JCe=s(Wk);yze=r(JCe,"BertGenerationConfig"),JCe.forEach(t),Lze=r(X5," (Bert Generation model)"),X5.forEach(t),xze=i(y),qf=n(y,"LI",{});var z5=s(qf);jre=n(z5,"STRONG",{});var YCe=s(jre);$ze=r(YCe,"big_bird"),YCe.forEach(t),kze=r(z5," \u2014 "),Qk=n(z5,"A",{href:!0});var KCe=s(Qk);Sze=r(KCe,"BigBirdConfig"),KCe.forEach(t),Rze=r(z5," (BigBird model)"),z5.forEach(t),Pze=i(y),jf=n(y,"LI",{});var W5=s(jf);Dre=n(W5,"STRONG",{});var ZCe=s(Dre);Bze=r(ZCe,"bigbird_pegasus"),ZCe.forEach(t),Ize=r(W5," \u2014 "),Hk=n(W5,"A",{href:!0});var e5e=s(Hk);Nze=r(e5e,"BigBirdPegasusConfig"),e5e.forEach(t),qze=r(W5," (BigBird-Pegasus model)"),W5.forEach(t),jze=i(y),Df=n(y,"LI",{});var Q5=s(Df);Gre=n(Q5,"STRONG",{});var o5e=s(Gre);Dze=r(o5e,"blenderbot"),o5e.forEach(t),Gze=r(Q5," \u2014 "),Uk=n(Q5,"A",{href:!0});var r5e=s(Uk);Oze=r(r5e,"BlenderbotConfig"),r5e.forEach(t),Vze=r(Q5," (Blenderbot model)"),Q5.forEach(t),Xze=i(y),Gf=n(y,"LI",{});var H5=s(Gf);Ore=n(H5,"STRONG",{});var t5e=s(Ore);zze=r(t5e,"blenderbot-small"),t5e.forEach(t),Wze=r(H5," \u2014 "),Jk=n(H5,"A",{href:!0});var a5e=s(Jk);Qze=r(a5e,"BlenderbotSmallConfig"),a5e.forEach(t),Hze=r(H5," (BlenderbotSmall model)"),H5.forEach(t),Uze=i(y),Of=n(y,"LI",{});var U5=s(Of);Vre=n(U5,"STRONG",{});var n5e=s(Vre);Jze=r(n5e,"bloom"),n5e.forEach(t),Yze=r(U5," \u2014 "),Yk=n(U5,"A",{href:!0});var s5e=s(Yk);Kze=r(s5e,"BloomConfig"),s5e.forEach(t),Zze=r(U5," (BLOOM model)"),U5.forEach(t),eWe=i(y),Vf=n(y,"LI",{});var J5=s(Vf);Xre=n(J5,"STRONG",{});var l5e=s(Xre);oWe=r(l5e,"camembert"),l5e.forEach(t),rWe=r(J5," \u2014 "),Kk=n(J5,"A",{href:!0});var i5e=s(Kk);tWe=r(i5e,"CamembertConfig"),i5e.forEach(t),aWe=r(J5," (CamemBERT model)"),J5.forEach(t),nWe=i(y),Xf=n(y,"LI",{});var Y5=s(Xf);zre=n(Y5,"STRONG",{});var d5e=s(zre);sWe=r(d5e,"canine"),d5e.forEach(t),lWe=r(Y5," \u2014 "),Zk=n(Y5,"A",{href:!0});var c5e=s(Zk);iWe=r(c5e,"CanineConfig"),c5e.forEach(t),dWe=r(Y5," (CANINE model)"),Y5.forEach(t),cWe=i(y),zf=n(y,"LI",{});var K5=s(zf);Wre=n(K5,"STRONG",{});var f5e=s(Wre);fWe=r(f5e,"clip"),f5e.forEach(t),mWe=r(K5," \u2014 "),eS=n(K5,"A",{href:!0});var m5e=s(eS);gWe=r(m5e,"CLIPConfig"),m5e.forEach(t),hWe=r(K5," (CLIP model)"),K5.forEach(t),pWe=i(y),Wf=n(y,"LI",{});var Z5=s(Wf);Qre=n(Z5,"STRONG",{});var g5e=s(Qre);uWe=r(g5e,"convbert"),g5e.forEach(t),_We=r(Z5," \u2014 "),oS=n(Z5,"A",{href:!0});var h5e=s(oS);bWe=r(h5e,"ConvBertConfig"),h5e.forEach(t),vWe=r(Z5," (ConvBERT model)"),Z5.forEach(t),FWe=i(y),Qf=n(y,"LI",{});var e3=s(Qf);Hre=n(e3,"STRONG",{});var p5e=s(Hre);TWe=r(p5e,"convnext"),p5e.forEach(t),MWe=r(e3," \u2014 "),rS=n(e3,"A",{href:!0});var u5e=s(rS);EWe=r(u5e,"ConvNextConfig"),u5e.forEach(t),CWe=r(e3," (ConvNeXT model)"),e3.forEach(t),wWe=i(y),Hf=n(y,"LI",{});var o3=s(Hf);Ure=n(o3,"STRONG",{});var _5e=s(Ure);AWe=r(_5e,"ctrl"),_5e.forEach(t),yWe=r(o3," \u2014 "),tS=n(o3,"A",{href:!0});var b5e=s(tS);LWe=r(b5e,"CTRLConfig"),b5e.forEach(t),xWe=r(o3," (CTRL model)"),o3.forEach(t),$We=i(y),Uf=n(y,"LI",{});var r3=s(Uf);Jre=n(r3,"STRONG",{});var v5e=s(Jre);kWe=r(v5e,"cvt"),v5e.forEach(t),SWe=r(r3," \u2014 "),aS=n(r3,"A",{href:!0});var F5e=s(aS);RWe=r(F5e,"CvtConfig"),F5e.forEach(t),PWe=r(r3," (CvT model)"),r3.forEach(t),BWe=i(y),Jf=n(y,"LI",{});var t3=s(Jf);Yre=n(t3,"STRONG",{});var T5e=s(Yre);IWe=r(T5e,"data2vec-audio"),T5e.forEach(t),NWe=r(t3," \u2014 "),nS=n(t3,"A",{href:!0});var M5e=s(nS);qWe=r(M5e,"Data2VecAudioConfig"),M5e.forEach(t),jWe=r(t3," (Data2VecAudio model)"),t3.forEach(t),DWe=i(y),Yf=n(y,"LI",{});var a3=s(Yf);Kre=n(a3,"STRONG",{});var E5e=s(Kre);GWe=r(E5e,"data2vec-text"),E5e.forEach(t),OWe=r(a3," \u2014 "),sS=n(a3,"A",{href:!0});var C5e=s(sS);VWe=r(C5e,"Data2VecTextConfig"),C5e.forEach(t),XWe=r(a3," (Data2VecText model)"),a3.forEach(t),zWe=i(y),Kf=n(y,"LI",{});var n3=s(Kf);Zre=n(n3,"STRONG",{});var w5e=s(Zre);WWe=r(w5e,"data2vec-vision"),w5e.forEach(t),QWe=r(n3," \u2014 "),lS=n(n3,"A",{href:!0});var A5e=s(lS);HWe=r(A5e,"Data2VecVisionConfig"),A5e.forEach(t),UWe=r(n3," (Data2VecVision model)"),n3.forEach(t),JWe=i(y),Zf=n(y,"LI",{});var s3=s(Zf);ete=n(s3,"STRONG",{});var y5e=s(ete);YWe=r(y5e,"deberta"),y5e.forEach(t),KWe=r(s3," \u2014 "),iS=n(s3,"A",{href:!0});var L5e=s(iS);ZWe=r(L5e,"DebertaConfig"),L5e.forEach(t),eQe=r(s3," (DeBERTa model)"),s3.forEach(t),oQe=i(y),em=n(y,"LI",{});var l3=s(em);ote=n(l3,"STRONG",{});var x5e=s(ote);rQe=r(x5e,"deberta-v2"),x5e.forEach(t),tQe=r(l3," \u2014 "),dS=n(l3,"A",{href:!0});var $5e=s(dS);aQe=r($5e,"DebertaV2Config"),$5e.forEach(t),nQe=r(l3," (DeBERTa-v2 model)"),l3.forEach(t),sQe=i(y),om=n(y,"LI",{});var i3=s(om);rte=n(i3,"STRONG",{});var k5e=s(rte);lQe=r(k5e,"decision_transformer"),k5e.forEach(t),iQe=r(i3," \u2014 "),cS=n(i3,"A",{href:!0});var S5e=s(cS);dQe=r(S5e,"DecisionTransformerConfig"),S5e.forEach(t),cQe=r(i3," (Decision Transformer model)"),i3.forEach(t),fQe=i(y),rm=n(y,"LI",{});var d3=s(rm);tte=n(d3,"STRONG",{});var qHr=s(tte);mQe=r(qHr,"deit"),qHr.forEach(t),gQe=r(d3," \u2014 "),fS=n(d3,"A",{href:!0});var jHr=s(fS);hQe=r(jHr,"DeiTConfig"),jHr.forEach(t),pQe=r(d3," (DeiT model)"),d3.forEach(t),uQe=i(y),tm=n(y,"LI",{});var R5e=s(tm);ate=n(R5e,"STRONG",{});var DHr=s(ate);_Qe=r(DHr,"detr"),DHr.forEach(t),bQe=r(R5e," \u2014 "),mS=n(R5e,"A",{href:!0});var GHr=s(mS);vQe=r(GHr,"DetrConfig"),GHr.forEach(t),FQe=r(R5e," (DETR model)"),R5e.forEach(t),TQe=i(y),am=n(y,"LI",{});var P5e=s(am);nte=n(P5e,"STRONG",{});var OHr=s(nte);MQe=r(OHr,"distilbert"),OHr.forEach(t),EQe=r(P5e," \u2014 "),gS=n(P5e,"A",{href:!0});var VHr=s(gS);CQe=r(VHr,"DistilBertConfig"),VHr.forEach(t),wQe=r(P5e," (DistilBERT model)"),P5e.forEach(t),AQe=i(y),nm=n(y,"LI",{});var B5e=s(nm);ste=n(B5e,"STRONG",{});var XHr=s(ste);yQe=r(XHr,"dpr"),XHr.forEach(t),LQe=r(B5e," \u2014 "),hS=n(B5e,"A",{href:!0});var zHr=s(hS);xQe=r(zHr,"DPRConfig"),zHr.forEach(t),$Qe=r(B5e," (DPR model)"),B5e.forEach(t),kQe=i(y),sm=n(y,"LI",{});var I5e=s(sm);lte=n(I5e,"STRONG",{});var WHr=s(lte);SQe=r(WHr,"dpt"),WHr.forEach(t),RQe=r(I5e," \u2014 "),pS=n(I5e,"A",{href:!0});var QHr=s(pS);PQe=r(QHr,"DPTConfig"),QHr.forEach(t),BQe=r(I5e," (DPT model)"),I5e.forEach(t),IQe=i(y),lm=n(y,"LI",{});var N5e=s(lm);ite=n(N5e,"STRONG",{});var HHr=s(ite);NQe=r(HHr,"electra"),HHr.forEach(t),qQe=r(N5e," \u2014 "),uS=n(N5e,"A",{href:!0});var UHr=s(uS);jQe=r(UHr,"ElectraConfig"),UHr.forEach(t),DQe=r(N5e," (ELECTRA model)"),N5e.forEach(t),GQe=i(y),im=n(y,"LI",{});var q5e=s(im);dte=n(q5e,"STRONG",{});var JHr=s(dte);OQe=r(JHr,"encoder-decoder"),JHr.forEach(t),VQe=r(q5e," \u2014 "),_S=n(q5e,"A",{href:!0});var YHr=s(_S);XQe=r(YHr,"EncoderDecoderConfig"),YHr.forEach(t),zQe=r(q5e," (Encoder decoder model)"),q5e.forEach(t),WQe=i(y),dm=n(y,"LI",{});var j5e=s(dm);cte=n(j5e,"STRONG",{});var KHr=s(cte);QQe=r(KHr,"flaubert"),KHr.forEach(t),HQe=r(j5e," \u2014 "),bS=n(j5e,"A",{href:!0});var ZHr=s(bS);UQe=r(ZHr,"FlaubertConfig"),ZHr.forEach(t),JQe=r(j5e," (FlauBERT model)"),j5e.forEach(t),YQe=i(y),cm=n(y,"LI",{});var D5e=s(cm);fte=n(D5e,"STRONG",{});var eUr=s(fte);KQe=r(eUr,"flava"),eUr.forEach(t),ZQe=r(D5e," \u2014 "),vS=n(D5e,"A",{href:!0});var oUr=s(vS);eHe=r(oUr,"FlavaConfig"),oUr.forEach(t),oHe=r(D5e," (FLAVA model)"),D5e.forEach(t),rHe=i(y),fm=n(y,"LI",{});var G5e=s(fm);mte=n(G5e,"STRONG",{});var rUr=s(mte);tHe=r(rUr,"fnet"),rUr.forEach(t),aHe=r(G5e," \u2014 "),FS=n(G5e,"A",{href:!0});var tUr=s(FS);nHe=r(tUr,"FNetConfig"),tUr.forEach(t),sHe=r(G5e," (FNet model)"),G5e.forEach(t),lHe=i(y),mm=n(y,"LI",{});var O5e=s(mm);gte=n(O5e,"STRONG",{});var aUr=s(gte);iHe=r(aUr,"fsmt"),aUr.forEach(t),dHe=r(O5e," \u2014 "),TS=n(O5e,"A",{href:!0});var nUr=s(TS);cHe=r(nUr,"FSMTConfig"),nUr.forEach(t),fHe=r(O5e," (FairSeq Machine-Translation model)"),O5e.forEach(t),mHe=i(y),gm=n(y,"LI",{});var V5e=s(gm);hte=n(V5e,"STRONG",{});var sUr=s(hte);gHe=r(sUr,"funnel"),sUr.forEach(t),hHe=r(V5e," \u2014 "),MS=n(V5e,"A",{href:!0});var lUr=s(MS);pHe=r(lUr,"FunnelConfig"),lUr.forEach(t),uHe=r(V5e," (Funnel Transformer model)"),V5e.forEach(t),_He=i(y),hm=n(y,"LI",{});var X5e=s(hm);pte=n(X5e,"STRONG",{});var iUr=s(pte);bHe=r(iUr,"glpn"),iUr.forEach(t),vHe=r(X5e," \u2014 "),ES=n(X5e,"A",{href:!0});var dUr=s(ES);FHe=r(dUr,"GLPNConfig"),dUr.forEach(t),THe=r(X5e," (GLPN model)"),X5e.forEach(t),MHe=i(y),pm=n(y,"LI",{});var z5e=s(pm);ute=n(z5e,"STRONG",{});var cUr=s(ute);EHe=r(cUr,"gpt2"),cUr.forEach(t),CHe=r(z5e," \u2014 "),CS=n(z5e,"A",{href:!0});var fUr=s(CS);wHe=r(fUr,"GPT2Config"),fUr.forEach(t),AHe=r(z5e," (OpenAI GPT-2 model)"),z5e.forEach(t),yHe=i(y),um=n(y,"LI",{});var W5e=s(um);_te=n(W5e,"STRONG",{});var mUr=s(_te);LHe=r(mUr,"gpt_neo"),mUr.forEach(t),xHe=r(W5e," \u2014 "),wS=n(W5e,"A",{href:!0});var gUr=s(wS);$He=r(gUr,"GPTNeoConfig"),gUr.forEach(t),kHe=r(W5e," (GPT Neo model)"),W5e.forEach(t),SHe=i(y),_m=n(y,"LI",{});var Q5e=s(_m);bte=n(Q5e,"STRONG",{});var hUr=s(bte);RHe=r(hUr,"gpt_neox"),hUr.forEach(t),PHe=r(Q5e," \u2014 "),AS=n(Q5e,"A",{href:!0});var pUr=s(AS);BHe=r(pUr,"GPTNeoXConfig"),pUr.forEach(t),IHe=r(Q5e," (GPT NeoX model)"),Q5e.forEach(t),NHe=i(y),bm=n(y,"LI",{});var H5e=s(bm);vte=n(H5e,"STRONG",{});var uUr=s(vte);qHe=r(uUr,"gptj"),uUr.forEach(t),jHe=r(H5e," \u2014 "),yS=n(H5e,"A",{href:!0});var _Ur=s(yS);DHe=r(_Ur,"GPTJConfig"),_Ur.forEach(t),GHe=r(H5e," (GPT-J model)"),H5e.forEach(t),OHe=i(y),vm=n(y,"LI",{});var U5e=s(vm);Fte=n(U5e,"STRONG",{});var bUr=s(Fte);VHe=r(bUr,"hubert"),bUr.forEach(t),XHe=r(U5e," \u2014 "),LS=n(U5e,"A",{href:!0});var vUr=s(LS);zHe=r(vUr,"HubertConfig"),vUr.forEach(t),WHe=r(U5e," (Hubert model)"),U5e.forEach(t),QHe=i(y),Fm=n(y,"LI",{});var J5e=s(Fm);Tte=n(J5e,"STRONG",{});var FUr=s(Tte);HHe=r(FUr,"ibert"),FUr.forEach(t),UHe=r(J5e," \u2014 "),xS=n(J5e,"A",{href:!0});var TUr=s(xS);JHe=r(TUr,"IBertConfig"),TUr.forEach(t),YHe=r(J5e," (I-BERT model)"),J5e.forEach(t),KHe=i(y),Tm=n(y,"LI",{});var Y5e=s(Tm);Mte=n(Y5e,"STRONG",{});var MUr=s(Mte);ZHe=r(MUr,"imagegpt"),MUr.forEach(t),eUe=r(Y5e," \u2014 "),$S=n(Y5e,"A",{href:!0});var EUr=s($S);oUe=r(EUr,"ImageGPTConfig"),EUr.forEach(t),rUe=r(Y5e," (ImageGPT model)"),Y5e.forEach(t),tUe=i(y),Mm=n(y,"LI",{});var K5e=s(Mm);Ete=n(K5e,"STRONG",{});var CUr=s(Ete);aUe=r(CUr,"layoutlm"),CUr.forEach(t),nUe=r(K5e," \u2014 "),kS=n(K5e,"A",{href:!0});var wUr=s(kS);sUe=r(wUr,"LayoutLMConfig"),wUr.forEach(t),lUe=r(K5e," (LayoutLM model)"),K5e.forEach(t),iUe=i(y),Em=n(y,"LI",{});var Z5e=s(Em);Cte=n(Z5e,"STRONG",{});var AUr=s(Cte);dUe=r(AUr,"layoutlmv2"),AUr.forEach(t),cUe=r(Z5e," \u2014 "),SS=n(Z5e,"A",{href:!0});var yUr=s(SS);fUe=r(yUr,"LayoutLMv2Config"),yUr.forEach(t),mUe=r(Z5e," (LayoutLMv2 model)"),Z5e.forEach(t),gUe=i(y),Cm=n(y,"LI",{});var e3e=s(Cm);wte=n(e3e,"STRONG",{});var LUr=s(wte);hUe=r(LUr,"layoutlmv3"),LUr.forEach(t),pUe=r(e3e," \u2014 "),RS=n(e3e,"A",{href:!0});var xUr=s(RS);uUe=r(xUr,"LayoutLMv3Config"),xUr.forEach(t),_Ue=r(e3e," (LayoutLMv3 model)"),e3e.forEach(t),bUe=i(y),wm=n(y,"LI",{});var o3e=s(wm);Ate=n(o3e,"STRONG",{});var $Ur=s(Ate);vUe=r($Ur,"led"),$Ur.forEach(t),FUe=r(o3e," \u2014 "),PS=n(o3e,"A",{href:!0});var kUr=s(PS);TUe=r(kUr,"LEDConfig"),kUr.forEach(t),MUe=r(o3e," (LED model)"),o3e.forEach(t),EUe=i(y),Am=n(y,"LI",{});var r3e=s(Am);yte=n(r3e,"STRONG",{});var SUr=s(yte);CUe=r(SUr,"levit"),SUr.forEach(t),wUe=r(r3e," \u2014 "),BS=n(r3e,"A",{href:!0});var RUr=s(BS);AUe=r(RUr,"LevitConfig"),RUr.forEach(t),yUe=r(r3e," (LeViT model)"),r3e.forEach(t),LUe=i(y),ym=n(y,"LI",{});var t3e=s(ym);Lte=n(t3e,"STRONG",{});var PUr=s(Lte);xUe=r(PUr,"longformer"),PUr.forEach(t),$Ue=r(t3e," \u2014 "),IS=n(t3e,"A",{href:!0});var BUr=s(IS);kUe=r(BUr,"LongformerConfig"),BUr.forEach(t),SUe=r(t3e," (Longformer model)"),t3e.forEach(t),RUe=i(y),Lm=n(y,"LI",{});var a3e=s(Lm);xte=n(a3e,"STRONG",{});var IUr=s(xte);PUe=r(IUr,"luke"),IUr.forEach(t),BUe=r(a3e," \u2014 "),NS=n(a3e,"A",{href:!0});var NUr=s(NS);IUe=r(NUr,"LukeConfig"),NUr.forEach(t),NUe=r(a3e," (LUKE model)"),a3e.forEach(t),qUe=i(y),xm=n(y,"LI",{});var n3e=s(xm);$te=n(n3e,"STRONG",{});var qUr=s($te);jUe=r(qUr,"lxmert"),qUr.forEach(t),DUe=r(n3e," \u2014 "),qS=n(n3e,"A",{href:!0});var jUr=s(qS);GUe=r(jUr,"LxmertConfig"),jUr.forEach(t),OUe=r(n3e," (LXMERT model)"),n3e.forEach(t),VUe=i(y),$m=n(y,"LI",{});var s3e=s($m);kte=n(s3e,"STRONG",{});var DUr=s(kte);XUe=r(DUr,"m2m_100"),DUr.forEach(t),zUe=r(s3e," \u2014 "),jS=n(s3e,"A",{href:!0});var GUr=s(jS);WUe=r(GUr,"M2M100Config"),GUr.forEach(t),QUe=r(s3e," (M2M100 model)"),s3e.forEach(t),HUe=i(y),km=n(y,"LI",{});var l3e=s(km);Ste=n(l3e,"STRONG",{});var OUr=s(Ste);UUe=r(OUr,"marian"),OUr.forEach(t),JUe=r(l3e," \u2014 "),DS=n(l3e,"A",{href:!0});var VUr=s(DS);YUe=r(VUr,"MarianConfig"),VUr.forEach(t),KUe=r(l3e," (Marian model)"),l3e.forEach(t),ZUe=i(y),Sm=n(y,"LI",{});var i3e=s(Sm);Rte=n(i3e,"STRONG",{});var XUr=s(Rte);eJe=r(XUr,"maskformer"),XUr.forEach(t),oJe=r(i3e," \u2014 "),GS=n(i3e,"A",{href:!0});var zUr=s(GS);rJe=r(zUr,"MaskFormerConfig"),zUr.forEach(t),tJe=r(i3e," (MaskFormer model)"),i3e.forEach(t),aJe=i(y),Rm=n(y,"LI",{});var d3e=s(Rm);Pte=n(d3e,"STRONG",{});var WUr=s(Pte);nJe=r(WUr,"mbart"),WUr.forEach(t),sJe=r(d3e," \u2014 "),OS=n(d3e,"A",{href:!0});var QUr=s(OS);lJe=r(QUr,"MBartConfig"),QUr.forEach(t),iJe=r(d3e," (mBART model)"),d3e.forEach(t),dJe=i(y),Pm=n(y,"LI",{});var c3e=s(Pm);Bte=n(c3e,"STRONG",{});var HUr=s(Bte);cJe=r(HUr,"mctct"),HUr.forEach(t),fJe=r(c3e," \u2014 "),VS=n(c3e,"A",{href:!0});var UUr=s(VS);mJe=r(UUr,"MCTCTConfig"),UUr.forEach(t),gJe=r(c3e," (M-CTC-T model)"),c3e.forEach(t),hJe=i(y),Bm=n(y,"LI",{});var f3e=s(Bm);Ite=n(f3e,"STRONG",{});var JUr=s(Ite);pJe=r(JUr,"megatron-bert"),JUr.forEach(t),uJe=r(f3e," \u2014 "),XS=n(f3e,"A",{href:!0});var YUr=s(XS);_Je=r(YUr,"MegatronBertConfig"),YUr.forEach(t),bJe=r(f3e," (Megatron-BERT model)"),f3e.forEach(t),vJe=i(y),Im=n(y,"LI",{});var m3e=s(Im);Nte=n(m3e,"STRONG",{});var KUr=s(Nte);FJe=r(KUr,"mobilebert"),KUr.forEach(t),TJe=r(m3e," \u2014 "),zS=n(m3e,"A",{href:!0});var ZUr=s(zS);MJe=r(ZUr,"MobileBertConfig"),ZUr.forEach(t),EJe=r(m3e," (MobileBERT model)"),m3e.forEach(t),CJe=i(y),Nm=n(y,"LI",{});var g3e=s(Nm);qte=n(g3e,"STRONG",{});var eJr=s(qte);wJe=r(eJr,"mpnet"),eJr.forEach(t),AJe=r(g3e," \u2014 "),WS=n(g3e,"A",{href:!0});var oJr=s(WS);yJe=r(oJr,"MPNetConfig"),oJr.forEach(t),LJe=r(g3e," (MPNet model)"),g3e.forEach(t),xJe=i(y),qm=n(y,"LI",{});var h3e=s(qm);jte=n(h3e,"STRONG",{});var rJr=s(jte);$Je=r(rJr,"mt5"),rJr.forEach(t),kJe=r(h3e," \u2014 "),QS=n(h3e,"A",{href:!0});var tJr=s(QS);SJe=r(tJr,"MT5Config"),tJr.forEach(t),RJe=r(h3e," (MT5 model)"),h3e.forEach(t),PJe=i(y),jm=n(y,"LI",{});var p3e=s(jm);Dte=n(p3e,"STRONG",{});var aJr=s(Dte);BJe=r(aJr,"nystromformer"),aJr.forEach(t),IJe=r(p3e," \u2014 "),HS=n(p3e,"A",{href:!0});var nJr=s(HS);NJe=r(nJr,"NystromformerConfig"),nJr.forEach(t),qJe=r(p3e," (Nystr\xF6mformer model)"),p3e.forEach(t),jJe=i(y),Dm=n(y,"LI",{});var u3e=s(Dm);Gte=n(u3e,"STRONG",{});var sJr=s(Gte);DJe=r(sJr,"openai-gpt"),sJr.forEach(t),GJe=r(u3e," \u2014 "),US=n(u3e,"A",{href:!0});var lJr=s(US);OJe=r(lJr,"OpenAIGPTConfig"),lJr.forEach(t),VJe=r(u3e," (OpenAI GPT model)"),u3e.forEach(t),XJe=i(y),Gm=n(y,"LI",{});var _3e=s(Gm);Ote=n(_3e,"STRONG",{});var iJr=s(Ote);zJe=r(iJr,"opt"),iJr.forEach(t),WJe=r(_3e," \u2014 "),JS=n(_3e,"A",{href:!0});var dJr=s(JS);QJe=r(dJr,"OPTConfig"),dJr.forEach(t),HJe=r(_3e," (OPT model)"),_3e.forEach(t),UJe=i(y),Om=n(y,"LI",{});var b3e=s(Om);Vte=n(b3e,"STRONG",{});var cJr=s(Vte);JJe=r(cJr,"pegasus"),cJr.forEach(t),YJe=r(b3e," \u2014 "),YS=n(b3e,"A",{href:!0});var fJr=s(YS);KJe=r(fJr,"PegasusConfig"),fJr.forEach(t),ZJe=r(b3e," (Pegasus model)"),b3e.forEach(t),eYe=i(y),Vm=n(y,"LI",{});var v3e=s(Vm);Xte=n(v3e,"STRONG",{});var mJr=s(Xte);oYe=r(mJr,"perceiver"),mJr.forEach(t),rYe=r(v3e," \u2014 "),KS=n(v3e,"A",{href:!0});var gJr=s(KS);tYe=r(gJr,"PerceiverConfig"),gJr.forEach(t),aYe=r(v3e," (Perceiver model)"),v3e.forEach(t),nYe=i(y),Xm=n(y,"LI",{});var F3e=s(Xm);zte=n(F3e,"STRONG",{});var hJr=s(zte);sYe=r(hJr,"plbart"),hJr.forEach(t),lYe=r(F3e," \u2014 "),ZS=n(F3e,"A",{href:!0});var pJr=s(ZS);iYe=r(pJr,"PLBartConfig"),pJr.forEach(t),dYe=r(F3e," (PLBart model)"),F3e.forEach(t),cYe=i(y),zm=n(y,"LI",{});var T3e=s(zm);Wte=n(T3e,"STRONG",{});var uJr=s(Wte);fYe=r(uJr,"poolformer"),uJr.forEach(t),mYe=r(T3e," \u2014 "),eR=n(T3e,"A",{href:!0});var _Jr=s(eR);gYe=r(_Jr,"PoolFormerConfig"),_Jr.forEach(t),hYe=r(T3e," (PoolFormer model)"),T3e.forEach(t),pYe=i(y),Wm=n(y,"LI",{});var M3e=s(Wm);Qte=n(M3e,"STRONG",{});var bJr=s(Qte);uYe=r(bJr,"prophetnet"),bJr.forEach(t),_Ye=r(M3e," \u2014 "),oR=n(M3e,"A",{href:!0});var vJr=s(oR);bYe=r(vJr,"ProphetNetConfig"),vJr.forEach(t),vYe=r(M3e," (ProphetNet model)"),M3e.forEach(t),FYe=i(y),Qm=n(y,"LI",{});var E3e=s(Qm);Hte=n(E3e,"STRONG",{});var FJr=s(Hte);TYe=r(FJr,"qdqbert"),FJr.forEach(t),MYe=r(E3e," \u2014 "),rR=n(E3e,"A",{href:!0});var TJr=s(rR);EYe=r(TJr,"QDQBertConfig"),TJr.forEach(t),CYe=r(E3e," (QDQBert model)"),E3e.forEach(t),wYe=i(y),Hm=n(y,"LI",{});var C3e=s(Hm);Ute=n(C3e,"STRONG",{});var MJr=s(Ute);AYe=r(MJr,"rag"),MJr.forEach(t),yYe=r(C3e," \u2014 "),tR=n(C3e,"A",{href:!0});var EJr=s(tR);LYe=r(EJr,"RagConfig"),EJr.forEach(t),xYe=r(C3e," (RAG model)"),C3e.forEach(t),$Ye=i(y),Um=n(y,"LI",{});var w3e=s(Um);Jte=n(w3e,"STRONG",{});var CJr=s(Jte);kYe=r(CJr,"realm"),CJr.forEach(t),SYe=r(w3e," \u2014 "),aR=n(w3e,"A",{href:!0});var wJr=s(aR);RYe=r(wJr,"RealmConfig"),wJr.forEach(t),PYe=r(w3e," (REALM model)"),w3e.forEach(t),BYe=i(y),Jm=n(y,"LI",{});var A3e=s(Jm);Yte=n(A3e,"STRONG",{});var AJr=s(Yte);IYe=r(AJr,"reformer"),AJr.forEach(t),NYe=r(A3e," \u2014 "),nR=n(A3e,"A",{href:!0});var yJr=s(nR);qYe=r(yJr,"ReformerConfig"),yJr.forEach(t),jYe=r(A3e," (Reformer model)"),A3e.forEach(t),DYe=i(y),Ym=n(y,"LI",{});var y3e=s(Ym);Kte=n(y3e,"STRONG",{});var LJr=s(Kte);GYe=r(LJr,"regnet"),LJr.forEach(t),OYe=r(y3e," \u2014 "),sR=n(y3e,"A",{href:!0});var xJr=s(sR);VYe=r(xJr,"RegNetConfig"),xJr.forEach(t),XYe=r(y3e," (RegNet model)"),y3e.forEach(t),zYe=i(y),Km=n(y,"LI",{});var L3e=s(Km);Zte=n(L3e,"STRONG",{});var $Jr=s(Zte);WYe=r($Jr,"rembert"),$Jr.forEach(t),QYe=r(L3e," \u2014 "),lR=n(L3e,"A",{href:!0});var kJr=s(lR);HYe=r(kJr,"RemBertConfig"),kJr.forEach(t),UYe=r(L3e," (RemBERT model)"),L3e.forEach(t),JYe=i(y),Zm=n(y,"LI",{});var x3e=s(Zm);eae=n(x3e,"STRONG",{});var SJr=s(eae);YYe=r(SJr,"resnet"),SJr.forEach(t),KYe=r(x3e," \u2014 "),iR=n(x3e,"A",{href:!0});var RJr=s(iR);ZYe=r(RJr,"ResNetConfig"),RJr.forEach(t),eKe=r(x3e," (ResNet model)"),x3e.forEach(t),oKe=i(y),eg=n(y,"LI",{});var $3e=s(eg);oae=n($3e,"STRONG",{});var PJr=s(oae);rKe=r(PJr,"retribert"),PJr.forEach(t),tKe=r($3e," \u2014 "),dR=n($3e,"A",{href:!0});var BJr=s(dR);aKe=r(BJr,"RetriBertConfig"),BJr.forEach(t),nKe=r($3e," (RetriBERT model)"),$3e.forEach(t),sKe=i(y),og=n(y,"LI",{});var k3e=s(og);rae=n(k3e,"STRONG",{});var IJr=s(rae);lKe=r(IJr,"roberta"),IJr.forEach(t),iKe=r(k3e," \u2014 "),cR=n(k3e,"A",{href:!0});var NJr=s(cR);dKe=r(NJr,"RobertaConfig"),NJr.forEach(t),cKe=r(k3e," (RoBERTa model)"),k3e.forEach(t),fKe=i(y),rg=n(y,"LI",{});var S3e=s(rg);tae=n(S3e,"STRONG",{});var qJr=s(tae);mKe=r(qJr,"roformer"),qJr.forEach(t),gKe=r(S3e," \u2014 "),fR=n(S3e,"A",{href:!0});var jJr=s(fR);hKe=r(jJr,"RoFormerConfig"),jJr.forEach(t),pKe=r(S3e," (RoFormer model)"),S3e.forEach(t),uKe=i(y),tg=n(y,"LI",{});var R3e=s(tg);aae=n(R3e,"STRONG",{});var DJr=s(aae);_Ke=r(DJr,"segformer"),DJr.forEach(t),bKe=r(R3e," \u2014 "),mR=n(R3e,"A",{href:!0});var GJr=s(mR);vKe=r(GJr,"SegformerConfig"),GJr.forEach(t),FKe=r(R3e," (SegFormer model)"),R3e.forEach(t),TKe=i(y),ag=n(y,"LI",{});var P3e=s(ag);nae=n(P3e,"STRONG",{});var OJr=s(nae);MKe=r(OJr,"sew"),OJr.forEach(t),EKe=r(P3e," \u2014 "),gR=n(P3e,"A",{href:!0});var VJr=s(gR);CKe=r(VJr,"SEWConfig"),VJr.forEach(t),wKe=r(P3e," (SEW model)"),P3e.forEach(t),AKe=i(y),ng=n(y,"LI",{});var B3e=s(ng);sae=n(B3e,"STRONG",{});var XJr=s(sae);yKe=r(XJr,"sew-d"),XJr.forEach(t),LKe=r(B3e," \u2014 "),hR=n(B3e,"A",{href:!0});var zJr=s(hR);xKe=r(zJr,"SEWDConfig"),zJr.forEach(t),$Ke=r(B3e," (SEW-D model)"),B3e.forEach(t),kKe=i(y),sg=n(y,"LI",{});var I3e=s(sg);lae=n(I3e,"STRONG",{});var WJr=s(lae);SKe=r(WJr,"speech-encoder-decoder"),WJr.forEach(t),RKe=r(I3e," \u2014 "),pR=n(I3e,"A",{href:!0});var QJr=s(pR);PKe=r(QJr,"SpeechEncoderDecoderConfig"),QJr.forEach(t),BKe=r(I3e," (Speech Encoder decoder model)"),I3e.forEach(t),IKe=i(y),lg=n(y,"LI",{});var N3e=s(lg);iae=n(N3e,"STRONG",{});var HJr=s(iae);NKe=r(HJr,"speech_to_text"),HJr.forEach(t),qKe=r(N3e," \u2014 "),uR=n(N3e,"A",{href:!0});var UJr=s(uR);jKe=r(UJr,"Speech2TextConfig"),UJr.forEach(t),DKe=r(N3e," (Speech2Text model)"),N3e.forEach(t),GKe=i(y),ig=n(y,"LI",{});var q3e=s(ig);dae=n(q3e,"STRONG",{});var JJr=s(dae);OKe=r(JJr,"speech_to_text_2"),JJr.forEach(t),VKe=r(q3e," \u2014 "),_R=n(q3e,"A",{href:!0});var YJr=s(_R);XKe=r(YJr,"Speech2Text2Config"),YJr.forEach(t),zKe=r(q3e," (Speech2Text2 model)"),q3e.forEach(t),WKe=i(y),dg=n(y,"LI",{});var j3e=s(dg);cae=n(j3e,"STRONG",{});var KJr=s(cae);QKe=r(KJr,"splinter"),KJr.forEach(t),HKe=r(j3e," \u2014 "),bR=n(j3e,"A",{href:!0});var ZJr=s(bR);UKe=r(ZJr,"SplinterConfig"),ZJr.forEach(t),JKe=r(j3e," (Splinter model)"),j3e.forEach(t),YKe=i(y),cg=n(y,"LI",{});var D3e=s(cg);fae=n(D3e,"STRONG",{});var eYr=s(fae);KKe=r(eYr,"squeezebert"),eYr.forEach(t),ZKe=r(D3e," \u2014 "),vR=n(D3e,"A",{href:!0});var oYr=s(vR);eZe=r(oYr,"SqueezeBertConfig"),oYr.forEach(t),oZe=r(D3e," (SqueezeBERT model)"),D3e.forEach(t),rZe=i(y),fg=n(y,"LI",{});var G3e=s(fg);mae=n(G3e,"STRONG",{});var rYr=s(mae);tZe=r(rYr,"swin"),rYr.forEach(t),aZe=r(G3e," \u2014 "),FR=n(G3e,"A",{href:!0});var tYr=s(FR);nZe=r(tYr,"SwinConfig"),tYr.forEach(t),sZe=r(G3e," (Swin Transformer model)"),G3e.forEach(t),lZe=i(y),mg=n(y,"LI",{});var O3e=s(mg);gae=n(O3e,"STRONG",{});var aYr=s(gae);iZe=r(aYr,"t5"),aYr.forEach(t),dZe=r(O3e," \u2014 "),TR=n(O3e,"A",{href:!0});var nYr=s(TR);cZe=r(nYr,"T5Config"),nYr.forEach(t),fZe=r(O3e," (T5 model)"),O3e.forEach(t),mZe=i(y),gg=n(y,"LI",{});var V3e=s(gg);hae=n(V3e,"STRONG",{});var sYr=s(hae);gZe=r(sYr,"tapas"),sYr.forEach(t),hZe=r(V3e," \u2014 "),MR=n(V3e,"A",{href:!0});var lYr=s(MR);pZe=r(lYr,"TapasConfig"),lYr.forEach(t),uZe=r(V3e," (TAPAS model)"),V3e.forEach(t),_Ze=i(y),hg=n(y,"LI",{});var X3e=s(hg);pae=n(X3e,"STRONG",{});var iYr=s(pae);bZe=r(iYr,"trajectory_transformer"),iYr.forEach(t),vZe=r(X3e," \u2014 "),ER=n(X3e,"A",{href:!0});var dYr=s(ER);FZe=r(dYr,"TrajectoryTransformerConfig"),dYr.forEach(t),TZe=r(X3e," (Trajectory Transformer model)"),X3e.forEach(t),MZe=i(y),pg=n(y,"LI",{});var z3e=s(pg);uae=n(z3e,"STRONG",{});var cYr=s(uae);EZe=r(cYr,"transfo-xl"),cYr.forEach(t),CZe=r(z3e," \u2014 "),CR=n(z3e,"A",{href:!0});var fYr=s(CR);wZe=r(fYr,"TransfoXLConfig"),fYr.forEach(t),AZe=r(z3e," (Transformer-XL model)"),z3e.forEach(t),yZe=i(y),ug=n(y,"LI",{});var W3e=s(ug);_ae=n(W3e,"STRONG",{});var mYr=s(_ae);LZe=r(mYr,"trocr"),mYr.forEach(t),xZe=r(W3e," \u2014 "),wR=n(W3e,"A",{href:!0});var gYr=s(wR);$Ze=r(gYr,"TrOCRConfig"),gYr.forEach(t),kZe=r(W3e," (TrOCR model)"),W3e.forEach(t),SZe=i(y),_g=n(y,"LI",{});var Q3e=s(_g);bae=n(Q3e,"STRONG",{});var hYr=s(bae);RZe=r(hYr,"unispeech"),hYr.forEach(t),PZe=r(Q3e," \u2014 "),AR=n(Q3e,"A",{href:!0});var pYr=s(AR);BZe=r(pYr,"UniSpeechConfig"),pYr.forEach(t),IZe=r(Q3e," (UniSpeech model)"),Q3e.forEach(t),NZe=i(y),bg=n(y,"LI",{});var H3e=s(bg);vae=n(H3e,"STRONG",{});var uYr=s(vae);qZe=r(uYr,"unispeech-sat"),uYr.forEach(t),jZe=r(H3e," \u2014 "),yR=n(H3e,"A",{href:!0});var _Yr=s(yR);DZe=r(_Yr,"UniSpeechSatConfig"),_Yr.forEach(t),GZe=r(H3e," (UniSpeechSat model)"),H3e.forEach(t),OZe=i(y),vg=n(y,"LI",{});var U3e=s(vg);Fae=n(U3e,"STRONG",{});var bYr=s(Fae);VZe=r(bYr,"van"),bYr.forEach(t),XZe=r(U3e," \u2014 "),LR=n(U3e,"A",{href:!0});var vYr=s(LR);zZe=r(vYr,"VanConfig"),vYr.forEach(t),WZe=r(U3e," (VAN model)"),U3e.forEach(t),QZe=i(y),Fg=n(y,"LI",{});var J3e=s(Fg);Tae=n(J3e,"STRONG",{});var FYr=s(Tae);HZe=r(FYr,"vilt"),FYr.forEach(t),UZe=r(J3e," \u2014 "),xR=n(J3e,"A",{href:!0});var TYr=s(xR);JZe=r(TYr,"ViltConfig"),TYr.forEach(t),YZe=r(J3e," (ViLT model)"),J3e.forEach(t),KZe=i(y),Tg=n(y,"LI",{});var Y3e=s(Tg);Mae=n(Y3e,"STRONG",{});var MYr=s(Mae);ZZe=r(MYr,"vision-encoder-decoder"),MYr.forEach(t),eeo=r(Y3e," \u2014 "),$R=n(Y3e,"A",{href:!0});var EYr=s($R);oeo=r(EYr,"VisionEncoderDecoderConfig"),EYr.forEach(t),reo=r(Y3e," (Vision Encoder decoder model)"),Y3e.forEach(t),teo=i(y),Mg=n(y,"LI",{});var K3e=s(Mg);Eae=n(K3e,"STRONG",{});var CYr=s(Eae);aeo=r(CYr,"vision-text-dual-encoder"),CYr.forEach(t),neo=r(K3e," \u2014 "),kR=n(K3e,"A",{href:!0});var wYr=s(kR);seo=r(wYr,"VisionTextDualEncoderConfig"),wYr.forEach(t),leo=r(K3e," (VisionTextDualEncoder model)"),K3e.forEach(t),ieo=i(y),Eg=n(y,"LI",{});var Z3e=s(Eg);Cae=n(Z3e,"STRONG",{});var AYr=s(Cae);deo=r(AYr,"visual_bert"),AYr.forEach(t),ceo=r(Z3e," \u2014 "),SR=n(Z3e,"A",{href:!0});var yYr=s(SR);feo=r(yYr,"VisualBertConfig"),yYr.forEach(t),meo=r(Z3e," (VisualBERT model)"),Z3e.forEach(t),geo=i(y),Cg=n(y,"LI",{});var ewe=s(Cg);wae=n(ewe,"STRONG",{});var LYr=s(wae);heo=r(LYr,"vit"),LYr.forEach(t),peo=r(ewe," \u2014 "),RR=n(ewe,"A",{href:!0});var xYr=s(RR);ueo=r(xYr,"ViTConfig"),xYr.forEach(t),_eo=r(ewe," (ViT model)"),ewe.forEach(t),beo=i(y),wg=n(y,"LI",{});var owe=s(wg);Aae=n(owe,"STRONG",{});var $Yr=s(Aae);veo=r($Yr,"vit_mae"),$Yr.forEach(t),Feo=r(owe," \u2014 "),PR=n(owe,"A",{href:!0});var kYr=s(PR);Teo=r(kYr,"ViTMAEConfig"),kYr.forEach(t),Meo=r(owe," (ViTMAE model)"),owe.forEach(t),Eeo=i(y),Ag=n(y,"LI",{});var rwe=s(Ag);yae=n(rwe,"STRONG",{});var SYr=s(yae);Ceo=r(SYr,"wav2vec2"),SYr.forEach(t),weo=r(rwe," \u2014 "),BR=n(rwe,"A",{href:!0});var RYr=s(BR);Aeo=r(RYr,"Wav2Vec2Config"),RYr.forEach(t),yeo=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),Leo=i(y),yg=n(y,"LI",{});var twe=s(yg);Lae=n(twe,"STRONG",{});var PYr=s(Lae);xeo=r(PYr,"wav2vec2-conformer"),PYr.forEach(t),$eo=r(twe," \u2014 "),IR=n(twe,"A",{href:!0});var BYr=s(IR);keo=r(BYr,"Wav2Vec2ConformerConfig"),BYr.forEach(t),Seo=r(twe," (Wav2Vec2-Conformer model)"),twe.forEach(t),Reo=i(y),Lg=n(y,"LI",{});var awe=s(Lg);xae=n(awe,"STRONG",{});var IYr=s(xae);Peo=r(IYr,"wavlm"),IYr.forEach(t),Beo=r(awe," \u2014 "),NR=n(awe,"A",{href:!0});var NYr=s(NR);Ieo=r(NYr,"WavLMConfig"),NYr.forEach(t),Neo=r(awe," (WavLM model)"),awe.forEach(t),qeo=i(y),xg=n(y,"LI",{});var nwe=s(xg);$ae=n(nwe,"STRONG",{});var qYr=s($ae);jeo=r(qYr,"xglm"),qYr.forEach(t),Deo=r(nwe," \u2014 "),qR=n(nwe,"A",{href:!0});var jYr=s(qR);Geo=r(jYr,"XGLMConfig"),jYr.forEach(t),Oeo=r(nwe," (XGLM model)"),nwe.forEach(t),Veo=i(y),$g=n(y,"LI",{});var swe=s($g);kae=n(swe,"STRONG",{});var DYr=s(kae);Xeo=r(DYr,"xlm"),DYr.forEach(t),zeo=r(swe," \u2014 "),jR=n(swe,"A",{href:!0});var GYr=s(jR);Weo=r(GYr,"XLMConfig"),GYr.forEach(t),Qeo=r(swe," (XLM model)"),swe.forEach(t),Heo=i(y),kg=n(y,"LI",{});var lwe=s(kg);Sae=n(lwe,"STRONG",{});var OYr=s(Sae);Ueo=r(OYr,"xlm-prophetnet"),OYr.forEach(t),Jeo=r(lwe," \u2014 "),DR=n(lwe,"A",{href:!0});var VYr=s(DR);Yeo=r(VYr,"XLMProphetNetConfig"),VYr.forEach(t),Keo=r(lwe," (XLM-ProphetNet model)"),lwe.forEach(t),Zeo=i(y),Sg=n(y,"LI",{});var iwe=s(Sg);Rae=n(iwe,"STRONG",{});var XYr=s(Rae);eoo=r(XYr,"xlm-roberta"),XYr.forEach(t),ooo=r(iwe," \u2014 "),GR=n(iwe,"A",{href:!0});var zYr=s(GR);roo=r(zYr,"XLMRobertaConfig"),zYr.forEach(t),too=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),aoo=i(y),Rg=n(y,"LI",{});var dwe=s(Rg);Pae=n(dwe,"STRONG",{});var WYr=s(Pae);noo=r(WYr,"xlm-roberta-xl"),WYr.forEach(t),soo=r(dwe," \u2014 "),OR=n(dwe,"A",{href:!0});var QYr=s(OR);loo=r(QYr,"XLMRobertaXLConfig"),QYr.forEach(t),ioo=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),doo=i(y),Pg=n(y,"LI",{});var cwe=s(Pg);Bae=n(cwe,"STRONG",{});var HYr=s(Bae);coo=r(HYr,"xlnet"),HYr.forEach(t),foo=r(cwe," \u2014 "),VR=n(cwe,"A",{href:!0});var UYr=s(VR);moo=r(UYr,"XLNetConfig"),UYr.forEach(t),goo=r(cwe," (XLNet model)"),cwe.forEach(t),hoo=i(y),Bg=n(y,"LI",{});var fwe=s(Bg);Iae=n(fwe,"STRONG",{});var JYr=s(Iae);poo=r(JYr,"yolos"),JYr.forEach(t),uoo=r(fwe," \u2014 "),XR=n(fwe,"A",{href:!0});var YYr=s(XR);_oo=r(YYr,"YolosConfig"),YYr.forEach(t),boo=r(fwe," (YOLOS model)"),fwe.forEach(t),voo=i(y),Ig=n(y,"LI",{});var mwe=s(Ig);Nae=n(mwe,"STRONG",{});var KYr=s(Nae);Foo=r(KYr,"yoso"),KYr.forEach(t),Too=r(mwe," \u2014 "),zR=n(mwe,"A",{href:!0});var ZYr=s(zR);Moo=r(ZYr,"YosoConfig"),ZYr.forEach(t),Eoo=r(mwe," (YOSO model)"),mwe.forEach(t),y.forEach(t),Coo=i(tt),T(Ng.$$.fragment,tt),tt.forEach(t),woo=i(rt),qg=n(rt,"DIV",{class:!0});var TOe=s(qg);T(_0.$$.fragment,TOe),Aoo=i(TOe),qae=n(TOe,"P",{});var eKr=s(qae);yoo=r(eKr,"Register a new configuration for this class."),eKr.forEach(t),TOe.forEach(t),rt.forEach(t),MDe=i(f),xi=n(f,"H2",{class:!0});var MOe=s(xi);jg=n(MOe,"A",{id:!0,class:!0,href:!0});var oKr=s(jg);jae=n(oKr,"SPAN",{});var rKr=s(jae);T(b0.$$.fragment,rKr),rKr.forEach(t),oKr.forEach(t),Loo=i(MOe),Dae=n(MOe,"SPAN",{});var tKr=s(Dae);xoo=r(tKr,"AutoTokenizer"),tKr.forEach(t),MOe.forEach(t),EDe=i(f),Ao=n(f,"DIV",{class:!0});var Xs=s(Ao);T(v0.$$.fragment,Xs),$oo=i(Xs),F0=n(Xs,"P",{});var EOe=s(F0);koo=r(EOe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WR=n(EOe,"A",{href:!0});var aKr=s(WR);Soo=r(aKr,"AutoTokenizer.from_pretrained()"),aKr.forEach(t),Roo=r(EOe," class method."),EOe.forEach(t),Poo=i(Xs),T0=n(Xs,"P",{});var COe=s(T0);Boo=r(COe,"This class cannot be instantiated directly using "),Gae=n(COe,"CODE",{});var nKr=s(Gae);Ioo=r(nKr,"__init__()"),nKr.forEach(t),Noo=r(COe," (throws an error)."),COe.forEach(t),qoo=i(Xs),Ar=n(Xs,"DIV",{class:!0});var zs=s(Ar);T(M0.$$.fragment,zs),joo=i(zs),Oae=n(zs,"P",{});var sKr=s(Oae);Doo=r(sKr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sKr.forEach(t),Goo=i(zs),$a=n(zs,"P",{});var c3=s($a);Ooo=r(c3,"The tokenizer class to instantiate is selected based on the "),Vae=n(c3,"CODE",{});var lKr=s(Vae);Voo=r(lKr,"model_type"),lKr.forEach(t),Xoo=r(c3,` property of the config object (either
passed as an argument or loaded from `),Xae=n(c3,"CODE",{});var iKr=s(Xae);zoo=r(iKr,"pretrained_model_name_or_path"),iKr.forEach(t),Woo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zae=n(c3,"CODE",{});var dKr=s(zae);Qoo=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),Hoo=r(c3,":"),c3.forEach(t),Uoo=i(zs),k=n(zs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var L$=s(Nn);Wae=n(L$,"STRONG",{});var cKr=s(Wae);Joo=r(cKr,"albert"),cKr.forEach(t),Yoo=r(L$," \u2014 "),QR=n(L$,"A",{href:!0});var fKr=s(QR);Koo=r(fKr,"AlbertTokenizer"),fKr.forEach(t),Zoo=r(L$," or "),HR=n(L$,"A",{href:!0});var mKr=s(HR);ero=r(mKr,"AlbertTokenizerFast"),mKr.forEach(t),oro=r(L$," (ALBERT model)"),L$.forEach(t),rro=i(S),qn=n(S,"LI",{});var x$=s(qn);Qae=n(x$,"STRONG",{});var gKr=s(Qae);tro=r(gKr,"bart"),gKr.forEach(t),aro=r(x$," \u2014 "),UR=n(x$,"A",{href:!0});var hKr=s(UR);nro=r(hKr,"BartTokenizer"),hKr.forEach(t),sro=r(x$," or "),JR=n(x$,"A",{href:!0});var pKr=s(JR);lro=r(pKr,"BartTokenizerFast"),pKr.forEach(t),iro=r(x$," (BART model)"),x$.forEach(t),dro=i(S),jn=n(S,"LI",{});var $$=s(jn);Hae=n($$,"STRONG",{});var uKr=s(Hae);cro=r(uKr,"barthez"),uKr.forEach(t),fro=r($$," \u2014 "),YR=n($$,"A",{href:!0});var _Kr=s(YR);mro=r(_Kr,"BarthezTokenizer"),_Kr.forEach(t),gro=r($$," or "),KR=n($$,"A",{href:!0});var bKr=s(KR);hro=r(bKr,"BarthezTokenizerFast"),bKr.forEach(t),pro=r($$," (BARThez model)"),$$.forEach(t),uro=i(S),Dg=n(S,"LI",{});var gwe=s(Dg);Uae=n(gwe,"STRONG",{});var vKr=s(Uae);_ro=r(vKr,"bartpho"),vKr.forEach(t),bro=r(gwe," \u2014 "),ZR=n(gwe,"A",{href:!0});var FKr=s(ZR);vro=r(FKr,"BartphoTokenizer"),FKr.forEach(t),Fro=r(gwe," (BARTpho model)"),gwe.forEach(t),Tro=i(S),Dn=n(S,"LI",{});var k$=s(Dn);Jae=n(k$,"STRONG",{});var TKr=s(Jae);Mro=r(TKr,"bert"),TKr.forEach(t),Ero=r(k$," \u2014 "),eP=n(k$,"A",{href:!0});var MKr=s(eP);Cro=r(MKr,"BertTokenizer"),MKr.forEach(t),wro=r(k$," or "),oP=n(k$,"A",{href:!0});var EKr=s(oP);Aro=r(EKr,"BertTokenizerFast"),EKr.forEach(t),yro=r(k$," (BERT model)"),k$.forEach(t),Lro=i(S),Gg=n(S,"LI",{});var hwe=s(Gg);Yae=n(hwe,"STRONG",{});var CKr=s(Yae);xro=r(CKr,"bert-generation"),CKr.forEach(t),$ro=r(hwe," \u2014 "),rP=n(hwe,"A",{href:!0});var wKr=s(rP);kro=r(wKr,"BertGenerationTokenizer"),wKr.forEach(t),Sro=r(hwe," (Bert Generation model)"),hwe.forEach(t),Rro=i(S),Og=n(S,"LI",{});var pwe=s(Og);Kae=n(pwe,"STRONG",{});var AKr=s(Kae);Pro=r(AKr,"bert-japanese"),AKr.forEach(t),Bro=r(pwe," \u2014 "),tP=n(pwe,"A",{href:!0});var yKr=s(tP);Iro=r(yKr,"BertJapaneseTokenizer"),yKr.forEach(t),Nro=r(pwe," (BertJapanese model)"),pwe.forEach(t),qro=i(S),Vg=n(S,"LI",{});var uwe=s(Vg);Zae=n(uwe,"STRONG",{});var LKr=s(Zae);jro=r(LKr,"bertweet"),LKr.forEach(t),Dro=r(uwe," \u2014 "),aP=n(uwe,"A",{href:!0});var xKr=s(aP);Gro=r(xKr,"BertweetTokenizer"),xKr.forEach(t),Oro=r(uwe," (BERTweet model)"),uwe.forEach(t),Vro=i(S),Gn=n(S,"LI",{});var S$=s(Gn);ene=n(S$,"STRONG",{});var $Kr=s(ene);Xro=r($Kr,"big_bird"),$Kr.forEach(t),zro=r(S$," \u2014 "),nP=n(S$,"A",{href:!0});var kKr=s(nP);Wro=r(kKr,"BigBirdTokenizer"),kKr.forEach(t),Qro=r(S$," or "),sP=n(S$,"A",{href:!0});var SKr=s(sP);Hro=r(SKr,"BigBirdTokenizerFast"),SKr.forEach(t),Uro=r(S$," (BigBird model)"),S$.forEach(t),Jro=i(S),On=n(S,"LI",{});var R$=s(On);one=n(R$,"STRONG",{});var RKr=s(one);Yro=r(RKr,"bigbird_pegasus"),RKr.forEach(t),Kro=r(R$," \u2014 "),lP=n(R$,"A",{href:!0});var PKr=s(lP);Zro=r(PKr,"PegasusTokenizer"),PKr.forEach(t),eto=r(R$," or "),iP=n(R$,"A",{href:!0});var BKr=s(iP);oto=r(BKr,"PegasusTokenizerFast"),BKr.forEach(t),rto=r(R$," (BigBird-Pegasus model)"),R$.forEach(t),tto=i(S),Vn=n(S,"LI",{});var P$=s(Vn);rne=n(P$,"STRONG",{});var IKr=s(rne);ato=r(IKr,"blenderbot"),IKr.forEach(t),nto=r(P$," \u2014 "),dP=n(P$,"A",{href:!0});var NKr=s(dP);sto=r(NKr,"BlenderbotTokenizer"),NKr.forEach(t),lto=r(P$," or "),cP=n(P$,"A",{href:!0});var qKr=s(cP);ito=r(qKr,"BlenderbotTokenizerFast"),qKr.forEach(t),dto=r(P$," (Blenderbot model)"),P$.forEach(t),cto=i(S),Xg=n(S,"LI",{});var _we=s(Xg);tne=n(_we,"STRONG",{});var jKr=s(tne);fto=r(jKr,"blenderbot-small"),jKr.forEach(t),mto=r(_we," \u2014 "),fP=n(_we,"A",{href:!0});var DKr=s(fP);gto=r(DKr,"BlenderbotSmallTokenizer"),DKr.forEach(t),hto=r(_we," (BlenderbotSmall model)"),_we.forEach(t),pto=i(S),zg=n(S,"LI",{});var bwe=s(zg);ane=n(bwe,"STRONG",{});var GKr=s(ane);uto=r(GKr,"bloom"),GKr.forEach(t),_to=r(bwe," \u2014 "),mP=n(bwe,"A",{href:!0});var OKr=s(mP);bto=r(OKr,"BloomTokenizerFast"),OKr.forEach(t),vto=r(bwe," (BLOOM model)"),bwe.forEach(t),Fto=i(S),Wg=n(S,"LI",{});var vwe=s(Wg);nne=n(vwe,"STRONG",{});var VKr=s(nne);Tto=r(VKr,"byt5"),VKr.forEach(t),Mto=r(vwe," \u2014 "),gP=n(vwe,"A",{href:!0});var XKr=s(gP);Eto=r(XKr,"ByT5Tokenizer"),XKr.forEach(t),Cto=r(vwe," (ByT5 model)"),vwe.forEach(t),wto=i(S),Xn=n(S,"LI",{});var B$=s(Xn);sne=n(B$,"STRONG",{});var zKr=s(sne);Ato=r(zKr,"camembert"),zKr.forEach(t),yto=r(B$," \u2014 "),hP=n(B$,"A",{href:!0});var WKr=s(hP);Lto=r(WKr,"CamembertTokenizer"),WKr.forEach(t),xto=r(B$," or "),pP=n(B$,"A",{href:!0});var QKr=s(pP);$to=r(QKr,"CamembertTokenizerFast"),QKr.forEach(t),kto=r(B$," (CamemBERT model)"),B$.forEach(t),Sto=i(S),Qg=n(S,"LI",{});var Fwe=s(Qg);lne=n(Fwe,"STRONG",{});var HKr=s(lne);Rto=r(HKr,"canine"),HKr.forEach(t),Pto=r(Fwe," \u2014 "),uP=n(Fwe,"A",{href:!0});var UKr=s(uP);Bto=r(UKr,"CanineTokenizer"),UKr.forEach(t),Ito=r(Fwe," (CANINE model)"),Fwe.forEach(t),Nto=i(S),zn=n(S,"LI",{});var I$=s(zn);ine=n(I$,"STRONG",{});var JKr=s(ine);qto=r(JKr,"clip"),JKr.forEach(t),jto=r(I$," \u2014 "),_P=n(I$,"A",{href:!0});var YKr=s(_P);Dto=r(YKr,"CLIPTokenizer"),YKr.forEach(t),Gto=r(I$," or "),bP=n(I$,"A",{href:!0});var KKr=s(bP);Oto=r(KKr,"CLIPTokenizerFast"),KKr.forEach(t),Vto=r(I$," (CLIP model)"),I$.forEach(t),Xto=i(S),Wn=n(S,"LI",{});var N$=s(Wn);dne=n(N$,"STRONG",{});var ZKr=s(dne);zto=r(ZKr,"convbert"),ZKr.forEach(t),Wto=r(N$," \u2014 "),vP=n(N$,"A",{href:!0});var eZr=s(vP);Qto=r(eZr,"ConvBertTokenizer"),eZr.forEach(t),Hto=r(N$," or "),FP=n(N$,"A",{href:!0});var oZr=s(FP);Uto=r(oZr,"ConvBertTokenizerFast"),oZr.forEach(t),Jto=r(N$," (ConvBERT model)"),N$.forEach(t),Yto=i(S),Qn=n(S,"LI",{});var q$=s(Qn);cne=n(q$,"STRONG",{});var rZr=s(cne);Kto=r(rZr,"cpm"),rZr.forEach(t),Zto=r(q$," \u2014 "),TP=n(q$,"A",{href:!0});var tZr=s(TP);eao=r(tZr,"CpmTokenizer"),tZr.forEach(t),oao=r(q$," or "),MP=n(q$,"A",{href:!0});var aZr=s(MP);rao=r(aZr,"CpmTokenizerFast"),aZr.forEach(t),tao=r(q$," (CPM model)"),q$.forEach(t),aao=i(S),Hg=n(S,"LI",{});var Twe=s(Hg);fne=n(Twe,"STRONG",{});var nZr=s(fne);nao=r(nZr,"ctrl"),nZr.forEach(t),sao=r(Twe," \u2014 "),EP=n(Twe,"A",{href:!0});var sZr=s(EP);lao=r(sZr,"CTRLTokenizer"),sZr.forEach(t),iao=r(Twe," (CTRL model)"),Twe.forEach(t),dao=i(S),Hn=n(S,"LI",{});var j$=s(Hn);mne=n(j$,"STRONG",{});var lZr=s(mne);cao=r(lZr,"data2vec-text"),lZr.forEach(t),fao=r(j$," \u2014 "),CP=n(j$,"A",{href:!0});var iZr=s(CP);mao=r(iZr,"RobertaTokenizer"),iZr.forEach(t),gao=r(j$," or "),wP=n(j$,"A",{href:!0});var dZr=s(wP);hao=r(dZr,"RobertaTokenizerFast"),dZr.forEach(t),pao=r(j$," (Data2VecText model)"),j$.forEach(t),uao=i(S),Un=n(S,"LI",{});var D$=s(Un);gne=n(D$,"STRONG",{});var cZr=s(gne);_ao=r(cZr,"deberta"),cZr.forEach(t),bao=r(D$," \u2014 "),AP=n(D$,"A",{href:!0});var fZr=s(AP);vao=r(fZr,"DebertaTokenizer"),fZr.forEach(t),Fao=r(D$," or "),yP=n(D$,"A",{href:!0});var mZr=s(yP);Tao=r(mZr,"DebertaTokenizerFast"),mZr.forEach(t),Mao=r(D$," (DeBERTa model)"),D$.forEach(t),Eao=i(S),Jn=n(S,"LI",{});var G$=s(Jn);hne=n(G$,"STRONG",{});var gZr=s(hne);Cao=r(gZr,"deberta-v2"),gZr.forEach(t),wao=r(G$," \u2014 "),LP=n(G$,"A",{href:!0});var hZr=s(LP);Aao=r(hZr,"DebertaV2Tokenizer"),hZr.forEach(t),yao=r(G$," or "),xP=n(G$,"A",{href:!0});var pZr=s(xP);Lao=r(pZr,"DebertaV2TokenizerFast"),pZr.forEach(t),xao=r(G$," (DeBERTa-v2 model)"),G$.forEach(t),$ao=i(S),Yn=n(S,"LI",{});var O$=s(Yn);pne=n(O$,"STRONG",{});var uZr=s(pne);kao=r(uZr,"distilbert"),uZr.forEach(t),Sao=r(O$," \u2014 "),$P=n(O$,"A",{href:!0});var _Zr=s($P);Rao=r(_Zr,"DistilBertTokenizer"),_Zr.forEach(t),Pao=r(O$," or "),kP=n(O$,"A",{href:!0});var bZr=s(kP);Bao=r(bZr,"DistilBertTokenizerFast"),bZr.forEach(t),Iao=r(O$," (DistilBERT model)"),O$.forEach(t),Nao=i(S),Kn=n(S,"LI",{});var V$=s(Kn);une=n(V$,"STRONG",{});var vZr=s(une);qao=r(vZr,"dpr"),vZr.forEach(t),jao=r(V$," \u2014 "),SP=n(V$,"A",{href:!0});var FZr=s(SP);Dao=r(FZr,"DPRQuestionEncoderTokenizer"),FZr.forEach(t),Gao=r(V$," or "),RP=n(V$,"A",{href:!0});var TZr=s(RP);Oao=r(TZr,"DPRQuestionEncoderTokenizerFast"),TZr.forEach(t),Vao=r(V$," (DPR model)"),V$.forEach(t),Xao=i(S),Zn=n(S,"LI",{});var X$=s(Zn);_ne=n(X$,"STRONG",{});var MZr=s(_ne);zao=r(MZr,"electra"),MZr.forEach(t),Wao=r(X$," \u2014 "),PP=n(X$,"A",{href:!0});var EZr=s(PP);Qao=r(EZr,"ElectraTokenizer"),EZr.forEach(t),Hao=r(X$," or "),BP=n(X$,"A",{href:!0});var CZr=s(BP);Uao=r(CZr,"ElectraTokenizerFast"),CZr.forEach(t),Jao=r(X$," (ELECTRA model)"),X$.forEach(t),Yao=i(S),Ug=n(S,"LI",{});var Mwe=s(Ug);bne=n(Mwe,"STRONG",{});var wZr=s(bne);Kao=r(wZr,"flaubert"),wZr.forEach(t),Zao=r(Mwe," \u2014 "),IP=n(Mwe,"A",{href:!0});var AZr=s(IP);eno=r(AZr,"FlaubertTokenizer"),AZr.forEach(t),ono=r(Mwe," (FlauBERT model)"),Mwe.forEach(t),rno=i(S),es=n(S,"LI",{});var z$=s(es);vne=n(z$,"STRONG",{});var yZr=s(vne);tno=r(yZr,"fnet"),yZr.forEach(t),ano=r(z$," \u2014 "),NP=n(z$,"A",{href:!0});var LZr=s(NP);nno=r(LZr,"FNetTokenizer"),LZr.forEach(t),sno=r(z$," or "),qP=n(z$,"A",{href:!0});var xZr=s(qP);lno=r(xZr,"FNetTokenizerFast"),xZr.forEach(t),ino=r(z$," (FNet model)"),z$.forEach(t),dno=i(S),Jg=n(S,"LI",{});var Ewe=s(Jg);Fne=n(Ewe,"STRONG",{});var $Zr=s(Fne);cno=r($Zr,"fsmt"),$Zr.forEach(t),fno=r(Ewe," \u2014 "),jP=n(Ewe,"A",{href:!0});var kZr=s(jP);mno=r(kZr,"FSMTTokenizer"),kZr.forEach(t),gno=r(Ewe," (FairSeq Machine-Translation model)"),Ewe.forEach(t),hno=i(S),os=n(S,"LI",{});var W$=s(os);Tne=n(W$,"STRONG",{});var SZr=s(Tne);pno=r(SZr,"funnel"),SZr.forEach(t),uno=r(W$," \u2014 "),DP=n(W$,"A",{href:!0});var RZr=s(DP);_no=r(RZr,"FunnelTokenizer"),RZr.forEach(t),bno=r(W$," or "),GP=n(W$,"A",{href:!0});var PZr=s(GP);vno=r(PZr,"FunnelTokenizerFast"),PZr.forEach(t),Fno=r(W$," (Funnel Transformer model)"),W$.forEach(t),Tno=i(S),rs=n(S,"LI",{});var Q$=s(rs);Mne=n(Q$,"STRONG",{});var BZr=s(Mne);Mno=r(BZr,"gpt2"),BZr.forEach(t),Eno=r(Q$," \u2014 "),OP=n(Q$,"A",{href:!0});var IZr=s(OP);Cno=r(IZr,"GPT2Tokenizer"),IZr.forEach(t),wno=r(Q$," or "),VP=n(Q$,"A",{href:!0});var NZr=s(VP);Ano=r(NZr,"GPT2TokenizerFast"),NZr.forEach(t),yno=r(Q$," (OpenAI GPT-2 model)"),Q$.forEach(t),Lno=i(S),ts=n(S,"LI",{});var H$=s(ts);Ene=n(H$,"STRONG",{});var qZr=s(Ene);xno=r(qZr,"gpt_neo"),qZr.forEach(t),$no=r(H$," \u2014 "),XP=n(H$,"A",{href:!0});var jZr=s(XP);kno=r(jZr,"GPT2Tokenizer"),jZr.forEach(t),Sno=r(H$," or "),zP=n(H$,"A",{href:!0});var DZr=s(zP);Rno=r(DZr,"GPT2TokenizerFast"),DZr.forEach(t),Pno=r(H$," (GPT Neo model)"),H$.forEach(t),Bno=i(S),Yg=n(S,"LI",{});var Cwe=s(Yg);Cne=n(Cwe,"STRONG",{});var GZr=s(Cne);Ino=r(GZr,"gpt_neox"),GZr.forEach(t),Nno=r(Cwe," \u2014 "),WP=n(Cwe,"A",{href:!0});var OZr=s(WP);qno=r(OZr,"GPTNeoXTokenizerFast"),OZr.forEach(t),jno=r(Cwe," (GPT NeoX model)"),Cwe.forEach(t),Dno=i(S),as=n(S,"LI",{});var U$=s(as);wne=n(U$,"STRONG",{});var VZr=s(wne);Gno=r(VZr,"gptj"),VZr.forEach(t),Ono=r(U$," \u2014 "),QP=n(U$,"A",{href:!0});var XZr=s(QP);Vno=r(XZr,"GPT2Tokenizer"),XZr.forEach(t),Xno=r(U$," or "),HP=n(U$,"A",{href:!0});var zZr=s(HP);zno=r(zZr,"GPT2TokenizerFast"),zZr.forEach(t),Wno=r(U$," (GPT-J model)"),U$.forEach(t),Qno=i(S),ns=n(S,"LI",{});var J$=s(ns);Ane=n(J$,"STRONG",{});var WZr=s(Ane);Hno=r(WZr,"herbert"),WZr.forEach(t),Uno=r(J$," \u2014 "),UP=n(J$,"A",{href:!0});var QZr=s(UP);Jno=r(QZr,"HerbertTokenizer"),QZr.forEach(t),Yno=r(J$," or "),JP=n(J$,"A",{href:!0});var HZr=s(JP);Kno=r(HZr,"HerbertTokenizerFast"),HZr.forEach(t),Zno=r(J$," (HerBERT model)"),J$.forEach(t),eso=i(S),Kg=n(S,"LI",{});var wwe=s(Kg);yne=n(wwe,"STRONG",{});var UZr=s(yne);oso=r(UZr,"hubert"),UZr.forEach(t),rso=r(wwe," \u2014 "),YP=n(wwe,"A",{href:!0});var JZr=s(YP);tso=r(JZr,"Wav2Vec2CTCTokenizer"),JZr.forEach(t),aso=r(wwe," (Hubert model)"),wwe.forEach(t),nso=i(S),ss=n(S,"LI",{});var Y$=s(ss);Lne=n(Y$,"STRONG",{});var YZr=s(Lne);sso=r(YZr,"ibert"),YZr.forEach(t),lso=r(Y$," \u2014 "),KP=n(Y$,"A",{href:!0});var KZr=s(KP);iso=r(KZr,"RobertaTokenizer"),KZr.forEach(t),dso=r(Y$," or "),ZP=n(Y$,"A",{href:!0});var ZZr=s(ZP);cso=r(ZZr,"RobertaTokenizerFast"),ZZr.forEach(t),fso=r(Y$," (I-BERT model)"),Y$.forEach(t),mso=i(S),ls=n(S,"LI",{});var K$=s(ls);xne=n(K$,"STRONG",{});var eet=s(xne);gso=r(eet,"layoutlm"),eet.forEach(t),hso=r(K$," \u2014 "),eB=n(K$,"A",{href:!0});var oet=s(eB);pso=r(oet,"LayoutLMTokenizer"),oet.forEach(t),uso=r(K$," or "),oB=n(K$,"A",{href:!0});var ret=s(oB);_so=r(ret,"LayoutLMTokenizerFast"),ret.forEach(t),bso=r(K$," (LayoutLM model)"),K$.forEach(t),vso=i(S),is=n(S,"LI",{});var Z$=s(is);$ne=n(Z$,"STRONG",{});var tet=s($ne);Fso=r(tet,"layoutlmv2"),tet.forEach(t),Tso=r(Z$," \u2014 "),rB=n(Z$,"A",{href:!0});var aet=s(rB);Mso=r(aet,"LayoutLMv2Tokenizer"),aet.forEach(t),Eso=r(Z$," or "),tB=n(Z$,"A",{href:!0});var net=s(tB);Cso=r(net,"LayoutLMv2TokenizerFast"),net.forEach(t),wso=r(Z$," (LayoutLMv2 model)"),Z$.forEach(t),Aso=i(S),ds=n(S,"LI",{});var ek=s(ds);kne=n(ek,"STRONG",{});var set=s(kne);yso=r(set,"layoutlmv3"),set.forEach(t),Lso=r(ek," \u2014 "),aB=n(ek,"A",{href:!0});var iet=s(aB);xso=r(iet,"LayoutLMv3Tokenizer"),iet.forEach(t),$so=r(ek," or "),nB=n(ek,"A",{href:!0});var det=s(nB);kso=r(det,"LayoutLMv3TokenizerFast"),det.forEach(t),Sso=r(ek," (LayoutLMv3 model)"),ek.forEach(t),Rso=i(S),cs=n(S,"LI",{});var ok=s(cs);Sne=n(ok,"STRONG",{});var cet=s(Sne);Pso=r(cet,"layoutxlm"),cet.forEach(t),Bso=r(ok," \u2014 "),sB=n(ok,"A",{href:!0});var fet=s(sB);Iso=r(fet,"LayoutXLMTokenizer"),fet.forEach(t),Nso=r(ok," or "),lB=n(ok,"A",{href:!0});var met=s(lB);qso=r(met,"LayoutXLMTokenizerFast"),met.forEach(t),jso=r(ok," (LayoutXLM model)"),ok.forEach(t),Dso=i(S),fs=n(S,"LI",{});var rk=s(fs);Rne=n(rk,"STRONG",{});var get=s(Rne);Gso=r(get,"led"),get.forEach(t),Oso=r(rk," \u2014 "),iB=n(rk,"A",{href:!0});var het=s(iB);Vso=r(het,"LEDTokenizer"),het.forEach(t),Xso=r(rk," or "),dB=n(rk,"A",{href:!0});var pet=s(dB);zso=r(pet,"LEDTokenizerFast"),pet.forEach(t),Wso=r(rk," (LED model)"),rk.forEach(t),Qso=i(S),ms=n(S,"LI",{});var tk=s(ms);Pne=n(tk,"STRONG",{});var uet=s(Pne);Hso=r(uet,"longformer"),uet.forEach(t),Uso=r(tk," \u2014 "),cB=n(tk,"A",{href:!0});var _et=s(cB);Jso=r(_et,"LongformerTokenizer"),_et.forEach(t),Yso=r(tk," or "),fB=n(tk,"A",{href:!0});var bet=s(fB);Kso=r(bet,"LongformerTokenizerFast"),bet.forEach(t),Zso=r(tk," (Longformer model)"),tk.forEach(t),elo=i(S),Zg=n(S,"LI",{});var Awe=s(Zg);Bne=n(Awe,"STRONG",{});var vet=s(Bne);olo=r(vet,"luke"),vet.forEach(t),rlo=r(Awe," \u2014 "),mB=n(Awe,"A",{href:!0});var Fet=s(mB);tlo=r(Fet,"LukeTokenizer"),Fet.forEach(t),alo=r(Awe," (LUKE model)"),Awe.forEach(t),nlo=i(S),gs=n(S,"LI",{});var ak=s(gs);Ine=n(ak,"STRONG",{});var Tet=s(Ine);slo=r(Tet,"lxmert"),Tet.forEach(t),llo=r(ak," \u2014 "),gB=n(ak,"A",{href:!0});var Met=s(gB);ilo=r(Met,"LxmertTokenizer"),Met.forEach(t),dlo=r(ak," or "),hB=n(ak,"A",{href:!0});var Eet=s(hB);clo=r(Eet,"LxmertTokenizerFast"),Eet.forEach(t),flo=r(ak," (LXMERT model)"),ak.forEach(t),mlo=i(S),eh=n(S,"LI",{});var ywe=s(eh);Nne=n(ywe,"STRONG",{});var Cet=s(Nne);glo=r(Cet,"m2m_100"),Cet.forEach(t),hlo=r(ywe," \u2014 "),pB=n(ywe,"A",{href:!0});var wet=s(pB);plo=r(wet,"M2M100Tokenizer"),wet.forEach(t),ulo=r(ywe," (M2M100 model)"),ywe.forEach(t),_lo=i(S),oh=n(S,"LI",{});var Lwe=s(oh);qne=n(Lwe,"STRONG",{});var Aet=s(qne);blo=r(Aet,"marian"),Aet.forEach(t),vlo=r(Lwe," \u2014 "),uB=n(Lwe,"A",{href:!0});var yet=s(uB);Flo=r(yet,"MarianTokenizer"),yet.forEach(t),Tlo=r(Lwe," (Marian model)"),Lwe.forEach(t),Mlo=i(S),hs=n(S,"LI",{});var nk=s(hs);jne=n(nk,"STRONG",{});var Let=s(jne);Elo=r(Let,"mbart"),Let.forEach(t),Clo=r(nk," \u2014 "),_B=n(nk,"A",{href:!0});var xet=s(_B);wlo=r(xet,"MBartTokenizer"),xet.forEach(t),Alo=r(nk," or "),bB=n(nk,"A",{href:!0});var $et=s(bB);ylo=r($et,"MBartTokenizerFast"),$et.forEach(t),Llo=r(nk," (mBART model)"),nk.forEach(t),xlo=i(S),ps=n(S,"LI",{});var sk=s(ps);Dne=n(sk,"STRONG",{});var ket=s(Dne);$lo=r(ket,"mbart50"),ket.forEach(t),klo=r(sk," \u2014 "),vB=n(sk,"A",{href:!0});var Set=s(vB);Slo=r(Set,"MBart50Tokenizer"),Set.forEach(t),Rlo=r(sk," or "),FB=n(sk,"A",{href:!0});var Ret=s(FB);Plo=r(Ret,"MBart50TokenizerFast"),Ret.forEach(t),Blo=r(sk," (mBART-50 model)"),sk.forEach(t),Ilo=i(S),us=n(S,"LI",{});var lk=s(us);Gne=n(lk,"STRONG",{});var Pet=s(Gne);Nlo=r(Pet,"megatron-bert"),Pet.forEach(t),qlo=r(lk," \u2014 "),TB=n(lk,"A",{href:!0});var Bet=s(TB);jlo=r(Bet,"BertTokenizer"),Bet.forEach(t),Dlo=r(lk," or "),MB=n(lk,"A",{href:!0});var Iet=s(MB);Glo=r(Iet,"BertTokenizerFast"),Iet.forEach(t),Olo=r(lk," (Megatron-BERT model)"),lk.forEach(t),Vlo=i(S),rh=n(S,"LI",{});var xwe=s(rh);One=n(xwe,"STRONG",{});var Net=s(One);Xlo=r(Net,"mluke"),Net.forEach(t),zlo=r(xwe," \u2014 "),EB=n(xwe,"A",{href:!0});var qet=s(EB);Wlo=r(qet,"MLukeTokenizer"),qet.forEach(t),Qlo=r(xwe," (mLUKE model)"),xwe.forEach(t),Hlo=i(S),_s=n(S,"LI",{});var ik=s(_s);Vne=n(ik,"STRONG",{});var jet=s(Vne);Ulo=r(jet,"mobilebert"),jet.forEach(t),Jlo=r(ik," \u2014 "),CB=n(ik,"A",{href:!0});var Det=s(CB);Ylo=r(Det,"MobileBertTokenizer"),Det.forEach(t),Klo=r(ik," or "),wB=n(ik,"A",{href:!0});var Get=s(wB);Zlo=r(Get,"MobileBertTokenizerFast"),Get.forEach(t),eio=r(ik," (MobileBERT model)"),ik.forEach(t),oio=i(S),bs=n(S,"LI",{});var dk=s(bs);Xne=n(dk,"STRONG",{});var Oet=s(Xne);rio=r(Oet,"mpnet"),Oet.forEach(t),tio=r(dk," \u2014 "),AB=n(dk,"A",{href:!0});var Vet=s(AB);aio=r(Vet,"MPNetTokenizer"),Vet.forEach(t),nio=r(dk," or "),yB=n(dk,"A",{href:!0});var Xet=s(yB);sio=r(Xet,"MPNetTokenizerFast"),Xet.forEach(t),lio=r(dk," (MPNet model)"),dk.forEach(t),iio=i(S),vs=n(S,"LI",{});var ck=s(vs);zne=n(ck,"STRONG",{});var zet=s(zne);dio=r(zet,"mt5"),zet.forEach(t),cio=r(ck," \u2014 "),LB=n(ck,"A",{href:!0});var Wet=s(LB);fio=r(Wet,"MT5Tokenizer"),Wet.forEach(t),mio=r(ck," or "),xB=n(ck,"A",{href:!0});var Qet=s(xB);gio=r(Qet,"MT5TokenizerFast"),Qet.forEach(t),hio=r(ck," (MT5 model)"),ck.forEach(t),pio=i(S),Fs=n(S,"LI",{});var fk=s(Fs);Wne=n(fk,"STRONG",{});var Het=s(Wne);uio=r(Het,"nystromformer"),Het.forEach(t),_io=r(fk," \u2014 "),$B=n(fk,"A",{href:!0});var Uet=s($B);bio=r(Uet,"AlbertTokenizer"),Uet.forEach(t),vio=r(fk," or "),kB=n(fk,"A",{href:!0});var Jet=s(kB);Fio=r(Jet,"AlbertTokenizerFast"),Jet.forEach(t),Tio=r(fk," (Nystr\xF6mformer model)"),fk.forEach(t),Mio=i(S),Ts=n(S,"LI",{});var mk=s(Ts);Qne=n(mk,"STRONG",{});var Yet=s(Qne);Eio=r(Yet,"openai-gpt"),Yet.forEach(t),Cio=r(mk," \u2014 "),SB=n(mk,"A",{href:!0});var Ket=s(SB);wio=r(Ket,"OpenAIGPTTokenizer"),Ket.forEach(t),Aio=r(mk," or "),RB=n(mk,"A",{href:!0});var Zet=s(RB);yio=r(Zet,"OpenAIGPTTokenizerFast"),Zet.forEach(t),Lio=r(mk," (OpenAI GPT model)"),mk.forEach(t),xio=i(S),th=n(S,"LI",{});var $we=s(th);Hne=n($we,"STRONG",{});var eot=s(Hne);$io=r(eot,"opt"),eot.forEach(t),kio=r($we," \u2014 "),PB=n($we,"A",{href:!0});var oot=s(PB);Sio=r(oot,"GPT2Tokenizer"),oot.forEach(t),Rio=r($we," (OPT model)"),$we.forEach(t),Pio=i(S),Ms=n(S,"LI",{});var gk=s(Ms);Une=n(gk,"STRONG",{});var rot=s(Une);Bio=r(rot,"pegasus"),rot.forEach(t),Iio=r(gk," \u2014 "),BB=n(gk,"A",{href:!0});var tot=s(BB);Nio=r(tot,"PegasusTokenizer"),tot.forEach(t),qio=r(gk," or "),IB=n(gk,"A",{href:!0});var aot=s(IB);jio=r(aot,"PegasusTokenizerFast"),aot.forEach(t),Dio=r(gk," (Pegasus model)"),gk.forEach(t),Gio=i(S),ah=n(S,"LI",{});var kwe=s(ah);Jne=n(kwe,"STRONG",{});var not=s(Jne);Oio=r(not,"perceiver"),not.forEach(t),Vio=r(kwe," \u2014 "),NB=n(kwe,"A",{href:!0});var sot=s(NB);Xio=r(sot,"PerceiverTokenizer"),sot.forEach(t),zio=r(kwe," (Perceiver model)"),kwe.forEach(t),Wio=i(S),nh=n(S,"LI",{});var Swe=s(nh);Yne=n(Swe,"STRONG",{});var lot=s(Yne);Qio=r(lot,"phobert"),lot.forEach(t),Hio=r(Swe," \u2014 "),qB=n(Swe,"A",{href:!0});var iot=s(qB);Uio=r(iot,"PhobertTokenizer"),iot.forEach(t),Jio=r(Swe," (PhoBERT model)"),Swe.forEach(t),Yio=i(S),sh=n(S,"LI",{});var Rwe=s(sh);Kne=n(Rwe,"STRONG",{});var dot=s(Kne);Kio=r(dot,"plbart"),dot.forEach(t),Zio=r(Rwe," \u2014 "),jB=n(Rwe,"A",{href:!0});var cot=s(jB);edo=r(cot,"PLBartTokenizer"),cot.forEach(t),odo=r(Rwe," (PLBart model)"),Rwe.forEach(t),rdo=i(S),lh=n(S,"LI",{});var Pwe=s(lh);Zne=n(Pwe,"STRONG",{});var fot=s(Zne);tdo=r(fot,"prophetnet"),fot.forEach(t),ado=r(Pwe," \u2014 "),DB=n(Pwe,"A",{href:!0});var mot=s(DB);ndo=r(mot,"ProphetNetTokenizer"),mot.forEach(t),sdo=r(Pwe," (ProphetNet model)"),Pwe.forEach(t),ldo=i(S),Es=n(S,"LI",{});var hk=s(Es);ese=n(hk,"STRONG",{});var got=s(ese);ido=r(got,"qdqbert"),got.forEach(t),ddo=r(hk," \u2014 "),GB=n(hk,"A",{href:!0});var hot=s(GB);cdo=r(hot,"BertTokenizer"),hot.forEach(t),fdo=r(hk," or "),OB=n(hk,"A",{href:!0});var pot=s(OB);mdo=r(pot,"BertTokenizerFast"),pot.forEach(t),gdo=r(hk," (QDQBert model)"),hk.forEach(t),hdo=i(S),ih=n(S,"LI",{});var Bwe=s(ih);ose=n(Bwe,"STRONG",{});var uot=s(ose);pdo=r(uot,"rag"),uot.forEach(t),udo=r(Bwe," \u2014 "),VB=n(Bwe,"A",{href:!0});var _ot=s(VB);_do=r(_ot,"RagTokenizer"),_ot.forEach(t),bdo=r(Bwe," (RAG model)"),Bwe.forEach(t),vdo=i(S),Cs=n(S,"LI",{});var pk=s(Cs);rse=n(pk,"STRONG",{});var bot=s(rse);Fdo=r(bot,"realm"),bot.forEach(t),Tdo=r(pk," \u2014 "),XB=n(pk,"A",{href:!0});var vot=s(XB);Mdo=r(vot,"RealmTokenizer"),vot.forEach(t),Edo=r(pk," or "),zB=n(pk,"A",{href:!0});var Fot=s(zB);Cdo=r(Fot,"RealmTokenizerFast"),Fot.forEach(t),wdo=r(pk," (REALM model)"),pk.forEach(t),Ado=i(S),ws=n(S,"LI",{});var uk=s(ws);tse=n(uk,"STRONG",{});var Tot=s(tse);ydo=r(Tot,"reformer"),Tot.forEach(t),Ldo=r(uk," \u2014 "),WB=n(uk,"A",{href:!0});var Mot=s(WB);xdo=r(Mot,"ReformerTokenizer"),Mot.forEach(t),$do=r(uk," or "),QB=n(uk,"A",{href:!0});var Eot=s(QB);kdo=r(Eot,"ReformerTokenizerFast"),Eot.forEach(t),Sdo=r(uk," (Reformer model)"),uk.forEach(t),Rdo=i(S),As=n(S,"LI",{});var _k=s(As);ase=n(_k,"STRONG",{});var Cot=s(ase);Pdo=r(Cot,"rembert"),Cot.forEach(t),Bdo=r(_k," \u2014 "),HB=n(_k,"A",{href:!0});var wot=s(HB);Ido=r(wot,"RemBertTokenizer"),wot.forEach(t),Ndo=r(_k," or "),UB=n(_k,"A",{href:!0});var Aot=s(UB);qdo=r(Aot,"RemBertTokenizerFast"),Aot.forEach(t),jdo=r(_k," (RemBERT model)"),_k.forEach(t),Ddo=i(S),ys=n(S,"LI",{});var bk=s(ys);nse=n(bk,"STRONG",{});var yot=s(nse);Gdo=r(yot,"retribert"),yot.forEach(t),Odo=r(bk," \u2014 "),JB=n(bk,"A",{href:!0});var Lot=s(JB);Vdo=r(Lot,"RetriBertTokenizer"),Lot.forEach(t),Xdo=r(bk," or "),YB=n(bk,"A",{href:!0});var xot=s(YB);zdo=r(xot,"RetriBertTokenizerFast"),xot.forEach(t),Wdo=r(bk," (RetriBERT model)"),bk.forEach(t),Qdo=i(S),Ls=n(S,"LI",{});var vk=s(Ls);sse=n(vk,"STRONG",{});var $ot=s(sse);Hdo=r($ot,"roberta"),$ot.forEach(t),Udo=r(vk," \u2014 "),KB=n(vk,"A",{href:!0});var kot=s(KB);Jdo=r(kot,"RobertaTokenizer"),kot.forEach(t),Ydo=r(vk," or "),ZB=n(vk,"A",{href:!0});var Sot=s(ZB);Kdo=r(Sot,"RobertaTokenizerFast"),Sot.forEach(t),Zdo=r(vk," (RoBERTa model)"),vk.forEach(t),eco=i(S),xs=n(S,"LI",{});var Fk=s(xs);lse=n(Fk,"STRONG",{});var Rot=s(lse);oco=r(Rot,"roformer"),Rot.forEach(t),rco=r(Fk," \u2014 "),eI=n(Fk,"A",{href:!0});var Pot=s(eI);tco=r(Pot,"RoFormerTokenizer"),Pot.forEach(t),aco=r(Fk," or "),oI=n(Fk,"A",{href:!0});var Bot=s(oI);nco=r(Bot,"RoFormerTokenizerFast"),Bot.forEach(t),sco=r(Fk," (RoFormer model)"),Fk.forEach(t),lco=i(S),dh=n(S,"LI",{});var Iwe=s(dh);ise=n(Iwe,"STRONG",{});var Iot=s(ise);ico=r(Iot,"speech_to_text"),Iot.forEach(t),dco=r(Iwe," \u2014 "),rI=n(Iwe,"A",{href:!0});var Not=s(rI);cco=r(Not,"Speech2TextTokenizer"),Not.forEach(t),fco=r(Iwe," (Speech2Text model)"),Iwe.forEach(t),mco=i(S),ch=n(S,"LI",{});var Nwe=s(ch);dse=n(Nwe,"STRONG",{});var qot=s(dse);gco=r(qot,"speech_to_text_2"),qot.forEach(t),hco=r(Nwe," \u2014 "),tI=n(Nwe,"A",{href:!0});var jot=s(tI);pco=r(jot,"Speech2Text2Tokenizer"),jot.forEach(t),uco=r(Nwe," (Speech2Text2 model)"),Nwe.forEach(t),_co=i(S),$s=n(S,"LI",{});var Tk=s($s);cse=n(Tk,"STRONG",{});var Dot=s(cse);bco=r(Dot,"splinter"),Dot.forEach(t),vco=r(Tk," \u2014 "),aI=n(Tk,"A",{href:!0});var Got=s(aI);Fco=r(Got,"SplinterTokenizer"),Got.forEach(t),Tco=r(Tk," or "),nI=n(Tk,"A",{href:!0});var Oot=s(nI);Mco=r(Oot,"SplinterTokenizerFast"),Oot.forEach(t),Eco=r(Tk," (Splinter model)"),Tk.forEach(t),Cco=i(S),ks=n(S,"LI",{});var Mk=s(ks);fse=n(Mk,"STRONG",{});var Vot=s(fse);wco=r(Vot,"squeezebert"),Vot.forEach(t),Aco=r(Mk," \u2014 "),sI=n(Mk,"A",{href:!0});var Xot=s(sI);yco=r(Xot,"SqueezeBertTokenizer"),Xot.forEach(t),Lco=r(Mk," or "),lI=n(Mk,"A",{href:!0});var zot=s(lI);xco=r(zot,"SqueezeBertTokenizerFast"),zot.forEach(t),$co=r(Mk," (SqueezeBERT model)"),Mk.forEach(t),kco=i(S),Ss=n(S,"LI",{});var Ek=s(Ss);mse=n(Ek,"STRONG",{});var Wot=s(mse);Sco=r(Wot,"t5"),Wot.forEach(t),Rco=r(Ek," \u2014 "),iI=n(Ek,"A",{href:!0});var Qot=s(iI);Pco=r(Qot,"T5Tokenizer"),Qot.forEach(t),Bco=r(Ek," or "),dI=n(Ek,"A",{href:!0});var Hot=s(dI);Ico=r(Hot,"T5TokenizerFast"),Hot.forEach(t),Nco=r(Ek," (T5 model)"),Ek.forEach(t),qco=i(S),fh=n(S,"LI",{});var qwe=s(fh);gse=n(qwe,"STRONG",{});var Uot=s(gse);jco=r(Uot,"tapas"),Uot.forEach(t),Dco=r(qwe," \u2014 "),cI=n(qwe,"A",{href:!0});var Jot=s(cI);Gco=r(Jot,"TapasTokenizer"),Jot.forEach(t),Oco=r(qwe," (TAPAS model)"),qwe.forEach(t),Vco=i(S),mh=n(S,"LI",{});var jwe=s(mh);hse=n(jwe,"STRONG",{});var Yot=s(hse);Xco=r(Yot,"tapex"),Yot.forEach(t),zco=r(jwe," \u2014 "),fI=n(jwe,"A",{href:!0});var Kot=s(fI);Wco=r(Kot,"TapexTokenizer"),Kot.forEach(t),Qco=r(jwe," (TAPEX model)"),jwe.forEach(t),Hco=i(S),gh=n(S,"LI",{});var Dwe=s(gh);pse=n(Dwe,"STRONG",{});var Zot=s(pse);Uco=r(Zot,"transfo-xl"),Zot.forEach(t),Jco=r(Dwe," \u2014 "),mI=n(Dwe,"A",{href:!0});var ert=s(mI);Yco=r(ert,"TransfoXLTokenizer"),ert.forEach(t),Kco=r(Dwe," (Transformer-XL model)"),Dwe.forEach(t),Zco=i(S),Rs=n(S,"LI",{});var Ck=s(Rs);use=n(Ck,"STRONG",{});var ort=s(use);efo=r(ort,"vilt"),ort.forEach(t),ofo=r(Ck," \u2014 "),gI=n(Ck,"A",{href:!0});var rrt=s(gI);rfo=r(rrt,"BertTokenizer"),rrt.forEach(t),tfo=r(Ck," or "),hI=n(Ck,"A",{href:!0});var trt=s(hI);afo=r(trt,"BertTokenizerFast"),trt.forEach(t),nfo=r(Ck," (ViLT model)"),Ck.forEach(t),sfo=i(S),Ps=n(S,"LI",{});var wk=s(Ps);_se=n(wk,"STRONG",{});var art=s(_se);lfo=r(art,"visual_bert"),art.forEach(t),ifo=r(wk," \u2014 "),pI=n(wk,"A",{href:!0});var nrt=s(pI);dfo=r(nrt,"BertTokenizer"),nrt.forEach(t),cfo=r(wk," or "),uI=n(wk,"A",{href:!0});var srt=s(uI);ffo=r(srt,"BertTokenizerFast"),srt.forEach(t),mfo=r(wk," (VisualBERT model)"),wk.forEach(t),gfo=i(S),hh=n(S,"LI",{});var Gwe=s(hh);bse=n(Gwe,"STRONG",{});var lrt=s(bse);hfo=r(lrt,"wav2vec2"),lrt.forEach(t),pfo=r(Gwe," \u2014 "),_I=n(Gwe,"A",{href:!0});var irt=s(_I);ufo=r(irt,"Wav2Vec2CTCTokenizer"),irt.forEach(t),_fo=r(Gwe," (Wav2Vec2 model)"),Gwe.forEach(t),bfo=i(S),ph=n(S,"LI",{});var Owe=s(ph);vse=n(Owe,"STRONG",{});var drt=s(vse);vfo=r(drt,"wav2vec2-conformer"),drt.forEach(t),Ffo=r(Owe," \u2014 "),bI=n(Owe,"A",{href:!0});var crt=s(bI);Tfo=r(crt,"Wav2Vec2CTCTokenizer"),crt.forEach(t),Mfo=r(Owe," (Wav2Vec2-Conformer model)"),Owe.forEach(t),Efo=i(S),uh=n(S,"LI",{});var Vwe=s(uh);Fse=n(Vwe,"STRONG",{});var frt=s(Fse);Cfo=r(frt,"wav2vec2_phoneme"),frt.forEach(t),wfo=r(Vwe," \u2014 "),vI=n(Vwe,"A",{href:!0});var mrt=s(vI);Afo=r(mrt,"Wav2Vec2PhonemeCTCTokenizer"),mrt.forEach(t),yfo=r(Vwe," (Wav2Vec2Phoneme model)"),Vwe.forEach(t),Lfo=i(S),Bs=n(S,"LI",{});var Ak=s(Bs);Tse=n(Ak,"STRONG",{});var grt=s(Tse);xfo=r(grt,"xglm"),grt.forEach(t),$fo=r(Ak," \u2014 "),FI=n(Ak,"A",{href:!0});var hrt=s(FI);kfo=r(hrt,"XGLMTokenizer"),hrt.forEach(t),Sfo=r(Ak," or "),TI=n(Ak,"A",{href:!0});var prt=s(TI);Rfo=r(prt,"XGLMTokenizerFast"),prt.forEach(t),Pfo=r(Ak," (XGLM model)"),Ak.forEach(t),Bfo=i(S),_h=n(S,"LI",{});var Xwe=s(_h);Mse=n(Xwe,"STRONG",{});var urt=s(Mse);Ifo=r(urt,"xlm"),urt.forEach(t),Nfo=r(Xwe," \u2014 "),MI=n(Xwe,"A",{href:!0});var _rt=s(MI);qfo=r(_rt,"XLMTokenizer"),_rt.forEach(t),jfo=r(Xwe," (XLM model)"),Xwe.forEach(t),Dfo=i(S),bh=n(S,"LI",{});var zwe=s(bh);Ese=n(zwe,"STRONG",{});var brt=s(Ese);Gfo=r(brt,"xlm-prophetnet"),brt.forEach(t),Ofo=r(zwe," \u2014 "),EI=n(zwe,"A",{href:!0});var vrt=s(EI);Vfo=r(vrt,"XLMProphetNetTokenizer"),vrt.forEach(t),Xfo=r(zwe," (XLM-ProphetNet model)"),zwe.forEach(t),zfo=i(S),Is=n(S,"LI",{});var yk=s(Is);Cse=n(yk,"STRONG",{});var Frt=s(Cse);Wfo=r(Frt,"xlm-roberta"),Frt.forEach(t),Qfo=r(yk," \u2014 "),CI=n(yk,"A",{href:!0});var Trt=s(CI);Hfo=r(Trt,"XLMRobertaTokenizer"),Trt.forEach(t),Ufo=r(yk," or "),wI=n(yk,"A",{href:!0});var Mrt=s(wI);Jfo=r(Mrt,"XLMRobertaTokenizerFast"),Mrt.forEach(t),Yfo=r(yk," (XLM-RoBERTa model)"),yk.forEach(t),Kfo=i(S),Ns=n(S,"LI",{});var Lk=s(Ns);wse=n(Lk,"STRONG",{});var Ert=s(wse);Zfo=r(Ert,"xlm-roberta-xl"),Ert.forEach(t),emo=r(Lk," \u2014 "),AI=n(Lk,"A",{href:!0});var Crt=s(AI);omo=r(Crt,"RobertaTokenizer"),Crt.forEach(t),rmo=r(Lk," or "),yI=n(Lk,"A",{href:!0});var wrt=s(yI);tmo=r(wrt,"RobertaTokenizerFast"),wrt.forEach(t),amo=r(Lk," (XLM-RoBERTa-XL model)"),Lk.forEach(t),nmo=i(S),qs=n(S,"LI",{});var xk=s(qs);Ase=n(xk,"STRONG",{});var Art=s(Ase);smo=r(Art,"xlnet"),Art.forEach(t),lmo=r(xk," \u2014 "),LI=n(xk,"A",{href:!0});var yrt=s(LI);imo=r(yrt,"XLNetTokenizer"),yrt.forEach(t),dmo=r(xk," or "),xI=n(xk,"A",{href:!0});var Lrt=s(xI);cmo=r(Lrt,"XLNetTokenizerFast"),Lrt.forEach(t),fmo=r(xk," (XLNet model)"),xk.forEach(t),mmo=i(S),js=n(S,"LI",{});var $k=s(js);yse=n($k,"STRONG",{});var xrt=s(yse);gmo=r(xrt,"yoso"),xrt.forEach(t),hmo=r($k," \u2014 "),$I=n($k,"A",{href:!0});var $rt=s($I);pmo=r($rt,"AlbertTokenizer"),$rt.forEach(t),umo=r($k," or "),kI=n($k,"A",{href:!0});var krt=s(kI);_mo=r(krt,"AlbertTokenizerFast"),krt.forEach(t),bmo=r($k," (YOSO model)"),$k.forEach(t),S.forEach(t),vmo=i(zs),T(vh.$$.fragment,zs),zs.forEach(t),Fmo=i(Xs),Fh=n(Xs,"DIV",{class:!0});var wOe=s(Fh);T(E0.$$.fragment,wOe),Tmo=i(wOe),Lse=n(wOe,"P",{});var Srt=s(Lse);Mmo=r(Srt,"Register a new tokenizer in this mapping."),Srt.forEach(t),wOe.forEach(t),Xs.forEach(t),CDe=i(f),$i=n(f,"H2",{class:!0});var AOe=s($i);Th=n(AOe,"A",{id:!0,class:!0,href:!0});var Rrt=s(Th);xse=n(Rrt,"SPAN",{});var Prt=s(xse);T(C0.$$.fragment,Prt),Prt.forEach(t),Rrt.forEach(t),Emo=i(AOe),$se=n(AOe,"SPAN",{});var Brt=s($se);Cmo=r(Brt,"AutoFeatureExtractor"),Brt.forEach(t),AOe.forEach(t),wDe=i(f),yo=n(f,"DIV",{class:!0});var Ws=s(yo);T(w0.$$.fragment,Ws),wmo=i(Ws),A0=n(Ws,"P",{});var yOe=s(A0);Amo=r(yOe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SI=n(yOe,"A",{href:!0});var Irt=s(SI);ymo=r(Irt,"AutoFeatureExtractor.from_pretrained()"),Irt.forEach(t),Lmo=r(yOe," class method."),yOe.forEach(t),xmo=i(Ws),y0=n(Ws,"P",{});var LOe=s(y0);$mo=r(LOe,"This class cannot be instantiated directly using "),kse=n(LOe,"CODE",{});var Nrt=s(kse);kmo=r(Nrt,"__init__()"),Nrt.forEach(t),Smo=r(LOe," (throws an error)."),LOe.forEach(t),Rmo=i(Ws),He=n(Ws,"DIV",{class:!0});var ra=s(He);T(L0.$$.fragment,ra),Pmo=i(ra),Sse=n(ra,"P",{});var qrt=s(Sse);Bmo=r(qrt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qrt.forEach(t),Imo=i(ra),ka=n(ra,"P",{});var f3=s(ka);Nmo=r(f3,"The feature extractor class to instantiate is selected based on the "),Rse=n(f3,"CODE",{});var jrt=s(Rse);qmo=r(jrt,"model_type"),jrt.forEach(t),jmo=r(f3,` property of the config object
(either passed as an argument or loaded from `),Pse=n(f3,"CODE",{});var Drt=s(Pse);Dmo=r(Drt,"pretrained_model_name_or_path"),Drt.forEach(t),Gmo=r(f3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bse=n(f3,"CODE",{});var Grt=s(Bse);Omo=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),Vmo=r(f3,":"),f3.forEach(t),Xmo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Mh=n(K,"LI",{});var Wwe=s(Mh);Ise=n(Wwe,"STRONG",{});var Ort=s(Ise);zmo=r(Ort,"beit"),Ort.forEach(t),Wmo=r(Wwe," \u2014 "),RI=n(Wwe,"A",{href:!0});var Vrt=s(RI);Qmo=r(Vrt,"BeitFeatureExtractor"),Vrt.forEach(t),Hmo=r(Wwe," (BEiT model)"),Wwe.forEach(t),Umo=i(K),Eh=n(K,"LI",{});var Qwe=s(Eh);Nse=n(Qwe,"STRONG",{});var Xrt=s(Nse);Jmo=r(Xrt,"clip"),Xrt.forEach(t),Ymo=r(Qwe," \u2014 "),PI=n(Qwe,"A",{href:!0});var zrt=s(PI);Kmo=r(zrt,"CLIPFeatureExtractor"),zrt.forEach(t),Zmo=r(Qwe," (CLIP model)"),Qwe.forEach(t),ego=i(K),Ch=n(K,"LI",{});var Hwe=s(Ch);qse=n(Hwe,"STRONG",{});var Wrt=s(qse);ogo=r(Wrt,"convnext"),Wrt.forEach(t),rgo=r(Hwe," \u2014 "),BI=n(Hwe,"A",{href:!0});var Qrt=s(BI);tgo=r(Qrt,"ConvNextFeatureExtractor"),Qrt.forEach(t),ago=r(Hwe," (ConvNeXT model)"),Hwe.forEach(t),ngo=i(K),wh=n(K,"LI",{});var Uwe=s(wh);jse=n(Uwe,"STRONG",{});var Hrt=s(jse);sgo=r(Hrt,"cvt"),Hrt.forEach(t),lgo=r(Uwe," \u2014 "),II=n(Uwe,"A",{href:!0});var Urt=s(II);igo=r(Urt,"ConvNextFeatureExtractor"),Urt.forEach(t),dgo=r(Uwe," (CvT model)"),Uwe.forEach(t),cgo=i(K),Ah=n(K,"LI",{});var Jwe=s(Ah);Dse=n(Jwe,"STRONG",{});var Jrt=s(Dse);fgo=r(Jrt,"data2vec-audio"),Jrt.forEach(t),mgo=r(Jwe," \u2014 "),NI=n(Jwe,"A",{href:!0});var Yrt=s(NI);ggo=r(Yrt,"Wav2Vec2FeatureExtractor"),Yrt.forEach(t),hgo=r(Jwe," (Data2VecAudio model)"),Jwe.forEach(t),pgo=i(K),yh=n(K,"LI",{});var Ywe=s(yh);Gse=n(Ywe,"STRONG",{});var Krt=s(Gse);ugo=r(Krt,"data2vec-vision"),Krt.forEach(t),_go=r(Ywe," \u2014 "),qI=n(Ywe,"A",{href:!0});var Zrt=s(qI);bgo=r(Zrt,"BeitFeatureExtractor"),Zrt.forEach(t),vgo=r(Ywe," (Data2VecVision model)"),Ywe.forEach(t),Fgo=i(K),Lh=n(K,"LI",{});var Kwe=s(Lh);Ose=n(Kwe,"STRONG",{});var ett=s(Ose);Tgo=r(ett,"deit"),ett.forEach(t),Mgo=r(Kwe," \u2014 "),jI=n(Kwe,"A",{href:!0});var ott=s(jI);Ego=r(ott,"DeiTFeatureExtractor"),ott.forEach(t),Cgo=r(Kwe," (DeiT model)"),Kwe.forEach(t),wgo=i(K),xh=n(K,"LI",{});var Zwe=s(xh);Vse=n(Zwe,"STRONG",{});var rtt=s(Vse);Ago=r(rtt,"detr"),rtt.forEach(t),ygo=r(Zwe," \u2014 "),DI=n(Zwe,"A",{href:!0});var ttt=s(DI);Lgo=r(ttt,"DetrFeatureExtractor"),ttt.forEach(t),xgo=r(Zwe," (DETR model)"),Zwe.forEach(t),$go=i(K),$h=n(K,"LI",{});var e0e=s($h);Xse=n(e0e,"STRONG",{});var att=s(Xse);kgo=r(att,"dpt"),att.forEach(t),Sgo=r(e0e," \u2014 "),GI=n(e0e,"A",{href:!0});var ntt=s(GI);Rgo=r(ntt,"DPTFeatureExtractor"),ntt.forEach(t),Pgo=r(e0e," (DPT model)"),e0e.forEach(t),Bgo=i(K),kh=n(K,"LI",{});var o0e=s(kh);zse=n(o0e,"STRONG",{});var stt=s(zse);Igo=r(stt,"flava"),stt.forEach(t),Ngo=r(o0e," \u2014 "),OI=n(o0e,"A",{href:!0});var ltt=s(OI);qgo=r(ltt,"FlavaFeatureExtractor"),ltt.forEach(t),jgo=r(o0e," (FLAVA model)"),o0e.forEach(t),Dgo=i(K),Sh=n(K,"LI",{});var r0e=s(Sh);Wse=n(r0e,"STRONG",{});var itt=s(Wse);Ggo=r(itt,"glpn"),itt.forEach(t),Ogo=r(r0e," \u2014 "),VI=n(r0e,"A",{href:!0});var dtt=s(VI);Vgo=r(dtt,"GLPNFeatureExtractor"),dtt.forEach(t),Xgo=r(r0e," (GLPN model)"),r0e.forEach(t),zgo=i(K),Rh=n(K,"LI",{});var t0e=s(Rh);Qse=n(t0e,"STRONG",{});var ctt=s(Qse);Wgo=r(ctt,"hubert"),ctt.forEach(t),Qgo=r(t0e," \u2014 "),XI=n(t0e,"A",{href:!0});var ftt=s(XI);Hgo=r(ftt,"Wav2Vec2FeatureExtractor"),ftt.forEach(t),Ugo=r(t0e," (Hubert model)"),t0e.forEach(t),Jgo=i(K),Ph=n(K,"LI",{});var a0e=s(Ph);Hse=n(a0e,"STRONG",{});var mtt=s(Hse);Ygo=r(mtt,"imagegpt"),mtt.forEach(t),Kgo=r(a0e," \u2014 "),zI=n(a0e,"A",{href:!0});var gtt=s(zI);Zgo=r(gtt,"ImageGPTFeatureExtractor"),gtt.forEach(t),eho=r(a0e," (ImageGPT model)"),a0e.forEach(t),oho=i(K),Bh=n(K,"LI",{});var n0e=s(Bh);Use=n(n0e,"STRONG",{});var htt=s(Use);rho=r(htt,"layoutlmv2"),htt.forEach(t),tho=r(n0e," \u2014 "),WI=n(n0e,"A",{href:!0});var ptt=s(WI);aho=r(ptt,"LayoutLMv2FeatureExtractor"),ptt.forEach(t),nho=r(n0e," (LayoutLMv2 model)"),n0e.forEach(t),sho=i(K),Ih=n(K,"LI",{});var s0e=s(Ih);Jse=n(s0e,"STRONG",{});var utt=s(Jse);lho=r(utt,"layoutlmv3"),utt.forEach(t),iho=r(s0e," \u2014 "),QI=n(s0e,"A",{href:!0});var _tt=s(QI);dho=r(_tt,"LayoutLMv3FeatureExtractor"),_tt.forEach(t),cho=r(s0e," (LayoutLMv3 model)"),s0e.forEach(t),fho=i(K),Nh=n(K,"LI",{});var l0e=s(Nh);Yse=n(l0e,"STRONG",{});var btt=s(Yse);mho=r(btt,"levit"),btt.forEach(t),gho=r(l0e," \u2014 "),HI=n(l0e,"A",{href:!0});var vtt=s(HI);hho=r(vtt,"LevitFeatureExtractor"),vtt.forEach(t),pho=r(l0e," (LeViT model)"),l0e.forEach(t),uho=i(K),qh=n(K,"LI",{});var i0e=s(qh);Kse=n(i0e,"STRONG",{});var Ftt=s(Kse);_ho=r(Ftt,"maskformer"),Ftt.forEach(t),bho=r(i0e," \u2014 "),UI=n(i0e,"A",{href:!0});var Ttt=s(UI);vho=r(Ttt,"MaskFormerFeatureExtractor"),Ttt.forEach(t),Fho=r(i0e," (MaskFormer model)"),i0e.forEach(t),Tho=i(K),jh=n(K,"LI",{});var d0e=s(jh);Zse=n(d0e,"STRONG",{});var Mtt=s(Zse);Mho=r(Mtt,"mctct"),Mtt.forEach(t),Eho=r(d0e," \u2014 "),JI=n(d0e,"A",{href:!0});var Ett=s(JI);Cho=r(Ett,"MCTCTFeatureExtractor"),Ett.forEach(t),who=r(d0e," (M-CTC-T model)"),d0e.forEach(t),Aho=i(K),Dh=n(K,"LI",{});var c0e=s(Dh);ele=n(c0e,"STRONG",{});var Ctt=s(ele);yho=r(Ctt,"perceiver"),Ctt.forEach(t),Lho=r(c0e," \u2014 "),YI=n(c0e,"A",{href:!0});var wtt=s(YI);xho=r(wtt,"PerceiverFeatureExtractor"),wtt.forEach(t),$ho=r(c0e," (Perceiver model)"),c0e.forEach(t),kho=i(K),Gh=n(K,"LI",{});var f0e=s(Gh);ole=n(f0e,"STRONG",{});var Att=s(ole);Sho=r(Att,"poolformer"),Att.forEach(t),Rho=r(f0e," \u2014 "),KI=n(f0e,"A",{href:!0});var ytt=s(KI);Pho=r(ytt,"PoolFormerFeatureExtractor"),ytt.forEach(t),Bho=r(f0e," (PoolFormer model)"),f0e.forEach(t),Iho=i(K),Oh=n(K,"LI",{});var m0e=s(Oh);rle=n(m0e,"STRONG",{});var Ltt=s(rle);Nho=r(Ltt,"regnet"),Ltt.forEach(t),qho=r(m0e," \u2014 "),ZI=n(m0e,"A",{href:!0});var xtt=s(ZI);jho=r(xtt,"ConvNextFeatureExtractor"),xtt.forEach(t),Dho=r(m0e," (RegNet model)"),m0e.forEach(t),Gho=i(K),Vh=n(K,"LI",{});var g0e=s(Vh);tle=n(g0e,"STRONG",{});var $tt=s(tle);Oho=r($tt,"resnet"),$tt.forEach(t),Vho=r(g0e," \u2014 "),eN=n(g0e,"A",{href:!0});var ktt=s(eN);Xho=r(ktt,"ConvNextFeatureExtractor"),ktt.forEach(t),zho=r(g0e," (ResNet model)"),g0e.forEach(t),Who=i(K),Xh=n(K,"LI",{});var h0e=s(Xh);ale=n(h0e,"STRONG",{});var Stt=s(ale);Qho=r(Stt,"segformer"),Stt.forEach(t),Hho=r(h0e," \u2014 "),oN=n(h0e,"A",{href:!0});var Rtt=s(oN);Uho=r(Rtt,"SegformerFeatureExtractor"),Rtt.forEach(t),Jho=r(h0e," (SegFormer model)"),h0e.forEach(t),Yho=i(K),zh=n(K,"LI",{});var p0e=s(zh);nle=n(p0e,"STRONG",{});var Ptt=s(nle);Kho=r(Ptt,"speech_to_text"),Ptt.forEach(t),Zho=r(p0e," \u2014 "),rN=n(p0e,"A",{href:!0});var Btt=s(rN);epo=r(Btt,"Speech2TextFeatureExtractor"),Btt.forEach(t),opo=r(p0e," (Speech2Text model)"),p0e.forEach(t),rpo=i(K),Wh=n(K,"LI",{});var u0e=s(Wh);sle=n(u0e,"STRONG",{});var Itt=s(sle);tpo=r(Itt,"swin"),Itt.forEach(t),apo=r(u0e," \u2014 "),tN=n(u0e,"A",{href:!0});var Ntt=s(tN);npo=r(Ntt,"ViTFeatureExtractor"),Ntt.forEach(t),spo=r(u0e," (Swin Transformer model)"),u0e.forEach(t),lpo=i(K),Qh=n(K,"LI",{});var _0e=s(Qh);lle=n(_0e,"STRONG",{});var qtt=s(lle);ipo=r(qtt,"van"),qtt.forEach(t),dpo=r(_0e," \u2014 "),aN=n(_0e,"A",{href:!0});var jtt=s(aN);cpo=r(jtt,"ConvNextFeatureExtractor"),jtt.forEach(t),fpo=r(_0e," (VAN model)"),_0e.forEach(t),mpo=i(K),Hh=n(K,"LI",{});var b0e=s(Hh);ile=n(b0e,"STRONG",{});var Dtt=s(ile);gpo=r(Dtt,"vilt"),Dtt.forEach(t),hpo=r(b0e," \u2014 "),nN=n(b0e,"A",{href:!0});var Gtt=s(nN);ppo=r(Gtt,"ViltFeatureExtractor"),Gtt.forEach(t),upo=r(b0e," (ViLT model)"),b0e.forEach(t),_po=i(K),Uh=n(K,"LI",{});var v0e=s(Uh);dle=n(v0e,"STRONG",{});var Ott=s(dle);bpo=r(Ott,"vit"),Ott.forEach(t),vpo=r(v0e," \u2014 "),sN=n(v0e,"A",{href:!0});var Vtt=s(sN);Fpo=r(Vtt,"ViTFeatureExtractor"),Vtt.forEach(t),Tpo=r(v0e," (ViT model)"),v0e.forEach(t),Mpo=i(K),Jh=n(K,"LI",{});var F0e=s(Jh);cle=n(F0e,"STRONG",{});var Xtt=s(cle);Epo=r(Xtt,"vit_mae"),Xtt.forEach(t),Cpo=r(F0e," \u2014 "),lN=n(F0e,"A",{href:!0});var ztt=s(lN);wpo=r(ztt,"ViTFeatureExtractor"),ztt.forEach(t),Apo=r(F0e," (ViTMAE model)"),F0e.forEach(t),ypo=i(K),Yh=n(K,"LI",{});var T0e=s(Yh);fle=n(T0e,"STRONG",{});var Wtt=s(fle);Lpo=r(Wtt,"wav2vec2"),Wtt.forEach(t),xpo=r(T0e," \u2014 "),iN=n(T0e,"A",{href:!0});var Qtt=s(iN);$po=r(Qtt,"Wav2Vec2FeatureExtractor"),Qtt.forEach(t),kpo=r(T0e," (Wav2Vec2 model)"),T0e.forEach(t),Spo=i(K),Kh=n(K,"LI",{});var M0e=s(Kh);mle=n(M0e,"STRONG",{});var Htt=s(mle);Rpo=r(Htt,"wav2vec2-conformer"),Htt.forEach(t),Ppo=r(M0e," \u2014 "),dN=n(M0e,"A",{href:!0});var Utt=s(dN);Bpo=r(Utt,"Wav2Vec2FeatureExtractor"),Utt.forEach(t),Ipo=r(M0e," (Wav2Vec2-Conformer model)"),M0e.forEach(t),Npo=i(K),Zh=n(K,"LI",{});var E0e=s(Zh);gle=n(E0e,"STRONG",{});var Jtt=s(gle);qpo=r(Jtt,"yolos"),Jtt.forEach(t),jpo=r(E0e," \u2014 "),cN=n(E0e,"A",{href:!0});var Ytt=s(cN);Dpo=r(Ytt,"YolosFeatureExtractor"),Ytt.forEach(t),Gpo=r(E0e," (YOLOS model)"),E0e.forEach(t),K.forEach(t),Opo=i(ra),T(ep.$$.fragment,ra),Vpo=i(ra),T(op.$$.fragment,ra),ra.forEach(t),Xpo=i(Ws),rp=n(Ws,"DIV",{class:!0});var xOe=s(rp);T(x0.$$.fragment,xOe),zpo=i(xOe),hle=n(xOe,"P",{});var Ktt=s(hle);Wpo=r(Ktt,"Register a new feature extractor for this class."),Ktt.forEach(t),xOe.forEach(t),Ws.forEach(t),ADe=i(f),ki=n(f,"H2",{class:!0});var $Oe=s(ki);tp=n($Oe,"A",{id:!0,class:!0,href:!0});var Ztt=s(tp);ple=n(Ztt,"SPAN",{});var eat=s(ple);T($0.$$.fragment,eat),eat.forEach(t),Ztt.forEach(t),Qpo=i($Oe),ule=n($Oe,"SPAN",{});var oat=s(ule);Hpo=r(oat,"AutoProcessor"),oat.forEach(t),$Oe.forEach(t),yDe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(k0.$$.fragment,Qs),Upo=i(Qs),S0=n(Qs,"P",{});var kOe=s(S0);Jpo=r(kOe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fN=n(kOe,"A",{href:!0});var rat=s(fN);Ypo=r(rat,"AutoProcessor.from_pretrained()"),rat.forEach(t),Kpo=r(kOe," class method."),kOe.forEach(t),Zpo=i(Qs),R0=n(Qs,"P",{});var SOe=s(R0);euo=r(SOe,"This class cannot be instantiated directly using "),_le=n(SOe,"CODE",{});var tat=s(_le);ouo=r(tat,"__init__()"),tat.forEach(t),ruo=r(SOe," (throws an error)."),SOe.forEach(t),tuo=i(Qs),Ue=n(Qs,"DIV",{class:!0});var ta=s(Ue);T(P0.$$.fragment,ta),auo=i(ta),ble=n(ta,"P",{});var aat=s(ble);nuo=r(aat,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aat.forEach(t),suo=i(ta),Si=n(ta,"P",{});var $ee=s(Si);luo=r($ee,"The processor class to instantiate is selected based on the "),vle=n($ee,"CODE",{});var nat=s(vle);iuo=r(nat,"model_type"),nat.forEach(t),duo=r($ee,` property of the config object (either
passed as an argument or loaded from `),Fle=n($ee,"CODE",{});var sat=s(Fle);cuo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),fuo=r($ee," if possible):"),$ee.forEach(t),muo=i(ta),he=n(ta,"UL",{});var _e=s(he);ap=n(_e,"LI",{});var C0e=s(ap);Tle=n(C0e,"STRONG",{});var lat=s(Tle);guo=r(lat,"clip"),lat.forEach(t),huo=r(C0e," \u2014 "),mN=n(C0e,"A",{href:!0});var iat=s(mN);puo=r(iat,"CLIPProcessor"),iat.forEach(t),uuo=r(C0e," (CLIP model)"),C0e.forEach(t),_uo=i(_e),np=n(_e,"LI",{});var w0e=s(np);Mle=n(w0e,"STRONG",{});var dat=s(Mle);buo=r(dat,"flava"),dat.forEach(t),vuo=r(w0e," \u2014 "),Ele=n(w0e,"CODE",{});var cat=s(Ele);Fuo=r(cat,"FLAVAProcessor"),cat.forEach(t),Tuo=r(w0e," (FLAVA model)"),w0e.forEach(t),Muo=i(_e),sp=n(_e,"LI",{});var A0e=s(sp);Cle=n(A0e,"STRONG",{});var fat=s(Cle);Euo=r(fat,"layoutlmv2"),fat.forEach(t),Cuo=r(A0e," \u2014 "),gN=n(A0e,"A",{href:!0});var mat=s(gN);wuo=r(mat,"LayoutLMv2Processor"),mat.forEach(t),Auo=r(A0e," (LayoutLMv2 model)"),A0e.forEach(t),yuo=i(_e),lp=n(_e,"LI",{});var y0e=s(lp);wle=n(y0e,"STRONG",{});var gat=s(wle);Luo=r(gat,"layoutlmv3"),gat.forEach(t),xuo=r(y0e," \u2014 "),hN=n(y0e,"A",{href:!0});var hat=s(hN);$uo=r(hat,"LayoutLMv3Processor"),hat.forEach(t),kuo=r(y0e," (LayoutLMv3 model)"),y0e.forEach(t),Suo=i(_e),ip=n(_e,"LI",{});var L0e=s(ip);Ale=n(L0e,"STRONG",{});var pat=s(Ale);Ruo=r(pat,"layoutxlm"),pat.forEach(t),Puo=r(L0e," \u2014 "),pN=n(L0e,"A",{href:!0});var uat=s(pN);Buo=r(uat,"LayoutXLMProcessor"),uat.forEach(t),Iuo=r(L0e," (LayoutXLM model)"),L0e.forEach(t),Nuo=i(_e),dp=n(_e,"LI",{});var x0e=s(dp);yle=n(x0e,"STRONG",{});var _at=s(yle);quo=r(_at,"sew"),_at.forEach(t),juo=r(x0e," \u2014 "),uN=n(x0e,"A",{href:!0});var bat=s(uN);Duo=r(bat,"Wav2Vec2Processor"),bat.forEach(t),Guo=r(x0e," (SEW model)"),x0e.forEach(t),Ouo=i(_e),cp=n(_e,"LI",{});var $0e=s(cp);Lle=n($0e,"STRONG",{});var vat=s(Lle);Vuo=r(vat,"sew-d"),vat.forEach(t),Xuo=r($0e," \u2014 "),_N=n($0e,"A",{href:!0});var Fat=s(_N);zuo=r(Fat,"Wav2Vec2Processor"),Fat.forEach(t),Wuo=r($0e," (SEW-D model)"),$0e.forEach(t),Quo=i(_e),fp=n(_e,"LI",{});var k0e=s(fp);xle=n(k0e,"STRONG",{});var Tat=s(xle);Huo=r(Tat,"speech_to_text"),Tat.forEach(t),Uuo=r(k0e," \u2014 "),bN=n(k0e,"A",{href:!0});var Mat=s(bN);Juo=r(Mat,"Speech2TextProcessor"),Mat.forEach(t),Yuo=r(k0e," (Speech2Text model)"),k0e.forEach(t),Kuo=i(_e),mp=n(_e,"LI",{});var S0e=s(mp);$le=n(S0e,"STRONG",{});var Eat=s($le);Zuo=r(Eat,"speech_to_text_2"),Eat.forEach(t),e_o=r(S0e," \u2014 "),vN=n(S0e,"A",{href:!0});var Cat=s(vN);o_o=r(Cat,"Speech2Text2Processor"),Cat.forEach(t),r_o=r(S0e," (Speech2Text2 model)"),S0e.forEach(t),t_o=i(_e),gp=n(_e,"LI",{});var R0e=s(gp);kle=n(R0e,"STRONG",{});var wat=s(kle);a_o=r(wat,"trocr"),wat.forEach(t),n_o=r(R0e," \u2014 "),FN=n(R0e,"A",{href:!0});var Aat=s(FN);s_o=r(Aat,"TrOCRProcessor"),Aat.forEach(t),l_o=r(R0e," (TrOCR model)"),R0e.forEach(t),i_o=i(_e),hp=n(_e,"LI",{});var P0e=s(hp);Sle=n(P0e,"STRONG",{});var yat=s(Sle);d_o=r(yat,"unispeech"),yat.forEach(t),c_o=r(P0e," \u2014 "),TN=n(P0e,"A",{href:!0});var Lat=s(TN);f_o=r(Lat,"Wav2Vec2Processor"),Lat.forEach(t),m_o=r(P0e," (UniSpeech model)"),P0e.forEach(t),g_o=i(_e),pp=n(_e,"LI",{});var B0e=s(pp);Rle=n(B0e,"STRONG",{});var xat=s(Rle);h_o=r(xat,"unispeech-sat"),xat.forEach(t),p_o=r(B0e," \u2014 "),MN=n(B0e,"A",{href:!0});var $at=s(MN);u_o=r($at,"Wav2Vec2Processor"),$at.forEach(t),__o=r(B0e," (UniSpeechSat model)"),B0e.forEach(t),b_o=i(_e),up=n(_e,"LI",{});var I0e=s(up);Ple=n(I0e,"STRONG",{});var kat=s(Ple);v_o=r(kat,"vilt"),kat.forEach(t),F_o=r(I0e," \u2014 "),EN=n(I0e,"A",{href:!0});var Sat=s(EN);T_o=r(Sat,"ViltProcessor"),Sat.forEach(t),M_o=r(I0e," (ViLT model)"),I0e.forEach(t),E_o=i(_e),_p=n(_e,"LI",{});var N0e=s(_p);Ble=n(N0e,"STRONG",{});var Rat=s(Ble);C_o=r(Rat,"vision-text-dual-encoder"),Rat.forEach(t),w_o=r(N0e," \u2014 "),CN=n(N0e,"A",{href:!0});var Pat=s(CN);A_o=r(Pat,"VisionTextDualEncoderProcessor"),Pat.forEach(t),y_o=r(N0e," (VisionTextDualEncoder model)"),N0e.forEach(t),L_o=i(_e),bp=n(_e,"LI",{});var q0e=s(bp);Ile=n(q0e,"STRONG",{});var Bat=s(Ile);x_o=r(Bat,"wav2vec2"),Bat.forEach(t),$_o=r(q0e," \u2014 "),wN=n(q0e,"A",{href:!0});var Iat=s(wN);k_o=r(Iat,"Wav2Vec2Processor"),Iat.forEach(t),S_o=r(q0e," (Wav2Vec2 model)"),q0e.forEach(t),R_o=i(_e),vp=n(_e,"LI",{});var j0e=s(vp);Nle=n(j0e,"STRONG",{});var Nat=s(Nle);P_o=r(Nat,"wav2vec2-conformer"),Nat.forEach(t),B_o=r(j0e," \u2014 "),AN=n(j0e,"A",{href:!0});var qat=s(AN);I_o=r(qat,"Wav2Vec2Processor"),qat.forEach(t),N_o=r(j0e," (Wav2Vec2-Conformer model)"),j0e.forEach(t),q_o=i(_e),Fp=n(_e,"LI",{});var D0e=s(Fp);qle=n(D0e,"STRONG",{});var jat=s(qle);j_o=r(jat,"wavlm"),jat.forEach(t),D_o=r(D0e," \u2014 "),yN=n(D0e,"A",{href:!0});var Dat=s(yN);G_o=r(Dat,"Wav2Vec2Processor"),Dat.forEach(t),O_o=r(D0e," (WavLM model)"),D0e.forEach(t),_e.forEach(t),V_o=i(ta),T(Tp.$$.fragment,ta),X_o=i(ta),T(Mp.$$.fragment,ta),ta.forEach(t),z_o=i(Qs),Ep=n(Qs,"DIV",{class:!0});var ROe=s(Ep);T(B0.$$.fragment,ROe),W_o=i(ROe),jle=n(ROe,"P",{});var Gat=s(jle);Q_o=r(Gat,"Register a new processor for this class."),Gat.forEach(t),ROe.forEach(t),Qs.forEach(t),LDe=i(f),Ri=n(f,"H2",{class:!0});var POe=s(Ri);Cp=n(POe,"A",{id:!0,class:!0,href:!0});var Oat=s(Cp);Dle=n(Oat,"SPAN",{});var Vat=s(Dle);T(I0.$$.fragment,Vat),Vat.forEach(t),Oat.forEach(t),H_o=i(POe),Gle=n(POe,"SPAN",{});var Xat=s(Gle);U_o=r(Xat,"AutoModel"),Xat.forEach(t),POe.forEach(t),xDe=i(f),xo=n(f,"DIV",{class:!0});var Hs=s(xo);T(N0.$$.fragment,Hs),J_o=i(Hs),Pi=n(Hs,"P",{});var kee=s(Pi);Y_o=r(kee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LN=n(kee,"A",{href:!0});var zat=s(LN);K_o=r(zat,"from_pretrained()"),zat.forEach(t),Z_o=r(kee," class method or the "),xN=n(kee,"A",{href:!0});var Wat=s(xN);e1o=r(Wat,"from_config()"),Wat.forEach(t),o1o=r(kee,` class
method.`),kee.forEach(t),r1o=i(Hs),q0=n(Hs,"P",{});var BOe=s(q0);t1o=r(BOe,"This class cannot be instantiated directly using "),Ole=n(BOe,"CODE",{});var Qat=s(Ole);a1o=r(Qat,"__init__()"),Qat.forEach(t),n1o=r(BOe," (throws an error)."),BOe.forEach(t),s1o=i(Hs),nt=n(Hs,"DIV",{class:!0});var m3=s(nt);T(j0.$$.fragment,m3),l1o=i(m3),Vle=n(m3,"P",{});var Hat=s(Vle);i1o=r(Hat,"Instantiates one of the base model classes of the library from a configuration."),Hat.forEach(t),d1o=i(m3),Bi=n(m3,"P",{});var See=s(Bi);c1o=r(See,`Note:
Loading a model from its configuration file does `),Xle=n(See,"STRONG",{});var Uat=s(Xle);f1o=r(Uat,"not"),Uat.forEach(t),m1o=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(See,"A",{href:!0});var Jat=s($N);g1o=r(Jat,"from_pretrained()"),Jat.forEach(t),h1o=r(See," to load the model weights."),See.forEach(t),p1o=i(m3),T(wp.$$.fragment,m3),m3.forEach(t),u1o=i(Hs),Je=n(Hs,"DIV",{class:!0});var aa=s(Je);T(D0.$$.fragment,aa),_1o=i(aa),zle=n(aa,"P",{});var Yat=s(zle);b1o=r(Yat,"Instantiate one of the base model classes of the library from a pretrained model."),Yat.forEach(t),v1o=i(aa),Sa=n(aa,"P",{});var g3=s(Sa);F1o=r(g3,"The model class to instantiate is selected based on the "),Wle=n(g3,"CODE",{});var Kat=s(Wle);T1o=r(Kat,"model_type"),Kat.forEach(t),M1o=r(g3,` property of the config object (either
passed as an argument or loaded from `),Qle=n(g3,"CODE",{});var Zat=s(Qle);E1o=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),C1o=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=n(g3,"CODE",{});var ent=s(Hle);w1o=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),A1o=r(g3,":"),g3.forEach(t),y1o=i(aa),x=n(aa,"UL",{});var $=s(x);Ap=n($,"LI",{});var G0e=s(Ap);Ule=n(G0e,"STRONG",{});var ont=s(Ule);L1o=r(ont,"albert"),ont.forEach(t),x1o=r(G0e," \u2014 "),kN=n(G0e,"A",{href:!0});var rnt=s(kN);$1o=r(rnt,"AlbertModel"),rnt.forEach(t),k1o=r(G0e," (ALBERT model)"),G0e.forEach(t),S1o=i($),yp=n($,"LI",{});var O0e=s(yp);Jle=n(O0e,"STRONG",{});var tnt=s(Jle);R1o=r(tnt,"bart"),tnt.forEach(t),P1o=r(O0e," \u2014 "),SN=n(O0e,"A",{href:!0});var ant=s(SN);B1o=r(ant,"BartModel"),ant.forEach(t),I1o=r(O0e," (BART model)"),O0e.forEach(t),N1o=i($),Lp=n($,"LI",{});var V0e=s(Lp);Yle=n(V0e,"STRONG",{});var nnt=s(Yle);q1o=r(nnt,"beit"),nnt.forEach(t),j1o=r(V0e," \u2014 "),RN=n(V0e,"A",{href:!0});var snt=s(RN);D1o=r(snt,"BeitModel"),snt.forEach(t),G1o=r(V0e," (BEiT model)"),V0e.forEach(t),O1o=i($),xp=n($,"LI",{});var X0e=s(xp);Kle=n(X0e,"STRONG",{});var lnt=s(Kle);V1o=r(lnt,"bert"),lnt.forEach(t),X1o=r(X0e," \u2014 "),PN=n(X0e,"A",{href:!0});var int=s(PN);z1o=r(int,"BertModel"),int.forEach(t),W1o=r(X0e," (BERT model)"),X0e.forEach(t),Q1o=i($),$p=n($,"LI",{});var z0e=s($p);Zle=n(z0e,"STRONG",{});var dnt=s(Zle);H1o=r(dnt,"bert-generation"),dnt.forEach(t),U1o=r(z0e," \u2014 "),BN=n(z0e,"A",{href:!0});var cnt=s(BN);J1o=r(cnt,"BertGenerationEncoder"),cnt.forEach(t),Y1o=r(z0e," (Bert Generation model)"),z0e.forEach(t),K1o=i($),kp=n($,"LI",{});var W0e=s(kp);eie=n(W0e,"STRONG",{});var fnt=s(eie);Z1o=r(fnt,"big_bird"),fnt.forEach(t),ebo=r(W0e," \u2014 "),IN=n(W0e,"A",{href:!0});var mnt=s(IN);obo=r(mnt,"BigBirdModel"),mnt.forEach(t),rbo=r(W0e," (BigBird model)"),W0e.forEach(t),tbo=i($),Sp=n($,"LI",{});var Q0e=s(Sp);oie=n(Q0e,"STRONG",{});var gnt=s(oie);abo=r(gnt,"bigbird_pegasus"),gnt.forEach(t),nbo=r(Q0e," \u2014 "),NN=n(Q0e,"A",{href:!0});var hnt=s(NN);sbo=r(hnt,"BigBirdPegasusModel"),hnt.forEach(t),lbo=r(Q0e," (BigBird-Pegasus model)"),Q0e.forEach(t),ibo=i($),Rp=n($,"LI",{});var H0e=s(Rp);rie=n(H0e,"STRONG",{});var pnt=s(rie);dbo=r(pnt,"blenderbot"),pnt.forEach(t),cbo=r(H0e," \u2014 "),qN=n(H0e,"A",{href:!0});var unt=s(qN);fbo=r(unt,"BlenderbotModel"),unt.forEach(t),mbo=r(H0e," (Blenderbot model)"),H0e.forEach(t),gbo=i($),Pp=n($,"LI",{});var U0e=s(Pp);tie=n(U0e,"STRONG",{});var _nt=s(tie);hbo=r(_nt,"blenderbot-small"),_nt.forEach(t),pbo=r(U0e," \u2014 "),jN=n(U0e,"A",{href:!0});var bnt=s(jN);ubo=r(bnt,"BlenderbotSmallModel"),bnt.forEach(t),_bo=r(U0e," (BlenderbotSmall model)"),U0e.forEach(t),bbo=i($),Bp=n($,"LI",{});var J0e=s(Bp);aie=n(J0e,"STRONG",{});var vnt=s(aie);vbo=r(vnt,"bloom"),vnt.forEach(t),Fbo=r(J0e," \u2014 "),DN=n(J0e,"A",{href:!0});var Fnt=s(DN);Tbo=r(Fnt,"BloomModel"),Fnt.forEach(t),Mbo=r(J0e," (BLOOM model)"),J0e.forEach(t),Ebo=i($),Ip=n($,"LI",{});var Y0e=s(Ip);nie=n(Y0e,"STRONG",{});var Tnt=s(nie);Cbo=r(Tnt,"camembert"),Tnt.forEach(t),wbo=r(Y0e," \u2014 "),GN=n(Y0e,"A",{href:!0});var Mnt=s(GN);Abo=r(Mnt,"CamembertModel"),Mnt.forEach(t),ybo=r(Y0e," (CamemBERT model)"),Y0e.forEach(t),Lbo=i($),Np=n($,"LI",{});var K0e=s(Np);sie=n(K0e,"STRONG",{});var Ent=s(sie);xbo=r(Ent,"canine"),Ent.forEach(t),$bo=r(K0e," \u2014 "),ON=n(K0e,"A",{href:!0});var Cnt=s(ON);kbo=r(Cnt,"CanineModel"),Cnt.forEach(t),Sbo=r(K0e," (CANINE model)"),K0e.forEach(t),Rbo=i($),qp=n($,"LI",{});var Z0e=s(qp);lie=n(Z0e,"STRONG",{});var wnt=s(lie);Pbo=r(wnt,"clip"),wnt.forEach(t),Bbo=r(Z0e," \u2014 "),VN=n(Z0e,"A",{href:!0});var Ant=s(VN);Ibo=r(Ant,"CLIPModel"),Ant.forEach(t),Nbo=r(Z0e," (CLIP model)"),Z0e.forEach(t),qbo=i($),jp=n($,"LI",{});var eAe=s(jp);iie=n(eAe,"STRONG",{});var ynt=s(iie);jbo=r(ynt,"convbert"),ynt.forEach(t),Dbo=r(eAe," \u2014 "),XN=n(eAe,"A",{href:!0});var Lnt=s(XN);Gbo=r(Lnt,"ConvBertModel"),Lnt.forEach(t),Obo=r(eAe," (ConvBERT model)"),eAe.forEach(t),Vbo=i($),Dp=n($,"LI",{});var oAe=s(Dp);die=n(oAe,"STRONG",{});var xnt=s(die);Xbo=r(xnt,"convnext"),xnt.forEach(t),zbo=r(oAe," \u2014 "),zN=n(oAe,"A",{href:!0});var $nt=s(zN);Wbo=r($nt,"ConvNextModel"),$nt.forEach(t),Qbo=r(oAe," (ConvNeXT model)"),oAe.forEach(t),Hbo=i($),Gp=n($,"LI",{});var rAe=s(Gp);cie=n(rAe,"STRONG",{});var knt=s(cie);Ubo=r(knt,"ctrl"),knt.forEach(t),Jbo=r(rAe," \u2014 "),WN=n(rAe,"A",{href:!0});var Snt=s(WN);Ybo=r(Snt,"CTRLModel"),Snt.forEach(t),Kbo=r(rAe," (CTRL model)"),rAe.forEach(t),Zbo=i($),Op=n($,"LI",{});var tAe=s(Op);fie=n(tAe,"STRONG",{});var Rnt=s(fie);e2o=r(Rnt,"cvt"),Rnt.forEach(t),o2o=r(tAe," \u2014 "),QN=n(tAe,"A",{href:!0});var Pnt=s(QN);r2o=r(Pnt,"CvtModel"),Pnt.forEach(t),t2o=r(tAe," (CvT model)"),tAe.forEach(t),a2o=i($),Vp=n($,"LI",{});var aAe=s(Vp);mie=n(aAe,"STRONG",{});var Bnt=s(mie);n2o=r(Bnt,"data2vec-audio"),Bnt.forEach(t),s2o=r(aAe," \u2014 "),HN=n(aAe,"A",{href:!0});var Int=s(HN);l2o=r(Int,"Data2VecAudioModel"),Int.forEach(t),i2o=r(aAe," (Data2VecAudio model)"),aAe.forEach(t),d2o=i($),Xp=n($,"LI",{});var nAe=s(Xp);gie=n(nAe,"STRONG",{});var Nnt=s(gie);c2o=r(Nnt,"data2vec-text"),Nnt.forEach(t),f2o=r(nAe," \u2014 "),UN=n(nAe,"A",{href:!0});var qnt=s(UN);m2o=r(qnt,"Data2VecTextModel"),qnt.forEach(t),g2o=r(nAe," (Data2VecText model)"),nAe.forEach(t),h2o=i($),zp=n($,"LI",{});var sAe=s(zp);hie=n(sAe,"STRONG",{});var jnt=s(hie);p2o=r(jnt,"data2vec-vision"),jnt.forEach(t),u2o=r(sAe," \u2014 "),JN=n(sAe,"A",{href:!0});var Dnt=s(JN);_2o=r(Dnt,"Data2VecVisionModel"),Dnt.forEach(t),b2o=r(sAe," (Data2VecVision model)"),sAe.forEach(t),v2o=i($),Wp=n($,"LI",{});var lAe=s(Wp);pie=n(lAe,"STRONG",{});var Gnt=s(pie);F2o=r(Gnt,"deberta"),Gnt.forEach(t),T2o=r(lAe," \u2014 "),YN=n(lAe,"A",{href:!0});var Ont=s(YN);M2o=r(Ont,"DebertaModel"),Ont.forEach(t),E2o=r(lAe," (DeBERTa model)"),lAe.forEach(t),C2o=i($),Qp=n($,"LI",{});var iAe=s(Qp);uie=n(iAe,"STRONG",{});var Vnt=s(uie);w2o=r(Vnt,"deberta-v2"),Vnt.forEach(t),A2o=r(iAe," \u2014 "),KN=n(iAe,"A",{href:!0});var Xnt=s(KN);y2o=r(Xnt,"DebertaV2Model"),Xnt.forEach(t),L2o=r(iAe," (DeBERTa-v2 model)"),iAe.forEach(t),x2o=i($),Hp=n($,"LI",{});var dAe=s(Hp);_ie=n(dAe,"STRONG",{});var znt=s(_ie);$2o=r(znt,"decision_transformer"),znt.forEach(t),k2o=r(dAe," \u2014 "),ZN=n(dAe,"A",{href:!0});var Wnt=s(ZN);S2o=r(Wnt,"DecisionTransformerModel"),Wnt.forEach(t),R2o=r(dAe," (Decision Transformer model)"),dAe.forEach(t),P2o=i($),Up=n($,"LI",{});var cAe=s(Up);bie=n(cAe,"STRONG",{});var Qnt=s(bie);B2o=r(Qnt,"deit"),Qnt.forEach(t),I2o=r(cAe," \u2014 "),eq=n(cAe,"A",{href:!0});var Hnt=s(eq);N2o=r(Hnt,"DeiTModel"),Hnt.forEach(t),q2o=r(cAe," (DeiT model)"),cAe.forEach(t),j2o=i($),Jp=n($,"LI",{});var fAe=s(Jp);vie=n(fAe,"STRONG",{});var Unt=s(vie);D2o=r(Unt,"detr"),Unt.forEach(t),G2o=r(fAe," \u2014 "),oq=n(fAe,"A",{href:!0});var Jnt=s(oq);O2o=r(Jnt,"DetrModel"),Jnt.forEach(t),V2o=r(fAe," (DETR model)"),fAe.forEach(t),X2o=i($),Yp=n($,"LI",{});var mAe=s(Yp);Fie=n(mAe,"STRONG",{});var Ynt=s(Fie);z2o=r(Ynt,"distilbert"),Ynt.forEach(t),W2o=r(mAe," \u2014 "),rq=n(mAe,"A",{href:!0});var Knt=s(rq);Q2o=r(Knt,"DistilBertModel"),Knt.forEach(t),H2o=r(mAe," (DistilBERT model)"),mAe.forEach(t),U2o=i($),Kp=n($,"LI",{});var gAe=s(Kp);Tie=n(gAe,"STRONG",{});var Znt=s(Tie);J2o=r(Znt,"dpr"),Znt.forEach(t),Y2o=r(gAe," \u2014 "),tq=n(gAe,"A",{href:!0});var est=s(tq);K2o=r(est,"DPRQuestionEncoder"),est.forEach(t),Z2o=r(gAe," (DPR model)"),gAe.forEach(t),evo=i($),Zp=n($,"LI",{});var hAe=s(Zp);Mie=n(hAe,"STRONG",{});var ost=s(Mie);ovo=r(ost,"dpt"),ost.forEach(t),rvo=r(hAe," \u2014 "),aq=n(hAe,"A",{href:!0});var rst=s(aq);tvo=r(rst,"DPTModel"),rst.forEach(t),avo=r(hAe," (DPT model)"),hAe.forEach(t),nvo=i($),eu=n($,"LI",{});var pAe=s(eu);Eie=n(pAe,"STRONG",{});var tst=s(Eie);svo=r(tst,"electra"),tst.forEach(t),lvo=r(pAe," \u2014 "),nq=n(pAe,"A",{href:!0});var ast=s(nq);ivo=r(ast,"ElectraModel"),ast.forEach(t),dvo=r(pAe," (ELECTRA model)"),pAe.forEach(t),cvo=i($),ou=n($,"LI",{});var uAe=s(ou);Cie=n(uAe,"STRONG",{});var nst=s(Cie);fvo=r(nst,"flaubert"),nst.forEach(t),mvo=r(uAe," \u2014 "),sq=n(uAe,"A",{href:!0});var sst=s(sq);gvo=r(sst,"FlaubertModel"),sst.forEach(t),hvo=r(uAe," (FlauBERT model)"),uAe.forEach(t),pvo=i($),ru=n($,"LI",{});var _Ae=s(ru);wie=n(_Ae,"STRONG",{});var lst=s(wie);uvo=r(lst,"flava"),lst.forEach(t),_vo=r(_Ae," \u2014 "),lq=n(_Ae,"A",{href:!0});var ist=s(lq);bvo=r(ist,"FlavaModel"),ist.forEach(t),vvo=r(_Ae," (FLAVA model)"),_Ae.forEach(t),Fvo=i($),tu=n($,"LI",{});var bAe=s(tu);Aie=n(bAe,"STRONG",{});var dst=s(Aie);Tvo=r(dst,"fnet"),dst.forEach(t),Mvo=r(bAe," \u2014 "),iq=n(bAe,"A",{href:!0});var cst=s(iq);Evo=r(cst,"FNetModel"),cst.forEach(t),Cvo=r(bAe," (FNet model)"),bAe.forEach(t),wvo=i($),au=n($,"LI",{});var vAe=s(au);yie=n(vAe,"STRONG",{});var fst=s(yie);Avo=r(fst,"fsmt"),fst.forEach(t),yvo=r(vAe," \u2014 "),dq=n(vAe,"A",{href:!0});var mst=s(dq);Lvo=r(mst,"FSMTModel"),mst.forEach(t),xvo=r(vAe," (FairSeq Machine-Translation model)"),vAe.forEach(t),$vo=i($),Ds=n($,"LI",{});var kk=s(Ds);Lie=n(kk,"STRONG",{});var gst=s(Lie);kvo=r(gst,"funnel"),gst.forEach(t),Svo=r(kk," \u2014 "),cq=n(kk,"A",{href:!0});var hst=s(cq);Rvo=r(hst,"FunnelModel"),hst.forEach(t),Pvo=r(kk," or "),fq=n(kk,"A",{href:!0});var pst=s(fq);Bvo=r(pst,"FunnelBaseModel"),pst.forEach(t),Ivo=r(kk," (Funnel Transformer model)"),kk.forEach(t),Nvo=i($),nu=n($,"LI",{});var FAe=s(nu);xie=n(FAe,"STRONG",{});var ust=s(xie);qvo=r(ust,"glpn"),ust.forEach(t),jvo=r(FAe," \u2014 "),mq=n(FAe,"A",{href:!0});var _st=s(mq);Dvo=r(_st,"GLPNModel"),_st.forEach(t),Gvo=r(FAe," (GLPN model)"),FAe.forEach(t),Ovo=i($),su=n($,"LI",{});var TAe=s(su);$ie=n(TAe,"STRONG",{});var bst=s($ie);Vvo=r(bst,"gpt2"),bst.forEach(t),Xvo=r(TAe," \u2014 "),gq=n(TAe,"A",{href:!0});var vst=s(gq);zvo=r(vst,"GPT2Model"),vst.forEach(t),Wvo=r(TAe," (OpenAI GPT-2 model)"),TAe.forEach(t),Qvo=i($),lu=n($,"LI",{});var MAe=s(lu);kie=n(MAe,"STRONG",{});var Fst=s(kie);Hvo=r(Fst,"gpt_neo"),Fst.forEach(t),Uvo=r(MAe," \u2014 "),hq=n(MAe,"A",{href:!0});var Tst=s(hq);Jvo=r(Tst,"GPTNeoModel"),Tst.forEach(t),Yvo=r(MAe," (GPT Neo model)"),MAe.forEach(t),Kvo=i($),iu=n($,"LI",{});var EAe=s(iu);Sie=n(EAe,"STRONG",{});var Mst=s(Sie);Zvo=r(Mst,"gpt_neox"),Mst.forEach(t),eFo=r(EAe," \u2014 "),pq=n(EAe,"A",{href:!0});var Est=s(pq);oFo=r(Est,"GPTNeoXModel"),Est.forEach(t),rFo=r(EAe," (GPT NeoX model)"),EAe.forEach(t),tFo=i($),du=n($,"LI",{});var CAe=s(du);Rie=n(CAe,"STRONG",{});var Cst=s(Rie);aFo=r(Cst,"gptj"),Cst.forEach(t),nFo=r(CAe," \u2014 "),uq=n(CAe,"A",{href:!0});var wst=s(uq);sFo=r(wst,"GPTJModel"),wst.forEach(t),lFo=r(CAe," (GPT-J model)"),CAe.forEach(t),iFo=i($),cu=n($,"LI",{});var wAe=s(cu);Pie=n(wAe,"STRONG",{});var Ast=s(Pie);dFo=r(Ast,"hubert"),Ast.forEach(t),cFo=r(wAe," \u2014 "),_q=n(wAe,"A",{href:!0});var yst=s(_q);fFo=r(yst,"HubertModel"),yst.forEach(t),mFo=r(wAe," (Hubert model)"),wAe.forEach(t),gFo=i($),fu=n($,"LI",{});var AAe=s(fu);Bie=n(AAe,"STRONG",{});var Lst=s(Bie);hFo=r(Lst,"ibert"),Lst.forEach(t),pFo=r(AAe," \u2014 "),bq=n(AAe,"A",{href:!0});var xst=s(bq);uFo=r(xst,"IBertModel"),xst.forEach(t),_Fo=r(AAe," (I-BERT model)"),AAe.forEach(t),bFo=i($),mu=n($,"LI",{});var yAe=s(mu);Iie=n(yAe,"STRONG",{});var $st=s(Iie);vFo=r($st,"imagegpt"),$st.forEach(t),FFo=r(yAe," \u2014 "),vq=n(yAe,"A",{href:!0});var kst=s(vq);TFo=r(kst,"ImageGPTModel"),kst.forEach(t),MFo=r(yAe," (ImageGPT model)"),yAe.forEach(t),EFo=i($),gu=n($,"LI",{});var LAe=s(gu);Nie=n(LAe,"STRONG",{});var Sst=s(Nie);CFo=r(Sst,"layoutlm"),Sst.forEach(t),wFo=r(LAe," \u2014 "),Fq=n(LAe,"A",{href:!0});var Rst=s(Fq);AFo=r(Rst,"LayoutLMModel"),Rst.forEach(t),yFo=r(LAe," (LayoutLM model)"),LAe.forEach(t),LFo=i($),hu=n($,"LI",{});var xAe=s(hu);qie=n(xAe,"STRONG",{});var Pst=s(qie);xFo=r(Pst,"layoutlmv2"),Pst.forEach(t),$Fo=r(xAe," \u2014 "),Tq=n(xAe,"A",{href:!0});var Bst=s(Tq);kFo=r(Bst,"LayoutLMv2Model"),Bst.forEach(t),SFo=r(xAe," (LayoutLMv2 model)"),xAe.forEach(t),RFo=i($),pu=n($,"LI",{});var $Ae=s(pu);jie=n($Ae,"STRONG",{});var Ist=s(jie);PFo=r(Ist,"layoutlmv3"),Ist.forEach(t),BFo=r($Ae," \u2014 "),Mq=n($Ae,"A",{href:!0});var Nst=s(Mq);IFo=r(Nst,"LayoutLMv3Model"),Nst.forEach(t),NFo=r($Ae," (LayoutLMv3 model)"),$Ae.forEach(t),qFo=i($),uu=n($,"LI",{});var kAe=s(uu);Die=n(kAe,"STRONG",{});var qst=s(Die);jFo=r(qst,"led"),qst.forEach(t),DFo=r(kAe," \u2014 "),Eq=n(kAe,"A",{href:!0});var jst=s(Eq);GFo=r(jst,"LEDModel"),jst.forEach(t),OFo=r(kAe," (LED model)"),kAe.forEach(t),VFo=i($),_u=n($,"LI",{});var SAe=s(_u);Gie=n(SAe,"STRONG",{});var Dst=s(Gie);XFo=r(Dst,"levit"),Dst.forEach(t),zFo=r(SAe," \u2014 "),Cq=n(SAe,"A",{href:!0});var Gst=s(Cq);WFo=r(Gst,"LevitModel"),Gst.forEach(t),QFo=r(SAe," (LeViT model)"),SAe.forEach(t),HFo=i($),bu=n($,"LI",{});var RAe=s(bu);Oie=n(RAe,"STRONG",{});var Ost=s(Oie);UFo=r(Ost,"longformer"),Ost.forEach(t),JFo=r(RAe," \u2014 "),wq=n(RAe,"A",{href:!0});var Vst=s(wq);YFo=r(Vst,"LongformerModel"),Vst.forEach(t),KFo=r(RAe," (Longformer model)"),RAe.forEach(t),ZFo=i($),vu=n($,"LI",{});var PAe=s(vu);Vie=n(PAe,"STRONG",{});var Xst=s(Vie);e6o=r(Xst,"luke"),Xst.forEach(t),o6o=r(PAe," \u2014 "),Aq=n(PAe,"A",{href:!0});var zst=s(Aq);r6o=r(zst,"LukeModel"),zst.forEach(t),t6o=r(PAe," (LUKE model)"),PAe.forEach(t),a6o=i($),Fu=n($,"LI",{});var BAe=s(Fu);Xie=n(BAe,"STRONG",{});var Wst=s(Xie);n6o=r(Wst,"lxmert"),Wst.forEach(t),s6o=r(BAe," \u2014 "),yq=n(BAe,"A",{href:!0});var Qst=s(yq);l6o=r(Qst,"LxmertModel"),Qst.forEach(t),i6o=r(BAe," (LXMERT model)"),BAe.forEach(t),d6o=i($),Tu=n($,"LI",{});var IAe=s(Tu);zie=n(IAe,"STRONG",{});var Hst=s(zie);c6o=r(Hst,"m2m_100"),Hst.forEach(t),f6o=r(IAe," \u2014 "),Lq=n(IAe,"A",{href:!0});var Ust=s(Lq);m6o=r(Ust,"M2M100Model"),Ust.forEach(t),g6o=r(IAe," (M2M100 model)"),IAe.forEach(t),h6o=i($),Mu=n($,"LI",{});var NAe=s(Mu);Wie=n(NAe,"STRONG",{});var Jst=s(Wie);p6o=r(Jst,"marian"),Jst.forEach(t),u6o=r(NAe," \u2014 "),xq=n(NAe,"A",{href:!0});var Yst=s(xq);_6o=r(Yst,"MarianModel"),Yst.forEach(t),b6o=r(NAe," (Marian model)"),NAe.forEach(t),v6o=i($),Eu=n($,"LI",{});var qAe=s(Eu);Qie=n(qAe,"STRONG",{});var Kst=s(Qie);F6o=r(Kst,"maskformer"),Kst.forEach(t),T6o=r(qAe," \u2014 "),$q=n(qAe,"A",{href:!0});var Zst=s($q);M6o=r(Zst,"MaskFormerModel"),Zst.forEach(t),E6o=r(qAe," (MaskFormer model)"),qAe.forEach(t),C6o=i($),Cu=n($,"LI",{});var jAe=s(Cu);Hie=n(jAe,"STRONG",{});var elt=s(Hie);w6o=r(elt,"mbart"),elt.forEach(t),A6o=r(jAe," \u2014 "),kq=n(jAe,"A",{href:!0});var olt=s(kq);y6o=r(olt,"MBartModel"),olt.forEach(t),L6o=r(jAe," (mBART model)"),jAe.forEach(t),x6o=i($),wu=n($,"LI",{});var DAe=s(wu);Uie=n(DAe,"STRONG",{});var rlt=s(Uie);$6o=r(rlt,"mctct"),rlt.forEach(t),k6o=r(DAe," \u2014 "),Sq=n(DAe,"A",{href:!0});var tlt=s(Sq);S6o=r(tlt,"MCTCTModel"),tlt.forEach(t),R6o=r(DAe," (M-CTC-T model)"),DAe.forEach(t),P6o=i($),Au=n($,"LI",{});var GAe=s(Au);Jie=n(GAe,"STRONG",{});var alt=s(Jie);B6o=r(alt,"megatron-bert"),alt.forEach(t),I6o=r(GAe," \u2014 "),Rq=n(GAe,"A",{href:!0});var nlt=s(Rq);N6o=r(nlt,"MegatronBertModel"),nlt.forEach(t),q6o=r(GAe," (Megatron-BERT model)"),GAe.forEach(t),j6o=i($),yu=n($,"LI",{});var OAe=s(yu);Yie=n(OAe,"STRONG",{});var slt=s(Yie);D6o=r(slt,"mobilebert"),slt.forEach(t),G6o=r(OAe," \u2014 "),Pq=n(OAe,"A",{href:!0});var llt=s(Pq);O6o=r(llt,"MobileBertModel"),llt.forEach(t),V6o=r(OAe," (MobileBERT model)"),OAe.forEach(t),X6o=i($),Lu=n($,"LI",{});var VAe=s(Lu);Kie=n(VAe,"STRONG",{});var ilt=s(Kie);z6o=r(ilt,"mpnet"),ilt.forEach(t),W6o=r(VAe," \u2014 "),Bq=n(VAe,"A",{href:!0});var dlt=s(Bq);Q6o=r(dlt,"MPNetModel"),dlt.forEach(t),H6o=r(VAe," (MPNet model)"),VAe.forEach(t),U6o=i($),xu=n($,"LI",{});var XAe=s(xu);Zie=n(XAe,"STRONG",{});var clt=s(Zie);J6o=r(clt,"mt5"),clt.forEach(t),Y6o=r(XAe," \u2014 "),Iq=n(XAe,"A",{href:!0});var flt=s(Iq);K6o=r(flt,"MT5Model"),flt.forEach(t),Z6o=r(XAe," (MT5 model)"),XAe.forEach(t),eTo=i($),$u=n($,"LI",{});var zAe=s($u);ede=n(zAe,"STRONG",{});var mlt=s(ede);oTo=r(mlt,"nystromformer"),mlt.forEach(t),rTo=r(zAe," \u2014 "),Nq=n(zAe,"A",{href:!0});var glt=s(Nq);tTo=r(glt,"NystromformerModel"),glt.forEach(t),aTo=r(zAe," (Nystr\xF6mformer model)"),zAe.forEach(t),nTo=i($),ku=n($,"LI",{});var WAe=s(ku);ode=n(WAe,"STRONG",{});var hlt=s(ode);sTo=r(hlt,"openai-gpt"),hlt.forEach(t),lTo=r(WAe," \u2014 "),qq=n(WAe,"A",{href:!0});var plt=s(qq);iTo=r(plt,"OpenAIGPTModel"),plt.forEach(t),dTo=r(WAe," (OpenAI GPT model)"),WAe.forEach(t),cTo=i($),Su=n($,"LI",{});var QAe=s(Su);rde=n(QAe,"STRONG",{});var ult=s(rde);fTo=r(ult,"opt"),ult.forEach(t),mTo=r(QAe," \u2014 "),jq=n(QAe,"A",{href:!0});var _lt=s(jq);gTo=r(_lt,"OPTModel"),_lt.forEach(t),hTo=r(QAe," (OPT model)"),QAe.forEach(t),pTo=i($),Ru=n($,"LI",{});var HAe=s(Ru);tde=n(HAe,"STRONG",{});var blt=s(tde);uTo=r(blt,"pegasus"),blt.forEach(t),_To=r(HAe," \u2014 "),Dq=n(HAe,"A",{href:!0});var vlt=s(Dq);bTo=r(vlt,"PegasusModel"),vlt.forEach(t),vTo=r(HAe," (Pegasus model)"),HAe.forEach(t),FTo=i($),Pu=n($,"LI",{});var UAe=s(Pu);ade=n(UAe,"STRONG",{});var Flt=s(ade);TTo=r(Flt,"perceiver"),Flt.forEach(t),MTo=r(UAe," \u2014 "),Gq=n(UAe,"A",{href:!0});var Tlt=s(Gq);ETo=r(Tlt,"PerceiverModel"),Tlt.forEach(t),CTo=r(UAe," (Perceiver model)"),UAe.forEach(t),wTo=i($),Bu=n($,"LI",{});var JAe=s(Bu);nde=n(JAe,"STRONG",{});var Mlt=s(nde);ATo=r(Mlt,"plbart"),Mlt.forEach(t),yTo=r(JAe," \u2014 "),Oq=n(JAe,"A",{href:!0});var Elt=s(Oq);LTo=r(Elt,"PLBartModel"),Elt.forEach(t),xTo=r(JAe," (PLBart model)"),JAe.forEach(t),$To=i($),Iu=n($,"LI",{});var YAe=s(Iu);sde=n(YAe,"STRONG",{});var Clt=s(sde);kTo=r(Clt,"poolformer"),Clt.forEach(t),STo=r(YAe," \u2014 "),Vq=n(YAe,"A",{href:!0});var wlt=s(Vq);RTo=r(wlt,"PoolFormerModel"),wlt.forEach(t),PTo=r(YAe," (PoolFormer model)"),YAe.forEach(t),BTo=i($),Nu=n($,"LI",{});var KAe=s(Nu);lde=n(KAe,"STRONG",{});var Alt=s(lde);ITo=r(Alt,"prophetnet"),Alt.forEach(t),NTo=r(KAe," \u2014 "),Xq=n(KAe,"A",{href:!0});var ylt=s(Xq);qTo=r(ylt,"ProphetNetModel"),ylt.forEach(t),jTo=r(KAe," (ProphetNet model)"),KAe.forEach(t),DTo=i($),qu=n($,"LI",{});var ZAe=s(qu);ide=n(ZAe,"STRONG",{});var Llt=s(ide);GTo=r(Llt,"qdqbert"),Llt.forEach(t),OTo=r(ZAe," \u2014 "),zq=n(ZAe,"A",{href:!0});var xlt=s(zq);VTo=r(xlt,"QDQBertModel"),xlt.forEach(t),XTo=r(ZAe," (QDQBert model)"),ZAe.forEach(t),zTo=i($),ju=n($,"LI",{});var eye=s(ju);dde=n(eye,"STRONG",{});var $lt=s(dde);WTo=r($lt,"reformer"),$lt.forEach(t),QTo=r(eye," \u2014 "),Wq=n(eye,"A",{href:!0});var klt=s(Wq);HTo=r(klt,"ReformerModel"),klt.forEach(t),UTo=r(eye," (Reformer model)"),eye.forEach(t),JTo=i($),Du=n($,"LI",{});var oye=s(Du);cde=n(oye,"STRONG",{});var Slt=s(cde);YTo=r(Slt,"regnet"),Slt.forEach(t),KTo=r(oye," \u2014 "),Qq=n(oye,"A",{href:!0});var Rlt=s(Qq);ZTo=r(Rlt,"RegNetModel"),Rlt.forEach(t),e7o=r(oye," (RegNet model)"),oye.forEach(t),o7o=i($),Gu=n($,"LI",{});var rye=s(Gu);fde=n(rye,"STRONG",{});var Plt=s(fde);r7o=r(Plt,"rembert"),Plt.forEach(t),t7o=r(rye," \u2014 "),Hq=n(rye,"A",{href:!0});var Blt=s(Hq);a7o=r(Blt,"RemBertModel"),Blt.forEach(t),n7o=r(rye," (RemBERT model)"),rye.forEach(t),s7o=i($),Ou=n($,"LI",{});var tye=s(Ou);mde=n(tye,"STRONG",{});var Ilt=s(mde);l7o=r(Ilt,"resnet"),Ilt.forEach(t),i7o=r(tye," \u2014 "),Uq=n(tye,"A",{href:!0});var Nlt=s(Uq);d7o=r(Nlt,"ResNetModel"),Nlt.forEach(t),c7o=r(tye," (ResNet model)"),tye.forEach(t),f7o=i($),Vu=n($,"LI",{});var aye=s(Vu);gde=n(aye,"STRONG",{});var qlt=s(gde);m7o=r(qlt,"retribert"),qlt.forEach(t),g7o=r(aye," \u2014 "),Jq=n(aye,"A",{href:!0});var jlt=s(Jq);h7o=r(jlt,"RetriBertModel"),jlt.forEach(t),p7o=r(aye," (RetriBERT model)"),aye.forEach(t),u7o=i($),Xu=n($,"LI",{});var nye=s(Xu);hde=n(nye,"STRONG",{});var Dlt=s(hde);_7o=r(Dlt,"roberta"),Dlt.forEach(t),b7o=r(nye," \u2014 "),Yq=n(nye,"A",{href:!0});var Glt=s(Yq);v7o=r(Glt,"RobertaModel"),Glt.forEach(t),F7o=r(nye," (RoBERTa model)"),nye.forEach(t),T7o=i($),zu=n($,"LI",{});var sye=s(zu);pde=n(sye,"STRONG",{});var Olt=s(pde);M7o=r(Olt,"roformer"),Olt.forEach(t),E7o=r(sye," \u2014 "),Kq=n(sye,"A",{href:!0});var Vlt=s(Kq);C7o=r(Vlt,"RoFormerModel"),Vlt.forEach(t),w7o=r(sye," (RoFormer model)"),sye.forEach(t),A7o=i($),Wu=n($,"LI",{});var lye=s(Wu);ude=n(lye,"STRONG",{});var Xlt=s(ude);y7o=r(Xlt,"segformer"),Xlt.forEach(t),L7o=r(lye," \u2014 "),Zq=n(lye,"A",{href:!0});var zlt=s(Zq);x7o=r(zlt,"SegformerModel"),zlt.forEach(t),$7o=r(lye," (SegFormer model)"),lye.forEach(t),k7o=i($),Qu=n($,"LI",{});var iye=s(Qu);_de=n(iye,"STRONG",{});var Wlt=s(_de);S7o=r(Wlt,"sew"),Wlt.forEach(t),R7o=r(iye," \u2014 "),ej=n(iye,"A",{href:!0});var Qlt=s(ej);P7o=r(Qlt,"SEWModel"),Qlt.forEach(t),B7o=r(iye," (SEW model)"),iye.forEach(t),I7o=i($),Hu=n($,"LI",{});var dye=s(Hu);bde=n(dye,"STRONG",{});var Hlt=s(bde);N7o=r(Hlt,"sew-d"),Hlt.forEach(t),q7o=r(dye," \u2014 "),oj=n(dye,"A",{href:!0});var Ult=s(oj);j7o=r(Ult,"SEWDModel"),Ult.forEach(t),D7o=r(dye," (SEW-D model)"),dye.forEach(t),G7o=i($),Uu=n($,"LI",{});var cye=s(Uu);vde=n(cye,"STRONG",{});var Jlt=s(vde);O7o=r(Jlt,"speech_to_text"),Jlt.forEach(t),V7o=r(cye," \u2014 "),rj=n(cye,"A",{href:!0});var Ylt=s(rj);X7o=r(Ylt,"Speech2TextModel"),Ylt.forEach(t),z7o=r(cye," (Speech2Text model)"),cye.forEach(t),W7o=i($),Ju=n($,"LI",{});var fye=s(Ju);Fde=n(fye,"STRONG",{});var Klt=s(Fde);Q7o=r(Klt,"splinter"),Klt.forEach(t),H7o=r(fye," \u2014 "),tj=n(fye,"A",{href:!0});var Zlt=s(tj);U7o=r(Zlt,"SplinterModel"),Zlt.forEach(t),J7o=r(fye," (Splinter model)"),fye.forEach(t),Y7o=i($),Yu=n($,"LI",{});var mye=s(Yu);Tde=n(mye,"STRONG",{});var eit=s(Tde);K7o=r(eit,"squeezebert"),eit.forEach(t),Z7o=r(mye," \u2014 "),aj=n(mye,"A",{href:!0});var oit=s(aj);e8o=r(oit,"SqueezeBertModel"),oit.forEach(t),o8o=r(mye," (SqueezeBERT model)"),mye.forEach(t),r8o=i($),Ku=n($,"LI",{});var gye=s(Ku);Mde=n(gye,"STRONG",{});var rit=s(Mde);t8o=r(rit,"swin"),rit.forEach(t),a8o=r(gye," \u2014 "),nj=n(gye,"A",{href:!0});var tit=s(nj);n8o=r(tit,"SwinModel"),tit.forEach(t),s8o=r(gye," (Swin Transformer model)"),gye.forEach(t),l8o=i($),Zu=n($,"LI",{});var hye=s(Zu);Ede=n(hye,"STRONG",{});var ait=s(Ede);i8o=r(ait,"t5"),ait.forEach(t),d8o=r(hye," \u2014 "),sj=n(hye,"A",{href:!0});var nit=s(sj);c8o=r(nit,"T5Model"),nit.forEach(t),f8o=r(hye," (T5 model)"),hye.forEach(t),m8o=i($),e_=n($,"LI",{});var pye=s(e_);Cde=n(pye,"STRONG",{});var sit=s(Cde);g8o=r(sit,"tapas"),sit.forEach(t),h8o=r(pye," \u2014 "),lj=n(pye,"A",{href:!0});var lit=s(lj);p8o=r(lit,"TapasModel"),lit.forEach(t),u8o=r(pye," (TAPAS model)"),pye.forEach(t),_8o=i($),o_=n($,"LI",{});var uye=s(o_);wde=n(uye,"STRONG",{});var iit=s(wde);b8o=r(iit,"trajectory_transformer"),iit.forEach(t),v8o=r(uye," \u2014 "),ij=n(uye,"A",{href:!0});var dit=s(ij);F8o=r(dit,"TrajectoryTransformerModel"),dit.forEach(t),T8o=r(uye," (Trajectory Transformer model)"),uye.forEach(t),M8o=i($),r_=n($,"LI",{});var _ye=s(r_);Ade=n(_ye,"STRONG",{});var cit=s(Ade);E8o=r(cit,"transfo-xl"),cit.forEach(t),C8o=r(_ye," \u2014 "),dj=n(_ye,"A",{href:!0});var fit=s(dj);w8o=r(fit,"TransfoXLModel"),fit.forEach(t),A8o=r(_ye," (Transformer-XL model)"),_ye.forEach(t),y8o=i($),t_=n($,"LI",{});var bye=s(t_);yde=n(bye,"STRONG",{});var mit=s(yde);L8o=r(mit,"unispeech"),mit.forEach(t),x8o=r(bye," \u2014 "),cj=n(bye,"A",{href:!0});var git=s(cj);$8o=r(git,"UniSpeechModel"),git.forEach(t),k8o=r(bye," (UniSpeech model)"),bye.forEach(t),S8o=i($),a_=n($,"LI",{});var vye=s(a_);Lde=n(vye,"STRONG",{});var hit=s(Lde);R8o=r(hit,"unispeech-sat"),hit.forEach(t),P8o=r(vye," \u2014 "),fj=n(vye,"A",{href:!0});var pit=s(fj);B8o=r(pit,"UniSpeechSatModel"),pit.forEach(t),I8o=r(vye," (UniSpeechSat model)"),vye.forEach(t),N8o=i($),n_=n($,"LI",{});var Fye=s(n_);xde=n(Fye,"STRONG",{});var uit=s(xde);q8o=r(uit,"van"),uit.forEach(t),j8o=r(Fye," \u2014 "),mj=n(Fye,"A",{href:!0});var _it=s(mj);D8o=r(_it,"VanModel"),_it.forEach(t),G8o=r(Fye," (VAN model)"),Fye.forEach(t),O8o=i($),s_=n($,"LI",{});var Tye=s(s_);$de=n(Tye,"STRONG",{});var bit=s($de);V8o=r(bit,"vilt"),bit.forEach(t),X8o=r(Tye," \u2014 "),gj=n(Tye,"A",{href:!0});var vit=s(gj);z8o=r(vit,"ViltModel"),vit.forEach(t),W8o=r(Tye," (ViLT model)"),Tye.forEach(t),Q8o=i($),l_=n($,"LI",{});var Mye=s(l_);kde=n(Mye,"STRONG",{});var Fit=s(kde);H8o=r(Fit,"vision-text-dual-encoder"),Fit.forEach(t),U8o=r(Mye," \u2014 "),hj=n(Mye,"A",{href:!0});var Tit=s(hj);J8o=r(Tit,"VisionTextDualEncoderModel"),Tit.forEach(t),Y8o=r(Mye," (VisionTextDualEncoder model)"),Mye.forEach(t),K8o=i($),i_=n($,"LI",{});var Eye=s(i_);Sde=n(Eye,"STRONG",{});var Mit=s(Sde);Z8o=r(Mit,"visual_bert"),Mit.forEach(t),e9o=r(Eye," \u2014 "),pj=n(Eye,"A",{href:!0});var Eit=s(pj);o9o=r(Eit,"VisualBertModel"),Eit.forEach(t),r9o=r(Eye," (VisualBERT model)"),Eye.forEach(t),t9o=i($),d_=n($,"LI",{});var Cye=s(d_);Rde=n(Cye,"STRONG",{});var Cit=s(Rde);a9o=r(Cit,"vit"),Cit.forEach(t),n9o=r(Cye," \u2014 "),uj=n(Cye,"A",{href:!0});var wit=s(uj);s9o=r(wit,"ViTModel"),wit.forEach(t),l9o=r(Cye," (ViT model)"),Cye.forEach(t),i9o=i($),c_=n($,"LI",{});var wye=s(c_);Pde=n(wye,"STRONG",{});var Ait=s(Pde);d9o=r(Ait,"vit_mae"),Ait.forEach(t),c9o=r(wye," \u2014 "),_j=n(wye,"A",{href:!0});var yit=s(_j);f9o=r(yit,"ViTMAEModel"),yit.forEach(t),m9o=r(wye," (ViTMAE model)"),wye.forEach(t),g9o=i($),f_=n($,"LI",{});var Aye=s(f_);Bde=n(Aye,"STRONG",{});var Lit=s(Bde);h9o=r(Lit,"wav2vec2"),Lit.forEach(t),p9o=r(Aye," \u2014 "),bj=n(Aye,"A",{href:!0});var xit=s(bj);u9o=r(xit,"Wav2Vec2Model"),xit.forEach(t),_9o=r(Aye," (Wav2Vec2 model)"),Aye.forEach(t),b9o=i($),m_=n($,"LI",{});var yye=s(m_);Ide=n(yye,"STRONG",{});var $it=s(Ide);v9o=r($it,"wav2vec2-conformer"),$it.forEach(t),F9o=r(yye," \u2014 "),vj=n(yye,"A",{href:!0});var kit=s(vj);T9o=r(kit,"Wav2Vec2ConformerModel"),kit.forEach(t),M9o=r(yye," (Wav2Vec2-Conformer model)"),yye.forEach(t),E9o=i($),g_=n($,"LI",{});var Lye=s(g_);Nde=n(Lye,"STRONG",{});var Sit=s(Nde);C9o=r(Sit,"wavlm"),Sit.forEach(t),w9o=r(Lye," \u2014 "),Fj=n(Lye,"A",{href:!0});var Rit=s(Fj);A9o=r(Rit,"WavLMModel"),Rit.forEach(t),y9o=r(Lye," (WavLM model)"),Lye.forEach(t),L9o=i($),h_=n($,"LI",{});var xye=s(h_);qde=n(xye,"STRONG",{});var Pit=s(qde);x9o=r(Pit,"xglm"),Pit.forEach(t),$9o=r(xye," \u2014 "),Tj=n(xye,"A",{href:!0});var Bit=s(Tj);k9o=r(Bit,"XGLMModel"),Bit.forEach(t),S9o=r(xye," (XGLM model)"),xye.forEach(t),R9o=i($),p_=n($,"LI",{});var $ye=s(p_);jde=n($ye,"STRONG",{});var Iit=s(jde);P9o=r(Iit,"xlm"),Iit.forEach(t),B9o=r($ye," \u2014 "),Mj=n($ye,"A",{href:!0});var Nit=s(Mj);I9o=r(Nit,"XLMModel"),Nit.forEach(t),N9o=r($ye," (XLM model)"),$ye.forEach(t),q9o=i($),u_=n($,"LI",{});var kye=s(u_);Dde=n(kye,"STRONG",{});var qit=s(Dde);j9o=r(qit,"xlm-prophetnet"),qit.forEach(t),D9o=r(kye," \u2014 "),Ej=n(kye,"A",{href:!0});var jit=s(Ej);G9o=r(jit,"XLMProphetNetModel"),jit.forEach(t),O9o=r(kye," (XLM-ProphetNet model)"),kye.forEach(t),V9o=i($),__=n($,"LI",{});var Sye=s(__);Gde=n(Sye,"STRONG",{});var Dit=s(Gde);X9o=r(Dit,"xlm-roberta"),Dit.forEach(t),z9o=r(Sye," \u2014 "),Cj=n(Sye,"A",{href:!0});var Git=s(Cj);W9o=r(Git,"XLMRobertaModel"),Git.forEach(t),Q9o=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),H9o=i($),b_=n($,"LI",{});var Rye=s(b_);Ode=n(Rye,"STRONG",{});var Oit=s(Ode);U9o=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),J9o=r(Rye," \u2014 "),wj=n(Rye,"A",{href:!0});var Vit=s(wj);Y9o=r(Vit,"XLMRobertaXLModel"),Vit.forEach(t),K9o=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),Z9o=i($),v_=n($,"LI",{});var Pye=s(v_);Vde=n(Pye,"STRONG",{});var Xit=s(Vde);eMo=r(Xit,"xlnet"),Xit.forEach(t),oMo=r(Pye," \u2014 "),Aj=n(Pye,"A",{href:!0});var zit=s(Aj);rMo=r(zit,"XLNetModel"),zit.forEach(t),tMo=r(Pye," (XLNet model)"),Pye.forEach(t),aMo=i($),F_=n($,"LI",{});var Bye=s(F_);Xde=n(Bye,"STRONG",{});var Wit=s(Xde);nMo=r(Wit,"yolos"),Wit.forEach(t),sMo=r(Bye," \u2014 "),yj=n(Bye,"A",{href:!0});var Qit=s(yj);lMo=r(Qit,"YolosModel"),Qit.forEach(t),iMo=r(Bye," (YOLOS model)"),Bye.forEach(t),dMo=i($),T_=n($,"LI",{});var Iye=s(T_);zde=n(Iye,"STRONG",{});var Hit=s(zde);cMo=r(Hit,"yoso"),Hit.forEach(t),fMo=r(Iye," \u2014 "),Lj=n(Iye,"A",{href:!0});var Uit=s(Lj);mMo=r(Uit,"YosoModel"),Uit.forEach(t),gMo=r(Iye," (YOSO model)"),Iye.forEach(t),$.forEach(t),hMo=i(aa),M_=n(aa,"P",{});var Nye=s(M_);pMo=r(Nye,"The model is set in evaluation mode by default using "),Wde=n(Nye,"CODE",{});var Jit=s(Wde);uMo=r(Jit,"model.eval()"),Jit.forEach(t),_Mo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=n(Nye,"CODE",{});var Yit=s(Qde);bMo=r(Yit,"model.train()"),Yit.forEach(t),Nye.forEach(t),vMo=i(aa),T(E_.$$.fragment,aa),aa.forEach(t),Hs.forEach(t),$De=i(f),Ii=n(f,"H2",{class:!0});var IOe=s(Ii);C_=n(IOe,"A",{id:!0,class:!0,href:!0});var Kit=s(C_);Hde=n(Kit,"SPAN",{});var Zit=s(Hde);T(G0.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),FMo=i(IOe),Ude=n(IOe,"SPAN",{});var edt=s(Ude);TMo=r(edt,"AutoModelForPreTraining"),edt.forEach(t),IOe.forEach(t),kDe=i(f),$o=n(f,"DIV",{class:!0});var Us=s($o);T(O0.$$.fragment,Us),MMo=i(Us),Ni=n(Us,"P",{});var Ree=s(Ni);EMo=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xj=n(Ree,"A",{href:!0});var odt=s(xj);CMo=r(odt,"from_pretrained()"),odt.forEach(t),wMo=r(Ree," class method or the "),$j=n(Ree,"A",{href:!0});var rdt=s($j);AMo=r(rdt,"from_config()"),rdt.forEach(t),yMo=r(Ree,` class
method.`),Ree.forEach(t),LMo=i(Us),V0=n(Us,"P",{});var NOe=s(V0);xMo=r(NOe,"This class cannot be instantiated directly using "),Jde=n(NOe,"CODE",{});var tdt=s(Jde);$Mo=r(tdt,"__init__()"),tdt.forEach(t),kMo=r(NOe," (throws an error)."),NOe.forEach(t),SMo=i(Us),st=n(Us,"DIV",{class:!0});var h3=s(st);T(X0.$$.fragment,h3),RMo=i(h3),Yde=n(h3,"P",{});var adt=s(Yde);PMo=r(adt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),adt.forEach(t),BMo=i(h3),qi=n(h3,"P",{});var Pee=s(qi);IMo=r(Pee,`Note:
Loading a model from its configuration file does `),Kde=n(Pee,"STRONG",{});var ndt=s(Kde);NMo=r(ndt,"not"),ndt.forEach(t),qMo=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(Pee,"A",{href:!0});var sdt=s(kj);jMo=r(sdt,"from_pretrained()"),sdt.forEach(t),DMo=r(Pee," to load the model weights."),Pee.forEach(t),GMo=i(h3),T(w_.$$.fragment,h3),h3.forEach(t),OMo=i(Us),Ye=n(Us,"DIV",{class:!0});var na=s(Ye);T(z0.$$.fragment,na),VMo=i(na),Zde=n(na,"P",{});var ldt=s(Zde);XMo=r(ldt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ldt.forEach(t),zMo=i(na),Ra=n(na,"P",{});var p3=s(Ra);WMo=r(p3,"The model class to instantiate is selected based on the "),ece=n(p3,"CODE",{});var idt=s(ece);QMo=r(idt,"model_type"),idt.forEach(t),HMo=r(p3,` property of the config object (either
passed as an argument or loaded from `),oce=n(p3,"CODE",{});var ddt=s(oce);UMo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),JMo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(p3,"CODE",{});var cdt=s(rce);YMo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),KMo=r(p3,":"),p3.forEach(t),ZMo=i(na),G=n(na,"UL",{});var O=s(G);A_=n(O,"LI",{});var qye=s(A_);tce=n(qye,"STRONG",{});var fdt=s(tce);e4o=r(fdt,"albert"),fdt.forEach(t),o4o=r(qye," \u2014 "),Sj=n(qye,"A",{href:!0});var mdt=s(Sj);r4o=r(mdt,"AlbertForPreTraining"),mdt.forEach(t),t4o=r(qye," (ALBERT model)"),qye.forEach(t),a4o=i(O),y_=n(O,"LI",{});var jye=s(y_);ace=n(jye,"STRONG",{});var gdt=s(ace);n4o=r(gdt,"bart"),gdt.forEach(t),s4o=r(jye," \u2014 "),Rj=n(jye,"A",{href:!0});var hdt=s(Rj);l4o=r(hdt,"BartForConditionalGeneration"),hdt.forEach(t),i4o=r(jye," (BART model)"),jye.forEach(t),d4o=i(O),L_=n(O,"LI",{});var Dye=s(L_);nce=n(Dye,"STRONG",{});var pdt=s(nce);c4o=r(pdt,"bert"),pdt.forEach(t),f4o=r(Dye," \u2014 "),Pj=n(Dye,"A",{href:!0});var udt=s(Pj);m4o=r(udt,"BertForPreTraining"),udt.forEach(t),g4o=r(Dye," (BERT model)"),Dye.forEach(t),h4o=i(O),x_=n(O,"LI",{});var Gye=s(x_);sce=n(Gye,"STRONG",{});var _dt=s(sce);p4o=r(_dt,"big_bird"),_dt.forEach(t),u4o=r(Gye," \u2014 "),Bj=n(Gye,"A",{href:!0});var bdt=s(Bj);_4o=r(bdt,"BigBirdForPreTraining"),bdt.forEach(t),b4o=r(Gye," (BigBird model)"),Gye.forEach(t),v4o=i(O),$_=n(O,"LI",{});var Oye=s($_);lce=n(Oye,"STRONG",{});var vdt=s(lce);F4o=r(vdt,"bloom"),vdt.forEach(t),T4o=r(Oye," \u2014 "),Ij=n(Oye,"A",{href:!0});var Fdt=s(Ij);M4o=r(Fdt,"BloomForCausalLM"),Fdt.forEach(t),E4o=r(Oye," (BLOOM model)"),Oye.forEach(t),C4o=i(O),k_=n(O,"LI",{});var Vye=s(k_);ice=n(Vye,"STRONG",{});var Tdt=s(ice);w4o=r(Tdt,"camembert"),Tdt.forEach(t),A4o=r(Vye," \u2014 "),Nj=n(Vye,"A",{href:!0});var Mdt=s(Nj);y4o=r(Mdt,"CamembertForMaskedLM"),Mdt.forEach(t),L4o=r(Vye," (CamemBERT model)"),Vye.forEach(t),x4o=i(O),S_=n(O,"LI",{});var Xye=s(S_);dce=n(Xye,"STRONG",{});var Edt=s(dce);$4o=r(Edt,"ctrl"),Edt.forEach(t),k4o=r(Xye," \u2014 "),qj=n(Xye,"A",{href:!0});var Cdt=s(qj);S4o=r(Cdt,"CTRLLMHeadModel"),Cdt.forEach(t),R4o=r(Xye," (CTRL model)"),Xye.forEach(t),P4o=i(O),R_=n(O,"LI",{});var zye=s(R_);cce=n(zye,"STRONG",{});var wdt=s(cce);B4o=r(wdt,"data2vec-text"),wdt.forEach(t),I4o=r(zye," \u2014 "),jj=n(zye,"A",{href:!0});var Adt=s(jj);N4o=r(Adt,"Data2VecTextForMaskedLM"),Adt.forEach(t),q4o=r(zye," (Data2VecText model)"),zye.forEach(t),j4o=i(O),P_=n(O,"LI",{});var Wye=s(P_);fce=n(Wye,"STRONG",{});var ydt=s(fce);D4o=r(ydt,"deberta"),ydt.forEach(t),G4o=r(Wye," \u2014 "),Dj=n(Wye,"A",{href:!0});var Ldt=s(Dj);O4o=r(Ldt,"DebertaForMaskedLM"),Ldt.forEach(t),V4o=r(Wye," (DeBERTa model)"),Wye.forEach(t),X4o=i(O),B_=n(O,"LI",{});var Qye=s(B_);mce=n(Qye,"STRONG",{});var xdt=s(mce);z4o=r(xdt,"deberta-v2"),xdt.forEach(t),W4o=r(Qye," \u2014 "),Gj=n(Qye,"A",{href:!0});var $dt=s(Gj);Q4o=r($dt,"DebertaV2ForMaskedLM"),$dt.forEach(t),H4o=r(Qye," (DeBERTa-v2 model)"),Qye.forEach(t),U4o=i(O),I_=n(O,"LI",{});var Hye=s(I_);gce=n(Hye,"STRONG",{});var kdt=s(gce);J4o=r(kdt,"distilbert"),kdt.forEach(t),Y4o=r(Hye," \u2014 "),Oj=n(Hye,"A",{href:!0});var Sdt=s(Oj);K4o=r(Sdt,"DistilBertForMaskedLM"),Sdt.forEach(t),Z4o=r(Hye," (DistilBERT model)"),Hye.forEach(t),eEo=i(O),N_=n(O,"LI",{});var Uye=s(N_);hce=n(Uye,"STRONG",{});var Rdt=s(hce);oEo=r(Rdt,"electra"),Rdt.forEach(t),rEo=r(Uye," \u2014 "),Vj=n(Uye,"A",{href:!0});var Pdt=s(Vj);tEo=r(Pdt,"ElectraForPreTraining"),Pdt.forEach(t),aEo=r(Uye," (ELECTRA model)"),Uye.forEach(t),nEo=i(O),q_=n(O,"LI",{});var Jye=s(q_);pce=n(Jye,"STRONG",{});var Bdt=s(pce);sEo=r(Bdt,"flaubert"),Bdt.forEach(t),lEo=r(Jye," \u2014 "),Xj=n(Jye,"A",{href:!0});var Idt=s(Xj);iEo=r(Idt,"FlaubertWithLMHeadModel"),Idt.forEach(t),dEo=r(Jye," (FlauBERT model)"),Jye.forEach(t),cEo=i(O),j_=n(O,"LI",{});var Yye=s(j_);uce=n(Yye,"STRONG",{});var Ndt=s(uce);fEo=r(Ndt,"flava"),Ndt.forEach(t),mEo=r(Yye," \u2014 "),zj=n(Yye,"A",{href:!0});var qdt=s(zj);gEo=r(qdt,"FlavaForPreTraining"),qdt.forEach(t),hEo=r(Yye," (FLAVA model)"),Yye.forEach(t),pEo=i(O),D_=n(O,"LI",{});var Kye=s(D_);_ce=n(Kye,"STRONG",{});var jdt=s(_ce);uEo=r(jdt,"fnet"),jdt.forEach(t),_Eo=r(Kye," \u2014 "),Wj=n(Kye,"A",{href:!0});var Ddt=s(Wj);bEo=r(Ddt,"FNetForPreTraining"),Ddt.forEach(t),vEo=r(Kye," (FNet model)"),Kye.forEach(t),FEo=i(O),G_=n(O,"LI",{});var Zye=s(G_);bce=n(Zye,"STRONG",{});var Gdt=s(bce);TEo=r(Gdt,"fsmt"),Gdt.forEach(t),MEo=r(Zye," \u2014 "),Qj=n(Zye,"A",{href:!0});var Odt=s(Qj);EEo=r(Odt,"FSMTForConditionalGeneration"),Odt.forEach(t),CEo=r(Zye," (FairSeq Machine-Translation model)"),Zye.forEach(t),wEo=i(O),O_=n(O,"LI",{});var eLe=s(O_);vce=n(eLe,"STRONG",{});var Vdt=s(vce);AEo=r(Vdt,"funnel"),Vdt.forEach(t),yEo=r(eLe," \u2014 "),Hj=n(eLe,"A",{href:!0});var Xdt=s(Hj);LEo=r(Xdt,"FunnelForPreTraining"),Xdt.forEach(t),xEo=r(eLe," (Funnel Transformer model)"),eLe.forEach(t),$Eo=i(O),V_=n(O,"LI",{});var oLe=s(V_);Fce=n(oLe,"STRONG",{});var zdt=s(Fce);kEo=r(zdt,"gpt2"),zdt.forEach(t),SEo=r(oLe," \u2014 "),Uj=n(oLe,"A",{href:!0});var Wdt=s(Uj);REo=r(Wdt,"GPT2LMHeadModel"),Wdt.forEach(t),PEo=r(oLe," (OpenAI GPT-2 model)"),oLe.forEach(t),BEo=i(O),X_=n(O,"LI",{});var rLe=s(X_);Tce=n(rLe,"STRONG",{});var Qdt=s(Tce);IEo=r(Qdt,"ibert"),Qdt.forEach(t),NEo=r(rLe," \u2014 "),Jj=n(rLe,"A",{href:!0});var Hdt=s(Jj);qEo=r(Hdt,"IBertForMaskedLM"),Hdt.forEach(t),jEo=r(rLe," (I-BERT model)"),rLe.forEach(t),DEo=i(O),z_=n(O,"LI",{});var tLe=s(z_);Mce=n(tLe,"STRONG",{});var Udt=s(Mce);GEo=r(Udt,"layoutlm"),Udt.forEach(t),OEo=r(tLe," \u2014 "),Yj=n(tLe,"A",{href:!0});var Jdt=s(Yj);VEo=r(Jdt,"LayoutLMForMaskedLM"),Jdt.forEach(t),XEo=r(tLe," (LayoutLM model)"),tLe.forEach(t),zEo=i(O),W_=n(O,"LI",{});var aLe=s(W_);Ece=n(aLe,"STRONG",{});var Ydt=s(Ece);WEo=r(Ydt,"longformer"),Ydt.forEach(t),QEo=r(aLe," \u2014 "),Kj=n(aLe,"A",{href:!0});var Kdt=s(Kj);HEo=r(Kdt,"LongformerForMaskedLM"),Kdt.forEach(t),UEo=r(aLe," (Longformer model)"),aLe.forEach(t),JEo=i(O),Q_=n(O,"LI",{});var nLe=s(Q_);Cce=n(nLe,"STRONG",{});var Zdt=s(Cce);YEo=r(Zdt,"lxmert"),Zdt.forEach(t),KEo=r(nLe," \u2014 "),Zj=n(nLe,"A",{href:!0});var ect=s(Zj);ZEo=r(ect,"LxmertForPreTraining"),ect.forEach(t),eCo=r(nLe," (LXMERT model)"),nLe.forEach(t),oCo=i(O),H_=n(O,"LI",{});var sLe=s(H_);wce=n(sLe,"STRONG",{});var oct=s(wce);rCo=r(oct,"megatron-bert"),oct.forEach(t),tCo=r(sLe," \u2014 "),eD=n(sLe,"A",{href:!0});var rct=s(eD);aCo=r(rct,"MegatronBertForPreTraining"),rct.forEach(t),nCo=r(sLe," (Megatron-BERT model)"),sLe.forEach(t),sCo=i(O),U_=n(O,"LI",{});var lLe=s(U_);Ace=n(lLe,"STRONG",{});var tct=s(Ace);lCo=r(tct,"mobilebert"),tct.forEach(t),iCo=r(lLe," \u2014 "),oD=n(lLe,"A",{href:!0});var act=s(oD);dCo=r(act,"MobileBertForPreTraining"),act.forEach(t),cCo=r(lLe," (MobileBERT model)"),lLe.forEach(t),fCo=i(O),J_=n(O,"LI",{});var iLe=s(J_);yce=n(iLe,"STRONG",{});var nct=s(yce);mCo=r(nct,"mpnet"),nct.forEach(t),gCo=r(iLe," \u2014 "),rD=n(iLe,"A",{href:!0});var sct=s(rD);hCo=r(sct,"MPNetForMaskedLM"),sct.forEach(t),pCo=r(iLe," (MPNet model)"),iLe.forEach(t),uCo=i(O),Y_=n(O,"LI",{});var dLe=s(Y_);Lce=n(dLe,"STRONG",{});var lct=s(Lce);_Co=r(lct,"openai-gpt"),lct.forEach(t),bCo=r(dLe," \u2014 "),tD=n(dLe,"A",{href:!0});var ict=s(tD);vCo=r(ict,"OpenAIGPTLMHeadModel"),ict.forEach(t),FCo=r(dLe," (OpenAI GPT model)"),dLe.forEach(t),TCo=i(O),K_=n(O,"LI",{});var cLe=s(K_);xce=n(cLe,"STRONG",{});var dct=s(xce);MCo=r(dct,"retribert"),dct.forEach(t),ECo=r(cLe," \u2014 "),aD=n(cLe,"A",{href:!0});var cct=s(aD);CCo=r(cct,"RetriBertModel"),cct.forEach(t),wCo=r(cLe," (RetriBERT model)"),cLe.forEach(t),ACo=i(O),Z_=n(O,"LI",{});var fLe=s(Z_);$ce=n(fLe,"STRONG",{});var fct=s($ce);yCo=r(fct,"roberta"),fct.forEach(t),LCo=r(fLe," \u2014 "),nD=n(fLe,"A",{href:!0});var mct=s(nD);xCo=r(mct,"RobertaForMaskedLM"),mct.forEach(t),$Co=r(fLe," (RoBERTa model)"),fLe.forEach(t),kCo=i(O),e1=n(O,"LI",{});var mLe=s(e1);kce=n(mLe,"STRONG",{});var gct=s(kce);SCo=r(gct,"splinter"),gct.forEach(t),RCo=r(mLe," \u2014 "),sD=n(mLe,"A",{href:!0});var hct=s(sD);PCo=r(hct,"SplinterForPreTraining"),hct.forEach(t),BCo=r(mLe," (Splinter model)"),mLe.forEach(t),ICo=i(O),o1=n(O,"LI",{});var gLe=s(o1);Sce=n(gLe,"STRONG",{});var pct=s(Sce);NCo=r(pct,"squeezebert"),pct.forEach(t),qCo=r(gLe," \u2014 "),lD=n(gLe,"A",{href:!0});var uct=s(lD);jCo=r(uct,"SqueezeBertForMaskedLM"),uct.forEach(t),DCo=r(gLe," (SqueezeBERT model)"),gLe.forEach(t),GCo=i(O),r1=n(O,"LI",{});var hLe=s(r1);Rce=n(hLe,"STRONG",{});var _ct=s(Rce);OCo=r(_ct,"t5"),_ct.forEach(t),VCo=r(hLe," \u2014 "),iD=n(hLe,"A",{href:!0});var bct=s(iD);XCo=r(bct,"T5ForConditionalGeneration"),bct.forEach(t),zCo=r(hLe," (T5 model)"),hLe.forEach(t),WCo=i(O),t1=n(O,"LI",{});var pLe=s(t1);Pce=n(pLe,"STRONG",{});var vct=s(Pce);QCo=r(vct,"tapas"),vct.forEach(t),HCo=r(pLe," \u2014 "),dD=n(pLe,"A",{href:!0});var Fct=s(dD);UCo=r(Fct,"TapasForMaskedLM"),Fct.forEach(t),JCo=r(pLe," (TAPAS model)"),pLe.forEach(t),YCo=i(O),a1=n(O,"LI",{});var uLe=s(a1);Bce=n(uLe,"STRONG",{});var Tct=s(Bce);KCo=r(Tct,"transfo-xl"),Tct.forEach(t),ZCo=r(uLe," \u2014 "),cD=n(uLe,"A",{href:!0});var Mct=s(cD);e5o=r(Mct,"TransfoXLLMHeadModel"),Mct.forEach(t),o5o=r(uLe," (Transformer-XL model)"),uLe.forEach(t),r5o=i(O),n1=n(O,"LI",{});var _Le=s(n1);Ice=n(_Le,"STRONG",{});var Ect=s(Ice);t5o=r(Ect,"unispeech"),Ect.forEach(t),a5o=r(_Le," \u2014 "),fD=n(_Le,"A",{href:!0});var Cct=s(fD);n5o=r(Cct,"UniSpeechForPreTraining"),Cct.forEach(t),s5o=r(_Le," (UniSpeech model)"),_Le.forEach(t),l5o=i(O),s1=n(O,"LI",{});var bLe=s(s1);Nce=n(bLe,"STRONG",{});var wct=s(Nce);i5o=r(wct,"unispeech-sat"),wct.forEach(t),d5o=r(bLe," \u2014 "),mD=n(bLe,"A",{href:!0});var Act=s(mD);c5o=r(Act,"UniSpeechSatForPreTraining"),Act.forEach(t),f5o=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),m5o=i(O),l1=n(O,"LI",{});var vLe=s(l1);qce=n(vLe,"STRONG",{});var yct=s(qce);g5o=r(yct,"visual_bert"),yct.forEach(t),h5o=r(vLe," \u2014 "),gD=n(vLe,"A",{href:!0});var Lct=s(gD);p5o=r(Lct,"VisualBertForPreTraining"),Lct.forEach(t),u5o=r(vLe," (VisualBERT model)"),vLe.forEach(t),_5o=i(O),i1=n(O,"LI",{});var FLe=s(i1);jce=n(FLe,"STRONG",{});var xct=s(jce);b5o=r(xct,"vit_mae"),xct.forEach(t),v5o=r(FLe," \u2014 "),hD=n(FLe,"A",{href:!0});var $ct=s(hD);F5o=r($ct,"ViTMAEForPreTraining"),$ct.forEach(t),T5o=r(FLe," (ViTMAE model)"),FLe.forEach(t),M5o=i(O),d1=n(O,"LI",{});var TLe=s(d1);Dce=n(TLe,"STRONG",{});var kct=s(Dce);E5o=r(kct,"wav2vec2"),kct.forEach(t),C5o=r(TLe," \u2014 "),pD=n(TLe,"A",{href:!0});var Sct=s(pD);w5o=r(Sct,"Wav2Vec2ForPreTraining"),Sct.forEach(t),A5o=r(TLe," (Wav2Vec2 model)"),TLe.forEach(t),y5o=i(O),c1=n(O,"LI",{});var MLe=s(c1);Gce=n(MLe,"STRONG",{});var Rct=s(Gce);L5o=r(Rct,"wav2vec2-conformer"),Rct.forEach(t),x5o=r(MLe," \u2014 "),uD=n(MLe,"A",{href:!0});var Pct=s(uD);$5o=r(Pct,"Wav2Vec2ConformerForPreTraining"),Pct.forEach(t),k5o=r(MLe," (Wav2Vec2-Conformer model)"),MLe.forEach(t),S5o=i(O),f1=n(O,"LI",{});var ELe=s(f1);Oce=n(ELe,"STRONG",{});var Bct=s(Oce);R5o=r(Bct,"xlm"),Bct.forEach(t),P5o=r(ELe," \u2014 "),_D=n(ELe,"A",{href:!0});var Ict=s(_D);B5o=r(Ict,"XLMWithLMHeadModel"),Ict.forEach(t),I5o=r(ELe," (XLM model)"),ELe.forEach(t),N5o=i(O),m1=n(O,"LI",{});var CLe=s(m1);Vce=n(CLe,"STRONG",{});var Nct=s(Vce);q5o=r(Nct,"xlm-roberta"),Nct.forEach(t),j5o=r(CLe," \u2014 "),bD=n(CLe,"A",{href:!0});var qct=s(bD);D5o=r(qct,"XLMRobertaForMaskedLM"),qct.forEach(t),G5o=r(CLe," (XLM-RoBERTa model)"),CLe.forEach(t),O5o=i(O),g1=n(O,"LI",{});var wLe=s(g1);Xce=n(wLe,"STRONG",{});var jct=s(Xce);V5o=r(jct,"xlm-roberta-xl"),jct.forEach(t),X5o=r(wLe," \u2014 "),vD=n(wLe,"A",{href:!0});var Dct=s(vD);z5o=r(Dct,"XLMRobertaXLForMaskedLM"),Dct.forEach(t),W5o=r(wLe," (XLM-RoBERTa-XL model)"),wLe.forEach(t),Q5o=i(O),h1=n(O,"LI",{});var ALe=s(h1);zce=n(ALe,"STRONG",{});var Gct=s(zce);H5o=r(Gct,"xlnet"),Gct.forEach(t),U5o=r(ALe," \u2014 "),FD=n(ALe,"A",{href:!0});var Oct=s(FD);J5o=r(Oct,"XLNetLMHeadModel"),Oct.forEach(t),Y5o=r(ALe," (XLNet model)"),ALe.forEach(t),O.forEach(t),K5o=i(na),p1=n(na,"P",{});var yLe=s(p1);Z5o=r(yLe,"The model is set in evaluation mode by default using "),Wce=n(yLe,"CODE",{});var Vct=s(Wce);e3o=r(Vct,"model.eval()"),Vct.forEach(t),o3o=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(yLe,"CODE",{});var Xct=s(Qce);r3o=r(Xct,"model.train()"),Xct.forEach(t),yLe.forEach(t),t3o=i(na),T(u1.$$.fragment,na),na.forEach(t),Us.forEach(t),SDe=i(f),ji=n(f,"H2",{class:!0});var qOe=s(ji);_1=n(qOe,"A",{id:!0,class:!0,href:!0});var zct=s(_1);Hce=n(zct,"SPAN",{});var Wct=s(Hce);T(W0.$$.fragment,Wct),Wct.forEach(t),zct.forEach(t),a3o=i(qOe),Uce=n(qOe,"SPAN",{});var Qct=s(Uce);n3o=r(Qct,"AutoModelForCausalLM"),Qct.forEach(t),qOe.forEach(t),RDe=i(f),ko=n(f,"DIV",{class:!0});var Js=s(ko);T(Q0.$$.fragment,Js),s3o=i(Js),Di=n(Js,"P",{});var Bee=s(Di);l3o=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TD=n(Bee,"A",{href:!0});var Hct=s(TD);i3o=r(Hct,"from_pretrained()"),Hct.forEach(t),d3o=r(Bee," class method or the "),MD=n(Bee,"A",{href:!0});var Uct=s(MD);c3o=r(Uct,"from_config()"),Uct.forEach(t),f3o=r(Bee,` class
method.`),Bee.forEach(t),m3o=i(Js),H0=n(Js,"P",{});var jOe=s(H0);g3o=r(jOe,"This class cannot be instantiated directly using "),Jce=n(jOe,"CODE",{});var Jct=s(Jce);h3o=r(Jct,"__init__()"),Jct.forEach(t),p3o=r(jOe," (throws an error)."),jOe.forEach(t),u3o=i(Js),lt=n(Js,"DIV",{class:!0});var u3=s(lt);T(U0.$$.fragment,u3),_3o=i(u3),Yce=n(u3,"P",{});var Yct=s(Yce);b3o=r(Yct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Yct.forEach(t),v3o=i(u3),Gi=n(u3,"P",{});var Iee=s(Gi);F3o=r(Iee,`Note:
Loading a model from its configuration file does `),Kce=n(Iee,"STRONG",{});var Kct=s(Kce);T3o=r(Kct,"not"),Kct.forEach(t),M3o=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(Iee,"A",{href:!0});var Zct=s(ED);E3o=r(Zct,"from_pretrained()"),Zct.forEach(t),C3o=r(Iee," to load the model weights."),Iee.forEach(t),w3o=i(u3),T(b1.$$.fragment,u3),u3.forEach(t),A3o=i(Js),Ke=n(Js,"DIV",{class:!0});var sa=s(Ke);T(J0.$$.fragment,sa),y3o=i(sa),Zce=n(sa,"P",{});var eft=s(Zce);L3o=r(eft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eft.forEach(t),x3o=i(sa),Pa=n(sa,"P",{});var _3=s(Pa);$3o=r(_3,"The model class to instantiate is selected based on the "),efe=n(_3,"CODE",{});var oft=s(efe);k3o=r(oft,"model_type"),oft.forEach(t),S3o=r(_3,` property of the config object (either
passed as an argument or loaded from `),ofe=n(_3,"CODE",{});var rft=s(ofe);R3o=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),P3o=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(_3,"CODE",{});var tft=s(rfe);B3o=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),I3o=r(_3,":"),_3.forEach(t),N3o=i(sa),z=n(sa,"UL",{});var W=s(z);v1=n(W,"LI",{});var LLe=s(v1);tfe=n(LLe,"STRONG",{});var aft=s(tfe);q3o=r(aft,"bart"),aft.forEach(t),j3o=r(LLe," \u2014 "),CD=n(LLe,"A",{href:!0});var nft=s(CD);D3o=r(nft,"BartForCausalLM"),nft.forEach(t),G3o=r(LLe," (BART model)"),LLe.forEach(t),O3o=i(W),F1=n(W,"LI",{});var xLe=s(F1);afe=n(xLe,"STRONG",{});var sft=s(afe);V3o=r(sft,"bert"),sft.forEach(t),X3o=r(xLe," \u2014 "),wD=n(xLe,"A",{href:!0});var lft=s(wD);z3o=r(lft,"BertLMHeadModel"),lft.forEach(t),W3o=r(xLe," (BERT model)"),xLe.forEach(t),Q3o=i(W),T1=n(W,"LI",{});var $Le=s(T1);nfe=n($Le,"STRONG",{});var ift=s(nfe);H3o=r(ift,"bert-generation"),ift.forEach(t),U3o=r($Le," \u2014 "),AD=n($Le,"A",{href:!0});var dft=s(AD);J3o=r(dft,"BertGenerationDecoder"),dft.forEach(t),Y3o=r($Le," (Bert Generation model)"),$Le.forEach(t),K3o=i(W),M1=n(W,"LI",{});var kLe=s(M1);sfe=n(kLe,"STRONG",{});var cft=s(sfe);Z3o=r(cft,"big_bird"),cft.forEach(t),ewo=r(kLe," \u2014 "),yD=n(kLe,"A",{href:!0});var fft=s(yD);owo=r(fft,"BigBirdForCausalLM"),fft.forEach(t),rwo=r(kLe," (BigBird model)"),kLe.forEach(t),two=i(W),E1=n(W,"LI",{});var SLe=s(E1);lfe=n(SLe,"STRONG",{});var mft=s(lfe);awo=r(mft,"bigbird_pegasus"),mft.forEach(t),nwo=r(SLe," \u2014 "),LD=n(SLe,"A",{href:!0});var gft=s(LD);swo=r(gft,"BigBirdPegasusForCausalLM"),gft.forEach(t),lwo=r(SLe," (BigBird-Pegasus model)"),SLe.forEach(t),iwo=i(W),C1=n(W,"LI",{});var RLe=s(C1);ife=n(RLe,"STRONG",{});var hft=s(ife);dwo=r(hft,"blenderbot"),hft.forEach(t),cwo=r(RLe," \u2014 "),xD=n(RLe,"A",{href:!0});var pft=s(xD);fwo=r(pft,"BlenderbotForCausalLM"),pft.forEach(t),mwo=r(RLe," (Blenderbot model)"),RLe.forEach(t),gwo=i(W),w1=n(W,"LI",{});var PLe=s(w1);dfe=n(PLe,"STRONG",{});var uft=s(dfe);hwo=r(uft,"blenderbot-small"),uft.forEach(t),pwo=r(PLe," \u2014 "),$D=n(PLe,"A",{href:!0});var _ft=s($D);uwo=r(_ft,"BlenderbotSmallForCausalLM"),_ft.forEach(t),_wo=r(PLe," (BlenderbotSmall model)"),PLe.forEach(t),bwo=i(W),A1=n(W,"LI",{});var BLe=s(A1);cfe=n(BLe,"STRONG",{});var bft=s(cfe);vwo=r(bft,"bloom"),bft.forEach(t),Fwo=r(BLe," \u2014 "),kD=n(BLe,"A",{href:!0});var vft=s(kD);Two=r(vft,"BloomForCausalLM"),vft.forEach(t),Mwo=r(BLe," (BLOOM model)"),BLe.forEach(t),Ewo=i(W),y1=n(W,"LI",{});var ILe=s(y1);ffe=n(ILe,"STRONG",{});var Fft=s(ffe);Cwo=r(Fft,"camembert"),Fft.forEach(t),wwo=r(ILe," \u2014 "),SD=n(ILe,"A",{href:!0});var Tft=s(SD);Awo=r(Tft,"CamembertForCausalLM"),Tft.forEach(t),ywo=r(ILe," (CamemBERT model)"),ILe.forEach(t),Lwo=i(W),L1=n(W,"LI",{});var NLe=s(L1);mfe=n(NLe,"STRONG",{});var Mft=s(mfe);xwo=r(Mft,"ctrl"),Mft.forEach(t),$wo=r(NLe," \u2014 "),RD=n(NLe,"A",{href:!0});var Eft=s(RD);kwo=r(Eft,"CTRLLMHeadModel"),Eft.forEach(t),Swo=r(NLe," (CTRL model)"),NLe.forEach(t),Rwo=i(W),x1=n(W,"LI",{});var qLe=s(x1);gfe=n(qLe,"STRONG",{});var Cft=s(gfe);Pwo=r(Cft,"data2vec-text"),Cft.forEach(t),Bwo=r(qLe," \u2014 "),PD=n(qLe,"A",{href:!0});var wft=s(PD);Iwo=r(wft,"Data2VecTextForCausalLM"),wft.forEach(t),Nwo=r(qLe," (Data2VecText model)"),qLe.forEach(t),qwo=i(W),$1=n(W,"LI",{});var jLe=s($1);hfe=n(jLe,"STRONG",{});var Aft=s(hfe);jwo=r(Aft,"electra"),Aft.forEach(t),Dwo=r(jLe," \u2014 "),BD=n(jLe,"A",{href:!0});var yft=s(BD);Gwo=r(yft,"ElectraForCausalLM"),yft.forEach(t),Owo=r(jLe," (ELECTRA model)"),jLe.forEach(t),Vwo=i(W),k1=n(W,"LI",{});var DLe=s(k1);pfe=n(DLe,"STRONG",{});var Lft=s(pfe);Xwo=r(Lft,"gpt2"),Lft.forEach(t),zwo=r(DLe," \u2014 "),ID=n(DLe,"A",{href:!0});var xft=s(ID);Wwo=r(xft,"GPT2LMHeadModel"),xft.forEach(t),Qwo=r(DLe," (OpenAI GPT-2 model)"),DLe.forEach(t),Hwo=i(W),S1=n(W,"LI",{});var GLe=s(S1);ufe=n(GLe,"STRONG",{});var $ft=s(ufe);Uwo=r($ft,"gpt_neo"),$ft.forEach(t),Jwo=r(GLe," \u2014 "),ND=n(GLe,"A",{href:!0});var kft=s(ND);Ywo=r(kft,"GPTNeoForCausalLM"),kft.forEach(t),Kwo=r(GLe," (GPT Neo model)"),GLe.forEach(t),Zwo=i(W),R1=n(W,"LI",{});var OLe=s(R1);_fe=n(OLe,"STRONG",{});var Sft=s(_fe);e0o=r(Sft,"gpt_neox"),Sft.forEach(t),o0o=r(OLe," \u2014 "),qD=n(OLe,"A",{href:!0});var Rft=s(qD);r0o=r(Rft,"GPTNeoXForCausalLM"),Rft.forEach(t),t0o=r(OLe," (GPT NeoX model)"),OLe.forEach(t),a0o=i(W),P1=n(W,"LI",{});var VLe=s(P1);bfe=n(VLe,"STRONG",{});var Pft=s(bfe);n0o=r(Pft,"gptj"),Pft.forEach(t),s0o=r(VLe," \u2014 "),jD=n(VLe,"A",{href:!0});var Bft=s(jD);l0o=r(Bft,"GPTJForCausalLM"),Bft.forEach(t),i0o=r(VLe," (GPT-J model)"),VLe.forEach(t),d0o=i(W),B1=n(W,"LI",{});var XLe=s(B1);vfe=n(XLe,"STRONG",{});var Ift=s(vfe);c0o=r(Ift,"marian"),Ift.forEach(t),f0o=r(XLe," \u2014 "),DD=n(XLe,"A",{href:!0});var Nft=s(DD);m0o=r(Nft,"MarianForCausalLM"),Nft.forEach(t),g0o=r(XLe," (Marian model)"),XLe.forEach(t),h0o=i(W),I1=n(W,"LI",{});var zLe=s(I1);Ffe=n(zLe,"STRONG",{});var qft=s(Ffe);p0o=r(qft,"mbart"),qft.forEach(t),u0o=r(zLe," \u2014 "),GD=n(zLe,"A",{href:!0});var jft=s(GD);_0o=r(jft,"MBartForCausalLM"),jft.forEach(t),b0o=r(zLe," (mBART model)"),zLe.forEach(t),v0o=i(W),N1=n(W,"LI",{});var WLe=s(N1);Tfe=n(WLe,"STRONG",{});var Dft=s(Tfe);F0o=r(Dft,"megatron-bert"),Dft.forEach(t),T0o=r(WLe," \u2014 "),OD=n(WLe,"A",{href:!0});var Gft=s(OD);M0o=r(Gft,"MegatronBertForCausalLM"),Gft.forEach(t),E0o=r(WLe," (Megatron-BERT model)"),WLe.forEach(t),C0o=i(W),q1=n(W,"LI",{});var QLe=s(q1);Mfe=n(QLe,"STRONG",{});var Oft=s(Mfe);w0o=r(Oft,"openai-gpt"),Oft.forEach(t),A0o=r(QLe," \u2014 "),VD=n(QLe,"A",{href:!0});var Vft=s(VD);y0o=r(Vft,"OpenAIGPTLMHeadModel"),Vft.forEach(t),L0o=r(QLe," (OpenAI GPT model)"),QLe.forEach(t),x0o=i(W),j1=n(W,"LI",{});var HLe=s(j1);Efe=n(HLe,"STRONG",{});var Xft=s(Efe);$0o=r(Xft,"opt"),Xft.forEach(t),k0o=r(HLe," \u2014 "),XD=n(HLe,"A",{href:!0});var zft=s(XD);S0o=r(zft,"OPTForCausalLM"),zft.forEach(t),R0o=r(HLe," (OPT model)"),HLe.forEach(t),P0o=i(W),D1=n(W,"LI",{});var ULe=s(D1);Cfe=n(ULe,"STRONG",{});var Wft=s(Cfe);B0o=r(Wft,"pegasus"),Wft.forEach(t),I0o=r(ULe," \u2014 "),zD=n(ULe,"A",{href:!0});var Qft=s(zD);N0o=r(Qft,"PegasusForCausalLM"),Qft.forEach(t),q0o=r(ULe," (Pegasus model)"),ULe.forEach(t),j0o=i(W),G1=n(W,"LI",{});var JLe=s(G1);wfe=n(JLe,"STRONG",{});var Hft=s(wfe);D0o=r(Hft,"plbart"),Hft.forEach(t),G0o=r(JLe," \u2014 "),WD=n(JLe,"A",{href:!0});var Uft=s(WD);O0o=r(Uft,"PLBartForCausalLM"),Uft.forEach(t),V0o=r(JLe," (PLBart model)"),JLe.forEach(t),X0o=i(W),O1=n(W,"LI",{});var YLe=s(O1);Afe=n(YLe,"STRONG",{});var Jft=s(Afe);z0o=r(Jft,"prophetnet"),Jft.forEach(t),W0o=r(YLe," \u2014 "),QD=n(YLe,"A",{href:!0});var Yft=s(QD);Q0o=r(Yft,"ProphetNetForCausalLM"),Yft.forEach(t),H0o=r(YLe," (ProphetNet model)"),YLe.forEach(t),U0o=i(W),V1=n(W,"LI",{});var KLe=s(V1);yfe=n(KLe,"STRONG",{});var Kft=s(yfe);J0o=r(Kft,"qdqbert"),Kft.forEach(t),Y0o=r(KLe," \u2014 "),HD=n(KLe,"A",{href:!0});var Zft=s(HD);K0o=r(Zft,"QDQBertLMHeadModel"),Zft.forEach(t),Z0o=r(KLe," (QDQBert model)"),KLe.forEach(t),eAo=i(W),X1=n(W,"LI",{});var ZLe=s(X1);Lfe=n(ZLe,"STRONG",{});var emt=s(Lfe);oAo=r(emt,"reformer"),emt.forEach(t),rAo=r(ZLe," \u2014 "),UD=n(ZLe,"A",{href:!0});var omt=s(UD);tAo=r(omt,"ReformerModelWithLMHead"),omt.forEach(t),aAo=r(ZLe," (Reformer model)"),ZLe.forEach(t),nAo=i(W),z1=n(W,"LI",{});var exe=s(z1);xfe=n(exe,"STRONG",{});var rmt=s(xfe);sAo=r(rmt,"rembert"),rmt.forEach(t),lAo=r(exe," \u2014 "),JD=n(exe,"A",{href:!0});var tmt=s(JD);iAo=r(tmt,"RemBertForCausalLM"),tmt.forEach(t),dAo=r(exe," (RemBERT model)"),exe.forEach(t),cAo=i(W),W1=n(W,"LI",{});var oxe=s(W1);$fe=n(oxe,"STRONG",{});var amt=s($fe);fAo=r(amt,"roberta"),amt.forEach(t),mAo=r(oxe," \u2014 "),YD=n(oxe,"A",{href:!0});var nmt=s(YD);gAo=r(nmt,"RobertaForCausalLM"),nmt.forEach(t),hAo=r(oxe," (RoBERTa model)"),oxe.forEach(t),pAo=i(W),Q1=n(W,"LI",{});var rxe=s(Q1);kfe=n(rxe,"STRONG",{});var smt=s(kfe);uAo=r(smt,"roformer"),smt.forEach(t),_Ao=r(rxe," \u2014 "),KD=n(rxe,"A",{href:!0});var lmt=s(KD);bAo=r(lmt,"RoFormerForCausalLM"),lmt.forEach(t),vAo=r(rxe," (RoFormer model)"),rxe.forEach(t),FAo=i(W),H1=n(W,"LI",{});var txe=s(H1);Sfe=n(txe,"STRONG",{});var imt=s(Sfe);TAo=r(imt,"speech_to_text_2"),imt.forEach(t),MAo=r(txe," \u2014 "),ZD=n(txe,"A",{href:!0});var dmt=s(ZD);EAo=r(dmt,"Speech2Text2ForCausalLM"),dmt.forEach(t),CAo=r(txe," (Speech2Text2 model)"),txe.forEach(t),wAo=i(W),U1=n(W,"LI",{});var axe=s(U1);Rfe=n(axe,"STRONG",{});var cmt=s(Rfe);AAo=r(cmt,"transfo-xl"),cmt.forEach(t),yAo=r(axe," \u2014 "),eG=n(axe,"A",{href:!0});var fmt=s(eG);LAo=r(fmt,"TransfoXLLMHeadModel"),fmt.forEach(t),xAo=r(axe," (Transformer-XL model)"),axe.forEach(t),$Ao=i(W),J1=n(W,"LI",{});var nxe=s(J1);Pfe=n(nxe,"STRONG",{});var mmt=s(Pfe);kAo=r(mmt,"trocr"),mmt.forEach(t),SAo=r(nxe," \u2014 "),oG=n(nxe,"A",{href:!0});var gmt=s(oG);RAo=r(gmt,"TrOCRForCausalLM"),gmt.forEach(t),PAo=r(nxe," (TrOCR model)"),nxe.forEach(t),BAo=i(W),Y1=n(W,"LI",{});var sxe=s(Y1);Bfe=n(sxe,"STRONG",{});var hmt=s(Bfe);IAo=r(hmt,"xglm"),hmt.forEach(t),NAo=r(sxe," \u2014 "),rG=n(sxe,"A",{href:!0});var pmt=s(rG);qAo=r(pmt,"XGLMForCausalLM"),pmt.forEach(t),jAo=r(sxe," (XGLM model)"),sxe.forEach(t),DAo=i(W),K1=n(W,"LI",{});var lxe=s(K1);Ife=n(lxe,"STRONG",{});var umt=s(Ife);GAo=r(umt,"xlm"),umt.forEach(t),OAo=r(lxe," \u2014 "),tG=n(lxe,"A",{href:!0});var _mt=s(tG);VAo=r(_mt,"XLMWithLMHeadModel"),_mt.forEach(t),XAo=r(lxe," (XLM model)"),lxe.forEach(t),zAo=i(W),Z1=n(W,"LI",{});var ixe=s(Z1);Nfe=n(ixe,"STRONG",{});var bmt=s(Nfe);WAo=r(bmt,"xlm-prophetnet"),bmt.forEach(t),QAo=r(ixe," \u2014 "),aG=n(ixe,"A",{href:!0});var vmt=s(aG);HAo=r(vmt,"XLMProphetNetForCausalLM"),vmt.forEach(t),UAo=r(ixe," (XLM-ProphetNet model)"),ixe.forEach(t),JAo=i(W),eb=n(W,"LI",{});var dxe=s(eb);qfe=n(dxe,"STRONG",{});var Fmt=s(qfe);YAo=r(Fmt,"xlm-roberta"),Fmt.forEach(t),KAo=r(dxe," \u2014 "),nG=n(dxe,"A",{href:!0});var Tmt=s(nG);ZAo=r(Tmt,"XLMRobertaForCausalLM"),Tmt.forEach(t),eyo=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),oyo=i(W),ob=n(W,"LI",{});var cxe=s(ob);jfe=n(cxe,"STRONG",{});var Mmt=s(jfe);ryo=r(Mmt,"xlm-roberta-xl"),Mmt.forEach(t),tyo=r(cxe," \u2014 "),sG=n(cxe,"A",{href:!0});var Emt=s(sG);ayo=r(Emt,"XLMRobertaXLForCausalLM"),Emt.forEach(t),nyo=r(cxe," (XLM-RoBERTa-XL model)"),cxe.forEach(t),syo=i(W),rb=n(W,"LI",{});var fxe=s(rb);Dfe=n(fxe,"STRONG",{});var Cmt=s(Dfe);lyo=r(Cmt,"xlnet"),Cmt.forEach(t),iyo=r(fxe," \u2014 "),lG=n(fxe,"A",{href:!0});var wmt=s(lG);dyo=r(wmt,"XLNetLMHeadModel"),wmt.forEach(t),cyo=r(fxe," (XLNet model)"),fxe.forEach(t),W.forEach(t),fyo=i(sa),tb=n(sa,"P",{});var mxe=s(tb);myo=r(mxe,"The model is set in evaluation mode by default using "),Gfe=n(mxe,"CODE",{});var Amt=s(Gfe);gyo=r(Amt,"model.eval()"),Amt.forEach(t),hyo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(mxe,"CODE",{});var ymt=s(Ofe);pyo=r(ymt,"model.train()"),ymt.forEach(t),mxe.forEach(t),uyo=i(sa),T(ab.$$.fragment,sa),sa.forEach(t),Js.forEach(t),PDe=i(f),Oi=n(f,"H2",{class:!0});var DOe=s(Oi);nb=n(DOe,"A",{id:!0,class:!0,href:!0});var Lmt=s(nb);Vfe=n(Lmt,"SPAN",{});var xmt=s(Vfe);T(Y0.$$.fragment,xmt),xmt.forEach(t),Lmt.forEach(t),_yo=i(DOe),Xfe=n(DOe,"SPAN",{});var $mt=s(Xfe);byo=r($mt,"AutoModelForMaskedLM"),$mt.forEach(t),DOe.forEach(t),BDe=i(f),So=n(f,"DIV",{class:!0});var Ys=s(So);T(K0.$$.fragment,Ys),vyo=i(Ys),Vi=n(Ys,"P",{});var Nee=s(Vi);Fyo=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iG=n(Nee,"A",{href:!0});var kmt=s(iG);Tyo=r(kmt,"from_pretrained()"),kmt.forEach(t),Myo=r(Nee," class method or the "),dG=n(Nee,"A",{href:!0});var Smt=s(dG);Eyo=r(Smt,"from_config()"),Smt.forEach(t),Cyo=r(Nee,` class
method.`),Nee.forEach(t),wyo=i(Ys),Z0=n(Ys,"P",{});var GOe=s(Z0);Ayo=r(GOe,"This class cannot be instantiated directly using "),zfe=n(GOe,"CODE",{});var Rmt=s(zfe);yyo=r(Rmt,"__init__()"),Rmt.forEach(t),Lyo=r(GOe," (throws an error)."),GOe.forEach(t),xyo=i(Ys),it=n(Ys,"DIV",{class:!0});var b3=s(it);T(eA.$$.fragment,b3),$yo=i(b3),Wfe=n(b3,"P",{});var Pmt=s(Wfe);kyo=r(Pmt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pmt.forEach(t),Syo=i(b3),Xi=n(b3,"P",{});var qee=s(Xi);Ryo=r(qee,`Note:
Loading a model from its configuration file does `),Qfe=n(qee,"STRONG",{});var Bmt=s(Qfe);Pyo=r(Bmt,"not"),Bmt.forEach(t),Byo=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(qee,"A",{href:!0});var Imt=s(cG);Iyo=r(Imt,"from_pretrained()"),Imt.forEach(t),Nyo=r(qee," to load the model weights."),qee.forEach(t),qyo=i(b3),T(sb.$$.fragment,b3),b3.forEach(t),jyo=i(Ys),Ze=n(Ys,"DIV",{class:!0});var la=s(Ze);T(oA.$$.fragment,la),Dyo=i(la),Hfe=n(la,"P",{});var Nmt=s(Hfe);Gyo=r(Nmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nmt.forEach(t),Oyo=i(la),Ba=n(la,"P",{});var v3=s(Ba);Vyo=r(v3,"The model class to instantiate is selected based on the "),Ufe=n(v3,"CODE",{});var qmt=s(Ufe);Xyo=r(qmt,"model_type"),qmt.forEach(t),zyo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(v3,"CODE",{});var jmt=s(Jfe);Wyo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),Qyo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(v3,"CODE",{});var Dmt=s(Yfe);Hyo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),Uyo=r(v3,":"),v3.forEach(t),Jyo=i(la),Q=n(la,"UL",{});var H=s(Q);lb=n(H,"LI",{});var gxe=s(lb);Kfe=n(gxe,"STRONG",{});var Gmt=s(Kfe);Yyo=r(Gmt,"albert"),Gmt.forEach(t),Kyo=r(gxe," \u2014 "),fG=n(gxe,"A",{href:!0});var Omt=s(fG);Zyo=r(Omt,"AlbertForMaskedLM"),Omt.forEach(t),eLo=r(gxe," (ALBERT model)"),gxe.forEach(t),oLo=i(H),ib=n(H,"LI",{});var hxe=s(ib);Zfe=n(hxe,"STRONG",{});var Vmt=s(Zfe);rLo=r(Vmt,"bart"),Vmt.forEach(t),tLo=r(hxe," \u2014 "),mG=n(hxe,"A",{href:!0});var Xmt=s(mG);aLo=r(Xmt,"BartForConditionalGeneration"),Xmt.forEach(t),nLo=r(hxe," (BART model)"),hxe.forEach(t),sLo=i(H),db=n(H,"LI",{});var pxe=s(db);eme=n(pxe,"STRONG",{});var zmt=s(eme);lLo=r(zmt,"bert"),zmt.forEach(t),iLo=r(pxe," \u2014 "),gG=n(pxe,"A",{href:!0});var Wmt=s(gG);dLo=r(Wmt,"BertForMaskedLM"),Wmt.forEach(t),cLo=r(pxe," (BERT model)"),pxe.forEach(t),fLo=i(H),cb=n(H,"LI",{});var uxe=s(cb);ome=n(uxe,"STRONG",{});var Qmt=s(ome);mLo=r(Qmt,"big_bird"),Qmt.forEach(t),gLo=r(uxe," \u2014 "),hG=n(uxe,"A",{href:!0});var Hmt=s(hG);hLo=r(Hmt,"BigBirdForMaskedLM"),Hmt.forEach(t),pLo=r(uxe," (BigBird model)"),uxe.forEach(t),uLo=i(H),fb=n(H,"LI",{});var _xe=s(fb);rme=n(_xe,"STRONG",{});var Umt=s(rme);_Lo=r(Umt,"camembert"),Umt.forEach(t),bLo=r(_xe," \u2014 "),pG=n(_xe,"A",{href:!0});var Jmt=s(pG);vLo=r(Jmt,"CamembertForMaskedLM"),Jmt.forEach(t),FLo=r(_xe," (CamemBERT model)"),_xe.forEach(t),TLo=i(H),mb=n(H,"LI",{});var bxe=s(mb);tme=n(bxe,"STRONG",{});var Ymt=s(tme);MLo=r(Ymt,"convbert"),Ymt.forEach(t),ELo=r(bxe," \u2014 "),uG=n(bxe,"A",{href:!0});var Kmt=s(uG);CLo=r(Kmt,"ConvBertForMaskedLM"),Kmt.forEach(t),wLo=r(bxe," (ConvBERT model)"),bxe.forEach(t),ALo=i(H),gb=n(H,"LI",{});var vxe=s(gb);ame=n(vxe,"STRONG",{});var Zmt=s(ame);yLo=r(Zmt,"data2vec-text"),Zmt.forEach(t),LLo=r(vxe," \u2014 "),_G=n(vxe,"A",{href:!0});var egt=s(_G);xLo=r(egt,"Data2VecTextForMaskedLM"),egt.forEach(t),$Lo=r(vxe," (Data2VecText model)"),vxe.forEach(t),kLo=i(H),hb=n(H,"LI",{});var Fxe=s(hb);nme=n(Fxe,"STRONG",{});var ogt=s(nme);SLo=r(ogt,"deberta"),ogt.forEach(t),RLo=r(Fxe," \u2014 "),bG=n(Fxe,"A",{href:!0});var rgt=s(bG);PLo=r(rgt,"DebertaForMaskedLM"),rgt.forEach(t),BLo=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),ILo=i(H),pb=n(H,"LI",{});var Txe=s(pb);sme=n(Txe,"STRONG",{});var tgt=s(sme);NLo=r(tgt,"deberta-v2"),tgt.forEach(t),qLo=r(Txe," \u2014 "),vG=n(Txe,"A",{href:!0});var agt=s(vG);jLo=r(agt,"DebertaV2ForMaskedLM"),agt.forEach(t),DLo=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),GLo=i(H),ub=n(H,"LI",{});var Mxe=s(ub);lme=n(Mxe,"STRONG",{});var ngt=s(lme);OLo=r(ngt,"distilbert"),ngt.forEach(t),VLo=r(Mxe," \u2014 "),FG=n(Mxe,"A",{href:!0});var sgt=s(FG);XLo=r(sgt,"DistilBertForMaskedLM"),sgt.forEach(t),zLo=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),WLo=i(H),_b=n(H,"LI",{});var Exe=s(_b);ime=n(Exe,"STRONG",{});var lgt=s(ime);QLo=r(lgt,"electra"),lgt.forEach(t),HLo=r(Exe," \u2014 "),TG=n(Exe,"A",{href:!0});var igt=s(TG);ULo=r(igt,"ElectraForMaskedLM"),igt.forEach(t),JLo=r(Exe," (ELECTRA model)"),Exe.forEach(t),YLo=i(H),bb=n(H,"LI",{});var Cxe=s(bb);dme=n(Cxe,"STRONG",{});var dgt=s(dme);KLo=r(dgt,"flaubert"),dgt.forEach(t),ZLo=r(Cxe," \u2014 "),MG=n(Cxe,"A",{href:!0});var cgt=s(MG);exo=r(cgt,"FlaubertWithLMHeadModel"),cgt.forEach(t),oxo=r(Cxe," (FlauBERT model)"),Cxe.forEach(t),rxo=i(H),vb=n(H,"LI",{});var wxe=s(vb);cme=n(wxe,"STRONG",{});var fgt=s(cme);txo=r(fgt,"fnet"),fgt.forEach(t),axo=r(wxe," \u2014 "),EG=n(wxe,"A",{href:!0});var mgt=s(EG);nxo=r(mgt,"FNetForMaskedLM"),mgt.forEach(t),sxo=r(wxe," (FNet model)"),wxe.forEach(t),lxo=i(H),Fb=n(H,"LI",{});var Axe=s(Fb);fme=n(Axe,"STRONG",{});var ggt=s(fme);ixo=r(ggt,"funnel"),ggt.forEach(t),dxo=r(Axe," \u2014 "),CG=n(Axe,"A",{href:!0});var hgt=s(CG);cxo=r(hgt,"FunnelForMaskedLM"),hgt.forEach(t),fxo=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),mxo=i(H),Tb=n(H,"LI",{});var yxe=s(Tb);mme=n(yxe,"STRONG",{});var pgt=s(mme);gxo=r(pgt,"ibert"),pgt.forEach(t),hxo=r(yxe," \u2014 "),wG=n(yxe,"A",{href:!0});var ugt=s(wG);pxo=r(ugt,"IBertForMaskedLM"),ugt.forEach(t),uxo=r(yxe," (I-BERT model)"),yxe.forEach(t),_xo=i(H),Mb=n(H,"LI",{});var Lxe=s(Mb);gme=n(Lxe,"STRONG",{});var _gt=s(gme);bxo=r(_gt,"layoutlm"),_gt.forEach(t),vxo=r(Lxe," \u2014 "),AG=n(Lxe,"A",{href:!0});var bgt=s(AG);Fxo=r(bgt,"LayoutLMForMaskedLM"),bgt.forEach(t),Txo=r(Lxe," (LayoutLM model)"),Lxe.forEach(t),Mxo=i(H),Eb=n(H,"LI",{});var xxe=s(Eb);hme=n(xxe,"STRONG",{});var vgt=s(hme);Exo=r(vgt,"longformer"),vgt.forEach(t),Cxo=r(xxe," \u2014 "),yG=n(xxe,"A",{href:!0});var Fgt=s(yG);wxo=r(Fgt,"LongformerForMaskedLM"),Fgt.forEach(t),Axo=r(xxe," (Longformer model)"),xxe.forEach(t),yxo=i(H),Cb=n(H,"LI",{});var $xe=s(Cb);pme=n($xe,"STRONG",{});var Tgt=s(pme);Lxo=r(Tgt,"luke"),Tgt.forEach(t),xxo=r($xe," \u2014 "),LG=n($xe,"A",{href:!0});var Mgt=s(LG);$xo=r(Mgt,"LukeForMaskedLM"),Mgt.forEach(t),kxo=r($xe," (LUKE model)"),$xe.forEach(t),Sxo=i(H),wb=n(H,"LI",{});var kxe=s(wb);ume=n(kxe,"STRONG",{});var Egt=s(ume);Rxo=r(Egt,"mbart"),Egt.forEach(t),Pxo=r(kxe," \u2014 "),xG=n(kxe,"A",{href:!0});var Cgt=s(xG);Bxo=r(Cgt,"MBartForConditionalGeneration"),Cgt.forEach(t),Ixo=r(kxe," (mBART model)"),kxe.forEach(t),Nxo=i(H),Ab=n(H,"LI",{});var Sxe=s(Ab);_me=n(Sxe,"STRONG",{});var wgt=s(_me);qxo=r(wgt,"megatron-bert"),wgt.forEach(t),jxo=r(Sxe," \u2014 "),$G=n(Sxe,"A",{href:!0});var Agt=s($G);Dxo=r(Agt,"MegatronBertForMaskedLM"),Agt.forEach(t),Gxo=r(Sxe," (Megatron-BERT model)"),Sxe.forEach(t),Oxo=i(H),yb=n(H,"LI",{});var Rxe=s(yb);bme=n(Rxe,"STRONG",{});var ygt=s(bme);Vxo=r(ygt,"mobilebert"),ygt.forEach(t),Xxo=r(Rxe," \u2014 "),kG=n(Rxe,"A",{href:!0});var Lgt=s(kG);zxo=r(Lgt,"MobileBertForMaskedLM"),Lgt.forEach(t),Wxo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),Qxo=i(H),Lb=n(H,"LI",{});var Pxe=s(Lb);vme=n(Pxe,"STRONG",{});var xgt=s(vme);Hxo=r(xgt,"mpnet"),xgt.forEach(t),Uxo=r(Pxe," \u2014 "),SG=n(Pxe,"A",{href:!0});var $gt=s(SG);Jxo=r($gt,"MPNetForMaskedLM"),$gt.forEach(t),Yxo=r(Pxe," (MPNet model)"),Pxe.forEach(t),Kxo=i(H),xb=n(H,"LI",{});var Bxe=s(xb);Fme=n(Bxe,"STRONG",{});var kgt=s(Fme);Zxo=r(kgt,"nystromformer"),kgt.forEach(t),e$o=r(Bxe," \u2014 "),RG=n(Bxe,"A",{href:!0});var Sgt=s(RG);o$o=r(Sgt,"NystromformerForMaskedLM"),Sgt.forEach(t),r$o=r(Bxe," (Nystr\xF6mformer model)"),Bxe.forEach(t),t$o=i(H),$b=n(H,"LI",{});var Ixe=s($b);Tme=n(Ixe,"STRONG",{});var Rgt=s(Tme);a$o=r(Rgt,"perceiver"),Rgt.forEach(t),n$o=r(Ixe," \u2014 "),PG=n(Ixe,"A",{href:!0});var Pgt=s(PG);s$o=r(Pgt,"PerceiverForMaskedLM"),Pgt.forEach(t),l$o=r(Ixe," (Perceiver model)"),Ixe.forEach(t),i$o=i(H),kb=n(H,"LI",{});var Nxe=s(kb);Mme=n(Nxe,"STRONG",{});var Bgt=s(Mme);d$o=r(Bgt,"qdqbert"),Bgt.forEach(t),c$o=r(Nxe," \u2014 "),BG=n(Nxe,"A",{href:!0});var Igt=s(BG);f$o=r(Igt,"QDQBertForMaskedLM"),Igt.forEach(t),m$o=r(Nxe," (QDQBert model)"),Nxe.forEach(t),g$o=i(H),Sb=n(H,"LI",{});var qxe=s(Sb);Eme=n(qxe,"STRONG",{});var Ngt=s(Eme);h$o=r(Ngt,"reformer"),Ngt.forEach(t),p$o=r(qxe," \u2014 "),IG=n(qxe,"A",{href:!0});var qgt=s(IG);u$o=r(qgt,"ReformerForMaskedLM"),qgt.forEach(t),_$o=r(qxe," (Reformer model)"),qxe.forEach(t),b$o=i(H),Rb=n(H,"LI",{});var jxe=s(Rb);Cme=n(jxe,"STRONG",{});var jgt=s(Cme);v$o=r(jgt,"rembert"),jgt.forEach(t),F$o=r(jxe," \u2014 "),NG=n(jxe,"A",{href:!0});var Dgt=s(NG);T$o=r(Dgt,"RemBertForMaskedLM"),Dgt.forEach(t),M$o=r(jxe," (RemBERT model)"),jxe.forEach(t),E$o=i(H),Pb=n(H,"LI",{});var Dxe=s(Pb);wme=n(Dxe,"STRONG",{});var Ggt=s(wme);C$o=r(Ggt,"roberta"),Ggt.forEach(t),w$o=r(Dxe," \u2014 "),qG=n(Dxe,"A",{href:!0});var Ogt=s(qG);A$o=r(Ogt,"RobertaForMaskedLM"),Ogt.forEach(t),y$o=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),L$o=i(H),Bb=n(H,"LI",{});var Gxe=s(Bb);Ame=n(Gxe,"STRONG",{});var Vgt=s(Ame);x$o=r(Vgt,"roformer"),Vgt.forEach(t),$$o=r(Gxe," \u2014 "),jG=n(Gxe,"A",{href:!0});var Xgt=s(jG);k$o=r(Xgt,"RoFormerForMaskedLM"),Xgt.forEach(t),S$o=r(Gxe," (RoFormer model)"),Gxe.forEach(t),R$o=i(H),Ib=n(H,"LI",{});var Oxe=s(Ib);yme=n(Oxe,"STRONG",{});var zgt=s(yme);P$o=r(zgt,"squeezebert"),zgt.forEach(t),B$o=r(Oxe," \u2014 "),DG=n(Oxe,"A",{href:!0});var Wgt=s(DG);I$o=r(Wgt,"SqueezeBertForMaskedLM"),Wgt.forEach(t),N$o=r(Oxe," (SqueezeBERT model)"),Oxe.forEach(t),q$o=i(H),Nb=n(H,"LI",{});var Vxe=s(Nb);Lme=n(Vxe,"STRONG",{});var Qgt=s(Lme);j$o=r(Qgt,"tapas"),Qgt.forEach(t),D$o=r(Vxe," \u2014 "),GG=n(Vxe,"A",{href:!0});var Hgt=s(GG);G$o=r(Hgt,"TapasForMaskedLM"),Hgt.forEach(t),O$o=r(Vxe," (TAPAS model)"),Vxe.forEach(t),V$o=i(H),qb=n(H,"LI",{});var Xxe=s(qb);xme=n(Xxe,"STRONG",{});var Ugt=s(xme);X$o=r(Ugt,"wav2vec2"),Ugt.forEach(t),z$o=r(Xxe," \u2014 "),$me=n(Xxe,"CODE",{});var Jgt=s($me);W$o=r(Jgt,"Wav2Vec2ForMaskedLM"),Jgt.forEach(t),Q$o=r(Xxe," (Wav2Vec2 model)"),Xxe.forEach(t),H$o=i(H),jb=n(H,"LI",{});var zxe=s(jb);kme=n(zxe,"STRONG",{});var Ygt=s(kme);U$o=r(Ygt,"xlm"),Ygt.forEach(t),J$o=r(zxe," \u2014 "),OG=n(zxe,"A",{href:!0});var Kgt=s(OG);Y$o=r(Kgt,"XLMWithLMHeadModel"),Kgt.forEach(t),K$o=r(zxe," (XLM model)"),zxe.forEach(t),Z$o=i(H),Db=n(H,"LI",{});var Wxe=s(Db);Sme=n(Wxe,"STRONG",{});var Zgt=s(Sme);eko=r(Zgt,"xlm-roberta"),Zgt.forEach(t),oko=r(Wxe," \u2014 "),VG=n(Wxe,"A",{href:!0});var eht=s(VG);rko=r(eht,"XLMRobertaForMaskedLM"),eht.forEach(t),tko=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),ako=i(H),Gb=n(H,"LI",{});var Qxe=s(Gb);Rme=n(Qxe,"STRONG",{});var oht=s(Rme);nko=r(oht,"xlm-roberta-xl"),oht.forEach(t),sko=r(Qxe," \u2014 "),XG=n(Qxe,"A",{href:!0});var rht=s(XG);lko=r(rht,"XLMRobertaXLForMaskedLM"),rht.forEach(t),iko=r(Qxe," (XLM-RoBERTa-XL model)"),Qxe.forEach(t),dko=i(H),Ob=n(H,"LI",{});var Hxe=s(Ob);Pme=n(Hxe,"STRONG",{});var tht=s(Pme);cko=r(tht,"yoso"),tht.forEach(t),fko=r(Hxe," \u2014 "),zG=n(Hxe,"A",{href:!0});var aht=s(zG);mko=r(aht,"YosoForMaskedLM"),aht.forEach(t),gko=r(Hxe," (YOSO model)"),Hxe.forEach(t),H.forEach(t),hko=i(la),Vb=n(la,"P",{});var Uxe=s(Vb);pko=r(Uxe,"The model is set in evaluation mode by default using "),Bme=n(Uxe,"CODE",{});var nht=s(Bme);uko=r(nht,"model.eval()"),nht.forEach(t),_ko=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(Uxe,"CODE",{});var sht=s(Ime);bko=r(sht,"model.train()"),sht.forEach(t),Uxe.forEach(t),vko=i(la),T(Xb.$$.fragment,la),la.forEach(t),Ys.forEach(t),IDe=i(f),zi=n(f,"H2",{class:!0});var OOe=s(zi);zb=n(OOe,"A",{id:!0,class:!0,href:!0});var lht=s(zb);Nme=n(lht,"SPAN",{});var iht=s(Nme);T(rA.$$.fragment,iht),iht.forEach(t),lht.forEach(t),Fko=i(OOe),qme=n(OOe,"SPAN",{});var dht=s(qme);Tko=r(dht,"AutoModelForSeq2SeqLM"),dht.forEach(t),OOe.forEach(t),NDe=i(f),Ro=n(f,"DIV",{class:!0});var Ks=s(Ro);T(tA.$$.fragment,Ks),Mko=i(Ks),Wi=n(Ks,"P",{});var jee=s(Wi);Eko=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WG=n(jee,"A",{href:!0});var cht=s(WG);Cko=r(cht,"from_pretrained()"),cht.forEach(t),wko=r(jee," class method or the "),QG=n(jee,"A",{href:!0});var fht=s(QG);Ako=r(fht,"from_config()"),fht.forEach(t),yko=r(jee,` class
method.`),jee.forEach(t),Lko=i(Ks),aA=n(Ks,"P",{});var VOe=s(aA);xko=r(VOe,"This class cannot be instantiated directly using "),jme=n(VOe,"CODE",{});var mht=s(jme);$ko=r(mht,"__init__()"),mht.forEach(t),kko=r(VOe," (throws an error)."),VOe.forEach(t),Sko=i(Ks),dt=n(Ks,"DIV",{class:!0});var F3=s(dt);T(nA.$$.fragment,F3),Rko=i(F3),Dme=n(F3,"P",{});var ght=s(Dme);Pko=r(ght,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ght.forEach(t),Bko=i(F3),Qi=n(F3,"P",{});var Dee=s(Qi);Iko=r(Dee,`Note:
Loading a model from its configuration file does `),Gme=n(Dee,"STRONG",{});var hht=s(Gme);Nko=r(hht,"not"),hht.forEach(t),qko=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(Dee,"A",{href:!0});var pht=s(HG);jko=r(pht,"from_pretrained()"),pht.forEach(t),Dko=r(Dee," to load the model weights."),Dee.forEach(t),Gko=i(F3),T(Wb.$$.fragment,F3),F3.forEach(t),Oko=i(Ks),eo=n(Ks,"DIV",{class:!0});var ia=s(eo);T(sA.$$.fragment,ia),Vko=i(ia),Ome=n(ia,"P",{});var uht=s(Ome);Xko=r(uht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uht.forEach(t),zko=i(ia),Ia=n(ia,"P",{});var T3=s(Ia);Wko=r(T3,"The model class to instantiate is selected based on the "),Vme=n(T3,"CODE",{});var _ht=s(Vme);Qko=r(_ht,"model_type"),_ht.forEach(t),Hko=r(T3,` property of the config object (either
passed as an argument or loaded from `),Xme=n(T3,"CODE",{});var bht=s(Xme);Uko=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),Jko=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(T3,"CODE",{});var vht=s(zme);Yko=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),Kko=r(T3,":"),T3.forEach(t),Zko=i(ia),ue=n(ia,"UL",{});var Fe=s(ue);Qb=n(Fe,"LI",{});var Jxe=s(Qb);Wme=n(Jxe,"STRONG",{});var Fht=s(Wme);eSo=r(Fht,"bart"),Fht.forEach(t),oSo=r(Jxe," \u2014 "),UG=n(Jxe,"A",{href:!0});var Tht=s(UG);rSo=r(Tht,"BartForConditionalGeneration"),Tht.forEach(t),tSo=r(Jxe," (BART model)"),Jxe.forEach(t),aSo=i(Fe),Hb=n(Fe,"LI",{});var Yxe=s(Hb);Qme=n(Yxe,"STRONG",{});var Mht=s(Qme);nSo=r(Mht,"bigbird_pegasus"),Mht.forEach(t),sSo=r(Yxe," \u2014 "),JG=n(Yxe,"A",{href:!0});var Eht=s(JG);lSo=r(Eht,"BigBirdPegasusForConditionalGeneration"),Eht.forEach(t),iSo=r(Yxe," (BigBird-Pegasus model)"),Yxe.forEach(t),dSo=i(Fe),Ub=n(Fe,"LI",{});var Kxe=s(Ub);Hme=n(Kxe,"STRONG",{});var Cht=s(Hme);cSo=r(Cht,"blenderbot"),Cht.forEach(t),fSo=r(Kxe," \u2014 "),YG=n(Kxe,"A",{href:!0});var wht=s(YG);mSo=r(wht,"BlenderbotForConditionalGeneration"),wht.forEach(t),gSo=r(Kxe," (Blenderbot model)"),Kxe.forEach(t),hSo=i(Fe),Jb=n(Fe,"LI",{});var Zxe=s(Jb);Ume=n(Zxe,"STRONG",{});var Aht=s(Ume);pSo=r(Aht,"blenderbot-small"),Aht.forEach(t),uSo=r(Zxe," \u2014 "),KG=n(Zxe,"A",{href:!0});var yht=s(KG);_So=r(yht,"BlenderbotSmallForConditionalGeneration"),yht.forEach(t),bSo=r(Zxe," (BlenderbotSmall model)"),Zxe.forEach(t),vSo=i(Fe),Yb=n(Fe,"LI",{});var e$e=s(Yb);Jme=n(e$e,"STRONG",{});var Lht=s(Jme);FSo=r(Lht,"encoder-decoder"),Lht.forEach(t),TSo=r(e$e," \u2014 "),ZG=n(e$e,"A",{href:!0});var xht=s(ZG);MSo=r(xht,"EncoderDecoderModel"),xht.forEach(t),ESo=r(e$e," (Encoder decoder model)"),e$e.forEach(t),CSo=i(Fe),Kb=n(Fe,"LI",{});var o$e=s(Kb);Yme=n(o$e,"STRONG",{});var $ht=s(Yme);wSo=r($ht,"fsmt"),$ht.forEach(t),ASo=r(o$e," \u2014 "),eO=n(o$e,"A",{href:!0});var kht=s(eO);ySo=r(kht,"FSMTForConditionalGeneration"),kht.forEach(t),LSo=r(o$e," (FairSeq Machine-Translation model)"),o$e.forEach(t),xSo=i(Fe),Zb=n(Fe,"LI",{});var r$e=s(Zb);Kme=n(r$e,"STRONG",{});var Sht=s(Kme);$So=r(Sht,"led"),Sht.forEach(t),kSo=r(r$e," \u2014 "),oO=n(r$e,"A",{href:!0});var Rht=s(oO);SSo=r(Rht,"LEDForConditionalGeneration"),Rht.forEach(t),RSo=r(r$e," (LED model)"),r$e.forEach(t),PSo=i(Fe),e2=n(Fe,"LI",{});var t$e=s(e2);Zme=n(t$e,"STRONG",{});var Pht=s(Zme);BSo=r(Pht,"m2m_100"),Pht.forEach(t),ISo=r(t$e," \u2014 "),rO=n(t$e,"A",{href:!0});var Bht=s(rO);NSo=r(Bht,"M2M100ForConditionalGeneration"),Bht.forEach(t),qSo=r(t$e," (M2M100 model)"),t$e.forEach(t),jSo=i(Fe),o2=n(Fe,"LI",{});var a$e=s(o2);ege=n(a$e,"STRONG",{});var Iht=s(ege);DSo=r(Iht,"marian"),Iht.forEach(t),GSo=r(a$e," \u2014 "),tO=n(a$e,"A",{href:!0});var Nht=s(tO);OSo=r(Nht,"MarianMTModel"),Nht.forEach(t),VSo=r(a$e," (Marian model)"),a$e.forEach(t),XSo=i(Fe),r2=n(Fe,"LI",{});var n$e=s(r2);oge=n(n$e,"STRONG",{});var qht=s(oge);zSo=r(qht,"mbart"),qht.forEach(t),WSo=r(n$e," \u2014 "),aO=n(n$e,"A",{href:!0});var jht=s(aO);QSo=r(jht,"MBartForConditionalGeneration"),jht.forEach(t),HSo=r(n$e," (mBART model)"),n$e.forEach(t),USo=i(Fe),t2=n(Fe,"LI",{});var s$e=s(t2);rge=n(s$e,"STRONG",{});var Dht=s(rge);JSo=r(Dht,"mt5"),Dht.forEach(t),YSo=r(s$e," \u2014 "),nO=n(s$e,"A",{href:!0});var Ght=s(nO);KSo=r(Ght,"MT5ForConditionalGeneration"),Ght.forEach(t),ZSo=r(s$e," (MT5 model)"),s$e.forEach(t),eRo=i(Fe),a2=n(Fe,"LI",{});var l$e=s(a2);tge=n(l$e,"STRONG",{});var Oht=s(tge);oRo=r(Oht,"pegasus"),Oht.forEach(t),rRo=r(l$e," \u2014 "),sO=n(l$e,"A",{href:!0});var Vht=s(sO);tRo=r(Vht,"PegasusForConditionalGeneration"),Vht.forEach(t),aRo=r(l$e," (Pegasus model)"),l$e.forEach(t),nRo=i(Fe),n2=n(Fe,"LI",{});var i$e=s(n2);age=n(i$e,"STRONG",{});var Xht=s(age);sRo=r(Xht,"plbart"),Xht.forEach(t),lRo=r(i$e," \u2014 "),lO=n(i$e,"A",{href:!0});var zht=s(lO);iRo=r(zht,"PLBartForConditionalGeneration"),zht.forEach(t),dRo=r(i$e," (PLBart model)"),i$e.forEach(t),cRo=i(Fe),s2=n(Fe,"LI",{});var d$e=s(s2);nge=n(d$e,"STRONG",{});var Wht=s(nge);fRo=r(Wht,"prophetnet"),Wht.forEach(t),mRo=r(d$e," \u2014 "),iO=n(d$e,"A",{href:!0});var Qht=s(iO);gRo=r(Qht,"ProphetNetForConditionalGeneration"),Qht.forEach(t),hRo=r(d$e," (ProphetNet model)"),d$e.forEach(t),pRo=i(Fe),l2=n(Fe,"LI",{});var c$e=s(l2);sge=n(c$e,"STRONG",{});var Hht=s(sge);uRo=r(Hht,"t5"),Hht.forEach(t),_Ro=r(c$e," \u2014 "),dO=n(c$e,"A",{href:!0});var Uht=s(dO);bRo=r(Uht,"T5ForConditionalGeneration"),Uht.forEach(t),vRo=r(c$e," (T5 model)"),c$e.forEach(t),FRo=i(Fe),i2=n(Fe,"LI",{});var f$e=s(i2);lge=n(f$e,"STRONG",{});var Jht=s(lge);TRo=r(Jht,"xlm-prophetnet"),Jht.forEach(t),MRo=r(f$e," \u2014 "),cO=n(f$e,"A",{href:!0});var Yht=s(cO);ERo=r(Yht,"XLMProphetNetForConditionalGeneration"),Yht.forEach(t),CRo=r(f$e," (XLM-ProphetNet model)"),f$e.forEach(t),Fe.forEach(t),wRo=i(ia),d2=n(ia,"P",{});var m$e=s(d2);ARo=r(m$e,"The model is set in evaluation mode by default using "),ige=n(m$e,"CODE",{});var Kht=s(ige);yRo=r(Kht,"model.eval()"),Kht.forEach(t),LRo=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(m$e,"CODE",{});var Zht=s(dge);xRo=r(Zht,"model.train()"),Zht.forEach(t),m$e.forEach(t),$Ro=i(ia),T(c2.$$.fragment,ia),ia.forEach(t),Ks.forEach(t),qDe=i(f),Hi=n(f,"H2",{class:!0});var XOe=s(Hi);f2=n(XOe,"A",{id:!0,class:!0,href:!0});var ept=s(f2);cge=n(ept,"SPAN",{});var opt=s(cge);T(lA.$$.fragment,opt),opt.forEach(t),ept.forEach(t),kRo=i(XOe),fge=n(XOe,"SPAN",{});var rpt=s(fge);SRo=r(rpt,"AutoModelForSequenceClassification"),rpt.forEach(t),XOe.forEach(t),jDe=i(f),Po=n(f,"DIV",{class:!0});var Zs=s(Po);T(iA.$$.fragment,Zs),RRo=i(Zs),Ui=n(Zs,"P",{});var Gee=s(Ui);PRo=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fO=n(Gee,"A",{href:!0});var tpt=s(fO);BRo=r(tpt,"from_pretrained()"),tpt.forEach(t),IRo=r(Gee," class method or the "),mO=n(Gee,"A",{href:!0});var apt=s(mO);NRo=r(apt,"from_config()"),apt.forEach(t),qRo=r(Gee,` class
method.`),Gee.forEach(t),jRo=i(Zs),dA=n(Zs,"P",{});var zOe=s(dA);DRo=r(zOe,"This class cannot be instantiated directly using "),mge=n(zOe,"CODE",{});var npt=s(mge);GRo=r(npt,"__init__()"),npt.forEach(t),ORo=r(zOe," (throws an error)."),zOe.forEach(t),VRo=i(Zs),ct=n(Zs,"DIV",{class:!0});var M3=s(ct);T(cA.$$.fragment,M3),XRo=i(M3),gge=n(M3,"P",{});var spt=s(gge);zRo=r(spt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),spt.forEach(t),WRo=i(M3),Ji=n(M3,"P",{});var Oee=s(Ji);QRo=r(Oee,`Note:
Loading a model from its configuration file does `),hge=n(Oee,"STRONG",{});var lpt=s(hge);HRo=r(lpt,"not"),lpt.forEach(t),URo=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(Oee,"A",{href:!0});var ipt=s(gO);JRo=r(ipt,"from_pretrained()"),ipt.forEach(t),YRo=r(Oee," to load the model weights."),Oee.forEach(t),KRo=i(M3),T(m2.$$.fragment,M3),M3.forEach(t),ZRo=i(Zs),oo=n(Zs,"DIV",{class:!0});var da=s(oo);T(fA.$$.fragment,da),ePo=i(da),pge=n(da,"P",{});var dpt=s(pge);oPo=r(dpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dpt.forEach(t),rPo=i(da),Na=n(da,"P",{});var E3=s(Na);tPo=r(E3,"The model class to instantiate is selected based on the "),uge=n(E3,"CODE",{});var cpt=s(uge);aPo=r(cpt,"model_type"),cpt.forEach(t),nPo=r(E3,` property of the config object (either
passed as an argument or loaded from `),_ge=n(E3,"CODE",{});var fpt=s(_ge);sPo=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),lPo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(E3,"CODE",{});var mpt=s(bge);iPo=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),dPo=r(E3,":"),E3.forEach(t),cPo=i(da),N=n(da,"UL",{});var j=s(N);g2=n(j,"LI",{});var g$e=s(g2);vge=n(g$e,"STRONG",{});var gpt=s(vge);fPo=r(gpt,"albert"),gpt.forEach(t),mPo=r(g$e," \u2014 "),hO=n(g$e,"A",{href:!0});var hpt=s(hO);gPo=r(hpt,"AlbertForSequenceClassification"),hpt.forEach(t),hPo=r(g$e," (ALBERT model)"),g$e.forEach(t),pPo=i(j),h2=n(j,"LI",{});var h$e=s(h2);Fge=n(h$e,"STRONG",{});var ppt=s(Fge);uPo=r(ppt,"bart"),ppt.forEach(t),_Po=r(h$e," \u2014 "),pO=n(h$e,"A",{href:!0});var upt=s(pO);bPo=r(upt,"BartForSequenceClassification"),upt.forEach(t),vPo=r(h$e," (BART model)"),h$e.forEach(t),FPo=i(j),p2=n(j,"LI",{});var p$e=s(p2);Tge=n(p$e,"STRONG",{});var _pt=s(Tge);TPo=r(_pt,"bert"),_pt.forEach(t),MPo=r(p$e," \u2014 "),uO=n(p$e,"A",{href:!0});var bpt=s(uO);EPo=r(bpt,"BertForSequenceClassification"),bpt.forEach(t),CPo=r(p$e," (BERT model)"),p$e.forEach(t),wPo=i(j),u2=n(j,"LI",{});var u$e=s(u2);Mge=n(u$e,"STRONG",{});var vpt=s(Mge);APo=r(vpt,"big_bird"),vpt.forEach(t),yPo=r(u$e," \u2014 "),_O=n(u$e,"A",{href:!0});var Fpt=s(_O);LPo=r(Fpt,"BigBirdForSequenceClassification"),Fpt.forEach(t),xPo=r(u$e," (BigBird model)"),u$e.forEach(t),$Po=i(j),_2=n(j,"LI",{});var _$e=s(_2);Ege=n(_$e,"STRONG",{});var Tpt=s(Ege);kPo=r(Tpt,"bigbird_pegasus"),Tpt.forEach(t),SPo=r(_$e," \u2014 "),bO=n(_$e,"A",{href:!0});var Mpt=s(bO);RPo=r(Mpt,"BigBirdPegasusForSequenceClassification"),Mpt.forEach(t),PPo=r(_$e," (BigBird-Pegasus model)"),_$e.forEach(t),BPo=i(j),b2=n(j,"LI",{});var b$e=s(b2);Cge=n(b$e,"STRONG",{});var Ept=s(Cge);IPo=r(Ept,"camembert"),Ept.forEach(t),NPo=r(b$e," \u2014 "),vO=n(b$e,"A",{href:!0});var Cpt=s(vO);qPo=r(Cpt,"CamembertForSequenceClassification"),Cpt.forEach(t),jPo=r(b$e," (CamemBERT model)"),b$e.forEach(t),DPo=i(j),v2=n(j,"LI",{});var v$e=s(v2);wge=n(v$e,"STRONG",{});var wpt=s(wge);GPo=r(wpt,"canine"),wpt.forEach(t),OPo=r(v$e," \u2014 "),FO=n(v$e,"A",{href:!0});var Apt=s(FO);VPo=r(Apt,"CanineForSequenceClassification"),Apt.forEach(t),XPo=r(v$e," (CANINE model)"),v$e.forEach(t),zPo=i(j),F2=n(j,"LI",{});var F$e=s(F2);Age=n(F$e,"STRONG",{});var ypt=s(Age);WPo=r(ypt,"convbert"),ypt.forEach(t),QPo=r(F$e," \u2014 "),TO=n(F$e,"A",{href:!0});var Lpt=s(TO);HPo=r(Lpt,"ConvBertForSequenceClassification"),Lpt.forEach(t),UPo=r(F$e," (ConvBERT model)"),F$e.forEach(t),JPo=i(j),T2=n(j,"LI",{});var T$e=s(T2);yge=n(T$e,"STRONG",{});var xpt=s(yge);YPo=r(xpt,"ctrl"),xpt.forEach(t),KPo=r(T$e," \u2014 "),MO=n(T$e,"A",{href:!0});var $pt=s(MO);ZPo=r($pt,"CTRLForSequenceClassification"),$pt.forEach(t),eBo=r(T$e," (CTRL model)"),T$e.forEach(t),oBo=i(j),M2=n(j,"LI",{});var M$e=s(M2);Lge=n(M$e,"STRONG",{});var kpt=s(Lge);rBo=r(kpt,"data2vec-text"),kpt.forEach(t),tBo=r(M$e," \u2014 "),EO=n(M$e,"A",{href:!0});var Spt=s(EO);aBo=r(Spt,"Data2VecTextForSequenceClassification"),Spt.forEach(t),nBo=r(M$e," (Data2VecText model)"),M$e.forEach(t),sBo=i(j),E2=n(j,"LI",{});var E$e=s(E2);xge=n(E$e,"STRONG",{});var Rpt=s(xge);lBo=r(Rpt,"deberta"),Rpt.forEach(t),iBo=r(E$e," \u2014 "),CO=n(E$e,"A",{href:!0});var Ppt=s(CO);dBo=r(Ppt,"DebertaForSequenceClassification"),Ppt.forEach(t),cBo=r(E$e," (DeBERTa model)"),E$e.forEach(t),fBo=i(j),C2=n(j,"LI",{});var C$e=s(C2);$ge=n(C$e,"STRONG",{});var Bpt=s($ge);mBo=r(Bpt,"deberta-v2"),Bpt.forEach(t),gBo=r(C$e," \u2014 "),wO=n(C$e,"A",{href:!0});var Ipt=s(wO);hBo=r(Ipt,"DebertaV2ForSequenceClassification"),Ipt.forEach(t),pBo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),uBo=i(j),w2=n(j,"LI",{});var w$e=s(w2);kge=n(w$e,"STRONG",{});var Npt=s(kge);_Bo=r(Npt,"distilbert"),Npt.forEach(t),bBo=r(w$e," \u2014 "),AO=n(w$e,"A",{href:!0});var qpt=s(AO);vBo=r(qpt,"DistilBertForSequenceClassification"),qpt.forEach(t),FBo=r(w$e," (DistilBERT model)"),w$e.forEach(t),TBo=i(j),A2=n(j,"LI",{});var A$e=s(A2);Sge=n(A$e,"STRONG",{});var jpt=s(Sge);MBo=r(jpt,"electra"),jpt.forEach(t),EBo=r(A$e," \u2014 "),yO=n(A$e,"A",{href:!0});var Dpt=s(yO);CBo=r(Dpt,"ElectraForSequenceClassification"),Dpt.forEach(t),wBo=r(A$e," (ELECTRA model)"),A$e.forEach(t),ABo=i(j),y2=n(j,"LI",{});var y$e=s(y2);Rge=n(y$e,"STRONG",{});var Gpt=s(Rge);yBo=r(Gpt,"flaubert"),Gpt.forEach(t),LBo=r(y$e," \u2014 "),LO=n(y$e,"A",{href:!0});var Opt=s(LO);xBo=r(Opt,"FlaubertForSequenceClassification"),Opt.forEach(t),$Bo=r(y$e," (FlauBERT model)"),y$e.forEach(t),kBo=i(j),L2=n(j,"LI",{});var L$e=s(L2);Pge=n(L$e,"STRONG",{});var Vpt=s(Pge);SBo=r(Vpt,"fnet"),Vpt.forEach(t),RBo=r(L$e," \u2014 "),xO=n(L$e,"A",{href:!0});var Xpt=s(xO);PBo=r(Xpt,"FNetForSequenceClassification"),Xpt.forEach(t),BBo=r(L$e," (FNet model)"),L$e.forEach(t),IBo=i(j),x2=n(j,"LI",{});var x$e=s(x2);Bge=n(x$e,"STRONG",{});var zpt=s(Bge);NBo=r(zpt,"funnel"),zpt.forEach(t),qBo=r(x$e," \u2014 "),$O=n(x$e,"A",{href:!0});var Wpt=s($O);jBo=r(Wpt,"FunnelForSequenceClassification"),Wpt.forEach(t),DBo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),GBo=i(j),$2=n(j,"LI",{});var $$e=s($2);Ige=n($$e,"STRONG",{});var Qpt=s(Ige);OBo=r(Qpt,"gpt2"),Qpt.forEach(t),VBo=r($$e," \u2014 "),kO=n($$e,"A",{href:!0});var Hpt=s(kO);XBo=r(Hpt,"GPT2ForSequenceClassification"),Hpt.forEach(t),zBo=r($$e," (OpenAI GPT-2 model)"),$$e.forEach(t),WBo=i(j),k2=n(j,"LI",{});var k$e=s(k2);Nge=n(k$e,"STRONG",{});var Upt=s(Nge);QBo=r(Upt,"gpt_neo"),Upt.forEach(t),HBo=r(k$e," \u2014 "),SO=n(k$e,"A",{href:!0});var Jpt=s(SO);UBo=r(Jpt,"GPTNeoForSequenceClassification"),Jpt.forEach(t),JBo=r(k$e," (GPT Neo model)"),k$e.forEach(t),YBo=i(j),S2=n(j,"LI",{});var S$e=s(S2);qge=n(S$e,"STRONG",{});var Ypt=s(qge);KBo=r(Ypt,"gptj"),Ypt.forEach(t),ZBo=r(S$e," \u2014 "),RO=n(S$e,"A",{href:!0});var Kpt=s(RO);eIo=r(Kpt,"GPTJForSequenceClassification"),Kpt.forEach(t),oIo=r(S$e," (GPT-J model)"),S$e.forEach(t),rIo=i(j),R2=n(j,"LI",{});var R$e=s(R2);jge=n(R$e,"STRONG",{});var Zpt=s(jge);tIo=r(Zpt,"ibert"),Zpt.forEach(t),aIo=r(R$e," \u2014 "),PO=n(R$e,"A",{href:!0});var eut=s(PO);nIo=r(eut,"IBertForSequenceClassification"),eut.forEach(t),sIo=r(R$e," (I-BERT model)"),R$e.forEach(t),lIo=i(j),P2=n(j,"LI",{});var P$e=s(P2);Dge=n(P$e,"STRONG",{});var out=s(Dge);iIo=r(out,"layoutlm"),out.forEach(t),dIo=r(P$e," \u2014 "),BO=n(P$e,"A",{href:!0});var rut=s(BO);cIo=r(rut,"LayoutLMForSequenceClassification"),rut.forEach(t),fIo=r(P$e," (LayoutLM model)"),P$e.forEach(t),mIo=i(j),B2=n(j,"LI",{});var B$e=s(B2);Gge=n(B$e,"STRONG",{});var tut=s(Gge);gIo=r(tut,"layoutlmv2"),tut.forEach(t),hIo=r(B$e," \u2014 "),IO=n(B$e,"A",{href:!0});var aut=s(IO);pIo=r(aut,"LayoutLMv2ForSequenceClassification"),aut.forEach(t),uIo=r(B$e," (LayoutLMv2 model)"),B$e.forEach(t),_Io=i(j),I2=n(j,"LI",{});var I$e=s(I2);Oge=n(I$e,"STRONG",{});var nut=s(Oge);bIo=r(nut,"layoutlmv3"),nut.forEach(t),vIo=r(I$e," \u2014 "),NO=n(I$e,"A",{href:!0});var sut=s(NO);FIo=r(sut,"LayoutLMv3ForSequenceClassification"),sut.forEach(t),TIo=r(I$e," (LayoutLMv3 model)"),I$e.forEach(t),MIo=i(j),N2=n(j,"LI",{});var N$e=s(N2);Vge=n(N$e,"STRONG",{});var lut=s(Vge);EIo=r(lut,"led"),lut.forEach(t),CIo=r(N$e," \u2014 "),qO=n(N$e,"A",{href:!0});var iut=s(qO);wIo=r(iut,"LEDForSequenceClassification"),iut.forEach(t),AIo=r(N$e," (LED model)"),N$e.forEach(t),yIo=i(j),q2=n(j,"LI",{});var q$e=s(q2);Xge=n(q$e,"STRONG",{});var dut=s(Xge);LIo=r(dut,"longformer"),dut.forEach(t),xIo=r(q$e," \u2014 "),jO=n(q$e,"A",{href:!0});var cut=s(jO);$Io=r(cut,"LongformerForSequenceClassification"),cut.forEach(t),kIo=r(q$e," (Longformer model)"),q$e.forEach(t),SIo=i(j),j2=n(j,"LI",{});var j$e=s(j2);zge=n(j$e,"STRONG",{});var fut=s(zge);RIo=r(fut,"mbart"),fut.forEach(t),PIo=r(j$e," \u2014 "),DO=n(j$e,"A",{href:!0});var mut=s(DO);BIo=r(mut,"MBartForSequenceClassification"),mut.forEach(t),IIo=r(j$e," (mBART model)"),j$e.forEach(t),NIo=i(j),D2=n(j,"LI",{});var D$e=s(D2);Wge=n(D$e,"STRONG",{});var gut=s(Wge);qIo=r(gut,"megatron-bert"),gut.forEach(t),jIo=r(D$e," \u2014 "),GO=n(D$e,"A",{href:!0});var hut=s(GO);DIo=r(hut,"MegatronBertForSequenceClassification"),hut.forEach(t),GIo=r(D$e," (Megatron-BERT model)"),D$e.forEach(t),OIo=i(j),G2=n(j,"LI",{});var G$e=s(G2);Qge=n(G$e,"STRONG",{});var put=s(Qge);VIo=r(put,"mobilebert"),put.forEach(t),XIo=r(G$e," \u2014 "),OO=n(G$e,"A",{href:!0});var uut=s(OO);zIo=r(uut,"MobileBertForSequenceClassification"),uut.forEach(t),WIo=r(G$e," (MobileBERT model)"),G$e.forEach(t),QIo=i(j),O2=n(j,"LI",{});var O$e=s(O2);Hge=n(O$e,"STRONG",{});var _ut=s(Hge);HIo=r(_ut,"mpnet"),_ut.forEach(t),UIo=r(O$e," \u2014 "),VO=n(O$e,"A",{href:!0});var but=s(VO);JIo=r(but,"MPNetForSequenceClassification"),but.forEach(t),YIo=r(O$e," (MPNet model)"),O$e.forEach(t),KIo=i(j),V2=n(j,"LI",{});var V$e=s(V2);Uge=n(V$e,"STRONG",{});var vut=s(Uge);ZIo=r(vut,"nystromformer"),vut.forEach(t),eNo=r(V$e," \u2014 "),XO=n(V$e,"A",{href:!0});var Fut=s(XO);oNo=r(Fut,"NystromformerForSequenceClassification"),Fut.forEach(t),rNo=r(V$e," (Nystr\xF6mformer model)"),V$e.forEach(t),tNo=i(j),X2=n(j,"LI",{});var X$e=s(X2);Jge=n(X$e,"STRONG",{});var Tut=s(Jge);aNo=r(Tut,"openai-gpt"),Tut.forEach(t),nNo=r(X$e," \u2014 "),zO=n(X$e,"A",{href:!0});var Mut=s(zO);sNo=r(Mut,"OpenAIGPTForSequenceClassification"),Mut.forEach(t),lNo=r(X$e," (OpenAI GPT model)"),X$e.forEach(t),iNo=i(j),z2=n(j,"LI",{});var z$e=s(z2);Yge=n(z$e,"STRONG",{});var Eut=s(Yge);dNo=r(Eut,"perceiver"),Eut.forEach(t),cNo=r(z$e," \u2014 "),WO=n(z$e,"A",{href:!0});var Cut=s(WO);fNo=r(Cut,"PerceiverForSequenceClassification"),Cut.forEach(t),mNo=r(z$e," (Perceiver model)"),z$e.forEach(t),gNo=i(j),W2=n(j,"LI",{});var W$e=s(W2);Kge=n(W$e,"STRONG",{});var wut=s(Kge);hNo=r(wut,"plbart"),wut.forEach(t),pNo=r(W$e," \u2014 "),QO=n(W$e,"A",{href:!0});var Aut=s(QO);uNo=r(Aut,"PLBartForSequenceClassification"),Aut.forEach(t),_No=r(W$e," (PLBart model)"),W$e.forEach(t),bNo=i(j),Q2=n(j,"LI",{});var Q$e=s(Q2);Zge=n(Q$e,"STRONG",{});var yut=s(Zge);vNo=r(yut,"qdqbert"),yut.forEach(t),FNo=r(Q$e," \u2014 "),HO=n(Q$e,"A",{href:!0});var Lut=s(HO);TNo=r(Lut,"QDQBertForSequenceClassification"),Lut.forEach(t),MNo=r(Q$e," (QDQBert model)"),Q$e.forEach(t),ENo=i(j),H2=n(j,"LI",{});var H$e=s(H2);ehe=n(H$e,"STRONG",{});var xut=s(ehe);CNo=r(xut,"reformer"),xut.forEach(t),wNo=r(H$e," \u2014 "),UO=n(H$e,"A",{href:!0});var $ut=s(UO);ANo=r($ut,"ReformerForSequenceClassification"),$ut.forEach(t),yNo=r(H$e," (Reformer model)"),H$e.forEach(t),LNo=i(j),U2=n(j,"LI",{});var U$e=s(U2);ohe=n(U$e,"STRONG",{});var kut=s(ohe);xNo=r(kut,"rembert"),kut.forEach(t),$No=r(U$e," \u2014 "),JO=n(U$e,"A",{href:!0});var Sut=s(JO);kNo=r(Sut,"RemBertForSequenceClassification"),Sut.forEach(t),SNo=r(U$e," (RemBERT model)"),U$e.forEach(t),RNo=i(j),J2=n(j,"LI",{});var J$e=s(J2);rhe=n(J$e,"STRONG",{});var Rut=s(rhe);PNo=r(Rut,"roberta"),Rut.forEach(t),BNo=r(J$e," \u2014 "),YO=n(J$e,"A",{href:!0});var Put=s(YO);INo=r(Put,"RobertaForSequenceClassification"),Put.forEach(t),NNo=r(J$e," (RoBERTa model)"),J$e.forEach(t),qNo=i(j),Y2=n(j,"LI",{});var Y$e=s(Y2);the=n(Y$e,"STRONG",{});var But=s(the);jNo=r(But,"roformer"),But.forEach(t),DNo=r(Y$e," \u2014 "),KO=n(Y$e,"A",{href:!0});var Iut=s(KO);GNo=r(Iut,"RoFormerForSequenceClassification"),Iut.forEach(t),ONo=r(Y$e," (RoFormer model)"),Y$e.forEach(t),VNo=i(j),K2=n(j,"LI",{});var K$e=s(K2);ahe=n(K$e,"STRONG",{});var Nut=s(ahe);XNo=r(Nut,"squeezebert"),Nut.forEach(t),zNo=r(K$e," \u2014 "),ZO=n(K$e,"A",{href:!0});var qut=s(ZO);WNo=r(qut,"SqueezeBertForSequenceClassification"),qut.forEach(t),QNo=r(K$e," (SqueezeBERT model)"),K$e.forEach(t),HNo=i(j),Z2=n(j,"LI",{});var Z$e=s(Z2);nhe=n(Z$e,"STRONG",{});var jut=s(nhe);UNo=r(jut,"tapas"),jut.forEach(t),JNo=r(Z$e," \u2014 "),eV=n(Z$e,"A",{href:!0});var Dut=s(eV);YNo=r(Dut,"TapasForSequenceClassification"),Dut.forEach(t),KNo=r(Z$e," (TAPAS model)"),Z$e.forEach(t),ZNo=i(j),ev=n(j,"LI",{});var eke=s(ev);she=n(eke,"STRONG",{});var Gut=s(she);eqo=r(Gut,"transfo-xl"),Gut.forEach(t),oqo=r(eke," \u2014 "),oV=n(eke,"A",{href:!0});var Out=s(oV);rqo=r(Out,"TransfoXLForSequenceClassification"),Out.forEach(t),tqo=r(eke," (Transformer-XL model)"),eke.forEach(t),aqo=i(j),ov=n(j,"LI",{});var oke=s(ov);lhe=n(oke,"STRONG",{});var Vut=s(lhe);nqo=r(Vut,"xlm"),Vut.forEach(t),sqo=r(oke," \u2014 "),rV=n(oke,"A",{href:!0});var Xut=s(rV);lqo=r(Xut,"XLMForSequenceClassification"),Xut.forEach(t),iqo=r(oke," (XLM model)"),oke.forEach(t),dqo=i(j),rv=n(j,"LI",{});var rke=s(rv);ihe=n(rke,"STRONG",{});var zut=s(ihe);cqo=r(zut,"xlm-roberta"),zut.forEach(t),fqo=r(rke," \u2014 "),tV=n(rke,"A",{href:!0});var Wut=s(tV);mqo=r(Wut,"XLMRobertaForSequenceClassification"),Wut.forEach(t),gqo=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),hqo=i(j),tv=n(j,"LI",{});var tke=s(tv);dhe=n(tke,"STRONG",{});var Qut=s(dhe);pqo=r(Qut,"xlm-roberta-xl"),Qut.forEach(t),uqo=r(tke," \u2014 "),aV=n(tke,"A",{href:!0});var Hut=s(aV);_qo=r(Hut,"XLMRobertaXLForSequenceClassification"),Hut.forEach(t),bqo=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),vqo=i(j),av=n(j,"LI",{});var ake=s(av);che=n(ake,"STRONG",{});var Uut=s(che);Fqo=r(Uut,"xlnet"),Uut.forEach(t),Tqo=r(ake," \u2014 "),nV=n(ake,"A",{href:!0});var Jut=s(nV);Mqo=r(Jut,"XLNetForSequenceClassification"),Jut.forEach(t),Eqo=r(ake," (XLNet model)"),ake.forEach(t),Cqo=i(j),nv=n(j,"LI",{});var nke=s(nv);fhe=n(nke,"STRONG",{});var Yut=s(fhe);wqo=r(Yut,"yoso"),Yut.forEach(t),Aqo=r(nke," \u2014 "),sV=n(nke,"A",{href:!0});var Kut=s(sV);yqo=r(Kut,"YosoForSequenceClassification"),Kut.forEach(t),Lqo=r(nke," (YOSO model)"),nke.forEach(t),j.forEach(t),xqo=i(da),sv=n(da,"P",{});var ske=s(sv);$qo=r(ske,"The model is set in evaluation mode by default using "),mhe=n(ske,"CODE",{});var Zut=s(mhe);kqo=r(Zut,"model.eval()"),Zut.forEach(t),Sqo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(ske,"CODE",{});var e_t=s(ghe);Rqo=r(e_t,"model.train()"),e_t.forEach(t),ske.forEach(t),Pqo=i(da),T(lv.$$.fragment,da),da.forEach(t),Zs.forEach(t),DDe=i(f),Yi=n(f,"H2",{class:!0});var WOe=s(Yi);iv=n(WOe,"A",{id:!0,class:!0,href:!0});var o_t=s(iv);hhe=n(o_t,"SPAN",{});var r_t=s(hhe);T(mA.$$.fragment,r_t),r_t.forEach(t),o_t.forEach(t),Bqo=i(WOe),phe=n(WOe,"SPAN",{});var t_t=s(phe);Iqo=r(t_t,"AutoModelForMultipleChoice"),t_t.forEach(t),WOe.forEach(t),GDe=i(f),Bo=n(f,"DIV",{class:!0});var el=s(Bo);T(gA.$$.fragment,el),Nqo=i(el),Ki=n(el,"P",{});var Vee=s(Ki);qqo=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lV=n(Vee,"A",{href:!0});var a_t=s(lV);jqo=r(a_t,"from_pretrained()"),a_t.forEach(t),Dqo=r(Vee," class method or the "),iV=n(Vee,"A",{href:!0});var n_t=s(iV);Gqo=r(n_t,"from_config()"),n_t.forEach(t),Oqo=r(Vee,` class
method.`),Vee.forEach(t),Vqo=i(el),hA=n(el,"P",{});var QOe=s(hA);Xqo=r(QOe,"This class cannot be instantiated directly using "),uhe=n(QOe,"CODE",{});var s_t=s(uhe);zqo=r(s_t,"__init__()"),s_t.forEach(t),Wqo=r(QOe," (throws an error)."),QOe.forEach(t),Qqo=i(el),ft=n(el,"DIV",{class:!0});var C3=s(ft);T(pA.$$.fragment,C3),Hqo=i(C3),_he=n(C3,"P",{});var l_t=s(_he);Uqo=r(l_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l_t.forEach(t),Jqo=i(C3),Zi=n(C3,"P",{});var Xee=s(Zi);Yqo=r(Xee,`Note:
Loading a model from its configuration file does `),bhe=n(Xee,"STRONG",{});var i_t=s(bhe);Kqo=r(i_t,"not"),i_t.forEach(t),Zqo=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(Xee,"A",{href:!0});var d_t=s(dV);ejo=r(d_t,"from_pretrained()"),d_t.forEach(t),ojo=r(Xee," to load the model weights."),Xee.forEach(t),rjo=i(C3),T(dv.$$.fragment,C3),C3.forEach(t),tjo=i(el),ro=n(el,"DIV",{class:!0});var ca=s(ro);T(uA.$$.fragment,ca),ajo=i(ca),vhe=n(ca,"P",{});var c_t=s(vhe);njo=r(c_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c_t.forEach(t),sjo=i(ca),qa=n(ca,"P",{});var w3=s(qa);ljo=r(w3,"The model class to instantiate is selected based on the "),Fhe=n(w3,"CODE",{});var f_t=s(Fhe);ijo=r(f_t,"model_type"),f_t.forEach(t),djo=r(w3,` property of the config object (either
passed as an argument or loaded from `),The=n(w3,"CODE",{});var m_t=s(The);cjo=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),fjo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(w3,"CODE",{});var g_t=s(Mhe);mjo=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),gjo=r(w3,":"),w3.forEach(t),hjo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);cv=n(ee,"LI",{});var lke=s(cv);Ehe=n(lke,"STRONG",{});var h_t=s(Ehe);pjo=r(h_t,"albert"),h_t.forEach(t),ujo=r(lke," \u2014 "),cV=n(lke,"A",{href:!0});var p_t=s(cV);_jo=r(p_t,"AlbertForMultipleChoice"),p_t.forEach(t),bjo=r(lke," (ALBERT model)"),lke.forEach(t),vjo=i(ee),fv=n(ee,"LI",{});var ike=s(fv);Che=n(ike,"STRONG",{});var u_t=s(Che);Fjo=r(u_t,"bert"),u_t.forEach(t),Tjo=r(ike," \u2014 "),fV=n(ike,"A",{href:!0});var __t=s(fV);Mjo=r(__t,"BertForMultipleChoice"),__t.forEach(t),Ejo=r(ike," (BERT model)"),ike.forEach(t),Cjo=i(ee),mv=n(ee,"LI",{});var dke=s(mv);whe=n(dke,"STRONG",{});var b_t=s(whe);wjo=r(b_t,"big_bird"),b_t.forEach(t),Ajo=r(dke," \u2014 "),mV=n(dke,"A",{href:!0});var v_t=s(mV);yjo=r(v_t,"BigBirdForMultipleChoice"),v_t.forEach(t),Ljo=r(dke," (BigBird model)"),dke.forEach(t),xjo=i(ee),gv=n(ee,"LI",{});var cke=s(gv);Ahe=n(cke,"STRONG",{});var F_t=s(Ahe);$jo=r(F_t,"camembert"),F_t.forEach(t),kjo=r(cke," \u2014 "),gV=n(cke,"A",{href:!0});var T_t=s(gV);Sjo=r(T_t,"CamembertForMultipleChoice"),T_t.forEach(t),Rjo=r(cke," (CamemBERT model)"),cke.forEach(t),Pjo=i(ee),hv=n(ee,"LI",{});var fke=s(hv);yhe=n(fke,"STRONG",{});var M_t=s(yhe);Bjo=r(M_t,"canine"),M_t.forEach(t),Ijo=r(fke," \u2014 "),hV=n(fke,"A",{href:!0});var E_t=s(hV);Njo=r(E_t,"CanineForMultipleChoice"),E_t.forEach(t),qjo=r(fke," (CANINE model)"),fke.forEach(t),jjo=i(ee),pv=n(ee,"LI",{});var mke=s(pv);Lhe=n(mke,"STRONG",{});var C_t=s(Lhe);Djo=r(C_t,"convbert"),C_t.forEach(t),Gjo=r(mke," \u2014 "),pV=n(mke,"A",{href:!0});var w_t=s(pV);Ojo=r(w_t,"ConvBertForMultipleChoice"),w_t.forEach(t),Vjo=r(mke," (ConvBERT model)"),mke.forEach(t),Xjo=i(ee),uv=n(ee,"LI",{});var gke=s(uv);xhe=n(gke,"STRONG",{});var A_t=s(xhe);zjo=r(A_t,"data2vec-text"),A_t.forEach(t),Wjo=r(gke," \u2014 "),uV=n(gke,"A",{href:!0});var y_t=s(uV);Qjo=r(y_t,"Data2VecTextForMultipleChoice"),y_t.forEach(t),Hjo=r(gke," (Data2VecText model)"),gke.forEach(t),Ujo=i(ee),_v=n(ee,"LI",{});var hke=s(_v);$he=n(hke,"STRONG",{});var L_t=s($he);Jjo=r(L_t,"deberta-v2"),L_t.forEach(t),Yjo=r(hke," \u2014 "),_V=n(hke,"A",{href:!0});var x_t=s(_V);Kjo=r(x_t,"DebertaV2ForMultipleChoice"),x_t.forEach(t),Zjo=r(hke," (DeBERTa-v2 model)"),hke.forEach(t),eDo=i(ee),bv=n(ee,"LI",{});var pke=s(bv);khe=n(pke,"STRONG",{});var $_t=s(khe);oDo=r($_t,"distilbert"),$_t.forEach(t),rDo=r(pke," \u2014 "),bV=n(pke,"A",{href:!0});var k_t=s(bV);tDo=r(k_t,"DistilBertForMultipleChoice"),k_t.forEach(t),aDo=r(pke," (DistilBERT model)"),pke.forEach(t),nDo=i(ee),vv=n(ee,"LI",{});var uke=s(vv);She=n(uke,"STRONG",{});var S_t=s(She);sDo=r(S_t,"electra"),S_t.forEach(t),lDo=r(uke," \u2014 "),vV=n(uke,"A",{href:!0});var R_t=s(vV);iDo=r(R_t,"ElectraForMultipleChoice"),R_t.forEach(t),dDo=r(uke," (ELECTRA model)"),uke.forEach(t),cDo=i(ee),Fv=n(ee,"LI",{});var _ke=s(Fv);Rhe=n(_ke,"STRONG",{});var P_t=s(Rhe);fDo=r(P_t,"flaubert"),P_t.forEach(t),mDo=r(_ke," \u2014 "),FV=n(_ke,"A",{href:!0});var B_t=s(FV);gDo=r(B_t,"FlaubertForMultipleChoice"),B_t.forEach(t),hDo=r(_ke," (FlauBERT model)"),_ke.forEach(t),pDo=i(ee),Tv=n(ee,"LI",{});var bke=s(Tv);Phe=n(bke,"STRONG",{});var I_t=s(Phe);uDo=r(I_t,"fnet"),I_t.forEach(t),_Do=r(bke," \u2014 "),TV=n(bke,"A",{href:!0});var N_t=s(TV);bDo=r(N_t,"FNetForMultipleChoice"),N_t.forEach(t),vDo=r(bke," (FNet model)"),bke.forEach(t),FDo=i(ee),Mv=n(ee,"LI",{});var vke=s(Mv);Bhe=n(vke,"STRONG",{});var q_t=s(Bhe);TDo=r(q_t,"funnel"),q_t.forEach(t),MDo=r(vke," \u2014 "),MV=n(vke,"A",{href:!0});var j_t=s(MV);EDo=r(j_t,"FunnelForMultipleChoice"),j_t.forEach(t),CDo=r(vke," (Funnel Transformer model)"),vke.forEach(t),wDo=i(ee),Ev=n(ee,"LI",{});var Fke=s(Ev);Ihe=n(Fke,"STRONG",{});var D_t=s(Ihe);ADo=r(D_t,"ibert"),D_t.forEach(t),yDo=r(Fke," \u2014 "),EV=n(Fke,"A",{href:!0});var G_t=s(EV);LDo=r(G_t,"IBertForMultipleChoice"),G_t.forEach(t),xDo=r(Fke," (I-BERT model)"),Fke.forEach(t),$Do=i(ee),Cv=n(ee,"LI",{});var Tke=s(Cv);Nhe=n(Tke,"STRONG",{});var O_t=s(Nhe);kDo=r(O_t,"longformer"),O_t.forEach(t),SDo=r(Tke," \u2014 "),CV=n(Tke,"A",{href:!0});var V_t=s(CV);RDo=r(V_t,"LongformerForMultipleChoice"),V_t.forEach(t),PDo=r(Tke," (Longformer model)"),Tke.forEach(t),BDo=i(ee),wv=n(ee,"LI",{});var Mke=s(wv);qhe=n(Mke,"STRONG",{});var X_t=s(qhe);IDo=r(X_t,"megatron-bert"),X_t.forEach(t),NDo=r(Mke," \u2014 "),wV=n(Mke,"A",{href:!0});var z_t=s(wV);qDo=r(z_t,"MegatronBertForMultipleChoice"),z_t.forEach(t),jDo=r(Mke," (Megatron-BERT model)"),Mke.forEach(t),DDo=i(ee),Av=n(ee,"LI",{});var Eke=s(Av);jhe=n(Eke,"STRONG",{});var W_t=s(jhe);GDo=r(W_t,"mobilebert"),W_t.forEach(t),ODo=r(Eke," \u2014 "),AV=n(Eke,"A",{href:!0});var Q_t=s(AV);VDo=r(Q_t,"MobileBertForMultipleChoice"),Q_t.forEach(t),XDo=r(Eke," (MobileBERT model)"),Eke.forEach(t),zDo=i(ee),yv=n(ee,"LI",{});var Cke=s(yv);Dhe=n(Cke,"STRONG",{});var H_t=s(Dhe);WDo=r(H_t,"mpnet"),H_t.forEach(t),QDo=r(Cke," \u2014 "),yV=n(Cke,"A",{href:!0});var U_t=s(yV);HDo=r(U_t,"MPNetForMultipleChoice"),U_t.forEach(t),UDo=r(Cke," (MPNet model)"),Cke.forEach(t),JDo=i(ee),Lv=n(ee,"LI",{});var wke=s(Lv);Ghe=n(wke,"STRONG",{});var J_t=s(Ghe);YDo=r(J_t,"nystromformer"),J_t.forEach(t),KDo=r(wke," \u2014 "),LV=n(wke,"A",{href:!0});var Y_t=s(LV);ZDo=r(Y_t,"NystromformerForMultipleChoice"),Y_t.forEach(t),eGo=r(wke," (Nystr\xF6mformer model)"),wke.forEach(t),oGo=i(ee),xv=n(ee,"LI",{});var Ake=s(xv);Ohe=n(Ake,"STRONG",{});var K_t=s(Ohe);rGo=r(K_t,"qdqbert"),K_t.forEach(t),tGo=r(Ake," \u2014 "),xV=n(Ake,"A",{href:!0});var Z_t=s(xV);aGo=r(Z_t,"QDQBertForMultipleChoice"),Z_t.forEach(t),nGo=r(Ake," (QDQBert model)"),Ake.forEach(t),sGo=i(ee),$v=n(ee,"LI",{});var yke=s($v);Vhe=n(yke,"STRONG",{});var e1t=s(Vhe);lGo=r(e1t,"rembert"),e1t.forEach(t),iGo=r(yke," \u2014 "),$V=n(yke,"A",{href:!0});var o1t=s($V);dGo=r(o1t,"RemBertForMultipleChoice"),o1t.forEach(t),cGo=r(yke," (RemBERT model)"),yke.forEach(t),fGo=i(ee),kv=n(ee,"LI",{});var Lke=s(kv);Xhe=n(Lke,"STRONG",{});var r1t=s(Xhe);mGo=r(r1t,"roberta"),r1t.forEach(t),gGo=r(Lke," \u2014 "),kV=n(Lke,"A",{href:!0});var t1t=s(kV);hGo=r(t1t,"RobertaForMultipleChoice"),t1t.forEach(t),pGo=r(Lke," (RoBERTa model)"),Lke.forEach(t),uGo=i(ee),Sv=n(ee,"LI",{});var xke=s(Sv);zhe=n(xke,"STRONG",{});var a1t=s(zhe);_Go=r(a1t,"roformer"),a1t.forEach(t),bGo=r(xke," \u2014 "),SV=n(xke,"A",{href:!0});var n1t=s(SV);vGo=r(n1t,"RoFormerForMultipleChoice"),n1t.forEach(t),FGo=r(xke," (RoFormer model)"),xke.forEach(t),TGo=i(ee),Rv=n(ee,"LI",{});var $ke=s(Rv);Whe=n($ke,"STRONG",{});var s1t=s(Whe);MGo=r(s1t,"squeezebert"),s1t.forEach(t),EGo=r($ke," \u2014 "),RV=n($ke,"A",{href:!0});var l1t=s(RV);CGo=r(l1t,"SqueezeBertForMultipleChoice"),l1t.forEach(t),wGo=r($ke," (SqueezeBERT model)"),$ke.forEach(t),AGo=i(ee),Pv=n(ee,"LI",{});var kke=s(Pv);Qhe=n(kke,"STRONG",{});var i1t=s(Qhe);yGo=r(i1t,"xlm"),i1t.forEach(t),LGo=r(kke," \u2014 "),PV=n(kke,"A",{href:!0});var d1t=s(PV);xGo=r(d1t,"XLMForMultipleChoice"),d1t.forEach(t),$Go=r(kke," (XLM model)"),kke.forEach(t),kGo=i(ee),Bv=n(ee,"LI",{});var Ske=s(Bv);Hhe=n(Ske,"STRONG",{});var c1t=s(Hhe);SGo=r(c1t,"xlm-roberta"),c1t.forEach(t),RGo=r(Ske," \u2014 "),BV=n(Ske,"A",{href:!0});var f1t=s(BV);PGo=r(f1t,"XLMRobertaForMultipleChoice"),f1t.forEach(t),BGo=r(Ske," (XLM-RoBERTa model)"),Ske.forEach(t),IGo=i(ee),Iv=n(ee,"LI",{});var Rke=s(Iv);Uhe=n(Rke,"STRONG",{});var m1t=s(Uhe);NGo=r(m1t,"xlm-roberta-xl"),m1t.forEach(t),qGo=r(Rke," \u2014 "),IV=n(Rke,"A",{href:!0});var g1t=s(IV);jGo=r(g1t,"XLMRobertaXLForMultipleChoice"),g1t.forEach(t),DGo=r(Rke," (XLM-RoBERTa-XL model)"),Rke.forEach(t),GGo=i(ee),Nv=n(ee,"LI",{});var Pke=s(Nv);Jhe=n(Pke,"STRONG",{});var h1t=s(Jhe);OGo=r(h1t,"xlnet"),h1t.forEach(t),VGo=r(Pke," \u2014 "),NV=n(Pke,"A",{href:!0});var p1t=s(NV);XGo=r(p1t,"XLNetForMultipleChoice"),p1t.forEach(t),zGo=r(Pke," (XLNet model)"),Pke.forEach(t),WGo=i(ee),qv=n(ee,"LI",{});var Bke=s(qv);Yhe=n(Bke,"STRONG",{});var u1t=s(Yhe);QGo=r(u1t,"yoso"),u1t.forEach(t),HGo=r(Bke," \u2014 "),qV=n(Bke,"A",{href:!0});var _1t=s(qV);UGo=r(_1t,"YosoForMultipleChoice"),_1t.forEach(t),JGo=r(Bke," (YOSO model)"),Bke.forEach(t),ee.forEach(t),YGo=i(ca),jv=n(ca,"P",{});var Ike=s(jv);KGo=r(Ike,"The model is set in evaluation mode by default using "),Khe=n(Ike,"CODE",{});var b1t=s(Khe);ZGo=r(b1t,"model.eval()"),b1t.forEach(t),eOo=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(Ike,"CODE",{});var v1t=s(Zhe);oOo=r(v1t,"model.train()"),v1t.forEach(t),Ike.forEach(t),rOo=i(ca),T(Dv.$$.fragment,ca),ca.forEach(t),el.forEach(t),ODe=i(f),ed=n(f,"H2",{class:!0});var HOe=s(ed);Gv=n(HOe,"A",{id:!0,class:!0,href:!0});var F1t=s(Gv);epe=n(F1t,"SPAN",{});var T1t=s(epe);T(_A.$$.fragment,T1t),T1t.forEach(t),F1t.forEach(t),tOo=i(HOe),ope=n(HOe,"SPAN",{});var M1t=s(ope);aOo=r(M1t,"AutoModelForNextSentencePrediction"),M1t.forEach(t),HOe.forEach(t),VDe=i(f),Io=n(f,"DIV",{class:!0});var ol=s(Io);T(bA.$$.fragment,ol),nOo=i(ol),od=n(ol,"P",{});var zee=s(od);sOo=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jV=n(zee,"A",{href:!0});var E1t=s(jV);lOo=r(E1t,"from_pretrained()"),E1t.forEach(t),iOo=r(zee," class method or the "),DV=n(zee,"A",{href:!0});var C1t=s(DV);dOo=r(C1t,"from_config()"),C1t.forEach(t),cOo=r(zee,` class
method.`),zee.forEach(t),fOo=i(ol),vA=n(ol,"P",{});var UOe=s(vA);mOo=r(UOe,"This class cannot be instantiated directly using "),rpe=n(UOe,"CODE",{});var w1t=s(rpe);gOo=r(w1t,"__init__()"),w1t.forEach(t),hOo=r(UOe," (throws an error)."),UOe.forEach(t),pOo=i(ol),mt=n(ol,"DIV",{class:!0});var A3=s(mt);T(FA.$$.fragment,A3),uOo=i(A3),tpe=n(A3,"P",{});var A1t=s(tpe);_Oo=r(A1t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A1t.forEach(t),bOo=i(A3),rd=n(A3,"P",{});var Wee=s(rd);vOo=r(Wee,`Note:
Loading a model from its configuration file does `),ape=n(Wee,"STRONG",{});var y1t=s(ape);FOo=r(y1t,"not"),y1t.forEach(t),TOo=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(Wee,"A",{href:!0});var L1t=s(GV);MOo=r(L1t,"from_pretrained()"),L1t.forEach(t),EOo=r(Wee," to load the model weights."),Wee.forEach(t),COo=i(A3),T(Ov.$$.fragment,A3),A3.forEach(t),wOo=i(ol),to=n(ol,"DIV",{class:!0});var fa=s(to);T(TA.$$.fragment,fa),AOo=i(fa),npe=n(fa,"P",{});var x1t=s(npe);yOo=r(x1t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),x1t.forEach(t),LOo=i(fa),ja=n(fa,"P",{});var y3=s(ja);xOo=r(y3,"The model class to instantiate is selected based on the "),spe=n(y3,"CODE",{});var $1t=s(spe);$Oo=r($1t,"model_type"),$1t.forEach(t),kOo=r(y3,` property of the config object (either
passed as an argument or loaded from `),lpe=n(y3,"CODE",{});var k1t=s(lpe);SOo=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),ROo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(y3,"CODE",{});var S1t=s(ipe);POo=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),BOo=r(y3,":"),y3.forEach(t),IOo=i(fa),Zr=n(fa,"UL",{});var rl=s(Zr);Vv=n(rl,"LI",{});var Nke=s(Vv);dpe=n(Nke,"STRONG",{});var R1t=s(dpe);NOo=r(R1t,"bert"),R1t.forEach(t),qOo=r(Nke," \u2014 "),OV=n(Nke,"A",{href:!0});var P1t=s(OV);jOo=r(P1t,"BertForNextSentencePrediction"),P1t.forEach(t),DOo=r(Nke," (BERT model)"),Nke.forEach(t),GOo=i(rl),Xv=n(rl,"LI",{});var qke=s(Xv);cpe=n(qke,"STRONG",{});var B1t=s(cpe);OOo=r(B1t,"fnet"),B1t.forEach(t),VOo=r(qke," \u2014 "),VV=n(qke,"A",{href:!0});var I1t=s(VV);XOo=r(I1t,"FNetForNextSentencePrediction"),I1t.forEach(t),zOo=r(qke," (FNet model)"),qke.forEach(t),WOo=i(rl),zv=n(rl,"LI",{});var jke=s(zv);fpe=n(jke,"STRONG",{});var N1t=s(fpe);QOo=r(N1t,"megatron-bert"),N1t.forEach(t),HOo=r(jke," \u2014 "),XV=n(jke,"A",{href:!0});var q1t=s(XV);UOo=r(q1t,"MegatronBertForNextSentencePrediction"),q1t.forEach(t),JOo=r(jke," (Megatron-BERT model)"),jke.forEach(t),YOo=i(rl),Wv=n(rl,"LI",{});var Dke=s(Wv);mpe=n(Dke,"STRONG",{});var j1t=s(mpe);KOo=r(j1t,"mobilebert"),j1t.forEach(t),ZOo=r(Dke," \u2014 "),zV=n(Dke,"A",{href:!0});var D1t=s(zV);eVo=r(D1t,"MobileBertForNextSentencePrediction"),D1t.forEach(t),oVo=r(Dke," (MobileBERT model)"),Dke.forEach(t),rVo=i(rl),Qv=n(rl,"LI",{});var Gke=s(Qv);gpe=n(Gke,"STRONG",{});var G1t=s(gpe);tVo=r(G1t,"qdqbert"),G1t.forEach(t),aVo=r(Gke," \u2014 "),WV=n(Gke,"A",{href:!0});var O1t=s(WV);nVo=r(O1t,"QDQBertForNextSentencePrediction"),O1t.forEach(t),sVo=r(Gke," (QDQBert model)"),Gke.forEach(t),rl.forEach(t),lVo=i(fa),Hv=n(fa,"P",{});var Oke=s(Hv);iVo=r(Oke,"The model is set in evaluation mode by default using "),hpe=n(Oke,"CODE",{});var V1t=s(hpe);dVo=r(V1t,"model.eval()"),V1t.forEach(t),cVo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(Oke,"CODE",{});var X1t=s(ppe);fVo=r(X1t,"model.train()"),X1t.forEach(t),Oke.forEach(t),mVo=i(fa),T(Uv.$$.fragment,fa),fa.forEach(t),ol.forEach(t),XDe=i(f),td=n(f,"H2",{class:!0});var JOe=s(td);Jv=n(JOe,"A",{id:!0,class:!0,href:!0});var z1t=s(Jv);upe=n(z1t,"SPAN",{});var W1t=s(upe);T(MA.$$.fragment,W1t),W1t.forEach(t),z1t.forEach(t),gVo=i(JOe),_pe=n(JOe,"SPAN",{});var Q1t=s(_pe);hVo=r(Q1t,"AutoModelForTokenClassification"),Q1t.forEach(t),JOe.forEach(t),zDe=i(f),No=n(f,"DIV",{class:!0});var tl=s(No);T(EA.$$.fragment,tl),pVo=i(tl),ad=n(tl,"P",{});var Qee=s(ad);uVo=r(Qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QV=n(Qee,"A",{href:!0});var H1t=s(QV);_Vo=r(H1t,"from_pretrained()"),H1t.forEach(t),bVo=r(Qee," class method or the "),HV=n(Qee,"A",{href:!0});var U1t=s(HV);vVo=r(U1t,"from_config()"),U1t.forEach(t),FVo=r(Qee,` class
method.`),Qee.forEach(t),TVo=i(tl),CA=n(tl,"P",{});var YOe=s(CA);MVo=r(YOe,"This class cannot be instantiated directly using "),bpe=n(YOe,"CODE",{});var J1t=s(bpe);EVo=r(J1t,"__init__()"),J1t.forEach(t),CVo=r(YOe," (throws an error)."),YOe.forEach(t),wVo=i(tl),gt=n(tl,"DIV",{class:!0});var L3=s(gt);T(wA.$$.fragment,L3),AVo=i(L3),vpe=n(L3,"P",{});var Y1t=s(vpe);yVo=r(Y1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y1t.forEach(t),LVo=i(L3),nd=n(L3,"P",{});var Hee=s(nd);xVo=r(Hee,`Note:
Loading a model from its configuration file does `),Fpe=n(Hee,"STRONG",{});var K1t=s(Fpe);$Vo=r(K1t,"not"),K1t.forEach(t),kVo=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(Hee,"A",{href:!0});var Z1t=s(UV);SVo=r(Z1t,"from_pretrained()"),Z1t.forEach(t),RVo=r(Hee," to load the model weights."),Hee.forEach(t),PVo=i(L3),T(Yv.$$.fragment,L3),L3.forEach(t),BVo=i(tl),ao=n(tl,"DIV",{class:!0});var ma=s(ao);T(AA.$$.fragment,ma),IVo=i(ma),Tpe=n(ma,"P",{});var ebt=s(Tpe);NVo=r(ebt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ebt.forEach(t),qVo=i(ma),Da=n(ma,"P",{});var x3=s(Da);jVo=r(x3,"The model class to instantiate is selected based on the "),Mpe=n(x3,"CODE",{});var obt=s(Mpe);DVo=r(obt,"model_type"),obt.forEach(t),GVo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Epe=n(x3,"CODE",{});var rbt=s(Epe);OVo=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),VVo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(x3,"CODE",{});var tbt=s(Cpe);XVo=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),zVo=r(x3,":"),x3.forEach(t),WVo=i(ma),U=n(ma,"UL",{});var J=s(U);Kv=n(J,"LI",{});var Vke=s(Kv);wpe=n(Vke,"STRONG",{});var abt=s(wpe);QVo=r(abt,"albert"),abt.forEach(t),HVo=r(Vke," \u2014 "),JV=n(Vke,"A",{href:!0});var nbt=s(JV);UVo=r(nbt,"AlbertForTokenClassification"),nbt.forEach(t),JVo=r(Vke," (ALBERT model)"),Vke.forEach(t),YVo=i(J),Zv=n(J,"LI",{});var Xke=s(Zv);Ape=n(Xke,"STRONG",{});var sbt=s(Ape);KVo=r(sbt,"bert"),sbt.forEach(t),ZVo=r(Xke," \u2014 "),YV=n(Xke,"A",{href:!0});var lbt=s(YV);eXo=r(lbt,"BertForTokenClassification"),lbt.forEach(t),oXo=r(Xke," (BERT model)"),Xke.forEach(t),rXo=i(J),eF=n(J,"LI",{});var zke=s(eF);ype=n(zke,"STRONG",{});var ibt=s(ype);tXo=r(ibt,"big_bird"),ibt.forEach(t),aXo=r(zke," \u2014 "),KV=n(zke,"A",{href:!0});var dbt=s(KV);nXo=r(dbt,"BigBirdForTokenClassification"),dbt.forEach(t),sXo=r(zke," (BigBird model)"),zke.forEach(t),lXo=i(J),oF=n(J,"LI",{});var Wke=s(oF);Lpe=n(Wke,"STRONG",{});var cbt=s(Lpe);iXo=r(cbt,"camembert"),cbt.forEach(t),dXo=r(Wke," \u2014 "),ZV=n(Wke,"A",{href:!0});var fbt=s(ZV);cXo=r(fbt,"CamembertForTokenClassification"),fbt.forEach(t),fXo=r(Wke," (CamemBERT model)"),Wke.forEach(t),mXo=i(J),rF=n(J,"LI",{});var Qke=s(rF);xpe=n(Qke,"STRONG",{});var mbt=s(xpe);gXo=r(mbt,"canine"),mbt.forEach(t),hXo=r(Qke," \u2014 "),eX=n(Qke,"A",{href:!0});var gbt=s(eX);pXo=r(gbt,"CanineForTokenClassification"),gbt.forEach(t),uXo=r(Qke," (CANINE model)"),Qke.forEach(t),_Xo=i(J),tF=n(J,"LI",{});var Hke=s(tF);$pe=n(Hke,"STRONG",{});var hbt=s($pe);bXo=r(hbt,"convbert"),hbt.forEach(t),vXo=r(Hke," \u2014 "),oX=n(Hke,"A",{href:!0});var pbt=s(oX);FXo=r(pbt,"ConvBertForTokenClassification"),pbt.forEach(t),TXo=r(Hke," (ConvBERT model)"),Hke.forEach(t),MXo=i(J),aF=n(J,"LI",{});var Uke=s(aF);kpe=n(Uke,"STRONG",{});var ubt=s(kpe);EXo=r(ubt,"data2vec-text"),ubt.forEach(t),CXo=r(Uke," \u2014 "),rX=n(Uke,"A",{href:!0});var _bt=s(rX);wXo=r(_bt,"Data2VecTextForTokenClassification"),_bt.forEach(t),AXo=r(Uke," (Data2VecText model)"),Uke.forEach(t),yXo=i(J),nF=n(J,"LI",{});var Jke=s(nF);Spe=n(Jke,"STRONG",{});var bbt=s(Spe);LXo=r(bbt,"deberta"),bbt.forEach(t),xXo=r(Jke," \u2014 "),tX=n(Jke,"A",{href:!0});var vbt=s(tX);$Xo=r(vbt,"DebertaForTokenClassification"),vbt.forEach(t),kXo=r(Jke," (DeBERTa model)"),Jke.forEach(t),SXo=i(J),sF=n(J,"LI",{});var Yke=s(sF);Rpe=n(Yke,"STRONG",{});var Fbt=s(Rpe);RXo=r(Fbt,"deberta-v2"),Fbt.forEach(t),PXo=r(Yke," \u2014 "),aX=n(Yke,"A",{href:!0});var Tbt=s(aX);BXo=r(Tbt,"DebertaV2ForTokenClassification"),Tbt.forEach(t),IXo=r(Yke," (DeBERTa-v2 model)"),Yke.forEach(t),NXo=i(J),lF=n(J,"LI",{});var Kke=s(lF);Ppe=n(Kke,"STRONG",{});var Mbt=s(Ppe);qXo=r(Mbt,"distilbert"),Mbt.forEach(t),jXo=r(Kke," \u2014 "),nX=n(Kke,"A",{href:!0});var Ebt=s(nX);DXo=r(Ebt,"DistilBertForTokenClassification"),Ebt.forEach(t),GXo=r(Kke," (DistilBERT model)"),Kke.forEach(t),OXo=i(J),iF=n(J,"LI",{});var Zke=s(iF);Bpe=n(Zke,"STRONG",{});var Cbt=s(Bpe);VXo=r(Cbt,"electra"),Cbt.forEach(t),XXo=r(Zke," \u2014 "),sX=n(Zke,"A",{href:!0});var wbt=s(sX);zXo=r(wbt,"ElectraForTokenClassification"),wbt.forEach(t),WXo=r(Zke," (ELECTRA model)"),Zke.forEach(t),QXo=i(J),dF=n(J,"LI",{});var eSe=s(dF);Ipe=n(eSe,"STRONG",{});var Abt=s(Ipe);HXo=r(Abt,"flaubert"),Abt.forEach(t),UXo=r(eSe," \u2014 "),lX=n(eSe,"A",{href:!0});var ybt=s(lX);JXo=r(ybt,"FlaubertForTokenClassification"),ybt.forEach(t),YXo=r(eSe," (FlauBERT model)"),eSe.forEach(t),KXo=i(J),cF=n(J,"LI",{});var oSe=s(cF);Npe=n(oSe,"STRONG",{});var Lbt=s(Npe);ZXo=r(Lbt,"fnet"),Lbt.forEach(t),ezo=r(oSe," \u2014 "),iX=n(oSe,"A",{href:!0});var xbt=s(iX);ozo=r(xbt,"FNetForTokenClassification"),xbt.forEach(t),rzo=r(oSe," (FNet model)"),oSe.forEach(t),tzo=i(J),fF=n(J,"LI",{});var rSe=s(fF);qpe=n(rSe,"STRONG",{});var $bt=s(qpe);azo=r($bt,"funnel"),$bt.forEach(t),nzo=r(rSe," \u2014 "),dX=n(rSe,"A",{href:!0});var kbt=s(dX);szo=r(kbt,"FunnelForTokenClassification"),kbt.forEach(t),lzo=r(rSe," (Funnel Transformer model)"),rSe.forEach(t),izo=i(J),mF=n(J,"LI",{});var tSe=s(mF);jpe=n(tSe,"STRONG",{});var Sbt=s(jpe);dzo=r(Sbt,"gpt2"),Sbt.forEach(t),czo=r(tSe," \u2014 "),cX=n(tSe,"A",{href:!0});var Rbt=s(cX);fzo=r(Rbt,"GPT2ForTokenClassification"),Rbt.forEach(t),mzo=r(tSe," (OpenAI GPT-2 model)"),tSe.forEach(t),gzo=i(J),gF=n(J,"LI",{});var aSe=s(gF);Dpe=n(aSe,"STRONG",{});var Pbt=s(Dpe);hzo=r(Pbt,"ibert"),Pbt.forEach(t),pzo=r(aSe," \u2014 "),fX=n(aSe,"A",{href:!0});var Bbt=s(fX);uzo=r(Bbt,"IBertForTokenClassification"),Bbt.forEach(t),_zo=r(aSe," (I-BERT model)"),aSe.forEach(t),bzo=i(J),hF=n(J,"LI",{});var nSe=s(hF);Gpe=n(nSe,"STRONG",{});var Ibt=s(Gpe);vzo=r(Ibt,"layoutlm"),Ibt.forEach(t),Fzo=r(nSe," \u2014 "),mX=n(nSe,"A",{href:!0});var Nbt=s(mX);Tzo=r(Nbt,"LayoutLMForTokenClassification"),Nbt.forEach(t),Mzo=r(nSe," (LayoutLM model)"),nSe.forEach(t),Ezo=i(J),pF=n(J,"LI",{});var sSe=s(pF);Ope=n(sSe,"STRONG",{});var qbt=s(Ope);Czo=r(qbt,"layoutlmv2"),qbt.forEach(t),wzo=r(sSe," \u2014 "),gX=n(sSe,"A",{href:!0});var jbt=s(gX);Azo=r(jbt,"LayoutLMv2ForTokenClassification"),jbt.forEach(t),yzo=r(sSe," (LayoutLMv2 model)"),sSe.forEach(t),Lzo=i(J),uF=n(J,"LI",{});var lSe=s(uF);Vpe=n(lSe,"STRONG",{});var Dbt=s(Vpe);xzo=r(Dbt,"layoutlmv3"),Dbt.forEach(t),$zo=r(lSe," \u2014 "),hX=n(lSe,"A",{href:!0});var Gbt=s(hX);kzo=r(Gbt,"LayoutLMv3ForTokenClassification"),Gbt.forEach(t),Szo=r(lSe," (LayoutLMv3 model)"),lSe.forEach(t),Rzo=i(J),_F=n(J,"LI",{});var iSe=s(_F);Xpe=n(iSe,"STRONG",{});var Obt=s(Xpe);Pzo=r(Obt,"longformer"),Obt.forEach(t),Bzo=r(iSe," \u2014 "),pX=n(iSe,"A",{href:!0});var Vbt=s(pX);Izo=r(Vbt,"LongformerForTokenClassification"),Vbt.forEach(t),Nzo=r(iSe," (Longformer model)"),iSe.forEach(t),qzo=i(J),bF=n(J,"LI",{});var dSe=s(bF);zpe=n(dSe,"STRONG",{});var Xbt=s(zpe);jzo=r(Xbt,"megatron-bert"),Xbt.forEach(t),Dzo=r(dSe," \u2014 "),uX=n(dSe,"A",{href:!0});var zbt=s(uX);Gzo=r(zbt,"MegatronBertForTokenClassification"),zbt.forEach(t),Ozo=r(dSe," (Megatron-BERT model)"),dSe.forEach(t),Vzo=i(J),vF=n(J,"LI",{});var cSe=s(vF);Wpe=n(cSe,"STRONG",{});var Wbt=s(Wpe);Xzo=r(Wbt,"mobilebert"),Wbt.forEach(t),zzo=r(cSe," \u2014 "),_X=n(cSe,"A",{href:!0});var Qbt=s(_X);Wzo=r(Qbt,"MobileBertForTokenClassification"),Qbt.forEach(t),Qzo=r(cSe," (MobileBERT model)"),cSe.forEach(t),Hzo=i(J),FF=n(J,"LI",{});var fSe=s(FF);Qpe=n(fSe,"STRONG",{});var Hbt=s(Qpe);Uzo=r(Hbt,"mpnet"),Hbt.forEach(t),Jzo=r(fSe," \u2014 "),bX=n(fSe,"A",{href:!0});var Ubt=s(bX);Yzo=r(Ubt,"MPNetForTokenClassification"),Ubt.forEach(t),Kzo=r(fSe," (MPNet model)"),fSe.forEach(t),Zzo=i(J),TF=n(J,"LI",{});var mSe=s(TF);Hpe=n(mSe,"STRONG",{});var Jbt=s(Hpe);eWo=r(Jbt,"nystromformer"),Jbt.forEach(t),oWo=r(mSe," \u2014 "),vX=n(mSe,"A",{href:!0});var Ybt=s(vX);rWo=r(Ybt,"NystromformerForTokenClassification"),Ybt.forEach(t),tWo=r(mSe," (Nystr\xF6mformer model)"),mSe.forEach(t),aWo=i(J),MF=n(J,"LI",{});var gSe=s(MF);Upe=n(gSe,"STRONG",{});var Kbt=s(Upe);nWo=r(Kbt,"qdqbert"),Kbt.forEach(t),sWo=r(gSe," \u2014 "),FX=n(gSe,"A",{href:!0});var Zbt=s(FX);lWo=r(Zbt,"QDQBertForTokenClassification"),Zbt.forEach(t),iWo=r(gSe," (QDQBert model)"),gSe.forEach(t),dWo=i(J),EF=n(J,"LI",{});var hSe=s(EF);Jpe=n(hSe,"STRONG",{});var e2t=s(Jpe);cWo=r(e2t,"rembert"),e2t.forEach(t),fWo=r(hSe," \u2014 "),TX=n(hSe,"A",{href:!0});var o2t=s(TX);mWo=r(o2t,"RemBertForTokenClassification"),o2t.forEach(t),gWo=r(hSe," (RemBERT model)"),hSe.forEach(t),hWo=i(J),CF=n(J,"LI",{});var pSe=s(CF);Ype=n(pSe,"STRONG",{});var r2t=s(Ype);pWo=r(r2t,"roberta"),r2t.forEach(t),uWo=r(pSe," \u2014 "),MX=n(pSe,"A",{href:!0});var t2t=s(MX);_Wo=r(t2t,"RobertaForTokenClassification"),t2t.forEach(t),bWo=r(pSe," (RoBERTa model)"),pSe.forEach(t),vWo=i(J),wF=n(J,"LI",{});var uSe=s(wF);Kpe=n(uSe,"STRONG",{});var a2t=s(Kpe);FWo=r(a2t,"roformer"),a2t.forEach(t),TWo=r(uSe," \u2014 "),EX=n(uSe,"A",{href:!0});var n2t=s(EX);MWo=r(n2t,"RoFormerForTokenClassification"),n2t.forEach(t),EWo=r(uSe," (RoFormer model)"),uSe.forEach(t),CWo=i(J),AF=n(J,"LI",{});var _Se=s(AF);Zpe=n(_Se,"STRONG",{});var s2t=s(Zpe);wWo=r(s2t,"squeezebert"),s2t.forEach(t),AWo=r(_Se," \u2014 "),CX=n(_Se,"A",{href:!0});var l2t=s(CX);yWo=r(l2t,"SqueezeBertForTokenClassification"),l2t.forEach(t),LWo=r(_Se," (SqueezeBERT model)"),_Se.forEach(t),xWo=i(J),yF=n(J,"LI",{});var bSe=s(yF);eue=n(bSe,"STRONG",{});var i2t=s(eue);$Wo=r(i2t,"xlm"),i2t.forEach(t),kWo=r(bSe," \u2014 "),wX=n(bSe,"A",{href:!0});var d2t=s(wX);SWo=r(d2t,"XLMForTokenClassification"),d2t.forEach(t),RWo=r(bSe," (XLM model)"),bSe.forEach(t),PWo=i(J),LF=n(J,"LI",{});var vSe=s(LF);oue=n(vSe,"STRONG",{});var c2t=s(oue);BWo=r(c2t,"xlm-roberta"),c2t.forEach(t),IWo=r(vSe," \u2014 "),AX=n(vSe,"A",{href:!0});var f2t=s(AX);NWo=r(f2t,"XLMRobertaForTokenClassification"),f2t.forEach(t),qWo=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),jWo=i(J),xF=n(J,"LI",{});var FSe=s(xF);rue=n(FSe,"STRONG",{});var m2t=s(rue);DWo=r(m2t,"xlm-roberta-xl"),m2t.forEach(t),GWo=r(FSe," \u2014 "),yX=n(FSe,"A",{href:!0});var g2t=s(yX);OWo=r(g2t,"XLMRobertaXLForTokenClassification"),g2t.forEach(t),VWo=r(FSe," (XLM-RoBERTa-XL model)"),FSe.forEach(t),XWo=i(J),$F=n(J,"LI",{});var TSe=s($F);tue=n(TSe,"STRONG",{});var h2t=s(tue);zWo=r(h2t,"xlnet"),h2t.forEach(t),WWo=r(TSe," \u2014 "),LX=n(TSe,"A",{href:!0});var p2t=s(LX);QWo=r(p2t,"XLNetForTokenClassification"),p2t.forEach(t),HWo=r(TSe," (XLNet model)"),TSe.forEach(t),UWo=i(J),kF=n(J,"LI",{});var MSe=s(kF);aue=n(MSe,"STRONG",{});var u2t=s(aue);JWo=r(u2t,"yoso"),u2t.forEach(t),YWo=r(MSe," \u2014 "),xX=n(MSe,"A",{href:!0});var _2t=s(xX);KWo=r(_2t,"YosoForTokenClassification"),_2t.forEach(t),ZWo=r(MSe," (YOSO model)"),MSe.forEach(t),J.forEach(t),eQo=i(ma),SF=n(ma,"P",{});var ESe=s(SF);oQo=r(ESe,"The model is set in evaluation mode by default using "),nue=n(ESe,"CODE",{});var b2t=s(nue);rQo=r(b2t,"model.eval()"),b2t.forEach(t),tQo=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(ESe,"CODE",{});var v2t=s(sue);aQo=r(v2t,"model.train()"),v2t.forEach(t),ESe.forEach(t),nQo=i(ma),T(RF.$$.fragment,ma),ma.forEach(t),tl.forEach(t),WDe=i(f),sd=n(f,"H2",{class:!0});var KOe=s(sd);PF=n(KOe,"A",{id:!0,class:!0,href:!0});var F2t=s(PF);lue=n(F2t,"SPAN",{});var T2t=s(lue);T(yA.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),sQo=i(KOe),iue=n(KOe,"SPAN",{});var M2t=s(iue);lQo=r(M2t,"AutoModelForQuestionAnswering"),M2t.forEach(t),KOe.forEach(t),QDe=i(f),qo=n(f,"DIV",{class:!0});var al=s(qo);T(LA.$$.fragment,al),iQo=i(al),ld=n(al,"P",{});var Uee=s(ld);dQo=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$X=n(Uee,"A",{href:!0});var E2t=s($X);cQo=r(E2t,"from_pretrained()"),E2t.forEach(t),fQo=r(Uee," class method or the "),kX=n(Uee,"A",{href:!0});var C2t=s(kX);mQo=r(C2t,"from_config()"),C2t.forEach(t),gQo=r(Uee,` class
method.`),Uee.forEach(t),hQo=i(al),xA=n(al,"P",{});var ZOe=s(xA);pQo=r(ZOe,"This class cannot be instantiated directly using "),due=n(ZOe,"CODE",{});var w2t=s(due);uQo=r(w2t,"__init__()"),w2t.forEach(t),_Qo=r(ZOe," (throws an error)."),ZOe.forEach(t),bQo=i(al),ht=n(al,"DIV",{class:!0});var $3=s(ht);T($A.$$.fragment,$3),vQo=i($3),cue=n($3,"P",{});var A2t=s(cue);FQo=r(A2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A2t.forEach(t),TQo=i($3),id=n($3,"P",{});var Jee=s(id);MQo=r(Jee,`Note:
Loading a model from its configuration file does `),fue=n(Jee,"STRONG",{});var y2t=s(fue);EQo=r(y2t,"not"),y2t.forEach(t),CQo=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Jee,"A",{href:!0});var L2t=s(SX);wQo=r(L2t,"from_pretrained()"),L2t.forEach(t),AQo=r(Jee," to load the model weights."),Jee.forEach(t),yQo=i($3),T(BF.$$.fragment,$3),$3.forEach(t),LQo=i(al),no=n(al,"DIV",{class:!0});var ga=s(no);T(kA.$$.fragment,ga),xQo=i(ga),mue=n(ga,"P",{});var x2t=s(mue);$Qo=r(x2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x2t.forEach(t),kQo=i(ga),Ga=n(ga,"P",{});var k3=s(Ga);SQo=r(k3,"The model class to instantiate is selected based on the "),gue=n(k3,"CODE",{});var $2t=s(gue);RQo=r($2t,"model_type"),$2t.forEach(t),PQo=r(k3,` property of the config object (either
passed as an argument or loaded from `),hue=n(k3,"CODE",{});var k2t=s(hue);BQo=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),IQo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(k3,"CODE",{});var S2t=s(pue);NQo=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),qQo=r(k3,":"),k3.forEach(t),jQo=i(ga),V=n(ga,"UL",{});var X=s(V);IF=n(X,"LI",{});var CSe=s(IF);uue=n(CSe,"STRONG",{});var R2t=s(uue);DQo=r(R2t,"albert"),R2t.forEach(t),GQo=r(CSe," \u2014 "),RX=n(CSe,"A",{href:!0});var P2t=s(RX);OQo=r(P2t,"AlbertForQuestionAnswering"),P2t.forEach(t),VQo=r(CSe," (ALBERT model)"),CSe.forEach(t),XQo=i(X),NF=n(X,"LI",{});var wSe=s(NF);_ue=n(wSe,"STRONG",{});var B2t=s(_ue);zQo=r(B2t,"bart"),B2t.forEach(t),WQo=r(wSe," \u2014 "),PX=n(wSe,"A",{href:!0});var I2t=s(PX);QQo=r(I2t,"BartForQuestionAnswering"),I2t.forEach(t),HQo=r(wSe," (BART model)"),wSe.forEach(t),UQo=i(X),qF=n(X,"LI",{});var ASe=s(qF);bue=n(ASe,"STRONG",{});var N2t=s(bue);JQo=r(N2t,"bert"),N2t.forEach(t),YQo=r(ASe," \u2014 "),BX=n(ASe,"A",{href:!0});var q2t=s(BX);KQo=r(q2t,"BertForQuestionAnswering"),q2t.forEach(t),ZQo=r(ASe," (BERT model)"),ASe.forEach(t),eHo=i(X),jF=n(X,"LI",{});var ySe=s(jF);vue=n(ySe,"STRONG",{});var j2t=s(vue);oHo=r(j2t,"big_bird"),j2t.forEach(t),rHo=r(ySe," \u2014 "),IX=n(ySe,"A",{href:!0});var D2t=s(IX);tHo=r(D2t,"BigBirdForQuestionAnswering"),D2t.forEach(t),aHo=r(ySe," (BigBird model)"),ySe.forEach(t),nHo=i(X),DF=n(X,"LI",{});var LSe=s(DF);Fue=n(LSe,"STRONG",{});var G2t=s(Fue);sHo=r(G2t,"bigbird_pegasus"),G2t.forEach(t),lHo=r(LSe," \u2014 "),NX=n(LSe,"A",{href:!0});var O2t=s(NX);iHo=r(O2t,"BigBirdPegasusForQuestionAnswering"),O2t.forEach(t),dHo=r(LSe," (BigBird-Pegasus model)"),LSe.forEach(t),cHo=i(X),GF=n(X,"LI",{});var xSe=s(GF);Tue=n(xSe,"STRONG",{});var V2t=s(Tue);fHo=r(V2t,"camembert"),V2t.forEach(t),mHo=r(xSe," \u2014 "),qX=n(xSe,"A",{href:!0});var X2t=s(qX);gHo=r(X2t,"CamembertForQuestionAnswering"),X2t.forEach(t),hHo=r(xSe," (CamemBERT model)"),xSe.forEach(t),pHo=i(X),OF=n(X,"LI",{});var $Se=s(OF);Mue=n($Se,"STRONG",{});var z2t=s(Mue);uHo=r(z2t,"canine"),z2t.forEach(t),_Ho=r($Se," \u2014 "),jX=n($Se,"A",{href:!0});var W2t=s(jX);bHo=r(W2t,"CanineForQuestionAnswering"),W2t.forEach(t),vHo=r($Se," (CANINE model)"),$Se.forEach(t),FHo=i(X),VF=n(X,"LI",{});var kSe=s(VF);Eue=n(kSe,"STRONG",{});var Q2t=s(Eue);THo=r(Q2t,"convbert"),Q2t.forEach(t),MHo=r(kSe," \u2014 "),DX=n(kSe,"A",{href:!0});var H2t=s(DX);EHo=r(H2t,"ConvBertForQuestionAnswering"),H2t.forEach(t),CHo=r(kSe," (ConvBERT model)"),kSe.forEach(t),wHo=i(X),XF=n(X,"LI",{});var SSe=s(XF);Cue=n(SSe,"STRONG",{});var U2t=s(Cue);AHo=r(U2t,"data2vec-text"),U2t.forEach(t),yHo=r(SSe," \u2014 "),GX=n(SSe,"A",{href:!0});var J2t=s(GX);LHo=r(J2t,"Data2VecTextForQuestionAnswering"),J2t.forEach(t),xHo=r(SSe," (Data2VecText model)"),SSe.forEach(t),$Ho=i(X),zF=n(X,"LI",{});var RSe=s(zF);wue=n(RSe,"STRONG",{});var Y2t=s(wue);kHo=r(Y2t,"deberta"),Y2t.forEach(t),SHo=r(RSe," \u2014 "),OX=n(RSe,"A",{href:!0});var K2t=s(OX);RHo=r(K2t,"DebertaForQuestionAnswering"),K2t.forEach(t),PHo=r(RSe," (DeBERTa model)"),RSe.forEach(t),BHo=i(X),WF=n(X,"LI",{});var PSe=s(WF);Aue=n(PSe,"STRONG",{});var Z2t=s(Aue);IHo=r(Z2t,"deberta-v2"),Z2t.forEach(t),NHo=r(PSe," \u2014 "),VX=n(PSe,"A",{href:!0});var evt=s(VX);qHo=r(evt,"DebertaV2ForQuestionAnswering"),evt.forEach(t),jHo=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),DHo=i(X),QF=n(X,"LI",{});var BSe=s(QF);yue=n(BSe,"STRONG",{});var ovt=s(yue);GHo=r(ovt,"distilbert"),ovt.forEach(t),OHo=r(BSe," \u2014 "),XX=n(BSe,"A",{href:!0});var rvt=s(XX);VHo=r(rvt,"DistilBertForQuestionAnswering"),rvt.forEach(t),XHo=r(BSe," (DistilBERT model)"),BSe.forEach(t),zHo=i(X),HF=n(X,"LI",{});var ISe=s(HF);Lue=n(ISe,"STRONG",{});var tvt=s(Lue);WHo=r(tvt,"electra"),tvt.forEach(t),QHo=r(ISe," \u2014 "),zX=n(ISe,"A",{href:!0});var avt=s(zX);HHo=r(avt,"ElectraForQuestionAnswering"),avt.forEach(t),UHo=r(ISe," (ELECTRA model)"),ISe.forEach(t),JHo=i(X),UF=n(X,"LI",{});var NSe=s(UF);xue=n(NSe,"STRONG",{});var nvt=s(xue);YHo=r(nvt,"flaubert"),nvt.forEach(t),KHo=r(NSe," \u2014 "),WX=n(NSe,"A",{href:!0});var svt=s(WX);ZHo=r(svt,"FlaubertForQuestionAnsweringSimple"),svt.forEach(t),eUo=r(NSe," (FlauBERT model)"),NSe.forEach(t),oUo=i(X),JF=n(X,"LI",{});var qSe=s(JF);$ue=n(qSe,"STRONG",{});var lvt=s($ue);rUo=r(lvt,"fnet"),lvt.forEach(t),tUo=r(qSe," \u2014 "),QX=n(qSe,"A",{href:!0});var ivt=s(QX);aUo=r(ivt,"FNetForQuestionAnswering"),ivt.forEach(t),nUo=r(qSe," (FNet model)"),qSe.forEach(t),sUo=i(X),YF=n(X,"LI",{});var jSe=s(YF);kue=n(jSe,"STRONG",{});var dvt=s(kue);lUo=r(dvt,"funnel"),dvt.forEach(t),iUo=r(jSe," \u2014 "),HX=n(jSe,"A",{href:!0});var cvt=s(HX);dUo=r(cvt,"FunnelForQuestionAnswering"),cvt.forEach(t),cUo=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),fUo=i(X),KF=n(X,"LI",{});var DSe=s(KF);Sue=n(DSe,"STRONG",{});var fvt=s(Sue);mUo=r(fvt,"gptj"),fvt.forEach(t),gUo=r(DSe," \u2014 "),UX=n(DSe,"A",{href:!0});var mvt=s(UX);hUo=r(mvt,"GPTJForQuestionAnswering"),mvt.forEach(t),pUo=r(DSe," (GPT-J model)"),DSe.forEach(t),uUo=i(X),ZF=n(X,"LI",{});var GSe=s(ZF);Rue=n(GSe,"STRONG",{});var gvt=s(Rue);_Uo=r(gvt,"ibert"),gvt.forEach(t),bUo=r(GSe," \u2014 "),JX=n(GSe,"A",{href:!0});var hvt=s(JX);vUo=r(hvt,"IBertForQuestionAnswering"),hvt.forEach(t),FUo=r(GSe," (I-BERT model)"),GSe.forEach(t),TUo=i(X),e6=n(X,"LI",{});var OSe=s(e6);Pue=n(OSe,"STRONG",{});var pvt=s(Pue);MUo=r(pvt,"layoutlmv2"),pvt.forEach(t),EUo=r(OSe," \u2014 "),YX=n(OSe,"A",{href:!0});var uvt=s(YX);CUo=r(uvt,"LayoutLMv2ForQuestionAnswering"),uvt.forEach(t),wUo=r(OSe," (LayoutLMv2 model)"),OSe.forEach(t),AUo=i(X),o6=n(X,"LI",{});var VSe=s(o6);Bue=n(VSe,"STRONG",{});var _vt=s(Bue);yUo=r(_vt,"layoutlmv3"),_vt.forEach(t),LUo=r(VSe," \u2014 "),KX=n(VSe,"A",{href:!0});var bvt=s(KX);xUo=r(bvt,"LayoutLMv3ForQuestionAnswering"),bvt.forEach(t),$Uo=r(VSe," (LayoutLMv3 model)"),VSe.forEach(t),kUo=i(X),r6=n(X,"LI",{});var XSe=s(r6);Iue=n(XSe,"STRONG",{});var vvt=s(Iue);SUo=r(vvt,"led"),vvt.forEach(t),RUo=r(XSe," \u2014 "),ZX=n(XSe,"A",{href:!0});var Fvt=s(ZX);PUo=r(Fvt,"LEDForQuestionAnswering"),Fvt.forEach(t),BUo=r(XSe," (LED model)"),XSe.forEach(t),IUo=i(X),t6=n(X,"LI",{});var zSe=s(t6);Nue=n(zSe,"STRONG",{});var Tvt=s(Nue);NUo=r(Tvt,"longformer"),Tvt.forEach(t),qUo=r(zSe," \u2014 "),ez=n(zSe,"A",{href:!0});var Mvt=s(ez);jUo=r(Mvt,"LongformerForQuestionAnswering"),Mvt.forEach(t),DUo=r(zSe," (Longformer model)"),zSe.forEach(t),GUo=i(X),a6=n(X,"LI",{});var WSe=s(a6);que=n(WSe,"STRONG",{});var Evt=s(que);OUo=r(Evt,"lxmert"),Evt.forEach(t),VUo=r(WSe," \u2014 "),oz=n(WSe,"A",{href:!0});var Cvt=s(oz);XUo=r(Cvt,"LxmertForQuestionAnswering"),Cvt.forEach(t),zUo=r(WSe," (LXMERT model)"),WSe.forEach(t),WUo=i(X),n6=n(X,"LI",{});var QSe=s(n6);jue=n(QSe,"STRONG",{});var wvt=s(jue);QUo=r(wvt,"mbart"),wvt.forEach(t),HUo=r(QSe," \u2014 "),rz=n(QSe,"A",{href:!0});var Avt=s(rz);UUo=r(Avt,"MBartForQuestionAnswering"),Avt.forEach(t),JUo=r(QSe," (mBART model)"),QSe.forEach(t),YUo=i(X),s6=n(X,"LI",{});var HSe=s(s6);Due=n(HSe,"STRONG",{});var yvt=s(Due);KUo=r(yvt,"megatron-bert"),yvt.forEach(t),ZUo=r(HSe," \u2014 "),tz=n(HSe,"A",{href:!0});var Lvt=s(tz);eJo=r(Lvt,"MegatronBertForQuestionAnswering"),Lvt.forEach(t),oJo=r(HSe," (Megatron-BERT model)"),HSe.forEach(t),rJo=i(X),l6=n(X,"LI",{});var USe=s(l6);Gue=n(USe,"STRONG",{});var xvt=s(Gue);tJo=r(xvt,"mobilebert"),xvt.forEach(t),aJo=r(USe," \u2014 "),az=n(USe,"A",{href:!0});var $vt=s(az);nJo=r($vt,"MobileBertForQuestionAnswering"),$vt.forEach(t),sJo=r(USe," (MobileBERT model)"),USe.forEach(t),lJo=i(X),i6=n(X,"LI",{});var JSe=s(i6);Oue=n(JSe,"STRONG",{});var kvt=s(Oue);iJo=r(kvt,"mpnet"),kvt.forEach(t),dJo=r(JSe," \u2014 "),nz=n(JSe,"A",{href:!0});var Svt=s(nz);cJo=r(Svt,"MPNetForQuestionAnswering"),Svt.forEach(t),fJo=r(JSe," (MPNet model)"),JSe.forEach(t),mJo=i(X),d6=n(X,"LI",{});var YSe=s(d6);Vue=n(YSe,"STRONG",{});var Rvt=s(Vue);gJo=r(Rvt,"nystromformer"),Rvt.forEach(t),hJo=r(YSe," \u2014 "),sz=n(YSe,"A",{href:!0});var Pvt=s(sz);pJo=r(Pvt,"NystromformerForQuestionAnswering"),Pvt.forEach(t),uJo=r(YSe," (Nystr\xF6mformer model)"),YSe.forEach(t),_Jo=i(X),c6=n(X,"LI",{});var KSe=s(c6);Xue=n(KSe,"STRONG",{});var Bvt=s(Xue);bJo=r(Bvt,"qdqbert"),Bvt.forEach(t),vJo=r(KSe," \u2014 "),lz=n(KSe,"A",{href:!0});var Ivt=s(lz);FJo=r(Ivt,"QDQBertForQuestionAnswering"),Ivt.forEach(t),TJo=r(KSe," (QDQBert model)"),KSe.forEach(t),MJo=i(X),f6=n(X,"LI",{});var ZSe=s(f6);zue=n(ZSe,"STRONG",{});var Nvt=s(zue);EJo=r(Nvt,"reformer"),Nvt.forEach(t),CJo=r(ZSe," \u2014 "),iz=n(ZSe,"A",{href:!0});var qvt=s(iz);wJo=r(qvt,"ReformerForQuestionAnswering"),qvt.forEach(t),AJo=r(ZSe," (Reformer model)"),ZSe.forEach(t),yJo=i(X),m6=n(X,"LI",{});var eRe=s(m6);Wue=n(eRe,"STRONG",{});var jvt=s(Wue);LJo=r(jvt,"rembert"),jvt.forEach(t),xJo=r(eRe," \u2014 "),dz=n(eRe,"A",{href:!0});var Dvt=s(dz);$Jo=r(Dvt,"RemBertForQuestionAnswering"),Dvt.forEach(t),kJo=r(eRe," (RemBERT model)"),eRe.forEach(t),SJo=i(X),g6=n(X,"LI",{});var oRe=s(g6);Que=n(oRe,"STRONG",{});var Gvt=s(Que);RJo=r(Gvt,"roberta"),Gvt.forEach(t),PJo=r(oRe," \u2014 "),cz=n(oRe,"A",{href:!0});var Ovt=s(cz);BJo=r(Ovt,"RobertaForQuestionAnswering"),Ovt.forEach(t),IJo=r(oRe," (RoBERTa model)"),oRe.forEach(t),NJo=i(X),h6=n(X,"LI",{});var rRe=s(h6);Hue=n(rRe,"STRONG",{});var Vvt=s(Hue);qJo=r(Vvt,"roformer"),Vvt.forEach(t),jJo=r(rRe," \u2014 "),fz=n(rRe,"A",{href:!0});var Xvt=s(fz);DJo=r(Xvt,"RoFormerForQuestionAnswering"),Xvt.forEach(t),GJo=r(rRe," (RoFormer model)"),rRe.forEach(t),OJo=i(X),p6=n(X,"LI",{});var tRe=s(p6);Uue=n(tRe,"STRONG",{});var zvt=s(Uue);VJo=r(zvt,"splinter"),zvt.forEach(t),XJo=r(tRe," \u2014 "),mz=n(tRe,"A",{href:!0});var Wvt=s(mz);zJo=r(Wvt,"SplinterForQuestionAnswering"),Wvt.forEach(t),WJo=r(tRe," (Splinter model)"),tRe.forEach(t),QJo=i(X),u6=n(X,"LI",{});var aRe=s(u6);Jue=n(aRe,"STRONG",{});var Qvt=s(Jue);HJo=r(Qvt,"squeezebert"),Qvt.forEach(t),UJo=r(aRe," \u2014 "),gz=n(aRe,"A",{href:!0});var Hvt=s(gz);JJo=r(Hvt,"SqueezeBertForQuestionAnswering"),Hvt.forEach(t),YJo=r(aRe," (SqueezeBERT model)"),aRe.forEach(t),KJo=i(X),_6=n(X,"LI",{});var nRe=s(_6);Yue=n(nRe,"STRONG",{});var Uvt=s(Yue);ZJo=r(Uvt,"xlm"),Uvt.forEach(t),eYo=r(nRe," \u2014 "),hz=n(nRe,"A",{href:!0});var Jvt=s(hz);oYo=r(Jvt,"XLMForQuestionAnsweringSimple"),Jvt.forEach(t),rYo=r(nRe," (XLM model)"),nRe.forEach(t),tYo=i(X),b6=n(X,"LI",{});var sRe=s(b6);Kue=n(sRe,"STRONG",{});var Yvt=s(Kue);aYo=r(Yvt,"xlm-roberta"),Yvt.forEach(t),nYo=r(sRe," \u2014 "),pz=n(sRe,"A",{href:!0});var Kvt=s(pz);sYo=r(Kvt,"XLMRobertaForQuestionAnswering"),Kvt.forEach(t),lYo=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),iYo=i(X),v6=n(X,"LI",{});var lRe=s(v6);Zue=n(lRe,"STRONG",{});var Zvt=s(Zue);dYo=r(Zvt,"xlm-roberta-xl"),Zvt.forEach(t),cYo=r(lRe," \u2014 "),uz=n(lRe,"A",{href:!0});var eFt=s(uz);fYo=r(eFt,"XLMRobertaXLForQuestionAnswering"),eFt.forEach(t),mYo=r(lRe," (XLM-RoBERTa-XL model)"),lRe.forEach(t),gYo=i(X),F6=n(X,"LI",{});var iRe=s(F6);e_e=n(iRe,"STRONG",{});var oFt=s(e_e);hYo=r(oFt,"xlnet"),oFt.forEach(t),pYo=r(iRe," \u2014 "),_z=n(iRe,"A",{href:!0});var rFt=s(_z);uYo=r(rFt,"XLNetForQuestionAnsweringSimple"),rFt.forEach(t),_Yo=r(iRe," (XLNet model)"),iRe.forEach(t),bYo=i(X),T6=n(X,"LI",{});var dRe=s(T6);o_e=n(dRe,"STRONG",{});var tFt=s(o_e);vYo=r(tFt,"yoso"),tFt.forEach(t),FYo=r(dRe," \u2014 "),bz=n(dRe,"A",{href:!0});var aFt=s(bz);TYo=r(aFt,"YosoForQuestionAnswering"),aFt.forEach(t),MYo=r(dRe," (YOSO model)"),dRe.forEach(t),X.forEach(t),EYo=i(ga),M6=n(ga,"P",{});var cRe=s(M6);CYo=r(cRe,"The model is set in evaluation mode by default using "),r_e=n(cRe,"CODE",{});var nFt=s(r_e);wYo=r(nFt,"model.eval()"),nFt.forEach(t),AYo=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(cRe,"CODE",{});var sFt=s(t_e);yYo=r(sFt,"model.train()"),sFt.forEach(t),cRe.forEach(t),LYo=i(ga),T(E6.$$.fragment,ga),ga.forEach(t),al.forEach(t),HDe=i(f),dd=n(f,"H2",{class:!0});var eVe=s(dd);C6=n(eVe,"A",{id:!0,class:!0,href:!0});var lFt=s(C6);a_e=n(lFt,"SPAN",{});var iFt=s(a_e);T(SA.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),xYo=i(eVe),n_e=n(eVe,"SPAN",{});var dFt=s(n_e);$Yo=r(dFt,"AutoModelForTableQuestionAnswering"),dFt.forEach(t),eVe.forEach(t),UDe=i(f),jo=n(f,"DIV",{class:!0});var nl=s(jo);T(RA.$$.fragment,nl),kYo=i(nl),cd=n(nl,"P",{});var Yee=s(cd);SYo=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vz=n(Yee,"A",{href:!0});var cFt=s(vz);RYo=r(cFt,"from_pretrained()"),cFt.forEach(t),PYo=r(Yee," class method or the "),Fz=n(Yee,"A",{href:!0});var fFt=s(Fz);BYo=r(fFt,"from_config()"),fFt.forEach(t),IYo=r(Yee,` class
method.`),Yee.forEach(t),NYo=i(nl),PA=n(nl,"P",{});var oVe=s(PA);qYo=r(oVe,"This class cannot be instantiated directly using "),s_e=n(oVe,"CODE",{});var mFt=s(s_e);jYo=r(mFt,"__init__()"),mFt.forEach(t),DYo=r(oVe," (throws an error)."),oVe.forEach(t),GYo=i(nl),pt=n(nl,"DIV",{class:!0});var S3=s(pt);T(BA.$$.fragment,S3),OYo=i(S3),l_e=n(S3,"P",{});var gFt=s(l_e);VYo=r(gFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gFt.forEach(t),XYo=i(S3),fd=n(S3,"P",{});var Kee=s(fd);zYo=r(Kee,`Note:
Loading a model from its configuration file does `),i_e=n(Kee,"STRONG",{});var hFt=s(i_e);WYo=r(hFt,"not"),hFt.forEach(t),QYo=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(Kee,"A",{href:!0});var pFt=s(Tz);HYo=r(pFt,"from_pretrained()"),pFt.forEach(t),UYo=r(Kee," to load the model weights."),Kee.forEach(t),JYo=i(S3),T(w6.$$.fragment,S3),S3.forEach(t),YYo=i(nl),so=n(nl,"DIV",{class:!0});var ha=s(so);T(IA.$$.fragment,ha),KYo=i(ha),d_e=n(ha,"P",{});var uFt=s(d_e);ZYo=r(uFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uFt.forEach(t),eKo=i(ha),Oa=n(ha,"P",{});var R3=s(Oa);oKo=r(R3,"The model class to instantiate is selected based on the "),c_e=n(R3,"CODE",{});var _Ft=s(c_e);rKo=r(_Ft,"model_type"),_Ft.forEach(t),tKo=r(R3,` property of the config object (either
passed as an argument or loaded from `),f_e=n(R3,"CODE",{});var bFt=s(f_e);aKo=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),nKo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(R3,"CODE",{});var vFt=s(m_e);sKo=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),lKo=r(R3,":"),R3.forEach(t),iKo=i(ha),g_e=n(ha,"UL",{});var FFt=s(g_e);A6=n(FFt,"LI",{});var fRe=s(A6);h_e=n(fRe,"STRONG",{});var TFt=s(h_e);dKo=r(TFt,"tapas"),TFt.forEach(t),cKo=r(fRe," \u2014 "),Mz=n(fRe,"A",{href:!0});var MFt=s(Mz);fKo=r(MFt,"TapasForQuestionAnswering"),MFt.forEach(t),mKo=r(fRe," (TAPAS model)"),fRe.forEach(t),FFt.forEach(t),gKo=i(ha),y6=n(ha,"P",{});var mRe=s(y6);hKo=r(mRe,"The model is set in evaluation mode by default using "),p_e=n(mRe,"CODE",{});var EFt=s(p_e);pKo=r(EFt,"model.eval()"),EFt.forEach(t),uKo=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(mRe,"CODE",{});var CFt=s(u_e);_Ko=r(CFt,"model.train()"),CFt.forEach(t),mRe.forEach(t),bKo=i(ha),T(L6.$$.fragment,ha),ha.forEach(t),nl.forEach(t),JDe=i(f),md=n(f,"H2",{class:!0});var rVe=s(md);x6=n(rVe,"A",{id:!0,class:!0,href:!0});var wFt=s(x6);__e=n(wFt,"SPAN",{});var AFt=s(__e);T(NA.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),vKo=i(rVe),b_e=n(rVe,"SPAN",{});var yFt=s(b_e);FKo=r(yFt,"AutoModelForImageClassification"),yFt.forEach(t),rVe.forEach(t),YDe=i(f),Do=n(f,"DIV",{class:!0});var sl=s(Do);T(qA.$$.fragment,sl),TKo=i(sl),gd=n(sl,"P",{});var Zee=s(gd);MKo=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ez=n(Zee,"A",{href:!0});var LFt=s(Ez);EKo=r(LFt,"from_pretrained()"),LFt.forEach(t),CKo=r(Zee," class method or the "),Cz=n(Zee,"A",{href:!0});var xFt=s(Cz);wKo=r(xFt,"from_config()"),xFt.forEach(t),AKo=r(Zee,` class
method.`),Zee.forEach(t),yKo=i(sl),jA=n(sl,"P",{});var tVe=s(jA);LKo=r(tVe,"This class cannot be instantiated directly using "),v_e=n(tVe,"CODE",{});var $Ft=s(v_e);xKo=r($Ft,"__init__()"),$Ft.forEach(t),$Ko=r(tVe," (throws an error)."),tVe.forEach(t),kKo=i(sl),ut=n(sl,"DIV",{class:!0});var P3=s(ut);T(DA.$$.fragment,P3),SKo=i(P3),F_e=n(P3,"P",{});var kFt=s(F_e);RKo=r(kFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kFt.forEach(t),PKo=i(P3),hd=n(P3,"P",{});var eoe=s(hd);BKo=r(eoe,`Note:
Loading a model from its configuration file does `),T_e=n(eoe,"STRONG",{});var SFt=s(T_e);IKo=r(SFt,"not"),SFt.forEach(t),NKo=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(eoe,"A",{href:!0});var RFt=s(wz);qKo=r(RFt,"from_pretrained()"),RFt.forEach(t),jKo=r(eoe," to load the model weights."),eoe.forEach(t),DKo=i(P3),T($6.$$.fragment,P3),P3.forEach(t),GKo=i(sl),lo=n(sl,"DIV",{class:!0});var pa=s(lo);T(GA.$$.fragment,pa),OKo=i(pa),M_e=n(pa,"P",{});var PFt=s(M_e);VKo=r(PFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PFt.forEach(t),XKo=i(pa),Va=n(pa,"P",{});var B3=s(Va);zKo=r(B3,"The model class to instantiate is selected based on the "),E_e=n(B3,"CODE",{});var BFt=s(E_e);WKo=r(BFt,"model_type"),BFt.forEach(t),QKo=r(B3,` property of the config object (either
passed as an argument or loaded from `),C_e=n(B3,"CODE",{});var IFt=s(C_e);HKo=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),UKo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(B3,"CODE",{});var NFt=s(w_e);JKo=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),YKo=r(B3,":"),B3.forEach(t),KKo=i(pa),ve=n(pa,"UL",{});var Te=s(ve);k6=n(Te,"LI",{});var gRe=s(k6);A_e=n(gRe,"STRONG",{});var qFt=s(A_e);ZKo=r(qFt,"beit"),qFt.forEach(t),eZo=r(gRe," \u2014 "),Az=n(gRe,"A",{href:!0});var jFt=s(Az);oZo=r(jFt,"BeitForImageClassification"),jFt.forEach(t),rZo=r(gRe," (BEiT model)"),gRe.forEach(t),tZo=i(Te),S6=n(Te,"LI",{});var hRe=s(S6);y_e=n(hRe,"STRONG",{});var DFt=s(y_e);aZo=r(DFt,"convnext"),DFt.forEach(t),nZo=r(hRe," \u2014 "),yz=n(hRe,"A",{href:!0});var GFt=s(yz);sZo=r(GFt,"ConvNextForImageClassification"),GFt.forEach(t),lZo=r(hRe," (ConvNeXT model)"),hRe.forEach(t),iZo=i(Te),R6=n(Te,"LI",{});var pRe=s(R6);L_e=n(pRe,"STRONG",{});var OFt=s(L_e);dZo=r(OFt,"cvt"),OFt.forEach(t),cZo=r(pRe," \u2014 "),Lz=n(pRe,"A",{href:!0});var VFt=s(Lz);fZo=r(VFt,"CvtForImageClassification"),VFt.forEach(t),mZo=r(pRe," (CvT model)"),pRe.forEach(t),gZo=i(Te),P6=n(Te,"LI",{});var uRe=s(P6);x_e=n(uRe,"STRONG",{});var XFt=s(x_e);hZo=r(XFt,"data2vec-vision"),XFt.forEach(t),pZo=r(uRe," \u2014 "),xz=n(uRe,"A",{href:!0});var zFt=s(xz);uZo=r(zFt,"Data2VecVisionForImageClassification"),zFt.forEach(t),_Zo=r(uRe," (Data2VecVision model)"),uRe.forEach(t),bZo=i(Te),Gs=n(Te,"LI",{});var Sk=s(Gs);$_e=n(Sk,"STRONG",{});var WFt=s($_e);vZo=r(WFt,"deit"),WFt.forEach(t),FZo=r(Sk," \u2014 "),$z=n(Sk,"A",{href:!0});var QFt=s($z);TZo=r(QFt,"DeiTForImageClassification"),QFt.forEach(t),MZo=r(Sk," or "),kz=n(Sk,"A",{href:!0});var HFt=s(kz);EZo=r(HFt,"DeiTForImageClassificationWithTeacher"),HFt.forEach(t),CZo=r(Sk," (DeiT model)"),Sk.forEach(t),wZo=i(Te),B6=n(Te,"LI",{});var _Re=s(B6);k_e=n(_Re,"STRONG",{});var UFt=s(k_e);AZo=r(UFt,"imagegpt"),UFt.forEach(t),yZo=r(_Re," \u2014 "),Sz=n(_Re,"A",{href:!0});var JFt=s(Sz);LZo=r(JFt,"ImageGPTForImageClassification"),JFt.forEach(t),xZo=r(_Re," (ImageGPT model)"),_Re.forEach(t),$Zo=i(Te),Os=n(Te,"LI",{});var Rk=s(Os);S_e=n(Rk,"STRONG",{});var YFt=s(S_e);kZo=r(YFt,"levit"),YFt.forEach(t),SZo=r(Rk," \u2014 "),Rz=n(Rk,"A",{href:!0});var KFt=s(Rz);RZo=r(KFt,"LevitForImageClassification"),KFt.forEach(t),PZo=r(Rk," or "),Pz=n(Rk,"A",{href:!0});var ZFt=s(Pz);BZo=r(ZFt,"LevitForImageClassificationWithTeacher"),ZFt.forEach(t),IZo=r(Rk," (LeViT model)"),Rk.forEach(t),NZo=i(Te),_t=n(Te,"LI",{});var wf=s(_t);R_e=n(wf,"STRONG",{});var e6t=s(R_e);qZo=r(e6t,"perceiver"),e6t.forEach(t),jZo=r(wf," \u2014 "),Bz=n(wf,"A",{href:!0});var o6t=s(Bz);DZo=r(o6t,"PerceiverForImageClassificationLearned"),o6t.forEach(t),GZo=r(wf," or "),Iz=n(wf,"A",{href:!0});var r6t=s(Iz);OZo=r(r6t,"PerceiverForImageClassificationFourier"),r6t.forEach(t),VZo=r(wf," or "),Nz=n(wf,"A",{href:!0});var t6t=s(Nz);XZo=r(t6t,"PerceiverForImageClassificationConvProcessing"),t6t.forEach(t),zZo=r(wf," (Perceiver model)"),wf.forEach(t),WZo=i(Te),I6=n(Te,"LI",{});var bRe=s(I6);P_e=n(bRe,"STRONG",{});var a6t=s(P_e);QZo=r(a6t,"poolformer"),a6t.forEach(t),HZo=r(bRe," \u2014 "),qz=n(bRe,"A",{href:!0});var n6t=s(qz);UZo=r(n6t,"PoolFormerForImageClassification"),n6t.forEach(t),JZo=r(bRe," (PoolFormer model)"),bRe.forEach(t),YZo=i(Te),N6=n(Te,"LI",{});var vRe=s(N6);B_e=n(vRe,"STRONG",{});var s6t=s(B_e);KZo=r(s6t,"regnet"),s6t.forEach(t),ZZo=r(vRe," \u2014 "),jz=n(vRe,"A",{href:!0});var l6t=s(jz);eer=r(l6t,"RegNetForImageClassification"),l6t.forEach(t),oer=r(vRe," (RegNet model)"),vRe.forEach(t),rer=i(Te),q6=n(Te,"LI",{});var FRe=s(q6);I_e=n(FRe,"STRONG",{});var i6t=s(I_e);ter=r(i6t,"resnet"),i6t.forEach(t),aer=r(FRe," \u2014 "),Dz=n(FRe,"A",{href:!0});var d6t=s(Dz);ner=r(d6t,"ResNetForImageClassification"),d6t.forEach(t),ser=r(FRe," (ResNet model)"),FRe.forEach(t),ler=i(Te),j6=n(Te,"LI",{});var TRe=s(j6);N_e=n(TRe,"STRONG",{});var c6t=s(N_e);ier=r(c6t,"segformer"),c6t.forEach(t),der=r(TRe," \u2014 "),Gz=n(TRe,"A",{href:!0});var f6t=s(Gz);cer=r(f6t,"SegformerForImageClassification"),f6t.forEach(t),fer=r(TRe," (SegFormer model)"),TRe.forEach(t),mer=i(Te),D6=n(Te,"LI",{});var MRe=s(D6);q_e=n(MRe,"STRONG",{});var m6t=s(q_e);ger=r(m6t,"swin"),m6t.forEach(t),her=r(MRe," \u2014 "),Oz=n(MRe,"A",{href:!0});var g6t=s(Oz);per=r(g6t,"SwinForImageClassification"),g6t.forEach(t),uer=r(MRe," (Swin Transformer model)"),MRe.forEach(t),_er=i(Te),G6=n(Te,"LI",{});var ERe=s(G6);j_e=n(ERe,"STRONG",{});var h6t=s(j_e);ber=r(h6t,"van"),h6t.forEach(t),ver=r(ERe," \u2014 "),Vz=n(ERe,"A",{href:!0});var p6t=s(Vz);Fer=r(p6t,"VanForImageClassification"),p6t.forEach(t),Ter=r(ERe," (VAN model)"),ERe.forEach(t),Mer=i(Te),O6=n(Te,"LI",{});var CRe=s(O6);D_e=n(CRe,"STRONG",{});var u6t=s(D_e);Eer=r(u6t,"vit"),u6t.forEach(t),Cer=r(CRe," \u2014 "),Xz=n(CRe,"A",{href:!0});var _6t=s(Xz);wer=r(_6t,"ViTForImageClassification"),_6t.forEach(t),Aer=r(CRe," (ViT model)"),CRe.forEach(t),Te.forEach(t),yer=i(pa),V6=n(pa,"P",{});var wRe=s(V6);Ler=r(wRe,"The model is set in evaluation mode by default using "),G_e=n(wRe,"CODE",{});var b6t=s(G_e);xer=r(b6t,"model.eval()"),b6t.forEach(t),$er=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(wRe,"CODE",{});var v6t=s(O_e);ker=r(v6t,"model.train()"),v6t.forEach(t),wRe.forEach(t),Ser=i(pa),T(X6.$$.fragment,pa),pa.forEach(t),sl.forEach(t),KDe=i(f),pd=n(f,"H2",{class:!0});var aVe=s(pd);z6=n(aVe,"A",{id:!0,class:!0,href:!0});var F6t=s(z6);V_e=n(F6t,"SPAN",{});var T6t=s(V_e);T(OA.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),Rer=i(aVe),X_e=n(aVe,"SPAN",{});var M6t=s(X_e);Per=r(M6t,"AutoModelForVision2Seq"),M6t.forEach(t),aVe.forEach(t),ZDe=i(f),Go=n(f,"DIV",{class:!0});var ll=s(Go);T(VA.$$.fragment,ll),Ber=i(ll),ud=n(ll,"P",{});var ooe=s(ud);Ier=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zz=n(ooe,"A",{href:!0});var E6t=s(zz);Ner=r(E6t,"from_pretrained()"),E6t.forEach(t),qer=r(ooe," class method or the "),Wz=n(ooe,"A",{href:!0});var C6t=s(Wz);jer=r(C6t,"from_config()"),C6t.forEach(t),Der=r(ooe,` class
method.`),ooe.forEach(t),Ger=i(ll),XA=n(ll,"P",{});var nVe=s(XA);Oer=r(nVe,"This class cannot be instantiated directly using "),z_e=n(nVe,"CODE",{});var w6t=s(z_e);Ver=r(w6t,"__init__()"),w6t.forEach(t),Xer=r(nVe," (throws an error)."),nVe.forEach(t),zer=i(ll),bt=n(ll,"DIV",{class:!0});var I3=s(bt);T(zA.$$.fragment,I3),Wer=i(I3),W_e=n(I3,"P",{});var A6t=s(W_e);Qer=r(A6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A6t.forEach(t),Her=i(I3),_d=n(I3,"P",{});var roe=s(_d);Uer=r(roe,`Note:
Loading a model from its configuration file does `),Q_e=n(roe,"STRONG",{});var y6t=s(Q_e);Jer=r(y6t,"not"),y6t.forEach(t),Yer=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(roe,"A",{href:!0});var L6t=s(Qz);Ker=r(L6t,"from_pretrained()"),L6t.forEach(t),Zer=r(roe," to load the model weights."),roe.forEach(t),eor=i(I3),T(W6.$$.fragment,I3),I3.forEach(t),oor=i(ll),io=n(ll,"DIV",{class:!0});var ua=s(io);T(WA.$$.fragment,ua),ror=i(ua),H_e=n(ua,"P",{});var x6t=s(H_e);tor=r(x6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),x6t.forEach(t),aor=i(ua),Xa=n(ua,"P",{});var N3=s(Xa);nor=r(N3,"The model class to instantiate is selected based on the "),U_e=n(N3,"CODE",{});var $6t=s(U_e);sor=r($6t,"model_type"),$6t.forEach(t),lor=r(N3,` property of the config object (either
passed as an argument or loaded from `),J_e=n(N3,"CODE",{});var k6t=s(J_e);ior=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),dor=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(N3,"CODE",{});var S6t=s(Y_e);cor=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),mor=r(N3,":"),N3.forEach(t),gor=i(ua),K_e=n(ua,"UL",{});var R6t=s(K_e);Q6=n(R6t,"LI",{});var ARe=s(Q6);Z_e=n(ARe,"STRONG",{});var P6t=s(Z_e);hor=r(P6t,"vision-encoder-decoder"),P6t.forEach(t),por=r(ARe," \u2014 "),Hz=n(ARe,"A",{href:!0});var B6t=s(Hz);uor=r(B6t,"VisionEncoderDecoderModel"),B6t.forEach(t),_or=r(ARe," (Vision Encoder decoder model)"),ARe.forEach(t),R6t.forEach(t),bor=i(ua),H6=n(ua,"P",{});var yRe=s(H6);vor=r(yRe,"The model is set in evaluation mode by default using "),e1e=n(yRe,"CODE",{});var I6t=s(e1e);For=r(I6t,"model.eval()"),I6t.forEach(t),Tor=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(yRe,"CODE",{});var N6t=s(o1e);Mor=r(N6t,"model.train()"),N6t.forEach(t),yRe.forEach(t),Eor=i(ua),T(U6.$$.fragment,ua),ua.forEach(t),ll.forEach(t),eGe=i(f),bd=n(f,"H2",{class:!0});var sVe=s(bd);J6=n(sVe,"A",{id:!0,class:!0,href:!0});var q6t=s(J6);r1e=n(q6t,"SPAN",{});var j6t=s(r1e);T(QA.$$.fragment,j6t),j6t.forEach(t),q6t.forEach(t),Cor=i(sVe),t1e=n(sVe,"SPAN",{});var D6t=s(t1e);wor=r(D6t,"AutoModelForVisualQuestionAnswering"),D6t.forEach(t),sVe.forEach(t),oGe=i(f),Oo=n(f,"DIV",{class:!0});var il=s(Oo);T(HA.$$.fragment,il),Aor=i(il),vd=n(il,"P",{});var toe=s(vd);yor=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),Uz=n(toe,"A",{href:!0});var G6t=s(Uz);Lor=r(G6t,"from_pretrained()"),G6t.forEach(t),xor=r(toe," class method or the "),Jz=n(toe,"A",{href:!0});var O6t=s(Jz);$or=r(O6t,"from_config()"),O6t.forEach(t),kor=r(toe,` class
method.`),toe.forEach(t),Sor=i(il),UA=n(il,"P",{});var lVe=s(UA);Ror=r(lVe,"This class cannot be instantiated directly using "),a1e=n(lVe,"CODE",{});var V6t=s(a1e);Por=r(V6t,"__init__()"),V6t.forEach(t),Bor=r(lVe," (throws an error)."),lVe.forEach(t),Ior=i(il),vt=n(il,"DIV",{class:!0});var q3=s(vt);T(JA.$$.fragment,q3),Nor=i(q3),n1e=n(q3,"P",{});var X6t=s(n1e);qor=r(X6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),X6t.forEach(t),jor=i(q3),Fd=n(q3,"P",{});var aoe=s(Fd);Dor=r(aoe,`Note:
Loading a model from its configuration file does `),s1e=n(aoe,"STRONG",{});var z6t=s(s1e);Gor=r(z6t,"not"),z6t.forEach(t),Oor=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(aoe,"A",{href:!0});var W6t=s(Yz);Vor=r(W6t,"from_pretrained()"),W6t.forEach(t),Xor=r(aoe," to load the model weights."),aoe.forEach(t),zor=i(q3),T(Y6.$$.fragment,q3),q3.forEach(t),Wor=i(il),co=n(il,"DIV",{class:!0});var _a=s(co);T(YA.$$.fragment,_a),Qor=i(_a),l1e=n(_a,"P",{});var Q6t=s(l1e);Hor=r(Q6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Q6t.forEach(t),Uor=i(_a),za=n(_a,"P",{});var j3=s(za);Jor=r(j3,"The model class to instantiate is selected based on the "),i1e=n(j3,"CODE",{});var H6t=s(i1e);Yor=r(H6t,"model_type"),H6t.forEach(t),Kor=r(j3,` property of the config object (either
passed as an argument or loaded from `),d1e=n(j3,"CODE",{});var U6t=s(d1e);Zor=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),err=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(j3,"CODE",{});var J6t=s(c1e);orr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),rrr=r(j3,":"),j3.forEach(t),trr=i(_a),f1e=n(_a,"UL",{});var Y6t=s(f1e);K6=n(Y6t,"LI",{});var LRe=s(K6);m1e=n(LRe,"STRONG",{});var K6t=s(m1e);arr=r(K6t,"vilt"),K6t.forEach(t),nrr=r(LRe," \u2014 "),Kz=n(LRe,"A",{href:!0});var Z6t=s(Kz);srr=r(Z6t,"ViltForQuestionAnswering"),Z6t.forEach(t),lrr=r(LRe," (ViLT model)"),LRe.forEach(t),Y6t.forEach(t),irr=i(_a),Z6=n(_a,"P",{});var xRe=s(Z6);drr=r(xRe,"The model is set in evaluation mode by default using "),g1e=n(xRe,"CODE",{});var eTt=s(g1e);crr=r(eTt,"model.eval()"),eTt.forEach(t),frr=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(xRe,"CODE",{});var oTt=s(h1e);mrr=r(oTt,"model.train()"),oTt.forEach(t),xRe.forEach(t),grr=i(_a),T(eT.$$.fragment,_a),_a.forEach(t),il.forEach(t),rGe=i(f),Td=n(f,"H2",{class:!0});var iVe=s(Td);oT=n(iVe,"A",{id:!0,class:!0,href:!0});var rTt=s(oT);p1e=n(rTt,"SPAN",{});var tTt=s(p1e);T(KA.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),hrr=i(iVe),u1e=n(iVe,"SPAN",{});var aTt=s(u1e);prr=r(aTt,"AutoModelForAudioClassification"),aTt.forEach(t),iVe.forEach(t),tGe=i(f),Vo=n(f,"DIV",{class:!0});var dl=s(Vo);T(ZA.$$.fragment,dl),urr=i(dl),Md=n(dl,"P",{});var noe=s(Md);_rr=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Zz=n(noe,"A",{href:!0});var nTt=s(Zz);brr=r(nTt,"from_pretrained()"),nTt.forEach(t),vrr=r(noe," class method or the "),eW=n(noe,"A",{href:!0});var sTt=s(eW);Frr=r(sTt,"from_config()"),sTt.forEach(t),Trr=r(noe,` class
method.`),noe.forEach(t),Mrr=i(dl),ey=n(dl,"P",{});var dVe=s(ey);Err=r(dVe,"This class cannot be instantiated directly using "),_1e=n(dVe,"CODE",{});var lTt=s(_1e);Crr=r(lTt,"__init__()"),lTt.forEach(t),wrr=r(dVe," (throws an error)."),dVe.forEach(t),Arr=i(dl),Ft=n(dl,"DIV",{class:!0});var D3=s(Ft);T(oy.$$.fragment,D3),yrr=i(D3),b1e=n(D3,"P",{});var iTt=s(b1e);Lrr=r(iTt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),iTt.forEach(t),xrr=i(D3),Ed=n(D3,"P",{});var soe=s(Ed);$rr=r(soe,`Note:
Loading a model from its configuration file does `),v1e=n(soe,"STRONG",{});var dTt=s(v1e);krr=r(dTt,"not"),dTt.forEach(t),Srr=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(soe,"A",{href:!0});var cTt=s(oW);Rrr=r(cTt,"from_pretrained()"),cTt.forEach(t),Prr=r(soe," to load the model weights."),soe.forEach(t),Brr=i(D3),T(rT.$$.fragment,D3),D3.forEach(t),Irr=i(dl),fo=n(dl,"DIV",{class:!0});var ba=s(fo);T(ry.$$.fragment,ba),Nrr=i(ba),F1e=n(ba,"P",{});var fTt=s(F1e);qrr=r(fTt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fTt.forEach(t),jrr=i(ba),Wa=n(ba,"P",{});var G3=s(Wa);Drr=r(G3,"The model class to instantiate is selected based on the "),T1e=n(G3,"CODE",{});var mTt=s(T1e);Grr=r(mTt,"model_type"),mTt.forEach(t),Orr=r(G3,` property of the config object (either
passed as an argument or loaded from `),M1e=n(G3,"CODE",{});var gTt=s(M1e);Vrr=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),Xrr=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(G3,"CODE",{});var hTt=s(E1e);zrr=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),Wrr=r(G3,":"),G3.forEach(t),Qrr=i(ba),Re=n(ba,"UL",{});var Xe=s(Re);tT=n(Xe,"LI",{});var $Re=s(tT);C1e=n($Re,"STRONG",{});var pTt=s(C1e);Hrr=r(pTt,"data2vec-audio"),pTt.forEach(t),Urr=r($Re," \u2014 "),rW=n($Re,"A",{href:!0});var uTt=s(rW);Jrr=r(uTt,"Data2VecAudioForSequenceClassification"),uTt.forEach(t),Yrr=r($Re," (Data2VecAudio model)"),$Re.forEach(t),Krr=i(Xe),aT=n(Xe,"LI",{});var kRe=s(aT);w1e=n(kRe,"STRONG",{});var _Tt=s(w1e);Zrr=r(_Tt,"hubert"),_Tt.forEach(t),etr=r(kRe," \u2014 "),tW=n(kRe,"A",{href:!0});var bTt=s(tW);otr=r(bTt,"HubertForSequenceClassification"),bTt.forEach(t),rtr=r(kRe," (Hubert model)"),kRe.forEach(t),ttr=i(Xe),nT=n(Xe,"LI",{});var SRe=s(nT);A1e=n(SRe,"STRONG",{});var vTt=s(A1e);atr=r(vTt,"sew"),vTt.forEach(t),ntr=r(SRe," \u2014 "),aW=n(SRe,"A",{href:!0});var FTt=s(aW);str=r(FTt,"SEWForSequenceClassification"),FTt.forEach(t),ltr=r(SRe," (SEW model)"),SRe.forEach(t),itr=i(Xe),sT=n(Xe,"LI",{});var RRe=s(sT);y1e=n(RRe,"STRONG",{});var TTt=s(y1e);dtr=r(TTt,"sew-d"),TTt.forEach(t),ctr=r(RRe," \u2014 "),nW=n(RRe,"A",{href:!0});var MTt=s(nW);ftr=r(MTt,"SEWDForSequenceClassification"),MTt.forEach(t),mtr=r(RRe," (SEW-D model)"),RRe.forEach(t),gtr=i(Xe),lT=n(Xe,"LI",{});var PRe=s(lT);L1e=n(PRe,"STRONG",{});var ETt=s(L1e);htr=r(ETt,"unispeech"),ETt.forEach(t),ptr=r(PRe," \u2014 "),sW=n(PRe,"A",{href:!0});var CTt=s(sW);utr=r(CTt,"UniSpeechForSequenceClassification"),CTt.forEach(t),_tr=r(PRe," (UniSpeech model)"),PRe.forEach(t),btr=i(Xe),iT=n(Xe,"LI",{});var BRe=s(iT);x1e=n(BRe,"STRONG",{});var wTt=s(x1e);vtr=r(wTt,"unispeech-sat"),wTt.forEach(t),Ftr=r(BRe," \u2014 "),lW=n(BRe,"A",{href:!0});var ATt=s(lW);Ttr=r(ATt,"UniSpeechSatForSequenceClassification"),ATt.forEach(t),Mtr=r(BRe," (UniSpeechSat model)"),BRe.forEach(t),Etr=i(Xe),dT=n(Xe,"LI",{});var IRe=s(dT);$1e=n(IRe,"STRONG",{});var yTt=s($1e);Ctr=r(yTt,"wav2vec2"),yTt.forEach(t),wtr=r(IRe," \u2014 "),iW=n(IRe,"A",{href:!0});var LTt=s(iW);Atr=r(LTt,"Wav2Vec2ForSequenceClassification"),LTt.forEach(t),ytr=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),Ltr=i(Xe),cT=n(Xe,"LI",{});var NRe=s(cT);k1e=n(NRe,"STRONG",{});var xTt=s(k1e);xtr=r(xTt,"wav2vec2-conformer"),xTt.forEach(t),$tr=r(NRe," \u2014 "),dW=n(NRe,"A",{href:!0});var $Tt=s(dW);ktr=r($Tt,"Wav2Vec2ConformerForSequenceClassification"),$Tt.forEach(t),Str=r(NRe," (Wav2Vec2-Conformer model)"),NRe.forEach(t),Rtr=i(Xe),fT=n(Xe,"LI",{});var qRe=s(fT);S1e=n(qRe,"STRONG",{});var kTt=s(S1e);Ptr=r(kTt,"wavlm"),kTt.forEach(t),Btr=r(qRe," \u2014 "),cW=n(qRe,"A",{href:!0});var STt=s(cW);Itr=r(STt,"WavLMForSequenceClassification"),STt.forEach(t),Ntr=r(qRe," (WavLM model)"),qRe.forEach(t),Xe.forEach(t),qtr=i(ba),mT=n(ba,"P",{});var jRe=s(mT);jtr=r(jRe,"The model is set in evaluation mode by default using "),R1e=n(jRe,"CODE",{});var RTt=s(R1e);Dtr=r(RTt,"model.eval()"),RTt.forEach(t),Gtr=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(jRe,"CODE",{});var PTt=s(P1e);Otr=r(PTt,"model.train()"),PTt.forEach(t),jRe.forEach(t),Vtr=i(ba),T(gT.$$.fragment,ba),ba.forEach(t),dl.forEach(t),aGe=i(f),Cd=n(f,"H2",{class:!0});var cVe=s(Cd);hT=n(cVe,"A",{id:!0,class:!0,href:!0});var BTt=s(hT);B1e=n(BTt,"SPAN",{});var ITt=s(B1e);T(ty.$$.fragment,ITt),ITt.forEach(t),BTt.forEach(t),Xtr=i(cVe),I1e=n(cVe,"SPAN",{});var NTt=s(I1e);ztr=r(NTt,"AutoModelForAudioFrameClassification"),NTt.forEach(t),cVe.forEach(t),nGe=i(f),Xo=n(f,"DIV",{class:!0});var cl=s(Xo);T(ay.$$.fragment,cl),Wtr=i(cl),wd=n(cl,"P",{});var loe=s(wd);Qtr=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),fW=n(loe,"A",{href:!0});var qTt=s(fW);Htr=r(qTt,"from_pretrained()"),qTt.forEach(t),Utr=r(loe," class method or the "),mW=n(loe,"A",{href:!0});var jTt=s(mW);Jtr=r(jTt,"from_config()"),jTt.forEach(t),Ytr=r(loe,` class
method.`),loe.forEach(t),Ktr=i(cl),ny=n(cl,"P",{});var fVe=s(ny);Ztr=r(fVe,"This class cannot be instantiated directly using "),N1e=n(fVe,"CODE",{});var DTt=s(N1e);ear=r(DTt,"__init__()"),DTt.forEach(t),oar=r(fVe," (throws an error)."),fVe.forEach(t),rar=i(cl),Tt=n(cl,"DIV",{class:!0});var O3=s(Tt);T(sy.$$.fragment,O3),tar=i(O3),q1e=n(O3,"P",{});var GTt=s(q1e);aar=r(GTt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),GTt.forEach(t),nar=i(O3),Ad=n(O3,"P",{});var ioe=s(Ad);sar=r(ioe,`Note:
Loading a model from its configuration file does `),j1e=n(ioe,"STRONG",{});var OTt=s(j1e);lar=r(OTt,"not"),OTt.forEach(t),iar=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(ioe,"A",{href:!0});var VTt=s(gW);dar=r(VTt,"from_pretrained()"),VTt.forEach(t),car=r(ioe," to load the model weights."),ioe.forEach(t),far=i(O3),T(pT.$$.fragment,O3),O3.forEach(t),mar=i(cl),mo=n(cl,"DIV",{class:!0});var va=s(mo);T(ly.$$.fragment,va),gar=i(va),D1e=n(va,"P",{});var XTt=s(D1e);har=r(XTt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),XTt.forEach(t),par=i(va),Qa=n(va,"P",{});var V3=s(Qa);uar=r(V3,"The model class to instantiate is selected based on the "),G1e=n(V3,"CODE",{});var zTt=s(G1e);_ar=r(zTt,"model_type"),zTt.forEach(t),bar=r(V3,` property of the config object (either
passed as an argument or loaded from `),O1e=n(V3,"CODE",{});var WTt=s(O1e);Far=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),Tar=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(V3,"CODE",{});var QTt=s(V1e);Mar=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),Ear=r(V3,":"),V3.forEach(t),Car=i(va),et=n(va,"UL",{});var fl=s(et);uT=n(fl,"LI",{});var DRe=s(uT);X1e=n(DRe,"STRONG",{});var HTt=s(X1e);war=r(HTt,"data2vec-audio"),HTt.forEach(t),Aar=r(DRe," \u2014 "),hW=n(DRe,"A",{href:!0});var UTt=s(hW);yar=r(UTt,"Data2VecAudioForAudioFrameClassification"),UTt.forEach(t),Lar=r(DRe," (Data2VecAudio model)"),DRe.forEach(t),xar=i(fl),_T=n(fl,"LI",{});var GRe=s(_T);z1e=n(GRe,"STRONG",{});var JTt=s(z1e);$ar=r(JTt,"unispeech-sat"),JTt.forEach(t),kar=r(GRe," \u2014 "),pW=n(GRe,"A",{href:!0});var YTt=s(pW);Sar=r(YTt,"UniSpeechSatForAudioFrameClassification"),YTt.forEach(t),Rar=r(GRe," (UniSpeechSat model)"),GRe.forEach(t),Par=i(fl),bT=n(fl,"LI",{});var ORe=s(bT);W1e=n(ORe,"STRONG",{});var KTt=s(W1e);Bar=r(KTt,"wav2vec2"),KTt.forEach(t),Iar=r(ORe," \u2014 "),uW=n(ORe,"A",{href:!0});var ZTt=s(uW);Nar=r(ZTt,"Wav2Vec2ForAudioFrameClassification"),ZTt.forEach(t),qar=r(ORe," (Wav2Vec2 model)"),ORe.forEach(t),jar=i(fl),vT=n(fl,"LI",{});var VRe=s(vT);Q1e=n(VRe,"STRONG",{});var e7t=s(Q1e);Dar=r(e7t,"wav2vec2-conformer"),e7t.forEach(t),Gar=r(VRe," \u2014 "),_W=n(VRe,"A",{href:!0});var o7t=s(_W);Oar=r(o7t,"Wav2Vec2ConformerForAudioFrameClassification"),o7t.forEach(t),Var=r(VRe," (Wav2Vec2-Conformer model)"),VRe.forEach(t),Xar=i(fl),FT=n(fl,"LI",{});var XRe=s(FT);H1e=n(XRe,"STRONG",{});var r7t=s(H1e);zar=r(r7t,"wavlm"),r7t.forEach(t),War=r(XRe," \u2014 "),bW=n(XRe,"A",{href:!0});var t7t=s(bW);Qar=r(t7t,"WavLMForAudioFrameClassification"),t7t.forEach(t),Har=r(XRe," (WavLM model)"),XRe.forEach(t),fl.forEach(t),Uar=i(va),TT=n(va,"P",{});var zRe=s(TT);Jar=r(zRe,"The model is set in evaluation mode by default using "),U1e=n(zRe,"CODE",{});var a7t=s(U1e);Yar=r(a7t,"model.eval()"),a7t.forEach(t),Kar=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=n(zRe,"CODE",{});var n7t=s(J1e);Zar=r(n7t,"model.train()"),n7t.forEach(t),zRe.forEach(t),enr=i(va),T(MT.$$.fragment,va),va.forEach(t),cl.forEach(t),sGe=i(f),yd=n(f,"H2",{class:!0});var mVe=s(yd);ET=n(mVe,"A",{id:!0,class:!0,href:!0});var s7t=s(ET);Y1e=n(s7t,"SPAN",{});var l7t=s(Y1e);T(iy.$$.fragment,l7t),l7t.forEach(t),s7t.forEach(t),onr=i(mVe),K1e=n(mVe,"SPAN",{});var i7t=s(K1e);rnr=r(i7t,"AutoModelForCTC"),i7t.forEach(t),mVe.forEach(t),lGe=i(f),zo=n(f,"DIV",{class:!0});var ml=s(zo);T(dy.$$.fragment,ml),tnr=i(ml),Ld=n(ml,"P",{});var doe=s(Ld);anr=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vW=n(doe,"A",{href:!0});var d7t=s(vW);nnr=r(d7t,"from_pretrained()"),d7t.forEach(t),snr=r(doe," class method or the "),FW=n(doe,"A",{href:!0});var c7t=s(FW);lnr=r(c7t,"from_config()"),c7t.forEach(t),inr=r(doe,` class
method.`),doe.forEach(t),dnr=i(ml),cy=n(ml,"P",{});var gVe=s(cy);cnr=r(gVe,"This class cannot be instantiated directly using "),Z1e=n(gVe,"CODE",{});var f7t=s(Z1e);fnr=r(f7t,"__init__()"),f7t.forEach(t),mnr=r(gVe," (throws an error)."),gVe.forEach(t),gnr=i(ml),Mt=n(ml,"DIV",{class:!0});var X3=s(Mt);T(fy.$$.fragment,X3),hnr=i(X3),ebe=n(X3,"P",{});var m7t=s(ebe);pnr=r(m7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),m7t.forEach(t),unr=i(X3),xd=n(X3,"P",{});var coe=s(xd);_nr=r(coe,`Note:
Loading a model from its configuration file does `),obe=n(coe,"STRONG",{});var g7t=s(obe);bnr=r(g7t,"not"),g7t.forEach(t),vnr=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(coe,"A",{href:!0});var h7t=s(TW);Fnr=r(h7t,"from_pretrained()"),h7t.forEach(t),Tnr=r(coe," to load the model weights."),coe.forEach(t),Mnr=i(X3),T(CT.$$.fragment,X3),X3.forEach(t),Enr=i(ml),go=n(ml,"DIV",{class:!0});var Fa=s(go);T(my.$$.fragment,Fa),Cnr=i(Fa),rbe=n(Fa,"P",{});var p7t=s(rbe);wnr=r(p7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),p7t.forEach(t),Anr=i(Fa),Ha=n(Fa,"P",{});var z3=s(Ha);ynr=r(z3,"The model class to instantiate is selected based on the "),tbe=n(z3,"CODE",{});var u7t=s(tbe);Lnr=r(u7t,"model_type"),u7t.forEach(t),xnr=r(z3,` property of the config object (either
passed as an argument or loaded from `),abe=n(z3,"CODE",{});var _7t=s(abe);$nr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),knr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(z3,"CODE",{});var b7t=s(nbe);Snr=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),Rnr=r(z3,":"),z3.forEach(t),Pnr=i(Fa),ye=n(Fa,"UL",{});var Be=s(ye);wT=n(Be,"LI",{});var WRe=s(wT);sbe=n(WRe,"STRONG",{});var v7t=s(sbe);Bnr=r(v7t,"data2vec-audio"),v7t.forEach(t),Inr=r(WRe," \u2014 "),MW=n(WRe,"A",{href:!0});var F7t=s(MW);Nnr=r(F7t,"Data2VecAudioForCTC"),F7t.forEach(t),qnr=r(WRe," (Data2VecAudio model)"),WRe.forEach(t),jnr=i(Be),AT=n(Be,"LI",{});var QRe=s(AT);lbe=n(QRe,"STRONG",{});var T7t=s(lbe);Dnr=r(T7t,"hubert"),T7t.forEach(t),Gnr=r(QRe," \u2014 "),EW=n(QRe,"A",{href:!0});var M7t=s(EW);Onr=r(M7t,"HubertForCTC"),M7t.forEach(t),Vnr=r(QRe," (Hubert model)"),QRe.forEach(t),Xnr=i(Be),yT=n(Be,"LI",{});var HRe=s(yT);ibe=n(HRe,"STRONG",{});var E7t=s(ibe);znr=r(E7t,"mctct"),E7t.forEach(t),Wnr=r(HRe," \u2014 "),CW=n(HRe,"A",{href:!0});var C7t=s(CW);Qnr=r(C7t,"MCTCTForCTC"),C7t.forEach(t),Hnr=r(HRe," (M-CTC-T model)"),HRe.forEach(t),Unr=i(Be),LT=n(Be,"LI",{});var URe=s(LT);dbe=n(URe,"STRONG",{});var w7t=s(dbe);Jnr=r(w7t,"sew"),w7t.forEach(t),Ynr=r(URe," \u2014 "),wW=n(URe,"A",{href:!0});var A7t=s(wW);Knr=r(A7t,"SEWForCTC"),A7t.forEach(t),Znr=r(URe," (SEW model)"),URe.forEach(t),esr=i(Be),xT=n(Be,"LI",{});var JRe=s(xT);cbe=n(JRe,"STRONG",{});var y7t=s(cbe);osr=r(y7t,"sew-d"),y7t.forEach(t),rsr=r(JRe," \u2014 "),AW=n(JRe,"A",{href:!0});var L7t=s(AW);tsr=r(L7t,"SEWDForCTC"),L7t.forEach(t),asr=r(JRe," (SEW-D model)"),JRe.forEach(t),nsr=i(Be),$T=n(Be,"LI",{});var YRe=s($T);fbe=n(YRe,"STRONG",{});var x7t=s(fbe);ssr=r(x7t,"unispeech"),x7t.forEach(t),lsr=r(YRe," \u2014 "),yW=n(YRe,"A",{href:!0});var $7t=s(yW);isr=r($7t,"UniSpeechForCTC"),$7t.forEach(t),dsr=r(YRe," (UniSpeech model)"),YRe.forEach(t),csr=i(Be),kT=n(Be,"LI",{});var KRe=s(kT);mbe=n(KRe,"STRONG",{});var k7t=s(mbe);fsr=r(k7t,"unispeech-sat"),k7t.forEach(t),msr=r(KRe," \u2014 "),LW=n(KRe,"A",{href:!0});var S7t=s(LW);gsr=r(S7t,"UniSpeechSatForCTC"),S7t.forEach(t),hsr=r(KRe," (UniSpeechSat model)"),KRe.forEach(t),psr=i(Be),ST=n(Be,"LI",{});var ZRe=s(ST);gbe=n(ZRe,"STRONG",{});var R7t=s(gbe);usr=r(R7t,"wav2vec2"),R7t.forEach(t),_sr=r(ZRe," \u2014 "),xW=n(ZRe,"A",{href:!0});var P7t=s(xW);bsr=r(P7t,"Wav2Vec2ForCTC"),P7t.forEach(t),vsr=r(ZRe," (Wav2Vec2 model)"),ZRe.forEach(t),Fsr=i(Be),RT=n(Be,"LI",{});var ePe=s(RT);hbe=n(ePe,"STRONG",{});var B7t=s(hbe);Tsr=r(B7t,"wav2vec2-conformer"),B7t.forEach(t),Msr=r(ePe," \u2014 "),$W=n(ePe,"A",{href:!0});var I7t=s($W);Esr=r(I7t,"Wav2Vec2ConformerForCTC"),I7t.forEach(t),Csr=r(ePe," (Wav2Vec2-Conformer model)"),ePe.forEach(t),wsr=i(Be),PT=n(Be,"LI",{});var oPe=s(PT);pbe=n(oPe,"STRONG",{});var N7t=s(pbe);Asr=r(N7t,"wavlm"),N7t.forEach(t),ysr=r(oPe," \u2014 "),kW=n(oPe,"A",{href:!0});var q7t=s(kW);Lsr=r(q7t,"WavLMForCTC"),q7t.forEach(t),xsr=r(oPe," (WavLM model)"),oPe.forEach(t),Be.forEach(t),$sr=i(Fa),BT=n(Fa,"P",{});var rPe=s(BT);ksr=r(rPe,"The model is set in evaluation mode by default using "),ube=n(rPe,"CODE",{});var j7t=s(ube);Ssr=r(j7t,"model.eval()"),j7t.forEach(t),Rsr=r(rPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(rPe,"CODE",{});var D7t=s(_be);Psr=r(D7t,"model.train()"),D7t.forEach(t),rPe.forEach(t),Bsr=i(Fa),T(IT.$$.fragment,Fa),Fa.forEach(t),ml.forEach(t),iGe=i(f),$d=n(f,"H2",{class:!0});var hVe=s($d);NT=n(hVe,"A",{id:!0,class:!0,href:!0});var G7t=s(NT);bbe=n(G7t,"SPAN",{});var O7t=s(bbe);T(gy.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),Isr=i(hVe),vbe=n(hVe,"SPAN",{});var V7t=s(vbe);Nsr=r(V7t,"AutoModelForSpeechSeq2Seq"),V7t.forEach(t),hVe.forEach(t),dGe=i(f),Wo=n(f,"DIV",{class:!0});var gl=s(Wo);T(hy.$$.fragment,gl),qsr=i(gl),kd=n(gl,"P",{});var foe=s(kd);jsr=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SW=n(foe,"A",{href:!0});var X7t=s(SW);Dsr=r(X7t,"from_pretrained()"),X7t.forEach(t),Gsr=r(foe," class method or the "),RW=n(foe,"A",{href:!0});var z7t=s(RW);Osr=r(z7t,"from_config()"),z7t.forEach(t),Vsr=r(foe,` class
method.`),foe.forEach(t),Xsr=i(gl),py=n(gl,"P",{});var pVe=s(py);zsr=r(pVe,"This class cannot be instantiated directly using "),Fbe=n(pVe,"CODE",{});var W7t=s(Fbe);Wsr=r(W7t,"__init__()"),W7t.forEach(t),Qsr=r(pVe," (throws an error)."),pVe.forEach(t),Hsr=i(gl),Et=n(gl,"DIV",{class:!0});var W3=s(Et);T(uy.$$.fragment,W3),Usr=i(W3),Tbe=n(W3,"P",{});var Q7t=s(Tbe);Jsr=r(Q7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Q7t.forEach(t),Ysr=i(W3),Sd=n(W3,"P",{});var moe=s(Sd);Ksr=r(moe,`Note:
Loading a model from its configuration file does `),Mbe=n(moe,"STRONG",{});var H7t=s(Mbe);Zsr=r(H7t,"not"),H7t.forEach(t),elr=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(moe,"A",{href:!0});var U7t=s(PW);olr=r(U7t,"from_pretrained()"),U7t.forEach(t),rlr=r(moe," to load the model weights."),moe.forEach(t),tlr=i(W3),T(qT.$$.fragment,W3),W3.forEach(t),alr=i(gl),ho=n(gl,"DIV",{class:!0});var Ta=s(ho);T(_y.$$.fragment,Ta),nlr=i(Ta),Ebe=n(Ta,"P",{});var J7t=s(Ebe);slr=r(J7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),J7t.forEach(t),llr=i(Ta),Ua=n(Ta,"P",{});var Q3=s(Ua);ilr=r(Q3,"The model class to instantiate is selected based on the "),Cbe=n(Q3,"CODE",{});var Y7t=s(Cbe);dlr=r(Y7t,"model_type"),Y7t.forEach(t),clr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),wbe=n(Q3,"CODE",{});var K7t=s(wbe);flr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),mlr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(Q3,"CODE",{});var Z7t=s(Abe);glr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),hlr=r(Q3,":"),Q3.forEach(t),plr=i(Ta),by=n(Ta,"UL",{});var uVe=s(by);jT=n(uVe,"LI",{});var tPe=s(jT);ybe=n(tPe,"STRONG",{});var e8t=s(ybe);ulr=r(e8t,"speech-encoder-decoder"),e8t.forEach(t),_lr=r(tPe," \u2014 "),BW=n(tPe,"A",{href:!0});var o8t=s(BW);blr=r(o8t,"SpeechEncoderDecoderModel"),o8t.forEach(t),vlr=r(tPe," (Speech Encoder decoder model)"),tPe.forEach(t),Flr=i(uVe),DT=n(uVe,"LI",{});var aPe=s(DT);Lbe=n(aPe,"STRONG",{});var r8t=s(Lbe);Tlr=r(r8t,"speech_to_text"),r8t.forEach(t),Mlr=r(aPe," \u2014 "),IW=n(aPe,"A",{href:!0});var t8t=s(IW);Elr=r(t8t,"Speech2TextForConditionalGeneration"),t8t.forEach(t),Clr=r(aPe," (Speech2Text model)"),aPe.forEach(t),uVe.forEach(t),wlr=i(Ta),GT=n(Ta,"P",{});var nPe=s(GT);Alr=r(nPe,"The model is set in evaluation mode by default using "),xbe=n(nPe,"CODE",{});var a8t=s(xbe);ylr=r(a8t,"model.eval()"),a8t.forEach(t),Llr=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(nPe,"CODE",{});var n8t=s($be);xlr=r(n8t,"model.train()"),n8t.forEach(t),nPe.forEach(t),$lr=i(Ta),T(OT.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),cGe=i(f),Rd=n(f,"H2",{class:!0});var _Ve=s(Rd);VT=n(_Ve,"A",{id:!0,class:!0,href:!0});var s8t=s(VT);kbe=n(s8t,"SPAN",{});var l8t=s(kbe);T(vy.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),klr=i(_Ve),Sbe=n(_Ve,"SPAN",{});var i8t=s(Sbe);Slr=r(i8t,"AutoModelForAudioXVector"),i8t.forEach(t),_Ve.forEach(t),fGe=i(f),Qo=n(f,"DIV",{class:!0});var hl=s(Qo);T(Fy.$$.fragment,hl),Rlr=i(hl),Pd=n(hl,"P",{});var goe=s(Pd);Plr=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NW=n(goe,"A",{href:!0});var d8t=s(NW);Blr=r(d8t,"from_pretrained()"),d8t.forEach(t),Ilr=r(goe," class method or the "),qW=n(goe,"A",{href:!0});var c8t=s(qW);Nlr=r(c8t,"from_config()"),c8t.forEach(t),qlr=r(goe,` class
method.`),goe.forEach(t),jlr=i(hl),Ty=n(hl,"P",{});var bVe=s(Ty);Dlr=r(bVe,"This class cannot be instantiated directly using "),Rbe=n(bVe,"CODE",{});var f8t=s(Rbe);Glr=r(f8t,"__init__()"),f8t.forEach(t),Olr=r(bVe," (throws an error)."),bVe.forEach(t),Vlr=i(hl),Ct=n(hl,"DIV",{class:!0});var H3=s(Ct);T(My.$$.fragment,H3),Xlr=i(H3),Pbe=n(H3,"P",{});var m8t=s(Pbe);zlr=r(m8t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),m8t.forEach(t),Wlr=i(H3),Bd=n(H3,"P",{});var hoe=s(Bd);Qlr=r(hoe,`Note:
Loading a model from its configuration file does `),Bbe=n(hoe,"STRONG",{});var g8t=s(Bbe);Hlr=r(g8t,"not"),g8t.forEach(t),Ulr=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(hoe,"A",{href:!0});var h8t=s(jW);Jlr=r(h8t,"from_pretrained()"),h8t.forEach(t),Ylr=r(hoe," to load the model weights."),hoe.forEach(t),Klr=i(H3),T(XT.$$.fragment,H3),H3.forEach(t),Zlr=i(hl),po=n(hl,"DIV",{class:!0});var Ma=s(po);T(Ey.$$.fragment,Ma),eir=i(Ma),Ibe=n(Ma,"P",{});var p8t=s(Ibe);oir=r(p8t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),p8t.forEach(t),rir=i(Ma),Ja=n(Ma,"P",{});var U3=s(Ja);tir=r(U3,"The model class to instantiate is selected based on the "),Nbe=n(U3,"CODE",{});var u8t=s(Nbe);air=r(u8t,"model_type"),u8t.forEach(t),nir=r(U3,` property of the config object (either
passed as an argument or loaded from `),qbe=n(U3,"CODE",{});var _8t=s(qbe);sir=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),lir=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(U3,"CODE",{});var b8t=s(jbe);iir=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),dir=r(U3,":"),U3.forEach(t),cir=i(Ma),ot=n(Ma,"UL",{});var pl=s(ot);zT=n(pl,"LI",{});var sPe=s(zT);Dbe=n(sPe,"STRONG",{});var v8t=s(Dbe);fir=r(v8t,"data2vec-audio"),v8t.forEach(t),mir=r(sPe," \u2014 "),DW=n(sPe,"A",{href:!0});var F8t=s(DW);gir=r(F8t,"Data2VecAudioForXVector"),F8t.forEach(t),hir=r(sPe," (Data2VecAudio model)"),sPe.forEach(t),pir=i(pl),WT=n(pl,"LI",{});var lPe=s(WT);Gbe=n(lPe,"STRONG",{});var T8t=s(Gbe);uir=r(T8t,"unispeech-sat"),T8t.forEach(t),_ir=r(lPe," \u2014 "),GW=n(lPe,"A",{href:!0});var M8t=s(GW);bir=r(M8t,"UniSpeechSatForXVector"),M8t.forEach(t),vir=r(lPe," (UniSpeechSat model)"),lPe.forEach(t),Fir=i(pl),QT=n(pl,"LI",{});var iPe=s(QT);Obe=n(iPe,"STRONG",{});var E8t=s(Obe);Tir=r(E8t,"wav2vec2"),E8t.forEach(t),Mir=r(iPe," \u2014 "),OW=n(iPe,"A",{href:!0});var C8t=s(OW);Eir=r(C8t,"Wav2Vec2ForXVector"),C8t.forEach(t),Cir=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),wir=i(pl),HT=n(pl,"LI",{});var dPe=s(HT);Vbe=n(dPe,"STRONG",{});var w8t=s(Vbe);Air=r(w8t,"wav2vec2-conformer"),w8t.forEach(t),yir=r(dPe," \u2014 "),VW=n(dPe,"A",{href:!0});var A8t=s(VW);Lir=r(A8t,"Wav2Vec2ConformerForXVector"),A8t.forEach(t),xir=r(dPe," (Wav2Vec2-Conformer model)"),dPe.forEach(t),$ir=i(pl),UT=n(pl,"LI",{});var cPe=s(UT);Xbe=n(cPe,"STRONG",{});var y8t=s(Xbe);kir=r(y8t,"wavlm"),y8t.forEach(t),Sir=r(cPe," \u2014 "),XW=n(cPe,"A",{href:!0});var L8t=s(XW);Rir=r(L8t,"WavLMForXVector"),L8t.forEach(t),Pir=r(cPe," (WavLM model)"),cPe.forEach(t),pl.forEach(t),Bir=i(Ma),JT=n(Ma,"P",{});var fPe=s(JT);Iir=r(fPe,"The model is set in evaluation mode by default using "),zbe=n(fPe,"CODE",{});var x8t=s(zbe);Nir=r(x8t,"model.eval()"),x8t.forEach(t),qir=r(fPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=n(fPe,"CODE",{});var $8t=s(Wbe);jir=r($8t,"model.train()"),$8t.forEach(t),fPe.forEach(t),Dir=i(Ma),T(YT.$$.fragment,Ma),Ma.forEach(t),hl.forEach(t),mGe=i(f),Id=n(f,"H2",{class:!0});var vVe=s(Id);KT=n(vVe,"A",{id:!0,class:!0,href:!0});var k8t=s(KT);Qbe=n(k8t,"SPAN",{});var S8t=s(Qbe);T(Cy.$$.fragment,S8t),S8t.forEach(t),k8t.forEach(t),Gir=i(vVe),Hbe=n(vVe,"SPAN",{});var R8t=s(Hbe);Oir=r(R8t,"AutoModelForMaskedImageModeling"),R8t.forEach(t),vVe.forEach(t),gGe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(wy.$$.fragment,ul),Vir=i(ul),Nd=n(ul,"P",{});var poe=s(Nd);Xir=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zW=n(poe,"A",{href:!0});var P8t=s(zW);zir=r(P8t,"from_pretrained()"),P8t.forEach(t),Wir=r(poe," class method or the "),WW=n(poe,"A",{href:!0});var B8t=s(WW);Qir=r(B8t,"from_config()"),B8t.forEach(t),Hir=r(poe,` class
method.`),poe.forEach(t),Uir=i(ul),Ay=n(ul,"P",{});var FVe=s(Ay);Jir=r(FVe,"This class cannot be instantiated directly using "),Ube=n(FVe,"CODE",{});var I8t=s(Ube);Yir=r(I8t,"__init__()"),I8t.forEach(t),Kir=r(FVe," (throws an error)."),FVe.forEach(t),Zir=i(ul),wt=n(ul,"DIV",{class:!0});var J3=s(wt);T(yy.$$.fragment,J3),edr=i(J3),Jbe=n(J3,"P",{});var N8t=s(Jbe);odr=r(N8t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),N8t.forEach(t),rdr=i(J3),qd=n(J3,"P",{});var uoe=s(qd);tdr=r(uoe,`Note:
Loading a model from its configuration file does `),Ybe=n(uoe,"STRONG",{});var q8t=s(Ybe);adr=r(q8t,"not"),q8t.forEach(t),ndr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(uoe,"A",{href:!0});var j8t=s(QW);sdr=r(j8t,"from_pretrained()"),j8t.forEach(t),ldr=r(uoe," to load the model weights."),uoe.forEach(t),idr=i(J3),T(ZT.$$.fragment,J3),J3.forEach(t),ddr=i(ul),uo=n(ul,"DIV",{class:!0});var Ea=s(uo);T(Ly.$$.fragment,Ea),cdr=i(Ea),Kbe=n(Ea,"P",{});var D8t=s(Kbe);fdr=r(D8t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),D8t.forEach(t),mdr=i(Ea),Ya=n(Ea,"P",{});var Y3=s(Ya);gdr=r(Y3,"The model class to instantiate is selected based on the "),Zbe=n(Y3,"CODE",{});var G8t=s(Zbe);hdr=r(G8t,"model_type"),G8t.forEach(t),pdr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),e2e=n(Y3,"CODE",{});var O8t=s(e2e);udr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),_dr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(Y3,"CODE",{});var V8t=s(o2e);bdr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),vdr=r(Y3,":"),Y3.forEach(t),Fdr=i(Ea),jd=n(Ea,"UL",{});var _oe=s(jd);e7=n(_oe,"LI",{});var mPe=s(e7);r2e=n(mPe,"STRONG",{});var X8t=s(r2e);Tdr=r(X8t,"deit"),X8t.forEach(t),Mdr=r(mPe," \u2014 "),HW=n(mPe,"A",{href:!0});var z8t=s(HW);Edr=r(z8t,"DeiTForMaskedImageModeling"),z8t.forEach(t),Cdr=r(mPe," (DeiT model)"),mPe.forEach(t),wdr=i(_oe),o7=n(_oe,"LI",{});var gPe=s(o7);t2e=n(gPe,"STRONG",{});var W8t=s(t2e);Adr=r(W8t,"swin"),W8t.forEach(t),ydr=r(gPe," \u2014 "),UW=n(gPe,"A",{href:!0});var Q8t=s(UW);Ldr=r(Q8t,"SwinForMaskedImageModeling"),Q8t.forEach(t),xdr=r(gPe," (Swin Transformer model)"),gPe.forEach(t),$dr=i(_oe),r7=n(_oe,"LI",{});var hPe=s(r7);a2e=n(hPe,"STRONG",{});var H8t=s(a2e);kdr=r(H8t,"vit"),H8t.forEach(t),Sdr=r(hPe," \u2014 "),JW=n(hPe,"A",{href:!0});var U8t=s(JW);Rdr=r(U8t,"ViTForMaskedImageModeling"),U8t.forEach(t),Pdr=r(hPe," (ViT model)"),hPe.forEach(t),_oe.forEach(t),Bdr=i(Ea),t7=n(Ea,"P",{});var pPe=s(t7);Idr=r(pPe,"The model is set in evaluation mode by default using "),n2e=n(pPe,"CODE",{});var J8t=s(n2e);Ndr=r(J8t,"model.eval()"),J8t.forEach(t),qdr=r(pPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=n(pPe,"CODE",{});var Y8t=s(s2e);jdr=r(Y8t,"model.train()"),Y8t.forEach(t),pPe.forEach(t),Ddr=i(Ea),T(a7.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),hGe=i(f),Dd=n(f,"H2",{class:!0});var TVe=s(Dd);n7=n(TVe,"A",{id:!0,class:!0,href:!0});var K8t=s(n7);l2e=n(K8t,"SPAN",{});var Z8t=s(l2e);T(xy.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),Gdr=i(TVe),i2e=n(TVe,"SPAN",{});var e9t=s(i2e);Odr=r(e9t,"AutoModelForObjectDetection"),e9t.forEach(t),TVe.forEach(t),pGe=i(f),Uo=n(f,"DIV",{class:!0});var _l=s(Uo);T($y.$$.fragment,_l),Vdr=i(_l),Gd=n(_l,"P",{});var boe=s(Gd);Xdr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YW=n(boe,"A",{href:!0});var o9t=s(YW);zdr=r(o9t,"from_pretrained()"),o9t.forEach(t),Wdr=r(boe," class method or the "),KW=n(boe,"A",{href:!0});var r9t=s(KW);Qdr=r(r9t,"from_config()"),r9t.forEach(t),Hdr=r(boe,` class
method.`),boe.forEach(t),Udr=i(_l),ky=n(_l,"P",{});var MVe=s(ky);Jdr=r(MVe,"This class cannot be instantiated directly using "),d2e=n(MVe,"CODE",{});var t9t=s(d2e);Ydr=r(t9t,"__init__()"),t9t.forEach(t),Kdr=r(MVe," (throws an error)."),MVe.forEach(t),Zdr=i(_l),At=n(_l,"DIV",{class:!0});var K3=s(At);T(Sy.$$.fragment,K3),ecr=i(K3),c2e=n(K3,"P",{});var a9t=s(c2e);ocr=r(a9t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),a9t.forEach(t),rcr=i(K3),Od=n(K3,"P",{});var voe=s(Od);tcr=r(voe,`Note:
Loading a model from its configuration file does `),f2e=n(voe,"STRONG",{});var n9t=s(f2e);acr=r(n9t,"not"),n9t.forEach(t),ncr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(voe,"A",{href:!0});var s9t=s(ZW);scr=r(s9t,"from_pretrained()"),s9t.forEach(t),lcr=r(voe," to load the model weights."),voe.forEach(t),icr=i(K3),T(s7.$$.fragment,K3),K3.forEach(t),dcr=i(_l),_o=n(_l,"DIV",{class:!0});var Ca=s(_o);T(Ry.$$.fragment,Ca),ccr=i(Ca),m2e=n(Ca,"P",{});var l9t=s(m2e);fcr=r(l9t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),l9t.forEach(t),mcr=i(Ca),Ka=n(Ca,"P",{});var Z3=s(Ka);gcr=r(Z3,"The model class to instantiate is selected based on the "),g2e=n(Z3,"CODE",{});var i9t=s(g2e);hcr=r(i9t,"model_type"),i9t.forEach(t),pcr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),h2e=n(Z3,"CODE",{});var d9t=s(h2e);ucr=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),_cr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(Z3,"CODE",{});var c9t=s(p2e);bcr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),vcr=r(Z3,":"),Z3.forEach(t),Fcr=i(Ca),Py=n(Ca,"UL",{});var EVe=s(Py);l7=n(EVe,"LI",{});var uPe=s(l7);u2e=n(uPe,"STRONG",{});var f9t=s(u2e);Tcr=r(f9t,"detr"),f9t.forEach(t),Mcr=r(uPe," \u2014 "),eQ=n(uPe,"A",{href:!0});var m9t=s(eQ);Ecr=r(m9t,"DetrForObjectDetection"),m9t.forEach(t),Ccr=r(uPe," (DETR model)"),uPe.forEach(t),wcr=i(EVe),i7=n(EVe,"LI",{});var _Pe=s(i7);_2e=n(_Pe,"STRONG",{});var g9t=s(_2e);Acr=r(g9t,"yolos"),g9t.forEach(t),ycr=r(_Pe," \u2014 "),oQ=n(_Pe,"A",{href:!0});var h9t=s(oQ);Lcr=r(h9t,"YolosForObjectDetection"),h9t.forEach(t),xcr=r(_Pe," (YOLOS model)"),_Pe.forEach(t),EVe.forEach(t),$cr=i(Ca),d7=n(Ca,"P",{});var bPe=s(d7);kcr=r(bPe,"The model is set in evaluation mode by default using "),b2e=n(bPe,"CODE",{});var p9t=s(b2e);Scr=r(p9t,"model.eval()"),p9t.forEach(t),Rcr=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(bPe,"CODE",{});var u9t=s(v2e);Pcr=r(u9t,"model.train()"),u9t.forEach(t),bPe.forEach(t),Bcr=i(Ca),T(c7.$$.fragment,Ca),Ca.forEach(t),_l.forEach(t),uGe=i(f),Vd=n(f,"H2",{class:!0});var CVe=s(Vd);f7=n(CVe,"A",{id:!0,class:!0,href:!0});var _9t=s(f7);F2e=n(_9t,"SPAN",{});var b9t=s(F2e);T(By.$$.fragment,b9t),b9t.forEach(t),_9t.forEach(t),Icr=i(CVe),T2e=n(CVe,"SPAN",{});var v9t=s(T2e);Ncr=r(v9t,"AutoModelForImageSegmentation"),v9t.forEach(t),CVe.forEach(t),_Ge=i(f),Jo=n(f,"DIV",{class:!0});var bl=s(Jo);T(Iy.$$.fragment,bl),qcr=i(bl),Xd=n(bl,"P",{});var Foe=s(Xd);jcr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rQ=n(Foe,"A",{href:!0});var F9t=s(rQ);Dcr=r(F9t,"from_pretrained()"),F9t.forEach(t),Gcr=r(Foe," class method or the "),tQ=n(Foe,"A",{href:!0});var T9t=s(tQ);Ocr=r(T9t,"from_config()"),T9t.forEach(t),Vcr=r(Foe,` class
method.`),Foe.forEach(t),Xcr=i(bl),Ny=n(bl,"P",{});var wVe=s(Ny);zcr=r(wVe,"This class cannot be instantiated directly using "),M2e=n(wVe,"CODE",{});var M9t=s(M2e);Wcr=r(M9t,"__init__()"),M9t.forEach(t),Qcr=r(wVe," (throws an error)."),wVe.forEach(t),Hcr=i(bl),yt=n(bl,"DIV",{class:!0});var ew=s(yt);T(qy.$$.fragment,ew),Ucr=i(ew),E2e=n(ew,"P",{});var E9t=s(E2e);Jcr=r(E9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),E9t.forEach(t),Ycr=i(ew),zd=n(ew,"P",{});var Toe=s(zd);Kcr=r(Toe,`Note:
Loading a model from its configuration file does `),C2e=n(Toe,"STRONG",{});var C9t=s(C2e);Zcr=r(C9t,"not"),C9t.forEach(t),efr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(Toe,"A",{href:!0});var w9t=s(aQ);ofr=r(w9t,"from_pretrained()"),w9t.forEach(t),rfr=r(Toe," to load the model weights."),Toe.forEach(t),tfr=i(ew),T(m7.$$.fragment,ew),ew.forEach(t),afr=i(bl),bo=n(bl,"DIV",{class:!0});var wa=s(bo);T(jy.$$.fragment,wa),nfr=i(wa),w2e=n(wa,"P",{});var A9t=s(w2e);sfr=r(A9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),A9t.forEach(t),lfr=i(wa),Za=n(wa,"P",{});var ow=s(Za);ifr=r(ow,"The model class to instantiate is selected based on the "),A2e=n(ow,"CODE",{});var y9t=s(A2e);dfr=r(y9t,"model_type"),y9t.forEach(t),cfr=r(ow,` property of the config object (either
passed as an argument or loaded from `),y2e=n(ow,"CODE",{});var L9t=s(y2e);ffr=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),mfr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(ow,"CODE",{});var x9t=s(L2e);gfr=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),hfr=r(ow,":"),ow.forEach(t),pfr=i(wa),x2e=n(wa,"UL",{});var $9t=s(x2e);g7=n($9t,"LI",{});var vPe=s(g7);$2e=n(vPe,"STRONG",{});var k9t=s($2e);ufr=r(k9t,"detr"),k9t.forEach(t),_fr=r(vPe," \u2014 "),nQ=n(vPe,"A",{href:!0});var S9t=s(nQ);bfr=r(S9t,"DetrForSegmentation"),S9t.forEach(t),vfr=r(vPe," (DETR model)"),vPe.forEach(t),$9t.forEach(t),Ffr=i(wa),h7=n(wa,"P",{});var FPe=s(h7);Tfr=r(FPe,"The model is set in evaluation mode by default using "),k2e=n(FPe,"CODE",{});var R9t=s(k2e);Mfr=r(R9t,"model.eval()"),R9t.forEach(t),Efr=r(FPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(FPe,"CODE",{});var P9t=s(S2e);Cfr=r(P9t,"model.train()"),P9t.forEach(t),FPe.forEach(t),wfr=i(wa),T(p7.$$.fragment,wa),wa.forEach(t),bl.forEach(t),bGe=i(f),Wd=n(f,"H2",{class:!0});var AVe=s(Wd);u7=n(AVe,"A",{id:!0,class:!0,href:!0});var B9t=s(u7);R2e=n(B9t,"SPAN",{});var I9t=s(R2e);T(Dy.$$.fragment,I9t),I9t.forEach(t),B9t.forEach(t),Afr=i(AVe),P2e=n(AVe,"SPAN",{});var N9t=s(P2e);yfr=r(N9t,"AutoModelForSemanticSegmentation"),N9t.forEach(t),AVe.forEach(t),vGe=i(f),Yo=n(f,"DIV",{class:!0});var vl=s(Yo);T(Gy.$$.fragment,vl),Lfr=i(vl),Qd=n(vl,"P",{});var Moe=s(Qd);xfr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sQ=n(Moe,"A",{href:!0});var q9t=s(sQ);$fr=r(q9t,"from_pretrained()"),q9t.forEach(t),kfr=r(Moe," class method or the "),lQ=n(Moe,"A",{href:!0});var j9t=s(lQ);Sfr=r(j9t,"from_config()"),j9t.forEach(t),Rfr=r(Moe,` class
method.`),Moe.forEach(t),Pfr=i(vl),Oy=n(vl,"P",{});var yVe=s(Oy);Bfr=r(yVe,"This class cannot be instantiated directly using "),B2e=n(yVe,"CODE",{});var D9t=s(B2e);Ifr=r(D9t,"__init__()"),D9t.forEach(t),Nfr=r(yVe," (throws an error)."),yVe.forEach(t),qfr=i(vl),Lt=n(vl,"DIV",{class:!0});var rw=s(Lt);T(Vy.$$.fragment,rw),jfr=i(rw),I2e=n(rw,"P",{});var G9t=s(I2e);Dfr=r(G9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),G9t.forEach(t),Gfr=i(rw),Hd=n(rw,"P",{});var Eoe=s(Hd);Ofr=r(Eoe,`Note:
Loading a model from its configuration file does `),N2e=n(Eoe,"STRONG",{});var O9t=s(N2e);Vfr=r(O9t,"not"),O9t.forEach(t),Xfr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(Eoe,"A",{href:!0});var V9t=s(iQ);zfr=r(V9t,"from_pretrained()"),V9t.forEach(t),Wfr=r(Eoe," to load the model weights."),Eoe.forEach(t),Qfr=i(rw),T(_7.$$.fragment,rw),rw.forEach(t),Hfr=i(vl),vo=n(vl,"DIV",{class:!0});var Aa=s(vo);T(Xy.$$.fragment,Aa),Ufr=i(Aa),q2e=n(Aa,"P",{});var X9t=s(q2e);Jfr=r(X9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),X9t.forEach(t),Yfr=i(Aa),en=n(Aa,"P",{});var tw=s(en);Kfr=r(tw,"The model class to instantiate is selected based on the "),j2e=n(tw,"CODE",{});var z9t=s(j2e);Zfr=r(z9t,"model_type"),z9t.forEach(t),emr=r(tw,` property of the config object (either
passed as an argument or loaded from `),D2e=n(tw,"CODE",{});var W9t=s(D2e);omr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),rmr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(tw,"CODE",{});var Q9t=s(G2e);tmr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),amr=r(tw,":"),tw.forEach(t),nmr=i(Aa),on=n(Aa,"UL",{});var aw=s(on);b7=n(aw,"LI",{});var TPe=s(b7);O2e=n(TPe,"STRONG",{});var H9t=s(O2e);smr=r(H9t,"beit"),H9t.forEach(t),lmr=r(TPe," \u2014 "),dQ=n(TPe,"A",{href:!0});var U9t=s(dQ);imr=r(U9t,"BeitForSemanticSegmentation"),U9t.forEach(t),dmr=r(TPe," (BEiT model)"),TPe.forEach(t),cmr=i(aw),v7=n(aw,"LI",{});var MPe=s(v7);V2e=n(MPe,"STRONG",{});var J9t=s(V2e);fmr=r(J9t,"data2vec-vision"),J9t.forEach(t),mmr=r(MPe," \u2014 "),cQ=n(MPe,"A",{href:!0});var Y9t=s(cQ);gmr=r(Y9t,"Data2VecVisionForSemanticSegmentation"),Y9t.forEach(t),hmr=r(MPe," (Data2VecVision model)"),MPe.forEach(t),pmr=i(aw),F7=n(aw,"LI",{});var EPe=s(F7);X2e=n(EPe,"STRONG",{});var K9t=s(X2e);umr=r(K9t,"dpt"),K9t.forEach(t),_mr=r(EPe," \u2014 "),fQ=n(EPe,"A",{href:!0});var Z9t=s(fQ);bmr=r(Z9t,"DPTForSemanticSegmentation"),Z9t.forEach(t),vmr=r(EPe," (DPT model)"),EPe.forEach(t),Fmr=i(aw),T7=n(aw,"LI",{});var CPe=s(T7);z2e=n(CPe,"STRONG",{});var eMt=s(z2e);Tmr=r(eMt,"segformer"),eMt.forEach(t),Mmr=r(CPe," \u2014 "),mQ=n(CPe,"A",{href:!0});var oMt=s(mQ);Emr=r(oMt,"SegformerForSemanticSegmentation"),oMt.forEach(t),Cmr=r(CPe," (SegFormer model)"),CPe.forEach(t),aw.forEach(t),wmr=i(Aa),M7=n(Aa,"P",{});var wPe=s(M7);Amr=r(wPe,"The model is set in evaluation mode by default using "),W2e=n(wPe,"CODE",{});var rMt=s(W2e);ymr=r(rMt,"model.eval()"),rMt.forEach(t),Lmr=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=n(wPe,"CODE",{});var tMt=s(Q2e);xmr=r(tMt,"model.train()"),tMt.forEach(t),wPe.forEach(t),$mr=i(Aa),T(E7.$$.fragment,Aa),Aa.forEach(t),vl.forEach(t),FGe=i(f),Ud=n(f,"H2",{class:!0});var LVe=s(Ud);C7=n(LVe,"A",{id:!0,class:!0,href:!0});var aMt=s(C7);H2e=n(aMt,"SPAN",{});var nMt=s(H2e);T(zy.$$.fragment,nMt),nMt.forEach(t),aMt.forEach(t),kmr=i(LVe),U2e=n(LVe,"SPAN",{});var sMt=s(U2e);Smr=r(sMt,"AutoModelForInstanceSegmentation"),sMt.forEach(t),LVe.forEach(t),TGe=i(f),Ko=n(f,"DIV",{class:!0});var Fl=s(Ko);T(Wy.$$.fragment,Fl),Rmr=i(Fl),Jd=n(Fl,"P",{});var Coe=s(Jd);Pmr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gQ=n(Coe,"A",{href:!0});var lMt=s(gQ);Bmr=r(lMt,"from_pretrained()"),lMt.forEach(t),Imr=r(Coe," class method or the "),hQ=n(Coe,"A",{href:!0});var iMt=s(hQ);Nmr=r(iMt,"from_config()"),iMt.forEach(t),qmr=r(Coe,` class
method.`),Coe.forEach(t),jmr=i(Fl),Qy=n(Fl,"P",{});var xVe=s(Qy);Dmr=r(xVe,"This class cannot be instantiated directly using "),J2e=n(xVe,"CODE",{});var dMt=s(J2e);Gmr=r(dMt,"__init__()"),dMt.forEach(t),Omr=r(xVe," (throws an error)."),xVe.forEach(t),Vmr=i(Fl),xt=n(Fl,"DIV",{class:!0});var nw=s(xt);T(Hy.$$.fragment,nw),Xmr=i(nw),Y2e=n(nw,"P",{});var cMt=s(Y2e);zmr=r(cMt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cMt.forEach(t),Wmr=i(nw),Yd=n(nw,"P",{});var woe=s(Yd);Qmr=r(woe,`Note:
Loading a model from its configuration file does `),K2e=n(woe,"STRONG",{});var fMt=s(K2e);Hmr=r(fMt,"not"),fMt.forEach(t),Umr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(woe,"A",{href:!0});var mMt=s(pQ);Jmr=r(mMt,"from_pretrained()"),mMt.forEach(t),Ymr=r(woe," to load the model weights."),woe.forEach(t),Kmr=i(nw),T(w7.$$.fragment,nw),nw.forEach(t),Zmr=i(Fl),Fo=n(Fl,"DIV",{class:!0});var ya=s(Fo);T(Uy.$$.fragment,ya),egr=i(ya),Z2e=n(ya,"P",{});var gMt=s(Z2e);ogr=r(gMt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gMt.forEach(t),rgr=i(ya),rn=n(ya,"P",{});var sw=s(rn);tgr=r(sw,"The model class to instantiate is selected based on the "),eve=n(sw,"CODE",{});var hMt=s(eve);agr=r(hMt,"model_type"),hMt.forEach(t),ngr=r(sw,` property of the config object (either
passed as an argument or loaded from `),ove=n(sw,"CODE",{});var pMt=s(ove);sgr=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),lgr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(sw,"CODE",{});var uMt=s(rve);igr=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),dgr=r(sw,":"),sw.forEach(t),cgr=i(ya),tve=n(ya,"UL",{});var _Mt=s(tve);A7=n(_Mt,"LI",{});var APe=s(A7);ave=n(APe,"STRONG",{});var bMt=s(ave);fgr=r(bMt,"maskformer"),bMt.forEach(t),mgr=r(APe," \u2014 "),uQ=n(APe,"A",{href:!0});var vMt=s(uQ);ggr=r(vMt,"MaskFormerForInstanceSegmentation"),vMt.forEach(t),hgr=r(APe," (MaskFormer model)"),APe.forEach(t),_Mt.forEach(t),pgr=i(ya),y7=n(ya,"P",{});var yPe=s(y7);ugr=r(yPe,"The model is set in evaluation mode by default using "),nve=n(yPe,"CODE",{});var FMt=s(nve);_gr=r(FMt,"model.eval()"),FMt.forEach(t),bgr=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sve=n(yPe,"CODE",{});var TMt=s(sve);vgr=r(TMt,"model.train()"),TMt.forEach(t),yPe.forEach(t),Fgr=i(ya),T(L7.$$.fragment,ya),ya.forEach(t),Fl.forEach(t),MGe=i(f),Kd=n(f,"H2",{class:!0});var $Ve=s(Kd);x7=n($Ve,"A",{id:!0,class:!0,href:!0});var MMt=s(x7);lve=n(MMt,"SPAN",{});var EMt=s(lve);T(Jy.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),Tgr=i($Ve),ive=n($Ve,"SPAN",{});var CMt=s(ive);Mgr=r(CMt,"TFAutoModel"),CMt.forEach(t),$Ve.forEach(t),EGe=i(f),Zo=n(f,"DIV",{class:!0});var Tl=s(Zo);T(Yy.$$.fragment,Tl),Egr=i(Tl),Zd=n(Tl,"P",{});var Aoe=s(Zd);Cgr=r(Aoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=n(Aoe,"A",{href:!0});var wMt=s(_Q);wgr=r(wMt,"from_pretrained()"),wMt.forEach(t),Agr=r(Aoe," class method or the "),bQ=n(Aoe,"A",{href:!0});var AMt=s(bQ);ygr=r(AMt,"from_config()"),AMt.forEach(t),Lgr=r(Aoe,` class
method.`),Aoe.forEach(t),xgr=i(Tl),Ky=n(Tl,"P",{});var kVe=s(Ky);$gr=r(kVe,"This class cannot be instantiated directly using "),dve=n(kVe,"CODE",{});var yMt=s(dve);kgr=r(yMt,"__init__()"),yMt.forEach(t),Sgr=r(kVe," (throws an error)."),kVe.forEach(t),Rgr=i(Tl),$t=n(Tl,"DIV",{class:!0});var lw=s($t);T(Zy.$$.fragment,lw),Pgr=i(lw),cve=n(lw,"P",{});var LMt=s(cve);Bgr=r(LMt,"Instantiates one of the base model classes of the library from a configuration."),LMt.forEach(t),Igr=i(lw),ec=n(lw,"P",{});var yoe=s(ec);Ngr=r(yoe,`Note:
Loading a model from its configuration file does `),fve=n(yoe,"STRONG",{});var xMt=s(fve);qgr=r(xMt,"not"),xMt.forEach(t),jgr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(yoe,"A",{href:!0});var $Mt=s(vQ);Dgr=r($Mt,"from_pretrained()"),$Mt.forEach(t),Ggr=r(yoe," to load the model weights."),yoe.forEach(t),Ogr=i(lw),T($7.$$.fragment,lw),lw.forEach(t),Vgr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(eL.$$.fragment,Ml),Xgr=i(Ml),mve=n(Ml,"P",{});var kMt=s(mve);zgr=r(kMt,"Instantiate one of the base model classes of the library from a pretrained model."),kMt.forEach(t),Wgr=i(Ml),tn=n(Ml,"P",{});var iw=s(tn);Qgr=r(iw,"The model class to instantiate is selected based on the "),gve=n(iw,"CODE",{});var SMt=s(gve);Hgr=r(SMt,"model_type"),SMt.forEach(t),Ugr=r(iw,` property of the config object (either
passed as an argument or loaded from `),hve=n(iw,"CODE",{});var RMt=s(hve);Jgr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),Ygr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(iw,"CODE",{});var PMt=s(pve);Kgr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),Zgr=r(iw,":"),iw.forEach(t),ehr=i(Ml),q=n(Ml,"UL",{});var D=s(q);k7=n(D,"LI",{});var LPe=s(k7);uve=n(LPe,"STRONG",{});var BMt=s(uve);ohr=r(BMt,"albert"),BMt.forEach(t),rhr=r(LPe," \u2014 "),FQ=n(LPe,"A",{href:!0});var IMt=s(FQ);thr=r(IMt,"TFAlbertModel"),IMt.forEach(t),ahr=r(LPe," (ALBERT model)"),LPe.forEach(t),nhr=i(D),S7=n(D,"LI",{});var xPe=s(S7);_ve=n(xPe,"STRONG",{});var NMt=s(_ve);shr=r(NMt,"bart"),NMt.forEach(t),lhr=r(xPe," \u2014 "),TQ=n(xPe,"A",{href:!0});var qMt=s(TQ);ihr=r(qMt,"TFBartModel"),qMt.forEach(t),dhr=r(xPe," (BART model)"),xPe.forEach(t),chr=i(D),R7=n(D,"LI",{});var $Pe=s(R7);bve=n($Pe,"STRONG",{});var jMt=s(bve);fhr=r(jMt,"bert"),jMt.forEach(t),mhr=r($Pe," \u2014 "),MQ=n($Pe,"A",{href:!0});var DMt=s(MQ);ghr=r(DMt,"TFBertModel"),DMt.forEach(t),hhr=r($Pe," (BERT model)"),$Pe.forEach(t),phr=i(D),P7=n(D,"LI",{});var kPe=s(P7);vve=n(kPe,"STRONG",{});var GMt=s(vve);uhr=r(GMt,"blenderbot"),GMt.forEach(t),_hr=r(kPe," \u2014 "),EQ=n(kPe,"A",{href:!0});var OMt=s(EQ);bhr=r(OMt,"TFBlenderbotModel"),OMt.forEach(t),vhr=r(kPe," (Blenderbot model)"),kPe.forEach(t),Fhr=i(D),B7=n(D,"LI",{});var SPe=s(B7);Fve=n(SPe,"STRONG",{});var VMt=s(Fve);Thr=r(VMt,"blenderbot-small"),VMt.forEach(t),Mhr=r(SPe," \u2014 "),CQ=n(SPe,"A",{href:!0});var XMt=s(CQ);Ehr=r(XMt,"TFBlenderbotSmallModel"),XMt.forEach(t),Chr=r(SPe," (BlenderbotSmall model)"),SPe.forEach(t),whr=i(D),I7=n(D,"LI",{});var RPe=s(I7);Tve=n(RPe,"STRONG",{});var zMt=s(Tve);Ahr=r(zMt,"camembert"),zMt.forEach(t),yhr=r(RPe," \u2014 "),wQ=n(RPe,"A",{href:!0});var WMt=s(wQ);Lhr=r(WMt,"TFCamembertModel"),WMt.forEach(t),xhr=r(RPe," (CamemBERT model)"),RPe.forEach(t),$hr=i(D),N7=n(D,"LI",{});var PPe=s(N7);Mve=n(PPe,"STRONG",{});var QMt=s(Mve);khr=r(QMt,"clip"),QMt.forEach(t),Shr=r(PPe," \u2014 "),AQ=n(PPe,"A",{href:!0});var HMt=s(AQ);Rhr=r(HMt,"TFCLIPModel"),HMt.forEach(t),Phr=r(PPe," (CLIP model)"),PPe.forEach(t),Bhr=i(D),q7=n(D,"LI",{});var BPe=s(q7);Eve=n(BPe,"STRONG",{});var UMt=s(Eve);Ihr=r(UMt,"convbert"),UMt.forEach(t),Nhr=r(BPe," \u2014 "),yQ=n(BPe,"A",{href:!0});var JMt=s(yQ);qhr=r(JMt,"TFConvBertModel"),JMt.forEach(t),jhr=r(BPe," (ConvBERT model)"),BPe.forEach(t),Dhr=i(D),j7=n(D,"LI",{});var IPe=s(j7);Cve=n(IPe,"STRONG",{});var YMt=s(Cve);Ghr=r(YMt,"convnext"),YMt.forEach(t),Ohr=r(IPe," \u2014 "),LQ=n(IPe,"A",{href:!0});var KMt=s(LQ);Vhr=r(KMt,"TFConvNextModel"),KMt.forEach(t),Xhr=r(IPe," (ConvNeXT model)"),IPe.forEach(t),zhr=i(D),D7=n(D,"LI",{});var NPe=s(D7);wve=n(NPe,"STRONG",{});var ZMt=s(wve);Whr=r(ZMt,"ctrl"),ZMt.forEach(t),Qhr=r(NPe," \u2014 "),xQ=n(NPe,"A",{href:!0});var e4t=s(xQ);Hhr=r(e4t,"TFCTRLModel"),e4t.forEach(t),Uhr=r(NPe," (CTRL model)"),NPe.forEach(t),Jhr=i(D),G7=n(D,"LI",{});var qPe=s(G7);Ave=n(qPe,"STRONG",{});var o4t=s(Ave);Yhr=r(o4t,"data2vec-vision"),o4t.forEach(t),Khr=r(qPe," \u2014 "),$Q=n(qPe,"A",{href:!0});var r4t=s($Q);Zhr=r(r4t,"TFData2VecVisionModel"),r4t.forEach(t),epr=r(qPe," (Data2VecVision model)"),qPe.forEach(t),opr=i(D),O7=n(D,"LI",{});var jPe=s(O7);yve=n(jPe,"STRONG",{});var t4t=s(yve);rpr=r(t4t,"deberta"),t4t.forEach(t),tpr=r(jPe," \u2014 "),kQ=n(jPe,"A",{href:!0});var a4t=s(kQ);apr=r(a4t,"TFDebertaModel"),a4t.forEach(t),npr=r(jPe," (DeBERTa model)"),jPe.forEach(t),spr=i(D),V7=n(D,"LI",{});var DPe=s(V7);Lve=n(DPe,"STRONG",{});var n4t=s(Lve);lpr=r(n4t,"deberta-v2"),n4t.forEach(t),ipr=r(DPe," \u2014 "),SQ=n(DPe,"A",{href:!0});var s4t=s(SQ);dpr=r(s4t,"TFDebertaV2Model"),s4t.forEach(t),cpr=r(DPe," (DeBERTa-v2 model)"),DPe.forEach(t),fpr=i(D),X7=n(D,"LI",{});var GPe=s(X7);xve=n(GPe,"STRONG",{});var l4t=s(xve);mpr=r(l4t,"distilbert"),l4t.forEach(t),gpr=r(GPe," \u2014 "),RQ=n(GPe,"A",{href:!0});var i4t=s(RQ);hpr=r(i4t,"TFDistilBertModel"),i4t.forEach(t),ppr=r(GPe," (DistilBERT model)"),GPe.forEach(t),upr=i(D),z7=n(D,"LI",{});var OPe=s(z7);$ve=n(OPe,"STRONG",{});var d4t=s($ve);_pr=r(d4t,"dpr"),d4t.forEach(t),bpr=r(OPe," \u2014 "),PQ=n(OPe,"A",{href:!0});var c4t=s(PQ);vpr=r(c4t,"TFDPRQuestionEncoder"),c4t.forEach(t),Fpr=r(OPe," (DPR model)"),OPe.forEach(t),Tpr=i(D),W7=n(D,"LI",{});var VPe=s(W7);kve=n(VPe,"STRONG",{});var f4t=s(kve);Mpr=r(f4t,"electra"),f4t.forEach(t),Epr=r(VPe," \u2014 "),BQ=n(VPe,"A",{href:!0});var m4t=s(BQ);Cpr=r(m4t,"TFElectraModel"),m4t.forEach(t),wpr=r(VPe," (ELECTRA model)"),VPe.forEach(t),Apr=i(D),Q7=n(D,"LI",{});var XPe=s(Q7);Sve=n(XPe,"STRONG",{});var g4t=s(Sve);ypr=r(g4t,"flaubert"),g4t.forEach(t),Lpr=r(XPe," \u2014 "),IQ=n(XPe,"A",{href:!0});var h4t=s(IQ);xpr=r(h4t,"TFFlaubertModel"),h4t.forEach(t),$pr=r(XPe," (FlauBERT model)"),XPe.forEach(t),kpr=i(D),Vs=n(D,"LI",{});var Pk=s(Vs);Rve=n(Pk,"STRONG",{});var p4t=s(Rve);Spr=r(p4t,"funnel"),p4t.forEach(t),Rpr=r(Pk," \u2014 "),NQ=n(Pk,"A",{href:!0});var u4t=s(NQ);Ppr=r(u4t,"TFFunnelModel"),u4t.forEach(t),Bpr=r(Pk," or "),qQ=n(Pk,"A",{href:!0});var _4t=s(qQ);Ipr=r(_4t,"TFFunnelBaseModel"),_4t.forEach(t),Npr=r(Pk," (Funnel Transformer model)"),Pk.forEach(t),qpr=i(D),H7=n(D,"LI",{});var zPe=s(H7);Pve=n(zPe,"STRONG",{});var b4t=s(Pve);jpr=r(b4t,"gpt2"),b4t.forEach(t),Dpr=r(zPe," \u2014 "),jQ=n(zPe,"A",{href:!0});var v4t=s(jQ);Gpr=r(v4t,"TFGPT2Model"),v4t.forEach(t),Opr=r(zPe," (OpenAI GPT-2 model)"),zPe.forEach(t),Vpr=i(D),U7=n(D,"LI",{});var WPe=s(U7);Bve=n(WPe,"STRONG",{});var F4t=s(Bve);Xpr=r(F4t,"gptj"),F4t.forEach(t),zpr=r(WPe," \u2014 "),DQ=n(WPe,"A",{href:!0});var T4t=s(DQ);Wpr=r(T4t,"TFGPTJModel"),T4t.forEach(t),Qpr=r(WPe," (GPT-J model)"),WPe.forEach(t),Hpr=i(D),J7=n(D,"LI",{});var QPe=s(J7);Ive=n(QPe,"STRONG",{});var M4t=s(Ive);Upr=r(M4t,"hubert"),M4t.forEach(t),Jpr=r(QPe," \u2014 "),GQ=n(QPe,"A",{href:!0});var E4t=s(GQ);Ypr=r(E4t,"TFHubertModel"),E4t.forEach(t),Kpr=r(QPe," (Hubert model)"),QPe.forEach(t),Zpr=i(D),Y7=n(D,"LI",{});var HPe=s(Y7);Nve=n(HPe,"STRONG",{});var C4t=s(Nve);eur=r(C4t,"layoutlm"),C4t.forEach(t),our=r(HPe," \u2014 "),OQ=n(HPe,"A",{href:!0});var w4t=s(OQ);rur=r(w4t,"TFLayoutLMModel"),w4t.forEach(t),tur=r(HPe," (LayoutLM model)"),HPe.forEach(t),aur=i(D),K7=n(D,"LI",{});var UPe=s(K7);qve=n(UPe,"STRONG",{});var A4t=s(qve);nur=r(A4t,"led"),A4t.forEach(t),sur=r(UPe," \u2014 "),VQ=n(UPe,"A",{href:!0});var y4t=s(VQ);lur=r(y4t,"TFLEDModel"),y4t.forEach(t),iur=r(UPe," (LED model)"),UPe.forEach(t),dur=i(D),Z7=n(D,"LI",{});var JPe=s(Z7);jve=n(JPe,"STRONG",{});var L4t=s(jve);cur=r(L4t,"longformer"),L4t.forEach(t),fur=r(JPe," \u2014 "),XQ=n(JPe,"A",{href:!0});var x4t=s(XQ);mur=r(x4t,"TFLongformerModel"),x4t.forEach(t),gur=r(JPe," (Longformer model)"),JPe.forEach(t),hur=i(D),e8=n(D,"LI",{});var YPe=s(e8);Dve=n(YPe,"STRONG",{});var $4t=s(Dve);pur=r($4t,"lxmert"),$4t.forEach(t),uur=r(YPe," \u2014 "),zQ=n(YPe,"A",{href:!0});var k4t=s(zQ);_ur=r(k4t,"TFLxmertModel"),k4t.forEach(t),bur=r(YPe," (LXMERT model)"),YPe.forEach(t),vur=i(D),o8=n(D,"LI",{});var KPe=s(o8);Gve=n(KPe,"STRONG",{});var S4t=s(Gve);Fur=r(S4t,"marian"),S4t.forEach(t),Tur=r(KPe," \u2014 "),WQ=n(KPe,"A",{href:!0});var R4t=s(WQ);Mur=r(R4t,"TFMarianModel"),R4t.forEach(t),Eur=r(KPe," (Marian model)"),KPe.forEach(t),Cur=i(D),r8=n(D,"LI",{});var ZPe=s(r8);Ove=n(ZPe,"STRONG",{});var P4t=s(Ove);wur=r(P4t,"mbart"),P4t.forEach(t),Aur=r(ZPe," \u2014 "),QQ=n(ZPe,"A",{href:!0});var B4t=s(QQ);yur=r(B4t,"TFMBartModel"),B4t.forEach(t),Lur=r(ZPe," (mBART model)"),ZPe.forEach(t),xur=i(D),t8=n(D,"LI",{});var eBe=s(t8);Vve=n(eBe,"STRONG",{});var I4t=s(Vve);$ur=r(I4t,"mobilebert"),I4t.forEach(t),kur=r(eBe," \u2014 "),HQ=n(eBe,"A",{href:!0});var N4t=s(HQ);Sur=r(N4t,"TFMobileBertModel"),N4t.forEach(t),Rur=r(eBe," (MobileBERT model)"),eBe.forEach(t),Pur=i(D),a8=n(D,"LI",{});var oBe=s(a8);Xve=n(oBe,"STRONG",{});var q4t=s(Xve);Bur=r(q4t,"mpnet"),q4t.forEach(t),Iur=r(oBe," \u2014 "),UQ=n(oBe,"A",{href:!0});var j4t=s(UQ);Nur=r(j4t,"TFMPNetModel"),j4t.forEach(t),qur=r(oBe," (MPNet model)"),oBe.forEach(t),jur=i(D),n8=n(D,"LI",{});var rBe=s(n8);zve=n(rBe,"STRONG",{});var D4t=s(zve);Dur=r(D4t,"mt5"),D4t.forEach(t),Gur=r(rBe," \u2014 "),JQ=n(rBe,"A",{href:!0});var G4t=s(JQ);Our=r(G4t,"TFMT5Model"),G4t.forEach(t),Vur=r(rBe," (MT5 model)"),rBe.forEach(t),Xur=i(D),s8=n(D,"LI",{});var tBe=s(s8);Wve=n(tBe,"STRONG",{});var O4t=s(Wve);zur=r(O4t,"openai-gpt"),O4t.forEach(t),Wur=r(tBe," \u2014 "),YQ=n(tBe,"A",{href:!0});var V4t=s(YQ);Qur=r(V4t,"TFOpenAIGPTModel"),V4t.forEach(t),Hur=r(tBe," (OpenAI GPT model)"),tBe.forEach(t),Uur=i(D),l8=n(D,"LI",{});var aBe=s(l8);Qve=n(aBe,"STRONG",{});var X4t=s(Qve);Jur=r(X4t,"opt"),X4t.forEach(t),Yur=r(aBe," \u2014 "),KQ=n(aBe,"A",{href:!0});var z4t=s(KQ);Kur=r(z4t,"TFOPTModel"),z4t.forEach(t),Zur=r(aBe," (OPT model)"),aBe.forEach(t),e_r=i(D),i8=n(D,"LI",{});var nBe=s(i8);Hve=n(nBe,"STRONG",{});var W4t=s(Hve);o_r=r(W4t,"pegasus"),W4t.forEach(t),r_r=r(nBe," \u2014 "),ZQ=n(nBe,"A",{href:!0});var Q4t=s(ZQ);t_r=r(Q4t,"TFPegasusModel"),Q4t.forEach(t),a_r=r(nBe," (Pegasus model)"),nBe.forEach(t),n_r=i(D),d8=n(D,"LI",{});var sBe=s(d8);Uve=n(sBe,"STRONG",{});var H4t=s(Uve);s_r=r(H4t,"rembert"),H4t.forEach(t),l_r=r(sBe," \u2014 "),eH=n(sBe,"A",{href:!0});var U4t=s(eH);i_r=r(U4t,"TFRemBertModel"),U4t.forEach(t),d_r=r(sBe," (RemBERT model)"),sBe.forEach(t),c_r=i(D),c8=n(D,"LI",{});var lBe=s(c8);Jve=n(lBe,"STRONG",{});var J4t=s(Jve);f_r=r(J4t,"roberta"),J4t.forEach(t),m_r=r(lBe," \u2014 "),oH=n(lBe,"A",{href:!0});var Y4t=s(oH);g_r=r(Y4t,"TFRobertaModel"),Y4t.forEach(t),h_r=r(lBe," (RoBERTa model)"),lBe.forEach(t),p_r=i(D),f8=n(D,"LI",{});var iBe=s(f8);Yve=n(iBe,"STRONG",{});var K4t=s(Yve);u_r=r(K4t,"roformer"),K4t.forEach(t),__r=r(iBe," \u2014 "),rH=n(iBe,"A",{href:!0});var Z4t=s(rH);b_r=r(Z4t,"TFRoFormerModel"),Z4t.forEach(t),v_r=r(iBe," (RoFormer model)"),iBe.forEach(t),F_r=i(D),m8=n(D,"LI",{});var dBe=s(m8);Kve=n(dBe,"STRONG",{});var eEt=s(Kve);T_r=r(eEt,"speech_to_text"),eEt.forEach(t),M_r=r(dBe," \u2014 "),tH=n(dBe,"A",{href:!0});var oEt=s(tH);E_r=r(oEt,"TFSpeech2TextModel"),oEt.forEach(t),C_r=r(dBe," (Speech2Text model)"),dBe.forEach(t),w_r=i(D),g8=n(D,"LI",{});var cBe=s(g8);Zve=n(cBe,"STRONG",{});var rEt=s(Zve);A_r=r(rEt,"swin"),rEt.forEach(t),y_r=r(cBe," \u2014 "),aH=n(cBe,"A",{href:!0});var tEt=s(aH);L_r=r(tEt,"TFSwinModel"),tEt.forEach(t),x_r=r(cBe," (Swin Transformer model)"),cBe.forEach(t),$_r=i(D),h8=n(D,"LI",{});var fBe=s(h8);eFe=n(fBe,"STRONG",{});var aEt=s(eFe);k_r=r(aEt,"t5"),aEt.forEach(t),S_r=r(fBe," \u2014 "),nH=n(fBe,"A",{href:!0});var nEt=s(nH);R_r=r(nEt,"TFT5Model"),nEt.forEach(t),P_r=r(fBe," (T5 model)"),fBe.forEach(t),B_r=i(D),p8=n(D,"LI",{});var mBe=s(p8);oFe=n(mBe,"STRONG",{});var sEt=s(oFe);I_r=r(sEt,"tapas"),sEt.forEach(t),N_r=r(mBe," \u2014 "),sH=n(mBe,"A",{href:!0});var lEt=s(sH);q_r=r(lEt,"TFTapasModel"),lEt.forEach(t),j_r=r(mBe," (TAPAS model)"),mBe.forEach(t),D_r=i(D),u8=n(D,"LI",{});var gBe=s(u8);rFe=n(gBe,"STRONG",{});var iEt=s(rFe);G_r=r(iEt,"transfo-xl"),iEt.forEach(t),O_r=r(gBe," \u2014 "),lH=n(gBe,"A",{href:!0});var dEt=s(lH);V_r=r(dEt,"TFTransfoXLModel"),dEt.forEach(t),X_r=r(gBe," (Transformer-XL model)"),gBe.forEach(t),z_r=i(D),_8=n(D,"LI",{});var hBe=s(_8);tFe=n(hBe,"STRONG",{});var cEt=s(tFe);W_r=r(cEt,"vit"),cEt.forEach(t),Q_r=r(hBe," \u2014 "),iH=n(hBe,"A",{href:!0});var fEt=s(iH);H_r=r(fEt,"TFViTModel"),fEt.forEach(t),U_r=r(hBe," (ViT model)"),hBe.forEach(t),J_r=i(D),b8=n(D,"LI",{});var pBe=s(b8);aFe=n(pBe,"STRONG",{});var mEt=s(aFe);Y_r=r(mEt,"vit_mae"),mEt.forEach(t),K_r=r(pBe," \u2014 "),dH=n(pBe,"A",{href:!0});var gEt=s(dH);Z_r=r(gEt,"TFViTMAEModel"),gEt.forEach(t),e1r=r(pBe," (ViTMAE model)"),pBe.forEach(t),o1r=i(D),v8=n(D,"LI",{});var uBe=s(v8);nFe=n(uBe,"STRONG",{});var hEt=s(nFe);r1r=r(hEt,"wav2vec2"),hEt.forEach(t),t1r=r(uBe," \u2014 "),cH=n(uBe,"A",{href:!0});var pEt=s(cH);a1r=r(pEt,"TFWav2Vec2Model"),pEt.forEach(t),n1r=r(uBe," (Wav2Vec2 model)"),uBe.forEach(t),s1r=i(D),F8=n(D,"LI",{});var _Be=s(F8);sFe=n(_Be,"STRONG",{});var uEt=s(sFe);l1r=r(uEt,"xlm"),uEt.forEach(t),i1r=r(_Be," \u2014 "),fH=n(_Be,"A",{href:!0});var _Et=s(fH);d1r=r(_Et,"TFXLMModel"),_Et.forEach(t),c1r=r(_Be," (XLM model)"),_Be.forEach(t),f1r=i(D),T8=n(D,"LI",{});var bBe=s(T8);lFe=n(bBe,"STRONG",{});var bEt=s(lFe);m1r=r(bEt,"xlm-roberta"),bEt.forEach(t),g1r=r(bBe," \u2014 "),mH=n(bBe,"A",{href:!0});var vEt=s(mH);h1r=r(vEt,"TFXLMRobertaModel"),vEt.forEach(t),p1r=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),u1r=i(D),M8=n(D,"LI",{});var vBe=s(M8);iFe=n(vBe,"STRONG",{});var FEt=s(iFe);_1r=r(FEt,"xlnet"),FEt.forEach(t),b1r=r(vBe," \u2014 "),gH=n(vBe,"A",{href:!0});var TEt=s(gH);v1r=r(TEt,"TFXLNetModel"),TEt.forEach(t),F1r=r(vBe," (XLNet model)"),vBe.forEach(t),D.forEach(t),T1r=i(Ml),T(E8.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),CGe=i(f),oc=n(f,"H2",{class:!0});var SVe=s(oc);C8=n(SVe,"A",{id:!0,class:!0,href:!0});var MEt=s(C8);dFe=n(MEt,"SPAN",{});var EEt=s(dFe);T(oL.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),M1r=i(SVe),cFe=n(SVe,"SPAN",{});var CEt=s(cFe);E1r=r(CEt,"TFAutoModelForPreTraining"),CEt.forEach(t),SVe.forEach(t),wGe=i(f),er=n(f,"DIV",{class:!0});var El=s(er);T(rL.$$.fragment,El),C1r=i(El),rc=n(El,"P",{});var Loe=s(rc);w1r=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hH=n(Loe,"A",{href:!0});var wEt=s(hH);A1r=r(wEt,"from_pretrained()"),wEt.forEach(t),y1r=r(Loe," class method or the "),pH=n(Loe,"A",{href:!0});var AEt=s(pH);L1r=r(AEt,"from_config()"),AEt.forEach(t),x1r=r(Loe,` class
method.`),Loe.forEach(t),$1r=i(El),tL=n(El,"P",{});var RVe=s(tL);k1r=r(RVe,"This class cannot be instantiated directly using "),fFe=n(RVe,"CODE",{});var yEt=s(fFe);S1r=r(yEt,"__init__()"),yEt.forEach(t),R1r=r(RVe," (throws an error)."),RVe.forEach(t),P1r=i(El),kt=n(El,"DIV",{class:!0});var dw=s(kt);T(aL.$$.fragment,dw),B1r=i(dw),mFe=n(dw,"P",{});var LEt=s(mFe);I1r=r(LEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LEt.forEach(t),N1r=i(dw),tc=n(dw,"P",{});var xoe=s(tc);q1r=r(xoe,`Note:
Loading a model from its configuration file does `),gFe=n(xoe,"STRONG",{});var xEt=s(gFe);j1r=r(xEt,"not"),xEt.forEach(t),D1r=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(xoe,"A",{href:!0});var $Et=s(uH);G1r=r($Et,"from_pretrained()"),$Et.forEach(t),O1r=r(xoe," to load the model weights."),xoe.forEach(t),V1r=i(dw),T(w8.$$.fragment,dw),dw.forEach(t),X1r=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(nL.$$.fragment,Cl),z1r=i(Cl),hFe=n(Cl,"P",{});var kEt=s(hFe);W1r=r(kEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kEt.forEach(t),Q1r=i(Cl),an=n(Cl,"P",{});var cw=s(an);H1r=r(cw,"The model class to instantiate is selected based on the "),pFe=n(cw,"CODE",{});var SEt=s(pFe);U1r=r(SEt,"model_type"),SEt.forEach(t),J1r=r(cw,` property of the config object (either
passed as an argument or loaded from `),uFe=n(cw,"CODE",{});var REt=s(uFe);Y1r=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),K1r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(cw,"CODE",{});var PEt=s(_Fe);Z1r=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),ebr=r(cw,":"),cw.forEach(t),obr=i(Cl),se=n(Cl,"UL",{});var le=s(se);A8=n(le,"LI",{});var FBe=s(A8);bFe=n(FBe,"STRONG",{});var BEt=s(bFe);rbr=r(BEt,"albert"),BEt.forEach(t),tbr=r(FBe," \u2014 "),_H=n(FBe,"A",{href:!0});var IEt=s(_H);abr=r(IEt,"TFAlbertForPreTraining"),IEt.forEach(t),nbr=r(FBe," (ALBERT model)"),FBe.forEach(t),sbr=i(le),y8=n(le,"LI",{});var TBe=s(y8);vFe=n(TBe,"STRONG",{});var NEt=s(vFe);lbr=r(NEt,"bart"),NEt.forEach(t),ibr=r(TBe," \u2014 "),bH=n(TBe,"A",{href:!0});var qEt=s(bH);dbr=r(qEt,"TFBartForConditionalGeneration"),qEt.forEach(t),cbr=r(TBe," (BART model)"),TBe.forEach(t),fbr=i(le),L8=n(le,"LI",{});var MBe=s(L8);FFe=n(MBe,"STRONG",{});var jEt=s(FFe);mbr=r(jEt,"bert"),jEt.forEach(t),gbr=r(MBe," \u2014 "),vH=n(MBe,"A",{href:!0});var DEt=s(vH);hbr=r(DEt,"TFBertForPreTraining"),DEt.forEach(t),pbr=r(MBe," (BERT model)"),MBe.forEach(t),ubr=i(le),x8=n(le,"LI",{});var EBe=s(x8);TFe=n(EBe,"STRONG",{});var GEt=s(TFe);_br=r(GEt,"camembert"),GEt.forEach(t),bbr=r(EBe," \u2014 "),FH=n(EBe,"A",{href:!0});var OEt=s(FH);vbr=r(OEt,"TFCamembertForMaskedLM"),OEt.forEach(t),Fbr=r(EBe," (CamemBERT model)"),EBe.forEach(t),Tbr=i(le),$8=n(le,"LI",{});var CBe=s($8);MFe=n(CBe,"STRONG",{});var VEt=s(MFe);Mbr=r(VEt,"ctrl"),VEt.forEach(t),Ebr=r(CBe," \u2014 "),TH=n(CBe,"A",{href:!0});var XEt=s(TH);Cbr=r(XEt,"TFCTRLLMHeadModel"),XEt.forEach(t),wbr=r(CBe," (CTRL model)"),CBe.forEach(t),Abr=i(le),k8=n(le,"LI",{});var wBe=s(k8);EFe=n(wBe,"STRONG",{});var zEt=s(EFe);ybr=r(zEt,"distilbert"),zEt.forEach(t),Lbr=r(wBe," \u2014 "),MH=n(wBe,"A",{href:!0});var WEt=s(MH);xbr=r(WEt,"TFDistilBertForMaskedLM"),WEt.forEach(t),$br=r(wBe," (DistilBERT model)"),wBe.forEach(t),kbr=i(le),S8=n(le,"LI",{});var ABe=s(S8);CFe=n(ABe,"STRONG",{});var QEt=s(CFe);Sbr=r(QEt,"electra"),QEt.forEach(t),Rbr=r(ABe," \u2014 "),EH=n(ABe,"A",{href:!0});var HEt=s(EH);Pbr=r(HEt,"TFElectraForPreTraining"),HEt.forEach(t),Bbr=r(ABe," (ELECTRA model)"),ABe.forEach(t),Ibr=i(le),R8=n(le,"LI",{});var yBe=s(R8);wFe=n(yBe,"STRONG",{});var UEt=s(wFe);Nbr=r(UEt,"flaubert"),UEt.forEach(t),qbr=r(yBe," \u2014 "),CH=n(yBe,"A",{href:!0});var JEt=s(CH);jbr=r(JEt,"TFFlaubertWithLMHeadModel"),JEt.forEach(t),Dbr=r(yBe," (FlauBERT model)"),yBe.forEach(t),Gbr=i(le),P8=n(le,"LI",{});var LBe=s(P8);AFe=n(LBe,"STRONG",{});var YEt=s(AFe);Obr=r(YEt,"funnel"),YEt.forEach(t),Vbr=r(LBe," \u2014 "),wH=n(LBe,"A",{href:!0});var KEt=s(wH);Xbr=r(KEt,"TFFunnelForPreTraining"),KEt.forEach(t),zbr=r(LBe," (Funnel Transformer model)"),LBe.forEach(t),Wbr=i(le),B8=n(le,"LI",{});var xBe=s(B8);yFe=n(xBe,"STRONG",{});var ZEt=s(yFe);Qbr=r(ZEt,"gpt2"),ZEt.forEach(t),Hbr=r(xBe," \u2014 "),AH=n(xBe,"A",{href:!0});var eCt=s(AH);Ubr=r(eCt,"TFGPT2LMHeadModel"),eCt.forEach(t),Jbr=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),Ybr=i(le),I8=n(le,"LI",{});var $Be=s(I8);LFe=n($Be,"STRONG",{});var oCt=s(LFe);Kbr=r(oCt,"layoutlm"),oCt.forEach(t),Zbr=r($Be," \u2014 "),yH=n($Be,"A",{href:!0});var rCt=s(yH);e2r=r(rCt,"TFLayoutLMForMaskedLM"),rCt.forEach(t),o2r=r($Be," (LayoutLM model)"),$Be.forEach(t),r2r=i(le),N8=n(le,"LI",{});var kBe=s(N8);xFe=n(kBe,"STRONG",{});var tCt=s(xFe);t2r=r(tCt,"lxmert"),tCt.forEach(t),a2r=r(kBe," \u2014 "),LH=n(kBe,"A",{href:!0});var aCt=s(LH);n2r=r(aCt,"TFLxmertForPreTraining"),aCt.forEach(t),s2r=r(kBe," (LXMERT model)"),kBe.forEach(t),l2r=i(le),q8=n(le,"LI",{});var SBe=s(q8);$Fe=n(SBe,"STRONG",{});var nCt=s($Fe);i2r=r(nCt,"mobilebert"),nCt.forEach(t),d2r=r(SBe," \u2014 "),xH=n(SBe,"A",{href:!0});var sCt=s(xH);c2r=r(sCt,"TFMobileBertForPreTraining"),sCt.forEach(t),f2r=r(SBe," (MobileBERT model)"),SBe.forEach(t),m2r=i(le),j8=n(le,"LI",{});var RBe=s(j8);kFe=n(RBe,"STRONG",{});var lCt=s(kFe);g2r=r(lCt,"mpnet"),lCt.forEach(t),h2r=r(RBe," \u2014 "),$H=n(RBe,"A",{href:!0});var iCt=s($H);p2r=r(iCt,"TFMPNetForMaskedLM"),iCt.forEach(t),u2r=r(RBe," (MPNet model)"),RBe.forEach(t),_2r=i(le),D8=n(le,"LI",{});var PBe=s(D8);SFe=n(PBe,"STRONG",{});var dCt=s(SFe);b2r=r(dCt,"openai-gpt"),dCt.forEach(t),v2r=r(PBe," \u2014 "),kH=n(PBe,"A",{href:!0});var cCt=s(kH);F2r=r(cCt,"TFOpenAIGPTLMHeadModel"),cCt.forEach(t),T2r=r(PBe," (OpenAI GPT model)"),PBe.forEach(t),M2r=i(le),G8=n(le,"LI",{});var BBe=s(G8);RFe=n(BBe,"STRONG",{});var fCt=s(RFe);E2r=r(fCt,"roberta"),fCt.forEach(t),C2r=r(BBe," \u2014 "),SH=n(BBe,"A",{href:!0});var mCt=s(SH);w2r=r(mCt,"TFRobertaForMaskedLM"),mCt.forEach(t),A2r=r(BBe," (RoBERTa model)"),BBe.forEach(t),y2r=i(le),O8=n(le,"LI",{});var IBe=s(O8);PFe=n(IBe,"STRONG",{});var gCt=s(PFe);L2r=r(gCt,"t5"),gCt.forEach(t),x2r=r(IBe," \u2014 "),RH=n(IBe,"A",{href:!0});var hCt=s(RH);$2r=r(hCt,"TFT5ForConditionalGeneration"),hCt.forEach(t),k2r=r(IBe," (T5 model)"),IBe.forEach(t),S2r=i(le),V8=n(le,"LI",{});var NBe=s(V8);BFe=n(NBe,"STRONG",{});var pCt=s(BFe);R2r=r(pCt,"tapas"),pCt.forEach(t),P2r=r(NBe," \u2014 "),PH=n(NBe,"A",{href:!0});var uCt=s(PH);B2r=r(uCt,"TFTapasForMaskedLM"),uCt.forEach(t),I2r=r(NBe," (TAPAS model)"),NBe.forEach(t),N2r=i(le),X8=n(le,"LI",{});var qBe=s(X8);IFe=n(qBe,"STRONG",{});var _Ct=s(IFe);q2r=r(_Ct,"transfo-xl"),_Ct.forEach(t),j2r=r(qBe," \u2014 "),BH=n(qBe,"A",{href:!0});var bCt=s(BH);D2r=r(bCt,"TFTransfoXLLMHeadModel"),bCt.forEach(t),G2r=r(qBe," (Transformer-XL model)"),qBe.forEach(t),O2r=i(le),z8=n(le,"LI",{});var jBe=s(z8);NFe=n(jBe,"STRONG",{});var vCt=s(NFe);V2r=r(vCt,"vit_mae"),vCt.forEach(t),X2r=r(jBe," \u2014 "),IH=n(jBe,"A",{href:!0});var FCt=s(IH);z2r=r(FCt,"TFViTMAEForPreTraining"),FCt.forEach(t),W2r=r(jBe," (ViTMAE model)"),jBe.forEach(t),Q2r=i(le),W8=n(le,"LI",{});var DBe=s(W8);qFe=n(DBe,"STRONG",{});var TCt=s(qFe);H2r=r(TCt,"xlm"),TCt.forEach(t),U2r=r(DBe," \u2014 "),NH=n(DBe,"A",{href:!0});var MCt=s(NH);J2r=r(MCt,"TFXLMWithLMHeadModel"),MCt.forEach(t),Y2r=r(DBe," (XLM model)"),DBe.forEach(t),K2r=i(le),Q8=n(le,"LI",{});var GBe=s(Q8);jFe=n(GBe,"STRONG",{});var ECt=s(jFe);Z2r=r(ECt,"xlm-roberta"),ECt.forEach(t),evr=r(GBe," \u2014 "),qH=n(GBe,"A",{href:!0});var CCt=s(qH);ovr=r(CCt,"TFXLMRobertaForMaskedLM"),CCt.forEach(t),rvr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),tvr=i(le),H8=n(le,"LI",{});var OBe=s(H8);DFe=n(OBe,"STRONG",{});var wCt=s(DFe);avr=r(wCt,"xlnet"),wCt.forEach(t),nvr=r(OBe," \u2014 "),jH=n(OBe,"A",{href:!0});var ACt=s(jH);svr=r(ACt,"TFXLNetLMHeadModel"),ACt.forEach(t),lvr=r(OBe," (XLNet model)"),OBe.forEach(t),le.forEach(t),ivr=i(Cl),T(U8.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),AGe=i(f),ac=n(f,"H2",{class:!0});var PVe=s(ac);J8=n(PVe,"A",{id:!0,class:!0,href:!0});var yCt=s(J8);GFe=n(yCt,"SPAN",{});var LCt=s(GFe);T(sL.$$.fragment,LCt),LCt.forEach(t),yCt.forEach(t),dvr=i(PVe),OFe=n(PVe,"SPAN",{});var xCt=s(OFe);cvr=r(xCt,"TFAutoModelForCausalLM"),xCt.forEach(t),PVe.forEach(t),yGe=i(f),or=n(f,"DIV",{class:!0});var wl=s(or);T(lL.$$.fragment,wl),fvr=i(wl),nc=n(wl,"P",{});var $oe=s(nc);mvr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DH=n($oe,"A",{href:!0});var $Ct=s(DH);gvr=r($Ct,"from_pretrained()"),$Ct.forEach(t),hvr=r($oe," class method or the "),GH=n($oe,"A",{href:!0});var kCt=s(GH);pvr=r(kCt,"from_config()"),kCt.forEach(t),uvr=r($oe,` class
method.`),$oe.forEach(t),_vr=i(wl),iL=n(wl,"P",{});var BVe=s(iL);bvr=r(BVe,"This class cannot be instantiated directly using "),VFe=n(BVe,"CODE",{});var SCt=s(VFe);vvr=r(SCt,"__init__()"),SCt.forEach(t),Fvr=r(BVe," (throws an error)."),BVe.forEach(t),Tvr=i(wl),St=n(wl,"DIV",{class:!0});var fw=s(St);T(dL.$$.fragment,fw),Mvr=i(fw),XFe=n(fw,"P",{});var RCt=s(XFe);Evr=r(RCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RCt.forEach(t),Cvr=i(fw),sc=n(fw,"P",{});var koe=s(sc);wvr=r(koe,`Note:
Loading a model from its configuration file does `),zFe=n(koe,"STRONG",{});var PCt=s(zFe);Avr=r(PCt,"not"),PCt.forEach(t),yvr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(koe,"A",{href:!0});var BCt=s(OH);Lvr=r(BCt,"from_pretrained()"),BCt.forEach(t),xvr=r(koe," to load the model weights."),koe.forEach(t),$vr=i(fw),T(Y8.$$.fragment,fw),fw.forEach(t),kvr=i(wl),xr=n(wl,"DIV",{class:!0});var Al=s(xr);T(cL.$$.fragment,Al),Svr=i(Al),WFe=n(Al,"P",{});var ICt=s(WFe);Rvr=r(ICt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ICt.forEach(t),Pvr=i(Al),nn=n(Al,"P",{});var mw=s(nn);Bvr=r(mw,"The model class to instantiate is selected based on the "),QFe=n(mw,"CODE",{});var NCt=s(QFe);Ivr=r(NCt,"model_type"),NCt.forEach(t),Nvr=r(mw,` property of the config object (either
passed as an argument or loaded from `),HFe=n(mw,"CODE",{});var qCt=s(HFe);qvr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),jvr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(mw,"CODE",{});var jCt=s(UFe);Dvr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),Gvr=r(mw,":"),mw.forEach(t),Ovr=i(Al),Me=n(Al,"UL",{});var Ce=s(Me);K8=n(Ce,"LI",{});var VBe=s(K8);JFe=n(VBe,"STRONG",{});var DCt=s(JFe);Vvr=r(DCt,"bert"),DCt.forEach(t),Xvr=r(VBe," \u2014 "),VH=n(VBe,"A",{href:!0});var GCt=s(VH);zvr=r(GCt,"TFBertLMHeadModel"),GCt.forEach(t),Wvr=r(VBe," (BERT model)"),VBe.forEach(t),Qvr=i(Ce),Z8=n(Ce,"LI",{});var XBe=s(Z8);YFe=n(XBe,"STRONG",{});var OCt=s(YFe);Hvr=r(OCt,"camembert"),OCt.forEach(t),Uvr=r(XBe," \u2014 "),XH=n(XBe,"A",{href:!0});var VCt=s(XH);Jvr=r(VCt,"TFCamembertForCausalLM"),VCt.forEach(t),Yvr=r(XBe," (CamemBERT model)"),XBe.forEach(t),Kvr=i(Ce),e9=n(Ce,"LI",{});var zBe=s(e9);KFe=n(zBe,"STRONG",{});var XCt=s(KFe);Zvr=r(XCt,"ctrl"),XCt.forEach(t),eFr=r(zBe," \u2014 "),zH=n(zBe,"A",{href:!0});var zCt=s(zH);oFr=r(zCt,"TFCTRLLMHeadModel"),zCt.forEach(t),rFr=r(zBe," (CTRL model)"),zBe.forEach(t),tFr=i(Ce),o9=n(Ce,"LI",{});var WBe=s(o9);ZFe=n(WBe,"STRONG",{});var WCt=s(ZFe);aFr=r(WCt,"gpt2"),WCt.forEach(t),nFr=r(WBe," \u2014 "),WH=n(WBe,"A",{href:!0});var QCt=s(WH);sFr=r(QCt,"TFGPT2LMHeadModel"),QCt.forEach(t),lFr=r(WBe," (OpenAI GPT-2 model)"),WBe.forEach(t),iFr=i(Ce),r9=n(Ce,"LI",{});var QBe=s(r9);e6e=n(QBe,"STRONG",{});var HCt=s(e6e);dFr=r(HCt,"gptj"),HCt.forEach(t),cFr=r(QBe," \u2014 "),QH=n(QBe,"A",{href:!0});var UCt=s(QH);fFr=r(UCt,"TFGPTJForCausalLM"),UCt.forEach(t),mFr=r(QBe," (GPT-J model)"),QBe.forEach(t),gFr=i(Ce),t9=n(Ce,"LI",{});var HBe=s(t9);o6e=n(HBe,"STRONG",{});var JCt=s(o6e);hFr=r(JCt,"openai-gpt"),JCt.forEach(t),pFr=r(HBe," \u2014 "),HH=n(HBe,"A",{href:!0});var YCt=s(HH);uFr=r(YCt,"TFOpenAIGPTLMHeadModel"),YCt.forEach(t),_Fr=r(HBe," (OpenAI GPT model)"),HBe.forEach(t),bFr=i(Ce),a9=n(Ce,"LI",{});var UBe=s(a9);r6e=n(UBe,"STRONG",{});var KCt=s(r6e);vFr=r(KCt,"opt"),KCt.forEach(t),FFr=r(UBe," \u2014 "),UH=n(UBe,"A",{href:!0});var ZCt=s(UH);TFr=r(ZCt,"TFOPTForCausalLM"),ZCt.forEach(t),MFr=r(UBe," (OPT model)"),UBe.forEach(t),EFr=i(Ce),n9=n(Ce,"LI",{});var JBe=s(n9);t6e=n(JBe,"STRONG",{});var e5t=s(t6e);CFr=r(e5t,"rembert"),e5t.forEach(t),wFr=r(JBe," \u2014 "),JH=n(JBe,"A",{href:!0});var o5t=s(JH);AFr=r(o5t,"TFRemBertForCausalLM"),o5t.forEach(t),yFr=r(JBe," (RemBERT model)"),JBe.forEach(t),LFr=i(Ce),s9=n(Ce,"LI",{});var YBe=s(s9);a6e=n(YBe,"STRONG",{});var r5t=s(a6e);xFr=r(r5t,"roberta"),r5t.forEach(t),$Fr=r(YBe," \u2014 "),YH=n(YBe,"A",{href:!0});var t5t=s(YH);kFr=r(t5t,"TFRobertaForCausalLM"),t5t.forEach(t),SFr=r(YBe," (RoBERTa model)"),YBe.forEach(t),RFr=i(Ce),l9=n(Ce,"LI",{});var KBe=s(l9);n6e=n(KBe,"STRONG",{});var a5t=s(n6e);PFr=r(a5t,"roformer"),a5t.forEach(t),BFr=r(KBe," \u2014 "),KH=n(KBe,"A",{href:!0});var n5t=s(KH);IFr=r(n5t,"TFRoFormerForCausalLM"),n5t.forEach(t),NFr=r(KBe," (RoFormer model)"),KBe.forEach(t),qFr=i(Ce),i9=n(Ce,"LI",{});var ZBe=s(i9);s6e=n(ZBe,"STRONG",{});var s5t=s(s6e);jFr=r(s5t,"transfo-xl"),s5t.forEach(t),DFr=r(ZBe," \u2014 "),ZH=n(ZBe,"A",{href:!0});var l5t=s(ZH);GFr=r(l5t,"TFTransfoXLLMHeadModel"),l5t.forEach(t),OFr=r(ZBe," (Transformer-XL model)"),ZBe.forEach(t),VFr=i(Ce),d9=n(Ce,"LI",{});var eIe=s(d9);l6e=n(eIe,"STRONG",{});var i5t=s(l6e);XFr=r(i5t,"xlm"),i5t.forEach(t),zFr=r(eIe," \u2014 "),eU=n(eIe,"A",{href:!0});var d5t=s(eU);WFr=r(d5t,"TFXLMWithLMHeadModel"),d5t.forEach(t),QFr=r(eIe," (XLM model)"),eIe.forEach(t),HFr=i(Ce),c9=n(Ce,"LI",{});var oIe=s(c9);i6e=n(oIe,"STRONG",{});var c5t=s(i6e);UFr=r(c5t,"xlnet"),c5t.forEach(t),JFr=r(oIe," \u2014 "),oU=n(oIe,"A",{href:!0});var f5t=s(oU);YFr=r(f5t,"TFXLNetLMHeadModel"),f5t.forEach(t),KFr=r(oIe," (XLNet model)"),oIe.forEach(t),Ce.forEach(t),ZFr=i(Al),T(f9.$$.fragment,Al),Al.forEach(t),wl.forEach(t),LGe=i(f),lc=n(f,"H2",{class:!0});var IVe=s(lc);m9=n(IVe,"A",{id:!0,class:!0,href:!0});var m5t=s(m9);d6e=n(m5t,"SPAN",{});var g5t=s(d6e);T(fL.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),e6r=i(IVe),c6e=n(IVe,"SPAN",{});var h5t=s(c6e);o6r=r(h5t,"TFAutoModelForImageClassification"),h5t.forEach(t),IVe.forEach(t),xGe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(mL.$$.fragment,yl),r6r=i(yl),ic=n(yl,"P",{});var Soe=s(ic);t6r=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rU=n(Soe,"A",{href:!0});var p5t=s(rU);a6r=r(p5t,"from_pretrained()"),p5t.forEach(t),n6r=r(Soe," class method or the "),tU=n(Soe,"A",{href:!0});var u5t=s(tU);s6r=r(u5t,"from_config()"),u5t.forEach(t),l6r=r(Soe,` class
method.`),Soe.forEach(t),i6r=i(yl),gL=n(yl,"P",{});var NVe=s(gL);d6r=r(NVe,"This class cannot be instantiated directly using "),f6e=n(NVe,"CODE",{});var _5t=s(f6e);c6r=r(_5t,"__init__()"),_5t.forEach(t),f6r=r(NVe," (throws an error)."),NVe.forEach(t),m6r=i(yl),Rt=n(yl,"DIV",{class:!0});var gw=s(Rt);T(hL.$$.fragment,gw),g6r=i(gw),m6e=n(gw,"P",{});var b5t=s(m6e);h6r=r(b5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b5t.forEach(t),p6r=i(gw),dc=n(gw,"P",{});var Roe=s(dc);u6r=r(Roe,`Note:
Loading a model from its configuration file does `),g6e=n(Roe,"STRONG",{});var v5t=s(g6e);_6r=r(v5t,"not"),v5t.forEach(t),b6r=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Roe,"A",{href:!0});var F5t=s(aU);v6r=r(F5t,"from_pretrained()"),F5t.forEach(t),F6r=r(Roe," to load the model weights."),Roe.forEach(t),T6r=i(gw),T(g9.$$.fragment,gw),gw.forEach(t),M6r=i(yl),$r=n(yl,"DIV",{class:!0});var Ll=s($r);T(pL.$$.fragment,Ll),E6r=i(Ll),h6e=n(Ll,"P",{});var T5t=s(h6e);C6r=r(T5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),T5t.forEach(t),w6r=i(Ll),sn=n(Ll,"P",{});var hw=s(sn);A6r=r(hw,"The model class to instantiate is selected based on the "),p6e=n(hw,"CODE",{});var M5t=s(p6e);y6r=r(M5t,"model_type"),M5t.forEach(t),L6r=r(hw,` property of the config object (either
passed as an argument or loaded from `),u6e=n(hw,"CODE",{});var E5t=s(u6e);x6r=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),$6r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(hw,"CODE",{});var C5t=s(_6e);k6r=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),S6r=r(hw,":"),hw.forEach(t),R6r=i(Ll),ln=n(Ll,"UL",{});var pw=s(ln);h9=n(pw,"LI",{});var rIe=s(h9);b6e=n(rIe,"STRONG",{});var w5t=s(b6e);P6r=r(w5t,"convnext"),w5t.forEach(t),B6r=r(rIe," \u2014 "),nU=n(rIe,"A",{href:!0});var A5t=s(nU);I6r=r(A5t,"TFConvNextForImageClassification"),A5t.forEach(t),N6r=r(rIe," (ConvNeXT model)"),rIe.forEach(t),q6r=i(pw),p9=n(pw,"LI",{});var tIe=s(p9);v6e=n(tIe,"STRONG",{});var y5t=s(v6e);j6r=r(y5t,"data2vec-vision"),y5t.forEach(t),D6r=r(tIe," \u2014 "),sU=n(tIe,"A",{href:!0});var L5t=s(sU);G6r=r(L5t,"TFData2VecVisionForImageClassification"),L5t.forEach(t),O6r=r(tIe," (Data2VecVision model)"),tIe.forEach(t),V6r=i(pw),u9=n(pw,"LI",{});var aIe=s(u9);F6e=n(aIe,"STRONG",{});var x5t=s(F6e);X6r=r(x5t,"swin"),x5t.forEach(t),z6r=r(aIe," \u2014 "),lU=n(aIe,"A",{href:!0});var $5t=s(lU);W6r=r($5t,"TFSwinForImageClassification"),$5t.forEach(t),Q6r=r(aIe," (Swin Transformer model)"),aIe.forEach(t),H6r=i(pw),_9=n(pw,"LI",{});var nIe=s(_9);T6e=n(nIe,"STRONG",{});var k5t=s(T6e);U6r=r(k5t,"vit"),k5t.forEach(t),J6r=r(nIe," \u2014 "),iU=n(nIe,"A",{href:!0});var S5t=s(iU);Y6r=r(S5t,"TFViTForImageClassification"),S5t.forEach(t),K6r=r(nIe," (ViT model)"),nIe.forEach(t),pw.forEach(t),Z6r=i(Ll),T(b9.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),$Ge=i(f),cc=n(f,"H2",{class:!0});var qVe=s(cc);v9=n(qVe,"A",{id:!0,class:!0,href:!0});var R5t=s(v9);M6e=n(R5t,"SPAN",{});var P5t=s(M6e);T(uL.$$.fragment,P5t),P5t.forEach(t),R5t.forEach(t),eTr=i(qVe),E6e=n(qVe,"SPAN",{});var B5t=s(E6e);oTr=r(B5t,"TFAutoModelForMaskedLM"),B5t.forEach(t),qVe.forEach(t),kGe=i(f),tr=n(f,"DIV",{class:!0});var xl=s(tr);T(_L.$$.fragment,xl),rTr=i(xl),fc=n(xl,"P",{});var Poe=s(fc);tTr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dU=n(Poe,"A",{href:!0});var I5t=s(dU);aTr=r(I5t,"from_pretrained()"),I5t.forEach(t),nTr=r(Poe," class method or the "),cU=n(Poe,"A",{href:!0});var N5t=s(cU);sTr=r(N5t,"from_config()"),N5t.forEach(t),lTr=r(Poe,` class
method.`),Poe.forEach(t),iTr=i(xl),bL=n(xl,"P",{});var jVe=s(bL);dTr=r(jVe,"This class cannot be instantiated directly using "),C6e=n(jVe,"CODE",{});var q5t=s(C6e);cTr=r(q5t,"__init__()"),q5t.forEach(t),fTr=r(jVe," (throws an error)."),jVe.forEach(t),mTr=i(xl),Pt=n(xl,"DIV",{class:!0});var uw=s(Pt);T(vL.$$.fragment,uw),gTr=i(uw),w6e=n(uw,"P",{});var j5t=s(w6e);hTr=r(j5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),j5t.forEach(t),pTr=i(uw),mc=n(uw,"P",{});var Boe=s(mc);uTr=r(Boe,`Note:
Loading a model from its configuration file does `),A6e=n(Boe,"STRONG",{});var D5t=s(A6e);_Tr=r(D5t,"not"),D5t.forEach(t),bTr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(Boe,"A",{href:!0});var G5t=s(fU);vTr=r(G5t,"from_pretrained()"),G5t.forEach(t),FTr=r(Boe," to load the model weights."),Boe.forEach(t),TTr=i(uw),T(F9.$$.fragment,uw),uw.forEach(t),MTr=i(xl),kr=n(xl,"DIV",{class:!0});var $l=s(kr);T(FL.$$.fragment,$l),ETr=i($l),y6e=n($l,"P",{});var O5t=s(y6e);CTr=r(O5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O5t.forEach(t),wTr=i($l),dn=n($l,"P",{});var _w=s(dn);ATr=r(_w,"The model class to instantiate is selected based on the "),L6e=n(_w,"CODE",{});var V5t=s(L6e);yTr=r(V5t,"model_type"),V5t.forEach(t),LTr=r(_w,` property of the config object (either
passed as an argument or loaded from `),x6e=n(_w,"CODE",{});var X5t=s(x6e);xTr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),$Tr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(_w,"CODE",{});var z5t=s($6e);kTr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),STr=r(_w,":"),_w.forEach(t),RTr=i($l),ie=n($l,"UL",{});var fe=s(ie);T9=n(fe,"LI",{});var sIe=s(T9);k6e=n(sIe,"STRONG",{});var W5t=s(k6e);PTr=r(W5t,"albert"),W5t.forEach(t),BTr=r(sIe," \u2014 "),mU=n(sIe,"A",{href:!0});var Q5t=s(mU);ITr=r(Q5t,"TFAlbertForMaskedLM"),Q5t.forEach(t),NTr=r(sIe," (ALBERT model)"),sIe.forEach(t),qTr=i(fe),M9=n(fe,"LI",{});var lIe=s(M9);S6e=n(lIe,"STRONG",{});var H5t=s(S6e);jTr=r(H5t,"bert"),H5t.forEach(t),DTr=r(lIe," \u2014 "),gU=n(lIe,"A",{href:!0});var U5t=s(gU);GTr=r(U5t,"TFBertForMaskedLM"),U5t.forEach(t),OTr=r(lIe," (BERT model)"),lIe.forEach(t),VTr=i(fe),E9=n(fe,"LI",{});var iIe=s(E9);R6e=n(iIe,"STRONG",{});var J5t=s(R6e);XTr=r(J5t,"camembert"),J5t.forEach(t),zTr=r(iIe," \u2014 "),hU=n(iIe,"A",{href:!0});var Y5t=s(hU);WTr=r(Y5t,"TFCamembertForMaskedLM"),Y5t.forEach(t),QTr=r(iIe," (CamemBERT model)"),iIe.forEach(t),HTr=i(fe),C9=n(fe,"LI",{});var dIe=s(C9);P6e=n(dIe,"STRONG",{});var K5t=s(P6e);UTr=r(K5t,"convbert"),K5t.forEach(t),JTr=r(dIe," \u2014 "),pU=n(dIe,"A",{href:!0});var Z5t=s(pU);YTr=r(Z5t,"TFConvBertForMaskedLM"),Z5t.forEach(t),KTr=r(dIe," (ConvBERT model)"),dIe.forEach(t),ZTr=i(fe),w9=n(fe,"LI",{});var cIe=s(w9);B6e=n(cIe,"STRONG",{});var e3t=s(B6e);e7r=r(e3t,"deberta"),e3t.forEach(t),o7r=r(cIe," \u2014 "),uU=n(cIe,"A",{href:!0});var o3t=s(uU);r7r=r(o3t,"TFDebertaForMaskedLM"),o3t.forEach(t),t7r=r(cIe," (DeBERTa model)"),cIe.forEach(t),a7r=i(fe),A9=n(fe,"LI",{});var fIe=s(A9);I6e=n(fIe,"STRONG",{});var r3t=s(I6e);n7r=r(r3t,"deberta-v2"),r3t.forEach(t),s7r=r(fIe," \u2014 "),_U=n(fIe,"A",{href:!0});var t3t=s(_U);l7r=r(t3t,"TFDebertaV2ForMaskedLM"),t3t.forEach(t),i7r=r(fIe," (DeBERTa-v2 model)"),fIe.forEach(t),d7r=i(fe),y9=n(fe,"LI",{});var mIe=s(y9);N6e=n(mIe,"STRONG",{});var a3t=s(N6e);c7r=r(a3t,"distilbert"),a3t.forEach(t),f7r=r(mIe," \u2014 "),bU=n(mIe,"A",{href:!0});var n3t=s(bU);m7r=r(n3t,"TFDistilBertForMaskedLM"),n3t.forEach(t),g7r=r(mIe," (DistilBERT model)"),mIe.forEach(t),h7r=i(fe),L9=n(fe,"LI",{});var gIe=s(L9);q6e=n(gIe,"STRONG",{});var s3t=s(q6e);p7r=r(s3t,"electra"),s3t.forEach(t),u7r=r(gIe," \u2014 "),vU=n(gIe,"A",{href:!0});var l3t=s(vU);_7r=r(l3t,"TFElectraForMaskedLM"),l3t.forEach(t),b7r=r(gIe," (ELECTRA model)"),gIe.forEach(t),v7r=i(fe),x9=n(fe,"LI",{});var hIe=s(x9);j6e=n(hIe,"STRONG",{});var i3t=s(j6e);F7r=r(i3t,"flaubert"),i3t.forEach(t),T7r=r(hIe," \u2014 "),FU=n(hIe,"A",{href:!0});var d3t=s(FU);M7r=r(d3t,"TFFlaubertWithLMHeadModel"),d3t.forEach(t),E7r=r(hIe," (FlauBERT model)"),hIe.forEach(t),C7r=i(fe),$9=n(fe,"LI",{});var pIe=s($9);D6e=n(pIe,"STRONG",{});var c3t=s(D6e);w7r=r(c3t,"funnel"),c3t.forEach(t),A7r=r(pIe," \u2014 "),TU=n(pIe,"A",{href:!0});var f3t=s(TU);y7r=r(f3t,"TFFunnelForMaskedLM"),f3t.forEach(t),L7r=r(pIe," (Funnel Transformer model)"),pIe.forEach(t),x7r=i(fe),k9=n(fe,"LI",{});var uIe=s(k9);G6e=n(uIe,"STRONG",{});var m3t=s(G6e);$7r=r(m3t,"layoutlm"),m3t.forEach(t),k7r=r(uIe," \u2014 "),MU=n(uIe,"A",{href:!0});var g3t=s(MU);S7r=r(g3t,"TFLayoutLMForMaskedLM"),g3t.forEach(t),R7r=r(uIe," (LayoutLM model)"),uIe.forEach(t),P7r=i(fe),S9=n(fe,"LI",{});var _Ie=s(S9);O6e=n(_Ie,"STRONG",{});var h3t=s(O6e);B7r=r(h3t,"longformer"),h3t.forEach(t),I7r=r(_Ie," \u2014 "),EU=n(_Ie,"A",{href:!0});var p3t=s(EU);N7r=r(p3t,"TFLongformerForMaskedLM"),p3t.forEach(t),q7r=r(_Ie," (Longformer model)"),_Ie.forEach(t),j7r=i(fe),R9=n(fe,"LI",{});var bIe=s(R9);V6e=n(bIe,"STRONG",{});var u3t=s(V6e);D7r=r(u3t,"mobilebert"),u3t.forEach(t),G7r=r(bIe," \u2014 "),CU=n(bIe,"A",{href:!0});var _3t=s(CU);O7r=r(_3t,"TFMobileBertForMaskedLM"),_3t.forEach(t),V7r=r(bIe," (MobileBERT model)"),bIe.forEach(t),X7r=i(fe),P9=n(fe,"LI",{});var vIe=s(P9);X6e=n(vIe,"STRONG",{});var b3t=s(X6e);z7r=r(b3t,"mpnet"),b3t.forEach(t),W7r=r(vIe," \u2014 "),wU=n(vIe,"A",{href:!0});var v3t=s(wU);Q7r=r(v3t,"TFMPNetForMaskedLM"),v3t.forEach(t),H7r=r(vIe," (MPNet model)"),vIe.forEach(t),U7r=i(fe),B9=n(fe,"LI",{});var FIe=s(B9);z6e=n(FIe,"STRONG",{});var F3t=s(z6e);J7r=r(F3t,"rembert"),F3t.forEach(t),Y7r=r(FIe," \u2014 "),AU=n(FIe,"A",{href:!0});var T3t=s(AU);K7r=r(T3t,"TFRemBertForMaskedLM"),T3t.forEach(t),Z7r=r(FIe," (RemBERT model)"),FIe.forEach(t),e8r=i(fe),I9=n(fe,"LI",{});var TIe=s(I9);W6e=n(TIe,"STRONG",{});var M3t=s(W6e);o8r=r(M3t,"roberta"),M3t.forEach(t),r8r=r(TIe," \u2014 "),yU=n(TIe,"A",{href:!0});var E3t=s(yU);t8r=r(E3t,"TFRobertaForMaskedLM"),E3t.forEach(t),a8r=r(TIe," (RoBERTa model)"),TIe.forEach(t),n8r=i(fe),N9=n(fe,"LI",{});var MIe=s(N9);Q6e=n(MIe,"STRONG",{});var C3t=s(Q6e);s8r=r(C3t,"roformer"),C3t.forEach(t),l8r=r(MIe," \u2014 "),LU=n(MIe,"A",{href:!0});var w3t=s(LU);i8r=r(w3t,"TFRoFormerForMaskedLM"),w3t.forEach(t),d8r=r(MIe," (RoFormer model)"),MIe.forEach(t),c8r=i(fe),q9=n(fe,"LI",{});var EIe=s(q9);H6e=n(EIe,"STRONG",{});var A3t=s(H6e);f8r=r(A3t,"tapas"),A3t.forEach(t),m8r=r(EIe," \u2014 "),xU=n(EIe,"A",{href:!0});var y3t=s(xU);g8r=r(y3t,"TFTapasForMaskedLM"),y3t.forEach(t),h8r=r(EIe," (TAPAS model)"),EIe.forEach(t),p8r=i(fe),j9=n(fe,"LI",{});var CIe=s(j9);U6e=n(CIe,"STRONG",{});var L3t=s(U6e);u8r=r(L3t,"xlm"),L3t.forEach(t),_8r=r(CIe," \u2014 "),$U=n(CIe,"A",{href:!0});var x3t=s($U);b8r=r(x3t,"TFXLMWithLMHeadModel"),x3t.forEach(t),v8r=r(CIe," (XLM model)"),CIe.forEach(t),F8r=i(fe),D9=n(fe,"LI",{});var wIe=s(D9);J6e=n(wIe,"STRONG",{});var $3t=s(J6e);T8r=r($3t,"xlm-roberta"),$3t.forEach(t),M8r=r(wIe," \u2014 "),kU=n(wIe,"A",{href:!0});var k3t=s(kU);E8r=r(k3t,"TFXLMRobertaForMaskedLM"),k3t.forEach(t),C8r=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),fe.forEach(t),w8r=i($l),T(G9.$$.fragment,$l),$l.forEach(t),xl.forEach(t),SGe=i(f),gc=n(f,"H2",{class:!0});var DVe=s(gc);O9=n(DVe,"A",{id:!0,class:!0,href:!0});var S3t=s(O9);Y6e=n(S3t,"SPAN",{});var R3t=s(Y6e);T(TL.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),A8r=i(DVe),K6e=n(DVe,"SPAN",{});var P3t=s(K6e);y8r=r(P3t,"TFAutoModelForSeq2SeqLM"),P3t.forEach(t),DVe.forEach(t),RGe=i(f),ar=n(f,"DIV",{class:!0});var kl=s(ar);T(ML.$$.fragment,kl),L8r=i(kl),hc=n(kl,"P",{});var Ioe=s(hc);x8r=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SU=n(Ioe,"A",{href:!0});var B3t=s(SU);$8r=r(B3t,"from_pretrained()"),B3t.forEach(t),k8r=r(Ioe," class method or the "),RU=n(Ioe,"A",{href:!0});var I3t=s(RU);S8r=r(I3t,"from_config()"),I3t.forEach(t),R8r=r(Ioe,` class
method.`),Ioe.forEach(t),P8r=i(kl),EL=n(kl,"P",{});var GVe=s(EL);B8r=r(GVe,"This class cannot be instantiated directly using "),Z6e=n(GVe,"CODE",{});var N3t=s(Z6e);I8r=r(N3t,"__init__()"),N3t.forEach(t),N8r=r(GVe," (throws an error)."),GVe.forEach(t),q8r=i(kl),Bt=n(kl,"DIV",{class:!0});var bw=s(Bt);T(CL.$$.fragment,bw),j8r=i(bw),eTe=n(bw,"P",{});var q3t=s(eTe);D8r=r(q3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q3t.forEach(t),G8r=i(bw),pc=n(bw,"P",{});var Noe=s(pc);O8r=r(Noe,`Note:
Loading a model from its configuration file does `),oTe=n(Noe,"STRONG",{});var j3t=s(oTe);V8r=r(j3t,"not"),j3t.forEach(t),X8r=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(Noe,"A",{href:!0});var D3t=s(PU);z8r=r(D3t,"from_pretrained()"),D3t.forEach(t),W8r=r(Noe," to load the model weights."),Noe.forEach(t),Q8r=i(bw),T(V9.$$.fragment,bw),bw.forEach(t),H8r=i(kl),Sr=n(kl,"DIV",{class:!0});var Sl=s(Sr);T(wL.$$.fragment,Sl),U8r=i(Sl),rTe=n(Sl,"P",{});var G3t=s(rTe);J8r=r(G3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G3t.forEach(t),Y8r=i(Sl),cn=n(Sl,"P",{});var vw=s(cn);K8r=r(vw,"The model class to instantiate is selected based on the "),tTe=n(vw,"CODE",{});var O3t=s(tTe);Z8r=r(O3t,"model_type"),O3t.forEach(t),e9r=r(vw,` property of the config object (either
passed as an argument or loaded from `),aTe=n(vw,"CODE",{});var V3t=s(aTe);o9r=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),r9r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(vw,"CODE",{});var X3t=s(nTe);t9r=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),a9r=r(vw,":"),vw.forEach(t),n9r=i(Sl),Le=n(Sl,"UL",{});var Ie=s(Le);X9=n(Ie,"LI",{});var AIe=s(X9);sTe=n(AIe,"STRONG",{});var z3t=s(sTe);s9r=r(z3t,"bart"),z3t.forEach(t),l9r=r(AIe," \u2014 "),BU=n(AIe,"A",{href:!0});var W3t=s(BU);i9r=r(W3t,"TFBartForConditionalGeneration"),W3t.forEach(t),d9r=r(AIe," (BART model)"),AIe.forEach(t),c9r=i(Ie),z9=n(Ie,"LI",{});var yIe=s(z9);lTe=n(yIe,"STRONG",{});var Q3t=s(lTe);f9r=r(Q3t,"blenderbot"),Q3t.forEach(t),m9r=r(yIe," \u2014 "),IU=n(yIe,"A",{href:!0});var H3t=s(IU);g9r=r(H3t,"TFBlenderbotForConditionalGeneration"),H3t.forEach(t),h9r=r(yIe," (Blenderbot model)"),yIe.forEach(t),p9r=i(Ie),W9=n(Ie,"LI",{});var LIe=s(W9);iTe=n(LIe,"STRONG",{});var U3t=s(iTe);u9r=r(U3t,"blenderbot-small"),U3t.forEach(t),_9r=r(LIe," \u2014 "),NU=n(LIe,"A",{href:!0});var J3t=s(NU);b9r=r(J3t,"TFBlenderbotSmallForConditionalGeneration"),J3t.forEach(t),v9r=r(LIe," (BlenderbotSmall model)"),LIe.forEach(t),F9r=i(Ie),Q9=n(Ie,"LI",{});var xIe=s(Q9);dTe=n(xIe,"STRONG",{});var Y3t=s(dTe);T9r=r(Y3t,"encoder-decoder"),Y3t.forEach(t),M9r=r(xIe," \u2014 "),qU=n(xIe,"A",{href:!0});var K3t=s(qU);E9r=r(K3t,"TFEncoderDecoderModel"),K3t.forEach(t),C9r=r(xIe," (Encoder decoder model)"),xIe.forEach(t),w9r=i(Ie),H9=n(Ie,"LI",{});var $Ie=s(H9);cTe=n($Ie,"STRONG",{});var Z3t=s(cTe);A9r=r(Z3t,"led"),Z3t.forEach(t),y9r=r($Ie," \u2014 "),jU=n($Ie,"A",{href:!0});var ewt=s(jU);L9r=r(ewt,"TFLEDForConditionalGeneration"),ewt.forEach(t),x9r=r($Ie," (LED model)"),$Ie.forEach(t),$9r=i(Ie),U9=n(Ie,"LI",{});var kIe=s(U9);fTe=n(kIe,"STRONG",{});var owt=s(fTe);k9r=r(owt,"marian"),owt.forEach(t),S9r=r(kIe," \u2014 "),DU=n(kIe,"A",{href:!0});var rwt=s(DU);R9r=r(rwt,"TFMarianMTModel"),rwt.forEach(t),P9r=r(kIe," (Marian model)"),kIe.forEach(t),B9r=i(Ie),J9=n(Ie,"LI",{});var SIe=s(J9);mTe=n(SIe,"STRONG",{});var twt=s(mTe);I9r=r(twt,"mbart"),twt.forEach(t),N9r=r(SIe," \u2014 "),GU=n(SIe,"A",{href:!0});var awt=s(GU);q9r=r(awt,"TFMBartForConditionalGeneration"),awt.forEach(t),j9r=r(SIe," (mBART model)"),SIe.forEach(t),D9r=i(Ie),Y9=n(Ie,"LI",{});var RIe=s(Y9);gTe=n(RIe,"STRONG",{});var nwt=s(gTe);G9r=r(nwt,"mt5"),nwt.forEach(t),O9r=r(RIe," \u2014 "),OU=n(RIe,"A",{href:!0});var swt=s(OU);V9r=r(swt,"TFMT5ForConditionalGeneration"),swt.forEach(t),X9r=r(RIe," (MT5 model)"),RIe.forEach(t),z9r=i(Ie),K9=n(Ie,"LI",{});var PIe=s(K9);hTe=n(PIe,"STRONG",{});var lwt=s(hTe);W9r=r(lwt,"pegasus"),lwt.forEach(t),Q9r=r(PIe," \u2014 "),VU=n(PIe,"A",{href:!0});var iwt=s(VU);H9r=r(iwt,"TFPegasusForConditionalGeneration"),iwt.forEach(t),U9r=r(PIe," (Pegasus model)"),PIe.forEach(t),J9r=i(Ie),Z9=n(Ie,"LI",{});var BIe=s(Z9);pTe=n(BIe,"STRONG",{});var dwt=s(pTe);Y9r=r(dwt,"t5"),dwt.forEach(t),K9r=r(BIe," \u2014 "),XU=n(BIe,"A",{href:!0});var cwt=s(XU);Z9r=r(cwt,"TFT5ForConditionalGeneration"),cwt.forEach(t),eMr=r(BIe," (T5 model)"),BIe.forEach(t),Ie.forEach(t),oMr=i(Sl),T(eM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),PGe=i(f),uc=n(f,"H2",{class:!0});var OVe=s(uc);oM=n(OVe,"A",{id:!0,class:!0,href:!0});var fwt=s(oM);uTe=n(fwt,"SPAN",{});var mwt=s(uTe);T(AL.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),rMr=i(OVe),_Te=n(OVe,"SPAN",{});var gwt=s(_Te);tMr=r(gwt,"TFAutoModelForSequenceClassification"),gwt.forEach(t),OVe.forEach(t),BGe=i(f),nr=n(f,"DIV",{class:!0});var Rl=s(nr);T(yL.$$.fragment,Rl),aMr=i(Rl),_c=n(Rl,"P",{});var qoe=s(_c);nMr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zU=n(qoe,"A",{href:!0});var hwt=s(zU);sMr=r(hwt,"from_pretrained()"),hwt.forEach(t),lMr=r(qoe," class method or the "),WU=n(qoe,"A",{href:!0});var pwt=s(WU);iMr=r(pwt,"from_config()"),pwt.forEach(t),dMr=r(qoe,` class
method.`),qoe.forEach(t),cMr=i(Rl),LL=n(Rl,"P",{});var VVe=s(LL);fMr=r(VVe,"This class cannot be instantiated directly using "),bTe=n(VVe,"CODE",{});var uwt=s(bTe);mMr=r(uwt,"__init__()"),uwt.forEach(t),gMr=r(VVe," (throws an error)."),VVe.forEach(t),hMr=i(Rl),It=n(Rl,"DIV",{class:!0});var Fw=s(It);T(xL.$$.fragment,Fw),pMr=i(Fw),vTe=n(Fw,"P",{});var _wt=s(vTe);uMr=r(_wt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_wt.forEach(t),_Mr=i(Fw),bc=n(Fw,"P",{});var joe=s(bc);bMr=r(joe,`Note:
Loading a model from its configuration file does `),FTe=n(joe,"STRONG",{});var bwt=s(FTe);vMr=r(bwt,"not"),bwt.forEach(t),FMr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(joe,"A",{href:!0});var vwt=s(QU);TMr=r(vwt,"from_pretrained()"),vwt.forEach(t),MMr=r(joe," to load the model weights."),joe.forEach(t),EMr=i(Fw),T(rM.$$.fragment,Fw),Fw.forEach(t),CMr=i(Rl),Rr=n(Rl,"DIV",{class:!0});var Pl=s(Rr);T($L.$$.fragment,Pl),wMr=i(Pl),TTe=n(Pl,"P",{});var Fwt=s(TTe);AMr=r(Fwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fwt.forEach(t),yMr=i(Pl),fn=n(Pl,"P",{});var Tw=s(fn);LMr=r(Tw,"The model class to instantiate is selected based on the "),MTe=n(Tw,"CODE",{});var Twt=s(MTe);xMr=r(Twt,"model_type"),Twt.forEach(t),$Mr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),ETe=n(Tw,"CODE",{});var Mwt=s(ETe);kMr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),SMr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(Tw,"CODE",{});var Ewt=s(CTe);RMr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),PMr=r(Tw,":"),Tw.forEach(t),BMr=i(Pl),re=n(Pl,"UL",{});var ae=s(re);tM=n(ae,"LI",{});var IIe=s(tM);wTe=n(IIe,"STRONG",{});var Cwt=s(wTe);IMr=r(Cwt,"albert"),Cwt.forEach(t),NMr=r(IIe," \u2014 "),HU=n(IIe,"A",{href:!0});var wwt=s(HU);qMr=r(wwt,"TFAlbertForSequenceClassification"),wwt.forEach(t),jMr=r(IIe," (ALBERT model)"),IIe.forEach(t),DMr=i(ae),aM=n(ae,"LI",{});var NIe=s(aM);ATe=n(NIe,"STRONG",{});var Awt=s(ATe);GMr=r(Awt,"bert"),Awt.forEach(t),OMr=r(NIe," \u2014 "),UU=n(NIe,"A",{href:!0});var ywt=s(UU);VMr=r(ywt,"TFBertForSequenceClassification"),ywt.forEach(t),XMr=r(NIe," (BERT model)"),NIe.forEach(t),zMr=i(ae),nM=n(ae,"LI",{});var qIe=s(nM);yTe=n(qIe,"STRONG",{});var Lwt=s(yTe);WMr=r(Lwt,"camembert"),Lwt.forEach(t),QMr=r(qIe," \u2014 "),JU=n(qIe,"A",{href:!0});var xwt=s(JU);HMr=r(xwt,"TFCamembertForSequenceClassification"),xwt.forEach(t),UMr=r(qIe," (CamemBERT model)"),qIe.forEach(t),JMr=i(ae),sM=n(ae,"LI",{});var jIe=s(sM);LTe=n(jIe,"STRONG",{});var $wt=s(LTe);YMr=r($wt,"convbert"),$wt.forEach(t),KMr=r(jIe," \u2014 "),YU=n(jIe,"A",{href:!0});var kwt=s(YU);ZMr=r(kwt,"TFConvBertForSequenceClassification"),kwt.forEach(t),e4r=r(jIe," (ConvBERT model)"),jIe.forEach(t),o4r=i(ae),lM=n(ae,"LI",{});var DIe=s(lM);xTe=n(DIe,"STRONG",{});var Swt=s(xTe);r4r=r(Swt,"ctrl"),Swt.forEach(t),t4r=r(DIe," \u2014 "),KU=n(DIe,"A",{href:!0});var Rwt=s(KU);a4r=r(Rwt,"TFCTRLForSequenceClassification"),Rwt.forEach(t),n4r=r(DIe," (CTRL model)"),DIe.forEach(t),s4r=i(ae),iM=n(ae,"LI",{});var GIe=s(iM);$Te=n(GIe,"STRONG",{});var Pwt=s($Te);l4r=r(Pwt,"deberta"),Pwt.forEach(t),i4r=r(GIe," \u2014 "),ZU=n(GIe,"A",{href:!0});var Bwt=s(ZU);d4r=r(Bwt,"TFDebertaForSequenceClassification"),Bwt.forEach(t),c4r=r(GIe," (DeBERTa model)"),GIe.forEach(t),f4r=i(ae),dM=n(ae,"LI",{});var OIe=s(dM);kTe=n(OIe,"STRONG",{});var Iwt=s(kTe);m4r=r(Iwt,"deberta-v2"),Iwt.forEach(t),g4r=r(OIe," \u2014 "),eJ=n(OIe,"A",{href:!0});var Nwt=s(eJ);h4r=r(Nwt,"TFDebertaV2ForSequenceClassification"),Nwt.forEach(t),p4r=r(OIe," (DeBERTa-v2 model)"),OIe.forEach(t),u4r=i(ae),cM=n(ae,"LI",{});var VIe=s(cM);STe=n(VIe,"STRONG",{});var qwt=s(STe);_4r=r(qwt,"distilbert"),qwt.forEach(t),b4r=r(VIe," \u2014 "),oJ=n(VIe,"A",{href:!0});var jwt=s(oJ);v4r=r(jwt,"TFDistilBertForSequenceClassification"),jwt.forEach(t),F4r=r(VIe," (DistilBERT model)"),VIe.forEach(t),T4r=i(ae),fM=n(ae,"LI",{});var XIe=s(fM);RTe=n(XIe,"STRONG",{});var Dwt=s(RTe);M4r=r(Dwt,"electra"),Dwt.forEach(t),E4r=r(XIe," \u2014 "),rJ=n(XIe,"A",{href:!0});var Gwt=s(rJ);C4r=r(Gwt,"TFElectraForSequenceClassification"),Gwt.forEach(t),w4r=r(XIe," (ELECTRA model)"),XIe.forEach(t),A4r=i(ae),mM=n(ae,"LI",{});var zIe=s(mM);PTe=n(zIe,"STRONG",{});var Owt=s(PTe);y4r=r(Owt,"flaubert"),Owt.forEach(t),L4r=r(zIe," \u2014 "),tJ=n(zIe,"A",{href:!0});var Vwt=s(tJ);x4r=r(Vwt,"TFFlaubertForSequenceClassification"),Vwt.forEach(t),$4r=r(zIe," (FlauBERT model)"),zIe.forEach(t),k4r=i(ae),gM=n(ae,"LI",{});var WIe=s(gM);BTe=n(WIe,"STRONG",{});var Xwt=s(BTe);S4r=r(Xwt,"funnel"),Xwt.forEach(t),R4r=r(WIe," \u2014 "),aJ=n(WIe,"A",{href:!0});var zwt=s(aJ);P4r=r(zwt,"TFFunnelForSequenceClassification"),zwt.forEach(t),B4r=r(WIe," (Funnel Transformer model)"),WIe.forEach(t),I4r=i(ae),hM=n(ae,"LI",{});var QIe=s(hM);ITe=n(QIe,"STRONG",{});var Wwt=s(ITe);N4r=r(Wwt,"gpt2"),Wwt.forEach(t),q4r=r(QIe," \u2014 "),nJ=n(QIe,"A",{href:!0});var Qwt=s(nJ);j4r=r(Qwt,"TFGPT2ForSequenceClassification"),Qwt.forEach(t),D4r=r(QIe," (OpenAI GPT-2 model)"),QIe.forEach(t),G4r=i(ae),pM=n(ae,"LI",{});var HIe=s(pM);NTe=n(HIe,"STRONG",{});var Hwt=s(NTe);O4r=r(Hwt,"gptj"),Hwt.forEach(t),V4r=r(HIe," \u2014 "),sJ=n(HIe,"A",{href:!0});var Uwt=s(sJ);X4r=r(Uwt,"TFGPTJForSequenceClassification"),Uwt.forEach(t),z4r=r(HIe," (GPT-J model)"),HIe.forEach(t),W4r=i(ae),uM=n(ae,"LI",{});var UIe=s(uM);qTe=n(UIe,"STRONG",{});var Jwt=s(qTe);Q4r=r(Jwt,"layoutlm"),Jwt.forEach(t),H4r=r(UIe," \u2014 "),lJ=n(UIe,"A",{href:!0});var Ywt=s(lJ);U4r=r(Ywt,"TFLayoutLMForSequenceClassification"),Ywt.forEach(t),J4r=r(UIe," (LayoutLM model)"),UIe.forEach(t),Y4r=i(ae),_M=n(ae,"LI",{});var JIe=s(_M);jTe=n(JIe,"STRONG",{});var Kwt=s(jTe);K4r=r(Kwt,"longformer"),Kwt.forEach(t),Z4r=r(JIe," \u2014 "),iJ=n(JIe,"A",{href:!0});var Zwt=s(iJ);eEr=r(Zwt,"TFLongformerForSequenceClassification"),Zwt.forEach(t),oEr=r(JIe," (Longformer model)"),JIe.forEach(t),rEr=i(ae),bM=n(ae,"LI",{});var YIe=s(bM);DTe=n(YIe,"STRONG",{});var e0t=s(DTe);tEr=r(e0t,"mobilebert"),e0t.forEach(t),aEr=r(YIe," \u2014 "),dJ=n(YIe,"A",{href:!0});var o0t=s(dJ);nEr=r(o0t,"TFMobileBertForSequenceClassification"),o0t.forEach(t),sEr=r(YIe," (MobileBERT model)"),YIe.forEach(t),lEr=i(ae),vM=n(ae,"LI",{});var KIe=s(vM);GTe=n(KIe,"STRONG",{});var r0t=s(GTe);iEr=r(r0t,"mpnet"),r0t.forEach(t),dEr=r(KIe," \u2014 "),cJ=n(KIe,"A",{href:!0});var t0t=s(cJ);cEr=r(t0t,"TFMPNetForSequenceClassification"),t0t.forEach(t),fEr=r(KIe," (MPNet model)"),KIe.forEach(t),mEr=i(ae),FM=n(ae,"LI",{});var ZIe=s(FM);OTe=n(ZIe,"STRONG",{});var a0t=s(OTe);gEr=r(a0t,"openai-gpt"),a0t.forEach(t),hEr=r(ZIe," \u2014 "),fJ=n(ZIe,"A",{href:!0});var n0t=s(fJ);pEr=r(n0t,"TFOpenAIGPTForSequenceClassification"),n0t.forEach(t),uEr=r(ZIe," (OpenAI GPT model)"),ZIe.forEach(t),_Er=i(ae),TM=n(ae,"LI",{});var eNe=s(TM);VTe=n(eNe,"STRONG",{});var s0t=s(VTe);bEr=r(s0t,"rembert"),s0t.forEach(t),vEr=r(eNe," \u2014 "),mJ=n(eNe,"A",{href:!0});var l0t=s(mJ);FEr=r(l0t,"TFRemBertForSequenceClassification"),l0t.forEach(t),TEr=r(eNe," (RemBERT model)"),eNe.forEach(t),MEr=i(ae),MM=n(ae,"LI",{});var oNe=s(MM);XTe=n(oNe,"STRONG",{});var i0t=s(XTe);EEr=r(i0t,"roberta"),i0t.forEach(t),CEr=r(oNe," \u2014 "),gJ=n(oNe,"A",{href:!0});var d0t=s(gJ);wEr=r(d0t,"TFRobertaForSequenceClassification"),d0t.forEach(t),AEr=r(oNe," (RoBERTa model)"),oNe.forEach(t),yEr=i(ae),EM=n(ae,"LI",{});var rNe=s(EM);zTe=n(rNe,"STRONG",{});var c0t=s(zTe);LEr=r(c0t,"roformer"),c0t.forEach(t),xEr=r(rNe," \u2014 "),hJ=n(rNe,"A",{href:!0});var f0t=s(hJ);$Er=r(f0t,"TFRoFormerForSequenceClassification"),f0t.forEach(t),kEr=r(rNe," (RoFormer model)"),rNe.forEach(t),SEr=i(ae),CM=n(ae,"LI",{});var tNe=s(CM);WTe=n(tNe,"STRONG",{});var m0t=s(WTe);REr=r(m0t,"tapas"),m0t.forEach(t),PEr=r(tNe," \u2014 "),pJ=n(tNe,"A",{href:!0});var g0t=s(pJ);BEr=r(g0t,"TFTapasForSequenceClassification"),g0t.forEach(t),IEr=r(tNe," (TAPAS model)"),tNe.forEach(t),NEr=i(ae),wM=n(ae,"LI",{});var aNe=s(wM);QTe=n(aNe,"STRONG",{});var h0t=s(QTe);qEr=r(h0t,"transfo-xl"),h0t.forEach(t),jEr=r(aNe," \u2014 "),uJ=n(aNe,"A",{href:!0});var p0t=s(uJ);DEr=r(p0t,"TFTransfoXLForSequenceClassification"),p0t.forEach(t),GEr=r(aNe," (Transformer-XL model)"),aNe.forEach(t),OEr=i(ae),AM=n(ae,"LI",{});var nNe=s(AM);HTe=n(nNe,"STRONG",{});var u0t=s(HTe);VEr=r(u0t,"xlm"),u0t.forEach(t),XEr=r(nNe," \u2014 "),_J=n(nNe,"A",{href:!0});var _0t=s(_J);zEr=r(_0t,"TFXLMForSequenceClassification"),_0t.forEach(t),WEr=r(nNe," (XLM model)"),nNe.forEach(t),QEr=i(ae),yM=n(ae,"LI",{});var sNe=s(yM);UTe=n(sNe,"STRONG",{});var b0t=s(UTe);HEr=r(b0t,"xlm-roberta"),b0t.forEach(t),UEr=r(sNe," \u2014 "),bJ=n(sNe,"A",{href:!0});var v0t=s(bJ);JEr=r(v0t,"TFXLMRobertaForSequenceClassification"),v0t.forEach(t),YEr=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),KEr=i(ae),LM=n(ae,"LI",{});var lNe=s(LM);JTe=n(lNe,"STRONG",{});var F0t=s(JTe);ZEr=r(F0t,"xlnet"),F0t.forEach(t),eCr=r(lNe," \u2014 "),vJ=n(lNe,"A",{href:!0});var T0t=s(vJ);oCr=r(T0t,"TFXLNetForSequenceClassification"),T0t.forEach(t),rCr=r(lNe," (XLNet model)"),lNe.forEach(t),ae.forEach(t),tCr=i(Pl),T(xM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),IGe=i(f),vc=n(f,"H2",{class:!0});var XVe=s(vc);$M=n(XVe,"A",{id:!0,class:!0,href:!0});var M0t=s($M);YTe=n(M0t,"SPAN",{});var E0t=s(YTe);T(kL.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),aCr=i(XVe),KTe=n(XVe,"SPAN",{});var C0t=s(KTe);nCr=r(C0t,"TFAutoModelForMultipleChoice"),C0t.forEach(t),XVe.forEach(t),NGe=i(f),sr=n(f,"DIV",{class:!0});var Bl=s(sr);T(SL.$$.fragment,Bl),sCr=i(Bl),Fc=n(Bl,"P",{});var Doe=s(Fc);lCr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FJ=n(Doe,"A",{href:!0});var w0t=s(FJ);iCr=r(w0t,"from_pretrained()"),w0t.forEach(t),dCr=r(Doe," class method or the "),TJ=n(Doe,"A",{href:!0});var A0t=s(TJ);cCr=r(A0t,"from_config()"),A0t.forEach(t),fCr=r(Doe,` class
method.`),Doe.forEach(t),mCr=i(Bl),RL=n(Bl,"P",{});var zVe=s(RL);gCr=r(zVe,"This class cannot be instantiated directly using "),ZTe=n(zVe,"CODE",{});var y0t=s(ZTe);hCr=r(y0t,"__init__()"),y0t.forEach(t),pCr=r(zVe," (throws an error)."),zVe.forEach(t),uCr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Mw=s(Nt);T(PL.$$.fragment,Mw),_Cr=i(Mw),e7e=n(Mw,"P",{});var L0t=s(e7e);bCr=r(L0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L0t.forEach(t),vCr=i(Mw),Tc=n(Mw,"P",{});var Goe=s(Tc);FCr=r(Goe,`Note:
Loading a model from its configuration file does `),o7e=n(Goe,"STRONG",{});var x0t=s(o7e);TCr=r(x0t,"not"),x0t.forEach(t),MCr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Goe,"A",{href:!0});var $0t=s(MJ);ECr=r($0t,"from_pretrained()"),$0t.forEach(t),CCr=r(Goe," to load the model weights."),Goe.forEach(t),wCr=i(Mw),T(kM.$$.fragment,Mw),Mw.forEach(t),ACr=i(Bl),Pr=n(Bl,"DIV",{class:!0});var Il=s(Pr);T(BL.$$.fragment,Il),yCr=i(Il),r7e=n(Il,"P",{});var k0t=s(r7e);LCr=r(k0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),k0t.forEach(t),xCr=i(Il),mn=n(Il,"P",{});var Ew=s(mn);$Cr=r(Ew,"The model class to instantiate is selected based on the "),t7e=n(Ew,"CODE",{});var S0t=s(t7e);kCr=r(S0t,"model_type"),S0t.forEach(t),SCr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),a7e=n(Ew,"CODE",{});var R0t=s(a7e);RCr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),PCr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=n(Ew,"CODE",{});var P0t=s(n7e);BCr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),ICr=r(Ew,":"),Ew.forEach(t),NCr=i(Il),pe=n(Il,"UL",{});var be=s(pe);SM=n(be,"LI",{});var iNe=s(SM);s7e=n(iNe,"STRONG",{});var B0t=s(s7e);qCr=r(B0t,"albert"),B0t.forEach(t),jCr=r(iNe," \u2014 "),EJ=n(iNe,"A",{href:!0});var I0t=s(EJ);DCr=r(I0t,"TFAlbertForMultipleChoice"),I0t.forEach(t),GCr=r(iNe," (ALBERT model)"),iNe.forEach(t),OCr=i(be),RM=n(be,"LI",{});var dNe=s(RM);l7e=n(dNe,"STRONG",{});var N0t=s(l7e);VCr=r(N0t,"bert"),N0t.forEach(t),XCr=r(dNe," \u2014 "),CJ=n(dNe,"A",{href:!0});var q0t=s(CJ);zCr=r(q0t,"TFBertForMultipleChoice"),q0t.forEach(t),WCr=r(dNe," (BERT model)"),dNe.forEach(t),QCr=i(be),PM=n(be,"LI",{});var cNe=s(PM);i7e=n(cNe,"STRONG",{});var j0t=s(i7e);HCr=r(j0t,"camembert"),j0t.forEach(t),UCr=r(cNe," \u2014 "),wJ=n(cNe,"A",{href:!0});var D0t=s(wJ);JCr=r(D0t,"TFCamembertForMultipleChoice"),D0t.forEach(t),YCr=r(cNe," (CamemBERT model)"),cNe.forEach(t),KCr=i(be),BM=n(be,"LI",{});var fNe=s(BM);d7e=n(fNe,"STRONG",{});var G0t=s(d7e);ZCr=r(G0t,"convbert"),G0t.forEach(t),e5r=r(fNe," \u2014 "),AJ=n(fNe,"A",{href:!0});var O0t=s(AJ);o5r=r(O0t,"TFConvBertForMultipleChoice"),O0t.forEach(t),r5r=r(fNe," (ConvBERT model)"),fNe.forEach(t),t5r=i(be),IM=n(be,"LI",{});var mNe=s(IM);c7e=n(mNe,"STRONG",{});var V0t=s(c7e);a5r=r(V0t,"distilbert"),V0t.forEach(t),n5r=r(mNe," \u2014 "),yJ=n(mNe,"A",{href:!0});var X0t=s(yJ);s5r=r(X0t,"TFDistilBertForMultipleChoice"),X0t.forEach(t),l5r=r(mNe," (DistilBERT model)"),mNe.forEach(t),i5r=i(be),NM=n(be,"LI",{});var gNe=s(NM);f7e=n(gNe,"STRONG",{});var z0t=s(f7e);d5r=r(z0t,"electra"),z0t.forEach(t),c5r=r(gNe," \u2014 "),LJ=n(gNe,"A",{href:!0});var W0t=s(LJ);f5r=r(W0t,"TFElectraForMultipleChoice"),W0t.forEach(t),m5r=r(gNe," (ELECTRA model)"),gNe.forEach(t),g5r=i(be),qM=n(be,"LI",{});var hNe=s(qM);m7e=n(hNe,"STRONG",{});var Q0t=s(m7e);h5r=r(Q0t,"flaubert"),Q0t.forEach(t),p5r=r(hNe," \u2014 "),xJ=n(hNe,"A",{href:!0});var H0t=s(xJ);u5r=r(H0t,"TFFlaubertForMultipleChoice"),H0t.forEach(t),_5r=r(hNe," (FlauBERT model)"),hNe.forEach(t),b5r=i(be),jM=n(be,"LI",{});var pNe=s(jM);g7e=n(pNe,"STRONG",{});var U0t=s(g7e);v5r=r(U0t,"funnel"),U0t.forEach(t),F5r=r(pNe," \u2014 "),$J=n(pNe,"A",{href:!0});var J0t=s($J);T5r=r(J0t,"TFFunnelForMultipleChoice"),J0t.forEach(t),M5r=r(pNe," (Funnel Transformer model)"),pNe.forEach(t),E5r=i(be),DM=n(be,"LI",{});var uNe=s(DM);h7e=n(uNe,"STRONG",{});var Y0t=s(h7e);C5r=r(Y0t,"longformer"),Y0t.forEach(t),w5r=r(uNe," \u2014 "),kJ=n(uNe,"A",{href:!0});var K0t=s(kJ);A5r=r(K0t,"TFLongformerForMultipleChoice"),K0t.forEach(t),y5r=r(uNe," (Longformer model)"),uNe.forEach(t),L5r=i(be),GM=n(be,"LI",{});var _Ne=s(GM);p7e=n(_Ne,"STRONG",{});var Z0t=s(p7e);x5r=r(Z0t,"mobilebert"),Z0t.forEach(t),$5r=r(_Ne," \u2014 "),SJ=n(_Ne,"A",{href:!0});var eAt=s(SJ);k5r=r(eAt,"TFMobileBertForMultipleChoice"),eAt.forEach(t),S5r=r(_Ne," (MobileBERT model)"),_Ne.forEach(t),R5r=i(be),OM=n(be,"LI",{});var bNe=s(OM);u7e=n(bNe,"STRONG",{});var oAt=s(u7e);P5r=r(oAt,"mpnet"),oAt.forEach(t),B5r=r(bNe," \u2014 "),RJ=n(bNe,"A",{href:!0});var rAt=s(RJ);I5r=r(rAt,"TFMPNetForMultipleChoice"),rAt.forEach(t),N5r=r(bNe," (MPNet model)"),bNe.forEach(t),q5r=i(be),VM=n(be,"LI",{});var vNe=s(VM);_7e=n(vNe,"STRONG",{});var tAt=s(_7e);j5r=r(tAt,"rembert"),tAt.forEach(t),D5r=r(vNe," \u2014 "),PJ=n(vNe,"A",{href:!0});var aAt=s(PJ);G5r=r(aAt,"TFRemBertForMultipleChoice"),aAt.forEach(t),O5r=r(vNe," (RemBERT model)"),vNe.forEach(t),V5r=i(be),XM=n(be,"LI",{});var FNe=s(XM);b7e=n(FNe,"STRONG",{});var nAt=s(b7e);X5r=r(nAt,"roberta"),nAt.forEach(t),z5r=r(FNe," \u2014 "),BJ=n(FNe,"A",{href:!0});var sAt=s(BJ);W5r=r(sAt,"TFRobertaForMultipleChoice"),sAt.forEach(t),Q5r=r(FNe," (RoBERTa model)"),FNe.forEach(t),H5r=i(be),zM=n(be,"LI",{});var TNe=s(zM);v7e=n(TNe,"STRONG",{});var lAt=s(v7e);U5r=r(lAt,"roformer"),lAt.forEach(t),J5r=r(TNe," \u2014 "),IJ=n(TNe,"A",{href:!0});var iAt=s(IJ);Y5r=r(iAt,"TFRoFormerForMultipleChoice"),iAt.forEach(t),K5r=r(TNe," (RoFormer model)"),TNe.forEach(t),Z5r=i(be),WM=n(be,"LI",{});var MNe=s(WM);F7e=n(MNe,"STRONG",{});var dAt=s(F7e);e3r=r(dAt,"xlm"),dAt.forEach(t),o3r=r(MNe," \u2014 "),NJ=n(MNe,"A",{href:!0});var cAt=s(NJ);r3r=r(cAt,"TFXLMForMultipleChoice"),cAt.forEach(t),t3r=r(MNe," (XLM model)"),MNe.forEach(t),a3r=i(be),QM=n(be,"LI",{});var ENe=s(QM);T7e=n(ENe,"STRONG",{});var fAt=s(T7e);n3r=r(fAt,"xlm-roberta"),fAt.forEach(t),s3r=r(ENe," \u2014 "),qJ=n(ENe,"A",{href:!0});var mAt=s(qJ);l3r=r(mAt,"TFXLMRobertaForMultipleChoice"),mAt.forEach(t),i3r=r(ENe," (XLM-RoBERTa model)"),ENe.forEach(t),d3r=i(be),HM=n(be,"LI",{});var CNe=s(HM);M7e=n(CNe,"STRONG",{});var gAt=s(M7e);c3r=r(gAt,"xlnet"),gAt.forEach(t),f3r=r(CNe," \u2014 "),jJ=n(CNe,"A",{href:!0});var hAt=s(jJ);m3r=r(hAt,"TFXLNetForMultipleChoice"),hAt.forEach(t),g3r=r(CNe," (XLNet model)"),CNe.forEach(t),be.forEach(t),h3r=i(Il),T(UM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),qGe=i(f),Mc=n(f,"H2",{class:!0});var WVe=s(Mc);JM=n(WVe,"A",{id:!0,class:!0,href:!0});var pAt=s(JM);E7e=n(pAt,"SPAN",{});var uAt=s(E7e);T(IL.$$.fragment,uAt),uAt.forEach(t),pAt.forEach(t),p3r=i(WVe),C7e=n(WVe,"SPAN",{});var _At=s(C7e);u3r=r(_At,"TFAutoModelForNextSentencePrediction"),_At.forEach(t),WVe.forEach(t),jGe=i(f),lr=n(f,"DIV",{class:!0});var Nl=s(lr);T(NL.$$.fragment,Nl),_3r=i(Nl),Ec=n(Nl,"P",{});var Ooe=s(Ec);b3r=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DJ=n(Ooe,"A",{href:!0});var bAt=s(DJ);v3r=r(bAt,"from_pretrained()"),bAt.forEach(t),F3r=r(Ooe," class method or the "),GJ=n(Ooe,"A",{href:!0});var vAt=s(GJ);T3r=r(vAt,"from_config()"),vAt.forEach(t),M3r=r(Ooe,` class
method.`),Ooe.forEach(t),E3r=i(Nl),qL=n(Nl,"P",{});var QVe=s(qL);C3r=r(QVe,"This class cannot be instantiated directly using "),w7e=n(QVe,"CODE",{});var FAt=s(w7e);w3r=r(FAt,"__init__()"),FAt.forEach(t),A3r=r(QVe," (throws an error)."),QVe.forEach(t),y3r=i(Nl),qt=n(Nl,"DIV",{class:!0});var Cw=s(qt);T(jL.$$.fragment,Cw),L3r=i(Cw),A7e=n(Cw,"P",{});var TAt=s(A7e);x3r=r(TAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TAt.forEach(t),$3r=i(Cw),Cc=n(Cw,"P",{});var Voe=s(Cc);k3r=r(Voe,`Note:
Loading a model from its configuration file does `),y7e=n(Voe,"STRONG",{});var MAt=s(y7e);S3r=r(MAt,"not"),MAt.forEach(t),R3r=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(Voe,"A",{href:!0});var EAt=s(OJ);P3r=r(EAt,"from_pretrained()"),EAt.forEach(t),B3r=r(Voe," to load the model weights."),Voe.forEach(t),I3r=i(Cw),T(YM.$$.fragment,Cw),Cw.forEach(t),N3r=i(Nl),Br=n(Nl,"DIV",{class:!0});var ql=s(Br);T(DL.$$.fragment,ql),q3r=i(ql),L7e=n(ql,"P",{});var CAt=s(L7e);j3r=r(CAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CAt.forEach(t),D3r=i(ql),gn=n(ql,"P",{});var ww=s(gn);G3r=r(ww,"The model class to instantiate is selected based on the "),x7e=n(ww,"CODE",{});var wAt=s(x7e);O3r=r(wAt,"model_type"),wAt.forEach(t),V3r=r(ww,` property of the config object (either
passed as an argument or loaded from `),$7e=n(ww,"CODE",{});var AAt=s($7e);X3r=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),z3r=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(ww,"CODE",{});var yAt=s(k7e);W3r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),Q3r=r(ww,":"),ww.forEach(t),H3r=i(ql),GL=n(ql,"UL",{});var HVe=s(GL);KM=n(HVe,"LI",{});var wNe=s(KM);S7e=n(wNe,"STRONG",{});var LAt=s(S7e);U3r=r(LAt,"bert"),LAt.forEach(t),J3r=r(wNe," \u2014 "),VJ=n(wNe,"A",{href:!0});var xAt=s(VJ);Y3r=r(xAt,"TFBertForNextSentencePrediction"),xAt.forEach(t),K3r=r(wNe," (BERT model)"),wNe.forEach(t),Z3r=i(HVe),ZM=n(HVe,"LI",{});var ANe=s(ZM);R7e=n(ANe,"STRONG",{});var $At=s(R7e);ewr=r($At,"mobilebert"),$At.forEach(t),owr=r(ANe," \u2014 "),XJ=n(ANe,"A",{href:!0});var kAt=s(XJ);rwr=r(kAt,"TFMobileBertForNextSentencePrediction"),kAt.forEach(t),twr=r(ANe," (MobileBERT model)"),ANe.forEach(t),HVe.forEach(t),awr=i(ql),T(e4.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),DGe=i(f),wc=n(f,"H2",{class:!0});var UVe=s(wc);o4=n(UVe,"A",{id:!0,class:!0,href:!0});var SAt=s(o4);P7e=n(SAt,"SPAN",{});var RAt=s(P7e);T(OL.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),nwr=i(UVe),B7e=n(UVe,"SPAN",{});var PAt=s(B7e);swr=r(PAt,"TFAutoModelForTableQuestionAnswering"),PAt.forEach(t),UVe.forEach(t),GGe=i(f),ir=n(f,"DIV",{class:!0});var jl=s(ir);T(VL.$$.fragment,jl),lwr=i(jl),Ac=n(jl,"P",{});var Xoe=s(Ac);iwr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zJ=n(Xoe,"A",{href:!0});var BAt=s(zJ);dwr=r(BAt,"from_pretrained()"),BAt.forEach(t),cwr=r(Xoe," class method or the "),WJ=n(Xoe,"A",{href:!0});var IAt=s(WJ);fwr=r(IAt,"from_config()"),IAt.forEach(t),mwr=r(Xoe,` class
method.`),Xoe.forEach(t),gwr=i(jl),XL=n(jl,"P",{});var JVe=s(XL);hwr=r(JVe,"This class cannot be instantiated directly using "),I7e=n(JVe,"CODE",{});var NAt=s(I7e);pwr=r(NAt,"__init__()"),NAt.forEach(t),uwr=r(JVe," (throws an error)."),JVe.forEach(t),_wr=i(jl),jt=n(jl,"DIV",{class:!0});var Aw=s(jt);T(zL.$$.fragment,Aw),bwr=i(Aw),N7e=n(Aw,"P",{});var qAt=s(N7e);vwr=r(qAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qAt.forEach(t),Fwr=i(Aw),yc=n(Aw,"P",{});var zoe=s(yc);Twr=r(zoe,`Note:
Loading a model from its configuration file does `),q7e=n(zoe,"STRONG",{});var jAt=s(q7e);Mwr=r(jAt,"not"),jAt.forEach(t),Ewr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(zoe,"A",{href:!0});var DAt=s(QJ);Cwr=r(DAt,"from_pretrained()"),DAt.forEach(t),wwr=r(zoe," to load the model weights."),zoe.forEach(t),Awr=i(Aw),T(r4.$$.fragment,Aw),Aw.forEach(t),ywr=i(jl),Ir=n(jl,"DIV",{class:!0});var Dl=s(Ir);T(WL.$$.fragment,Dl),Lwr=i(Dl),j7e=n(Dl,"P",{});var GAt=s(j7e);xwr=r(GAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GAt.forEach(t),$wr=i(Dl),hn=n(Dl,"P",{});var yw=s(hn);kwr=r(yw,"The model class to instantiate is selected based on the "),D7e=n(yw,"CODE",{});var OAt=s(D7e);Swr=r(OAt,"model_type"),OAt.forEach(t),Rwr=r(yw,` property of the config object (either
passed as an argument or loaded from `),G7e=n(yw,"CODE",{});var VAt=s(G7e);Pwr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Bwr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(yw,"CODE",{});var XAt=s(O7e);Iwr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Nwr=r(yw,":"),yw.forEach(t),qwr=i(Dl),V7e=n(Dl,"UL",{});var zAt=s(V7e);t4=n(zAt,"LI",{});var yNe=s(t4);X7e=n(yNe,"STRONG",{});var WAt=s(X7e);jwr=r(WAt,"tapas"),WAt.forEach(t),Dwr=r(yNe," \u2014 "),HJ=n(yNe,"A",{href:!0});var QAt=s(HJ);Gwr=r(QAt,"TFTapasForQuestionAnswering"),QAt.forEach(t),Owr=r(yNe," (TAPAS model)"),yNe.forEach(t),zAt.forEach(t),Vwr=i(Dl),T(a4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),OGe=i(f),Lc=n(f,"H2",{class:!0});var YVe=s(Lc);n4=n(YVe,"A",{id:!0,class:!0,href:!0});var HAt=s(n4);z7e=n(HAt,"SPAN",{});var UAt=s(z7e);T(QL.$$.fragment,UAt),UAt.forEach(t),HAt.forEach(t),Xwr=i(YVe),W7e=n(YVe,"SPAN",{});var JAt=s(W7e);zwr=r(JAt,"TFAutoModelForTokenClassification"),JAt.forEach(t),YVe.forEach(t),VGe=i(f),dr=n(f,"DIV",{class:!0});var Gl=s(dr);T(HL.$$.fragment,Gl),Wwr=i(Gl),xc=n(Gl,"P",{});var Woe=s(xc);Qwr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UJ=n(Woe,"A",{href:!0});var YAt=s(UJ);Hwr=r(YAt,"from_pretrained()"),YAt.forEach(t),Uwr=r(Woe," class method or the "),JJ=n(Woe,"A",{href:!0});var KAt=s(JJ);Jwr=r(KAt,"from_config()"),KAt.forEach(t),Ywr=r(Woe,` class
method.`),Woe.forEach(t),Kwr=i(Gl),UL=n(Gl,"P",{});var KVe=s(UL);Zwr=r(KVe,"This class cannot be instantiated directly using "),Q7e=n(KVe,"CODE",{});var ZAt=s(Q7e);e0r=r(ZAt,"__init__()"),ZAt.forEach(t),o0r=r(KVe," (throws an error)."),KVe.forEach(t),r0r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Lw=s(Dt);T(JL.$$.fragment,Lw),t0r=i(Lw),H7e=n(Lw,"P",{});var eyt=s(H7e);a0r=r(eyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eyt.forEach(t),n0r=i(Lw),$c=n(Lw,"P",{});var Qoe=s($c);s0r=r(Qoe,`Note:
Loading a model from its configuration file does `),U7e=n(Qoe,"STRONG",{});var oyt=s(U7e);l0r=r(oyt,"not"),oyt.forEach(t),i0r=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Qoe,"A",{href:!0});var ryt=s(YJ);d0r=r(ryt,"from_pretrained()"),ryt.forEach(t),c0r=r(Qoe," to load the model weights."),Qoe.forEach(t),f0r=i(Lw),T(s4.$$.fragment,Lw),Lw.forEach(t),m0r=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(YL.$$.fragment,Ol),g0r=i(Ol),J7e=n(Ol,"P",{});var tyt=s(J7e);h0r=r(tyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tyt.forEach(t),p0r=i(Ol),pn=n(Ol,"P",{});var xw=s(pn);u0r=r(xw,"The model class to instantiate is selected based on the "),Y7e=n(xw,"CODE",{});var ayt=s(Y7e);_0r=r(ayt,"model_type"),ayt.forEach(t),b0r=r(xw,` property of the config object (either
passed as an argument or loaded from `),K7e=n(xw,"CODE",{});var nyt=s(K7e);v0r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),F0r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(xw,"CODE",{});var syt=s(Z7e);T0r=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),M0r=r(xw,":"),xw.forEach(t),E0r=i(Ol),de=n(Ol,"UL",{});var me=s(de);l4=n(me,"LI",{});var LNe=s(l4);e8e=n(LNe,"STRONG",{});var lyt=s(e8e);C0r=r(lyt,"albert"),lyt.forEach(t),w0r=r(LNe," \u2014 "),KJ=n(LNe,"A",{href:!0});var iyt=s(KJ);A0r=r(iyt,"TFAlbertForTokenClassification"),iyt.forEach(t),y0r=r(LNe," (ALBERT model)"),LNe.forEach(t),L0r=i(me),i4=n(me,"LI",{});var xNe=s(i4);o8e=n(xNe,"STRONG",{});var dyt=s(o8e);x0r=r(dyt,"bert"),dyt.forEach(t),$0r=r(xNe," \u2014 "),ZJ=n(xNe,"A",{href:!0});var cyt=s(ZJ);k0r=r(cyt,"TFBertForTokenClassification"),cyt.forEach(t),S0r=r(xNe," (BERT model)"),xNe.forEach(t),R0r=i(me),d4=n(me,"LI",{});var $Ne=s(d4);r8e=n($Ne,"STRONG",{});var fyt=s(r8e);P0r=r(fyt,"camembert"),fyt.forEach(t),B0r=r($Ne," \u2014 "),eY=n($Ne,"A",{href:!0});var myt=s(eY);I0r=r(myt,"TFCamembertForTokenClassification"),myt.forEach(t),N0r=r($Ne," (CamemBERT model)"),$Ne.forEach(t),q0r=i(me),c4=n(me,"LI",{});var kNe=s(c4);t8e=n(kNe,"STRONG",{});var gyt=s(t8e);j0r=r(gyt,"convbert"),gyt.forEach(t),D0r=r(kNe," \u2014 "),oY=n(kNe,"A",{href:!0});var hyt=s(oY);G0r=r(hyt,"TFConvBertForTokenClassification"),hyt.forEach(t),O0r=r(kNe," (ConvBERT model)"),kNe.forEach(t),V0r=i(me),f4=n(me,"LI",{});var SNe=s(f4);a8e=n(SNe,"STRONG",{});var pyt=s(a8e);X0r=r(pyt,"deberta"),pyt.forEach(t),z0r=r(SNe," \u2014 "),rY=n(SNe,"A",{href:!0});var uyt=s(rY);W0r=r(uyt,"TFDebertaForTokenClassification"),uyt.forEach(t),Q0r=r(SNe," (DeBERTa model)"),SNe.forEach(t),H0r=i(me),m4=n(me,"LI",{});var RNe=s(m4);n8e=n(RNe,"STRONG",{});var _yt=s(n8e);U0r=r(_yt,"deberta-v2"),_yt.forEach(t),J0r=r(RNe," \u2014 "),tY=n(RNe,"A",{href:!0});var byt=s(tY);Y0r=r(byt,"TFDebertaV2ForTokenClassification"),byt.forEach(t),K0r=r(RNe," (DeBERTa-v2 model)"),RNe.forEach(t),Z0r=i(me),g4=n(me,"LI",{});var PNe=s(g4);s8e=n(PNe,"STRONG",{});var vyt=s(s8e);eAr=r(vyt,"distilbert"),vyt.forEach(t),oAr=r(PNe," \u2014 "),aY=n(PNe,"A",{href:!0});var Fyt=s(aY);rAr=r(Fyt,"TFDistilBertForTokenClassification"),Fyt.forEach(t),tAr=r(PNe," (DistilBERT model)"),PNe.forEach(t),aAr=i(me),h4=n(me,"LI",{});var BNe=s(h4);l8e=n(BNe,"STRONG",{});var Tyt=s(l8e);nAr=r(Tyt,"electra"),Tyt.forEach(t),sAr=r(BNe," \u2014 "),nY=n(BNe,"A",{href:!0});var Myt=s(nY);lAr=r(Myt,"TFElectraForTokenClassification"),Myt.forEach(t),iAr=r(BNe," (ELECTRA model)"),BNe.forEach(t),dAr=i(me),p4=n(me,"LI",{});var INe=s(p4);i8e=n(INe,"STRONG",{});var Eyt=s(i8e);cAr=r(Eyt,"flaubert"),Eyt.forEach(t),fAr=r(INe," \u2014 "),sY=n(INe,"A",{href:!0});var Cyt=s(sY);mAr=r(Cyt,"TFFlaubertForTokenClassification"),Cyt.forEach(t),gAr=r(INe," (FlauBERT model)"),INe.forEach(t),hAr=i(me),u4=n(me,"LI",{});var NNe=s(u4);d8e=n(NNe,"STRONG",{});var wyt=s(d8e);pAr=r(wyt,"funnel"),wyt.forEach(t),uAr=r(NNe," \u2014 "),lY=n(NNe,"A",{href:!0});var Ayt=s(lY);_Ar=r(Ayt,"TFFunnelForTokenClassification"),Ayt.forEach(t),bAr=r(NNe," (Funnel Transformer model)"),NNe.forEach(t),vAr=i(me),_4=n(me,"LI",{});var qNe=s(_4);c8e=n(qNe,"STRONG",{});var yyt=s(c8e);FAr=r(yyt,"layoutlm"),yyt.forEach(t),TAr=r(qNe," \u2014 "),iY=n(qNe,"A",{href:!0});var Lyt=s(iY);MAr=r(Lyt,"TFLayoutLMForTokenClassification"),Lyt.forEach(t),EAr=r(qNe," (LayoutLM model)"),qNe.forEach(t),CAr=i(me),b4=n(me,"LI",{});var jNe=s(b4);f8e=n(jNe,"STRONG",{});var xyt=s(f8e);wAr=r(xyt,"longformer"),xyt.forEach(t),AAr=r(jNe," \u2014 "),dY=n(jNe,"A",{href:!0});var $yt=s(dY);yAr=r($yt,"TFLongformerForTokenClassification"),$yt.forEach(t),LAr=r(jNe," (Longformer model)"),jNe.forEach(t),xAr=i(me),v4=n(me,"LI",{});var DNe=s(v4);m8e=n(DNe,"STRONG",{});var kyt=s(m8e);$Ar=r(kyt,"mobilebert"),kyt.forEach(t),kAr=r(DNe," \u2014 "),cY=n(DNe,"A",{href:!0});var Syt=s(cY);SAr=r(Syt,"TFMobileBertForTokenClassification"),Syt.forEach(t),RAr=r(DNe," (MobileBERT model)"),DNe.forEach(t),PAr=i(me),F4=n(me,"LI",{});var GNe=s(F4);g8e=n(GNe,"STRONG",{});var Ryt=s(g8e);BAr=r(Ryt,"mpnet"),Ryt.forEach(t),IAr=r(GNe," \u2014 "),fY=n(GNe,"A",{href:!0});var Pyt=s(fY);NAr=r(Pyt,"TFMPNetForTokenClassification"),Pyt.forEach(t),qAr=r(GNe," (MPNet model)"),GNe.forEach(t),jAr=i(me),T4=n(me,"LI",{});var ONe=s(T4);h8e=n(ONe,"STRONG",{});var Byt=s(h8e);DAr=r(Byt,"rembert"),Byt.forEach(t),GAr=r(ONe," \u2014 "),mY=n(ONe,"A",{href:!0});var Iyt=s(mY);OAr=r(Iyt,"TFRemBertForTokenClassification"),Iyt.forEach(t),VAr=r(ONe," (RemBERT model)"),ONe.forEach(t),XAr=i(me),M4=n(me,"LI",{});var VNe=s(M4);p8e=n(VNe,"STRONG",{});var Nyt=s(p8e);zAr=r(Nyt,"roberta"),Nyt.forEach(t),WAr=r(VNe," \u2014 "),gY=n(VNe,"A",{href:!0});var qyt=s(gY);QAr=r(qyt,"TFRobertaForTokenClassification"),qyt.forEach(t),HAr=r(VNe," (RoBERTa model)"),VNe.forEach(t),UAr=i(me),E4=n(me,"LI",{});var XNe=s(E4);u8e=n(XNe,"STRONG",{});var jyt=s(u8e);JAr=r(jyt,"roformer"),jyt.forEach(t),YAr=r(XNe," \u2014 "),hY=n(XNe,"A",{href:!0});var Dyt=s(hY);KAr=r(Dyt,"TFRoFormerForTokenClassification"),Dyt.forEach(t),ZAr=r(XNe," (RoFormer model)"),XNe.forEach(t),eyr=i(me),C4=n(me,"LI",{});var zNe=s(C4);_8e=n(zNe,"STRONG",{});var Gyt=s(_8e);oyr=r(Gyt,"xlm"),Gyt.forEach(t),ryr=r(zNe," \u2014 "),pY=n(zNe,"A",{href:!0});var Oyt=s(pY);tyr=r(Oyt,"TFXLMForTokenClassification"),Oyt.forEach(t),ayr=r(zNe," (XLM model)"),zNe.forEach(t),nyr=i(me),w4=n(me,"LI",{});var WNe=s(w4);b8e=n(WNe,"STRONG",{});var Vyt=s(b8e);syr=r(Vyt,"xlm-roberta"),Vyt.forEach(t),lyr=r(WNe," \u2014 "),uY=n(WNe,"A",{href:!0});var Xyt=s(uY);iyr=r(Xyt,"TFXLMRobertaForTokenClassification"),Xyt.forEach(t),dyr=r(WNe," (XLM-RoBERTa model)"),WNe.forEach(t),cyr=i(me),A4=n(me,"LI",{});var QNe=s(A4);v8e=n(QNe,"STRONG",{});var zyt=s(v8e);fyr=r(zyt,"xlnet"),zyt.forEach(t),myr=r(QNe," \u2014 "),_Y=n(QNe,"A",{href:!0});var Wyt=s(_Y);gyr=r(Wyt,"TFXLNetForTokenClassification"),Wyt.forEach(t),hyr=r(QNe," (XLNet model)"),QNe.forEach(t),me.forEach(t),pyr=i(Ol),T(y4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),XGe=i(f),kc=n(f,"H2",{class:!0});var ZVe=s(kc);L4=n(ZVe,"A",{id:!0,class:!0,href:!0});var Qyt=s(L4);F8e=n(Qyt,"SPAN",{});var Hyt=s(F8e);T(KL.$$.fragment,Hyt),Hyt.forEach(t),Qyt.forEach(t),uyr=i(ZVe),T8e=n(ZVe,"SPAN",{});var Uyt=s(T8e);_yr=r(Uyt,"TFAutoModelForQuestionAnswering"),Uyt.forEach(t),ZVe.forEach(t),zGe=i(f),cr=n(f,"DIV",{class:!0});var Vl=s(cr);T(ZL.$$.fragment,Vl),byr=i(Vl),Sc=n(Vl,"P",{});var Hoe=s(Sc);vyr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bY=n(Hoe,"A",{href:!0});var Jyt=s(bY);Fyr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),Tyr=r(Hoe," class method or the "),vY=n(Hoe,"A",{href:!0});var Yyt=s(vY);Myr=r(Yyt,"from_config()"),Yyt.forEach(t),Eyr=r(Hoe,` class
method.`),Hoe.forEach(t),Cyr=i(Vl),ex=n(Vl,"P",{});var eXe=s(ex);wyr=r(eXe,"This class cannot be instantiated directly using "),M8e=n(eXe,"CODE",{});var Kyt=s(M8e);Ayr=r(Kyt,"__init__()"),Kyt.forEach(t),yyr=r(eXe," (throws an error)."),eXe.forEach(t),Lyr=i(Vl),Gt=n(Vl,"DIV",{class:!0});var $w=s(Gt);T(ox.$$.fragment,$w),xyr=i($w),E8e=n($w,"P",{});var Zyt=s(E8e);$yr=r(Zyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zyt.forEach(t),kyr=i($w),Rc=n($w,"P",{});var Uoe=s(Rc);Syr=r(Uoe,`Note:
Loading a model from its configuration file does `),C8e=n(Uoe,"STRONG",{});var eLt=s(C8e);Ryr=r(eLt,"not"),eLt.forEach(t),Pyr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Uoe,"A",{href:!0});var oLt=s(FY);Byr=r(oLt,"from_pretrained()"),oLt.forEach(t),Iyr=r(Uoe," to load the model weights."),Uoe.forEach(t),Nyr=i($w),T(x4.$$.fragment,$w),$w.forEach(t),qyr=i(Vl),qr=n(Vl,"DIV",{class:!0});var Xl=s(qr);T(rx.$$.fragment,Xl),jyr=i(Xl),w8e=n(Xl,"P",{});var rLt=s(w8e);Dyr=r(rLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rLt.forEach(t),Gyr=i(Xl),un=n(Xl,"P",{});var kw=s(un);Oyr=r(kw,"The model class to instantiate is selected based on the "),A8e=n(kw,"CODE",{});var tLt=s(A8e);Vyr=r(tLt,"model_type"),tLt.forEach(t),Xyr=r(kw,` property of the config object (either
passed as an argument or loaded from `),y8e=n(kw,"CODE",{});var aLt=s(y8e);zyr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),Wyr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L8e=n(kw,"CODE",{});var nLt=s(L8e);Qyr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),Hyr=r(kw,":"),kw.forEach(t),Uyr=i(Xl),ce=n(Xl,"UL",{});var ge=s(ce);$4=n(ge,"LI",{});var HNe=s($4);x8e=n(HNe,"STRONG",{});var sLt=s(x8e);Jyr=r(sLt,"albert"),sLt.forEach(t),Yyr=r(HNe," \u2014 "),TY=n(HNe,"A",{href:!0});var lLt=s(TY);Kyr=r(lLt,"TFAlbertForQuestionAnswering"),lLt.forEach(t),Zyr=r(HNe," (ALBERT model)"),HNe.forEach(t),eLr=i(ge),k4=n(ge,"LI",{});var UNe=s(k4);$8e=n(UNe,"STRONG",{});var iLt=s($8e);oLr=r(iLt,"bert"),iLt.forEach(t),rLr=r(UNe," \u2014 "),MY=n(UNe,"A",{href:!0});var dLt=s(MY);tLr=r(dLt,"TFBertForQuestionAnswering"),dLt.forEach(t),aLr=r(UNe," (BERT model)"),UNe.forEach(t),nLr=i(ge),S4=n(ge,"LI",{});var JNe=s(S4);k8e=n(JNe,"STRONG",{});var cLt=s(k8e);sLr=r(cLt,"camembert"),cLt.forEach(t),lLr=r(JNe," \u2014 "),EY=n(JNe,"A",{href:!0});var fLt=s(EY);iLr=r(fLt,"TFCamembertForQuestionAnswering"),fLt.forEach(t),dLr=r(JNe," (CamemBERT model)"),JNe.forEach(t),cLr=i(ge),R4=n(ge,"LI",{});var YNe=s(R4);S8e=n(YNe,"STRONG",{});var mLt=s(S8e);fLr=r(mLt,"convbert"),mLt.forEach(t),mLr=r(YNe," \u2014 "),CY=n(YNe,"A",{href:!0});var gLt=s(CY);gLr=r(gLt,"TFConvBertForQuestionAnswering"),gLt.forEach(t),hLr=r(YNe," (ConvBERT model)"),YNe.forEach(t),pLr=i(ge),P4=n(ge,"LI",{});var KNe=s(P4);R8e=n(KNe,"STRONG",{});var hLt=s(R8e);uLr=r(hLt,"deberta"),hLt.forEach(t),_Lr=r(KNe," \u2014 "),wY=n(KNe,"A",{href:!0});var pLt=s(wY);bLr=r(pLt,"TFDebertaForQuestionAnswering"),pLt.forEach(t),vLr=r(KNe," (DeBERTa model)"),KNe.forEach(t),FLr=i(ge),B4=n(ge,"LI",{});var ZNe=s(B4);P8e=n(ZNe,"STRONG",{});var uLt=s(P8e);TLr=r(uLt,"deberta-v2"),uLt.forEach(t),MLr=r(ZNe," \u2014 "),AY=n(ZNe,"A",{href:!0});var _Lt=s(AY);ELr=r(_Lt,"TFDebertaV2ForQuestionAnswering"),_Lt.forEach(t),CLr=r(ZNe," (DeBERTa-v2 model)"),ZNe.forEach(t),wLr=i(ge),I4=n(ge,"LI",{});var eqe=s(I4);B8e=n(eqe,"STRONG",{});var bLt=s(B8e);ALr=r(bLt,"distilbert"),bLt.forEach(t),yLr=r(eqe," \u2014 "),yY=n(eqe,"A",{href:!0});var vLt=s(yY);LLr=r(vLt,"TFDistilBertForQuestionAnswering"),vLt.forEach(t),xLr=r(eqe," (DistilBERT model)"),eqe.forEach(t),$Lr=i(ge),N4=n(ge,"LI",{});var oqe=s(N4);I8e=n(oqe,"STRONG",{});var FLt=s(I8e);kLr=r(FLt,"electra"),FLt.forEach(t),SLr=r(oqe," \u2014 "),LY=n(oqe,"A",{href:!0});var TLt=s(LY);RLr=r(TLt,"TFElectraForQuestionAnswering"),TLt.forEach(t),PLr=r(oqe," (ELECTRA model)"),oqe.forEach(t),BLr=i(ge),q4=n(ge,"LI",{});var rqe=s(q4);N8e=n(rqe,"STRONG",{});var MLt=s(N8e);ILr=r(MLt,"flaubert"),MLt.forEach(t),NLr=r(rqe," \u2014 "),xY=n(rqe,"A",{href:!0});var ELt=s(xY);qLr=r(ELt,"TFFlaubertForQuestionAnsweringSimple"),ELt.forEach(t),jLr=r(rqe," (FlauBERT model)"),rqe.forEach(t),DLr=i(ge),j4=n(ge,"LI",{});var tqe=s(j4);q8e=n(tqe,"STRONG",{});var CLt=s(q8e);GLr=r(CLt,"funnel"),CLt.forEach(t),OLr=r(tqe," \u2014 "),$Y=n(tqe,"A",{href:!0});var wLt=s($Y);VLr=r(wLt,"TFFunnelForQuestionAnswering"),wLt.forEach(t),XLr=r(tqe," (Funnel Transformer model)"),tqe.forEach(t),zLr=i(ge),D4=n(ge,"LI",{});var aqe=s(D4);j8e=n(aqe,"STRONG",{});var ALt=s(j8e);WLr=r(ALt,"gptj"),ALt.forEach(t),QLr=r(aqe," \u2014 "),kY=n(aqe,"A",{href:!0});var yLt=s(kY);HLr=r(yLt,"TFGPTJForQuestionAnswering"),yLt.forEach(t),ULr=r(aqe," (GPT-J model)"),aqe.forEach(t),JLr=i(ge),G4=n(ge,"LI",{});var nqe=s(G4);D8e=n(nqe,"STRONG",{});var LLt=s(D8e);YLr=r(LLt,"longformer"),LLt.forEach(t),KLr=r(nqe," \u2014 "),SY=n(nqe,"A",{href:!0});var xLt=s(SY);ZLr=r(xLt,"TFLongformerForQuestionAnswering"),xLt.forEach(t),exr=r(nqe," (Longformer model)"),nqe.forEach(t),oxr=i(ge),O4=n(ge,"LI",{});var sqe=s(O4);G8e=n(sqe,"STRONG",{});var $Lt=s(G8e);rxr=r($Lt,"mobilebert"),$Lt.forEach(t),txr=r(sqe," \u2014 "),RY=n(sqe,"A",{href:!0});var kLt=s(RY);axr=r(kLt,"TFMobileBertForQuestionAnswering"),kLt.forEach(t),nxr=r(sqe," (MobileBERT model)"),sqe.forEach(t),sxr=i(ge),V4=n(ge,"LI",{});var lqe=s(V4);O8e=n(lqe,"STRONG",{});var SLt=s(O8e);lxr=r(SLt,"mpnet"),SLt.forEach(t),ixr=r(lqe," \u2014 "),PY=n(lqe,"A",{href:!0});var RLt=s(PY);dxr=r(RLt,"TFMPNetForQuestionAnswering"),RLt.forEach(t),cxr=r(lqe," (MPNet model)"),lqe.forEach(t),fxr=i(ge),X4=n(ge,"LI",{});var iqe=s(X4);V8e=n(iqe,"STRONG",{});var PLt=s(V8e);mxr=r(PLt,"rembert"),PLt.forEach(t),gxr=r(iqe," \u2014 "),BY=n(iqe,"A",{href:!0});var BLt=s(BY);hxr=r(BLt,"TFRemBertForQuestionAnswering"),BLt.forEach(t),pxr=r(iqe," (RemBERT model)"),iqe.forEach(t),uxr=i(ge),z4=n(ge,"LI",{});var dqe=s(z4);X8e=n(dqe,"STRONG",{});var ILt=s(X8e);_xr=r(ILt,"roberta"),ILt.forEach(t),bxr=r(dqe," \u2014 "),IY=n(dqe,"A",{href:!0});var NLt=s(IY);vxr=r(NLt,"TFRobertaForQuestionAnswering"),NLt.forEach(t),Fxr=r(dqe," (RoBERTa model)"),dqe.forEach(t),Txr=i(ge),W4=n(ge,"LI",{});var cqe=s(W4);z8e=n(cqe,"STRONG",{});var qLt=s(z8e);Mxr=r(qLt,"roformer"),qLt.forEach(t),Exr=r(cqe," \u2014 "),NY=n(cqe,"A",{href:!0});var jLt=s(NY);Cxr=r(jLt,"TFRoFormerForQuestionAnswering"),jLt.forEach(t),wxr=r(cqe," (RoFormer model)"),cqe.forEach(t),Axr=i(ge),Q4=n(ge,"LI",{});var fqe=s(Q4);W8e=n(fqe,"STRONG",{});var DLt=s(W8e);yxr=r(DLt,"xlm"),DLt.forEach(t),Lxr=r(fqe," \u2014 "),qY=n(fqe,"A",{href:!0});var GLt=s(qY);xxr=r(GLt,"TFXLMForQuestionAnsweringSimple"),GLt.forEach(t),$xr=r(fqe," (XLM model)"),fqe.forEach(t),kxr=i(ge),H4=n(ge,"LI",{});var mqe=s(H4);Q8e=n(mqe,"STRONG",{});var OLt=s(Q8e);Sxr=r(OLt,"xlm-roberta"),OLt.forEach(t),Rxr=r(mqe," \u2014 "),jY=n(mqe,"A",{href:!0});var VLt=s(jY);Pxr=r(VLt,"TFXLMRobertaForQuestionAnswering"),VLt.forEach(t),Bxr=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),Ixr=i(ge),U4=n(ge,"LI",{});var gqe=s(U4);H8e=n(gqe,"STRONG",{});var XLt=s(H8e);Nxr=r(XLt,"xlnet"),XLt.forEach(t),qxr=r(gqe," \u2014 "),DY=n(gqe,"A",{href:!0});var zLt=s(DY);jxr=r(zLt,"TFXLNetForQuestionAnsweringSimple"),zLt.forEach(t),Dxr=r(gqe," (XLNet model)"),gqe.forEach(t),ge.forEach(t),Gxr=i(Xl),T(J4.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),WGe=i(f),Pc=n(f,"H2",{class:!0});var oXe=s(Pc);Y4=n(oXe,"A",{id:!0,class:!0,href:!0});var WLt=s(Y4);U8e=n(WLt,"SPAN",{});var QLt=s(U8e);T(tx.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),Oxr=i(oXe),J8e=n(oXe,"SPAN",{});var HLt=s(J8e);Vxr=r(HLt,"TFAutoModelForVision2Seq"),HLt.forEach(t),oXe.forEach(t),QGe=i(f),fr=n(f,"DIV",{class:!0});var zl=s(fr);T(ax.$$.fragment,zl),Xxr=i(zl),Bc=n(zl,"P",{});var Joe=s(Bc);zxr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GY=n(Joe,"A",{href:!0});var ULt=s(GY);Wxr=r(ULt,"from_pretrained()"),ULt.forEach(t),Qxr=r(Joe," class method or the "),OY=n(Joe,"A",{href:!0});var JLt=s(OY);Hxr=r(JLt,"from_config()"),JLt.forEach(t),Uxr=r(Joe,` class
method.`),Joe.forEach(t),Jxr=i(zl),nx=n(zl,"P",{});var rXe=s(nx);Yxr=r(rXe,"This class cannot be instantiated directly using "),Y8e=n(rXe,"CODE",{});var YLt=s(Y8e);Kxr=r(YLt,"__init__()"),YLt.forEach(t),Zxr=r(rXe," (throws an error)."),rXe.forEach(t),e$r=i(zl),Ot=n(zl,"DIV",{class:!0});var Sw=s(Ot);T(sx.$$.fragment,Sw),o$r=i(Sw),K8e=n(Sw,"P",{});var KLt=s(K8e);r$r=r(KLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KLt.forEach(t),t$r=i(Sw),Ic=n(Sw,"P",{});var Yoe=s(Ic);a$r=r(Yoe,`Note:
Loading a model from its configuration file does `),Z8e=n(Yoe,"STRONG",{});var ZLt=s(Z8e);n$r=r(ZLt,"not"),ZLt.forEach(t),s$r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Yoe,"A",{href:!0});var ext=s(VY);l$r=r(ext,"from_pretrained()"),ext.forEach(t),i$r=r(Yoe," to load the model weights."),Yoe.forEach(t),d$r=i(Sw),T(K4.$$.fragment,Sw),Sw.forEach(t),c$r=i(zl),jr=n(zl,"DIV",{class:!0});var Wl=s(jr);T(lx.$$.fragment,Wl),f$r=i(Wl),e9e=n(Wl,"P",{});var oxt=s(e9e);m$r=r(oxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oxt.forEach(t),g$r=i(Wl),_n=n(Wl,"P",{});var Rw=s(_n);h$r=r(Rw,"The model class to instantiate is selected based on the "),o9e=n(Rw,"CODE",{});var rxt=s(o9e);p$r=r(rxt,"model_type"),rxt.forEach(t),u$r=r(Rw,` property of the config object (either
passed as an argument or loaded from `),r9e=n(Rw,"CODE",{});var txt=s(r9e);_$r=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),b$r=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=n(Rw,"CODE",{});var axt=s(t9e);v$r=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),F$r=r(Rw,":"),Rw.forEach(t),T$r=i(Wl),a9e=n(Wl,"UL",{});var nxt=s(a9e);Z4=n(nxt,"LI",{});var hqe=s(Z4);n9e=n(hqe,"STRONG",{});var sxt=s(n9e);M$r=r(sxt,"vision-encoder-decoder"),sxt.forEach(t),E$r=r(hqe," \u2014 "),XY=n(hqe,"A",{href:!0});var lxt=s(XY);C$r=r(lxt,"TFVisionEncoderDecoderModel"),lxt.forEach(t),w$r=r(hqe," (Vision Encoder decoder model)"),hqe.forEach(t),nxt.forEach(t),A$r=i(Wl),T(eE.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),HGe=i(f),Nc=n(f,"H2",{class:!0});var tXe=s(Nc);oE=n(tXe,"A",{id:!0,class:!0,href:!0});var ixt=s(oE);s9e=n(ixt,"SPAN",{});var dxt=s(s9e);T(ix.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),y$r=i(tXe),l9e=n(tXe,"SPAN",{});var cxt=s(l9e);L$r=r(cxt,"TFAutoModelForSpeechSeq2Seq"),cxt.forEach(t),tXe.forEach(t),UGe=i(f),mr=n(f,"DIV",{class:!0});var Ql=s(mr);T(dx.$$.fragment,Ql),x$r=i(Ql),qc=n(Ql,"P",{});var Koe=s(qc);$$r=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zY=n(Koe,"A",{href:!0});var fxt=s(zY);k$r=r(fxt,"from_pretrained()"),fxt.forEach(t),S$r=r(Koe," class method or the "),WY=n(Koe,"A",{href:!0});var mxt=s(WY);R$r=r(mxt,"from_config()"),mxt.forEach(t),P$r=r(Koe,` class
method.`),Koe.forEach(t),B$r=i(Ql),cx=n(Ql,"P",{});var aXe=s(cx);I$r=r(aXe,"This class cannot be instantiated directly using "),i9e=n(aXe,"CODE",{});var gxt=s(i9e);N$r=r(gxt,"__init__()"),gxt.forEach(t),q$r=r(aXe," (throws an error)."),aXe.forEach(t),j$r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Pw=s(Vt);T(fx.$$.fragment,Pw),D$r=i(Pw),d9e=n(Pw,"P",{});var hxt=s(d9e);G$r=r(hxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hxt.forEach(t),O$r=i(Pw),jc=n(Pw,"P",{});var Zoe=s(jc);V$r=r(Zoe,`Note:
Loading a model from its configuration file does `),c9e=n(Zoe,"STRONG",{});var pxt=s(c9e);X$r=r(pxt,"not"),pxt.forEach(t),z$r=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Zoe,"A",{href:!0});var uxt=s(QY);W$r=r(uxt,"from_pretrained()"),uxt.forEach(t),Q$r=r(Zoe," to load the model weights."),Zoe.forEach(t),H$r=i(Pw),T(rE.$$.fragment,Pw),Pw.forEach(t),U$r=i(Ql),Dr=n(Ql,"DIV",{class:!0});var Hl=s(Dr);T(mx.$$.fragment,Hl),J$r=i(Hl),f9e=n(Hl,"P",{});var _xt=s(f9e);Y$r=r(_xt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_xt.forEach(t),K$r=i(Hl),bn=n(Hl,"P",{});var Bw=s(bn);Z$r=r(Bw,"The model class to instantiate is selected based on the "),m9e=n(Bw,"CODE",{});var bxt=s(m9e);ekr=r(bxt,"model_type"),bxt.forEach(t),okr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),g9e=n(Bw,"CODE",{});var vxt=s(g9e);rkr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),tkr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=n(Bw,"CODE",{});var Fxt=s(h9e);akr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),nkr=r(Bw,":"),Bw.forEach(t),skr=i(Hl),p9e=n(Hl,"UL",{});var Txt=s(p9e);tE=n(Txt,"LI",{});var pqe=s(tE);u9e=n(pqe,"STRONG",{});var Mxt=s(u9e);lkr=r(Mxt,"speech_to_text"),Mxt.forEach(t),ikr=r(pqe," \u2014 "),HY=n(pqe,"A",{href:!0});var Ext=s(HY);dkr=r(Ext,"TFSpeech2TextForConditionalGeneration"),Ext.forEach(t),ckr=r(pqe," (Speech2Text model)"),pqe.forEach(t),Txt.forEach(t),fkr=i(Hl),T(aE.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),JGe=i(f),Dc=n(f,"H2",{class:!0});var nXe=s(Dc);nE=n(nXe,"A",{id:!0,class:!0,href:!0});var Cxt=s(nE);_9e=n(Cxt,"SPAN",{});var wxt=s(_9e);T(gx.$$.fragment,wxt),wxt.forEach(t),Cxt.forEach(t),mkr=i(nXe),b9e=n(nXe,"SPAN",{});var Axt=s(b9e);gkr=r(Axt,"FlaxAutoModel"),Axt.forEach(t),nXe.forEach(t),YGe=i(f),gr=n(f,"DIV",{class:!0});var Ul=s(gr);T(hx.$$.fragment,Ul),hkr=i(Ul),Gc=n(Ul,"P",{});var ere=s(Gc);pkr=r(ere,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UY=n(ere,"A",{href:!0});var yxt=s(UY);ukr=r(yxt,"from_pretrained()"),yxt.forEach(t),_kr=r(ere," class method or the "),JY=n(ere,"A",{href:!0});var Lxt=s(JY);bkr=r(Lxt,"from_config()"),Lxt.forEach(t),vkr=r(ere,` class
method.`),ere.forEach(t),Fkr=i(Ul),px=n(Ul,"P",{});var sXe=s(px);Tkr=r(sXe,"This class cannot be instantiated directly using "),v9e=n(sXe,"CODE",{});var xxt=s(v9e);Mkr=r(xxt,"__init__()"),xxt.forEach(t),Ekr=r(sXe," (throws an error)."),sXe.forEach(t),Ckr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var Iw=s(Xt);T(ux.$$.fragment,Iw),wkr=i(Iw),F9e=n(Iw,"P",{});var $xt=s(F9e);Akr=r($xt,"Instantiates one of the base model classes of the library from a configuration."),$xt.forEach(t),ykr=i(Iw),Oc=n(Iw,"P",{});var ore=s(Oc);Lkr=r(ore,`Note:
Loading a model from its configuration file does `),T9e=n(ore,"STRONG",{});var kxt=s(T9e);xkr=r(kxt,"not"),kxt.forEach(t),$kr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(ore,"A",{href:!0});var Sxt=s(YY);kkr=r(Sxt,"from_pretrained()"),Sxt.forEach(t),Skr=r(ore," to load the model weights."),ore.forEach(t),Rkr=i(Iw),T(sE.$$.fragment,Iw),Iw.forEach(t),Pkr=i(Ul),Gr=n(Ul,"DIV",{class:!0});var Jl=s(Gr);T(_x.$$.fragment,Jl),Bkr=i(Jl),M9e=n(Jl,"P",{});var Rxt=s(M9e);Ikr=r(Rxt,"Instantiate one of the base model classes of the library from a pretrained model."),Rxt.forEach(t),Nkr=i(Jl),vn=n(Jl,"P",{});var Nw=s(vn);qkr=r(Nw,"The model class to instantiate is selected based on the "),E9e=n(Nw,"CODE",{});var Pxt=s(E9e);jkr=r(Pxt,"model_type"),Pxt.forEach(t),Dkr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),C9e=n(Nw,"CODE",{});var Bxt=s(C9e);Gkr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),Okr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=n(Nw,"CODE",{});var Ixt=s(w9e);Vkr=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),Xkr=r(Nw,":"),Nw.forEach(t),zkr=i(Jl),te=n(Jl,"UL",{});var ne=s(te);lE=n(ne,"LI",{});var uqe=s(lE);A9e=n(uqe,"STRONG",{});var Nxt=s(A9e);Wkr=r(Nxt,"albert"),Nxt.forEach(t),Qkr=r(uqe," \u2014 "),KY=n(uqe,"A",{href:!0});var qxt=s(KY);Hkr=r(qxt,"FlaxAlbertModel"),qxt.forEach(t),Ukr=r(uqe," (ALBERT model)"),uqe.forEach(t),Jkr=i(ne),iE=n(ne,"LI",{});var _qe=s(iE);y9e=n(_qe,"STRONG",{});var jxt=s(y9e);Ykr=r(jxt,"bart"),jxt.forEach(t),Kkr=r(_qe," \u2014 "),ZY=n(_qe,"A",{href:!0});var Dxt=s(ZY);Zkr=r(Dxt,"FlaxBartModel"),Dxt.forEach(t),eSr=r(_qe," (BART model)"),_qe.forEach(t),oSr=i(ne),dE=n(ne,"LI",{});var bqe=s(dE);L9e=n(bqe,"STRONG",{});var Gxt=s(L9e);rSr=r(Gxt,"beit"),Gxt.forEach(t),tSr=r(bqe," \u2014 "),eK=n(bqe,"A",{href:!0});var Oxt=s(eK);aSr=r(Oxt,"FlaxBeitModel"),Oxt.forEach(t),nSr=r(bqe," (BEiT model)"),bqe.forEach(t),sSr=i(ne),cE=n(ne,"LI",{});var vqe=s(cE);x9e=n(vqe,"STRONG",{});var Vxt=s(x9e);lSr=r(Vxt,"bert"),Vxt.forEach(t),iSr=r(vqe," \u2014 "),oK=n(vqe,"A",{href:!0});var Xxt=s(oK);dSr=r(Xxt,"FlaxBertModel"),Xxt.forEach(t),cSr=r(vqe," (BERT model)"),vqe.forEach(t),fSr=i(ne),fE=n(ne,"LI",{});var Fqe=s(fE);$9e=n(Fqe,"STRONG",{});var zxt=s($9e);mSr=r(zxt,"big_bird"),zxt.forEach(t),gSr=r(Fqe," \u2014 "),rK=n(Fqe,"A",{href:!0});var Wxt=s(rK);hSr=r(Wxt,"FlaxBigBirdModel"),Wxt.forEach(t),pSr=r(Fqe," (BigBird model)"),Fqe.forEach(t),uSr=i(ne),mE=n(ne,"LI",{});var Tqe=s(mE);k9e=n(Tqe,"STRONG",{});var Qxt=s(k9e);_Sr=r(Qxt,"blenderbot"),Qxt.forEach(t),bSr=r(Tqe," \u2014 "),tK=n(Tqe,"A",{href:!0});var Hxt=s(tK);vSr=r(Hxt,"FlaxBlenderbotModel"),Hxt.forEach(t),FSr=r(Tqe," (Blenderbot model)"),Tqe.forEach(t),TSr=i(ne),gE=n(ne,"LI",{});var Mqe=s(gE);S9e=n(Mqe,"STRONG",{});var Uxt=s(S9e);MSr=r(Uxt,"blenderbot-small"),Uxt.forEach(t),ESr=r(Mqe," \u2014 "),aK=n(Mqe,"A",{href:!0});var Jxt=s(aK);CSr=r(Jxt,"FlaxBlenderbotSmallModel"),Jxt.forEach(t),wSr=r(Mqe," (BlenderbotSmall model)"),Mqe.forEach(t),ASr=i(ne),hE=n(ne,"LI",{});var Eqe=s(hE);R9e=n(Eqe,"STRONG",{});var Yxt=s(R9e);ySr=r(Yxt,"clip"),Yxt.forEach(t),LSr=r(Eqe," \u2014 "),nK=n(Eqe,"A",{href:!0});var Kxt=s(nK);xSr=r(Kxt,"FlaxCLIPModel"),Kxt.forEach(t),$Sr=r(Eqe," (CLIP model)"),Eqe.forEach(t),kSr=i(ne),pE=n(ne,"LI",{});var Cqe=s(pE);P9e=n(Cqe,"STRONG",{});var Zxt=s(P9e);SSr=r(Zxt,"distilbert"),Zxt.forEach(t),RSr=r(Cqe," \u2014 "),sK=n(Cqe,"A",{href:!0});var e$t=s(sK);PSr=r(e$t,"FlaxDistilBertModel"),e$t.forEach(t),BSr=r(Cqe," (DistilBERT model)"),Cqe.forEach(t),ISr=i(ne),uE=n(ne,"LI",{});var wqe=s(uE);B9e=n(wqe,"STRONG",{});var o$t=s(B9e);NSr=r(o$t,"electra"),o$t.forEach(t),qSr=r(wqe," \u2014 "),lK=n(wqe,"A",{href:!0});var r$t=s(lK);jSr=r(r$t,"FlaxElectraModel"),r$t.forEach(t),DSr=r(wqe," (ELECTRA model)"),wqe.forEach(t),GSr=i(ne),_E=n(ne,"LI",{});var Aqe=s(_E);I9e=n(Aqe,"STRONG",{});var t$t=s(I9e);OSr=r(t$t,"gpt2"),t$t.forEach(t),VSr=r(Aqe," \u2014 "),iK=n(Aqe,"A",{href:!0});var a$t=s(iK);XSr=r(a$t,"FlaxGPT2Model"),a$t.forEach(t),zSr=r(Aqe," (OpenAI GPT-2 model)"),Aqe.forEach(t),WSr=i(ne),bE=n(ne,"LI",{});var yqe=s(bE);N9e=n(yqe,"STRONG",{});var n$t=s(N9e);QSr=r(n$t,"gpt_neo"),n$t.forEach(t),HSr=r(yqe," \u2014 "),dK=n(yqe,"A",{href:!0});var s$t=s(dK);USr=r(s$t,"FlaxGPTNeoModel"),s$t.forEach(t),JSr=r(yqe," (GPT Neo model)"),yqe.forEach(t),YSr=i(ne),vE=n(ne,"LI",{});var Lqe=s(vE);q9e=n(Lqe,"STRONG",{});var l$t=s(q9e);KSr=r(l$t,"gptj"),l$t.forEach(t),ZSr=r(Lqe," \u2014 "),cK=n(Lqe,"A",{href:!0});var i$t=s(cK);eRr=r(i$t,"FlaxGPTJModel"),i$t.forEach(t),oRr=r(Lqe," (GPT-J model)"),Lqe.forEach(t),rRr=i(ne),FE=n(ne,"LI",{});var xqe=s(FE);j9e=n(xqe,"STRONG",{});var d$t=s(j9e);tRr=r(d$t,"marian"),d$t.forEach(t),aRr=r(xqe," \u2014 "),fK=n(xqe,"A",{href:!0});var c$t=s(fK);nRr=r(c$t,"FlaxMarianModel"),c$t.forEach(t),sRr=r(xqe," (Marian model)"),xqe.forEach(t),lRr=i(ne),TE=n(ne,"LI",{});var $qe=s(TE);D9e=n($qe,"STRONG",{});var f$t=s(D9e);iRr=r(f$t,"mbart"),f$t.forEach(t),dRr=r($qe," \u2014 "),mK=n($qe,"A",{href:!0});var m$t=s(mK);cRr=r(m$t,"FlaxMBartModel"),m$t.forEach(t),fRr=r($qe," (mBART model)"),$qe.forEach(t),mRr=i(ne),ME=n(ne,"LI",{});var kqe=s(ME);G9e=n(kqe,"STRONG",{});var g$t=s(G9e);gRr=r(g$t,"mt5"),g$t.forEach(t),hRr=r(kqe," \u2014 "),gK=n(kqe,"A",{href:!0});var h$t=s(gK);pRr=r(h$t,"FlaxMT5Model"),h$t.forEach(t),uRr=r(kqe," (MT5 model)"),kqe.forEach(t),_Rr=i(ne),EE=n(ne,"LI",{});var Sqe=s(EE);O9e=n(Sqe,"STRONG",{});var p$t=s(O9e);bRr=r(p$t,"opt"),p$t.forEach(t),vRr=r(Sqe," \u2014 "),hK=n(Sqe,"A",{href:!0});var u$t=s(hK);FRr=r(u$t,"FlaxOPTModel"),u$t.forEach(t),TRr=r(Sqe," (OPT model)"),Sqe.forEach(t),MRr=i(ne),CE=n(ne,"LI",{});var Rqe=s(CE);V9e=n(Rqe,"STRONG",{});var _$t=s(V9e);ERr=r(_$t,"pegasus"),_$t.forEach(t),CRr=r(Rqe," \u2014 "),pK=n(Rqe,"A",{href:!0});var b$t=s(pK);wRr=r(b$t,"FlaxPegasusModel"),b$t.forEach(t),ARr=r(Rqe," (Pegasus model)"),Rqe.forEach(t),yRr=i(ne),wE=n(ne,"LI",{});var Pqe=s(wE);X9e=n(Pqe,"STRONG",{});var v$t=s(X9e);LRr=r(v$t,"roberta"),v$t.forEach(t),xRr=r(Pqe," \u2014 "),uK=n(Pqe,"A",{href:!0});var F$t=s(uK);$Rr=r(F$t,"FlaxRobertaModel"),F$t.forEach(t),kRr=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),SRr=i(ne),AE=n(ne,"LI",{});var Bqe=s(AE);z9e=n(Bqe,"STRONG",{});var T$t=s(z9e);RRr=r(T$t,"roformer"),T$t.forEach(t),PRr=r(Bqe," \u2014 "),_K=n(Bqe,"A",{href:!0});var M$t=s(_K);BRr=r(M$t,"FlaxRoFormerModel"),M$t.forEach(t),IRr=r(Bqe," (RoFormer model)"),Bqe.forEach(t),NRr=i(ne),yE=n(ne,"LI",{});var Iqe=s(yE);W9e=n(Iqe,"STRONG",{});var E$t=s(W9e);qRr=r(E$t,"t5"),E$t.forEach(t),jRr=r(Iqe," \u2014 "),bK=n(Iqe,"A",{href:!0});var C$t=s(bK);DRr=r(C$t,"FlaxT5Model"),C$t.forEach(t),GRr=r(Iqe," (T5 model)"),Iqe.forEach(t),ORr=i(ne),LE=n(ne,"LI",{});var Nqe=s(LE);Q9e=n(Nqe,"STRONG",{});var w$t=s(Q9e);VRr=r(w$t,"vision-text-dual-encoder"),w$t.forEach(t),XRr=r(Nqe," \u2014 "),vK=n(Nqe,"A",{href:!0});var A$t=s(vK);zRr=r(A$t,"FlaxVisionTextDualEncoderModel"),A$t.forEach(t),WRr=r(Nqe," (VisionTextDualEncoder model)"),Nqe.forEach(t),QRr=i(ne),xE=n(ne,"LI",{});var qqe=s(xE);H9e=n(qqe,"STRONG",{});var y$t=s(H9e);HRr=r(y$t,"vit"),y$t.forEach(t),URr=r(qqe," \u2014 "),FK=n(qqe,"A",{href:!0});var L$t=s(FK);JRr=r(L$t,"FlaxViTModel"),L$t.forEach(t),YRr=r(qqe," (ViT model)"),qqe.forEach(t),KRr=i(ne),$E=n(ne,"LI",{});var jqe=s($E);U9e=n(jqe,"STRONG",{});var x$t=s(U9e);ZRr=r(x$t,"wav2vec2"),x$t.forEach(t),ePr=r(jqe," \u2014 "),TK=n(jqe,"A",{href:!0});var $$t=s(TK);oPr=r($$t,"FlaxWav2Vec2Model"),$$t.forEach(t),rPr=r(jqe," (Wav2Vec2 model)"),jqe.forEach(t),tPr=i(ne),kE=n(ne,"LI",{});var Dqe=s(kE);J9e=n(Dqe,"STRONG",{});var k$t=s(J9e);aPr=r(k$t,"xglm"),k$t.forEach(t),nPr=r(Dqe," \u2014 "),MK=n(Dqe,"A",{href:!0});var S$t=s(MK);sPr=r(S$t,"FlaxXGLMModel"),S$t.forEach(t),lPr=r(Dqe," (XGLM model)"),Dqe.forEach(t),iPr=i(ne),SE=n(ne,"LI",{});var Gqe=s(SE);Y9e=n(Gqe,"STRONG",{});var R$t=s(Y9e);dPr=r(R$t,"xlm-roberta"),R$t.forEach(t),cPr=r(Gqe," \u2014 "),EK=n(Gqe,"A",{href:!0});var P$t=s(EK);fPr=r(P$t,"FlaxXLMRobertaModel"),P$t.forEach(t),mPr=r(Gqe," (XLM-RoBERTa model)"),Gqe.forEach(t),ne.forEach(t),gPr=i(Jl),T(RE.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),KGe=i(f),Vc=n(f,"H2",{class:!0});var lXe=s(Vc);PE=n(lXe,"A",{id:!0,class:!0,href:!0});var B$t=s(PE);K9e=n(B$t,"SPAN",{});var I$t=s(K9e);T(bx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),hPr=i(lXe),Z9e=n(lXe,"SPAN",{});var N$t=s(Z9e);pPr=r(N$t,"FlaxAutoModelForCausalLM"),N$t.forEach(t),lXe.forEach(t),ZGe=i(f),hr=n(f,"DIV",{class:!0});var Yl=s(hr);T(vx.$$.fragment,Yl),uPr=i(Yl),Xc=n(Yl,"P",{});var rre=s(Xc);_Pr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CK=n(rre,"A",{href:!0});var q$t=s(CK);bPr=r(q$t,"from_pretrained()"),q$t.forEach(t),vPr=r(rre," class method or the "),wK=n(rre,"A",{href:!0});var j$t=s(wK);FPr=r(j$t,"from_config()"),j$t.forEach(t),TPr=r(rre,` class
method.`),rre.forEach(t),MPr=i(Yl),Fx=n(Yl,"P",{});var iXe=s(Fx);EPr=r(iXe,"This class cannot be instantiated directly using "),eMe=n(iXe,"CODE",{});var D$t=s(eMe);CPr=r(D$t,"__init__()"),D$t.forEach(t),wPr=r(iXe," (throws an error)."),iXe.forEach(t),APr=i(Yl),zt=n(Yl,"DIV",{class:!0});var qw=s(zt);T(Tx.$$.fragment,qw),yPr=i(qw),oMe=n(qw,"P",{});var G$t=s(oMe);LPr=r(G$t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G$t.forEach(t),xPr=i(qw),zc=n(qw,"P",{});var tre=s(zc);$Pr=r(tre,`Note:
Loading a model from its configuration file does `),rMe=n(tre,"STRONG",{});var O$t=s(rMe);kPr=r(O$t,"not"),O$t.forEach(t),SPr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(tre,"A",{href:!0});var V$t=s(AK);RPr=r(V$t,"from_pretrained()"),V$t.forEach(t),PPr=r(tre," to load the model weights."),tre.forEach(t),BPr=i(qw),T(BE.$$.fragment,qw),qw.forEach(t),IPr=i(Yl),Or=n(Yl,"DIV",{class:!0});var Kl=s(Or);T(Mx.$$.fragment,Kl),NPr=i(Kl),tMe=n(Kl,"P",{});var X$t=s(tMe);qPr=r(X$t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X$t.forEach(t),jPr=i(Kl),Fn=n(Kl,"P",{});var jw=s(Fn);DPr=r(jw,"The model class to instantiate is selected based on the "),aMe=n(jw,"CODE",{});var z$t=s(aMe);GPr=r(z$t,"model_type"),z$t.forEach(t),OPr=r(jw,` property of the config object (either
passed as an argument or loaded from `),nMe=n(jw,"CODE",{});var W$t=s(nMe);VPr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),XPr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(jw,"CODE",{});var Q$t=s(sMe);zPr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),WPr=r(jw,":"),jw.forEach(t),QPr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);IE=n(Ne,"LI",{});var Oqe=s(IE);lMe=n(Oqe,"STRONG",{});var H$t=s(lMe);HPr=r(H$t,"bart"),H$t.forEach(t),UPr=r(Oqe," \u2014 "),yK=n(Oqe,"A",{href:!0});var U$t=s(yK);JPr=r(U$t,"FlaxBartForCausalLM"),U$t.forEach(t),YPr=r(Oqe," (BART model)"),Oqe.forEach(t),KPr=i(Ne),NE=n(Ne,"LI",{});var Vqe=s(NE);iMe=n(Vqe,"STRONG",{});var J$t=s(iMe);ZPr=r(J$t,"bert"),J$t.forEach(t),eBr=r(Vqe," \u2014 "),LK=n(Vqe,"A",{href:!0});var Y$t=s(LK);oBr=r(Y$t,"FlaxBertForCausalLM"),Y$t.forEach(t),rBr=r(Vqe," (BERT model)"),Vqe.forEach(t),tBr=i(Ne),qE=n(Ne,"LI",{});var Xqe=s(qE);dMe=n(Xqe,"STRONG",{});var K$t=s(dMe);aBr=r(K$t,"big_bird"),K$t.forEach(t),nBr=r(Xqe," \u2014 "),xK=n(Xqe,"A",{href:!0});var Z$t=s(xK);sBr=r(Z$t,"FlaxBigBirdForCausalLM"),Z$t.forEach(t),lBr=r(Xqe," (BigBird model)"),Xqe.forEach(t),iBr=i(Ne),jE=n(Ne,"LI",{});var zqe=s(jE);cMe=n(zqe,"STRONG",{});var ekt=s(cMe);dBr=r(ekt,"electra"),ekt.forEach(t),cBr=r(zqe," \u2014 "),$K=n(zqe,"A",{href:!0});var okt=s($K);fBr=r(okt,"FlaxElectraForCausalLM"),okt.forEach(t),mBr=r(zqe," (ELECTRA model)"),zqe.forEach(t),gBr=i(Ne),DE=n(Ne,"LI",{});var Wqe=s(DE);fMe=n(Wqe,"STRONG",{});var rkt=s(fMe);hBr=r(rkt,"gpt2"),rkt.forEach(t),pBr=r(Wqe," \u2014 "),kK=n(Wqe,"A",{href:!0});var tkt=s(kK);uBr=r(tkt,"FlaxGPT2LMHeadModel"),tkt.forEach(t),_Br=r(Wqe," (OpenAI GPT-2 model)"),Wqe.forEach(t),bBr=i(Ne),GE=n(Ne,"LI",{});var Qqe=s(GE);mMe=n(Qqe,"STRONG",{});var akt=s(mMe);vBr=r(akt,"gpt_neo"),akt.forEach(t),FBr=r(Qqe," \u2014 "),SK=n(Qqe,"A",{href:!0});var nkt=s(SK);TBr=r(nkt,"FlaxGPTNeoForCausalLM"),nkt.forEach(t),MBr=r(Qqe," (GPT Neo model)"),Qqe.forEach(t),EBr=i(Ne),OE=n(Ne,"LI",{});var Hqe=s(OE);gMe=n(Hqe,"STRONG",{});var skt=s(gMe);CBr=r(skt,"gptj"),skt.forEach(t),wBr=r(Hqe," \u2014 "),RK=n(Hqe,"A",{href:!0});var lkt=s(RK);ABr=r(lkt,"FlaxGPTJForCausalLM"),lkt.forEach(t),yBr=r(Hqe," (GPT-J model)"),Hqe.forEach(t),LBr=i(Ne),VE=n(Ne,"LI",{});var Uqe=s(VE);hMe=n(Uqe,"STRONG",{});var ikt=s(hMe);xBr=r(ikt,"opt"),ikt.forEach(t),$Br=r(Uqe," \u2014 "),PK=n(Uqe,"A",{href:!0});var dkt=s(PK);kBr=r(dkt,"FlaxOPTForCausalLM"),dkt.forEach(t),SBr=r(Uqe," (OPT model)"),Uqe.forEach(t),RBr=i(Ne),XE=n(Ne,"LI",{});var Jqe=s(XE);pMe=n(Jqe,"STRONG",{});var ckt=s(pMe);PBr=r(ckt,"roberta"),ckt.forEach(t),BBr=r(Jqe," \u2014 "),BK=n(Jqe,"A",{href:!0});var fkt=s(BK);IBr=r(fkt,"FlaxRobertaForCausalLM"),fkt.forEach(t),NBr=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),qBr=i(Ne),zE=n(Ne,"LI",{});var Yqe=s(zE);uMe=n(Yqe,"STRONG",{});var mkt=s(uMe);jBr=r(mkt,"xglm"),mkt.forEach(t),DBr=r(Yqe," \u2014 "),IK=n(Yqe,"A",{href:!0});var gkt=s(IK);GBr=r(gkt,"FlaxXGLMForCausalLM"),gkt.forEach(t),OBr=r(Yqe," (XGLM model)"),Yqe.forEach(t),Ne.forEach(t),VBr=i(Kl),T(WE.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),eOe=i(f),Wc=n(f,"H2",{class:!0});var dXe=s(Wc);QE=n(dXe,"A",{id:!0,class:!0,href:!0});var hkt=s(QE);_Me=n(hkt,"SPAN",{});var pkt=s(_Me);T(Ex.$$.fragment,pkt),pkt.forEach(t),hkt.forEach(t),XBr=i(dXe),bMe=n(dXe,"SPAN",{});var ukt=s(bMe);zBr=r(ukt,"FlaxAutoModelForPreTraining"),ukt.forEach(t),dXe.forEach(t),oOe=i(f),pr=n(f,"DIV",{class:!0});var Zl=s(pr);T(Cx.$$.fragment,Zl),WBr=i(Zl),Qc=n(Zl,"P",{});var are=s(Qc);QBr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NK=n(are,"A",{href:!0});var _kt=s(NK);HBr=r(_kt,"from_pretrained()"),_kt.forEach(t),UBr=r(are," class method or the "),qK=n(are,"A",{href:!0});var bkt=s(qK);JBr=r(bkt,"from_config()"),bkt.forEach(t),YBr=r(are,` class
method.`),are.forEach(t),KBr=i(Zl),wx=n(Zl,"P",{});var cXe=s(wx);ZBr=r(cXe,"This class cannot be instantiated directly using "),vMe=n(cXe,"CODE",{});var vkt=s(vMe);eIr=r(vkt,"__init__()"),vkt.forEach(t),oIr=r(cXe," (throws an error)."),cXe.forEach(t),rIr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Dw=s(Wt);T(Ax.$$.fragment,Dw),tIr=i(Dw),FMe=n(Dw,"P",{});var Fkt=s(FMe);aIr=r(Fkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fkt.forEach(t),nIr=i(Dw),Hc=n(Dw,"P",{});var nre=s(Hc);sIr=r(nre,`Note:
Loading a model from its configuration file does `),TMe=n(nre,"STRONG",{});var Tkt=s(TMe);lIr=r(Tkt,"not"),Tkt.forEach(t),iIr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(nre,"A",{href:!0});var Mkt=s(jK);dIr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),cIr=r(nre," to load the model weights."),nre.forEach(t),fIr=i(Dw),T(HE.$$.fragment,Dw),Dw.forEach(t),mIr=i(Zl),Vr=n(Zl,"DIV",{class:!0});var ei=s(Vr);T(yx.$$.fragment,ei),gIr=i(ei),MMe=n(ei,"P",{});var Ekt=s(MMe);hIr=r(Ekt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ekt.forEach(t),pIr=i(ei),Tn=n(ei,"P",{});var Gw=s(Tn);uIr=r(Gw,"The model class to instantiate is selected based on the "),EMe=n(Gw,"CODE",{});var Ckt=s(EMe);_Ir=r(Ckt,"model_type"),Ckt.forEach(t),bIr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),CMe=n(Gw,"CODE",{});var wkt=s(CMe);vIr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),FIr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(Gw,"CODE",{});var Akt=s(wMe);TIr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),MIr=r(Gw,":"),Gw.forEach(t),EIr=i(ei),Ee=n(ei,"UL",{});var we=s(Ee);UE=n(we,"LI",{});var Kqe=s(UE);AMe=n(Kqe,"STRONG",{});var ykt=s(AMe);CIr=r(ykt,"albert"),ykt.forEach(t),wIr=r(Kqe," \u2014 "),DK=n(Kqe,"A",{href:!0});var Lkt=s(DK);AIr=r(Lkt,"FlaxAlbertForPreTraining"),Lkt.forEach(t),yIr=r(Kqe," (ALBERT model)"),Kqe.forEach(t),LIr=i(we),JE=n(we,"LI",{});var Zqe=s(JE);yMe=n(Zqe,"STRONG",{});var xkt=s(yMe);xIr=r(xkt,"bart"),xkt.forEach(t),$Ir=r(Zqe," \u2014 "),GK=n(Zqe,"A",{href:!0});var $kt=s(GK);kIr=r($kt,"FlaxBartForConditionalGeneration"),$kt.forEach(t),SIr=r(Zqe," (BART model)"),Zqe.forEach(t),RIr=i(we),YE=n(we,"LI",{});var eje=s(YE);LMe=n(eje,"STRONG",{});var kkt=s(LMe);PIr=r(kkt,"bert"),kkt.forEach(t),BIr=r(eje," \u2014 "),OK=n(eje,"A",{href:!0});var Skt=s(OK);IIr=r(Skt,"FlaxBertForPreTraining"),Skt.forEach(t),NIr=r(eje," (BERT model)"),eje.forEach(t),qIr=i(we),KE=n(we,"LI",{});var oje=s(KE);xMe=n(oje,"STRONG",{});var Rkt=s(xMe);jIr=r(Rkt,"big_bird"),Rkt.forEach(t),DIr=r(oje," \u2014 "),VK=n(oje,"A",{href:!0});var Pkt=s(VK);GIr=r(Pkt,"FlaxBigBirdForPreTraining"),Pkt.forEach(t),OIr=r(oje," (BigBird model)"),oje.forEach(t),VIr=i(we),ZE=n(we,"LI",{});var rje=s(ZE);$Me=n(rje,"STRONG",{});var Bkt=s($Me);XIr=r(Bkt,"electra"),Bkt.forEach(t),zIr=r(rje," \u2014 "),XK=n(rje,"A",{href:!0});var Ikt=s(XK);WIr=r(Ikt,"FlaxElectraForPreTraining"),Ikt.forEach(t),QIr=r(rje," (ELECTRA model)"),rje.forEach(t),HIr=i(we),eC=n(we,"LI",{});var tje=s(eC);kMe=n(tje,"STRONG",{});var Nkt=s(kMe);UIr=r(Nkt,"mbart"),Nkt.forEach(t),JIr=r(tje," \u2014 "),zK=n(tje,"A",{href:!0});var qkt=s(zK);YIr=r(qkt,"FlaxMBartForConditionalGeneration"),qkt.forEach(t),KIr=r(tje," (mBART model)"),tje.forEach(t),ZIr=i(we),oC=n(we,"LI",{});var aje=s(oC);SMe=n(aje,"STRONG",{});var jkt=s(SMe);eNr=r(jkt,"mt5"),jkt.forEach(t),oNr=r(aje," \u2014 "),WK=n(aje,"A",{href:!0});var Dkt=s(WK);rNr=r(Dkt,"FlaxMT5ForConditionalGeneration"),Dkt.forEach(t),tNr=r(aje," (MT5 model)"),aje.forEach(t),aNr=i(we),rC=n(we,"LI",{});var nje=s(rC);RMe=n(nje,"STRONG",{});var Gkt=s(RMe);nNr=r(Gkt,"roberta"),Gkt.forEach(t),sNr=r(nje," \u2014 "),QK=n(nje,"A",{href:!0});var Okt=s(QK);lNr=r(Okt,"FlaxRobertaForMaskedLM"),Okt.forEach(t),iNr=r(nje," (RoBERTa model)"),nje.forEach(t),dNr=i(we),tC=n(we,"LI",{});var sje=s(tC);PMe=n(sje,"STRONG",{});var Vkt=s(PMe);cNr=r(Vkt,"roformer"),Vkt.forEach(t),fNr=r(sje," \u2014 "),HK=n(sje,"A",{href:!0});var Xkt=s(HK);mNr=r(Xkt,"FlaxRoFormerForMaskedLM"),Xkt.forEach(t),gNr=r(sje," (RoFormer model)"),sje.forEach(t),hNr=i(we),aC=n(we,"LI",{});var lje=s(aC);BMe=n(lje,"STRONG",{});var zkt=s(BMe);pNr=r(zkt,"t5"),zkt.forEach(t),uNr=r(lje," \u2014 "),UK=n(lje,"A",{href:!0});var Wkt=s(UK);_Nr=r(Wkt,"FlaxT5ForConditionalGeneration"),Wkt.forEach(t),bNr=r(lje," (T5 model)"),lje.forEach(t),vNr=i(we),nC=n(we,"LI",{});var ije=s(nC);IMe=n(ije,"STRONG",{});var Qkt=s(IMe);FNr=r(Qkt,"wav2vec2"),Qkt.forEach(t),TNr=r(ije," \u2014 "),JK=n(ije,"A",{href:!0});var Hkt=s(JK);MNr=r(Hkt,"FlaxWav2Vec2ForPreTraining"),Hkt.forEach(t),ENr=r(ije," (Wav2Vec2 model)"),ije.forEach(t),CNr=i(we),sC=n(we,"LI",{});var dje=s(sC);NMe=n(dje,"STRONG",{});var Ukt=s(NMe);wNr=r(Ukt,"xlm-roberta"),Ukt.forEach(t),ANr=r(dje," \u2014 "),YK=n(dje,"A",{href:!0});var Jkt=s(YK);yNr=r(Jkt,"FlaxXLMRobertaForMaskedLM"),Jkt.forEach(t),LNr=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),we.forEach(t),xNr=i(ei),T(lC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),rOe=i(f),Uc=n(f,"H2",{class:!0});var fXe=s(Uc);iC=n(fXe,"A",{id:!0,class:!0,href:!0});var Ykt=s(iC);qMe=n(Ykt,"SPAN",{});var Kkt=s(qMe);T(Lx.$$.fragment,Kkt),Kkt.forEach(t),Ykt.forEach(t),$Nr=i(fXe),jMe=n(fXe,"SPAN",{});var Zkt=s(jMe);kNr=r(Zkt,"FlaxAutoModelForMaskedLM"),Zkt.forEach(t),fXe.forEach(t),tOe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(xx.$$.fragment,oi),SNr=i(oi),Jc=n(oi,"P",{});var sre=s(Jc);RNr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KK=n(sre,"A",{href:!0});var eSt=s(KK);PNr=r(eSt,"from_pretrained()"),eSt.forEach(t),BNr=r(sre," class method or the "),ZK=n(sre,"A",{href:!0});var oSt=s(ZK);INr=r(oSt,"from_config()"),oSt.forEach(t),NNr=r(sre,` class
method.`),sre.forEach(t),qNr=i(oi),$x=n(oi,"P",{});var mXe=s($x);jNr=r(mXe,"This class cannot be instantiated directly using "),DMe=n(mXe,"CODE",{});var rSt=s(DMe);DNr=r(rSt,"__init__()"),rSt.forEach(t),GNr=r(mXe," (throws an error)."),mXe.forEach(t),ONr=i(oi),Qt=n(oi,"DIV",{class:!0});var Ow=s(Qt);T(kx.$$.fragment,Ow),VNr=i(Ow),GMe=n(Ow,"P",{});var tSt=s(GMe);XNr=r(tSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tSt.forEach(t),zNr=i(Ow),Yc=n(Ow,"P",{});var lre=s(Yc);WNr=r(lre,`Note:
Loading a model from its configuration file does `),OMe=n(lre,"STRONG",{});var aSt=s(OMe);QNr=r(aSt,"not"),aSt.forEach(t),HNr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(lre,"A",{href:!0});var nSt=s(eZ);UNr=r(nSt,"from_pretrained()"),nSt.forEach(t),JNr=r(lre," to load the model weights."),lre.forEach(t),YNr=i(Ow),T(dC.$$.fragment,Ow),Ow.forEach(t),KNr=i(oi),Xr=n(oi,"DIV",{class:!0});var ri=s(Xr);T(Sx.$$.fragment,ri),ZNr=i(ri),VMe=n(ri,"P",{});var sSt=s(VMe);eqr=r(sSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sSt.forEach(t),oqr=i(ri),Mn=n(ri,"P",{});var Vw=s(Mn);rqr=r(Vw,"The model class to instantiate is selected based on the "),XMe=n(Vw,"CODE",{});var lSt=s(XMe);tqr=r(lSt,"model_type"),lSt.forEach(t),aqr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),zMe=n(Vw,"CODE",{});var iSt=s(zMe);nqr=r(iSt,"pretrained_model_name_or_path"),iSt.forEach(t),sqr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(Vw,"CODE",{});var dSt=s(WMe);lqr=r(dSt,"pretrained_model_name_or_path"),dSt.forEach(t),iqr=r(Vw,":"),Vw.forEach(t),dqr=i(ri),$e=n(ri,"UL",{});var qe=s($e);cC=n(qe,"LI",{});var cje=s(cC);QMe=n(cje,"STRONG",{});var cSt=s(QMe);cqr=r(cSt,"albert"),cSt.forEach(t),fqr=r(cje," \u2014 "),oZ=n(cje,"A",{href:!0});var fSt=s(oZ);mqr=r(fSt,"FlaxAlbertForMaskedLM"),fSt.forEach(t),gqr=r(cje," (ALBERT model)"),cje.forEach(t),hqr=i(qe),fC=n(qe,"LI",{});var fje=s(fC);HMe=n(fje,"STRONG",{});var mSt=s(HMe);pqr=r(mSt,"bart"),mSt.forEach(t),uqr=r(fje," \u2014 "),rZ=n(fje,"A",{href:!0});var gSt=s(rZ);_qr=r(gSt,"FlaxBartForConditionalGeneration"),gSt.forEach(t),bqr=r(fje," (BART model)"),fje.forEach(t),vqr=i(qe),mC=n(qe,"LI",{});var mje=s(mC);UMe=n(mje,"STRONG",{});var hSt=s(UMe);Fqr=r(hSt,"bert"),hSt.forEach(t),Tqr=r(mje," \u2014 "),tZ=n(mje,"A",{href:!0});var pSt=s(tZ);Mqr=r(pSt,"FlaxBertForMaskedLM"),pSt.forEach(t),Eqr=r(mje," (BERT model)"),mje.forEach(t),Cqr=i(qe),gC=n(qe,"LI",{});var gje=s(gC);JMe=n(gje,"STRONG",{});var uSt=s(JMe);wqr=r(uSt,"big_bird"),uSt.forEach(t),Aqr=r(gje," \u2014 "),aZ=n(gje,"A",{href:!0});var _St=s(aZ);yqr=r(_St,"FlaxBigBirdForMaskedLM"),_St.forEach(t),Lqr=r(gje," (BigBird model)"),gje.forEach(t),xqr=i(qe),hC=n(qe,"LI",{});var hje=s(hC);YMe=n(hje,"STRONG",{});var bSt=s(YMe);$qr=r(bSt,"distilbert"),bSt.forEach(t),kqr=r(hje," \u2014 "),nZ=n(hje,"A",{href:!0});var vSt=s(nZ);Sqr=r(vSt,"FlaxDistilBertForMaskedLM"),vSt.forEach(t),Rqr=r(hje," (DistilBERT model)"),hje.forEach(t),Pqr=i(qe),pC=n(qe,"LI",{});var pje=s(pC);KMe=n(pje,"STRONG",{});var FSt=s(KMe);Bqr=r(FSt,"electra"),FSt.forEach(t),Iqr=r(pje," \u2014 "),sZ=n(pje,"A",{href:!0});var TSt=s(sZ);Nqr=r(TSt,"FlaxElectraForMaskedLM"),TSt.forEach(t),qqr=r(pje," (ELECTRA model)"),pje.forEach(t),jqr=i(qe),uC=n(qe,"LI",{});var uje=s(uC);ZMe=n(uje,"STRONG",{});var MSt=s(ZMe);Dqr=r(MSt,"mbart"),MSt.forEach(t),Gqr=r(uje," \u2014 "),lZ=n(uje,"A",{href:!0});var ESt=s(lZ);Oqr=r(ESt,"FlaxMBartForConditionalGeneration"),ESt.forEach(t),Vqr=r(uje," (mBART model)"),uje.forEach(t),Xqr=i(qe),_C=n(qe,"LI",{});var _je=s(_C);e4e=n(_je,"STRONG",{});var CSt=s(e4e);zqr=r(CSt,"roberta"),CSt.forEach(t),Wqr=r(_je," \u2014 "),iZ=n(_je,"A",{href:!0});var wSt=s(iZ);Qqr=r(wSt,"FlaxRobertaForMaskedLM"),wSt.forEach(t),Hqr=r(_je," (RoBERTa model)"),_je.forEach(t),Uqr=i(qe),bC=n(qe,"LI",{});var bje=s(bC);o4e=n(bje,"STRONG",{});var ASt=s(o4e);Jqr=r(ASt,"roformer"),ASt.forEach(t),Yqr=r(bje," \u2014 "),dZ=n(bje,"A",{href:!0});var ySt=s(dZ);Kqr=r(ySt,"FlaxRoFormerForMaskedLM"),ySt.forEach(t),Zqr=r(bje," (RoFormer model)"),bje.forEach(t),ejr=i(qe),vC=n(qe,"LI",{});var vje=s(vC);r4e=n(vje,"STRONG",{});var LSt=s(r4e);ojr=r(LSt,"xlm-roberta"),LSt.forEach(t),rjr=r(vje," \u2014 "),cZ=n(vje,"A",{href:!0});var xSt=s(cZ);tjr=r(xSt,"FlaxXLMRobertaForMaskedLM"),xSt.forEach(t),ajr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),qe.forEach(t),njr=i(ri),T(FC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),aOe=i(f),Kc=n(f,"H2",{class:!0});var gXe=s(Kc);TC=n(gXe,"A",{id:!0,class:!0,href:!0});var $St=s(TC);t4e=n($St,"SPAN",{});var kSt=s(t4e);T(Rx.$$.fragment,kSt),kSt.forEach(t),$St.forEach(t),sjr=i(gXe),a4e=n(gXe,"SPAN",{});var SSt=s(a4e);ljr=r(SSt,"FlaxAutoModelForSeq2SeqLM"),SSt.forEach(t),gXe.forEach(t),nOe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(Px.$$.fragment,ti),ijr=i(ti),Zc=n(ti,"P",{});var ire=s(Zc);djr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fZ=n(ire,"A",{href:!0});var RSt=s(fZ);cjr=r(RSt,"from_pretrained()"),RSt.forEach(t),fjr=r(ire," class method or the "),mZ=n(ire,"A",{href:!0});var PSt=s(mZ);mjr=r(PSt,"from_config()"),PSt.forEach(t),gjr=r(ire,` class
method.`),ire.forEach(t),hjr=i(ti),Bx=n(ti,"P",{});var hXe=s(Bx);pjr=r(hXe,"This class cannot be instantiated directly using "),n4e=n(hXe,"CODE",{});var BSt=s(n4e);ujr=r(BSt,"__init__()"),BSt.forEach(t),_jr=r(hXe," (throws an error)."),hXe.forEach(t),bjr=i(ti),Ht=n(ti,"DIV",{class:!0});var Xw=s(Ht);T(Ix.$$.fragment,Xw),vjr=i(Xw),s4e=n(Xw,"P",{});var ISt=s(s4e);Fjr=r(ISt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ISt.forEach(t),Tjr=i(Xw),ef=n(Xw,"P",{});var dre=s(ef);Mjr=r(dre,`Note:
Loading a model from its configuration file does `),l4e=n(dre,"STRONG",{});var NSt=s(l4e);Ejr=r(NSt,"not"),NSt.forEach(t),Cjr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(dre,"A",{href:!0});var qSt=s(gZ);wjr=r(qSt,"from_pretrained()"),qSt.forEach(t),Ajr=r(dre," to load the model weights."),dre.forEach(t),yjr=i(Xw),T(MC.$$.fragment,Xw),Xw.forEach(t),Ljr=i(ti),zr=n(ti,"DIV",{class:!0});var ai=s(zr);T(Nx.$$.fragment,ai),xjr=i(ai),i4e=n(ai,"P",{});var jSt=s(i4e);$jr=r(jSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jSt.forEach(t),kjr=i(ai),En=n(ai,"P",{});var zw=s(En);Sjr=r(zw,"The model class to instantiate is selected based on the "),d4e=n(zw,"CODE",{});var DSt=s(d4e);Rjr=r(DSt,"model_type"),DSt.forEach(t),Pjr=r(zw,` property of the config object (either
passed as an argument or loaded from `),c4e=n(zw,"CODE",{});var GSt=s(c4e);Bjr=r(GSt,"pretrained_model_name_or_path"),GSt.forEach(t),Ijr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(zw,"CODE",{});var OSt=s(f4e);Njr=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),qjr=r(zw,":"),zw.forEach(t),jjr=i(ai),Pe=n(ai,"UL",{});var ze=s(Pe);EC=n(ze,"LI",{});var Fje=s(EC);m4e=n(Fje,"STRONG",{});var VSt=s(m4e);Djr=r(VSt,"bart"),VSt.forEach(t),Gjr=r(Fje," \u2014 "),hZ=n(Fje,"A",{href:!0});var XSt=s(hZ);Ojr=r(XSt,"FlaxBartForConditionalGeneration"),XSt.forEach(t),Vjr=r(Fje," (BART model)"),Fje.forEach(t),Xjr=i(ze),CC=n(ze,"LI",{});var Tje=s(CC);g4e=n(Tje,"STRONG",{});var zSt=s(g4e);zjr=r(zSt,"blenderbot"),zSt.forEach(t),Wjr=r(Tje," \u2014 "),pZ=n(Tje,"A",{href:!0});var WSt=s(pZ);Qjr=r(WSt,"FlaxBlenderbotForConditionalGeneration"),WSt.forEach(t),Hjr=r(Tje," (Blenderbot model)"),Tje.forEach(t),Ujr=i(ze),wC=n(ze,"LI",{});var Mje=s(wC);h4e=n(Mje,"STRONG",{});var QSt=s(h4e);Jjr=r(QSt,"blenderbot-small"),QSt.forEach(t),Yjr=r(Mje," \u2014 "),uZ=n(Mje,"A",{href:!0});var HSt=s(uZ);Kjr=r(HSt,"FlaxBlenderbotSmallForConditionalGeneration"),HSt.forEach(t),Zjr=r(Mje," (BlenderbotSmall model)"),Mje.forEach(t),eDr=i(ze),AC=n(ze,"LI",{});var Eje=s(AC);p4e=n(Eje,"STRONG",{});var USt=s(p4e);oDr=r(USt,"encoder-decoder"),USt.forEach(t),rDr=r(Eje," \u2014 "),_Z=n(Eje,"A",{href:!0});var JSt=s(_Z);tDr=r(JSt,"FlaxEncoderDecoderModel"),JSt.forEach(t),aDr=r(Eje," (Encoder decoder model)"),Eje.forEach(t),nDr=i(ze),yC=n(ze,"LI",{});var Cje=s(yC);u4e=n(Cje,"STRONG",{});var YSt=s(u4e);sDr=r(YSt,"marian"),YSt.forEach(t),lDr=r(Cje," \u2014 "),bZ=n(Cje,"A",{href:!0});var KSt=s(bZ);iDr=r(KSt,"FlaxMarianMTModel"),KSt.forEach(t),dDr=r(Cje," (Marian model)"),Cje.forEach(t),cDr=i(ze),LC=n(ze,"LI",{});var wje=s(LC);_4e=n(wje,"STRONG",{});var ZSt=s(_4e);fDr=r(ZSt,"mbart"),ZSt.forEach(t),mDr=r(wje," \u2014 "),vZ=n(wje,"A",{href:!0});var eRt=s(vZ);gDr=r(eRt,"FlaxMBartForConditionalGeneration"),eRt.forEach(t),hDr=r(wje," (mBART model)"),wje.forEach(t),pDr=i(ze),xC=n(ze,"LI",{});var Aje=s(xC);b4e=n(Aje,"STRONG",{});var oRt=s(b4e);uDr=r(oRt,"mt5"),oRt.forEach(t),_Dr=r(Aje," \u2014 "),FZ=n(Aje,"A",{href:!0});var rRt=s(FZ);bDr=r(rRt,"FlaxMT5ForConditionalGeneration"),rRt.forEach(t),vDr=r(Aje," (MT5 model)"),Aje.forEach(t),FDr=i(ze),$C=n(ze,"LI",{});var yje=s($C);v4e=n(yje,"STRONG",{});var tRt=s(v4e);TDr=r(tRt,"pegasus"),tRt.forEach(t),MDr=r(yje," \u2014 "),TZ=n(yje,"A",{href:!0});var aRt=s(TZ);EDr=r(aRt,"FlaxPegasusForConditionalGeneration"),aRt.forEach(t),CDr=r(yje," (Pegasus model)"),yje.forEach(t),wDr=i(ze),kC=n(ze,"LI",{});var Lje=s(kC);F4e=n(Lje,"STRONG",{});var nRt=s(F4e);ADr=r(nRt,"t5"),nRt.forEach(t),yDr=r(Lje," \u2014 "),MZ=n(Lje,"A",{href:!0});var sRt=s(MZ);LDr=r(sRt,"FlaxT5ForConditionalGeneration"),sRt.forEach(t),xDr=r(Lje," (T5 model)"),Lje.forEach(t),ze.forEach(t),$Dr=i(ai),T(SC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),sOe=i(f),of=n(f,"H2",{class:!0});var pXe=s(of);RC=n(pXe,"A",{id:!0,class:!0,href:!0});var lRt=s(RC);T4e=n(lRt,"SPAN",{});var iRt=s(T4e);T(qx.$$.fragment,iRt),iRt.forEach(t),lRt.forEach(t),kDr=i(pXe),M4e=n(pXe,"SPAN",{});var dRt=s(M4e);SDr=r(dRt,"FlaxAutoModelForSequenceClassification"),dRt.forEach(t),pXe.forEach(t),lOe=i(f),br=n(f,"DIV",{class:!0});var ni=s(br);T(jx.$$.fragment,ni),RDr=i(ni),rf=n(ni,"P",{});var cre=s(rf);PDr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EZ=n(cre,"A",{href:!0});var cRt=s(EZ);BDr=r(cRt,"from_pretrained()"),cRt.forEach(t),IDr=r(cre," class method or the "),CZ=n(cre,"A",{href:!0});var fRt=s(CZ);NDr=r(fRt,"from_config()"),fRt.forEach(t),qDr=r(cre,` class
method.`),cre.forEach(t),jDr=i(ni),Dx=n(ni,"P",{});var uXe=s(Dx);DDr=r(uXe,"This class cannot be instantiated directly using "),E4e=n(uXe,"CODE",{});var mRt=s(E4e);GDr=r(mRt,"__init__()"),mRt.forEach(t),ODr=r(uXe," (throws an error)."),uXe.forEach(t),VDr=i(ni),Ut=n(ni,"DIV",{class:!0});var Ww=s(Ut);T(Gx.$$.fragment,Ww),XDr=i(Ww),C4e=n(Ww,"P",{});var gRt=s(C4e);zDr=r(gRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gRt.forEach(t),WDr=i(Ww),tf=n(Ww,"P",{});var fre=s(tf);QDr=r(fre,`Note:
Loading a model from its configuration file does `),w4e=n(fre,"STRONG",{});var hRt=s(w4e);HDr=r(hRt,"not"),hRt.forEach(t),UDr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(fre,"A",{href:!0});var pRt=s(wZ);JDr=r(pRt,"from_pretrained()"),pRt.forEach(t),YDr=r(fre," to load the model weights."),fre.forEach(t),KDr=i(Ww),T(PC.$$.fragment,Ww),Ww.forEach(t),ZDr=i(ni),Wr=n(ni,"DIV",{class:!0});var si=s(Wr);T(Ox.$$.fragment,si),eGr=i(si),A4e=n(si,"P",{});var uRt=s(A4e);oGr=r(uRt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uRt.forEach(t),rGr=i(si),Cn=n(si,"P",{});var Qw=s(Cn);tGr=r(Qw,"The model class to instantiate is selected based on the "),y4e=n(Qw,"CODE",{});var _Rt=s(y4e);aGr=r(_Rt,"model_type"),_Rt.forEach(t),nGr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),L4e=n(Qw,"CODE",{});var bRt=s(L4e);sGr=r(bRt,"pretrained_model_name_or_path"),bRt.forEach(t),lGr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(Qw,"CODE",{});var vRt=s(x4e);iGr=r(vRt,"pretrained_model_name_or_path"),vRt.forEach(t),dGr=r(Qw,":"),Qw.forEach(t),cGr=i(si),ke=n(si,"UL",{});var je=s(ke);BC=n(je,"LI",{});var xje=s(BC);$4e=n(xje,"STRONG",{});var FRt=s($4e);fGr=r(FRt,"albert"),FRt.forEach(t),mGr=r(xje," \u2014 "),AZ=n(xje,"A",{href:!0});var TRt=s(AZ);gGr=r(TRt,"FlaxAlbertForSequenceClassification"),TRt.forEach(t),hGr=r(xje," (ALBERT model)"),xje.forEach(t),pGr=i(je),IC=n(je,"LI",{});var $je=s(IC);k4e=n($je,"STRONG",{});var MRt=s(k4e);uGr=r(MRt,"bart"),MRt.forEach(t),_Gr=r($je," \u2014 "),yZ=n($je,"A",{href:!0});var ERt=s(yZ);bGr=r(ERt,"FlaxBartForSequenceClassification"),ERt.forEach(t),vGr=r($je," (BART model)"),$je.forEach(t),FGr=i(je),NC=n(je,"LI",{});var kje=s(NC);S4e=n(kje,"STRONG",{});var CRt=s(S4e);TGr=r(CRt,"bert"),CRt.forEach(t),MGr=r(kje," \u2014 "),LZ=n(kje,"A",{href:!0});var wRt=s(LZ);EGr=r(wRt,"FlaxBertForSequenceClassification"),wRt.forEach(t),CGr=r(kje," (BERT model)"),kje.forEach(t),wGr=i(je),qC=n(je,"LI",{});var Sje=s(qC);R4e=n(Sje,"STRONG",{});var ARt=s(R4e);AGr=r(ARt,"big_bird"),ARt.forEach(t),yGr=r(Sje," \u2014 "),xZ=n(Sje,"A",{href:!0});var yRt=s(xZ);LGr=r(yRt,"FlaxBigBirdForSequenceClassification"),yRt.forEach(t),xGr=r(Sje," (BigBird model)"),Sje.forEach(t),$Gr=i(je),jC=n(je,"LI",{});var Rje=s(jC);P4e=n(Rje,"STRONG",{});var LRt=s(P4e);kGr=r(LRt,"distilbert"),LRt.forEach(t),SGr=r(Rje," \u2014 "),$Z=n(Rje,"A",{href:!0});var xRt=s($Z);RGr=r(xRt,"FlaxDistilBertForSequenceClassification"),xRt.forEach(t),PGr=r(Rje," (DistilBERT model)"),Rje.forEach(t),BGr=i(je),DC=n(je,"LI",{});var Pje=s(DC);B4e=n(Pje,"STRONG",{});var $Rt=s(B4e);IGr=r($Rt,"electra"),$Rt.forEach(t),NGr=r(Pje," \u2014 "),kZ=n(Pje,"A",{href:!0});var kRt=s(kZ);qGr=r(kRt,"FlaxElectraForSequenceClassification"),kRt.forEach(t),jGr=r(Pje," (ELECTRA model)"),Pje.forEach(t),DGr=i(je),GC=n(je,"LI",{});var Bje=s(GC);I4e=n(Bje,"STRONG",{});var SRt=s(I4e);GGr=r(SRt,"mbart"),SRt.forEach(t),OGr=r(Bje," \u2014 "),SZ=n(Bje,"A",{href:!0});var RRt=s(SZ);VGr=r(RRt,"FlaxMBartForSequenceClassification"),RRt.forEach(t),XGr=r(Bje," (mBART model)"),Bje.forEach(t),zGr=i(je),OC=n(je,"LI",{});var Ije=s(OC);N4e=n(Ije,"STRONG",{});var PRt=s(N4e);WGr=r(PRt,"roberta"),PRt.forEach(t),QGr=r(Ije," \u2014 "),RZ=n(Ije,"A",{href:!0});var BRt=s(RZ);HGr=r(BRt,"FlaxRobertaForSequenceClassification"),BRt.forEach(t),UGr=r(Ije," (RoBERTa model)"),Ije.forEach(t),JGr=i(je),VC=n(je,"LI",{});var Nje=s(VC);q4e=n(Nje,"STRONG",{});var IRt=s(q4e);YGr=r(IRt,"roformer"),IRt.forEach(t),KGr=r(Nje," \u2014 "),PZ=n(Nje,"A",{href:!0});var NRt=s(PZ);ZGr=r(NRt,"FlaxRoFormerForSequenceClassification"),NRt.forEach(t),eOr=r(Nje," (RoFormer model)"),Nje.forEach(t),oOr=i(je),XC=n(je,"LI",{});var qje=s(XC);j4e=n(qje,"STRONG",{});var qRt=s(j4e);rOr=r(qRt,"xlm-roberta"),qRt.forEach(t),tOr=r(qje," \u2014 "),BZ=n(qje,"A",{href:!0});var jRt=s(BZ);aOr=r(jRt,"FlaxXLMRobertaForSequenceClassification"),jRt.forEach(t),nOr=r(qje," (XLM-RoBERTa model)"),qje.forEach(t),je.forEach(t),sOr=i(si),T(zC.$$.fragment,si),si.forEach(t),ni.forEach(t),iOe=i(f),af=n(f,"H2",{class:!0});var _Xe=s(af);WC=n(_Xe,"A",{id:!0,class:!0,href:!0});var DRt=s(WC);D4e=n(DRt,"SPAN",{});var GRt=s(D4e);T(Vx.$$.fragment,GRt),GRt.forEach(t),DRt.forEach(t),lOr=i(_Xe),G4e=n(_Xe,"SPAN",{});var ORt=s(G4e);iOr=r(ORt,"FlaxAutoModelForQuestionAnswering"),ORt.forEach(t),_Xe.forEach(t),dOe=i(f),vr=n(f,"DIV",{class:!0});var li=s(vr);T(Xx.$$.fragment,li),dOr=i(li),nf=n(li,"P",{});var mre=s(nf);cOr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IZ=n(mre,"A",{href:!0});var VRt=s(IZ);fOr=r(VRt,"from_pretrained()"),VRt.forEach(t),mOr=r(mre," class method or the "),NZ=n(mre,"A",{href:!0});var XRt=s(NZ);gOr=r(XRt,"from_config()"),XRt.forEach(t),hOr=r(mre,` class
method.`),mre.forEach(t),pOr=i(li),zx=n(li,"P",{});var bXe=s(zx);uOr=r(bXe,"This class cannot be instantiated directly using "),O4e=n(bXe,"CODE",{});var zRt=s(O4e);_Or=r(zRt,"__init__()"),zRt.forEach(t),bOr=r(bXe," (throws an error)."),bXe.forEach(t),vOr=i(li),Jt=n(li,"DIV",{class:!0});var Hw=s(Jt);T(Wx.$$.fragment,Hw),FOr=i(Hw),V4e=n(Hw,"P",{});var WRt=s(V4e);TOr=r(WRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),WRt.forEach(t),MOr=i(Hw),sf=n(Hw,"P",{});var gre=s(sf);EOr=r(gre,`Note:
Loading a model from its configuration file does `),X4e=n(gre,"STRONG",{});var QRt=s(X4e);COr=r(QRt,"not"),QRt.forEach(t),wOr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(gre,"A",{href:!0});var HRt=s(qZ);AOr=r(HRt,"from_pretrained()"),HRt.forEach(t),yOr=r(gre," to load the model weights."),gre.forEach(t),LOr=i(Hw),T(QC.$$.fragment,Hw),Hw.forEach(t),xOr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(Qx.$$.fragment,ii),$Or=i(ii),z4e=n(ii,"P",{});var URt=s(z4e);kOr=r(URt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),URt.forEach(t),SOr=i(ii),wn=n(ii,"P",{});var Uw=s(wn);ROr=r(Uw,"The model class to instantiate is selected based on the "),W4e=n(Uw,"CODE",{});var JRt=s(W4e);POr=r(JRt,"model_type"),JRt.forEach(t),BOr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(Uw,"CODE",{});var YRt=s(Q4e);IOr=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),NOr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(Uw,"CODE",{});var KRt=s(H4e);qOr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),jOr=r(Uw,":"),Uw.forEach(t),DOr=i(ii),Se=n(ii,"UL",{});var De=s(Se);HC=n(De,"LI",{});var jje=s(HC);U4e=n(jje,"STRONG",{});var ZRt=s(U4e);GOr=r(ZRt,"albert"),ZRt.forEach(t),OOr=r(jje," \u2014 "),jZ=n(jje,"A",{href:!0});var ePt=s(jZ);VOr=r(ePt,"FlaxAlbertForQuestionAnswering"),ePt.forEach(t),XOr=r(jje," (ALBERT model)"),jje.forEach(t),zOr=i(De),UC=n(De,"LI",{});var Dje=s(UC);J4e=n(Dje,"STRONG",{});var oPt=s(J4e);WOr=r(oPt,"bart"),oPt.forEach(t),QOr=r(Dje," \u2014 "),DZ=n(Dje,"A",{href:!0});var rPt=s(DZ);HOr=r(rPt,"FlaxBartForQuestionAnswering"),rPt.forEach(t),UOr=r(Dje," (BART model)"),Dje.forEach(t),JOr=i(De),JC=n(De,"LI",{});var Gje=s(JC);Y4e=n(Gje,"STRONG",{});var tPt=s(Y4e);YOr=r(tPt,"bert"),tPt.forEach(t),KOr=r(Gje," \u2014 "),GZ=n(Gje,"A",{href:!0});var aPt=s(GZ);ZOr=r(aPt,"FlaxBertForQuestionAnswering"),aPt.forEach(t),eVr=r(Gje," (BERT model)"),Gje.forEach(t),oVr=i(De),YC=n(De,"LI",{});var Oje=s(YC);K4e=n(Oje,"STRONG",{});var nPt=s(K4e);rVr=r(nPt,"big_bird"),nPt.forEach(t),tVr=r(Oje," \u2014 "),OZ=n(Oje,"A",{href:!0});var sPt=s(OZ);aVr=r(sPt,"FlaxBigBirdForQuestionAnswering"),sPt.forEach(t),nVr=r(Oje," (BigBird model)"),Oje.forEach(t),sVr=i(De),KC=n(De,"LI",{});var Vje=s(KC);Z4e=n(Vje,"STRONG",{});var lPt=s(Z4e);lVr=r(lPt,"distilbert"),lPt.forEach(t),iVr=r(Vje," \u2014 "),VZ=n(Vje,"A",{href:!0});var iPt=s(VZ);dVr=r(iPt,"FlaxDistilBertForQuestionAnswering"),iPt.forEach(t),cVr=r(Vje," (DistilBERT model)"),Vje.forEach(t),fVr=i(De),ZC=n(De,"LI",{});var Xje=s(ZC);eEe=n(Xje,"STRONG",{});var dPt=s(eEe);mVr=r(dPt,"electra"),dPt.forEach(t),gVr=r(Xje," \u2014 "),XZ=n(Xje,"A",{href:!0});var cPt=s(XZ);hVr=r(cPt,"FlaxElectraForQuestionAnswering"),cPt.forEach(t),pVr=r(Xje," (ELECTRA model)"),Xje.forEach(t),uVr=i(De),e5=n(De,"LI",{});var zje=s(e5);oEe=n(zje,"STRONG",{});var fPt=s(oEe);_Vr=r(fPt,"mbart"),fPt.forEach(t),bVr=r(zje," \u2014 "),zZ=n(zje,"A",{href:!0});var mPt=s(zZ);vVr=r(mPt,"FlaxMBartForQuestionAnswering"),mPt.forEach(t),FVr=r(zje," (mBART model)"),zje.forEach(t),TVr=i(De),o5=n(De,"LI",{});var Wje=s(o5);rEe=n(Wje,"STRONG",{});var gPt=s(rEe);MVr=r(gPt,"roberta"),gPt.forEach(t),EVr=r(Wje," \u2014 "),WZ=n(Wje,"A",{href:!0});var hPt=s(WZ);CVr=r(hPt,"FlaxRobertaForQuestionAnswering"),hPt.forEach(t),wVr=r(Wje," (RoBERTa model)"),Wje.forEach(t),AVr=i(De),r5=n(De,"LI",{});var Qje=s(r5);tEe=n(Qje,"STRONG",{});var pPt=s(tEe);yVr=r(pPt,"roformer"),pPt.forEach(t),LVr=r(Qje," \u2014 "),QZ=n(Qje,"A",{href:!0});var uPt=s(QZ);xVr=r(uPt,"FlaxRoFormerForQuestionAnswering"),uPt.forEach(t),$Vr=r(Qje," (RoFormer model)"),Qje.forEach(t),kVr=i(De),t5=n(De,"LI",{});var Hje=s(t5);aEe=n(Hje,"STRONG",{});var _Pt=s(aEe);SVr=r(_Pt,"xlm-roberta"),_Pt.forEach(t),RVr=r(Hje," \u2014 "),HZ=n(Hje,"A",{href:!0});var bPt=s(HZ);PVr=r(bPt,"FlaxXLMRobertaForQuestionAnswering"),bPt.forEach(t),BVr=r(Hje," (XLM-RoBERTa model)"),Hje.forEach(t),De.forEach(t),IVr=i(ii),T(a5.$$.fragment,ii),ii.forEach(t),li.forEach(t),cOe=i(f),lf=n(f,"H2",{class:!0});var vXe=s(lf);n5=n(vXe,"A",{id:!0,class:!0,href:!0});var vPt=s(n5);nEe=n(vPt,"SPAN",{});var FPt=s(nEe);T(Hx.$$.fragment,FPt),FPt.forEach(t),vPt.forEach(t),NVr=i(vXe),sEe=n(vXe,"SPAN",{});var TPt=s(sEe);qVr=r(TPt,"FlaxAutoModelForTokenClassification"),TPt.forEach(t),vXe.forEach(t),fOe=i(f),Fr=n(f,"DIV",{class:!0});var di=s(Fr);T(Ux.$$.fragment,di),jVr=i(di),df=n(di,"P",{});var hre=s(df);DVr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UZ=n(hre,"A",{href:!0});var MPt=s(UZ);GVr=r(MPt,"from_pretrained()"),MPt.forEach(t),OVr=r(hre," class method or the "),JZ=n(hre,"A",{href:!0});var EPt=s(JZ);VVr=r(EPt,"from_config()"),EPt.forEach(t),XVr=r(hre,` class
method.`),hre.forEach(t),zVr=i(di),Jx=n(di,"P",{});var FXe=s(Jx);WVr=r(FXe,"This class cannot be instantiated directly using "),lEe=n(FXe,"CODE",{});var CPt=s(lEe);QVr=r(CPt,"__init__()"),CPt.forEach(t),HVr=r(FXe," (throws an error)."),FXe.forEach(t),UVr=i(di),Yt=n(di,"DIV",{class:!0});var Jw=s(Yt);T(Yx.$$.fragment,Jw),JVr=i(Jw),iEe=n(Jw,"P",{});var wPt=s(iEe);YVr=r(wPt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wPt.forEach(t),KVr=i(Jw),cf=n(Jw,"P",{});var pre=s(cf);ZVr=r(pre,`Note:
Loading a model from its configuration file does `),dEe=n(pre,"STRONG",{});var APt=s(dEe);eXr=r(APt,"not"),APt.forEach(t),oXr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(pre,"A",{href:!0});var yPt=s(YZ);rXr=r(yPt,"from_pretrained()"),yPt.forEach(t),tXr=r(pre," to load the model weights."),pre.forEach(t),aXr=i(Jw),T(s5.$$.fragment,Jw),Jw.forEach(t),nXr=i(di),Hr=n(di,"DIV",{class:!0});var ci=s(Hr);T(Kx.$$.fragment,ci),sXr=i(ci),cEe=n(ci,"P",{});var LPt=s(cEe);lXr=r(LPt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LPt.forEach(t),iXr=i(ci),An=n(ci,"P",{});var Yw=s(An);dXr=r(Yw,"The model class to instantiate is selected based on the "),fEe=n(Yw,"CODE",{});var xPt=s(fEe);cXr=r(xPt,"model_type"),xPt.forEach(t),fXr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),mEe=n(Yw,"CODE",{});var $Pt=s(mEe);mXr=r($Pt,"pretrained_model_name_or_path"),$Pt.forEach(t),gXr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(Yw,"CODE",{});var kPt=s(gEe);hXr=r(kPt,"pretrained_model_name_or_path"),kPt.forEach(t),pXr=r(Yw,":"),Yw.forEach(t),uXr=i(ci),Oe=n(ci,"UL",{});var To=s(Oe);l5=n(To,"LI",{});var Uje=s(l5);hEe=n(Uje,"STRONG",{});var SPt=s(hEe);_Xr=r(SPt,"albert"),SPt.forEach(t),bXr=r(Uje," \u2014 "),KZ=n(Uje,"A",{href:!0});var RPt=s(KZ);vXr=r(RPt,"FlaxAlbertForTokenClassification"),RPt.forEach(t),FXr=r(Uje," (ALBERT model)"),Uje.forEach(t),TXr=i(To),i5=n(To,"LI",{});var Jje=s(i5);pEe=n(Jje,"STRONG",{});var PPt=s(pEe);MXr=r(PPt,"bert"),PPt.forEach(t),EXr=r(Jje," \u2014 "),ZZ=n(Jje,"A",{href:!0});var BPt=s(ZZ);CXr=r(BPt,"FlaxBertForTokenClassification"),BPt.forEach(t),wXr=r(Jje," (BERT model)"),Jje.forEach(t),AXr=i(To),d5=n(To,"LI",{});var Yje=s(d5);uEe=n(Yje,"STRONG",{});var IPt=s(uEe);yXr=r(IPt,"big_bird"),IPt.forEach(t),LXr=r(Yje," \u2014 "),eee=n(Yje,"A",{href:!0});var NPt=s(eee);xXr=r(NPt,"FlaxBigBirdForTokenClassification"),NPt.forEach(t),$Xr=r(Yje," (BigBird model)"),Yje.forEach(t),kXr=i(To),c5=n(To,"LI",{});var Kje=s(c5);_Ee=n(Kje,"STRONG",{});var qPt=s(_Ee);SXr=r(qPt,"distilbert"),qPt.forEach(t),RXr=r(Kje," \u2014 "),oee=n(Kje,"A",{href:!0});var jPt=s(oee);PXr=r(jPt,"FlaxDistilBertForTokenClassification"),jPt.forEach(t),BXr=r(Kje," (DistilBERT model)"),Kje.forEach(t),IXr=i(To),f5=n(To,"LI",{});var Zje=s(f5);bEe=n(Zje,"STRONG",{});var DPt=s(bEe);NXr=r(DPt,"electra"),DPt.forEach(t),qXr=r(Zje," \u2014 "),ree=n(Zje,"A",{href:!0});var GPt=s(ree);jXr=r(GPt,"FlaxElectraForTokenClassification"),GPt.forEach(t),DXr=r(Zje," (ELECTRA model)"),Zje.forEach(t),GXr=i(To),m5=n(To,"LI",{});var eDe=s(m5);vEe=n(eDe,"STRONG",{});var OPt=s(vEe);OXr=r(OPt,"roberta"),OPt.forEach(t),VXr=r(eDe," \u2014 "),tee=n(eDe,"A",{href:!0});var VPt=s(tee);XXr=r(VPt,"FlaxRobertaForTokenClassification"),VPt.forEach(t),zXr=r(eDe," (RoBERTa model)"),eDe.forEach(t),WXr=i(To),g5=n(To,"LI",{});var oDe=s(g5);FEe=n(oDe,"STRONG",{});var XPt=s(FEe);QXr=r(XPt,"roformer"),XPt.forEach(t),HXr=r(oDe," \u2014 "),aee=n(oDe,"A",{href:!0});var zPt=s(aee);UXr=r(zPt,"FlaxRoFormerForTokenClassification"),zPt.forEach(t),JXr=r(oDe," (RoFormer model)"),oDe.forEach(t),YXr=i(To),h5=n(To,"LI",{});var rDe=s(h5);TEe=n(rDe,"STRONG",{});var WPt=s(TEe);KXr=r(WPt,"xlm-roberta"),WPt.forEach(t),ZXr=r(rDe," \u2014 "),nee=n(rDe,"A",{href:!0});var QPt=s(nee);ezr=r(QPt,"FlaxXLMRobertaForTokenClassification"),QPt.forEach(t),ozr=r(rDe," (XLM-RoBERTa model)"),rDe.forEach(t),To.forEach(t),rzr=i(ci),T(p5.$$.fragment,ci),ci.forEach(t),di.forEach(t),mOe=i(f),ff=n(f,"H2",{class:!0});var TXe=s(ff);u5=n(TXe,"A",{id:!0,class:!0,href:!0});var HPt=s(u5);MEe=n(HPt,"SPAN",{});var UPt=s(MEe);T(Zx.$$.fragment,UPt),UPt.forEach(t),HPt.forEach(t),tzr=i(TXe),EEe=n(TXe,"SPAN",{});var JPt=s(EEe);azr=r(JPt,"FlaxAutoModelForMultipleChoice"),JPt.forEach(t),TXe.forEach(t),gOe=i(f),Tr=n(f,"DIV",{class:!0});var fi=s(Tr);T(e$.$$.fragment,fi),nzr=i(fi),mf=n(fi,"P",{});var ure=s(mf);szr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),see=n(ure,"A",{href:!0});var YPt=s(see);lzr=r(YPt,"from_pretrained()"),YPt.forEach(t),izr=r(ure," class method or the "),lee=n(ure,"A",{href:!0});var KPt=s(lee);dzr=r(KPt,"from_config()"),KPt.forEach(t),czr=r(ure,` class
method.`),ure.forEach(t),fzr=i(fi),o$=n(fi,"P",{});var MXe=s(o$);mzr=r(MXe,"This class cannot be instantiated directly using "),CEe=n(MXe,"CODE",{});var ZPt=s(CEe);gzr=r(ZPt,"__init__()"),ZPt.forEach(t),hzr=r(MXe," (throws an error)."),MXe.forEach(t),pzr=i(fi),Kt=n(fi,"DIV",{class:!0});var Kw=s(Kt);T(r$.$$.fragment,Kw),uzr=i(Kw),wEe=n(Kw,"P",{});var eBt=s(wEe);_zr=r(eBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eBt.forEach(t),bzr=i(Kw),gf=n(Kw,"P",{});var _re=s(gf);vzr=r(_re,`Note:
Loading a model from its configuration file does `),AEe=n(_re,"STRONG",{});var oBt=s(AEe);Fzr=r(oBt,"not"),oBt.forEach(t),Tzr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(_re,"A",{href:!0});var rBt=s(iee);Mzr=r(rBt,"from_pretrained()"),rBt.forEach(t),Ezr=r(_re," to load the model weights."),_re.forEach(t),Czr=i(Kw),T(_5.$$.fragment,Kw),Kw.forEach(t),wzr=i(fi),Ur=n(fi,"DIV",{class:!0});var mi=s(Ur);T(t$.$$.fragment,mi),Azr=i(mi),yEe=n(mi,"P",{});var tBt=s(yEe);yzr=r(tBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tBt.forEach(t),Lzr=i(mi),yn=n(mi,"P",{});var Zw=s(yn);xzr=r(Zw,"The model class to instantiate is selected based on the "),LEe=n(Zw,"CODE",{});var aBt=s(LEe);$zr=r(aBt,"model_type"),aBt.forEach(t),kzr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),xEe=n(Zw,"CODE",{});var nBt=s(xEe);Szr=r(nBt,"pretrained_model_name_or_path"),nBt.forEach(t),Rzr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(Zw,"CODE",{});var sBt=s($Ee);Pzr=r(sBt,"pretrained_model_name_or_path"),sBt.forEach(t),Bzr=r(Zw,":"),Zw.forEach(t),Izr=i(mi),Ve=n(mi,"UL",{});var Mo=s(Ve);b5=n(Mo,"LI",{});var tDe=s(b5);kEe=n(tDe,"STRONG",{});var lBt=s(kEe);Nzr=r(lBt,"albert"),lBt.forEach(t),qzr=r(tDe," \u2014 "),dee=n(tDe,"A",{href:!0});var iBt=s(dee);jzr=r(iBt,"FlaxAlbertForMultipleChoice"),iBt.forEach(t),Dzr=r(tDe," (ALBERT model)"),tDe.forEach(t),Gzr=i(Mo),v5=n(Mo,"LI",{});var aDe=s(v5);SEe=n(aDe,"STRONG",{});var dBt=s(SEe);Ozr=r(dBt,"bert"),dBt.forEach(t),Vzr=r(aDe," \u2014 "),cee=n(aDe,"A",{href:!0});var cBt=s(cee);Xzr=r(cBt,"FlaxBertForMultipleChoice"),cBt.forEach(t),zzr=r(aDe," (BERT model)"),aDe.forEach(t),Wzr=i(Mo),F5=n(Mo,"LI",{});var nDe=s(F5);REe=n(nDe,"STRONG",{});var fBt=s(REe);Qzr=r(fBt,"big_bird"),fBt.forEach(t),Hzr=r(nDe," \u2014 "),fee=n(nDe,"A",{href:!0});var mBt=s(fee);Uzr=r(mBt,"FlaxBigBirdForMultipleChoice"),mBt.forEach(t),Jzr=r(nDe," (BigBird model)"),nDe.forEach(t),Yzr=i(Mo),T5=n(Mo,"LI",{});var sDe=s(T5);PEe=n(sDe,"STRONG",{});var gBt=s(PEe);Kzr=r(gBt,"distilbert"),gBt.forEach(t),Zzr=r(sDe," \u2014 "),mee=n(sDe,"A",{href:!0});var hBt=s(mee);eWr=r(hBt,"FlaxDistilBertForMultipleChoice"),hBt.forEach(t),oWr=r(sDe," (DistilBERT model)"),sDe.forEach(t),rWr=i(Mo),M5=n(Mo,"LI",{});var lDe=s(M5);BEe=n(lDe,"STRONG",{});var pBt=s(BEe);tWr=r(pBt,"electra"),pBt.forEach(t),aWr=r(lDe," \u2014 "),gee=n(lDe,"A",{href:!0});var uBt=s(gee);nWr=r(uBt,"FlaxElectraForMultipleChoice"),uBt.forEach(t),sWr=r(lDe," (ELECTRA model)"),lDe.forEach(t),lWr=i(Mo),E5=n(Mo,"LI",{});var iDe=s(E5);IEe=n(iDe,"STRONG",{});var _Bt=s(IEe);iWr=r(_Bt,"roberta"),_Bt.forEach(t),dWr=r(iDe," \u2014 "),hee=n(iDe,"A",{href:!0});var bBt=s(hee);cWr=r(bBt,"FlaxRobertaForMultipleChoice"),bBt.forEach(t),fWr=r(iDe," (RoBERTa model)"),iDe.forEach(t),mWr=i(Mo),C5=n(Mo,"LI",{});var dDe=s(C5);NEe=n(dDe,"STRONG",{});var vBt=s(NEe);gWr=r(vBt,"roformer"),vBt.forEach(t),hWr=r(dDe," \u2014 "),pee=n(dDe,"A",{href:!0});var FBt=s(pee);pWr=r(FBt,"FlaxRoFormerForMultipleChoice"),FBt.forEach(t),uWr=r(dDe," (RoFormer model)"),dDe.forEach(t),_Wr=i(Mo),w5=n(Mo,"LI",{});var cDe=s(w5);qEe=n(cDe,"STRONG",{});var TBt=s(qEe);bWr=r(TBt,"xlm-roberta"),TBt.forEach(t),vWr=r(cDe," \u2014 "),uee=n(cDe,"A",{href:!0});var MBt=s(uee);FWr=r(MBt,"FlaxXLMRobertaForMultipleChoice"),MBt.forEach(t),TWr=r(cDe," (XLM-RoBERTa model)"),cDe.forEach(t),Mo.forEach(t),MWr=i(mi),T(A5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),hOe=i(f),hf=n(f,"H2",{class:!0});var EXe=s(hf);y5=n(EXe,"A",{id:!0,class:!0,href:!0});var EBt=s(y5);jEe=n(EBt,"SPAN",{});var CBt=s(jEe);T(a$.$$.fragment,CBt),CBt.forEach(t),EBt.forEach(t),EWr=i(EXe),DEe=n(EXe,"SPAN",{});var wBt=s(DEe);CWr=r(wBt,"FlaxAutoModelForNextSentencePrediction"),wBt.forEach(t),EXe.forEach(t),pOe=i(f),Mr=n(f,"DIV",{class:!0});var gi=s(Mr);T(n$.$$.fragment,gi),wWr=i(gi),pf=n(gi,"P",{});var bre=s(pf);AWr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_ee=n(bre,"A",{href:!0});var ABt=s(_ee);yWr=r(ABt,"from_pretrained()"),ABt.forEach(t),LWr=r(bre," class method or the "),bee=n(bre,"A",{href:!0});var yBt=s(bee);xWr=r(yBt,"from_config()"),yBt.forEach(t),$Wr=r(bre,` class
method.`),bre.forEach(t),kWr=i(gi),s$=n(gi,"P",{});var CXe=s(s$);SWr=r(CXe,"This class cannot be instantiated directly using "),GEe=n(CXe,"CODE",{});var LBt=s(GEe);RWr=r(LBt,"__init__()"),LBt.forEach(t),PWr=r(CXe," (throws an error)."),CXe.forEach(t),BWr=i(gi),Zt=n(gi,"DIV",{class:!0});var e0=s(Zt);T(l$.$$.fragment,e0),IWr=i(e0),OEe=n(e0,"P",{});var xBt=s(OEe);NWr=r(xBt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xBt.forEach(t),qWr=i(e0),uf=n(e0,"P",{});var vre=s(uf);jWr=r(vre,`Note:
Loading a model from its configuration file does `),VEe=n(vre,"STRONG",{});var $Bt=s(VEe);DWr=r($Bt,"not"),$Bt.forEach(t),GWr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=n(vre,"A",{href:!0});var kBt=s(vee);OWr=r(kBt,"from_pretrained()"),kBt.forEach(t),VWr=r(vre," to load the model weights."),vre.forEach(t),XWr=i(e0),T(L5.$$.fragment,e0),e0.forEach(t),zWr=i(gi),Jr=n(gi,"DIV",{class:!0});var hi=s(Jr);T(i$.$$.fragment,hi),WWr=i(hi),XEe=n(hi,"P",{});var SBt=s(XEe);QWr=r(SBt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SBt.forEach(t),HWr=i(hi),Ln=n(hi,"P",{});var o0=s(Ln);UWr=r(o0,"The model class to instantiate is selected based on the "),zEe=n(o0,"CODE",{});var RBt=s(zEe);JWr=r(RBt,"model_type"),RBt.forEach(t),YWr=r(o0,` property of the config object (either
passed as an argument or loaded from `),WEe=n(o0,"CODE",{});var PBt=s(WEe);KWr=r(PBt,"pretrained_model_name_or_path"),PBt.forEach(t),ZWr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(o0,"CODE",{});var BBt=s(QEe);eQr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),oQr=r(o0,":"),o0.forEach(t),rQr=i(hi),HEe=n(hi,"UL",{});var IBt=s(HEe);x5=n(IBt,"LI",{});var fDe=s(x5);UEe=n(fDe,"STRONG",{});var NBt=s(UEe);tQr=r(NBt,"bert"),NBt.forEach(t),aQr=r(fDe," \u2014 "),Fee=n(fDe,"A",{href:!0});var qBt=s(Fee);nQr=r(qBt,"FlaxBertForNextSentencePrediction"),qBt.forEach(t),sQr=r(fDe," (BERT model)"),fDe.forEach(t),IBt.forEach(t),lQr=i(hi),T($5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),uOe=i(f),_f=n(f,"H2",{class:!0});var wXe=s(_f);k5=n(wXe,"A",{id:!0,class:!0,href:!0});var jBt=s(k5);JEe=n(jBt,"SPAN",{});var DBt=s(JEe);T(d$.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),iQr=i(wXe),YEe=n(wXe,"SPAN",{});var GBt=s(YEe);dQr=r(GBt,"FlaxAutoModelForImageClassification"),GBt.forEach(t),wXe.forEach(t),_Oe=i(f),Er=n(f,"DIV",{class:!0});var pi=s(Er);T(c$.$$.fragment,pi),cQr=i(pi),bf=n(pi,"P",{});var Fre=s(bf);fQr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tee=n(Fre,"A",{href:!0});var OBt=s(Tee);mQr=r(OBt,"from_pretrained()"),OBt.forEach(t),gQr=r(Fre," class method or the "),Mee=n(Fre,"A",{href:!0});var VBt=s(Mee);hQr=r(VBt,"from_config()"),VBt.forEach(t),pQr=r(Fre,` class
method.`),Fre.forEach(t),uQr=i(pi),f$=n(pi,"P",{});var AXe=s(f$);_Qr=r(AXe,"This class cannot be instantiated directly using "),KEe=n(AXe,"CODE",{});var XBt=s(KEe);bQr=r(XBt,"__init__()"),XBt.forEach(t),vQr=r(AXe," (throws an error)."),AXe.forEach(t),FQr=i(pi),ea=n(pi,"DIV",{class:!0});var r0=s(ea);T(m$.$$.fragment,r0),TQr=i(r0),ZEe=n(r0,"P",{});var zBt=s(ZEe);MQr=r(zBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zBt.forEach(t),EQr=i(r0),vf=n(r0,"P",{});var Tre=s(vf);CQr=r(Tre,`Note:
Loading a model from its configuration file does `),eCe=n(Tre,"STRONG",{});var WBt=s(eCe);wQr=r(WBt,"not"),WBt.forEach(t),AQr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(Tre,"A",{href:!0});var QBt=s(Eee);yQr=r(QBt,"from_pretrained()"),QBt.forEach(t),LQr=r(Tre," to load the model weights."),Tre.forEach(t),xQr=i(r0),T(S5.$$.fragment,r0),r0.forEach(t),$Qr=i(pi),Yr=n(pi,"DIV",{class:!0});var ui=s(Yr);T(g$.$$.fragment,ui),kQr=i(ui),oCe=n(ui,"P",{});var HBt=s(oCe);SQr=r(HBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HBt.forEach(t),RQr=i(ui),xn=n(ui,"P",{});var t0=s(xn);PQr=r(t0,"The model class to instantiate is selected based on the "),rCe=n(t0,"CODE",{});var UBt=s(rCe);BQr=r(UBt,"model_type"),UBt.forEach(t),IQr=r(t0,` property of the config object (either
passed as an argument or loaded from `),tCe=n(t0,"CODE",{});var JBt=s(tCe);NQr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),qQr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(t0,"CODE",{});var YBt=s(aCe);jQr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),DQr=r(t0,":"),t0.forEach(t),GQr=i(ui),h$=n(ui,"UL",{});var yXe=s(h$);R5=n(yXe,"LI",{});var mDe=s(R5);nCe=n(mDe,"STRONG",{});var KBt=s(nCe);OQr=r(KBt,"beit"),KBt.forEach(t),VQr=r(mDe," \u2014 "),Cee=n(mDe,"A",{href:!0});var ZBt=s(Cee);XQr=r(ZBt,"FlaxBeitForImageClassification"),ZBt.forEach(t),zQr=r(mDe," (BEiT model)"),mDe.forEach(t),WQr=i(yXe),P5=n(yXe,"LI",{});var gDe=s(P5);sCe=n(gDe,"STRONG",{});var eIt=s(sCe);QQr=r(eIt,"vit"),eIt.forEach(t),HQr=r(gDe," \u2014 "),wee=n(gDe,"A",{href:!0});var oIt=s(wee);UQr=r(oIt,"FlaxViTForImageClassification"),oIt.forEach(t),JQr=r(gDe," (ViT model)"),gDe.forEach(t),yXe.forEach(t),YQr=i(ui),T(B5.$$.fragment,ui),ui.forEach(t),pi.forEach(t),bOe=i(f),Ff=n(f,"H2",{class:!0});var LXe=s(Ff);I5=n(LXe,"A",{id:!0,class:!0,href:!0});var rIt=s(I5);lCe=n(rIt,"SPAN",{});var tIt=s(lCe);T(p$.$$.fragment,tIt),tIt.forEach(t),rIt.forEach(t),KQr=i(LXe),iCe=n(LXe,"SPAN",{});var aIt=s(iCe);ZQr=r(aIt,"FlaxAutoModelForVision2Seq"),aIt.forEach(t),LXe.forEach(t),vOe=i(f),Cr=n(f,"DIV",{class:!0});var _i=s(Cr);T(u$.$$.fragment,_i),eHr=i(_i),Tf=n(_i,"P",{});var Mre=s(Tf);oHr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aee=n(Mre,"A",{href:!0});var nIt=s(Aee);rHr=r(nIt,"from_pretrained()"),nIt.forEach(t),tHr=r(Mre," class method or the "),yee=n(Mre,"A",{href:!0});var sIt=s(yee);aHr=r(sIt,"from_config()"),sIt.forEach(t),nHr=r(Mre,` class
method.`),Mre.forEach(t),sHr=i(_i),_$=n(_i,"P",{});var xXe=s(_$);lHr=r(xXe,"This class cannot be instantiated directly using "),dCe=n(xXe,"CODE",{});var lIt=s(dCe);iHr=r(lIt,"__init__()"),lIt.forEach(t),dHr=r(xXe," (throws an error)."),xXe.forEach(t),cHr=i(_i),oa=n(_i,"DIV",{class:!0});var a0=s(oa);T(b$.$$.fragment,a0),fHr=i(a0),cCe=n(a0,"P",{});var iIt=s(cCe);mHr=r(iIt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iIt.forEach(t),gHr=i(a0),Mf=n(a0,"P",{});var Ere=s(Mf);hHr=r(Ere,`Note:
Loading a model from its configuration file does `),fCe=n(Ere,"STRONG",{});var dIt=s(fCe);pHr=r(dIt,"not"),dIt.forEach(t),uHr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(Ere,"A",{href:!0});var cIt=s(Lee);_Hr=r(cIt,"from_pretrained()"),cIt.forEach(t),bHr=r(Ere," to load the model weights."),Ere.forEach(t),vHr=i(a0),T(N5.$$.fragment,a0),a0.forEach(t),FHr=i(_i),Kr=n(_i,"DIV",{class:!0});var bi=s(Kr);T(v$.$$.fragment,bi),THr=i(bi),mCe=n(bi,"P",{});var fIt=s(mCe);MHr=r(fIt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fIt.forEach(t),EHr=i(bi),$n=n(bi,"P",{});var n0=s($n);CHr=r(n0,"The model class to instantiate is selected based on the "),gCe=n(n0,"CODE",{});var mIt=s(gCe);wHr=r(mIt,"model_type"),mIt.forEach(t),AHr=r(n0,` property of the config object (either
passed as an argument or loaded from `),hCe=n(n0,"CODE",{});var gIt=s(hCe);yHr=r(gIt,"pretrained_model_name_or_path"),gIt.forEach(t),LHr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(n0,"CODE",{});var hIt=s(pCe);xHr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),$Hr=r(n0,":"),n0.forEach(t),kHr=i(bi),uCe=n(bi,"UL",{});var pIt=s(uCe);q5=n(pIt,"LI",{});var hDe=s(q5);_Ce=n(hDe,"STRONG",{});var uIt=s(_Ce);SHr=r(uIt,"vision-encoder-decoder"),uIt.forEach(t),RHr=r(hDe," \u2014 "),xee=n(hDe,"A",{href:!0});var _It=s(xee);PHr=r(_It,"FlaxVisionEncoderDecoderModel"),_It.forEach(t),BHr=r(hDe," (Vision Encoder decoder model)"),hDe.forEach(t),pIt.forEach(t),IHr=i(bi),T(j5.$$.fragment,bi),bi.forEach(t),_i.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Eqt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoTokenizer"),c(wi,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertModel"),c($f,"id","extending-the-auto-classes"),c($f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($f,"href","#extending-the-auto-classes"),c(Ai,"class","relative group"),c(Sf,"id","transformers.AutoConfig"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Gk,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Ok,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertConfig"),c(Vk,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartConfig"),c(Xk,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitConfig"),c(zk,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertConfig"),c(Wk,"href","/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Qk,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Hk,"href","/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Uk,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Jk,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Yk,"href","/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomConfig"),c(Kk,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertConfig"),c(Zk,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineConfig"),c(eS,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPConfig"),c(oS,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertConfig"),c(rS,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextConfig"),c(tS,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLConfig"),c(aS,"href","/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtConfig"),c(nS,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sS,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lS,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(iS,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaConfig"),c(dS,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(cS,"href","/docs/transformers/pr_17689/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(fS,"href","/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTConfig"),c(mS,"href","/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrConfig"),c(gS,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertConfig"),c(hS,"href","/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRConfig"),c(pS,"href","/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTConfig"),c(uS,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraConfig"),c(_S,"href","/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bS,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vS,"href","/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaConfig"),c(FS,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetConfig"),c(TS,"href","/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTConfig"),c(MS,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelConfig"),c(ES,"href","/docs/transformers/pr_17689/en/model_doc/glpn#transformers.GLPNConfig"),c(CS,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Config"),c(wS,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(AS,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yS,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJConfig"),c(LS,"href","/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertConfig"),c(xS,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertConfig"),c($S,"href","/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(kS,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(SS,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(RS,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(PS,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDConfig"),c(BS,"href","/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitConfig"),c(IS,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerConfig"),c(NS,"href","/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeConfig"),c(qS,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertConfig"),c(jS,"href","/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100Config"),c(DS,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianConfig"),c(GS,"href","/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(OS,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartConfig"),c(VS,"href","/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTConfig"),c(XS,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(zS,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(WS,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetConfig"),c(QS,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Config"),c(HS,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(US,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(JS,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTConfig"),c(YS,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusConfig"),c(KS,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ZS,"href","/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartConfig"),c(eR,"href","/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(oR,"href","/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(rR,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(tR,"href","/docs/transformers/pr_17689/en/model_doc/rag#transformers.RagConfig"),c(aR,"href","/docs/transformers/pr_17689/en/model_doc/realm#transformers.RealmConfig"),c(nR,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerConfig"),c(sR,"href","/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetConfig"),c(lR,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertConfig"),c(iR,"href","/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetConfig"),c(dR,"href","/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertConfig"),c(cR,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaConfig"),c(fR,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerConfig"),c(mR,"href","/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerConfig"),c(gR,"href","/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWConfig"),c(hR,"href","/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDConfig"),c(pR,"href","/docs/transformers/pr_17689/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(uR,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(_R,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(bR,"href","/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterConfig"),c(vR,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(FR,"href","/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinConfig"),c(TR,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Config"),c(MR,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasConfig"),c(ER,"href","/docs/transformers/pr_17689/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(CR,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(wR,"href","/docs/transformers/pr_17689/en/model_doc/trocr#transformers.TrOCRConfig"),c(AR,"href","/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(yR,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(LR,"href","/docs/transformers/pr_17689/en/model_doc/van#transformers.VanConfig"),c(xR,"href","/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltConfig"),c($R,"href","/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(kR,"href","/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(SR,"href","/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(RR,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTConfig"),c(PR,"href","/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(BR,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(IR,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(NR,"href","/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMConfig"),c(qR,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMConfig"),c(jR,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMConfig"),c(DR,"href","/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(GR,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(OR,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(VR,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetConfig"),c(XR,"href","/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosConfig"),c(zR,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"id","transformers.AutoTokenizer"),c(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jg,"href","#transformers.AutoTokenizer"),c(xi,"class","relative group"),c(WR,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(QR,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertTokenizer"),c(HR,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartTokenizer"),c(JR,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartTokenizerFast"),c(YR,"href","/docs/transformers/pr_17689/en/model_doc/barthez#transformers.BarthezTokenizer"),c(KR,"href","/docs/transformers/pr_17689/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17689/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(eP,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizer"),c(oP,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(tP,"href","/docs/transformers/pr_17689/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(aP,"href","/docs/transformers/pr_17689/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(nP,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(sP,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(lP,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iP,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dP,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(cP,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(fP,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(mP,"href","/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(gP,"href","/docs/transformers/pr_17689/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hP,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertTokenizer"),c(pP,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineTokenizer"),c(_P,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPTokenizer"),c(bP,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vP,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FP,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17689/en/model_doc/cpm#transformers.CpmTokenizer"),c(MP,"href","/docs/transformers/pr_17689/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(EP,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CP,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wP,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AP,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yP,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LP,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xP,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($P,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kP,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RP,"href","/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(PP,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraTokenizer"),c(BP,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IP,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(NP,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetTokenizer"),c(qP,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jP,"href","/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DP,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GP,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OP,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VP,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XP,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zP,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WP,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(QP,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HP,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UP,"href","/docs/transformers/pr_17689/en/model_doc/herbert#transformers.HerbertTokenizer"),c(JP,"href","/docs/transformers/pr_17689/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KP,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZP,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(oB,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(rB,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(tB,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(aB,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(nB,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(sB,"href","/docs/transformers/pr_17689/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(lB,"href","/docs/transformers/pr_17689/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(iB,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDTokenizer"),c(dB,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDTokenizerFast"),c(cB,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerTokenizer"),c(fB,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(mB,"href","/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeTokenizer"),c(gB,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(hB,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(uB,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianTokenizer"),c(_B,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartTokenizer"),c(bB,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(vB,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(FB,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(TB,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizer"),c(MB,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17689/en/model_doc/mluke#transformers.MLukeTokenizer"),c(CB,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(wB,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(yB,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(LB,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Tokenizer"),c(xB,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5TokenizerFast"),c($B,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertTokenizer"),c(kB,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(RB,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(PB,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BB,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(IB,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(NB,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(qB,"href","/docs/transformers/pr_17689/en/model_doc/phobert#transformers.PhobertTokenizer"),c(jB,"href","/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartTokenizer"),c(DB,"href","/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(GB,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizerFast"),c(VB,"href","/docs/transformers/pr_17689/en/model_doc/rag#transformers.RagTokenizer"),c(XB,"href","/docs/transformers/pr_17689/en/model_doc/realm#transformers.RealmTokenizer"),c(zB,"href","/docs/transformers/pr_17689/en/model_doc/realm#transformers.RealmTokenizerFast"),c(WB,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerTokenizer"),c(QB,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(HB,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertTokenizer"),c(UB,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(YB,"href","/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(KB,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZB,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eI,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(oI,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(rI,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(tI,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(aI,"href","/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterTokenizer"),c(nI,"href","/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(sI,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(lI,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(iI,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Tokenizer"),c(dI,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5TokenizerFast"),c(cI,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasTokenizer"),c(fI,"href","/docs/transformers/pr_17689/en/model_doc/tapex#transformers.TapexTokenizer"),c(mI,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(gI,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizer"),c(hI,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizer"),c(uI,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bI,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vI,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(FI,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMTokenizer"),c(TI,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(MI,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMTokenizer"),c(EI,"href","/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(CI,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(wI,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(AI,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yI,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LI,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(xI,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c($I,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertTokenizer"),c(kI,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"id","transformers.AutoFeatureExtractor"),c(Th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Th,"href","#transformers.AutoFeatureExtractor"),c($i,"class","relative group"),c(SI,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(RI,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(II,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qI,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jI,"href","/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(DI,"href","/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(GI,"href","/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(OI,"href","/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(VI,"href","/docs/transformers/pr_17689/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(XI,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zI,"href","/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(WI,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(QI,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(HI,"href","/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cN,"href","/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"id","transformers.AutoProcessor"),c(tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tp,"href","#transformers.AutoProcessor"),c(ki,"class","relative group"),c(fN,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mN,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPProcessor"),c(gN,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(hN,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(pN,"href","/docs/transformers/pr_17689/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_N,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bN,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(vN,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(FN,"href","/docs/transformers/pr_17689/en/model_doc/trocr#transformers.TrOCRProcessor"),c(TN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EN,"href","/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltProcessor"),c(CN,"href","/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(wN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yN,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cp,"id","transformers.AutoModel"),c(Cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cp,"href","#transformers.AutoModel"),c(Ri,"class","relative group"),c(LN,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xN,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($N,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kN,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertModel"),c(SN,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartModel"),c(RN,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitModel"),c(PN,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertModel"),c(BN,"href","/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(IN,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdModel"),c(NN,"href","/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(qN,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(jN,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(DN,"href","/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomModel"),c(GN,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertModel"),c(ON,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineModel"),c(VN,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.CLIPModel"),c(XN,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertModel"),c(zN,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextModel"),c(WN,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLModel"),c(QN,"href","/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtModel"),c(HN,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UN,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JN,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YN,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaModel"),c(KN,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZN,"href","/docs/transformers/pr_17689/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eq,"href","/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTModel"),c(oq,"href","/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrModel"),c(rq,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertModel"),c(tq,"href","/docs/transformers/pr_17689/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aq,"href","/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTModel"),c(nq,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraModel"),c(sq,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertModel"),c(lq,"href","/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaModel"),c(iq,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetModel"),c(dq,"href","/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTModel"),c(cq,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelModel"),c(fq,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelBaseModel"),c(mq,"href","/docs/transformers/pr_17689/en/model_doc/glpn#transformers.GLPNModel"),c(gq,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2Model"),c(hq,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(pq,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(uq,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJModel"),c(_q,"href","/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertModel"),c(bq,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertModel"),c(vq,"href","/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Fq,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Tq,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Mq,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Eq,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDModel"),c(Cq,"href","/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitModel"),c(wq,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerModel"),c(Aq,"href","/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeModel"),c(yq,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertModel"),c(Lq,"href","/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100Model"),c(xq,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianModel"),c($q,"href","/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerModel"),c(kq,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartModel"),c(Sq,"href","/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTModel"),c(Rq,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Pq,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Bq,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetModel"),c(Iq,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5Model"),c(Nq,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerModel"),c(qq,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jq,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTModel"),c(Dq,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusModel"),c(Gq,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverModel"),c(Oq,"href","/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartModel"),c(Vq,"href","/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Xq,"href","/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zq,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Wq,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerModel"),c(Qq,"href","/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetModel"),c(Hq,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertModel"),c(Uq,"href","/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetModel"),c(Jq,"href","/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertModel"),c(Yq,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaModel"),c(Kq,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerModel"),c(Zq,"href","/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerModel"),c(ej,"href","/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWModel"),c(oj,"href","/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDModel"),c(rj,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tj,"href","/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterModel"),c(aj,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nj,"href","/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinModel"),c(sj,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5Model"),c(lj,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasModel"),c(ij,"href","/docs/transformers/pr_17689/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(dj,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cj,"href","/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechModel"),c(fj,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mj,"href","/docs/transformers/pr_17689/en/model_doc/van#transformers.VanModel"),c(gj,"href","/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltModel"),c(hj,"href","/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(pj,"href","/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertModel"),c(uj,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTModel"),c(_j,"href","/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bj,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vj,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Fj,"href","/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMModel"),c(Tj,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMModel"),c(Mj,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMModel"),c(Ej,"href","/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Cj,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(wj,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Aj,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetModel"),c(yj,"href","/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosModel"),c(Lj,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C_,"id","transformers.AutoModelForPreTraining"),c(C_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C_,"href","#transformers.AutoModelForPreTraining"),c(Ii,"class","relative group"),c(xj,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($j,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kj,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sj,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Rj,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForPreTraining"),c(Bj,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Ij,"href","/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Nj,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qj,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jj,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Xj,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zj,"href","/docs/transformers/pr_17689/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Wj,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Qj,"href","/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Uj,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jj,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eD,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oD,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rD,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tD,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aD,"href","/docs/transformers/pr_17689/en/model_doc/retribert#transformers.RetriBertModel"),c(nD,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sD,"href","/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(lD,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cD,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fD,"href","/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(mD,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(gD,"href","/docs/transformers/pr_17689/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(hD,"href","/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(pD,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uD,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(_D,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bD,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vD,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(FD,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_1,"id","transformers.AutoModelForCausalLM"),c(_1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_1,"href","#transformers.AutoModelForCausalLM"),c(ji,"class","relative group"),c(TD,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MD,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ED,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CD,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForCausalLM"),c(wD,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertLMHeadModel"),c(AD,"href","/docs/transformers/pr_17689/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(yD,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(LD,"href","/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(xD,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($D,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(kD,"href","/docs/transformers/pr_17689/en/model_doc/bloom#transformers.BloomForCausalLM"),c(SD,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(RD,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(PD,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(BD,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForCausalLM"),c(ID,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ND,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qD,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jD,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(DD,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianForCausalLM"),c(GD,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForCausalLM"),c(OD,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VD,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XD,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.OPTForCausalLM"),c(zD,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(WD,"href","/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(QD,"href","/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HD,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(UD,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JD,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YD,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KD,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZD,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eG,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oG,"href","/docs/transformers/pr_17689/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rG,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tG,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aG,"href","/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nG,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sG,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lG,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nb,"id","transformers.AutoModelForMaskedLM"),c(nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nb,"href","#transformers.AutoModelForMaskedLM"),c(Oi,"class","relative group"),c(iG,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mG,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForMaskedLM"),c(hG,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pG,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bG,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vG,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FG,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MG,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EG,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CG,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wG,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yG,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LG,"href","/docs/transformers/pr_17689/en/model_doc/luke#transformers.LukeForMaskedLM"),c(xG,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(SG,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(RG,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(PG,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(BG,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(NG,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jG,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(DG,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(OG,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(VG,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(XG,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(zG,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSeq2SeqLM"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSeq2SeqLM"),c(zi,"class","relative group"),c(WG,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JG,"href","/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(YG,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(KG,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ZG,"href","/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(eO,"href","/docs/transformers/pr_17689/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(rO,"href","/docs/transformers/pr_17689/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(tO,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.MarianMTModel"),c(aO,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nO,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(sO,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(lO,"href","/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(iO,"href","/docs/transformers/pr_17689/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(dO,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_17689/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f2,"id","transformers.AutoModelForSequenceClassification"),c(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f2,"href","#transformers.AutoModelForSequenceClassification"),c(Hi,"class","relative group"),c(fO,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c($O,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17689/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForMultipleChoice"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForMultipleChoice"),c(Yi,"class","relative group"),c(lV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(gV,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(hV,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(pV,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(uV,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(_V,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(bV,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(vV,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(FV,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(TV,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(MV,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(EV,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(CV,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(wV,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(AV,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(LV,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(xV,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c($V,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForNextSentencePrediction"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ed,"class","relative group"),c(jV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(VV,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(XV,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(zV,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WV,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForTokenClassification"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForTokenClassification"),c(td,"class","relative group"),c(QV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(YV,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForTokenClassification"),c(KV,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(eX,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForTokenClassification"),c(oX,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(rX,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(tX,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(aX,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(nX,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(sX,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(lX,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(iX,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(dX,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(cX,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(fX,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(mX,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(gX,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(hX,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(pX,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uX,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_X,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(bX,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(vX,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(FX,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(MX,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(EX,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(CX,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(wX,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(AX,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(yX,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LX,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(xX,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForQuestionAnswering"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForQuestionAnswering"),c(sd,"class","relative group"),c($X,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17689/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17689/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QX,"href","/docs/transformers/pr_17689/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_17689/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17689/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17689/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17689/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17689/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17689/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17689/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17689/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pz,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(bz,"href","/docs/transformers/pr_17689/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForTableQuestionAnswering"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(dd,"class","relative group"),c(vz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForImageClassification"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForImageClassification"),c(md,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitForImageClassification"),c(yz,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Lz,"href","/docs/transformers/pr_17689/en/model_doc/cvt#transformers.CvtForImageClassification"),c(xz,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($z,"href","/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kz,"href","/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Sz,"href","/docs/transformers/pr_17689/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Rz,"href","/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitForImageClassification"),c(Pz,"href","/docs/transformers/pr_17689/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Bz,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Iz,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Nz,"href","/docs/transformers/pr_17689/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(qz,"href","/docs/transformers/pr_17689/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(jz,"href","/docs/transformers/pr_17689/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Dz,"href","/docs/transformers/pr_17689/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(Gz,"href","/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Oz,"href","/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinForImageClassification"),c(Vz,"href","/docs/transformers/pr_17689/en/model_doc/van#transformers.VanForImageClassification"),c(Xz,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForVision2Seq"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForVision2Seq"),c(pd,"class","relative group"),c(zz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(bd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17689/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForAudioClassification"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForAudioClassification"),c(Td,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForAudioFrameClassification"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Cd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(pW,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(uW,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_W,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(bW,"href","/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForCTC"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(EW,"href","/docs/transformers/pr_17689/en/model_doc/hubert#transformers.HubertForCTC"),c(CW,"href","/docs/transformers/pr_17689/en/model_doc/mctct#transformers.MCTCTForCTC"),c(wW,"href","/docs/transformers/pr_17689/en/model_doc/sew#transformers.SEWForCTC"),c(AW,"href","/docs/transformers/pr_17689/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yW,"href","/docs/transformers/pr_17689/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LW,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xW,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($W,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kW,"href","/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(SW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17689/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IW,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForAudioXVector"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForAudioXVector"),c(Rd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GW,"href","/docs/transformers/pr_17689/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(OW,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VW,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(XW,"href","/docs/transformers/pr_17689/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForMaskedImageModeling"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Id,"class","relative group"),c(zW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17689/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UW,"href","/docs/transformers/pr_17689/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(JW,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.AutoModelForObjectDetection"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.AutoModelForObjectDetection"),c(Dd,"class","relative group"),c(YW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oQ,"href","/docs/transformers/pr_17689/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.AutoModelForImageSegmentation"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.AutoModelForImageSegmentation"),c(Vd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_17689/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.AutoModelForSemanticSegmentation"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Wd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cQ,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(fQ,"href","/docs/transformers/pr_17689/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(mQ,"href","/docs/transformers/pr_17689/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.AutoModelForInstanceSegmentation"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ud,"class","relative group"),c(gQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_17689/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModel"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModel"),c(Kd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertModel"),c(TQ,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.TFBartModel"),c(MQ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertModel"),c(EQ,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CQ,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wQ,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertModel"),c(AQ,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.TFCLIPModel"),c(yQ,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertModel"),c(LQ,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.TFConvNextModel"),c(xQ,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLModel"),c($Q,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kQ,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaModel"),c(SQ,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RQ,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(PQ,"href","/docs/transformers/pr_17689/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(BQ,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraModel"),c(IQ,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(NQ,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelModel"),c(qQ,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jQ,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2Model"),c(DQ,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJModel"),c(GQ,"href","/docs/transformers/pr_17689/en/model_doc/hubert#transformers.TFHubertModel"),c(OQ,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(VQ,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.TFLEDModel"),c(XQ,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerModel"),c(zQ,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WQ,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.TFMarianModel"),c(QQ,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.TFMBartModel"),c(HQ,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(UQ,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetModel"),c(JQ,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.TFMT5Model"),c(YQ,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(KQ,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.TFOPTModel"),c(ZQ,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.TFPegasusModel"),c(eH,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertModel"),c(oH,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaModel"),c(rH,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerModel"),c(tH,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(aH,"href","/docs/transformers/pr_17689/en/model_doc/swin#transformers.TFSwinModel"),c(nH,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.TFT5Model"),c(sH,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasModel"),c(lH,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(iH,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.TFViTModel"),c(dH,"href","/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(cH,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fH,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMModel"),c(mH,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(gH,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.TFAutoModelForPreTraining"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.TFAutoModelForPreTraining"),c(oc,"class","relative group"),c(hH,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(bH,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vH,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForPreTraining"),c(FH,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MH,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(CH,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(AH,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yH,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LH,"href","/docs/transformers/pr_17689/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(xH,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c($H,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kH,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SH,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RH,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BH,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IH,"href","/docs/transformers/pr_17689/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NH,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qH,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(jH,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.TFAutoModelForCausalLM"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForCausalLM"),c(ac,"class","relative group"),c(DH,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(XH,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(zH,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WH,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QH,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(HH,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UH,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(JH,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YH,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KH,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZH,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eU,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oU,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.TFAutoModelForImageClassification"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.TFAutoModelForImageClassification"),c(lc,"class","relative group"),c(rU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17689/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sU,"href","/docs/transformers/pr_17689/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lU,"href","/docs/transformers/pr_17689/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(iU,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v9,"id","transformers.TFAutoModelForMaskedLM"),c(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v9,"href","#transformers.TFAutoModelForMaskedLM"),c(cc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(gU,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(hU,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pU,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uU,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_U,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(bU,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vU,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FU,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TU,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MU,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EU,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(CU,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wU,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AU,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yU,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LU,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xU,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($U,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kU,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(O9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(gc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(qU,"href","/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jU,"href","/docs/transformers/pr_17689/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.TFMarianMTModel"),c(GU,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(VU,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.TFAutoModelForSequenceClassification"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.TFAutoModelForSequenceClassification"),c(uc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(UU,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(JU,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(YU,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(KU,"href","/docs/transformers/pr_17689/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(sJ,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(lJ,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(iJ,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(dJ,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(cJ,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(fJ,"href","/docs/transformers/pr_17689/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17689/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForMultipleChoice"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForMultipleChoice"),c(vc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CJ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wJ,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AJ,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yJ,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LJ,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c($J,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RJ,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IJ,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Mc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(XJ,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(wc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17689/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.TFAutoModelForTokenClassification"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZJ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eY,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oY,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rY,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tY,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aY,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nY,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sY,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lY,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iY,"href","/docs/transformers/pr_17689/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dY,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cY,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(fY,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(mY,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gY,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hY,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pY,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uY,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.TFAutoModelForQuestionAnswering"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17689/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17689/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17689/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17689/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17689/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($Y,"href","/docs/transformers/pr_17689/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_17689/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_17689/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PY,"href","/docs/transformers/pr_17689/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_17689/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_17689/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jY,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17689/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForVision2Seq"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Nc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17689/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.FlaxAutoModel"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.FlaxAutoModel"),c(Dc,"class","relative group"),c(UY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZY,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartModel"),c(eK,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.FlaxBeitModel"),c(oK,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertModel"),c(rK,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tK,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aK,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nK,"href","/docs/transformers/pr_17689/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sK,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lK,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraModel"),c(iK,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dK,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cK,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fK,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.FlaxMarianModel"),c(mK,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gK,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hK,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.FlaxOPTModel"),c(pK,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(uK,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_K,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bK,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.FlaxT5Model"),c(vK,"href","/docs/transformers/pr_17689/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(FK,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.FlaxViTModel"),c(TK,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(MK,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(EK,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.FlaxAutoModelForCausalLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Vc,"class","relative group"),c(CK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(LK,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xK,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($K,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kK,"href","/docs/transformers/pr_17689/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(SK,"href","/docs/transformers/pr_17689/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(RK,"href","/docs/transformers/pr_17689/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(PK,"href","/docs/transformers/pr_17689/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(BK,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IK,"href","/docs/transformers/pr_17689/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.FlaxAutoModelForPreTraining"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GK,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OK,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VK,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XK,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zK,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WK,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QK,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(HK,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(UK,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(JK,"href","/docs/transformers/pr_17689/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(YK,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForMaskedLM"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(rZ,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tZ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(aZ,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(nZ,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(sZ,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(lZ,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iZ,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dZ,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cZ,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uZ,"href","/docs/transformers/pr_17689/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_Z,"href","/docs/transformers/pr_17689/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(bZ,"href","/docs/transformers/pr_17689/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vZ,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FZ,"href","/docs/transformers/pr_17689/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TZ,"href","/docs/transformers/pr_17689/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(MZ,"href","/docs/transformers/pr_17689/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(EZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yZ,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(LZ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xZ,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($Z,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kZ,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(SZ,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(RZ,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(PZ,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(BZ,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17689/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17689/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(HZ,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForTokenClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(UZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZZ,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eee,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oee,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ree,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tee,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aee,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nee,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(see,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/pr_17689/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cee,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fee,"href","/docs/transformers/pr_17689/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mee,"href","/docs/transformers/pr_17689/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gee,"href","/docs/transformers/pr_17689/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hee,"href","/docs/transformers/pr_17689/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pee,"href","/docs/transformers/pr_17689/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(uee,"href","/docs/transformers/pr_17689/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(_ee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fee,"href","/docs/transformers/pr_17689/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForImageClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForImageClassification"),c(_f,"class","relative group"),c(Tee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cee,"href","/docs/transformers/pr_17689/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wee,"href","/docs/transformers/pr_17689/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.FlaxAutoModelForVision2Seq"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ff,"class","relative group"),c(Aee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_17689/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_17689/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,vi),b(f,Af,_),b(f,at,_),e(at,Fi),e(at,Ti),e(Ti,s0),e(at,yf),b(f,Ge,_),b(f,We,_),e(We,Mi),e(We,Sn),e(Sn,l0),e(We,Rn),e(We,Pn),e(Pn,i0),e(We,Ei),e(We,Bn),e(Bn,d0),e(We,Ci),b(f,Lf,_),M(La,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Bk),e(Ae,wi),e(wi,Ik),e(Ae,Nk),b(f,Co,_),b(f,xa,_),e(xa,qk),e(xa,xf),e(xf,jk),e(xa,$Xe),b(f,pDe,_),b(f,Ai,_),e(Ai,$f),e($f,Cre),M(c0,Cre,null),e(Ai,kXe),e(Ai,wre),e(wre,SXe),b(f,uDe,_),b(f,In,_),e(In,RXe),e(In,Are),e(Are,PXe),e(In,BXe),e(In,yre),e(yre,IXe),e(In,NXe),b(f,_De,_),M(f0,f,_),b(f,bDe,_),b(f,Dk,_),e(Dk,qXe),b(f,vDe,_),M(kf,f,_),b(f,FDe,_),b(f,yi,_),e(yi,Sf),e(Sf,Lre),M(m0,Lre,null),e(yi,jXe),e(yi,xre),e(xre,DXe),b(f,TDe,_),b(f,wo,_),M(g0,wo,null),e(wo,GXe),e(wo,h0),e(h0,OXe),e(h0,Gk),e(Gk,VXe),e(h0,XXe),e(wo,zXe),e(wo,p0),e(p0,WXe),e(p0,$re),e($re,QXe),e(p0,HXe),e(wo,UXe),e(wo,wr),M(u0,wr,null),e(wr,JXe),e(wr,kre),e(kre,YXe),e(wr,KXe),e(wr,Li),e(Li,ZXe),e(Li,Sre),e(Sre,eze),e(Li,oze),e(Li,Rre),e(Rre,rze),e(Li,tze),e(wr,aze),e(wr,A),e(A,Rf),e(Rf,Pre),e(Pre,nze),e(Rf,sze),e(Rf,Ok),e(Ok,lze),e(Rf,ize),e(A,dze),e(A,Pf),e(Pf,Bre),e(Bre,cze),e(Pf,fze),e(Pf,Vk),e(Vk,mze),e(Pf,gze),e(A,hze),e(A,Bf),e(Bf,Ire),e(Ire,pze),e(Bf,uze),e(Bf,Xk),e(Xk,_ze),e(Bf,bze),e(A,vze),e(A,If),e(If,Nre),e(Nre,Fze),e(If,Tze),e(If,zk),e(zk,Mze),e(If,Eze),e(A,Cze),e(A,Nf),e(Nf,qre),e(qre,wze),e(Nf,Aze),e(Nf,Wk),e(Wk,yze),e(Nf,Lze),e(A,xze),e(A,qf),e(qf,jre),e(jre,$ze),e(qf,kze),e(qf,Qk),e(Qk,Sze),e(qf,Rze),e(A,Pze),e(A,jf),e(jf,Dre),e(Dre,Bze),e(jf,Ize),e(jf,Hk),e(Hk,Nze),e(jf,qze),e(A,jze),e(A,Df),e(Df,Gre),e(Gre,Dze),e(Df,Gze),e(Df,Uk),e(Uk,Oze),e(Df,Vze),e(A,Xze),e(A,Gf),e(Gf,Ore),e(Ore,zze),e(Gf,Wze),e(Gf,Jk),e(Jk,Qze),e(Gf,Hze),e(A,Uze),e(A,Of),e(Of,Vre),e(Vre,Jze),e(Of,Yze),e(Of,Yk),e(Yk,Kze),e(Of,Zze),e(A,eWe),e(A,Vf),e(Vf,Xre),e(Xre,oWe),e(Vf,rWe),e(Vf,Kk),e(Kk,tWe),e(Vf,aWe),e(A,nWe),e(A,Xf),e(Xf,zre),e(zre,sWe),e(Xf,lWe),e(Xf,Zk),e(Zk,iWe),e(Xf,dWe),e(A,cWe),e(A,zf),e(zf,Wre),e(Wre,fWe),e(zf,mWe),e(zf,eS),e(eS,gWe),e(zf,hWe),e(A,pWe),e(A,Wf),e(Wf,Qre),e(Qre,uWe),e(Wf,_We),e(Wf,oS),e(oS,bWe),e(Wf,vWe),e(A,FWe),e(A,Qf),e(Qf,Hre),e(Hre,TWe),e(Qf,MWe),e(Qf,rS),e(rS,EWe),e(Qf,CWe),e(A,wWe),e(A,Hf),e(Hf,Ure),e(Ure,AWe),e(Hf,yWe),e(Hf,tS),e(tS,LWe),e(Hf,xWe),e(A,$We),e(A,Uf),e(Uf,Jre),e(Jre,kWe),e(Uf,SWe),e(Uf,aS),e(aS,RWe),e(Uf,PWe),e(A,BWe),e(A,Jf),e(Jf,Yre),e(Yre,IWe),e(Jf,NWe),e(Jf,nS),e(nS,qWe),e(Jf,jWe),e(A,DWe),e(A,Yf),e(Yf,Kre),e(Kre,GWe),e(Yf,OWe),e(Yf,sS),e(sS,VWe),e(Yf,XWe),e(A,zWe),e(A,Kf),e(Kf,Zre),e(Zre,WWe),e(Kf,QWe),e(Kf,lS),e(lS,HWe),e(Kf,UWe),e(A,JWe),e(A,Zf),e(Zf,ete),e(ete,YWe),e(Zf,KWe),e(Zf,iS),e(iS,ZWe),e(Zf,eQe),e(A,oQe),e(A,em),e(em,ote),e(ote,rQe),e(em,tQe),e(em,dS),e(dS,aQe),e(em,nQe),e(A,sQe),e(A,om),e(om,rte),e(rte,lQe),e(om,iQe),e(om,cS),e(cS,dQe),e(om,cQe),e(A,fQe),e(A,rm),e(rm,tte),e(tte,mQe),e(rm,gQe),e(rm,fS),e(fS,hQe),e(rm,pQe),e(A,uQe),e(A,tm),e(tm,ate),e(ate,_Qe),e(tm,bQe),e(tm,mS),e(mS,vQe),e(tm,FQe),e(A,TQe),e(A,am),e(am,nte),e(nte,MQe),e(am,EQe),e(am,gS),e(gS,CQe),e(am,wQe),e(A,AQe),e(A,nm),e(nm,ste),e(ste,yQe),e(nm,LQe),e(nm,hS),e(hS,xQe),e(nm,$Qe),e(A,kQe),e(A,sm),e(sm,lte),e(lte,SQe),e(sm,RQe),e(sm,pS),e(pS,PQe),e(sm,BQe),e(A,IQe),e(A,lm),e(lm,ite),e(ite,NQe),e(lm,qQe),e(lm,uS),e(uS,jQe),e(lm,DQe),e(A,GQe),e(A,im),e(im,dte),e(dte,OQe),e(im,VQe),e(im,_S),e(_S,XQe),e(im,zQe),e(A,WQe),e(A,dm),e(dm,cte),e(cte,QQe),e(dm,HQe),e(dm,bS),e(bS,UQe),e(dm,JQe),e(A,YQe),e(A,cm),e(cm,fte),e(fte,KQe),e(cm,ZQe),e(cm,vS),e(vS,eHe),e(cm,oHe),e(A,rHe),e(A,fm),e(fm,mte),e(mte,tHe),e(fm,aHe),e(fm,FS),e(FS,nHe),e(fm,sHe),e(A,lHe),e(A,mm),e(mm,gte),e(gte,iHe),e(mm,dHe),e(mm,TS),e(TS,cHe),e(mm,fHe),e(A,mHe),e(A,gm),e(gm,hte),e(hte,gHe),e(gm,hHe),e(gm,MS),e(MS,pHe),e(gm,uHe),e(A,_He),e(A,hm),e(hm,pte),e(pte,bHe),e(hm,vHe),e(hm,ES),e(ES,FHe),e(hm,THe),e(A,MHe),e(A,pm),e(pm,ute),e(ute,EHe),e(pm,CHe),e(pm,CS),e(CS,wHe),e(pm,AHe),e(A,yHe),e(A,um),e(um,_te),e(_te,LHe),e(um,xHe),e(um,wS),e(wS,$He),e(um,kHe),e(A,SHe),e(A,_m),e(_m,bte),e(bte,RHe),e(_m,PHe),e(_m,AS),e(AS,BHe),e(_m,IHe),e(A,NHe),e(A,bm),e(bm,vte),e(vte,qHe),e(bm,jHe),e(bm,yS),e(yS,DHe),e(bm,GHe),e(A,OHe),e(A,vm),e(vm,Fte),e(Fte,VHe),e(vm,XHe),e(vm,LS),e(LS,zHe),e(vm,WHe),e(A,QHe),e(A,Fm),e(Fm,Tte),e(Tte,HHe),e(Fm,UHe),e(Fm,xS),e(xS,JHe),e(Fm,YHe),e(A,KHe),e(A,Tm),e(Tm,Mte),e(Mte,ZHe),e(Tm,eUe),e(Tm,$S),e($S,oUe),e(Tm,rUe),e(A,tUe),e(A,Mm),e(Mm,Ete),e(Ete,aUe),e(Mm,nUe),e(Mm,kS),e(kS,sUe),e(Mm,lUe),e(A,iUe),e(A,Em),e(Em,Cte),e(Cte,dUe),e(Em,cUe),e(Em,SS),e(SS,fUe),e(Em,mUe),e(A,gUe),e(A,Cm),e(Cm,wte),e(wte,hUe),e(Cm,pUe),e(Cm,RS),e(RS,uUe),e(Cm,_Ue),e(A,bUe),e(A,wm),e(wm,Ate),e(Ate,vUe),e(wm,FUe),e(wm,PS),e(PS,TUe),e(wm,MUe),e(A,EUe),e(A,Am),e(Am,yte),e(yte,CUe),e(Am,wUe),e(Am,BS),e(BS,AUe),e(Am,yUe),e(A,LUe),e(A,ym),e(ym,Lte),e(Lte,xUe),e(ym,$Ue),e(ym,IS),e(IS,kUe),e(ym,SUe),e(A,RUe),e(A,Lm),e(Lm,xte),e(xte,PUe),e(Lm,BUe),e(Lm,NS),e(NS,IUe),e(Lm,NUe),e(A,qUe),e(A,xm),e(xm,$te),e($te,jUe),e(xm,DUe),e(xm,qS),e(qS,GUe),e(xm,OUe),e(A,VUe),e(A,$m),e($m,kte),e(kte,XUe),e($m,zUe),e($m,jS),e(jS,WUe),e($m,QUe),e(A,HUe),e(A,km),e(km,Ste),e(Ste,UUe),e(km,JUe),e(km,DS),e(DS,YUe),e(km,KUe),e(A,ZUe),e(A,Sm),e(Sm,Rte),e(Rte,eJe),e(Sm,oJe),e(Sm,GS),e(GS,rJe),e(Sm,tJe),e(A,aJe),e(A,Rm),e(Rm,Pte),e(Pte,nJe),e(Rm,sJe),e(Rm,OS),e(OS,lJe),e(Rm,iJe),e(A,dJe),e(A,Pm),e(Pm,Bte),e(Bte,cJe),e(Pm,fJe),e(Pm,VS),e(VS,mJe),e(Pm,gJe),e(A,hJe),e(A,Bm),e(Bm,Ite),e(Ite,pJe),e(Bm,uJe),e(Bm,XS),e(XS,_Je),e(Bm,bJe),e(A,vJe),e(A,Im),e(Im,Nte),e(Nte,FJe),e(Im,TJe),e(Im,zS),e(zS,MJe),e(Im,EJe),e(A,CJe),e(A,Nm),e(Nm,qte),e(qte,wJe),e(Nm,AJe),e(Nm,WS),e(WS,yJe),e(Nm,LJe),e(A,xJe),e(A,qm),e(qm,jte),e(jte,$Je),e(qm,kJe),e(qm,QS),e(QS,SJe),e(qm,RJe),e(A,PJe),e(A,jm),e(jm,Dte),e(Dte,BJe),e(jm,IJe),e(jm,HS),e(HS,NJe),e(jm,qJe),e(A,jJe),e(A,Dm),e(Dm,Gte),e(Gte,DJe),e(Dm,GJe),e(Dm,US),e(US,OJe),e(Dm,VJe),e(A,XJe),e(A,Gm),e(Gm,Ote),e(Ote,zJe),e(Gm,WJe),e(Gm,JS),e(JS,QJe),e(Gm,HJe),e(A,UJe),e(A,Om),e(Om,Vte),e(Vte,JJe),e(Om,YJe),e(Om,YS),e(YS,KJe),e(Om,ZJe),e(A,eYe),e(A,Vm),e(Vm,Xte),e(Xte,oYe),e(Vm,rYe),e(Vm,KS),e(KS,tYe),e(Vm,aYe),e(A,nYe),e(A,Xm),e(Xm,zte),e(zte,sYe),e(Xm,lYe),e(Xm,ZS),e(ZS,iYe),e(Xm,dYe),e(A,cYe),e(A,zm),e(zm,Wte),e(Wte,fYe),e(zm,mYe),e(zm,eR),e(eR,gYe),e(zm,hYe),e(A,pYe),e(A,Wm),e(Wm,Qte),e(Qte,uYe),e(Wm,_Ye),e(Wm,oR),e(oR,bYe),e(Wm,vYe),e(A,FYe),e(A,Qm),e(Qm,Hte),e(Hte,TYe),e(Qm,MYe),e(Qm,rR),e(rR,EYe),e(Qm,CYe),e(A,wYe),e(A,Hm),e(Hm,Ute),e(Ute,AYe),e(Hm,yYe),e(Hm,tR),e(tR,LYe),e(Hm,xYe),e(A,$Ye),e(A,Um),e(Um,Jte),e(Jte,kYe),e(Um,SYe),e(Um,aR),e(aR,RYe),e(Um,PYe),e(A,BYe),e(A,Jm),e(Jm,Yte),e(Yte,IYe),e(Jm,NYe),e(Jm,nR),e(nR,qYe),e(Jm,jYe),e(A,DYe),e(A,Ym),e(Ym,Kte),e(Kte,GYe),e(Ym,OYe),e(Ym,sR),e(sR,VYe),e(Ym,XYe),e(A,zYe),e(A,Km),e(Km,Zte),e(Zte,WYe),e(Km,QYe),e(Km,lR),e(lR,HYe),e(Km,UYe),e(A,JYe),e(A,Zm),e(Zm,eae),e(eae,YYe),e(Zm,KYe),e(Zm,iR),e(iR,ZYe),e(Zm,eKe),e(A,oKe),e(A,eg),e(eg,oae),e(oae,rKe),e(eg,tKe),e(eg,dR),e(dR,aKe),e(eg,nKe),e(A,sKe),e(A,og),e(og,rae),e(rae,lKe),e(og,iKe),e(og,cR),e(cR,dKe),e(og,cKe),e(A,fKe),e(A,rg),e(rg,tae),e(tae,mKe),e(rg,gKe),e(rg,fR),e(fR,hKe),e(rg,pKe),e(A,uKe),e(A,tg),e(tg,aae),e(aae,_Ke),e(tg,bKe),e(tg,mR),e(mR,vKe),e(tg,FKe),e(A,TKe),e(A,ag),e(ag,nae),e(nae,MKe),e(ag,EKe),e(ag,gR),e(gR,CKe),e(ag,wKe),e(A,AKe),e(A,ng),e(ng,sae),e(sae,yKe),e(ng,LKe),e(ng,hR),e(hR,xKe),e(ng,$Ke),e(A,kKe),e(A,sg),e(sg,lae),e(lae,SKe),e(sg,RKe),e(sg,pR),e(pR,PKe),e(sg,BKe),e(A,IKe),e(A,lg),e(lg,iae),e(iae,NKe),e(lg,qKe),e(lg,uR),e(uR,jKe),e(lg,DKe),e(A,GKe),e(A,ig),e(ig,dae),e(dae,OKe),e(ig,VKe),e(ig,_R),e(_R,XKe),e(ig,zKe),e(A,WKe),e(A,dg),e(dg,cae),e(cae,QKe),e(dg,HKe),e(dg,bR),e(bR,UKe),e(dg,JKe),e(A,YKe),e(A,cg),e(cg,fae),e(fae,KKe),e(cg,ZKe),e(cg,vR),e(vR,eZe),e(cg,oZe),e(A,rZe),e(A,fg),e(fg,mae),e(mae,tZe),e(fg,aZe),e(fg,FR),e(FR,nZe),e(fg,sZe),e(A,lZe),e(A,mg),e(mg,gae),e(gae,iZe),e(mg,dZe),e(mg,TR),e(TR,cZe),e(mg,fZe),e(A,mZe),e(A,gg),e(gg,hae),e(hae,gZe),e(gg,hZe),e(gg,MR),e(MR,pZe),e(gg,uZe),e(A,_Ze),e(A,hg),e(hg,pae),e(pae,bZe),e(hg,vZe),e(hg,ER),e(ER,FZe),e(hg,TZe),e(A,MZe),e(A,pg),e(pg,uae),e(uae,EZe),e(pg,CZe),e(pg,CR),e(CR,wZe),e(pg,AZe),e(A,yZe),e(A,ug),e(ug,_ae),e(_ae,LZe),e(ug,xZe),e(ug,wR),e(wR,$Ze),e(ug,kZe),e(A,SZe),e(A,_g),e(_g,bae),e(bae,RZe),e(_g,PZe),e(_g,AR),e(AR,BZe),e(_g,IZe),e(A,NZe),e(A,bg),e(bg,vae),e(vae,qZe),e(bg,jZe),e(bg,yR),e(yR,DZe),e(bg,GZe),e(A,OZe),e(A,vg),e(vg,Fae),e(Fae,VZe),e(vg,XZe),e(vg,LR),e(LR,zZe),e(vg,WZe),e(A,QZe),e(A,Fg),e(Fg,Tae),e(Tae,HZe),e(Fg,UZe),e(Fg,xR),e(xR,JZe),e(Fg,YZe),e(A,KZe),e(A,Tg),e(Tg,Mae),e(Mae,ZZe),e(Tg,eeo),e(Tg,$R),e($R,oeo),e(Tg,reo),e(A,teo),e(A,Mg),e(Mg,Eae),e(Eae,aeo),e(Mg,neo),e(Mg,kR),e(kR,seo),e(Mg,leo),e(A,ieo),e(A,Eg),e(Eg,Cae),e(Cae,deo),e(Eg,ceo),e(Eg,SR),e(SR,feo),e(Eg,meo),e(A,geo),e(A,Cg),e(Cg,wae),e(wae,heo),e(Cg,peo),e(Cg,RR),e(RR,ueo),e(Cg,_eo),e(A,beo),e(A,wg),e(wg,Aae),e(Aae,veo),e(wg,Feo),e(wg,PR),e(PR,Teo),e(wg,Meo),e(A,Eeo),e(A,Ag),e(Ag,yae),e(yae,Ceo),e(Ag,weo),e(Ag,BR),e(BR,Aeo),e(Ag,yeo),e(A,Leo),e(A,yg),e(yg,Lae),e(Lae,xeo),e(yg,$eo),e(yg,IR),e(IR,keo),e(yg,Seo),e(A,Reo),e(A,Lg),e(Lg,xae),e(xae,Peo),e(Lg,Beo),e(Lg,NR),e(NR,Ieo),e(Lg,Neo),e(A,qeo),e(A,xg),e(xg,$ae),e($ae,jeo),e(xg,Deo),e(xg,qR),e(qR,Geo),e(xg,Oeo),e(A,Veo),e(A,$g),e($g,kae),e(kae,Xeo),e($g,zeo),e($g,jR),e(jR,Weo),e($g,Qeo),e(A,Heo),e(A,kg),e(kg,Sae),e(Sae,Ueo),e(kg,Jeo),e(kg,DR),e(DR,Yeo),e(kg,Keo),e(A,Zeo),e(A,Sg),e(Sg,Rae),e(Rae,eoo),e(Sg,ooo),e(Sg,GR),e(GR,roo),e(Sg,too),e(A,aoo),e(A,Rg),e(Rg,Pae),e(Pae,noo),e(Rg,soo),e(Rg,OR),e(OR,loo),e(Rg,ioo),e(A,doo),e(A,Pg),e(Pg,Bae),e(Bae,coo),e(Pg,foo),e(Pg,VR),e(VR,moo),e(Pg,goo),e(A,hoo),e(A,Bg),e(Bg,Iae),e(Iae,poo),e(Bg,uoo),e(Bg,XR),e(XR,_oo),e(Bg,boo),e(A,voo),e(A,Ig),e(Ig,Nae),e(Nae,Foo),e(Ig,Too),e(Ig,zR),e(zR,Moo),e(Ig,Eoo),e(wr,Coo),M(Ng,wr,null),e(wo,woo),e(wo,qg),M(_0,qg,null),e(qg,Aoo),e(qg,qae),e(qae,yoo),b(f,MDe,_),b(f,xi,_),e(xi,jg),e(jg,jae),M(b0,jae,null),e(xi,Loo),e(xi,Dae),e(Dae,xoo),b(f,EDe,_),b(f,Ao,_),M(v0,Ao,null),e(Ao,$oo),e(Ao,F0),e(F0,koo),e(F0,WR),e(WR,Soo),e(F0,Roo),e(Ao,Poo),e(Ao,T0),e(T0,Boo),e(T0,Gae),e(Gae,Ioo),e(T0,Noo),e(Ao,qoo),e(Ao,Ar),M(M0,Ar,null),e(Ar,joo),e(Ar,Oae),e(Oae,Doo),e(Ar,Goo),e(Ar,$a),e($a,Ooo),e($a,Vae),e(Vae,Voo),e($a,Xoo),e($a,Xae),e(Xae,zoo),e($a,Woo),e($a,zae),e(zae,Qoo),e($a,Hoo),e(Ar,Uoo),e(Ar,k),e(k,Nn),e(Nn,Wae),e(Wae,Joo),e(Nn,Yoo),e(Nn,QR),e(QR,Koo),e(Nn,Zoo),e(Nn,HR),e(HR,ero),e(Nn,oro),e(k,rro),e(k,qn),e(qn,Qae),e(Qae,tro),e(qn,aro),e(qn,UR),e(UR,nro),e(qn,sro),e(qn,JR),e(JR,lro),e(qn,iro),e(k,dro),e(k,jn),e(jn,Hae),e(Hae,cro),e(jn,fro),e(jn,YR),e(YR,mro),e(jn,gro),e(jn,KR),e(KR,hro),e(jn,pro),e(k,uro),e(k,Dg),e(Dg,Uae),e(Uae,_ro),e(Dg,bro),e(Dg,ZR),e(ZR,vro),e(Dg,Fro),e(k,Tro),e(k,Dn),e(Dn,Jae),e(Jae,Mro),e(Dn,Ero),e(Dn,eP),e(eP,Cro),e(Dn,wro),e(Dn,oP),e(oP,Aro),e(Dn,yro),e(k,Lro),e(k,Gg),e(Gg,Yae),e(Yae,xro),e(Gg,$ro),e(Gg,rP),e(rP,kro),e(Gg,Sro),e(k,Rro),e(k,Og),e(Og,Kae),e(Kae,Pro),e(Og,Bro),e(Og,tP),e(tP,Iro),e(Og,Nro),e(k,qro),e(k,Vg),e(Vg,Zae),e(Zae,jro),e(Vg,Dro),e(Vg,aP),e(aP,Gro),e(Vg,Oro),e(k,Vro),e(k,Gn),e(Gn,ene),e(ene,Xro),e(Gn,zro),e(Gn,nP),e(nP,Wro),e(Gn,Qro),e(Gn,sP),e(sP,Hro),e(Gn,Uro),e(k,Jro),e(k,On),e(On,one),e(one,Yro),e(On,Kro),e(On,lP),e(lP,Zro),e(On,eto),e(On,iP),e(iP,oto),e(On,rto),e(k,tto),e(k,Vn),e(Vn,rne),e(rne,ato),e(Vn,nto),e(Vn,dP),e(dP,sto),e(Vn,lto),e(Vn,cP),e(cP,ito),e(Vn,dto),e(k,cto),e(k,Xg),e(Xg,tne),e(tne,fto),e(Xg,mto),e(Xg,fP),e(fP,gto),e(Xg,hto),e(k,pto),e(k,zg),e(zg,ane),e(ane,uto),e(zg,_to),e(zg,mP),e(mP,bto),e(zg,vto),e(k,Fto),e(k,Wg),e(Wg,nne),e(nne,Tto),e(Wg,Mto),e(Wg,gP),e(gP,Eto),e(Wg,Cto),e(k,wto),e(k,Xn),e(Xn,sne),e(sne,Ato),e(Xn,yto),e(Xn,hP),e(hP,Lto),e(Xn,xto),e(Xn,pP),e(pP,$to),e(Xn,kto),e(k,Sto),e(k,Qg),e(Qg,lne),e(lne,Rto),e(Qg,Pto),e(Qg,uP),e(uP,Bto),e(Qg,Ito),e(k,Nto),e(k,zn),e(zn,ine),e(ine,qto),e(zn,jto),e(zn,_P),e(_P,Dto),e(zn,Gto),e(zn,bP),e(bP,Oto),e(zn,Vto),e(k,Xto),e(k,Wn),e(Wn,dne),e(dne,zto),e(Wn,Wto),e(Wn,vP),e(vP,Qto),e(Wn,Hto),e(Wn,FP),e(FP,Uto),e(Wn,Jto),e(k,Yto),e(k,Qn),e(Qn,cne),e(cne,Kto),e(Qn,Zto),e(Qn,TP),e(TP,eao),e(Qn,oao),e(Qn,MP),e(MP,rao),e(Qn,tao),e(k,aao),e(k,Hg),e(Hg,fne),e(fne,nao),e(Hg,sao),e(Hg,EP),e(EP,lao),e(Hg,iao),e(k,dao),e(k,Hn),e(Hn,mne),e(mne,cao),e(Hn,fao),e(Hn,CP),e(CP,mao),e(Hn,gao),e(Hn,wP),e(wP,hao),e(Hn,pao),e(k,uao),e(k,Un),e(Un,gne),e(gne,_ao),e(Un,bao),e(Un,AP),e(AP,vao),e(Un,Fao),e(Un,yP),e(yP,Tao),e(Un,Mao),e(k,Eao),e(k,Jn),e(Jn,hne),e(hne,Cao),e(Jn,wao),e(Jn,LP),e(LP,Aao),e(Jn,yao),e(Jn,xP),e(xP,Lao),e(Jn,xao),e(k,$ao),e(k,Yn),e(Yn,pne),e(pne,kao),e(Yn,Sao),e(Yn,$P),e($P,Rao),e(Yn,Pao),e(Yn,kP),e(kP,Bao),e(Yn,Iao),e(k,Nao),e(k,Kn),e(Kn,une),e(une,qao),e(Kn,jao),e(Kn,SP),e(SP,Dao),e(Kn,Gao),e(Kn,RP),e(RP,Oao),e(Kn,Vao),e(k,Xao),e(k,Zn),e(Zn,_ne),e(_ne,zao),e(Zn,Wao),e(Zn,PP),e(PP,Qao),e(Zn,Hao),e(Zn,BP),e(BP,Uao),e(Zn,Jao),e(k,Yao),e(k,Ug),e(Ug,bne),e(bne,Kao),e(Ug,Zao),e(Ug,IP),e(IP,eno),e(Ug,ono),e(k,rno),e(k,es),e(es,vne),e(vne,tno),e(es,ano),e(es,NP),e(NP,nno),e(es,sno),e(es,qP),e(qP,lno),e(es,ino),e(k,dno),e(k,Jg),e(Jg,Fne),e(Fne,cno),e(Jg,fno),e(Jg,jP),e(jP,mno),e(Jg,gno),e(k,hno),e(k,os),e(os,Tne),e(Tne,pno),e(os,uno),e(os,DP),e(DP,_no),e(os,bno),e(os,GP),e(GP,vno),e(os,Fno),e(k,Tno),e(k,rs),e(rs,Mne),e(Mne,Mno),e(rs,Eno),e(rs,OP),e(OP,Cno),e(rs,wno),e(rs,VP),e(VP,Ano),e(rs,yno),e(k,Lno),e(k,ts),e(ts,Ene),e(Ene,xno),e(ts,$no),e(ts,XP),e(XP,kno),e(ts,Sno),e(ts,zP),e(zP,Rno),e(ts,Pno),e(k,Bno),e(k,Yg),e(Yg,Cne),e(Cne,Ino),e(Yg,Nno),e(Yg,WP),e(WP,qno),e(Yg,jno),e(k,Dno),e(k,as),e(as,wne),e(wne,Gno),e(as,Ono),e(as,QP),e(QP,Vno),e(as,Xno),e(as,HP),e(HP,zno),e(as,Wno),e(k,Qno),e(k,ns),e(ns,Ane),e(Ane,Hno),e(ns,Uno),e(ns,UP),e(UP,Jno),e(ns,Yno),e(ns,JP),e(JP,Kno),e(ns,Zno),e(k,eso),e(k,Kg),e(Kg,yne),e(yne,oso),e(Kg,rso),e(Kg,YP),e(YP,tso),e(Kg,aso),e(k,nso),e(k,ss),e(ss,Lne),e(Lne,sso),e(ss,lso),e(ss,KP),e(KP,iso),e(ss,dso),e(ss,ZP),e(ZP,cso),e(ss,fso),e(k,mso),e(k,ls),e(ls,xne),e(xne,gso),e(ls,hso),e(ls,eB),e(eB,pso),e(ls,uso),e(ls,oB),e(oB,_so),e(ls,bso),e(k,vso),e(k,is),e(is,$ne),e($ne,Fso),e(is,Tso),e(is,rB),e(rB,Mso),e(is,Eso),e(is,tB),e(tB,Cso),e(is,wso),e(k,Aso),e(k,ds),e(ds,kne),e(kne,yso),e(ds,Lso),e(ds,aB),e(aB,xso),e(ds,$so),e(ds,nB),e(nB,kso),e(ds,Sso),e(k,Rso),e(k,cs),e(cs,Sne),e(Sne,Pso),e(cs,Bso),e(cs,sB),e(sB,Iso),e(cs,Nso),e(cs,lB),e(lB,qso),e(cs,jso),e(k,Dso),e(k,fs),e(fs,Rne),e(Rne,Gso),e(fs,Oso),e(fs,iB),e(iB,Vso),e(fs,Xso),e(fs,dB),e(dB,zso),e(fs,Wso),e(k,Qso),e(k,ms),e(ms,Pne),e(Pne,Hso),e(ms,Uso),e(ms,cB),e(cB,Jso),e(ms,Yso),e(ms,fB),e(fB,Kso),e(ms,Zso),e(k,elo),e(k,Zg),e(Zg,Bne),e(Bne,olo),e(Zg,rlo),e(Zg,mB),e(mB,tlo),e(Zg,alo),e(k,nlo),e(k,gs),e(gs,Ine),e(Ine,slo),e(gs,llo),e(gs,gB),e(gB,ilo),e(gs,dlo),e(gs,hB),e(hB,clo),e(gs,flo),e(k,mlo),e(k,eh),e(eh,Nne),e(Nne,glo),e(eh,hlo),e(eh,pB),e(pB,plo),e(eh,ulo),e(k,_lo),e(k,oh),e(oh,qne),e(qne,blo),e(oh,vlo),e(oh,uB),e(uB,Flo),e(oh,Tlo),e(k,Mlo),e(k,hs),e(hs,jne),e(jne,Elo),e(hs,Clo),e(hs,_B),e(_B,wlo),e(hs,Alo),e(hs,bB),e(bB,ylo),e(hs,Llo),e(k,xlo),e(k,ps),e(ps,Dne),e(Dne,$lo),e(ps,klo),e(ps,vB),e(vB,Slo),e(ps,Rlo),e(ps,FB),e(FB,Plo),e(ps,Blo),e(k,Ilo),e(k,us),e(us,Gne),e(Gne,Nlo),e(us,qlo),e(us,TB),e(TB,jlo),e(us,Dlo),e(us,MB),e(MB,Glo),e(us,Olo),e(k,Vlo),e(k,rh),e(rh,One),e(One,Xlo),e(rh,zlo),e(rh,EB),e(EB,Wlo),e(rh,Qlo),e(k,Hlo),e(k,_s),e(_s,Vne),e(Vne,Ulo),e(_s,Jlo),e(_s,CB),e(CB,Ylo),e(_s,Klo),e(_s,wB),e(wB,Zlo),e(_s,eio),e(k,oio),e(k,bs),e(bs,Xne),e(Xne,rio),e(bs,tio),e(bs,AB),e(AB,aio),e(bs,nio),e(bs,yB),e(yB,sio),e(bs,lio),e(k,iio),e(k,vs),e(vs,zne),e(zne,dio),e(vs,cio),e(vs,LB),e(LB,fio),e(vs,mio),e(vs,xB),e(xB,gio),e(vs,hio),e(k,pio),e(k,Fs),e(Fs,Wne),e(Wne,uio),e(Fs,_io),e(Fs,$B),e($B,bio),e(Fs,vio),e(Fs,kB),e(kB,Fio),e(Fs,Tio),e(k,Mio),e(k,Ts),e(Ts,Qne),e(Qne,Eio),e(Ts,Cio),e(Ts,SB),e(SB,wio),e(Ts,Aio),e(Ts,RB),e(RB,yio),e(Ts,Lio),e(k,xio),e(k,th),e(th,Hne),e(Hne,$io),e(th,kio),e(th,PB),e(PB,Sio),e(th,Rio),e(k,Pio),e(k,Ms),e(Ms,Une),e(Une,Bio),e(Ms,Iio),e(Ms,BB),e(BB,Nio),e(Ms,qio),e(Ms,IB),e(IB,jio),e(Ms,Dio),e(k,Gio),e(k,ah),e(ah,Jne),e(Jne,Oio),e(ah,Vio),e(ah,NB),e(NB,Xio),e(ah,zio),e(k,Wio),e(k,nh),e(nh,Yne),e(Yne,Qio),e(nh,Hio),e(nh,qB),e(qB,Uio),e(nh,Jio),e(k,Yio),e(k,sh),e(sh,Kne),e(Kne,Kio),e(sh,Zio),e(sh,jB),e(jB,edo),e(sh,odo),e(k,rdo),e(k,lh),e(lh,Zne),e(Zne,tdo),e(lh,ado),e(lh,DB),e(DB,ndo),e(lh,sdo),e(k,ldo),e(k,Es),e(Es,ese),e(ese,ido),e(Es,ddo),e(Es,GB),e(GB,cdo),e(Es,fdo),e(Es,OB),e(OB,mdo),e(Es,gdo),e(k,hdo),e(k,ih),e(ih,ose),e(ose,pdo),e(ih,udo),e(ih,VB),e(VB,_do),e(ih,bdo),e(k,vdo),e(k,Cs),e(Cs,rse),e(rse,Fdo),e(Cs,Tdo),e(Cs,XB),e(XB,Mdo),e(Cs,Edo),e(Cs,zB),e(zB,Cdo),e(Cs,wdo),e(k,Ado),e(k,ws),e(ws,tse),e(tse,ydo),e(ws,Ldo),e(ws,WB),e(WB,xdo),e(ws,$do),e(ws,QB),e(QB,kdo),e(ws,Sdo),e(k,Rdo),e(k,As),e(As,ase),e(ase,Pdo),e(As,Bdo),e(As,HB),e(HB,Ido),e(As,Ndo),e(As,UB),e(UB,qdo),e(As,jdo),e(k,Ddo),e(k,ys),e(ys,nse),e(nse,Gdo),e(ys,Odo),e(ys,JB),e(JB,Vdo),e(ys,Xdo),e(ys,YB),e(YB,zdo),e(ys,Wdo),e(k,Qdo),e(k,Ls),e(Ls,sse),e(sse,Hdo),e(Ls,Udo),e(Ls,KB),e(KB,Jdo),e(Ls,Ydo),e(Ls,ZB),e(ZB,Kdo),e(Ls,Zdo),e(k,eco),e(k,xs),e(xs,lse),e(lse,oco),e(xs,rco),e(xs,eI),e(eI,tco),e(xs,aco),e(xs,oI),e(oI,nco),e(xs,sco),e(k,lco),e(k,dh),e(dh,ise),e(ise,ico),e(dh,dco),e(dh,rI),e(rI,cco),e(dh,fco),e(k,mco),e(k,ch),e(ch,dse),e(dse,gco),e(ch,hco),e(ch,tI),e(tI,pco),e(ch,uco),e(k,_co),e(k,$s),e($s,cse),e(cse,bco),e($s,vco),e($s,aI),e(aI,Fco),e($s,Tco),e($s,nI),e(nI,Mco),e($s,Eco),e(k,Cco),e(k,ks),e(ks,fse),e(fse,wco),e(ks,Aco),e(ks,sI),e(sI,yco),e(ks,Lco),e(ks,lI),e(lI,xco),e(ks,$co),e(k,kco),e(k,Ss),e(Ss,mse),e(mse,Sco),e(Ss,Rco),e(Ss,iI),e(iI,Pco),e(Ss,Bco),e(Ss,dI),e(dI,Ico),e(Ss,Nco),e(k,qco),e(k,fh),e(fh,gse),e(gse,jco),e(fh,Dco),e(fh,cI),e(cI,Gco),e(fh,Oco),e(k,Vco),e(k,mh),e(mh,hse),e(hse,Xco),e(mh,zco),e(mh,fI),e(fI,Wco),e(mh,Qco),e(k,Hco),e(k,gh),e(gh,pse),e(pse,Uco),e(gh,Jco),e(gh,mI),e(mI,Yco),e(gh,Kco),e(k,Zco),e(k,Rs),e(Rs,use),e(use,efo),e(Rs,ofo),e(Rs,gI),e(gI,rfo),e(Rs,tfo),e(Rs,hI),e(hI,afo),e(Rs,nfo),e(k,sfo),e(k,Ps),e(Ps,_se),e(_se,lfo),e(Ps,ifo),e(Ps,pI),e(pI,dfo),e(Ps,cfo),e(Ps,uI),e(uI,ffo),e(Ps,mfo),e(k,gfo),e(k,hh),e(hh,bse),e(bse,hfo),e(hh,pfo),e(hh,_I),e(_I,ufo),e(hh,_fo),e(k,bfo),e(k,ph),e(ph,vse),e(vse,vfo),e(ph,Ffo),e(ph,bI),e(bI,Tfo),e(ph,Mfo),e(k,Efo),e(k,uh),e(uh,Fse),e(Fse,Cfo),e(uh,wfo),e(uh,vI),e(vI,Afo),e(uh,yfo),e(k,Lfo),e(k,Bs),e(Bs,Tse),e(Tse,xfo),e(Bs,$fo),e(Bs,FI),e(FI,kfo),e(Bs,Sfo),e(Bs,TI),e(TI,Rfo),e(Bs,Pfo),e(k,Bfo),e(k,_h),e(_h,Mse),e(Mse,Ifo),e(_h,Nfo),e(_h,MI),e(MI,qfo),e(_h,jfo),e(k,Dfo),e(k,bh),e(bh,Ese),e(Ese,Gfo),e(bh,Ofo),e(bh,EI),e(EI,Vfo),e(bh,Xfo),e(k,zfo),e(k,Is),e(Is,Cse),e(Cse,Wfo),e(Is,Qfo),e(Is,CI),e(CI,Hfo),e(Is,Ufo),e(Is,wI),e(wI,Jfo),e(Is,Yfo),e(k,Kfo),e(k,Ns),e(Ns,wse),e(wse,Zfo),e(Ns,emo),e(Ns,AI),e(AI,omo),e(Ns,rmo),e(Ns,yI),e(yI,tmo),e(Ns,amo),e(k,nmo),e(k,qs),e(qs,Ase),e(Ase,smo),e(qs,lmo),e(qs,LI),e(LI,imo),e(qs,dmo),e(qs,xI),e(xI,cmo),e(qs,fmo),e(k,mmo),e(k,js),e(js,yse),e(yse,gmo),e(js,hmo),e(js,$I),e($I,pmo),e(js,umo),e(js,kI),e(kI,_mo),e(js,bmo),e(Ar,vmo),M(vh,Ar,null),e(Ao,Fmo),e(Ao,Fh),M(E0,Fh,null),e(Fh,Tmo),e(Fh,Lse),e(Lse,Mmo),b(f,CDe,_),b(f,$i,_),e($i,Th),e(Th,xse),M(C0,xse,null),e($i,Emo),e($i,$se),e($se,Cmo),b(f,wDe,_),b(f,yo,_),M(w0,yo,null),e(yo,wmo),e(yo,A0),e(A0,Amo),e(A0,SI),e(SI,ymo),e(A0,Lmo),e(yo,xmo),e(yo,y0),e(y0,$mo),e(y0,kse),e(kse,kmo),e(y0,Smo),e(yo,Rmo),e(yo,He),M(L0,He,null),e(He,Pmo),e(He,Sse),e(Sse,Bmo),e(He,Imo),e(He,ka),e(ka,Nmo),e(ka,Rse),e(Rse,qmo),e(ka,jmo),e(ka,Pse),e(Pse,Dmo),e(ka,Gmo),e(ka,Bse),e(Bse,Omo),e(ka,Vmo),e(He,Xmo),e(He,Y),e(Y,Mh),e(Mh,Ise),e(Ise,zmo),e(Mh,Wmo),e(Mh,RI),e(RI,Qmo),e(Mh,Hmo),e(Y,Umo),e(Y,Eh),e(Eh,Nse),e(Nse,Jmo),e(Eh,Ymo),e(Eh,PI),e(PI,Kmo),e(Eh,Zmo),e(Y,ego),e(Y,Ch),e(Ch,qse),e(qse,ogo),e(Ch,rgo),e(Ch,BI),e(BI,tgo),e(Ch,ago),e(Y,ngo),e(Y,wh),e(wh,jse),e(jse,sgo),e(wh,lgo),e(wh,II),e(II,igo),e(wh,dgo),e(Y,cgo),e(Y,Ah),e(Ah,Dse),e(Dse,fgo),e(Ah,mgo),e(Ah,NI),e(NI,ggo),e(Ah,hgo),e(Y,pgo),e(Y,yh),e(yh,Gse),e(Gse,ugo),e(yh,_go),e(yh,qI),e(qI,bgo),e(yh,vgo),e(Y,Fgo),e(Y,Lh),e(Lh,Ose),e(Ose,Tgo),e(Lh,Mgo),e(Lh,jI),e(jI,Ego),e(Lh,Cgo),e(Y,wgo),e(Y,xh),e(xh,Vse),e(Vse,Ago),e(xh,ygo),e(xh,DI),e(DI,Lgo),e(xh,xgo),e(Y,$go),e(Y,$h),e($h,Xse),e(Xse,kgo),e($h,Sgo),e($h,GI),e(GI,Rgo),e($h,Pgo),e(Y,Bgo),e(Y,kh),e(kh,zse),e(zse,Igo),e(kh,Ngo),e(kh,OI),e(OI,qgo),e(kh,jgo),e(Y,Dgo),e(Y,Sh),e(Sh,Wse),e(Wse,Ggo),e(Sh,Ogo),e(Sh,VI),e(VI,Vgo),e(Sh,Xgo),e(Y,zgo),e(Y,Rh),e(Rh,Qse),e(Qse,Wgo),e(Rh,Qgo),e(Rh,XI),e(XI,Hgo),e(Rh,Ugo),e(Y,Jgo),e(Y,Ph),e(Ph,Hse),e(Hse,Ygo),e(Ph,Kgo),e(Ph,zI),e(zI,Zgo),e(Ph,eho),e(Y,oho),e(Y,Bh),e(Bh,Use),e(Use,rho),e(Bh,tho),e(Bh,WI),e(WI,aho),e(Bh,nho),e(Y,sho),e(Y,Ih),e(Ih,Jse),e(Jse,lho),e(Ih,iho),e(Ih,QI),e(QI,dho),e(Ih,cho),e(Y,fho),e(Y,Nh),e(Nh,Yse),e(Yse,mho),e(Nh,gho),e(Nh,HI),e(HI,hho),e(Nh,pho),e(Y,uho),e(Y,qh),e(qh,Kse),e(Kse,_ho),e(qh,bho),e(qh,UI),e(UI,vho),e(qh,Fho),e(Y,Tho),e(Y,jh),e(jh,Zse),e(Zse,Mho),e(jh,Eho),e(jh,JI),e(JI,Cho),e(jh,who),e(Y,Aho),e(Y,Dh),e(Dh,ele),e(ele,yho),e(Dh,Lho),e(Dh,YI),e(YI,xho),e(Dh,$ho),e(Y,kho),e(Y,Gh),e(Gh,ole),e(ole,Sho),e(Gh,Rho),e(Gh,KI),e(KI,Pho),e(Gh,Bho),e(Y,Iho),e(Y,Oh),e(Oh,rle),e(rle,Nho),e(Oh,qho),e(Oh,ZI),e(ZI,jho),e(Oh,Dho),e(Y,Gho),e(Y,Vh),e(Vh,tle),e(tle,Oho),e(Vh,Vho),e(Vh,eN),e(eN,Xho),e(Vh,zho),e(Y,Who),e(Y,Xh),e(Xh,ale),e(ale,Qho),e(Xh,Hho),e(Xh,oN),e(oN,Uho),e(Xh,Jho),e(Y,Yho),e(Y,zh),e(zh,nle),e(nle,Kho),e(zh,Zho),e(zh,rN),e(rN,epo),e(zh,opo),e(Y,rpo),e(Y,Wh),e(Wh,sle),e(sle,tpo),e(Wh,apo),e(Wh,tN),e(tN,npo),e(Wh,spo),e(Y,lpo),e(Y,Qh),e(Qh,lle),e(lle,ipo),e(Qh,dpo),e(Qh,aN),e(aN,cpo),e(Qh,fpo),e(Y,mpo),e(Y,Hh),e(Hh,ile),e(ile,gpo),e(Hh,hpo),e(Hh,nN),e(nN,ppo),e(Hh,upo),e(Y,_po),e(Y,Uh),e(Uh,dle),e(dle,bpo),e(Uh,vpo),e(Uh,sN),e(sN,Fpo),e(Uh,Tpo),e(Y,Mpo),e(Y,Jh),e(Jh,cle),e(cle,Epo),e(Jh,Cpo),e(Jh,lN),e(lN,wpo),e(Jh,Apo),e(Y,ypo),e(Y,Yh),e(Yh,fle),e(fle,Lpo),e(Yh,xpo),e(Yh,iN),e(iN,$po),e(Yh,kpo),e(Y,Spo),e(Y,Kh),e(Kh,mle),e(mle,Rpo),e(Kh,Ppo),e(Kh,dN),e(dN,Bpo),e(Kh,Ipo),e(Y,Npo),e(Y,Zh),e(Zh,gle),e(gle,qpo),e(Zh,jpo),e(Zh,cN),e(cN,Dpo),e(Zh,Gpo),e(He,Opo),M(ep,He,null),e(He,Vpo),M(op,He,null),e(yo,Xpo),e(yo,rp),M(x0,rp,null),e(rp,zpo),e(rp,hle),e(hle,Wpo),b(f,ADe,_),b(f,ki,_),e(ki,tp),e(tp,ple),M($0,ple,null),e(ki,Qpo),e(ki,ule),e(ule,Hpo),b(f,yDe,_),b(f,Lo,_),M(k0,Lo,null),e(Lo,Upo),e(Lo,S0),e(S0,Jpo),e(S0,fN),e(fN,Ypo),e(S0,Kpo),e(Lo,Zpo),e(Lo,R0),e(R0,euo),e(R0,_le),e(_le,ouo),e(R0,ruo),e(Lo,tuo),e(Lo,Ue),M(P0,Ue,null),e(Ue,auo),e(Ue,ble),e(ble,nuo),e(Ue,suo),e(Ue,Si),e(Si,luo),e(Si,vle),e(vle,iuo),e(Si,duo),e(Si,Fle),e(Fle,cuo),e(Si,fuo),e(Ue,muo),e(Ue,he),e(he,ap),e(ap,Tle),e(Tle,guo),e(ap,huo),e(ap,mN),e(mN,puo),e(ap,uuo),e(he,_uo),e(he,np),e(np,Mle),e(Mle,buo),e(np,vuo),e(np,Ele),e(Ele,Fuo),e(np,Tuo),e(he,Muo),e(he,sp),e(sp,Cle),e(Cle,Euo),e(sp,Cuo),e(sp,gN),e(gN,wuo),e(sp,Auo),e(he,yuo),e(he,lp),e(lp,wle),e(wle,Luo),e(lp,xuo),e(lp,hN),e(hN,$uo),e(lp,kuo),e(he,Suo),e(he,ip),e(ip,Ale),e(Ale,Ruo),e(ip,Puo),e(ip,pN),e(pN,Buo),e(ip,Iuo),e(he,Nuo),e(he,dp),e(dp,yle),e(yle,quo),e(dp,juo),e(dp,uN),e(uN,Duo),e(dp,Guo),e(he,Ouo),e(he,cp),e(cp,Lle),e(Lle,Vuo),e(cp,Xuo),e(cp,_N),e(_N,zuo),e(cp,Wuo),e(he,Quo),e(he,fp),e(fp,xle),e(xle,Huo),e(fp,Uuo),e(fp,bN),e(bN,Juo),e(fp,Yuo),e(he,Kuo),e(he,mp),e(mp,$le),e($le,Zuo),e(mp,e_o),e(mp,vN),e(vN,o_o),e(mp,r_o),e(he,t_o),e(he,gp),e(gp,kle),e(kle,a_o),e(gp,n_o),e(gp,FN),e(FN,s_o),e(gp,l_o),e(he,i_o),e(he,hp),e(hp,Sle),e(Sle,d_o),e(hp,c_o),e(hp,TN),e(TN,f_o),e(hp,m_o),e(he,g_o),e(he,pp),e(pp,Rle),e(Rle,h_o),e(pp,p_o),e(pp,MN),e(MN,u_o),e(pp,__o),e(he,b_o),e(he,up),e(up,Ple),e(Ple,v_o),e(up,F_o),e(up,EN),e(EN,T_o),e(up,M_o),e(he,E_o),e(he,_p),e(_p,Ble),e(Ble,C_o),e(_p,w_o),e(_p,CN),e(CN,A_o),e(_p,y_o),e(he,L_o),e(he,bp),e(bp,Ile),e(Ile,x_o),e(bp,$_o),e(bp,wN),e(wN,k_o),e(bp,S_o),e(he,R_o),e(he,vp),e(vp,Nle),e(Nle,P_o),e(vp,B_o),e(vp,AN),e(AN,I_o),e(vp,N_o),e(he,q_o),e(he,Fp),e(Fp,qle),e(qle,j_o),e(Fp,D_o),e(Fp,yN),e(yN,G_o),e(Fp,O_o),e(Ue,V_o),M(Tp,Ue,null),e(Ue,X_o),M(Mp,Ue,null),e(Lo,z_o),e(Lo,Ep),M(B0,Ep,null),e(Ep,W_o),e(Ep,jle),e(jle,Q_o),b(f,LDe,_),b(f,Ri,_),e(Ri,Cp),e(Cp,Dle),M(I0,Dle,null),e(Ri,H_o),e(Ri,Gle),e(Gle,U_o),b(f,xDe,_),b(f,xo,_),M(N0,xo,null),e(xo,J_o),e(xo,Pi),e(Pi,Y_o),e(Pi,LN),e(LN,K_o),e(Pi,Z_o),e(Pi,xN),e(xN,e1o),e(Pi,o1o),e(xo,r1o),e(xo,q0),e(q0,t1o),e(q0,Ole),e(Ole,a1o),e(q0,n1o),e(xo,s1o),e(xo,nt),M(j0,nt,null),e(nt,l1o),e(nt,Vle),e(Vle,i1o),e(nt,d1o),e(nt,Bi),e(Bi,c1o),e(Bi,Xle),e(Xle,f1o),e(Bi,m1o),e(Bi,$N),e($N,g1o),e(Bi,h1o),e(nt,p1o),M(wp,nt,null),e(xo,u1o),e(xo,Je),M(D0,Je,null),e(Je,_1o),e(Je,zle),e(zle,b1o),e(Je,v1o),e(Je,Sa),e(Sa,F1o),e(Sa,Wle),e(Wle,T1o),e(Sa,M1o),e(Sa,Qle),e(Qle,E1o),e(Sa,C1o),e(Sa,Hle),e(Hle,w1o),e(Sa,A1o),e(Je,y1o),e(Je,x),e(x,Ap),e(Ap,Ule),e(Ule,L1o),e(Ap,x1o),e(Ap,kN),e(kN,$1o),e(Ap,k1o),e(x,S1o),e(x,yp),e(yp,Jle),e(Jle,R1o),e(yp,P1o),e(yp,SN),e(SN,B1o),e(yp,I1o),e(x,N1o),e(x,Lp),e(Lp,Yle),e(Yle,q1o),e(Lp,j1o),e(Lp,RN),e(RN,D1o),e(Lp,G1o),e(x,O1o),e(x,xp),e(xp,Kle),e(Kle,V1o),e(xp,X1o),e(xp,PN),e(PN,z1o),e(xp,W1o),e(x,Q1o),e(x,$p),e($p,Zle),e(Zle,H1o),e($p,U1o),e($p,BN),e(BN,J1o),e($p,Y1o),e(x,K1o),e(x,kp),e(kp,eie),e(eie,Z1o),e(kp,ebo),e(kp,IN),e(IN,obo),e(kp,rbo),e(x,tbo),e(x,Sp),e(Sp,oie),e(oie,abo),e(Sp,nbo),e(Sp,NN),e(NN,sbo),e(Sp,lbo),e(x,ibo),e(x,Rp),e(Rp,rie),e(rie,dbo),e(Rp,cbo),e(Rp,qN),e(qN,fbo),e(Rp,mbo),e(x,gbo),e(x,Pp),e(Pp,tie),e(tie,hbo),e(Pp,pbo),e(Pp,jN),e(jN,ubo),e(Pp,_bo),e(x,bbo),e(x,Bp),e(Bp,aie),e(aie,vbo),e(Bp,Fbo),e(Bp,DN),e(DN,Tbo),e(Bp,Mbo),e(x,Ebo),e(x,Ip),e(Ip,nie),e(nie,Cbo),e(Ip,wbo),e(Ip,GN),e(GN,Abo),e(Ip,ybo),e(x,Lbo),e(x,Np),e(Np,sie),e(sie,xbo),e(Np,$bo),e(Np,ON),e(ON,kbo),e(Np,Sbo),e(x,Rbo),e(x,qp),e(qp,lie),e(lie,Pbo),e(qp,Bbo),e(qp,VN),e(VN,Ibo),e(qp,Nbo),e(x,qbo),e(x,jp),e(jp,iie),e(iie,jbo),e(jp,Dbo),e(jp,XN),e(XN,Gbo),e(jp,Obo),e(x,Vbo),e(x,Dp),e(Dp,die),e(die,Xbo),e(Dp,zbo),e(Dp,zN),e(zN,Wbo),e(Dp,Qbo),e(x,Hbo),e(x,Gp),e(Gp,cie),e(cie,Ubo),e(Gp,Jbo),e(Gp,WN),e(WN,Ybo),e(Gp,Kbo),e(x,Zbo),e(x,Op),e(Op,fie),e(fie,e2o),e(Op,o2o),e(Op,QN),e(QN,r2o),e(Op,t2o),e(x,a2o),e(x,Vp),e(Vp,mie),e(mie,n2o),e(Vp,s2o),e(Vp,HN),e(HN,l2o),e(Vp,i2o),e(x,d2o),e(x,Xp),e(Xp,gie),e(gie,c2o),e(Xp,f2o),e(Xp,UN),e(UN,m2o),e(Xp,g2o),e(x,h2o),e(x,zp),e(zp,hie),e(hie,p2o),e(zp,u2o),e(zp,JN),e(JN,_2o),e(zp,b2o),e(x,v2o),e(x,Wp),e(Wp,pie),e(pie,F2o),e(Wp,T2o),e(Wp,YN),e(YN,M2o),e(Wp,E2o),e(x,C2o),e(x,Qp),e(Qp,uie),e(uie,w2o),e(Qp,A2o),e(Qp,KN),e(KN,y2o),e(Qp,L2o),e(x,x2o),e(x,Hp),e(Hp,_ie),e(_ie,$2o),e(Hp,k2o),e(Hp,ZN),e(ZN,S2o),e(Hp,R2o),e(x,P2o),e(x,Up),e(Up,bie),e(bie,B2o),e(Up,I2o),e(Up,eq),e(eq,N2o),e(Up,q2o),e(x,j2o),e(x,Jp),e(Jp,vie),e(vie,D2o),e(Jp,G2o),e(Jp,oq),e(oq,O2o),e(Jp,V2o),e(x,X2o),e(x,Yp),e(Yp,Fie),e(Fie,z2o),e(Yp,W2o),e(Yp,rq),e(rq,Q2o),e(Yp,H2o),e(x,U2o),e(x,Kp),e(Kp,Tie),e(Tie,J2o),e(Kp,Y2o),e(Kp,tq),e(tq,K2o),e(Kp,Z2o),e(x,evo),e(x,Zp),e(Zp,Mie),e(Mie,ovo),e(Zp,rvo),e(Zp,aq),e(aq,tvo),e(Zp,avo),e(x,nvo),e(x,eu),e(eu,Eie),e(Eie,svo),e(eu,lvo),e(eu,nq),e(nq,ivo),e(eu,dvo),e(x,cvo),e(x,ou),e(ou,Cie),e(Cie,fvo),e(ou,mvo),e(ou,sq),e(sq,gvo),e(ou,hvo),e(x,pvo),e(x,ru),e(ru,wie),e(wie,uvo),e(ru,_vo),e(ru,lq),e(lq,bvo),e(ru,vvo),e(x,Fvo),e(x,tu),e(tu,Aie),e(Aie,Tvo),e(tu,Mvo),e(tu,iq),e(iq,Evo),e(tu,Cvo),e(x,wvo),e(x,au),e(au,yie),e(yie,Avo),e(au,yvo),e(au,dq),e(dq,Lvo),e(au,xvo),e(x,$vo),e(x,Ds),e(Ds,Lie),e(Lie,kvo),e(Ds,Svo),e(Ds,cq),e(cq,Rvo),e(Ds,Pvo),e(Ds,fq),e(fq,Bvo),e(Ds,Ivo),e(x,Nvo),e(x,nu),e(nu,xie),e(xie,qvo),e(nu,jvo),e(nu,mq),e(mq,Dvo),e(nu,Gvo),e(x,Ovo),e(x,su),e(su,$ie),e($ie,Vvo),e(su,Xvo),e(su,gq),e(gq,zvo),e(su,Wvo),e(x,Qvo),e(x,lu),e(lu,kie),e(kie,Hvo),e(lu,Uvo),e(lu,hq),e(hq,Jvo),e(lu,Yvo),e(x,Kvo),e(x,iu),e(iu,Sie),e(Sie,Zvo),e(iu,eFo),e(iu,pq),e(pq,oFo),e(iu,rFo),e(x,tFo),e(x,du),e(du,Rie),e(Rie,aFo),e(du,nFo),e(du,uq),e(uq,sFo),e(du,lFo),e(x,iFo),e(x,cu),e(cu,Pie),e(Pie,dFo),e(cu,cFo),e(cu,_q),e(_q,fFo),e(cu,mFo),e(x,gFo),e(x,fu),e(fu,Bie),e(Bie,hFo),e(fu,pFo),e(fu,bq),e(bq,uFo),e(fu,_Fo),e(x,bFo),e(x,mu),e(mu,Iie),e(Iie,vFo),e(mu,FFo),e(mu,vq),e(vq,TFo),e(mu,MFo),e(x,EFo),e(x,gu),e(gu,Nie),e(Nie,CFo),e(gu,wFo),e(gu,Fq),e(Fq,AFo),e(gu,yFo),e(x,LFo),e(x,hu),e(hu,qie),e(qie,xFo),e(hu,$Fo),e(hu,Tq),e(Tq,kFo),e(hu,SFo),e(x,RFo),e(x,pu),e(pu,jie),e(jie,PFo),e(pu,BFo),e(pu,Mq),e(Mq,IFo),e(pu,NFo),e(x,qFo),e(x,uu),e(uu,Die),e(Die,jFo),e(uu,DFo),e(uu,Eq),e(Eq,GFo),e(uu,OFo),e(x,VFo),e(x,_u),e(_u,Gie),e(Gie,XFo),e(_u,zFo),e(_u,Cq),e(Cq,WFo),e(_u,QFo),e(x,HFo),e(x,bu),e(bu,Oie),e(Oie,UFo),e(bu,JFo),e(bu,wq),e(wq,YFo),e(bu,KFo),e(x,ZFo),e(x,vu),e(vu,Vie),e(Vie,e6o),e(vu,o6o),e(vu,Aq),e(Aq,r6o),e(vu,t6o),e(x,a6o),e(x,Fu),e(Fu,Xie),e(Xie,n6o),e(Fu,s6o),e(Fu,yq),e(yq,l6o),e(Fu,i6o),e(x,d6o),e(x,Tu),e(Tu,zie),e(zie,c6o),e(Tu,f6o),e(Tu,Lq),e(Lq,m6o),e(Tu,g6o),e(x,h6o),e(x,Mu),e(Mu,Wie),e(Wie,p6o),e(Mu,u6o),e(Mu,xq),e(xq,_6o),e(Mu,b6o),e(x,v6o),e(x,Eu),e(Eu,Qie),e(Qie,F6o),e(Eu,T6o),e(Eu,$q),e($q,M6o),e(Eu,E6o),e(x,C6o),e(x,Cu),e(Cu,Hie),e(Hie,w6o),e(Cu,A6o),e(Cu,kq),e(kq,y6o),e(Cu,L6o),e(x,x6o),e(x,wu),e(wu,Uie),e(Uie,$6o),e(wu,k6o),e(wu,Sq),e(Sq,S6o),e(wu,R6o),e(x,P6o),e(x,Au),e(Au,Jie),e(Jie,B6o),e(Au,I6o),e(Au,Rq),e(Rq,N6o),e(Au,q6o),e(x,j6o),e(x,yu),e(yu,Yie),e(Yie,D6o),e(yu,G6o),e(yu,Pq),e(Pq,O6o),e(yu,V6o),e(x,X6o),e(x,Lu),e(Lu,Kie),e(Kie,z6o),e(Lu,W6o),e(Lu,Bq),e(Bq,Q6o),e(Lu,H6o),e(x,U6o),e(x,xu),e(xu,Zie),e(Zie,J6o),e(xu,Y6o),e(xu,Iq),e(Iq,K6o),e(xu,Z6o),e(x,eTo),e(x,$u),e($u,ede),e(ede,oTo),e($u,rTo),e($u,Nq),e(Nq,tTo),e($u,aTo),e(x,nTo),e(x,ku),e(ku,ode),e(ode,sTo),e(ku,lTo),e(ku,qq),e(qq,iTo),e(ku,dTo),e(x,cTo),e(x,Su),e(Su,rde),e(rde,fTo),e(Su,mTo),e(Su,jq),e(jq,gTo),e(Su,hTo),e(x,pTo),e(x,Ru),e(Ru,tde),e(tde,uTo),e(Ru,_To),e(Ru,Dq),e(Dq,bTo),e(Ru,vTo),e(x,FTo),e(x,Pu),e(Pu,ade),e(ade,TTo),e(Pu,MTo),e(Pu,Gq),e(Gq,ETo),e(Pu,CTo),e(x,wTo),e(x,Bu),e(Bu,nde),e(nde,ATo),e(Bu,yTo),e(Bu,Oq),e(Oq,LTo),e(Bu,xTo),e(x,$To),e(x,Iu),e(Iu,sde),e(sde,kTo),e(Iu,STo),e(Iu,Vq),e(Vq,RTo),e(Iu,PTo),e(x,BTo),e(x,Nu),e(Nu,lde),e(lde,ITo),e(Nu,NTo),e(Nu,Xq),e(Xq,qTo),e(Nu,jTo),e(x,DTo),e(x,qu),e(qu,ide),e(ide,GTo),e(qu,OTo),e(qu,zq),e(zq,VTo),e(qu,XTo),e(x,zTo),e(x,ju),e(ju,dde),e(dde,WTo),e(ju,QTo),e(ju,Wq),e(Wq,HTo),e(ju,UTo),e(x,JTo),e(x,Du),e(Du,cde),e(cde,YTo),e(Du,KTo),e(Du,Qq),e(Qq,ZTo),e(Du,e7o),e(x,o7o),e(x,Gu),e(Gu,fde),e(fde,r7o),e(Gu,t7o),e(Gu,Hq),e(Hq,a7o),e(Gu,n7o),e(x,s7o),e(x,Ou),e(Ou,mde),e(mde,l7o),e(Ou,i7o),e(Ou,Uq),e(Uq,d7o),e(Ou,c7o),e(x,f7o),e(x,Vu),e(Vu,gde),e(gde,m7o),e(Vu,g7o),e(Vu,Jq),e(Jq,h7o),e(Vu,p7o),e(x,u7o),e(x,Xu),e(Xu,hde),e(hde,_7o),e(Xu,b7o),e(Xu,Yq),e(Yq,v7o),e(Xu,F7o),e(x,T7o),e(x,zu),e(zu,pde),e(pde,M7o),e(zu,E7o),e(zu,Kq),e(Kq,C7o),e(zu,w7o),e(x,A7o),e(x,Wu),e(Wu,ude),e(ude,y7o),e(Wu,L7o),e(Wu,Zq),e(Zq,x7o),e(Wu,$7o),e(x,k7o),e(x,Qu),e(Qu,_de),e(_de,S7o),e(Qu,R7o),e(Qu,ej),e(ej,P7o),e(Qu,B7o),e(x,I7o),e(x,Hu),e(Hu,bde),e(bde,N7o),e(Hu,q7o),e(Hu,oj),e(oj,j7o),e(Hu,D7o),e(x,G7o),e(x,Uu),e(Uu,vde),e(vde,O7o),e(Uu,V7o),e(Uu,rj),e(rj,X7o),e(Uu,z7o),e(x,W7o),e(x,Ju),e(Ju,Fde),e(Fde,Q7o),e(Ju,H7o),e(Ju,tj),e(tj,U7o),e(Ju,J7o),e(x,Y7o),e(x,Yu),e(Yu,Tde),e(Tde,K7o),e(Yu,Z7o),e(Yu,aj),e(aj,e8o),e(Yu,o8o),e(x,r8o),e(x,Ku),e(Ku,Mde),e(Mde,t8o),e(Ku,a8o),e(Ku,nj),e(nj,n8o),e(Ku,s8o),e(x,l8o),e(x,Zu),e(Zu,Ede),e(Ede,i8o),e(Zu,d8o),e(Zu,sj),e(sj,c8o),e(Zu,f8o),e(x,m8o),e(x,e_),e(e_,Cde),e(Cde,g8o),e(e_,h8o),e(e_,lj),e(lj,p8o),e(e_,u8o),e(x,_8o),e(x,o_),e(o_,wde),e(wde,b8o),e(o_,v8o),e(o_,ij),e(ij,F8o),e(o_,T8o),e(x,M8o),e(x,r_),e(r_,Ade),e(Ade,E8o),e(r_,C8o),e(r_,dj),e(dj,w8o),e(r_,A8o),e(x,y8o),e(x,t_),e(t_,yde),e(yde,L8o),e(t_,x8o),e(t_,cj),e(cj,$8o),e(t_,k8o),e(x,S8o),e(x,a_),e(a_,Lde),e(Lde,R8o),e(a_,P8o),e(a_,fj),e(fj,B8o),e(a_,I8o),e(x,N8o),e(x,n_),e(n_,xde),e(xde,q8o),e(n_,j8o),e(n_,mj),e(mj,D8o),e(n_,G8o),e(x,O8o),e(x,s_),e(s_,$de),e($de,V8o),e(s_,X8o),e(s_,gj),e(gj,z8o),e(s_,W8o),e(x,Q8o),e(x,l_),e(l_,kde),e(kde,H8o),e(l_,U8o),e(l_,hj),e(hj,J8o),e(l_,Y8o),e(x,K8o),e(x,i_),e(i_,Sde),e(Sde,Z8o),e(i_,e9o),e(i_,pj),e(pj,o9o),e(i_,r9o),e(x,t9o),e(x,d_),e(d_,Rde),e(Rde,a9o),e(d_,n9o),e(d_,uj),e(uj,s9o),e(d_,l9o),e(x,i9o),e(x,c_),e(c_,Pde),e(Pde,d9o),e(c_,c9o),e(c_,_j),e(_j,f9o),e(c_,m9o),e(x,g9o),e(x,f_),e(f_,Bde),e(Bde,h9o),e(f_,p9o),e(f_,bj),e(bj,u9o),e(f_,_9o),e(x,b9o),e(x,m_),e(m_,Ide),e(Ide,v9o),e(m_,F9o),e(m_,vj),e(vj,T9o),e(m_,M9o),e(x,E9o),e(x,g_),e(g_,Nde),e(Nde,C9o),e(g_,w9o),e(g_,Fj),e(Fj,A9o),e(g_,y9o),e(x,L9o),e(x,h_),e(h_,qde),e(qde,x9o),e(h_,$9o),e(h_,Tj),e(Tj,k9o),e(h_,S9o),e(x,R9o),e(x,p_),e(p_,jde),e(jde,P9o),e(p_,B9o),e(p_,Mj),e(Mj,I9o),e(p_,N9o),e(x,q9o),e(x,u_),e(u_,Dde),e(Dde,j9o),e(u_,D9o),e(u_,Ej),e(Ej,G9o),e(u_,O9o),e(x,V9o),e(x,__),e(__,Gde),e(Gde,X9o),e(__,z9o),e(__,Cj),e(Cj,W9o),e(__,Q9o),e(x,H9o),e(x,b_),e(b_,Ode),e(Ode,U9o),e(b_,J9o),e(b_,wj),e(wj,Y9o),e(b_,K9o),e(x,Z9o),e(x,v_),e(v_,Vde),e(Vde,eMo),e(v_,oMo),e(v_,Aj),e(Aj,rMo),e(v_,tMo),e(x,aMo),e(x,F_),e(F_,Xde),e(Xde,nMo),e(F_,sMo),e(F_,yj),e(yj,lMo),e(F_,iMo),e(x,dMo),e(x,T_),e(T_,zde),e(zde,cMo),e(T_,fMo),e(T_,Lj),e(Lj,mMo),e(T_,gMo),e(Je,hMo),e(Je,M_),e(M_,pMo),e(M_,Wde),e(Wde,uMo),e(M_,_Mo),e(M_,Qde),e(Qde,bMo),e(Je,vMo),M(E_,Je,null),b(f,$De,_),b(f,Ii,_),e(Ii,C_),e(C_,Hde),M(G0,Hde,null),e(Ii,FMo),e(Ii,Ude),e(Ude,TMo),b(f,kDe,_),b(f,$o,_),M(O0,$o,null),e($o,MMo),e($o,Ni),e(Ni,EMo),e(Ni,xj),e(xj,CMo),e(Ni,wMo),e(Ni,$j),e($j,AMo),e(Ni,yMo),e($o,LMo),e($o,V0),e(V0,xMo),e(V0,Jde),e(Jde,$Mo),e(V0,kMo),e($o,SMo),e($o,st),M(X0,st,null),e(st,RMo),e(st,Yde),e(Yde,PMo),e(st,BMo),e(st,qi),e(qi,IMo),e(qi,Kde),e(Kde,NMo),e(qi,qMo),e(qi,kj),e(kj,jMo),e(qi,DMo),e(st,GMo),M(w_,st,null),e($o,OMo),e($o,Ye),M(z0,Ye,null),e(Ye,VMo),e(Ye,Zde),e(Zde,XMo),e(Ye,zMo),e(Ye,Ra),e(Ra,WMo),e(Ra,ece),e(ece,QMo),e(Ra,HMo),e(Ra,oce),e(oce,UMo),e(Ra,JMo),e(Ra,rce),e(rce,YMo),e(Ra,KMo),e(Ye,ZMo),e(Ye,G),e(G,A_),e(A_,tce),e(tce,e4o),e(A_,o4o),e(A_,Sj),e(Sj,r4o),e(A_,t4o),e(G,a4o),e(G,y_),e(y_,ace),e(ace,n4o),e(y_,s4o),e(y_,Rj),e(Rj,l4o),e(y_,i4o),e(G,d4o),e(G,L_),e(L_,nce),e(nce,c4o),e(L_,f4o),e(L_,Pj),e(Pj,m4o),e(L_,g4o),e(G,h4o),e(G,x_),e(x_,sce),e(sce,p4o),e(x_,u4o),e(x_,Bj),e(Bj,_4o),e(x_,b4o),e(G,v4o),e(G,$_),e($_,lce),e(lce,F4o),e($_,T4o),e($_,Ij),e(Ij,M4o),e($_,E4o),e(G,C4o),e(G,k_),e(k_,ice),e(ice,w4o),e(k_,A4o),e(k_,Nj),e(Nj,y4o),e(k_,L4o),e(G,x4o),e(G,S_),e(S_,dce),e(dce,$4o),e(S_,k4o),e(S_,qj),e(qj,S4o),e(S_,R4o),e(G,P4o),e(G,R_),e(R_,cce),e(cce,B4o),e(R_,I4o),e(R_,jj),e(jj,N4o),e(R_,q4o),e(G,j4o),e(G,P_),e(P_,fce),e(fce,D4o),e(P_,G4o),e(P_,Dj),e(Dj,O4o),e(P_,V4o),e(G,X4o),e(G,B_),e(B_,mce),e(mce,z4o),e(B_,W4o),e(B_,Gj),e(Gj,Q4o),e(B_,H4o),e(G,U4o),e(G,I_),e(I_,gce),e(gce,J4o),e(I_,Y4o),e(I_,Oj),e(Oj,K4o),e(I_,Z4o),e(G,eEo),e(G,N_),e(N_,hce),e(hce,oEo),e(N_,rEo),e(N_,Vj),e(Vj,tEo),e(N_,aEo),e(G,nEo),e(G,q_),e(q_,pce),e(pce,sEo),e(q_,lEo),e(q_,Xj),e(Xj,iEo),e(q_,dEo),e(G,cEo),e(G,j_),e(j_,uce),e(uce,fEo),e(j_,mEo),e(j_,zj),e(zj,gEo),e(j_,hEo),e(G,pEo),e(G,D_),e(D_,_ce),e(_ce,uEo),e(D_,_Eo),e(D_,Wj),e(Wj,bEo),e(D_,vEo),e(G,FEo),e(G,G_),e(G_,bce),e(bce,TEo),e(G_,MEo),e(G_,Qj),e(Qj,EEo),e(G_,CEo),e(G,wEo),e(G,O_),e(O_,vce),e(vce,AEo),e(O_,yEo),e(O_,Hj),e(Hj,LEo),e(O_,xEo),e(G,$Eo),e(G,V_),e(V_,Fce),e(Fce,kEo),e(V_,SEo),e(V_,Uj),e(Uj,REo),e(V_,PEo),e(G,BEo),e(G,X_),e(X_,Tce),e(Tce,IEo),e(X_,NEo),e(X_,Jj),e(Jj,qEo),e(X_,jEo),e(G,DEo),e(G,z_),e(z_,Mce),e(Mce,GEo),e(z_,OEo),e(z_,Yj),e(Yj,VEo),e(z_,XEo),e(G,zEo),e(G,W_),e(W_,Ece),e(Ece,WEo),e(W_,QEo),e(W_,Kj),e(Kj,HEo),e(W_,UEo),e(G,JEo),e(G,Q_),e(Q_,Cce),e(Cce,YEo),e(Q_,KEo),e(Q_,Zj),e(Zj,ZEo),e(Q_,eCo),e(G,oCo),e(G,H_),e(H_,wce),e(wce,rCo),e(H_,tCo),e(H_,eD),e(eD,aCo),e(H_,nCo),e(G,sCo),e(G,U_),e(U_,Ace),e(Ace,lCo),e(U_,iCo),e(U_,oD),e(oD,dCo),e(U_,cCo),e(G,fCo),e(G,J_),e(J_,yce),e(yce,mCo),e(J_,gCo),e(J_,rD),e(rD,hCo),e(J_,pCo),e(G,uCo),e(G,Y_),e(Y_,Lce),e(Lce,_Co),e(Y_,bCo),e(Y_,tD),e(tD,vCo),e(Y_,FCo),e(G,TCo),e(G,K_),e(K_,xce),e(xce,MCo),e(K_,ECo),e(K_,aD),e(aD,CCo),e(K_,wCo),e(G,ACo),e(G,Z_),e(Z_,$ce),e($ce,yCo),e(Z_,LCo),e(Z_,nD),e(nD,xCo),e(Z_,$Co),e(G,kCo),e(G,e1),e(e1,kce),e(kce,SCo),e(e1,RCo),e(e1,sD),e(sD,PCo),e(e1,BCo),e(G,ICo),e(G,o1),e(o1,Sce),e(Sce,NCo),e(o1,qCo),e(o1,lD),e(lD,jCo),e(o1,DCo),e(G,GCo),e(G,r1),e(r1,Rce),e(Rce,OCo),e(r1,VCo),e(r1,iD),e(iD,XCo),e(r1,zCo),e(G,WCo),e(G,t1),e(t1,Pce),e(Pce,QCo),e(t1,HCo),e(t1,dD),e(dD,UCo),e(t1,JCo),e(G,YCo),e(G,a1),e(a1,Bce),e(Bce,KCo),e(a1,ZCo),e(a1,cD),e(cD,e5o),e(a1,o5o),e(G,r5o),e(G,n1),e(n1,Ice),e(Ice,t5o),e(n1,a5o),e(n1,fD),e(fD,n5o),e(n1,s5o),e(G,l5o),e(G,s1),e(s1,Nce),e(Nce,i5o),e(s1,d5o),e(s1,mD),e(mD,c5o),e(s1,f5o),e(G,m5o),e(G,l1),e(l1,qce),e(qce,g5o),e(l1,h5o),e(l1,gD),e(gD,p5o),e(l1,u5o),e(G,_5o),e(G,i1),e(i1,jce),e(jce,b5o),e(i1,v5o),e(i1,hD),e(hD,F5o),e(i1,T5o),e(G,M5o),e(G,d1),e(d1,Dce),e(Dce,E5o),e(d1,C5o),e(d1,pD),e(pD,w5o),e(d1,A5o),e(G,y5o),e(G,c1),e(c1,Gce),e(Gce,L5o),e(c1,x5o),e(c1,uD),e(uD,$5o),e(c1,k5o),e(G,S5o),e(G,f1),e(f1,Oce),e(Oce,R5o),e(f1,P5o),e(f1,_D),e(_D,B5o),e(f1,I5o),e(G,N5o),e(G,m1),e(m1,Vce),e(Vce,q5o),e(m1,j5o),e(m1,bD),e(bD,D5o),e(m1,G5o),e(G,O5o),e(G,g1),e(g1,Xce),e(Xce,V5o),e(g1,X5o),e(g1,vD),e(vD,z5o),e(g1,W5o),e(G,Q5o),e(G,h1),e(h1,zce),e(zce,H5o),e(h1,U5o),e(h1,FD),e(FD,J5o),e(h1,Y5o),e(Ye,K5o),e(Ye,p1),e(p1,Z5o),e(p1,Wce),e(Wce,e3o),e(p1,o3o),e(p1,Qce),e(Qce,r3o),e(Ye,t3o),M(u1,Ye,null),b(f,SDe,_),b(f,ji,_),e(ji,_1),e(_1,Hce),M(W0,Hce,null),e(ji,a3o),e(ji,Uce),e(Uce,n3o),b(f,RDe,_),b(f,ko,_),M(Q0,ko,null),e(ko,s3o),e(ko,Di),e(Di,l3o),e(Di,TD),e(TD,i3o),e(Di,d3o),e(Di,MD),e(MD,c3o),e(Di,f3o),e(ko,m3o),e(ko,H0),e(H0,g3o),e(H0,Jce),e(Jce,h3o),e(H0,p3o),e(ko,u3o),e(ko,lt),M(U0,lt,null),e(lt,_3o),e(lt,Yce),e(Yce,b3o),e(lt,v3o),e(lt,Gi),e(Gi,F3o),e(Gi,Kce),e(Kce,T3o),e(Gi,M3o),e(Gi,ED),e(ED,E3o),e(Gi,C3o),e(lt,w3o),M(b1,lt,null),e(ko,A3o),e(ko,Ke),M(J0,Ke,null),e(Ke,y3o),e(Ke,Zce),e(Zce,L3o),e(Ke,x3o),e(Ke,Pa),e(Pa,$3o),e(Pa,efe),e(efe,k3o),e(Pa,S3o),e(Pa,ofe),e(ofe,R3o),e(Pa,P3o),e(Pa,rfe),e(rfe,B3o),e(Pa,I3o),e(Ke,N3o),e(Ke,z),e(z,v1),e(v1,tfe),e(tfe,q3o),e(v1,j3o),e(v1,CD),e(CD,D3o),e(v1,G3o),e(z,O3o),e(z,F1),e(F1,afe),e(afe,V3o),e(F1,X3o),e(F1,wD),e(wD,z3o),e(F1,W3o),e(z,Q3o),e(z,T1),e(T1,nfe),e(nfe,H3o),e(T1,U3o),e(T1,AD),e(AD,J3o),e(T1,Y3o),e(z,K3o),e(z,M1),e(M1,sfe),e(sfe,Z3o),e(M1,ewo),e(M1,yD),e(yD,owo),e(M1,rwo),e(z,two),e(z,E1),e(E1,lfe),e(lfe,awo),e(E1,nwo),e(E1,LD),e(LD,swo),e(E1,lwo),e(z,iwo),e(z,C1),e(C1,ife),e(ife,dwo),e(C1,cwo),e(C1,xD),e(xD,fwo),e(C1,mwo),e(z,gwo),e(z,w1),e(w1,dfe),e(dfe,hwo),e(w1,pwo),e(w1,$D),e($D,uwo),e(w1,_wo),e(z,bwo),e(z,A1),e(A1,cfe),e(cfe,vwo),e(A1,Fwo),e(A1,kD),e(kD,Two),e(A1,Mwo),e(z,Ewo),e(z,y1),e(y1,ffe),e(ffe,Cwo),e(y1,wwo),e(y1,SD),e(SD,Awo),e(y1,ywo),e(z,Lwo),e(z,L1),e(L1,mfe),e(mfe,xwo),e(L1,$wo),e(L1,RD),e(RD,kwo),e(L1,Swo),e(z,Rwo),e(z,x1),e(x1,gfe),e(gfe,Pwo),e(x1,Bwo),e(x1,PD),e(PD,Iwo),e(x1,Nwo),e(z,qwo),e(z,$1),e($1,hfe),e(hfe,jwo),e($1,Dwo),e($1,BD),e(BD,Gwo),e($1,Owo),e(z,Vwo),e(z,k1),e(k1,pfe),e(pfe,Xwo),e(k1,zwo),e(k1,ID),e(ID,Wwo),e(k1,Qwo),e(z,Hwo),e(z,S1),e(S1,ufe),e(ufe,Uwo),e(S1,Jwo),e(S1,ND),e(ND,Ywo),e(S1,Kwo),e(z,Zwo),e(z,R1),e(R1,_fe),e(_fe,e0o),e(R1,o0o),e(R1,qD),e(qD,r0o),e(R1,t0o),e(z,a0o),e(z,P1),e(P1,bfe),e(bfe,n0o),e(P1,s0o),e(P1,jD),e(jD,l0o),e(P1,i0o),e(z,d0o),e(z,B1),e(B1,vfe),e(vfe,c0o),e(B1,f0o),e(B1,DD),e(DD,m0o),e(B1,g0o),e(z,h0o),e(z,I1),e(I1,Ffe),e(Ffe,p0o),e(I1,u0o),e(I1,GD),e(GD,_0o),e(I1,b0o),e(z,v0o),e(z,N1),e(N1,Tfe),e(Tfe,F0o),e(N1,T0o),e(N1,OD),e(OD,M0o),e(N1,E0o),e(z,C0o),e(z,q1),e(q1,Mfe),e(Mfe,w0o),e(q1,A0o),e(q1,VD),e(VD,y0o),e(q1,L0o),e(z,x0o),e(z,j1),e(j1,Efe),e(Efe,$0o),e(j1,k0o),e(j1,XD),e(XD,S0o),e(j1,R0o),e(z,P0o),e(z,D1),e(D1,Cfe),e(Cfe,B0o),e(D1,I0o),e(D1,zD),e(zD,N0o),e(D1,q0o),e(z,j0o),e(z,G1),e(G1,wfe),e(wfe,D0o),e(G1,G0o),e(G1,WD),e(WD,O0o),e(G1,V0o),e(z,X0o),e(z,O1),e(O1,Afe),e(Afe,z0o),e(O1,W0o),e(O1,QD),e(QD,Q0o),e(O1,H0o),e(z,U0o),e(z,V1),e(V1,yfe),e(yfe,J0o),e(V1,Y0o),e(V1,HD),e(HD,K0o),e(V1,Z0o),e(z,eAo),e(z,X1),e(X1,Lfe),e(Lfe,oAo),e(X1,rAo),e(X1,UD),e(UD,tAo),e(X1,aAo),e(z,nAo),e(z,z1),e(z1,xfe),e(xfe,sAo),e(z1,lAo),e(z1,JD),e(JD,iAo),e(z1,dAo),e(z,cAo),e(z,W1),e(W1,$fe),e($fe,fAo),e(W1,mAo),e(W1,YD),e(YD,gAo),e(W1,hAo),e(z,pAo),e(z,Q1),e(Q1,kfe),e(kfe,uAo),e(Q1,_Ao),e(Q1,KD),e(KD,bAo),e(Q1,vAo),e(z,FAo),e(z,H1),e(H1,Sfe),e(Sfe,TAo),e(H1,MAo),e(H1,ZD),e(ZD,EAo),e(H1,CAo),e(z,wAo),e(z,U1),e(U1,Rfe),e(Rfe,AAo),e(U1,yAo),e(U1,eG),e(eG,LAo),e(U1,xAo),e(z,$Ao),e(z,J1),e(J1,Pfe),e(Pfe,kAo),e(J1,SAo),e(J1,oG),e(oG,RAo),e(J1,PAo),e(z,BAo),e(z,Y1),e(Y1,Bfe),e(Bfe,IAo),e(Y1,NAo),e(Y1,rG),e(rG,qAo),e(Y1,jAo),e(z,DAo),e(z,K1),e(K1,Ife),e(Ife,GAo),e(K1,OAo),e(K1,tG),e(tG,VAo),e(K1,XAo),e(z,zAo),e(z,Z1),e(Z1,Nfe),e(Nfe,WAo),e(Z1,QAo),e(Z1,aG),e(aG,HAo),e(Z1,UAo),e(z,JAo),e(z,eb),e(eb,qfe),e(qfe,YAo),e(eb,KAo),e(eb,nG),e(nG,ZAo),e(eb,eyo),e(z,oyo),e(z,ob),e(ob,jfe),e(jfe,ryo),e(ob,tyo),e(ob,sG),e(sG,ayo),e(ob,nyo),e(z,syo),e(z,rb),e(rb,Dfe),e(Dfe,lyo),e(rb,iyo),e(rb,lG),e(lG,dyo),e(rb,cyo),e(Ke,fyo),e(Ke,tb),e(tb,myo),e(tb,Gfe),e(Gfe,gyo),e(tb,hyo),e(tb,Ofe),e(Ofe,pyo),e(Ke,uyo),M(ab,Ke,null),b(f,PDe,_),b(f,Oi,_),e(Oi,nb),e(nb,Vfe),M(Y0,Vfe,null),e(Oi,_yo),e(Oi,Xfe),e(Xfe,byo),b(f,BDe,_),b(f,So,_),M(K0,So,null),e(So,vyo),e(So,Vi),e(Vi,Fyo),e(Vi,iG),e(iG,Tyo),e(Vi,Myo),e(Vi,dG),e(dG,Eyo),e(Vi,Cyo),e(So,wyo),e(So,Z0),e(Z0,Ayo),e(Z0,zfe),e(zfe,yyo),e(Z0,Lyo),e(So,xyo),e(So,it),M(eA,it,null),e(it,$yo),e(it,Wfe),e(Wfe,kyo),e(it,Syo),e(it,Xi),e(Xi,Ryo),e(Xi,Qfe),e(Qfe,Pyo),e(Xi,Byo),e(Xi,cG),e(cG,Iyo),e(Xi,Nyo),e(it,qyo),M(sb,it,null),e(So,jyo),e(So,Ze),M(oA,Ze,null),e(Ze,Dyo),e(Ze,Hfe),e(Hfe,Gyo),e(Ze,Oyo),e(Ze,Ba),e(Ba,Vyo),e(Ba,Ufe),e(Ufe,Xyo),e(Ba,zyo),e(Ba,Jfe),e(Jfe,Wyo),e(Ba,Qyo),e(Ba,Yfe),e(Yfe,Hyo),e(Ba,Uyo),e(Ze,Jyo),e(Ze,Q),e(Q,lb),e(lb,Kfe),e(Kfe,Yyo),e(lb,Kyo),e(lb,fG),e(fG,Zyo),e(lb,eLo),e(Q,oLo),e(Q,ib),e(ib,Zfe),e(Zfe,rLo),e(ib,tLo),e(ib,mG),e(mG,aLo),e(ib,nLo),e(Q,sLo),e(Q,db),e(db,eme),e(eme,lLo),e(db,iLo),e(db,gG),e(gG,dLo),e(db,cLo),e(Q,fLo),e(Q,cb),e(cb,ome),e(ome,mLo),e(cb,gLo),e(cb,hG),e(hG,hLo),e(cb,pLo),e(Q,uLo),e(Q,fb),e(fb,rme),e(rme,_Lo),e(fb,bLo),e(fb,pG),e(pG,vLo),e(fb,FLo),e(Q,TLo),e(Q,mb),e(mb,tme),e(tme,MLo),e(mb,ELo),e(mb,uG),e(uG,CLo),e(mb,wLo),e(Q,ALo),e(Q,gb),e(gb,ame),e(ame,yLo),e(gb,LLo),e(gb,_G),e(_G,xLo),e(gb,$Lo),e(Q,kLo),e(Q,hb),e(hb,nme),e(nme,SLo),e(hb,RLo),e(hb,bG),e(bG,PLo),e(hb,BLo),e(Q,ILo),e(Q,pb),e(pb,sme),e(sme,NLo),e(pb,qLo),e(pb,vG),e(vG,jLo),e(pb,DLo),e(Q,GLo),e(Q,ub),e(ub,lme),e(lme,OLo),e(ub,VLo),e(ub,FG),e(FG,XLo),e(ub,zLo),e(Q,WLo),e(Q,_b),e(_b,ime),e(ime,QLo),e(_b,HLo),e(_b,TG),e(TG,ULo),e(_b,JLo),e(Q,YLo),e(Q,bb),e(bb,dme),e(dme,KLo),e(bb,ZLo),e(bb,MG),e(MG,exo),e(bb,oxo),e(Q,rxo),e(Q,vb),e(vb,cme),e(cme,txo),e(vb,axo),e(vb,EG),e(EG,nxo),e(vb,sxo),e(Q,lxo),e(Q,Fb),e(Fb,fme),e(fme,ixo),e(Fb,dxo),e(Fb,CG),e(CG,cxo),e(Fb,fxo),e(Q,mxo),e(Q,Tb),e(Tb,mme),e(mme,gxo),e(Tb,hxo),e(Tb,wG),e(wG,pxo),e(Tb,uxo),e(Q,_xo),e(Q,Mb),e(Mb,gme),e(gme,bxo),e(Mb,vxo),e(Mb,AG),e(AG,Fxo),e(Mb,Txo),e(Q,Mxo),e(Q,Eb),e(Eb,hme),e(hme,Exo),e(Eb,Cxo),e(Eb,yG),e(yG,wxo),e(Eb,Axo),e(Q,yxo),e(Q,Cb),e(Cb,pme),e(pme,Lxo),e(Cb,xxo),e(Cb,LG),e(LG,$xo),e(Cb,kxo),e(Q,Sxo),e(Q,wb),e(wb,ume),e(ume,Rxo),e(wb,Pxo),e(wb,xG),e(xG,Bxo),e(wb,Ixo),e(Q,Nxo),e(Q,Ab),e(Ab,_me),e(_me,qxo),e(Ab,jxo),e(Ab,$G),e($G,Dxo),e(Ab,Gxo),e(Q,Oxo),e(Q,yb),e(yb,bme),e(bme,Vxo),e(yb,Xxo),e(yb,kG),e(kG,zxo),e(yb,Wxo),e(Q,Qxo),e(Q,Lb),e(Lb,vme),e(vme,Hxo),e(Lb,Uxo),e(Lb,SG),e(SG,Jxo),e(Lb,Yxo),e(Q,Kxo),e(Q,xb),e(xb,Fme),e(Fme,Zxo),e(xb,e$o),e(xb,RG),e(RG,o$o),e(xb,r$o),e(Q,t$o),e(Q,$b),e($b,Tme),e(Tme,a$o),e($b,n$o),e($b,PG),e(PG,s$o),e($b,l$o),e(Q,i$o),e(Q,kb),e(kb,Mme),e(Mme,d$o),e(kb,c$o),e(kb,BG),e(BG,f$o),e(kb,m$o),e(Q,g$o),e(Q,Sb),e(Sb,Eme),e(Eme,h$o),e(Sb,p$o),e(Sb,IG),e(IG,u$o),e(Sb,_$o),e(Q,b$o),e(Q,Rb),e(Rb,Cme),e(Cme,v$o),e(Rb,F$o),e(Rb,NG),e(NG,T$o),e(Rb,M$o),e(Q,E$o),e(Q,Pb),e(Pb,wme),e(wme,C$o),e(Pb,w$o),e(Pb,qG),e(qG,A$o),e(Pb,y$o),e(Q,L$o),e(Q,Bb),e(Bb,Ame),e(Ame,x$o),e(Bb,$$o),e(Bb,jG),e(jG,k$o),e(Bb,S$o),e(Q,R$o),e(Q,Ib),e(Ib,yme),e(yme,P$o),e(Ib,B$o),e(Ib,DG),e(DG,I$o),e(Ib,N$o),e(Q,q$o),e(Q,Nb),e(Nb,Lme),e(Lme,j$o),e(Nb,D$o),e(Nb,GG),e(GG,G$o),e(Nb,O$o),e(Q,V$o),e(Q,qb),e(qb,xme),e(xme,X$o),e(qb,z$o),e(qb,$me),e($me,W$o),e(qb,Q$o),e(Q,H$o),e(Q,jb),e(jb,kme),e(kme,U$o),e(jb,J$o),e(jb,OG),e(OG,Y$o),e(jb,K$o),e(Q,Z$o),e(Q,Db),e(Db,Sme),e(Sme,eko),e(Db,oko),e(Db,VG),e(VG,rko),e(Db,tko),e(Q,ako),e(Q,Gb),e(Gb,Rme),e(Rme,nko),e(Gb,sko),e(Gb,XG),e(XG,lko),e(Gb,iko),e(Q,dko),e(Q,Ob),e(Ob,Pme),e(Pme,cko),e(Ob,fko),e(Ob,zG),e(zG,mko),e(Ob,gko),e(Ze,hko),e(Ze,Vb),e(Vb,pko),e(Vb,Bme),e(Bme,uko),e(Vb,_ko),e(Vb,Ime),e(Ime,bko),e(Ze,vko),M(Xb,Ze,null),b(f,IDe,_),b(f,zi,_),e(zi,zb),e(zb,Nme),M(rA,Nme,null),e(zi,Fko),e(zi,qme),e(qme,Tko),b(f,NDe,_),b(f,Ro,_),M(tA,Ro,null),e(Ro,Mko),e(Ro,Wi),e(Wi,Eko),e(Wi,WG),e(WG,Cko),e(Wi,wko),e(Wi,QG),e(QG,Ako),e(Wi,yko),e(Ro,Lko),e(Ro,aA),e(aA,xko),e(aA,jme),e(jme,$ko),e(aA,kko),e(Ro,Sko),e(Ro,dt),M(nA,dt,null),e(dt,Rko),e(dt,Dme),e(Dme,Pko),e(dt,Bko),e(dt,Qi),e(Qi,Iko),e(Qi,Gme),e(Gme,Nko),e(Qi,qko),e(Qi,HG),e(HG,jko),e(Qi,Dko),e(dt,Gko),M(Wb,dt,null),e(Ro,Oko),e(Ro,eo),M(sA,eo,null),e(eo,Vko),e(eo,Ome),e(Ome,Xko),e(eo,zko),e(eo,Ia),e(Ia,Wko),e(Ia,Vme),e(Vme,Qko),e(Ia,Hko),e(Ia,Xme),e(Xme,Uko),e(Ia,Jko),e(Ia,zme),e(zme,Yko),e(Ia,Kko),e(eo,Zko),e(eo,ue),e(ue,Qb),e(Qb,Wme),e(Wme,eSo),e(Qb,oSo),e(Qb,UG),e(UG,rSo),e(Qb,tSo),e(ue,aSo),e(ue,Hb),e(Hb,Qme),e(Qme,nSo),e(Hb,sSo),e(Hb,JG),e(JG,lSo),e(Hb,iSo),e(ue,dSo),e(ue,Ub),e(Ub,Hme),e(Hme,cSo),e(Ub,fSo),e(Ub,YG),e(YG,mSo),e(Ub,gSo),e(ue,hSo),e(ue,Jb),e(Jb,Ume),e(Ume,pSo),e(Jb,uSo),e(Jb,KG),e(KG,_So),e(Jb,bSo),e(ue,vSo),e(ue,Yb),e(Yb,Jme),e(Jme,FSo),e(Yb,TSo),e(Yb,ZG),e(ZG,MSo),e(Yb,ESo),e(ue,CSo),e(ue,Kb),e(Kb,Yme),e(Yme,wSo),e(Kb,ASo),e(Kb,eO),e(eO,ySo),e(Kb,LSo),e(ue,xSo),e(ue,Zb),e(Zb,Kme),e(Kme,$So),e(Zb,kSo),e(Zb,oO),e(oO,SSo),e(Zb,RSo),e(ue,PSo),e(ue,e2),e(e2,Zme),e(Zme,BSo),e(e2,ISo),e(e2,rO),e(rO,NSo),e(e2,qSo),e(ue,jSo),e(ue,o2),e(o2,ege),e(ege,DSo),e(o2,GSo),e(o2,tO),e(tO,OSo),e(o2,VSo),e(ue,XSo),e(ue,r2),e(r2,oge),e(oge,zSo),e(r2,WSo),e(r2,aO),e(aO,QSo),e(r2,HSo),e(ue,USo),e(ue,t2),e(t2,rge),e(rge,JSo),e(t2,YSo),e(t2,nO),e(nO,KSo),e(t2,ZSo),e(ue,eRo),e(ue,a2),e(a2,tge),e(tge,oRo),e(a2,rRo),e(a2,sO),e(sO,tRo),e(a2,aRo),e(ue,nRo),e(ue,n2),e(n2,age),e(age,sRo),e(n2,lRo),e(n2,lO),e(lO,iRo),e(n2,dRo),e(ue,cRo),e(ue,s2),e(s2,nge),e(nge,fRo),e(s2,mRo),e(s2,iO),e(iO,gRo),e(s2,hRo),e(ue,pRo),e(ue,l2),e(l2,sge),e(sge,uRo),e(l2,_Ro),e(l2,dO),e(dO,bRo),e(l2,vRo),e(ue,FRo),e(ue,i2),e(i2,lge),e(lge,TRo),e(i2,MRo),e(i2,cO),e(cO,ERo),e(i2,CRo),e(eo,wRo),e(eo,d2),e(d2,ARo),e(d2,ige),e(ige,yRo),e(d2,LRo),e(d2,dge),e(dge,xRo),e(eo,$Ro),M(c2,eo,null),b(f,qDe,_),b(f,Hi,_),e(Hi,f2),e(f2,cge),M(lA,cge,null),e(Hi,kRo),e(Hi,fge),e(fge,SRo),b(f,jDe,_),b(f,Po,_),M(iA,Po,null),e(Po,RRo),e(Po,Ui),e(Ui,PRo),e(Ui,fO),e(fO,BRo),e(Ui,IRo),e(Ui,mO),e(mO,NRo),e(Ui,qRo),e(Po,jRo),e(Po,dA),e(dA,DRo),e(dA,mge),e(mge,GRo),e(dA,ORo),e(Po,VRo),e(Po,ct),M(cA,ct,null),e(ct,XRo),e(ct,gge),e(gge,zRo),e(ct,WRo),e(ct,Ji),e(Ji,QRo),e(Ji,hge),e(hge,HRo),e(Ji,URo),e(Ji,gO),e(gO,JRo),e(Ji,YRo),e(ct,KRo),M(m2,ct,null),e(Po,ZRo),e(Po,oo),M(fA,oo,null),e(oo,ePo),e(oo,pge),e(pge,oPo),e(oo,rPo),e(oo,Na),e(Na,tPo),e(Na,uge),e(uge,aPo),e(Na,nPo),e(Na,_ge),e(_ge,sPo),e(Na,lPo),e(Na,bge),e(bge,iPo),e(Na,dPo),e(oo,cPo),e(oo,N),e(N,g2),e(g2,vge),e(vge,fPo),e(g2,mPo),e(g2,hO),e(hO,gPo),e(g2,hPo),e(N,pPo),e(N,h2),e(h2,Fge),e(Fge,uPo),e(h2,_Po),e(h2,pO),e(pO,bPo),e(h2,vPo),e(N,FPo),e(N,p2),e(p2,Tge),e(Tge,TPo),e(p2,MPo),e(p2,uO),e(uO,EPo),e(p2,CPo),e(N,wPo),e(N,u2),e(u2,Mge),e(Mge,APo),e(u2,yPo),e(u2,_O),e(_O,LPo),e(u2,xPo),e(N,$Po),e(N,_2),e(_2,Ege),e(Ege,kPo),e(_2,SPo),e(_2,bO),e(bO,RPo),e(_2,PPo),e(N,BPo),e(N,b2),e(b2,Cge),e(Cge,IPo),e(b2,NPo),e(b2,vO),e(vO,qPo),e(b2,jPo),e(N,DPo),e(N,v2),e(v2,wge),e(wge,GPo),e(v2,OPo),e(v2,FO),e(FO,VPo),e(v2,XPo),e(N,zPo),e(N,F2),e(F2,Age),e(Age,WPo),e(F2,QPo),e(F2,TO),e(TO,HPo),e(F2,UPo),e(N,JPo),e(N,T2),e(T2,yge),e(yge,YPo),e(T2,KPo),e(T2,MO),e(MO,ZPo),e(T2,eBo),e(N,oBo),e(N,M2),e(M2,Lge),e(Lge,rBo),e(M2,tBo),e(M2,EO),e(EO,aBo),e(M2,nBo),e(N,sBo),e(N,E2),e(E2,xge),e(xge,lBo),e(E2,iBo),e(E2,CO),e(CO,dBo),e(E2,cBo),e(N,fBo),e(N,C2),e(C2,$ge),e($ge,mBo),e(C2,gBo),e(C2,wO),e(wO,hBo),e(C2,pBo),e(N,uBo),e(N,w2),e(w2,kge),e(kge,_Bo),e(w2,bBo),e(w2,AO),e(AO,vBo),e(w2,FBo),e(N,TBo),e(N,A2),e(A2,Sge),e(Sge,MBo),e(A2,EBo),e(A2,yO),e(yO,CBo),e(A2,wBo),e(N,ABo),e(N,y2),e(y2,Rge),e(Rge,yBo),e(y2,LBo),e(y2,LO),e(LO,xBo),e(y2,$Bo),e(N,kBo),e(N,L2),e(L2,Pge),e(Pge,SBo),e(L2,RBo),e(L2,xO),e(xO,PBo),e(L2,BBo),e(N,IBo),e(N,x2),e(x2,Bge),e(Bge,NBo),e(x2,qBo),e(x2,$O),e($O,jBo),e(x2,DBo),e(N,GBo),e(N,$2),e($2,Ige),e(Ige,OBo),e($2,VBo),e($2,kO),e(kO,XBo),e($2,zBo),e(N,WBo),e(N,k2),e(k2,Nge),e(Nge,QBo),e(k2,HBo),e(k2,SO),e(SO,UBo),e(k2,JBo),e(N,YBo),e(N,S2),e(S2,qge),e(qge,KBo),e(S2,ZBo),e(S2,RO),e(RO,eIo),e(S2,oIo),e(N,rIo),e(N,R2),e(R2,jge),e(jge,tIo),e(R2,aIo),e(R2,PO),e(PO,nIo),e(R2,sIo),e(N,lIo),e(N,P2),e(P2,Dge),e(Dge,iIo),e(P2,dIo),e(P2,BO),e(BO,cIo),e(P2,fIo),e(N,mIo),e(N,B2),e(B2,Gge),e(Gge,gIo),e(B2,hIo),e(B2,IO),e(IO,pIo),e(B2,uIo),e(N,_Io),e(N,I2),e(I2,Oge),e(Oge,bIo),e(I2,vIo),e(I2,NO),e(NO,FIo),e(I2,TIo),e(N,MIo),e(N,N2),e(N2,Vge),e(Vge,EIo),e(N2,CIo),e(N2,qO),e(qO,wIo),e(N2,AIo),e(N,yIo),e(N,q2),e(q2,Xge),e(Xge,LIo),e(q2,xIo),e(q2,jO),e(jO,$Io),e(q2,kIo),e(N,SIo),e(N,j2),e(j2,zge),e(zge,RIo),e(j2,PIo),e(j2,DO),e(DO,BIo),e(j2,IIo),e(N,NIo),e(N,D2),e(D2,Wge),e(Wge,qIo),e(D2,jIo),e(D2,GO),e(GO,DIo),e(D2,GIo),e(N,OIo),e(N,G2),e(G2,Qge),e(Qge,VIo),e(G2,XIo),e(G2,OO),e(OO,zIo),e(G2,WIo),e(N,QIo),e(N,O2),e(O2,Hge),e(Hge,HIo),e(O2,UIo),e(O2,VO),e(VO,JIo),e(O2,YIo),e(N,KIo),e(N,V2),e(V2,Uge),e(Uge,ZIo),e(V2,eNo),e(V2,XO),e(XO,oNo),e(V2,rNo),e(N,tNo),e(N,X2),e(X2,Jge),e(Jge,aNo),e(X2,nNo),e(X2,zO),e(zO,sNo),e(X2,lNo),e(N,iNo),e(N,z2),e(z2,Yge),e(Yge,dNo),e(z2,cNo),e(z2,WO),e(WO,fNo),e(z2,mNo),e(N,gNo),e(N,W2),e(W2,Kge),e(Kge,hNo),e(W2,pNo),e(W2,QO),e(QO,uNo),e(W2,_No),e(N,bNo),e(N,Q2),e(Q2,Zge),e(Zge,vNo),e(Q2,FNo),e(Q2,HO),e(HO,TNo),e(Q2,MNo),e(N,ENo),e(N,H2),e(H2,ehe),e(ehe,CNo),e(H2,wNo),e(H2,UO),e(UO,ANo),e(H2,yNo),e(N,LNo),e(N,U2),e(U2,ohe),e(ohe,xNo),e(U2,$No),e(U2,JO),e(JO,kNo),e(U2,SNo),e(N,RNo),e(N,J2),e(J2,rhe),e(rhe,PNo),e(J2,BNo),e(J2,YO),e(YO,INo),e(J2,NNo),e(N,qNo),e(N,Y2),e(Y2,the),e(the,jNo),e(Y2,DNo),e(Y2,KO),e(KO,GNo),e(Y2,ONo),e(N,VNo),e(N,K2),e(K2,ahe),e(ahe,XNo),e(K2,zNo),e(K2,ZO),e(ZO,WNo),e(K2,QNo),e(N,HNo),e(N,Z2),e(Z2,nhe),e(nhe,UNo),e(Z2,JNo),e(Z2,eV),e(eV,YNo),e(Z2,KNo),e(N,ZNo),e(N,ev),e(ev,she),e(she,eqo),e(ev,oqo),e(ev,oV),e(oV,rqo),e(ev,tqo),e(N,aqo),e(N,ov),e(ov,lhe),e(lhe,nqo),e(ov,sqo),e(ov,rV),e(rV,lqo),e(ov,iqo),e(N,dqo),e(N,rv),e(rv,ihe),e(ihe,cqo),e(rv,fqo),e(rv,tV),e(tV,mqo),e(rv,gqo),e(N,hqo),e(N,tv),e(tv,dhe),e(dhe,pqo),e(tv,uqo),e(tv,aV),e(aV,_qo),e(tv,bqo),e(N,vqo),e(N,av),e(av,che),e(che,Fqo),e(av,Tqo),e(av,nV),e(nV,Mqo),e(av,Eqo),e(N,Cqo),e(N,nv),e(nv,fhe),e(fhe,wqo),e(nv,Aqo),e(nv,sV),e(sV,yqo),e(nv,Lqo),e(oo,xqo),e(oo,sv),e(sv,$qo),e(sv,mhe),e(mhe,kqo),e(sv,Sqo),e(sv,ghe),e(ghe,Rqo),e(oo,Pqo),M(lv,oo,null),b(f,DDe,_),b(f,Yi,_),e(Yi,iv),e(iv,hhe),M(mA,hhe,null),e(Yi,Bqo),e(Yi,phe),e(phe,Iqo),b(f,GDe,_),b(f,Bo,_),M(gA,Bo,null),e(Bo,Nqo),e(Bo,Ki),e(Ki,qqo),e(Ki,lV),e(lV,jqo),e(Ki,Dqo),e(Ki,iV),e(iV,Gqo),e(Ki,Oqo),e(Bo,Vqo),e(Bo,hA),e(hA,Xqo),e(hA,uhe),e(uhe,zqo),e(hA,Wqo),e(Bo,Qqo),e(Bo,ft),M(pA,ft,null),e(ft,Hqo),e(ft,_he),e(_he,Uqo),e(ft,Jqo),e(ft,Zi),e(Zi,Yqo),e(Zi,bhe),e(bhe,Kqo),e(Zi,Zqo),e(Zi,dV),e(dV,ejo),e(Zi,ojo),e(ft,rjo),M(dv,ft,null),e(Bo,tjo),e(Bo,ro),M(uA,ro,null),e(ro,ajo),e(ro,vhe),e(vhe,njo),e(ro,sjo),e(ro,qa),e(qa,ljo),e(qa,Fhe),e(Fhe,ijo),e(qa,djo),e(qa,The),e(The,cjo),e(qa,fjo),e(qa,Mhe),e(Mhe,mjo),e(qa,gjo),e(ro,hjo),e(ro,Z),e(Z,cv),e(cv,Ehe),e(Ehe,pjo),e(cv,ujo),e(cv,cV),e(cV,_jo),e(cv,bjo),e(Z,vjo),e(Z,fv),e(fv,Che),e(Che,Fjo),e(fv,Tjo),e(fv,fV),e(fV,Mjo),e(fv,Ejo),e(Z,Cjo),e(Z,mv),e(mv,whe),e(whe,wjo),e(mv,Ajo),e(mv,mV),e(mV,yjo),e(mv,Ljo),e(Z,xjo),e(Z,gv),e(gv,Ahe),e(Ahe,$jo),e(gv,kjo),e(gv,gV),e(gV,Sjo),e(gv,Rjo),e(Z,Pjo),e(Z,hv),e(hv,yhe),e(yhe,Bjo),e(hv,Ijo),e(hv,hV),e(hV,Njo),e(hv,qjo),e(Z,jjo),e(Z,pv),e(pv,Lhe),e(Lhe,Djo),e(pv,Gjo),e(pv,pV),e(pV,Ojo),e(pv,Vjo),e(Z,Xjo),e(Z,uv),e(uv,xhe),e(xhe,zjo),e(uv,Wjo),e(uv,uV),e(uV,Qjo),e(uv,Hjo),e(Z,Ujo),e(Z,_v),e(_v,$he),e($he,Jjo),e(_v,Yjo),e(_v,_V),e(_V,Kjo),e(_v,Zjo),e(Z,eDo),e(Z,bv),e(bv,khe),e(khe,oDo),e(bv,rDo),e(bv,bV),e(bV,tDo),e(bv,aDo),e(Z,nDo),e(Z,vv),e(vv,She),e(She,sDo),e(vv,lDo),e(vv,vV),e(vV,iDo),e(vv,dDo),e(Z,cDo),e(Z,Fv),e(Fv,Rhe),e(Rhe,fDo),e(Fv,mDo),e(Fv,FV),e(FV,gDo),e(Fv,hDo),e(Z,pDo),e(Z,Tv),e(Tv,Phe),e(Phe,uDo),e(Tv,_Do),e(Tv,TV),e(TV,bDo),e(Tv,vDo),e(Z,FDo),e(Z,Mv),e(Mv,Bhe),e(Bhe,TDo),e(Mv,MDo),e(Mv,MV),e(MV,EDo),e(Mv,CDo),e(Z,wDo),e(Z,Ev),e(Ev,Ihe),e(Ihe,ADo),e(Ev,yDo),e(Ev,EV),e(EV,LDo),e(Ev,xDo),e(Z,$Do),e(Z,Cv),e(Cv,Nhe),e(Nhe,kDo),e(Cv,SDo),e(Cv,CV),e(CV,RDo),e(Cv,PDo),e(Z,BDo),e(Z,wv),e(wv,qhe),e(qhe,IDo),e(wv,NDo),e(wv,wV),e(wV,qDo),e(wv,jDo),e(Z,DDo),e(Z,Av),e(Av,jhe),e(jhe,GDo),e(Av,ODo),e(Av,AV),e(AV,VDo),e(Av,XDo),e(Z,zDo),e(Z,yv),e(yv,Dhe),e(Dhe,WDo),e(yv,QDo),e(yv,yV),e(yV,HDo),e(yv,UDo),e(Z,JDo),e(Z,Lv),e(Lv,Ghe),e(Ghe,YDo),e(Lv,KDo),e(Lv,LV),e(LV,ZDo),e(Lv,eGo),e(Z,oGo),e(Z,xv),e(xv,Ohe),e(Ohe,rGo),e(xv,tGo),e(xv,xV),e(xV,aGo),e(xv,nGo),e(Z,sGo),e(Z,$v),e($v,Vhe),e(Vhe,lGo),e($v,iGo),e($v,$V),e($V,dGo),e($v,cGo),e(Z,fGo),e(Z,kv),e(kv,Xhe),e(Xhe,mGo),e(kv,gGo),e(kv,kV),e(kV,hGo),e(kv,pGo),e(Z,uGo),e(Z,Sv),e(Sv,zhe),e(zhe,_Go),e(Sv,bGo),e(Sv,SV),e(SV,vGo),e(Sv,FGo),e(Z,TGo),e(Z,Rv),e(Rv,Whe),e(Whe,MGo),e(Rv,EGo),e(Rv,RV),e(RV,CGo),e(Rv,wGo),e(Z,AGo),e(Z,Pv),e(Pv,Qhe),e(Qhe,yGo),e(Pv,LGo),e(Pv,PV),e(PV,xGo),e(Pv,$Go),e(Z,kGo),e(Z,Bv),e(Bv,Hhe),e(Hhe,SGo),e(Bv,RGo),e(Bv,BV),e(BV,PGo),e(Bv,BGo),e(Z,IGo),e(Z,Iv),e(Iv,Uhe),e(Uhe,NGo),e(Iv,qGo),e(Iv,IV),e(IV,jGo),e(Iv,DGo),e(Z,GGo),e(Z,Nv),e(Nv,Jhe),e(Jhe,OGo),e(Nv,VGo),e(Nv,NV),e(NV,XGo),e(Nv,zGo),e(Z,WGo),e(Z,qv),e(qv,Yhe),e(Yhe,QGo),e(qv,HGo),e(qv,qV),e(qV,UGo),e(qv,JGo),e(ro,YGo),e(ro,jv),e(jv,KGo),e(jv,Khe),e(Khe,ZGo),e(jv,eOo),e(jv,Zhe),e(Zhe,oOo),e(ro,rOo),M(Dv,ro,null),b(f,ODe,_),b(f,ed,_),e(ed,Gv),e(Gv,epe),M(_A,epe,null),e(ed,tOo),e(ed,ope),e(ope,aOo),b(f,VDe,_),b(f,Io,_),M(bA,Io,null),e(Io,nOo),e(Io,od),e(od,sOo),e(od,jV),e(jV,lOo),e(od,iOo),e(od,DV),e(DV,dOo),e(od,cOo),e(Io,fOo),e(Io,vA),e(vA,mOo),e(vA,rpe),e(rpe,gOo),e(vA,hOo),e(Io,pOo),e(Io,mt),M(FA,mt,null),e(mt,uOo),e(mt,tpe),e(tpe,_Oo),e(mt,bOo),e(mt,rd),e(rd,vOo),e(rd,ape),e(ape,FOo),e(rd,TOo),e(rd,GV),e(GV,MOo),e(rd,EOo),e(mt,COo),M(Ov,mt,null),e(Io,wOo),e(Io,to),M(TA,to,null),e(to,AOo),e(to,npe),e(npe,yOo),e(to,LOo),e(to,ja),e(ja,xOo),e(ja,spe),e(spe,$Oo),e(ja,kOo),e(ja,lpe),e(lpe,SOo),e(ja,ROo),e(ja,ipe),e(ipe,POo),e(ja,BOo),e(to,IOo),e(to,Zr),e(Zr,Vv),e(Vv,dpe),e(dpe,NOo),e(Vv,qOo),e(Vv,OV),e(OV,jOo),e(Vv,DOo),e(Zr,GOo),e(Zr,Xv),e(Xv,cpe),e(cpe,OOo),e(Xv,VOo),e(Xv,VV),e(VV,XOo),e(Xv,zOo),e(Zr,WOo),e(Zr,zv),e(zv,fpe),e(fpe,QOo),e(zv,HOo),e(zv,XV),e(XV,UOo),e(zv,JOo),e(Zr,YOo),e(Zr,Wv),e(Wv,mpe),e(mpe,KOo),e(Wv,ZOo),e(Wv,zV),e(zV,eVo),e(Wv,oVo),e(Zr,rVo),e(Zr,Qv),e(Qv,gpe),e(gpe,tVo),e(Qv,aVo),e(Qv,WV),e(WV,nVo),e(Qv,sVo),e(to,lVo),e(to,Hv),e(Hv,iVo),e(Hv,hpe),e(hpe,dVo),e(Hv,cVo),e(Hv,ppe),e(ppe,fVo),e(to,mVo),M(Uv,to,null),b(f,XDe,_),b(f,td,_),e(td,Jv),e(Jv,upe),M(MA,upe,null),e(td,gVo),e(td,_pe),e(_pe,hVo),b(f,zDe,_),b(f,No,_),M(EA,No,null),e(No,pVo),e(No,ad),e(ad,uVo),e(ad,QV),e(QV,_Vo),e(ad,bVo),e(ad,HV),e(HV,vVo),e(ad,FVo),e(No,TVo),e(No,CA),e(CA,MVo),e(CA,bpe),e(bpe,EVo),e(CA,CVo),e(No,wVo),e(No,gt),M(wA,gt,null),e(gt,AVo),e(gt,vpe),e(vpe,yVo),e(gt,LVo),e(gt,nd),e(nd,xVo),e(nd,Fpe),e(Fpe,$Vo),e(nd,kVo),e(nd,UV),e(UV,SVo),e(nd,RVo),e(gt,PVo),M(Yv,gt,null),e(No,BVo),e(No,ao),M(AA,ao,null),e(ao,IVo),e(ao,Tpe),e(Tpe,NVo),e(ao,qVo),e(ao,Da),e(Da,jVo),e(Da,Mpe),e(Mpe,DVo),e(Da,GVo),e(Da,Epe),e(Epe,OVo),e(Da,VVo),e(Da,Cpe),e(Cpe,XVo),e(Da,zVo),e(ao,WVo),e(ao,U),e(U,Kv),e(Kv,wpe),e(wpe,QVo),e(Kv,HVo),e(Kv,JV),e(JV,UVo),e(Kv,JVo),e(U,YVo),e(U,Zv),e(Zv,Ape),e(Ape,KVo),e(Zv,ZVo),e(Zv,YV),e(YV,eXo),e(Zv,oXo),e(U,rXo),e(U,eF),e(eF,ype),e(ype,tXo),e(eF,aXo),e(eF,KV),e(KV,nXo),e(eF,sXo),e(U,lXo),e(U,oF),e(oF,Lpe),e(Lpe,iXo),e(oF,dXo),e(oF,ZV),e(ZV,cXo),e(oF,fXo),e(U,mXo),e(U,rF),e(rF,xpe),e(xpe,gXo),e(rF,hXo),e(rF,eX),e(eX,pXo),e(rF,uXo),e(U,_Xo),e(U,tF),e(tF,$pe),e($pe,bXo),e(tF,vXo),e(tF,oX),e(oX,FXo),e(tF,TXo),e(U,MXo),e(U,aF),e(aF,kpe),e(kpe,EXo),e(aF,CXo),e(aF,rX),e(rX,wXo),e(aF,AXo),e(U,yXo),e(U,nF),e(nF,Spe),e(Spe,LXo),e(nF,xXo),e(nF,tX),e(tX,$Xo),e(nF,kXo),e(U,SXo),e(U,sF),e(sF,Rpe),e(Rpe,RXo),e(sF,PXo),e(sF,aX),e(aX,BXo),e(sF,IXo),e(U,NXo),e(U,lF),e(lF,Ppe),e(Ppe,qXo),e(lF,jXo),e(lF,nX),e(nX,DXo),e(lF,GXo),e(U,OXo),e(U,iF),e(iF,Bpe),e(Bpe,VXo),e(iF,XXo),e(iF,sX),e(sX,zXo),e(iF,WXo),e(U,QXo),e(U,dF),e(dF,Ipe),e(Ipe,HXo),e(dF,UXo),e(dF,lX),e(lX,JXo),e(dF,YXo),e(U,KXo),e(U,cF),e(cF,Npe),e(Npe,ZXo),e(cF,ezo),e(cF,iX),e(iX,ozo),e(cF,rzo),e(U,tzo),e(U,fF),e(fF,qpe),e(qpe,azo),e(fF,nzo),e(fF,dX),e(dX,szo),e(fF,lzo),e(U,izo),e(U,mF),e(mF,jpe),e(jpe,dzo),e(mF,czo),e(mF,cX),e(cX,fzo),e(mF,mzo),e(U,gzo),e(U,gF),e(gF,Dpe),e(Dpe,hzo),e(gF,pzo),e(gF,fX),e(fX,uzo),e(gF,_zo),e(U,bzo),e(U,hF),e(hF,Gpe),e(Gpe,vzo),e(hF,Fzo),e(hF,mX),e(mX,Tzo),e(hF,Mzo),e(U,Ezo),e(U,pF),e(pF,Ope),e(Ope,Czo),e(pF,wzo),e(pF,gX),e(gX,Azo),e(pF,yzo),e(U,Lzo),e(U,uF),e(uF,Vpe),e(Vpe,xzo),e(uF,$zo),e(uF,hX),e(hX,kzo),e(uF,Szo),e(U,Rzo),e(U,_F),e(_F,Xpe),e(Xpe,Pzo),e(_F,Bzo),e(_F,pX),e(pX,Izo),e(_F,Nzo),e(U,qzo),e(U,bF),e(bF,zpe),e(zpe,jzo),e(bF,Dzo),e(bF,uX),e(uX,Gzo),e(bF,Ozo),e(U,Vzo),e(U,vF),e(vF,Wpe),e(Wpe,Xzo),e(vF,zzo),e(vF,_X),e(_X,Wzo),e(vF,Qzo),e(U,Hzo),e(U,FF),e(FF,Qpe),e(Qpe,Uzo),e(FF,Jzo),e(FF,bX),e(bX,Yzo),e(FF,Kzo),e(U,Zzo),e(U,TF),e(TF,Hpe),e(Hpe,eWo),e(TF,oWo),e(TF,vX),e(vX,rWo),e(TF,tWo),e(U,aWo),e(U,MF),e(MF,Upe),e(Upe,nWo),e(MF,sWo),e(MF,FX),e(FX,lWo),e(MF,iWo),e(U,dWo),e(U,EF),e(EF,Jpe),e(Jpe,cWo),e(EF,fWo),e(EF,TX),e(TX,mWo),e(EF,gWo),e(U,hWo),e(U,CF),e(CF,Ype),e(Ype,pWo),e(CF,uWo),e(CF,MX),e(MX,_Wo),e(CF,bWo),e(U,vWo),e(U,wF),e(wF,Kpe),e(Kpe,FWo),e(wF,TWo),e(wF,EX),e(EX,MWo),e(wF,EWo),e(U,CWo),e(U,AF),e(AF,Zpe),e(Zpe,wWo),e(AF,AWo),e(AF,CX),e(CX,yWo),e(AF,LWo),e(U,xWo),e(U,yF),e(yF,eue),e(eue,$Wo),e(yF,kWo),e(yF,wX),e(wX,SWo),e(yF,RWo),e(U,PWo),e(U,LF),e(LF,oue),e(oue,BWo),e(LF,IWo),e(LF,AX),e(AX,NWo),e(LF,qWo),e(U,jWo),e(U,xF),e(xF,rue),e(rue,DWo),e(xF,GWo),e(xF,yX),e(yX,OWo),e(xF,VWo),e(U,XWo),e(U,$F),e($F,tue),e(tue,zWo),e($F,WWo),e($F,LX),e(LX,QWo),e($F,HWo),e(U,UWo),e(U,kF),e(kF,aue),e(aue,JWo),e(kF,YWo),e(kF,xX),e(xX,KWo),e(kF,ZWo),e(ao,eQo),e(ao,SF),e(SF,oQo),e(SF,nue),e(nue,rQo),e(SF,tQo),e(SF,sue),e(sue,aQo),e(ao,nQo),M(RF,ao,null),b(f,WDe,_),b(f,sd,_),e(sd,PF),e(PF,lue),M(yA,lue,null),e(sd,sQo),e(sd,iue),e(iue,lQo),b(f,QDe,_),b(f,qo,_),M(LA,qo,null),e(qo,iQo),e(qo,ld),e(ld,dQo),e(ld,$X),e($X,cQo),e(ld,fQo),e(ld,kX),e(kX,mQo),e(ld,gQo),e(qo,hQo),e(qo,xA),e(xA,pQo),e(xA,due),e(due,uQo),e(xA,_Qo),e(qo,bQo),e(qo,ht),M($A,ht,null),e(ht,vQo),e(ht,cue),e(cue,FQo),e(ht,TQo),e(ht,id),e(id,MQo),e(id,fue),e(fue,EQo),e(id,CQo),e(id,SX),e(SX,wQo),e(id,AQo),e(ht,yQo),M(BF,ht,null),e(qo,LQo),e(qo,no),M(kA,no,null),e(no,xQo),e(no,mue),e(mue,$Qo),e(no,kQo),e(no,Ga),e(Ga,SQo),e(Ga,gue),e(gue,RQo),e(Ga,PQo),e(Ga,hue),e(hue,BQo),e(Ga,IQo),e(Ga,pue),e(pue,NQo),e(Ga,qQo),e(no,jQo),e(no,V),e(V,IF),e(IF,uue),e(uue,DQo),e(IF,GQo),e(IF,RX),e(RX,OQo),e(IF,VQo),e(V,XQo),e(V,NF),e(NF,_ue),e(_ue,zQo),e(NF,WQo),e(NF,PX),e(PX,QQo),e(NF,HQo),e(V,UQo),e(V,qF),e(qF,bue),e(bue,JQo),e(qF,YQo),e(qF,BX),e(BX,KQo),e(qF,ZQo),e(V,eHo),e(V,jF),e(jF,vue),e(vue,oHo),e(jF,rHo),e(jF,IX),e(IX,tHo),e(jF,aHo),e(V,nHo),e(V,DF),e(DF,Fue),e(Fue,sHo),e(DF,lHo),e(DF,NX),e(NX,iHo),e(DF,dHo),e(V,cHo),e(V,GF),e(GF,Tue),e(Tue,fHo),e(GF,mHo),e(GF,qX),e(qX,gHo),e(GF,hHo),e(V,pHo),e(V,OF),e(OF,Mue),e(Mue,uHo),e(OF,_Ho),e(OF,jX),e(jX,bHo),e(OF,vHo),e(V,FHo),e(V,VF),e(VF,Eue),e(Eue,THo),e(VF,MHo),e(VF,DX),e(DX,EHo),e(VF,CHo),e(V,wHo),e(V,XF),e(XF,Cue),e(Cue,AHo),e(XF,yHo),e(XF,GX),e(GX,LHo),e(XF,xHo),e(V,$Ho),e(V,zF),e(zF,wue),e(wue,kHo),e(zF,SHo),e(zF,OX),e(OX,RHo),e(zF,PHo),e(V,BHo),e(V,WF),e(WF,Aue),e(Aue,IHo),e(WF,NHo),e(WF,VX),e(VX,qHo),e(WF,jHo),e(V,DHo),e(V,QF),e(QF,yue),e(yue,GHo),e(QF,OHo),e(QF,XX),e(XX,VHo),e(QF,XHo),e(V,zHo),e(V,HF),e(HF,Lue),e(Lue,WHo),e(HF,QHo),e(HF,zX),e(zX,HHo),e(HF,UHo),e(V,JHo),e(V,UF),e(UF,xue),e(xue,YHo),e(UF,KHo),e(UF,WX),e(WX,ZHo),e(UF,eUo),e(V,oUo),e(V,JF),e(JF,$ue),e($ue,rUo),e(JF,tUo),e(JF,QX),e(QX,aUo),e(JF,nUo),e(V,sUo),e(V,YF),e(YF,kue),e(kue,lUo),e(YF,iUo),e(YF,HX),e(HX,dUo),e(YF,cUo),e(V,fUo),e(V,KF),e(KF,Sue),e(Sue,mUo),e(KF,gUo),e(KF,UX),e(UX,hUo),e(KF,pUo),e(V,uUo),e(V,ZF),e(ZF,Rue),e(Rue,_Uo),e(ZF,bUo),e(ZF,JX),e(JX,vUo),e(ZF,FUo),e(V,TUo),e(V,e6),e(e6,Pue),e(Pue,MUo),e(e6,EUo),e(e6,YX),e(YX,CUo),e(e6,wUo),e(V,AUo),e(V,o6),e(o6,Bue),e(Bue,yUo),e(o6,LUo),e(o6,KX),e(KX,xUo),e(o6,$Uo),e(V,kUo),e(V,r6),e(r6,Iue),e(Iue,SUo),e(r6,RUo),e(r6,ZX),e(ZX,PUo),e(r6,BUo),e(V,IUo),e(V,t6),e(t6,Nue),e(Nue,NUo),e(t6,qUo),e(t6,ez),e(ez,jUo),e(t6,DUo),e(V,GUo),e(V,a6),e(a6,que),e(que,OUo),e(a6,VUo),e(a6,oz),e(oz,XUo),e(a6,zUo),e(V,WUo),e(V,n6),e(n6,jue),e(jue,QUo),e(n6,HUo),e(n6,rz),e(rz,UUo),e(n6,JUo),e(V,YUo),e(V,s6),e(s6,Due),e(Due,KUo),e(s6,ZUo),e(s6,tz),e(tz,eJo),e(s6,oJo),e(V,rJo),e(V,l6),e(l6,Gue),e(Gue,tJo),e(l6,aJo),e(l6,az),e(az,nJo),e(l6,sJo),e(V,lJo),e(V,i6),e(i6,Oue),e(Oue,iJo),e(i6,dJo),e(i6,nz),e(nz,cJo),e(i6,fJo),e(V,mJo),e(V,d6),e(d6,Vue),e(Vue,gJo),e(d6,hJo),e(d6,sz),e(sz,pJo),e(d6,uJo),e(V,_Jo),e(V,c6),e(c6,Xue),e(Xue,bJo),e(c6,vJo),e(c6,lz),e(lz,FJo),e(c6,TJo),e(V,MJo),e(V,f6),e(f6,zue),e(zue,EJo),e(f6,CJo),e(f6,iz),e(iz,wJo),e(f6,AJo),e(V,yJo),e(V,m6),e(m6,Wue),e(Wue,LJo),e(m6,xJo),e(m6,dz),e(dz,$Jo),e(m6,kJo),e(V,SJo),e(V,g6),e(g6,Que),e(Que,RJo),e(g6,PJo),e(g6,cz),e(cz,BJo),e(g6,IJo),e(V,NJo),e(V,h6),e(h6,Hue),e(Hue,qJo),e(h6,jJo),e(h6,fz),e(fz,DJo),e(h6,GJo),e(V,OJo),e(V,p6),e(p6,Uue),e(Uue,VJo),e(p6,XJo),e(p6,mz),e(mz,zJo),e(p6,WJo),e(V,QJo),e(V,u6),e(u6,Jue),e(Jue,HJo),e(u6,UJo),e(u6,gz),e(gz,JJo),e(u6,YJo),e(V,KJo),e(V,_6),e(_6,Yue),e(Yue,ZJo),e(_6,eYo),e(_6,hz),e(hz,oYo),e(_6,rYo),e(V,tYo),e(V,b6),e(b6,Kue),e(Kue,aYo),e(b6,nYo),e(b6,pz),e(pz,sYo),e(b6,lYo),e(V,iYo),e(V,v6),e(v6,Zue),e(Zue,dYo),e(v6,cYo),e(v6,uz),e(uz,fYo),e(v6,mYo),e(V,gYo),e(V,F6),e(F6,e_e),e(e_e,hYo),e(F6,pYo),e(F6,_z),e(_z,uYo),e(F6,_Yo),e(V,bYo),e(V,T6),e(T6,o_e),e(o_e,vYo),e(T6,FYo),e(T6,bz),e(bz,TYo),e(T6,MYo),e(no,EYo),e(no,M6),e(M6,CYo),e(M6,r_e),e(r_e,wYo),e(M6,AYo),e(M6,t_e),e(t_e,yYo),e(no,LYo),M(E6,no,null),b(f,HDe,_),b(f,dd,_),e(dd,C6),e(C6,a_e),M(SA,a_e,null),e(dd,xYo),e(dd,n_e),e(n_e,$Yo),b(f,UDe,_),b(f,jo,_),M(RA,jo,null),e(jo,kYo),e(jo,cd),e(cd,SYo),e(cd,vz),e(vz,RYo),e(cd,PYo),e(cd,Fz),e(Fz,BYo),e(cd,IYo),e(jo,NYo),e(jo,PA),e(PA,qYo),e(PA,s_e),e(s_e,jYo),e(PA,DYo),e(jo,GYo),e(jo,pt),M(BA,pt,null),e(pt,OYo),e(pt,l_e),e(l_e,VYo),e(pt,XYo),e(pt,fd),e(fd,zYo),e(fd,i_e),e(i_e,WYo),e(fd,QYo),e(fd,Tz),e(Tz,HYo),e(fd,UYo),e(pt,JYo),M(w6,pt,null),e(jo,YYo),e(jo,so),M(IA,so,null),e(so,KYo),e(so,d_e),e(d_e,ZYo),e(so,eKo),e(so,Oa),e(Oa,oKo),e(Oa,c_e),e(c_e,rKo),e(Oa,tKo),e(Oa,f_e),e(f_e,aKo),e(Oa,nKo),e(Oa,m_e),e(m_e,sKo),e(Oa,lKo),e(so,iKo),e(so,g_e),e(g_e,A6),e(A6,h_e),e(h_e,dKo),e(A6,cKo),e(A6,Mz),e(Mz,fKo),e(A6,mKo),e(so,gKo),e(so,y6),e(y6,hKo),e(y6,p_e),e(p_e,pKo),e(y6,uKo),e(y6,u_e),e(u_e,_Ko),e(so,bKo),M(L6,so,null),b(f,JDe,_),b(f,md,_),e(md,x6),e(x6,__e),M(NA,__e,null),e(md,vKo),e(md,b_e),e(b_e,FKo),b(f,YDe,_),b(f,Do,_),M(qA,Do,null),e(Do,TKo),e(Do,gd),e(gd,MKo),e(gd,Ez),e(Ez,EKo),e(gd,CKo),e(gd,Cz),e(Cz,wKo),e(gd,AKo),e(Do,yKo),e(Do,jA),e(jA,LKo),e(jA,v_e),e(v_e,xKo),e(jA,$Ko),e(Do,kKo),e(Do,ut),M(DA,ut,null),e(ut,SKo),e(ut,F_e),e(F_e,RKo),e(ut,PKo),e(ut,hd),e(hd,BKo),e(hd,T_e),e(T_e,IKo),e(hd,NKo),e(hd,wz),e(wz,qKo),e(hd,jKo),e(ut,DKo),M($6,ut,null),e(Do,GKo),e(Do,lo),M(GA,lo,null),e(lo,OKo),e(lo,M_e),e(M_e,VKo),e(lo,XKo),e(lo,Va),e(Va,zKo),e(Va,E_e),e(E_e,WKo),e(Va,QKo),e(Va,C_e),e(C_e,HKo),e(Va,UKo),e(Va,w_e),e(w_e,JKo),e(Va,YKo),e(lo,KKo),e(lo,ve),e(ve,k6),e(k6,A_e),e(A_e,ZKo),e(k6,eZo),e(k6,Az),e(Az,oZo),e(k6,rZo),e(ve,tZo),e(ve,S6),e(S6,y_e),e(y_e,aZo),e(S6,nZo),e(S6,yz),e(yz,sZo),e(S6,lZo),e(ve,iZo),e(ve,R6),e(R6,L_e),e(L_e,dZo),e(R6,cZo),e(R6,Lz),e(Lz,fZo),e(R6,mZo),e(ve,gZo),e(ve,P6),e(P6,x_e),e(x_e,hZo),e(P6,pZo),e(P6,xz),e(xz,uZo),e(P6,_Zo),e(ve,bZo),e(ve,Gs),e(Gs,$_e),e($_e,vZo),e(Gs,FZo),e(Gs,$z),e($z,TZo),e(Gs,MZo),e(Gs,kz),e(kz,EZo),e(Gs,CZo),e(ve,wZo),e(ve,B6),e(B6,k_e),e(k_e,AZo),e(B6,yZo),e(B6,Sz),e(Sz,LZo),e(B6,xZo),e(ve,$Zo),e(ve,Os),e(Os,S_e),e(S_e,kZo),e(Os,SZo),e(Os,Rz),e(Rz,RZo),e(Os,PZo),e(Os,Pz),e(Pz,BZo),e(Os,IZo),e(ve,NZo),e(ve,_t),e(_t,R_e),e(R_e,qZo),e(_t,jZo),e(_t,Bz),e(Bz,DZo),e(_t,GZo),e(_t,Iz),e(Iz,OZo),e(_t,VZo),e(_t,Nz),e(Nz,XZo),e(_t,zZo),e(ve,WZo),e(ve,I6),e(I6,P_e),e(P_e,QZo),e(I6,HZo),e(I6,qz),e(qz,UZo),e(I6,JZo),e(ve,YZo),e(ve,N6),e(N6,B_e),e(B_e,KZo),e(N6,ZZo),e(N6,jz),e(jz,eer),e(N6,oer),e(ve,rer),e(ve,q6),e(q6,I_e),e(I_e,ter),e(q6,aer),e(q6,Dz),e(Dz,ner),e(q6,ser),e(ve,ler),e(ve,j6),e(j6,N_e),e(N_e,ier),e(j6,der),e(j6,Gz),e(Gz,cer),e(j6,fer),e(ve,mer),e(ve,D6),e(D6,q_e),e(q_e,ger),e(D6,her),e(D6,Oz),e(Oz,per),e(D6,uer),e(ve,_er),e(ve,G6),e(G6,j_e),e(j_e,ber),e(G6,ver),e(G6,Vz),e(Vz,Fer),e(G6,Ter),e(ve,Mer),e(ve,O6),e(O6,D_e),e(D_e,Eer),e(O6,Cer),e(O6,Xz),e(Xz,wer),e(O6,Aer),e(lo,yer),e(lo,V6),e(V6,Ler),e(V6,G_e),e(G_e,xer),e(V6,$er),e(V6,O_e),e(O_e,ker),e(lo,Ser),M(X6,lo,null),b(f,KDe,_),b(f,pd,_),e(pd,z6),e(z6,V_e),M(OA,V_e,null),e(pd,Rer),e(pd,X_e),e(X_e,Per),b(f,ZDe,_),b(f,Go,_),M(VA,Go,null),e(Go,Ber),e(Go,ud),e(ud,Ier),e(ud,zz),e(zz,Ner),e(ud,qer),e(ud,Wz),e(Wz,jer),e(ud,Der),e(Go,Ger),e(Go,XA),e(XA,Oer),e(XA,z_e),e(z_e,Ver),e(XA,Xer),e(Go,zer),e(Go,bt),M(zA,bt,null),e(bt,Wer),e(bt,W_e),e(W_e,Qer),e(bt,Her),e(bt,_d),e(_d,Uer),e(_d,Q_e),e(Q_e,Jer),e(_d,Yer),e(_d,Qz),e(Qz,Ker),e(_d,Zer),e(bt,eor),M(W6,bt,null),e(Go,oor),e(Go,io),M(WA,io,null),e(io,ror),e(io,H_e),e(H_e,tor),e(io,aor),e(io,Xa),e(Xa,nor),e(Xa,U_e),e(U_e,sor),e(Xa,lor),e(Xa,J_e),e(J_e,ior),e(Xa,dor),e(Xa,Y_e),e(Y_e,cor),e(Xa,mor),e(io,gor),e(io,K_e),e(K_e,Q6),e(Q6,Z_e),e(Z_e,hor),e(Q6,por),e(Q6,Hz),e(Hz,uor),e(Q6,_or),e(io,bor),e(io,H6),e(H6,vor),e(H6,e1e),e(e1e,For),e(H6,Tor),e(H6,o1e),e(o1e,Mor),e(io,Eor),M(U6,io,null),b(f,eGe,_),b(f,bd,_),e(bd,J6),e(J6,r1e),M(QA,r1e,null),e(bd,Cor),e(bd,t1e),e(t1e,wor),b(f,oGe,_),b(f,Oo,_),M(HA,Oo,null),e(Oo,Aor),e(Oo,vd),e(vd,yor),e(vd,Uz),e(Uz,Lor),e(vd,xor),e(vd,Jz),e(Jz,$or),e(vd,kor),e(Oo,Sor),e(Oo,UA),e(UA,Ror),e(UA,a1e),e(a1e,Por),e(UA,Bor),e(Oo,Ior),e(Oo,vt),M(JA,vt,null),e(vt,Nor),e(vt,n1e),e(n1e,qor),e(vt,jor),e(vt,Fd),e(Fd,Dor),e(Fd,s1e),e(s1e,Gor),e(Fd,Oor),e(Fd,Yz),e(Yz,Vor),e(Fd,Xor),e(vt,zor),M(Y6,vt,null),e(Oo,Wor),e(Oo,co),M(YA,co,null),e(co,Qor),e(co,l1e),e(l1e,Hor),e(co,Uor),e(co,za),e(za,Jor),e(za,i1e),e(i1e,Yor),e(za,Kor),e(za,d1e),e(d1e,Zor),e(za,err),e(za,c1e),e(c1e,orr),e(za,rrr),e(co,trr),e(co,f1e),e(f1e,K6),e(K6,m1e),e(m1e,arr),e(K6,nrr),e(K6,Kz),e(Kz,srr),e(K6,lrr),e(co,irr),e(co,Z6),e(Z6,drr),e(Z6,g1e),e(g1e,crr),e(Z6,frr),e(Z6,h1e),e(h1e,mrr),e(co,grr),M(eT,co,null),b(f,rGe,_),b(f,Td,_),e(Td,oT),e(oT,p1e),M(KA,p1e,null),e(Td,hrr),e(Td,u1e),e(u1e,prr),b(f,tGe,_),b(f,Vo,_),M(ZA,Vo,null),e(Vo,urr),e(Vo,Md),e(Md,_rr),e(Md,Zz),e(Zz,brr),e(Md,vrr),e(Md,eW),e(eW,Frr),e(Md,Trr),e(Vo,Mrr),e(Vo,ey),e(ey,Err),e(ey,_1e),e(_1e,Crr),e(ey,wrr),e(Vo,Arr),e(Vo,Ft),M(oy,Ft,null),e(Ft,yrr),e(Ft,b1e),e(b1e,Lrr),e(Ft,xrr),e(Ft,Ed),e(Ed,$rr),e(Ed,v1e),e(v1e,krr),e(Ed,Srr),e(Ed,oW),e(oW,Rrr),e(Ed,Prr),e(Ft,Brr),M(rT,Ft,null),e(Vo,Irr),e(Vo,fo),M(ry,fo,null),e(fo,Nrr),e(fo,F1e),e(F1e,qrr),e(fo,jrr),e(fo,Wa),e(Wa,Drr),e(Wa,T1e),e(T1e,Grr),e(Wa,Orr),e(Wa,M1e),e(M1e,Vrr),e(Wa,Xrr),e(Wa,E1e),e(E1e,zrr),e(Wa,Wrr),e(fo,Qrr),e(fo,Re),e(Re,tT),e(tT,C1e),e(C1e,Hrr),e(tT,Urr),e(tT,rW),e(rW,Jrr),e(tT,Yrr),e(Re,Krr),e(Re,aT),e(aT,w1e),e(w1e,Zrr),e(aT,etr),e(aT,tW),e(tW,otr),e(aT,rtr),e(Re,ttr),e(Re,nT),e(nT,A1e),e(A1e,atr),e(nT,ntr),e(nT,aW),e(aW,str),e(nT,ltr),e(Re,itr),e(Re,sT),e(sT,y1e),e(y1e,dtr),e(sT,ctr),e(sT,nW),e(nW,ftr),e(sT,mtr),e(Re,gtr),e(Re,lT),e(lT,L1e),e(L1e,htr),e(lT,ptr),e(lT,sW),e(sW,utr),e(lT,_tr),e(Re,btr),e(Re,iT),e(iT,x1e),e(x1e,vtr),e(iT,Ftr),e(iT,lW),e(lW,Ttr),e(iT,Mtr),e(Re,Etr),e(Re,dT),e(dT,$1e),e($1e,Ctr),e(dT,wtr),e(dT,iW),e(iW,Atr),e(dT,ytr),e(Re,Ltr),e(Re,cT),e(cT,k1e),e(k1e,xtr),e(cT,$tr),e(cT,dW),e(dW,ktr),e(cT,Str),e(Re,Rtr),e(Re,fT),e(fT,S1e),e(S1e,Ptr),e(fT,Btr),e(fT,cW),e(cW,Itr),e(fT,Ntr),e(fo,qtr),e(fo,mT),e(mT,jtr),e(mT,R1e),e(R1e,Dtr),e(mT,Gtr),e(mT,P1e),e(P1e,Otr),e(fo,Vtr),M(gT,fo,null),b(f,aGe,_),b(f,Cd,_),e(Cd,hT),e(hT,B1e),M(ty,B1e,null),e(Cd,Xtr),e(Cd,I1e),e(I1e,ztr),b(f,nGe,_),b(f,Xo,_),M(ay,Xo,null),e(Xo,Wtr),e(Xo,wd),e(wd,Qtr),e(wd,fW),e(fW,Htr),e(wd,Utr),e(wd,mW),e(mW,Jtr),e(wd,Ytr),e(Xo,Ktr),e(Xo,ny),e(ny,Ztr),e(ny,N1e),e(N1e,ear),e(ny,oar),e(Xo,rar),e(Xo,Tt),M(sy,Tt,null),e(Tt,tar),e(Tt,q1e),e(q1e,aar),e(Tt,nar),e(Tt,Ad),e(Ad,sar),e(Ad,j1e),e(j1e,lar),e(Ad,iar),e(Ad,gW),e(gW,dar),e(Ad,car),e(Tt,far),M(pT,Tt,null),e(Xo,mar),e(Xo,mo),M(ly,mo,null),e(mo,gar),e(mo,D1e),e(D1e,har),e(mo,par),e(mo,Qa),e(Qa,uar),e(Qa,G1e),e(G1e,_ar),e(Qa,bar),e(Qa,O1e),e(O1e,Far),e(Qa,Tar),e(Qa,V1e),e(V1e,Mar),e(Qa,Ear),e(mo,Car),e(mo,et),e(et,uT),e(uT,X1e),e(X1e,war),e(uT,Aar),e(uT,hW),e(hW,yar),e(uT,Lar),e(et,xar),e(et,_T),e(_T,z1e),e(z1e,$ar),e(_T,kar),e(_T,pW),e(pW,Sar),e(_T,Rar),e(et,Par),e(et,bT),e(bT,W1e),e(W1e,Bar),e(bT,Iar),e(bT,uW),e(uW,Nar),e(bT,qar),e(et,jar),e(et,vT),e(vT,Q1e),e(Q1e,Dar),e(vT,Gar),e(vT,_W),e(_W,Oar),e(vT,Var),e(et,Xar),e(et,FT),e(FT,H1e),e(H1e,zar),e(FT,War),e(FT,bW),e(bW,Qar),e(FT,Har),e(mo,Uar),e(mo,TT),e(TT,Jar),e(TT,U1e),e(U1e,Yar),e(TT,Kar),e(TT,J1e),e(J1e,Zar),e(mo,enr),M(MT,mo,null),b(f,sGe,_),b(f,yd,_),e(yd,ET),e(ET,Y1e),M(iy,Y1e,null),e(yd,onr),e(yd,K1e),e(K1e,rnr),b(f,lGe,_),b(f,zo,_),M(dy,zo,null),e(zo,tnr),e(zo,Ld),e(Ld,anr),e(Ld,vW),e(vW,nnr),e(Ld,snr),e(Ld,FW),e(FW,lnr),e(Ld,inr),e(zo,dnr),e(zo,cy),e(cy,cnr),e(cy,Z1e),e(Z1e,fnr),e(cy,mnr),e(zo,gnr),e(zo,Mt),M(fy,Mt,null),e(Mt,hnr),e(Mt,ebe),e(ebe,pnr),e(Mt,unr),e(Mt,xd),e(xd,_nr),e(xd,obe),e(obe,bnr),e(xd,vnr),e(xd,TW),e(TW,Fnr),e(xd,Tnr),e(Mt,Mnr),M(CT,Mt,null),e(zo,Enr),e(zo,go),M(my,go,null),e(go,Cnr),e(go,rbe),e(rbe,wnr),e(go,Anr),e(go,Ha),e(Ha,ynr),e(Ha,tbe),e(tbe,Lnr),e(Ha,xnr),e(Ha,abe),e(abe,$nr),e(Ha,knr),e(Ha,nbe),e(nbe,Snr),e(Ha,Rnr),e(go,Pnr),e(go,ye),e(ye,wT),e(wT,sbe),e(sbe,Bnr),e(wT,Inr),e(wT,MW),e(MW,Nnr),e(wT,qnr),e(ye,jnr),e(ye,AT),e(AT,lbe),e(lbe,Dnr),e(AT,Gnr),e(AT,EW),e(EW,Onr),e(AT,Vnr),e(ye,Xnr),e(ye,yT),e(yT,ibe),e(ibe,znr),e(yT,Wnr),e(yT,CW),e(CW,Qnr),e(yT,Hnr),e(ye,Unr),e(ye,LT),e(LT,dbe),e(dbe,Jnr),e(LT,Ynr),e(LT,wW),e(wW,Knr),e(LT,Znr),e(ye,esr),e(ye,xT),e(xT,cbe),e(cbe,osr),e(xT,rsr),e(xT,AW),e(AW,tsr),e(xT,asr),e(ye,nsr),e(ye,$T),e($T,fbe),e(fbe,ssr),e($T,lsr),e($T,yW),e(yW,isr),e($T,dsr),e(ye,csr),e(ye,kT),e(kT,mbe),e(mbe,fsr),e(kT,msr),e(kT,LW),e(LW,gsr),e(kT,hsr),e(ye,psr),e(ye,ST),e(ST,gbe),e(gbe,usr),e(ST,_sr),e(ST,xW),e(xW,bsr),e(ST,vsr),e(ye,Fsr),e(ye,RT),e(RT,hbe),e(hbe,Tsr),e(RT,Msr),e(RT,$W),e($W,Esr),e(RT,Csr),e(ye,wsr),e(ye,PT),e(PT,pbe),e(pbe,Asr),e(PT,ysr),e(PT,kW),e(kW,Lsr),e(PT,xsr),e(go,$sr),e(go,BT),e(BT,ksr),e(BT,ube),e(ube,Ssr),e(BT,Rsr),e(BT,_be),e(_be,Psr),e(go,Bsr),M(IT,go,null),b(f,iGe,_),b(f,$d,_),e($d,NT),e(NT,bbe),M(gy,bbe,null),e($d,Isr),e($d,vbe),e(vbe,Nsr),b(f,dGe,_),b(f,Wo,_),M(hy,Wo,null),e(Wo,qsr),e(Wo,kd),e(kd,jsr),e(kd,SW),e(SW,Dsr),e(kd,Gsr),e(kd,RW),e(RW,Osr),e(kd,Vsr),e(Wo,Xsr),e(Wo,py),e(py,zsr),e(py,Fbe),e(Fbe,Wsr),e(py,Qsr),e(Wo,Hsr),e(Wo,Et),M(uy,Et,null),e(Et,Usr),e(Et,Tbe),e(Tbe,Jsr),e(Et,Ysr),e(Et,Sd),e(Sd,Ksr),e(Sd,Mbe),e(Mbe,Zsr),e(Sd,elr),e(Sd,PW),e(PW,olr),e(Sd,rlr),e(Et,tlr),M(qT,Et,null),e(Wo,alr),e(Wo,ho),M(_y,ho,null),e(ho,nlr),e(ho,Ebe),e(Ebe,slr),e(ho,llr),e(ho,Ua),e(Ua,ilr),e(Ua,Cbe),e(Cbe,dlr),e(Ua,clr),e(Ua,wbe),e(wbe,flr),e(Ua,mlr),e(Ua,Abe),e(Abe,glr),e(Ua,hlr),e(ho,plr),e(ho,by),e(by,jT),e(jT,ybe),e(ybe,ulr),e(jT,_lr),e(jT,BW),e(BW,blr),e(jT,vlr),e(by,Flr),e(by,DT),e(DT,Lbe),e(Lbe,Tlr),e(DT,Mlr),e(DT,IW),e(IW,Elr),e(DT,Clr),e(ho,wlr),e(ho,GT),e(GT,Alr),e(GT,xbe),e(xbe,ylr),e(GT,Llr),e(GT,$be),e($be,xlr),e(ho,$lr),M(OT,ho,null),b(f,cGe,_),b(f,Rd,_),e(Rd,VT),e(VT,kbe),M(vy,kbe,null),e(Rd,klr),e(Rd,Sbe),e(Sbe,Slr),b(f,fGe,_),b(f,Qo,_),M(Fy,Qo,null),e(Qo,Rlr),e(Qo,Pd),e(Pd,Plr),e(Pd,NW),e(NW,Blr),e(Pd,Ilr),e(Pd,qW),e(qW,Nlr),e(Pd,qlr),e(Qo,jlr),e(Qo,Ty),e(Ty,Dlr),e(Ty,Rbe),e(Rbe,Glr),e(Ty,Olr),e(Qo,Vlr),e(Qo,Ct),M(My,Ct,null),e(Ct,Xlr),e(Ct,Pbe),e(Pbe,zlr),e(Ct,Wlr),e(Ct,Bd),e(Bd,Qlr),e(Bd,Bbe),e(Bbe,Hlr),e(Bd,Ulr),e(Bd,jW),e(jW,Jlr),e(Bd,Ylr),e(Ct,Klr),M(XT,Ct,null),e(Qo,Zlr),e(Qo,po),M(Ey,po,null),e(po,eir),e(po,Ibe),e(Ibe,oir),e(po,rir),e(po,Ja),e(Ja,tir),e(Ja,Nbe),e(Nbe,air),e(Ja,nir),e(Ja,qbe),e(qbe,sir),e(Ja,lir),e(Ja,jbe),e(jbe,iir),e(Ja,dir),e(po,cir),e(po,ot),e(ot,zT),e(zT,Dbe),e(Dbe,fir),e(zT,mir),e(zT,DW),e(DW,gir),e(zT,hir),e(ot,pir),e(ot,WT),e(WT,Gbe),e(Gbe,uir),e(WT,_ir),e(WT,GW),e(GW,bir),e(WT,vir),e(ot,Fir),e(ot,QT),e(QT,Obe),e(Obe,Tir),e(QT,Mir),e(QT,OW),e(OW,Eir),e(QT,Cir),e(ot,wir),e(ot,HT),e(HT,Vbe),e(Vbe,Air),e(HT,yir),e(HT,VW),e(VW,Lir),e(HT,xir),e(ot,$ir),e(ot,UT),e(UT,Xbe),e(Xbe,kir),e(UT,Sir),e(UT,XW),e(XW,Rir),e(UT,Pir),e(po,Bir),e(po,JT),e(JT,Iir),e(JT,zbe),e(zbe,Nir),e(JT,qir),e(JT,Wbe),e(Wbe,jir),e(po,Dir),M(YT,po,null),b(f,mGe,_),b(f,Id,_),e(Id,KT),e(KT,Qbe),M(Cy,Qbe,null),e(Id,Gir),e(Id,Hbe),e(Hbe,Oir),b(f,gGe,_),b(f,Ho,_),M(wy,Ho,null),e(Ho,Vir),e(Ho,Nd),e(Nd,Xir),e(Nd,zW),e(zW,zir),e(Nd,Wir),e(Nd,WW),e(WW,Qir),e(Nd,Hir),e(Ho,Uir),e(Ho,Ay),e(Ay,Jir),e(Ay,Ube),e(Ube,Yir),e(Ay,Kir),e(Ho,Zir),e(Ho,wt),M(yy,wt,null),e(wt,edr),e(wt,Jbe),e(Jbe,odr),e(wt,rdr),e(wt,qd),e(qd,tdr),e(qd,Ybe),e(Ybe,adr),e(qd,ndr),e(qd,QW),e(QW,sdr),e(qd,ldr),e(wt,idr),M(ZT,wt,null),e(Ho,ddr),e(Ho,uo),M(Ly,uo,null),e(uo,cdr),e(uo,Kbe),e(Kbe,fdr),e(uo,mdr),e(uo,Ya),e(Ya,gdr),e(Ya,Zbe),e(Zbe,hdr),e(Ya,pdr),e(Ya,e2e),e(e2e,udr),e(Ya,_dr),e(Ya,o2e),e(o2e,bdr),e(Ya,vdr),e(uo,Fdr),e(uo,jd),e(jd,e7),e(e7,r2e),e(r2e,Tdr),e(e7,Mdr),e(e7,HW),e(HW,Edr),e(e7,Cdr),e(jd,wdr),e(jd,o7),e(o7,t2e),e(t2e,Adr),e(o7,ydr),e(o7,UW),e(UW,Ldr),e(o7,xdr),e(jd,$dr),e(jd,r7),e(r7,a2e),e(a2e,kdr),e(r7,Sdr),e(r7,JW),e(JW,Rdr),e(r7,Pdr),e(uo,Bdr),e(uo,t7),e(t7,Idr),e(t7,n2e),e(n2e,Ndr),e(t7,qdr),e(t7,s2e),e(s2e,jdr),e(uo,Ddr),M(a7,uo,null),b(f,hGe,_),b(f,Dd,_),e(Dd,n7),e(n7,l2e),M(xy,l2e,null),e(Dd,Gdr),e(Dd,i2e),e(i2e,Odr),b(f,pGe,_),b(f,Uo,_),M($y,Uo,null),e(Uo,Vdr),e(Uo,Gd),e(Gd,Xdr),e(Gd,YW),e(YW,zdr),e(Gd,Wdr),e(Gd,KW),e(KW,Qdr),e(Gd,Hdr),e(Uo,Udr),e(Uo,ky),e(ky,Jdr),e(ky,d2e),e(d2e,Ydr),e(ky,Kdr),e(Uo,Zdr),e(Uo,At),M(Sy,At,null),e(At,ecr),e(At,c2e),e(c2e,ocr),e(At,rcr),e(At,Od),e(Od,tcr),e(Od,f2e),e(f2e,acr),e(Od,ncr),e(Od,ZW),e(ZW,scr),e(Od,lcr),e(At,icr),M(s7,At,null),e(Uo,dcr),e(Uo,_o),M(Ry,_o,null),e(_o,ccr),e(_o,m2e),e(m2e,fcr),e(_o,mcr),e(_o,Ka),e(Ka,gcr),e(Ka,g2e),e(g2e,hcr),e(Ka,pcr),e(Ka,h2e),e(h2e,ucr),e(Ka,_cr),e(Ka,p2e),e(p2e,bcr),e(Ka,vcr),e(_o,Fcr),e(_o,Py),e(Py,l7),e(l7,u2e),e(u2e,Tcr),e(l7,Mcr),e(l7,eQ),e(eQ,Ecr),e(l7,Ccr),e(Py,wcr),e(Py,i7),e(i7,_2e),e(_2e,Acr),e(i7,ycr),e(i7,oQ),e(oQ,Lcr),e(i7,xcr),e(_o,$cr),e(_o,d7),e(d7,kcr),e(d7,b2e),e(b2e,Scr),e(d7,Rcr),e(d7,v2e),e(v2e,Pcr),e(_o,Bcr),M(c7,_o,null),b(f,uGe,_),b(f,Vd,_),e(Vd,f7),e(f7,F2e),M(By,F2e,null),e(Vd,Icr),e(Vd,T2e),e(T2e,Ncr),b(f,_Ge,_),b(f,Jo,_),M(Iy,Jo,null),e(Jo,qcr),e(Jo,Xd),e(Xd,jcr),e(Xd,rQ),e(rQ,Dcr),e(Xd,Gcr),e(Xd,tQ),e(tQ,Ocr),e(Xd,Vcr),e(Jo,Xcr),e(Jo,Ny),e(Ny,zcr),e(Ny,M2e),e(M2e,Wcr),e(Ny,Qcr),e(Jo,Hcr),e(Jo,yt),M(qy,yt,null),e(yt,Ucr),e(yt,E2e),e(E2e,Jcr),e(yt,Ycr),e(yt,zd),e(zd,Kcr),e(zd,C2e),e(C2e,Zcr),e(zd,efr),e(zd,aQ),e(aQ,ofr),e(zd,rfr),e(yt,tfr),M(m7,yt,null),e(Jo,afr),e(Jo,bo),M(jy,bo,null),e(bo,nfr),e(bo,w2e),e(w2e,sfr),e(bo,lfr),e(bo,Za),e(Za,ifr),e(Za,A2e),e(A2e,dfr),e(Za,cfr),e(Za,y2e),e(y2e,ffr),e(Za,mfr),e(Za,L2e),e(L2e,gfr),e(Za,hfr),e(bo,pfr),e(bo,x2e),e(x2e,g7),e(g7,$2e),e($2e,ufr),e(g7,_fr),e(g7,nQ),e(nQ,bfr),e(g7,vfr),e(bo,Ffr),e(bo,h7),e(h7,Tfr),e(h7,k2e),e(k2e,Mfr),e(h7,Efr),e(h7,S2e),e(S2e,Cfr),e(bo,wfr),M(p7,bo,null),b(f,bGe,_),b(f,Wd,_),e(Wd,u7),e(u7,R2e),M(Dy,R2e,null),e(Wd,Afr),e(Wd,P2e),e(P2e,yfr),b(f,vGe,_),b(f,Yo,_),M(Gy,Yo,null),e(Yo,Lfr),e(Yo,Qd),e(Qd,xfr),e(Qd,sQ),e(sQ,$fr),e(Qd,kfr),e(Qd,lQ),e(lQ,Sfr),e(Qd,Rfr),e(Yo,Pfr),e(Yo,Oy),e(Oy,Bfr),e(Oy,B2e),e(B2e,Ifr),e(Oy,Nfr),e(Yo,qfr),e(Yo,Lt),M(Vy,Lt,null),e(Lt,jfr),e(Lt,I2e),e(I2e,Dfr),e(Lt,Gfr),e(Lt,Hd),e(Hd,Ofr),e(Hd,N2e),e(N2e,Vfr),e(Hd,Xfr),e(Hd,iQ),e(iQ,zfr),e(Hd,Wfr),e(Lt,Qfr),M(_7,Lt,null),e(Yo,Hfr),e(Yo,vo),M(Xy,vo,null),e(vo,Ufr),e(vo,q2e),e(q2e,Jfr),e(vo,Yfr),e(vo,en),e(en,Kfr),e(en,j2e),e(j2e,Zfr),e(en,emr),e(en,D2e),e(D2e,omr),e(en,rmr),e(en,G2e),e(G2e,tmr),e(en,amr),e(vo,nmr),e(vo,on),e(on,b7),e(b7,O2e),e(O2e,smr),e(b7,lmr),e(b7,dQ),e(dQ,imr),e(b7,dmr),e(on,cmr),e(on,v7),e(v7,V2e),e(V2e,fmr),e(v7,mmr),e(v7,cQ),e(cQ,gmr),e(v7,hmr),e(on,pmr),e(on,F7),e(F7,X2e),e(X2e,umr),e(F7,_mr),e(F7,fQ),e(fQ,bmr),e(F7,vmr),e(on,Fmr),e(on,T7),e(T7,z2e),e(z2e,Tmr),e(T7,Mmr),e(T7,mQ),e(mQ,Emr),e(T7,Cmr),e(vo,wmr),e(vo,M7),e(M7,Amr),e(M7,W2e),e(W2e,ymr),e(M7,Lmr),e(M7,Q2e),e(Q2e,xmr),e(vo,$mr),M(E7,vo,null),b(f,FGe,_),b(f,Ud,_),e(Ud,C7),e(C7,H2e),M(zy,H2e,null),e(Ud,kmr),e(Ud,U2e),e(U2e,Smr),b(f,TGe,_),b(f,Ko,_),M(Wy,Ko,null),e(Ko,Rmr),e(Ko,Jd),e(Jd,Pmr),e(Jd,gQ),e(gQ,Bmr),e(Jd,Imr),e(Jd,hQ),e(hQ,Nmr),e(Jd,qmr),e(Ko,jmr),e(Ko,Qy),e(Qy,Dmr),e(Qy,J2e),e(J2e,Gmr),e(Qy,Omr),e(Ko,Vmr),e(Ko,xt),M(Hy,xt,null),e(xt,Xmr),e(xt,Y2e),e(Y2e,zmr),e(xt,Wmr),e(xt,Yd),e(Yd,Qmr),e(Yd,K2e),e(K2e,Hmr),e(Yd,Umr),e(Yd,pQ),e(pQ,Jmr),e(Yd,Ymr),e(xt,Kmr),M(w7,xt,null),e(Ko,Zmr),e(Ko,Fo),M(Uy,Fo,null),e(Fo,egr),e(Fo,Z2e),e(Z2e,ogr),e(Fo,rgr),e(Fo,rn),e(rn,tgr),e(rn,eve),e(eve,agr),e(rn,ngr),e(rn,ove),e(ove,sgr),e(rn,lgr),e(rn,rve),e(rve,igr),e(rn,dgr),e(Fo,cgr),e(Fo,tve),e(tve,A7),e(A7,ave),e(ave,fgr),e(A7,mgr),e(A7,uQ),e(uQ,ggr),e(A7,hgr),e(Fo,pgr),e(Fo,y7),e(y7,ugr),e(y7,nve),e(nve,_gr),e(y7,bgr),e(y7,sve),e(sve,vgr),e(Fo,Fgr),M(L7,Fo,null),b(f,MGe,_),b(f,Kd,_),e(Kd,x7),e(x7,lve),M(Jy,lve,null),e(Kd,Tgr),e(Kd,ive),e(ive,Mgr),b(f,EGe,_),b(f,Zo,_),M(Yy,Zo,null),e(Zo,Egr),e(Zo,Zd),e(Zd,Cgr),e(Zd,_Q),e(_Q,wgr),e(Zd,Agr),e(Zd,bQ),e(bQ,ygr),e(Zd,Lgr),e(Zo,xgr),e(Zo,Ky),e(Ky,$gr),e(Ky,dve),e(dve,kgr),e(Ky,Sgr),e(Zo,Rgr),e(Zo,$t),M(Zy,$t,null),e($t,Pgr),e($t,cve),e(cve,Bgr),e($t,Igr),e($t,ec),e(ec,Ngr),e(ec,fve),e(fve,qgr),e(ec,jgr),e(ec,vQ),e(vQ,Dgr),e(ec,Ggr),e($t,Ogr),M($7,$t,null),e(Zo,Vgr),e(Zo,yr),M(eL,yr,null),e(yr,Xgr),e(yr,mve),e(mve,zgr),e(yr,Wgr),e(yr,tn),e(tn,Qgr),e(tn,gve),e(gve,Hgr),e(tn,Ugr),e(tn,hve),e(hve,Jgr),e(tn,Ygr),e(tn,pve),e(pve,Kgr),e(tn,Zgr),e(yr,ehr),e(yr,q),e(q,k7),e(k7,uve),e(uve,ohr),e(k7,rhr),e(k7,FQ),e(FQ,thr),e(k7,ahr),e(q,nhr),e(q,S7),e(S7,_ve),e(_ve,shr),e(S7,lhr),e(S7,TQ),e(TQ,ihr),e(S7,dhr),e(q,chr),e(q,R7),e(R7,bve),e(bve,fhr),e(R7,mhr),e(R7,MQ),e(MQ,ghr),e(R7,hhr),e(q,phr),e(q,P7),e(P7,vve),e(vve,uhr),e(P7,_hr),e(P7,EQ),e(EQ,bhr),e(P7,vhr),e(q,Fhr),e(q,B7),e(B7,Fve),e(Fve,Thr),e(B7,Mhr),e(B7,CQ),e(CQ,Ehr),e(B7,Chr),e(q,whr),e(q,I7),e(I7,Tve),e(Tve,Ahr),e(I7,yhr),e(I7,wQ),e(wQ,Lhr),e(I7,xhr),e(q,$hr),e(q,N7),e(N7,Mve),e(Mve,khr),e(N7,Shr),e(N7,AQ),e(AQ,Rhr),e(N7,Phr),e(q,Bhr),e(q,q7),e(q7,Eve),e(Eve,Ihr),e(q7,Nhr),e(q7,yQ),e(yQ,qhr),e(q7,jhr),e(q,Dhr),e(q,j7),e(j7,Cve),e(Cve,Ghr),e(j7,Ohr),e(j7,LQ),e(LQ,Vhr),e(j7,Xhr),e(q,zhr),e(q,D7),e(D7,wve),e(wve,Whr),e(D7,Qhr),e(D7,xQ),e(xQ,Hhr),e(D7,Uhr),e(q,Jhr),e(q,G7),e(G7,Ave),e(Ave,Yhr),e(G7,Khr),e(G7,$Q),e($Q,Zhr),e(G7,epr),e(q,opr),e(q,O7),e(O7,yve),e(yve,rpr),e(O7,tpr),e(O7,kQ),e(kQ,apr),e(O7,npr),e(q,spr),e(q,V7),e(V7,Lve),e(Lve,lpr),e(V7,ipr),e(V7,SQ),e(SQ,dpr),e(V7,cpr),e(q,fpr),e(q,X7),e(X7,xve),e(xve,mpr),e(X7,gpr),e(X7,RQ),e(RQ,hpr),e(X7,ppr),e(q,upr),e(q,z7),e(z7,$ve),e($ve,_pr),e(z7,bpr),e(z7,PQ),e(PQ,vpr),e(z7,Fpr),e(q,Tpr),e(q,W7),e(W7,kve),e(kve,Mpr),e(W7,Epr),e(W7,BQ),e(BQ,Cpr),e(W7,wpr),e(q,Apr),e(q,Q7),e(Q7,Sve),e(Sve,ypr),e(Q7,Lpr),e(Q7,IQ),e(IQ,xpr),e(Q7,$pr),e(q,kpr),e(q,Vs),e(Vs,Rve),e(Rve,Spr),e(Vs,Rpr),e(Vs,NQ),e(NQ,Ppr),e(Vs,Bpr),e(Vs,qQ),e(qQ,Ipr),e(Vs,Npr),e(q,qpr),e(q,H7),e(H7,Pve),e(Pve,jpr),e(H7,Dpr),e(H7,jQ),e(jQ,Gpr),e(H7,Opr),e(q,Vpr),e(q,U7),e(U7,Bve),e(Bve,Xpr),e(U7,zpr),e(U7,DQ),e(DQ,Wpr),e(U7,Qpr),e(q,Hpr),e(q,J7),e(J7,Ive),e(Ive,Upr),e(J7,Jpr),e(J7,GQ),e(GQ,Ypr),e(J7,Kpr),e(q,Zpr),e(q,Y7),e(Y7,Nve),e(Nve,eur),e(Y7,our),e(Y7,OQ),e(OQ,rur),e(Y7,tur),e(q,aur),e(q,K7),e(K7,qve),e(qve,nur),e(K7,sur),e(K7,VQ),e(VQ,lur),e(K7,iur),e(q,dur),e(q,Z7),e(Z7,jve),e(jve,cur),e(Z7,fur),e(Z7,XQ),e(XQ,mur),e(Z7,gur),e(q,hur),e(q,e8),e(e8,Dve),e(Dve,pur),e(e8,uur),e(e8,zQ),e(zQ,_ur),e(e8,bur),e(q,vur),e(q,o8),e(o8,Gve),e(Gve,Fur),e(o8,Tur),e(o8,WQ),e(WQ,Mur),e(o8,Eur),e(q,Cur),e(q,r8),e(r8,Ove),e(Ove,wur),e(r8,Aur),e(r8,QQ),e(QQ,yur),e(r8,Lur),e(q,xur),e(q,t8),e(t8,Vve),e(Vve,$ur),e(t8,kur),e(t8,HQ),e(HQ,Sur),e(t8,Rur),e(q,Pur),e(q,a8),e(a8,Xve),e(Xve,Bur),e(a8,Iur),e(a8,UQ),e(UQ,Nur),e(a8,qur),e(q,jur),e(q,n8),e(n8,zve),e(zve,Dur),e(n8,Gur),e(n8,JQ),e(JQ,Our),e(n8,Vur),e(q,Xur),e(q,s8),e(s8,Wve),e(Wve,zur),e(s8,Wur),e(s8,YQ),e(YQ,Qur),e(s8,Hur),e(q,Uur),e(q,l8),e(l8,Qve),e(Qve,Jur),e(l8,Yur),e(l8,KQ),e(KQ,Kur),e(l8,Zur),e(q,e_r),e(q,i8),e(i8,Hve),e(Hve,o_r),e(i8,r_r),e(i8,ZQ),e(ZQ,t_r),e(i8,a_r),e(q,n_r),e(q,d8),e(d8,Uve),e(Uve,s_r),e(d8,l_r),e(d8,eH),e(eH,i_r),e(d8,d_r),e(q,c_r),e(q,c8),e(c8,Jve),e(Jve,f_r),e(c8,m_r),e(c8,oH),e(oH,g_r),e(c8,h_r),e(q,p_r),e(q,f8),e(f8,Yve),e(Yve,u_r),e(f8,__r),e(f8,rH),e(rH,b_r),e(f8,v_r),e(q,F_r),e(q,m8),e(m8,Kve),e(Kve,T_r),e(m8,M_r),e(m8,tH),e(tH,E_r),e(m8,C_r),e(q,w_r),e(q,g8),e(g8,Zve),e(Zve,A_r),e(g8,y_r),e(g8,aH),e(aH,L_r),e(g8,x_r),e(q,$_r),e(q,h8),e(h8,eFe),e(eFe,k_r),e(h8,S_r),e(h8,nH),e(nH,R_r),e(h8,P_r),e(q,B_r),e(q,p8),e(p8,oFe),e(oFe,I_r),e(p8,N_r),e(p8,sH),e(sH,q_r),e(p8,j_r),e(q,D_r),e(q,u8),e(u8,rFe),e(rFe,G_r),e(u8,O_r),e(u8,lH),e(lH,V_r),e(u8,X_r),e(q,z_r),e(q,_8),e(_8,tFe),e(tFe,W_r),e(_8,Q_r),e(_8,iH),e(iH,H_r),e(_8,U_r),e(q,J_r),e(q,b8),e(b8,aFe),e(aFe,Y_r),e(b8,K_r),e(b8,dH),e(dH,Z_r),e(b8,e1r),e(q,o1r),e(q,v8),e(v8,nFe),e(nFe,r1r),e(v8,t1r),e(v8,cH),e(cH,a1r),e(v8,n1r),e(q,s1r),e(q,F8),e(F8,sFe),e(sFe,l1r),e(F8,i1r),e(F8,fH),e(fH,d1r),e(F8,c1r),e(q,f1r),e(q,T8),e(T8,lFe),e(lFe,m1r),e(T8,g1r),e(T8,mH),e(mH,h1r),e(T8,p1r),e(q,u1r),e(q,M8),e(M8,iFe),e(iFe,_1r),e(M8,b1r),e(M8,gH),e(gH,v1r),e(M8,F1r),e(yr,T1r),M(E8,yr,null),b(f,CGe,_),b(f,oc,_),e(oc,C8),e(C8,dFe),M(oL,dFe,null),e(oc,M1r),e(oc,cFe),e(cFe,E1r),b(f,wGe,_),b(f,er,_),M(rL,er,null),e(er,C1r),e(er,rc),e(rc,w1r),e(rc,hH),e(hH,A1r),e(rc,y1r),e(rc,pH),e(pH,L1r),e(rc,x1r),e(er,$1r),e(er,tL),e(tL,k1r),e(tL,fFe),e(fFe,S1r),e(tL,R1r),e(er,P1r),e(er,kt),M(aL,kt,null),e(kt,B1r),e(kt,mFe),e(mFe,I1r),e(kt,N1r),e(kt,tc),e(tc,q1r),e(tc,gFe),e(gFe,j1r),e(tc,D1r),e(tc,uH),e(uH,G1r),e(tc,O1r),e(kt,V1r),M(w8,kt,null),e(er,X1r),e(er,Lr),M(nL,Lr,null),e(Lr,z1r),e(Lr,hFe),e(hFe,W1r),e(Lr,Q1r),e(Lr,an),e(an,H1r),e(an,pFe),e(pFe,U1r),e(an,J1r),e(an,uFe),e(uFe,Y1r),e(an,K1r),e(an,_Fe),e(_Fe,Z1r),e(an,ebr),e(Lr,obr),e(Lr,se),e(se,A8),e(A8,bFe),e(bFe,rbr),e(A8,tbr),e(A8,_H),e(_H,abr),e(A8,nbr),e(se,sbr),e(se,y8),e(y8,vFe),e(vFe,lbr),e(y8,ibr),e(y8,bH),e(bH,dbr),e(y8,cbr),e(se,fbr),e(se,L8),e(L8,FFe),e(FFe,mbr),e(L8,gbr),e(L8,vH),e(vH,hbr),e(L8,pbr),e(se,ubr),e(se,x8),e(x8,TFe),e(TFe,_br),e(x8,bbr),e(x8,FH),e(FH,vbr),e(x8,Fbr),e(se,Tbr),e(se,$8),e($8,MFe),e(MFe,Mbr),e($8,Ebr),e($8,TH),e(TH,Cbr),e($8,wbr),e(se,Abr),e(se,k8),e(k8,EFe),e(EFe,ybr),e(k8,Lbr),e(k8,MH),e(MH,xbr),e(k8,$br),e(se,kbr),e(se,S8),e(S8,CFe),e(CFe,Sbr),e(S8,Rbr),e(S8,EH),e(EH,Pbr),e(S8,Bbr),e(se,Ibr),e(se,R8),e(R8,wFe),e(wFe,Nbr),e(R8,qbr),e(R8,CH),e(CH,jbr),e(R8,Dbr),e(se,Gbr),e(se,P8),e(P8,AFe),e(AFe,Obr),e(P8,Vbr),e(P8,wH),e(wH,Xbr),e(P8,zbr),e(se,Wbr),e(se,B8),e(B8,yFe),e(yFe,Qbr),e(B8,Hbr),e(B8,AH),e(AH,Ubr),e(B8,Jbr),e(se,Ybr),e(se,I8),e(I8,LFe),e(LFe,Kbr),e(I8,Zbr),e(I8,yH),e(yH,e2r),e(I8,o2r),e(se,r2r),e(se,N8),e(N8,xFe),e(xFe,t2r),e(N8,a2r),e(N8,LH),e(LH,n2r),e(N8,s2r),e(se,l2r),e(se,q8),e(q8,$Fe),e($Fe,i2r),e(q8,d2r),e(q8,xH),e(xH,c2r),e(q8,f2r),e(se,m2r),e(se,j8),e(j8,kFe),e(kFe,g2r),e(j8,h2r),e(j8,$H),e($H,p2r),e(j8,u2r),e(se,_2r),e(se,D8),e(D8,SFe),e(SFe,b2r),e(D8,v2r),e(D8,kH),e(kH,F2r),e(D8,T2r),e(se,M2r),e(se,G8),e(G8,RFe),e(RFe,E2r),e(G8,C2r),e(G8,SH),e(SH,w2r),e(G8,A2r),e(se,y2r),e(se,O8),e(O8,PFe),e(PFe,L2r),e(O8,x2r),e(O8,RH),e(RH,$2r),e(O8,k2r),e(se,S2r),e(se,V8),e(V8,BFe),e(BFe,R2r),e(V8,P2r),e(V8,PH),e(PH,B2r),e(V8,I2r),e(se,N2r),e(se,X8),e(X8,IFe),e(IFe,q2r),e(X8,j2r),e(X8,BH),e(BH,D2r),e(X8,G2r),e(se,O2r),e(se,z8),e(z8,NFe),e(NFe,V2r),e(z8,X2r),e(z8,IH),e(IH,z2r),e(z8,W2r),e(se,Q2r),e(se,W8),e(W8,qFe),e(qFe,H2r),e(W8,U2r),e(W8,NH),e(NH,J2r),e(W8,Y2r),e(se,K2r),e(se,Q8),e(Q8,jFe),e(jFe,Z2r),e(Q8,evr),e(Q8,qH),e(qH,ovr),e(Q8,rvr),e(se,tvr),e(se,H8),e(H8,DFe),e(DFe,avr),e(H8,nvr),e(H8,jH),e(jH,svr),e(H8,lvr),e(Lr,ivr),M(U8,Lr,null),b(f,AGe,_),b(f,ac,_),e(ac,J8),e(J8,GFe),M(sL,GFe,null),e(ac,dvr),e(ac,OFe),e(OFe,cvr),b(f,yGe,_),b(f,or,_),M(lL,or,null),e(or,fvr),e(or,nc),e(nc,mvr),e(nc,DH),e(DH,gvr),e(nc,hvr),e(nc,GH),e(GH,pvr),e(nc,uvr),e(or,_vr),e(or,iL),e(iL,bvr),e(iL,VFe),e(VFe,vvr),e(iL,Fvr),e(or,Tvr),e(or,St),M(dL,St,null),e(St,Mvr),e(St,XFe),e(XFe,Evr),e(St,Cvr),e(St,sc),e(sc,wvr),e(sc,zFe),e(zFe,Avr),e(sc,yvr),e(sc,OH),e(OH,Lvr),e(sc,xvr),e(St,$vr),M(Y8,St,null),e(or,kvr),e(or,xr),M(cL,xr,null),e(xr,Svr),e(xr,WFe),e(WFe,Rvr),e(xr,Pvr),e(xr,nn),e(nn,Bvr),e(nn,QFe),e(QFe,Ivr),e(nn,Nvr),e(nn,HFe),e(HFe,qvr),e(nn,jvr),e(nn,UFe),e(UFe,Dvr),e(nn,Gvr),e(xr,Ovr),e(xr,Me),e(Me,K8),e(K8,JFe),e(JFe,Vvr),e(K8,Xvr),e(K8,VH),e(VH,zvr),e(K8,Wvr),e(Me,Qvr),e(Me,Z8),e(Z8,YFe),e(YFe,Hvr),e(Z8,Uvr),e(Z8,XH),e(XH,Jvr),e(Z8,Yvr),e(Me,Kvr),e(Me,e9),e(e9,KFe),e(KFe,Zvr),e(e9,eFr),e(e9,zH),e(zH,oFr),e(e9,rFr),e(Me,tFr),e(Me,o9),e(o9,ZFe),e(ZFe,aFr),e(o9,nFr),e(o9,WH),e(WH,sFr),e(o9,lFr),e(Me,iFr),e(Me,r9),e(r9,e6e),e(e6e,dFr),e(r9,cFr),e(r9,QH),e(QH,fFr),e(r9,mFr),e(Me,gFr),e(Me,t9),e(t9,o6e),e(o6e,hFr),e(t9,pFr),e(t9,HH),e(HH,uFr),e(t9,_Fr),e(Me,bFr),e(Me,a9),e(a9,r6e),e(r6e,vFr),e(a9,FFr),e(a9,UH),e(UH,TFr),e(a9,MFr),e(Me,EFr),e(Me,n9),e(n9,t6e),e(t6e,CFr),e(n9,wFr),e(n9,JH),e(JH,AFr),e(n9,yFr),e(Me,LFr),e(Me,s9),e(s9,a6e),e(a6e,xFr),e(s9,$Fr),e(s9,YH),e(YH,kFr),e(s9,SFr),e(Me,RFr),e(Me,l9),e(l9,n6e),e(n6e,PFr),e(l9,BFr),e(l9,KH),e(KH,IFr),e(l9,NFr),e(Me,qFr),e(Me,i9),e(i9,s6e),e(s6e,jFr),e(i9,DFr),e(i9,ZH),e(ZH,GFr),e(i9,OFr),e(Me,VFr),e(Me,d9),e(d9,l6e),e(l6e,XFr),e(d9,zFr),e(d9,eU),e(eU,WFr),e(d9,QFr),e(Me,HFr),e(Me,c9),e(c9,i6e),e(i6e,UFr),e(c9,JFr),e(c9,oU),e(oU,YFr),e(c9,KFr),e(xr,ZFr),M(f9,xr,null),b(f,LGe,_),b(f,lc,_),e(lc,m9),e(m9,d6e),M(fL,d6e,null),e(lc,e6r),e(lc,c6e),e(c6e,o6r),b(f,xGe,_),b(f,rr,_),M(mL,rr,null),e(rr,r6r),e(rr,ic),e(ic,t6r),e(ic,rU),e(rU,a6r),e(ic,n6r),e(ic,tU),e(tU,s6r),e(ic,l6r),e(rr,i6r),e(rr,gL),e(gL,d6r),e(gL,f6e),e(f6e,c6r),e(gL,f6r),e(rr,m6r),e(rr,Rt),M(hL,Rt,null),e(Rt,g6r),e(Rt,m6e),e(m6e,h6r),e(Rt,p6r),e(Rt,dc),e(dc,u6r),e(dc,g6e),e(g6e,_6r),e(dc,b6r),e(dc,aU),e(aU,v6r),e(dc,F6r),e(Rt,T6r),M(g9,Rt,null),e(rr,M6r),e(rr,$r),M(pL,$r,null),e($r,E6r),e($r,h6e),e(h6e,C6r),e($r,w6r),e($r,sn),e(sn,A6r),e(sn,p6e),e(p6e,y6r),e(sn,L6r),e(sn,u6e),e(u6e,x6r),e(sn,$6r),e(sn,_6e),e(_6e,k6r),e(sn,S6r),e($r,R6r),e($r,ln),e(ln,h9),e(h9,b6e),e(b6e,P6r),e(h9,B6r),e(h9,nU),e(nU,I6r),e(h9,N6r),e(ln,q6r),e(ln,p9),e(p9,v6e),e(v6e,j6r),e(p9,D6r),e(p9,sU),e(sU,G6r),e(p9,O6r),e(ln,V6r),e(ln,u9),e(u9,F6e),e(F6e,X6r),e(u9,z6r),e(u9,lU),e(lU,W6r),e(u9,Q6r),e(ln,H6r),e(ln,_9),e(_9,T6e),e(T6e,U6r),e(_9,J6r),e(_9,iU),e(iU,Y6r),e(_9,K6r),e($r,Z6r),M(b9,$r,null),b(f,$Ge,_),b(f,cc,_),e(cc,v9),e(v9,M6e),M(uL,M6e,null),e(cc,eTr),e(cc,E6e),e(E6e,oTr),b(f,kGe,_),b(f,tr,_),M(_L,tr,null),e(tr,rTr),e(tr,fc),e(fc,tTr),e(fc,dU),e(dU,aTr),e(fc,nTr),e(fc,cU),e(cU,sTr),e(fc,lTr),e(tr,iTr),e(tr,bL),e(bL,dTr),e(bL,C6e),e(C6e,cTr),e(bL,fTr),e(tr,mTr),e(tr,Pt),M(vL,Pt,null),e(Pt,gTr),e(Pt,w6e),e(w6e,hTr),e(Pt,pTr),e(Pt,mc),e(mc,uTr),e(mc,A6e),e(A6e,_Tr),e(mc,bTr),e(mc,fU),e(fU,vTr),e(mc,FTr),e(Pt,TTr),M(F9,Pt,null),e(tr,MTr),e(tr,kr),M(FL,kr,null),e(kr,ETr),e(kr,y6e),e(y6e,CTr),e(kr,wTr),e(kr,dn),e(dn,ATr),e(dn,L6e),e(L6e,yTr),e(dn,LTr),e(dn,x6e),e(x6e,xTr),e(dn,$Tr),e(dn,$6e),e($6e,kTr),e(dn,STr),e(kr,RTr),e(kr,ie),e(ie,T9),e(T9,k6e),e(k6e,PTr),e(T9,BTr),e(T9,mU),e(mU,ITr),e(T9,NTr),e(ie,qTr),e(ie,M9),e(M9,S6e),e(S6e,jTr),e(M9,DTr),e(M9,gU),e(gU,GTr),e(M9,OTr),e(ie,VTr),e(ie,E9),e(E9,R6e),e(R6e,XTr),e(E9,zTr),e(E9,hU),e(hU,WTr),e(E9,QTr),e(ie,HTr),e(ie,C9),e(C9,P6e),e(P6e,UTr),e(C9,JTr),e(C9,pU),e(pU,YTr),e(C9,KTr),e(ie,ZTr),e(ie,w9),e(w9,B6e),e(B6e,e7r),e(w9,o7r),e(w9,uU),e(uU,r7r),e(w9,t7r),e(ie,a7r),e(ie,A9),e(A9,I6e),e(I6e,n7r),e(A9,s7r),e(A9,_U),e(_U,l7r),e(A9,i7r),e(ie,d7r),e(ie,y9),e(y9,N6e),e(N6e,c7r),e(y9,f7r),e(y9,bU),e(bU,m7r),e(y9,g7r),e(ie,h7r),e(ie,L9),e(L9,q6e),e(q6e,p7r),e(L9,u7r),e(L9,vU),e(vU,_7r),e(L9,b7r),e(ie,v7r),e(ie,x9),e(x9,j6e),e(j6e,F7r),e(x9,T7r),e(x9,FU),e(FU,M7r),e(x9,E7r),e(ie,C7r),e(ie,$9),e($9,D6e),e(D6e,w7r),e($9,A7r),e($9,TU),e(TU,y7r),e($9,L7r),e(ie,x7r),e(ie,k9),e(k9,G6e),e(G6e,$7r),e(k9,k7r),e(k9,MU),e(MU,S7r),e(k9,R7r),e(ie,P7r),e(ie,S9),e(S9,O6e),e(O6e,B7r),e(S9,I7r),e(S9,EU),e(EU,N7r),e(S9,q7r),e(ie,j7r),e(ie,R9),e(R9,V6e),e(V6e,D7r),e(R9,G7r),e(R9,CU),e(CU,O7r),e(R9,V7r),e(ie,X7r),e(ie,P9),e(P9,X6e),e(X6e,z7r),e(P9,W7r),e(P9,wU),e(wU,Q7r),e(P9,H7r),e(ie,U7r),e(ie,B9),e(B9,z6e),e(z6e,J7r),e(B9,Y7r),e(B9,AU),e(AU,K7r),e(B9,Z7r),e(ie,e8r),e(ie,I9),e(I9,W6e),e(W6e,o8r),e(I9,r8r),e(I9,yU),e(yU,t8r),e(I9,a8r),e(ie,n8r),e(ie,N9),e(N9,Q6e),e(Q6e,s8r),e(N9,l8r),e(N9,LU),e(LU,i8r),e(N9,d8r),e(ie,c8r),e(ie,q9),e(q9,H6e),e(H6e,f8r),e(q9,m8r),e(q9,xU),e(xU,g8r),e(q9,h8r),e(ie,p8r),e(ie,j9),e(j9,U6e),e(U6e,u8r),e(j9,_8r),e(j9,$U),e($U,b8r),e(j9,v8r),e(ie,F8r),e(ie,D9),e(D9,J6e),e(J6e,T8r),e(D9,M8r),e(D9,kU),e(kU,E8r),e(D9,C8r),e(kr,w8r),M(G9,kr,null),b(f,SGe,_),b(f,gc,_),e(gc,O9),e(O9,Y6e),M(TL,Y6e,null),e(gc,A8r),e(gc,K6e),e(K6e,y8r),b(f,RGe,_),b(f,ar,_),M(ML,ar,null),e(ar,L8r),e(ar,hc),e(hc,x8r),e(hc,SU),e(SU,$8r),e(hc,k8r),e(hc,RU),e(RU,S8r),e(hc,R8r),e(ar,P8r),e(ar,EL),e(EL,B8r),e(EL,Z6e),e(Z6e,I8r),e(EL,N8r),e(ar,q8r),e(ar,Bt),M(CL,Bt,null),e(Bt,j8r),e(Bt,eTe),e(eTe,D8r),e(Bt,G8r),e(Bt,pc),e(pc,O8r),e(pc,oTe),e(oTe,V8r),e(pc,X8r),e(pc,PU),e(PU,z8r),e(pc,W8r),e(Bt,Q8r),M(V9,Bt,null),e(ar,H8r),e(ar,Sr),M(wL,Sr,null),e(Sr,U8r),e(Sr,rTe),e(rTe,J8r),e(Sr,Y8r),e(Sr,cn),e(cn,K8r),e(cn,tTe),e(tTe,Z8r),e(cn,e9r),e(cn,aTe),e(aTe,o9r),e(cn,r9r),e(cn,nTe),e(nTe,t9r),e(cn,a9r),e(Sr,n9r),e(Sr,Le),e(Le,X9),e(X9,sTe),e(sTe,s9r),e(X9,l9r),e(X9,BU),e(BU,i9r),e(X9,d9r),e(Le,c9r),e(Le,z9),e(z9,lTe),e(lTe,f9r),e(z9,m9r),e(z9,IU),e(IU,g9r),e(z9,h9r),e(Le,p9r),e(Le,W9),e(W9,iTe),e(iTe,u9r),e(W9,_9r),e(W9,NU),e(NU,b9r),e(W9,v9r),e(Le,F9r),e(Le,Q9),e(Q9,dTe),e(dTe,T9r),e(Q9,M9r),e(Q9,qU),e(qU,E9r),e(Q9,C9r),e(Le,w9r),e(Le,H9),e(H9,cTe),e(cTe,A9r),e(H9,y9r),e(H9,jU),e(jU,L9r),e(H9,x9r),e(Le,$9r),e(Le,U9),e(U9,fTe),e(fTe,k9r),e(U9,S9r),e(U9,DU),e(DU,R9r),e(U9,P9r),e(Le,B9r),e(Le,J9),e(J9,mTe),e(mTe,I9r),e(J9,N9r),e(J9,GU),e(GU,q9r),e(J9,j9r),e(Le,D9r),e(Le,Y9),e(Y9,gTe),e(gTe,G9r),e(Y9,O9r),e(Y9,OU),e(OU,V9r),e(Y9,X9r),e(Le,z9r),e(Le,K9),e(K9,hTe),e(hTe,W9r),e(K9,Q9r),e(K9,VU),e(VU,H9r),e(K9,U9r),e(Le,J9r),e(Le,Z9),e(Z9,pTe),e(pTe,Y9r),e(Z9,K9r),e(Z9,XU),e(XU,Z9r),e(Z9,eMr),e(Sr,oMr),M(eM,Sr,null),b(f,PGe,_),b(f,uc,_),e(uc,oM),e(oM,uTe),M(AL,uTe,null),e(uc,rMr),e(uc,_Te),e(_Te,tMr),b(f,BGe,_),b(f,nr,_),M(yL,nr,null),e(nr,aMr),e(nr,_c),e(_c,nMr),e(_c,zU),e(zU,sMr),e(_c,lMr),e(_c,WU),e(WU,iMr),e(_c,dMr),e(nr,cMr),e(nr,LL),e(LL,fMr),e(LL,bTe),e(bTe,mMr),e(LL,gMr),e(nr,hMr),e(nr,It),M(xL,It,null),e(It,pMr),e(It,vTe),e(vTe,uMr),e(It,_Mr),e(It,bc),e(bc,bMr),e(bc,FTe),e(FTe,vMr),e(bc,FMr),e(bc,QU),e(QU,TMr),e(bc,MMr),e(It,EMr),M(rM,It,null),e(nr,CMr),e(nr,Rr),M($L,Rr,null),e(Rr,wMr),e(Rr,TTe),e(TTe,AMr),e(Rr,yMr),e(Rr,fn),e(fn,LMr),e(fn,MTe),e(MTe,xMr),e(fn,$Mr),e(fn,ETe),e(ETe,kMr),e(fn,SMr),e(fn,CTe),e(CTe,RMr),e(fn,PMr),e(Rr,BMr),e(Rr,re),e(re,tM),e(tM,wTe),e(wTe,IMr),e(tM,NMr),e(tM,HU),e(HU,qMr),e(tM,jMr),e(re,DMr),e(re,aM),e(aM,ATe),e(ATe,GMr),e(aM,OMr),e(aM,UU),e(UU,VMr),e(aM,XMr),e(re,zMr),e(re,nM),e(nM,yTe),e(yTe,WMr),e(nM,QMr),e(nM,JU),e(JU,HMr),e(nM,UMr),e(re,JMr),e(re,sM),e(sM,LTe),e(LTe,YMr),e(sM,KMr),e(sM,YU),e(YU,ZMr),e(sM,e4r),e(re,o4r),e(re,lM),e(lM,xTe),e(xTe,r4r),e(lM,t4r),e(lM,KU),e(KU,a4r),e(lM,n4r),e(re,s4r),e(re,iM),e(iM,$Te),e($Te,l4r),e(iM,i4r),e(iM,ZU),e(ZU,d4r),e(iM,c4r),e(re,f4r),e(re,dM),e(dM,kTe),e(kTe,m4r),e(dM,g4r),e(dM,eJ),e(eJ,h4r),e(dM,p4r),e(re,u4r),e(re,cM),e(cM,STe),e(STe,_4r),e(cM,b4r),e(cM,oJ),e(oJ,v4r),e(cM,F4r),e(re,T4r),e(re,fM),e(fM,RTe),e(RTe,M4r),e(fM,E4r),e(fM,rJ),e(rJ,C4r),e(fM,w4r),e(re,A4r),e(re,mM),e(mM,PTe),e(PTe,y4r),e(mM,L4r),e(mM,tJ),e(tJ,x4r),e(mM,$4r),e(re,k4r),e(re,gM),e(gM,BTe),e(BTe,S4r),e(gM,R4r),e(gM,aJ),e(aJ,P4r),e(gM,B4r),e(re,I4r),e(re,hM),e(hM,ITe),e(ITe,N4r),e(hM,q4r),e(hM,nJ),e(nJ,j4r),e(hM,D4r),e(re,G4r),e(re,pM),e(pM,NTe),e(NTe,O4r),e(pM,V4r),e(pM,sJ),e(sJ,X4r),e(pM,z4r),e(re,W4r),e(re,uM),e(uM,qTe),e(qTe,Q4r),e(uM,H4r),e(uM,lJ),e(lJ,U4r),e(uM,J4r),e(re,Y4r),e(re,_M),e(_M,jTe),e(jTe,K4r),e(_M,Z4r),e(_M,iJ),e(iJ,eEr),e(_M,oEr),e(re,rEr),e(re,bM),e(bM,DTe),e(DTe,tEr),e(bM,aEr),e(bM,dJ),e(dJ,nEr),e(bM,sEr),e(re,lEr),e(re,vM),e(vM,GTe),e(GTe,iEr),e(vM,dEr),e(vM,cJ),e(cJ,cEr),e(vM,fEr),e(re,mEr),e(re,FM),e(FM,OTe),e(OTe,gEr),e(FM,hEr),e(FM,fJ),e(fJ,pEr),e(FM,uEr),e(re,_Er),e(re,TM),e(TM,VTe),e(VTe,bEr),e(TM,vEr),e(TM,mJ),e(mJ,FEr),e(TM,TEr),e(re,MEr),e(re,MM),e(MM,XTe),e(XTe,EEr),e(MM,CEr),e(MM,gJ),e(gJ,wEr),e(MM,AEr),e(re,yEr),e(re,EM),e(EM,zTe),e(zTe,LEr),e(EM,xEr),e(EM,hJ),e(hJ,$Er),e(EM,kEr),e(re,SEr),e(re,CM),e(CM,WTe),e(WTe,REr),e(CM,PEr),e(CM,pJ),e(pJ,BEr),e(CM,IEr),e(re,NEr),e(re,wM),e(wM,QTe),e(QTe,qEr),e(wM,jEr),e(wM,uJ),e(uJ,DEr),e(wM,GEr),e(re,OEr),e(re,AM),e(AM,HTe),e(HTe,VEr),e(AM,XEr),e(AM,_J),e(_J,zEr),e(AM,WEr),e(re,QEr),e(re,yM),e(yM,UTe),e(UTe,HEr),e(yM,UEr),e(yM,bJ),e(bJ,JEr),e(yM,YEr),e(re,KEr),e(re,LM),e(LM,JTe),e(JTe,ZEr),e(LM,eCr),e(LM,vJ),e(vJ,oCr),e(LM,rCr),e(Rr,tCr),M(xM,Rr,null),b(f,IGe,_),b(f,vc,_),e(vc,$M),e($M,YTe),M(kL,YTe,null),e(vc,aCr),e(vc,KTe),e(KTe,nCr),b(f,NGe,_),b(f,sr,_),M(SL,sr,null),e(sr,sCr),e(sr,Fc),e(Fc,lCr),e(Fc,FJ),e(FJ,iCr),e(Fc,dCr),e(Fc,TJ),e(TJ,cCr),e(Fc,fCr),e(sr,mCr),e(sr,RL),e(RL,gCr),e(RL,ZTe),e(ZTe,hCr),e(RL,pCr),e(sr,uCr),e(sr,Nt),M(PL,Nt,null),e(Nt,_Cr),e(Nt,e7e),e(e7e,bCr),e(Nt,vCr),e(Nt,Tc),e(Tc,FCr),e(Tc,o7e),e(o7e,TCr),e(Tc,MCr),e(Tc,MJ),e(MJ,ECr),e(Tc,CCr),e(Nt,wCr),M(kM,Nt,null),e(sr,ACr),e(sr,Pr),M(BL,Pr,null),e(Pr,yCr),e(Pr,r7e),e(r7e,LCr),e(Pr,xCr),e(Pr,mn),e(mn,$Cr),e(mn,t7e),e(t7e,kCr),e(mn,SCr),e(mn,a7e),e(a7e,RCr),e(mn,PCr),e(mn,n7e),e(n7e,BCr),e(mn,ICr),e(Pr,NCr),e(Pr,pe),e(pe,SM),e(SM,s7e),e(s7e,qCr),e(SM,jCr),e(SM,EJ),e(EJ,DCr),e(SM,GCr),e(pe,OCr),e(pe,RM),e(RM,l7e),e(l7e,VCr),e(RM,XCr),e(RM,CJ),e(CJ,zCr),e(RM,WCr),e(pe,QCr),e(pe,PM),e(PM,i7e),e(i7e,HCr),e(PM,UCr),e(PM,wJ),e(wJ,JCr),e(PM,YCr),e(pe,KCr),e(pe,BM),e(BM,d7e),e(d7e,ZCr),e(BM,e5r),e(BM,AJ),e(AJ,o5r),e(BM,r5r),e(pe,t5r),e(pe,IM),e(IM,c7e),e(c7e,a5r),e(IM,n5r),e(IM,yJ),e(yJ,s5r),e(IM,l5r),e(pe,i5r),e(pe,NM),e(NM,f7e),e(f7e,d5r),e(NM,c5r),e(NM,LJ),e(LJ,f5r),e(NM,m5r),e(pe,g5r),e(pe,qM),e(qM,m7e),e(m7e,h5r),e(qM,p5r),e(qM,xJ),e(xJ,u5r),e(qM,_5r),e(pe,b5r),e(pe,jM),e(jM,g7e),e(g7e,v5r),e(jM,F5r),e(jM,$J),e($J,T5r),e(jM,M5r),e(pe,E5r),e(pe,DM),e(DM,h7e),e(h7e,C5r),e(DM,w5r),e(DM,kJ),e(kJ,A5r),e(DM,y5r),e(pe,L5r),e(pe,GM),e(GM,p7e),e(p7e,x5r),e(GM,$5r),e(GM,SJ),e(SJ,k5r),e(GM,S5r),e(pe,R5r),e(pe,OM),e(OM,u7e),e(u7e,P5r),e(OM,B5r),e(OM,RJ),e(RJ,I5r),e(OM,N5r),e(pe,q5r),e(pe,VM),e(VM,_7e),e(_7e,j5r),e(VM,D5r),e(VM,PJ),e(PJ,G5r),e(VM,O5r),e(pe,V5r),e(pe,XM),e(XM,b7e),e(b7e,X5r),e(XM,z5r),e(XM,BJ),e(BJ,W5r),e(XM,Q5r),e(pe,H5r),e(pe,zM),e(zM,v7e),e(v7e,U5r),e(zM,J5r),e(zM,IJ),e(IJ,Y5r),e(zM,K5r),e(pe,Z5r),e(pe,WM),e(WM,F7e),e(F7e,e3r),e(WM,o3r),e(WM,NJ),e(NJ,r3r),e(WM,t3r),e(pe,a3r),e(pe,QM),e(QM,T7e),e(T7e,n3r),e(QM,s3r),e(QM,qJ),e(qJ,l3r),e(QM,i3r),e(pe,d3r),e(pe,HM),e(HM,M7e),e(M7e,c3r),e(HM,f3r),e(HM,jJ),e(jJ,m3r),e(HM,g3r),e(Pr,h3r),M(UM,Pr,null),b(f,qGe,_),b(f,Mc,_),e(Mc,JM),e(JM,E7e),M(IL,E7e,null),e(Mc,p3r),e(Mc,C7e),e(C7e,u3r),b(f,jGe,_),b(f,lr,_),M(NL,lr,null),e(lr,_3r),e(lr,Ec),e(Ec,b3r),e(Ec,DJ),e(DJ,v3r),e(Ec,F3r),e(Ec,GJ),e(GJ,T3r),e(Ec,M3r),e(lr,E3r),e(lr,qL),e(qL,C3r),e(qL,w7e),e(w7e,w3r),e(qL,A3r),e(lr,y3r),e(lr,qt),M(jL,qt,null),e(qt,L3r),e(qt,A7e),e(A7e,x3r),e(qt,$3r),e(qt,Cc),e(Cc,k3r),e(Cc,y7e),e(y7e,S3r),e(Cc,R3r),e(Cc,OJ),e(OJ,P3r),e(Cc,B3r),e(qt,I3r),M(YM,qt,null),e(lr,N3r),e(lr,Br),M(DL,Br,null),e(Br,q3r),e(Br,L7e),e(L7e,j3r),e(Br,D3r),e(Br,gn),e(gn,G3r),e(gn,x7e),e(x7e,O3r),e(gn,V3r),e(gn,$7e),e($7e,X3r),e(gn,z3r),e(gn,k7e),e(k7e,W3r),e(gn,Q3r),e(Br,H3r),e(Br,GL),e(GL,KM),e(KM,S7e),e(S7e,U3r),e(KM,J3r),e(KM,VJ),e(VJ,Y3r),e(KM,K3r),e(GL,Z3r),e(GL,ZM),e(ZM,R7e),e(R7e,ewr),e(ZM,owr),e(ZM,XJ),e(XJ,rwr),e(ZM,twr),e(Br,awr),M(e4,Br,null),b(f,DGe,_),b(f,wc,_),e(wc,o4),e(o4,P7e),M(OL,P7e,null),e(wc,nwr),e(wc,B7e),e(B7e,swr),b(f,GGe,_),b(f,ir,_),M(VL,ir,null),e(ir,lwr),e(ir,Ac),e(Ac,iwr),e(Ac,zJ),e(zJ,dwr),e(Ac,cwr),e(Ac,WJ),e(WJ,fwr),e(Ac,mwr),e(ir,gwr),e(ir,XL),e(XL,hwr),e(XL,I7e),e(I7e,pwr),e(XL,uwr),e(ir,_wr),e(ir,jt),M(zL,jt,null),e(jt,bwr),e(jt,N7e),e(N7e,vwr),e(jt,Fwr),e(jt,yc),e(yc,Twr),e(yc,q7e),e(q7e,Mwr),e(yc,Ewr),e(yc,QJ),e(QJ,Cwr),e(yc,wwr),e(jt,Awr),M(r4,jt,null),e(ir,ywr),e(ir,Ir),M(WL,Ir,null),e(Ir,Lwr),e(Ir,j7e),e(j7e,xwr),e(Ir,$wr),e(Ir,hn),e(hn,kwr),e(hn,D7e),e(D7e,Swr),e(hn,Rwr),e(hn,G7e),e(G7e,Pwr),e(hn,Bwr),e(hn,O7e),e(O7e,Iwr),e(hn,Nwr),e(Ir,qwr),e(Ir,V7e),e(V7e,t4),e(t4,X7e),e(X7e,jwr),e(t4,Dwr),e(t4,HJ),e(HJ,Gwr),e(t4,Owr),e(Ir,Vwr),M(a4,Ir,null),b(f,OGe,_),b(f,Lc,_),e(Lc,n4),e(n4,z7e),M(QL,z7e,null),e(Lc,Xwr),e(Lc,W7e),e(W7e,zwr),b(f,VGe,_),b(f,dr,_),M(HL,dr,null),e(dr,Wwr),e(dr,xc),e(xc,Qwr),e(xc,UJ),e(UJ,Hwr),e(xc,Uwr),e(xc,JJ),e(JJ,Jwr),e(xc,Ywr),e(dr,Kwr),e(dr,UL),e(UL,Zwr),e(UL,Q7e),e(Q7e,e0r),e(UL,o0r),e(dr,r0r),e(dr,Dt),M(JL,Dt,null),e(Dt,t0r),e(Dt,H7e),e(H7e,a0r),e(Dt,n0r),e(Dt,$c),e($c,s0r),e($c,U7e),e(U7e,l0r),e($c,i0r),e($c,YJ),e(YJ,d0r),e($c,c0r),e(Dt,f0r),M(s4,Dt,null),e(dr,m0r),e(dr,Nr),M(YL,Nr,null),e(Nr,g0r),e(Nr,J7e),e(J7e,h0r),e(Nr,p0r),e(Nr,pn),e(pn,u0r),e(pn,Y7e),e(Y7e,_0r),e(pn,b0r),e(pn,K7e),e(K7e,v0r),e(pn,F0r),e(pn,Z7e),e(Z7e,T0r),e(pn,M0r),e(Nr,E0r),e(Nr,de),e(de,l4),e(l4,e8e),e(e8e,C0r),e(l4,w0r),e(l4,KJ),e(KJ,A0r),e(l4,y0r),e(de,L0r),e(de,i4),e(i4,o8e),e(o8e,x0r),e(i4,$0r),e(i4,ZJ),e(ZJ,k0r),e(i4,S0r),e(de,R0r),e(de,d4),e(d4,r8e),e(r8e,P0r),e(d4,B0r),e(d4,eY),e(eY,I0r),e(d4,N0r),e(de,q0r),e(de,c4),e(c4,t8e),e(t8e,j0r),e(c4,D0r),e(c4,oY),e(oY,G0r),e(c4,O0r),e(de,V0r),e(de,f4),e(f4,a8e),e(a8e,X0r),e(f4,z0r),e(f4,rY),e(rY,W0r),e(f4,Q0r),e(de,H0r),e(de,m4),e(m4,n8e),e(n8e,U0r),e(m4,J0r),e(m4,tY),e(tY,Y0r),e(m4,K0r),e(de,Z0r),e(de,g4),e(g4,s8e),e(s8e,eAr),e(g4,oAr),e(g4,aY),e(aY,rAr),e(g4,tAr),e(de,aAr),e(de,h4),e(h4,l8e),e(l8e,nAr),e(h4,sAr),e(h4,nY),e(nY,lAr),e(h4,iAr),e(de,dAr),e(de,p4),e(p4,i8e),e(i8e,cAr),e(p4,fAr),e(p4,sY),e(sY,mAr),e(p4,gAr),e(de,hAr),e(de,u4),e(u4,d8e),e(d8e,pAr),e(u4,uAr),e(u4,lY),e(lY,_Ar),e(u4,bAr),e(de,vAr),e(de,_4),e(_4,c8e),e(c8e,FAr),e(_4,TAr),e(_4,iY),e(iY,MAr),e(_4,EAr),e(de,CAr),e(de,b4),e(b4,f8e),e(f8e,wAr),e(b4,AAr),e(b4,dY),e(dY,yAr),e(b4,LAr),e(de,xAr),e(de,v4),e(v4,m8e),e(m8e,$Ar),e(v4,kAr),e(v4,cY),e(cY,SAr),e(v4,RAr),e(de,PAr),e(de,F4),e(F4,g8e),e(g8e,BAr),e(F4,IAr),e(F4,fY),e(fY,NAr),e(F4,qAr),e(de,jAr),e(de,T4),e(T4,h8e),e(h8e,DAr),e(T4,GAr),e(T4,mY),e(mY,OAr),e(T4,VAr),e(de,XAr),e(de,M4),e(M4,p8e),e(p8e,zAr),e(M4,WAr),e(M4,gY),e(gY,QAr),e(M4,HAr),e(de,UAr),e(de,E4),e(E4,u8e),e(u8e,JAr),e(E4,YAr),e(E4,hY),e(hY,KAr),e(E4,ZAr),e(de,eyr),e(de,C4),e(C4,_8e),e(_8e,oyr),e(C4,ryr),e(C4,pY),e(pY,tyr),e(C4,ayr),e(de,nyr),e(de,w4),e(w4,b8e),e(b8e,syr),e(w4,lyr),e(w4,uY),e(uY,iyr),e(w4,dyr),e(de,cyr),e(de,A4),e(A4,v8e),e(v8e,fyr),e(A4,myr),e(A4,_Y),e(_Y,gyr),e(A4,hyr),e(Nr,pyr),M(y4,Nr,null),b(f,XGe,_),b(f,kc,_),e(kc,L4),e(L4,F8e),M(KL,F8e,null),e(kc,uyr),e(kc,T8e),e(T8e,_yr),b(f,zGe,_),b(f,cr,_),M(ZL,cr,null),e(cr,byr),e(cr,Sc),e(Sc,vyr),e(Sc,bY),e(bY,Fyr),e(Sc,Tyr),e(Sc,vY),e(vY,Myr),e(Sc,Eyr),e(cr,Cyr),e(cr,ex),e(ex,wyr),e(ex,M8e),e(M8e,Ayr),e(ex,yyr),e(cr,Lyr),e(cr,Gt),M(ox,Gt,null),e(Gt,xyr),e(Gt,E8e),e(E8e,$yr),e(Gt,kyr),e(Gt,Rc),e(Rc,Syr),e(Rc,C8e),e(C8e,Ryr),e(Rc,Pyr),e(Rc,FY),e(FY,Byr),e(Rc,Iyr),e(Gt,Nyr),M(x4,Gt,null),e(cr,qyr),e(cr,qr),M(rx,qr,null),e(qr,jyr),e(qr,w8e),e(w8e,Dyr),e(qr,Gyr),e(qr,un),e(un,Oyr),e(un,A8e),e(A8e,Vyr),e(un,Xyr),e(un,y8e),e(y8e,zyr),e(un,Wyr),e(un,L8e),e(L8e,Qyr),e(un,Hyr),e(qr,Uyr),e(qr,ce),e(ce,$4),e($4,x8e),e(x8e,Jyr),e($4,Yyr),e($4,TY),e(TY,Kyr),e($4,Zyr),e(ce,eLr),e(ce,k4),e(k4,$8e),e($8e,oLr),e(k4,rLr),e(k4,MY),e(MY,tLr),e(k4,aLr),e(ce,nLr),e(ce,S4),e(S4,k8e),e(k8e,sLr),e(S4,lLr),e(S4,EY),e(EY,iLr),e(S4,dLr),e(ce,cLr),e(ce,R4),e(R4,S8e),e(S8e,fLr),e(R4,mLr),e(R4,CY),e(CY,gLr),e(R4,hLr),e(ce,pLr),e(ce,P4),e(P4,R8e),e(R8e,uLr),e(P4,_Lr),e(P4,wY),e(wY,bLr),e(P4,vLr),e(ce,FLr),e(ce,B4),e(B4,P8e),e(P8e,TLr),e(B4,MLr),e(B4,AY),e(AY,ELr),e(B4,CLr),e(ce,wLr),e(ce,I4),e(I4,B8e),e(B8e,ALr),e(I4,yLr),e(I4,yY),e(yY,LLr),e(I4,xLr),e(ce,$Lr),e(ce,N4),e(N4,I8e),e(I8e,kLr),e(N4,SLr),e(N4,LY),e(LY,RLr),e(N4,PLr),e(ce,BLr),e(ce,q4),e(q4,N8e),e(N8e,ILr),e(q4,NLr),e(q4,xY),e(xY,qLr),e(q4,jLr),e(ce,DLr),e(ce,j4),e(j4,q8e),e(q8e,GLr),e(j4,OLr),e(j4,$Y),e($Y,VLr),e(j4,XLr),e(ce,zLr),e(ce,D4),e(D4,j8e),e(j8e,WLr),e(D4,QLr),e(D4,kY),e(kY,HLr),e(D4,ULr),e(ce,JLr),e(ce,G4),e(G4,D8e),e(D8e,YLr),e(G4,KLr),e(G4,SY),e(SY,ZLr),e(G4,exr),e(ce,oxr),e(ce,O4),e(O4,G8e),e(G8e,rxr),e(O4,txr),e(O4,RY),e(RY,axr),e(O4,nxr),e(ce,sxr),e(ce,V4),e(V4,O8e),e(O8e,lxr),e(V4,ixr),e(V4,PY),e(PY,dxr),e(V4,cxr),e(ce,fxr),e(ce,X4),e(X4,V8e),e(V8e,mxr),e(X4,gxr),e(X4,BY),e(BY,hxr),e(X4,pxr),e(ce,uxr),e(ce,z4),e(z4,X8e),e(X8e,_xr),e(z4,bxr),e(z4,IY),e(IY,vxr),e(z4,Fxr),e(ce,Txr),e(ce,W4),e(W4,z8e),e(z8e,Mxr),e(W4,Exr),e(W4,NY),e(NY,Cxr),e(W4,wxr),e(ce,Axr),e(ce,Q4),e(Q4,W8e),e(W8e,yxr),e(Q4,Lxr),e(Q4,qY),e(qY,xxr),e(Q4,$xr),e(ce,kxr),e(ce,H4),e(H4,Q8e),e(Q8e,Sxr),e(H4,Rxr),e(H4,jY),e(jY,Pxr),e(H4,Bxr),e(ce,Ixr),e(ce,U4),e(U4,H8e),e(H8e,Nxr),e(U4,qxr),e(U4,DY),e(DY,jxr),e(U4,Dxr),e(qr,Gxr),M(J4,qr,null),b(f,WGe,_),b(f,Pc,_),e(Pc,Y4),e(Y4,U8e),M(tx,U8e,null),e(Pc,Oxr),e(Pc,J8e),e(J8e,Vxr),b(f,QGe,_),b(f,fr,_),M(ax,fr,null),e(fr,Xxr),e(fr,Bc),e(Bc,zxr),e(Bc,GY),e(GY,Wxr),e(Bc,Qxr),e(Bc,OY),e(OY,Hxr),e(Bc,Uxr),e(fr,Jxr),e(fr,nx),e(nx,Yxr),e(nx,Y8e),e(Y8e,Kxr),e(nx,Zxr),e(fr,e$r),e(fr,Ot),M(sx,Ot,null),e(Ot,o$r),e(Ot,K8e),e(K8e,r$r),e(Ot,t$r),e(Ot,Ic),e(Ic,a$r),e(Ic,Z8e),e(Z8e,n$r),e(Ic,s$r),e(Ic,VY),e(VY,l$r),e(Ic,i$r),e(Ot,d$r),M(K4,Ot,null),e(fr,c$r),e(fr,jr),M(lx,jr,null),e(jr,f$r),e(jr,e9e),e(e9e,m$r),e(jr,g$r),e(jr,_n),e(_n,h$r),e(_n,o9e),e(o9e,p$r),e(_n,u$r),e(_n,r9e),e(r9e,_$r),e(_n,b$r),e(_n,t9e),e(t9e,v$r),e(_n,F$r),e(jr,T$r),e(jr,a9e),e(a9e,Z4),e(Z4,n9e),e(n9e,M$r),e(Z4,E$r),e(Z4,XY),e(XY,C$r),e(Z4,w$r),e(jr,A$r),M(eE,jr,null),b(f,HGe,_),b(f,Nc,_),e(Nc,oE),e(oE,s9e),M(ix,s9e,null),e(Nc,y$r),e(Nc,l9e),e(l9e,L$r),b(f,UGe,_),b(f,mr,_),M(dx,mr,null),e(mr,x$r),e(mr,qc),e(qc,$$r),e(qc,zY),e(zY,k$r),e(qc,S$r),e(qc,WY),e(WY,R$r),e(qc,P$r),e(mr,B$r),e(mr,cx),e(cx,I$r),e(cx,i9e),e(i9e,N$r),e(cx,q$r),e(mr,j$r),e(mr,Vt),M(fx,Vt,null),e(Vt,D$r),e(Vt,d9e),e(d9e,G$r),e(Vt,O$r),e(Vt,jc),e(jc,V$r),e(jc,c9e),e(c9e,X$r),e(jc,z$r),e(jc,QY),e(QY,W$r),e(jc,Q$r),e(Vt,H$r),M(rE,Vt,null),e(mr,U$r),e(mr,Dr),M(mx,Dr,null),e(Dr,J$r),e(Dr,f9e),e(f9e,Y$r),e(Dr,K$r),e(Dr,bn),e(bn,Z$r),e(bn,m9e),e(m9e,ekr),e(bn,okr),e(bn,g9e),e(g9e,rkr),e(bn,tkr),e(bn,h9e),e(h9e,akr),e(bn,nkr),e(Dr,skr),e(Dr,p9e),e(p9e,tE),e(tE,u9e),e(u9e,lkr),e(tE,ikr),e(tE,HY),e(HY,dkr),e(tE,ckr),e(Dr,fkr),M(aE,Dr,null),b(f,JGe,_),b(f,Dc,_),e(Dc,nE),e(nE,_9e),M(gx,_9e,null),e(Dc,mkr),e(Dc,b9e),e(b9e,gkr),b(f,YGe,_),b(f,gr,_),M(hx,gr,null),e(gr,hkr),e(gr,Gc),e(Gc,pkr),e(Gc,UY),e(UY,ukr),e(Gc,_kr),e(Gc,JY),e(JY,bkr),e(Gc,vkr),e(gr,Fkr),e(gr,px),e(px,Tkr),e(px,v9e),e(v9e,Mkr),e(px,Ekr),e(gr,Ckr),e(gr,Xt),M(ux,Xt,null),e(Xt,wkr),e(Xt,F9e),e(F9e,Akr),e(Xt,ykr),e(Xt,Oc),e(Oc,Lkr),e(Oc,T9e),e(T9e,xkr),e(Oc,$kr),e(Oc,YY),e(YY,kkr),e(Oc,Skr),e(Xt,Rkr),M(sE,Xt,null),e(gr,Pkr),e(gr,Gr),M(_x,Gr,null),e(Gr,Bkr),e(Gr,M9e),e(M9e,Ikr),e(Gr,Nkr),e(Gr,vn),e(vn,qkr),e(vn,E9e),e(E9e,jkr),e(vn,Dkr),e(vn,C9e),e(C9e,Gkr),e(vn,Okr),e(vn,w9e),e(w9e,Vkr),e(vn,Xkr),e(Gr,zkr),e(Gr,te),e(te,lE),e(lE,A9e),e(A9e,Wkr),e(lE,Qkr),e(lE,KY),e(KY,Hkr),e(lE,Ukr),e(te,Jkr),e(te,iE),e(iE,y9e),e(y9e,Ykr),e(iE,Kkr),e(iE,ZY),e(ZY,Zkr),e(iE,eSr),e(te,oSr),e(te,dE),e(dE,L9e),e(L9e,rSr),e(dE,tSr),e(dE,eK),e(eK,aSr),e(dE,nSr),e(te,sSr),e(te,cE),e(cE,x9e),e(x9e,lSr),e(cE,iSr),e(cE,oK),e(oK,dSr),e(cE,cSr),e(te,fSr),e(te,fE),e(fE,$9e),e($9e,mSr),e(fE,gSr),e(fE,rK),e(rK,hSr),e(fE,pSr),e(te,uSr),e(te,mE),e(mE,k9e),e(k9e,_Sr),e(mE,bSr),e(mE,tK),e(tK,vSr),e(mE,FSr),e(te,TSr),e(te,gE),e(gE,S9e),e(S9e,MSr),e(gE,ESr),e(gE,aK),e(aK,CSr),e(gE,wSr),e(te,ASr),e(te,hE),e(hE,R9e),e(R9e,ySr),e(hE,LSr),e(hE,nK),e(nK,xSr),e(hE,$Sr),e(te,kSr),e(te,pE),e(pE,P9e),e(P9e,SSr),e(pE,RSr),e(pE,sK),e(sK,PSr),e(pE,BSr),e(te,ISr),e(te,uE),e(uE,B9e),e(B9e,NSr),e(uE,qSr),e(uE,lK),e(lK,jSr),e(uE,DSr),e(te,GSr),e(te,_E),e(_E,I9e),e(I9e,OSr),e(_E,VSr),e(_E,iK),e(iK,XSr),e(_E,zSr),e(te,WSr),e(te,bE),e(bE,N9e),e(N9e,QSr),e(bE,HSr),e(bE,dK),e(dK,USr),e(bE,JSr),e(te,YSr),e(te,vE),e(vE,q9e),e(q9e,KSr),e(vE,ZSr),e(vE,cK),e(cK,eRr),e(vE,oRr),e(te,rRr),e(te,FE),e(FE,j9e),e(j9e,tRr),e(FE,aRr),e(FE,fK),e(fK,nRr),e(FE,sRr),e(te,lRr),e(te,TE),e(TE,D9e),e(D9e,iRr),e(TE,dRr),e(TE,mK),e(mK,cRr),e(TE,fRr),e(te,mRr),e(te,ME),e(ME,G9e),e(G9e,gRr),e(ME,hRr),e(ME,gK),e(gK,pRr),e(ME,uRr),e(te,_Rr),e(te,EE),e(EE,O9e),e(O9e,bRr),e(EE,vRr),e(EE,hK),e(hK,FRr),e(EE,TRr),e(te,MRr),e(te,CE),e(CE,V9e),e(V9e,ERr),e(CE,CRr),e(CE,pK),e(pK,wRr),e(CE,ARr),e(te,yRr),e(te,wE),e(wE,X9e),e(X9e,LRr),e(wE,xRr),e(wE,uK),e(uK,$Rr),e(wE,kRr),e(te,SRr),e(te,AE),e(AE,z9e),e(z9e,RRr),e(AE,PRr),e(AE,_K),e(_K,BRr),e(AE,IRr),e(te,NRr),e(te,yE),e(yE,W9e),e(W9e,qRr),e(yE,jRr),e(yE,bK),e(bK,DRr),e(yE,GRr),e(te,ORr),e(te,LE),e(LE,Q9e),e(Q9e,VRr),e(LE,XRr),e(LE,vK),e(vK,zRr),e(LE,WRr),e(te,QRr),e(te,xE),e(xE,H9e),e(H9e,HRr),e(xE,URr),e(xE,FK),e(FK,JRr),e(xE,YRr),e(te,KRr),e(te,$E),e($E,U9e),e(U9e,ZRr),e($E,ePr),e($E,TK),e(TK,oPr),e($E,rPr),e(te,tPr),e(te,kE),e(kE,J9e),e(J9e,aPr),e(kE,nPr),e(kE,MK),e(MK,sPr),e(kE,lPr),e(te,iPr),e(te,SE),e(SE,Y9e),e(Y9e,dPr),e(SE,cPr),e(SE,EK),e(EK,fPr),e(SE,mPr),e(Gr,gPr),M(RE,Gr,null),b(f,KGe,_),b(f,Vc,_),e(Vc,PE),e(PE,K9e),M(bx,K9e,null),e(Vc,hPr),e(Vc,Z9e),e(Z9e,pPr),b(f,ZGe,_),b(f,hr,_),M(vx,hr,null),e(hr,uPr),e(hr,Xc),e(Xc,_Pr),e(Xc,CK),e(CK,bPr),e(Xc,vPr),e(Xc,wK),e(wK,FPr),e(Xc,TPr),e(hr,MPr),e(hr,Fx),e(Fx,EPr),e(Fx,eMe),e(eMe,CPr),e(Fx,wPr),e(hr,APr),e(hr,zt),M(Tx,zt,null),e(zt,yPr),e(zt,oMe),e(oMe,LPr),e(zt,xPr),e(zt,zc),e(zc,$Pr),e(zc,rMe),e(rMe,kPr),e(zc,SPr),e(zc,AK),e(AK,RPr),e(zc,PPr),e(zt,BPr),M(BE,zt,null),e(hr,IPr),e(hr,Or),M(Mx,Or,null),e(Or,NPr),e(Or,tMe),e(tMe,qPr),e(Or,jPr),e(Or,Fn),e(Fn,DPr),e(Fn,aMe),e(aMe,GPr),e(Fn,OPr),e(Fn,nMe),e(nMe,VPr),e(Fn,XPr),e(Fn,sMe),e(sMe,zPr),e(Fn,WPr),e(Or,QPr),e(Or,xe),e(xe,IE),e(IE,lMe),e(lMe,HPr),e(IE,UPr),e(IE,yK),e(yK,JPr),e(IE,YPr),e(xe,KPr),e(xe,NE),e(NE,iMe),e(iMe,ZPr),e(NE,eBr),e(NE,LK),e(LK,oBr),e(NE,rBr),e(xe,tBr),e(xe,qE),e(qE,dMe),e(dMe,aBr),e(qE,nBr),e(qE,xK),e(xK,sBr),e(qE,lBr),e(xe,iBr),e(xe,jE),e(jE,cMe),e(cMe,dBr),e(jE,cBr),e(jE,$K),e($K,fBr),e(jE,mBr),e(xe,gBr),e(xe,DE),e(DE,fMe),e(fMe,hBr),e(DE,pBr),e(DE,kK),e(kK,uBr),e(DE,_Br),e(xe,bBr),e(xe,GE),e(GE,mMe),e(mMe,vBr),e(GE,FBr),e(GE,SK),e(SK,TBr),e(GE,MBr),e(xe,EBr),e(xe,OE),e(OE,gMe),e(gMe,CBr),e(OE,wBr),e(OE,RK),e(RK,ABr),e(OE,yBr),e(xe,LBr),e(xe,VE),e(VE,hMe),e(hMe,xBr),e(VE,$Br),e(VE,PK),e(PK,kBr),e(VE,SBr),e(xe,RBr),e(xe,XE),e(XE,pMe),e(pMe,PBr),e(XE,BBr),e(XE,BK),e(BK,IBr),e(XE,NBr),e(xe,qBr),e(xe,zE),e(zE,uMe),e(uMe,jBr),e(zE,DBr),e(zE,IK),e(IK,GBr),e(zE,OBr),e(Or,VBr),M(WE,Or,null),b(f,eOe,_),b(f,Wc,_),e(Wc,QE),e(QE,_Me),M(Ex,_Me,null),e(Wc,XBr),e(Wc,bMe),e(bMe,zBr),b(f,oOe,_),b(f,pr,_),M(Cx,pr,null),e(pr,WBr),e(pr,Qc),e(Qc,QBr),e(Qc,NK),e(NK,HBr),e(Qc,UBr),e(Qc,qK),e(qK,JBr),e(Qc,YBr),e(pr,KBr),e(pr,wx),e(wx,ZBr),e(wx,vMe),e(vMe,eIr),e(wx,oIr),e(pr,rIr),e(pr,Wt),M(Ax,Wt,null),e(Wt,tIr),e(Wt,FMe),e(FMe,aIr),e(Wt,nIr),e(Wt,Hc),e(Hc,sIr),e(Hc,TMe),e(TMe,lIr),e(Hc,iIr),e(Hc,jK),e(jK,dIr),e(Hc,cIr),e(Wt,fIr),M(HE,Wt,null),e(pr,mIr),e(pr,Vr),M(yx,Vr,null),e(Vr,gIr),e(Vr,MMe),e(MMe,hIr),e(Vr,pIr),e(Vr,Tn),e(Tn,uIr),e(Tn,EMe),e(EMe,_Ir),e(Tn,bIr),e(Tn,CMe),e(CMe,vIr),e(Tn,FIr),e(Tn,wMe),e(wMe,TIr),e(Tn,MIr),e(Vr,EIr),e(Vr,Ee),e(Ee,UE),e(UE,AMe),e(AMe,CIr),e(UE,wIr),e(UE,DK),e(DK,AIr),e(UE,yIr),e(Ee,LIr),e(Ee,JE),e(JE,yMe),e(yMe,xIr),e(JE,$Ir),e(JE,GK),e(GK,kIr),e(JE,SIr),e(Ee,RIr),e(Ee,YE),e(YE,LMe),e(LMe,PIr),e(YE,BIr),e(YE,OK),e(OK,IIr),e(YE,NIr),e(Ee,qIr),e(Ee,KE),e(KE,xMe),e(xMe,jIr),e(KE,DIr),e(KE,VK),e(VK,GIr),e(KE,OIr),e(Ee,VIr),e(Ee,ZE),e(ZE,$Me),e($Me,XIr),e(ZE,zIr),e(ZE,XK),e(XK,WIr),e(ZE,QIr),e(Ee,HIr),e(Ee,eC),e(eC,kMe),e(kMe,UIr),e(eC,JIr),e(eC,zK),e(zK,YIr),e(eC,KIr),e(Ee,ZIr),e(Ee,oC),e(oC,SMe),e(SMe,eNr),e(oC,oNr),e(oC,WK),e(WK,rNr),e(oC,tNr),e(Ee,aNr),e(Ee,rC),e(rC,RMe),e(RMe,nNr),e(rC,sNr),e(rC,QK),e(QK,lNr),e(rC,iNr),e(Ee,dNr),e(Ee,tC),e(tC,PMe),e(PMe,cNr),e(tC,fNr),e(tC,HK),e(HK,mNr),e(tC,gNr),e(Ee,hNr),e(Ee,aC),e(aC,BMe),e(BMe,pNr),e(aC,uNr),e(aC,UK),e(UK,_Nr),e(aC,bNr),e(Ee,vNr),e(Ee,nC),e(nC,IMe),e(IMe,FNr),e(nC,TNr),e(nC,JK),e(JK,MNr),e(nC,ENr),e(Ee,CNr),e(Ee,sC),e(sC,NMe),e(NMe,wNr),e(sC,ANr),e(sC,YK),e(YK,yNr),e(sC,LNr),e(Vr,xNr),M(lC,Vr,null),b(f,rOe,_),b(f,Uc,_),e(Uc,iC),e(iC,qMe),M(Lx,qMe,null),e(Uc,$Nr),e(Uc,jMe),e(jMe,kNr),b(f,tOe,_),b(f,ur,_),M(xx,ur,null),e(ur,SNr),e(ur,Jc),e(Jc,RNr),e(Jc,KK),e(KK,PNr),e(Jc,BNr),e(Jc,ZK),e(ZK,INr),e(Jc,NNr),e(ur,qNr),e(ur,$x),e($x,jNr),e($x,DMe),e(DMe,DNr),e($x,GNr),e(ur,ONr),e(ur,Qt),M(kx,Qt,null),e(Qt,VNr),e(Qt,GMe),e(GMe,XNr),e(Qt,zNr),e(Qt,Yc),e(Yc,WNr),e(Yc,OMe),e(OMe,QNr),e(Yc,HNr),e(Yc,eZ),e(eZ,UNr),e(Yc,JNr),e(Qt,YNr),M(dC,Qt,null),e(ur,KNr),e(ur,Xr),M(Sx,Xr,null),e(Xr,ZNr),e(Xr,VMe),e(VMe,eqr),e(Xr,oqr),e(Xr,Mn),e(Mn,rqr),e(Mn,XMe),e(XMe,tqr),e(Mn,aqr),e(Mn,zMe),e(zMe,nqr),e(Mn,sqr),e(Mn,WMe),e(WMe,lqr),e(Mn,iqr),e(Xr,dqr),e(Xr,$e),e($e,cC),e(cC,QMe),e(QMe,cqr),e(cC,fqr),e(cC,oZ),e(oZ,mqr),e(cC,gqr),e($e,hqr),e($e,fC),e(fC,HMe),e(HMe,pqr),e(fC,uqr),e(fC,rZ),e(rZ,_qr),e(fC,bqr),e($e,vqr),e($e,mC),e(mC,UMe),e(UMe,Fqr),e(mC,Tqr),e(mC,tZ),e(tZ,Mqr),e(mC,Eqr),e($e,Cqr),e($e,gC),e(gC,JMe),e(JMe,wqr),e(gC,Aqr),e(gC,aZ),e(aZ,yqr),e(gC,Lqr),e($e,xqr),e($e,hC),e(hC,YMe),e(YMe,$qr),e(hC,kqr),e(hC,nZ),e(nZ,Sqr),e(hC,Rqr),e($e,Pqr),e($e,pC),e(pC,KMe),e(KMe,Bqr),e(pC,Iqr),e(pC,sZ),e(sZ,Nqr),e(pC,qqr),e($e,jqr),e($e,uC),e(uC,ZMe),e(ZMe,Dqr),e(uC,Gqr),e(uC,lZ),e(lZ,Oqr),e(uC,Vqr),e($e,Xqr),e($e,_C),e(_C,e4e),e(e4e,zqr),e(_C,Wqr),e(_C,iZ),e(iZ,Qqr),e(_C,Hqr),e($e,Uqr),e($e,bC),e(bC,o4e),e(o4e,Jqr),e(bC,Yqr),e(bC,dZ),e(dZ,Kqr),e(bC,Zqr),e($e,ejr),e($e,vC),e(vC,r4e),e(r4e,ojr),e(vC,rjr),e(vC,cZ),e(cZ,tjr),e(vC,ajr),e(Xr,njr),M(FC,Xr,null),b(f,aOe,_),b(f,Kc,_),e(Kc,TC),e(TC,t4e),M(Rx,t4e,null),e(Kc,sjr),e(Kc,a4e),e(a4e,ljr),b(f,nOe,_),b(f,_r,_),M(Px,_r,null),e(_r,ijr),e(_r,Zc),e(Zc,djr),e(Zc,fZ),e(fZ,cjr),e(Zc,fjr),e(Zc,mZ),e(mZ,mjr),e(Zc,gjr),e(_r,hjr),e(_r,Bx),e(Bx,pjr),e(Bx,n4e),e(n4e,ujr),e(Bx,_jr),e(_r,bjr),e(_r,Ht),M(Ix,Ht,null),e(Ht,vjr),e(Ht,s4e),e(s4e,Fjr),e(Ht,Tjr),e(Ht,ef),e(ef,Mjr),e(ef,l4e),e(l4e,Ejr),e(ef,Cjr),e(ef,gZ),e(gZ,wjr),e(ef,Ajr),e(Ht,yjr),M(MC,Ht,null),e(_r,Ljr),e(_r,zr),M(Nx,zr,null),e(zr,xjr),e(zr,i4e),e(i4e,$jr),e(zr,kjr),e(zr,En),e(En,Sjr),e(En,d4e),e(d4e,Rjr),e(En,Pjr),e(En,c4e),e(c4e,Bjr),e(En,Ijr),e(En,f4e),e(f4e,Njr),e(En,qjr),e(zr,jjr),e(zr,Pe),e(Pe,EC),e(EC,m4e),e(m4e,Djr),e(EC,Gjr),e(EC,hZ),e(hZ,Ojr),e(EC,Vjr),e(Pe,Xjr),e(Pe,CC),e(CC,g4e),e(g4e,zjr),e(CC,Wjr),e(CC,pZ),e(pZ,Qjr),e(CC,Hjr),e(Pe,Ujr),e(Pe,wC),e(wC,h4e),e(h4e,Jjr),e(wC,Yjr),e(wC,uZ),e(uZ,Kjr),e(wC,Zjr),e(Pe,eDr),e(Pe,AC),e(AC,p4e),e(p4e,oDr),e(AC,rDr),e(AC,_Z),e(_Z,tDr),e(AC,aDr),e(Pe,nDr),e(Pe,yC),e(yC,u4e),e(u4e,sDr),e(yC,lDr),e(yC,bZ),e(bZ,iDr),e(yC,dDr),e(Pe,cDr),e(Pe,LC),e(LC,_4e),e(_4e,fDr),e(LC,mDr),e(LC,vZ),e(vZ,gDr),e(LC,hDr),e(Pe,pDr),e(Pe,xC),e(xC,b4e),e(b4e,uDr),e(xC,_Dr),e(xC,FZ),e(FZ,bDr),e(xC,vDr),e(Pe,FDr),e(Pe,$C),e($C,v4e),e(v4e,TDr),e($C,MDr),e($C,TZ),e(TZ,EDr),e($C,CDr),e(Pe,wDr),e(Pe,kC),e(kC,F4e),e(F4e,ADr),e(kC,yDr),e(kC,MZ),e(MZ,LDr),e(kC,xDr),e(zr,$Dr),M(SC,zr,null),b(f,sOe,_),b(f,of,_),e(of,RC),e(RC,T4e),M(qx,T4e,null),e(of,kDr),e(of,M4e),e(M4e,SDr),b(f,lOe,_),b(f,br,_),M(jx,br,null),e(br,RDr),e(br,rf),e(rf,PDr),e(rf,EZ),e(EZ,BDr),e(rf,IDr),e(rf,CZ),e(CZ,NDr),e(rf,qDr),e(br,jDr),e(br,Dx),e(Dx,DDr),e(Dx,E4e),e(E4e,GDr),e(Dx,ODr),e(br,VDr),e(br,Ut),M(Gx,Ut,null),e(Ut,XDr),e(Ut,C4e),e(C4e,zDr),e(Ut,WDr),e(Ut,tf),e(tf,QDr),e(tf,w4e),e(w4e,HDr),e(tf,UDr),e(tf,wZ),e(wZ,JDr),e(tf,YDr),e(Ut,KDr),M(PC,Ut,null),e(br,ZDr),e(br,Wr),M(Ox,Wr,null),e(Wr,eGr),e(Wr,A4e),e(A4e,oGr),e(Wr,rGr),e(Wr,Cn),e(Cn,tGr),e(Cn,y4e),e(y4e,aGr),e(Cn,nGr),e(Cn,L4e),e(L4e,sGr),e(Cn,lGr),e(Cn,x4e),e(x4e,iGr),e(Cn,dGr),e(Wr,cGr),e(Wr,ke),e(ke,BC),e(BC,$4e),e($4e,fGr),e(BC,mGr),e(BC,AZ),e(AZ,gGr),e(BC,hGr),e(ke,pGr),e(ke,IC),e(IC,k4e),e(k4e,uGr),e(IC,_Gr),e(IC,yZ),e(yZ,bGr),e(IC,vGr),e(ke,FGr),e(ke,NC),e(NC,S4e),e(S4e,TGr),e(NC,MGr),e(NC,LZ),e(LZ,EGr),e(NC,CGr),e(ke,wGr),e(ke,qC),e(qC,R4e),e(R4e,AGr),e(qC,yGr),e(qC,xZ),e(xZ,LGr),e(qC,xGr),e(ke,$Gr),e(ke,jC),e(jC,P4e),e(P4e,kGr),e(jC,SGr),e(jC,$Z),e($Z,RGr),e(jC,PGr),e(ke,BGr),e(ke,DC),e(DC,B4e),e(B4e,IGr),e(DC,NGr),e(DC,kZ),e(kZ,qGr),e(DC,jGr),e(ke,DGr),e(ke,GC),e(GC,I4e),e(I4e,GGr),e(GC,OGr),e(GC,SZ),e(SZ,VGr),e(GC,XGr),e(ke,zGr),e(ke,OC),e(OC,N4e),e(N4e,WGr),e(OC,QGr),e(OC,RZ),e(RZ,HGr),e(OC,UGr),e(ke,JGr),e(ke,VC),e(VC,q4e),e(q4e,YGr),e(VC,KGr),e(VC,PZ),e(PZ,ZGr),e(VC,eOr),e(ke,oOr),e(ke,XC),e(XC,j4e),e(j4e,rOr),e(XC,tOr),e(XC,BZ),e(BZ,aOr),e(XC,nOr),e(Wr,sOr),M(zC,Wr,null),b(f,iOe,_),b(f,af,_),e(af,WC),e(WC,D4e),M(Vx,D4e,null),e(af,lOr),e(af,G4e),e(G4e,iOr),b(f,dOe,_),b(f,vr,_),M(Xx,vr,null),e(vr,dOr),e(vr,nf),e(nf,cOr),e(nf,IZ),e(IZ,fOr),e(nf,mOr),e(nf,NZ),e(NZ,gOr),e(nf,hOr),e(vr,pOr),e(vr,zx),e(zx,uOr),e(zx,O4e),e(O4e,_Or),e(zx,bOr),e(vr,vOr),e(vr,Jt),M(Wx,Jt,null),e(Jt,FOr),e(Jt,V4e),e(V4e,TOr),e(Jt,MOr),e(Jt,sf),e(sf,EOr),e(sf,X4e),e(X4e,COr),e(sf,wOr),e(sf,qZ),e(qZ,AOr),e(sf,yOr),e(Jt,LOr),M(QC,Jt,null),e(vr,xOr),e(vr,Qr),M(Qx,Qr,null),e(Qr,$Or),e(Qr,z4e),e(z4e,kOr),e(Qr,SOr),e(Qr,wn),e(wn,ROr),e(wn,W4e),e(W4e,POr),e(wn,BOr),e(wn,Q4e),e(Q4e,IOr),e(wn,NOr),e(wn,H4e),e(H4e,qOr),e(wn,jOr),e(Qr,DOr),e(Qr,Se),e(Se,HC),e(HC,U4e),e(U4e,GOr),e(HC,OOr),e(HC,jZ),e(jZ,VOr),e(HC,XOr),e(Se,zOr),e(Se,UC),e(UC,J4e),e(J4e,WOr),e(UC,QOr),e(UC,DZ),e(DZ,HOr),e(UC,UOr),e(Se,JOr),e(Se,JC),e(JC,Y4e),e(Y4e,YOr),e(JC,KOr),e(JC,GZ),e(GZ,ZOr),e(JC,eVr),e(Se,oVr),e(Se,YC),e(YC,K4e),e(K4e,rVr),e(YC,tVr),e(YC,OZ),e(OZ,aVr),e(YC,nVr),e(Se,sVr),e(Se,KC),e(KC,Z4e),e(Z4e,lVr),e(KC,iVr),e(KC,VZ),e(VZ,dVr),e(KC,cVr),e(Se,fVr),e(Se,ZC),e(ZC,eEe),e(eEe,mVr),e(ZC,gVr),e(ZC,XZ),e(XZ,hVr),e(ZC,pVr),e(Se,uVr),e(Se,e5),e(e5,oEe),e(oEe,_Vr),e(e5,bVr),e(e5,zZ),e(zZ,vVr),e(e5,FVr),e(Se,TVr),e(Se,o5),e(o5,rEe),e(rEe,MVr),e(o5,EVr),e(o5,WZ),e(WZ,CVr),e(o5,wVr),e(Se,AVr),e(Se,r5),e(r5,tEe),e(tEe,yVr),e(r5,LVr),e(r5,QZ),e(QZ,xVr),e(r5,$Vr),e(Se,kVr),e(Se,t5),e(t5,aEe),e(aEe,SVr),e(t5,RVr),e(t5,HZ),e(HZ,PVr),e(t5,BVr),e(Qr,IVr),M(a5,Qr,null),b(f,cOe,_),b(f,lf,_),e(lf,n5),e(n5,nEe),M(Hx,nEe,null),e(lf,NVr),e(lf,sEe),e(sEe,qVr),b(f,fOe,_),b(f,Fr,_),M(Ux,Fr,null),e(Fr,jVr),e(Fr,df),e(df,DVr),e(df,UZ),e(UZ,GVr),e(df,OVr),e(df,JZ),e(JZ,VVr),e(df,XVr),e(Fr,zVr),e(Fr,Jx),e(Jx,WVr),e(Jx,lEe),e(lEe,QVr),e(Jx,HVr),e(Fr,UVr),e(Fr,Yt),M(Yx,Yt,null),e(Yt,JVr),e(Yt,iEe),e(iEe,YVr),e(Yt,KVr),e(Yt,cf),e(cf,ZVr),e(cf,dEe),e(dEe,eXr),e(cf,oXr),e(cf,YZ),e(YZ,rXr),e(cf,tXr),e(Yt,aXr),M(s5,Yt,null),e(Fr,nXr),e(Fr,Hr),M(Kx,Hr,null),e(Hr,sXr),e(Hr,cEe),e(cEe,lXr),e(Hr,iXr),e(Hr,An),e(An,dXr),e(An,fEe),e(fEe,cXr),e(An,fXr),e(An,mEe),e(mEe,mXr),e(An,gXr),e(An,gEe),e(gEe,hXr),e(An,pXr),e(Hr,uXr),e(Hr,Oe),e(Oe,l5),e(l5,hEe),e(hEe,_Xr),e(l5,bXr),e(l5,KZ),e(KZ,vXr),e(l5,FXr),e(Oe,TXr),e(Oe,i5),e(i5,pEe),e(pEe,MXr),e(i5,EXr),e(i5,ZZ),e(ZZ,CXr),e(i5,wXr),e(Oe,AXr),e(Oe,d5),e(d5,uEe),e(uEe,yXr),e(d5,LXr),e(d5,eee),e(eee,xXr),e(d5,$Xr),e(Oe,kXr),e(Oe,c5),e(c5,_Ee),e(_Ee,SXr),e(c5,RXr),e(c5,oee),e(oee,PXr),e(c5,BXr),e(Oe,IXr),e(Oe,f5),e(f5,bEe),e(bEe,NXr),e(f5,qXr),e(f5,ree),e(ree,jXr),e(f5,DXr),e(Oe,GXr),e(Oe,m5),e(m5,vEe),e(vEe,OXr),e(m5,VXr),e(m5,tee),e(tee,XXr),e(m5,zXr),e(Oe,WXr),e(Oe,g5),e(g5,FEe),e(FEe,QXr),e(g5,HXr),e(g5,aee),e(aee,UXr),e(g5,JXr),e(Oe,YXr),e(Oe,h5),e(h5,TEe),e(TEe,KXr),e(h5,ZXr),e(h5,nee),e(nee,ezr),e(h5,ozr),e(Hr,rzr),M(p5,Hr,null),b(f,mOe,_),b(f,ff,_),e(ff,u5),e(u5,MEe),M(Zx,MEe,null),e(ff,tzr),e(ff,EEe),e(EEe,azr),b(f,gOe,_),b(f,Tr,_),M(e$,Tr,null),e(Tr,nzr),e(Tr,mf),e(mf,szr),e(mf,see),e(see,lzr),e(mf,izr),e(mf,lee),e(lee,dzr),e(mf,czr),e(Tr,fzr),e(Tr,o$),e(o$,mzr),e(o$,CEe),e(CEe,gzr),e(o$,hzr),e(Tr,pzr),e(Tr,Kt),M(r$,Kt,null),e(Kt,uzr),e(Kt,wEe),e(wEe,_zr),e(Kt,bzr),e(Kt,gf),e(gf,vzr),e(gf,AEe),e(AEe,Fzr),e(gf,Tzr),e(gf,iee),e(iee,Mzr),e(gf,Ezr),e(Kt,Czr),M(_5,Kt,null),e(Tr,wzr),e(Tr,Ur),M(t$,Ur,null),e(Ur,Azr),e(Ur,yEe),e(yEe,yzr),e(Ur,Lzr),e(Ur,yn),e(yn,xzr),e(yn,LEe),e(LEe,$zr),e(yn,kzr),e(yn,xEe),e(xEe,Szr),e(yn,Rzr),e(yn,$Ee),e($Ee,Pzr),e(yn,Bzr),e(Ur,Izr),e(Ur,Ve),e(Ve,b5),e(b5,kEe),e(kEe,Nzr),e(b5,qzr),e(b5,dee),e(dee,jzr),e(b5,Dzr),e(Ve,Gzr),e(Ve,v5),e(v5,SEe),e(SEe,Ozr),e(v5,Vzr),e(v5,cee),e(cee,Xzr),e(v5,zzr),e(Ve,Wzr),e(Ve,F5),e(F5,REe),e(REe,Qzr),e(F5,Hzr),e(F5,fee),e(fee,Uzr),e(F5,Jzr),e(Ve,Yzr),e(Ve,T5),e(T5,PEe),e(PEe,Kzr),e(T5,Zzr),e(T5,mee),e(mee,eWr),e(T5,oWr),e(Ve,rWr),e(Ve,M5),e(M5,BEe),e(BEe,tWr),e(M5,aWr),e(M5,gee),e(gee,nWr),e(M5,sWr),e(Ve,lWr),e(Ve,E5),e(E5,IEe),e(IEe,iWr),e(E5,dWr),e(E5,hee),e(hee,cWr),e(E5,fWr),e(Ve,mWr),e(Ve,C5),e(C5,NEe),e(NEe,gWr),e(C5,hWr),e(C5,pee),e(pee,pWr),e(C5,uWr),e(Ve,_Wr),e(Ve,w5),e(w5,qEe),e(qEe,bWr),e(w5,vWr),e(w5,uee),e(uee,FWr),e(w5,TWr),e(Ur,MWr),M(A5,Ur,null),b(f,hOe,_),b(f,hf,_),e(hf,y5),e(y5,jEe),M(a$,jEe,null),e(hf,EWr),e(hf,DEe),e(DEe,CWr),b(f,pOe,_),b(f,Mr,_),M(n$,Mr,null),e(Mr,wWr),e(Mr,pf),e(pf,AWr),e(pf,_ee),e(_ee,yWr),e(pf,LWr),e(pf,bee),e(bee,xWr),e(pf,$Wr),e(Mr,kWr),e(Mr,s$),e(s$,SWr),e(s$,GEe),e(GEe,RWr),e(s$,PWr),e(Mr,BWr),e(Mr,Zt),M(l$,Zt,null),e(Zt,IWr),e(Zt,OEe),e(OEe,NWr),e(Zt,qWr),e(Zt,uf),e(uf,jWr),e(uf,VEe),e(VEe,DWr),e(uf,GWr),e(uf,vee),e(vee,OWr),e(uf,VWr),e(Zt,XWr),M(L5,Zt,null),e(Mr,zWr),e(Mr,Jr),M(i$,Jr,null),e(Jr,WWr),e(Jr,XEe),e(XEe,QWr),e(Jr,HWr),e(Jr,Ln),e(Ln,UWr),e(Ln,zEe),e(zEe,JWr),e(Ln,YWr),e(Ln,WEe),e(WEe,KWr),e(Ln,ZWr),e(Ln,QEe),e(QEe,eQr),e(Ln,oQr),e(Jr,rQr),e(Jr,HEe),e(HEe,x5),e(x5,UEe),e(UEe,tQr),e(x5,aQr),e(x5,Fee),e(Fee,nQr),e(x5,sQr),e(Jr,lQr),M($5,Jr,null),b(f,uOe,_),b(f,_f,_),e(_f,k5),e(k5,JEe),M(d$,JEe,null),e(_f,iQr),e(_f,YEe),e(YEe,dQr),b(f,_Oe,_),b(f,Er,_),M(c$,Er,null),e(Er,cQr),e(Er,bf),e(bf,fQr),e(bf,Tee),e(Tee,mQr),e(bf,gQr),e(bf,Mee),e(Mee,hQr),e(bf,pQr),e(Er,uQr),e(Er,f$),e(f$,_Qr),e(f$,KEe),e(KEe,bQr),e(f$,vQr),e(Er,FQr),e(Er,ea),M(m$,ea,null),e(ea,TQr),e(ea,ZEe),e(ZEe,MQr),e(ea,EQr),e(ea,vf),e(vf,CQr),e(vf,eCe),e(eCe,wQr),e(vf,AQr),e(vf,Eee),e(Eee,yQr),e(vf,LQr),e(ea,xQr),M(S5,ea,null),e(Er,$Qr),e(Er,Yr),M(g$,Yr,null),e(Yr,kQr),e(Yr,oCe),e(oCe,SQr),e(Yr,RQr),e(Yr,xn),e(xn,PQr),e(xn,rCe),e(rCe,BQr),e(xn,IQr),e(xn,tCe),e(tCe,NQr),e(xn,qQr),e(xn,aCe),e(aCe,jQr),e(xn,DQr),e(Yr,GQr),e(Yr,h$),e(h$,R5),e(R5,nCe),e(nCe,OQr),e(R5,VQr),e(R5,Cee),e(Cee,XQr),e(R5,zQr),e(h$,WQr),e(h$,P5),e(P5,sCe),e(sCe,QQr),e(P5,HQr),e(P5,wee),e(wee,UQr),e(P5,JQr),e(Yr,YQr),M(B5,Yr,null),b(f,bOe,_),b(f,Ff,_),e(Ff,I5),e(I5,lCe),M(p$,lCe,null),e(Ff,KQr),e(Ff,iCe),e(iCe,ZQr),b(f,vOe,_),b(f,Cr,_),M(u$,Cr,null),e(Cr,eHr),e(Cr,Tf),e(Tf,oHr),e(Tf,Aee),e(Aee,rHr),e(Tf,tHr),e(Tf,yee),e(yee,aHr),e(Tf,nHr),e(Cr,sHr),e(Cr,_$),e(_$,lHr),e(_$,dCe),e(dCe,iHr),e(_$,dHr),e(Cr,cHr),e(Cr,oa),M(b$,oa,null),e(oa,fHr),e(oa,cCe),e(cCe,mHr),e(oa,gHr),e(oa,Mf),e(Mf,hHr),e(Mf,fCe),e(fCe,pHr),e(Mf,uHr),e(Mf,Lee),e(Lee,_Hr),e(Mf,bHr),e(oa,vHr),M(N5,oa,null),e(Cr,FHr),e(Cr,Kr),M(v$,Kr,null),e(Kr,THr),e(Kr,mCe),e(mCe,MHr),e(Kr,EHr),e(Kr,$n),e($n,CHr),e($n,gCe),e(gCe,wHr),e($n,AHr),e($n,hCe),e(hCe,yHr),e($n,LHr),e($n,pCe),e(pCe,xHr),e($n,$Hr),e(Kr,kHr),e(Kr,uCe),e(uCe,q5),e(q5,_Ce),e(_Ce,SHr),e(q5,RHr),e(q5,xee),e(xee,PHr),e(q5,BHr),e(Kr,IHr),M(j5,Kr,null),FOe=!0},p(f,[_]){const F$={};_&2&&(F$.$$scope={dirty:_,ctx:f}),kf.$set(F$);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),Ng.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),vh.$set(vCe);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),ep.$set(FCe);const T$={};_&2&&(T$.$$scope={dirty:_,ctx:f}),op.$set(T$);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Tp.$set(TCe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Mp.$set(kn);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),wp.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),E_.$set(ECe);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),w_.$set(CCe);const M$={};_&2&&(M$.$$scope={dirty:_,ctx:f}),u1.$set(M$);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),b1.$set(wCe);const E$={};_&2&&(E$.$$scope={dirty:_,ctx:f}),ab.$set(E$);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),sb.$set(ACe);const C$={};_&2&&(C$.$$scope={dirty:_,ctx:f}),Xb.$set(C$);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),Wb.$set(yCe);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),c2.$set(LCe);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),m2.$set(xCe);const Ef={};_&2&&(Ef.$$scope={dirty:_,ctx:f}),lv.$set(Ef);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),dv.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),Dv.$set(kCe);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),Ov.$set(SCe);const w$={};_&2&&(w$.$$scope={dirty:_,ctx:f}),Uv.$set(w$);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),Yv.$set(RCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),RF.$set(PCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),BF.$set(BCe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),E6.$set(rt);const A$={};_&2&&(A$.$$scope={dirty:_,ctx:f}),w6.$set(A$);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),L6.$set(ICe);const y$={};_&2&&(y$.$$scope={dirty:_,ctx:f}),$6.$set(y$);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),X6.$set(NCe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),W6.$set(tt);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),U6.$set(qCe);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),Y6.$set(Cf);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),eT.$set(jCe);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),rT.$set(DCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),gT.$set(y);const D5={};_&2&&(D5.$$scope={dirty:_,ctx:f}),pT.$set(D5);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),MT.$set(GCe);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),CT.$set(OCe);const G5={};_&2&&(G5.$$scope={dirty:_,ctx:f}),IT.$set(G5);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),qT.$set(VCe);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),OT.$set(XCe);const O5={};_&2&&(O5.$$scope={dirty:_,ctx:f}),XT.$set(O5);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),YT.$set(zCe);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),ZT.$set(WCe);const V5={};_&2&&(V5.$$scope={dirty:_,ctx:f}),a7.$set(V5);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),s7.$set(QCe);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),c7.$set(HCe);const X5={};_&2&&(X5.$$scope={dirty:_,ctx:f}),m7.$set(X5);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),p7.$set(UCe);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),_7.$set(JCe);const z5={};_&2&&(z5.$$scope={dirty:_,ctx:f}),E7.$set(z5);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),w7.$set(YCe);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),L7.$set(KCe);const W5={};_&2&&(W5.$$scope={dirty:_,ctx:f}),$7.$set(W5);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),E8.$set(ZCe);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),w8.$set(e5e);const Q5={};_&2&&(Q5.$$scope={dirty:_,ctx:f}),U8.$set(Q5);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),Y8.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),f9.$set(r5e);const H5={};_&2&&(H5.$$scope={dirty:_,ctx:f}),g9.$set(H5);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),b9.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),F9.$set(a5e);const U5={};_&2&&(U5.$$scope={dirty:_,ctx:f}),G9.$set(U5);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),V9.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),eM.$set(s5e);const J5={};_&2&&(J5.$$scope={dirty:_,ctx:f}),rM.$set(J5);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),xM.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),kM.$set(i5e);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),UM.$set(Y5);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),YM.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),e4.$set(c5e);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),r4.$set(K5);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),a4.$set(f5e);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),s4.$set(m5e);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),y4.$set(Z5);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),x4.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),J4.$set(h5e);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),K4.$set(e3);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),eE.$set(p5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),rE.$set(u5e);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),aE.$set(o3);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),sE.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),RE.$set(b5e);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),BE.$set(r3);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),WE.$set(v5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),HE.$set(F5e);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),lC.$set(t3);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),dC.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),FC.$set(M5e);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),MC.$set(a3);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),SC.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),PC.$set(C5e);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),zC.$set(n3);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),QC.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),a5.$set(A5e);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),s5.$set(s3);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),p5.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),_5.$set(L5e);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),A5.$set(l3);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),L5.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),$5.$set($5e);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),S5.$set(i3);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),B5.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),N5.$set(S5e);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),j5.$set(d3)},i(f){FOe||(E(d.$$.fragment,f),E(La.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(kf.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(u0.$$.fragment,f),E(Ng.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(v0.$$.fragment,f),E(M0.$$.fragment,f),E(vh.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(L0.$$.fragment,f),E(ep.$$.fragment,f),E(op.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(P0.$$.fragment,f),E(Tp.$$.fragment,f),E(Mp.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(wp.$$.fragment,f),E(D0.$$.fragment,f),E(E_.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(w_.$$.fragment,f),E(z0.$$.fragment,f),E(u1.$$.fragment,f),E(W0.$$.fragment,f),E(Q0.$$.fragment,f),E(U0.$$.fragment,f),E(b1.$$.fragment,f),E(J0.$$.fragment,f),E(ab.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(eA.$$.fragment,f),E(sb.$$.fragment,f),E(oA.$$.fragment,f),E(Xb.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(nA.$$.fragment,f),E(Wb.$$.fragment,f),E(sA.$$.fragment,f),E(c2.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(cA.$$.fragment,f),E(m2.$$.fragment,f),E(fA.$$.fragment,f),E(lv.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(pA.$$.fragment,f),E(dv.$$.fragment,f),E(uA.$$.fragment,f),E(Dv.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(FA.$$.fragment,f),E(Ov.$$.fragment,f),E(TA.$$.fragment,f),E(Uv.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(wA.$$.fragment,f),E(Yv.$$.fragment,f),E(AA.$$.fragment,f),E(RF.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E($A.$$.fragment,f),E(BF.$$.fragment,f),E(kA.$$.fragment,f),E(E6.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(w6.$$.fragment,f),E(IA.$$.fragment,f),E(L6.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(DA.$$.fragment,f),E($6.$$.fragment,f),E(GA.$$.fragment,f),E(X6.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(W6.$$.fragment,f),E(WA.$$.fragment,f),E(U6.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(Y6.$$.fragment,f),E(YA.$$.fragment,f),E(eT.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(rT.$$.fragment,f),E(ry.$$.fragment,f),E(gT.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(pT.$$.fragment,f),E(ly.$$.fragment,f),E(MT.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(CT.$$.fragment,f),E(my.$$.fragment,f),E(IT.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(qT.$$.fragment,f),E(_y.$$.fragment,f),E(OT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(XT.$$.fragment,f),E(Ey.$$.fragment,f),E(YT.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(ZT.$$.fragment,f),E(Ly.$$.fragment,f),E(a7.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(s7.$$.fragment,f),E(Ry.$$.fragment,f),E(c7.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(m7.$$.fragment,f),E(jy.$$.fragment,f),E(p7.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(_7.$$.fragment,f),E(Xy.$$.fragment,f),E(E7.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(w7.$$.fragment,f),E(Uy.$$.fragment,f),E(L7.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E($7.$$.fragment,f),E(eL.$$.fragment,f),E(E8.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(w8.$$.fragment,f),E(nL.$$.fragment,f),E(U8.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(Y8.$$.fragment,f),E(cL.$$.fragment,f),E(f9.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(g9.$$.fragment,f),E(pL.$$.fragment,f),E(b9.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(F9.$$.fragment,f),E(FL.$$.fragment,f),E(G9.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(V9.$$.fragment,f),E(wL.$$.fragment,f),E(eM.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(rM.$$.fragment,f),E($L.$$.fragment,f),E(xM.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(kM.$$.fragment,f),E(BL.$$.fragment,f),E(UM.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(YM.$$.fragment,f),E(DL.$$.fragment,f),E(e4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(r4.$$.fragment,f),E(WL.$$.fragment,f),E(a4.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(s4.$$.fragment,f),E(YL.$$.fragment,f),E(y4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ox.$$.fragment,f),E(x4.$$.fragment,f),E(rx.$$.fragment,f),E(J4.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(K4.$$.fragment,f),E(lx.$$.fragment,f),E(eE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(rE.$$.fragment,f),E(mx.$$.fragment,f),E(aE.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(sE.$$.fragment,f),E(_x.$$.fragment,f),E(RE.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(BE.$$.fragment,f),E(Mx.$$.fragment,f),E(WE.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(HE.$$.fragment,f),E(yx.$$.fragment,f),E(lC.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(dC.$$.fragment,f),E(Sx.$$.fragment,f),E(FC.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(MC.$$.fragment,f),E(Nx.$$.fragment,f),E(SC.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(PC.$$.fragment,f),E(Ox.$$.fragment,f),E(zC.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(QC.$$.fragment,f),E(Qx.$$.fragment,f),E(a5.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(s5.$$.fragment,f),E(Kx.$$.fragment,f),E(p5.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(_5.$$.fragment,f),E(t$.$$.fragment,f),E(A5.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(L5.$$.fragment,f),E(i$.$$.fragment,f),E($5.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(S5.$$.fragment,f),E(g$.$$.fragment,f),E(B5.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(N5.$$.fragment,f),E(v$.$$.fragment,f),E(j5.$$.fragment,f),FOe=!0)},o(f){C(d.$$.fragment,f),C(La.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(kf.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(u0.$$.fragment,f),C(Ng.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(v0.$$.fragment,f),C(M0.$$.fragment,f),C(vh.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(L0.$$.fragment,f),C(ep.$$.fragment,f),C(op.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(P0.$$.fragment,f),C(Tp.$$.fragment,f),C(Mp.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(wp.$$.fragment,f),C(D0.$$.fragment,f),C(E_.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(w_.$$.fragment,f),C(z0.$$.fragment,f),C(u1.$$.fragment,f),C(W0.$$.fragment,f),C(Q0.$$.fragment,f),C(U0.$$.fragment,f),C(b1.$$.fragment,f),C(J0.$$.fragment,f),C(ab.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(eA.$$.fragment,f),C(sb.$$.fragment,f),C(oA.$$.fragment,f),C(Xb.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(nA.$$.fragment,f),C(Wb.$$.fragment,f),C(sA.$$.fragment,f),C(c2.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(cA.$$.fragment,f),C(m2.$$.fragment,f),C(fA.$$.fragment,f),C(lv.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(pA.$$.fragment,f),C(dv.$$.fragment,f),C(uA.$$.fragment,f),C(Dv.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(FA.$$.fragment,f),C(Ov.$$.fragment,f),C(TA.$$.fragment,f),C(Uv.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(wA.$$.fragment,f),C(Yv.$$.fragment,f),C(AA.$$.fragment,f),C(RF.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C($A.$$.fragment,f),C(BF.$$.fragment,f),C(kA.$$.fragment,f),C(E6.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(w6.$$.fragment,f),C(IA.$$.fragment,f),C(L6.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(DA.$$.fragment,f),C($6.$$.fragment,f),C(GA.$$.fragment,f),C(X6.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(W6.$$.fragment,f),C(WA.$$.fragment,f),C(U6.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(Y6.$$.fragment,f),C(YA.$$.fragment,f),C(eT.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(rT.$$.fragment,f),C(ry.$$.fragment,f),C(gT.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(pT.$$.fragment,f),C(ly.$$.fragment,f),C(MT.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(CT.$$.fragment,f),C(my.$$.fragment,f),C(IT.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(qT.$$.fragment,f),C(_y.$$.fragment,f),C(OT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(XT.$$.fragment,f),C(Ey.$$.fragment,f),C(YT.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(ZT.$$.fragment,f),C(Ly.$$.fragment,f),C(a7.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(s7.$$.fragment,f),C(Ry.$$.fragment,f),C(c7.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(m7.$$.fragment,f),C(jy.$$.fragment,f),C(p7.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(_7.$$.fragment,f),C(Xy.$$.fragment,f),C(E7.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(w7.$$.fragment,f),C(Uy.$$.fragment,f),C(L7.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C($7.$$.fragment,f),C(eL.$$.fragment,f),C(E8.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(w8.$$.fragment,f),C(nL.$$.fragment,f),C(U8.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(Y8.$$.fragment,f),C(cL.$$.fragment,f),C(f9.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(g9.$$.fragment,f),C(pL.$$.fragment,f),C(b9.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(F9.$$.fragment,f),C(FL.$$.fragment,f),C(G9.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(V9.$$.fragment,f),C(wL.$$.fragment,f),C(eM.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(rM.$$.fragment,f),C($L.$$.fragment,f),C(xM.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(kM.$$.fragment,f),C(BL.$$.fragment,f),C(UM.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(YM.$$.fragment,f),C(DL.$$.fragment,f),C(e4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(r4.$$.fragment,f),C(WL.$$.fragment,f),C(a4.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(s4.$$.fragment,f),C(YL.$$.fragment,f),C(y4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ox.$$.fragment,f),C(x4.$$.fragment,f),C(rx.$$.fragment,f),C(J4.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(K4.$$.fragment,f),C(lx.$$.fragment,f),C(eE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(rE.$$.fragment,f),C(mx.$$.fragment,f),C(aE.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(sE.$$.fragment,f),C(_x.$$.fragment,f),C(RE.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(BE.$$.fragment,f),C(Mx.$$.fragment,f),C(WE.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(HE.$$.fragment,f),C(yx.$$.fragment,f),C(lC.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(dC.$$.fragment,f),C(Sx.$$.fragment,f),C(FC.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(MC.$$.fragment,f),C(Nx.$$.fragment,f),C(SC.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(PC.$$.fragment,f),C(Ox.$$.fragment,f),C(zC.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(QC.$$.fragment,f),C(Qx.$$.fragment,f),C(a5.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(s5.$$.fragment,f),C(Kx.$$.fragment,f),C(p5.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(_5.$$.fragment,f),C(t$.$$.fragment,f),C(A5.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(L5.$$.fragment,f),C(i$.$$.fragment,f),C($5.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(S5.$$.fragment,f),C(g$.$$.fragment,f),C(B5.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(N5.$$.fragment,f),C(v$.$$.fragment,f),C(j5.$$.fragment,f),FOe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Af),f&&t(at),f&&t(Ge),f&&t(We),f&&t(Lf),w(La,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(pDe),f&&t(Ai),w(c0),f&&t(uDe),f&&t(In),f&&t(_De),w(f0,f),f&&t(bDe),f&&t(Dk),f&&t(vDe),w(kf,f),f&&t(FDe),f&&t(yi),w(m0),f&&t(TDe),f&&t(wo),w(g0),w(u0),w(Ng),w(_0),f&&t(MDe),f&&t(xi),w(b0),f&&t(EDe),f&&t(Ao),w(v0),w(M0),w(vh),w(E0),f&&t(CDe),f&&t($i),w(C0),f&&t(wDe),f&&t(yo),w(w0),w(L0),w(ep),w(op),w(x0),f&&t(ADe),f&&t(ki),w($0),f&&t(yDe),f&&t(Lo),w(k0),w(P0),w(Tp),w(Mp),w(B0),f&&t(LDe),f&&t(Ri),w(I0),f&&t(xDe),f&&t(xo),w(N0),w(j0),w(wp),w(D0),w(E_),f&&t($De),f&&t(Ii),w(G0),f&&t(kDe),f&&t($o),w(O0),w(X0),w(w_),w(z0),w(u1),f&&t(SDe),f&&t(ji),w(W0),f&&t(RDe),f&&t(ko),w(Q0),w(U0),w(b1),w(J0),w(ab),f&&t(PDe),f&&t(Oi),w(Y0),f&&t(BDe),f&&t(So),w(K0),w(eA),w(sb),w(oA),w(Xb),f&&t(IDe),f&&t(zi),w(rA),f&&t(NDe),f&&t(Ro),w(tA),w(nA),w(Wb),w(sA),w(c2),f&&t(qDe),f&&t(Hi),w(lA),f&&t(jDe),f&&t(Po),w(iA),w(cA),w(m2),w(fA),w(lv),f&&t(DDe),f&&t(Yi),w(mA),f&&t(GDe),f&&t(Bo),w(gA),w(pA),w(dv),w(uA),w(Dv),f&&t(ODe),f&&t(ed),w(_A),f&&t(VDe),f&&t(Io),w(bA),w(FA),w(Ov),w(TA),w(Uv),f&&t(XDe),f&&t(td),w(MA),f&&t(zDe),f&&t(No),w(EA),w(wA),w(Yv),w(AA),w(RF),f&&t(WDe),f&&t(sd),w(yA),f&&t(QDe),f&&t(qo),w(LA),w($A),w(BF),w(kA),w(E6),f&&t(HDe),f&&t(dd),w(SA),f&&t(UDe),f&&t(jo),w(RA),w(BA),w(w6),w(IA),w(L6),f&&t(JDe),f&&t(md),w(NA),f&&t(YDe),f&&t(Do),w(qA),w(DA),w($6),w(GA),w(X6),f&&t(KDe),f&&t(pd),w(OA),f&&t(ZDe),f&&t(Go),w(VA),w(zA),w(W6),w(WA),w(U6),f&&t(eGe),f&&t(bd),w(QA),f&&t(oGe),f&&t(Oo),w(HA),w(JA),w(Y6),w(YA),w(eT),f&&t(rGe),f&&t(Td),w(KA),f&&t(tGe),f&&t(Vo),w(ZA),w(oy),w(rT),w(ry),w(gT),f&&t(aGe),f&&t(Cd),w(ty),f&&t(nGe),f&&t(Xo),w(ay),w(sy),w(pT),w(ly),w(MT),f&&t(sGe),f&&t(yd),w(iy),f&&t(lGe),f&&t(zo),w(dy),w(fy),w(CT),w(my),w(IT),f&&t(iGe),f&&t($d),w(gy),f&&t(dGe),f&&t(Wo),w(hy),w(uy),w(qT),w(_y),w(OT),f&&t(cGe),f&&t(Rd),w(vy),f&&t(fGe),f&&t(Qo),w(Fy),w(My),w(XT),w(Ey),w(YT),f&&t(mGe),f&&t(Id),w(Cy),f&&t(gGe),f&&t(Ho),w(wy),w(yy),w(ZT),w(Ly),w(a7),f&&t(hGe),f&&t(Dd),w(xy),f&&t(pGe),f&&t(Uo),w($y),w(Sy),w(s7),w(Ry),w(c7),f&&t(uGe),f&&t(Vd),w(By),f&&t(_Ge),f&&t(Jo),w(Iy),w(qy),w(m7),w(jy),w(p7),f&&t(bGe),f&&t(Wd),w(Dy),f&&t(vGe),f&&t(Yo),w(Gy),w(Vy),w(_7),w(Xy),w(E7),f&&t(FGe),f&&t(Ud),w(zy),f&&t(TGe),f&&t(Ko),w(Wy),w(Hy),w(w7),w(Uy),w(L7),f&&t(MGe),f&&t(Kd),w(Jy),f&&t(EGe),f&&t(Zo),w(Yy),w(Zy),w($7),w(eL),w(E8),f&&t(CGe),f&&t(oc),w(oL),f&&t(wGe),f&&t(er),w(rL),w(aL),w(w8),w(nL),w(U8),f&&t(AGe),f&&t(ac),w(sL),f&&t(yGe),f&&t(or),w(lL),w(dL),w(Y8),w(cL),w(f9),f&&t(LGe),f&&t(lc),w(fL),f&&t(xGe),f&&t(rr),w(mL),w(hL),w(g9),w(pL),w(b9),f&&t($Ge),f&&t(cc),w(uL),f&&t(kGe),f&&t(tr),w(_L),w(vL),w(F9),w(FL),w(G9),f&&t(SGe),f&&t(gc),w(TL),f&&t(RGe),f&&t(ar),w(ML),w(CL),w(V9),w(wL),w(eM),f&&t(PGe),f&&t(uc),w(AL),f&&t(BGe),f&&t(nr),w(yL),w(xL),w(rM),w($L),w(xM),f&&t(IGe),f&&t(vc),w(kL),f&&t(NGe),f&&t(sr),w(SL),w(PL),w(kM),w(BL),w(UM),f&&t(qGe),f&&t(Mc),w(IL),f&&t(jGe),f&&t(lr),w(NL),w(jL),w(YM),w(DL),w(e4),f&&t(DGe),f&&t(wc),w(OL),f&&t(GGe),f&&t(ir),w(VL),w(zL),w(r4),w(WL),w(a4),f&&t(OGe),f&&t(Lc),w(QL),f&&t(VGe),f&&t(dr),w(HL),w(JL),w(s4),w(YL),w(y4),f&&t(XGe),f&&t(kc),w(KL),f&&t(zGe),f&&t(cr),w(ZL),w(ox),w(x4),w(rx),w(J4),f&&t(WGe),f&&t(Pc),w(tx),f&&t(QGe),f&&t(fr),w(ax),w(sx),w(K4),w(lx),w(eE),f&&t(HGe),f&&t(Nc),w(ix),f&&t(UGe),f&&t(mr),w(dx),w(fx),w(rE),w(mx),w(aE),f&&t(JGe),f&&t(Dc),w(gx),f&&t(YGe),f&&t(gr),w(hx),w(ux),w(sE),w(_x),w(RE),f&&t(KGe),f&&t(Vc),w(bx),f&&t(ZGe),f&&t(hr),w(vx),w(Tx),w(BE),w(Mx),w(WE),f&&t(eOe),f&&t(Wc),w(Ex),f&&t(oOe),f&&t(pr),w(Cx),w(Ax),w(HE),w(yx),w(lC),f&&t(rOe),f&&t(Uc),w(Lx),f&&t(tOe),f&&t(ur),w(xx),w(kx),w(dC),w(Sx),w(FC),f&&t(aOe),f&&t(Kc),w(Rx),f&&t(nOe),f&&t(_r),w(Px),w(Ix),w(MC),w(Nx),w(SC),f&&t(sOe),f&&t(of),w(qx),f&&t(lOe),f&&t(br),w(jx),w(Gx),w(PC),w(Ox),w(zC),f&&t(iOe),f&&t(af),w(Vx),f&&t(dOe),f&&t(vr),w(Xx),w(Wx),w(QC),w(Qx),w(a5),f&&t(cOe),f&&t(lf),w(Hx),f&&t(fOe),f&&t(Fr),w(Ux),w(Yx),w(s5),w(Kx),w(p5),f&&t(mOe),f&&t(ff),w(Zx),f&&t(gOe),f&&t(Tr),w(e$),w(r$),w(_5),w(t$),w(A5),f&&t(hOe),f&&t(hf),w(a$),f&&t(pOe),f&&t(Mr),w(n$),w(l$),w(L5),w(i$),w($5),f&&t(uOe),f&&t(_f),w(d$),f&&t(_Oe),f&&t(Er),w(c$),w(m$),w(S5),w(g$),w(B5),f&&t(bOe),f&&t(Ff),w(p$),f&&t(vOe),f&&t(Cr),w(u$),w(b$),w(N5),w(v$),w(j5)}}}const Eqt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Cqt(L){return MIt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kqt extends bIt{constructor(g){super();vIt(this,g,Cqt,Mqt,FIt,{})}}export{kqt as default,Eqt as metadata};
