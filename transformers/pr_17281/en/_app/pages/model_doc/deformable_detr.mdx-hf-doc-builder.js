import{S as hn,i as un,s as pn,e as r,k as m,w as v,t as a,M as gn,c as n,d as t,m as h,a as i,x as w,h as s,b as d,N as _n,G as e,g as p,y as T,q as x,o as y,B as $,v as bn,L as xr}from"../../chunks/vendor-hf-doc-builder.js";import{T as mn}from"../../chunks/Tip-hf-doc-builder.js";import{D as go}from"../../chunks/Docstring-hf-doc-builder.js";import{C as yr}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as _o}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Tr}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Dn(F){let c,D,_,u,b;return u=new yr({props:{code:`from transformers import DeformableDetrModel, DeformableDetrConfig

# Initializing a Deformable DETR sensetime/deformable-detr style configuration
configuration = DeformableDetrConfig()

# Initializing a model from the sensetime/deformable-detr style configuration
model = DeformableDetrModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DeformableDetrModel, DeformableDetrConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Deformable DETR sensetime/deformable-detr style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = DeformableDetrConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the sensetime/deformable-detr style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DeformableDetrModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=r("p"),D=a("Examples:"),_=m(),v(u.$$.fragment)},l(l){c=n(l,"P",{});var g=i(c);D=s(g,"Examples:"),g.forEach(t),_=h(l),w(u.$$.fragment,l)},m(l,g){p(l,c,g),e(c,D),p(l,_,g),T(u,l,g),b=!0},p:xr,i(l){b||(x(u.$$.fragment,l),b=!0)},o(l){y(u.$$.fragment,l),b=!1},d(l){l&&t(c),l&&t(_),$(u,l)}}}function vn(F){let c,D,_,u,b;return{c(){c=r("p"),D=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),u=a("Module"),b=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var g=i(c);D=s(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=n(g,"CODE",{});var z=i(_);u=s(z,"Module"),z.forEach(t),b=s(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(l,g){p(l,c,g),e(c,D),e(c,_),e(_,u),e(c,b)},d(l){l&&t(c)}}}function wn(F){let c,D,_,u,b;return u=new yr({props:{code:`from transformers import AutoFeatureExtractor, DeformableDetrModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("sensetime/deformable-detr")
model = DeformableDetrModel.from_pretrained("sensetime/deformable-detr")
inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, DeformableDetrModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;sensetime/deformable-detr&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DeformableDetrModel.from_pretrained(<span class="hljs-string">&quot;sensetime/deformable-detr&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=r("p"),D=a("Examples:"),_=m(),v(u.$$.fragment)},l(l){c=n(l,"P",{});var g=i(c);D=s(g,"Examples:"),g.forEach(t),_=h(l),w(u.$$.fragment,l)},m(l,g){p(l,c,g),e(c,D),p(l,_,g),T(u,l,g),b=!0},p:xr,i(l){b||(x(u.$$.fragment,l),b=!0)},o(l){y(u.$$.fragment,l),b=!1},d(l){l&&t(c),l&&t(_),$(u,l)}}}function Tn(F){let c,D,_,u,b;return{c(){c=r("p"),D=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),u=a("Module"),b=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var g=i(c);D=s(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=n(g,"CODE",{});var z=i(_);u=s(z,"Module"),z.forEach(t),b=s(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(l,g){p(l,c,g),e(c,D),e(c,_),e(_,u),e(c,b)},d(l){l&&t(c)}}}function xn(F){let c,D,_,u,b;return u=new yr({props:{code:`from transformers import AutoFeatureExtractor, DeformableDetrForObjectDetection
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("sensetime/deformable-detr")
model = DeformableDetrForObjectDetection.from_pretrained("sensetime/deformable-detr")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
# model predicts bounding boxes and corresponding COCO classes
logits = outputs.logits
bboxes = outputs.pred_boxes`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, DeformableDetrForObjectDetection
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;sensetime/deformable-detr&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DeformableDetrForObjectDetection.from_pretrained(<span class="hljs-string">&quot;sensetime/deformable-detr&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts bounding boxes and corresponding COCO classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span>bboxes = outputs.pred_boxes`}}),{c(){c=r("p"),D=a("Examples:"),_=m(),v(u.$$.fragment)},l(l){c=n(l,"P",{});var g=i(c);D=s(g,"Examples:"),g.forEach(t),_=h(l),w(u.$$.fragment,l)},m(l,g){p(l,c,g),e(c,D),p(l,_,g),T(u,l,g),b=!0},p:xr,i(l){b||(x(u.$$.fragment,l),b=!0)},o(l){y(u.$$.fragment,l),b=!1},d(l){l&&t(c),l&&t(_),$(u,l)}}}function yn(F){let c,D,_,u,b,l,g,z,Ho,bo,R,X,Qe,le,Uo,eo,Bo,Do,M,Vo,de,Xo,Jo,qe,Go,Zo,vo,Ce,Yo,wo,ze,oo,Ko,To,Me,Qo,xo,J,I,et,Pe,ot,tt,Ae,rt,nt,at,L,st,Oe,it,lt,ce,dt,ct,yo,G,$r,$o,Z,ft,Re,mt,ht,Eo,P,ut,fe,pt,gt,me,_t,bt,ko,N,Y,to,he,Dt,ro,vt,jo,j,ue,wt,S,Tt,Ie,xt,yt,pe,$t,Et,kt,W,jt,Le,Ft,qt,Ne,Ct,zt,Mt,K,Fo,H,Q,no,ge,Pt,ao,At,qo,E,_e,Ot,so,Rt,It,be,Lt,Se,Nt,St,Wt,De,Ht,ve,Ut,Bt,Vt,q,we,Xt,U,Jt,We,Gt,Zt,io,Yt,Kt,Qt,ee,er,oe,Co,B,te,lo,Te,or,co,tr,zo,k,xe,rr,fo,nr,ar,ye,sr,He,ir,lr,dr,$e,cr,Ee,fr,mr,hr,C,ke,ur,V,pr,Ue,gr,_r,mo,br,Dr,vr,re,wr,ne,Mo;return l=new _o({}),le=new _o({}),he=new _o({}),ue=new go({props:{name:"class transformers.DeformableDetrConfig",anchor:"transformers.DeformableDetrConfig",parameters:[{name:"num_queries",val:" = 300"},{name:"max_position_embeddings",val:" = 1024"},{name:"encoder_layers",val:" = 6"},{name:"encoder_ffn_dim",val:" = 1024"},{name:"encoder_attention_heads",val:" = 8"},{name:"decoder_layers",val:" = 6"},{name:"decoder_ffn_dim",val:" = 1024"},{name:"decoder_attention_heads",val:" = 8"},{name:"encoder_layerdrop",val:" = 0.0"},{name:"decoder_layerdrop",val:" = 0.0"},{name:"is_encoder_decoder",val:" = True"},{name:"activation_function",val:" = 'relu'"},{name:"d_model",val:" = 256"},{name:"dropout",val:" = 0.1"},{name:"attention_dropout",val:" = 0.0"},{name:"activation_dropout",val:" = 0.0"},{name:"init_std",val:" = 0.02"},{name:"init_xavier_std",val:" = 1.0"},{name:"return_intermediate",val:" = True"},{name:"auxiliary_loss",val:" = False"},{name:"position_embedding_type",val:" = 'sine'"},{name:"backbone",val:" = 'resnet50'"},{name:"dilation",val:" = False"},{name:"num_feature_levels",val:" = 4"},{name:"encoder_n_points",val:" = 4"},{name:"decoder_n_points",val:" = 4"},{name:"two_stage",val:" = False"},{name:"two_stage_num_proposals",val:" = 300"},{name:"with_box_refine",val:" = False"},{name:"class_cost",val:" = 1"},{name:"bbox_cost",val:" = 5"},{name:"giou_cost",val:" = 2"},{name:"mask_loss_coefficient",val:" = 1"},{name:"dice_loss_coefficient",val:" = 1"},{name:"bbox_loss_coefficient",val:" = 5"},{name:"giou_loss_coefficient",val:" = 2"},{name:"eos_coefficient",val:" = 0.1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DeformableDetrConfig.num_queries",description:`<strong>num_queries</strong> (<code>int</code>, <em>optional</em>, defaults to 300) &#x2014;
Number of object queries, i.e. detection slots. This is the maximal number of objects
<a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> can detect in a single image. In case <code>two_stage</code> is set to <code>True</code>, we use
<code>two_stage_num_proposals</code> instead.`,name:"num_queries"},{anchor:"transformers.DeformableDetrConfig.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Dimension of the layers.`,name:"d_model"},{anchor:"transformers.DeformableDetrConfig.encoder_layers",description:`<strong>encoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Number of encoder layers.`,name:"encoder_layers"},{anchor:"transformers.DeformableDetrConfig.decoder_layers",description:`<strong>decoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Number of decoder layers.`,name:"decoder_layers"},{anchor:"transformers.DeformableDetrConfig.encoder_attention_heads",description:`<strong>encoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"encoder_attention_heads"},{anchor:"transformers.DeformableDetrConfig.decoder_attention_heads",description:`<strong>decoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"decoder_attention_heads"},{anchor:"transformers.DeformableDetrConfig.decoder_ffn_dim",description:`<strong>decoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Dimension of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"decoder_ffn_dim"},{anchor:"transformers.DeformableDetrConfig.encoder_ffn_dim",description:`<strong>encoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Dimension of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"encoder_ffn_dim"},{anchor:"transformers.DeformableDetrConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"activation_function"},{anchor:"transformers.DeformableDetrConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"dropout"},{anchor:"transformers.DeformableDetrConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.DeformableDetrConfig.activation_dropout",description:`<strong>activation_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for activations inside the fully connected layer.`,name:"activation_dropout"},{anchor:"transformers.DeformableDetrConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.DeformableDetrConfig.init_xavier_std",description:`<strong>init_xavier_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
The scaling factor used for the Xavier initialization gain in the HM Attention map module.
encoder_layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
The LayerDrop probability for the encoder. See the [LayerDrop paper](see <a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>)
for more details.
decoder_layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
The LayerDrop probability for the decoder. See the [LayerDrop paper](see <a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>)
for more details.`,name:"init_xavier_std"},{anchor:"transformers.DeformableDetrConfig.auxiliary_loss",description:`<strong>auxiliary_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether auxiliary decoding losses (loss at each decoder layer) are to be used.`,name:"auxiliary_loss"},{anchor:"transformers.DeformableDetrConfig.position_embedding_type",description:`<strong>position_embedding_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;sine&quot;</code>) &#x2014;
Type of position embeddings to be used on top of the image features. One of <code>&quot;sine&quot;</code> or <code>&quot;learned&quot;</code>.`,name:"position_embedding_type"},{anchor:"transformers.DeformableDetrConfig.backbone",description:`<strong>backbone</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;resnet50&quot;</code>) &#x2014;
Name of convolutional backbone to use. Supports any convolutional backbone from the timm package. For a
list of all available models, see <a href="https://rwightman.github.io/pytorch-image-models/#load-a-pretrained-model" rel="nofollow">this
page</a>.`,name:"backbone"},{anchor:"transformers.DeformableDetrConfig.dilation",description:`<strong>dilation</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to replace stride with dilation in the last convolutional block (DC5).`,name:"dilation"},{anchor:"transformers.DeformableDetrConfig.class_cost",description:`<strong>class_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the classification error in the Hungarian matching cost.`,name:"class_cost"},{anchor:"transformers.DeformableDetrConfig.bbox_cost",description:`<strong>bbox_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 5) &#x2014;
Relative weight of the L1 error of the bounding box coordinates in the Hungarian matching cost.`,name:"bbox_cost"},{anchor:"transformers.DeformableDetrConfig.giou_cost",description:`<strong>giou_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 2) &#x2014;
Relative weight of the generalized IoU loss of the bounding box in the Hungarian matching cost.`,name:"giou_cost"},{anchor:"transformers.DeformableDetrConfig.mask_loss_coefficient",description:`<strong>mask_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the Focal loss in the panoptic segmentation loss.`,name:"mask_loss_coefficient"},{anchor:"transformers.DeformableDetrConfig.dice_loss_coefficient",description:`<strong>dice_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the DICE/F-1 loss in the panoptic segmentation loss.`,name:"dice_loss_coefficient"},{anchor:"transformers.DeformableDetrConfig.bbox_loss_coefficient",description:`<strong>bbox_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 5) &#x2014;
Relative weight of the L1 bounding box loss in the object detection loss.`,name:"bbox_loss_coefficient"},{anchor:"transformers.DeformableDetrConfig.giou_loss_coefficient",description:`<strong>giou_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 2) &#x2014;
Relative weight of the generalized IoU loss in the object detection loss.`,name:"giou_loss_coefficient"},{anchor:"transformers.DeformableDetrConfig.eos_coefficient",description:`<strong>eos_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Relative classification weight of the &#x2018;no-object&#x2019; class in the object detection loss.`,name:"eos_coefficient"},{anchor:"transformers.DeformableDetrConfig.num_feature_levels",description:`<strong>num_feature_levels</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of input feature levels.`,name:"num_feature_levels"},{anchor:"transformers.DeformableDetrConfig.encoder_n_points",description:`<strong>encoder_n_points</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of sampled keys in each feature level for each attention head in the encoder.`,name:"encoder_n_points"},{anchor:"transformers.DeformableDetrConfig.decoder_n_points",description:`<strong>decoder_n_points</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of sampled keys in each feature level for each attention head in the decoder.`,name:"decoder_n_points"},{anchor:"transformers.DeformableDetrConfig.two_stage",description:`<strong>two_stage</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to apply a two-stage deformable DETR, where the region proposals are also generated by a variant of
Deformable DETR, which are further fed into the decoder for iterative bounding box refinement.`,name:"two_stage"},{anchor:"transformers.DeformableDetrConfig.two_stage_num_proposals",description:`<strong>two_stage_num_proposals</strong> (<code>int</code>, <em>optional</em>, defaults to 300) &#x2014;
The number of region proposals to be generated, in case <code>two_stage</code> is set to <code>True</code>.`,name:"two_stage_num_proposals"},{anchor:"transformers.DeformableDetrConfig.with_box_refine",description:`<strong>with_box_refine</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to apply iterative bounding box refinement, where each decoder layer refines the bounding boxes
based on the predictions from the previous layer.`,name:"with_box_refine"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/deformable_detr/configuration_deformable_detr.py#L29"}}),K=new Tr({props:{anchor:"transformers.DeformableDetrConfig.example",$$slots:{default:[Dn]},$$scope:{ctx:F}}}),ge=new _o({}),_e=new go({props:{name:"class transformers.DeformableDetrModel",anchor:"transformers.DeformableDetrModel",parameters:[{name:"config",val:": DeformableDetrConfig"}],parametersDescription:[{anchor:"transformers.DeformableDetrModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1399"}}),we=new go({props:{name:"forward",anchor:"transformers.DeformableDetrModel.forward",parameters:[{name:"pixel_values",val:""},{name:"pixel_mask",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"encoder_outputs",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"decoder_inputs_embeds",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.DeformableDetrModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it.</p>
<p>Pixel values can be obtained using <a href="/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See <code>AutoFeatureExtractor.__call__()</code> for
details.`,name:"pixel_values"},{anchor:"transformers.DeformableDetrModel.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.DeformableDetrModel.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_queries)</code>, <em>optional</em>) &#x2014;
Not used by default. Can be used to mask object queries.`,name:"decoder_attention_mask"},{anchor:"transformers.DeformableDetrModel.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>tuple(tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) is a sequence of
hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.DeformableDetrModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you
can choose to directly pass a flattened representation of an image.`,name:"inputs_embeds"},{anchor:"transformers.DeformableDetrModel.forward.decoder_inputs_embeds",description:`<strong>decoder_inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an
embedded representation.`,name:"decoder_inputs_embeds"},{anchor:"transformers.DeformableDetrModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DeformableDetrModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DeformableDetrModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17281/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1553",returnDescription:`
<p>A <code>transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"
>DeformableDetrConfig</a>) and inputs.</p>
<ul>
<li><strong>init_reference_points</strong> (<code>torch.FloatTensor</code> of shape  <code>(batch_size, num_queries, 4)</code>) \u2014 Initial reference points sent through the Transformer decoder.</li>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</li>
<li><strong>intermediate_hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(config.decoder_layers, batch_size, num_queries, hidden_size)</code>) \u2014 Stacked intermediate hidden states (output of each layer of the decoder).</li>
<li><strong>intermediate_reference_points</strong> (<code>torch.FloatTensor</code> of shape <code>(config.decoder_layers, batch_size, num_queries, 4)</code>) \u2014 Stacked intermediate reference points (reference points of each layer of the decoder).</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, num_queries, hidden_size)</code>. Hidden-states of the decoder at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, num_queries, num_queries)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the weighted
average in the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_queries, num_heads, 4, 4)</code>.
Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_queries, num_heads, 4, 4)</code>.
Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.</li>
<li><strong>enc_outputs_class</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>, <em>optional</em>, returned when <code>config.with_box_refine=True</code> and <code>config.two_stage=True</code>) \u2014 Predicted bounding boxes scores where the top <code>config.two_stage_num_proposals</code> scoring bounding boxes are
picked as region proposals in the first stage. Output of bounding box binary classification (i.e.
foreground and background).</li>
<li><strong>enc_outputs_coord_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, 4)</code>, <em>optional</em>, returned when <code>config.with_box_refine=True</code> and <code>config.two_stage=True</code>) \u2014 Logits of predicted bounding boxes coordinates in the first stage.</li>
</ul>
`,returnType:`
<p><code>transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ee=new mn({props:{$$slots:{default:[vn]},$$scope:{ctx:F}}}),oe=new Tr({props:{anchor:"transformers.DeformableDetrModel.forward.example",$$slots:{default:[wn]},$$scope:{ctx:F}}}),Te=new _o({}),xe=new go({props:{name:"class transformers.DeformableDetrForObjectDetection",anchor:"transformers.DeformableDetrForObjectDetection",parameters:[{name:"config",val:": DeformableDetrConfig"}],parametersDescription:[{anchor:"transformers.DeformableDetrForObjectDetection.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1766"}}),ke=new go({props:{name:"forward",anchor:"transformers.DeformableDetrForObjectDetection.forward",parameters:[{name:"pixel_values",val:""},{name:"pixel_mask",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"encoder_outputs",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"decoder_inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.DeformableDetrForObjectDetection.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it.</p>
<p>Pixel values can be obtained using <a href="/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See <code>AutoFeatureExtractor.__call__()</code> for
details.`,name:"pixel_values"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_queries)</code>, <em>optional</em>) &#x2014;
Not used by default. Can be used to mask object queries.`,name:"decoder_attention_mask"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>tuple(tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) is a sequence of
hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you
can choose to directly pass a flattened representation of an image.`,name:"inputs_embeds"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.decoder_inputs_embeds",description:`<strong>decoder_inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an
embedded representation.`,name:"decoder_inputs_embeds"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17281/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DeformableDetrForObjectDetection.forward.labels",description:`<strong>labels</strong> (<code>List[Dict]</code> of len <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the
following 2 keys: &#x2018;class_labels&#x2019; and &#x2018;boxes&#x2019; (the class labels and bounding boxes of an image in the batch
respectively). The class labels themselves should be a <code>torch.LongTensor</code> of len <code>(number of bounding boxes in the image,)</code> and the boxes a <code>torch.FloatTensor</code> of shape <code>(number of bounding boxes in the image, 4)</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1809",returnDescription:`
<p>A <code>transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrObjectDetectionOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"
>DeformableDetrConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) \u2014 Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.</li>
<li><strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) \u2014 A dictionary containing the individual losses. Useful for logging.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, num_classes + 1)</code>) \u2014 Classification logits (including no-object) for all queries.</li>
<li><strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <code>post_process</code> to retrieve the unnormalized bounding
boxes.</li>
<li><strong>auxiliary_outputs</strong> (<code>list[Dict]</code>, <em>optional</em>) \u2014 Optional, only returned when auxilary losses are activated (i.e. <code>config.auxiliary_loss</code> is set to <code>True</code>)
and labels are provided. It is a list of dictionaries containing the two above keys (<code>logits</code> and
<code>pred_boxes</code>) for each decoder layer.</li>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, num_queries, hidden_size)</code>. Hidden-states of the decoder at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, num_queries, num_queries)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the weighted
average in the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_queries, num_heads, 4, 4)</code>.
Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, sequence_length, num_heads, 4, 4)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the weighted average
in the self-attention heads.</li>
<li><strong>intermediate_hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(config.decoder_layers, batch_size, num_queries, hidden_size)</code>) \u2014 Stacked intermediate hidden states (output of each layer of the decoder).</li>
<li><strong>intermediate_reference_points</strong> (<code>torch.FloatTensor</code> of shape <code>(config.decoder_layers, batch_size, num_queries, 4)</code>) \u2014 Stacked intermediate reference points (reference points of each layer of the decoder).</li>
<li><strong>init_reference_points</strong> (<code>torch.FloatTensor</code> of shape  <code>(batch_size, num_queries, 4)</code>) \u2014 Initial reference points sent through the Transformer decoder.</li>
<li><strong>enc_outputs_class</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>, <em>optional</em>, returned when <code>config.with_box_refine=True</code> and <code>config.two_stage=True</code>) \u2014 Predicted bounding boxes scores where the top <code>config.two_stage_num_proposals</code> scoring bounding boxes are
picked as region proposals in the first stage. Output of bounding box binary classification (i.e.
foreground and background).</li>
<li><strong>enc_outputs_coord_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, 4)</code>, <em>optional</em>, returned when <code>config.with_box_refine=True</code> and <code>config.two_stage=True</code>) \u2014 Logits of predicted bounding boxes coordinates in the first stage.</li>
</ul>
`,returnType:`
<p><code>transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrObjectDetectionOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),re=new mn({props:{$$slots:{default:[Tn]},$$scope:{ctx:F}}}),ne=new Tr({props:{anchor:"transformers.DeformableDetrForObjectDetection.forward.example",$$slots:{default:[xn]},$$scope:{ctx:F}}}),{c(){c=r("meta"),D=m(),_=r("h1"),u=r("a"),b=r("span"),v(l.$$.fragment),g=m(),z=r("span"),Ho=a("Deformable DETR"),bo=m(),R=r("h2"),X=r("a"),Qe=r("span"),v(le.$$.fragment),Uo=m(),eo=r("span"),Bo=a("Overview"),Do=m(),M=r("p"),Vo=a("The Deformable DETR model was proposed in "),de=r("a"),Xo=a("Deformable DETR: Deformable Transformers for End-to-End Object Detection"),Jo=a(` by Xizhou Zhu, Weijie Su, Lewei Lu, Bin Li, Xiaogang Wang, Jifeng Dai.
Deformable DETR mitigates the slow convergence issues and limited feature spatial resolution of the original `),qe=r("a"),Go=a("DETR"),Zo=a(" by leveraging a new deformable attention module which only attends to a small set of key sampling points around a reference."),vo=m(),Ce=r("p"),Yo=a("The abstract from the paper is the following:"),wo=m(),ze=r("p"),oo=r("em"),Ko=a("DETR has been recently proposed to eliminate the need for many hand-designed components in object detection while demonstrating good performance. However, it suffers from slow convergence and limited feature spatial resolution, due to the limitation of Transformer attention modules in processing image feature maps. To mitigate these issues, we proposed Deformable DETR, whose attention modules only attend to a small set of key sampling points around a reference. Deformable DETR can achieve better performance than DETR (especially on small objects) with 10 times less training epochs. Extensive experiments on the COCO benchmark demonstrate the effectiveness of our approach."),To=m(),Me=r("p"),Qo=a("Tips:"),xo=m(),J=r("ul"),I=r("li"),et=a("One can use the "),Pe=r("a"),ot=a("AutoFeatureExtractor"),tt=a(" API to prepare images (and optional targets) for the model. This will instantiate a "),Ae=r("a"),rt=a("DetrFeatureExtractor"),nt=a(" behind the scenes."),at=m(),L=r("li"),st=a("Training Deformable DETR is equivalent to training the original "),Oe=r("a"),it=a("DETR"),lt=a(" model. Demo notebooks can be found "),ce=r("a"),dt=a("here"),ct=a("."),yo=m(),G=r("img"),$o=m(),Z=r("small"),ft=a("Deformable DETR architecture. Taken from the "),Re=r("a"),mt=a("original paper"),ht=a("."),Eo=m(),P=r("p"),ut=a("This model was contributed by "),fe=r("a"),pt=a("nielsr"),gt=a(". The original code can be found "),me=r("a"),_t=a("here"),bt=a("."),ko=m(),N=r("h2"),Y=r("a"),to=r("span"),v(he.$$.fragment),Dt=m(),ro=r("span"),vt=a("DeformableDetrConfig"),jo=m(),j=r("div"),v(ue.$$.fragment),wt=m(),S=r("p"),Tt=a("This is the configuration class to store the configuration of a "),Ie=r("a"),xt=a("DeformableDetrModel"),yt=a(`. It is used to instantiate
a Deformable DETR model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the Deformable DETR
`),pe=r("a"),$t=a("sensetime/deformable-detr"),Et=a(" architecture."),kt=m(),W=r("p"),jt=a("Configuration objects inherit from "),Le=r("a"),Ft=a("PretrainedConfig"),qt=a(` and can be used to control the model outputs. Read the
documentation from `),Ne=r("a"),Ct=a("PretrainedConfig"),zt=a(" for more information."),Mt=m(),v(K.$$.fragment),Fo=m(),H=r("h2"),Q=r("a"),no=r("span"),v(ge.$$.fragment),Pt=m(),ao=r("span"),At=a("DeformableDetrModel"),qo=m(),E=r("div"),v(_e.$$.fragment),Ot=m(),so=r("p"),Rt=a(`The bare Deformable DETR Model (consisting of a backbone and encoder-decoder Transformer) outputting raw
hidden-states without any specific head on top.`),It=m(),be=r("p"),Lt=a("This model inherits from "),Se=r("a"),Nt=a("PreTrainedModel"),St=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Wt=m(),De=r("p"),Ht=a("This model is also a PyTorch "),ve=r("a"),Ut=a("torch.nn.Module"),Bt=a(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Vt=m(),q=r("div"),v(we.$$.fragment),Xt=m(),U=r("p"),Jt=a("The "),We=r("a"),Gt=a("DeformableDetrModel"),Zt=a(" forward method, overrides the "),io=r("code"),Yt=a("__call__"),Kt=a(" special method."),Qt=m(),v(ee.$$.fragment),er=m(),v(oe.$$.fragment),Co=m(),B=r("h2"),te=r("a"),lo=r("span"),v(Te.$$.fragment),or=m(),co=r("span"),tr=a("DeformableDetrForObjectDetection"),zo=m(),k=r("div"),v(xe.$$.fragment),rr=m(),fo=r("p"),nr=a(`Deformable DETR Model (consisting of a backbone and encoder-decoder Transformer) with object detection heads on
top, for tasks such as COCO detection.`),ar=m(),ye=r("p"),sr=a("This model inherits from "),He=r("a"),ir=a("PreTrainedModel"),lr=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),dr=m(),$e=r("p"),cr=a("This model is also a PyTorch "),Ee=r("a"),fr=a("torch.nn.Module"),mr=a(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),hr=m(),C=r("div"),v(ke.$$.fragment),ur=m(),V=r("p"),pr=a("The "),Ue=r("a"),gr=a("DeformableDetrForObjectDetection"),_r=a(" forward method, overrides the "),mo=r("code"),br=a("__call__"),Dr=a(" special method."),vr=m(),v(re.$$.fragment),wr=m(),v(ne.$$.fragment),this.h()},l(o){const f=gn('[data-svelte="svelte-1phssyn"]',document.head);c=n(f,"META",{name:!0,content:!0}),f.forEach(t),D=h(o),_=n(o,"H1",{class:!0});var je=i(_);u=n(je,"A",{id:!0,class:!0,href:!0});var ho=i(u);b=n(ho,"SPAN",{});var uo=i(b);w(l.$$.fragment,uo),uo.forEach(t),ho.forEach(t),g=h(je),z=n(je,"SPAN",{});var po=i(z);Ho=s(po,"Deformable DETR"),po.forEach(t),je.forEach(t),bo=h(o),R=n(o,"H2",{class:!0});var Fe=i(R);X=n(Fe,"A",{id:!0,class:!0,href:!0});var Er=i(X);Qe=n(Er,"SPAN",{});var kr=i(Qe);w(le.$$.fragment,kr),kr.forEach(t),Er.forEach(t),Uo=h(Fe),eo=n(Fe,"SPAN",{});var jr=i(eo);Bo=s(jr,"Overview"),jr.forEach(t),Fe.forEach(t),Do=h(o),M=n(o,"P",{});var Be=i(M);Vo=s(Be,"The Deformable DETR model was proposed in "),de=n(Be,"A",{href:!0,rel:!0});var Fr=i(de);Xo=s(Fr,"Deformable DETR: Deformable Transformers for End-to-End Object Detection"),Fr.forEach(t),Jo=s(Be,` by Xizhou Zhu, Weijie Su, Lewei Lu, Bin Li, Xiaogang Wang, Jifeng Dai.
Deformable DETR mitigates the slow convergence issues and limited feature spatial resolution of the original `),qe=n(Be,"A",{href:!0});var qr=i(qe);Go=s(qr,"DETR"),qr.forEach(t),Zo=s(Be," by leveraging a new deformable attention module which only attends to a small set of key sampling points around a reference."),Be.forEach(t),vo=h(o),Ce=n(o,"P",{});var Cr=i(Ce);Yo=s(Cr,"The abstract from the paper is the following:"),Cr.forEach(t),wo=h(o),ze=n(o,"P",{});var zr=i(ze);oo=n(zr,"EM",{});var Mr=i(oo);Ko=s(Mr,"DETR has been recently proposed to eliminate the need for many hand-designed components in object detection while demonstrating good performance. However, it suffers from slow convergence and limited feature spatial resolution, due to the limitation of Transformer attention modules in processing image feature maps. To mitigate these issues, we proposed Deformable DETR, whose attention modules only attend to a small set of key sampling points around a reference. Deformable DETR can achieve better performance than DETR (especially on small objects) with 10 times less training epochs. Extensive experiments on the COCO benchmark demonstrate the effectiveness of our approach."),Mr.forEach(t),zr.forEach(t),To=h(o),Me=n(o,"P",{});var Pr=i(Me);Qo=s(Pr,"Tips:"),Pr.forEach(t),xo=h(o),J=n(o,"UL",{});var Po=i(J);I=n(Po,"LI",{});var Ve=i(I);et=s(Ve,"One can use the "),Pe=n(Ve,"A",{href:!0});var Ar=i(Pe);ot=s(Ar,"AutoFeatureExtractor"),Ar.forEach(t),tt=s(Ve," API to prepare images (and optional targets) for the model. This will instantiate a "),Ae=n(Ve,"A",{href:!0});var Or=i(Ae);rt=s(Or,"DetrFeatureExtractor"),Or.forEach(t),nt=s(Ve," behind the scenes."),Ve.forEach(t),at=h(Po),L=n(Po,"LI",{});var Xe=i(L);st=s(Xe,"Training Deformable DETR is equivalent to training the original "),Oe=n(Xe,"A",{href:!0});var Rr=i(Oe);it=s(Rr,"DETR"),Rr.forEach(t),lt=s(Xe," model. Demo notebooks can be found "),ce=n(Xe,"A",{href:!0,rel:!0});var Ir=i(ce);dt=s(Ir,"here"),Ir.forEach(t),ct=s(Xe,"."),Xe.forEach(t),Po.forEach(t),yo=h(o),G=n(o,"IMG",{src:!0,alt:!0,width:!0}),$o=h(o),Z=n(o,"SMALL",{});var Ao=i(Z);ft=s(Ao,"Deformable DETR architecture. Taken from the "),Re=n(Ao,"A",{href:!0});var Lr=i(Re);mt=s(Lr,"original paper"),Lr.forEach(t),ht=s(Ao,"."),Ao.forEach(t),Eo=h(o),P=n(o,"P",{});var Je=i(P);ut=s(Je,"This model was contributed by "),fe=n(Je,"A",{href:!0,rel:!0});var Nr=i(fe);pt=s(Nr,"nielsr"),Nr.forEach(t),gt=s(Je,". The original code can be found "),me=n(Je,"A",{href:!0,rel:!0});var Sr=i(me);_t=s(Sr,"here"),Sr.forEach(t),bt=s(Je,"."),Je.forEach(t),ko=h(o),N=n(o,"H2",{class:!0});var Oo=i(N);Y=n(Oo,"A",{id:!0,class:!0,href:!0});var Wr=i(Y);to=n(Wr,"SPAN",{});var Hr=i(to);w(he.$$.fragment,Hr),Hr.forEach(t),Wr.forEach(t),Dt=h(Oo),ro=n(Oo,"SPAN",{});var Ur=i(ro);vt=s(Ur,"DeformableDetrConfig"),Ur.forEach(t),Oo.forEach(t),jo=h(o),j=n(o,"DIV",{class:!0});var ae=i(j);w(ue.$$.fragment,ae),wt=h(ae),S=n(ae,"P",{});var Ge=i(S);Tt=s(Ge,"This is the configuration class to store the configuration of a "),Ie=n(Ge,"A",{href:!0});var Br=i(Ie);xt=s(Br,"DeformableDetrModel"),Br.forEach(t),yt=s(Ge,`. It is used to instantiate
a Deformable DETR model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the Deformable DETR
`),pe=n(Ge,"A",{href:!0,rel:!0});var Vr=i(pe);$t=s(Vr,"sensetime/deformable-detr"),Vr.forEach(t),Et=s(Ge," architecture."),Ge.forEach(t),kt=h(ae),W=n(ae,"P",{});var Ze=i(W);jt=s(Ze,"Configuration objects inherit from "),Le=n(Ze,"A",{href:!0});var Xr=i(Le);Ft=s(Xr,"PretrainedConfig"),Xr.forEach(t),qt=s(Ze,` and can be used to control the model outputs. Read the
documentation from `),Ne=n(Ze,"A",{href:!0});var Jr=i(Ne);Ct=s(Jr,"PretrainedConfig"),Jr.forEach(t),zt=s(Ze," for more information."),Ze.forEach(t),Mt=h(ae),w(K.$$.fragment,ae),ae.forEach(t),Fo=h(o),H=n(o,"H2",{class:!0});var Ro=i(H);Q=n(Ro,"A",{id:!0,class:!0,href:!0});var Gr=i(Q);no=n(Gr,"SPAN",{});var Zr=i(no);w(ge.$$.fragment,Zr),Zr.forEach(t),Gr.forEach(t),Pt=h(Ro),ao=n(Ro,"SPAN",{});var Yr=i(ao);At=s(Yr,"DeformableDetrModel"),Yr.forEach(t),Ro.forEach(t),qo=h(o),E=n(o,"DIV",{class:!0});var A=i(E);w(_e.$$.fragment,A),Ot=h(A),so=n(A,"P",{});var Kr=i(so);Rt=s(Kr,`The bare Deformable DETR Model (consisting of a backbone and encoder-decoder Transformer) outputting raw
hidden-states without any specific head on top.`),Kr.forEach(t),It=h(A),be=n(A,"P",{});var Io=i(be);Lt=s(Io,"This model inherits from "),Se=n(Io,"A",{href:!0});var Qr=i(Se);Nt=s(Qr,"PreTrainedModel"),Qr.forEach(t),St=s(Io,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Io.forEach(t),Wt=h(A),De=n(A,"P",{});var Lo=i(De);Ht=s(Lo,"This model is also a PyTorch "),ve=n(Lo,"A",{href:!0,rel:!0});var en=i(ve);Ut=s(en,"torch.nn.Module"),en.forEach(t),Bt=s(Lo,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Lo.forEach(t),Vt=h(A),q=n(A,"DIV",{class:!0});var se=i(q);w(we.$$.fragment,se),Xt=h(se),U=n(se,"P",{});var Ye=i(U);Jt=s(Ye,"The "),We=n(Ye,"A",{href:!0});var on=i(We);Gt=s(on,"DeformableDetrModel"),on.forEach(t),Zt=s(Ye," forward method, overrides the "),io=n(Ye,"CODE",{});var tn=i(io);Yt=s(tn,"__call__"),tn.forEach(t),Kt=s(Ye," special method."),Ye.forEach(t),Qt=h(se),w(ee.$$.fragment,se),er=h(se),w(oe.$$.fragment,se),se.forEach(t),A.forEach(t),Co=h(o),B=n(o,"H2",{class:!0});var No=i(B);te=n(No,"A",{id:!0,class:!0,href:!0});var rn=i(te);lo=n(rn,"SPAN",{});var nn=i(lo);w(Te.$$.fragment,nn),nn.forEach(t),rn.forEach(t),or=h(No),co=n(No,"SPAN",{});var an=i(co);tr=s(an,"DeformableDetrForObjectDetection"),an.forEach(t),No.forEach(t),zo=h(o),k=n(o,"DIV",{class:!0});var O=i(k);w(xe.$$.fragment,O),rr=h(O),fo=n(O,"P",{});var sn=i(fo);nr=s(sn,`Deformable DETR Model (consisting of a backbone and encoder-decoder Transformer) with object detection heads on
top, for tasks such as COCO detection.`),sn.forEach(t),ar=h(O),ye=n(O,"P",{});var So=i(ye);sr=s(So,"This model inherits from "),He=n(So,"A",{href:!0});var ln=i(He);ir=s(ln,"PreTrainedModel"),ln.forEach(t),lr=s(So,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),So.forEach(t),dr=h(O),$e=n(O,"P",{});var Wo=i($e);cr=s(Wo,"This model is also a PyTorch "),Ee=n(Wo,"A",{href:!0,rel:!0});var dn=i(Ee);fr=s(dn,"torch.nn.Module"),dn.forEach(t),mr=s(Wo,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Wo.forEach(t),hr=h(O),C=n(O,"DIV",{class:!0});var ie=i(C);w(ke.$$.fragment,ie),ur=h(ie),V=n(ie,"P",{});var Ke=i(V);pr=s(Ke,"The "),Ue=n(Ke,"A",{href:!0});var cn=i(Ue);gr=s(cn,"DeformableDetrForObjectDetection"),cn.forEach(t),_r=s(Ke," forward method, overrides the "),mo=n(Ke,"CODE",{});var fn=i(mo);br=s(fn,"__call__"),fn.forEach(t),Dr=s(Ke," special method."),Ke.forEach(t),vr=h(ie),w(re.$$.fragment,ie),wr=h(ie),w(ne.$$.fragment,ie),ie.forEach(t),O.forEach(t),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify($n)),d(u,"id","deformable-detr"),d(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u,"href","#deformable-detr"),d(_,"class","relative group"),d(X,"id","overview"),d(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X,"href","#overview"),d(R,"class","relative group"),d(de,"href","https://arxiv.org/abs/2010.04159"),d(de,"rel","nofollow"),d(qe,"href","detr"),d(Pe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoFeatureExtractor"),d(Ae,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Oe,"href","detr"),d(ce,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/DETR"),d(ce,"rel","nofollow"),_n(G.src,$r="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/deformable_detr_architecture.png")||d(G,"src",$r),d(G,"alt","drawing"),d(G,"width","600"),d(Re,"href","https://arxiv.org/abs/2010.04159"),d(fe,"href","https://huggingface.co/nielsr"),d(fe,"rel","nofollow"),d(me,"href","https://github.com/fundamentalvision/Deformable-DETR"),d(me,"rel","nofollow"),d(Y,"id","transformers.DeformableDetrConfig"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#transformers.DeformableDetrConfig"),d(N,"class","relative group"),d(Ie,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),d(pe,"href","https://huggingface.co/sensetime/deformable-detr"),d(pe,"rel","nofollow"),d(Le,"href","/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig"),d(Ne,"href","/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"id","transformers.DeformableDetrModel"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#transformers.DeformableDetrModel"),d(H,"class","relative group"),d(Se,"href","/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel"),d(ve,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(ve,"rel","nofollow"),d(We,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"id","transformers.DeformableDetrForObjectDetection"),d(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(te,"href","#transformers.DeformableDetrForObjectDetection"),d(B,"class","relative group"),d(He,"href","/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel"),d(Ee,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Ee,"rel","nofollow"),d(Ue,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,f){e(document.head,c),p(o,D,f),p(o,_,f),e(_,u),e(u,b),T(l,b,null),e(_,g),e(_,z),e(z,Ho),p(o,bo,f),p(o,R,f),e(R,X),e(X,Qe),T(le,Qe,null),e(R,Uo),e(R,eo),e(eo,Bo),p(o,Do,f),p(o,M,f),e(M,Vo),e(M,de),e(de,Xo),e(M,Jo),e(M,qe),e(qe,Go),e(M,Zo),p(o,vo,f),p(o,Ce,f),e(Ce,Yo),p(o,wo,f),p(o,ze,f),e(ze,oo),e(oo,Ko),p(o,To,f),p(o,Me,f),e(Me,Qo),p(o,xo,f),p(o,J,f),e(J,I),e(I,et),e(I,Pe),e(Pe,ot),e(I,tt),e(I,Ae),e(Ae,rt),e(I,nt),e(J,at),e(J,L),e(L,st),e(L,Oe),e(Oe,it),e(L,lt),e(L,ce),e(ce,dt),e(L,ct),p(o,yo,f),p(o,G,f),p(o,$o,f),p(o,Z,f),e(Z,ft),e(Z,Re),e(Re,mt),e(Z,ht),p(o,Eo,f),p(o,P,f),e(P,ut),e(P,fe),e(fe,pt),e(P,gt),e(P,me),e(me,_t),e(P,bt),p(o,ko,f),p(o,N,f),e(N,Y),e(Y,to),T(he,to,null),e(N,Dt),e(N,ro),e(ro,vt),p(o,jo,f),p(o,j,f),T(ue,j,null),e(j,wt),e(j,S),e(S,Tt),e(S,Ie),e(Ie,xt),e(S,yt),e(S,pe),e(pe,$t),e(S,Et),e(j,kt),e(j,W),e(W,jt),e(W,Le),e(Le,Ft),e(W,qt),e(W,Ne),e(Ne,Ct),e(W,zt),e(j,Mt),T(K,j,null),p(o,Fo,f),p(o,H,f),e(H,Q),e(Q,no),T(ge,no,null),e(H,Pt),e(H,ao),e(ao,At),p(o,qo,f),p(o,E,f),T(_e,E,null),e(E,Ot),e(E,so),e(so,Rt),e(E,It),e(E,be),e(be,Lt),e(be,Se),e(Se,Nt),e(be,St),e(E,Wt),e(E,De),e(De,Ht),e(De,ve),e(ve,Ut),e(De,Bt),e(E,Vt),e(E,q),T(we,q,null),e(q,Xt),e(q,U),e(U,Jt),e(U,We),e(We,Gt),e(U,Zt),e(U,io),e(io,Yt),e(U,Kt),e(q,Qt),T(ee,q,null),e(q,er),T(oe,q,null),p(o,Co,f),p(o,B,f),e(B,te),e(te,lo),T(Te,lo,null),e(B,or),e(B,co),e(co,tr),p(o,zo,f),p(o,k,f),T(xe,k,null),e(k,rr),e(k,fo),e(fo,nr),e(k,ar),e(k,ye),e(ye,sr),e(ye,He),e(He,ir),e(ye,lr),e(k,dr),e(k,$e),e($e,cr),e($e,Ee),e(Ee,fr),e($e,mr),e(k,hr),e(k,C),T(ke,C,null),e(C,ur),e(C,V),e(V,pr),e(V,Ue),e(Ue,gr),e(V,_r),e(V,mo),e(mo,br),e(V,Dr),e(C,vr),T(re,C,null),e(C,wr),T(ne,C,null),Mo=!0},p(o,[f]){const je={};f&2&&(je.$$scope={dirty:f,ctx:o}),K.$set(je);const ho={};f&2&&(ho.$$scope={dirty:f,ctx:o}),ee.$set(ho);const uo={};f&2&&(uo.$$scope={dirty:f,ctx:o}),oe.$set(uo);const po={};f&2&&(po.$$scope={dirty:f,ctx:o}),re.$set(po);const Fe={};f&2&&(Fe.$$scope={dirty:f,ctx:o}),ne.$set(Fe)},i(o){Mo||(x(l.$$.fragment,o),x(le.$$.fragment,o),x(he.$$.fragment,o),x(ue.$$.fragment,o),x(K.$$.fragment,o),x(ge.$$.fragment,o),x(_e.$$.fragment,o),x(we.$$.fragment,o),x(ee.$$.fragment,o),x(oe.$$.fragment,o),x(Te.$$.fragment,o),x(xe.$$.fragment,o),x(ke.$$.fragment,o),x(re.$$.fragment,o),x(ne.$$.fragment,o),Mo=!0)},o(o){y(l.$$.fragment,o),y(le.$$.fragment,o),y(he.$$.fragment,o),y(ue.$$.fragment,o),y(K.$$.fragment,o),y(ge.$$.fragment,o),y(_e.$$.fragment,o),y(we.$$.fragment,o),y(ee.$$.fragment,o),y(oe.$$.fragment,o),y(Te.$$.fragment,o),y(xe.$$.fragment,o),y(ke.$$.fragment,o),y(re.$$.fragment,o),y(ne.$$.fragment,o),Mo=!1},d(o){t(c),o&&t(D),o&&t(_),$(l),o&&t(bo),o&&t(R),$(le),o&&t(Do),o&&t(M),o&&t(vo),o&&t(Ce),o&&t(wo),o&&t(ze),o&&t(To),o&&t(Me),o&&t(xo),o&&t(J),o&&t(yo),o&&t(G),o&&t($o),o&&t(Z),o&&t(Eo),o&&t(P),o&&t(ko),o&&t(N),$(he),o&&t(jo),o&&t(j),$(ue),$(K),o&&t(Fo),o&&t(H),$(ge),o&&t(qo),o&&t(E),$(_e),$(we),$(ee),$(oe),o&&t(Co),o&&t(B),$(Te),o&&t(zo),o&&t(k),$(xe),$(ke),$(re),$(ne)}}}const $n={local:"deformable-detr",sections:[{local:"overview",title:"Overview"},{local:"transformers.DeformableDetrConfig",title:"DeformableDetrConfig"},{local:"transformers.DeformableDetrModel",title:"DeformableDetrModel"},{local:"transformers.DeformableDetrForObjectDetection",title:"DeformableDetrForObjectDetection"}],title:"Deformable DETR"};function En(F){return bn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Mn extends hn{constructor(c){super();un(this,c,En,yn,pn,{})}}export{Mn as default,$n as metadata};
